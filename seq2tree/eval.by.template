Unrecognized cmd_option type argument_option
basic_tree_encoder: output_projection/proj_w:0
basic_tree_encoder: output_projection/proj_b:0
softmax_loss: output_projection/proj_w:0
softmax_loss: output_projection/proj_b:0
forward: output_projection/proj_w:0
forward: output_projection/proj_b:0
Reading model parameters from ../model/seq2tree.by.template/translate.ckpt-10
Loading data from ../data/reader/seq2tree.by.template/
Example 1 (1)
Original English: List all *fink* files/directories under current directory
English: list all "*fink*" "files/directories" under current directory
Original Command: find . -name "*fink*" |xargs ls -l
Ground truth: find . -name "*fink*" | xargs ls -l
Prediction: find . -name "*fink*" -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*fink*")
        FLAG(-print)

Example 2 (1)
Original English: create a tar file of all the songs on my system that have been modified in the last 180 days (which is essentially six months)
English: create tar file of all _UNK on system modified in last "_NUM" day ( _UNK "_NUM" month )
Original Command: find . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar
Ground truth: find . -name -type f '*.mp_NUM' -mtime -_NUM -print0 | xargs -0 tar rvf music.tar
Prediction: find / -mtime _NUM -type f -mtime -_NUM -exec ls -l {} ; | xargs -0 ls -l {}
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(/)
            FLAG(-mtime)
                ARGUMENT(_NUM)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(-_NUM)
            FLAG(-exec::;)
                HEADCOMMAND(ls)
                    FLAG(-l)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 3 (1)
Original English: Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files invoking sed as few times as possible
English: find all regular file under "/home/www" and replace every occurrence of "subdomainA.example.com" with "subdomainB.example.com" in file _UNK sed few time _UNK
Original Command: find /home/www/ -type f -exec sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g' {} +
Ground truth: find /home/www/ -type f -exec sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g' {} +
Prediction: find dir -type f -not -name UNK -print0 | xargs -0 grep -c ^.*
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(dir)
            FLAG(-type)
                ARGUMENT(f)
            UNARYLOGICOP(-not)
                FLAG(-name)
                    ARGUMENT(UNK)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(grep)
                FLAG(-c)
                ARGUMENT(^.*)

Example 4 (1)
Original English: Find all files recursively starting from / that have been modified in the past 30 minutes and list them
English: find all file recursively starting from "/" modified in past "_NUM" minute and list
Original Command: find / -mmin -30 -ls
Ground truth: find / -mmin -_NUM -ls
Prediction: find / -mmin -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-mmin)
            ARGUMENT(-_NUM)

Error: -follow is not a flag of find
Example 5 (1)
Original English: display all files in the current folder that belong to a specific user and follow the links i.e, go to the referred location of any symbolic link.
English: display all file in current folder belong to specific user and follow link "i.e" _UNK to _UNK location of any symbolic link
Original Command: find . -follow -uid 0 -print
Ground truth: find . -follow -uid _NUM -print
Prediction: find . -user UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-user)
            ARGUMENT(UNK)

Example 6 (1)
Original English: finda ll the files in the current folder that are modified today.
English: _UNK _UNK file in current folder modified today
Original Command: find ~ -type f -mtime 0 -ls
Ground truth: find ~ -type f -mtime _NUM -ls
Prediction: find . -mtime _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(_NUM)
        FLAG(-print)

Example 7 (1)
Original English: Search the /root directory recursively for the regular file named "myfile" ignoring "work" directories
English: search "/root" directory recursively for regular file named "myfile" ignoring "work" directory
Original Command: find /root/ -name 'work' -prune -o -name myfile -type f -print
Ground truth: find /root/ \( -name 'work' -prune -or -name myfile \) -type f -print
Prediction: find -maxdepth _NUM -type d \( -iname myfile -or -iname myfile \)
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        BINARYLOGICOP(-or)
            FLAG(-iname)
                ARGUMENT(myfile)
            FLAG(-iname)
                ARGUMENT(myfile)

Error: -xdev is not a flag of find
Example 8 (1)
Original English: Search the system for *.rpm files ignoring removable media
English: search system for _UNK file ignoring _UNK medium
Original Command: find / -xdev -name \*.rpm
Ground truth: find / -xdev -name *.rpm
Prediction: find / \( -name UNK -or -name UNK \)
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-name)
                ARGUMENT(UNK)

Example 9 (1)
Original English: change the owner of all the files in the file system which belong to a specific user
English: change owner of all file in file system belong to specific user
Original Command: find -x / -user george -print0 | xargs -0 chown eva
Ground truth: find -x / -user george -print0 | xargs -0 chown eva
Prediction: find / -user bob -ok chown ${USER}:"{}" ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-user)
            ARGUMENT(bob)
        FLAG(-ok::;)
            HEADCOMMAND(chown)
                ARGUMENT(${USER}:"{}")

Error: -newermt is not a flag of find
Example 10 (1)
Original English: find files in /usr directory which are modified after February 1 of the current year
English: find file in "/usr" directory modified after _UNK "_NUM" of current year
Original Command: find /usr -newermt "Feb 1"
Ground truth: find /usr -newermt _LONG_PATTERN
Prediction: find /usr -newer /etc/motd
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/usr)
        FLAG(-newer)
            ARGUMENT(/etc/motd)

Example 11 (1)
Original English: search for a folder "foo" in current directory and display only the sub folders
English: search for folder "foo" in current directory and display only sub folder
Original Command: find . -name foo -type d -prune -o -name foo -print
Ground truth: find . -name foo \( -type d -prune -or -name foo \) -print
Prediction: find . -maxdepth _NUM -name 'onlyme*'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT('onlyme*')

Example 12 (1)
Original English: display all files in the current folder ($@ contains the variables passed as argument to the function)
English: display all file in current folder ( _UNK contains variable passed argument to _UNK )
Original Command: find . -iname "*$@*" -or -iname ".*$@*"
Ground truth: find . \( -iname "*$@*" -or -iname ".*$@*" \)
Prediction: find . -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-iname)
            ARGUMENT(UNK)

Error: -xdev is not a flag of find
Example 13 (1)
Original English: Find all files and directories whose names end in ".rpm", ignoring removable media, such as cdrom, floppy, etc.
English: find all file and directory whose name end in ".rpm" ignoring _UNK medium such _UNK _UNK etc
Original Command: find / -xdev -name \*.rpm
Ground truth: find / -xdev -name *.rpm
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 14 (1)
Original English: Change permissions to 644 for all regular files in and below the current directory
English: change permission to "_NUM" for all regular file in and below current directory
Original Command: find . -type f -print | sed -e 's/^/"/' -e 's/$/"/' | xargs chmod 644
Ground truth: find . -type f -print | sed -e 's/^/"/' -e 's/$/"/' | xargs chmod _NUM
Prediction: find . -type f | xargs chmod -v {}
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            HEADCOMMAND(chmod)
                FLAG(-v)
                ARGUMENT({})

Example 15 (4)
Original English: Search the current directory tree for regular files omitting directory `omit-directory'
English: search current directory tree for regular file omitting directory _UNK
Original Command: find . \( -name omit-directory -prune \) -o \( -type f -print \)
Ground truth: find . \( -name omit-directory -prune -or \( -type f -and -print \) \)
Prediction: find . -type d -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-type)
            ARGUMENT(d)

Example 16 (1)
Original English: Search the current directory tree for directories that can be opened by noone
English: search current directory tree for directory _UNK by _UNK
Original Command: find -type d ! -perm -111
Ground truth: find -type d ! -perm -_NUM
Prediction: find . -type d -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-type)
            ARGUMENT(d)

Example 17 (1)
Original English: Search for 'string_to_find' in all files under current directory
English: search for _UNK in all file under current directory
Original Command: find -type f | sed 's/./\\&/g' | xargs grep string_to_find
Ground truth: find -type f | sed 's/./\\&/g' | xargs grep string_to_find
Prediction: find . -name UNK | xargs grep -I
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(UNK)
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                FLAG(-I)

Example 18 (1)
Original English: Find all files that have the SUID bit set
English: find all file SUID bit set
Original Command: find / -perm -u+s -print
Ground truth: find / -perm -u+s -print
Prediction: find / -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-perm)
            ARGUMENT(-u+s)

Example 19 (1)
Original English: Print the list of the subdirectories of the current directory
English: print list of subdirectory of current directory
Original Command: find . -mindepth 1 -maxdepth 1 -type d -printf "%P\n"
Ground truth: find . -mindepth _NUM -maxdepth _NUM -type d -printf "%P\n"
Prediction: find . -maxdepth _NUM -type d -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Error: -xdev is not a flag of find
Example 20 (1)
Original English: search for *.log files starting from / (root) and only in the current file system
English: search for "*.log" file starting from "/" ( root ) and only in current file system
Original Command: find / -xdev -name "*.log"
Ground truth: find / -xdev -name "*.log"
Prediction: find / -name 'top?????*'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-name)
            ARGUMENT('top?????*')

Example 21 (1)
Original English: Return the list of files named "filename" that are 50 megabytes or larger
English: return list of file named "filename" "_NUM" megabyte or larger
Original Command: find / -size +50M -iname "filename"
Ground truth: find / -size +_NUMM -iname "filename"
Prediction: find / \( -name /proc -or -type f \) -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(/proc)
            FLAG(-type)
                ARGUMENT(f)
        FLAG(-print)

Example 22 (1)
Original English: search for the ip "192.168.1.5" in all the files in /etc folder
English: search for _UNK _UNK in all file in "/etc" folder
Original Command: find /etc/ -iname "*" | xargs grep '192.168.1.5'
Ground truth: find /etc/ -iname "*" | xargs grep '_NUM._NUM._NUM._NUM'
Prediction: find UNK -name UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-print)

Error: -r is not a flag of xargs
Error: -r is not a flag of xargs
n1000 splitted into: -n -1 -0 -0 -0 
Error: -n1000 is not a flag of xargs
Example 23 (5)
Original English: Find all files whose names end with "~" in the /home/peter directory tree, following symlinks, and delete them
English: find all file whose name end with "~" in "/home/peter" directory tree following symlinks and delete
Original Command: find -L /home/peter -name *~ -print0 |xargs -0 -r rm
Ground truth: find -L /home/peter -name *~ -print0 | xargs -0 -r rm
Prediction: find /dir data -delete
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/dir)
        ARGUMENT(data)
        FLAG(-delete)

Quotation Error: space inside word '*[+{;"\\=?~()<>&*|$ ]*'
Example 24 (1)
Original English: Search for file names with "bad" characters in the current directory and delete the files.
English: search for file name with "bad" character in current directory and delete file
Original Command: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Ground truth: find . -name _LONG_PATTERN -maxdepth _NUM -exec rm -f '{}' ;
Prediction: find . -name "*~" -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*~")
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Error: -xdev is not a flag of find
Example 25 (1)
Original English: Find and delete all hard links in the /home directory tree to file1
English: find and delete all hard link in "/home" directory tree to "file_NUM"
Original Command: find /home -xdev -samefile file1 | xargs rm
Ground truth: find /home -xdev -samefile file_NUM | xargs rm
Prediction: find /home -xdev -samefile l -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home)
        FLAG(-xdev)
        FLAG(-samefile)
            ARGUMENT(l)
        FLAG(-print)

Example 26 (1)
Original English: Search the directories matching pattern "/path/to/some/dir/*[0-9]" for level 1 subdirectories
English: search directory matching pattern _UNK for level "_NUM" subdirectory
Original Command: find /path/to/some/dir/*[0-9] -type d -maxdepth 1
Ground truth: find /path/to/some/dir/*[_NUM-_NUM] -type d -maxdepth _NUM
Prediction: find -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -name _NUMc
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT(_NUMc)

Example 27 (1)
Original English: Show ls's detailed output for all files named "something"
English: show _UNK detailed output for all file named "something"
Original Command: find . -name something -exec ls -l {} \;
Ground truth: find . -name something -exec ls -l {} ;
Prediction: find . -name something
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(something)

Example 28 (1)
Original English: Delete all directories in the TBD directory that were modified more than 1 day ago
English: delete all directory in _UNK directory modified more than "_NUM" day ago
Original Command: find /TBD -mtime +1 -type d | xargs rm -f -r
Ground truth: find /TBD -mtime +_NUM -type d | xargs rm -f -r
Prediction: find . -mtime +_NUM -type d -mtime +_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(+_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-mtime)
            ARGUMENT(+_NUM)

Example 29 (1)
Original English: list the files with a name ending with '.mp3' or '.jpg' and beginning with 'foo'
English: list file with name ending with ".mp_NUM" or ".jpg" and beginning with "foo"
Original Command: find . \( -name '*.mp3' -o -name '*.jpg' \) -name 'foo*' -print
Ground truth: find . \( -name '*.mp_NUM' -or -name '*.jpg' \) -name 'foo*' -print
Prediction: find . -name '*.jpg' -printf "%f\n"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT('*.jpg')
        FLAG(-printf)
            ARGUMENT("%f\n")

Example 30 (2)
Original English: display all the files in the folder /home which do not belong to the group test
English: display all file in folder "/home" not belong to group test
Original Command: find /home ! -group test
Ground truth: find /home ! -group test
Prediction: find /home -group test -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home)
        FLAG(-group)
            ARGUMENT(test)
        FLAG(-print)

Example 31 (1)
Original English: display a long list of the files in the current folder which have the word fuddel in all the files in the current folder and then search for the word fiddel in the previously matched files
English: display long list of file in current folder word _UNK in all file in current folder and search for word _UNK in _UNK matched file
Original Command: find -exec grep -q fuddel {} ";" -exec grep -q fiddel {} ";" -ls
Ground truth: find -exec grep -q fuddel {} ; -exec grep -q fiddel {} ; -ls
Prediction: find . -exec grep -i {} ; -exec grep organic {} ; -exec grep -H -i {} ; -exec grep -H -i -exec grep organic {} ; {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-i)
                ARGUMENT({})
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(organic)
                ARGUMENT({})
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-i)
                ARGUMENT({})
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-i)
                    FLAG(-exec::;)
                        HEADCOMMAND(grep)
                            ARGUMENT(organic)
                            ARGUMENT({})
                ARGUMENT({})

Example 32 (2)
Original English: Find all files/directories under $1 which have at least execute permission for their owner and set execute permission for group for these files/directories
English: find all "files/directories" under "$_NUM" at least execute permission for owner and set execute permission for group for "files/directories"
Original Command: find "$1" -perm -u+x -print0 | xargs chmod g+x
Ground truth: find "$_NUM" -perm -u+x -print0 | xargs chmod g+x
Prediction: find /path/to/search -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/path/to/search)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 33 (1)
Original English: Find all *.err files under current directory that are larger than 5120 bytes in size
English: find all _UNK file under current directory larger than "_NUM" byte in size
Original Command: find . -type f -size +10 -name "*.err"
Ground truth: find . -type f -size +_NUM -name "*.err"
Prediction: find . -type f -size -_NUMc
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(-_NUMc)

Example 34 (1)
Original English: Find all files/directories newer than ttt or owned by user 'wn' in entire file system
English: find all "files/directories" newer than ttt or owned by user _UNK in entire file system
Original Command: find / \( -newer ttt -or -user wnj \) -print
Ground truth: find / \( -newer ttt -or -user wnj \) -print
Prediction: find / -user UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-user)
            ARGUMENT(UNK)

Example 35 (1)
Original English: find all text file which contains word Exception
English: find all text file contains word _UNK
Original Command: find . –name "*.txt" –print | xargs grep "Exception"
Ground truth: find . –name "*.txt" –print | xargs grep "Exception"
Prediction: find UNK -name UNK -exec grep UNK ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(UNK)

Example 36 (1)
Original English: display all the files in the entire file system which have set uid bit set.
English: display all file in entire file system set uid bit set
Original Command: find / -perm -u+s -print
Ground truth: find / -perm -u+s -print
Prediction: find / -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-perm)
            ARGUMENT(-u+s)

Example 37 (2)
Original English: Find all empty files in the current directory and delete them
English: find all empty file in current directory and delete
Original Command: find . -maxdepth 1 -type f -empty -delete
Ground truth: find . -maxdepth _NUM -type f -empty -delete
Prediction: find . -empty -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-empty)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 38 (1)
Original English: remove a specific file among a group of specific files
English: remove specific file among group of specific file
Original Command: find . -name "*.pdf" -print | grep -v "^\./pdfs/" | xargs -J X mv X ./pdfs/
Ground truth: find . -name "*.pdf" -print | grep -v "^\./pdfs/" | xargs -J X mv X ./pdfs/
Prediction: find . -name UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-print)

Example 39 (1)
Original English: Find files/directories that does not have write permssion for group or others
English: find "files/directories" doe not write _UNK for group or others
Original Command: find /path ! -perm -022
Ground truth: find /path ! -perm -_NUM
Prediction: find . -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 40 (1)
Original English: change the owner and group of all the normal/regular files in the current folder and /home/admin/data/ to admin & admin
English: change owner and group of all "normal/regular" file in current folder and _UNK to _UNK "&" _UNK
Original Command: find . /home/admin/data/ -type f -exec chown admin.admin {} \;
Ground truth: find . /home/admin/data/ -type f -exec chown admin.admin {} ;
Prediction: find . -type f -exec chown UNK ; | xargs -0 cp
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-exec::;)
                HEADCOMMAND(chown)
                    ARGUMENT(UNK)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(cp)

Error: -newermt is not a flag of find
Error: -newermt is not a flag of find
Example 41 (1)
Original English: List all files in entire file system that are newer than the file $newerthan and older than the file $olderthan in regards of modification time
English: list all file in entire file system newer than file "$newerthan" and older than file "$olderthan" in regard of modification time
Original Command: find / -type f -name "*" -newermt "$newerthan" ! -newermt "$olderthan" -ls
Ground truth: find / -type f -name "*" -newermt "$newerthan" ! -newermt "$olderthan" -ls
Prediction: find -newermt -name -newermt -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-newermt)
        FLAG(-name)
            FLAG(-newermt)
        FLAG(-print)

Example 42 (1)
Original English: check if myfile has 0644 permissions
English: check if myfile ha "_NUM" permission
Original Command: find myfile -perm 0644 -print
Ground truth: find myfile -perm _NUM -print
Prediction: find . -type l
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(l)

Example 43 (1)
Original English: display all instances of "foo.cpp" file in the current folder which are not in the sub directory tree ".svn"
English: display all instance of _UNK file in current folder not in sub directory tree ".svn"
Original Command: find . -name 'foo.cpp' '!' -path '.svn'
Ground truth: find . -name 'foo.cpp' ! -path '.svn'
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Quotation Error: space inside word '/re/ {print;exit}'
Quotation Error: space inside word '/re/ {print;exit}'
Example 44 (2)
Original English: Search for first match of the regex 're' in all *.coffee files under current directory
English: search for first match of regex "re" in all "*.coffee" file under current directory
Original Command: find . -name '*.coffee' -exec awk '/re/ {print;exit}' {} \;
Ground truth: find . -name '*.coffee' -exec awk _LONG_PATTERN {} ;
Prediction: find . -type f -print0 | xargs grep -m ^.*
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                FLAG(-m)
                ARGUMENT(^.*)

Example 45 (2)
Original English: find all the regular/normal files in the folder "/home/www" and replace a pattern in these files
English: find all "regular/normal" file in folder "/home/www" and replace pattern in file
Original Command: find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'
Ground truth: find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'
Prediction: find . -type f | xargs -0 sed 's/previousword/newword/g'
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(sed)
                ARGUMENT('s/previousword/newword/g')

Example 46 (1)
Original English: find all the links in somedirectory and print them in a single line (to avoid the problem of files having newline in their names)
English: find all link in _UNK and print in single line ( to _UNK _UNK of file having newline in name )
Original Command: find "somedir" -type l -print0
Ground truth: find "somedir" -type l -print0
Prediction: find UNK -name UNK | xargs -0 ls -l {}
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(UNK)
            FLAG(-name)
                ARGUMENT(UNK)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 47 (1)
Original English: display a long listing of all the files that begin with the name "Metallica" in the entire file system
English: display long listing of all file begin with name "Metallica" in entire file system
Original Command: find / -name 'Metallica*' -exec ls -l {} \;
Ground truth: find / -name 'Metallica*' -exec ls -l {} ;
Prediction: find / -name 'top?????*'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-name)
            ARGUMENT('top?????*')

Example 48 (2)
Original English: find all normal/regular files in current folder and display the total lines in them
English: find all "normal/regular" file in current folder and display total line in
Original Command: find . -type f -print0 | xargs -0 wc -l
Ground truth: find . -type f -print0 | xargs -0 wc -l
Prediction: find . -type f | xargs -0 sed
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(sed)

Example 49 (1)
Original English: search for the regular/normal file "foo.bar" and force delete it
English: search for "regular/normal" file "foo.bar" and force delete
Original Command: find /home -name foo.bar -type f -exec rm -f "{}" ';'
Ground truth: find /home -name foo.bar -type f -exec rm -f "{}" ;
Prediction: find /work -type f -name "-F" -print -exec rm -f {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/work)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT("-F")
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

ld splitted into: -l -d 
Error: -ld is not a flag of ls
Example 50 (1)
Original English: Print the list of directories residing in the current directory tree
English: print list of directory residing in current directory tree
Original Command: find . -type d -exec ls -ld {} \;
Ground truth: find . -type d -exec ls -l -d {} ;
Prediction: find . -type d -printf "%f\n"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-printf)
            ARGUMENT("%f\n")

Example 51 (1)
Original English: find all files in current folder having the name pattern "some_pattern" and move them to folder target_location (GNU VERSION)
English: find all file in current folder having name pattern "some_pattern" and move to folder "target_location" ( GNU VERSION )
Original Command: find . -name some_pattern -print0 | xargs -0 -I % mv % target_location
Ground truth: find . -name some_pattern -print0 | xargs -0 -I % mv % target_location
Prediction: find . -name some_pattern -print0 | xargs -0 mv
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(some_pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(mv)

Quotation Error: space inside word '*[+{;"\\=?~()<>&*|$ ]*'
Example 52 (1)
Original English: remove all the files in the present directory which have special characters in their name and do not search in the sub directories of the current folder.
English: remove all file in present directory special character in name and not search in sub directory of current folder
Original Command: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Ground truth: find . -name _LONG_PATTERN -maxdepth _NUM -exec rm -f '{}' ;
Prediction: find . -maxdepth _NUM -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 53 (1)
Original English: Find all files named "something" in the current folder and below and run them through the ls -l command, one by one.
English: find all file named "something" in current folder and below and run through l _UNK command "_NUM" by "_NUM"
Original Command: find . -name something -exec ls -l {} \;
Ground truth: find . -name something -exec ls -l {} ;
Prediction: find . -name something | xargs -0 ls
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(something)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)

Example 54 (1)
Original English: find all the files in the entire file system that have been changed exactly  60 days  and display ten files
English: find all file in entire file system changed exactly "_NUM" day and display "_NUM" file
Original Command: find / -cmin -60 | head
Ground truth: find / -cmin -_NUM | head
Prediction: find / -mtime _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-mtime)
            ARGUMENT(_NUM)

Error: -xdev is not a flag of find
Example 55 (1)
Original English: Find all files, starting from / but ignoring removable media, whose names end with ".rpm"
English: find all file starting from "/" but ignoring _UNK medium whose name end with ".rpm"
Original Command: find / -xdev -name "*.rpm"
Ground truth: find / -xdev -name "*.rpm"
Prediction: find / -name game
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-name)
            ARGUMENT(game)

Warning: -exec missing ending ';'
Example 56 (1)
Original English: display long listing of all the files in the folder "/myfiles"
English: display long listing of all file in folder "/myfiles"
Original Command: find /myfiles -exec ls -l {} ;
Ground truth: find /myfiles -exec ls -l {} \;
Prediction: find /myfiles -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/myfiles)
        FLAG(-name)
            ARGUMENT(UNK)

Example 57 (1)
Original English: Delete all files that have not been accessed in the last 30 days
English: delete all file not accessed in last "_NUM" day
Original Command: find . -type f -atime +30 -exec rm {} \;
Ground truth: find . -type f -atime +_NUM -exec rm {} ;
Prediction: find . -atime +_NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-atime)
            ARGUMENT(+_NUM)
        FLAG(-print)

Hin splitted into: -H -i -n 
Error: -Hin is not a flag of grep
Example 58 (1)
Original English: find a specific word in all the php and html files in the current folder and display the matched line along with the file name.
English: find specific word in all php and html file in current folder and display matched line along with file name
Original Command: find . \( -name "*.php" -o -name "*.html" \) -print0 | xargs -0 grep -Hin "joomla"
Ground truth: find . \( -name "*.php" -or -name "*.html" \) -print0 | xargs -0 grep -H -i -n "joomla"
Prediction: find . -type f -name *.php -exec sed -i {} ; | xargs -0 grep -c ^.*
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(*.php)
            FLAG(-exec::;)
                HEADCOMMAND(sed)
                    FLAG(-i)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(grep)
                FLAG(-c)
                ARGUMENT(^.*)

Example 59 (1)
Original English: Find all /path/to/check/* regular files without descending into any directory
English: find all _UNK regular file without descending into any directory
Original Command: find /path/to/check/* -maxdepth 0 -type f
Ground truth: find /path/to/check/* -maxdepth _NUM -type f
Prediction: find . -maxdepth _NUM -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)

Example 60 (1)
Original English: find all files  that names are 'apt' and display detailed list
English: find all file name "apt" and display detailed list
Original Command: find  / -name "apt" -ls
Ground truth: find / -name "apt" -ls
Prediction: find / -iname "apt"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-iname)
            ARGUMENT("apt")

Example 61 (1)
Original English: display all mp3 files in the file system which have not been accessed in the last 24 hours
English: display all "mp_NUM" file in file system not accessed in last "_NUM" hour
Original Command: find / -name “*.mp3” -atime +01 -type f
Ground truth: find / -name “*.mp_NUM” -atime +_NUM -type f
Prediction: find / -type f -atime +_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(+_NUM)

Error: -t is not a flag of cp
Example 62 (1)
Original English: Find all files/directories under .. directory and copy them to ~/foo/bar
English: find all "files/directories" under "." directory and copy to "~/foo/bar"
Original Command: find .. -exec cp -t ~/foo/bar -- {} +
Ground truth: find .. -exec cp -t ~/foo/bar {} +
Prediction: find . -name '*.cgi' -print0 | xargs cp -t --target-directory=dir_txt/
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT('*.cgi')
            FLAG(-print0)
        HEADCOMMAND(xargs)
            HEADCOMMAND(cp)
                FLAG(-t)
                FLAG(--target-directory=dir_txt/)

Example 63 (1)
Original English: Find all files in the current directory tree that are not newer than some_file
English: find all file in current directory tree not newer than _UNK
Original Command: find . ! -newer some_file
Ground truth: find . ! -newer some_file
Prediction: find . -not -newer UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            FLAG(-newer)
                ARGUMENT(UNK)

Example 64 (1)
Original English: Find all *.c files in /usr/src bigger than 100k
English: find all "*.c" file in "/usr/src" bigger than "_NUMk"
Original Command: find /usr/src -name '*.c' -size +100k -print
Ground truth: find /usr/src -name '*.c' -size +_NUMk -print
Prediction: find . -type f -not -name modules
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(modules)

Example 65 (1)
Original English: Find files/directories that does not have write permssion for group and others
English: find "files/directories" doe not write _UNK for group and others
Original Command: find /path ! -perm /022
Ground truth: find /path ! -perm /_NUM
Prediction: find . -not -name '*macs'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT('*macs')

Example 66 (1)
Original English: find all the files in the current folder which have a specific permission
English: find all file in current folder specific permission
Original Command: find . -perm 777 -print
Ground truth: find . -perm _NUM -print
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 67 (1)
Original English: Search the regular files of the current directory tree for string "stuff"
English: search regular file of current directory tree for string _UNK
Original Command: find . -type f -exec grep -n "stuff" {} \; -print
Ground truth: find . -type f -exec grep -n "stuff" {} ; -print
Prediction: find . -type f -name UNK -exec grep -c {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-c)
                ARGUMENT({})

tr splitted into: -t -r 
Error: -tr is not a flag of ls
Example 68 (1)
Original English: search for the oldest tgz or gz file in a folder and force delete it
English: search for oldest tgz or gz file in folder and force delete
Original Command: ls -tr $(find /home/backups -name '*.gz' -o -name '*.tgz')|head -1|xargs rm -f
Ground truth: ls -t -r $( find /home/backups \( -name '*.gz' -or -name '*.tgz' \) ) | head -_NUM | xargs rm -f
Prediction: find . -type f -name UNK -exec rm {} ; | xargs -0 grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(rm)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(grep)
                FLAG(-c)

Example 69 (1)
Original English: replace a word in all the regular/normal files in the current folder(doesn't actually modify the original file just displays the replaced text)
English: replace word in all "regular/normal" file in current folder( _UNK _UNK _UNK original file just display _UNK text )
Original Command: find . -type f -print0 | xargs -0 sed -i 's/Application/whatever/g'
Ground truth: find . -type f -print0 | xargs -0 sed -i 's/Application/whatever/g'
Prediction: find . -type f -exec sed -i UNK {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(sed)
                FLAG(-i)
                    ARGUMENT(UNK)
                ARGUMENT({})

Example 70 (1)
Original English: Finding files which contain "some string" using find  and grep, without showing the matching line
English: finding file contain _LONG_PATTERN using find and grep without _UNK matching line
Original Command: find . -type f -print0 | xargs -0 grep -l "some string"
Ground truth: find . -type f -print0 | xargs -0 grep -l _LONG_PATTERN
Prediction: find . -type f -name UNK -exec grep -l UNK ; | xargs grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-l)
                    ARGUMENT(UNK)
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                FLAG(-c)

Example 71 (1)
Original English: find all files with a specific permission in a folder and save the output to a variable
English: find all file with specific permission in folder and save output to variable
Original Command: files="$(find $dir -perm 755)"
Ground truth: find $dir -perm _NUM
Prediction: find . -perm /g=s | xargs -0 chmod _NUM
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-perm)
                ARGUMENT(/g=s)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(chmod)
                ARGUMENT(_NUM)

Example 72 (2)
Original English: Find all .sh files in or below the current directory and move them to folder ~/back.scripts
English: find all ".sh" file in or below current directory and move to folder _UNK
Original Command: find . -name "*.sh" -print0 | xargs -0 -I {} mv {} ~/back.scripts
Ground truth: find . -name "*.sh" -print0 | xargs -0 -I {} mv {} ~/back.scripts
Prediction: find . -name test-a -exec mv {} test-_NUM ; | xargs -0 mv
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(test-a)
            FLAG(-exec::;)
                HEADCOMMAND(mv)
                    ARGUMENT({})
                    ARGUMENT(test-_NUM)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(mv)

Error: -xdev is not a flag of find
Example 73 (1)
Original English: search for all the rpm files in the file system which reside in the same partition as that of the root
English: search for all _UNK file in file system reside in same partition of root
Original Command: find / -xdev -name "*.rpm"
Ground truth: find / -xdev -name "*.rpm"
Prediction: find / -xdev -name UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-xdev)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-print)

nr splitted into: -n -r 
Error: -nr is not a flag of sort
Example 74 (1)
Original English: Find all files under current directory with their size and paths, reverse sort them numerically, then print the 2nd field (with space as the delimiter) of the first 4 entries
English: find all file under current directory with size and path reverse sort numerically print "_NUMnd" field ( with space delimiter ) of first "_NUM" entry
Original Command: find -type f -printf "%s %p\n" | sort -nr | head -n 4 | awk "{print $2}"
Ground truth: find -type f -printf _LONG_PATTERN | sort -n -r | head -n _NUM | awk _LONG_PATTERN
Prediction: find "$dir" -type f -printf _LONG_PATTERN | xargs -0 ls -l -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t -t
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT("$dir")
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(_LONG_PATTERN)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)
                FLAG(-t)

Example 75 (1)
Original English: find all the files in current folder ending with "ini" and search for a word in all these files
English: find all file in current folder ending with _UNK and search for word in all file
Original Command: find . -name *.ini -exec grep -w PROJECT_A {} \; -print | grep ini
Ground truth: find . -name *.ini -exec grep -w PROJECT_A {} ; -print | grep ini
Prediction: find . -exec grep -i {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-i)
                ARGUMENT({})

Example 76 (1)
Original English: Find user daniel's files of type jpeg without `autumn' in the name
English: find user _UNK file of type jpeg without _UNK in name
Original Command: find . -user daniel -type f -name *.jpg ! -name autumn*
Ground truth: find . -user daniel -type f -name *.jpg ! -name autumn*
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 77 (1)
Original English: Find all regular files in the current directory tree that are not readable by anyone
English: find all regular file in current directory tree not readable by _UNK
Original Command: find . -type f ! -perm -444
Ground truth: find . -type f ! -perm -_NUM
Prediction: find . -type f ! find . -type f -type f -not -name "*fink*" -prune
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(!)
            HEADCOMMAND(find)
                ARGUMENT(.)
                FLAG(-type)
                    ARGUMENT(f)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT("*fink*")

Example 78 (2)
Original English: Move all *.php~ (case insensitive) files under current directory to /mydir
English: move all _UNK ( case insensitive ) file under current directory to "/mydir"
Original Command: find . -iname "*.php~" -exec mv "{}" /mydir +;
Ground truth: find . -iname "*.php~" -exec mv "{}" /mydir +
Prediction: find . -iname '*.cgi' | xargs -0 cp
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-iname)
                ARGUMENT('*.cgi')
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(cp)

Example 79 (2)
Original English: Back up all *.txt files/directories in new files/directories with a .bak extension in their names under /etc directory
English: back up all "*.txt" "files/directories" in new "files/directories" with ".bak" extension in name under "/etc" directory
Original Command: find /etc -name "*.txt" | xargs -I {} mv {} {}.bak
Ground truth: find /etc -name "*.txt" | xargs -I {} mv {} {}.bak
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 80 (1)
Original English: display all the files in current folder which have specific  permission
English: display all file in current folder specific permission
Original Command: find -perm 664
Ground truth: find -perm _NUM
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Error: -h is not a flag of chown
Example 81 (1)
Original English: change the owner of the files which belong to the group 1000 to username and modify only the symbolic link not the originally pointed file
English: change owner of file belong to group "_NUM" to _UNK and _UNK only symbolic link not _UNK pointed file
Original Command: find -gid 1000 -exec chown -h :username {} \;
Ground truth: find -gid _NUM -exec chown -h :username {} ;
Prediction: find . -not -name UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)
        FLAG(-print)

Example 82 (1)
Original English: display long listing of all files in the current directory whose size is 24 or 25 bytes (doesnt display inode information) .
English: display long listing of all file in current directory whose size "_NUM" or "_NUM" byte ( _UNK display inode information )
Original Command: find . -size -26c -size +23c -exec ls -l '{}' \;
Ground truth: find . -size -_NUMc -size +_NUMc -exec ls -l '{}' ;
Prediction: find . -maxdepth _NUM -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Error: -newermt is not a flag of find
Example 83 (1)
Original English: list files in /usr modified after February 1 of the current year
English: list file in "/usr" modified after _UNK "_NUM" of current year
Original Command: find /usr -newermt "Feb 1"
Ground truth: find /usr -newermt _LONG_PATTERN
Prediction: find /usr -newer UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/usr)
        FLAG(-newer)
            ARGUMENT(UNK)

Error: -r is not a flag of xargs
Error: -r is not a flag of xargs
ld splitted into: -l -d 
Error: -ld is not a flag of ls
Example 84 (3)
Original English: List all files from the current directory tree that were modified less than 60 minutes ago
English: list all file from current directory tree modified le than "_NUM" minute ago
Original Command: find . -mmin -60 | xargs -r ls -l
Ground truth: find . -mmin -_NUM | xargs -r ls -l
Prediction: find -mmin -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-mmin)
            ARGUMENT(-_NUM)

algd splitted into: -a -l -g -d 
Error: -algd is not a flag of ls
Example 85 (1)
Original English: display a long listing of all the directories in the current folder
English: display long listing of all directory in current folder
Original Command: find . -type d -exec ls -algd {} \;
Ground truth: find . -type d -exec ls -a -l -g -d {} ;
Prediction: find . -type d -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 86 (1)
Original English: Remove all *.bak files under current directory
English: remove all "*.bak" file under current directory
Original Command: find . -type f -name \*.bak -print0 | xargs -0 rm -v
Ground truth: find . -type f -name *.bak -print0 | xargs -0 rm -v
Prediction: find . -maxdepth _NUM -type f -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 87 (1)
Original English: Remove all "core" regular files in the /tmp/ directory tree
English: remove all "core" regular file in "/tmp/" directory tree
Original Command: find /tmp -name core -type f -print | xargs /bin/rm -f
Ground truth: find /tmp -name core -type f -print | xargs rm -f
Prediction: find /tmp/ -type f -name "*.tmp" -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/tmp/)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT("*.tmp")
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Quotation Error: space inside word '*[+{;"\\=?~()<>&*|$ ]*'
Example 88 (1)
Original English: Delete files containing whitespaces without recursion
English: delete file containing whitespaces without _UNK
Original Command: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Ground truth: find . -name _LONG_PATTERN -maxdepth _NUM -exec rm -f '{}' ;
Prediction: find . -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 89 (1)
Original English: Find empty regular files in /dir and its subdirectories
English: find empty regular file in "/dir" and subdirectory
Original Command: find /dir -type f -size 0 -print
Ground truth: find /dir -type f -size _NUM -print
Prediction: find . -type d -empty
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Example 90 (1)
Original English: Change permissions to 644 for all files showing the respective chmod command
English: change permission to "_NUM" for all file _UNK _UNK chmod command
Original Command: find ./ -type f -print0 | xargs -t -0 chmod -v 644
Ground truth: find ./ -type f -print0 | xargs -t -0 chmod -v _NUM
Prediction: find . -name '*macs' -exec chmod _NUM {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT('*macs')
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(_NUM)
                ARGUMENT({})

Example 91 (1)
Original English: Search file /etc/logs/Server.log for lines containing "Error"
English: search file _UNK for line containing _UNK
Original Command: find /etc/logs/Server.log -exec grep Error {} \; -print
Ground truth: find /etc/logs/Server.log -exec grep Error {} ; -print
Prediction: find . -name UNK -exec grep -c {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-c)
                ARGUMENT({})

Error: -follow is not a flag of find
al splitted into: -a -l 
Error: -al is not a flag of ls
Quotation Error: space inside word ' NF==9 { print $3 }'
Example 92 (1)
Original English: Find the unique owners of all the files in the /bin directory
English: find _UNK owner of all file in _UNK directory
Original Command: find /bin -type f -follow | xargs    ls -al | awk ' NF==9 { print $3 }'|sort -u
Ground truth: find /bin -type f -follow | xargs ls -a -l | awk _LONG_PATTERN | sort -u
Prediction: find UNK -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-iname)
            ARGUMENT(UNK)

Example 93 (1)
Original English: Find all files larger than 10 megabytes (10485760 bytes) within /home.
English: find all file larger than "_NUM" megabyte ( "_NUM" byte ) within "/home"
Original Command: find /home -type f -size +10485760c -print
Ground truth: find /home -type f -size +_NUMc -print
Prediction: find . -size +_NUMc
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-size)
            ARGUMENT(+_NUMc)

Example 94 (1)
Original English: Find all regular files in the current directory tree that are not readable by all
English: find all regular file in current directory tree not readable by all
Original Command: find -type f ! -perm -444
Ground truth: find -type f ! -perm -_NUM
Prediction: find . -type f -maxdepth _NUM -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Warning: -exec missing ending ';'
Example 95 (1)
Original English: Update the archived copy of the home directory, "alldata.tar"
English: update _UNK copy of home directory _UNK
Original Command: find ~/ -newer alldata.tar -exec tar uvf alldata.tar {} ;
Ground truth: find ~/ -newer alldata.tar -exec tar uvf alldata.tar {} \;
Prediction: find UNK -type d -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(UNK)

Quotation Error: space inside word 's#.*/#   #'
Example 96 (1)
Original English: Find all files in $dir directory without going into sub-directories and print only their names preceded by 3 spaces
English: find all file in "$dir" directory without going into sub-directories and print only name _UNK by "_NUM" space
Original Command: find "$dir" -maxdepth 1 -type f | sed 's#.*/#   #'
Ground truth: find "$dir" -maxdepth _NUM -type f | sed _LONG_PATTERN
Prediction: find "$dir" -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -name "bar" -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT("$dir")
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT("bar")
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)

Example 97 (1)
Original English: display all directories in vim folder do not search in sub directories
English: display all directory in vim folder not search in sub directory
Original Command: find .vim/ -maxdepth 1 -type d
Ground truth: find .vim/ -maxdepth _NUM -type d
Prediction: find -version -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-version)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Example 98 (1)
Original English: display all the files in the /usr folder which have the permissions 777
English: display all file in "/usr" folder permission "_NUM"
Original Command: find /usr -perm 0777 -print
Ground truth: find /usr -perm _NUM -print
Prediction: find /usr -perm UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/usr)
        FLAG(-perm)
            ARGUMENT(UNK)
        FLAG(-print)

rf splitted into: -r -f 
Error: -rf is not a flag of rm
Example 99 (1)
Original English: search for a directory in the current folder and delete it
English: search for directory in current folder and delete
Original Command: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Ground truth: find /usr/ports/ -name work -type d -print -exec rm -r -f {} ;
Prediction: find . -type d -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 100 (1)
Original English: find all the files ending with "rb" and display the first 10000 lines from these files.
English: find all file ending with "rb" and display first "_NUM" line from file
Original Command: find . -name "*rb" -print0 | xargs -0 head -10000
Ground truth: find . -name "*rb" -print0 | xargs -0 head -_NUM
Prediction: find . -name 'top?????*' -exec mv {} ; | xargs -0 ls -l -t
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT('top?????*')
            FLAG(-exec::;)
                HEADCOMMAND(mv)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-t)

Example 101 (1)
Original English: Find all directories in the current directory tree that do not have `execute' permissions for anyone
English: find all directory in current directory tree not _UNK permission for _UNK
Original Command: find . -type d ! -perm -111
Ground truth: find . -type d ! -perm -_NUM
Prediction: find . -type d -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 102 (1)
Original English: Remove all files 'a.out' and *.o in the home directory tree that were accessed more than 7 days ago
English: remove all file "a.out" and "*.o" in home directory tree accessed more than "_NUM" day ago
Original Command: find $HOME \( -name a.out -o -name '*.o' \) -atime +7 -exec rm {} \;
Ground truth: find $HOME \( -name a.out -or -name '*.o' \) -atime +_NUM -exec rm {} ;
Prediction: find ~/ -atime +_NUM -type f -atime +_NUM -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(~/)
        FLAG(-atime)
            ARGUMENT(+_NUM)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(+_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 103 (1)
Original English: The file must have a name ending with .mp3 or .jpg. In addition, it must have a name beginning with foo.
English: file name ending with ".mp_NUM" or ".jpg" in _UNK name beginning with foo
Original Command: find . \( -name '*.mp3' -o -name '*.jpg' \) -name 'foo*' -print
Ground truth: find . \( -name '*.mp_NUM' -or -name '*.jpg' \) -name 'foo*' -print
Prediction: find . -iname UNK -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-iname)
            ARGUMENT(UNK)
        FLAG(-iname)
            ARGUMENT(UNK)

Example 104 (1)
Original English: search for a cpp directory in current folder and display all its files
English: search for cpp directory in current folder and display all file
Original Command: find . -type d -name "cpp" -exec find {} -type f \;
Ground truth: find . -type d -name "cpp" -exec find {} -type f ;
Prediction: find . -type d -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Example 105 (1)
Original English: Find directories in the current directory recursively that are not "executable" by all
English: find directory in current directory recursively not _UNK by all
Original Command: find -type d ! -perm -111
Ground truth: find -type d ! -perm -_NUM
Prediction: find . -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Error: -xdev is not a flag of find
li splitted into: -l -i 
Error: -li is not a flag of grep
Example 106 (1)
Original English: Find regular files under / that contain "stringtofind"
English: find regular file under "/" contain "stringtofind"
Original Command: find / -maxdepth 1 -xdev -type f  -exec grep -li stringtofind '{}' \;
Ground truth: find / -maxdepth _NUM -xdev -type f -exec grep -l -i stringtofind '{}' ;
Prediction: find / -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-type)
            ARGUMENT(f)

Example 107 (1)
Original English: find all the files in a directory with specific permissions
English: find all file in directory with specific permission
Original Command: find "$directory" -perm "$permissions"
Ground truth: find "$directory" -perm "$permissions"
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 108 (1)
Original English: display the count of regular files in a folder which have specific permission to the owner
English: display count of regular file in folder specific permission to owner
Original Command: find home/magie/d2 -type f -perm -u+rx | wc -l
Ground truth: find home/magie/d_NUM -type f -perm -u+rx | wc -l
Prediction: find . -type f -perm _NUM -print | xargs -0 ls -l
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-perm)
                ARGUMENT(_NUM)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)

Example 109 (1)
Original English: list all the files in the file system excluding proc folder and excluding symbolic links which have write permission for the user
English: list all file in file system excluding _UNK folder and excluding symbolic link write permission for user
Original Command: find / -path /proc -prune -o -perm -2 ! -type l -ls
Ground truth: find / \( -path /proc -prune -or -perm -_NUM \) ! -type l -ls
Prediction: find . -type l -not -name aa -prune -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(l)
        UNARYLOGICOP(-not)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(aa)
        FLAG(-print)

Error: --parents is not a flag of cp
Example 110 (1)
Original English: Copy all files in current directory that do not match */exlude-path/* in their paths to /destination/ preserving directory structure
English: copy all file in current directory not match _UNK in path to _UNK _UNK directory structure
Original Command: find . -type f -not -path '*/exlude-path/*' -exec cp --parents '{}' '/destination/' \;
Ground truth: find . -type f -not -path '*/exlude-path/*' -exec cp --parents '{}' '/destination/' ;
Prediction: find . -maxdepth _NUM -path UNK -prune | xargs -0 ls -l -d
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-maxdepth)
                ARGUMENT(_NUM)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(UNK)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)

Example 111 (1)
Original English: find all regular/normal files in the current folder that have been modified in the last 120 hours
English: find all "regular/normal" file in current folder modified in last "_NUM" hour
Original Command: find -mtime -5 -type f -print
Ground truth: find -mtime -_NUM -type f -print
Prediction: find . -mtime _NUM -type f -mtime _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(_NUM)

Example 112 (1)
Original English: search for all the mp3 files in the file system and move them to the folder /mnt/mp3
English: search for all "mp_NUM" file in file system and move to folder "/mnt/mp_NUM"
Original Command: find / -iname "*.mp3" -exec mv {} /mnt/mp3 \;
Ground truth: find / -iname "*.mp_NUM" -exec mv {} /mnt/mp_NUM ;
Prediction: find / -iname "*.mp_NUM" -type f -exec mv {} test-_NUM ; | xargs -0 mv
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(/)
            FLAG(-iname)
                ARGUMENT("*.mp_NUM")
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-exec::;)
                HEADCOMMAND(mv)
                    ARGUMENT({})
                    ARGUMENT(test-_NUM)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(mv)

Example 113 (1)
Original English: Search all files in the current directory tree, except GIT files, for "string-to-search"
English: search all file in current directory tree except GIT file for _UNK
Original Command: find . -name .git -prune -o -print | xargs grep "string-to-search"
Ground truth: find . \( -name .git -prune -or -print \) | xargs grep "string-to-search"
Prediction: find . -name UNK -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 114 (1)
Original English: Remove empty directories from the current directory tree
English: remove empty directory from current directory tree
Original Command: find . -depth -empty -type d -delete
Ground truth: find . -depth -empty -type d -delete
Prediction: find . -maxdepth _NUM -type d -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Example 115 (1)
Original English: List all files except for those in directory SCCS
English: list all file except for in directory SCCS
Original Command: find . -print -o -name SCCS -prune
Ground truth: find . \( -print -or -name SCCS -prune \)
Prediction: find . -not -name UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)
        FLAG(-print)

Example 116 (1)
Original English: Find all *.* directories under /home/feeds/data directory
English: find all _UNK directory under "/home/feeds/data" directory
Original Command: find /home/feeds/data -type d \( -name 'def/incoming' -o -name '456/incoming' -o -name arkona \) -prune -o -name '*.*' -print
Ground truth: find /home/feeds/data -type d \( -name 'def/incoming' -or -name '_NUM/incoming' -or -name arkona \) \( -prune -or -name '*.*' \) -print
Prediction: find mydir -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(mydir)
        FLAG(-type)
            ARGUMENT(d)

Example 117 (1)
Original English: Search the current directory tree for regular files that can be read by noone
English: search current directory tree for regular file read by _UNK
Original Command: find -type f ! -perm -444
Ground truth: find -type f ! -perm -_NUM
Prediction: find . -type f -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-type)
            ARGUMENT(f)

Example 118 (1)
Original English: Find files with a name ending with .mp3 or .jpg. In addition, it must have a name beginning with foo.
English: find file with name ending with ".mp_NUM" or ".jpg" in _UNK name beginning with foo
Original Command: find . \( -name '*.mp3' -o -name '*.jpg' \) -name 'foo*' -print
Ground truth: find . \( -name '*.mp_NUM' -or -name '*.jpg' \) -name 'foo*' -print
Prediction: find . -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-iname)
            ARGUMENT(UNK)

Example 119 (1)
Original English: Find all empty directories in the current one and delete them
English: find all empty directory in current "_NUM" and delete
Original Command: find . -type d -maxdepth 1 -empty -delete
Ground truth: find . -type d -maxdepth _NUM -empty -delete
Prediction: find . -maxdepth _NUM -type d -empty
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Example 120 (1)
Original English: change the owner and group of all the directories in the current folder and /home/admin/data/ to admin & admin
English: change owner and group of all directory in current folder and _UNK to _UNK "&" _UNK
Original Command: find . /home/admin/data/ -type d -exec chown admin.admin {} \;
Ground truth: find . /home/admin/data/ -type d -exec chown admin.admin {} ;
Prediction: find . -exec chown UNK ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(UNK)

Example 121 (1)
Original English: Find files owned by nonexistent groups
English: find file owned by _UNK group
Original Command: find / -nogroup -print
Ground truth: find / -nogroup -print
Prediction: find / -group UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-group)
            ARGUMENT(UNK)
        FLAG(-print)

Example 122 (1)
Original English: List all *.bak files in the current directory tree
English: list all "*.bak" file in current directory tree
Original Command: find  . -name '*.bak' -ls
Ground truth: find . -name '*.bak' -ls
Prediction: find . -type f -name "*fink*"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT("*fink*")

Example 123 (1)
Original English: Delete all files in the "${S}/bundled-libs" folder except "libbass.so"
English: delete all file in _UNK folder except _UNK
Original Command: find "${S}/bundled-libs" \! -name 'libbass.so' -delete
Ground truth: find "${S}/bundled-libs" ! -name 'libbass.so' -delete
Prediction: find . -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 124 (1)
Original English: Change permissions to 755 for all subdirectories of the current directory
English: change permission to "_NUM" for all subdirectory of current directory
Original Command: find . -type d -print | sed -e 's/^/"/' -e 's/$/"/' | xargs chmod 755
Ground truth: find . -type d -print | sed -e 's/^/"/' -e 's/$/"/' | xargs chmod _NUM
Prediction: find . -type d -mtime _NUM -exec chmod _NUM {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-mtime)
            ARGUMENT(_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(_NUM)
                ARGUMENT({})

Example 125 (1)
Original English: Find files/directories under current directory that matches './projects/insanewebproject' in their paths
English: find "files/directories" under current directory match _UNK in path
Original Command: find -ipath './projects/insanewebproject'
Ground truth: find -ipath './projects/insanewebproject'
Prediction: find . -path UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-path)
            ARGUMENT(UNK)

Example 126 (1)
Original English: copy all java files from current folder to another folder
English: copy all java file from current folder to another folder
Original Command: find . -name "*.java" -print0 | xargs -0 -J % cp % destinationFolder
Ground truth: find . -name "*.java" -print0 | xargs -0 -J % cp % destinationFolder
Prediction: find . -name "*.java" -exec cp {} /tmp/MusicFiles ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*.java")
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(/tmp/MusicFiles)

Example 127 (1)
Original English: display all the regular/normal files in the current folder excluding the files with the name mmm
English: display all "regular/normal" file in current folder excluding file with name _UNK
Original Command: find . -name mmm -prune -o -type f -print
Ground truth: find . \( -name mmm -prune -or -type f \) -print
Prediction: find . -type f \( -name UNK -or -name UNK \)
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-name)
                ARGUMENT(UNK)

I{} splitted into: -I -{ -} 
Error: -I{} is not a flag of xargs
Example 128 (1)
Original English: Find all *.txt files under current directory and copy them to ./tmp
English: find all "*.txt" file under current directory and copy to _UNK
Original Command: find . -type f -name '*.txt' | sed 's/'"'"'/\'"'"'/g' | sed 's/.*/"&"/'  | xargs -I{} cp -v {} ./tmp/
Ground truth: find . -type f -name '*.txt' | sed 's/'"'"'/\'"'"'/g' | sed 's/.*/"&"/' | xargs -I -{ -} cp -v {} ./tmp/
Prediction: find . -name '*.txt' -exec cp {} /tmp/MusicFiles ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT('*.txt')
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(/tmp/MusicFiles)

Example 129 (1)
Original English: Delete all hidden files/directories under $some_directory including $some_directory
English: delete all hidden "files/directories" under _UNK including _UNK
Original Command: find $some_directory '.*' -delete
Ground truth: find $some_directory '.*' -delete
Prediction: find . -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 130 (1)
Original English: Find files named core in or below the directory /tmp and delete them. Note that this will work incorrectly if there are any filenames containing newlines, single or double quotes, or spaces.
English: find file named core in or below directory "/tmp" and delete _UNK will _UNK _UNK if any filename containing newlines single or double quote or space
Original Command: find /tmp -name core -type f -print | xargs /bin/rm -f
Ground truth: find /tmp -name core -type f -print | xargs rm -f
Prediction: find . -name "*fink*" -type d | xargs rm
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT("*fink*")
            FLAG(-type)
                ARGUMENT(d)
        HEADCOMMAND(xargs)
            HEADCOMMAND(rm)

Example 131 (1)
Original English: display all the files ending with ".user" in /var/adm/logs/morelogs/ and excluding all regular files
English: display all file ending with _UNK in _UNK and excluding all regular file
Original Command: find /var/adm/logs/morelogs/* -type f -prune -name "*.user" -print
Ground truth: find /var/adm/logs/morelogs/* -type f -prune -name "*.user" -print
Prediction: find UNK -type f -not -name UNK -exec grep -i {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-i)
                ARGUMENT({})

Example 132 (1)
Original English: find all files in the current folder which have only the write permission for the others
English: find all file in current folder only write permission for others
Original Command: find . -perm -0002 -print
Ground truth: find . -perm -_NUM -print
Prediction: find . -perm -o=w
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(-o=w)

Example 133 (1)
Original English: Find .jpg files owned by user daniel in the current directory and its sub-directories but ignore any file beginning with "autumn".
English: find ".jpg" file owned by user daniel in current directory and sub-directories but ignore any file beginning with _UNK
Original Command: find . -user daniel -type f -name *.jpg ! -name autumn*
Ground truth: find . -user daniel -type f -name *.jpg ! -name autumn*
Prediction: find . -user daniel -iname /etc/motd
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-user)
            ARGUMENT(daniel)
        FLAG(-iname)
            ARGUMENT(/etc/motd)

Example 134 (3)
Original English: Print the list of the current directory's subdirectories
English: print list of current _UNK subdirectory
Original Command: find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n'
Ground truth: find . -maxdepth _NUM -mindepth _NUM -type d -printf '%f\n'
Prediction: find . -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Example 135 (1)
Original English: Print the list of 1st level subdirectories in /fss/fin
English: print list of _UNK level subdirectory in "/fss/fin"
Original Command: find /fss/fin -d 1 -type d -name "*" -print
Ground truth: find /fss/fin -d _NUM -type d -name "*" -print
Prediction: find . -maxdepth _NUM -type d -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Example 136 (1)
Original English: prints the names of all files in the directory tree rooted in /usr/src whose name ends with ‘.c’ and that are larger than 100 Kilobytes.
English: print name of all file in directory tree _UNK in "/usr/src" whose name end with _UNK and larger than "_NUM" kilobyte
Original Command: find /usr/src -name '*.c' -size +100k -print
Ground truth: find /usr/src -name '*.c' -size +_NUMk -print
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 137 (1)
Original English: List all files in the current directory tree invoking xargs only once
English: list all file in current directory tree _UNK xargs only once
Original Command: find . -type f -print | xargs ls -l
Ground truth: find . -type f -print | xargs ls -l
Prediction: find . -name UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-print)

Quotation Error: space inside word 'some string'
Quotation Error: space inside word 'some string'
Example 138 (2)
Original English: Search for 'some string' in all *js files under current directory and show the matched lines with line numbers
English: search for _LONG_PATTERN in all _UNK file under current directory and show matched line with line number
Original Command: find . -name '*js' | grep -n  'some string'
Ground truth: find . -name '*js' | grep -n _LONG_PATTERN
Prediction: find . -name UNK -exec grep -c {} ; | xargs -0 grep -c ^.*
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-c)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(grep)
                FLAG(-c)
                ARGUMENT(^.*)

Example 139 (2)
Original English: Search the /path directory tree for files lacking the group writable bit
English: search "/path" directory tree for file _UNK group writable bit
Original Command: find /path ! -perm /g+w
Ground truth: find /path ! -perm /g+w
Prediction: find . -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(-u+s)

Error: -newermt is not a flag of find
Error: -newermt is not a flag of find
Example 140 (1)
Original English: find all the files in the current folder which have been modified between two specific dates
English: find all file in current folder modified between "_NUM" specific date
Original Command: find ./ -newermt 2014-08-25 ! -newermt 2014-08-26 -print
Ground truth: find ./ -newermt _NUM-_NUM-_NUM ! -newermt _NUM-_NUM-_NUM -print
Prediction: find . -mmin -_NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mmin)
            ARGUMENT(-_NUM)
        FLAG(-print)

Example 141 (1)
Original English: Search the `research' directory and one level below for directories that are not owned by group `ian'
English: search _UNK directory and "_NUM" level below for directory not owned by group _UNK
Original Command: find -L research -maxdepth 2 -type d ! -group ian
Ground truth: find -L research -maxdepth _NUM -type d ! -group ian
Prediction: find -maxdepth _NUM -type d -not -name Cookbook
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(Cookbook)

Example 142 (1)
Original English: find all .bak files in or below the current directory and move them to ~/.old.files directory:
English: find all ".bak" file in or below current directory and move to _UNK directory
Original Command: find . -name "*.sh" -print0 | xargs -0 -I {} mv {} ~/back.scripts
Ground truth: find . -name "*.sh" -print0 | xargs -0 -I {} mv {} ~/back.scripts
Prediction: find . -maxdepth _NUM -type f -exec mv {} test-_NUM ; | xargs -0 mv
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-maxdepth)
                ARGUMENT(_NUM)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-exec::;)
                HEADCOMMAND(mv)
                    ARGUMENT({})
                    ARGUMENT(test-_NUM)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(mv)

Example 143 (1)
Original English: display all text files in the folder /home/you which have been modified in the last 60*24 hours(case insensitive search)
English: display all text file in folder "/home/you" modified in last "_NUM*_NUM" _UNK case insensitive search )
Original Command: find /home/you -iname "*.txt" -mtime -60 -print
Ground truth: find /home/you -iname "*.txt" -mtime -_NUM -print
Prediction: find /home/you -iname UNK -iname "*.html"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home/you)
        FLAG(-iname)
            ARGUMENT(UNK)
        FLAG(-iname)
            ARGUMENT("*.html")

ld splitted into: -l -d 
Error: -ld is not a flag of ls
Example 144 (1)
Original English: Find all regular files in the current directory tree last modified between 1 and 3 days ago and list them using find's -ls option
English: find all regular file in current directory tree last modified between "_NUM" and "_NUM" day ago and list using "find\'s" _UNK option
Original Command: find ./ -daystart -mtime -3 -type f  ! -mtime -1 -exec ls -ld {} \;
Ground truth: find ./ -daystart -mtime -_NUM -type f ! -mtime -_NUM -exec ls -l -d {} ;
Prediction: find . -mtime +_NUM -type f -mtime +_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(+_NUM)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(+_NUM)

IFILE splitted into: -I -F -I -L -E 
Error: -IFILE is not a flag of xargs
Example 145 (1)
Original English: Find the files in the current directory that match pattern '*.ISOLATE.*.txt' and move them to folder ./ISOLATE
English: find file in current directory match pattern _UNK and move to folder _UNK
Original Command: find . -name '*.ISOLATE.*.txt' -maxdepth 1 -print0 | xargs -0 -IFILE mv FILE ./ISOLATE
Ground truth: find . -name '*.ISOLATE.*.txt' -maxdepth _NUM -print0 | xargs -0 -I -F -I -L -E mv FILE ./ISOLATE
Prediction: find . -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-iname)
            ARGUMENT(UNK)

Example 146 (1)
Original English: find all regular files  then display the number of occurrences of banana without lines not proper end
English: find all regular file display number of occurrence of _UNK without line not _UNK end
Original Command: find . -type f -print0| xargs -0 grep -c banana| grep -v ":0$"
Ground truth: find . -type f -print0 | xargs -0 grep -c banana | grep -v ":_NUM$"
Prediction: find . -type f -not -name UNK -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 147 (1)
Original English: display all files in current folder in sorted order of depth
English: display all file in current folder in sorted order of depth
Original Command: find folder1/ -type f -printf "%d\t%p\n" | sort -n | sed -e "s|[0-9]*\t||"
Ground truth: find folder_NUM/ -type f -printf "%d\t%p\n" | sort -n | sed -e "s|[_NUM-_NUM]*\t||"
Prediction: find . -mmin -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mmin)
            ARGUMENT(-_NUM)

Example 148 (1)
Original English: List all non-hidden files in ~/junk
English: list all non-hidden file in _UNK
Original Command: find ~/junk   -name "*" -exec ls -l {} \;
Ground truth: find ~/junk -name "*" -exec ls -l {} ;
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 149 (1)
Original English: find all the files in the current folder which do not have the read permission
English: find all file in current folder not read permission
Original Command: find . -type f ! -perm -444
Ground truth: find . -type f ! -perm -_NUM
Prediction: find . -readable
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-readable)

Example 150 (1)
Original English: display all the ".c" files in the folder "/home/david" which have been accessed in the last 48 hours
English: display all ".c" file in folder "/home/david" accessed in last "_NUM" hour
Original Command: find /home/david -atime -2 -name '*.c'
Ground truth: find /home/david -atime -_NUM -name '*.c'
Prediction: find . -name '*.c'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT('*.c')

Error: - is not a flag of find
Warning: -exec missing ending ';'
Quotation Error: space inside word {} ;
Example 151 (1)
Original English: see the details of the files (read, write, execute permission, file size, owner etc..) that have been returned as a search result
English: see detail of file ( read write execute permission file size owner _UNK ) _UNK search result
Original Command: find / - name 'Metallica*' -exec ls -l {\}\ \;
Ground truth: find / - name 'Metallica*' -exec ls -l _LONG_PATTERN \;
Prediction: find . -mmin UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mmin)
            ARGUMENT(UNK)
        FLAG(-print)

Example 152 (1)
Original English: search for the regular/normal file 'myfile' in the folder /root excluding those that are present in the "work" directory
English: search for "regular/normal" file "myfile" in folder "/root" excluding present in "work" directory
Original Command: find /root/ -name 'work' -prune -o -name myfile -type f -print
Ground truth: find /root/ \( -name 'work' -prune -or -name myfile \) -type f -print
Prediction: find . -name myfile -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(myfile)
        FLAG(-type)
            ARGUMENT(f)

Example 153 (1)
Original English: Find all files in  /mydir  and replace every occurrences of <string1> with <string2> in those files invoking sed as few times as possible
English: find all file in "/mydir" and replace every occurrence of _UNK with _UNK in file _UNK sed few time _UNK
Original Command: find /mydir -type f -exec sed -i 's/<string1>/<string2>/g' {} +
Ground truth: find /mydir -type f -exec sed -i 's/<string_NUM>/<string_NUM>/g' {} +
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Error: -xdev is not a flag of find
Example 154 (1)
Original English: find all the log files in the file system which are present in the current partition
English: find all log file in file system present in current partition
Original Command: find / -xdev -name "*.log"
Ground truth: find / -xdev -name "*.log"
Prediction: find . -name "*.log" -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*.log")
        FLAG(-print)

Example 155 (1)
Original English: find all the files in a directory which have not been modified in the last 2 hours and delete them
English: find all file in directory not modified in last "_NUM" hour and delete
Original Command: find /folder/path/* -mmin +120 -delete
Ground truth: find /folder/path/* -mmin +_NUM -delete
Prediction: find . -mtime +_NUM -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(+_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 156 (1)
Original English: Find *.c files under $HOME and search for the string 'sprintf' in those files
English: find "*.c" file under "$HOME" and search for string _UNK in file
Original Command: find $HOME -name '*.c' -print | xargs    grep -l sprintf
Ground truth: find $HOME -name '*.c' -print | xargs grep -l sprintf
Prediction: find /users/tom -name "*.h" -exec grep wait_event_interruptible {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/users/tom)
        FLAG(-name)
            ARGUMENT("*.h")
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(wait_event_interruptible)
                ARGUMENT({})

Quotation Error: space inside word 'FNR==235 {print FILENAME; print}'
nH splitted into: -n -H 
Error: -nH is not a flag of grep
Example 157 (2)
Original English: Find all Makefile's in the current directory tree and look for line 235 in each of them
English: find all "makefile\'s" in current directory tree and look for line "_NUM" in each of
Original Command: find -type f -name "Makefile" -exec awk 'FNR==235 {print FILENAME; print}' {} +
Ground truth: find -type f -name "Makefile" -exec awk _LONG_PATTERN {} +
Prediction: find . -name '?????????????????????????????????' -exec wc -l ; | xargs -0 grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT('?????????????????????????????????')
            FLAG(-exec::;)
                HEADCOMMAND(wc)
                    FLAG(-l)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(grep)
                FLAG(-c)

Example 158 (1)
Original English: Find all the files without permission 777 in the file system
English: find all file without permission "_NUM" in file system
Original Command: find / -type f ! -perm 777
Ground truth: find / -type f ! -perm _NUM
Prediction: find / -type f -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-print)

Example 159 (1)
Original English: find files in the /usr/src directory with pattern` *.c  that larger than 100 Kilobytes
English: find file in "/usr/src" directory with pattern "*.c" larger than "_NUM" kilobyte
Original Command: find /usr/src -name '*.c' -size +100k -print
Ground truth: find /usr/src -name '*.c' -size +_NUMk -print
Prediction: find . -name '.git*'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT('.git*')

Example 160 (1)
Original English: Find files that don’t have 644 permissions
English: find file _UNK "_NUM" permission
Original Command: find / -type f ! -perm 644
Ground truth: find / -type f ! -perm _NUM
Prediction: find /etc -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/etc)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 161 (1)
Original English: find all the regular files in a folder which have been modified before a file and delete them
English: find all regular file in folder modified before file and delete
Original Command: find "$DIR" -type f \! -newer "$a" -exec rm {} +
Ground truth: find "$DIR" -type f ! -newer "$a" -exec rm {} +
Prediction: find . -type f -mtime +_NUM -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(+_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 162 (1)
Original English: See what files are executable by the file's owner and group
English: see file executable by _UNK owner and group
Original Command: find -type f -perm -110
Ground truth: find -type f -perm -_NUM
Prediction: find . -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(-u+s)

Example 163 (1)
Original English: Find x* files/directories under /tmp directory whose status was changed less than 1 day ago
English: find "x*" "files/directories" under "/tmp" directory whose status wa changed le than "_NUM" day ago
Original Command: find /tmp/ -ctime -1 -name x*
Ground truth: find /tmp/ -ctime -_NUM -name x*
Prediction: find /tmp -ctime -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/tmp)
        FLAG(-ctime)
            ARGUMENT(-_NUM)

Example 164 (1)
Original English: display a long listing of all fles in current folder which have been modified in the last 60 minutes
English: display long listing of all _UNK in current folder modified in last "_NUM" minute
Original Command: find . -mmin -60 -ls
Ground truth: find . -mmin -_NUM -ls
Prediction: find . -mmin -_NUM -type d -mmin -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mmin)
            ARGUMENT(-_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-mmin)
            ARGUMENT(-_NUM)

Example 165 (1)
Original English: Find all *.mov (case insensitive) files under current directory and list their paths with their names
English: find all "*.mov" ( case insensitive ) file under current directory and list path with name
Original Command: find . -iname "*.mov" -printf "%p %f\n"
Ground truth: find . -iname "*.mov" -printf _LONG_PATTERN
Prediction: find . -iname "apt"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-iname)
            ARGUMENT("apt")

Example 166 (1)
Original English: Show the list of files that are owned by user wnj or are newer than file `ttt'
English: show list of file owned by user wnj or newer than file "ttt"
Original Command: find / \( -newer ttt -or -user wnj \) -print
Ground truth: find / \( -newer ttt -or -user wnj \) -print
Prediction: find / -user wnj -user wnj -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-user)
            ARGUMENT(wnj)
        FLAG(-user)
            ARGUMENT(wnj)
        FLAG(-print)

Example 167 (1)
Original English: Find regular files named core under /tmp and delete them
English: find regular file named core under "/tmp" and delete
Original Command: find /tmp -name core -type f -print | xargs /bin/rm -f
Ground truth: find /tmp -name core -type f -print | xargs rm -f
Prediction: find /tmp -type f -name "*.tmp" -exec rm {} ; | xargs rm
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(/tmp)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT("*.tmp")
            FLAG(-exec::;)
                HEADCOMMAND(rm)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            HEADCOMMAND(rm)

Example 168 (1)
Original English: remove all the permissions for others to all the files in the current folder which have  read,write,execute access to users,group and others.
English: remove all permission for others to all file in current folder read write execute access to user group and others
Original Command: find * -perm 777 -exec chmod 770 {} \;
Ground truth: find * -perm _NUM -exec chmod _NUM {} ;
Prediction: find . -perm -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(-_NUM)

Example 169 (1)
Original English: Move files older than 1 day to directory TMP
English: move file older than "_NUM" day to directory _UNK
Original Command: find . -atime +1 -type f -exec mv {} TMP \;
Ground truth: find . -atime +_NUM -type f -exec mv {} TMP ;
Prediction: find . -maxdepth _NUM -type f -mtime +_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(+_NUM)

Example 170 (1)
Original English: display long list of all the perl files in the current folder
English: display long list of all perl file in current folder
Original Command: find . -name "*.pl" -ls
Ground truth: find . -name "*.pl" -ls
Prediction: find . -name "*.pl" -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*.pl")
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 171 (1)
Original English: find all files in the current folder which are bigger than 10bytes
English: find all file in current folder bigger than _UNK
Original Command: find . — size +10 -print
Ground truth: find . — size +_NUM -print
Prediction: find . -size +_NUMk
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-size)
            ARGUMENT(+_NUMk)

Example 172 (1)
Original English: find all the files with the name "datainame" in the file system which are bigger than 50MB
English: find all file with name _UNK in file system bigger than "_NUMMB"
Original Command: find / -size +50M -iname "Dateiname"
Ground truth: find / -size +_NUMM -iname "Dateiname"
Prediction: find / -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-name)
            ARGUMENT(UNK)

Example 173 (2)
Original English: Find all files under directory tree /path/to/dir whose permissions are not 644
English: find all file under directory tree "/path/to/dir" whose permission not "_NUM"
Original Command: find /path/to/dir ! -perm 0644
Ground truth: find /path/to/dir ! -perm _NUM
Prediction: find $d -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT($d)
        FLAG(-type)
            ARGUMENT(d)

rf splitted into: -r -f 
Error: -rf is not a flag of rm
Example 174 (1)
Original English: force delete all the directories in a folder which  have a specific name
English: force delete all directory in folder specific name
Original Command: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Ground truth: find /usr/ports/ -name work -type d -print -exec rm -r -f {} ;
Prediction: find . -type d -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Warning: -exec missing ending ';'
Example 175 (1)
Original English: Find a file by an inode number and delete it.
English: find file by inode number and delete
Original Command: find -inum 804180 -exec rm {} \
Ground truth: find -inum _NUM -exec rm {} \;
Prediction: find . -inum _NUM -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-inum)
            ARGUMENT(_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 176 (1)
Original English: find all the jpg files in the directory /ftp/dir which are bigger than 500KB
English: find all jpg file in directory _UNK bigger than "_NUMKB"
Original Command: find /ftp/dir/ -size +500k -iname "*.jpg"
Ground truth: find /ftp/dir/ -size +_NUMk -iname "*.jpg"
Prediction: find . -type f -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(UNK)

Error: -L. is not a flag of find
Example 177 (1)
Original English: Print a list of symbolic links reachable from the current directory that do not resolve to accessible files
English: print list of symbolic link _UNK from current directory not _UNK to _UNK file
Original Command: find -L. -type l
Ground truth: find -L. -type l
Prediction: find . -maxdepth _NUM -type l -not -name '*macs' -prune
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(l)
        UNARYLOGICOP(-not)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT('*macs')

Example 178 (1)
Original English: search for all the regular/normal files with the name "access.log" in the folder /var/www which are bigger than 100MB
English: search for all "regular/normal" file with name _UNK in folder "/var/www" bigger than "_NUMMB"
Original Command: find /var/www -type f -name «access.log*» -size +100M
Ground truth: find /var/www -type f -name «access.log*» -size +_NUMM
Prediction: find /work -type f -name 'Metallica*' -not -name +_NUMk
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/work)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT('Metallica*')
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(+_NUMk)

Example 179 (1)
Original English: List all files in entire file system that belong to the user wnj or modified later than the ttt file
English: list all file in entire file system belong to user wnj or modified later than ttt file
Original Command: find / \( -newer ttt -or -user wnj \) -print
Ground truth: find / \( -newer ttt -or -user wnj \) -print
Prediction: find / -user pat -user wnj
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-user)
            ARGUMENT(pat)
        FLAG(-user)
            ARGUMENT(wnj)

Example 180 (5)
Original English: List all *.txt files/directories under /etc
English: list all "*.txt" "files/directories" under "/etc"
Original Command: find /etc -name "*.txt" | xargs ls -l
Ground truth: find /etc -name "*.txt" | xargs ls -l
Prediction: find dir -name '*.pdf' -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(dir)
        FLAG(-name)
            ARGUMENT('*.pdf')
        FLAG(-print)

Example 181 (1)
Original English: Find *.jpg screenshots that are bigger than 500k
English: find "*.jpg" _UNK bigger than "_NUMk"
Original Command: find ~/Images/Screenshots -size +500k -iname '*.jpg'
Ground truth: find ~/Images/Screenshots -size +_NUMk -iname '*.jpg'
Prediction: find . -name Cookbook
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(Cookbook)

Example 182 (1)
Original English: Append all *.mp3 files modified within the last 180 days to tar archive `music.tar'
English: append all "*.mp_NUM" file modified within last "_NUM" day to tar archive _UNK
Original Command: find . -name -type f '*.mp3' -mtime -180 -print0 | xargs -0 tar rvf music.tar
Ground truth: find . -name -type f '*.mp_NUM' -mtime -_NUM -print0 | xargs -0 tar rvf music.tar
Prediction: find . -type f -mtime -_NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(-_NUM)
        FLAG(-print)

Example 183 (1)
Original English: find all the files in the current folder which end with "ext1" or "ext2" or "ext3"
English: find all file in current folder end with "ext_NUM" or "ext_NUM" or "ext_NUM"
Original Command: find -E . -regex ".*ext1|.*ext2|.*ext3"
Ground truth: find -E . -regex ".*ext_NUM|.*ext_NUM|.*ext_NUM"
Prediction: find . -name "*fink*"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*fink*")

Example 184 (1)
Original English: List all files (and subdirectories) in your home directory:
English: list all file ( and subdirectory ) in home directory
Original Command: find $HOME -print
Ground truth: find $HOME -print
Prediction: find ~ -iname '*.tex'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(~)
        FLAG(-iname)
            ARGUMENT('*.tex')

Example 185 (1)
Original English: display all the directories in the folder /var and do not go beyond 2 levels during search
English: display all directory in folder "/var" and not _UNK beyond "_NUM" level during search
Original Command: find /var -maxdepth 2 -type d;
Ground truth: find /var -maxdepth _NUM -type d
Prediction: find . -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-iname)
            ARGUMENT(UNK)

Example 186 (1)
Original English: find all '*.c' files under $HOME directory which context contains sprintf
English: find all "*.c" file under "$HOME" directory context contains _UNK
Original Command: find $HOME -name '*.c' -print | xargs grep -l sprintf
Ground truth: find $HOME -name '*.c' -print | xargs grep -l sprintf
Prediction: find ./polkadots -name modules
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(./polkadots)
        FLAG(-name)
            ARGUMENT(modules)

Example 187 (1)
Original English: Find all the files without permission 777
English: find all file without permission "_NUM"
Original Command: find / -type f ! -perm 777
Ground truth: find / -type f ! -perm _NUM
Prediction: find / -type f -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(_NUM)

Error: -regextype is not a flag of find
Example 188 (1)
Original English: Search the current directory tree for files whose names end in "rb" or "js" and which contain string "matchNameHere"
English: search current directory tree for file whose name end in "rb" or "js" and contain string _UNK
Original Command: find . -regextype posix-ergep -regex ".*(rb|js)$" -exec grep -l matchNameHere {} \;
Ground truth: find . -regextype posix-ergep -regex ".*(rb|js)$" -exec grep -l matchNameHere {} ;
Prediction: find . -name "*.exe" -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*.exe")
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 189 (1)
Original English: Find directories owned by user news with permissions 775
English: find directory owned by user _UNK with permission "_NUM"
Original Command: find / -user news -type d -perm 775 -print
Ground truth: find / -user news -type d -perm _NUM -print
Prediction: find . -user syslog
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-user)
            ARGUMENT(syslog)

Example 190 (1)
Original English: display all the normal/regular files in the current folder and do not go beyond 3 levels
English: display all "normal/regular" file in current folder and not _UNK beyond "_NUM" level
Original Command: find . -maxdepth 3 -type f
Ground truth: find . -maxdepth _NUM -type f
Prediction: find . -maxdepth _NUM -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)

rf splitted into: -r -f 
Error: -rf is not a flag of rm
Example 191 (2)
Original English: Delete all files in the /myDir directory tree that were last modfied 7 days ago
English: delete all file in _UNK directory tree last _UNK "_NUM" day ago
Original Command: find /myDir -mindepth 1 -mtime 7 -exec rm -rf {} \;
Ground truth: find /myDir -mindepth _NUM -mtime _NUM -exec rm -r -f {} ;
Prediction: find . -mtime _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(_NUM)

Example 192 (1)
Original English: display list of all the hidden files in the directory "/dir/to/search/"
English: display list of all hidden file in directory "/dir/to/search/"
Original Command: find /dir/to/search/ -name ".*" -ls
Ground truth: find /dir/to/search/ -name ".*" -ls
Prediction: find /dir/to/search/ -iname ".*" -type d -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/dir/to/search/)
        FLAG(-iname)
            ARGUMENT(".*")
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Example 193 (1)
Original English: Find all files/directories under current directory and sort them
English: find all "files/directories" under current directory and sort
Original Command: find | sort
Ground truth: find | sort
Prediction: find ./
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(./)

Quotation Error: space inside word '%M %u %g %p\n'
Example 194 (2)
Original English: List level 2 subdirectories of the current directory
English: list level "_NUM" subdirectory of current directory
Original Command: find . -mindepth 2 -maxdepth 2 -type d -printf '%M %u %g %p\n'
Ground truth: find . -mindepth _NUM -maxdepth _NUM -type d -printf _LONG_PATTERN
Prediction: find . -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Example 195 (1)
Original English: Search the /media/shared directory recursively for MP3 and OGG files
English: search _UNK directory recursively for "MP_NUM" and OGG file
Original Command: find /media/shared \( -iname "*.mp3" -o -iname "*.ogg" \)
Ground truth: find /media/shared \( -iname "*.mp_NUM" -or -iname "*.ogg" \)
Prediction: find -iname UNK -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-iname)
            ARGUMENT(UNK)
        FLAG(-type)
            ARGUMENT(f)

Example 196 (1)
Original English: find all the directories in the current directory which dont have the execute permission.
English: find all directory in current directory _UNK execute permission
Original Command: find -type d ! -perm -111
Ground truth: find -type d ! -perm -_NUM
Prediction: find . -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)

Example 197 (1)
Original English: find all files that are readable or writable by their owner
English: find all file readable or writable by owner
Original Command: find . -perm +600 -print
Ground truth: find . -perm +_NUM -print
Prediction: find . -perm /u+w,g+w
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(/u+w,g+w)

Error: -name is not a flag of ls
Example 198 (1)
Original English: Remove all subdirectories of the current directory, except for "bar", "foo", "a", and "b"
English: remove all subdirectory of current directory except for "bar" "foo" "a" and "b"
Original Command: find . -maxdepth 1 -type d \( ! -name "bar" -a ! -name "foo" -a ! -name "a" -a ! -name "b" \) -delete
Ground truth: find . -maxdepth _NUM -type d \( ! -name "bar" -and ! -name "foo" -and ! -name "a" -and ! -name "b" \) -delete
Prediction: find . -maxdepth _NUM -type d -not -name -maxdepth _NUM -exec mv {} ; | xargs -0 ls -not -name '*macs'
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-maxdepth)
                ARGUMENT(_NUM)
            FLAG(-type)
                ARGUMENT(d)
            UNARYLOGICOP(-not)
                FLAG(-name)
                    FLAG(-maxdepth)
                        ARGUMENT(_NUM)
            FLAG(-exec::;)
                HEADCOMMAND(mv)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                UNARYLOGICOP(-not)
                    FLAG(-name)
                        ARGUMENT('*macs')

Example 199 (1)
Original English: display list of all the C files ( fuiles with ".c" extension ) in current folder
English: display list of all C file ( _UNK with ".c" extension ) in current folder
Original Command: find . -name '*.c' -ls
Ground truth: find . -name '*.c' -ls
Prediction: find . -name "*.c" -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*.c")
        FLAG(-print)

Example 200 (2)
Original English: List the names of the directories in current directory without going into sub-directories
English: list name of directory in current directory without going into sub-directories
Original Command: find . -maxdepth 1 -mindepth 1 -type d -printf '%f\n'
Ground truth: find . -maxdepth _NUM -mindepth _NUM -type d -printf '%f\n'
Prediction: find . -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -name "apt" -maxdepth _NUM -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT("apt")
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 201 (1)
Original English: Find all the files which are changed in last 1 hour in entire file system and show a few lines of output from the beginning
English: find all file changed in last "_NUM" hour in entire file system and show few line of output from beginning
Original Command: find / -cmin -60 | head
Ground truth: find / -cmin -_NUM | head
Prediction: find / -ctime -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-ctime)
            ARGUMENT(-_NUM)

Example 202 (1)
Original English: find all files that do not have read permission to all
English: find all file not read permission to all
Original Command: find . -type f ! -perm -444
Ground truth: find . -type f ! -perm -_NUM
Prediction: find . -type l -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(l)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 203 (1)
Original English: find all files in the entire file system that belong to a specific user or which have been modified after a specific file
English: find all file in entire file system belong to specific user or modified after specific file
Original Command: find / \( -newer ttt -or -user wnj	\) -print
Ground truth: find / \( -newer ttt -or -user wnj \) -print
Prediction: find / -user bob -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-user)
            ARGUMENT(bob)
        FLAG(-print)

Example 204 (1)
Original English: Remove all text files in the home directory with confirmation
English: remove all text file in home directory with confirmation
Original Command: find $HOME/. -name *.txt -ok rm {} \;
Ground truth: find $HOME/. -name *.txt -ok rm {} ;
Prediction: find ~/ -maxdepth _NUM -name '*.txt' -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(~/)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT('*.txt')
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 205 (1)
Original English: search for any files that have the setuid bit set
English: search for any file setuid bit set
Original Command: find /usr -perm -4000 -print
Ground truth: find /usr -perm -_NUM -print
Prediction: find / -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-perm)
            ARGUMENT(-u+s)

Example 206 (1)
Original English: find all regular files in current folder with a specific permission and display the total count
English: find all regular file in current folder with specific permission and display total count
Original Command: find . -type f -perm 755 | wc -l
Ground truth: find . -type f -perm _NUM | wc -l
Prediction: find . -type f -ok mv -l {} ; | xargs -0 chmod _NUM
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ok::;)
                HEADCOMMAND(mv)
                    FLAG(-l)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(chmod)
                ARGUMENT(_NUM)

Example 207 (2)
Original English: Find all files under ${searchpath} that match the regex ${string1}.*${string2}.*${string3}  in their contents where ${string1} etc.. will be expanded
English: find all file under _UNK match regex _UNK in content where _UNK _UNK will expanded
Original Command: find "${searchpath}" -type f -print0 | xargs -0 grep -l -E "${string1}.*${string2}.*${string3}"
Ground truth: find "${searchpath}" -type f -print0 | xargs -0 grep -l -E "${string_NUM}.*${string_NUM}.*${string_NUM}"
Prediction: find UNK -regex UNK | xargs grep UNK
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(UNK)
            FLAG(-regex)
                ARGUMENT(UNK)
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                ARGUMENT(UNK)

Example 208 (1)
Original English: Print your/dir if it's an empty directory
English: print _UNK if "it\'s" empty directory
Original Command: find your/dir -prune -empty -type d
Ground truth: find your/dir -prune -empty -type d
Prediction: find . -maxdepth _NUM -type d -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

n1 splitted into: -n -1 
Error: -n1 is not a flag of xargs
P8 splitted into: -P -8 
Error: -P8 is not a flag of xargs
Hn splitted into: -H -n 
Error: -Hn is not a flag of grep
Example 209 (1)
Original English: Find all PHP files in the current directory recursively and search them for string "$test" with 8 simultaneous processes
English: find all PHP file in current directory recursively and search for string "$test" with "_NUM" _UNK _UNK
Original Command: find . -name \*.php -type f -print0 | xargs -0 -n1 -P8 grep -Hn '$test'
Ground truth: find . -name *.php -type f -print0 | xargs -0 -n -1 -P -8 grep -H -n '$test'
Prediction: find . -type f -name UNK -exec grep --with-filename {} ; | xargs grep organic
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(--with-filename)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                ARGUMENT(organic)

Example 210 (1)
Original English: Remove all files that were older than 3 days
English: remove all file older than "_NUM" day
Original Command: find . -type f -mtime +3 –exec rm –f {} \;
Ground truth: find . -type f -mtime +_NUM –exec rm –f {} ;
Prediction: find /path/to/files* -mtime +_NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/path/to/files*)
        FLAG(-mtime)
            ARGUMENT(+_NUM)
        FLAG(-print)

Example 211 (1)
Original English: Find all files/directories under current directory which have read-write permission for owner and only read permission for group and others
English: find all "files/directories" under current directory read-write permission for owner and only read permission for group and others
Original Command: find -perm -644
Ground truth: find -perm -_NUM
Prediction: find ./ -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(./)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 212 (1)
Original English: Find files by type but only look in top level directory
English: find file by type but only look in top level directory
Original Command: find . -maxdepth 1 -type d
Ground truth: find . -maxdepth _NUM -type d
Prediction: find . -maxdepth _NUM -name 'onlyme*'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT('onlyme*')

Warning: -exec missing ending ';'
Example 213 (1)
Original English: List all files/directories under /myfiles directory
English: list all "files/directories" under "/myfiles" directory
Original Command: find /myfiles -exec ls -l {} ;
Ground truth: find /myfiles -exec ls -l {} \;
Prediction: find /myfiles /myfiles
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/myfiles)
        ARGUMENT(/myfiles)

Example 214 (1)
Original English: find all the files which have been modified in the last 15 minutes excluding hidden files.
English: find all file modified in last "_NUM" minute excluding hidden file
Original Command: find . -mmin -15 \( ! -regex ".*/\..*" \)
Ground truth: find . -mmin -_NUM ! -regex ".*/\..*"
Prediction: find . -not -name "*.html"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT("*.html")

Example 215 (1)
Original English: Search all regular files in the /var/log directory tree for string "19:26"
English: search all regular file in "/var/log" directory tree for string "_NUM:_NUM"
Original Command: find /var/log/ -type f -exec grep -H ‘19:26′ {} \;
Ground truth: find /var/log/ -type f -exec grep -H ‘_NUM:_NUM′ {} ;
Prediction: find . -type d -exec wc -l ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)

Example 216 (1)
Original English: Find all files under maximum 1 level down the ./subfolder and ./subfolder/*/  paths
English: find all file under maximum "_NUM" level down _UNK and _UNK path
Original Command: find ./subfolder ./subfolder/*/ -maxdepth 1 -type f
Ground truth: find ./subfolder ./subfolder/*/ -maxdepth _NUM -type f
Prediction: find UNK -maxdepth _NUM -type f -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 217 (1)
Original English: Find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding $EXCLUDE/* paths
English: find all "*.php" ( case insensitive ) file and "*.js" "files/directories" ( case insensitive ) under "/home/jul/here" excluding _UNK path
Original Command: find /home/jul/here -type f -iname "*.php" ! -path "$EXCLUDE/*" -o -iname "*.js" ! -path "$EXCLUDE/*"
Ground truth: find /home/jul/here -type f -iname "*.php" \( ! -path "$EXCLUDE/*" -or -iname "*.js" \) ! -path "$EXCLUDE/*"
Prediction: find /home/jul/here -iname "*.js" -type f -not -iname "*.js"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home/jul/here)
        FLAG(-iname)
            ARGUMENT("*.js")
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-iname)
                ARGUMENT("*.js")

Quotation Error: space inside word '/re/ {print FILENAME ":" $0;exit}'
Example 218 (1)
Original English: Search for first match of the regex 're' in all *.coffee files under current directory and print the file names
English: search for first match of regex "re" in all "*.coffee" file under current directory and print file name
Original Command: find . -name \*.coffee -exec awk '/re/ {print FILENAME ":" $0;exit}' {} \;
Ground truth: find . -name *.coffee -exec awk _LONG_PATTERN {} ;
Prediction: find . -name *.coffee -exec grep -m -c {} ; | xargs grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(*.coffee)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-m)
                    FLAG(-c)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                FLAG(-c)

IZl splitted into: -I -Z -l 
Error: -IZl is not a flag of grep
Iq splitted into: -I -q 
Error: -Iq is not a flag of grep
Example 219 (4)
Original English: Search the current directory recursively for files containing "needle text"
English: search current directory recursively for file containing _LONG_PATTERN
Original Command: find . -type f -print0 | xargs -0 grep -I "needle text"
Ground truth: find . -type f -print0 | xargs -0 grep -I _LONG_PATTERN
Prediction: find . -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)

Example 220 (1)
Original English: Search  in current directory downwards all files whic  have permission 777 .
English: search in current directory downwards all file _UNK permission "_NUM"
Original Command: find . -perm 777 -print
Ground truth: find . -perm _NUM -print
Prediction: find . -type f -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-print)

tl splitted into: -t -l 
Error: -tl is not a flag of ls
Example 221 (1)
Original English: search for the file foo in  the current folder and display a long listing of it in sorted order of modification date
English: search for file foo in current folder and display long listing of in sorted order of modification date
Original Command: find . -name foo | xargs ls -tl
Ground truth: find . -name foo | xargs ls -t -l
Prediction: find . -name UNK | xargs -0 ls -l -d -r -r -r -r _LONG_PATTERN
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(UNK)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)
                FLAG(-r)
                FLAG(-r)
                FLAG(-r)
                FLAG(-r)
                ARGUMENT(_LONG_PATTERN)

Example 222 (1)
Original English: find all the files in the file system that start with "win" and searched only in the mounted file systems
English: find all file in file system start with _UNK and searched only in mounted file system
Original Command: find / -mount -name 'win*'
Ground truth: find / -mount -name 'win*'
Prediction: find / -name 'top?????*' -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-name)
            ARGUMENT('top?????*')
        FLAG(-print)

Example 223 (1)
Original English: find files in /tmp directory that named are core and deletes them
English: find file in "/tmp" directory named core and deletes
Original Command: find /tmp -name core -type f -print | xargs /bin/rm -f
Ground truth: find /tmp -name core -type f -print | xargs rm -f
Prediction: find /tmp -name "*.tmp"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/tmp)
        FLAG(-name)
            ARGUMENT("*.tmp")

Example 224 (1)
Original English: display all directories in the folder "PROD" and do not search in the sub directories
English: display all directory in folder _UNK and not search in sub directory
Original Command: find /PROD -maxdepth 1 -type d
Ground truth: find /PROD -maxdepth _NUM -type d
Prediction: find UNK -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Error: -xdev is not a flag of find
Example 225 (2)
Original English: find all the text files in the file system and search only in the disk partition of the root.
English: find all text file in file system and search only in disk partition of root
Original Command: find / -mount -name "*.txt"
Ground truth: find / -mount -name "*.txt"
Prediction: find / -name "*.txt" -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-name)
            ARGUMENT("*.txt")
        FLAG(-print)

Example 226 (1)
Original English: Search the current directory recursively for regular files with the read permission set for everybody
English: search current directory recursively for regular file with read permission set for everybody
Original Command: find -type f ! -perm -444
Ground truth: find -type f ! -perm -_NUM
Prediction: find . -type f -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 227 (1)
Original English: Getting a detailed list of files/dirs
English: _UNK detailed list of _UNK
Original Command: find  / -name "apt" -ls
Ground truth: find / -name "apt" -ls
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

rn splitted into: -r -n 
Error: -rn is not a flag of sort
I{} splitted into: -I -{ -} 
Error: -I{} is not a flag of xargs
Example 228 (1)
Original English: find all normal/regular files in a folder and sort them in reverse  alphabetical order and copy the first two files to another folder
English: find all "normal/regular" file in folder and sort in reverse _UNK order and copy first "_NUM" file to another folder
Original Command: find $DIR/tmp/daily/ -type f -printf "%p\n" | sort -rn | head -n 2 | xargs -I{} cp {} $DIR/tmp/weekly/
Ground truth: find $DIR/tmp/daily/ -type f -printf "%p\n" | sort -r -n | head -n _NUM | xargs -I -{ -} cp {} $DIR/tmp/weekly/
Prediction: find /usr/tom -type f | xargs -0 cp
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(/usr/tom)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(cp)

Example 229 (1)
Original English: change the permission of all php files in current folder. Plus symbol at the end is used to give multiple files as input to the chmod command
English: change permission of all php file in current folder plus _UNK at end used to give multiple file input to chmod command
Original Command: find . -name "*.php" -exec chmod 755 {} +
Ground truth: find . -name "*.php" -exec chmod _NUM {} +
Prediction: find . -name *.php -exec chmod _NUM {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(*.php)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(_NUM)
                ARGUMENT({})

Example 230 (1)
Original English: search for files starting with the letters 'win' in their filenames.
English: search for file starting with letter _UNK in filename
Original Command: find / -mount -name 'win*'
Ground truth: find / -mount -name 'win*'
Prediction: find . -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-iname)
            ARGUMENT(UNK)

Example 231 (1)
Original English: list all the sqlite files in the current folder
English: list all sqlite file in current folder
Original Command: find ./ -name "*.sqlite" -ls
Ground truth: find ./ -name "*.sqlite" -ls
Prediction: find . -name *.java
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(*.java)

il splitted into: -i -l 
Error: -il is not a flag of grep
Example 232 (1)
Original English: search for a pattern in all the java files in the current folder and display only the matched file names
English: search for pattern in all java file in current folder and display only matched file name
Original Command: find . -type f -name "*.java" -exec grep -il 'foo' {} \;
Ground truth: find . -type f -name "*.java" -exec grep -i -l 'foo' {} ;
Prediction: find . -name *.php -exec grep -l -i {} ; | xargs grep -l -i
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(*.php)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-l)
                    FLAG(-i)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                FLAG(-l)
                FLAG(-i)

Example 233 (1)
Original English: find all the files which have a specific permission
English: find all file specific permission
Original Command: find -perm 777
Ground truth: find -perm _NUM
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 234 (1)
Original English: delete all text files in the home folder after user confirmation
English: delete all text file in home folder after user confirmation
Original Command: find $HOME/. -name "*.txt" -ok rm {} \;
Ground truth: find $HOME/. -name "*.txt" -ok rm {} ;
Prediction: find /home -name "*.txt" -ok rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home)
        FLAG(-name)
            ARGUMENT("*.txt")
        FLAG(-ok::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 235 (1)
Original English: Find regular files with permissions less than 111
English: find regular file with permission le than "_NUM"
Original Command: find -perm -111 -type f
Ground truth: find -perm -_NUM -type f
Prediction: find . -type f -perm -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(-_NUM)

Example 236 (1)
Original English: Find CSS files omitting results containing "CVS"
English: find CSS file omitting result containing "CVS"
Original Command: find . \! -path "*CVS*" -type f -name "*.css"
Ground truth: find . ! -path "*CVS*" -type f -name "*.css"
Prediction: find . -name "*.html" -type f -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*.html")
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-print)

Error: -h is not a flag of chown
Example 237 (1)
Original English: Set the group to "username" for all files with GID=1000 in the current directory tree
English: set group to _UNK for all file with _UNK in current directory tree
Original Command: find -gid 1000 -exec chown -h :username {} \;
Ground truth: find -gid _NUM -exec chown -h :username {} ;
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 238 (1)
Original English: Delete all files under and below the current directory
English: delete all file under and below current directory
Original Command: find -mindepth 1 -delete
Ground truth: find -mindepth _NUM -delete
Prediction: find . -name modules
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(modules)

Example 239 (1)
Original English: search for a directory "foo" in current folder and display all sub directories with the name foo
English: search for directory "foo" in current folder and display all sub directory with name foo
Original Command: find . -name foo -type d -prune -o -name foo -print
Ground truth: find . -name foo \( -type d -prune -or -name foo \) -print
Prediction: find . -type d -name foo
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(foo)

Example 240 (1)
Original English: Search for files whose name is "filename" and whose permissions are 777
English: search for file whose name "filename" and whose permission "_NUM"
Original Command: find / -perm 777 -iname "filename"
Ground truth: find / -perm _NUM -iname "filename"
Prediction: find / -perm _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-perm)
            ARGUMENT(_NUM)
        FLAG(-print)

Example 241 (1)
Original English: find in $HOME files ending in "txt" and do nothing with them, or files ending in "html" and list them null separated.
English: find in "$HOME" file ending in "txt" and _UNK with or file ending in "html" and list null separated
Original Command: find $HOME -name \*txt -o -name \*html -print0
Ground truth: find $HOME \( -name *txt -or -name *html \) -print0
Prediction: find . \( -name '*.html' -or -name '*.html' \) -exec grep UNK ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT('*.html')
            FLAG(-name)
                ARGUMENT('*.html')
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(UNK)

Example 242 (1)
Original English: Find all level 1 subdirectories of the current directory
English: find all level "_NUM" subdirectory of current directory
Original Command: find . -maxdepth 1 -type d
Ground truth: find . -maxdepth _NUM -type d
Prediction: find -mindepth _NUM -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-mindepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Error: -i is not a flag of xargs
l56 splitted into: -l -5 -6 
Error: -l56 is not a flag of xargs
Error: -i is not a flag of xargs
Example 243 (2)
Original English: Move all regular files under current directory to ./newdir
English: move all regular file under current directory to _UNK
Original Command: find ./ -type f -print | xargs    -i mv -f {} ./newdir
Ground truth: find ./ -type f -print | xargs -i mv -f {} ./newdir
Prediction: find . -maxdepth _NUM -type f -exec mv {} /tmp/MusicFiles ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(/tmp/MusicFiles)

rf splitted into: -r -f 
Error: -rf is not a flag of rm
Example 244 (1)
Original English: search all files in a folder which are bigger than 100MB and which are atleast 1 level deep and force delete them
English: search all file in folder bigger than "_NUMMB" and atleast "_NUM" level deep and force delete
Original Command: find .cache/chromium/Default/Cache/ -mindepth 1 -type d -size +100M -exec rm -rf {} \;
Ground truth: find .cache/chromium/Default/Cache/ -mindepth _NUM -type d -size +_NUMM -exec rm -r -f {} ;
Prediction: find .cache/chromium/Default/Cache/ -mindepth +_NUM -maxdepth +_NUM -exec rm {} +
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.cache/chromium/Default/Cache/)
        FLAG(-mindepth)
            ARGUMENT(+_NUM)
        FLAG(-maxdepth)
            ARGUMENT(+_NUM)
        FLAG(-exec::+)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 245 (1)
Original English: Find directories in the /path directory tree whose names are 33 characters in length
English: find directory in "/path" directory tree whose name "_NUM" character in length
Original Command: find /path -type d -printf "%f\n" | awk 'length==33'
Ground truth: find /path -type d -printf "%f\n" | awk 'length==_NUM'
Prediction: find . -name '?????????????????????????????????' -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT('?????????????????????????????????')
        FLAG(-type)
            ARGUMENT(d)

Example 246 (1)
Original English: Delete all hidden files/directories under $some_directory
English: delete all hidden "files/directories" under _UNK
Original Command: find "$some_directory" -name '.*' ! -name '.' ! -name '..' -delete
Ground truth: find "$some_directory" -name '.*' ! -name '.' ! -name '..' -delete
Prediction: find . -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 247 (1)
Original English: Search the *.c files residing in the current directory tree for string "blash"
English: search "*.c" file residing in current directory tree for string _UNK
Original Command: find . -name *.c -exec grep -n -e blash {} \;
Ground truth: find . -name *.c -exec grep -n -e blash {} ;
Prediction: find . -name *.c -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(*.c)
        FLAG(-print)

Error: -regextype is not a flag of find
L1d splitted into: -L -1 -d 
Error: -L1d is not a flag of ls
Error: -name is not a flag of ls
Example 248 (1)
Original English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names excluding the paths */generated/* and */deploy/*
English: list all "files/directories" under current directory matching posix-egrep type regex _LONG_PATTERN in name excluding path _UNK and _UNK
Original Command: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -L1d
Ground truth: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -L -1 -d
Prediction: find . -not -name dir | xargs ls -not -name dir
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            UNARYLOGICOP(-not)
                FLAG(-name)
                    ARGUMENT(dir)
        HEADCOMMAND(xargs)
            HEADCOMMAND(ls)
                UNARYLOGICOP(-not)
                    FLAG(-name)
                        ARGUMENT(dir)

Example 249 (1)
Original English: Find files under /some/path that are not executable by the owner
English: find file under _UNK not executable by owner
Original Command: find /some/path -type f ! -perm -100 -ls
Ground truth: find /some/path -type f ! -perm -_NUM -ls
Prediction: find --version
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(--version)

Example 250 (1)
Original English: Find all PDF files in the current directory and its sub-directories that are not currently stored in the ./pdfs directory and move them into the ./pdfs directory.
English: find all PDF file in current directory and sub-directories not _UNK _UNK in _UNK directory and move into _UNK directory
Original Command: find . -name "*.pdf" -print | grep -v "^\./pdfs/" | xargs -J X mv X ./pdfs/
Ground truth: find . -name "*.pdf" -print | grep -v "^\./pdfs/" | xargs -J X mv X ./pdfs/
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 251 (1)
Original English: Find all directories in the current directory tree that are not accessible by all
English: find all directory in current directory tree not _UNK by all
Original Command: find -type d ! -perm -111
Ground truth: find -type d ! -perm -_NUM
Prediction: find . -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Example 252 (1)
Original English: Find blabla* files under current directory
English: find _UNK file under current directory
Original Command: find . -depth -name "blabla*" -type f | xargs rm -f
Ground truth: find . -depth -name "blabla*" -type f | xargs rm -f
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 253 (1)
Original English: List all regular files in the current directory tree modified within the last 24 hours
English: list all regular file in current directory tree modified within last "_NUM" hour
Original Command: find . -mtime 0 -type f -ls
Ground truth: find . -mtime _NUM -type f -ls
Prediction: find . -mtime _NUM -type d -mtime _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-mtime)
            ARGUMENT(_NUM)

Example 254 (1)
Original English: find all the files in the current folder which have a set uid set
English: find all file in current folder set uid set
Original Command: find . -perm -4000 -print
Ground truth: find . -perm -_NUM -print
Prediction: find . -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 255 (1)
Original English: Search directory /path/to/check/ for regular files
English: search directory _UNK for regular file
Original Command: find /path/to/check/* -maxdepth 0 -type f
Ground truth: find /path/to/check/* -maxdepth _NUM -type f
Prediction: find UNK -type d -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-type)
            ARGUMENT(f)

Example 256 (1)
Original English: search for those files that have been accessed in the last 10 hours
English: search for file accessed in last "_NUM" hour
Original Command: find /home/david -atime -2 -name '*.c'
Ground truth: find /home/david -atime -_NUM -name '*.c'
Prediction: find . -atime _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-atime)
            ARGUMENT(_NUM)

Quotation Error: space inside word '/re/ {print;exit}'
Example 257 (1)
Original English: find all the files ending with ".coffee" in the current folder and search for the first occurence of the word "re" in each line
English: find all file ending with _UNK in current folder and search for first _UNK of word "re" in each line
Original Command: find . -name '*.coffee' -exec awk '/re/ {print;exit}' {} \;
Ground truth: find . -name '*.coffee' -exec awk _LONG_PATTERN {} ;
Prediction: find . -name UNK -exec grep -H -i {} ; | xargs grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-H)
                    FLAG(-i)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                FLAG(-c)

Error: -newermt is not a flag of find
Example 258 (1)
Original English: find all the files in a directory which are modified after a specific month
English: find all file in directory modified after specific month
Original Command: find /usr -newermt "Feb 1"
Ground truth: find /usr -newermt _LONG_PATTERN
Prediction: find /etc -mtime -_NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/etc)
        FLAG(-mtime)
            ARGUMENT(-_NUM)
        FLAG(-print)

Example 259 (1)
Original English: display all the files in the home folder
English: display all file in home folder
Original Command: find $HOME -print
Ground truth: find $HOME -print
Prediction: find ~
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(~)

Example 260 (1)
Original English: Find files that match the executable bit for owner or group
English: find file match executable bit for owner or group
Original Command: find -type f -perm /110
Ground truth: find -type f -perm /_NUM
Prediction: find --version
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(--version)

Example 261 (1)
Original English: display all files in the file system which are bigger than 50MB and having size "filename" in them
English: display all file in file system bigger than "_NUMMB" and having size "filename" in
Original Command: find / -size +50M -iname "filename"
Ground truth: find / -size +_NUMM -iname "filename"
Prediction: find / -size +_NUMM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-size)
            ARGUMENT(+_NUMM)

Example 262 (1)
Original English: Find all regular files in the current directory tree, except GIT files
English: find all regular file in current directory tree except GIT file
Original Command: find .  -name .git -prune -o -type f -print
Ground truth: find . \( -name .git -prune -or -type f \) -print
Prediction: find . -type f \( -name .git -prune -or -name .git \) -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(.git)
            FLAG(-name)
                ARGUMENT(.git)
        FLAG(-print)

Example 263 (2)
Original English: Find all files/directories under $1 which have at least write permission for their owner and set write permission for group for these files/directories
English: find all "files/directories" under "$_NUM" at least write permission for owner and set write permission for group for "files/directories"
Original Command: find "$1" -perm -u+w -print0 | xargs chmod g+w
Ground truth: find "$_NUM" -perm -u+w -print0 | xargs chmod g+w
Prediction: find /path/to/search -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/path/to/search)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 264 (1)
Original English: find all files that are readable and writable by their owner
English: find all file readable and writable by owner
Original Command: find . -perm -600 -print
Ground truth: find . -perm -_NUM -print
Prediction: find . -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(-u+s)

Hi splitted into: -H -i 
Error: -Hi is not a flag of grep
Quotation Error: space inside word 'the brown dog'
Example 265 (1)
Original English: search for a word in all the files in the entire filesystem and display the matched fline along with the file name
English: search for word in all file in entire filesystem and display matched _UNK along with file name
Original Command: find / -type f -exec grep -Hi 'the brown dog' {} +
Ground truth: find / -type f -exec grep -H -i _LONG_PATTERN {} +
Prediction: find . -name UNK -exec grep -c {} ; | xargs -0 grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-c)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(grep)
                FLAG(-c)

Example 266 (1)
Original English: Search the current directory tree for files and directories with permissions 775
English: search current directory tree for file and directory with permission "_NUM"
Original Command: find .  -perm 775 -print
Ground truth: find . -perm _NUM -print
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 267 (2)
Original English: Find all files/directories under $1 which have at least read permission for their owner and set read permission for group for these files/directories
English: find all "files/directories" under "$_NUM" at least read permission for owner and set read permission for group for "files/directories"
Original Command: find $1 -perm -u+r -exec chmod g+r {} \;
Ground truth: find $_NUM -perm -u+r -exec chmod g+r {} ;
Prediction: find /path/to/search -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/path/to/search)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 268 (1)
Original English: find all the files in the current directory which have been accessed in the last 1 day and move them to TMP folder.
English: find all file in current directory accessed in last "_NUM" day and move to _UNK folder
Original Command: find . -atime +1 -type f -exec mv {} TMP \;
Ground truth: find . -atime +_NUM -type f -exec mv {} TMP ;
Prediction: find . -mtime -_NUM | xargs -0 mv
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-mtime)
                ARGUMENT(-_NUM)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(mv)

Example 269 (1)
Original English: add read,write permissions to all the files in the current folder which have the permission 600
English: add read write permission to all file in current folder permission "_NUM"
Original Command: find . -perm 600 -print | xargs chmod 666
Ground truth: find . -perm _NUM -print | xargs chmod _NUM
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 270 (1)
Original English: This command find displays the files which are modified in the last 15 minutes. And it lists only the unhidden files. i.e hidden files that starts with a . (period) are not displayed in the find output.
English: command find display file modified in last "_NUM" minute and list only _UNK file "i.e" hidden file start with ( period ) not _UNK in find output
Original Command: find . -mmin -15 \( ! -regex ".*/\..*" \)
Ground truth: find . -mmin -_NUM ! -regex ".*/\..*"
Prediction: find . -type f -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 271 (1)
Original English: Find all *.php (case insensitive) files and *.js files/directories (case insensitive) under /home/jul/here excluding /home/jul/here/exclude/* paths
English: find all "*.php" ( case insensitive ) file and "*.js" "files/directories" ( case insensitive ) under "/home/jul/here" excluding "/home/jul/here/exclude/*" path
Original Command: find /home/jul/here -type f -iname "*.php" ! -path "/home/jul/here/exclude/*" -o -iname "*.js" ! -path "/home/jul/here/exclude/*"
Ground truth: find /home/jul/here -type f -iname "*.php" \( ! -path "/home/jul/here/exclude/*" -or -iname "*.js" \) ! -path "/home/jul/here/exclude/*"
Prediction: find /home/jul/here -iname "*.js" -type f -not -iname "*.js"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home/jul/here)
        FLAG(-iname)
            ARGUMENT("*.js")
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-iname)
                ARGUMENT("*.js")

Example 272 (1)
Original English: Perform a case insensitive search for *.jpg files which are greater than 500KB in size under /ftp/dir/ directory
English: perform case insensitive search for "*.jpg" file greater than "_NUMKB" in size under _UNK directory
Original Command: find /ftp/dir/ -size +500k -iname "*.jpg"
Ground truth: find /ftp/dir/ -size +_NUMk -iname "*.jpg"
Prediction: find . -type d -iname "apt"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-iname)
            ARGUMENT("apt")

Example 273 (1)
Original English: Find all files in the file system with the SUID bit
English: find all file in file system with SUID bit
Original Command: find / -perm -u+s -print
Ground truth: find / -perm -u+s -print
Prediction: find / -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-perm)
            ARGUMENT(-u+s)

Example 274 (2)
Original English: Find files/directories that does not have write permssion for group
English: find "files/directories" doe not write _UNK for group
Original Command: find /path ! -perm /g+w
Ground truth: find /path ! -perm /g+w
Prediction: find . -not -path '*macs' -prune
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT('*macs')

Example 275 (1)
Original English: find files of the type directory only in the current directory without recursion
English: find file of type directory only in current directory without _UNK
Original Command: find . -maxdepth 1 -type d
Ground truth: find . -maxdepth _NUM -type d
Prediction: find . -maxdepth _NUM -name *.bar -maxdepth _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT(*.bar)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-print)

Example 276 (1)
Original English: Locating large files (> 100 MB) in /home/ for 'cleaning'
English: _UNK large file ( ">" "_NUM" MB ) in "/home/" for _UNK
Original Command: find /home -type f -size +100M -delete
Ground truth: find /home -type f -size +_NUMM -delete
Prediction: find /home -type f -size +_NUMM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(+_NUMM)
        FLAG(-print)

Example 277 (1)
Original English: move files accessed more than one day ago to directory TMP
English: move file accessed more than "_NUM" day ago to directory _UNK
Original Command: find . -atime +1 -type f -exec mv {} TMP \; # mv files older then 1 day to dir TMP
Ground truth: find . -atime +_NUM -type f -exec mv {} TMP ;
Prediction: find . -type d -atime +_NUM | xargs -0 chmod _NUM
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-atime)
                ARGUMENT(+_NUM)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(chmod)
                ARGUMENT(_NUM)

Example 278 (1)
Original English: find all the files in the filesystem which do not belong to any group
English: find all file in filesystem not belong to any group
Original Command: find / -nogroup -print
Ground truth: find / -nogroup -print
Prediction: find -nogroup -nogroup
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-nogroup)
        FLAG(-nogroup)

rf splitted into: -r -f 
Error: -rf is not a flag of rm
Example 279 (1)
Original English: Remove all "work" directories residing in /usr/ports and below
English: remove all "work" directory residing in "/usr/ports" and below
Original Command: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Ground truth: find /usr/ports/ -name work -type d -print -exec rm -r -f {} ;
Prediction: find . -type d -name UNK -exec mv {} ; | xargs -0 grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(mv)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(grep)
                FLAG(-c)

Example 280 (1)
Original English: find all the core files in the temp folder and force delete them
English: find all core file in temp folder and force delete
Original Command: find /tmp -name core -type f -print | xargs /bin/rm -f
Ground truth: find /tmp -name core -type f -print | xargs rm -f
Prediction: find . -name "*.tmp" -exec rm {} ; | xargs rm
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT("*.tmp")
            FLAG(-exec::;)
                HEADCOMMAND(rm)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            HEADCOMMAND(rm)

Example 281 (1)
Original English: Print all filenames in /usr/src except for those that are of the form '*,v' or '.*,v'
English: print all filename in "/usr/src" except for of form _UNK or _UNK
Original Command: find /usr/src -not \( -name "*,v" -o -name ".*,v" \) '{}' \; -print
Ground truth: find /usr/src -not \( -name "*,v" -or -name ".*,v" \) '{}' ; -print
Prediction: find . -mtime -_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(-_NUM)

Example 282 (1)
Original English: Find all the files that are not named "MyCProgram.c" in the current directory only and without regards to case.
English: find all file not named "MyCProgram.c" in current directory only and without regard to case
Original Command: find -maxdepth 1 -not -iname "MyCProgram.c"
Ground truth: find -maxdepth _NUM -not -iname "MyCProgram.c"
Prediction: find -maxdepth -name '*macs' -prune -iname "sum.java"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-maxdepth)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT('*macs')
        FLAG(-iname)
            ARGUMENT("sum.java")

Example 283 (1)
Original English: Remove all *.txt files in the home directory tree with confirmation
English: remove all "*.txt" file in home directory tree with confirmation
Original Command: find $HOME/. -name *.txt -ok rm {} \;
Ground truth: find $HOME/. -name *.txt -ok rm {} ;
Prediction: find ~/ -name '*.txt' -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(~/)
        FLAG(-name)
            ARGUMENT('*.txt')
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 284 (1)
Original English: display the long listing detials of all the files in the folder junk which is in home folder.
English: display long listing _UNK of all file in folder junk in home folder
Original Command: find ~/junk   -name "*" -exec ls -l {} \;
Ground truth: find ~/junk -name "*" -exec ls -l {} ;
Prediction: find UNK -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-iname)
            ARGUMENT(UNK)

Error: -newermt is not a flag of find
Example 285 (1)
Original English: display all the files in the current folder which have been modified in one hour ago
English: display all file in current folder modified in "_NUM" hour ago
Original Command: find .  -newermt "1 hour ago"
Ground truth: find . -newermt _LONG_PATTERN
Prediction: find -mmin _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-mmin)
            ARGUMENT(_NUM)

1hsS splitted into: -1 -h -s -S 
Error: -1hsS is not a flag of ls
Example 286 (1)
Original English: find all the regular files in a directory which are bigger than a specific size and display long listing of files in decreasing order of size
English: find all regular file in directory bigger than specific size and display long listing of file in _UNK order of size
Original Command: find $dir -type -f size +$size -print0 | xargs -0 ls -1hsS
Ground truth: find $dir -type -f size +$size -print0 | xargs -0 ls -1 -h -s -S
Prediction: find dir -type f -printf _LONG_PATTERN | xargs -0 ls -l -S
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(dir)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(_LONG_PATTERN)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-S)

Example 287 (3)
Original English: Search for the case insensitive regex expanded by $2 in all files named $1 (to be expanded) under current directory
English: search for case insensitive regex expanded by "$_NUM" in all file named "$_NUM" ( to expanded ) under current directory
Original Command: find . -name "$1" -type f -print0 | xargs -0 grep -i "$2"
Ground truth: find . -name "$_NUM" -type f -print0 | xargs -0 grep -i "$_NUM"
Prediction: find . -type f -exec grep -c {} ; | xargs grep -c
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-c)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            HEADCOMMAND(grep)
                FLAG(-c)

Example 288 (1)
Original English: display all the files in the file system which belong to the user "wnj" or which are modified after the file "ttt"
English: display all file in file system belong to user "wnj" or modified after file "ttt"
Original Command: find / \( -newer ttt -or -user wnj \) -print
Ground truth: find / \( -newer ttt -or -user wnj \) -print
Prediction: find / -user wnj -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-user)
            ARGUMENT(wnj)
        FLAG(-print)

Example 289 (1)
Original English: Find all *.epub, *.mobi, *.chm, *.rtf, *.lit and *.djvu files/directories under current directory
English: find all _UNK _UNK _UNK _UNK _UNK and _UNK "files/directories" under current directory
Original Command: find ./ -name '*.epub' -o -name '*.mobi' -o -name '*.chm' -o -name '*.rtf' -o -name '*.lit' -o -name '*.djvu'
Ground truth: find ./ \( -name '*.epub' -or -name '*.mobi' -or -name '*.chm' -or -name '*.rtf' -or -name '*.lit' -or -name '*.djvu' \)
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 290 (2)
Original English: Find all regular files in the current directory tree and count them
English: find all regular file in current directory tree and count
Original Command: find -type f -printf '.' | wc -c
Ground truth: find -type f -printf '.' | wc -c
Prediction: find ./ -type f | xargs wc -l
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(./)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            HEADCOMMAND(wc)
                FLAG(-l)

Example 291 (1)
Original English: replace the word foo to bar in all the regular/normal files in the current folder (does not update the file)
English: replace word foo to bar in all "regular/normal" file in current folder ( doe not update file )
Original Command: find . -type f -exec sed -i 's/foo/bar/g' {} +
Ground truth: find . -type f -exec sed -i 's/foo/bar/g' {} +
Prediction: find . -type f -exec sed -i {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(sed)
                FLAG(-i)
                ARGUMENT({})

Example 292 (1)
Original English: List all hidden regular files from the current directory separating them with zeroes
English: list all hidden regular file from current directory separating with zero
Original Command: find . -maxdepth 1 -type f -name '.*' -printf '%f\0'
Ground truth: find . -maxdepth _NUM -type f -name '.*' -printf '%f\_NUM'
Prediction: find . -type f -name "*fink*"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT("*fink*")

Example 293 (1)
Original English: Find all regular files in the "aaa" directory
English: find all regular file in _UNK directory
Original Command: find aaa/ -maxdepth 1 -type f
Ground truth: find aaa/ -maxdepth _NUM -type f
Prediction: find . -type f -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(UNK)

Example 294 (1)
Original English: Find files/directories under current directory that matches 'projects/insanewebproject' in their paths
English: find "files/directories" under current directory match _UNK in path
Original Command: find -ipath 'projects/insanewebproject'
Ground truth: find -ipath 'projects/insanewebproject'
Prediction: find . -path UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-path)
            ARGUMENT(UNK)

Example 295 (1)
Original English: Search the current directory tree for PHP files changed less than 14 days ago
English: search current directory tree for PHP file changed le than "_NUM" day ago
Original Command: find . -name *.php -ctime -14
Ground truth: find . -name *.php -ctime -_NUM
Prediction: find . -type f -mtime _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(_NUM)
        FLAG(-print)

Example 296 (1)
Original English: know whether a file has 0644 permissions
English: _UNK whether file ha "_NUM" permission
Original Command: find myfile -perm 0644 -print
Ground truth: find myfile -perm _NUM -print
Prediction: find . -name '*.cgi'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT('*.cgi')

Example 297 (1)
Original English: Find all files that have wrong permission
English: find all file _UNK permission
Original Command: find / \( -perm -006 -o -perm -007 \) \( ! -type -l \) -ls
Ground truth: find / \( -perm -_NUM -or -perm -_NUM \) ! -type -l -ls
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 298 (1)
Original English: Locate world-writable files and directories on the system
English: locate _UNK file and directory on system
Original Command: find / -path /proc -prune -o -perm -2 ! -type l -ls
Ground truth: find / \( -path /proc -prune -or -perm -_NUM \) ! -type l -ls
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 299 (1)
Original English: Search the /path directory tree for files missing g+w and o+w bits
English: search "/path" directory tree for file _UNK _UNK and _UNK bit
Original Command: find /path ! -perm /022
Ground truth: find /path ! -perm /_NUM
Prediction: find . -perm UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(UNK)

Example 300 (1)
Original English: Find all files in maximum 2 levels down the current directory
English: find all file in maximum "_NUM" level down current directory
Original Command: find . -maxdepth 2  -type f
Ground truth: find . -maxdepth _NUM -type f
Prediction: find -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -name testfile.txt
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT(testfile.txt)

Example 301 (1)
Original English: find all files in the current directory excluding those that end with .js or have the words .min or console in their name
English: find all file in current directory excluding end with ".js" or word _UNK or _UNK in name
Original Command: find . -type f \( -name "*.js" ! -name "*-min*" ! -name "*console*" \)
Ground truth: find . -type f \( -name "*.js" -and ! -name "*-min*" -and ! -name "*console*" \)
Prediction: find . \( -name UNK -or -name UNK \)
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-name)
                ARGUMENT(UNK)

Error: -newermt is not a flag of find
Example 302 (1)
Original English: display all the files in the usr folder which have been modified after Feburary 1st
English: display all file in usr folder modified after _UNK _UNK
Original Command: find /usr -newermt "Feb 1"
Ground truth: find /usr -newermt _LONG_PATTERN
Prediction: find UNK -newer UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-newer)
            ARGUMENT(UNK)

rf splitted into: -r -f 
Error: -rf is not a flag of rm
rf splitted into: -r -f 
Error: -rf is not a flag of rm
Example 303 (2)
Original English: recursively delete, without prompting, directories under /data/bin/test, that are older than 10 days and where the name starts with a number
English: recursively delete without prompting directory under _UNK older than "_NUM" day and where name start with number
Original Command: find /data/bin/test -type d -mtime +10 -name "[0-9]*" -exec rm -rf {} \;
Ground truth: find /data/bin/test -type d -mtime +_NUM -name "[_NUM-_NUM]*" -exec rm -r -f {} ;
Prediction: find . -type d -name UNK -exec rm {} ; | xargs -0 rm
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(rm)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(rm)

Example 304 (1)
Original English: list files in the directory "$directory" with permissions "$permissions"
English: list file in directory "$directory" with permission _UNK
Original Command: find "$directory" -perm "$permissions"
Ground truth: find "$directory" -perm "$permissions"
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 305 (1)
Original English: list all the ".ksh" files in the current directory
English: list all _UNK file in current directory
Original Command: find . -ls -name "*.ksh"
Ground truth: find . -ls -name "*.ksh"
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 306 (1)
Original English: display all the ".mov" video files in the current folder in the format filename and folder path
English: display all _UNK video file in current folder in format filename and folder path
Original Command: find . -iname "*.mov" -printf "%p %f\n"
Ground truth: find . -iname "*.mov" -printf _LONG_PATTERN
Prediction: find . -path -path UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-path)
            FLAG(-path)
                ARGUMENT(UNK)

Example 307 (1)
Original English: find all the files in the current folder which are bigger than 1MB
English: find all file in current folder bigger than "_NUMMB"
Original Command: find . — size +1000k -print
Ground truth: find . — size +_NUMk -print
Prediction: find . -size +_NUMM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-size)
            ARGUMENT(+_NUMM)

vf splitted into: -v -f 
Error: -vf is not a flag of rm
Example 308 (1)
Original English: Remove all .sh files in the current directory tree whose names begin with "t"
English: remove all ".sh" file in current directory tree whose name begin with _UNK
Original Command: find . -name "t*.sh" -exec rm -vf '{}' \;
Ground truth: find . -name "t*.sh" -exec rm -v -f '{}' ;
Prediction: find . -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 309 (2)
Original English: Print your/dir if it's empty
English: print _UNK if "it\'s" empty
Original Command: find "your/dir" -prune -empty
Ground truth: find "your/dir" -prune -empty
Prediction: find . -maxdepth _NUM -type d -empty
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Example 310 (1)
Original English: display the count of regular files in a folder which have execute permission to all the users
English: display count of regular file in folder execute permission to all user
Original Command: find home/magie/d2 -type f -perm +111 | wc -l
Ground truth: find home/magie/d_NUM -type f -perm +_NUM | wc -l
Prediction: find . -type f -ok ; | xargs -0 ls -l {}
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ok::;)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 311 (1)
Original English: find all directories in the current folder and do not search in sub directories
English: find all directory in current folder and not search in sub directory
Original Command: find . -type d -maxdepth 1
Ground truth: find . -type d -maxdepth _NUM
Prediction: find . -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Example 312 (1)
Original English: Search the current directory tree for regular files lacking read permissions for user, group, or others
English: search current directory tree for regular file _UNK read permission for user group or others
Original Command: find . -type f ! -perm -444
Ground truth: find . -type f ! -perm -_NUM
Prediction: find . -type f -user UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-user)
            ARGUMENT(UNK)

Iw splitted into: -I -w 
Error: -Iw is not a flag of grep
Example 313 (1)
Original English: Search the current directory for files whose names start with "messages." ignoring SVN files
English: search current directory for file whose name start with "messages." ignoring SVN file
Original Command: find \( -name 'messages.*' ! -path "*/.svn/*" \) -exec grep -Iw uint {} +
Ground truth: find \( -name 'messages.*' -and ! -path "*/.svn/*" \) -exec grep -I -w uint {} +
Prediction: find . -name dir -not -name "*"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(dir)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT("*")

Example 314 (1)
Original English: Print the paths of the directories from the paths expanded by the glob pattern /path/to/directory/*
English: print path of directory from path expanded by glob pattern "/path/to/directory/*"
Original Command: find /path/to/directory/* -maxdepth 0 -type d
Ground truth: find /path/to/directory/* -maxdepth _NUM -type d
Prediction: find -version -maxdepth _NUM -maxdepth +_NUM -maxdepth +_NUM -type d -not -path UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-version)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(+_NUM)
        FLAG(-maxdepth)
            ARGUMENT(+_NUM)
        FLAG(-type)
            ARGUMENT(d)
        UNARYLOGICOP(-not)
            FLAG(-path)
                ARGUMENT(UNK)

Example 315 (1)
Original English: display a list of all the files  in the home folder which have been modified today
English: display list of all file in home folder modified today
Original Command: find ~ -type f -mtime 0 -ls
Ground truth: find ~ -type f -mtime _NUM -ls
Prediction: find $HOME -mtime _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT($HOME)
        FLAG(-mtime)
            ARGUMENT(_NUM)
        FLAG(-print)

Example 316 (1)
Original English: Search the current directory, except the subdirectory tree ".svn", for files whose name is "foo.cpp"
English: search current directory except subdirectory tree ".svn" for file whose name _UNK
Original Command: find . -name 'foo.cpp' '!' -path '.svn'
Ground truth: find . -name 'foo.cpp' ! -path '.svn'
Prediction: find . -not -name UNK -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 317 (1)
Original English: Print $d if $d is an empty directory
English: print "$d" if "$d" empty directory
Original Command: find "$d" -prune -empty -type d
Ground truth: find "$d" -prune -empty -type d
Prediction: find . -type d -empty
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Example 318 (2)
Original English: Replace all occurrence of "subdomainA.example.com" with "subdomainB.example.com" in all files under /home/www and below
English: replace all occurrence of "subdomainA.example.com" with "subdomainB.example.com" in all file under "/home/www" and below
Original Command: find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'
Ground truth: find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA.example.com/subdomainB.example.com/g'
Prediction: find /data -type f | xargs -0 ls -1
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(/data)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-1)

Example 319 (1)
Original English: find all text files in a directory which have the word "DOGS" in their content.
English: find all text file in directory word _UNK in content
Original Command: find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} \; -print
Ground truth: find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} ; -print
Prediction: find UNK -iname UNK -exec wc -l ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-iname)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)

Quotation Error: space inside word '{sub(/^[^ ]+/,sprintf("f %10d",$1))}1'
Quotation Error: space inside word '{sub(/^[^ ]+ +[^ ]/,sprintf("%s %10d",$1,$2))}1'
Example 320 (2)
Original English: Print the names and sizes of regular files residing in the "tmp" directory tree
English: print name and size of regular file residing in _UNK directory tree
Original Command: find tmp -type f -printf "%s %p\n" | awk '{sub(/^[^ ]+/,sprintf("f %10d",$1))}1'
Ground truth: find tmp -type f -printf _LONG_PATTERN | awk _LONG_PATTERN
Prediction: find . -type d -printf _LONG_PATTERN
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-printf)
            ARGUMENT(_LONG_PATTERN)

Example 321 (1)
Original English: Look for files in the current directory tree to which the group users have full access
English: look for file in current directory tree to group user full access
Original Command: find . -perm -070 -print
Ground truth: find . -perm -_NUM -print
Prediction: find . -group -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-group)
        FLAG(-print)

Example 322 (1)
Original English: find all the files in the current folder that have been accessed in today from the start of the day
English: find all file in current folder accessed in today from start of day
Original Command: find -daystart   -atime 0
Ground truth: find -daystart -atime _NUM
Prediction: find . -atime _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-atime)
            ARGUMENT(_NUM)

Example 323 (1)
Original English: find all files that do not have execute permission to all
English: find all file not execute permission to all
Original Command: find . -type d ! -perm -111
Ground truth: find . -type d ! -perm -_NUM
Prediction: find . -perm -u+s
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(-u+s)

Example 324 (1)
Original English: find and delete all the empty directories in the current folder and all its sub directories too
English: find and delete all empty directory in current folder and all sub directory _UNK
Original Command: find . -depth -empty -type d -delete
Ground truth: find . -depth -empty -type d -delete
Prediction: find . -type d -empty
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Warning: -exec missing ending ';'
Example 325 (1)
Original English: List all files in the /myfiles directory tree
English: list all file in "/myfiles" directory tree
Original Command: find /myfiles -exec ls -l {} ;
Ground truth: find /myfiles -exec ls -l {} \;
Prediction: find .
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)

Example 326 (1)
Original English: look for all files larger than 10 megabytes (10485760 bytes) within /home
English: look for all file larger than "_NUM" megabyte ( "_NUM" byte ) within "/home"
Original Command: find /home -type f -size +10485760c -print
Ground truth: find /home -type f -size +_NUMc -print
Prediction: find / -size +_NUMc
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-size)
            ARGUMENT(+_NUMc)

Example 327 (1)
Original English: Move files from $sourcePath to $destPath that have not been modified in the last 10 days
English: move file from _UNK to _UNK not modified in last "_NUM" day
Original Command: find $sourcePath -type f -mtime +10 -name "*.log" -exec mv {} $destPath \;
Ground truth: find $sourcePath -type f -mtime +_NUM -name "*.log" -exec mv {} $destPath ;
Prediction: find . -maxdepth _NUM -name "*.html" -mtime -_NUM | xargs -0 rm
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-maxdepth)
                ARGUMENT(_NUM)
            FLAG(-name)
                ARGUMENT("*.html")
            FLAG(-mtime)
                ARGUMENT(-_NUM)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(rm)

Example 328 (1)
Original English: Search the current directory tree for directories lacking execute permissions for user, group, or others
English: search current directory tree for directory _UNK execute permission for user group or others
Original Command: find . -type d ! -perm -111
Ground truth: find . -type d ! -perm -_NUM
Prediction: find . -type d -user harry
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-user)
            ARGUMENT(harry)

Example 329 (1)
Original English: Find files in the current directory recursively that are not readable by all
English: find file in current directory recursively not readable by all
Original Command: find -type f ! -perm -444
Ground truth: find -type f ! -perm -_NUM
Prediction: find . -maxdepth _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-print)

Quotation Error: space inside word 'Since -printf is an action the implicit -print is not applied\n'
Example 330 (1)
Original English: search for a file "file" in current folder and if found display a print message
English: search for file "file" in current folder and if found display print _UNK
Original Command: find -name file -printf 'Since -printf is an action the implicit -print is not applied\n'
Ground truth: find -name file -printf _LONG_PATTERN
Prediction: find -name '*macs' -quit
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-name)
            ARGUMENT('*macs')
        FLAG(-quit)

n3 splitted into: -n -3 
Error: -n3 is not a flag of xargs
Example 331 (1)
Original English: List all the .c files under the current directory and below in a 3 column format
English: list all ".c" file under current directory and below in "_NUM" _UNK format
Original Command: find . -name "*.c" | xargs -n3
Ground truth: find . -name "*.c" | xargs -n -3
Prediction: find . -name UNK -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-print)

Example 332 (1)
Original English: Search the given $directory for files with permissions stored in $permissions
English: search given "$directory" for file with permission _UNK in _UNK
Original Command: find "$directory" -perm "$permissions"
Ground truth: find "$directory" -perm "$permissions"
Prediction: find . -perm UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(UNK)

Example 333 (1)
Original English: find all the regular/normal files in the current folder and do not search in the sub directories
English: find all "regular/normal" file in current folder and not search in sub directory
Original Command: find . -maxdepth 1 -type f
Ground truth: find . -maxdepth _NUM -type f
Prediction: find . -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Example 334 (1)
Original English: find all files in and under the current directory that have read, write and execute permissions set for all users.
English: find all file in and under current directory read write and execute permission set for all user
Original Command: find . -perm 777 -print
Ground truth: find . -perm _NUM -print
Prediction: find . -type d -ok chmod _NUM {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-ok::;)
            HEADCOMMAND(chmod)
                ARGUMENT(_NUM)
                ARGUMENT({})

Example 335 (1)
Original English: display all the regular files in the folder "$(FOLDER)" which are modified in the last $(RETENTION)*24 hours and excluding hidden files
English: display all regular file in folder _LONG_PATTERN modified in last _UNK _UNK _UNK hour and excluding hidden file
Original Command: find ${FOLDER} -type f ! -name \".*\" -mtime -${RETENTION}
Ground truth: find ${FOLDER} -type f ! -name \".*\" -mtime -${RETENTION}
Prediction: find . -type f -not -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(UNK)

Example 336 (2)
Original English: Find directory "your/dir" if it is empty
English: find directory _UNK if empty
Original Command: find your/dir -prune -empty -type d
Ground truth: find your/dir -prune -empty -type d
Prediction: find . -type d -empty
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Example 337 (1)
Original English: search for the file "abc" in the current folder or display all the directories
English: search for file "abc" in current folder or display all directory
Original Command: find . -name abc -or -type d
Ground truth: find . \( -name abc -or -type d \)
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 338 (1)
Original English: Find files under /some/path that are not executable
English: find file under _UNK not executable
Original Command: find /some/path -type f ! -perm -111 -ls
Ground truth: find /some/path -type f ! -perm -_NUM -ls
Prediction: find /etc -maxdepth _NUM -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/etc)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)

r0 splitted into: -r -0 
Error: -r0 is not a flag of xargs
Quotation Error: space inside word 's/ *$//'
Example 339 (1)
Original English: Remove trailing white spaces from all files under dir directory ensuring white space safety in the filename
English: remove trailing white space from all file under dir directory ensuring white space safety in filename
Original Command: find dir -type f -print0 | xargs -r0 sed -i 's/ *$//'
Ground truth: find dir -type f -print0 | xargs -r -0 sed -i _LONG_PATTERN
Prediction: find dir -type f -print0 | xargs -0 rm
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(dir)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(rm)

Example 340 (1)
Original English: Find all directories in current directory without going into sub-directories
English: find all directory in current directory without going into sub-directories
Original Command: find . -type d -maxdepth 1
Ground truth: find . -type d -maxdepth _NUM
Prediction: find . -maxdepth _NUM -type d -maxdepth _NUM -maxdepth _NUM -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Example 341 (1)
Original English: find all the directories in the home folder do not search in sub directories
English: find all directory in home folder not search in sub directory
Original Command: find /home -maxdepth 1 -type d
Ground truth: find /home -maxdepth _NUM -type d
Prediction: find ~/ -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(~/)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Example 342 (1)
Original English: Find all directories under /path whose names are 33 characters long
English: find all directory under "/path" whose name "_NUM" character long
Original Command: find /path -type d -printf "%f\n" | awk 'length==33'
Ground truth: find /path -type d -printf "%f\n" | awk 'length==_NUM'
Prediction: find . -type d -name '?????????????????????????????????'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT('?????????????????????????????????')

Example 343 (1)
Original English: Print $d if $d is empty
English: print "$d" if "$d" empty
Original Command: find "$d" -prune -empty
Ground truth: find "$d" -prune -empty
Prediction: find . -name modules -exec ls -l {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(modules)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

ld splitted into: -l -d 
Error: -ld is not a flag of ls
Example 344 (1)
Original English: list the details of all the directories in the current folder
English: list detail of all directory in current folder
Original Command: find . -type d -exec ls -ld {} \;
Ground truth: find . -type d -exec ls -l -d {} ;
Prediction: find . -type d -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Example 345 (1)
Original English: find files in the users home directory and for each one, ask the user to confirm to delete the file.
English: find file in user home directory and for each "_NUM" ask user to confirm to delete file
Original Command: find $HOME/. -name *.txt -ok rm {} \;
Ground truth: find $HOME/. -name *.txt -ok rm {} ;
Prediction: find . -user pat -ok rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-user)
            ARGUMENT(pat)
        FLAG(-ok::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Warning: -exec missing ending ';'
Example 346 (1)
Original English: delete all the files in the current folder  which do not belong to any user
English: delete all file in current folder not belong to any user
Original Command: find / -nouser -exec rm {}\;
Ground truth: find / -nouser -exec rm {}; \;
Prediction: find . -nouser -ok rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-nouser)
        FLAG(-ok::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 347 (1)
Original English: search for the files with the name "temp" and which have not been accessed in the last 7*24 hours in the /usr folder
English: search for file with name "temp" and not accessed in last "_NUM*_NUM" hour in "/usr" folder
Original Command: find /usr -name temp -atime +7 -print
Ground truth: find /usr -name temp -atime +_NUM -print
Prediction: find /usr -atime +_NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/usr)
        FLAG(-atime)
            ARGUMENT(+_NUM)
        FLAG(-print)

Example 348 (1)
Original English: find all regular files exclude .o and exclude *.swp and output line number of soc_attach if it has
English: find all regular file exclude ".o" and exclude "*.swp" and output line number of _UNK if ha
Original Command: find .  \( ! -path "./output/*" \) -a \( -type f \) -a \( ! -name '*.o' \) -a \( ! -name '*.swp' \) | xargs grep -n soc_attach
Ground truth: find . \( ! -path "./output/*" -and -type f -and ! -name '*.o' -and ! -name '*.swp' \) | xargs grep -n soc_attach
Prediction: find . -type f -name UNK -exec mv -l -L {} ; | xargs -0 cp
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(UNK)
            FLAG(-exec::;)
                HEADCOMMAND(mv)
                    FLAG(-l)
                    FLAG(-L)
                    ARGUMENT({})
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(cp)

Error: -xdev is not a flag of find
Zli splitted into: -Z -l -i 
Error: -Zli is not a flag of grep
Error: -xdev is not a flag of find
li splitted into: -l -i 
Error: -li is not a flag of grep
Error: -xdev is not a flag of find
Example 349 (3)
Original English: Find all files that contain the case insensitive regex 'stringtofind' in maximum 1 level down the / directory without descending into other partitions
English: find all file contain case insensitive regex "stringtofind" in maximum "_NUM" level down "/" directory without descending into other partition
Original Command: find / -maxdepth 1 -xdev -type f -exec grep -Zli "stringtofind" {} +
Ground truth: find / -maxdepth _NUM -xdev -type f -exec grep -Z -l -i "stringtofind" {} +
Prediction: find / -xdev -xdev -xdev -xdev -xdev -xdev -type f -exec sed -i {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-xdev)
        FLAG(-xdev)
        FLAG(-xdev)
        FLAG(-xdev)
        FLAG(-xdev)
        FLAG(-xdev)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(sed)
                FLAG(-i)
                ARGUMENT({})

Example 350 (1)
Original English: find all the jpg files in current folder and sort them
English: find all jpg file in current folder and sort
Original Command: find . -type f|grep -i "\.jpg$" |sort
Ground truth: find . -type f | grep -i "\.jpg$" | sort
Prediction: find . -name "*.jpg" | xargs ls -l -r -t
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-name)
                ARGUMENT("*.jpg")
        HEADCOMMAND(xargs)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-r)
                FLAG(-t)

rf splitted into: -r -f 
Error: -rf is not a flag of rm
Example 351 (1)
Original English: find all the directories starting with the name "someNamePrefix" which have not been modified in the last 10 days and force delete them
English: find all directory starting with name _UNK not modified in last "_NUM" day and force delete
Original Command: find /somePath -type d -name ‘someNamePrefix*’ -mtime +10 -print | xargs rm -rf ;
Ground truth: find /somePath -type d -name ‘someNamePrefix*’ -mtime +_NUM -print | xargs rm -r -f
Prediction: find . -maxdepth _NUM -type d -mtime +_NUM -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-mtime)
            ARGUMENT(+_NUM)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 352 (1)
Original English: Change permissions of files older than 30 days
English: change permission of file older than "_NUM" day
Original Command: find /path/to/directory -type f -mtime +30 -exec chmod 644 {} +
Ground truth: find /path/to/directory -type f -mtime +_NUM -exec chmod _NUM {} +
Prediction: find . -mtime -_NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(-_NUM)
        FLAG(-print)

Example 353 (1)
Original English: find all regular files in a folder using regular expressions which do not have a specific name pattern
English: find all regular file in folder using regular expression not specific name pattern
Original Command: find "$DIRECTORY_TO_PROCESS" -type f -iregex ".*\.$FILES_TO_PROCES" ! -name "$find_excludes" -print0
Ground truth: find "$DIRECTORY_TO_PROCESS" -type f -iregex ".*\.$FILES_TO_PROCES" ! -name "$find_excludes" -print0
Prediction: find . -regex UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-regex)
            ARGUMENT(UNK)

Example 354 (1)
Original English: Find all regular files in .git and replace every occurrences of 'subdomainB.example.com'  with 'subdomainA.example.com' in those files
English: find all regular file in ".git" and replace every occurrence of "subdomainB.example.com" with "subdomainA.example.com" in file
Original Command: find .git -type f -print0 | xargs -0 sed -i 's/subdomainB\.example\.com/subdomainA.example.com/g'
Ground truth: find .git -type f -print0 | xargs -0 sed -i 's/subdomainB\.example\.com/subdomainA.example.com/g'
Prediction: find . -type f -print0 | xargs -0 sed -i ^.*
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(sed)
                FLAG(-i)
                ARGUMENT(^.*)

Example 355 (1)
Original English: search for all the files ending with ".todo" in some folder and display the directory name
English: search for all file ending with ".todo" in some folder and display directory name
Original Command: find "$STORAGEFOLDER" -name .todo -printf '%h\n'
Ground truth: find "$STORAGEFOLDER" -name .todo -printf '%h\n'
Prediction: find /usr/share/man/ -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/usr/share/man/)
        FLAG(-name)
            ARGUMENT(UNK)

Example 356 (1)
Original English: Find all regular files under /home/www and replace every occurrences of 'subdomainA.example.com' with 'subdomainB.example.com' in those files
English: find all regular file under "/home/www" and replace every occurrence of "subdomainA.example.com" with "subdomainB.example.com" in file
Original Command: find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g'
Ground truth: find /home/www -type f -print0 | xargs -0 sed -i 's/subdomainA\.example\.com/subdomainB.example.com/g'
Prediction: find dir -type f -print0 | xargs -0 sed -i 's/toreplace/replaced/g' ^.*
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(dir)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(sed)
                FLAG(-i)
                    ARGUMENT('s/toreplace/replaced/g')
                ARGUMENT(^.*)

Example 357 (1)
Original English: find all files in the file system with the permissions 777 and having the word "filename" in their name.
English: find all file in file system with permission "_NUM" and having word "filename" in name
Original Command: find / -perm 777 -iname "filename"
Ground truth: find / -perm _NUM -iname "filename"
Prediction: find / -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 358 (1)
Original English: find the files which are modified 30 minutes back
English: find file modified "_NUM" minute back
Original Command: find . -not -mmin -30
Ground truth: find . -not -mmin -_NUM
Prediction: find . -mmin _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mmin)
            ARGUMENT(_NUM)

Example 359 (1)
Original English: display all the java, xml and action scripts (.as) files in a directory
English: display all java xml and _UNK script ( _UNK ) file in directory
Original Command: find dir1 -type f -a \( -name "*.java" -o -name "*.as" -o -name "*.xml" \)
Ground truth: find dir_NUM \( -type f -and \( -name "*.java" -or -name "*.as" -or -name "*.xml" \) \)
Prediction: find dir -name UNK -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(dir)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-type)
            ARGUMENT(f)

Example 360 (1)
Original English: find all the files in the file system which have the permission 777 and with the name "dateiname"
English: find all file in file system permission "_NUM" and with name "dateiname"
Original Command: find / -perm 777 -iname "Dateiname"
Ground truth: find / -perm _NUM -iname "Dateiname"
Prediction: find / -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 361 (1)
Original English: find all the regular files in the current directory which do not have a read permission
English: find all regular file in current directory not read permission
Original Command: find -type f ! -perm -444
Ground truth: find -type f ! -perm -_NUM
Prediction: find . -type f -mtime +_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(+_NUM)

fr splitted into: -f -r 
Error: -fr is not a flag of rm
Example 362 (1)
Original English: force remove all the directories with the name logs in the folder /var/www
English: force remove all directory with name log in folder "/var/www"
Original Command: find /var/www -type d -mtime 0 -name logs -exec sudo rm -fr {} \;
Ground truth: find /var/www -type d -mtime _NUM -name logs -exec rm -f -r {} ;
Prediction: find -name "test" -type d -name "filename*" -exec mv '{}' ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        FLAG(-name)
            ARGUMENT("test")
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT("filename*")
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT('{}')

Example 363 (1)
Original English: Find file `foo.bar' and delete it
English: find file "foo.bar" and delete
Original Command: find /home -name foo.bar -type f -exec rm -f "{}" ';'
Ground truth: find /home -name foo.bar -type f -exec rm -f "{}" ;
Prediction: find . -name "*fink*" -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT("*fink*")
        FLAG(-print)

Example 364 (1)
Original English: Search the /path directory tree for files missing g+w or o+w bits
English: search "/path" directory tree for file _UNK _UNK or _UNK bit
Original Command: find /path ! -perm -022
Ground truth: find /path ! -perm -_NUM
Prediction: find . -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 365 (1)
Original English: Search the current directory recursively for directories with the execute permission set for everybody
English: search current directory recursively for directory with execute permission set for everybody
Original Command: find -type d ! -perm -111
Ground truth: find -type d ! -perm -_NUM
Prediction: find . -type d -perm _NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-perm)
            ARGUMENT(_NUM)

Example 366 (1)
Original English: Find all files in the directory $directory or below with the permissions specificed by $permissions.
English: find all file in directory "$directory" or below with permission _UNK by _UNK
Original Command: find "$directory" -perm "$permissions"
Ground truth: find "$directory" -perm "$permissions"
Prediction: find htdocs -user UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(htdocs)
        FLAG(-user)
            ARGUMENT(UNK)

Example 367 (1)
Original English: Move all *.emlx files/directories under /path/to/folders/ to ./Messages/ directory
English: move all _UNK "files/directories" under _UNK to _UNK directory
Original Command: find /path/to/folders/ -name \*.emlx -print0 | xargs -0 -I {} mv {} ./Messages/
Ground truth: find /path/to/folders/ -name *.emlx -print0 | xargs -0 -I {} mv {} ./Messages/
Prediction: find UNK -name UNK -exec mv {} test-_NUM ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(test-_NUM)

Example 368 (1)
Original English: Search the .py files residing in the current directory tree for "something"
English: search ".py" file residing in current directory tree for "something"
Original Command: find . -name "*.py" -type f -exec grep "something" {} \;
Ground truth: find . -name "*.py" -type f -exec grep "something" {} ;
Prediction: find . -name *.py -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(*.py)
        FLAG(-print)

Example 369 (1)
Original English: Find executable files
English: find executable file
Original Command: find . -perm -100 -print
Ground truth: find . -perm -_NUM -print
Prediction: find . -executable
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-executable)

Example 370 (1)
Original English: Search all *.txt files under ~/documents for the word "DOGS"
English: search all "*.txt" file under _UNK for word _UNK
Original Command: find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} \; -print
Ground truth: find ~/documents -type f -name '*.txt' -exec grep -s DOGS {} ; -print
Prediction: find UNK -type f -exec grep -c UNK ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-c)
                ARGUMENT(UNK)

Example 371 (1)
Original English: Find all directories under minimum 1 level down the  $GIVEN_DIR directory
English: find all directory under minimum "_NUM" level down _UNK directory
Original Command: find "$GIVEN_DIR" -type d -mindepth 1
Ground truth: find "$GIVEN_DIR" -type d -mindepth _NUM
Prediction: find mydir -maxdepth _NUM -type d
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(mydir)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(d)

Error: -O3 is not a flag of find
Example 372 (1)
Original English: find all regular files in a folder which start with "sess_", which are atleast 1 level deep, which have not been changed after a specific time and delete them
English: find all regular file in folder start with _UNK atleast "_NUM" level deep not changed after specific time and delete
Original Command: find -O3 "$save_path" -depth -mindepth 1 -name 'sess_*' -ignore_readdir_race -type f -cmin "+$gc_maxlifetime" -delete
Ground truth: find -O3 "$save_path" -depth -mindepth _NUM -name 'sess_*' -ignore_readdir_race -type f -cmin "+$gc_maxlifetime" -delete
Prediction: find dir -type d -maxdepth _NUM -name UNK -printf "%f\n"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(dir)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-printf)
            ARGUMENT("%f\n")

Example 373 (1)
Original English: display all the regular files in the current folder which dont not have the permission 777
English: display all regular file in current folder _UNK not permission "_NUM"
Original Command: find . -type f ! -perm 777
Ground truth: find . -type f ! -perm _NUM
Prediction: find . -type f -maxdepth _NUM -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)

Example 374 (1)
Original English: Show the files or directories in the current directory whose names are not "MyCProgram.c"
English: show file or directory in current directory whose name not "MyCProgram.c"
Original Command: find -maxdepth 1 -not -iname "MyCProgram.c"
Ground truth: find -maxdepth _NUM -not -iname "MyCProgram.c"
Prediction: find . -maxdepth _NUM -name "test*"
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT("test*")

Example 375 (1)
Original English: find all the files in the current directory that have the word "lib" in them
English: find all file in current directory word _UNK in
Original Command: find . -wholename '/lib*'
Ground truth: find . -wholename '/lib*'
Prediction: find . -name UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-name)
            ARGUMENT(UNK)

Example 376 (1)
Original English: Delete all files in the /myDir directory tree that were last modfied more than 7 days ago
English: delete all file in _UNK directory tree last _UNK more than "_NUM" day ago
Original Command: find /myDir -mindepth 1 -mtime +7 -delete
Ground truth: find /myDir -mindepth _NUM -mtime +_NUM -delete
Prediction: find . -mtime _NUM -name UNK -exec rm {} ;
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-mtime)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Example 377 (1)
Original English: find non-hidden files (ones that do not start with the period "." chartacter) that were are modified in the last 15 minutes.
English: find non-hidden file ( "_NUM" not start with period "." _UNK ) modified in last "_NUM" minute
Original Command: find . -mmin -15 \( ! -regex ".*/\..*" \)
Ground truth: find . -mmin -_NUM ! -regex ".*/\..*"
Prediction: find . -maxdepth _NUM -name '*macs' -maxdepth _NUM -name '*macs'
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT('*macs')
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT('*macs')

Example 378 (1)
Original English: find all the files in the current folder which do not have the execute permission
English: find all file in current folder not execute permission
Original Command: find . -type d ! -perm -111
Ground truth: find . -type d ! -perm -_NUM
Prediction: find . -perm +_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(+_NUM)

IFILE splitted into: -I -F -I -L -E 
Error: -IFILE is not a flag of xargs
Example 379 (1)
Original English: Find the files in the current directory that match pattern '*.JUKEBOX.*.txt' and move them to folder ./JUKEBOX
English: find file in current directory match pattern _UNK and move to folder _UNK
Original Command: find . -name '*.JUKEBOX.*.txt' -maxdepth 1 -print0 | xargs -0 -IFILE mv FILE ./JUKEBOX
Ground truth: find . -name '*.JUKEBOX.*.txt' -maxdepth _NUM -print0 | xargs -0 -I -F -I -L -E mv FILE ./JUKEBOX
Prediction: find . -iname UNK
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-iname)
            ARGUMENT(UNK)

Example 380 (1)
Original English: find all the files in the current directory and print them excluding those that have the name SCCS.
English: find all file in current directory and print excluding name SCCS
Original Command: find . -print -o -name SCCS -prune
Ground truth: find . \( -print -or -name SCCS -prune \)
Prediction: find . -name something -prune -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(something)
        FLAG(-print)

ld splitted into: -l -d 
Error: -ld is not a flag of ls
Example 381 (2)
Original English: List subdirectories in the current directory
English: list subdirectory in current directory
Original Command: find . -maxdepth 1 -type d -print0 | xargs -0 ls -d
Ground truth: find . -maxdepth _NUM -type d -print0 | xargs -0 ls -d
Prediction: find . -maxdepth _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-print)

Example 382 (1)
Original English: Find all regular files in minimum 1 level down the $dir directory
English: find all regular file in minimum "_NUM" level down "$dir" directory
Original Command: find "$dir" -mindepth 1 -type f
Ground truth: find "$dir" -mindepth _NUM -type f
Prediction: find "$dir" -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -maxdepth _NUM -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT("$dir")
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-type)
            ARGUMENT(f)

Example 383 (1)
Original English: display list of all the regular/normal files in the home folder which are exactly 6579 bytes
English: display list of all "regular/normal" file in home folder exactly "_NUM" byte
Original Command: find /home/ -type f -size 6579c -exec ls {} \;
Ground truth: find /home/ -type f -size _NUMc -exec ls {} ;
Prediction: find /home -type f -size _NUM -print
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(/home)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(_NUM)
        FLAG(-print)

Example 384 (1)
Original English: Hunting down files with at least one banana
English: _UNK down file with at least "_NUM" _UNK
Original Command: find . -type f -print0| xargs -0 grep -c banana| grep -v ":0$"
Ground truth: find . -type f -print0 | xargs -0 grep -c banana | grep -v ":_NUM$"
Prediction: find . -perm +_NUM
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-perm)
            ARGUMENT(+_NUM)

Quotation Error: space inside word '%p %s\n'
Quotation Error: space inside word '{sum+=$NF}END{print sum}'
Quotation Error: space inside word '%p %s\n'
Quotation Error: space inside word '{ sum+=$2}; END { print sum}'
Quotation Error: space inside word '{sum += $1} END {print sum}'
Example 385 (3)
Original English: Get the total sizes of all files under current directory
English: get total size of all file under current directory
Original Command: find . -type f -printf '%p %s\n'  | awk '{sum+=$NF}END{print sum}'
Ground truth: find . -type f -printf _LONG_PATTERN | awk _LONG_PATTERN
Prediction: find . -type f -printf _LONG_PATTERN | xargs -0 ls -l -d
AST: 
ROOT(root)
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(.)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(_LONG_PATTERN)
        HEADCOMMAND(xargs)
            FLAG(-0)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)

Example 386 (1)
Original English: Search the path given as the $absolute_dir_path variable for regular files
English: search path given _UNK variable for regular file
Original Command: find "$absolute_dir_path" -type f -print0
Ground truth: find "$absolute_dir_path" -type f -print0
Prediction: find UNK -type f
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(UNK)
        FLAG(-type)
            ARGUMENT(f)

Example 387 (1)
Original English: list all the drectories present in the current directory and do not search in the sub directories.
English: list all _UNK present in current directory and not search in sub directory
Original Command: find -maxdepth 1 -type d
Ground truth: find -maxdepth _NUM -type d
Prediction: find . -maxdepth _NUM -maxdepth _NUM -name UNK -maxdepth _NUM -name ls -l {}
AST: 
ROOT(root)
    HEADCOMMAND(find)
        ARGUMENT(.)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            ARGUMENT(UNK)
        FLAG(-maxdepth)
            ARGUMENT(_NUM)
        FLAG(-name)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

387 examples evaluated
Percentage of Template Match = 0.02
Percentage of String Match = 0.01

