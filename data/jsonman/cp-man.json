{
	"aliases": ["cp"],
	"description": "copy files\n     In the first synopsis form, the cp utility copies the contents of the\n     source_file to the target_file.  In the second synopsis form, the con-\n     tents of each named source_file is copied to the destination\n     target_directory.  The names of the files themselves are not changed.  If\n     cp detects an attempt to copy a file to itself, the copy will fail.",
	"optionLists": [{
		"type": "compound",
		"cmds": [{
			"type": "optional",
			"cmd": {
				"type": "compound",
				"cmds": [{
					"flagName": "R"
				}, {
					"type": "optional",
					"cmd": {
						"type": "eclusive",
						"cmds": [{
							"flagName": "H"
						}, {
							"flagName": "L"
						}, {
							"flagName": "P"
						}]
					}
				}]
			}
		}, {
			"type": "optional",
			"cmd": {
				"type": "eclusive",
				"cmds": [{
					"type": "compound",
					"cmds": [{
						"flagName": "f"
					}, {
						"flagName": "i"
					}]
				}, {
					"flagName": "n"
				}]
			}
		}, {
			"type": "compound",
			"cmds": [{
				"type": "optional",
				"cmd": {
					"flagName": "a"
				}
			}, {
				"type": "optional",
				"cmd": {
					"flagName": "p"
				}
			}, {
				"type": "optional",
				"cmd": {
					"flagName": "v"
				}
			}, {
				"type": "optional",
				"cmd": {
					"flagName": "X"
				}
			}]
		}, {
			"type": "argument",
			"argname": "source_file",
			"isList": false
		}, {
			"type": "argument",
			"argname": "target_file",
			"isList": false
		}]
	}, {
		"type": "compound",
		"cmds": [{
			"type": "optional",
			"cmd": {
				"type": "compound",
				"cmds": [{
					"flagName": "R"
				}, {
					"type": "optional",
					"cmd": {
						"type": "eclusive",
						"cmds": [{
							"flagName": "H"
						}, {
							"flagName": "L"
						}, {
							"flagName": "P"
						}]
					}
				}]
			}
		}, {
			"type": "optional",
			"cmd": {
				"type": "eclusive",
				"cmds": [{
					"type": "compound",
					"cmds": [{
						"flagName": "f"
					}, {
						"flagName": "i"
					}]
				}, {
					"flagName": "n"
				}]
			}
		}, {
			"type": "compound",
			"cmds": [{
				"type": "optional",
				"cmd": {
					"flagName": "a"
				}
			}, {
				"type": "optional",
				"cmd": {
					"flagName": "p"
				}
			}, {
				"type": "optional",
				"cmd": {
					"flagName": "v"
				}
			}, {
				"type": "optional",
				"cmd": {
					"flagName": "X"
				}
			}]
		}, {
			"type": "argument",
			"argname": "source_file",
			"isList": true
		}, {
			"type": "argument",
			"argname": "target_directory",
			"isList": false
		}]
	}],
	"optionDesc": [{
		"name": "-a",
		"option": {
			"flagName": "a"
		},
		"description": "\n     -a    Same as -pPR options. Preserves structure and attributes of files\n           but not directory structure.\n"
	}, {
		"name": "-f",
		"option": {
			"flagName": "f"
		},
		"description": "\n     -f    If the destination file cannot be opened, remove it and create a\n           new file, without prompting for confirmation regardless of its per-\n           missions.  (The -f option overrides any previous -n option.)\n\n           The target file is not unlinked before the copy.  Thus, any exist-\n           ing access rights will be retained.\n"
	}, {
		"name": "-H",
		"option": {
			"flagName": "H"
		},
		"description": "\n     -H    If the -R option is specified, symbolic links on the command line\n           are followed.  (Symbolic links encountered in the tree traversal\n           are not followed.)\n"
	}, {
		"name": "-i",
		"option": {
			"flagName": "i"
		},
		"description": "\n     -i    Cause cp to write a prompt to the standard error output before\n           copying a file that would overwrite an existing file.  If the\n           response from the standard input begins with the character `y' or\n           `Y', the file copy is attempted.  (The -i option overrides any pre-\n           vious -n option.)\n"
	}, {
		"name": "-L",
		"option": {
			"flagName": "L"
		},
		"description": "\n     -L    If the -R option is specified, all symbolic links are followed.\n"
	}, {
		"name": "-n",
		"option": {
			"flagName": "n"
		},
		"description": "\n     -n    Do not overwrite an existing file.  (The -n option overrides any\n           previous -f or -i options.)\n"
	}, {
		"name": "-P",
		"option": {
			"flagName": "P"
		},
		"description": "\n     -P    If the -R option is specified, no symbolic links are followed.\n           This is the default.\n"
	}, {
		"name": "-p",
		"option": {
			"flagName": "p"
		},
		"description": "\n     -p    Cause cp to preserve the following attributes of each source file\n           in the copy: modification time, access time, file flags, file mode,\n           user ID, and group ID, as allowed by permissions.  Access Control\n           Lists (ACLs) and Extended Attributes (EAs), including resource\n           forks, will also be preserved.\n\n           If the user ID and group ID cannot be preserved, no error message\n           is displayed and the exit value is not altered.\n\n           If the source file has its set-user-ID bit on and the user ID can-\n           not be preserved, the set-user-ID bit is not preserved in the\n           copy's permissions.  If the source file has its set-group-ID bit on\n           and the group ID cannot be preserved, the set-group-ID bit is not\n           preserved in the copy's permissions.  If the source file has both\n           its set-user-ID and set-group-ID bits on, and either the user ID or\n           group ID cannot be preserved, neither the set-user-ID nor set-\n           group-ID bits are preserved in the copy's permissions.\n"
	}, {
		"name": "-R",
		"option": {
			"flagName": "R"
		},
		"description": "\n     -R    If source_file designates a directory, cp copies the directory and\n           the entire subtree connected at that point.  If the source_file\n           ends in a /, the contents of the directory are copied rather than\n           the directory itself.  This option also causes symbolic links to be\n           copied, rather than indirected through, and for cp to create spe-\n           cial files rather than copying them as normal files.  Created\n           directories have the same mode as the corresponding source direc-\n           tory, unmodified by the process' umask.\n\n           In -R mode, cp will continue copying even if errors are detected.\n\n           Note that cp copies hard-linked files as separate files.  If you\n           need to preserve hard links, consider using tar(1), cpio(1), or\n           pax(1) instead.\n"
	}, {
		"name": "-v",
		"option": {
			"flagName": "v"
		},
		"description": "\n     -v    Cause cp to be verbose, showing files as they are copied.\n"
	}, {
		"name": "-X",
		"option": {
			"flagName": "X"
		},
		"description": "\n     -X    Do not copy Extended Attributes (EAs) or resource forks.\n"
	}],
	"name": "cp"
}