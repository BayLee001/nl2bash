cmd = echo 'hi'
if [[ $(uname) = Linux ]];then killall --older-than 1h someprocessname;fi
matlab -wait -nosplash -nodesktop -r waitHello
echo This is the message body | mutt -a /path/to/file.to.attach -s subject of message -- recipient@domain.com
ulimit -c unlimited
for i in ./*.markdown; do perl markdown.pl --html4tags $i > $i.html; done;
find /usr -name *.sh
<command> | awk { print strftime("%Y-%m-%d %H:%M:%S"), $0; fflush(); }
paste --delimiters=; file1 file2
(ls -t|head -n 5;ls)|sort|uniq -u|xargs rm
find . ( -type d ! -name . -prune ) -o ( <the bit you want to look for> )
find /foo -iname *.txt -exec cp {} /dest/ ;
ssh user@host command
nohup myprogram > foo.out 2> foo.err < /dev/null &
powershell.exe .foo.ps1
doskey mcd=mkdir $*$Tpushd $*
scp -r web/* web/.htaccess user@site.com:site.com/
gnome-terminal -e top --title Testing
mail -s <subject> <recipients>
printf Hello, %s\n George W. Bush
tar -xzvf bash-completion-20060301.tar.gz
diff <(cut -b13- file1) <(cut -b13- file2)
find . -name *.rb -type f
for f in foo[0-9]*; do mv $f `printf foo%05d ${f
ls > `pwd`.txt

(Get-Content test.txt) | ForEach-Object { $_ -replace foo, bar } | Set-Content test2.txt
type file1 file2 > file3
cd ${PWD/a/another}
find /path/to/jpgs -type f -exec sh -c jhead -v {} | grep 123 ; -print
sed s/\(.....\)\(.....\)/\1\n\2/ input_file | split -l 2000000 - out-prefix-
find . -name *.ear -exec ls -lh {} ;
openssl ocsp -whatever
ls -atrd */ | head --lines=-4 | xargs rm -rf
grep -IUr --color ^M
(script 2> /dev/null)
sed -n 16224,16482p filename > newfile
echo deb blah # blah | sudo tee --append /etc/apt/sources.list
texta'textb (APOSTROPHE inside QUOTATION MARKs)
grep -L -Z -r Subject: \[SPAM\] . | xargs -0 -I{} mv {} DIR
uname -a
find . -name .DS_Store -print0 | xargs -0 git rm --ignore-unmatch
ditto -ck --rsrc --sequesterRsrc folder file.zip
wget -r ftp://user:pass@server.com/
cat foo.c | sed /^\s*$/d | wc -l
M-x server-start
diff -r /develop /main
tail -1 file.txt >file.txt.new && mv file.txt.new file.txt
system(vim > `tty`);
uniq --count
dd if=/dev/zero of=upload_test bs=file_size count=1
find . -iname *foobar* -exec cp {} ~/foo/bar ;
grep example.com www_log > `date +example.com.%Y-%m-%d-%H:%M:%S.log`
sort temp.txt -o temp.txt
find . -iname *.py | xargs pcregrep -M _name.*\n.*_description
sed -i s/>foo</>bar</g file
command  arg2 arg3 ...
sed s/a.*b/xyz/g; old_file > new_file
hg clone http://hg.kublai.com/mercurial/extensions/rdiff
unsetopt CASE_GLOB
find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08
CONFIG_SHELL=/bin/bash ./configure ...
print `(touch .file1.lock; cp bigfile1 /destination; rm .file1.lock;) &`;
rl_bind_key(\r, return_func);
find . -type f -exec cat {} ; > out.txt
p4 delete filename
for i in $(seq 1 $END); do echo $i; done
bash -n scriptname
if [[ $var1 = mtu * ]]
find ../path -exec grep foo {} +
&>word
cvs checkout -r <revision> -p filename.ext > ~/tmp/filename.ext
me=`basename $0`
xargs -L 1
scp myfile user@host.com:. && echo success!
!!:gs/9241/9243/
find . -type f -exec sed 1s/^\xEF\xBB\xBF// -i.bak {} ; -exec rm {}.bak ;
eclipsec.exe -noSplash -data D:\Source\MyProject\workspace -application org.eclipse.jdt.apt.core.aptBuild
export PATH=$PATH:$EC2_HOME/bi
echo. 2>EmptyFile.txt
awk -F| /<pattern>/{print $2;}{next;} file
awk {total += $1; count++ } END {print total/count}
head -c 100 file
echo abcdefg | cut -c3-5
dcop $KONSOLE_DCOP_SESSION renameSession I am renamed!
grep pattern -r --include=*.{cpp,h} rootdir
 > /dev/null 2>/dev/null &
ssh-copy-id [-i identity_file] [user@]machine
set -o
ORIGIN
perl -i -p -es/\bthisword\b/thatword/g $(find . -name *.html)

system(cat > test_file << "#{a}")
du | cut -f1
alias build-product1=(cd $working-copy/delivery; mvn package;)
sed -i s/USER_NAME/userName/g
paste out1 out2 | grep -v \..
unset -f z
find `pwd` -name .htaccess
one two three four
find /path/to/files -name artifact* -type f -mtime +7 -exec rm {} ;
outlook.exe /c ipm.note
find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete
sed s/\(.*\)/\1 = \1;/
alias proj=cd /home/tree/projects/java
nice -n 19 <command>
temp/a.aa temp/a.ab temp/a.ac
iconv -f utf-16 -t utf-8 <input | sed -e expr | iconv -f utf-8 -t utf-16 >output
awk --re-interval /size='0x[0-9a-fA-F]{4,}'/ thefile
system(mysql -uroot -p db_name > `tty`);
wget -r --no-parent http://mysite.com/configs/.vim/

find . | grep .xml$ | parallel bzip2
p.StandardInput.Close()
svn st | cut -c8- | xargs ls
awk BEGIN {RS = "$"} { ... }
Shell cmd echo foo, vbNormalFocus
taskkill /f /im notepad.exe
ipcs -mb | tail +4 | awk { sum += $7 } END { print sum }
svn cat https://myhost/svn/eeli/eel/eel/eel-scalable-font.h@2
cat *.eml > file.txt
awk -v MYVAR=somedinamicdata {print $0 >> (MYVAR "-SomeStaticText") } 2procfile
\server\share\in_house_thingy.exe myusername mypassword
0,5,10,15,20,25,30,35,40,45,50,55 * * * * cd /path/to/script && ksh ./myScript.sh
find -name file_* -follow -type f -exec zcat {} ; | agrep -dEOE grep
find -type f -exec perl -pi -e s/\bindex\.php3\b/index.php/g {} ;
sc.exe config [servicename] obj= [.\username] password= [password]
perl -p -i -e s/$/$ARGV/; *
ssh -i /Users/myuser/.ssh/id_rsa -F /Users/myuser/.ssh/config login@host
tail -n +21 myfile.txt
exec > file
wc -l *
javac file.java 2> log.txt
echo commands | gdb X
p4 set P4PORT=perforce:1669
%%BTAD_InstallDir%%
{var//[[:space:]]}
echo $0: file $FILE not readable 1>&2
./MyProg <inputdata.txt | ./MyProg2
echo Exit Code is %errorlevel%
tail -n +2 $FILE

complete -o default -o nospace -F _git_checkout gco
perl -ne print "$_\n" foreach /"((?>[^"\\]|\\+[^"]|\\(?:\\\\)*")*)"/g;
foo | bar > file1.txt && baz | quux > file2.txt && diff file1.txt file2.txt
/ { print $0 }
sed -i 0,/dev/ s/dev/stage/ config.inc.php
echo {a,b,c,d,e,f,g,1,2,3,4,5,_}{a,b,c,d,e,f,g,1,2,3,4,5,_}
devenv /command Macros.MyMacros.Module1.OpenFavoriteFiles
awk {print ((NR-1)%3)+1 $0} $1 > data.out
trap echo hello SIGINT
cd /mail; find . -type f | cpio -pvdmB /home/username/mail
./a.out 2>&1 | tee output
set -e
eval ls $dirs

cmd | less
awk /Release: [0-9]+/ { printf "Release: %d\n", $2+1 } < $file > $file.new
echo foo | while read a; do echo $a; done
echo obase=16; 34 | bc
sort ip_addresses | uniq -c
time sleep 2
for a in `ls /home`; do cp -a /home/$a /newhome/$a ; done
chcp 65001
ps x -o %p %r %y %x %c 
cat hosts | while read host; do echo $host: $(ssh $host uptime); done
echo Y | myapp
git config --get-regexp ^svn-remote
awk {for (i=0;i<2;i++) sub(",", "|", $0); print} file.txt
if [ ${file: -4} == .txt ]
sed -i s/PLACEHOLDER_1/string 1/g;s/PLACEHOLDER_2/string 2/g <file>
sed -e s/[\/&]/\\&/g
if [[ $i -ge 2 ]]
syn region shExpr ... start={ skip=^function.*\_s\={ end=} ...

cat template.txt | sed -e s/\${i}/1/ -e s/\${word}/dog/
< myfile.txt tail -n +15 | tail -r | tail -n +10 | tail -r
ls -lR / | tee output.file
foo() { while IFS= read -r line; do echo $(date) $line >> file.txt; done; };
find Test Folder -type d -print0 | xargs -0 rm -rf
StartupUri=Window1.xaml
grep -o [0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\} file.txt
echo someletters_12345_moreleters.ext | cut -d_ -f 2
haxe --help
find . -maxdepth 1 -type f -ctime -12 -delete;
if (argument == -print)
awk -F | NF != 35 {print NR, $0}  your_filefile
LAST_UPDATE=`svn list http://$DEV$BRANCH | sort -r | awk -F/ {print $1}`
wget -q -O- http://www.rss-specifications.com/rss-podcast.xml | grep -o <enclosure url="[^"]* | grep -o [^"]*$ | xargs wget -c
eventcreate /ID 1 /L APPLICATION /T INFORMATION /SO MYEVENTSOURCE /D My first log
xhost +jeeger
somecommand | while read -r; do echo Something with $REPLY; done
perl -pe s#(<VALUE DECIMAL_VALUE=")([0-9.]+)(" UNIT_TYPE="percent"/>)#"$1" . ($2 + 0.4) . "$3"#e;
awk {s+=$1} END {print s} mydatafile
shopt -s extglob
caminho=`eval echo $caminho`
grep -v ^,,,$ old-file.csv > new-file.csv
lp -o number-up=6 my_scaled_image_*.jpg
yes   | head -7 | tr -d \n
mysqldump --no-data mydb | mysql mydb
% echo SELECT * FROM table | mysql -B -uxxx -pyyy database
perl -p -i -e s/oldstring/newstring/g `grep -ril searchpattern *`

sed -e /^C:\\good/ s/\\/\//g input_file.txt
msbuild project.sln /Flags...
date -v -1d
for path in ${args[@]}; do
find . -exec ls -dl {} ; | awk {print $3, $4, $9}
System.Diagnostics.Process.Start(@C:\listfiles.bat);
rsync -rv --delete --include=foo.txt --exclude=* /home/user/ user@remote:/home/user/
-T --temp-dir=DIR create temporary files in directory DIR
> copy /b data.bin lpt1
set -A INDEXES `db2 connect to watevrDB >/dev/null;db2 -x describe indexes for table ${TABSCHEMA}.${TABNAME} show detail | awk {print $1"."$2}`
compgen -A builtin [YOUR STRING HERE]
compgen -A variable | grep X
find . -iname .#* -print0 | while read -r -d  i; do foobar $i; done
kill -SIGINT processPIDHere

cat /proc/asound/cards
a=`./somefile`
ls -r -fi *.lis | sort @{expression={$_.Name}}, @{expression={$_.LastWriteTime};Descending=$true} | select Directory, Name, lastwritetime | Group-Object Name | %{$_.Group | Select -first 1}
cd $(getent passwd foo | cut -d: -f6)
kill %1
> perl -pi -e s/abc/XYZ/g /tmp/file.txt
echo -e  \t 
awk {print $1$2$3$4$5$6$7$8$9$10$11$12}
Command myCommand = new Command(scriptfile);
find . -type f -print0 | xargs -0 -n 1 sed -i -e s/from/to/g
svn resolve --accept --recursive base .
frame= 0 fps= 0 q=0.0 size= 0kB time=10000000000.00 bitrate= 0.0kbits/s
logger.debug(My #{variable})
screen -ls
grep .... | cut -c 1-N
depth=0; while find -mindepth $depth -maxdepth $depth | grep --color=never .; do depth=$((depth + 1)); done
JAVA_HOME/bin/java com.domain.BatchProcess
screen -t autotest 2 bash -c cd ~/project/contactdb ; autotest
find . -type f -size 0 -exec rm -f {} +
sed -i -e 1,10s/ /_/g
find /data -user test | xargs rm -rf
/home/myusername
cmd 1>/dev/null 2>&1 | grep pattern
export PATH=$HOME/opt/git/bin:$PATH
rm -rf -- $(pwd -P) && cd ..

tar -zxvf yourfile.tar.gz
grep -w python | grep imag
reg query HKU\S-1-5-19
eval decho $args
ls *.jpg|sed -e s/\..*//|xargs -I X convert X.jpg whatever-options X-resized.jpg
readline arguments
awk NF > 0 { print $1 "\t" ($3 - $2) } input.txt
zstyle :completion:* special-dirs true
exec master..xp_cmdshell set username
python -c for x in range(1,10): print x

echo hey hey, we're the monkees | tee /dev/tty | gzip --stdout > my_log.gz
grep bar foo.txt | awk { print $3 } | xargs dem | awk { print $3 }
while (sleep 100 &) do; done
java -cp !AXIS2_CLASS_PATH! ClientJava --xxx ^!changeme^!
cygstart <your file>
find . -size +10M
alias hists=history | grep -v '^ *[0-9]* *hists' | grep $@
script.sh >> temp.txt 2>&1
top -c
scp -r username@A.B.C.D:~/Desktop/tig-0.14.1/ ~/bin/
complicated_command | tee /dev/tty | wc -l
c:\123.doc
find . -name *.undo -ls | awk {total += $7} END {print total}
wait PID; commandToRunAfter
for i in *.pkg ; do mv $i ${i/-[0-9.]*.pkg/.pkg} ; done
PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.RB;.RBW
tr \t , < myfile.csv | sort -k5,5 | uniq -f 4 -D -w 16
echo $RESULT
screen
System.AppDomain.CurrentDomain.FriendlyName
scriptname >/dev/null
alias myip=python -c 'from urllib import urlopen; print urlopen("http://whatismyip.appjet.net").read()[:-1]'
export PATH=$PATH:/Users/Sam/Documents/Unix
md5sum *.java | sort | uniq -d -w32
1238099 100% 146.38kB/s 0:00:08 (xfer
for i in *.txt do awk $4 ~ /NM/{ sum += $2 } END{ print sum } $i; done
echo php_uname(n);
ssh -t xxx.xxx.xxx.xxx cd /directory_wanted ; bash
mv 1/*.masked targetDir
mv ~/Desktop/Picture_{1..77}.png ./
cat A >> B
xcf2png image.xcf -o image.png
svn changelist ignore-on-commit file-you-want-to-add
touch File{1..99}
cscript adsutil.vbs set w3svc/HttpCustomHeaders X-Powered-By: ASP.NET HeaderName2: value HeaderName3: value
yourcommand &>filename
@echo select count(*) from table; | sqlplus username/password@database
file=`basename $filename`
printf %s\n *|awk -F7 NF==4
awk {n2=n1;n1=n;n=$0;if(NR%3==0){printf"%s,%s,%s\n",n2,n1,n}} yourData.txt
raise Must run as root unless Process.uid == 0
for file in Prefix_*.tex ; do
grep -o regex file
dospath=`echo $unixpath | sed s/\//\\\\/g`
awk !_[$0]++ infile
awk {sum[$2]+= $1;}END{for (date in sum){print sum[date], date;}}
awk -F -  { print $1 }
system(myfile.sh); // myfile.sh should be chmod +x
export EDITOR=vim
awk {print $0 ; exit(0); }
find -f -name *.jsp -exec cp --parents {} /dest/path ;
eval grep somestring $VARTEST
find . -iname .svn -exec rm -rf {} ;
/bin/bash -c test -e failurefile && retrycommand -someflag -etc
(find ~/code -type d | tr \n : | sed s/:$//)
echo -e \012
[[ -e $b ]]
[ -f /tmp/filename.pid ] || python daemon.py restart

find /some/path -perm 0777
echo $TEST
echo !510 | pbcopy
shopt -s extglob
c=/Users/User/.../.../.../.../.../Dev/C
sed -e s|@QUESTIONS@|$Questions|g; s|@ADDRESS@|$Address|g file.txt
awk $0 != "-"
xargs -P 4 processFile < fileList
)syntax error: invalid arithmetic operator (error token is 
Runtime.getRuntime().exec(chmod u+x +FILENAME);
^[[3;5~
md5deep `find *`
sed s/Monday:/&\n/g
tar c --files-from <(find $dir/temp -maxdepth 1 -name *.parse) | lzma -9 > $dir/backup/$(date +%Y-%m-%d)-archive.tar.lzma
ps -ef >/tmp/bash_stack_trace.$$
dm toolload bar <libname>.profile.<name_of_toolbar>;
WScript.Echo(Hello, World.);
. /path/to/script.sh
cat files.txt | xargs grep keyword
s/(get[A-Z][A-Za-z0-9]*_)([A-Z])/1L2/g
irb -ropen-uri

for c in */current; do cat ${c} >> ${c%%current}revisions; done
command > >(tee stdout.log) 2> >(tee stderr.log >&2)
awk BEGIN {srand()} !/^$/ { if (rand() <= .01) print $0}
(tr -d \n filename | sed -n -e /\[[^]]/s/^[^[]*\[\([^]]*\)].*$/\1/p)
easy_install QLCLI
rsync -a ~/.[^.]* /path/to/backup
rm -- --testings.html
export PS1=--(\[\e[$((32-${?}))m\]\u\[\e[0m\])-(\[\e[$((32-${?}))m\]\d\[\e[0m\]|\[\e[$((32-${?}))m\]\T\[\e[0m\])--(\[\e[$((32-${?}))m\]\w\[\e[0m\] \$ 
cat file | awk $2 == "qux" { print $1 } $2 != "qux" { print $0 }
find . -name *.txt -print -exec awk $9 != "" && n < 10 {print; n++} {} ;
p = subprocess.Popen( args=[script.sh, -p, p_opt, -v, v_opt, arg1, arg2] )
bash -c diff <(sort text2) <(sort text1)
echo $! > /var/run/my-process.pid
sed -i -es/SO/so/ so/app.yaml
sed s/regexp/\n&/g
perl -leprint rand>.5?++$a:--$b for 1..10
eval: 1: /home/user1/MyApp/bin/wrapper: Permission denied
sh myscript
sed s/.*\(searchstring\).*/___\1___/
tail -r myfile.txt
ls *Exam* | xargs open
mysql -uuser -ppass < foo.sql
file /tmp/:0
alias lock=gnome-screensaver; gnome-screensaver-command --lock
sed s/^\(["']\)\(.*\)\1\$/\2/g in.txt
script/runner -e production Model.method
find . 2>/dev/null > files_and_folders
svn [subcommand] [options] [files]
ls -R /dir | grep -i foo
pwd > ~/.lastdirectory
mxmlc MyAs3File.as
grep API file | awk { arr[$5]+=$7 } END {for (i in arr) {print i,arr[i]}   }  -
find . | grep your_pattern | xargs mv destination_directory
import java.io.*;
for %%F in (%filename%) do set dirname=%%~dpF
( /sw/bin/perl /path/to/tv_grab_oztivo ... ) >/tmp/qq 2>&1
xgrep bin/sh * 0 3
cut -d $\001 ...
find . -name *.pyc -exec rm -rf {} ;
awk -f factorial.awk
chsh -s /opt/local/bin/bash
open http://www.ocwconsortium.org/index.php?q=mathematics&option=com_coursefinder&uss=1&l=&s=&Itemid=166&b.x=0&b.y=0&b=search
stty -ixon
test -f /etc/bashrc && source /etc/bashrc
shopt -s autocd
0 --version
awk NF > 2 input_file > output_file
mkdir -p foo
ls | %{rconvert $_ -resize 128x128}
% xxd -r -p in.txt out.bin
LBIN=/usr/local/bin
chsh -s /bin/zsh
head -1000 input > output && sed -i 1,+999d input
sed s/\([^ ]\+\) your \([^ ]\+\)/\2\1er/ < fail
zgrep -c compinit /usr/share/man/man1/zsh*
zgrep -c compinit /usr/share/man/man[1-9]/zsh*
sudo port install zsh +mp_completion
svnadmin dump c:pathtomyrepo | 7z a -si svndump.7z
cat ${ITEM_LIST} | ...
egrep -l pattern * | xargs $EDITOR
rsync -Pav ~/Desktop/ me@remote.example.com:~/rsyc-test
RPROMPT=%j Job(s)
find . -mindepth 1 -maxdepth 1 -not -empty -type d
bindkey ^[[Z reverse-menu-complete
export myPath=/home/user/dir
ls -1 > file.txt | less
markkeys h=d:j=h:k=t:l=n
cat * | grep ^From:  | sort -u
cut -d   -f 2
cd ..; rm -rf -- <dir-to-remove>
set -e
find . -type f -wholename *.mbox | sed s/\(.*\)\.mbox/mv "\1.mbox" "\1"/ | sh

(ls -1 && file) | less
cat file | sed s/://g
hg push http://username:password@hg.myco.com/repo
(tput cols)
echo $*
fc -W
set backupdir=~/.backup,/tmp
ifconfig en0 | grep inet | grep -v inet6
sh -c grep ABC {} > {}.out
find . -mtime -1 | xargs tar --no-recursion -czf myfile.tgz
sudo add-apt-repository ppa:docky
|========        |\r
svn status | grep ^\! | cut -c8- | while read f; do svn rm $f; done
grep --color POST access_log
nosetests --with-coverage $(for f in *.py; do echo --cover-package=${f%.*}; done)
cd $(dirname `which python`)
awk {printf("%s - ", $1) ; system("ip2country \"" $1 "\"")} < inputfile
SECONDS=0; sleep 5 ; echo that took approximately $SECONDS seconds
for /R A %i IN (*.jpg) DO xcopy %i B /M /Y
Ctrl-R abc Ctrl-R
ls -l --color=always | grep --color=never pattern
svn ls https://developernetwork.repo.net/svn/Projects/Calculator/
echo $PWD/*
sudo echo something >/var/lib/varlibfile
cmd >>file.txt 2>&1
ps -eo pid,rss,cmd
(( ${time
sshfs user@host:dir mountpoint || exit 1
crontab -e
awk /foo/ {sub(/foo/, "&_" sprintf("%02d",++c))} 1 infile
START http://www.google.com
a A1 A2
shopt -s autocd
ssh -t user@host python
perl -p -i -e s/Masi/Bond/g $(grep -rl Masi *)
gvim --servername GVIM
find `pwd` -iname .* -type f > all-hidden-files.txt
comm -12 <(find . -maxdepth 1 | sort) <(cd ~/bin/FilesDvorak/; find . -maxdepth 1 | sort)
find . -exec cmd -option1 -option2 -- {} +
head -n`grep -n * file.txt | head -n1 | awk -F: {print $1-1;}` file.txt
for /f usebackq delims== %I in (`dir /b /s ^| findstr folder.jpg`) do copy %I %~pIcover.jpg
uuencode surfing.jpeg surfing.jpeg | mail sylvia@home.com
yes | rm -r .git
find . -type f -exec sed -i.bak s/foo/bar/g {} ;
if [ -t 1 ] ; then echo terminal; fi
for i in `ls -d .*`; do mv $i `echo $i | sed 's/^.//'`; done
readlink -f
sed -e s!<html>!<html><link rel="stylesheet" type="text/css" href="LivingInStyle.css">! < file
sed -n s/set auto_upgrade {\([0-9] \)*\([0-9]\{1,\}\)}/\2/p

A=hello
findpy() { find . -name *.py -exec grep -nHr $1 {} ; ; }
SELECT * FROM sometableG
diff file1.csv file2.csv --old-line-format=< %L --new-line-format=> %L --unchanged-line-format== %L
infocmp ansi
system ls -l
mv `ls *.boo` subdir
cat log | sed -e s/"\([^:]*\):\([^"]*\)"/"\1" "\2"/
export PROMPT_COMMAND=hpwd=$(history 1); hpwd="${hpwd# *[0-9]*  }"; if [[ ${hpwd%% *} == "cd" ]]; then cwd=$OLDPWD; else cwd=$PWD; fi; hpwd="${hpwd% ### *} ### $cwd"; history -s "$hpwd"
rsync -av remote_host:$(find logs -type f -ctime -1) local_dir
java -classpath .;myjar.jar;lib/referenced-class.jar my.package.MainClass
sed -e $ ! s/a/b/
compgen -ac | grep searchstr
echo MAVEN_OPTS=-XX:MaxPermSize=128m -Xms128m -Xmx768m | sed s/=/="/; s/$/"/
ShellListView1.RootFolder.PathName
gunzip_result=system(gunzip $gzfile 2>/dev/null);
(</tmp/Error)
javac UpdateStockHistory.java -cp commons-configuration-1.6.jar
exec unison -path $1 -path $2 -path $3
for i in `seq 0 2 10`; do echo $i; done
sc.exe config Service Name obj= DOMAIN\User password= password
echo The computer will be suspended at $(date --date now $1 minutes)
find . -mtime +0h55m
java Tool -cp .:extern/Hello.jar
ARRAY=(`command`)
tail -f logfile | grep org.springframework | cut -c 5-
tail -f logfile | while read line ; do echo $line| grep org.springframework|cut -c 25- ; done


var=`cat ./version | tr -d   | tr -d \n`
grep -E Failed to add (.*) to database| sed s/Failed to add (.*) to database/\1
cmd /k ipconfig
find -name *bar* | xargs bash -ic gi foo
egrep --color pattern|$ file
aspnet_compiler -v/WebsiteOne -p c:projectsWebsite1 -f c:InetpubwwwrootWebsiteOne
tar --exclude=file1 --exclude=patter* --exclude=file2
(time (mycommand &> /dev/null) 2>&1)
. ~/bin/dirstack.ksh
cat test.html | awk sub(/<li[^>]*><a[^>]*>/,"")&&sub(/<\/a>.*/,"")
bash -c cmd >output.file 2>error.file >bash_output.file 2>&1
pause
echo echo hello > sayhi.command; chmod +x sayhi.command; open sayhi.command
exec nice -n 10 $JAVA $JAVA_HEAP_MAX $NUTCH_OPTS -classpath $CLASSPATH $CLASS $@
source cpmd
printf %7s hello
dcop konsole-8540 session-6 setFont Monospace,20,-1,5,50,0,0,0,0,0
help trap
find output-* -name *.chunk.?? | xargs -I{} ./myexecutable -i {} -o {}.processed
(date --date $1 days ago +%Y/%m/%d)
system(cd /var/www/upload/files; clamscan --remove=yes .$furl, $scanme);
ren foo.txt foo-%RANDOM%.txt
ls -Art | tail -n 1
source function.sh
svn status | grep ^\? | awk {print $2}
sed -ie 1i import package.name.*; YourClass.java
{
sed -i s%<iframe[^>]+style="visibility: hidden"></iframe>%%g file
:args `grep -Rl hello *`
awk {print($2,"\t",$1)} abcd.txt
perldoc -l XML::Simple
system(ls);
isCLI = ( php_sapi_name() == cli );
svn info path/to/filename
eval $(alias -p|grep '^alias ls='|sed s/$/ -o/)
apt-get install php5-cli
--exclude=PATTERN
python runtest.py >& ~/into/reptest/runtest-all.out.$i
sed s/ *13) \(.*\)/ \x1b[32m*\x1b[0m \1/
for f in *.txt; do touch -t `echo $f | cut -f1 -d _` $f; done
ls | grep -v *.cpp | xargs rm
tail -n+`grep -n popd tmp.sh | cut -f 1 -d:` tmp.sh
awk { if (NR==1) sub(/^\xef\xbb\xbf/,""); print } INFILE > OUTFILE
tar zvPcf /home/test/backups/backup.tar.gz /home/test/backups/../data/
sed -rne s/(dbservername)\s+\w+/\1 yyy/gip
invoke-rc.d tomcat stop > /dev/null 2>&1 || true
curl -O $PATH_DOWNLOAD 2>&1 | $PATH_COCOADIALOG progressbar --indeterminate
awk -F_ -f <file> { print $1" "$2" "$3"_"$4 }
for %i in (foo bar) do @move %i dir
(grep -sq ^sometext$ $somefilename)
perl parse_if.pl file.c
{0:X}{1:X}{2:X} -f @($byteArray)
dir && echo hello
SELECT ROW_COUNT();
find . -name *php -exec grep -H abc {} ;
status, output = commands.getstatusoutput(mvn clean install -s./../../foo/bar/settings.xml -Dportal -Dmain.dir=%s/../.. -o % os.getcwd ())
date +%s
sed -n 1{x;d};H;\${g;s/\n\n/\nTEST\n\n/2;p}
eval tail -f $LOG_FILE_PATH $full_grep_string
sh myscriptfile
sed -E s/[[:cntrl:]](\[K[0-9]? ?)?//g your_file_here > output_file
find . -exec grep -l -e myregex {} ; >> outfile.txt
find . -exec grep -l -e myregex {} ; >> outfile.txt
perl -pe s|(http://.*?/).*|\1|
id -un
help .
find . -type f -exec mv {} {}.jpg ;
awk f==1{print last}{last=$0;f=1}END{print "NEW WORD\n"$0} file
:command! -nargs=1 GrepSource :exe printf(!grep '<args>' '%s', matchstr(getline(.), ^#\=\s*\%(source\|\.\)\s*\zs\f\+))
for i in `cat a.txt`
/path/to/cake/console/cake -app /path/to/app/ <shell> <task>
s/a/c/
for /r /d %i in (*) do if NOT %i==.svn svn cleanup %i

shopt -s extglob
import ipdb; ipdb.set_trace()
start-stop-daemon --start --exec ${DAEMON} -- ${ARGS}
C-L: backward-kill-line
curl http://en.wikipedia.org/wiki/Special:Random -sI | perl -wnl -e /Location: (.*)/ and chomp($1) and print $1 . "?printable=yes";
rsync -u src dest
(git rev-parse --show-prefix 2>/dev/null) || { echo $@ ; exit ; }
find Documents -name *.py -o -name *.html
M-x cd /hostname:/current/path/in/the/shell
find rapidly_shrinking_drive/ -name offender1 -mtime -1 -print0 | du --files0-from=- -hc | tail -n1
inotifywait --monitor --format %f --event move --event create /root
finger $USER_NAME | grep Directory | expand | cut -d   -f 2
mount_smbfs [-N] [-o options] [-d mode] [-f mode] [-h] //[domain;][user[:password]@]server[/share] path
find /folderpath -type l -delete
commandline.createArgument().setLine(x y);
tail -10 foofile | awk {print "<category label=\"" $13 " " $14 " " $15 "\"/>"}

commandThatMakesOutput | ssh desktop pbcopy
export name=value
rpl -pR $@  *
[ -s $f ] && mail me@example.com -s $f contents < $f
gcc -v -o hello hello.c
extension=memcache.so
for /f tokens=2 delims=:( %%x in (powercfg -getactivescheme) do echo %%x
bind "\C-j": "\C-atime \C-m"
mvn scm:status
Kill (strPath)
set X=%cd%
find . -type f -maxdepth 1 -name .* -exec sed -i.bakkk -e s#/sa/#/he/#g {} +
find yourdir -type f -name *.txt | sed s/.*\///
sed -i.bak /line of text/d *
sed s?#REPLACE-WITH-PATH?`pwd`?
sed -e s/.\{20\}/&\n/g < temp.txt
sed -e /=sec1=/,/=sec2=/ { /=sec1=/b; /=sec2=/b; s/^/#/ } < input

find ${1:-.} ! -name .* -print | set -e s;[^/]*/;   ;g
:!java -classpath Desktop HelloWorld
java -cp $(dirname $0) rgb2hexConv $1 $2 $3
ruby -ne BEGIN{@head=[];@data=[]}; @head << $1 && @data << $2 if $_.match(/^---(\S+): (\S+)$/); END{puts @head.join(",");puts @data.join(",")} $FILE
typeset -gU path
echo 12345-BA-PreSchool-LT.local | cut -d- -f2,3 | sed -e s/-/ /g
echo $USER | python -c import urllib; print urllib.quote(raw_input())
ls > mydirlist 2>&1
echo -e bla bla \c
sed @^//<<<@,@^//.*>>>@d
ps -p <pid> -o %cpu,%mem,cmd
sed s/Hello \(.*\)! Have a good day./Bye \1! Good night./ MyInputFile > MyOutputFile
<command> | tee out.txt ; test ${PIPESTATUS[0]} -eq 0
file:///C:/repositories/repository
awk {print $2,$1} ip-list
perl -pi -e s/<hr \/>\s*<div id="sidebar">/<\/div><hr \/><div id="sidebar">/gs; -e BEGIN { $/ = ""; } file.txt
perl -pe s/\\\n// /tmp/line-cont

echo **/*.h | xargs ./a.out
sed -i -e 2iYour line here /dir/*
alias exiftool=~/et/exiftool
open my $fh, -|, some_program --with-options;
http://web.archive.org/web/*/http://shellrevealed.com
<,>w !sh
alias ff=grep -irl
echo -- . $lastline . --;

for i in *.*; do mkdir -p ${i:0:1}/${i:1:1}/${i:2:1}/; mv $i ${i:0:1}/${i:1:1}/${i:2:1}/; done;
import readline
sed -i.bak -e s%C://temp%//home//some//blah% large_file.sql
tail -f access.log | xargs host
grep -P (?<=name=)[ A-Za-z0-9]* filename
cat /dev/urandom | base64
cat ~/.profile | openssl des3 -e -a -salt -pass pass:asdf -out /tmp/output.txt
sed /begin/,/end/ !s/before/after/g
sed -e s/\([0-9]*\) [0-9]* \(.*#change-enabled\)/\1 8 \2/
sed :a;N;$!ba;s/\n/ /g
svn pg -R svn:ignore .
/bin/sh -c gcc --version
zgrep -R --include=*.gz -H pattern match .
echo $PATH
for name in $(git diff --name-only $1); do git difftool $1 $name & done
last | egrep -v support|reboot|shutdown
{ if (NF == 1) { getline; print; next; } }
sed -r -b s/Dev\\Suite\\.*\\Modules/dev\\suite\\simple\\/g test.txt
for %i in (*.wav) do afconvert -f caff -d LEI16@44100 -c 1 %i %~ni.caf
(Get-QADUser username).lastLogon
rsync --delete -r -u /home/user/music/flac/* /media/MUSIC/flac
set MAVEN_DEBUG_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
cut -c 1 t.txt | sort | uniq
(head -n 2 backup.sh; tail -n +3 backup.sh | sort) > backup-sorted.sh
ls | sed ... | source /dev/stdin
find dir -type f -print0 | xargs -0 rm
cvs -q -d <CVSROOT> co -r <BRANCH> -d <DESTINATION> <PACKAGE>
sed /\(2.6.18-157.el5\)/,+4 { H; d; }; $ { p; x; } /boot/grub/menu.lst
tar -cpf - --exclude=CVS directory | sh -c cd /wherever/it/goes && tar -xpf -
while true; do foo; sleep 2; done
max_print_line=79
find * -type f | xargs cat | tr -d -c < | wc -c
find . -name .svn -exec rm -rf {} ;
more +2 myfile.txt
mailx -r me@example.com -s ...
dpkg -s <packagename>
CVSUSER := $(shell if [ -z $(CVSUSER) ] ; then read -p User name:  REPLY ; echo $$REPLY ; fi )
find . -type f
*CLI> help originate
:map <F2> :w|!python %<CR>
HOST := $(shell echo $(HOST) | cut -d . -f 1)
( set -o posix ; set ) | less
CL /DDEBUG="abc" TEST.C
WScript.Echo DateAdd(d, Date, -36)
git config --global alias.diffall !sh diffall.sh
find src/ ! -name Default.png -exec cp {} dest/ +
mysql> SET SQL_MODE = ANSI;
/sbin/ifconfig ppp0 | grep inet addr: | cut -d: -f2 | awk { print $1}
history | grep -C 5 ifconfig
VAR := $(shell find . -name *.txt)
/usr/sbin/tmpwatch $flags
:vnoremap <F2> d:execute normal i . join(sort(split(getreg("))),  )<CR>
msggrep -K -e or\b template2.pot
/usr/bin/mysqldump/mysqldump --add-drop-table -u dbname -pmypass dbname > /var/www/vhosts/mysite.org/dbBackups/`date +%Y%m%d`dbname.sql
awk {print $2} | sort -rn | perl -e $d=.1;@l=<>;print $l[int($d*$#l)]
ssh hudson@test python/runtest.py "$XAS_SVN"
which ruby
find . -type d -exec echo Hello, '{}' ;
-Dlocales=enGB,frFR
ls y* | xargs -i basename {} | xargs -i sed s/{}//g {}
rsync -ave ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO
find . -not -name *.exe -not -name *.dll
echo select some_column from some_table | mysql -uusername -ppassword some_db | tail -n+2
tar xvf $next *required_file_in_tar_file*.dat
tree -I 3rd*
paste c1 c2 | awk {print $1 + $2}
cat func_list | sed s#//.*## > file_list
echo SELECT things FROM some_table | mysql some_database | grep excitement > output.txt
sed s/_\([0-9]*[0-9][0-9][0-9]\)p.mov/_h\1p.mov/g
apachectl -V
cat input_file - | program
grep -Ri 64 src/install/ | grep -v -E (\.svn|file|2\.5|2\.6)
find . -name *.php | xargs wc -l
echo ###########|dd of=FILENAME seek=20 bs=1 count=11 conv=notrunc
cd $(xsel)
tail -f dev.log | grep ^ERROR:
set foo=bar&.foo.py&set foo=
wc -l [filenames] | grep -v  total$ | sed s/[prefix]//
cat file | xargs -L1 -I db mysqldump db > db.sql && cat file | xargs -L1 -I db gzip database.sql
exit 0
umount .... || /bin/true
kdialog --passivepopup <text> <timeout>
(echo set foreign_key_checks = 0; truncate table saurabh.bus_services; ; mysqldump --compact --no-create-info -h192.168.150.80 -uroot -p live pnlbus) | more
ln -s new current_tmp && mv -Tf current_tmp current
cat file | sed s/%/%%/g | while read -r line ; do printf ${line}\n ; done | sed s/\\ / /g
./configure CC=gcc -arch i386 CXX=g++ -arch i386
ssh -f -n remotesystem command&
rename ABC XYZ *.dat
java -cp <classpath> fully.qualified.class.name
echo $PATH|grep -q whatever && echo found it
ssh user@Middleman -L 1337:Destination:22
DATE=`date +%Y-%m-%d`
grep somePattern | sort | uniq
whenever sqlerror exit sql.sqlcode
cgi.assign = ( .py => /usr/bin/python )
wmctrl -lp | awk /Firefox/ { print $1 }
ls -Rt
cut -c19-26 input.txt | sed s/$/,/
export num=$(expr 0 + $(cat infile | cut -c137-148))
/usr/bin/svn update /apps/software >> /var/log/svn/software.log
Process p = Runtime.getRuntime().exec(new String[]{csh,-c,cat /home/narek/pk.txt});
zipit.exe ZipArchive.zip c:datafolder1
wc `find -name *.m`
ls -l `find /usr/bin -maxdepth 1 -type l -print`
PATHBAR

dir > a.txt 2>&1
grep -rl override.*commitProperties . | xargs grep -L super.commitProperties
awk -f logstrip.awk in.log > out.log
for f in ~/.bash_profile_*; do source $f; done
pidof applicaton || /usr/bin/application
[ -n ${DISPLAY} ] && export EDITOR=gedit || export EDITOR=emacs
find /home/shantanu -atime +2 -name my_stops* -exec rm {} ;
subinacl.exe /service <serviceName> /grant=DomainAccountName=<AccessType>

ls -l | sed -n 2p
sed -e s/<SCRIPT LANGUAGE="JavaScript" TYPE="text.javascript" SRC=".height.js"><.SCRIPT>/ / file_names
tf merge /baseless /recursive /version:C95654~C95654 branch2 branch1
sed -i s|$old|$new| script.sh
for /r %%a in (*.cmd) do xcopy %%a C:DESTINATION%%~pa
sort -t | --key=10,10 -g FILENAME
set destination1 = /scratch/graphics/${1}gif
sed -e :a -e N -e s/\n/ / -e ta input.txt
awk !x[$0]++ file.txt
script_that_produces_output.sh |multilog s2000 ./logdir
find . -iregex .*\(mp3\|mp4\|exe\) -printf %f\n
find . -maxdepth 1 -type f -printf %f\n
printenv PATH
perl -F\t -lane print join ",", map {s/"/""/g; /^[\d.]+$/ ? $_ : qq("$_")} @F 
ISQL -S server -D database -U user -P password
df -h | sed -n 2p | awk {print $2}
sort $FILE | uniq -c
perl script.pl -flag=something -anotherflag=$variable
sed -e s~^name2:[^:]*:~name2:aTest\$repl.ace:~g tst
echo $info | sed -n -r /<input/s/<input +name="([^"]+)" +value="([^"]+)"[^>]*>[^<]*/\1 = \2\n/gp
,= ;print +(A..Z)
. myscript.sh
mysqlbinlog mysql-bin.000016 | awk /session(_log)?/,/;/ | more
RunCompressor.bat %1
COUNT=`ls -1|wc -l`
{var:-10}
awk /Line-to-reorder/ {tmp = $1; $1 = $3; $3 = tmp} {print} file.txt
bindkey -m 2>/dev/null
echo $stuff
port contents wordpress | more
cdx.exe > c:windowsabc.zip
ls *.{java,cpp}
find [path] [conditions to prune] -prune -o [your usual conditions] [actions to perform]
grep --exclude-dir=.svn
convert input.png[48x48+0+0] output.png
awk -v nlines=2 /^Exception/ {for (i=0; i<nlines; i++) {getline}; next} 1
FOO=`echo foo[bar] | sed s/\\[/\\\\[/g` && echo $FOO
tr \001\002 xy

> start javaw.exe -jar myapp.jar
plink -i <key_location> user@machine command
for /r %f in (*) do @copy %f target
tokens=2 delims=(%%
java -cp libs/* com.mypackage.MyProgram
grep hehe < test.sh
uptime | awk {printf "%.0f\n",$(NF-1)}
awk FNR == 2 {print}
( proc1 3>&1 1>&2- 2>&3- ) | proc2
"
screen -X quit
Location: http://www.w3.org/pub/WWW/People.html
awk { lastfield = $NF; $NF = ""; print lastfield " " $0 }
matlab -nosplash -nodesktop -nodisplay -r test | tail +10
sed s/$/^M/
start title %ProgramFiles%\Internet Explorer\iexplore.exe http://www.example.com
dos2unix sqlscriptname
cut -f4 data | LANG=C grep -q [^0-9] && echo invalid
system start text_file.txt
function join { local IFS=$1; shift; echo $*; }
:retab
echo `seq 0 10` `seq 5 15` | tr   \n | sort -n
test -d $d || mkdir -p $d && cp file $d
A B Cabc D
ls -l | grep ^d
test $1 == Debug
. /path/to/bgx.sh
awk { print } lsfiles.txt | Out-File awkedlsfile.txt -encoding ASCII
sed -e s/\b\(.\)/\u\1/g
sed -e /"GVA"/w gva.file -e /"HBVL"/w hbvl.file -n $file
alias em=emacs
sed /^@/!d;s//>/;N
{line:3:23}
curl -F xml=@some_file http://servername/page.html
[ ... ]
sed -ie s/^\(>.*\)/\1-foo/ file
grep ${VALUE} inputfile.csv | cut -d, -f${INDEX}
sqlplus select onething from another | awk { weave awk magic here }
grep -n -v `head -1 FILE1` FILE2
diff -U 0 file1 file2 | grep -v ^@ | wc -l
pg_dump -U some_user_name -f dump.file -Fc database_name
paste <(./progA) <(./progB)
short_open_tag
--chmod=og=rx
cd $(git rev-parse --show-cdup)
export INSTANCE=whatever you want to put here
echo $1 | awk {FS="=";print $2}
awk { print $2, gensub(/@:/, "", "g", $5), $6} log.txt
find . -type d | sort | awk $0 !~ last "/" {print last} {last=$0} END {print last}
\n; grep -li regex $(<listOfFiles.txt))
sed h; :b; \$b ; N; /^${1}\n     n/ {h;x;s//Noun\n/; bb}; \$b ; P; D
alias svndiff=svn diff --diff-cmd=diff -x -U0
svn diff -r1234:1235 | diffstat
cat file | sed /^--/d
www-data ALL = NOPASSWD: /bin/nc
echo $STRING | egrep [*]
echo $(mysqlshow -uroot -pPassWord | awk {print $2} | egrep -v Databases|information_schema)
echo 1234567890|sed s/[0-9][0-9][0-9]\([0-9][0-9][0-9]\)\([0-9][0-9][0-9][0-9]\)/\1-\2/
{.[!.]*,*}
find . -name vmware-*.log -print0 | xargs -0 rm
{JAVA_HOME}/bin/java -jar umar.jar
eval perl a.pl $CLI
sed -e s/<c>.*<\/d>//
sed -e s/^[ \t]*//;s/[ \t]*$/ a > c
git describe --exact-match HEAD
awk { print $1 } < inputfile > outputfile
sed -n 800,900p file.txt
isql -input test.sql
URLMD5=`/bin/echo $URL | /usr/bin/md5sum | /bin/cut -f1 -d `
mysql -u <user> -p -e select * from schema.table
<log4j:configuration xmlns:log4j=http://jakarta.apache.org/log4j/>
/Applications/Mathematica.app/Contents/MacOS/MathKernel -noprompt -run <<test.m
echo -n 5a | perl -pe s/([0-9a-f]{2})/chr hex $1/gie
echo -n  | md5sum
cat test | sed -e s/\(\${[A-Z]*}\)/`eval echo \1`/ > outputfile
cp `cat /tmp/foo` /tmp/fred/.
find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -printf %f\0 | xargs -0 -I{} echo svnadmin hotcopy /usr/local/svn/repos/{} /usr/local/backup/{}
watch bash -c "cut -c -$COLUMNS file"
sed -e s/  \+/;/g File1 > File2
~/.R/Makevars
sed s/^ *\* *//; q
grep ^\*\*\*\*  textfile
awk BEGIN {FS="\n"; RS="-\n"}{for(i=1;i<=NF;i++) printf("%s   ",$i); if($1)print"-";} dict.txt
touch .git/objects/pack-fe017c0e9ea12841cd29458df7bd4421c2b12458.keep
while read a; do while read b; do echo $a, $b; done < file2; done < file1
sed -n s/(\([0-9][0-9][0-9]\))\s\?\([0-9][0-9][0-9]\)[- ]\([0-9][0-9][0-9][0-9]\)/\1\2\3/p
kill $!
(someCommand | cut -c3-)
ps | egrep 11383 | tr -s   | cut -d   -f 4
git clone --mirror <oldurl> <newurl>
sed s/-\([0-9.]\+\)/(\1)/g inputfile
ssh -t me@machine ./executeMyScript && bash -i
/usr/share/zsh/functions/Completion/Linux/_yast
someCommand | grep Amarghosh | sed -e s/foo/bar/g
diff a.properties b.properties
(echo SELECT A, B, C FROM table_a | mysql database -u $user -p$password)
vim `ls -S | head -1`
expect ">" {} timeout {puts stderr {Could not log in}; exit}
myDate2`
rsync test.sql test2.cpp myUser@myHost:path/to/files/synced/
sed -e s/ // -e s/ // -e s/ //
rm -f `grep -m 1 Failure ./*.log | cut -d: -f1`
cp --parents src/prog.js images/icon.jpg /tmp/package
mysql --skip-column-names -B -e select ... from ... where ...; | do_something /dev/stdin
ssh -t -l <username> <compname> sudo yum -y install expect
perl -pe chomp if eof filename >filename2
(tr  \t \n\n | fgrep -c int) < test
wc -L filename
(^| )[a-zA-Z][a-zA-Z0-9]*( |$)
sed -e s/.../.../;tx;d;:x
dos2unix my_env.sh
ssh -p 8899 root@$REMOTEIP mysql -u root -p -e "$SQL"
./test.sh this is "some test"
eval `ssh-agent`
<(find /Volumes/foo/imagesequence/ -name *.* -print0)
ping 1.1.1.1 -n 1 -w 3000 > nul
echo moo cow boo | xargs -n 1 echo
date +%d-%h-%Y | tr [:lower:] [:upper:]
/bin/kill -f 1234
find . -type d -exec find {} -type f -maxdepth 1 ;
rdesktop -r disk:bacon=$HOME/bacon host
wget -O - url | ruby -
perl -pi -e s/^(.*)$/\"$1\",/g /path/to/your/file
ls -l {,**/}*.ext
{!varname}
set shell=bash --login
exec /the/exe $@
locate foo | sed s/bar/baz/ | [other-processing] | xargs -n1 cowsay
su - app${username} -c ls $MYDIR
!-2
cp `cat list.txt` new-folder/
(/usr/bin/mpstat ... )
vim $(grep -rIl xg_icon-* *)
text = file.ReadAll
source myshell.sh
RPROMPT=[%F{green}%T%f]
find ... -exec cmd {} ;
PROMPT_COMMAND=history -a
(padSpaces TEST 10)
file -bi myfile.txt
sed -i s/<\/body>/<?php include_once('google_analytics.php'); ?>\n<\/body>/ *.htm
for d in $input/*
sed -n s/^.*abc\([0-9]*\)xyz.*$/\1/p example.txt
export PATH=/~/.gem:$PATH
uptime | tr ,   | cut -f6-8 -d 
HKEY_LOCAL_MACHINESystemCurrentControlSetControlSession ManagerEnvironmentPROCESSOR_ARCHITECTURE
find <some options> ! -name dontfile.txt
myprogram.exe (this is some text, with special characters.)
sed s/.*\.\(.*\..*\)/\1/
printf %-10s%-5s%-20s\n $str1 $str2 $str3 >> file
perl d2dxsd.pl someBigSchema.dtd > somefile.xsd
basename `pwd`
ls data_* | sort -n -t _ -k 2
ls | pbcopy
awk -F1 /FIELDB2/ { for (x=1;x<=NF;x++) if ($x~"FIELDB2") print $(x+1) }
system(bar, @ARGV);
(date +%w)
cat long-file | time sort
grep -n \$str filename
cat arglist.dos | tr -d \r | xargs -n2 echo cp
main(argc, char* argv[]); /* see remark below... */
git log | sed -n 0,/.*\[git-p4:.*\/\/depot\/blah\/\([^\/]*\)\/.*/s//\1/p; /\[git-p4/ q
awk {print $0 > "file_"$1"_"$2} file
java -classpath .;path/to/yourlib.jar your.package.path.ClassWithMain
mv -v *.mp3 tmp/ > log.txt
sed -re s/^default([ \t]+)0$/default\11/ /home/san/menu.lst
cat your_file | sed s/default_color\ .*/default_color\ $VAR/
awk $1=="number"{print $2} file
echo $body | mail $receiver -s $subj
JAVA_VERSION=`java-version`
& tee log_$(date +%Y%m%d%H%M%S)_$(ccv | awk { print $9})
sed s/.*\(HOSTNAME=\)/\1fred/ /etc/sysconfig/network
awk NR % 2 == 0 filename
svn info filename
for a in *.txt; do grep target $a >$a.out; done
grep SEARCHTERM server.log | grep -Ev PHHIABFFH|Stats
sort -k1,1 -t, a.csv
if [ x$USER != x$RUN_AS_USER ]
netstat -a
FOR /D /R %%X IN (certain_string*) DO RD /S /Q %%X
sed -r {filehere} -e s/[A-Z]/\L&/g;s/ /_/g -i
uniq -c intputfile | awk {count++;sum+=$1} END{print count,"lines.","Average is:",sum/count}
printf %80s 
(scan)
% find . -type l
/usr/local/lib/ImageMagick/convert images/a.pdf images/a.png
rsync -r --include-from=<patternlistfile> --exclude=* --delete-excluded / dest/
echo  Number is: $(grep Multiple_Frame = echo **$var**  20mrf.txt | wc -l) >>statisic.txt
export DISPLAY=:0
expr `date +%s` - `stat -c %Y /home/user/my_file`
(echo scale=2; $count/$total | bc)
iconv -c -f cp1255 -t utf8 somefile | awk ...
files = `ls`
ps aux | grep [-i] $ProcessName | wc -l
alias revert_all=for FILE in $(svn stat | awk {print $2}); do svn revert "$FILE"; done
(tar -tvf $TARFILE | head -1 | sed -e s:^.* \([^/]*\)/.*$:\1:)
kate `find . -name *.txt -type f`
sudo -u andrew myprog
cleartool ci -nc `cleartool lsco -short -rec .`

awk /80\/open/{print $2} infile > iplist_port_80
printf $(python read_one.py) | xvkbd -file -
(echo $FILENAME | sed -e s/.*ehb\(.*\)#.*/\1/)
awk /^[0-9]/ {print $1}
set makeprg=xcodebuild -activetarget -activeconfiguration
{1%/}
sed -e s/\s\+/\n/g old > new
find -mindepth 1 -maxdepth 1 -printf %Tb %Td %TH:%TM %f\n | grep ^Dec | sort -r
* * * * * /usr/bin/php /path/to/script --cron
printf(%s\n, &argv[1][3]);
first-cmd && second-cmd
echo F|xcopy ....Common%%a Common%%a /i /d /c /v /s /y /f >nul
digits=[[:digit:]]+ *[[:digit:]]*
svn status | grep ^\! | sed s/! *// | cygpath -m | xargs -I% svn rm %
[ -z $OO_EXE ] && OO_EXE=/usr/bin/oo
cdn () { pushd .; for ((i=1; i<=$1; i++)); do cd ..; done; pwd; }
column -s, -t < somefile.csv | less -
find . -type f | xargs perl -pi.bak -e s,[^[:ascii:]],,g
find $PATH -type l -xtype d -lname $DIR*
ls > dirlist 2>&1
echo $line
if [ $LAST_MODIFIED -lt 3600 ] || ! [ -f $i ]; then
INCLUDE += -I/usr/local/include
grep perl * --exclude=try* --exclude=tk*
if [ -z $var1 -o -z $var2 ]
find . -name *.html |xargs perl -pi -e s/find/replace/g
kill `ps auxww | grep zsh | awk {print $2} | while read line; do echo $RANDOM $line; done | sort | cut -d   -f 2 | head -n 1`

java -cp a.jar:b.jar:c.jar:./src MainClass
sleep 60 && echo A &
sort -u -t, -k1,1 file
find ./[ac]*/ -name blarg
mysql -u user -ppassword -D database_name
diff a.txt b.txt | grep < | wc -l

ruby overlay_test.rb | tail -n 1 | tee >(say)
export PATH=/Developer/usr/bin:${PATH}
eval echo ${
HKEY_CLASSES_ROOTApplicationspython26.exeshellopencommand
tar cvfp `find . -name *.jpg` | (cd <newfolder>; tar xfp -)
cleartool diff -g filename filename@@clearcase-virtual-path-to-version-I-want-to_compare-to &
sed -n N;/^\n$/q;P;D
java -cp {name_of_jar} {name_of_class} {name_of_csv}
List<string> extra = optionSet.Parse(args);
history 10 | cut -c 8-
ssh -L 23:localhost:23 user@host
find . -type f -mtime +7 | tee compressedP.list | parallel compress
read a b c <<<$(echo 1 2 3) ; echo $a|$b|$c
if [[ $string == $pattern ]]
curl http://twitter.com/users/username.json | jsawk -a return this.name
cat crap.txt | awk { sub(/D/,"E",$3); A[NR-1] = $3; } END { print A[1] - A[0] }
for x in *.png;do mv $x test/${x%.png}test.png;done
yes no | <command>
echo -n $SITE | openssl dgst -binary -sha1 -hmac $MASTER | openssl base64 | cut -c1-8
if [ $DBG = 1 ]; then
echo -e \xC2\xA3
(od -t x2 --skip-bytes=6 --read-bytes=2 file.moi | head -1 | awk {print $2})
eval $COPY_CMD
iconv -f utf-8 -t ascii//translit
ruby <main.js -pe$_.gsub!(%r{/\*>\s*(.+?)\s*\*/}) { File.read($1) }
csplit ~/Download/zinc.mol2 /@<TRIPOS>MOLECULE/ {*}
./script2.sh $@
awk {out=$1; for (i=2; i<=NF; i++) {out=out"\t"i-1":"$i} {print out}} inputfile
username1 ALL=(username2) NOPASSWD: /path/to/svn
grep `date +%y%m%d` /var/log/mysqld.log | sed s/^/computer /
nc localhost 3306
printf $nav\n$enc\n | /bin/bash -c ./export_map.sh "100 200 300 400"
echo -e -n \bD{a,b,c}.jpg\n
Configure::write(Config.language, en-us);
eval $cmd
su $USER -c $WEB --quiet &
screen -d -m sh -c while :; do ./myCommand; done;
java $JAVA_OPTS -jar analyse.jar $*
sed -n s/\([a-z]\)\([a-z]\)\([a-z]\)\([a-z]\)\([a-z]\)/\5\4\3\2\1/pg
{VARIABLE:-default}
rm *'*
sed -i 2001891N;s/\n// filename
sed 1{x;s/^$/server-id=1789051/;x};/^server-id=/{s/^.*$//;x};${G;s/\n//} /etc/my.cnf
xmllint --noent foobar.xml
diff -bur folder1/ folder2/
find ./dir -type f -iname *.t[argz]*[bz2] -print0 | xargs --null mv --target-directory=dir
HKCUSoftwareTortoiseSVNDebug
sed -e s/^\(..\)\(..\)\(.\)\(..\)\(.*\)$/\1\4\3\2\5/g
mvn groupID:artifactID:version:goal
stat $1*
cout << argv[i] << \n;
HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionExplorerFileExts
locale
tail -n0 -F logfile 2>/dev/null | while read -t 30 line
find -name whatever -exec grep --with-filename you_search_for_it {} ;
echo -e import sys\nfor r in range(10): print 'rob' | python
[status string]=system(grep "Up to" ~/test_linux/vision1.1/log | awk {print $7} );
exec(sed -i 's/NULL/\\N/g' .$_REQUEST[para]..sql);
diskutil unmountDisk /dev/disk*
mysqladmin -u[username] -p[password] drop [database]
evince -p 5 foo.pdf
{string
/matchstr/{N;d;}
... /p:customOutputDir=%1
sed -ne s/^myhome=//p
grep -ZlR /~test/dev/portal . | xargs -0 -l1 sed -i s:/~test/dev/portal/:/apps/portal/:g
sed :a;$!{N;N};s/\n\n\([a-z]\)/ \1/;ta;P;D sentences
for FILE in `ls`; do mv $FILE `echo $FILE | sed -e s:^0*::`; done
sed -r s/([a-zA-Z0-9.]+) [0-9] (.*)/\2 (\1)/g file1.txt
./manage.py shell --plain
puts `dir`
airport -s | egrep -o ([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}
ls -la | filter
(svn checkout $URL | tee /dev/tty)
ps -ef | awk -f part3.1.awk | sort
sort list1 list2 list2 | uniq -u
sed -e s|href=\"\(.[^"][^>]*\)\([.,]\)\">|href="\1">|g file
read key <&3
for i in {32..255}; do printf $i \$(($i/64*100+$i%64/8*10+$i%8))\n; done | column
sed s/su./newfolder/g
awk {print $(NF-1)}
sed s/^\(RAILS_GEM_VERSION.*\)$/# \1/ -i .backup config/environment.rb
`sed -e s|\([0-9]*\) \(.*\)|\1 <a href="http://www.wowhead.com/?search=\2">\2</a>|
ls -r | select-string SomeSearchString | Foreach {tf edit $_.Path}
echo $\x5d
sed -e /^[0-9]/{N;s/\n//;}
if [ ${t2:-0} -ge ${t1:-0} ]; then
perl -pe s!([^/]+)$!lc $1!e
(git branch | sed -n -e s/^\* \(.*\)/\1/p)
sed -e 5,10d;12d file
hexdump -e  [iterations]/[byte_count] "[format string]"  filename
print fooPy()
python -cimport themodule; themodule.thefunction("boo!")
/dev/bin/com/example/Hello.class
ls -s
echo hello | awk {print} >qq.tmp
for i in index.html?tab=*; do mv $i ${i:15}.txt; done
awk { print $2 " " $1} file.txt
java -Duniquename=1 test
sed -i -e /^STARTSTRING/s/5\.[56][0-9][0-9]/5.500/g file
30 08 * * * env > ~/cronenv
erl -name foo@elife.local
gcc -E main.c > main.txt
cat /etc/passwd | awk -F : $7=="/bin/bash" { print $1 }
sed -e s/2000/$START/g -e s/2009/$END/g < WAR.sql | mysql -D WAR
exec 3>/tmp/log.pipe
!!:gs/foo/bar/
cat *.txt >> all.txt
echo thePassword | passwd theUsername --stdin
PROMPT_COMMAND=if [ is_morning ]; then echo "MORNING_COLORS; else echo EVENING_COLORS; fi
awk BEGIN{FS=OFS="\t"}{split($2,a,"_"); $2=a[1]"_"a[2]"\t"a[3] }1 file
find . -mtime +3 -exec rm {} ;
sed -e /pattern/Id filepath
... | tar -cf - -F - | ...
g++ 2>&1 | sed -e s/no/on/g
sed -e s/ /\\ /g -e s/\\ / /1
df $path | tail -1 | awk { print $6 }
xargs cat | MyCommand
2010-01-31 17:03:24.317 iConChange[14848:10b] *** Terminating app due to uncaught exception NSInternalInconsistencyException, reason: Error (1002) creating CGSWindow
keytool -list -keystore myKeystore -storepass myPW
char* loc = setlocale(LC_NUMERIC, NULL);
local c_bit_mins c_bit_maxs gamma_bit_mins gamma_bit_maxs
> File 2>&1
gg() { git grep $*; }
sort | uniq -c
daytype=`grep $date feb2010 | cut -c13-`
ARTIST = ARTIST.Replace(",\");
echo 00:20:40.25 | awk -F: { print ($1 * 3600) + ($2 * 60) + $3 }
echo 1,2,3 | tr -cd , | wc -c
typeset +t
perl -p -i.orig -e s/^IPADDR=.*$/IPADDR=127.0.0.1/ filename
python - <<END
rsync -av --exclude=path1/to/exclude --exclude=path2/to/exclude source destination
wget --page-requisites
dos2unix ./script
/usr/bin/osascript -e tell application "System Events" to tell process "Terminal" to keystroke "k" using command down

echo 1 ^< 2
export -f myfunc
ssh pvuser@host . ~pvuser/.profile;/opt/datamart/bin/resmgr -import segp -colNames "npath cond type" -line "~Thresholds~Transmission_Auto|_|$r|_|rule|_|"
Filename: {pf32}\MYSQL\MySQLServer\Bin\MySQL.exe; BeforeInstall: MakeQuery; AfterInstall: DeleteQuery; WorkingDir: {app}\Database; Flags: waituntilterminated; Parameters: -u root --password=<password>  --database=<db> --execute=SOURCE temp.sql;
[[ $var =~ ^-?[0-9]+$ ]]
bindkey ^O forward-word
(echo $matchString | grep -o url={"urlPath":"([^"]+)"))
export PATH=....
sed -n s|http://\(.*\.\)*\(.*\)\..*|\2|p
(curl --write-out %{http_code} --silent --output /dev/null servername)
xml_grep job jobs.xml --text_only
ps aux | grep firefox | awk {print $2} | xargs kill -9
/usr/bin/java -jar /path/to/Pharmagistics_auto.jar -o
perl -0777 -pe s/\\\n/\\n/g
echo $line | sed -e s@.*/@@g -e s@\.[^.]*$@@g
find . -type f ! -path */.svn/* -exec dos2unix {} ;
awk -F | { sub(".*@","",$5); print $5 } test.log
awk BEGIN{print 0.5*2}
(stat -c %s testing.txt)
sed -n 6,10p file
date --date=yesterday +%Y%m%d
date --date=20 Feb 2010 1 day
du -h file_size.txt | cut -f -1
bind -q complete
find -printf $PWD/%p %M\n
system(make SCHED=$sim) == 0 or die $0: make exited  . ($? >> 8)
sed -e s/\*DIVIDER\*/${DIVIDER//\/\\}/g
sort file | rev | uniq -f 10 | rev
sed s/\\"/\'/g

STR = foo
sed -i -e s/.*/START & END/ file
browser.tabs.loadDivertedInBackground to true.
alias geturl=python /some/cool/script.py
history -s whatever you want
find -name *.class -printf %h\n | sort -u
retVal = Shell(C:\Temp\gc.exe 1, vbNormalFocus)
ssh user@server.com date +%Y%m%d%H%M%s
less -p regex file_name
for f in *.xls ; do xls2csv $f ${f%.xls}.csv ; done
sed s/\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|/\1\t\2\t\3\t\4\t\5\t\6\t\7\t\8\t/;s/|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)$/\t\1\t\2\t\3\t\4/
REVISION=`svn info http://svn-repository/trunk |grep ^Revision: | sed -e s/^Revision: //`
./webbmaster_bellarose_joomla_12-29-2009.sql.gz
rundll32 shimgvw.dll ImageView_PrintTo /pt xxx.png printer name
openssl base64 < sound.m4a
eval ... && eval ... & eval ... if $running_under_some_shell;
sed s/^[ \t]*// -i youfile
sed N;N;s/\n/#/g file |sort -t_ -nr -k4 | sed s|#|\n|g
{PATH}:/usr/local/mysql/bin
((`wc -l < file` / 2))
git log --follow ./path/to/file
pwd=`pwd`
(<myFile.txt)
mkdir -p backup.{0..7}
`exec 2> filename`
grep --color=always WORD * | grep -v AVOID
CURRENT_LINE=`cat $UNIQ_LIST_FINAL | sed $UNIQ_SCAN_INIT_POINTq;d`
while [ $A -eq 1 ]; do
awk /FINDME/{f=1}f&&/NEWSEARCH/{print} file
lynx -dump http://example.com/
do not prompt before overwriting
java -cp nasa-top-secret.jar gov.nasa.RocketToMoon 2>&1 | grep -v codehaus
grep key my_file | cut -d= -f2
svn ci vendor/plugin/<plugin_name>
ps aux | grep qmail | grep -v grep
command 2>&1 >/dev/null | grep something
listall | shuf | head -n 1
if [[ $gg == ????grid* ]] ; then echo $gg; fi
zstyle :completion:*:*:git:* commands base
(echo $filename |awk -F . {if (NF>1) {print $NF}})
defaults write com.yourcompany.app key -dict-add subkey plistValue
eval $illcommando
du -s *|awk { if ($1 > $1) print }
[ $arg1 = $arg2 -a $arg1 != $arg3 ]
perl -i.bak -pe s/^LogFormat (.*) combined$/replacement/ httpd.conf
vector<string> args(argv + 1, argv + argc + !argc);
ifconfig | awk -F: /inet addr/&&!/127.0.0.1/{split($2,_," ");print _[1]}
(awk BEGIN{print $sum / $subjects})
:vimgrep ^Foo.*Bar **/*.txt
grep \[$(date +%d/%b/%Y)
COPY tablename ( column1, column2, ... ) FROM ...
myscript &
for i in public/{stylesheet,image,javascript}s; do [ -d $i ] || rm -rfv $i; done
\/ -> / (which makes the forward slash a regular character instead of a delimiter)
printf \rFileName : %20s : %8d of %8d Completed $filename $index $lines
rename s/0000/000/ F0000*
HEADER = $(shell for file in `find . -name *.h`;do echo $$file; done)
cat file.txt | perl -pe s/one/1/
find /dir/ -perm /g=w
echo cba | grep -o . | sort |tr -d \n
ssh tunneluser@111.222.333.444 <<EOI
ls | grep foo | xargs -I %s mv %s bar/

pg_dump -U myUser myDB | gzip > myDB.sql.gz
grep -vi -f file2.txt file1.txt
(echo $line | cut -d  -f3)
seq 1 1000000 | while read i; do echo -en \r$i; done
dd if=your_file of=output_tmp_file bs=1024 count=1 skip=0
echo ${@:2}
close(date "+%Y-%m-%d" -d  $1)
set noclobber
python -c from math import ceil; print ceil($NUMBER/500.0)

printf %X $((255-16
i=0
tr < file-with-nulls -d \000 > file-without-nulls
*/15 * * * * bash -c source /home/username/.rvm/scripts/rvm && /usr/bin/env ruby /home/username/twitter/twitter.rb friends
tmp-scp.sh Screen shot 2010-02-18 at 9.38.35 AM.png
python -c import code; code.interact(local=locals())
awk {getline t<"file1"; print $0-t} file2
SumatraPDF.exe -inverse-search "C:\Program Files (x86)\Eclipse (C++)\inverse_search.bat" "%f" %l
for i in user_*; do cat $i | ./fetch_contact.php; done;

alias killaf=kill -9 `psu|grep MF1pp|grep -v grep|awk '{print $2}'`
(time ls) &> file
exec &> output.txt
PS1=\[\e]0;\u@\h: \w\a\]
./foo: line 9: [1: command not found
command 2>&1 | tee -a file.txt ; ( exit ${PIPESTATUS} )
echo $MYSTRING
((expression))
> function Get-ExitBoolean($cmd) { & $cmd | Out-Null; $? }
rename s/^#// *
ack assert_equal | ack -v amazon

perl -0777 -pe s/my first line\nmy second line\nmy third line\nthe fourth\n5th and last\n//g paragraph_file
grep -v -f blacklist.txt inputfile > filtered_file.txt
cat /dev/null >! file
cat filename.sql | mysql -u username -p
notepad hello.txt &
find . -name *.py -exec svn add --parents {} ;
ls data[0-9]*txt|sort -nk1.5|awk BEGIN{rn=5;i=1}{while((getline _<$0)>0){print _ >"data_new_"i".txt"}close($0)}NR%rn==0{i++}
read var1 < infile
cmd /c for /l %i in (1,0,1) do @ping -n 1 google.com || (echo ^G & msg user Google is down! & exit)
echo -n ${line} | awk -F | {printf "%s", $1}
grep -ER ^.*(.*); file
grep -l yourtext * | xargs rm
(head -n 1 filename)
echo -n   | some_command
echo    word1  word2  | awk {print $1;} // Prints word1
(( 1 == 1 ? 1 : 0 ))
sed -e s/^string1.*/string2 lala/
grep MemTotal /proc/meminfo | awk {print $2}
-classpath classpath
while :; do : ; done
cd $(dirname $(find . -name file.xml 2> /dev/null))
set -o NULL_GLOB
javac -classpath . app/Main.java
awk \$2>0 && \$1=="$col1type"
CMD /C c:whereverwhatever.exe
source <(grep -v mesg /etc/bashrc)
ls -l | sed s/ [0-9].*:.[0-9] / / | less
sort -k5n file.txt
read ENE <<<$(awk {print $1} file)
grep -n -e -1234.5678
sed s/DATA_.*/DATA_/ filename.txt
sed s/\(DATA[^ ]*\).*/\1/
for f in * ; do cp $f ../backup/$f ; done
sed -c -i s/\($TARGET_KEY *= *\).*/\1$REPLACEMENT_VALUE/ $CONFIG_FILE
[[ $(date +%a) == Sun ]]
(echo $abc | sed s|\(["/]\)|\\&|g )
:g/<abc/ .,/</abc/ join!
for x in $(jobs -p); do kill $x; done

Print $var
app.StandardInput.Close()
VAR=`ssh $i awk -F: '/^bar/ {print \$2}' /local/foo.txt`
(ls -c $LOGS_DIR/fetch_cron_*$CRON_DATE* | head -1)
while [ `sort $file | uniq -c | awk {print $1} | sort -nr | head -n1` -lt 10 ]
ini_set(display_errors, on);
sed s/ABCD\(.*\)[0-9]\{2\}-[[:alpha:]].*.sql.zip/\1/
sed -i.bak s/,// file
sed -e s/\([0-9][0-9]:[0-9][0-9]\.[0-9]\).*/\1/
gzip -cd $(<list.txt) | ./a.out
find -ctime +7 -print0 | xargs -0 rm -v
a\0b; [ ${
sed -i -e s|http[:]//[^ ]*|<a href="\0">\0</a>|g yourfile.txt
find -type f -maxdepth 1 -writable
... | grep asdf | sed -e s:.*-ProcessName=\([^ ]\+\).*:Process \1:
/etc/init.d/functions
rsync -av $folderToBeMoved/EyeTV Archive/*.eyetv $newfoldername --exclude=Live TV Buffer.eyetv && rm -rf $folderToBeMoved
sed -e 2s/  */ /g infile.txt
/bin/sh ls -l -R
ct find -all -nvis -print|gawk {print "cleartool lsvtree "$0}|cmd
(ssh -v hostname somecommand > /dev/null) 2>&1 | awk /debug1/ ...
date -v31d +%a
cat optionsfile | xargs gcc
eval ${Vegetable}=$(expr ${!Vegetable} - 1)
history | vim -
find . -name script.sh | xargs grep watermelon
sed -i.bak s/$/  def/ *.txt
let a=3 b=4 c=5
source ~/.bashrc
sed 1,/baz/s/foo/bar/g
ct lshist vob:yourVob
for i in *; do sed -i s/old/new/g $i; done
rsync --del -az -e ssh -i mycrt.crt /home/gnutt/backup/ me@offisite:backup 9> /dev/null 1>&9 2>&1 | logger -i
perl -ne print if /text/ .. /END/
scp -vp me@server:/location/files*
EOF )
<profile defaultProvider=SqlProvider inherits=MigrationFromUDF.AccountProfile>
{/bin/csh, -cf, echo hello}
wmic logicaldisk where DeviceID='C:' get FreeSpace
uhura -k signature.key yourextension.xpi http://yourupdateurl
IF [%1] == [] GOTO MyLabel
grep string $x.sh
ls -1 *.bin | xargs strings -n4 --radix=d -f | grep string | awk {sub(/:/, ""); print $2 " " $1 " " $1".";} | xargs -l1 split -b && rm *.aa
someprogram $file
echo Some- String- 12345- Here | sed s/\s*-\s*/-/g
php -r print_r(\$_SERVER);
execve(/bin/sh, [sh, -c, echo at 12:57 < /etc/fstab], [/* 67 vars */]) = 0
echo.>> a.txt
* * * * * . /home/you/.bashrc ; curl -L --maxredirs 5 ...
shuf -i 2000-65000 -n 1
(genhash --use-ssl -s $IP -p 443 --url $URL | grep MD5 | grep -c $MD5)
arg_count++;
ssh $hostname my_script >> results_file
sed -i /<b>/,/<\/b>/d foo.xml
find /some/start/dir -cmin -30 -type f
open -b com.Growl.GrowlHelperApp
replace string 1 string 2 -- *.html
sed -n /color/ s/.*color: *#\([^;]\+\);.*/\1/p css_file
for /f tokens=2 %%i in (findstr Revision: input.txt) do set revision=%%i
numfiles=`find $HOME/.junk -type f | wc -l`
(ruby test.rb)
awk FNR==1{print ""}1 *.txt
[ -z $line ] && continue
sed s/^\([ \t]*\)\(.*\)$/\1<!-- \2 -->/ web.xml
perl -n -E s/"[^"]+"//mg;s/"$//;print java-sql.txt >oracle-sql.txt
ps aux | awk {print $11}
cmd
for i in *.htm; do cat header.txt $i footer.txt > new-$i; done
dd if=/dev/random of=random.dat bs=1000000 count=5000
phoneNumber = raw_input(Please enter a phone number: )
%~fI
( dd if=/dev/zero of=1.txt count=1 ) > /dev/null
perl -F, -ane $,=","; print split("",$F[0]), @F[1..$#F] <file>
./stream_generator | egrep --line-buffered TICK | ./topic_processor
{ line=tolower($0); if (line ~ /update .*set/ && line !~ /updated|updatesql/) { gsub ...
HOME=`sudo -u myuser -s cd ~; pwd`
python /var/www/hash_info.py /var/www/Muha_Album.7912.torrent
case monitor1 monitor2 in
awk { if (a[$1]++ == 0) print $0; } $@

system( $perlExe, $contentcheck, -t, $target_path, -b, $base_path, -o, $output_path, -s, $size_threshold );
alias cd-=cd ${${(z)$(fc -l -1)}[3]}
echo 1:  | awk -F : /1/ {print $1}
echo $string | perl -ne print "$1\n" if /\b(\S.{0,20})$/
curl <url> | tar xz
nohup ./fetch_command > fetch_log_file &
echo DIR 1 >~/.dir_colors
findstr /r ^[1-9][0-9]*$ ^-[1-9][0-9]*$ ^0$
./program --bash
program -a *.txt
!
sed /mark1/,/mark2/d;/mark3/,$d
//g
while(<stdin>)
Dim bash : bash = fso.BuildPath(gitdir, bin\sh.exe)
find /path/to -regex .*\.\(jpg\|gif\|png\|jpeg\) > log
robocopy c:source c:destination *.png *.gif /s
sed -n /SUMMARY/,/END OF SUMMARY/p fileName
compgen -A function
awk {for(i=4;i<NF;i++)printf "%s",$i OFS; if (NF) printf "%s",$NF; printf ORS}
alias v=vim -c "'\""

start /wait YourApplication.exe
awk /./{line=$0} END{print line} my_file.txt
for D in `find . -iname *.php~`; do mv ${D} /mydir; done
find . -name *.txt -exec data {} ;
awk BEGIN { FS = "\t" } ; { print $1, $5 } filename > newfilename
find c:path -iname *.txt -exec sed s/old/new/g {} ;
(ec2-run-instances ami-dd8ea5a9 [...] | awk /INSTANCE/{print $2})
char *arg[MAX_ARG_LENGTH];
sed -s -n -e /^Agent Name: agent10479475/,/^==/ p run*.txt
(cmd0 </dev/null; cmd1) | cmd2
sed 1d file.txt

int main(int argc, char *argv[]) { /* ... */ }
trap echo killing childs; pkill -P $$ EXIT
ps aux | awk NR != 1 {x[$1] += $4} END{ for(z in x) {print z, x[z]"%"}}
sed -n /^\/\*/,/^ \*\//p;/^ \*\//q file
compdef _files -W "$HOME/tasks" task
echo $hello world!
for (( expr1 ; expr2 ; expr3 )) ; do commands ; done
/usr/bin/xcrun -sdk iphoneos PackageApplication -v ${RELEASE_BUILDDIR}/${APPLICATION_NAME}.app -o ${BUILD_HISTORY_DIR}/${APPLICATION_NAME}.ipa --sign ${DEVELOPER_NAME} --embed ${PROVISONING_PROFILE}
sed /STUFFGOESHERE/ r file1.txt file2.txt
sed -i s|^datadir=.*$|datadir=/mysql`date '+%b%d'`| /etc/my.cnf
AMI_ID TYPE=$TYPE external-script.sh
awk -F, {cnt[$2]+=$3}END{for (x in cnt){printf "%s,%d\n",x,cnt[x]}} file
cat old.file | sed s%/var/www/%/home/www/%g > new.file
awk BEGIN{FS=","; OFS=","} {$25=$22; print} < test.csv
find ${DIR} -type f -name *.css -exec sed -n /\.ExampleClass.{/,/}/p {} +
tr 0123 ACGT <input_file >output_file
call :ack %m% %2
awk {s+=$1}NR%4==0{print s;s=0} file
[[ $_ != $0 ]] && echo Script is being sourced || echo Script is a subshell
echo $com
sed -r -e s/\|([^|]+)\|/\\left|\1\\right|/g
awk /^[[:space:]]*#/ { NR-- } {sum+=$3} END { ... } coriolis_data
awk {sum+=$3;s3[NR]=$3} END {ave=sum/NR; for(i=1;i<=NR;i++)print s3[i]-ave} coriolis_data
awk {sum+=$1} END {print sum} read
pcregrep -M ;*\R*.*thingtosearchfor*\R*.*;.*
/usr/bin/php /var/www/bims/index.php projects/output | xargs rm
while [ $VAR -eq 0 ]; do
new File(dir path).mkdir();
alias ij=open -a /Applications/IntelliJ\ IDEA\ 9.0.2.app
if [[ $f =~ ^source/(.*).c$ ]] ; then f=obj/${BASH_REMATCH[1]}.o; fi
comm -12 <(ls 1) <(ls 2)
grep -F -x -f b.txt -v a.txt > c.txt
find . ( -name *.dat -o -name *.txt )
if IsServerStarted ; then ...
find . -type d -path ./dir1/*.1 -prune -o -print
sed -i -ne /<!-- BEGIN realm -->/ {p; r realm.xml -e :a; n; /<!-- END realm -->/ {p; b}; ba}; p server.xml
tar tvf mytar.tar
tar czf - www|split -b 1073741824 - www-backup.tar.
cmd /c mvn.execute()
% perl -nle $sum += $_ } END { print $sum
set mypath = $file
export APP_DIR=${SYS_DIR}/app
find . -type d -exec sh -c cd "{}" ;  unzip "*.zip" ; rm "*.zip"   ;
ls -1 | xargs -L1 echo
for d in 2010* ; do rsync -av ./$d/ ./Merged/ ; done

iconv -f LATIN1 -t UTF8
keytool ... > /tmp/keytmp 2>&1 || cat /tmp/keytmp
keytool -keystore $(echo ~/Desktop)
netstat -t 1 -i > $NETStat_OUT_FILE 2>&1 &
mkdir /home/sindhu/bin/misc_scripts/shellrc/.zshrc_1
(mysql -B -db mydb -uanon -ppwd --disable-column-names -e select count(*) from table1;)
psql -U <username> -d <dbname> -1 -f <filename>.sql
eval $1
netstat -anp | grep LISTEN | awk {print $4} | sed s/.*://g | sort -n -u
mknod /tmp/semaphore p
make > error.txt 2>&1 ; perl analysis.pl
findstr /r /c:^# [0-9][0-9]* "[a-zA-Z0-9]*.inc" all_pre.txt | more
*RECORD $DATE-n++ [some_serial_
find . -type d -exec cvs add {} ;
mkdir -p $deploydir
echo -n -e \x30
find . -name *.pem -type f -execdir openssl x509 -in {} -noout -enddate ;
sed s/^URL=\(.*\)/TITLE=$(curl -s \1 | head -n 1)/ file.txt
echo $my_var
find . -name *.gif -exec gif2bmp -i {} -o {}.bmp ;

echo -n -e 1\n2\n3 |xargs -0 printf SELECT %s INTO MyTable
ls -1 | tr \n ,
windExec(cd C:/Documents and Settings/ermac/Desktop/my project/libs & curl.exe -L http://www.google.com/, FG);
awk {array[$1]+=$2} END { for (i in array) {print "Sum for time stamp",i,"=", array[i]}} data.txt
svn ci file1 file2 dir1/
sqlplus scott/tiger@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost.localdomain)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SID=xe)))
sed -r s/(import\/)([0-9]{4}\.[0-9]{2}\.[0-9]{2})/\1$newdate/g myfile.xml
sed s/@version@/$(sha1sum $(xpi) | grep -Eow ^[^ ]+)/ input.txt > output.txt
hookname user $user password $password
cut -f2 file.txt | sort | uniq | wc -l
(</dev/urandom tr -dc A-Za-z0-9| (head -c $1 > /dev/null 2>&1 || head -c 8))
cd $(find . -name Subscription.java | xargs dirname)
gunzip -c input.gz | dd bs=10485760 skip=0 count=1 >output
echo $testvar
sed h; s/ .*//; x; s/.* //; s:/:-:g; x; G; s/\n/ /
awk -F:  $3 > 499 {print $1}  /etc/passwd | sudo grep -f - /etc/shadow > shadow.out
cat /dev/urandom | tr -cd a-f0-9 | head -c 32
dd if=filename bs=<line-length> skip=<line_no - 1> count=1 2>/dev/null
fh = fopen(ftp://user:password@example.com/pub/file.txt, r);

git log --pretty=%s --since=`date -r ./../lastSuccessful/build.xml +%F %T`
source ./init.bash
{COMP_WORDBREAKS//:}
sed -n 1h;1!H;${;g;s/a/b/g;p;}
find . -type f -exec bash -c ed -s "$2" <<< "$1" _ $g/a/s//b/g\nw {} ;
perl -pe $i++; s{id=""}{id="$i"} < file.xml
perl -MDigest::SHA1=sha1_hex -le print sha1_hex <> secure.txt
COLOR = r*6^2 + g*6 + b) + 16
open(unescaped.txt, w).write(eval(open(string.txt).read()))
join fileA fileB | join - fileC
cat `ls -t _system*.log`
java -jar /opt/myapp/myapp.jar > /opt/myapp/myapp.log 2>&1 < /dev/null &
result = `su SomeUser ./dothis.php 2>&1`
find ... 2>/dev/null | grep ... 2>/dev/null | xargs ... 2>/dev/null
perl -MO=Deparse -pe s/(\d+)/localtime($1)/e
[[NSWorkspace sharedWorkspace] openFile:@file.txt]
for path in *_*; do [ -d $path ] && ln -s $path ${path//_/-}; done
dbus-send --session --dest=org.ayatana.indicator.sound /org/ayatana/indicator/sound/service org.ayatana.indicator.sound.SetSinkVolume uint32:40
ps -ax | grep PROCESS_NAME | grep -v  grep 
NSString *scriptFile = [NSString stringWithFormat:@svn co %@ %@ \ncd %@ \nsvn log -v --xml > logfile.log \ncd %@\ncp %@ %@ \njava -jar %@/statsvn.jar %@/logfile.log %@ \nrm -r -f %@\nrm statsvn.jar, svnURLStr, tempLocStr, tempLocStr, destDirStr, SVNStatStr, destDirStr, destDirStr, tempLocStr, tempLocStr, tempLocStr, nil];
locale charmap
mysql -u username -p password < statements.txt
sed h;s/[^\x27]*\x27\(.*\)/\n\x27\1/;s/ //g;x;s/\([^\x27]*\).*/\1/;G;s/\n//g
ls -t | head -n1 |awk {printf("newest file: %s",$0)}
awk { system("mkdir " $1); system("chown " $1 ":" $2 " " $1); } idlist
System.Diagnostics.Process.Start(aticonfig, --pplib-cmd 'set fanspeed 0 70');
perl -p -e s/\s+$//; $_ .= length() <= 75 ? qq{\n} : q{ } book.txt
echo $HTML | sed -e s@ENTRY@$TABLE@
python -c import os; print dir(os)
./child | tee file
C:programszip myzipfile a/file1 b/file2 c/file3
( echo 1; echo2 ) | tee file
grep -l firstmatch * | xargs grep secondmatch {}
printf %q hello\world | someprog
find . -name *.txt | xargs sed -i s/Coke/Pepsi/g
date -d this Friday +%d/%m/%y
sed h;s/[^=]*=*=#\(.*\)/\1/;s/\([^=]\)#/\1/g;x;s/\([^=]*=\+#\).*/\1/;G;s/\n//g inputfile
alias ant=ant | grep -v 'Trying to override old definition of task'
foremost -i tcpflow.out
make libs-depends | sed s/ /\n/g | sed /\.h$/!d;s/^/src\// | sed G;/^\(.*\)\n.*\1/!h;$!d;${x;s/\n/ /g}
type -a lshw
sed -e s/$/string after each line/ -i filename
echo $string | tr xyz _
(./doit >> log) 2>&1 | tee -a log
java -jar program.jar $1 $2 $3
cat $rootFilename | perl -pe s/Policy[ \t]+([a-zA-Z0-9_]+)[ \t]*[;=].*/\1/g
sed -i s|-l[^ ]*/\([^/ ]*\)|-l\1|g Makefile
curl -X delete URL
55 15 * * 1-5 scp user@host:/path/to/file/`date +%Y%m%d`.log /tmp
( wc -l < $1 )
sed -n /^Acknowledgements:$/,$p input-file > output-file
sed -n /\*\//q; /^\/\*/d; s/^ \* \?//p <file.h >comment.txt
flock <params> && <do other stuff>
RANDNUM=`dd if=/dev/urandom bs=1 count=1 | od -t u1 | cut -f4- -d   | head -1 | sed s/ //g`
alias ssh_nokia=ssh -l root
bash> php -f /path/to/my/php/script.php

mysqld --help --verbose | grep datadir
chmod g+w .[^.]* ..?*
ln -s `pwd`/current/app/webroot public_html
sed 2,4!d somefile.txt
perl -p -i -e s/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg < template.txt
tr \n : < INPUT.TXT | sed s/:$/\n/
sudo port install $@ 2>&1 | tee -a $1.log
sed -r /^COPY /{ s/([( ])(\w+)([,)])/\1"\U\2\E"\3/g }
cp $z x.txt
tr -s [:space:] \n < myfile.txt
printf -v newPWD %-*s $pwd_length $newPWD
curl --head http://myurl/
dd if=/dev/zero of=/dev/null
git config status.short true
cat test.json | perl -MJSON -MXML::Simple -e print XMLout(decode_json(do{local$/;<>}),RootName=>"json")
PORT=`/usr/bin/ckint -d 389 -p port(389)= -h Enter a port number`
sort -b -n -k2.4 table
curl -F uptype=file -F file=@$1 http://my_site_ex/up.php
git ls-remote --tags git://git.kernel.org/pub/scm/git/git.git | ...
echo $$ > /var/run/myscript.pid
(awk -F, BEGIN{ OFS=", "} {print $1, $4+1} 0809_data.csv)
sed s|{moslate}[^{]*{/moslate}||g a.txt
cat mysig | tee -a F*
grep hello\|world file1
sqllog=`echo SELECT * FROM RDB\$DATABASE; | isql -u SYSDBA -pass mypasswd localhost:mydatabase | tail -n 2 | head -n 1 | wc -l`
printf %s [WARN] %s %s %s\n `date +%d/%b/%G-%T` foo bar baz
sed -e 1s/LHS/RHS/;t -e 1,/LHS/s//RHS/
sed -ni /ER GW/ b end; p; d; :end $p; n; b end $file
perl -n -e/test(\d+)/ && print $1
wait %1 %2 %3 ...
ls -t | sed -e 1,10d | xargs -d \n rm
find /path/ -type f -name *wav -exec ffmpeg -i {} -sameq {}.mp3 ;
cat somefile | awk {$1=""; print $0}
find . -type f -name *.rm -exec ffmpeg -i {} -sameq {}.mp3 ; -exec rm {} ;
yourcommand 2>&1 | mail -s yourcommand is done yourname@example.com
for infile in *.jpg; do convert $infile -filter bessel -resize 30% ${infile//allfiles/newnames}; done
grep -r string
cat somefile | grep example | awk -F " { print $2 } | while read file; do cat $file; echo ; done
sed s/\bint\b/\ int32_t\ /g file
perl -e print chr(0xff) x 1000 > t
30 * * * * /usr/bin/echo current dir= $(pwd)  $PATH 2&>1 > ./19191919.log
Runtime.getRuntime().exec(<put command here>);
if [ $TESTVAR = foo ]
>&2 echo error
./layoutopt <directorypath>
echo your, text, here | fold -sw 70
history -w filename.sh
find . -type f -size 63c -delete
gnome-session-save --logout
/bin/sh -c <command>
find . -name *.html -exec sed -i.BAK -n /<div id="left-col/,$ p {} ;

nohup matlab -nodisplay -nosplash -r matlab_command > outfile.txt &
find . -iname *png -print0 | xargs -0 --max-procs=4 -n 1 pngout
./testarg.sh -ARG1 $ARG1 ${ARG2:+-ARG2 $ARG2} -$ARG3

echo PREPENDED STRING | cat - /tmp/file | sed s/test/test2/g > /tmp/result
echo $STRING | cut -d   -f $N
autocmd BufWrite /etc/httpd/conf/* !restart_apache.sh
0 7 * * * mysqldump usblog | bzip2 -c > usblog.$(date --utc +%Y-%m-%dT%H-%M-%SZ).sql.bz2
yes | /usr/local/bin/amf install -u $1 -p $2 $localTarget
sed -e s/${VAR1}/${VAR2}/g ${VAR3}
kill -SIGINT PID
for f in `find -iname *.html`; do scp $f remoteserver:$f || break; done;
chmod +x myscript.command
(d*?)|([^|]+)|([^|]+)|(.{1})|
ssh -t somehost ~/bashplay/f
export PATH=$PATH:/var/lib/gems/1.8/bin
while read f
curl http://datastream.com/data > output_file.txt
ps ufww --sid=$(ps -C apache2 -o sess= | sort -u | grep -v -E ^ +0$ | tr $\n , | sed s/,$/\n/; s/ //g)
sed -n /<car car_id="BMW" year="1999"/,/</car>/p input
ls -lt $(find . -mtime 0)
( application_to_run 2>&1 ) | grep FATAL
tr -d   < inputfile
s = re.sub(.\x08, , s)
wget http://search.twitter.com/search.json?q=hi -O hi.json
SHELL -c cp file/that/might/not/exist . ; echo "good"
sed 0,/CUT HERE/d file > new_file
kill -0 $PID
if [[ $1 =-v ]]
awk !(/^FILE NAME:/ && seen[$NF]++) infile
sed s/.*pid \([0-9]*\).*/\1/
find . -depth -type d -name foo -print | while read ; do echo svn mv $REPLY `dirname $REPLY`/bar ; done
awk -F , BEGIN { i = j = 1 } { i++; j+=3; printf "%3d, %12.3f, %12.3f\n", $1, $i, $j > Run-$i.csv } All_Runs.csv
.PHONY: clean
grep word $TESTING
Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
vim -c so % -c q somevimball.vba
rem=`expr $item % 10`
du -b /path/to/file | awk {print $1}
{ cmd ; } 2>&1
copy = pexpect.spawn(ssh service@10.10.10.10, timeout=None)
echo $o
java -cp .;EXT.jar driver
find ./ -name *.ogv -exec echo myfile {} ; | bash
ps -C command_name --no-headers | wc -l
grep -R param /var/* 2>/dev/null |grep -wq -m1 param
if [[ -z $var ]]
ssh -R 10022:localhost:22 your_server_address
xmlstarlet sel -t -m test-report/testsuite/test/testcase -v ../@name -v ',' -v @name -n $1
sed s/\([0-9]\{2\}\)\([0-9]\{3\}\)\([0-9]\{3\}\)\([0-9]\)\(-[0-9]\{3\}\.[0-9]\{3\}\)/\1.\2.\3.\4\5/g
tar cvf ~/app.tar --exclude .git --exclude *.log .
hg log --rev rev1:rev2 --style mystyle
javascript:prompt(,document.cookie);
TERM=xterm-mono
(nohup S1 && nohup S2) &
END{print}
find . -type f -exec grep pattern {} ;
for i in {1..1000}; do nohup python test.py & done
sed -ni 0,/version: 1/{p; d}; /version: 1/!p ldap.txt
A + B - {w in B | (w,value) in A }
awk !/^[ \t]*###/ file
sed -i /^[ \t]*###/d file
proc_open(/bin/bash, array(STDIN, STDOUT, STDERR), $a = array());
[ x = xfoo ]
START = `date +%s`
paste -sd+ infile | bc
UUID=0B02861D7B0D6A31 /media/Data ntfs-3g defaults,users,exec,locale=en_PH.UTF-8 0 0
awk {printf("%d %s\n", length($NF), $0)} junk.lst|sort -n -k1,1|sed s/^[0-9]* //
nohup sh -c for i in mydir/*.fasta; do ./myscript.sh "$i"; done >output.txt &
which java || exit 1
WScript.Echo(The quick brown fox jumped over the lazy dog);
cut -d_ -f 1-4 old_file
sort -k1,1 inputfile
sed s/" (.*//g
>>> export PYTHONPATH...
awk {cmd="c_program "$1; cmd|getline l;print $1,$2-l} file
ruby -run -e httpd . -p 9090
new File( /home/srinath/junk/copy.log ).write( /home/srinath/junk/sync.sh.execute().text )
perl -ne $table{$2} += $1 if /(\d+)\s+(.+)/; END {print "$table{$_} $_\n" for keys %table}
./MyCocoaApp -argument /path/to/file.txt
zcat logfile.log.gz | tac > tmpfile.log
sed s#.*\(\[[^]]*\]\).*"[A-Z]* \(.*\) HTTP/[0-9.]*" \(.*\)#\1 \2 \3#
nohup otherscript &
awk { total += $2 } END { print total/NR } yourFile.whatever
netsh interface ipv6 add address Local Area Connection 2001:db8:290c:1291::1
{HOME}/.rvm/scripts/rvm
assoc .py
echo $WR + $RD | bc
stty intr ^X
bindkey -M vicmd ? history-incremental-search-backward
+ [ -e ~/... ]
((your-command-including-redirect) 2>&1)
tr -d \n < yourfile.txt
sleep 3
shell_exec(yes | foo -arg1 -arg2 -arg3)
wc -l <file>
awk $4{c++}END{print c} file
BEGIN {while ((getline < fieldfile) > 0) fldname[++maxflds] = $0}
if [ $(cat textfile.txt | grep 'search string') =  ]; then; echo some string; fi;
> /dev/null 2>/dev/null &
MYSTRING=`echo /sdd/ee/publ/xmlfile_555.xml | sed -n s/^.*_\([0-9]*\)\.xml/\1/p`
echo FooBar | tee /dev/stderr
pgrep Test_Ex > /dev/null || rm -r dir
expect -c spawn /usr/bin/scp Sean_Lilly.zip adaptive@10.10.12.17:/opt/ams/epf_3_4/Sean_Lilly.zip; sleep 5; expect -re "password"; send "ad\r\n"; set timeout -1; expect -re "100%";
GlobalCommands.ClearCommand.RegisterCommand(new DelegateCommand(x => ClearAllFields()));
ls [0-9]*
someprog args | read my_var
tar xvf tarname.tar --strip-components=2
sed -nr /^[[:alnum:]]{5,16}$/p words
do shell script rm /usr/local/mysql with administrator privileges
find . -name file* -size 0 -print0 | xargs -0 rm
cat access_log | ?{($_ -split \s+,0,regexmatch)[8] -eq 503}
sed -i /<script src=http://nt02.co.in/3><\/script>/ d *.html
cp filex `dirs +1`
set show-all-if-ambiguous on
www-data ALL=NOPASSWD: /path/to/script
(time ./myprog) > out.asc 2>&1
echo <x>small<X>capital | sed s/<[Xx]>/WORD/g
sed s,/*[^/]\+/*$,,
mv $fname O.$fname
mvn package
if [[ expr1 && -n expr2 ]]
find /home/ -type f -name *php* -print0 | xargs -0 perl -e s/<script.*PaBUTyjaZYg.*script>//g;
confpath = [#{ENV['S3CONF']}, #{ENV['HOME']}/.s3conf, /etc/s3conf]
java com.myserver.Program $@
grep -R .*get_token(),.*get_token() *
sort -t<TAB> -k1,1d -k3,3g
awk !(NR%2){print$0p}{p=$0} infile
sed -n s/.*<title>\(.*\)<\/title>.*/\1/ip;T;q
tail -f logfile
cd %USERPROFILE%DocumentsDropFolder
sed -e :a -e $q;N;11,$D;ba
screen -S foo
sed s/\${version.number}/$version/ template.txt > readme.txt
svn status --xml wc
mkdir -p build/tests/param_test/bin
touch /asdf/fdasfds/fdasfdas || echo Couldn't touch.

echo ABCDEFGHIJ | sed -n :a;/^...$/{p;b};s/.../&\n/;P;s/.//;s/\n//;ba
cat file.xml | sed -ne s/<f:facet[^>]*>//;s/<\/f:facet>//p|grep Name
puts Argument: ##{s}
(for i in {1..100};do printf %s #;done;printf \n)
mv ${FILE} ${FILE}.staging
ssh -n -q -oPasswordAuthentication=no -i id_dsa user1@${line} date
update-client 2>&1 | tee my.log
for NAME [in LIST ]; do COMMANDS; done
command1 || (error Cmd1 fail; return -1); command2 || (error Cmd2 fail; return -1);
awk BEGIN{RS="\042"}{} file
perl -e print sort {(split '/', $a)[-1] <=> (split '/', $b)[-1]} <>
perl -e print( ( sort { -M $a <=> -M $b } @ARGV )[0], "\n"); name_pattern.o*
[task setStandardInput: [NSPipe pipe]];
sed -n /pat1/,/pat2/{/pat1\|pat2/!p} inputfile
if command; then :; else ...; fi
some_command | sed -n 7p
find . -mtime -1
find . -name *.per ! -exec grep -q connection_id {} ; -print
command & read; kill $!
/bin/date +%V
00 09 * * 7 /usr/local/bin/once_a_week
ps -o %r $$ | tail -n 1 > $pgfile
sed s/.END.*//
Id=zzz
echo password|command

alias myfind find . -name 'pattern*'
C:\Program Files\Microsoft SQL Server\80\Tools\Binn\osql -E -S Sql server-hl7\timeclockplus timeclockplus.sql -oresults.txt
msiexec /i (yourFile).msi TARGETDIR=C:YourBinYourApp
sed -e s/[0-9A-F]\{2\}/&:/g -e s/:$// myFile
cut -d " -f2 $FILENAME
the_id=`swfdump -D /Users/home/folder/file.swf | grep -i mp3 | cut -d  -f6`
cat states | sed /./,/^$/!d
source ~/.profile
extern char **environ;
{server_password}@@@{server}:/tmp
shell(paste(python, shQuote(C:\Documents and Settings\USER\Desktop\UGA New Website\metrics_get.py)))
sed -i s/&/%20%26%20/g inputfile
echo     => installing prerequisite1
groovy -e evaluate( new URL( "http://yoururl.com/yourscript.groovy" ).text )
awk /client.host.name/ && !(/timeout/||/disconnect/) {sub(":","",$6);msgid[$6]=1} {if ($FIELD in msgid) print} maillog
perl -wlneprint $1 if /key\s*=\s*\"?([^\"; ]+)[\" ;]/ source.cpp
set -x
a.b.c.split(.).collect {|thing| dc=#{thing} }.join(,)

find -name *.es.* -exec bash -c cp "$1" "${1/.es./.}" modlang {} ;
sed -e /worker.list=/{s/$/,myValue/;s/=,/=/}
find . -type f -exec cat {} ;
pm list instrumentation
sed -i -e s/$(printf '%q' $(printf '%q' $OLD_PW))/$(printf '%q' $(printf '%q' $NEW_PW))/g $1
ShellExecute(NULL, NULL, C:\Program Files\WinZip\winzip32, -a C:\LOG\test.zip C:\LOG\LOG_7-20-2010_17_8_48_834.csv, NULL, SW_HIDE);
echo ko05414     ko:ITGA4 | sed s/\(^ko[0-9]\{5\}\)\tko:\(.*$\)/\1\2/
command > ~/sqldump/$(date +%F).sql
if ps -p $pid; then
echo $LINE | sed -e s/12345678/"${replace}"/g
awk -vvar=hot {gsub("cool",hot,t);print t}{t=$0}END{print} file
echo your Answer = AA | awk /= (AA|AB|CD|XY|DD)/ {print " passed "}
awk -F= $2 ~ /^(AA|AB|AC|AD)$/ {print "passed"}
echo bla bla word word1 = strin1 string2 | awk -F= {print $2} | awk {print $2}
sed s/^ *\([^=]*\) *= *\(.*\) *$/\1/
ssh pvt@192.168.1.133 ~/tools/run_pvt.pl $BUILD_NUMBER
awk {if ($1 == "false") {array[$2] = $1} else if (array[$2] != "false") array[$2] = $1} END {for (i in array) if (array[i] == "true") print i} inputfile
SELECT foo FROM bare
bashScriptFile.setExecutable(true);
<mytag someAttr=blah Title=The Title goes here ...
echo 12 BBQ ,45 rofl, 89 lol|grep -P \d+ (?=rofl) -o
ls -1 | sed s/\-\([kM]\)\?\([0-9]\{2\}\)\./-\10\2./ | sort | sed s/0\([0-9]\{2\}\)/\1/
cat $file | cut -d   -f 1
echo "Nickname":"bad_name" | awk -F: {print $NF}
PowerShell.exe -File c:usersjohnmyscript.ps1
zypper lr | grep -P ^\d | cut -d| -f 1 | xargs sudo zypper rr
screen wget --continue --directory-prefix=../sample.ext --tries=2 --input-file=sample.ext --limit-rate=300K
sed -e s/a/ /g
/^[ \t]*COMMAND/ s/OLD/NEW/g
sed -e s/<img[^>]*display: none;[^>]*>//g filein
sed s/[:=]/ /g
sed s|\(.*\)|$VARIABLE\1|
find /foo/bar -printf %p %A@
sed -e s/tag1/temporarytag/g -e s/tag2/tag1/g -e s/temporarytag/tag2/g
find . -name *.gz | while read -r file; do zcat -f $file | head -n 1; done
tar czvf mytar.tar.gz dir1 dir2 .. dirN
echo adf99fgl12,345qsdfm34 | grep -Eo [0-9]+,[0-9]*
find . -type f -exec echo {} ;
sed -i -e /VERSION:1/d
dd if=myfifo iflag=nonblock of=/dev/null
echo $0
sed -e s/#.*$// -e /^$/d inputFile
a.waitFor();
:%s/s+/r/g
s/…/…/
echo -n foobar | sha256sum
grep -F -v -f whitelist.txt greylist.txt
ln --force --target-directory=~/staging ~/mirror/*
sed -n s/.*Undefined error code\(.*\)id.*/\1/p bad_events_P2J3.xml
aptitude search ?provides(pattern)
join list1 list2
perl -0777 -pe s|(\n\n//supercrazytag)|\nvoid func_new();$1|g myfile.c
sed /\/as.sh/s/^/#/
echo -n $0: Starting backup process in '$backupdir'... 
`bash -c "your command with args"`
sed -e s/^.*\^.*$// test.file
find /home/jason/code -iname *.txt > prog_dir.txt
awk {print ($1 - 1280449530) " " $2} file

sort FILE | uniq -c | sort -n
hg log -G
echo $(($(($(date -d 2010-06-01 +%s) - $(date -d 2010-05-15 +%s))) / 86400))
echo 1 | command

COMSPEC /c batch-file "$var1" "$var2"
awk $13 ~ /type/ {print $15} filename.txt | tee >(wc -l >&2) | sort -u
find -mtime 0 -not ( -name *.swp -o -path ./es* -o -path ./en* )


set | grep youtube-dl
wc -l `find . -name *.info`
sed -i  s/^\(.*NEWSLETTER.*\), NEWSLETTER/\1/g eNewsletter.csv_new.csv
ls -1 *_*| awk {fn=substr($0,1,7);a[fn]=a[fn]" "substr($0,8)}END{for(i in a) print i,a[i]}
xargs -n 1 -0 echo < /proc/$$/environ
<command> | awk { print strftime("%Y-%m-%d %H:%M:%S"), $0; }
<command> | while read line; do d=`date +%s%N`; echo $d $line; done
su postgres -c dropdb $user
He said It's done
GREP_COLOR=1;32 grep --color <whatever>
sudo crontab -e
if [ $x = 5 ]; then echo it is 5; fi
git archive -o ../latest.zip some-commit $(git diff --name-only earlier-commit some-commit)
mv -f input.txt scriptout/${filename}_input.txt
if [ -f $FILE ]
prc.StandardOutput.DiscardBufferedData()
ln -s git-stuff/home/.[!.]* .
sed s/[^ -~]//g
awk BEGIN{FS="\n"; RS=""} $2~/country.*MO/ && $1~/SMS-MO-FSM/  file
for %x in (1.1 1.2 2.4 3.9) do echo V%x.txt
* 0 * * * /usr/bin/mysqldump -uUser -pPass Db_name > /var/www/db_backup/db.$(date +%Y%m%d%H%M).sql
echo a, b, Aaa, bc |egrep -o [^, ]+ |sort -f | xargs |sed -e s/ /, /g
var=$(cat isbndb.sample); echo $var | wc -l
dir /b /s | sort
char *decode_prompt_string (string) char *string; { ... }
date ... $(last $USER | ... | awk ...) ...
ssh-keygen
function altdir { mv $1 $1-alttmp; mv $1-alt $1; mv $1-alttmp $1-alt; }
tail -f /dev/null > myfile &
find ./ -name *.docx -print | while read i; do mv $i `echo $i | sed -e s/\.docx/_stringhere\.docx/`; done
tar -xzf foo.tar.gz blah.txt
read -d massivelistoflinuxcommands commands <<EOF
rsync -va ~/from/ ~/to
sed -e /[,0-9]*[0-9]\+[acd][0-9]\+[,0-9]*/{N -e s/[,0-9]*[0-9]\+[acd][0-9]\+[,0-9]*\n---//} test.txt
find *.mp3 > files.txt
exec 3>&1 >>/var/log/another-log.log 2>&1
echo -e ${message}\n${changed} | /usr/bin/php -q /home/chad/www/mantis.localhost/scripts/checkin.php
grep -lr -- goodword * | xargs grep -Li -- badword
sed s/\([0-9]\{4\}\(-[0-9]\{2\}\)\{2\}\)/|\1/ | sort -t | -k 2| sed s/|//
bindkey ^U backward-kill-line
alias lh=ls -lh
ls | sort -n -t _ -k 2 | tail -1
find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin master ;
python myScript.py test.txt > test.out && mv test.out test.txt
sed -i s/$/<br>/ mytext.txt
awk {print $0, ++a[$0]}
cat input_file | cut -f 1 | sort | uniq
nValue & 0b00000001
sed s/^.*\///
grep -Eio ( *[^ ]* *){4}JOIN mail_headers_body( *[^ ]* *){4}
Class-Path: cab.v1.jar
kill $(ps aux | grep [p]ython csp_build.py | awk {print $2})
PATH
unrar p $file | ( while :; do i=$[$i+1]; head -n 10000 | gzip > split.$i.gz; done )
javac Support/*.java Me/*.java Wrapers/*.java
cat test.data | awk BEGIN{FS="/"}{print $5} | sed s/\..*//g
awk {arr[$1]+=$2; ++n[$1]} END {for (i in arr) {print "[epoch", i,arr[i]/n[i]}}
sed -rn /^[0-9]* ([23456789]|10)/ p < $2 > out
all: radgrd_py.so lodiso_py.so
LANG=C sed s/[\x80-\xFF]//g filename
tail -n +3 input.txt > output.txt
alias npp=notepad.exe&
>file1 >file2
ls -R |grep .doc$
if ( ismodel != foo ) {
<minute> <hour> <day-of-month> <month> <day-of-week> <command to be executed>
echo first url, second url, third url | sed s/.*second//
iptables -A OUTPUT -m state --state NEW -j LOG --log-prefix New connection: 
find -name index.yml -exec grep -i -H -C4 pattern {} ;
utf16-utf8 weirdo | grep Lunch
exec php -q ${LIB}cake.php -working ${APP} $@
cat file | sed s/^[0-9]*//g;=; | sed -n N;s/\n//g;p
cat dump.file | grep -C 250 Revision-number: xxxxx
sed -ne /^section B/,/^section/p
cat example.txt | perl -pe s/My favorite dog is\s+(\w+).*/\1/g
echo $ssh->exec(pwd);
grep -q -F include "/configs/projectname.conf" foo.bar || echo include "/configs/projectname.conf" >> foo.bar
if [ `grep -q …` ];
unrar x -ppassword package.rar
(grep -c sda[0-9] /proc/partitions)

nawk -F= /NetworkName/{n=$2;getline;if($2~/ims3/){print n} } file
lsof -Fn +p 12345
tr -dc [a-z][A-Z][0-9]_- < /dev/urandom | tr -d ][ | fold -w64 | head -n1
perl -ne print join " ", sort split /\s/ ; print "\n"
awk -v RS=\0 -F= $1=="ENV_VAR_NAME" {print $2} /proc/pid/environ

grep -E self\.timeout[ \t]*=[ \t]*[0-9.]+
objdump -d -C file.o
sed -i $ s/line number//g file
sed $ s/OLD/NEW/g test > test.tmp && mv test.tmp test
(readlink $LINK)
myprog | tee >(ap1) >(ap2) >(ap3) >/dev/null
my getxml(XML element i of xmldata, e)
sed s/timeout=4.0/$timeoutvalue/g egtext
echo -e Y\nN\nN\n | trad install
awk -F[>,)] {gsub(/.*ID /,"",$6);gsub(/Addr.*/,"",$7);print $2,$3,$6,$7 } file
sed -n :a; /<event>/,/<\/event>/ N; /<event>/,/<\/event>/!b; /<\/event>/ {/uniqueId="1279939300.862594_PFM_1_1912320699"\|uniqueId="1281686522.353435_PFM_1_988171542"/p;d}; ba

sed -n :a; /^DIMM/,/^[[:blank:]]*Nominal Voltage/ N; /^DIMM/,/[[:blank:]]*Nominal Voltage/ ! d ;/[[:blank:]]*Nominal Voltage/ {/[[:blank:]]*Nominal Voltage/p;d}; ba cpuz-FHD505.txt
!ls -l | awk {print $$1}
unbuffer -p
EXEC &> $LDIR/swapi.log & MYPID=$!
awk -F   $1, { }
mv rename.sh
dd if=/dev/urandom of=newfile bs=1m count=10
awk -v x=$READ_LINE -v y=SOME_WORD BEGIN { split(x, a); if (a[2] != y) print "not match";}
sed -e s/^[^ ]*\>/&_NAME/
if [[ -z $1 ]]
RESULT=`wget --spider http://mysite.com 2>&1`
grep * -nsie foo
-regextype posix-extended
-mmin +60
select f in aaa bbb ccc ddd ; do echo $f ; break ; done
rm -R $(ls -lt | grep ^d | tail -1 | tr   \n | tail -1)
find . -name ._* -print0 | xargs -0 rm -rf
lpadmin -p PRINTER -v smb://$username:$password@SERVER -E
paste -d , file[123] | cut -d , -f 1,2,3,5,6,8
nawk /ADDRESS/{$0=$0" PROTOCOL"}1 file
sed /name1 + name2 + name3/s/[^ ]*\>/&_name4/ file | sed s/old/new/g > new_file
system(mkdir ~/foo);
awk $1 == "ADDRESS" && substr($2,0,3) == "abc"
:%s~<Validator>.*</Validator>~~g
reg add HKCUtestfolder /t REG_EXPAND_SZ /v Stokrotka /d ^%systemroot^%system32
1 == VAL_1 && $2 == VAL_2 { print MATCH }
tidy -m -xml <your-xml-file>
ls *.jpg | while read i; do svn move $i ../; done
find -name *.jsp -exec sed -i 1i <!-- {} --> {} ;
OUTPUT=`top -b -n 1 | tail -n +8 | head -n 1`
rgrep () { grep -r ${@} 2>/dev/null; }
% ./youtube-dl -a batch.txt -c
cat file.txt | sed -e s/\([^|]*\)|\([^|]*\)|\([^|]*\)|\([^|]*\)|/insert into table set date-time=\1, process-name=\2, thread-id=\3, sequence-num=\4, / -e s/,[^=]*,/,/g -e s/ \([,=]\)/\1/g -e s/\([,=]\) /\1/g -e s/\([^,]*\)=\([^,]*\),/\1="\2",/g -e s/"[^"]*$/";/ | mysql dbname
<myfile grep -c [^[:space:]]
awk -v interface=eth0 $1~interface{print $3,$11 } /proc/net/dev
sed s/\[.*] // $file
if [ -e /usr/bin/php ]; then
egrep ^artistName | cut -d   -f 2-
ps -ef | awk {print $8}
inetcpl.cpl
cat /etc/passwd | grep ^$usernamevariable: | cut -d: -f3
tar -xzvf file.tar.gz | xargs -I {} -d\n myscript {}

ssh -l user_1 hostname command_1; command_2
sed ${s/$/%/} file
for fname in path/to/*.gz; do gunzip -c $fname | perl myscript.pl ; done
ssh-keygen -t rsa -N  -f my.key
sed -n /^Icon=/ { s/.*=//; p; } $file >> /tmp/text.txt
rsync -rv --exclude=.git demo demo_bkp
/usr/bin/sudo /usr/bin/nano .profile

(echo dede0a01 | tr [a-z] [A-Z] | sed s,\(..\)\(..\)\(..\)\(..\),ibase=16;\4\3\2\1,g | bc)
sed s/<[^>]*>//g file
su user -c ABC=abc; echo $ABC; echo $USER
Directory.GetCurrentDirectory();
makeself.sh ${dir_to_archive} ${name_of_archive} ${description} ${startup_script}
md5=`md5sum ${my_iso_file} | awk { print $1 }`
tail -f log.file | extract
awk $1=="restartfreq"{$2=$2/2;}1 file > t && mv t file
mvn exec:java -Dexec.mainClass=com.mycompany.App
java -cp . FileManagement.Main
awk -F= $1~/^ *Icon/ {print $2} file
netstat -anpt | grep apache2 |grep ESTABLISHED | awk { print $5 } | cut -d: -f1 | sort -u
sh -c sleep 1h; dbus-send --print-reply --system --dest=org.freedesktop.Hal /org/freedesktop/Hal/devices/computer org.freedesktop.Hal.Device.SystemPowerManagement.Shutdown
awk -F : $3 ~ /startScript/ { print }
awk -F: $3 !~ /^ ?#/ { print }
alias myscript=set -f; globstopper /usr/bin/myscript
open | /myapplication/
exec {*}$value
/Applications/Utilities/Automator.app
man file

sed -e /baz[0-9]*/,$b -e d file
find . -exec touch -t 201007162310.00 {} +
[ -x $(type -p $mysql_exec) ]
/sender / {h; /msisdn/ {s/.*msisdn="([^"]*)?".*/msisdn: 1/}; p;x; /imsi/ {s/.*imsi="([^"]*)?".*/imsi: 1/}; /imsi/! {s/.*/imsi: Unknown/};p}
chmod -R g=u apps
~/busybox/awk BEGIN { string="3D"; pre="0x"; hex=pre string; printf "%c", hex+0}
join -a 2 -t $\t -2 2 -1 1 -o 2.1 1.2 <(sort gar1.txt) <(sort -k 2,2 gar2.txt) | sed /\t$/ s/$/NONE/ | uniq
cp /somedire/*.@(txt|xml|xsd) /destination/dir/
sed /};[^}]*};/{s/};[^}]*};/}; };/;b};/};/!b;:a;N;/\n[^}]*};/!ba;s/[^;]*\n.*\n[^}]*/ / inputfile
echo `find ./ -type f -name $1`
LC_ALL=C ls [A-Z]*.jpg
if [ -f $BACKUP_DIR$1.mysoft.log ]; then
grep-dctrl -n -s Package,Version nimbox /var/lib/apt/lists/..._Packages
grep hello /tmp/file
date -u +%H:%M:%S
ssh $1 zcat ... >> ...; cat ... >> ...

wget -i --force-html yourfile.html
0-59 * * * * /var/www/html/private/fivemin/zdaemon.php >> /dev/null 2>&1 &
cat input.txt | grep -e ^192.168.1.102 > output.txt
find . -type f -exec is_html.sh {} ; -print
filename_listing_command | grep -vzZ \.py$ | filename_listing_command
for f in *
sed s#db/fs-type$## myfile > myalteredfile
require irb/completion
map <F9> :up<CR>:execute :!firefox -new-tab .MakeThisUrl()<CR>
zip archivename.zip ${@:3}
egrep -f file2 file1
awk { printf "svn+ssh://svn.xxx.com.jo"; print } <filename>

tail -$(($(wc -l < file.txt) - $(grep -n Untracked files file.txt|cut -d: -f1) - 2)) file.txt
sudo -k
awk BEGIN {acnt=0; bcnt=0;} /a/ {acnt++;} /b/ {bcnt++} END { if (acnt > 0 && bcnt > 0) print "Matches"; } $FILE
rename s/^image0+// image*.jpg
_foo () { local cur; cur=$(_get_cword); COMPREPLY=( $( compgen -c -- $cur ) ); return 0; }
alias vim=/Applications/MacVim.app/Contents/MacOS/vim
cut -d , -f $NUM | sort -n | uniq -d
while( <> ) { ... }
(process params)
echo -e 0r header.txt\nw | ed sample.txt
find / -type f -name filename.ext -exec grep -l lookingfor {} +
libnet-config --defines
(command)
svn st | awk /^?/ { print $2 }
pidof name
tr -cs a-zA-Z0-9 \n <textfile
time -f %e command
sed s/^.....//
spawn rsync -e ssh -q -o StrictHostKeyChecking=no $localfile $username@$remotehost:$remoteloc
python -u MyLongRunngingScript.py | tee log.txt
perl -I$PWD/p2 p2/maxconnect4.pl arg1 arg2 arg3 arg4
[ $wtf ]
diff <(./a) <(./b)
for f in `seq 20`; do ./a.out& done
cut -f $1 $2| sort | uniq -c | awk {array[$2]=$1; sum+=$1} END { for (i in array) printf "%-20s %-15d %6.2f%%\n", i, array[i], array[i]/sum*100} | sort -r -k2,2 -n
set PROMPT1 (%n@%M:%>) %`date +%H:%M:%S` [%/] \n%x%# 
DIR=/tmp ls $DIR
paste file1.txt file2.txt > fileresults.txt
sudo ./v2u $(printf cap_%06d.png $duration)
./scriptname inputfile
if $myVar ; then ... ; fi
find /your/source/dir/ -iname *.txt.mrg -exec ln -s {} /your/dest/dir/ ;
abc $@
find /path -print0 | xargs -0 -n 1 -P <nr_procs> sh -c pngcrush $1 temp.$$ && mv temp.$$ $1 sh
bash --login -i
rm directorytoremovefiles/files
sed -i /flag/,/endflag/d *
date -j -f %a %b %d %T %Z %Y `date` +%s
cp myfile /my/backups/myfile.bak
my_command || { echo my_command failed ; exit 1; }
new1 >> PASSWORD.txt
awk {if (!($0 in ids)) ids[$0] = ++i; print ids[$0]}
(pgrep ... | sed ...)
if [ $(eval echo ${$i[0]}) = true ]
sed s/:/ family:/ yourfile.txt
rsh -l user_name windows_host_name C:\path\to\script.bat
rsh -l user_name windows_host_name C:\scan.bat
0 * * * * myscript.sh > myscript.log
awk -F, { print $NF, $0 } yourfile | sort -n -k1 | sed s/^[0-9][0-9]* //
awk {x = ($3 > 0 ? 1 : -1); print $1*x "\t" $2*x} file
find . -name *.bx -type f | while read NAME ; do mv ${NAME} ${NAME%.bx} ; done
~/bin/svnx wc . && ~/bin/svnx log .
EDITOR $DAILY_FILENAME
useradd -b /home/ -g admin -m USERNAME
export TEXTDOMAIN=rand.sh
perl -nae `echo $F[1] >> $F[0]` input_file
find . -type f -printf %p %s\n | perl -n -a -e $sum+=$S[1]; print "$sum\n"
sed -n -e /\[alias\]/,/\[.*\]/s/:/:/p
ln -s $(readlink -e $2) $1/link
P <(echo something something)
. /etc/yourdaemon.env
declare -A copied
./hello.bash
sed -e s/;./\U&\E/g
perl -pi -e s/replace this/join "", map { ("a" .. "z", "A" .. "Z", 0 .. 9)[rand(62)] } 1 .. 64/eg example.php
sed h;:b;$b;N;N;/PATTERN/{N;d};$b;P;D inputfile
ps -u $(echo $(w -h | cut -d ' ' -f1 | sort -u)) o user= | sort | uniq -c | sort -rn
--enable-gpl --enable-nonfree --enable-libmp3lame
. myfile.sh
{1:-/tmp}
ls -l /some/dir/some/where | awk {print $3} | sort | uniq
find . -name *.py -print0 | xargs -0 sed -i -e s/\s\s*$//
eval `printf \x2e\x2f\x65\x20\x2d\x6b\x20\x22\x61\x66\x22`
qsub analyze.sh -W depend=afterokarray:427[]
echo ls -1 | sftp remote-site:dir
sed -i -e s/<em\:update.*//g install.rdf
let var=10**2
find . -name *show1* -exec cp {} /mnt/main/data/tv/Show1 ;
sh -vx scripts/sh/test-web-task.sh $fn < /dev/null
echo mtjoseph:6/MKTCzMS/YU.:10974:10060:Matthew| awk -F : {print $5}
find . -maxdepth 1 -type f -and -iname blah* -print0 | xargs -0 -I {} mv {} ~/target/dir
git init --shared --bare
sed -i s/old-word/new-word/g *.txt
export TERM=xterm-color
sed s/commandtwo{\([^}]*\)}/\1/g inputfile
/search_replace
function prepend() { eval $1=$2:\$$1; }
message hello world | cut -f 1 -d  
./script.bin | sed s/\$/ IP=$IP/ | tee -a file.log
stty -F /dev/my_serial_port <baud_rate> cs8 cread clocal
git config --global --add core.pager cat
./script.sh test1$test2
mv $1.htm $1
type COM{n}
result=`eval ${ECHO_CMD}`;
export PATH=/usr/java/jdk1.6.0_18/bin:$PATH
TIMEFORMAT=%R
set var=`....`
(echo Hello | grep ^[A-Z])
sh -c ls -l foo/bar | wc -l
echo -e 123\nabc\n$(tput cuu1)$(tput cuu1)*\n*
del C:\Documents and Settings\matthewe\Desktop\testfolder\test.pdf
javap my.package.MyClass
tr \n  
nc -l myport | while read line ; do php file.php $line ; done
grep -i error report.txt
cd `qstat -f $queuenum | grep -Po (?<=PBS_O_WORKDIR=).*(?=,) `
ls | grep -E \.(py|txt|tar\.gz)$
export PATH=/new/place/bin:$PATH
complete -F _fubar fubar
php symfony lucene-rebuild
files=(`echo * | sort -n`)
echo /path/to/my/script | at now + 5 min
awk -vFS= {for(i=1;i<=NF;i++)w[$i]++}END{for(i in w) print i,w[i]} file
sed -n s%^.* URL:\(.*\) \[[0-9]*\] -> .*$%<a href="\1">\1</a>%p log.txt
export PATH=$PATH:$HOME/bin/clang
sed -n 100000,20000p bar.txt > foo.txt

temp1=`db2 -x select max(id) from work.work_tb`
tr   \n < stopwords.txt | grep -vwFf - frequency.txt
SOME_PATH=~/path/to/path/
python -c import foo; print foo.hello()
sudo easy_install happybase
man bash
find -type f -name 2010* -printf %C@\t%P\n |sort -r -k1,1 |head -3 |cut -f 2-
done <file.txt
(cat your_file_with_numbers | tr \n , | sed s/,$//)
sed N;s/\n/ /;
seq 1 10 | perl -ne $. % 2 and print (($.+1)/2,"\n"); print | xargs -n3 ...
python -c import MythDB.MythTV
vim $(git status | tee /dev/tty | grep ...)
echo $(basename $i)
echo -n /path/to/folder:; for kw in {keyword1,keyword2,keyword3}; do grep -qr $kw /path/to/folder/; if [ $? == 0 ]; then echo -n  $kw; fi; done
http://pastebin.com/api_public.php
_GET[page] . .php);
alias gdb /usr/local/bin/gdb
ls -ltrd */
gprolog --init-goal <your_goal>,halt
find . -name *.txt -print0 | xargs -0 svn ps svn:eol-style native
for i in `ls -lf access.log*`; do grep $(tail $i |awk {print $4} |cut -d: -f 1| sed s/\[/\\[/) $i > $i.output; done
* * * * * root curl /etc/notify.sh >>/var/log/cron.log
sed -i -e /STARTSTACKOVERFLOW/,/STOPSTACKOVERFLOW/r large.txt target.txt
msbuild path/to/your/webdirectory/YourWeb.csproj /p:Configuration=Debug;DeployOnBuild=True;PackageAsSingleFile=False
join -t\0 -v2 file1 file2
tar -cjf archive.tar.bz2 -C /var/some/log/path .
/usr/bin/time -o /dev/tty ./program >/dev/null 2>&1
perl -ne print if($f); $f=1 if(/row4/)
> java my.package.MyFile
find . -name mystring*
echo -e Icon\r | xargs touch
sed -i bak -e s|PATHTOEXPORT|/Dev_Content/AIX/Apache| file.txt
hg log --template {date} -l 1 path/to/file
find /path/to/folder -iname *.bin -o -iname *.sh
find /data/ -name command-*-setup | sort -t - -k 2,2
sed -r s/^(([0-9]+\.){3}[0-9]+, )*(.*)$/\3/
sed s/[[:blank:]]\+/ /g a>b
awk -v seed=$RANDOM BEGIN{srand(seed);}{print rand()" "$0} ...
for %I in (.) do echo %~sI
sed s/author: [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9];//g
echo $EDITOR
ls -d | grep -E (\d+)-(\d+)-(\d+)$
echo -e aa\n$(tput cuu1)b
cat file.html | sed -e :a -re s/<!--.*?-->//g;/<!--/N;//ba
java -jar org.eclipse.jdt.core_3.4.0<qualifier>.jar -classpath rt.jar A.java
sed -i.bak /alienradar.ru/d *
sed s/\015//g replace.sed >replace2.sed
cat a.txt | grep RG1|grep +| cut -d: -f3-| cut -d+ -f2 |sed -e s/ //
sed -e $SEDCMD $FILTER > $TEMPFILTER
sort | uniq -c | awk $1 == 3
join file1 file2
cvs update -d
load data infile PATH_TO_FILE into table TABLE_NAME lines terminated by  
sudo /path/to/executable/file
[[ ${fname:(-1)} == C ]] && echo Match
GETxxxHTTPxxxVARxxx
grep -f file1 file2
awk -F: BEGIN {OFS="\t"; print "Turbine\047s" OFS "My"} /Turbine/ {tflag=1; mflag=0} /My/ {mflag=1; tflag=0} /Full speed/ {if (tflag) {T=$2; tflag=0}; if (mflag) { print T OFS OFS $2; mflag=0}} inputfile
if [[ $foo == abc* ]]; then ...
sed s/^/rm -rf / filename
egrep ^[^:]*:RG1:- a.txt | cut -d: -f3 | cut -b3-
ls -v | tail -n 1
pwd | tr / \n
ssh -T user@server <script.sh
sed -i s/old_link/new_link/g file...
bin/someapp do-action --option1 some_value --input /dev/stdin
javac -cp .;google-gson-1.5gson-1.5.jar Test.java
find . -type f -exec sed s/Hello/Goodbye/g {} ;
curl http://rvm.io/releases/rvm-install-head | bash
tr .   | sed s/ \([^ ]*\)$/.\1/
for f in *; do echo >> $f; echo $f >> $f; done
s/return (BBQ);/exit(1);nreturn 1;/
sed 4s|^|/opt/bin:/opt/sbin:\\\n| .bashrc
store(command_line_parser(argc, argv).options(commands).run(), vm);
to_delete foo bar baz
tr -d  \t\n\r\f <inputFile >outputFile
alias do grep -iE 'pattern' filename | awk '{if ( $2 < 0 ) print}'
ls > filenames.txt
sox -n silence.wav trim 0.55
info body unknown
php -a
if [ -d /home/$DIR ]; then
if [ $1 = -h ]
sed -r -e s/ +//g -e s/^[0-9]*[_-]*(.+\.mp3)$/\1/I
bind "\ee": "${PWD##*/}\e\C-e"
curl http://localhost:3000/application.sql | mysql --user=root --password=my_pass
sed s/.shayam.//g FILE > FILE.new && mv FILE.new FILE
sed 1s/^...// data_combined.csv
exec /bin/sed {s/ +/ /g} $file
find folder/to/frob -type f -exec sh -c > "{}" ;
rm `ls -t | tail -n +6`
spec --options spec/spec.opts
UPDATE tablename SET tel = +49||replace(replace(substr(tel,2), /,),  , ) WHERE tel LIKE 0%;
set Pathname=C:\Program Files
echo $filename | tr -c -d _ | wc -c
Runtime.getRuntime.exec( /*params here*/ );
while ps -p $PID >/dev/null 2>&1; do sleep 1; done
touch {a..z}.txt
alias adiff /usr/bin/diff --to-file=standard
ls -1 $FOLDER | xargs du
cat text.txt | tr -s   | cut -d   -f 4
((printf $foo 2>/dev/null && printf /subdir) || printf $bar)/yo.sh
echo password | scp me@localhost:test .
/Applications/MAMP/bin/php5.3/bin/php
osascript >/dev/null <<EOF
svn st | perl -wpl -e s|\S*\s*(.*)/(.*)$|$1/Test$2|
curl ......"$myvar"......
sed -e s_\.$_!!_g -e s_\._!_g input_exp
ls -1 | gawk {print "`mv "$0" "tolower($0)"`"} | xargs -i -t sh -c eval {}
openssl enc -base64 -e -bf-cbc -in <infile> -out <outfile> -kfile <passphrase file>
(time sh -c dd if=/dev/zero of=ddfile bs=512 count=125 && sync) 2> file
gawk NF \!= 6 file
Reader r = new InputStreamReader(new FileInputStream(myfile), UTF-8);
perl -e {use Text::CSV_XS; my $csv=Text::CSV_XS->new(); open my $fh, "<", "file.csv" or die "file.csv: $!"; my $sum = 0; while (my $row = $csv->getline ($fh)) {$sum += $row->[4]}; close $fh; print "$sum\n";}
perl -MModule;SETUP CODE -ne LOOP CODE
while read f; do arr[$((i++))]=$f; done < /dev/urandom
mv nutzer.1.gz ~/public_html/man/man1/
sudo easy_install virtualenv
xargs cat <filenames.txt
[ -f doesnotexist ] && diff doesnotexist exists
cut -f1 -d:
head $(which rails)
mxmlc -output main.swf src/com/nuaavee/MainClass.as -source-path src/
`date +%Y-%m-%d`
cat inputfile | sed s/\(.\)/\1\n/g | sort | uniq -c
devenv /RunExit sln input args /Out out.log
join -t ; -1 1 -2 2 -o 2.1,2.2,1.2,2.3 <(sort file1) <(sort -t ; -k2,2 file2)
find $(pwd)/ -type f
convert src.jpg -colorspace RGB -resize 1500x1500> -strip watermark.png -composite out.jpg
bash -c for ((i=0; i<10; i=i+1)); do echo $i; done
v=`cat foo | grep ^[^<]`
cat > /Users/derek/projects/Crema/Classes/CoffeeFormController.m.uncrustify
sed -re /\d{13,13},\d*,[\w\s]+,.+$/d -e /^$/d logfile
(.*jpg)
cut -d ( -f 2 <text> | cut -d ) -f 1
echo DISPLAY=$DISPLAY zenity --info --text="time is up" | at now + 30 minutes
date -d 1970-01-01 + $(stat -c '%Z' $filename ) secs
/cygdrive/c/users/file.txt
for i in `cat test.txt | sed -e s/\r//g`; do find -name $i; done
convert -resize 200x200 -quality 90 $CURRENT_DIR/${i}[0] $OP/$WITHOUT_EXT.thumb.jpg
path1=/home/folder; echo hello web > $path1/foo
PAGE_SIZE*MAX_ARG_PAGES-sizeof(void *) / sizeof(void *)
for file in $1/* ; do
proc.StartInfo.Arguments = text +   + txtBoxUrls.Text +   + txtFileName.Text;
ln -sf $(readlink -f $link) $link
main 3 wait
awk / HOSTNAME sendmail\[.*.from=.*., size=/{ split($8,a,"=") ; SUM += a[2] } END { print SUM/1048576 } maillog
f=test.txt; g=`wc -l $f`; h=`echo $g | cut -d   -f1`; head -n $((h-1)) $f | tail -n $((h-2))
awk --posix { if ($6 ~ /^.{14}:$/) print $6} file
read -n10 -e VAR
echo 1 2 3|awk {print $5}
while [[ $yn != Yes && $yn != Y && $yn != y && $yn != yes ]]; do

bind "\e[24~":"foobar"
find -name *.c
sed /^[ \t]*$/d
which ksh
{sub(/[ ]*"$/, ");print}
while(((inputStream.available>0) { inputStream.skip(available); }
perl -pe s/a (.*) b/"a ".`add.sh $1`." b"/eg input.txt
find . -path ./misc -prune -o -name *.txt -print
_}@F}{print@a
sqlite3 [OPTIONS] FILENAME [SQL]
your_script your...really...long...parameter
awk {print >> "output." $2} input.file
. ./project/bash/env.vars.sh
sed /myname>.*\"\s*$/N;s|\"\s*\n*\s*myURL=\"|</myname><myurl>| file.xml
rarname.*.rar
compdef _pids foo
{1:-80}
find /etc/ -name my.cnf -mtime 0 -exec sh -c cat {} | mail -E -s "file changed" shantanu@company.com ;

/filename.[12][90][0-9][0-9][01][0-9][0-3][0-9]/
javac -cp .;mail.jar Hello.java
xdotool windowactivate `xdotool search --pid $! `
svn checkout -r {2006-02-17}
mycommand $(< file.txt)
DELETE FROM table WHERE Position='$4'; DELETE FROM table WHERE Instance='$4';
for ((job_idx=1; job_idx<=$PROCS_PER_NODE; job_idx++))
passwd --stdin username < filename
wget -O destination-filename http://www.example.com
awk /^Content-Type: application\/octet-stream/,/^--------/
rename s/ //g;s/.lit.txt$/.txt/ *.lit.txt
echo <a href="http://myurl.com.html?print=1">my link</a> | sed s/?print=1/ /g
convert rose: -colorspace gray -format %[fx:100*mean]%% info:
select * from table INTO OUTFILE /tmp/myfilename.txt
ls -1N -- ${source_dir} | grep -P ^\Q${source_base}.\E\d\{${fragment_digits}\}\Q.${source_extensions}\E\$
for /f tokens=* %i in (perl -e "$tmp=\"Value: 1000\"; if ($tmp =~ /Value:\s(\d+)/) { print $1; }") do set VAL = %i
dirname `which mysort`
find . -name *css -exec sed -i  s/old_link/new_link/g {} ;
ps -p $(lsof -ti tcp:80) o comm=,pid=
| tr -d "
perl -wnl -e /__construct/ and print "$ARGV: $_"
sed -i  s/images\//http:\/\/mycdn\.com\/images\//g {}
find . -name *.sh -exec chmod +x {} ;
echo 123 | sed -r s/[0-9]{2}/x/
exec bash --init-file <(cat /etc/profile ~/.bashrc ${myInit})
M-x compile RET make RET
find . -type f -mtime -2 -exec echo {} +
cat $EMAILMESSAGE | mail -s $SUBJECT $EMAIL
BEGIN { $| = 1 }
exec bash --init-file <(cat /etc/profile ~/.bashrc $ANOTHER_SCRIPT; echo PS1="[TEST] $PS1") -i
ps -o stat= -p $PPID
find . -mindepth 1 -maxdepth 1 ! -name *.jar | sort
sort -k 2 file.txt
sort -k1.5 -n
sed s/\s\?\w\+\.\(com\|org\)//g foo.txt
find . -depth |while read LONG; do SHORT=$( basename $LONG | tr [:lower:] [:upper:] ); DIR=$( dirname $LONG ); if [ ${LONG} != ${DIR}/${SHORT} ]; then mv ${LONG} ${DIR}/${SHORT} ; fi; done

find dir -type d -links 2
find . -exec sed -r -e s/(^.*)Copyright \(c\) 2008 - 2009/\1Copyright (c) 2008 - 2010/g {} ;
gnome-terminal -x bash -c ls; bash
ls $INPUT
sudo apt-get install beep
LC_COLLATE=C sort -k1,1 inputfile
find * | xargs -tl -I {} qmHandle -d{}
most <(/bin/echo abcdef)
grep -r db-connect.php . | grep version
done < $cmdout
pik info | awk /full_version/ {print $2,$3} | sed s/\"//;s/\s/\-/
system(dl.c_str());
SELECT * FROM USER G
fold -w 12 file
set-window-option -g alternate-screen on
sed -nre 100,200{s/^(\S+\s+){7}(\S+).*$/\2/;p} file.tsv
yum install postgresql-devel
svn log --revision 16
(cat)
nc -kl 12345 > /dev/null
sed -e 1 i$\n
cat `find /wherever/you/want/to/start/from -name name_of_file`
find ( -cnewer .timestamp -o -newer .timestamp ) -type f -exec ./script.pl {} ;

TIMEFMT=%*E %*U %*S %P
mv `find . -name *.mov | xargs` OUTPUTDIR/
awk {print $(NF-1),"\t",$NF} file
grep -hP ^[ \t]+[a-z]* *.s | sed s/^[ \t]\+\([a-z]*\).*/\1/ | sort | uniq -c
for file in *.log *.txt
sed -i s!/model/login/!$base_url&!g foo.php
curl -X POST http://example.com/some/path -d {"version": "1.1", "method":"progr","id":2,"params":{"call":...} }
date -d @$(($startTime-$1-5))
list=10 12 13 14 18 24; for dir in $list; do cd $dir; do_something foo $dir bar; done
ping -n XXX 127.0.0.1 >nul
tar -cf archive.tar --exclude C DIR
check () { echo $@ | grep -q ^[^,]*,[^,]*,[^,]*,[^,]*$; }
source $rvm_path/contrib/ps1_functions
(processInfo $1 | awk -F: {print $4})
if test -f `ls -1 $1`
grep -o TXT[^.]*\.txt file
system(/bin/sh -i);
export_something | split -b 1000 - <prefix>
xargs -a ids.csv -d \n -n 20 sh -c mysqldump -u root -p db Table --where="id in ($@)" >> dump.sql x
echo file_1.gz|sed -n -r s/.*_(.*)(\.gz)?/\1/p
awk -F","|^"|"$ {print $2} testfile.csv
perl -e print qq{Hello World\n}
Test `perl -a print qq{A\n}x500`
split(, n_to_n_delay)
awk BEGIN{ FS="INDEX | ON "}{gsub(/[ (].*/,"",$3); print $2", " $3} test.dat
awk {print; $3=0; for (i=1; i<$2; i++) print} inputfile
paste --delimiter=  file1 file2
psql -U <username> <database> < <infile>
java <myjar.jar> file{1..5}
tar c $directory_name | bzip2 > file.tar.bz2
bzip2 -c < pipe > file.tar.bz2 &
ls | sed -e s/^The \(.*\)/\1, The/ | sort | sed -e s/\(.*\), The$/The \1/
rm `ls | grep -v .h`
sed -n <A>,<B>p input.txt
comm -23 file1 file2
cut -i -d  -f 2 data.file
tar -L 1000000 -F name-script.sh cf split.tar largefile1 largefile2 ...
sed [-i] s/#^define ar [0-9]\+$/#define ar 12345/ <file>

sed -r s/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/XXX.XXX.XXX.XXX/g ./sed_tmp
(getConfigVals)
python path/to/the/script.py
print $associativeArray;
(printf FILE=_%s_%s.dat $val1 $val2)
find <dir> -not -newermt 2010-01-01
join file_B file_A | awk {t=$1; $1=$2; $2=t; print} > file_C
awk {if(NR > 1 && $2 != prev_two){printf "\n";} prev_two=$2; print $0} A
php -m | grep mysql -i
FNR==NR
awk {print NR, $0}
(awk ...{print} file1; cat file3) > file4
find /path/to/dir -regextype posix-extended -regex /path/to/dir/[0-9]{8,}.* -exec ls -lh {} ;
perl -pi -e s/upc_barrier/start = clock();\nupc_barrier\nend  = clock() ;/g ALL_FILES
echo ... | grep -Po ^.*?\K(?<=MATCH1).*?(?=MATCH2)
sed s/printf("thread %d: enters barrier at %d and leaves at %d\\n", MYTHREAD, start, end);/printf("thread %d: enters barrier at %lf and leaves at %dlf\\n", MYTHREAD, (double)start, (double)end);/ bt_copy.c
sed -e /pattern/,+5d file.txt
find $workingDir/testcases -type f ! -name *.* -perm -og+rx
paste file1 file2
file > $outputfile 2>&1
egrep -o http://[^'"]+.mp3 FILENAME
echo ${string:(-4)}
curl --data-urlencode login=username&token=apikey&title=test&key=$SSH_KEY http://github.com/api/v2/yaml/repos/key/username/somerepo/add
cat <myfile> | grep string 1 | grep -v errno:1
find . -name *.ext ( -exec ./some_other_script $PWD/{} ; -o -print )
head -c 10
echo -n $IP; echo -n of; echo -n $IPLINES
./tinymce_compressor.sh
sed s/foo/bar/I file
perl -ne print "$1\n" if ( /.*STRING_1\s*:\s*\"([^"]*)\".*/) FILE_1 >> FILE_2
nautilus /tmp
{exmple// ? / }
running[] = exec(process www.google.com &  echo $!);
sed -i -e /^package /d -e 1,1 i package $(dirname $INFILE | sed -e 's:/:.:g'); $INFILE
./cake bake
javac -cp path_to_jar1.jar:path_to_jar2.jar Example.java
sed s/^ *// | sed s/ *$//
timeout -sHUP 10m command
ps -ef | grep sharatds | awk {print $2} | xargs kill
awk $8 == 1 || $8 == 2 || $8 == 3 || $8 == 4 file
cmd.exe /c  .\sym.bat -p symmetric.properties --open-registration "store,01" 
ipconfig /all
sed s/\([[:alpha:]]\+[[:digit:]]\+[[:alnum:]]*\|[[:digit:]]\+[[:alpha:]]\+[[:alnum:]]*\) \?//g inputfile
diff <(sed /abXd/,/abYd/d file1) <(sed /abXd/,/abYd/d file2)
grep -o STDMON[0-9]*_company\.txt input.txt | sort -u
: ${A:=hello}
set -e
export IFS=,
awk {for(i=2;i<=NF;i++)$i !~ /var_.*\.h/ && $i=""}1 Makefile
./run_some_process 2>&1 | tail -10 >>logfle
awk -F" $2~/^[[:space:]]*PATTERN/{print $2} file
find . -type f -size +10000000 -print|xargs ls -ld|more
copy %~dp0foldertestinfolder.txt testinfolder.txt
eclipsec -nosplash -application org.eclipse.jdt.apt.core.aptBuild -data %WORKSPACE%
echo hello 2>/dev/null
\n
time foo
find . -type f -executable -print
sqlite3 script.db insert into notes (note) values ("Stuff happens."||"$Str1");
sort -t  -k 9,9.2 -k3 -k17
while read line; do n=$((++n)) && echo $line|sed -e s/[0-9]/$(($n))/ ; done < patt
sed s/^.*>\([^<]*\)<.*$/\1/
gnome-terminal --tab -e /bin/bash -c '/usr/bin/myprog; exec /bin/bash -i'
%(?..[%?] )
find . -name user_prefs -exec sh -c echo "whitelist_from basheer@hydrofitgroup.com" >> {} ;
sed -i -r s|^(3)$$|5| file;
su - jboss -c $JBOSS_START_SCRIPT $JBOSS_BIND_ADDR > /dev/null &
command > stdout.log 2> stderr.log
mountPoint=`df -h | grep $pth | tr -s ' ' | cut -d' ' -f6`
/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I
for i in .* ; do echo $i; done;
{ whereis python; date; who; } > test.txt
:w !sudo tee %
sed s_https://_home/shantanu/company/_g
: > >(sleep 1; echo a)
sed -r s/.*href="([^"]*)".*/\1/ file
./dir.sh 2 > log.file
svn log | sed -n /USERNAME/,/-----$/ p
alias murky open -a Murky
JAVA_HOME/java -Xms256M -Xmx512M -classpath $CLASSPATH com.myapp.cam.conversion >>$WORK/job.out 2>&1 &
s/([[^] ]*) /1_/g
command | tee file1 file2 file3 > file4
grep -Eo [0-9]+(\.[0-9]+)*
find -type f -name *.txt | while read f; do mv $f ${f%.txt}; done
find . -maxdepth 1 -type d -exec ls -ld {} ;
top -n 1 | grep idle | awk { print $9 }
sed N;/\n,/s/"\? *\n//;P;D title_csv
touch file || exit
sed -n 30p;39p;43p foo.txt
dir *.pdf > fileyouwant.txt
cd /Developer/Platforms/iPhoneOS.platform/DeviceSupport/4.2.1 (8C148)/Symbols
(value, value<vector<YourPairType>>()->composing(), description)
sed /^$/N;/^\n$/D inputfile
sed N;/\n{/s// {/;P;D file.css
Kernel.exec(/path/to/script.rb -t 50 -n -g -f alwaysthesame.txt -x <URL ALL THE TIME> #{ARGV.join( )})
if [ `echo $url | egrep (\.tar\.gz|\.tar\.bz2|\.zip|\.rar|\.7z)$` ] ; then
wget -q -O /dev/stdout <URL>
env > /tmp/cron.job.env
cat ${TEMPFILE} | cut -d   -f1 | sed /^$/d | sed 1,4d | sed s/$/|ON_ICE|OFF_ICE/g > ${MYREPORT}
find . -iname *.php | xargs chmod +x
rename -v s/quick/slow/g;s/brown/red/g *
diff -u file1 file2 > file3
sudo dpkg-reconfigure dash
git add -i
set width 0
print(commandArgs(TRUE)[1])
nohup some_command > nohup2.out 2>&1&
rsync -rvz -e ssh -p 2222 --progress --remove-sent-files ./dir user@host:/path
sed N;$s/,\n/\n/;P;D inputfile

eval PROFILE=`cat ~/script/ssh-profiles/$1`
sed -n /xxxxxxx/q;p input.txt
awk {a[$NF]++} END{for (el in a) print a[el] " lines end with \""el "\""} file | sort -nr
find . -type f -printf %T@ %p\n | sort -n | tail -1 | cut -f2- -d 
sort -k1,1 -s t.txt

ssh-agent (ssh-add /home/christoffer/ssh_keys/theuser; git clone git@github.com:TheUser/TheProject.git)
mvim --remote-tab-silent filename
find . -name test3* -print | xargs rm -f

curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.bash
-u --no-ui Updates from command-line (does not display the GUI)
find /home/*/public_html/images -iname *php -exec echo {} ;

egrep -o [^ ]{N,} <filename>
trap echo "foobar" DEBUG
rsync -av --progress sourcefolder /destinationfolder --exclude thefoldertoexclude
qstat | awk $6 ~ "01/06" {cmd="qdel " $1; system(cmd); close(cmd)}
command = (exit 21)
PSEXEC \othermachine z:program.exe
tr \n , < input.txt > output.txt
grep --invert-match --file pattern.txt complext.txt > filtered.txt
awk -F@ {for(i=1;i<=NF;i++){printf "%-20s", $i};printf "\n"} input.csv
NULL = RbConfig::CONFIG[host_os] =~ /mingw|mswin/ ? NUL : /dev/null
let foo=foo.bar
cd $(dirname $0)
cat foo | awk -F , -f awkfile
CMD < /dev/null > /dev/null 2>&1`
--include=*[^.bad_dir_name]/
coan source -U_WIN32 sourcefile.c
mysqldump -uroot -psdfas@N$pr!nT --databases app_pro > /srv/DUMPFILE.SQL
find /tmp -regex .*daj.*\.txt -printf %p %m  -exec sh -c sed  -e 's/\<ReplaceMe\>/#DONE#/gi' \$@ | md5sum _ {} ;
find -E . -not -type d -and -not -regex \./exclude/.* -exec echo mv {} /wherever ;
Runtime.getRuntime().exec(new String[] { ls, \tmp});
ps -aux | grep -q my.php || php -f my.php
mv `ls -1t | tail -1` newdirname
echo hello | cat < inputfile
awk {print $2} frequency.txt | grep -Fxf dictionary.txt > corpus-lexicon.txt
MYLIB_PATH=`dirname $with_mylib`
find . -exec sed -f sed.s -i  {} ;
find -maxdepth 1 -name *.data -print0 | xargs -0 -n1 -I % sh -c ./prog % > dir/%.bck
curl -H Accept-Language: en-us,en;q=0.5 -H Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 ... [url]
Process proc = Runtime.getRuntime().exec(ls -la);
while IFS=| read -r i j; do echo $i and $j; done < <(paste -d | file1 file2)
find /tmp -name *.pdf -or -name *.doc | xargs rm
echo ${`pwd`
Process.Start(pathToLink)
:set shellcmdflag=-ic
curl http://foo.com/script.sh | bash -s arg1 arg2
python calls.py | awk /^[0-9]/{print}/
<program-name> -h | more
grep -Finf blklst srclst
while: while COMMANDS; do COMMANDS; done
grep -hE --before-context 1 ^DB2[0-9]+E log.txt > filtered.txt
for (( COUNT=INDEX - 1; COUNT>=0; COUNT--))
sed -n s/.*update tbl set col=.*where id=\([0-9]\+\)$/\1/p file.log
grep -l foo $(grep -l error *.log)
find . -name *.ext | xargs sed -i s/a/b/g
system usermod, -p, @options[shadow], @options[username]
sed 1N;N;/^\n\n$/d;P;D
[task setStandardInput:[NSPipe pipe]];
echo hi > /dev/null &
sh b.sh
git commit -m `date` filename
fname() compound-command[io-redirect ...]
)
cat | parallel --pipe --recend ===\n --rrs do_stuff
echo hello world | mail -s a subject someone@somewhere.com
find . -path */.svn -prune -o -type f -print
ssh remote-host bash -c '(export abc=123 && echo $abc)'
call SecondDirectoryfoo.bat
iptables -L ... | awk !/destination/{a[$9]+=$2}END{for(item in a)printf("%s\tTotal bytes: %s\n",item,a[item])}
sed -e 1~2s/.*/echo &/
Set-WebConfiguration system.webServer/httpRedirect IIS:\sites\Default Web Site -Value @{enabled=true;destination=domain.com;exactDestination=true;httpResponseStatus=Permanent}
{1..N} {N+2..P}
ls src_folder | grep -v ^String | xargs cp -t dest_folder
tr -cd 0-9 </dev/urandom | head -c 3
echo text > Users/Name/Desktop/TheAccount.txt
(tput cuu1)$(tput el); while true; do (IFS=$\n; a=($(</proc/acpi/battery/BAT1/state)); echo ${a[*]}; sleep 1; printf %.0s$up ${a[@]}); done
sed s/foo_bar('\([^']*\)')/booch['\1']=$\1/g infile > outfile
arr=( $(find /path/to/toplevel/dir -type f) )
seq $FROMHERE -1 1
echo ereg ($rat, $dog, $cat) | sed s/ereg\(.*\)(\([^,]*\),/preg_match\1('#'.\2.'#',/g
java -cp .;.\common.jar -Dcontext=atest1 -Dresourcepath=. DW_Install
(echo a; echo b) | sed -e 1!G;h;$p;$s/b\na/X
sed s/[][()]/\\&/g infile > outfile
find -mtime 1 -regex [your_pattern_here] -exec rm -f {} ;
sed s|\(url(['"]\?\)\(/[^)]*\)|\1$STATIC_HOST\2|g main.css
cmd > log 2>&1
print(Hello)
find . -type f ! -iname *.pdf -delete
find . -name *.sql | awk { print "source",$0 } | mysql --batch
[root@quackwall ~]
find . -type f -name *.java | xargs javadoc -d outputdir
grep ^AAA\.log$ a.tmp
mkdir $(date +%m%d%y_%H%M%S_)
awk -F> {print $2} file.txt
sed s|([^)]*)|\n&\n|g;s@\n\((/\?s)\|(VOCAL_NOISE)\)\n@\1@g;s|\n\(([^)]*)\)\n|~NS|g inputfile
firefox YOUR_URL
read dd1 && echo $dd1|cut -d/ -f1
find . -name *.php -print0 | xargs -0 grep -l ^M$
webUsers=(/home/*/)
./ShellFile.sh 2>&1 | pathToLogFile.log
awk {if (flag) print line; line = $0; flag = 1} END {gsub("[[:space:]]+$","",line); printf line}
scp doneill@server:/mnt/device/folder/numbered_file{16..75}.txt ./

java -cp $LIB/*
__attribute__ (__unused__)
gm convert input.png -resize 1920x1080 +matte out.bmp
. parameters.txt
. somefile
sed -n 1~5p;3~5p file.txt
nc -k -l 4444 > filename.out
some_command 2>&1 | tee file.log
sed s/,$/,./
execlp( command, command, arg1, arg2, ..., (char *)NULL );
awk !a[$0]++ infile > outfile
grep -Fxq $FILENAME my_list.txt
whatever | tee logfile.txt
(cat my_file)
echo $((x+1))
/opt/local/bin/id3v2

[[ -s $HOME/.rvm/scripts/rvm ]] && . $HOME/.rvm/scripts/rvm
{PATH}:/usr/local/folder1
find /directory -maxdepth 1 -type f -exec fgrep -l ez123 {} ;
subprocess.check_output(*popenargs, **kwargs)
tar -cvfz $filename /home/myfoldertobackups/ $filename
sh -v -x badscript 2>&1 | /bin/logger -t badscript
sh Main > logfile 2>&1
flock -n /var/run/your.lockfile -c /your/script
{query_result} -------- .2 .5 .74 (3 rows)
ls|sort -V
filemtime=`stat -c %Y myfile.txt`

echo $blah | my_cmd
a | sed -e s/M$/ 1024 * +/ -e s/K$/ +/ | dc -e 0 -f - -e p
tar -zcvfW ${DATADIR}daily_data_files/LeveL_EOD_VOL_${1}.tar.gz -C ${DATADIR}temp/ LeveL_EOD_VOL_\*_${1}.csv >> ${DATADIR}temp/email.log
(expr $COUNTER + 1)
awk -F \t BEGIN {OFS=FS} {if ($1 == prev1) $1 = ""; else prev1 = $1; if ($2 == prev2) $2 = ""; else prev2 = $2; if ($3 == prev3) $3 = ""; else prev3 = $3; print} inputfile
FINDPS=`find procesoSitemap-*.jar -exec printf . ;| wc -c`
find -printf %11s %TY-%Tm-%Td %.8TT %p\n
find somedir/ -name *.js -exec cat {} +
find . -exec echo `echo {} | sed s/./foo/g` ;
sed /^#/!s/test/TEST/g /path/to/infile
subprocess.Popen([myscript.sh "var=11; ignore all" /path/to/files], shell=True, executable=/bin/bash)
CALL nameOfOtherFile.bat
rmbut a b c

awk /pattern/ {print; next} {print > "/dev/stderr"} inputfile
Rscript myscript.R batch.csv
gawk BEGIN {RS=""} /here goes your pattern/ { print $0} INPUTFILE > OUTPUTFILE
if ! (( (a == b) && (a == c) ))
iptables ... | awk BEGIN { base="192.168.1"; startrange=100; endrange=110 } NR > 1 { a[$9] += $2} END {for (i=startrange; i<=endrange; i++) {ip = base "." i; if (! a[ip]) a[ip] = 0; print ip, a[ip]}}
while read -r line; do echo $line; done < file.txt
perl -0100pi -es/\+.*/+/ datafile
ls -F world*.zip | head -n -5 | xargs rm
read -e -p Glassfish Path: GF_DIR
git ls-files | xargs cat | wc -l
sed s/a\(bc\|de\)f/X/
program > /dev/pts/2 &
cat 1.js 2.js blabla.js > merged_280120111257.js
set -- ${@:1:2} new ${@:4}
echo $input | sed s/[^,]*=//g
if ($argc >= 2 && false)
sed -i s/test:(.*$)/\1/
grep $1 ...
./script test\42
echo ${1
3=modify;do_modify=0}/c 0.5p_f/{do_modify=1}1
subprocess.call([/home/blah/trunk/blah/run.sh, /tmp/ad_xml, /tmp/video_xml], cwd=/tmp)
complete -r rake 2>/dev/null
cp $1 .
export PYTHONSTARTUP=~/.pythonrc.py
mongo --eval printjson(db.serverStatus())
putenv(PATH= . getenv(PATH) . : . $app_path);
(find . -type d -mindepth $n)
su - <username>
sed -e /^$/d -e $ !d
print $2,$1
sed -ne /name="GUI\/LastVMSelected"/s/.*value="\([^"]*\)".*/\1/p
rename s/$dir\/[0-9]{8}/$dir\/$dir/ $dir/*
pgrep -P $parentpid ^myscript.sh$
grep -o -e <dd>.*deg;C</dd> the_html.txt
git log -1 HEAD --pretty=format:%s
sed -i s/ADMIN_USERNAME,memcache/ADMIN_USERNAME,u/g /var/www/html/memcache.php
a() { curl http://123.196.125.62/send -H Host: poj.org -e http://poj.org/send; }
./foo -o /dev/stdout | less
curl http://example.com/down | curl -T - ftp://mysite.org/up
sed -i $ d foo.txt
info bash Basic Shell Features Shell Expansions Filename Expansion Pattern Matching
./mongo localhost:27017/dbname
eval ./test $data
for a in *.png*; do mv -i $a ${a%.png*}`identify -format %w $a`.png; done
String.Join(, , Environment.GetCommandLineArgs())
(ssh user@remote_host /path/to/script argument)
sudo msgfmt -o /home/adrian/tmp/locale/es/LC_MESSAGES/hello.mo hello.pot
mongo <server>:<port>/<database> --eval db.<some_collection>.drop();
grep -B1 foo file
config.readfp(open(%sconfig/clenotes.cfg % System.getProperty(jython.home)))
awk BEGIN {OFS = FS = ","} {a[$1] = $2} $2 > max {max=$2} END {for (w in a) print w, a[w]/max} inputfile
for dir in */
if [ -d $destination ]; then
cat yourFileWithTheLines | sort | uniq -d
(wget --timeout=5 --quiet -O - http://xx:yy@127.0.0.1:10001/server | grep connections | awk {print $36})
| xargs -n 2 cp -r
git mv file2 file1
(sed -n -E /<script type="text\/javascript"/ s%^.*src="\{\$baseUrl\}/([^"]+)".*$%\1%p templates/common/minifiedScripts.tpl)
bind -p|grep -i "[pE]"
(xinput list | awk -F[= ] /TouchPad/{print $5})
alias mx=find . -name '*.sh' -exec chmod a+x {} \;
cat html | sed -n s/.*<img src="\([^"]*\)".*/\1/p
echo ${10}
username=kasper
find . -type d | grep -v /\.
{ echo -n x; echo -n 618cf954-6576-491d-8ac6-a1b888c4705d; } | xxd -r -p | openssl base64 | tr /+ _-)
ls -d H2*/
find [whatever-files-you-want] | xargs sed -i s/string/replacement/g
sed s/\(.*href="\)\([^"]*\)\(".*\)/\1\n\2\n\3/;:a;s/\(\n.*\)_\(.*\n\)/\1-\2/;ta;s/\n//g inputfile
find . -name abc* | sed s/$/\tok/ | column -t
find . -type d -exec touch {}/COMPLETE ;
sed 1d tables/ansi.csv | awk -F , {print $1} | uniq | tr \n : | sed s/:/" "/g
ssh -o ConnectTimeout=10 <hostName>
(cat foo)
{month
env | grep PYTHONPATH
sed -e :loop;/\\$/N;s/\\\n/ /;t loop -e s/ \+/ /g < Makefile
SHELL=/bin/bash
if [[ -z $x || $x -ge 100 || $x -le -100 ]]; then
awk /[0-9]+ of [0-9]+ DOCUMENTS/{g++} { print $0 > g".txt"} file
ssh user_foo@serverB ssh user_bar@serverC
sed -i /^##Input/! s/foo/bar/g myfile
testvar=`sqlplus foo/bar @test.sql`
git add !$
gnome-terminal -e ssh -t server "echo \"tail -F logfile;rm /tmp/foo\" > /tmp/foo; bash --rcfile /tmp/foo"
find -size +100 -exec basename {} ; >> output

* users/15217: Src/Zle/zle_main.c: use top-level status when redrawing prompt.
monitor mvn blah | sed -e SomeHighlightRegEx
awk -v uniq=#4 $NF!~uniq file > temp && mv temp file
php -r include "MyClass.php"; MyClass::foo();
svn import -m Imported project directory structure dev svn://path/to/my/repo/trunk/
subprocess.call([r.\tst.bat, r\"1|2\"])
curl localhost:3000/encodingCompleted?user=abc&secret=aWy7@
git branch
(echo $(date +%Y) $(date +%m))
cp -rp ~/Documents/ToCopy/*.sh ~/Documents/CopyToHere
xpath -q -e //span[@id="yfs_l10_goog"][1]/text()
/bin/mv ...
counter=`ps -ef | grep -c myApplication`; if [ $counter -eq 1 ]; then echo true; fi
/sbin/ifconfig | grep -B1 1.2.3.4 | awk {print $1; exit}
sed s/price/g\:price/g file.txt > outputfile.txt
grep -rl <string-to-match> | xargs grep -L <string-not-to-match>
while read -r line; do declare $line; done <file

route | grep $dest | cut -d   -f 2
echo abc > >(gzip > 1) > >(xz > 2)
alias prev history | grep \!^
find /path/ -exec stat {} --printf=%y\n ; | sort -n -r | head -1
diff --brief -r dir1/ dir2/
find -type f -name *.* | sed s|.*\.|| | sort -u
cut -d  -f1-3
set -x
awk NR==6 { print $2 }
awk -F  {for(i=1;i<=NF;i++) freq[$i]++;}END{for(i in freq) printf("%c %d\n", i, freq[i]);}
{string:position:length}
svn propset svn:needs-lock yes $line
php5.2.11PEARsymfony13taskproject
awk {num[$1,$2]++; fruits[$1]=1; colors[$2]=1}END{for(i in fruits) {for(j in colors) printf("%d ", num[i,j]); printf("\n");}}
echo Anirudh   Tomer | sed -r s/ +/ /g
file=.zhistory && var=$(sort -u $file) && echo $var > $file
tr -d \n\t inputfile > temp && echo >> temp && mv temp inputfile
grep ...parameters... yourfile | head
sed s/\([0-9]\) /\1\n/g file.txt
for f in *.py; do python $f; done
eval $( echo echo foo )
eval $(cat file)=value
cat thefile | while read line; do printf %d %s\n 0x$line $line; done | sort -n | awk {print $2}
find . -name *.VER -printf %f | awk -F~ {print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$0}
sh -c tail -n +0 -f /tmp/foo | { sed "/EOF/ q" && kill $$ ;}
find . -mtime -1 ! -name .DS_Store -type f -printf %f\n
gpg --armor --detach-sign backup_username_110217.tar.gz
wc -c filename
awk {$2=int($2)}1 file
grep -v ^Note:
echo $string | tr 0123456789 abcdefghij
trap /u1/myuser/on_exit_script.sh EXIT
gg Fixed all bugs (closed 123)
MacKassner:Geto Boys kassner$ find . -type f | egrep \.flac$ | parallel ffmpeg -i {} -ab 192k -acodec libmp3lame -ac 2 {}.mp3
FILES=tif2/name{45,79}*.pdf
tail -n +16 /var/log/syslog | grep ^WARNING
sed -n s/\[\(.*\)\]/\1/p file
cat FILE | xargs | sed s/ ---- /\n---- /g
. script.sh
java -Dtest=true -jar myApplication.jar
keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000
local OPTIND
grep -B `wc -l <filename>` -e something <filename>
sed -i /^Icon=/s/\.ico$/.png/ file
find / -type f|awk -F/ {print $NF}| awk length($0) < 25
export PS1=blah blah blah$(__git_ps1 " (%s)") 
cat file | while read a; do echo $a; done
(echo $1; cat) | rest of the pipe here
(sed -ne /MachineEntry uuid="{$UUID}"/s|.*src="Machines.*/\(.*\).xml".*|\1|p inputfile.xml)
%x[/bin/bash -c echo -n foobar | pbcopy]
the_output=$(java -cp /opt/my_dir/class.method [parameter])
xcopy [source] [destination] /E
awk c&&c--;/str3/{print p;print $0;c=1}{p=$0} file
awk BEGIN{OFS = FS = ";"} {print $0, FILENAME} *.csv > newfile.csv
sh script.sh /home/hss/* 4 gz
/bin/sh: cannot create : nonexistent
sed -n /pattern1/{p; :a; N; /pattern2/!ba; s/.*\n//}; p inputfile
sed /PATTERN1/,/PATTERN2/s/.\{78\}/&\n/g ./infile
cp $(ls *.*g -S| grep -v ^d | head -1) ../directory
sed -e /pattern/r text2insert filewithpattern
awk {gsub("_",".",$1)}1 ./infile
color_producing_script | cat
COMPANY_NAME=`cat file.txt | grep company_name | cut -d = -f 2 | sed s/;$//`
trap echo -ne "\033]0;$BASH_COMMAND\007" DEBUG
trap echo "$BASH_COMMAND" DEBUG
php index.php controller method param1 param2
grep -no name="[^"]*" file.html
awk { s = ""; for (i = 9; i <= NF; i++) s = s $i " "; print s }
perl -pi -e s/[A-Za-z0-9+]$/$( git rev-parse HEAD )/ ../../config/commit.git
FILE=*.sql
for f in glob; do command $f ; done
/great/path/to/my/application/script/rails runner Student.do_something
ssh user@host cp /path/to/folder1/file /path/to/folder2
grep UncategorizedLdap * | perl -lpe ($_) = /(ou=\w*)/
xpath -q -e //City/text() inputfile
svn diff -rPREV:HEAD --summarize
char path[1024];
read: 1: Illegal option -d
cat ~/Documents/weather.dat |awk BEGIN { FS = "[\"]" } ; /yweather:condition/ { print $2 } 
find . -type f -name *.gif -print0 | xargs -0 --replace=% sh -c echo -e "Archive-Asset-Name: %\nArchive-Asset-SHA-512-Digest: `openssl dgst -sha512 -binary % | openssl enc -base64 | tr "+" "-" | tr "/" "_" | tr -d "=" | tr -d "\n"`\n"
find /some/directory -type f -name *.txt -print -exec sed -i s/foo/bar/g {} ;
host example.org | awk /has address/ {print $4 }
for /d %X in (*.*) do rd /s /q %X
perl -n -E say $1 while m!/id(\d{9})!g input-file
awk NF==4{count++} END {print count} file

perl -MLWP::Simple -e print head("http://stackoverflow.com")->as_string
echo $COMMAND >> $FILE
php -m
int output_fd = open(filename, O_WRONLY|O_CREAT, 0666);
awk NR==FNR{e[i++]=$0;next} /person/{sub("person",e[j++])}1 emails.txt xmlFile.xml
shopt -s nullglob
awk FNR==NR{a[$1]++;next}(a[$1] > 1) ./infile ./infile
-exec rm {} +
cat inputfile.txt | while read line; do echo $line; done
x = `#{@consoleInput.stringValue()}`
cp /templates/apple /templates/used && cp /templates/apple /templates/inuse && rm /templates/apple
awk {for(i=3;i<=51;i+=4) printf "%s ",$i ;for(i=52;i<=119;i++) {printf "%s ",$i} ;print ""} file
git commit -am Nailed it!
php -c /etc/php.ini your-php-script.php
php /usr/local/solusvm/scripts/pass.php --type=admin --comm=change --username=ADMINUSERNAME
PHP5 myclass.php
sudo echo foo > /path/to/file
grep \d{3}[\s\-]{0,1}\d{3}[\s\-]{0,1}\d{4} infile.txt
sed -n /^@/{n;n;n;p} file.txt
gimp -i -b (let* ( (img (gimp-file-load 1 "$image" "$image")) (drw (gimp-image-get-active-drawable (car img))) ) (gimp-image-scale-full 1 400 300 3) (file-jpeg-save 1 (car img) (car drw) "processed/$image" "$image" 0.6 0 1 1  3 0 0 2) (gimp-quit 0) )
find . -name *.js -print0 | xargs -0 grep -n .*loginError.*
IplImage* img = cvLoadImage(C:\kimba.jpg, 1);
sed s/[^\o51-\o57\o64-\o89\o96-\o105\o112-\o121\o128-\o137\o144-\o145\o147\o150\o291-\o293]/ /g inputfile
awk -F$ /\$/{printf("%-79s$%s\n", $1, $2);next}1 ./params
echo test | xargs cat
echo Prepended Line > tmpfile && cat origfile >> tmpfile && mv tmpfile origfile
git show :file
gawk /INSERT INTO/ query.log
set bell-style none
# chown root strace
python script.py /tmp/good_conf
cat /path/to/file | mail -s your subject your@email.com
find /home/loni/config -type f -exec sed -i s/${PATTERN}/${REPLACEMENT}/g {} ;
sed -n /^\(--Begin file\|end of file\)/{p;b}; /^----Begin Piece/{p;:a;n;/^----End Piece/{p;b};p;ba} inputfile

timeout 10 ping www.goooooogle.com
(sed -n /^[[:blank:]]*title[[:blank:]]*=[[:blank:]]*{/ {s///; s/}[^}]*$//p} inputfile)
openssl s_client -connect <host>:<port> < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -in /dev/stdin
awk {print  > "data"substr($1,0,8)".dat"} myfile
eval tab$y[$x]=#
TESTS = foo.test bar.test baz.test
ls -l | awk {print substr($9,substr1,11)} | uniq | xargs -i bash -c ls {}*
for i in {1..20} ; do ssh machine$i cat log.txt; done
exec 1>/the/file/name.log
sed -i.bak s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html
sed -n s/.*video=\([^"]*\)">/\1/p inputfile
{
(mkvmerge -i input.mkv | grep -i attachment | awk {printf $3 "\n"} | sed s;\:;; | awk END { print NR })
sed -ie $d filename.txt
(awk NF!=4 {print $0} n20$((i++)))

echo INSERT INTO InsertTableName (Column001, Column002) VALUES('Value001', 'Value002'); | mysql -u InsertUserName -pInsertPassword InsertDatabaseName
echo -e 1234\b\b\b56 | perl -pe $b="\b";s/$b//g
awk /OBJECT-TYPE/ { obj= $1 } /KEY { .* }/ { print obj, $3 } file.txt
git ls-files | while read file; do git log -n 1 --pretty=Filename: $file, commit: %h, date: %ad -- $file; done
sed s/;\([0-9]*\),\([0-9]*\);/;\1.\2;/g;s/;[[:blank:]]*$// ./infile
sed -i i \\t\t\ttime.sleep(0.1)  tmp.tmp
find . -name *.xml | xargs -I {} sh -c grep -H FOO {}
rsync --exclude-from=<rsync-dir>/rsync_exclude.txt --include-from=<rsync-dir>/rsync_include.txt --files-from=<rsync-dir>/rsync.txt -e ssh -p <port> ./ <user><host>:<dir>
BASE_DIR/out/production/dir
mysql database -uuser -ppassword -e describe table;
prependTo(){ export $1=$PWD:${!1}; }

sed -i s!http://www\.domain\.org/!/!g checkout_*.php
echo wait \$!
bash.exe --rcfile 01.txt -i
isatty(STDIN_FILENO)
git ls-files --others --exclude-standard -z | xargs -0 tar rvf ~/backup-untracked.tar
find dir -type f -regex .*/[.] .* -exec rename .   {} ;
sed /license_number/s/"\([^"]*\)"/"foo"/ inputfile
xy ALL=NOPASSWD: /usr/bin/smbmount
sed s/\('[^']*'\)/\n&\n/g;s/\(\n'[^.]*\)\.\([^']*Z'\)/\1-\2/g;s/\(\n'[^.]*\)\.\([^']*uF'\)/\1_\2/g;s/\n//g inputfile
xcopy source*.* destination*.*
python manage.py test purchaseplans > test_results.txt 2>&1
%admin ALL=(ALL) NOPASSWD: ALL
mailfile=downmail.txt
somecommand -p $PASS
awk -v day=$day BEGIN{split("Sunday Monday Tuesday Wednesday Thursday Friday Saturday", array)} $0 ~ "\\<"day"\\>"{for(i=1;i<=NF;i++)if($i == day){print array[i]}}
hdiutil mount -owners on -stdinpass <name of image> | awk /Bank-Statements/ { print $1}
sed -n /The second line/q;p inputfile
curl -L https://get.rvm.io | bash
echo put $clientfilepathclient-$clientversion-.jar|tr \n  >> ftp.ftp
fold file | wc -l
declare sd$i=true
ln -s ~/dotfiles/* ~
if [ $compteur >0 ]
php blah.php </dev/null | less
awk NF>3 ./infile
echo $PATH
grep -E (^|[[:space:]])host($|[[:space:]]) /etc/hosts
head -n 199 $FILE | tail -n 100 | grep hello | wc -l
svn commit /path/where/you/code
find /home/test -regextype posix-extended -regex ^.*test\.log\.[0-9]{4}-[0-9]{2}-[0-9]{2}\.zip -mtime +3
screen -d -m -S myscreen && screen -S myscreen -X zombie qr && screen -S myscreen -X screen pingit.sh
eval rsync --delete-excluded -i $OPTIONS root@example.com$f "$CURRENT_DIR/xxx/$DIR/files"
/usr/bin/ssh -p 1234 -i $KEYFILE foo@$1 mkdir $TGTDIR
if [ $i -ne $((hosts_count-1)) ]; then
cmd=K1 = 'memcached://host/'\nK2 = 'memcached://host/'\n
sed -r s/^([^ ]*) .* (([0-9]{1,3}\.){3}[0-9]{1,3}).*$/\1 \2/

find ${direc[$iterdir]} $r_option -name *${exten[$iterext]} -exec echo rm {} ;
gawk --posix -F [[:space:]]*\|[[:space:]]* -v k=$key $1 == k $TABLE_FILE
echo 123420110404123520110404123620110404 | sed -r s/(.{4}).{8}/\1/g
awk -F^"|","|"$ {print $2,$3} ./infile.csv
[[ -n $aOutputFolder ]] && { IsEndWithSlash $aOutputFolder || aOutputFolder=$aOutputFolder/ ; }
tr -s   \n < myfile.txt | grep -c 1

name_of_file = ${line%.*}
cp -r ~/plugins/abc* ~/destination
perl silence.pl 3 silence.wav
if [ x`some | expression | here` = x1 ]; then
sed -r s/(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b/$newip/
s||nModel-Manufacturer:N/A&|
(cd a && git ls-files -z) | (cd b && xargs -0 git add)
nc -l 12345 | processing_program
diff -rcw DIR1 DIR2| grep ^Only
sed `sed s|\(.*\) \(.*\)|s/\1/\2/| input` output
id3v2 -l $FILE | sed -n /^TCON/s/^.*: //p | sed s/ (.*//
strace -o all_system_calls.txt -f -ff bash MyBashScript.sh MyArgumentOne

date -d 01-Mar-2011 -1 sec
sed s|</\?desc>|\n&|g; s/\(<desc>[^"]*\)"\([^\n]*\n\)/\1\&quot;\2/g;s/\n//g inputfile
while read line; do eval echo ${line}; done < iptables.save.file | /sbin/iptables-restore -v
AAAAA{0}{1}{2}{3} -f 0x86,0x08,0x04,0xed | ./program
test -f foo.txt && ls -l >> foo.txt
echo $string | LC_ALL=C sort
sed -r s,^(.*/ABC/[^/]+).*,\1,
bash -x
for (int = 0;i < [items count];i++) {
sort -k 1.2 -g -t,
rsync -va $@ /var/sync_dir/ $transfer_to:/var/sync_dir --progress
progname 2>&1 1>out.txt
echo 344F9DA1EA1859437077CCA38923C67797BDB8F6 | sed -E s/.{8}/& /g
awk { print >> $5 } yourfile
ssh user@ip echo 'Hello world'; whoami; cd / ; ls
script -t script.out 2>timing.out
awk -F# NF>1{split($2,a,"[0-9]+");print $1 FS $2+11 a[2];next}1 infile
tar -czf omniauth.wiki.tar.gz omniauth.wiki
gname:.*//g
sed -r s/;([0-9]{6})00;/;\101;/g
git push origin excellent:refs/remotes/from-desktop/excellent
tmux set remain-on-exit on
mysql -uUsername -pPassword database_name < infile.sql
SET QUERY_STRING=start_debug=1&debug_port=10137&debug_host=127.0.0.1&debug_stop=1&no_remote=1&debug_session_id=10000
system( java, -Xms256m, -Xmx512m, -jar, $saxonJar, -o, $tmpFile, $inFile, $xslFile, $saxonParams );
mv *20110209*
echo | awk {sum=0; for (i=3; i<=1000; i++){if ((i % 3 == 0) || (i % 5 == 0))sum+=i}print sum}
awk NR==1{print $NF} RS=Failed to clone input-awk.txt
awk NF && !/^(>|END)/ && !/#.*/ file
sed -r s/\[[0-9]{2}\/[A-Z][a-z]{2}\/[0-9]{4}:[0-9]{2}:[0-9]{2}:[0-9]{2} \+[0-9]+\]//g
tail -f file | awk tolower($0) ~ /debug|.*nfo/ {system("java -jar abc.jar " $0)}
find . -iregex ./\(EA\|FS\)_.*
SET
ls | grep -P \.(?!txt$) | zip -@ zipname
tar -czvf ./${date}_${user}_backup.tar.gz ${target}
awk ORS=/PowerOnHours/?RS:"\t" ./infile
echo $line | awk -v var=$mycol_new -F, {print $1 "," var "," $3 "," $4 "," $5 "," $6 "," $7 "," $8}
sudo ./script.sh -u werner
sed -n /^MSG.*ERROR/{H;g;N;p;};/^DURATION/{s/.*//;h;d;};H < logname
find $TRANSCODEDIR/* -type f -exec bash -c HandBrakeCLI -i "$1" -o "${1%.*}".mp4 --preset="$PRESET" __ {} ; -exec rm {} ;
setfacl -m d:u::rwx,d:g::rwx,d:o::r,d:g:dev:rwx /shared/dir
dreampie /path/to/python2.x
sed -i s/->/./g licensewizard.cpp
command >> file
do shell script echo $(( $(<FoO) + 1 )) >FoO
php -a -- --custom -s -t -u --ff=goes here --the=first --double-dash --is=Magic!
find . -size +XM -exec file {} --mime-type + | awk -F: /x-rar/{print $1}
php
cat textfile | grep -o target_string.*
%wheel ALL=(ALL) ALL
while read -r line
file -0 * | awk -F \0 $2 ~ /ASCII text/ {print $1 "\0"} | xargs -0 chmod -x
printf =%.0s {1..100}
echo "test" | sed s/"//;s/"$//
(echo -e first line\nsecond line\nthird line)
cat filename | sed s/^..\(.*\)$/\1,/
{dataset%.*}
printf \033c
[ $db == $i ] && skipdb=1 || :
cat file.html | grep -o -E href="([^"#]+)" | cut -d" -f2 | sort | uniq
grep -Po (\([0-9]{3}\)|[0-9]{3})-?[0-9]{3}-[0-9]{4}(?=</p>)
sed -e s/<[^>]*>//g file.xml
pkill whatever || true
export PS1=${RESET}${YELLOW}\u@\h${NORMAL} \`${SELECT}\` ${YELLOW}\w \$(__git_ps1) >${NORMAL} 
for /R %i in (*.jpg) DO convert %i -thumbnail 30% %~di%~pi%~ni_small%~xi
COUNT=`cat $NEWLIST | wc -l | awk  { print $1 }  `
awk /pattern1/ || /pattern2/{print}
Environment.CommandLine
find . -type f -name *.a -print0 | xargs -0 -IZZ mv ZZ ZZ.b
echo $lines
perl -e while(1) { fork(); sleep(1); }
sed s/\.[0-9]*/./g
git status -s | grep ? | cut -b 4- > .gitignore
awk BEGIN{A[0]="aaa";A[1]="bbb"}{ print $1, A[$1] } abc.txt
awk {a[$1]=a[$1] FS $2}END{for(i in a) print i,a[i]} file
ssh git@myProductionServer.com GIT_WORK_TREE=/home/www/test GIT_DIR=/home/www/test/.git git checkout -f production
words=( ${(f)...} )
sed y/aeiouAEIOU/AEIOUaeiou/
if [ `set | grep ^VAR=$` ]
awk length > 80 {print FILENAME "(" FNR "): " $0} *.cpp
sed /pattern to match/d ./infile
printf \e[1;34m%-6s\e[m This is text
cmd1 | xargs -l cmd2
process = `...`;
awk {print $0>$2".txt"} file
tar cf /dir/archive.tar --remove-files /home/user1/*.foo /some/otherpath/*.fbar
APP_SERVER_HOME=`echo $APP_SERVER_HOME |sed s/\s//g`
awk {print $3} file
tail --follow=name file.txt | grep something > output.txt
writer.write(line)
tac temp.txt | sort -k2,2 -r -u
./reset_db.sh
s/[[][^]]*]/X/g
orig_file = PRC_19_000011061354_01147_20110323.gz
eval $cmd
awk BEGIN{print ARGV[1]} file
echo fooman@example.com | tr [A-Za-z] [N-ZA-Mn-za-m]
awk -F; $0=length($1)<5?"0" $1 FS:$1 FS
grep foo input.txt | tail -n 10 > boo.txt
emerge @pres
01 00 * * 1 dtTm=`/bin/date +%Y%m%d.%H%M%S`; export dtTm; { /usr/bin/mineserver -o ..... your_options_to_run_mineserver_here ... ; } > /tmp/mineserver_trace_log.${dtTm} 2>&1


gcc test.cpp `python-config --cflags --ldflags`
grep ^datadir= /etc/mysql/my.cnf | cut -f 2 -d =
sed /CREATE DATABASE\|USE/s/Batch/pd_Batch/ test.sql
ssh remote-host sh -c "if [ -f ~/myfile ] ; then gzip -c ~/myfile ; fi"  | gzip -dc > /tmp/pkparse.py
echo hello world | mail -s hello me@example.com
find /dir1 -type f -printf %f\n
tr   \n < test.txt | sort -u
awk -F|  { print substr($10,1,11) } _file_name_ |sort -u > _output_file_
select _utf8 x0025200B0025;
du -h --exclude ./.*
url=`echo bin/hadoop dfs -get urls-input/MR6/*url* .`
eval grep --color $q ${yearmonth}/${daypattern}/${logfilename}
paste -d  /path/to/letters /path/to/numbers
sed -e :a -e /\\$/N; s/\\\n//; ta file
for n in `seq 1 100`; do cat cool$n.txt | awk {print $0 " cool"} > coolwarm$n.txt; cat warm$n.txt | awk {print $0 " warm"} >> coolwarm$n.txt; done
* * * * * /some/path/test.sh >> $(date +/home/oompah/logs/\%Y\%m\%d.test.log)
RET=http://`echo $ARG | sed s#/www##;s#/(public_|)html/#/#;
rsync -a ./src/ /usr/include/foo/ --include */ --include *.h --exclude *
mxmlc MyApp.mxml load-config my-app-config.xml output /pathToRelease
Runtime.getRuntime().exec(new String[] { /bin/bash, -c, java -classpath /home/kevin/workspace/Misc/bin HelloWorld })
echo $(launchctl list | grep -i aqua)
php /var/www/get.php
convert $1 -resize 50% ${1%.*}.jpg
export HOST
if [ -t 0 ]; then
hexdump -C yourscript.sh
find -type f -name *.htm | awk -F[/] BEGIN{OFS="-"}{ gsub(/^\.\//,"") ;print $1,$2, substr($4,3,2),substr($4,5,2),substr($4,8) }
java -jar jarfile.jar
apache ALL = (root) NOPASSWD:NOEXEC: /usr/bin/myapp
name1=value1 name2=value2 command name3=value3 -x name4=value4 abc
screen -d -m -L python test.py
sort <(for f in ${files[@]} ; do echo $f ; done)
function myfunc() { echo hello; }
mv app/modules/keywords_builder.rb !

require(child_process).exec(node test/*);
echo ${a% }${b% }
X := $(shell echo 5)
( crontab -l 2>/dev/null | grep -Fv ntpdate ; printf -- */3 * * * * /usr/sbin/ntpdate 192.168.2.3 ) | crontab
sed -r s/^0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)-0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+),...,(.*)$/\9:\1.\2.\3.\4-\5.\6.\7.\8/ inputfile

git remote -v show
do shell script source ~/.profile; idle3.2 -s
sed -nr s/\s*\[([^\]+)\]/\1/p
scp `ls -t | head -3` user@server:.
mysql [options] < createUsers.sql >> install.log 2>&1
`cd ~/stage.mydomain.com && unset GIT_DIR && git pull core stage`
iptables -vL | awk {your awk commands here} | mysql --user=foo --password=bar yourdatabasename
while IFS= read -r -n1 c;do printf <U%04X> '$c; done < ./infile
`C:\Documents and Settings\test.exe`
composite -dissolve 30% -gravity south output-file.png input-file.jpg watermark.jpg
awk {print $0,FILENAME} file1 file2
myprog $(cat file-name)
awk /pattern/{ print $0 } file
awk (!( $1 in arr) ){arr[$1]=$0}END{for(i in arr) print arr[i]} file
if ([ ${num} -ge 50 ] && [ ${num} -le 59 ]) || ([ ${num} -ge 30 ] && [ ${num} -le 39 ]); then
sort -t , -k 1,3
awk NF >= 3 filename
paste -d | 1.txt 2.txt 3.txt. 4.tx
sed s/\([0-9]\)\([A-Z]\)/\1 \2/ ./infile
echo $input >> spelled
ruby -e Dir["**/*@x2.png"].each{|x| File.rename( x, x.sub(/@x2/,"@2x") ) }
sudo aptitude install xdotool
head -n10 yourfile > newfile
www-data ALL=(root) NOPASSWD: /usr/sbin/useradd
echo cd /path/to/dir | cat - localscript.sh | ssh -T remotehost
trap echo Bye 0
cat ${file} | awk {c = c + $3; d = d + $4} END {print "APPNAME", c, d}
echo $?
echo $[$(date +%s)-$(stat --printf %Y /tmp/log)]
sudo -su db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \(1995\)
count=`find $dir -type f ( -perm -007 ) -print 2>/dev/null | tee /dev/tty | wc -l`
@reboot cd /home/[path to project] && rails server
ssh -f -N -L 10001:somehost:3306 user@host1
alias cleanup=rm -Rf `pwd`/{foo,bar,baz}
hgtk.exe -R <repopath> log
netstat -b -n 1 |awk {print $3;fflush()} |tail -n +3 >traffic.txt
echo alias youralias='yourcmd' >> /home/user/.bashrc
wait <pid>
echo update contact set email_address='foo@bar.com'; | /path/to/isql --your-favorite-switches

echo cd /;bash > /tmp/new.command;chmod +x /tmp/new.command; open /tmp/new.command
/home/appname/script/rails s -p 3333 -d
grep Max_value: proc_*.* | awk  $2 ~ /[0-9]{3}$/ && $2 > 127 && $2 < 200 
for f in test{2..4}.txt ; do cp file.txt $f ; done
find /tmp/logs/ -maxdepth 1 -mindepth 1 -type d -mtime -30 | xargs ls -td1

svnadmin dump /path/to/repo > Dump1.dump
echo -n -e \x48\x00\x49\x00 > myfile
LC_ALL=ru_RU date +%d %B %Y
erl +W w -boot start_sasl -kernel error_logger {file,"/tmp/log"} -config myapp -s myapp -extra $@
for ((i = 0; i < 99; ++i)); do printf -v num %07d $i; echo $num; done
my $num_1 = ($str_1 =~ /(d+)/)[0];
/usr/ucb/ps -alxwww
find . -depth -name `*.zip` -exec /usr/bin/unzip -n {} ; -exec rm {} ;
if [ ! -d ${MYDIR} ]
-z STRING True if string is empty.
awk -F\t NF==6 file >temp && mv temp file
sed 0,/RE/s//to_that/ file
grep -v <string1>\|<string2>\|<stringN> /path/to/file
exec(some_command --option 2>&1, $output, $ret);
shift $(($OPTIND - 1))
while true; do sth ; sleep 2 ; done
while read line; do [ $(ispell -l <<< $line | wc -l) -gt 0 ] && echo $line; done

git checkout -t -b whatever origin/whatever
(echo $$; echo $BASHPID)
sed -ie $NUMLINEs/^.*$/DELETED/ Brown_Adam_CIVForms.txt
awk FNR==NR{a[$1];next}{ for(i=1;i<=NF;i++){ if($i in a) {print $i} } }  file1 file2_wget
cat - | tr a-z A-Z | tr A-Z a-z
gzcat jfk-gw10-asr1.20100408.log.gz | sed -n /Nov 3 09:/,/Nov 3 11:/p
document.getElementById(txtOut).innerHTML=xmlhttp.responseText;
svn status | grep ^[AMD] | sed s/^.\{8\}// | xargs zcvf My.tar.gz
xargs sed -i s/<\/html>/myline\n<\/html>/g < fileslist.txt
find somedir/ ( -type d -exec chmod 0775 {} + -true ) -o ( -exec chmod 0644 {} + )
echo Some Text \n  | grep  \\n *$
tail -n +2 input-file | head -n -1 > output-file
export PATH=/d/MinGW/bin:$PATH
sshprocess.stdin.write(\x03)
rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1
ssh -t user@machineB scp /path/to/file root@machineC:/path
echo [[target|visible]] | sed -r s:^\[\[[^\|]*\|(.*)\]\]$:\1:
ssh root@MachineB bash -s < local_script.sh
trap echo hello USR2
find /tmp -name *.ABC | while read i; do cp $i $(basename $i | md5sum | cut -c1-6)$(basename $i); done;
awk -F; -v col=$col -v pat=$val $col ~ pat $input
echo ee | tee /dev/tty | foo
rm -- -filename
curl -H Host:localhost localhost
source scriptfile
sed -n 8,12p yourfile
system(ssh -t host1 'rsync -av /tmp/file host2:/tmp/');
sed -e s/,,/,unknown,/g
for i in {1..600}; do echo wget http://mydomain.com/search/link$(($i % 5)); done
for i in $(eval echo {$1..$2}); do echo $i; done
tar tzf nginx-1.0.0.tar.gz | sed -e s@/.*@@ | uniq
(echo $(($x+$y))^3 | bc)
{var
cut -d, -f1-3,6- file
for i in `ls *`
curl -vX GET http://foo.bar | jsongrep.py value2
grep -F $cnty wheatvrice.csv >> wr_imp.csv

eval echo $[{1..$boundary}*{1..$boundary}]
awk (NR >= $4) && (NR <= $5) {print} $1
do_your_thing | uniq -c | grep -v ^ *1 
iptables -L INPUT -v -n | grep $i && continnue
find . -print0 | xargs -0 egrep Cache
scp -r root@remotebox:/ your_local_copy
s.expect(VALID_NAME=);
sed -i /\*\*/,/==/d FILE
( set -- ./deploy_*; IFS=;; eval $* )
perl -CSAD -pe s/foo/bar/g
java -client -classpath ojdbc14.jar;lipstikLF-1.1.jar;swing-layout.jar;smt.jar Main.GUI.SmRun rimrim
PROG $@
open <url>
[sh, -c, echo $PATH ].execute().text
-e enable interpretation of backslash escapes

List<String> arguments = ManagementFactory.getRuntimeMXBean().getInputArguments();
curl -s http://weather.noaa.gov/pub/data/forecasts/state/ma/maz007.txt | sed -n /^TAB/,+11p; /BOSTON/,+3p
sed -e s/,,/, ,/g inputfile
source <(curl -s http://mywebsite.com/myscript.txt)
sass --watch file.scss:file.css &
cat file | grep apple | python -c for line in __import__('sys').stdin: print line.replace("apple", "orange"),
javac @${lstf}
\n
mkdir /home/user/Documents/user1 user2
(./tmp.sh 2> >(tee >(cat >&2) >&1)) > tmp.log
app = raw_input(Name of the application: )
system(paste(cd,getwd() && bgame -y 2010 2010bos.eva >2010bos.txt,sep= ))
complete -F _command backy
awk -F: /LOC/ {sum += $3;} END {print sum;} InputFileName
{parameter/pattern/string}
set -o xtrace
% perl -i.orig -ne print unless /^$/ file1 file2 file3
%x{ zip -r -j
(cd $(dirname $0); pwd)
echo .quit | sqlite3.exe
let $VIM =~/.vim/
unset GIT_DIR
grep -R Class Example Example
awk -F, {arr[$2]+=$1}END{for(i in arr)print i,",",arr[i]}
sed /<\/time>/I{n;:A;N;h;/<geo>/I!{H;bA};/<geo>/I{g;s/<\/time>/<\/tags>/i}} file.txt
perl -0777 -i.orig -pe s/foo/bar/gs file1 file2 file3
sed -r -e s/([a-zA-Z]{3,5})([0-9]{3})/\1:\2/g
exec ssh -o BatchMode=yes $@ true
sudo -E ruby some_script_which_requires_root_access.rb
find . -iname 2010-06* -maxdepth 1 -type d -print0 | xargs -0 -I{} find {} -iname *.jpg
sed -n s|[0-3][0-9]/[0-1][0-9]/[0-9][0-9]|& $(parseDates) &|p datefile
mysql --batch --silent -u $_adminuser -h $_host $_hostdb < procedure.sql
val = ($1 & 0x03FFFFFF) + $2;
/cygdrive/c/temp/dirA/
UPDATE address SET city =Detroit
mkfifo /dev/mypipe
sed s/\(^[^.]*\.[^.]*\.\)\(.*$\)/\1/g
strace find /dev -maxdepth 1
find . -type f ( -name *.cpp -o -name *.h ) ! -name pugixml.cpp -exec cat {} + | wc -l
dd if=/dev/urandom count=1 bs=8 | ...
in_array /home/backup ${exclude_dirs[@]}
none /cygdrive cygdrive user,noacl,posix=0 0 0
awk /^0/{next}{print $0>FILENAME} file
!C:\Program Files\MATLAB\R2008b\bin\matlab.exe -r disp(1:5)
xmlstarlet sel -t -c /parse-plugins/mimeType/plugin[@id='parse-html'] conf/parse-plugins.xml
which $C
your_command | while read HOST NUM; do host $HOST | tr \n  ; echo $NUM; done
mysql -u user -p dbnane
grep $(awk '{if (NF > 0) print $1}' file1) file2
echo ${foo:=42}
find -name *.html -exec bash -c w3m "$1" > w3m-"$1".html.out w3mout {} ;
git mv README.txt README
awk FNR==NR{a[$0];next}($0 in a) file2 file1
sed -rn /ABC/,/^[^+]/{/(ABC|^\+)/!d;p;} file
for i in `cat i.txt`; do wine ~/run.exe $i.asc 2>> out.asc; done
qmake -v | grep -m1 -o -P \(Qt [^\)]+ | cut -d  -f2
awk {count[$8]++}END{for(i=1;i<925;i++) print i, count[i]" HIT"} myfile.txt
grep first */*html
{pwned: you' & kill world;}
awk {gsub("@@","^");gsub("¤¤","\r\n");print} file
tac file.log | awk { if ($1 >= 423) print; else exit; } | tac
sed -i /var \$useDbConfig = 'default_dev';/d ./*
defaults write com.apple.Xcode PBXCustomTemplateMacroDefinitions { "USERNAME" = "${USERNAME}" ;}
* * * * * michael /home/michael/Documents/CS288/homework7/usatoday_runner.sh > /tmp/why_is_this_failing.log 2>&1
env :PATH, ENV[PATH]
sed -i.bak s/\$_REQUEST\[\([^]]*\)\]/MYCLASS::myfunction(\1)/g *.php
mysqldump --all-databases --routines -h <ip-address> -u <user> -p > dump.sql
sudo java -jar jython_installer-2.5.2.jar
sed s/|AUTODETECT|"}{\\fldrslt \\plain [^}]*}}/ /g $@
for f in *.png *.tif *.gif; do
var1 = subprocess.Popen(pwd | grep 'home' , shell=True)
Get-Date -UFormat %s
grep yourKeyword yourFile.txt
command < <(printf %s\n file-line1 file-line2 file-line3)
. show_parms.sh foo
awk /<tr valign=top>/&&v++%2{sub(/<tr valign=top>/, "<tr valign=top bgcolor=
find <directory> -iname <pattern> -exec mv {} $(modify {} whenever you want) ;
date +%z
command[2] = copy C:\output\html\*.txt C:\output\ >NUL 2>NUL;
perl -CSAD -i.orig -pe tr[：][:] file1
sed s/^\(.*\)#.*$/\1/
puts Dir[*.JPG].map{ |f| <img src='#{f}' title='Image File #{f}' /> }
sed \,some/path,d
phill = NOPASSWD: /bin/ls, /usr/bin/lprm
echo -e `grep -c 'string1' filename`\t`grep -c 'string2' filename` > output
for i in $(find . -name *.gz); do gzcat $i|grep -qe n1 -e n2 && echo $i; done
echo -e arrays2 28\narrays 28\narrays3 28 | LANG=C sort
if /bin/grep -q $f $2nd_file
chmod 755 file.bash
df filename
export PATH=/path/to/python/:$PATH
/usr/bin/ifstat -i eth0 -b -n | awk NR>2 {print "Download" $1 "upload" $2; fflush()} > bandwidth.txt
rename -n s/^/1-/ *.mp3
gawk {for (i = 1; i <= NF; i += 1) {printf "%f\t", ($i + 5) / 12;} printf "\n"}
ls -t b2* | head -1
sed  file

...exec(bash -c './ab0818 < ab0818.challenge')
sed -e s/{\([0-9]\+\)}/\1/g inputfile
sed -i /^MYVERSION=/ s/\$/$VERSION/ myfile.txt
sed s/\(foo\)\.o[ :]*/\1.o foo.P : /g < foo.d > foo.P
php script.php arg1 arg2 arg3
>someoutputfile
export PATH=$PATH:/usr/java/jdk1.5.0_07/bin
find /myDir -mindepth 1 -mtime 7 -exec rm -rf {} ;
(find $LIB_DIR -name *.jar -print | tr \n :)
echo $BACKUP_DESTINATION/$DATE_FOLDER/${FOLDERNAME}_$FILENAME
cat file | sed -r :a;N;$!ba;s/((^|\n)([^,]+,){0,2}[^,]+)\n/\1/g
curl -d name=Rafael%20Sagula&phone=3320780 http://www.where.com/guest.cgi
(date -r /raid/file/test.txt +%d %b %Y % r | awk {print $1,$2,$3,$4,$5;})
awk {print $3 - $2} temp.txt
echo -e 2.0.13\n2.0.2 | sort -V
find /somedir -type f -print | grep LMN2011
@FOR /F tokens=1 delims=: %%G IN (%1) DO @echo %%G
cat testfile | awk { print length, $0 } | sort -n | cut -d  -f2-
sed -e s/word1//g inputfile > outputfile
sudo -k
cd /tmp
echo >>file
sed /pattern/!d file.txt
PS1=[\!]:[\w]\n[\u@\h] \[\033[1m\]\[\033[41m\] $SOME_VARIABLE \[\033[0m\] $ 
C:ProgrammeOperaopera.exe -newpage file://localhost/C:/redirect.html
./script | less +Gg
echo some string | tr -d -c .[:alnum:]
wget -nH --cut-dirs=4 -r url
sed -e s/<title>/sblmtitle\n<title>/g -e 1,/sblmtitle/d ....
program_name -forever
android.util.Log.v(filter1,<this is my log statement>);
cat $sndf | gawk { printf "%f\t"  $3 -$2 "\t", (((($4/"$tag")/($3-$2)))*100) }
sed s/\(\(.*;\)\{8\}\)O\(.\{3\}\);/\1\3;/
find ./ -name 20110101* -print0 -type f | xargs -0 grep -l search_pattern
command1 | command2
Git checkout -
printf %.*s $? $?
system echo, params[:message]
./test.sh 2>&1 | awk {if(!match($0, /^\+ echo/)){print $0}}
mysql -u root -p --execute=SELECT User, Host FROM mysql.user
echo -e line 1\nline 2\nline 3 | program
sed -i s/^\(central\.database\s*=\s*\).*$/\1SQLTEST/ file.cfg
PROMPT_COMMAND=LAST="`cat /tmp/x`"; exec >/dev/tty; exec > >(tee /tmp/x)
qaiservers=(v-qai01 v-qai02)
python myscript.py 1 foo bar baz
sed -n 13193p;15791p;16891p file_name
sed -i :a ; $! { N ; ba } ; $s/\(<span\( \|\n\|\t\)\+class="fxlbc-t1-x-x-172">[^4]\+\)\(<span\( \|\n\|\t\)\+class="fxlbc-t1-x-x-248">\)/\3/g test.html
echo a[ 'xxx' ] | sed s/a\[ '\(.*\)' \]/a[ \1 ]/
sed -n /re/,$p file
mput *
chcp 1252
echo() { :; }
59 23 * * * { tmpFile=/tmp/yourCmdErrs.$$ ; export tmpFile ; yourCommand > /dev/null 2>${tmpFile}; if [ -s ${tmpFile} ] ; then mailx -serrors in yourCommand < ${tmpFile} ; /bin/rm ${tmpFile} ; fi ; }
sed -n -e /^[^(]*(\([^)]*\)).*/s//\1/p
sed -n /(/,/)/{:a; $!N; /)/!{$!ba}; s/.*(\([^)]*\)).*/\1/p} file
sed -e /<a/{:begin;/<\/a>/!{N;b begin};s/<a\([^<]*\)<\/a>/\n/;/<a/b begin}
compgen -v | grep -E HOME$
if [ $var = 0.000000 ]
C:WindowsSystem32Java.exe -version 2> C:Userstxt.txt
read -p Delete $file? (y/n)  input 2>&1
svn status | grep ^? | awk {print $2} | xargs -J % cp % backups/
sed -i -e /^$usr@abc.com/d virtual
echo Avg Time Taken:  $timeAvg
python -i -c import sys; import datetime;
`diff -b file1 file2` ?
(echo $INDEX | grep -c ^??  &> /dev/null)
psql -c SELECT columns FROM table ${1:+WHERE $1} ${2:+WHERE $2}
tasklist >> C:UsersDesktopFile.TXT
:set shell
SHELL = myshell
sed -i -e s/goodbye//g filename
twonum=`echo my_file_name-00-andsome | sed s/^.*\(.\)\([0-9][0-9]\)\1.*$/\2/`
if [ $updatedate = $nowdate ]
sed s/[^0-9]//g;s/^[0-9]\{1,2\}$/&00/;s/^\(.*\)..$/\1/
combine file1 not file2
c:cygwinbinbash myscript
locate .conf | less
perl -ne print if(tr/o/o/ == 4) foo_file
grep -v abcd$
command $@
TMPFILE = `mktemp /tmp/myfile/devid.XXXXXXXXXX`);
curl --dump-header - $@
/patt/!d;s//repl/
identify -format %w %h yourImage.png
(rsync foo bar &)
find /home/zjm1126/ -name *.html -print0 | xargs -0 sed -i s/tttt/new-word/g
{ generate_data | pv -bft 2>&3 | consume_data >/dev/null; } 3>&1 | tr \015 \012

sed NUMq;d file
sed -e s/<?/<?php/g
if [$
perl -pe print "$ARGV," a b c
cat file.txt | while read line; do chmod 777 $line; done
for i in {*.pdf,*.doc,*.xls}; do find /home/sample/ -name $i; done | awk -F/ {print $(NF-1) "/" $NF}
ls |xargs file|awk -F: !($2~/PDF document/){print $1}|xargs rm -rf

BUILD_ID/archive
powershell -Command & {set-location 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings'; set-location ZoneMap\Domains; new-item SERVERNAME; set-location SERVERNAME; new-itemproperty . -Name http -Value 2 -Type DWORD;}
find $PWD | sed s/^/"/g | sed s/$/"/g | tr \n  
ssh gerrit
svn cp -m Making test branch ^/trunk ^/branches/hellosite
(find Balzac/ -iname 20??????.txt -exec cat {} + | cut -c 10-21 | sort | uniq | egrep -Re [0-9][0-9][0-9]-[0-9][0-9][0-9].mp3)
echo commands | script
sed s/.*(openissues)\(.*\)(\/openissues).*/\1/ test.txt
sed -r s/^(06700|067|00)([0-9]*)/\2/g strings
sort -n input.txt | uniq -c
git checkout svnMirror
bash --version
altscreen on
find . -type f -name *.jpg | while read i ; do echo Procesing $i... ; done
CREATE DATABASE deneme;
sed s/^\(export MY_ENV=\).*$/\1NEW_VALUE/
sed 1s/"//g file.txt
head -n 50000 FILENAME | tail -1
for i in {1..10}; do s=$((s+i)); done; echo $s
sudo sh -c su -c 'make' $USER && init 0
(for i in $serviceProvideList; do echo $i;done |sort -u)
echo CONSTRAINT `FK5E61277CBAE1E8F6` FOREIGN KEY (`action_item_group_id`) REFERENCES `action_item_group` (`id`), | sed -r s/CONSTRAINT\ .*\ FOREIGN\ KEY\ .*\ REFERENCES\ .*\ \(.*\)/&\ ON\ UPDATE\ CASCADE/
(java Java_Program)
mvn dependency:copy-dependencies
cat HTML | grep -Po (?<=<img src="http://example.com/images/I/).*?(?=\._.*.jpg" style="display:none;"/>)
perl -mText::CSV -e $csv = Text::CSV->new({ sep_char=>"|",binary=>1,auto_diag => 1 } ) || die; open my $fh, "<", $ARGV[0] or die; while (my $row = $csv->getline($fh)) { $file = cleaner($row->[1])."/".cleaner($row->[0]); print "mkdir $file; touch $file/cans.avi\n"; } sub cleaner($) { my($f) = @_; $f =~ s/\W/_/g; $f;} ~/tmp/genxinventory-current.csv
{ tar -x --to-command MySerialiser -f MyData1.tar.xz && tar -x --to-command MySerialiser -f MyData2.tar.xz ; } | MyAnalyser
find /path -name pattern -print | xargs command
java simpletree.Program1Test
char *string1
if [ -e $dir ] && [ -d $dir ]; then
chmod u+x /path/opt/apache-ant-1.8.2/bin/ant
cmd
./two.sh
open -a Microsoft Word
echo chr(8);
xmlstarlet el /tmp/x.xml | sort -u | while read f; do E=; case $f in */txtfile) E=.txt;; */incfile) E=.inc;; *) continue; esac; ONE=`dirname $f`; TWO=`dirname $ONE`; ONE=`basename $ONE`; TWO=`basename $TWO`; filename=/$TWO/$ONE$E; echo cat `xmlstarlet sel -t -c "$f" /tmp/x.xml |  sed -e 's|</[^>]*><[^>]*>| |g' -e 's|<[^>]*>||g'` >> $filename; done
awk -F, NR=="$line"{print $$index} $1
which bash
sum=0
mysql --batch --skip-column-names -e SELECT CONCAT('TRUNCATE TABLE ', TABLE_SCHEMA, '.', TABLE_NAME, ';') AS table_sql FROM information_schema.TABLES WHERE TABLE_NAME IN ('errorLog', 'errorLogBacktrace', 'errorLogUrl'); | mysql
echo 'param 1' 'param 2' | xargs -n1 | xargs -I@ echo [@] [@]
(date -j -f %Y-%m-%d 1969-12-31 +%s)
tar -zcvf tmp/weekly/${DAY_OF_WEEK}_files.tar.gz $SOURCE
grep -E ba(na)* split *.txt
wget -qO- https://www.example.com/example.zip | unzip | iconv -f ISO8859-1 -t UTF-8 | csv2json > example.json
sort -o outputfile +1 -2 +4 -5 +6 -7 inputfile
javac -d /home/pathToFolderWithResultsOfCompilation -classpath /path/to/some.jar:/path/to/another.jar home/pathToFolderA/src/*.java home/pathToFolderB/gen-java/*.java
trap echo "Dont do this" 2
ls *.{zip,rar}
rename s/\.244// *.244
myVariable=`ps -ef`
if [[ $latestVersion > $currentVersion ]] || $forceupdate
bzr commit -m merged upstream version ${REV_UPSTREAM} || exit 0
cat *.csv > merged.csv
myCommand /s /d %dir% file1 file2 > sumFile
awk !/^*/{next}$1=="*"{sub("\\*+ ","");p=$0}$1="**"{c[p]+=1}END{for(i in c) printf "* %s [%s]\n", i ,c[i]-1}
env -i
I am using basic grep expression

rsync -avh /home/abc/abac /backups/ddd < /dev/null &
ls -F | grep ...
tail -f filename
echo select 1 | mysql
xcodebuild ARCHS=i386 ONLY_ACTIVE_ARCH=NO -configuration Debug -workspace MyProject.xcworkspace -schema MyLib
egrep -ir --include=*.{php,html,js} (document.cookie|setcookie) .
perl -00 -pe s/\(click here [^)]*\)//g inputfile > outputfile
find $musicdir -type f -print
/some/path/here/phpunit ....php
sed $q;s/$/,/
awk $0 ~ str{print NR-1 FS b}{b=$0} str=findme path_to_file
PATH:/dir/to/the/script
if [ ! true ] || [ true ]
Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin
while read a b; do if [ -z $b ]; then echo $a;fi;done <testfile
<Delete Files=file_name.trx Condition=Exists('file_name.trx')/>
trap { echo Exit code $?; exit; } EXIT
git pull
find /path -type f -exec sed -i s/oldstr/newstr/g {} ;
cat orig_filenames.txt | while read file ; do find /dest/directory -name $file ; done > output_file_with_paths
if [ `echo $MYPERMISSIONS | grep ^-rwxr-xr-x | wc -l` -eq 1 ]
TERM=vt100 vim
timeout -t time [-s signal] cmd [args ...]
for i in {1..10}; do echo -n $i ; done; echo

tr $ \n < large_records.txt | split -l 1000
cat somefile | sed s/,\([0-9a-f]*\)$/,0x\1,/
mysql --vertical=false
awk {k=tolower($2); arr[k]=arr[k] " " NR} END{for(v in arr) print v, arr[v]} test.txt | sort -f -k 1,1
ssh user@hostname tar cf - /dir/file*.tgz | tar xf - --to-command=tar xzvf -
screen -S $1 -X stuff tail -n0 -f -s 0.01 $cmds | (while true; do $tron --userconfigdir $userconfigdir --vardir $var; done) | tee -a $log

bash -x <scriptname>
echo $DIREC | od -c
diff -qr /dir1 /dir2
myprograme.exe c:my documentsfile1.xls
rename s%ABC%DEF%g ...
ec2-create-volume -s 5 -z us-west-1c | cut -f2
00 09 1 * * find /path/to/mail -type f -mtime +120 -print -exec rm {} ; > /var/tmp/mailDelete.log 2>&1
sed -e s/PATTERN/REPLACEMENT/g <INPUT_FILE >OUTPUT_FILE
for file in ${arg}/*.{txt,h,py}; do
find /apps -exec grep performance {} /dev/null ; | grep -v warn
wget http://example.dev/index.php?v=var
Popen([cmd.exe], cwd=mypath)
sed -r s_^(http|file):/a_\1:/d_
find Sources/$1-$2 -name *.php -o -name *.rb ....
{finalt%%</*}; trimmed=${trimmed
ssh user@host ls
ffmpeg -i file.mp4 2>&1 | grep Duration | sed s/Duration: \(.*\), start/\1/g
for f in *; do ffmpeg -i $f 2>&1; done | awk -f add_durations.awk
sed -i -e s/[ \t]'$DOMAIN'-'$SITE'[ \t]/ /g gitosis.conf

sed -i  -e s/\$config\['language'\] = "english";/\$config['language'] = "french";/ application/config/config.php
if func arg; then ...
d????????? ? ? ? ? ? S??curit??
find . -iname thumbs.db -exec rm -rfv {} +
[[ -s $HOME/.rvm/scripts/rvm ]] && . $HOME/.rvm/scripts/rvm
IN)
sed -e s;%SCRIPT_NAME%;script_test_name;g template_file.txt > script_test_name
grep -q -e extension=solr.so file || sed ...
sed -i s/ABC\(.+\)$/123\1/g myFile.txt
set -- `echo $1 | awk -F- {print $1,$2,$3}`
( perl -e print "X" x $size )
awk -F, { if (NF < 15 ) print NR "," $0 } fileToTest
PROMPT_COMMAND=ls
begin=`head -30 $0 | grep -na ^START | cut -d : -f -1`
generate_file_pairs | parallel --colsep   ./prog {1} {2}
f > >( cat )
blah blah blah = change disposition to disposition.
echo -ne \n | <yourfinecommandhere>
sed s%\$file%$file% script.in > script.out
rsync -a --progress --size-only --exclude=.DS_Store --exclude=.swp --exclude=.Trash --exclude=logs/* --exclude=xmlogs/* /Users/Devric/Documents/notes/ /Volumes/backup/
basename $(dirname $(dirname $0))
while $i<$num_of_lines
ssh user@host cat - > /tmp/file.ext; do_something_with /tmp/file.ext;rm /tmp/file.ext < file.ext
awk { ips[$5]++ } END { for (ip in ips) { print ip } } your_log_file
if [[ $varA = 1 && ($varB = t1 || $varC = t2) ]]; then
perl -pe s/(?<=<td>)((?:(?:\{.*?\})*[^{]*?)*)(ReplaceMe)(.*)(?=<\/td>)/$1REPLACED$3/g
sed -e s/\(.*\)ABC/\1DEF/g
awk /pattern_a/{f=1;c+=1;next}/pattern_b/{f=0;next}f{print > "outfile_"c} input_file
ls --color=always | grep ^[\[01;32m
cat /proc/cpuinfo | grep model name
sed s/ *\\t.*//
awk FNR==NR{i[$1]=1;next} i[$1]{print} file1 file2
find . -name *.mol2
echo $(expr ( $(date -d 2011/11/1 +%s) - $(date +%s) + 86399 ) / 86400)  days until deadline
listtumor=`tr \r \n < /Users/TReiersen/Work-Folder/OV/DataProcessing/TestRun/MatchedTumorTest.txt`
awk -F: {print $1:$2} inputFile > outFile
sed -f sed.script file1 ...
(ls -d /Volumes/*/.assets/port/Firefox Portable.app 2>/dev/null | head -1) && open $cmd
dir *.cpp *.h *.java /b/s
ln -s /full/path/to/executable/svn /usr/bin/svn
find main-directory -type f -exec mv -v {} {}.html ;
sed /^#/,/^\$/{/^#/!{/^\$/!d}} file.txt
convert -thumbnail 200x260 "/home/jaff/project1/dmdocuments/.$new_name1.[0]" "/home/jaff/project1/images/.$pdf_name..png"
rsync -avze ssh -o IdentityFile=/path/to/file /sync/here/ root@remotehost:/to/here
tail -n +1 -f pipe
exec(tar -zcvf archive_name.tar.gz *.log && rm -f *.log)
set VLC_VGA to application processes whose unix id is pid as integer
sort -t| -k +2n dataset.txt
myfile_1_exercise.txt == myfile_2_exercise.txt
vname=`echo $line | cut -d  -f4-$NF`
echo ...... DEF..... | grep --color DEF
awk -F_ $4>c+1{print p"\n"$0}{p=$0;c=$4}
sed -e s/#include "\(.*\)"/#include <\1>/g < filename
TERM=dumb ./script >> /tmp/output.log

subprocess.call([/usr/local/bin/growlnotify, -n, emesene, -a, emesene, -t, title, -m, text])
set -- *
PARENT_PID=`ps ax | grep fcgi | cut -f1 -d  | head -1`
cut -f 2-3 input.txt > output.txt
cp myfile.ext myfile.`date +%Y-%m-%d`.ext
perl -ple s/num/$n++/e filename
echo $var | wc -l
start /wait dxdiag /x:SomeXmlFile
sed n;n;n;n;n;n;d;
eval func ${arg_string}

cat text.txt | sed s/\./.\n/g | grep pattern
while [ $# -ne 0 ]; do
asterisk -nrx "transcoder show"
iconv -f ISO-8859-1 -t UTF-8 filename.txt
find . -name FILE*TXT -mtime +1 -exec sh -c grep -H ^err "{}" || echo "{}:No error" ;

vlc .. > out.log 2> err.log
printf Echoing random number %-5s   [ OK ] $RAND_NUM
{
run cat ${(q)filename_with_spaces}
perl -lane $el=$F[3] if(/Exported Layer/); print "$el: $F[3]" if(/Total Polygons/);
convert $pdf ${pdf%%.*}.png
new org.apache.http.client.DefaultHttpClient()
<Exec Command=start $(COMSPEC) /k &quot;$(PathTo)\My.exe &amp; exit&quot; />
alias foo=bar() { echo Hello; }
history|awk {print $2}|awk BEGIN {FS="|"} {print $1}|sort|uniq -c|sort -rn|head -30
echo a~b | sed s/~/==/g
hdiutil attach -mountpoint <path-to-desired-mountpoint> <filename.dmg>
00 16 * * * /etc/cron.daily/maj_cat
plugin /usr/local/openvpn/sbin/openvpn-auth-pam.so openvpn
crontab < $HOME/etc/crontab
dos2unix file.sh
the_input=`cat`
svn co svn://svn.fazend.com/abc/branches/pqr-staging pqr
source /home/your_user/.bashrc && django_serve
sudo at next hour
myCommand 2>&1 1>/dev/null | tee /path/to/some/file.txt
ssh user@server for dir in dir1 dir2 dir3; do echo dir3; cp some/file.txt /home/user/dir3/; done
sed s/^(.*)_([^_]*)$/_\2/ < input.txt
start http://code.google.com/p/mulder/downloads/detail?name=MPUI.2011-06-09.Full-Package.exe^&can=26^&q=MPlayer^&sort=-uploaded
echo 66.9090_89.4450_168.0250_ABC3/ | cut -d_ -f4 | cut -d/ -f1
command 2>&1 | perl -pe print scalar(localtime()), " ";
cmd /C C:Program Files (x86)WinRarRar.exe a D:Hello 2File.rar D:Hello 2*.*
sed s/\(\S\)\s/\1:/ your_file
ssh user@otherhost /path/to/php-script
:150
ps aux | grep -ie amarok | awk {print $2} | xargs kill -9
call test.bat %changeFrom% %changeTo% %origFile%>%newFile%
tr :\-_ \t < infile > outfile
sed -r -e s/chr[0-9]+:[^_]*_(N[RM])_([0-9]+)_[^,_]+([, ]|$)/\1_\2$\t/g;s/$\t$//g
(echo.&echo.&echo.&echo.) | MyBatchScriptWithPause.bat > somefile.txt
paste file2 file1
( echo $F | sed s/$PREFIX//g | sed s/$SUFFIX//g )
> sed -r
sed s/[^0-9]//g file.txt
java -cp . ch01.ts.TimeServerPublisher
for (( i=0; i<100; i++ )); do mkdir junk$i; done
sudo apt-get install gawk
sed s@$1@$var@g -i filename
egrep -a -A 2 ApplicationIdentifierPrefix file.mobileprovision | grep string | sed -e s/<string>// -e s/<\/string>// -e s/ //
ruby -pi.bak -e $_.gsub(/(\d{2}):(\d) --> (\d{2}):(\d{2}):(\d{2}),(\d{3})/) { "#{$3}:#{$4}:#{$5.to_i - 2},#{$6} --> #{$3}:#{$4}:#{$5},#{$6}" } *.srt
system(LD_LIBRARY_PATH=icu/source/lib/ ./a.out $line >> newtext.txt);
env >$HOME/.cronenv
fromdos post-commit

root ALL=NOPASSWD: ALL
find * -type f | xargs md5sum | sort | uniq -Dw32
(eval echo -e `<file`)
grep -P ^File: blah\.txt Location: .+ test.txt | cut -d: -f3
show databases;

perl -pe BEGIN{open F,"gac.js";@f=<F>}s#//gac goes here#@f# index.html
pkill ruby
echo foo$myvariablebar
sort -k2 -n yourfile
cp -t target_directory foo_{0..54}.jpg
output = `phantomjs rasterize.js http://raphaeljs.com/polar-clock.html clock.png`
nawk {system("svcadm enable " $3)}
seq -w 00000000 00000009 >filelist.txt
find . -mindepth 2 -type f -size +0 | cut -d/ -f2 | uniq
cat *.java
read -t 2 <>/tmp/foo.pipe
setx.exe var value
for dir in v_79/dir_{0..210}/ENSG00000??????; do mkdir $dir/my_dir; done
Clock.AutoReset = false;
sed s/<script type="text/javascript">What you want removed</script>//
awk {printf $1FS$2; for (i=5; i <= NF; i++) printf FS$i; print NL }
sed s/REPLACEME/$(sed s/.*/&/ | paste -s -d, -)/ < template_file.txt
for i in *; do mv -- $i ${i#*-}; done
alias setup_diffuser=export GIT_COMMITTER_NAME="Blah" && export GIT_COMMITTER_EMAIL="blah@blah.com" && export GIT_AUTHOR_NAME="Blah" && export GIT_AUTHOR_EMAIL="blah@blah.com" && export blah="true"
echo a:b,c:d | awk -F[:,] BEGIN {OFS=FS} {$2=42; print}
find /stuff -type d -exec script.py {} +
awk { printf "%-20s %-40s\n", $1, $2}
(echo $IN)
vi ~/.my.cnf
sed -e s/^[0-9]*// test.cpp
end=`wc -l done1`
find -name .gitignore
tr , \n FILE | sed -n /^f[0-9]\+=/p | sort | uniq -c
./my_program $*
mirror -r background_docs --only-missing -e
sed -n abc.txt
system(/your/shell/script 'argument 1' 'argument 2');
mono [options] file [arguments...]
cat /proc/cpuinfo | awk /^processor/{print $3} | tail -1
cat done1 | parallel --eta wget
sed -n /\(^\[test2\]\)/,$p test.txt > temp.txt
fflush(stdout);
perl -e local($/); $data = <>; $data =~ s/stringstart(.*?)stringend//gms; print $data
result = commands.getoutput(zcat  + fullpath +  |wc -l)
/^INSERT/, /.*;/ {print}
cat largefile | awk NR >= 10000  && NR <= 100000 { print }
find . -name bobtest.c cattest.c snowtest.c
alias sshx=TERM=xterm ssh -X 123.45.67.89
acroread -help
/TR C:\Documents and Settings\All Users\Desktop\ABC.exe
dirname $file
php check_configuration.php
PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@
sed -e s/[0-9]*\.[0-9]*//g -e s/ *$//
chmod +x yourscript
diff $source_file $dest_file
[:47]
grep isaPDAVersion f1 | awk -F{ {print $2}| awk -F, {print $1$2$3$4}
sed 1,/^the last line$/d < $origfile | cat newlic.txt - > $newfile
if [ == -? ] ; then
[[ -z `find /this/is/a/path/ -name core.*` ]]
java -jar biz.aQute.bnd.jar
convert image.png txt: | less
grep -v -f <(cut -d ; -f1 /tmp/list2.csv) /tmp/list1.csv
alias svn-reset=svn status | perl -nale 'print \$F[1] if /^M/' | xargs svn revert
ln -s /Applications/XAMPP/xamppfiles/bin/mysql /usr/bin/mysql
awk { print $3 } file1 [file2 .. filen] > output3
sudo -u user -H /usr/bin/firefox -new-tab http://stackoverflow.com
cat <<< This is coming from the stdin
ls /user/local/*.log | xargs -rn1 script.pl
sed /^$/d fileName | sed G
for i in 1 2 3; do (echo $i; sleep 5; echo end $i)& done
read a b c <<<aaa bbb ccc

cat /proc/meminfo | grep MemTotal | awk {print $2}
eval rm -rf /some/path/{$VAR}
ps -ef | grep bar | { grep -v grep || true; }
grep -nr \<XML\> .
grep -E ^ *//
sed s/\(.*\)/"\1"/g
java -cp .:swing-layout-1.0.4.jar StartFrame
ls `(seq 1 33; seq 35 41)|sed s/^/xxx_/;s/$/.txt/`
git remote add origin git@github.com:LiamBailey/TweetSlider.git
start  /max c:\nameofpdf.pdf
scp -i mykey.pem somefile.txt root@ec2-184-73-72-150.compute-1.amazonaws.com:/
bash <(curl -s https://raw.github.com/gist/419201/gitconfig.bash | head -n 3)
ls -1 | grep -v good | xargs rm -f
start  C:\Program Files\SomeProgram\Some program.exe
exec 3>&-
df -k | sed -e /Filesystem/d
( cd /tmp ; pwd ) ; pwd
/sbin/service --test-if-configured-on org.apache.httpd
bin-path => rvm 1.9.2-p180 exec bundle exec rackup
A=4; B=6; echo $((A * B))
grep apple_with_seeds[^_] appleFile
awk BEGIN{ORS="";} NR==1 { print; next; } /^[[:digit:]]/ { print "\n"; print; next; } { print; }
ln -sfvn source target
edbg() { emacs --eval (gdb "gdb --annotate=3 $*");}
`a.sh`
sed -E s/console.(log|debug|info|...|count)\((.*)\);?//g
int rc = pclose(fd)
convert.exe <filename>.psd -set dispose Background -coalesce <outfilename>.png
<echo>property: ${property}</echo>
xterm -e echo HELLO; bash
if [ -n $(find ./ $(build_ext_names)) ]; then
./my_secured_process some parameters 3<<< b@dP2ssword
sort -t $\t -k2 file
alias foo=bar="$(echo testing hello world | grep "hello world")"; echo "$bar"
foo=Thank you!
shell_exec(/usr/bin/php theprocess.php > /dev/null 2>&1 &);
echo $(ps ax)
find -type f -name *.css* -exec echo FILE="{}"; mv ${FILE} ${FILE%\?*}  ; | bash
cat my_bash_file.sh | sed s#/opt/Test/conf/server#/opt/Test/conf#g
find . -name *.jar|xargs -n 1 jar -tvf
find /test/$1 -type f -name *.html | xargs sed -i -r s,href="http://$1/,href="/,g
sed -e s/\s\+/,/ | sed -e s/\s\+/,/
sed s/^foo/barfoo/ baz
autocmd bufwritepost *.pl silent! !chmod +x %
sed -i -e s|/| | -e s|/| | inputfile
adb shell kill <PID>
export PATH=/usr/bin:$PATH
sed s/\.\.*/_/
C:> C:ProgramsCurlcurl.exe http://www.snort.org/sub-rules/...
ls /var/run/screen/S-$USER/*.mapper >/dev/null 2>&1 || screen -S mapper ...
echo $example | perl -nle m/.*?video.php\?video=([^"]+)">.*video.php\?video=([^"]+)".*/; print "=$1=$2="
(readlink -m /home/nohsib/dvc/../bop)
logger - a shell command interface to the syslog(3) system log module
x=1; for y in $(cat lista.txt); do mv $y filename$x; let x=$x+1; done
(echo $1 | sed s@\[@\\[@g| sed s@\]@\\]@g)
array=(`cat $1`)
fsutil file createnew <filename> <length>



1st-field 2nd-field
sed s/\(condition ccc.*aaa: \).*\( bbb$\)/\1gotit\2/ file
command >> logfile 2>&1
(dirname $0) && cd ${mydir} || exit 1
sed $s/;/;\\\n/g
chmod +x testscript.csh
foo > stdout.txt 2> stderr.txt
echo ${baz/${foo/${foo/
(add-hook emacs-startup-hook toggle-window-split)
curl -X POST --data-urlencode image@test.jpg http://myapp.com/api/upload
echo ERROR: $1 is a subdirectory of $(readlink -e $2)
sed -i.bk -e s/jpg#[^,]*/jpg/g filename
play ideaproj
{ time ( echo hello ; sleep 10s; echo hola ; ) } 2>&1
join -1 2 -2 1 <(sort +1 -2 file1) <(sort +0 -1 file2)
me@myWork:../../My documents/Projects/Project 1/*
tail -f debug >> test.log &
schtasks /create /sc minute /mo 30 /tn Task runs Every 30 Minuts /tr c:PATHTOTASK.exe
history -cw
p.sub(gray \\1, s)
FILE * sortie=fdopen(fd[1], w);
ls ${=args}
tr   \t < inputfile > outputfile
VAR=/dir1/dir2/dir3/file echo ${VAR%/*}
exec(php -f ./process.php var1 var2 > /dev/null 2>/dev/null &);
mysql -e source /path-to-backup/backup-file.sql db_name --default-character-set=UTF8
sed s/sd/paragraph\nsd/ file
sed /^sdf$/,+3 d file
const char * script = script.sh;

umask u=rwx,g=rwx,o=rwx
grep -c echo FILE
(sed s|/|\\/|g <<< $website)

sed -e /^# Configuration foo - Start$/r new_foo.txt -e /^# Configuration foo - Start$/,/^# Configuration foo - End$/d
{foo:4}
cat < `echo /etc/termcap`
awk /msg_sent_node number/ { node_total += $5  } /msg_sent/ { sent_total = sent_total + $4} END { print sent_total " " node_total }
fc -ln -1
awk /<ul>/ {ul++} ul == 6 { getline } 1 INPUTFILE > TMPFILE && mv TMPFILE INPUTFILE
find ./ -type f -exec sed -i -e s/apple/orange/g {} ;
sed -ne /$engineinfo = engine_getinfo();/a\$\n$engineinfo[engine]="asterisk";\$\n$engineinfo[version]="1.6.2.11";$\n;p /var/lib/asterisk/bin/retrieve_conf
:%!xargs -L1 wc -l
... shop | tail -1)
argv);
stty -a
Files old/file and new/file differ
if foo && echo || ! echo; then
if [$1 != install];
awk /<li><p><a href="anti\/recent.html">/ {a++} a == 4 { getline } 1 file
-DpropertyName=itsValue
java -cp your-classpath-dependencies-here -jar hello.jar arg1 arg2
php /path/to/script/script.php -- id=19&url=http://bkjbezjnkelnkz.com
mv $1 ${1// /_}
do shell script presentDir & test.py  user name me password mypassword with administrator privileges
awk $7 ~ /\.html/ {print <your-field-list>}

arp -s $1 $2 2>/dev/null
/fox/{
echo -n Hello | od -A n -t x1
grep -rlI ` ./*
gem env | grep EXECUTABLE DIRECTORY
(select ....) union (select.... order by something)
hexdump -C
\n.join(sorted(set(unicode(open(inputfile).read(), utf-8)) - set(chr(i) for i in xrange(128))))
join () { local IFS=$1; local s=${@:2}; printf %s $s; }
unset -f my_function
(/bin/sh -c myscript.sh >log.txt 2>&1 ; echo $? >somefile) & echo $!
bash -x commit.sh
pip install pyftpdlib
awk $1 == $2 {next} {print} oldfile > newfile
SC \computername CONFIG apache start= demand
ffmpeg2theora -v 6 -a 5 $filename > /dev/null 2>&1 && mv $filename finished/ > /dev/null 2>&1 &
find / -name myfile -type f -exec dirname {} ;
ps auwx | awk /[s]ql/ {total += $4} END {print total}
pstree | cat
sed -e /^#\$/,/^#\$/d file
setenv(PATH, [getenv(PATH) ; C:\the\path\to\your\tool]);
db.mycollect.update({id=12345}, {$set: {abc:new value}});
local rvm_ruby= %{$fg[red]%}[$(~/.rvm/bin/rvm-prompt i v g s)]%{$reset_color%}
sed -i -r -e s/^([^#a-z]+)localhost/\1hostname.domain hostname localhost/ /etc/hosts
ifconfig | grep inet addr:| grep -v 127.0.0.1 | cut -d: -f2 | awk { print $1}
name=value command
sort yourfile | uniq > outputfile
taskkill /IM notepad.exe
android-sdk-windowstools
grep href page.html | sed s/^.*href="\([^"]*\)".*$/\1/ | xargs | sed s/ /,/g
svn status | grep ^?|sed s/^?/svn add/ | bash
cp `ls -SF | grep -v / | head -5` Directory
sed -e s/DEFINER[ ]*=[ ]*[^*]*\*/\*/ myfile.sql
find . -iregex .*\(_web\|_thumb\)\.\(jpg\|png\|bmp\) -delete
for f in *.jpg; do mv $f `echo $f | sed s/IMG/VACATION/`; done
find /var/www/cgi-bin -name touch -cmin 10 -exec echo ok ;
octave --silent --eval myOctaveFunc("$line")
echo $filename | sed s/\/home\/devtestdocs\/devtestdocs-repo\//$testdocsdirurl/
cat filename | awk {if($1==$1+0 && $1<THRESHOLD_VALUE)print $1} | sort -n
if [ -z $variable ]
echo C:\foo\bar.xml | sed s/\\/\//g
echo foo | tee /dev/stderr
push 0x1000
abc123 unknown text which might have spaces/Windows/There might be /es here
for (($i=0...
awk -F </*td>|</*tr> /<\/*t[td]>.*[A-Z][A-Z]/ {print $3, $5, $7 } FILE
Import-Csv C:Directoryfile.csv | Measure-Object
{b-`pwd`}
net.trainParam.showWindow = false;
ls files_*.raw | xargs -L1 sed -e $s/$/\n/ >>ALL
VARS=`echo ${VARS} | tr () {}`
wget --post-file=filetoSend URL
subprocess.Popen(find / -name "hello.txt" -exec echo {} \;, shell=True)
grep mykey =  file | sed s/.*\(mykey = [A-Za-z]*\).*/\1/
(echo new_value | read var) && echo $var
sed s/\([A-Z]\)[A-Z]*/\1/g my_file
echo -e \e[4mhello world\e[24m\e[1m
sed -e 2,$s/foo/bar/
python -m SimpleHTTPServer 8000
sed s/username=[a-z0-9_]+/username=abc/i Service.properties
find . -type f -exec sh -c printf "%s %s \n" "$(ls -l $1)" "$(md5sum $1)"  {} {} ;
res=`nc -v $1 $2 < /dev/null 2>&1`
grep -r search * > somefile.txt
<binding protocol=https bindingInformation=:8080:localhost />
read input </dev/tty
cp -r /srv/www/htdocs/downloads/rules /srv/www/htdocs/didebansnort/core/snort/rules
mkdir `echo $EXTRACTDIR/$CV_NAME*`/release
run find #{current_release}/public/static/css/ -name '*.css' -print0 | xargs -0 sed -i -E 's@(\.\.\/)+(images|static|img)@#{images_cdn}@g'
ps -ef | grep cron
./script.pl -t 2010/11/29 09:39:57
C:Program Files (x86)ClamWinbinclamscan.exe -d C:ProgramData.clamwindb --remove --stdout MY_FILE_NAME_AND_PATH
/usr/bin/tee -a $LOG_DIR/hosts.`date +%Y%m%d-%H%M%S`.log
sed /^ARRAY=.*;/d in >out
(echo \n | sed s/\\n/---\\&/g)
[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm
user1 ALL=(user2) NOPASSWD: /home/user2/bin/test.sh
dd if=/dev/zero bs=1024 count=1024 | sed -e s/\o00//g | wc -c
ps -o pid=,args= -C grep
sudo echo -e #!/bin/bash\nxmodmap "keysym Alt_R = Multi_key"
echo {} |tr \{\} \[\]
top -b -n 1 -u abc | awk NR>7 { sum += $9; } END { print sum; }
forfiles /p c:Users /m *Signatures* /c cmd /c forfiles /p @path /m *.htm /c "cmd /c echo @path"
mmv linux_* #1
system chmod 755 public
watch -n 1 mysql -e 'select id from updates order by id desc limit 1' your_db
cat image.png | impbcopy -
SHELL:=/bin/bash -O extglob
find . -name \*.php -o -name \*.phtml -print0 | xargs -0 svn propset svn:keywords Id
wsadmin -host serverB.host.com -port serverBRMIPortNumber -c $AdminApp install /path/to/localfile.ear {...options...}
echo $filevar | sed s/$/<br>/
echo abc_def_08032011.txt | awk {print substr($0,13,4) substr($0,9,4)}
grep include file1.h > tmp && grep -f tmp -v file2.h | grep include
for s in a b c; do echo $s; done
find . -perm /u+x -execdir chmod a+x {} ;
grep -o server_log_[0-9]\+\.log
my_stream_generator | xargs -n1 my_command
javac -cp C:devmvnrepolog4jlog4j1.2.16log4j-1.2.16.jar AppenderTester.java
comm -12 <(fold -w1 <<< $s1 | sort -u) <(fold -w1 <<< $s2 | sort -u) | tr -d \n
for port in $(seq 4444 65000); do echo -ne \035 | telnet 127.0.0.1 $port > /dev/null 2>&1; [ $? -eq 1 ] && echo unused $port && break; done
alias fvgm=export|grep '^declare -x gm'
bash ./errtest.sh
sed -e s,/home/user/mydocs,/var/lib/mydir, -e s,/home/user/waves,/var/sounds, -e /^$/d file1
system(cmd +  2>&1 )
vim *h*<ENTER>
defaults write /Library/Preferences/loginwindow AutoLaunchedApplicationDictionary -array-add {Path="/Applications/Your Application.app";}
find . -type f | grep 000000 | tr \n \0 | xargs -0i+ cp ~/offblack.png +
Shell(format, Wait:=True)
your_script.sh -d foo bar baz
PS1=\[\e[0;30m\]test \[\e[0m\]
grep name1 filename | cut -d   -f 4 | sort -u
sed -i s/discussion/item/g <filename>
for %f in (*.txt) do @convert %f -par1 -par2 -par3
awk -F \t BEGIN { } { if (max[$1] == "" || $2 > max[$1]){ max[$1] = $2 } } END { for (var in max) { print var,"\t",max[var] } }  tab-limited-data-file
find . ( ! -user pieter -o ! -group www-data ) -print0
tf workfold -map -login:secretUsername,secretPassword -server:http://secretHost:8080 -workspace:KOLOBI $/TeamProject/Project /home/me/project
cat a.txt | xargs -I % sh -c command1; command2; ...
ssh $USERNAME@$HOSTNAME pg_dump -f /dev/stdout -t tb1 -t tb2 -t tb3 dbname > /export/bin/dbexport.sql
a_command || fallback_command
find . -type f ! ( -path ./.[a-z]* )
html =~ s/<s*trs*>s*<s*tds*>s*<s*labels*>s*testlabels*<s*/labels*>s*<s*/tds*>s*<s*/trs*>/<? test_routine ?>/gi
awk -F, {array[$1","$2]+=$3} END { for (i in array) {print i"," array[i]}} datas.csv
... | cut -d & -f 1
test $(expr match $(lsb_release -r) Release:11.04) = 13 && echo true || echo false
sudo sed -i s/${REPLACESTRING10}/${REPLACESTRING12}/g ${DESTINATION}/${FOLDER}/trunk/lib/config.php

awk -F, -v OFS=, $1 != "" { link=$1 } { $1 = link; print $0 }
tar -C $1 -cvf - . | tar -C $2 -xvf -
inputfilename = gettextfromkeyboard(inputfilename,256);
cp ~/org/file.org /tmp/export.org && emacs -batch .... /tmp/export.org ..
echo Welcome $(whoami)!
awk { for(i = 1; i <= NF; i++) { print $i; } } foo.txt
ssh user@host command1; command2 > /local/1-2.txt
{ cpio -ti --quiet <$archive 2>/dev/null || local -a Error[run]=cpio; } | grep -Ei $extlist
join -v 1 -i -t, -1 1 -2 1 -o 1.2 1.3 1.4 1.5 <(awk -F, {print $1":"$3","$0} f1.txt | sort) <(awk -F, {print $1":"$3","$0} f2.txt | sort)
rsync -rP --existing source/ user@remote:target/
aggregate_file=
sed -r s/.*\:([^\:]*)\:.*/\1/
sed -i.bkp $alias_replace host.conf
sed -e s#"#\\"#g -e s#'#\\'#g
find . -type f | xargs -d \n perl -pi -e s/search/replace/g
/usr/bin/php /path/to/php/script.php
php your_script.php
new_db_name=`echo $new_db_name | sed s/$replace_string/$replace_with/`
ls -d */ | grep -E [0-9]{4}(-[0-9]{2}){2}_([0-9]{2}-){2}[0-9]{2}
define( DIR_ROOT,dirname(__FILE__) );
gnome-terminal -t MyWin -x bash -c ssh -X $USER@$REMOTE_IP 'echo "Press ENTER to continue" ; read JUNK && echo "HELLO" > hello.txt ; bash '
test.sh arg1 arg2 &
head --lines=-1 filename
. ./cd.sh
unzip(dir => zip_file).target.invoke
if [ != ]
tail -2 yourfile | head -1
readonly DATA=/usr/home/data/file.dat
grep -v -f pattern_file
new ActiveXObject(WScript.Shell).Run(pdfFile,1,false);
set myVariable=^myVlaue^
delayed_interleaved_stdout_stderr.pl > >(tee z.stdout) 2> >(tee z.stderr >&2)
ssh user@windowsmachine mycommand.exe
apt-get update && apt-get -fy upgrade && [ -f /var/run/reboot-required ] && shutdown -r now
/usr/libexec/PlistBuddy -c Set :items:0:metadata:bundle-identifier newidentifier your.plist
ssh user@example.com bash -s < local_script.sh
for i in `seq 1 3`; do cut -d, -f1,5,6 myfile${i}.csv > myoutput${i}.csv; done
{!VAR}
sed -i .bak /culpa/d test.txt
java -cp X.jar:. Q
cat <file> | awk { if (NF > 0) printf("%s\n", $0); }
flock -n -e 200 || exit 1
echo Set link = Shell.CreateShortcut(DesktopPath ^& \Beta.lnk)>>%temp%CreateFirefoxBetaShortcut.vbs
export FIGNORE=DS_Store
((expression))
s/^[
paste 1 <(cat 2 3 4 | sort -R)
unzip -q -c myarchive.jar META-INF/MANIFEST.MF
echo -e \ra b {1..3} d e\n
sed -n -e /Product Name/{s/.*://p}
57 1 * * 2-6 ET=`date --date yesterday +%Y%m%d`;echo $ET
Query <TAB> LocationCode <TAB> IPAddress <NEWLINE>
cp $f `echo $f | perl -pe 's/\#\d+ (.+)$/\1/'`
Workstation.Current.GetLocalWorkspaceInfo(localPath)
adb shell
xxd -c 123 -ps
perl -ne next unless /^http:\/\/[^ \/?]+(\.com|\.co\.uk|\.ca|\.biz)/; print $1, "\n"
nohup /path/to/run.sh > run.log &
sed -i.bak $s/You are good/You are good\\\nYou are the best/g /output.txt
for i in seascaperecovered*.jpg; do A=${i/crop/}; mv $i ${A/recovered/_}; done
alias newpython=/path/to/your/new_version/python
psql db -c SELECT COUNT(test) FROM tbTest; | tail -n 2 | head -n 1
tee program.in | program 2>&1 | tee program.out
for X in {18..2500}; do
sed -n -e /TERMINATE/,$p
sed -n 2p somefile.txt
./export.sh EXPORT_FLT_2
if [ -n $(ps -Af | awk '$11 == HomeDir') ]; then echo running; fi
read IP_ADDRESS
history | cut -c 8-
mysql_safe &
nohup php somescript.php >/dev/null 2>&1 &
s/\.*/ /g
PS1=\[`tput sc`\]  \[`tput rc`༇ \] \$ 
ps -A | grep -v grep | grep -c fsdaemon

export PATH=/usr/local/bin:$PATH
bash yourscript.sh
{f%%.*}
bash -c XXXX ; bash
echo 321 | sed -e s/\([[:digit:]]\)/.\1/g -e s/^\.//
tail -n +2 Data | cut -d  -f 2 | xargs -I{} cat Instances/{} >> $nF
echo 123 | rev
diff <(head -n 2000 file1.log) <(head -n 2000 file2.log)
for file in *.foo; do mv $file ${file%.foo}.bar; done
sed do whatever ${*}_stubs.cc > tempstubs.cc
... | nawk -F; -v now=$now -v commentValue=$commentValue
mkdir -p /home/chris/downloads/$(date -I)
A program should do one and only one thing and do it well.
nohup /path/to/your_script.sh &
for i in myfile.*; do echo mv $i ${i/myfile./newname.}; done
ps -eo ppid,pid,cmd | awk {p[$1]=p[$1]","$3}END{ for(i in p) print i, p[i]}
nohup glxgears >/dev/null 2>&1 &
./myprogram 11*15
eval someprefix_${bname}() { echo test; }
gem update heroku
echo ${VAR}="${!VAR}" >> $FILE
./myscript.sh $(< mycmds.txt)
find $1 | sort -f | uniq -i -d -D
`mkdir -p $FINALPATH`
ps -eo pid,command,etime
out, err, status = Open3.capture3(/bin/ls, dir)
svn help co
Shell(FOR /R %I in (*.pdf) DO @pdf2swf.exe %~fI -o %~dpI%~nI.swf -f -T 9 -t -G )
command pwd
sed s/$/,/;n;n;n file
expr match $string .*\([0-9][.][0-9]\)
mysql -Bse DELETE FROM database.table WHERE filed < CURDATE()- 5
sed -r s/.*=([0-9]+)$/\1/ testdata | paste -sd,
tail -f file | grep --line-buffered my_pattern
sudo tar -xvzf eclipse-SDK-3.7-linux-gtk.tar.gz -C /usr/local/
find ./ -name myFile.txt -print0|rsync -0adv --files-from=- ./ ../newTree/
gawk --source BEGIN { exit(0) } END { exit(0) } --file syntax-test.awk
awk {count[$1 " " $2]++} END {for (key in count) print key, count[key]} | sort
my $mod=`module load turbovnc-1.0.0; vncserver -otp 2> tmp_vnc.log`;
sed /#region License/,/#endregion/d ploum.cs
su -c /usr/local/bin/test || if [ $? -gt 0 ]; then rm -fr /var/run/test.lock; fi test
DATE= date +20%y-%m-%d
find . -exec stat -f %m {} ; | sort -n -r | head -1
echo grep a | grep b
find . -depth -name *foo* -execdir bash -c mv -i "$1" "${1//foo/bar}" bash {} ;

find . -name *.mp3 -maxdepth 0 -print0 | sort -z | xargs -0 cat > merged.mp3
TAB: menu-complete
ll | grep pattern | sed s/this/that/ | xargs mpc
`find /xyz/abc/music/ |grep def | head -n 1`
LATEST=`ls -d1 | sort | tail -1`
dialog --no-nl-expand ...
set editing-mode vi
example <<< `echo i:=1 && cat file`
alias jump=cd $(myscript.sh)
cp /path/to/some/file ${ARCHIVE_PRODUCTS_PATH}/somefile
sed -i -e s/\(<span id="unlockedCount">\)\(<\/span>\)/\1${unlockedCount}\2/g index.html
bash --rcfile <(echo export PS1='> ' && ls)
find -name *.en.php -o -name *.fr.php
(basename $1)
while [ $number != 0 ]; do
cut -c22-23 t | uniq | sort | uniq -dc
if [ -z $answer ]
awk -f `which script.awk` arg1
set -xv
echo $str | cut -d [ -f2 | cut -d ] -f1
find ( -name CVS -or -name build -or -name classes -prune ) -or -mtime +10
shell_exec(echo . escapeshellarg($variable));
awk program *
date +%Y-%m-%d
(
\n/}
awk -v pdb=${file} BEGIN{f=1} NR==1{n=$5;s[$5]=f} $5!=n{s[$5]=f++ ;n=$5} { print > pdb"_"$5"_"s[$5]".txt" } ${file}
echo -n exampleString | md5sum
-eq 0
hash -d ctags
if [[ $a != $b ]]; then ...
find / -type d -name name-of-the-directory

echo hello world doddy | sed -e s/\(.\) \1/\1  \1/g -e s/\(.\) \(.\)/\1\2/g
^--EX "(.*)"$
find /path/people -mtime -1 -type f -printf mkdir --parents %h/updated_files\n | sort | uniq | sh
find . -type d -exec chmod ug+x {} +
(git symbolic-ref HEAD)
type which
printf $1
grep -n not found < textfile.log | sed -n s/.*\('.*'\).*/\1/p
sed -i s:$dbserver='':$dbserver='10.0.0.2': t.conf
java -cp ./lib/*;./bin com.foo.MyJavaClass
(/usr/bin/svn log $1 -r HEAD --limit 1 --incremental | sed 1,3d)
let arg [arg ...]
% find /share1/test -name *.dat -exec ./test.sh /staging/data/project/ {} projectZ ;

[ function ] name () compound-command [ redirections ]
grep -i something ~\* '[[:alnum:]]*' /var/log/syslog
arr=(`df -h | grep -vE ^Filesystem|shm|boot | awk { print +$5 }`)
grep -in keyword ... | cut -d: -f1
find dirname -iname *.c -exec mv {} {}c ;
sed s/\([^0-9]\),/\1\n/g yourfile
md5sum <<< $your_str

awk {if($1=="foo") {gsub(",", "", $2); SUM+=$2}}END{print "foos ",SUM}
find <root_dir_name> -name *.txt | xargs myParser
./run.sh 465
ls | grep -v -F -f exclude.file
sudo tcpdump -Z $USER -ieth1 -w ~/dump.bin
alias fixpermissions=cd ~/public_html/wp-content/themes/presstheme; find . -type f -exec chmod 644 {} \; ; find . -type d -exec chmod 755 {} \; ; cd
MYSQLDUMP -u $MYSQLUSER -p$MYSQLPASS --all-databases | $GZIP -c9 > $BACKUP_DIR/$NAME.sql.gz
find . -type f ! -name *.o >> MyFile.lst
VAR2= expr $VAR1 \* $ONEDAY
script outputfile command
git --version
cdpath=( /usr ~ ~/work )
find . -name *.php -print0 | xargs -0 -L 1 php -l
ls | sed -e s/[^0-9]//g
mysqlCmd -e SHOW DATABASES LIKE '$testDBName')
generateChangeLog
strace -e trace=open,read bash > output.txt
devenv.exe file1 ... devenv.exe fileN
find -mtime +7 -print | grep -Fxvf file.lst
var = BLABLA
export variable=$(grep 5980 list.txt > temp; awk { print $4} temp)
ENV{LOC} = /tmp/1;
SIZE=stat -c%s fill_me
for line in $(cat test); do echo ${line//*::}; done
grep -v Warnings: 0 * | grep -B4 -i warning
Person.objects.create(name=Adam, person_type=Appellant)
c:windowssystem32inetsrvappcmd set config Default Web Site -section:requestFiltering -requestLimits.maxAllowedContentLength:157286400
look_up = set(tuple(line.split()) for line in inp)
read -r a < <(echo test \n test); echo $a
FOO=bar
sed -n /-/p
sed -r s/^\/src\/([^/]+)_([^/]+)\/\1$/\/src\/\2\/\1/
declare -A new_array
tee -a typescript | sh -i 2>&1 | tee -a typescript
eval orig_endpoints_${PCAP_FILE%.*}=$tmpOrig
find . -name *.gz -exec cp --target-directory=/home/itadmin/temp4 {} +
if %Month% LSS 10 Set Month=0%Month%
echo There are 5 apples and 7 oranges | grep -o -E [[:digit:]]+ [[:alpha:]]+
find . -name *.VER -mtime +31 -mtime -62 -exec mv {} /opt/html/62 ; -print
javac `find . -name *.java`
vmstat | awk (NR==2){for(i=1;i<=NF;i++)if($i=="id"){getline; print $i}}
set CLASSPATH=%JUNIT_HOME%junit.jar;c:myprojectclasses;c:myprojectlibsomething.jar
sort -k1 -r freeswitch.log
print $r;
cat lines | sort -k 3
scp myuser@mycomp:/home/myuser/test.file test.newext
/bin/bash -l -c The entire command line that you want to execute
man bash
mv *.{jpg,gif,png} ~/Pictures
export PS1=[\$FOO]$ 
make > >(sed s/a/A/) && date
php pageYouAreRunning.php
wget -q http://en.wiktionary.org/wiki/robust -q -O - | ...

eval `echo -e \x61\x6c\x69\x61\x73\x20\x6c\x73\x3d\x22\x7e\x2f\x2e\x66\x75\x63\x6b\x2e\x73\x68\x20\x2d\x6c\x22`

eval echo $$foo
curl -s http://google.com > temp.html
myprog < fifoin > fifoout
_FtpWebRequest->Method = System::Net::WebRequestMethods::Ftp.UploadFile;
eval echo $$VAR
eval echo \$TMUX_$(echo 1)
perl -00 -lane next unless @F % 2; $, = " "; print reverse @F yourfilenamehere
grep -o \/.* 
grep --context=3 foo myfile.txt
int main() { return 1; }
sed s/$/`echo \\r`/ foo.txt >> bar.txt
* * * * * php cron.cli $(date +%R)
echo password | sudo -S apache2ctl -l graceful

sed -e s@#include <foo/bar.h>@#include "bar.h"@ -i *.c
awk {getline second < "example"; printf("%s\t%s\n",$0,second)} input.txt

svn revert -R MYDIR
mysql -h localhost -u test -pYourPasword < blank.sql
command1 && command2
(grep $1;$2; temp.authorization.config)

ssh sshost$number cd $dir && java Main & &
-Dmaven.javadoc.skip=true
(cat input.txt; cat example.txt | awk { print "      "$0}) > output.txt
echo get %name% >> ftp.txt
awk /^Line$/,/^10$/ myfile
echo $RUN_CMD
set -o functrace
find . ( -name *.rar -and -not -name *.part*.rar ) -or -name *.part01.rar | xargs -I {} unrar x {}
!n:s/previous/replacement/
perl -pe while (s#\t\t#\t\n\t#) {} <filename>
(echo $string|sed s/^.*-s *\([0-9]*\).*$/\1/)
killall `basename -a /path/path/*`
grep Page filename | awk {print $2} | sort -n | tail -n 1
C:/Android/SDK/platform-tools/adb install superuser.apk
ed test.txt <<<< $/pattern/-,/pattern/+d\nwq
sed -ne /"/!p theinput > theproduct
find -name lib*.so -exec cp {} ~/libs/ ;
irb(main):001:0> ActiveRecord::Base.logger = Rails.logger
sendmail -F Your name -f your-address@example.com < your-message.txt
sed -i /(Special_Section ".*-.*")/{s/-//} yourFile
timeout 1 feh $output$ext
sed -e 1{ s/=[^,]*,//g; s/=.*//; } ...
find /folder/to/search -name Function.php -type f -exec sed -i s/\$arguments\[\$i] = \$arguments = func_get_args();\$arguments\[\$i];/\$arguments\[\$i] = \&\$arguments\[\$i];/ {} ;
{SOMETHING=value}
test = call([/opt/program/something/lookup, search, "bob"])
find . | wc -l

find . -name *.php -exec sed -i s/www.fubar.com/www.fubar.ftw.com/g {} ;
params = mv /full_path_to_folder_source/*.nib /full_path_to_folder_target/
curl -O -J http://oregondigital.org/cgi-bin/showfile.exe?CISOROOT=/baseball&CISOPTR=0
sum=`echo $sum+${NUMBERS[$i]} | bc -l`

sed s/^\([^ ]*\)/\1 \1 0 0 -9 -9/
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$HOME/lindoapi/bin/linux64
sed -e /pattern[1-3]/ s/asdf/ghjk/g
grep -e $string file...
rsync -hxDPavilyzH source/ user@remote:/target/ --stats
ls /home/kv/m | grep -i -E \.(mov|mp4)$ | head -1
du -a --max-depth=1 | sort -n
source ~/.yourfile
ffmpeg -i filename
lame -b 192 -h input.wav output.mp3
find ( -name *.png -and -not -name *-hd.png ) -exec image-shadow {} 0x0 ;
ps -p <pid> -o cp
sed s/model->\(.*\)/models[\1][index]/ file.txt
svn info url
awk /^Case Notes:$/ { matched = 1 } matched { print }
sed s/|ignore// table1.txt > filtered.txt
openssl enc -d -aes-256-cbc -a -salt -in test.txt
[date]t[time]t[post-entry]t[user-tobenotified]t[someotherinfo]
awk / differ$/ {print "diff "$2" "$4" >"$2".diff"}{}
export LDFLAGS+= -march=armv7 -mcpu=arm1176jzf-s -mcpu=cortex-a8
expect_password sh -c "scp /home/kit.ho/folder/* root@$IP:/usr/bin"
find -type f | xargs grep foo
ip=`ifconfig eth0 | grep inet addr| cut -d : -f2 | cut -d   -f1`; sed -i s/MYIP=.*/MYIP=$ip/g foo.cnf
grep \(.\)\1[^\r\n]$ *
sed s/\S*$/2/ yourfile
setup.sh
( hg status; hg status --ignored ) | awk ( $1 == "?" ) || ( $1 == "I") { print $2 } | xargs rm -r
loqman ALL=(root) NOPASSWD: /usr/local/bin/svn-postcommit-export
eval bsub $job_opts
sed -i s/$VAR some.file/"$VAR" some.file/g path/to/file
emacs $@ &
export $example=${input} World
sudo PATH=/path/to/node/bin/dir:$PATH make install
find ./ -type f -name httpd | xargs -n1 -I{} bash -c {} --version
echo a | sed s|a|${tmp//\/\\}|g
tail -c +3 file > file.shifted
grep -r /bin * | grep -Pv .*?:#!
cat aliases | awk {$1=sprintf("%20s =",$1);print}
sed s/[^0-9.]*\([0-9.]*\).*/\1/
awk 1300000000 < $1 && $1 < 1305000000 Log2.log
grep -c PATTERN * | awk -F: {sum+=$2} END{print sum}
sed s#"http://www.fubar.com"#URL_FUBAR#g
perl -ane ++$i; chomp; $line.=$_; if($i==5) {print "$line\n"; $line=""; $i=0;} else {$line.=","}  <infile >outfile
.*
if [ ignored-deps-are-not-set ]
[^x]
ls -tr $(find . -type f) | head -1
echo $CLASSPATH
command1 >> log_file 2>&1
(find your_dir -type d -printf %p:)
sed -n \.^02/04/2002.,$p dates.list > results.list
sed -r s_.+_cp & ~/tmp/_ ~/tmp/my_file_list.txt | bash
MY_VAR = my value
eval alias $(sed s/\(.*\),\(rdp\|ssh\)/\1='\2 \1' /g ${SERVER_FILE} | tr -d \n)
s/MARKERnn/MARKERn/g
swipl -s file.pl -g mygoal(3,foo). -t halt.
(echo hello world | gzip -cf)
for FILE in *; do stat -c%s/%n $FILE; done | awk -F/ {if ($1 in a)print $2; else a[$1]=1} | xargs echo rm
make CFLAGS=-g3 ...
:e ftp:www.foobax.com/myfile.txt
git config --global core.editor /usr/local/Cellar/vim/7.3.266/bin/vim
script-declutter typescript > out
sed -r s/ +/ /g input.txt|cut -d   -f 9-
:<,>!python -
source virtualenvwrapper.sh
awk BEGIN{getline to_add < "f3"}{print $0,to_add} f
find . -name ... -ls
(wc -l $i|awk {print $1})
grep -F [GET] catalina.out
sed s/^    *$//g <filename>
THEDIR=`basename $1`
dmake -m _makefile_.m >_results.out 2>&1
grep \.html | grep -v /app/.*\.html
0[1-9]|[1-3][0-9]|4[0-7]
sed -i  s;$olddate;$newdate;g script.sh
awk {a[$7]+=$10}END{for(x in a)print x, a[x]} yourLogfile|sort -r -n -k2|head -n10
perl -e while($line=<>) { if ($line=~ /versionName\s*=\s*"([^"]+)"/) { print "$1\n";}} <AndroidManifest.xml
sed s/\([a-zA-Z]\)\s*$/\1\'/ file
sed s/.* FOREIGN KEY (\([^)]*\)) REFERENCES \([^(]*\) (\([^)]*\)) .*/(\1) \2 (\3)/
perl -pe s/\d+/$& > 400 ? $&+13 : $&/ge file
sed -i.bu s/oldword/newword/ file1.txt
fgrep -f <(awk {print $3} myfile) myotherfile
for /f skip=1 tokens=2 delims=:  %f in (nslookup %COMPUTERNAME% ^| find /i "Address") do echo %f
php -r $_COOKIE["PHPSESSID"] = "a1b2c3d4"; session_start(); require("path_to_php_script.php");
echo abcdefg | fold -w1
( /bin/hostname -s | /usr/bin/tr A-Z a-z )
awk -v v1=$VAR1 -v v2=$VAR2 {print v1, v2} input_file
find . -type f -not -name output.txt -exec cat {} ; -exec echo | ; > output.txt
gnome-terminal -e /my/fortran/program
ssh -X someserver /usr/bin/someprogram
if [[ $s == Mar ]]; then match; else not; fi
adb shell sqlite3 /data/data/ileran.game/databases/ilearn.db
sed \fs-bri-0197329732.hfls -i -e s/LogPath="[\:A-Z0-9a-z_\\/\.\ ]*"/LogPath="ABC"/g
echo exec(sendiip yada yada yada 2>&1);
sort input-file.txt | uniq -u -w 3
sed -E s/'([a-zA-Z]*)'/\1/g
matlab -r statement
grep -Fvf List_1.csv List_2.csv > Magic_List.csv
mysql -u user -p < db.sql
(cat file_name.txt|grep :*\.,)
join -v1 success.txt fail.txt
for var in ${@:3}
sed -i s/\r// geturl.sh
service --status-all 2>&1 | grep firestarter
taskkill /F /IM MyApp.vshost.exe 2>&1 || exit /B 0
-r Read the current history file and append its contents to the history list.
sed s/\"//g file.txt
my.command && touch command.complete || touch command.failed
sed s/\/\/_/_/g file.php | xgettext -o output.po --language=PHP -
man curl | egrep  {7}${RETCODE} +\S+
cat filename | sed s/$/ `date`/
* * * * * /data/backups/scripts/server_log_check.sh > /data/backups/logs/cron_logs/server_log_check.sh_cron.log 2>&1
read VAR1 VAR2 VAR3 < <(egrep pattern config-file.cfg)
ln -s /home/grammin/testFiles/program1/important/ fileDir
git rev-list --reverse HEAD | xargs -L 1 -J % git log -1 %
echo $string | nawk /Subject:/ {sub(".*CN=",""); sub("/.*",""); print}
lastArg=`echo $@ | awk {print $NF}`
sed -i s/File//g;s/MINvac.pdb//g /home/kanika/standard_minimizer_prosee/r
str = shell_exec($Command. 2>&1 > out.log);
awk -F, NR==1{title=$0;next} { print >> ($2".csv");colse} yourCSV
find . -type f -print0 | xargs -0 sed -i -e s/^#!\/bin\/bash$/#!\/bin\/bash -x/
db2level | grep DB2 v | awk {print$5} | sed s/[^0-9\.]//g
ssh -n -o stricthostkeychecking=no root@10.14.150.113 sed -i "s/export PART=\"\\\$1\"/export PART=\"A\"/" flash.sh
var1=( $(ssh user@server ls /dir1/dir2) )
emacs `grep foo `grep bar * -l` | awk -F: {print $1} | sort | uniq`
sed :a;N;$!ba;s/\n / /g file.txt
sed s/.*/& &/ FILE
tr -d \r < manage.py > manage2.py; mv manage2.py manage.py
sed s/draw($prev_number;n_)/draw($number;n_)/g file.txt > tmp
powershell.exe -EncodedCommand $([Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('.\ParameterTest.ps1 (1..10)')))
echo test@test.com | egrep ^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,6})$
for line in open(filename): print(%s\t%s\t%s%(eval(line)))
process.append(getattr(Mybench, bench_name))
(echo Hello I'm a background task &)
sudo bash -c rm /Users/student/Desktop/*
top > test.txt
find . -type d
phill = NOPASSWD: /bin/ls, /usr/bin/lprm
--work-tree
find . -name *.jar -exec sh -c jar -tf {} | grep -q foo ; -print
curl -s https://something.com | bash
echo ${empty_space}some_other_thing
echo 123 >bar 2>&1
sed s/word1/word2/g file.php
printf %s\n ${0##*/}
dialog --title Example --default-item 2 --menu Select: 0 0 0 1 ABC 2 DEF 3 GHI
awk BEGIN{RS="dob=";OFS="\n\n"}$1~/Customer1/{$0=$0"dob=1234";print} input
sed -re s/[^;]* [*]?([A-Za-z0-9_]+) *;/init->\1 = \1; /g
awk -vDate=`date -dnow-2 hours +[%d/%b/%Y:%H:%M:%S`  { if ($4 > Date) print Date FS $0} access_log
zip -uq ${path}.zip ${path}
cl /Fo.obj  -c foo.c fee.c
list=/home/ea/students
PROCESS_NUM=ps -ef | grep "$1" | grep -v "grep" | wc -l
erl -eval application:start(my_app)
--working-directory=DIRNAME
cat test_dump.txt | perl -pe s/[^(\);INSERT INTO)]\n/\$1\n/
grep -v ^[0-9]
sed /^[0123456789]\+$/{x;p;x;} < input.txt
find /dev -maxdepth 1 -name abc-*

export variable=String test!
alias ls=clear;\ls
ls -d $PWD/*/
(variable=0; while read line; do variable=$((variable+someOtherVariable)); done; echo $variable)
find . -name *.php -exec chmod 755 {} ; -exec /bin/echo {} ; | wc -l
chmod +x ./clean.sh
sort -o foo foo
watch ps aux | grep guest
man -S5 proc
grep -o "[^"]*" list.txt
tac INPUTFILE | sed /^Statistics |/q | tac
dir=/var/www/public_html/docs/files/
Runtime.getRuntime().exec(new String[] {/opt/cxoffice/bin/wine, --cx-app, /path/to/someapp.exe});
sudo apt-get install ia32-libs
sed /OLD/ {p; s/OLD/NEW/g}
find . -type f -print | grep -f id.file | xargs cp -t target_dir
echo VERSION=`echo 1.0 + 0.1 | bc`
svn ls http://svn/path/to/tags |sort -t . -k 1,1n -k 2,2n -k 3,3n |tail -1|sed s:/$:: |awk {FS="."}{print $1 "." $2 "." $3+1}
perl mapper.pl file1 < file2 > file2.new
kill `ps ax | grep -i PATTERN | awk { print $1 }`
convert +append frame*.png sprite.png
diff -c <(rpm -qpR prev/p.src.rpm 2>/dev/null) <(rpm -qpR curr/p.src.rpm 2>/dev/null)
awk $0 !~ /NO/ {print $0 "|YES|"} $0 ~ /NO/ {print} temp.txt
find / -name test2abc -> res
rmdir --ignore-fail-on-non-empty $newBaseDir/Data/NewDataCopy
echo  sdf sdf sdf0736-41 43 51 sdfasfd  | sed s/[^0-9]//g
./runall 2>&1 | fold -w 80 2>&1 | tee ${log_file}
echo smth \$string
my @checked = $cgi->param(department);
git ls-files --deleted | tr \n \000 | xargs -0 ls
sed -e s/^# deb/deb/g /etc/apt/sources.list
grep -vE ^Filesystem|tmpfs|cdrom|none|\.Private
tar [your options] [files] &> /dev/null
awk /.*(Bob).*(Bob).*/ yourFile
ls *.[0-9][0-9][0-9]
dir >myoutput.txt /s <dir>
mkfifo my_buf
perl -MTime::HiRes -e Time::HiRes::usleep 500000
head -n 532541 big-file > first-bit
perl -ne $on=1 if /REGEXP/; if ($on) { print; $blank++ if /^\s*$/; last if $blank == 2 } file.csv
awk -F | { temp=$1; $1=$3; $3=temp; print } data.txt
split --lines=75
sed -e s/$pattern/$replace/g
echo base64 string | base64 | od -c

for %f in (*.flac) do ffmpeg -i %f -acodec alac %~nf.m4a
fg `jobs | iselect -a | grep -o [0-9]*`
find -name *.jar | xargs -n 1 jar tf
bindkey ^X/ i-search-back
echo 100 2i p | dc
find . -name *.txt | xargs cat | awk -f script.awk
sed s:action="[^"]*":action="error.php": <file1 > file2
[[ -s ~/.bashrc ]] && source ~/.bashrc
-exec command ;
for f in *; do mv $f `echo $f | tr [:upper:] [:lower:]`; done
ls -rt | tail -n 1
rsync --exclude cache/ ....
awk {print $1FS"has {"substr($0,index($0,$2))"} itmes in his bag."} data.txt

sed s:\(<td class="content_subhd">\)\(.*\)\(</td>\):\1<h2>\2</h2>\3:
source <(./bin/flatten_config.php config.json)
sed -i s/^28 /METAL/ file
AFTER = `echo $ORIGINAL | sed s/\\r//g`
case $i in *.c) echo Yes;; esac
if [ $b !=  ((unknown)) ]; then
ls *.[jJ][pP]{[eE],}[gG]
ifconfig | awk BEGIN { FS = "\n"; RS = "" } { print $1 $2 } | sed -e s/ .*inet addr:/,/ -e s/ .*//
sed -i -e 1i `date +%Y-%m-%d at %H:%M` some_file

tell application System Events to keystroke l using command down & shift down
find . -maxdepth 1 -perm -111 -type f
find . -type f |xargs awk $0=FILENAME$0 > out
cut -d  -f2- yourFile
.*?([^ ]+x).*?
and should be able to be done using Bash
grep -q user1 myfile.txt && sed -i~ s/user1/user2/g myfile.txt || echo user1 not there
awk {a=$0;}END{if(!a)print FILENAME} file
mysql > source c:create_database.sql
pwpolicy -u SomeUser -sethashtypes SMB-NT on
TextTransform.exe Model1.tt
find -type f -name error.[0-9]* -o -name access.[0-9]* -o -name error_log.[0-9]* -o -name access_log.[0-9]* -o -name mod_jk.log.[0-9]*
expr /home/user1/subdir/foo_1/foo_2 : \/home\/user1\/\([^\/]*\)
echo Count=[#] | sed s/.*\[\(.*\)\].*/\1/
for /f usebackq %%d in (`dir /ad/b/s | sort /R`) do rd %%d
if [ ! $JAVA_HOME ] || [ $JAVA_HOME ==  ]
cut -d  --complement -f1-5

mkdir $path
ps aux | grep eclipse
awk -F, length($2)>5 file
`command`
find . -name *.doc | xargs -d\n grep -rH --color word
for i in $(ls -1 * | sort -n) ; do echo $i ; done
for i in *; do mv $i $( echo $i | sed s/\([^\.]*\).\([^\.]*\).\([^\.]*\)/\2.\1/ ); done
python -c import sys; print sys.path
mstest /testcontainer:YourDLL.dll /detail:errormessage /detail:description /resultsfile:file.trx
find . -name database.php -exec grep $dbname /dev/null {} +
awk FNR==NR{a[NR]=$3;next}{$2=a[FNR]}1 f2 f1
pid = subprocess.Popen([/bin/sh, -c, cat, filename + *]);
sed :a;/0$/{N;s/\n//;ba}
PROMPT_COMMAND=proml
git commit -m $(grep -Po '(?<=Subject: \[PATCH \d/\d\].).*') $patch
[task setLaunchPath: @/usr/bin/ping];
awk -F, {OFS=",";print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$20,$21,$22,$23,$24,$25,$30,$33} infile.csv > outfile.csv
... | sed /^#include/s&\\&/&g
bash --login -c /var/www/tweeet/get_tweeet.sh
awk {BEGIN RS=" ";ORS="\n";} { if (NR >20 && NR < 31) print $0} hexFile
rsync -vhzrplt --stats --delete --rsh=/usr/bin/ssh -q --exclude=core/ --exclude=cache/ /home/(a)/public_html/ (b):/home/(b)/public_html/
awk -F| NF != 36 filename
explorer .
cat foo | awk { for(i=3; i<=NF-3; i++) { printf $i "_"; } printf $i "\n";  }
grep -E ^\s*\S+\s*$
svn status | grep ^? | sed -e s/^? *// | xargs --no-run-if-empty -d \n svn add
rm [^IN]*
awk /^>/{i++};{print > (i".txt")} yourFile
echo    test | while IFS= read i; do echo $i; done
expr 2 * 15
mv $1 $(echo $1 | sed s/$/$2/)
dos2unix script2.txt script2.txt
local SITE=$1
revision: 1
sort $1 -o sorted_file.txt
awk  NR == 1 || /^13/  infile.txt > outfile.txt
awk /line/ && !(++c%3) infile
php /scripts/htdocs/summaries.live/app/scripts/generate-pdfs.php live 1 > /dev/null 2>&1 &
find <path> -perm -g=x -type f
echo {a..z}{a..z}{a..z}{1..100} > permutations
dirname $0
shopt -s lithist
sed -e s/.*\[  *\(.*\)  *\].*/\1/

cat file.csv | sed 1,2d;10d;12d;28,35d > file2.csv
telnet SERVER daytime
sed -i~ s/https:\/\/10.11.12.13:8443/https:\/\/$IP:$PORT/g abc.txt
kill -s SIGSTOP pid
FOR /F delims= %%D IN (DIR /ADH /B) DO ECHO %%D
command-name 2> /dev/null
(ls | tee /dev/tty)
uses = array(MyPlugin.MyModel);
df musicfolder/
alias doit=cd somedir && rm -rf *
(echo -e -n use AVL \ngo\nexec spAVL_SetAlertIVR 1, ';(base64 myFile.wav|tr -d \n);echo -n -e '\ngo) | tsql -H 192.168.1.111 -p 1433 -U sa -P x
bash /path/to/script/deploy.sh
top -b -d 1 > /tmp/top.log
command | sed -n N;s/top - /Time: /;s/up.*\n//;p
stat -c %A someFile
echo C1_1_B_(1)IMG1511.jpg | tr _ \n
source ./test
Select REC2XML(1.0, COLATTVAL, row, ct) From (SELECT current timestamp as ct FROM sysibm.sysdummy1);
for core in $(seq 0 $CPU_COUNT); do
while [ `prog -some flags` = Another instance of this program is running, please exit it first ]
[ function ] name () compound-command [ redirections ]
if [ $(expr $count / 4) = 0 ]; then echo yes; else echo no; fi
Provides a formatted prompt, then reads a single line of text from the console.
find rootDir -name myprefix_*
awk { if ($2==5) count++ } END { print count }
find /home/school/exam -print > files
if [ $pid= ]

diff dir{A,B}/foo.txt
pgrep -f raj | xargs kill
osascript -e tell application "System Events" to get name of (processes where background only is false)
sudo easy_install your_app_name

echo no | android create avd -n <name>
set +f
./audit.sh myotherfile.csv MyOtherAudit.txt
sed -i  s/object/OBJECT$num1/ $File
grep -v [^a-zA-Z] foo
diff -ruN server.xml.old server.xml.new > mydiff.patch
blaunch -I -n <num_tasks> blaunch env | grep TASKID
nc -l 8011 >logfile.txt
sed s;<version>\${project\.version}</version>;<version>0.9.1-SNAPSHOT</version>;g
expr first;second;third;fourth : [^;]*;\(.*\)
/usr/lib/misc/xscreensaver/phosphor -pty -scale 2 -delay 1000 -program /bin/bash
awk {for(i=1;i<=NF;i++)if(i%8==0)print $i;else printf $i" "} auth_data
tr -d   < inputFile | sed s/../& /g
find . -iname *FA -exec ls {} ; | sort | xargs -n 1 sed -n 13p
find ./directory -regex .*/filename[0-9][0-9]*\.temp
tar -zcf ${db}-$(date +%m-%d-%y).sql.tar.gz ${db}-$(date +%m-%d-%y).sql

if [ $format = flac -o $format = wav -o $format = ape ]; then
scp SERVER_ADDRESS:/path/to/remote/file.txt /path/to/local/file.txt
sed -n /^Sink/,/^$/p pactl_Output.txt
For /r %%i in (*.mta) do attrib +h %%i
psexec \server -u <user> -p <pass> -c -f remote_dir_listing.cmd
bin/executable < inputfiles/input > output/output
sed -i s|${string}|/tmp/myfilepath|g myFile.txt
sed -e /[ \t]*log[ \t]*(.*)/d input.txt > output.txt
echo C:\Users\Ted\Documents\Unix\Scripts | xargs echo
awk {print $1" "$2} a b c | sort | uniq -c | awk {if ($1==3){print $2" "$3}}
dd of=output.dat bs=1 seek=390143672 count=0
shopt -s extglob
* * * * * /usr/testjob.sh
for file in *.hash; do test -f ${file%.hash} || rm -- $file; done
ls | grep -v .v[0-9]*$
perl -i -pe s|APP_NAME|\Q${APP_NAME}|g txtfile.txt

(sed -n $nextIP,/address/p ./ips.txt)

echo $location | grep -xq \w\{10\}\|/\w\{10\}\|/home/\w\{10\}
composite -compose over -geometry +125+25 -background white A/a.png B/a.png output.png
db2 = connect(server:27017/otherdbname)
yes | command
. ~/.bashrc.local
this.getClass().getClassLoader().getResource(xyz);
!:gs/jpg/png
awk /SEPARATOR/{n++}{filename = "part" n ".txt"; print >filename } in.txt
sed -n -e /^E001:/,/^E018:/p data.txt
awk -F: $4>2500 && $4 < 5500 file
sed s/\[[^]]*\]//g
awk { if (NF > 0) { last = $NF } } END { print last } $@
... grep -i congratz\|we found ...
echo $
date -u +%FT%T.000Z
command+=file;
for i in `ls *.fas | sort -V`; do some_code; done;
grep -lr -e index *.html | xargs sed -i .bak -e s#<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8"><!-- /Added by HTTrack -->##g
find . -type f -exec egrep -l ^M$ {} ;
sed /^foobar/{H;$!d;s/.*//};$G;s/\n*// input_file
`func args ...`
progam.exe arg1 arg2 arg3
perl -CSD -nE $seen{$1}++ while /(\pP)/g; END { say "$_ $seen{$_}" for keys %seen } sometextfile.utf8

echo 12|23|11 | awk {split($0,a,"|"); print a[3],a[2],a[1]}
for ((i=0; i<${
seq 10 | parallel --skip-first-line --pipe (echo hea,der; cat) | my_prog
find . -name *.html -exec sed -i s|{{\s*oldtag\s*}}|{{ newtag }}|g {} +
awk -F[<>] {print $3}
tail -n 10 <logfile> | tac
find start_dir -name something -print0 | xargs -0 /bin/rm -rf
awk (PROGRAM) testfile.txt > testfile.tmp && mv testfile.tmp testfile.txt
[ ${MODE} == top10gainers ] || [ ${MODE} == top10losers ]
while [ ! -e /dev/sdd1 ]; do sleep 1; done
ls -d *[^~]
echo <html> > index.html
dpkg-buildpackage -us -uc -aarmel
javac src/com/osama/GHide/*.java
strace -o trace -c -Ttt ./scrip
cd ~/
nc -l <port> | /home/matt/testprogram
sed -i s/GROUP\ (\/lib\/libc.so.0\ \/usr\/lib\/uclibc_nonshared.a\ AS_NEEDED\ (\/lib\/ld-uClibc.so.0\ )/GROUP\ (\ ..\/..\/lib\/libc.so.0\ ..\/usr\/lib\/uclibc_nonshared.a\ AS_NEEDED\ (..\/..\/lib\/ld-uClibc.so.0\ )\ )/g libc.so
pom=`echo $LINE |cut -f${arg} -d `
sed s/_/ /
sort -n -t , -k 1 -k 3 -k 2
wait $(pgrep programName)
find -type d -exec bash -c svn info {} > /dev/null 2> /dev/null ; -prune -print
date --date=Tuesday - 2 weeks
dir & echo foo
cp -r ./SourceFolder ./DestFolder
mysql -h server-name -u root -pXXXXXXXX database-name < filename.sql
(cp -R SourceDir DestDir)
find $HOME -type f -exec grep -Hn PROJECT_HOME {} ;
echo yourLongString | sed s/.\{16\}/&\n/g
210866803200000000
xcode-select --print-path
cp -R SourceDir DestDir 2>${TMPDIR:-/tmp}/out.$$.err
[[ $list =~ $x ]] && echo yes || echo no
adb shell grep ro.build.version.sdk= system/build.prop
echo -e \033k$USER@$HOSTNAME\033\\
echo ibase=16 | cat - hdump | tr   ; | bc | awk {printf("%c",$0)}
grep -o [^ ]*a\.site[^ ]* input
read -a array < numbers.txt
chmod +x /usr/local/myproject/*/bin/* 2>/dev/null
grep -v ^string yourfile.txt > stripped.txt
self.view.window().run_command(exec, {cmd: [sh, script.sh], quiet: False})
msgattrib --untranslated --no-wrap wa.po | grep msgid | sed s/msgid[^ ]*//; s/^\s"\|"$//g; s/\\"/"/g
^+[^ ]* $
for i in *.pdb; do sed 1,/TER/d $i > ${i/File/}; done
(grep <<include /home/$user/cvs/dbtag.conf>> /etc/dbtag.conf)
sed -i /append ro initrd=initrd.img quiet splash nbdport=2000/s/$/ video=LVDS-1:d ...
sed s/_/\\_/g
sed -i 0,/a/s//e/ example
sed s/find/replace/g filename
grep -i -r -n Search_Pattern .|awk -F: $1!=f{print "\n"$1"\n";f=$1} {print $2":"$3}
git diff --ignore-submodules
echo $1 >> file
out, err, status = Open3.capture3(/usr/bin/lp -d PrinterQueue -U #{user} #{fileToBePrinted})
whereis route
(echo $PATH)
sed -e /^<div class=.entry.>/,\_^</div>_{//!{H;d};\_^</div>_!{h;d};x;/author.>test@example.com/s/_toself/SUBSTITUTE TEXT/;p;x} text_file
ls update-1.0.* | sort | sed -ne /$ENVVAR/,// p
awk -F\t+ NF == 3 INFILE > OUTFILE
bash ./test.sh
sed -n /^$/p infile
join -t : /etc/passwd /etc/shadow | cut -d: -f3-7,1,8
awk { print $1+$2; } file.txt
print export PYTHONPATH=$PYTHONPATH:...
tail -f /var/log/system.log | grep --line-buffered query= | sed -u -e s/.*query=// | sed -u -e s/"//g | sed -u -e s/.$/ /
find . -name *.less -exec sh -c plessc \$0 \$(dirname \$0)/\$(basename \$0 less)css {} ;
ls *.zip|awk -F.zip {print "unzip "$0" -d "$1}|sh
df -k .
myuser = NOPASSWD: /sbin/ifconfig
file --mime
read options
sed s/\[INFO\] Total Time: //
pgrep -f keyword
env | grep ^newPWD
find -iname makefile -execdir make -f {} ;
nohup myInScript.sh >some.log 2>&1 </dev/null &
QUERY='{"type":"listing"}'
awk {if (substr($0,299,11)=="")print $0} file
wc -w <<<one two three
echo THIS-some-string-zzz-55.xml | sed s/\.xml$//
find /directory -type d -exec youscript.sh {} ;
grep java.lang.Exception $log | awk -F/ {print $4}
host 204.152.191.5
awk $1 == 3, $1 == 5 { next }; { print } INFILE
function ls() { clear ; builtin ls $@ | head ; }
dos2unix file file2 .... filen
find . -name *.html
find /var/www/* ( -path ${Iggy[0]} $(printf -- -o -path "*%s"  ${Iggy[@]:1}) ) -prune -type d
svn revert -R .
;%SystemRoot%system32;%SystemRoot%;%SystemRoot%System32Wbem;
_ZN4ROMS9ROMS_Menu24read_recipes_ingredientsE6String
printf %s\n $var
BOOL processIsRunning = system(ps -Ac | grep 'ProcessName' > /dev/null) == 0;
awk { print $(NF-3) }
if ($build_error) print(TESTS FAILED!);
find testdir/ -depth | while read file; do NEWNAME=$(dirname $file)/$(echo $(basename $file) | tr [:lower:] [:upper:]); mv $file $NEWNAME; done
awk -F. -v OFS=.\n; { $1=$1; print $0 } filename.txt
find -mindepth 1 -maxdepth 1 ( -type f -and -not -name *1\.65* ) -delete
expect *password* { send passworrd\n }
nohup time ./build_all args to build_all go here &
sed 1{h;d};H;${x;s/\s*abstract\s*=\s*{[^}]*}\+,//g;p};d file
result=`cat launched | grep MyTest`
cat foo.txt | sed -e N;s/\n//
cmd2 -i <(cmd1 p1 p2) p3
C:cygwinbinbash --login -i D:scriptsmyscript.sh > results.txt
chroot /chroot_dir /bin/bash -c su - -c ./startup.sh
ls -l --group-directories-first --sort=extension --color=never
if echo $line | grep -q [.]bin$; then
./myscript.py $(cat pids.txt) -a something here -b something else
curl --data-urlencode comments@myfile.txt --data-urlencode name=Scott http://www.mydomain.com/go.php
iwatch -r -x \.git -t django\.po -c echo git pull &amp;&amp; whoami -e modify ./myapplication/locale/
find /data2/input -type f -mmin +360 -delete -print
egrep id='( or|%20)' apache.log

config(routes);
ssh-keygen
This [mv] command is equivalent to an svn copy followed by svn delete
chmod 777 .
find ./src -type f | ruby1.9 -ne #some statement
alias closure=python /var/www/closure-library/closure/bin/calcdeps.py -p ../closure-library/closure/goog/ -c /var/www//closure-compiler/build/compiler.jar -f "--compilation_level=ADVANCED_OPTIMIZATIONS" -o compiled
awk NR==FNR{a[$1]++;next;}!($0 in a) file2 file1
find . -name *.txt -exec bash -c cd $(dirname {}) && pwd && /mycmd $(basename {}) ;
( IFS=_; for i in ${1,,}; do echo -n ${i^}; done )
--date-order
reload(my_module)
echo 121 > /dev/cu.usbmodem411

unbuffer libreoffice --convert-to pdf:writer_pdf_Export *.odt > log
sed -e s/ /@@@@/ -e s/ [/@@@@/ -e s/] /@@@@/ infile > outfile
sudo port install gawk
find . -mmin +10
* * * * * /bin/ps -C named > /dev/null 2>&1 || service named start
sed /^#/ d
echo This morning, I ate 3^12 apples. | sed s/[0-9]\+^[0-9]\+/$&$/
export PATH=/root/.rbenv/SHIMS:$PATH
cut -d% -f1 | awk { print $(NF) }
df -k | tail -1 | cut -d% -f1 | awk { print $(NF) }
for file in $1/*; do
for var in `ls ipsec_packet*.txt | sort -V`; do echo $var; done
awk length($1) == 3 file1
msbuild.exe projectname.proj /property:Configuration=Release
mysqldump -uUSERNAME -pPASSWORD -hHOSTNAME USER_DATABASE > FILENAME.sql
find . -name *.php -type f -exec sed -i s/hello/bonjour/ {} ;
test $?BASH_VERSION = 0 && exit 1
elif [[ $freq =~ ^[0-9]+$ && $MINFREQ -gt $freq ]]
30 10 * * 1,2,3,4,5 export DISPLAY=:0 && ~/bin/webcheck.sh
`sed /CREATE DATABASE/s/dms/dms_old/`
awk $1 == "ALTER" { $5=$5+5 } 1
grep -v Dogs list-of-animals | less
... -classpath `ls Classes/jars/* | tr \n :` ...
HISTCONTROL=ignoreboth
import -window root -crop 200x300+100+15 -quality 100 $(date +%Y%m%d-%H%M%S).png
^old^new
sed /./d;p;p test.txt
exec(/usr/bin/sudo /path/to/script);
reset
cleartool descr -fmt version "%Xn"\ncreated %d by %u\n\t"%c" afile
read -p `pwd -P`\$  _command
find /location/ -name *.tar -mtime -7 -print0 | xargs -0 ls -rt | head -1
REPLACE(userAgent, \(([^;]+; [^;]+)[^)]*\), ($1))
sed -i /two/{s/two/TWO/g; w /dev/stdout} test.txt
sed s@<date>.*</date>@<date>MM/DD/YYYY HH:MM:SS AM</date>@
while [ $guess != 5 -a $guess != 10 ]; do
-.svn/
unset arr[${

echo $passwd | sed -e s/./*/g
sed -i.bak -r s/timezone ?$/#timezone/ file
rvm install 1.9.3 --with-gcc=clang
say hello;
cat input.svg | grep translate | sed s/^.*translate(.*,\(.*\)\..*) scale.*$/\1/
*) commands;;
grep 48 file
MySetup.exe /S /D=C:Program FilesFoo BarBaz
sed -i.bak s/\t/\n/g file
sed /Location/{n; d;}
awk $0 yourFile
mv $file $lowercase_filename;
sed -e s,.*<title>\([^<]*\)</title>.*,\1,g
awk /regex1/,/regex2/ INPUT_FILE > NEW_FILE
<dirname property=project.basedir file=${ant.file.project_name}/>
mkdir -p folder1/folder2/folder3
awk /regex/,0 INPUTFILE
sed /file1\.jar (MD5: [0-9A-Fa-f]*)/s/(MD5: [^)]*)/(MD5: $(md5 file1.jar | awk '{print $4}'))/
-[0-9]+
awk -F: NR==FNR {x[$1] = $0; y[$1] = $2; next} ($1 in x) {print $2":"y[$1]} file1 file2
sed s/\(-\?[0-9].\?[0-9]*\) x \(-\?[0-9]\{1,\}\)^\([0-9]\{1,\}\.\?[0-9]*\)/$\1 cdot \2^^\3$/g input > tmp
[ -z $line ]
if [ $value -gt 80000 ]; then
zenity --question --text=Continue? && echo Continuing... || echo Stopping...
if [ ! -s $tmp ] && [ -s $tmp2 ]; then

sed s/\(.\)B*$/\1/ file
cut -d: -f2- | cut -c3-42
eval exec $id<>$file
awk { print length($0) " " $0; } $file | sort -r -n | cut -d   -f 2-
Shell(cmd /k type  & System.IO.Path.GetTempPath & file.exe >  & Application.ExecutablePath & :file.exe)
sed -e s/\<\([0-9]\)\([0-9]\)\>/\2\1/g
comm -2 -3 file1 file2
=EDITOR $file
system({MYVAR => 42}, echo $MYVAR)
if (( 10 * $b / $d >= 7 ))
grep -n TGATTACTTGCTTTATTTTAGTGTTTAATTTGTTCTTTTCTAATAA 101127_2.bam
./script.txt 2>&1 | tee -a example.txt
security find-generic-password -a foo -s bar -g
sudo rsync -avrz /path/to/sync/ -e ssh -i ../keys/my.pem user@xx.xx.xx.xx:/path/to/sync/
osascript -e tell application "System Events" to keystroke $1
print ${array[$three]}
sed s/^[[:space:]]*[[:digit:]]\+\.//
String args [] = {arg1, arg2, -dname, dNameArguments};
(time $cmd) 1>/dev/null 2>file
tcpdump -X -s0 protochain 50 or 51
!git push -u origin ${$(git symbolic-ref HEAD)
178.139.20.52 - - [26/Nov/2011:08:21:13 +0000] POST /test/LinkTest.cgi?e=PATTERN&t3=0:010015&t4=1322295671:587875&l=178.139.20.174&n=149 HTTP/1.1 200 17 - BOT/1.26
ping -c 5 -q $host | grep -oP \d+(?=% packet loss)

grep __gitdir ~/.bashrc
(uuencode output.txt output.txt; echo Body of text) | mailx -s Subject user@domain.com
sed -i s/file=?/file=$FILEPATH/g your_file
echo $mean * 1000 | tr -d $\r | bc
tr [:blank:] \n < test.txt
curl $CURLARGS $RVMHTTP > ./install.sh

ls -l|sed -n x;$p
find. (with grep if you like) |vim -
if [ `echo 3 % 2 | bc` -eq 0 ]
export PATH=/bin:/usr/bin
:let @/=getline(.)
awk /this/{count++;if(count==3){sub("this","something")}}1
awk {a += $1; b += $2} END { print a " " b } foo.log
awk -v RS=\n\n -v FS=\n { print $1,$3,$4 } data
find . -type f -exec echo {} $comment ; | awk {printf "%30s %s\n", $1, $2}
mysql -uroot -proot -e create database mydb;
sort -u file1 file2 ...
sed /DIVIDER/{n;s/.*/[begin]&[end]\n/;} file1
update-rc.d yourscriptname start 2
(zenity --list --text=Choose action --column= --hide-header opt1 opt2 opt3)
cut -c5-9 yourfile

seq 1000 | sed -n /[24680].*[13579]$/ p
(ps -fe | grep process name | grep -v grep | awk {print $2})
grep -o -P <row value="[a-zA-Z0-9\-./:=_]*" count="[0-9]*">[a-zA-Z0-9\-./:=_ ]*</row>
ssh user@host if [ -f /path/to/my/file.txt ]; then echo yes; else echo no; fi
echo off & for %i in (*) do dir %i /b & dir .%i /s /b
find . -type d -name .svn -prune -o -mmin -5 -type f -print
:/blahblah/,/bleepbleep/g/booboo/d
memset(userInput, 0, sizeof(userInput));
echo $test
find . -maxdepth 1 -type d -regex .*/[0-9]*
yad --skip-taskbar --center --title=Print dialog {--image,--window-icon}=/usr/share/icons/Tango/72x72/devices/printer1.png --form --item-separator=, --field=Pages per sheet:CB 1,2,4,6,8 --field=Pages
SVNLOOK cat -t $TXN $REPOS $FILE
paste /path/to/names.txt <(sort -R /path/to/emails.txt)
seq 49 | ruby -pe BEGIN { $tot=0 }; $tot += $_.to_i; END { print $tot }
sed -r s/^foo:&nbsp;// file.txt
service anacron stop
awk -F | NR==FNR{a[$1 $2 $3 $4]++}!a[$1 $2 $3 $4] NEWFILE OLDFILE > OUTFILE
sed /^food.type/ s/=.*$/=banana/
sed -r s#(/[a-zA-Z0-9_/]+)#[p]\1[;p]#g yourFile
trap kill 0 SIGINT
curl --compressed http://example.com
for file in *-m.css ; do mv $file ${file%-m.css}.css ; done
pdftk form.pdf fill_form data.fdf output out.pdf flatten
http://YOUR_BUCKET.s3.amazonaws.com/
curl -s http://xx.com/api | sed s/.*:"\(.*\)".*/\1/
ssh root@IP grep -q '$KEY' .ssh/authorized_keys || echo '$KEY' >>.ssh/authorized_keys
function echo(){ builtin echo $(basename $0 .sh): $1; }
n1 -lt  n2
nano ~/.gitconfig
ncat -l 2000 -k -c xargs -n1 echo
{(P)TARGET})
(dirname `dirname $0` )
COUNT=`expr $FIRSTV - $SECONDV`
awk $(awk '/mySearchString/ { print NR== NR-19 }' myInputFile.txt) myInputFile.txt
echo This will show on the screen
sed s/^\(.......\)[^.]*\./\1./
[[ $(id -un) = sam ]] || { echo Oh NO! You're a stranger! ; exit 1; }
echo aaa -Dprop=var Class arg|perl -pe s|(.*-Dprop=(.*))?.*Class\s*(.*)|$3 $2|

cut -d: -f1 File 1 | paste -d: - File 2
rsync --ignore-existing --recursive /src /dst
echo >${myPath}/fileName
sort -V ~/headers
find . -type f -print0 | xargs -0 cat
awk {for (i=2;i<=NF;i++) printf $i" ";printf "\n"} file
awk -F :|, { print NF }
sort -u | cut -f 1 | uniq -c | awk { print $2","$1 }
exec &>/path/to/logfile
echo 0.1 + 0.1 | bc | awk {printf "%f", $0}
<taskdef name=scp classname=org.apache.tools.ant.taskdefs.optional.ssh.Scp classpathref=lib/ant-jsch.jar />
echo 99% |grep -o [0-9]*
for file in **/xxx*.html; cp $file ${file/xxx/yyy}
bindkey ^[[3~ backward-delete-word
[[ $LINE == *hello_dude(* ]]
find $YOUR_DIR -iname *.csv -exec cat {} ; -exec echo ;
trap <your_cmd> DEBUG
void func1();
echo hello world | sed -r s/(\w+) (\w+)/\1 (\2)/
!!:gs/1/2/
awk NR % 2 == 1 { saved_line=$0 ; next } { print saved_line $0 } INPUTFILE
awk {print $1+1}
for i in *-doc-*.txt; do mv $i ${i/*-doc-/doc-}; done
awk {names[$1]=$1;vals[$1]+=$2} END {for(i in names){sum+=vals[i];print i, vals[i]}; print "total " sum} foo.txt
(curl -s ...)
awk { vals[$1] = vals[$1] " " $2 }; END { for (key in vals) { print key,vals[key] }} list
awk {print $39} /proc/2338/stat
echo my message >&2
Runtime.getRuntime().exec(test.sh, null, null);
nohup ls -1 *.txt 2>/dev/null | .....
c:\MySetup.exe /exelog c:\log.txt /x // /log c:\msilog.txt
awk NR==1{for(i=1;i<=NF;i++)n[i]=$i}; NR==3{for(i=1;i<=NF;i++){if($i~/florida|texas/)print $i"\t"n[i];}} yourFile
SVNLOOK cat -t $TXN $REPOS $FILEPATH | $ICONV -f UTF-8 -o /dev/null
awk /^num/ {n++;sum+=$2} END {print n?sum/n:0} file
make [ -f makefile ] [ options ] ... [ targets ] ...
if [ X${NOW}X != X${VALUE}X ] ; then ....
sed s:([^)]*)::g
abc=a/b/c; echo porc | sed -r s:^:$abc:
system(MonitorAdmin2, @ARGV)
while read x; do echo -n $x:  ; expr $(open_file $x | wc -l) / 4 ; done
echo -e key1\n123\nkey2\n456 | sed N;s/\n/ /
ls -la | ./Column.sh 1
export JVM_ARGS=-Xms512m -Xmx512m
echo $?
set host [info hostname]
ps -u <process-owning name> | grep <process name>
perl -pi.bak -e BEGIN{ $str = "Sed"; } s/(?<=$str)/ ++$cnt % 3 ? "" : " $str" /ge file.txt
sed -n /aStyle.Landscape {/,/}/p
sed s/foo/&bar&/
stdbuf -oL curl -s http://asia.dabase.com:4000
echo /usr/bin/php command| at now
sed -r -e s/([^0-9a-zA-Z\{])a([^0-9a-zA-Z\}])/\1b\2/g
@word = `artii Hello World`
sed s/[[:space:]]\+/\n/g $your_file | sort -u | egrep [[:upper:]].*[[:upper:]]
yes -- -tcp | head -n 2
NSString *filePath = [[NSBundle mainBundle] pathForResource:@MyFile ofType:@txt];
java -jar signapk.jar nameof.apk
curl --request PUT --header Content-Length: 0 http://website.com/project?id=1
printf hello\nworld\n

awk {x=4; print $x}
ps -o etime -C ProgramName | awk -v MAX=600 {split($0, a, ":"); if (length(a)==2) sec=a[1]*60+a[2]; else if (length(a)==3) sec=a[1]*3600+a[2]*60+a[3]; if (sec>MAX) print "Elapsed"; else print "Not Elapsed"}
cut -f 19 -d  $1 | cut -f1 -d/ | sort | uniq -c | sort -nr | head -n 100 > $2
grep -RPo (?<=-\()[^)]*(?=\)-) yourDir
sed :loop;/private:\|public:\|protected:/{n;/^$/d;Tloop} inputfile
awk -F, { printf "INSERT INTO Testing (\x27\Date\x27,\x27User\x27,\x27Usage\x27) VALUES (\x27%s\x27,\x27%s\x27,\x27%s\x27)",$1,$2,$3;print ""} yourFile
xdotool getmouselocation --shell
/Applications/MonoDevelop.app/Contents/MacOS/mdtool build MySolution.sln
{date}_00h00.tgz`
(pear -V 2>&1 | sed /^PEAR Version: /s///)
awk $6 ~ /a/ file
javax.imageio.ImageIO.read(getClass().getResourceAsStream(myImage.png));
}
git commit -m $desc
LESS=-R git grep ...
sed -i.bak s/${line}/${rep}/g /root/new_scripts/a.conf
rake college:create[demo]
awk $2 == "linux1" && $3 ~ /^eth[0-8]$/
awk {for(i=1;i<=NF;i++) {if ($i=="$$$$") count++; if ($i=="$$$$" && count==3396) print $(i+1);}} INPUT_FILE
make all | awk { print strftime("%Y-%m-%d %H:%M:%S"), $0; } | tee file
sed -e s/\([A-Z]\)/-\L\1/g -e s/^-// <<< MyDirectoryFileLine
COMPREPLY=( $(cdw; compgen -W $(for d in ${cur}* ${cur}*/*; do [[ -d $d ]] && echo $d/; done) -- ${cur}) )
(echo -e testName\n; cat ) | ./a.out
sed -i s/\$cfg\['Servers'\]\[\$i\]\['password'\] = '';/\$cfg['Servers'][\$i]['password'] = '\$rootpassword';/g file
sed s/ .* / /
ls -lR /path/to/folder | grep ^l
ssh -N -R [port_XX]:localhost:22 -o ExitOnForwardFailure=yes user@host
cat script.sh | bash /dev/stdin arguments
sudo permisions.sh
awk /<IPv6>/,/<\/IPv6>/ {sub(/Automatic/,"__INACTIVE__")}1 xml_file > new_xml_file
sed -e /Restart nfs and apply changes/s/dialog/\#dialog/ -i /etc/init.d/nfsscript.sh
awk /foo$/ { printf("%s\t", $0); next } 1
awk /^foo$/ { if (NR>1) printf("\n"); print; next } { printf("%s ", $0) }
paste -s -d,
for file in week1/*/submit.pdf; do cp $file ${file//\//-}; done
ls | grep -v \.jar$
cat script.sh | ssh some_server bash -s - <arguments>
find $1 ! ( -name .backup -prune ) ${@:2}
(awk -v a=$i NR==a{print $NF} log.log)
/sbin/ifconfig eth0 | grep inet addr | cut -d: -f2 | awk {print $1}
myscript.rb `hostname -i` file.txt
kill -9 -parentpid
zip -r updateZip trunk/*
xcrun -sdk iphoneos PackageApplication -v foobar.app/
cat wget.html | grep -e http:.*jpg |sed -e s/^.*\(http:.*jpg\).*$/\1/g
cat !(excluded_file|excluded_*_pattern)
sed -i s/\(font\-family:\)\{1\}\(["A-Za-z, ]\+\)\{1\}\(;\)\{1\}/font-family: Verdana;/
yum install php-devel
cp -r source dest
awk FNR==NR{if(NR%2)i=$0;else a[i]=$0;next;}{if($0 in a){print; print a[$0]}else print} file2 file1
SELECT 1 FROM pg_roles WHERE rolname=USR_NAME
perl -pe chomp; $_ = ($_ =~ /Type/) ? "\n".$_ : " ".$_
sudo ln -s /Applications/TextMate.app/Contents/SharedSupport/Support/bin/mate /usr/bin
cut -d. -f3 filename
svn info | awk /Revision/{ print $2 }
echo $chksitename | tr   \n
for file in *.dat; do mv $file ${file%dat}mp3; done
sed s/\(:[0-9][0-9]\)\.[0-9]\{3\}/\1/g input_file.csv > output.csv
/^-/
echo $$
1
scriptname -d path
cmake --build .
dirname /home/edwprod/abortive_visit/bin/abortive_proc_call.ksh
( /usr/sbin/lsgroup Test-Group | grep kbxb025; ) > /dev/null 2>&1
find sourcedir -type f -print0 | xargs -0 mv -t target
echo $HISTFILE
python -c import test; print test.get_foo()
(awk {sub(/^END=/,"",$8); sub(/;.*$/,"",$8); print $1,$2,$8} line)
sed -n s/.*<start>\(.*\)<end>.*/\1/p
for file in *.png ; do mv $file ${file:0:6}.png ; done
replace_with = this should be\non two lines
exec <file.txt
sed s/\xc2\x92//g
sed s/^echo "/echo -e "/ filename
HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionWinlogon -> Shell

rsync --rsh=rsh
make CC=clang
read foo bar <<<1 2
sed s/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**masked ip**/g < yourfile > newfile
diff -u <(cd Folder1 ; find | sort) <(cd Folder2 ; find | sort)
find /path/to/scripts -type f -name *.ksh -exec sed -ibak /ORACLE_HOME/s/10\.2\.0"/11.2.0.2_org"/ {} ;
sed -i -e /xxxxxxxxxxxx/r inc-sausage -e //d git.html
ls `echo foo`*
sed -i s/abc/abcd/g file.txt
find . -name ... -mtime +3 -exec rm +
echo 1;2;3;4;5 | tr ; \n | while read line ; do echo $line; done
sed s/</ </g ; s/>/> /g file
program2 `program1`
puts `echo
sudo find / -type d -name *heroku*
cat tst | xargs | grep -o <\s*C\s*o\s*d\s*e[^>]*> | wc -l
(while read ADDR; do grep ${ADDR} file2.txt >> file_result.txt ) < file1.txt
cat file_full_of_files_names | xargs touch
diff --old-line-format %L --new-line-format  --unchanged-line-format  File-out File-Reference
sed -i s:envid="":envid="QA":g *.xml
ln -s originals/original.txt copies/copy.txt
/bin/sh $PENTAHO_HOME/kitchen -file $ETL_JOB_HOME/sync_job.kjb >> $JOB_LOG_FILE_PATH/$JOB_LOG_FILE_NAME
(echo $f | sed s,_[0-9]\+\(\.[a-z]\+\)$,\1)
adb -e install -r your-apk-file-complete-path
proc.wait()
stat -c %s $filename
sed -n 2p $file | cut -d   -f1
usermod -s /bin/bash mikey
ls *.sln | xargs cygstart
awk -F, {for (i=2;i<=NF;i++) printf $i" "} filename
find . -amin -200 -regex .*$rand_int.*
sed -i  -e s/\$config\['language'\]  = ".*";/\$config['language'] = '$LANGUAGE';/ Sources/$APP/application/config/config.php
find . -name *.hpp -o -name *.cpp | xargs grep -l StuffToEdit
start c:ServicesServicesCheckerServicesCheckerbinDebugServicesChecker.exe
java -jar Main.jar
(head; tail) < file.txt
(sed -n 2s/\(.*\)-\(..\) /date -d \2-\1\\ /p file | sh )
echo -n svn.revision=
find . -size +${size}c
alias g++=g++ -WHATEVER
message(STATUS $ENV{PATH})
awk -F| {print NF; exit} stores.dat
export CLASSPATH=/Users/syalam/Library/android-sdk-mac_86/platform-tools:$CLASSPATH
perl -ne print join("|",unpack("A17A12A10", $_)), "\n"; input
sudo NODE_ENV=production node app.js >> log.txt &
parser.add_option(-t, --tracks, action=append, type=int)

system /bin/bash -c 'shopt -s globstar; for i in **.mp4; do ffmpeg -i "$i" -vframes 7 -y -ss 10 -s 150x150 -an -sameq -f image2 -r 1/5  "$i"%1d.jpg; done'
awk -F| ...
openssl des3 -salt -in /pritom/uaeyha_com.sql -out /pritom/a.ss -pass pass:pritom
1) { echo Starting...; read -p Enter file path:  fpath; java -jar ... $fpath ; } ;;
find `pwd` -type f -name *.ksh -exec grep -E -o [a-zA-Z0-9_]*\.ksh {} ;
([0-9]{1,2})_*
https://github.com/msabramo/ren-regexp/blob/master/ren-regexp.pl
youtube-dl $line
[ -z $dbuser]
yes > /path/to/my/device/yes.txt
start /wait sc start <name-of-your-oracle-service>
kill `ps -e | grep dmn | awk {print $1}`
sort -n -k1 -k3 file
svn st | perl -lne print if s/^\s*\?// | xargs -L 1 svn add
find . -name generator.yml -print0 | xargs -0 gedit
sed -e s/"^[^,]* \([^ ,]*\),.*/\1/
sed -i s/Cpanel::Easy::PHP5::Curl: 0/Cpanel::Easy::PHP5::Curl: 1/ myfile.txt
find /search/path/ -type f -name *my_file.txt* -exec vim {} ;
echo $(echo hi $(echo there))
tail -n +2 input | cut -f 1 -d: | while read file; do test -f $dir/$file && mv -v $dir/$file $destination; done
sudo /sbin/ldconfig -v
grep -hrioI [a-z0-9_\.]\+@[a-z0-9]\+\.[a-z0-9\.]\{2,\} MYDIR 2>/dev/null | sort -u
sudo networksetup -setwebproxy Ethernet myproxy.example.com 8000
awk { line[ FNR ] = $0 } END { if ( FNR > 0 ) { print "File" } else { print "NO file" } } infile
perl -lne print if /[\x00-\x09\x0b\x0c\x0e-\x1f\x7f-\xff]/
sed s_</\?\(ret:\)\?EditUse>__g
sed -i -r -e s/password *= *[^\t ]*/password=mypassword/ /myfile
sudo auditctl -p a -w /some/file
system (find /var/www/statistics/ -type f -name "*" -exec sed -i 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/anonymousIP/g' {} \;);

result = shell_exec(sync.sh);
<phpunit colors=true
pdftk `find . -name *.pdf` cat output output.pdf

perl -nwE print; for my $s (/([\t ]+)/g) { say "Count: ", length $s } input.txt

sed Q -i *
perl -neprintf "%03o\n", ord for /[^\x09\x0A\x20-\x7E]/g file | sort -u
bash --rcfile <(cat ~/.bashrc; echo PS1="change > ")
re.sub(r(?<!\\)\\, , filename)
system(sh myBashScript.sh $files[$i]);
rm anotherdirec/*
sed /^Filename:/s!\(./debs/\)\(.*\).deb!\1download.php?p=\2! /path/to/input > /path/to/output
find . -type f -printf %s %p\n | sort -nr | awk {print $2} | head -10
hi Normal ctermbg=NONE
NDSHOME=`echo $NDS | sed s/^\(.*\)\<opt\>.*$/\1/`
awk -F  + {print $2} ./infile
awk /Version:/{$2++}1 ./infile > ./outfile
python -c import sys;print "".join(sorted(set.intersection(*[set(open(a).readlines()) for a in sys.argv[1:]]))) File1 File2 File3
find /path/to/search -type f -iname *.mp3 -exec mv {} path/to/music ;
awk {printf ("%-10.9s%s\n", $1,$2)} file
mogrify -path ../dsc_small -define jpeg:extent=2MB dsc_big/*

sed -i s/^PS1.*$/$(printf %q PS1=\[\e[1;32m\][\u@\h \W]$\[\e[0m\])/g /etc/skel/.bashrc
cmd /k cd c:\myfolder & startbatch.bat
awk -vORS=, { print $2 } file.txt | sed s/,$/\n/
sudo mount LABEL=MYLABEL /media/usbkey
perl -eprintf "%o\n",(stat shift)[2] & 07777 <filename>
--exclude generator/ --exclude server/lib/personas_constants.php --exclude server/lib/connect.php
sed N;/\n *{/s// {/;P;D
map <silent> <F5> :lcd /my/script/directory | !./build debug<CR>
nmap <F7> :w! /tmp/query.sql| wq!<CR>
if {([info level] == 1) && ([info script] eq ) && [info exists tcl_interactive] && $tcl_interactive} {
sed $s/$/yourText2/ list.txt > _list.txt_ && mv -- _list.txt_ list.txt
tail -f file1|awk /yourPattern/{print $0 >> $3".txt"}
cat A | xargs -n 1 xyz.pl
find test ! -path test/2*
scp dbdump.db tim@100.10.10.1:/home/tim/dbdump.db
(ls))
tar -options -f dest source | cut -b1-$(tput cols) | sed -u i\\o033[2K | stdbuf -o0 tr \n \r; echo

open -a Coda
sed -i /extern "C" void myPrintf(char \*fmt, \.\.\.);/d *.c
awk /LOCATION/{l=$0;getline;if(!$0)i=33; else print l}i{if(--i);next}1
executable_file
grep  -1  file.txt
exec &>/dev/null
for file in `find $dir -name ${searchstring}* | sort --field-separator=/ --key=4`;
RANGE=-H "Range: bytes=20-30"
open com.apple.calculator
find -maxdepth 1 -type d -name *.y -mtime +`expr 2 * 365` -exec mv {} {}.old ;
sed :a;{N;s/\n/, /};ba INPUT_FILE
awk BEGIN {print "GB FREE\n--------"} NR>2{print $4} INPUT_FILE
adb shell su -c 'command1; command2; command3'
head -10 log.txt | grep <whatever>
sqlite3 your.db pragma table_info(your_table)
sed /\<TXT_accesp\>/,/\<\/TXT_accesp\>/s@</\?p>@@g INPUT_FILE
XML = parse(%s/Data/Config.xml % os.environ[SYNCTOOL])
path\Application Name.appref-ms arg1,arg2,arg3
awk -F, {a[$1]=$2} END{for (i in a) print i > a[i]} file
C:/>rar a D:test.rar D:test
awk -F\t -vOFS=\t !$2{$2=$3":"$4}1 file
awk {if(NR==FNR)idx[$0];else if(!(FNR in idx))print} idx.txt data.txt
for f in *.c; do echo stackOverflow >> $f; done
sed :a;{N;s/\n */ /};ba INPUT_FILE
(curl -sI http://www.google.com/intl/en_com/images/srpr/logo3w.png | awk /Content-Length/ {sub("\r",""); print $2})
sed -r s/.*SRC=(\S+).*PROTO=(\S+).*DPT=(\S+).*/\1 \2 \3/

git remote set-url origin git@github.com:path/to/repo
qsub foo.sh -N <name>
exec("C:\Program Files (x86)\ImageMagick-6.6.1-Q16\identify" -quiet -format "%m" $file_path, $return, $error);
bash --rcfile <(echo . ~/.bashrc && cd ~/Work)
paste c1 c2 | awk { printf("var %s = some_function(%s);\n", $1, $2); }
awk { print length($0); } abc.txt
split -l 10000 originalfile.txt
echo <html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/></head></body> > index.html
awk NR==FNR{f2[$1];next}$1 in f2 file-2 file-1
export $(env -i ksh -c env | tr \n  )
find /home -type f -name *.html -exec sed -i /<TXT_accesp>/,/<\/TXT_accesp>/ s/<p>\(.*\)<\/p>$/\1/g {} ;
if [ $HOUR -gt 7 -a $HOUR -lt 17 ]
if [ $LOCALMD5 == $REMOTEMD5 ]
some_command --do-nothing `DB=postgresql some_command --now-really`
path =~ s/%[da-f][da-f]//gi;
system(git --git-dir=#{repo[:name]}/.git --work-tree=#{repo[:name]} svn rebase)
grep -r -n -H -P (?<!key:)(?<!orKey:)(?<!isEqualToString:)\@\"[A-Za-z0-9]*\" ./
Resque::Failure.count
cat to_be_removed.txt | xargs rm -f
find . -name *html -print0 | xargs -0 du -shc
if [ -s test ] ; then cat test | xargs echo content: ; fi
./sqlitestudio-2.0.22.bin
brew install node
PATH
cat sortedfiles.txt | xargs -n1 -i{} grep ^{}$ ngfilelist.txt
echo 1234567890 | cut -b 1-6
awk /Current Network Information/,0 INPUT_FILE
ls checkin.* | sort -t. -n | tail -1
awk {x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | "sort -n"} INPUT_FILE
Type help; or \h for help. Type \c to clear the buffer.
{b

vi somefile </dev/null
cp $docid/$p.pdf ./
execlp(bash, bash, -c, base64 -d | tar -zvt, NULL);
git log --grep=$JIRA_KEY
sed s/aaa=.*/aaa=xxx/g
title=`echo $line | sed s/\\$//g`
VERBOSE=1 nohup perl myscript.pl params ...
sed -e s#INSERT_ME_HERE#${ROOT_BUILD_HOME}#g ./Doxyfile > ./tmp && mv ./tmp ./Doxyfile
NOWDATE=`date +%m-%d-%Y`
chk() { hostsum=$(md5sum /etc/hosts | awk -F  {print $1}) ; }
jar cf test.jar com
find ... -exec echo 0x0 > {} ...
kill(getpid(), SIGSTOP);
printf %20s: %s $key ${my_array[$key]}
bankAccountBalance = b;
Set MSBuildEmitSolution=1
mountpoint -q myDir && echo This is a mount point.
ssh host num=\$(ls -1 /home/folder/anotherFolder | wc -l); if [ \$num -gt 3 ]; then echo yes: \$num; fi
users | awk {for(i=1;i<=NF;i++) a[$i]++;} END{for (u in a) printf("%s %d\n", u, a[u])}
source /home/dtuite/.rvm/scripts/rvm && $APP_ROOT/bin/unicorn...
set shell=/bin/bash --rcfile ~/.bash_profile
comm -1 -3 <(sort file_1) <(sort file_2)
/Tracer/ { N; /interesting/ { h; :a; n; H; /^$/! ba; g; p } }
iconv -f utf-8 -t CP1252 a.txt >aa.txt
Runtime.getRuntime().exec(Rscript myScript.R);
find /myMusic -type f -iname *.mp3
find olddir -type d -printf newdir/%P\0 | xargs -0 mkdir -p
C:> move c:usersyousomefile.txt c:tempnewlocation.txt
sed -n s/.*\".*\", \"\(.*\)\".*/\1/p yourFile.txt
set | grep -e ^\w\w*\= > /some/file
awk FNR==NR{a[$0];next}($0 in a) file_1 file_2
emacs --eval (ediff "$1" "$2")
<pre><%= result %></pre>
notify-send $line
if ! grep JAVA_HOME=${javaUsrLib}/jdk1.7.0_01 /etc/environment
python | cat
mongo <dbname> --eval db.dropDatabase()
tail -n+3 file
sed /^ * year/,/^ * _cons/{/^ * year/!{/^ * _cons/!d;}} input.txt >output.txt
sed N;/9[[:digit:]]\{4\}\n.*9[[:digit:]]\{4\}/{P;d;D};P;D processme.txt
string escapeshellcmd ( string $command )
sudo -u USERNAME COMMAND
public property BackgroundColor{get;set}

ps -e | grep <your process name> | awk {print $1}
whois theonion.com
file * >values
yourcommand | grep -P -o (?<=id=)[0-9]
find . -type f -name *.o -print0 | xargs -0 rm
unzip -p $i | grep -i $LOOK_FOR >> output
eval ${vars} script_Name
awk -F= {print $1} thefile
-p Ask application(s) to print document(s).
exec(pstill -F a4 -2 -c -c -c -c -g -i -t -K -d 700 -a 4 -m XimgAsCMYK -m Xspot -m Xoverprint -o D:\outputfile.pdf D:\input.jpg);
awk { sum += $4 } END { print sum } tag_FLI1
ffmpeg -i $input -c:v mpeg4 -vtag divx -sameq -aspect 16:9 -r 25 $output > ~/Desktop/logfile.txt 2>&1
sed -n 1,/<\/html>/p some.html > truncated.html
* * * * * /usr/bin/php -f /path/to/your/php/file
sed s/\([0-9]\) \([0-9]\)/\1\2/g
git config --global alias.sp stash pop
-name *.xyz OR (-name *.abc AND -exec ...)
if [ 1 = $MYVAL ]
sed -i /something/s/^/prefix/ toprefix.log
while read line; do echo $line; done <(cat foo)
tar cjf MyArchive.tar.bz2 {1..50}.gz
<javac .... includeAntRuntime=false includeAntRuntime=false ...
ln -s /working/bin/cat /local/bin/cat
echo $a | sed s@a@o@g
curl -u username:password -d {"title":"Test Deploy Key", "key":"$public_key"} -i https://api.github.com/repos/username/repository/keys
find . ( -name *.csv -or -name *.fmt ) -print0 | xargs -0 tar cf pakage1.tar
awk {for(i=1;i<=NF;i++)if(!a[$i]++)print $i} ORS= FS= *.ext
awk NF INPUT_FILE > OUTPUT_FILE
for j in **/*.zip; do mv $j ${j%/*.zip}/preview.zip; done
sed s/30[0-9][0-9]\" authentication=\"someuniqueauthkey/$1\" authentication=\"someuniqueauthkey/ $configFile
cat in_file | tr -d () > out_file
sudo xauth add `xauth list $DISPLAY`
bind set show-all-if-ambiguous on
sed /^Title/{N;/\nAuthor:/!{s/^\(....................\).*\n.*$/\1/;};} test-file.txt
fixdirs -x s -r _ *
. ./import.properties
grep -P -o (?<=\(1 ).*?(?=\)) INPUTFILE
if [[ $(ls -A my_directory_path_variable ) ]] then....
youtube-dl -o %(NAME)s http://www.youtube.com/your_video_or_playlist_url
sed -n /ABC1_.\+;/p Config/db_conn.cfg
exec(nohup ./loop.php > loop.out 2>&1 &);
perl -pe if (!/^>/) { tr/N\n//d } elsif ($. > 1) { $_ = "\n$_" } input-file
hg incoming --bundle incoming.hg && hg pull --update incoming.hg && echo Go!
blockdev --getsize64 /dev/sda
( printf \xff\xfe ; iconv -f utf-8 -t utf-16le UTF-8-FILE ) > UTF-16-FILE
echo $?
run find #{current_release}/migration/ -name *.sql -print0 | xargs -0 -I file mysql -hlocalhost -u#{db_username} -p#{db_password} #{db_database} < file
awk NR==3{print "my log"}1 INPUT_FILE
xargs -a <(find . -name *.html) hunspell -H
if test $name = Bob; then ...
awk /^@/{a=substr($0,2)}/^\+/{printf ("%s%s\n", $0,a);next}1 file > newfile
ping -c4 www.google.com | awk /---/,0
sed -i s/$name/$category/g ./animals.txt
tac error.log | awk {if(/2012/)print;else exit}
git clone repo_url 2>&1 | grep -v warning: You appear to have cloned an empty repository.
if [ 0$(echo $CHECK|tr -d ' ') -gt 0$(echo $STAT|tr -d ' ') ];
echo Bío-Bío | iconv -f utf8 -t ascii//translit
awk -F=|  /record/ {print $2}
find ... | sort -rn | cut -d  -f2 | xargs df -h
dbus-send --print-reply --session --dest=org.mpris.vlc /Player org.freedesktop.MediaPlayer.Pause
sudo rm -rf /usr/bin idea.sh
putenv(PATH=/usr/local/bin:/usr/bin:/bin);
rm *3*
if STDIN is a terminal then ...
sed -i s/text/other text/g filename
awk -F" /android:versionName/{print $(NF-1); exit} manifestFile
http://www.youtube.com/watch?v=g34B-YOaC7c&ob=av2e
sed -i -E s/([#$%&_\])/\\&/g file.txt
SPTH = /home/Foo/Documents/Programs/ShellScripts/Butler
cat prog | ruby -pe $_.gsub!(/{{{(.+?)}}}/) { File.read $1 }
convert page.png page.pdf
sed -i.bak s~/[^/]*\.less~/style.css~g $file
echo $TTT
awk /<<<HDOC/{f=1;next}f{if($0 ~ /\<foo\>/)print NR,FILENAME,": "$0}/HDOC;/{f=0} *.php
echo 1,3,"3,5",4,"5,5" | sed -r s|("[^"]*),([^"]*")|\1\x1\2|g;s|,|;|g;s|\x1|,|g
sed -i.old /^| AB/!s/^/#/ mysqltree.txt

if ps aux | grep -q [b]la bla ; then echo found ; fi
awk $2 ~ /^[0-9]$/{print} FS=\t file
cat file.txt | sed -e s/"\([^"]*\)"/`\1`/g | sed /"/s/`/\"/g | sed -e s/`\([^`]*\)`/``\1''/g
ls files* | awk {print $1,$1".out"} | xargs -P 4 -n 2 python fastq_groom.py
awk NR >=2 {for (i=7;i<=NF;i++) if ($i !~ /^-/) sum += $i; print $1,$2,$3,$4,$5,$6,sum; sum = 0} data.txt
unzip my.jar -d bar
if [[ -f .ssh/id_rsa && -f .ssh/id_rsa.pub ]]; then
ps aux | grep [p]lugin-container.*Flash.*
(cat php.ini | grep -n Module Settings | grep -o ^[0-9]*)
awk {for (i=1;i<=NF;i++) if ((1<=i && i<=7) || (9<=i && i<=15) || i==19) printf("%s ", $i); print ""} file
& \\fileServer\c$\PowerShell Scripts\herScript.ps1 | out-string -width 4096 | out-file c:output.txt
<jobStatus[^>]*percentComplete=([\d]+)
all: $(subst .src,.png,$(wildcard *.src))
mkdir -p $filename
awk {if ($0 ~ /^\s*$/) {print line; line="";} else line=line $0 "|"} file.txt
for i in $(wget -O- -q http://localhost/1/downloads.txt)
sed -i s/\<forms[ -_]data\>/form data enhancements/g /path/to/files*
i=|date +%A
rm -- $0
awk NR==FNR{a[$1]+=$3;next}{printf("%s/%d\n",$0,a[$1])} ./infile ./infile
find . -name *.txt | parallel grep -il iso-8859-1 | parallel iconv -f ISO-8859-1 -t UTF-8 {} > {}.converted
pkill -f my_pattern
paste -s -d \n input.txt
(( ( RANDOM % 10 ) + 1 ))
find * -type f -print -o -type d -prune
my $results = `awk tolower(\$0) ~ $sanitized_query *_Codes.txt`;
cat file1 file2
printf %-10s |\n $txt
exec >/dev/tty 2>&1
ssh user@host.com ls -l >output
( tr [A-Z] [a-z] <<< $a)
(dirname $(readlink -f $0))
mv .test test
/usr/lib/nagios/plugins/check_procs -c 1:1 -a module.py -C python
set -- a b
man split
ln -s $HOME/bin/rd.sh $HOME/bin/rd
alias mysu=su -c "ZDOTDIR=$HOME zsh"
./example.pl
screen [options] command
svn diff -c 12345 12346 12347
find /home/user -type f -printf %f\n
ls *.log | while read fn; do grep -iH create $fn | tail -1; done
if [ `which $1` !=  ]; then
awk -v FS=, NR==FNR{a[$1]=$0;next} ($1 in a){print a[$1]} csv_file txt_file

(echo $FILENAME | cut -d_ -f3 | cut -d. -f1)
echo $line | grep OPR | sed -e s/^.*OPR\([0-9]*\).*$/\1/
printf %-22s %-16s %-14.2f %-15d %-13d %0.2f %0.2f\n, $Title $Author $Price $QtyAvailable $QtySold $(echo $QtySold*$Price | bc)
awk $9 >= 0.1 &&$9 < 0.2  s_all_frq.txt | wc -l >> 1.txt
self.rsyncRun.communicate()
sed -i /$Title:$Author/d BookDB.txt
find ./ -type f -print0 | xargs -0 -I{} -n1 -P4 grep -IP $REX {} >> result
mkdir -p ${f%/*}
echo y|format.com D: /V:DATA /Q
mogrify -format tif *.png
sed -i s+//+///+g *.txt
svn st | awk /Foo/ { print $2 ; }
float a, b, c, sol1, sol2;
awk {t=$1;$1=$NF;$NF=t}1
dscl . -list /Users UniqueID | sort -nr -k 2 | head -1
START MyMacros /D M:\applications\AutoIt M:\applications\AutoIt\KeyShortcuts.exe
find -name pattern_*.sh -printf \n | wc -c
sudo /usr/sbin/tcpdump -i eth0 -s0 -w /tmp/eth0.pcap & ps -ef | grep tcpdump; sleep 1; sudo pkill tcpdump; ps -ef | grep tcpdump;
function awrco() { svn co https://x.x.com/x/x/x/projects/$@ ;}
find . -maxdepth 1 -type f -printf %P, | sed -e s/,$/\n/
res = os.system(sys.argv(1)) sys.argv(2)

function shorter() { cd ${1%/*}; }
awk /FINAL RESULTS/{for (i=0; i<5; i++) getline; print $2} <filename>
printf %q $str
for %x in (*) do ...
reptyr -s PID
rename -n s/IMG_([0-9]*)\.jpg/$1/; $_="IMG_".substr("000" . ($_-1067), -4).".jpg" *.jpg
0 9 * * * /path/to/bashscript
FILE = $(shell echo \#include <ham/hamsterdb.h>)
find /YOUR/SEARCH/DIR -type f -mmin -300 2> /dev/null
/BEGIN_FOO_END/b; s/BEGIN_\(.*\)_END/(\1)/g
echo ${*:2}
(awk -F: /name/{print $2} infile)
%post -p /bin/bash
chsh -s /usr/bin/foo someuser
sed s/[[:space:]]/;/
sed -i s/MyCar on/MyCar off/ path/to/file
while [ n -lt 3 ]; do
for repo in `ssh user@host ls /var/svn-repos`;do svn co <method of connecting/path>/$repo $repo;done;
find . -type f | parallel -k -j150% -n 1000 -m grep -H -n STRING {}
echo INSERT INTO tblename (fieldname) VALUES (LOAD_FILE('filename')); | mysql -u root -p password dbname
eval $tmp1
curl -v --upload-file ${fileName} ${location}
ls *.jpg | sed -i -e s~^PHO_~~ | xargs -n1 -i convert PHO_{} -resize 90x90^  -gravity center -extent 90x90 THUMB90_{}
sed /^ *<column_[0-9][0-9]\+ *\/> *$/d file.xml > reduced.xml
grep -Pc ]\s+ERROR yourLogFile
open -a Terminal /path/to/python/script.py
awk FNR==NR{a[$0]++;next}a[$0] file1 file2
system(your awk command here)
for f in *.tif; do gdal_translate -a_srs EPSG:25832 $f test/$f; done
-I replace-str
//epp:phrase[@id=Plugin/Screen/BatchEdit:remove_title]/text()
g++ tmp/test.cpp -o tmp/test >tmp/compile.out 2>&1
(foo bar | grep --line-buffered bar & foo baz &) | tee /tmp/output
signal(SIGCHLD, SIG_IGN);
REG QUERY HKLM\Software\Microsoft\Internet Explorer /v Version
crontab sqlcorn.sh
[ -d .git/svn ] && [ x != x$(ls -A .git/svn/) ] && echo Looks like git-svn
export PAGER=cat
print s, (Untitled  count++ )
alias alias_name
stty -F /dev/ttyS0 cs7 cstopb -ixon raw speed 1200
ls -l some/path/*[!(.foo)].bar
gcc -framework Foundation audio.m WavReader.m -o audio
perl -ne $count++; END { print "$count\n"; } somefile
diskutil info /dev/disk0 | grep Media Name: | cut -f2 -d:
paste -d, a_props.txt a.txt | awk -v PROP=age -v FS=, {for (i=1; i<=NF/2; i++) if ($i == PROP) print $(NF/2+i)}
gcc -framework Foundation -framework AudioToolbox audio.m WavReader.m WavFileCreator.m -o audio
rsync ... | awk { $1=$2=$3=$4=""; print substr($0,5); } >output.txt
printf $line_num: $(echo $line | wc -w)
s/\([A-Z]\)/\1/g

echo $inputData
awk -vRS=-+\n /Ticket #1000/ svn.log
const string SystemDirectory = @C:\Windows\System32;
find -name *.html | xargs sed -rie s/href="([^"]*)\/index\.html"/href="\1\/"/gi
sed /SEARCH\/TEXT/{N;d;} yourFile
{ command1 2>&3 | command2; } 3>&1 1>&2 | command3
preg_replace(/\/s/./, /, $filename);
cvs diff -b -B -r 1.5 -r 1.6 ProjectsrcSample.java | findstr /vbl < > > log.txt
date -d yesterday +%Y%m%d

sort -o file.txt file.txt
awk $2~"^/$"{$4="acl,"$4}1 OFS=\t /etc/fstab
echo $$; ( F=/tmp/myps; [ ! -f $F ] && echo echo $PPID > $F; )
sed -i -e s/${NEW_NAME}/\${NAME}/ $PLIST
awk /MYSTRING/ {n++} {p=97+int(n/26); q=(n%26)+97; s=sprintf("out_%c%c.txt", p, q); print > s} LARGEFILE
cat $(echo tmp.sh)
./program | grep Total Events Processed\|Total Remote (shared mem) Events Processed
sort -u yourFile
ssh -t remote tcsh
echo Revision: 53413 | cut -d   -f2
diskutil info /Volume/foo
(wget -qO - http://whatismyip.org/)
paste file1 file2 | sort | cut -f2
awk {printf "%s\0", $0}
cygstart /cygdrive/C/windows/system32/cmd.exe \k 'bash.exe -i'
grep -v # ../download/interactions.$1.$2 | awk ($2!~/_R/){print $2} | sort -k 1 | uniq > rna.names.txt
sed -ne /^====/,/^====/ { /;/ { s/;.*$// ; H } }; $ { g ; s/\n// ; s/\n/, /g ; p } stocks
grep <!--#include  file="../../includes/ *.*
echo ${VAR1} | cut -d   -f ${X}
rm -f $(<file.txt)
(<configure.ac)
find / -maxdepth 3 -type f -print -exec sed -i -e s/teststring123/itworked/g {} ;
sed -i 0,/^\$a/s//\$b/ ./file.txt
:se binary
scanimage -L | gawk /N650U/ {print gensub(q"`", "", "g", $2)} q='
mysql -u root --password=root <mysqlfile.sql
hg tip --template <?php\r\n// ќв®  ўв®¬ вЁзҐбЄЁ бЈҐ®ў © д ©« б Ё®а¬ жЁҐ© ® вҐЄгйҐ¬ ЎЁ«¤Ґ ¬®¤г«п\r\n`$info = array(\r\n'rev' => '{rev}',\r\n'date' => '{date|isodate}',\r\n'changeset' => '{node}',\r\n); > modules/video/version.php
LANG=en_US cal
tar -zcvf mywebsite website backup $(date '+%Y-%m-%d %T').tgz public_html
find . -type f -exec wc -w {} ; | awk {numfiles=numfiles+1;total += $1} END{print total/numfiles}
awk -v MYPATTERN=INSERT_YOUR_PATTERN $0 ~ MYPATTERN { print MYPATTERN } INPUTFILE
find /dir -print > output.txt
awk -v name=$name -F : { print name ":" $2 } dbHashFile.txt >>dbHash.txt
source X < <(echo some input)
grep -v <pattern> file
alias kill3000=fuser -k -n tcp 3000
java javaprog | myScript
awk BEGIN { RS = "/" } ; { print $0 } BBS-list
for thefile in *.txt ; do mv -v $thefile ${thefile%-*}; done
date +%s -d 01:43:38.123
(echo $filename | sed -e s/TestVersion/Version2/g $filename)
sed -i /^class myClass2:/,/^class/s/f1 = '512kB'/f1 = '1MB'/ path/to/file.py
sed -i s/string-./string-0/g file.txt
psql -o filename -U sathishkumar -c select * from hospital_management.patient_details;
echo DAAAAABCBBBCCABCABC | sed -e s/\(ABC\)*$//g
sed s/l2-[^-]*-[^-]*-[^-]*-/l2-2-ghb-8-m-/g
echo action `eval echo $$1`
awk -F , { gsub(/(^{)|(}$)|"/, ""); for (i = 1; i <= NF; ++i) print $i }
diff <(echo string 1) <(echo string 2)
VAR=`find /dir -name *.* -type f -print -exec rm {} ;`
pushd $PWD
awk NR>1{a=$3;$3="@";gsub(/ -1\>/," ? ?");gsub(/\<0\>/,$5 " " $5);gsub(/\<1\>/,$5 " " $6);gsub(/\<2\>/,$6 " " $6);$3=a;print} file
(for elem in {1..100} ; do echo $elem ; done) > mypipe
http://www.w3.org/2001/XMLSchema.xsd
/usr/bin/env zsh -c echo $fpath
find ..... |sed s#.*/##

sed -i s#{test1}#test2# /example/myfile.txt
... system( mysql -h  $1  table -N -e \42select * from table where column like \47%\n%\47 ;\42)
printf %s\n%s\n pwd pwd|pdbedit -t -r -u user
sed s/\[.[1234567890]]*//g file1 > file2
sed s/myregex/&?AString/g myfile.txt
foreach ( $_SERVER as $k=>$v ) putenv($k=$v);
grep -r --include=*.{cc,h} hello .
awk $NF ~ /^@/ {print $NF}
sed :a;s/^\([[:space:]]*\)[[:space:]]/\1_/;ta file
awk {print $10 ".torrent"}
--exclude /project/src/node_modules/jquery
ps -el | grep $processname | awk ...
sbcl --core <my-new-image-full-path-location> $@
awk NR >= 23 && NR <= 56
finger | colrm 34 39
rd /s %systemdrive%$Recycle.bin
{ time ls --foo 2>&3; } 3>/dev/stderr 2>time.txt
rvm get head --auto
mkdir -p folder/subfolder
grep -o -E "name":"Rausschmeisser","link":"[^"]+"
sort -R input | head -n 100 >output
git rm -rf mapeditor
powershell $port= new-Object System.IO.Ports.SerialPort COM10,9600,None,8,one; $port.open(); $port.WriteLine(1); $port.Close()
pygmentize -o jquery.png jquery-1.7.1.js
mv /path/to/file.txt /path/to/non/existent/directory/
sed N;/<Location \/>\n *Order allow, deny/s//&\n  Allow from all/;P;D file
ps opid --ppid=7051 | tail -n +2 | xargs kill
awk !x[$1]++ FS=/ $PATH_TO_FILE
count
(echo ${COLORS} | awk {print \$$i})
sed /pattern/,/;$/ d infile

echo $s
/[0-9]+.[0-9]+.[0-9]/
while read line; do mkdir -p ${line%/*}; done < infile
exec 3>&-
awk BEGIN {RS="----->"} /5\. select \* from mytable/ { printf("%s %s",RS,$0)} INPUT_FILE
db.collection(unicorns).find(nil, :fields => { :name => true, :_id => false })
unix2dos d:temp.txt
awk NR>1{t=$1;gsub(/[^[:alpha:]]/,"");$0=t "\t" $0}1 file
yourcommand 2> log
read myVariable 2> errorFile < myFile
find . -maxdepth 1 -iregex the_regex -size +32M -printf Viseo over 32 MB (size %s): %h/%f
(grep -n string match myFile | cut -d: -f1 | tail -1)
(ls -t /backups | head -1)
svn log --xml %SOURCE% > %Des%svnlog.xml
for i in *-512-*; do mv $i ${i/-512-/-256-}; done
<msbuild> <project> <settings> <file>
chmod 666 /dev/ttyS1
awk -F\t /\[Header B\]/{f=1;next} /^$/{f=0} f{gsub(/\t/,",");print} file
printf Time: $TIMESTAMP_CMD\n\n$EMAIL_BODY
sed -n /,-,\.txt$/s|/[^/]*$||p input.txt > output.txt
1/*.pdf
./hello.sh
line)
/usr/sfw/bin/wget --execute=http_proxy=prox:8080 -q -O /tmp/$(basename ${FILENAAM}) -c http://www.dct.de${FILENAAM} && cp /tmp/$(basename ${FILENAAM}) desired_directory
source another.sh || return $?
awk $0 ~ /^>/ { print ">" $15; next } 1
date +%Y-%m-%d-%H-%M-%S

sed -e s/foo/$bar/ -e s/some/$text/ file.whatever
-i, --itemize-changes
awk /#/{sub(/# +/,"#");n=gsub(/#/,"",$NF);$(n+1)=$NF;$NF="\t\t#"}1 file
export PYTHONPATH=/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:$PYTHONPATH
(</sys/class/net/eth0/carrier)
sudo -u username command
grep - search a file for a pattern
find . -type f -print -exec iconv -f iso8859-2 -t utf-8 -o {}.converted {} ; -exec mv {}.converted {} ;
for /f delims= %A in (dir /b "G:\Files Sample\Samples\zip\txt") do @echo %A
ESPIPE (29): Illegal seek
./myscript.sh -m 1 -i $I -t 2142
sed -i s/password="[a-zA-Z0-9]\+"/password="foo"/g server.xml
output=shell_exec (awk -F'\t' '/\[Data\]/{f=1;next} /^$/{f=0} f{gsub(/\t/,",");print}' 1.tsv > 2.csv);
puts %x[bash --login -c echo $PATH]
echo  asdfdf "\t",7 asdfadsf | grep "\\t",7
[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm
awk BEGIN { RS="\n\n" } ; { print $1, $3, $5 } < myfile
==================== Begin steps ==============================
UPDATE `users` SET `password` = md5(rand())
if [$exist == 1] ; then
sed -i -e s@conf .*@conf = $PATH_CONF@g generals.conf
find $dir -perm 777 -exec cp {} newLocation ;
scp -r user@remote:src_directory dst_directory
sed -e n;n;n;R file2 -e R file2 -e R file2 -e R file2 file1
if [$type == cpanel]
read -r cbuild < filename
somecommand ${1:-foo}
msbuild.exe /t:Clean;Build /p:config=Release Myapp.dproj
sleep 99999 1>/dev/null 2<&1
/Applications/MAMP/Library/bin/mysql -uUsername -pPassword
echo Hello brave new world | awk {print $1}
./configure --prefix=$HOME/eco
echo hello world | awk {split($0, array, " ")} END{print array[2]}
sed -i G $input_file
proc = Runtime.getRuntime().exec(/bin/bash Recomm.sh, null, wd);
if [ $testv = ! ]; then
ENV[SOME_VAR] = some_value
(find public_html -type f -name *.php)
perl -pi -e s/mypassword/mynewpassword/g file
mkdir $(< temporary.txt)
unzip test.zip a.txt
bash --noprofile --norc
(ssh otherhost command)
( tail -f mct & cat ) | java -Xincgc -Xmx2048M -jar minecraft_server.jar
git show --pretty=format: --name-only HEAD^ | grep \.js$
cp --remove-destination c.txt b.txt
find ... -print0 | xargs ??? | while read filename ; do ...
cat file.txt | tr -d \r | awk {print $NF $1}
echo a | cat - file1 > file2
find -type f | xargs -i sed -i -e s/dev/prod/g {}
cat Logone2.txt | sed s/^name1=.*/name1=`date`/g > newfile.txt
x=`pwd`; while [ $x != / ] ; do x=`dirname $x`; find $x -maxdepth 1 -name file.txt; done
sort -u file.txt
mysql -u root -p
awk { names[$2] = names[$2] " " $5; } END { for (name in names) print name " " names[name] } file
adb shell am kill com.blah.foo
echo ps
start cmd /k echo Hello, World!
ssh $USER@$SERVER cd ${REMOTE_PATH}; mkdir -p $i < /dev/null
find . -name 123*.txt -type f -exec bash -c mv "$1" "${1/\/123_//}" -- {} ;
sed -i -e s/SEARCH/REPLACE/g;s/$/\r/ `grep -rl SEARCH *`
:%s/.*/=printf(%-63s, submatch(0))
command arg1 | ( cd /other_dir ; command arg2 )
grep -v -E ^# file
find / -type f -name foo* | wc -l
egrep pattern|^ file
[ -z $PID]
/[<]/app-deployment/{a=0; n=0}
my_command >/dev/null &
[ -f $FileName ] && fileNameListStr=$( tr \n   < $FileName )
(echo $line | sed s/\\/\\\\/g)
cd `pwd`
ls $PWD/baz | sed s_`ls -d ~|tr -d '\n'`_~_
awk /$args/ {f=$0} END{print f} $TMP_FILE > data.out
mount -L WHITE /mnt/WHITE -o rw
sed s/\([^.]*\)\([^(]*(\)/EventUtil\2\1, /
process = proc_open(lessc -, $descriptorspec, $pipes);
find . -name README -exec head -1 {} ;
find /path/to/dir -type f -name *.php -exec sed -i /string-to-remove/{1d;} {} ;
cat file.html | php -r echo strip_tags(file_get_contents('php://stdin'), '<a>'); > removed_tags.html
awk $4 ~ /\/foo$/ { print $1 }
find / -name file.xml -exec cat {} ;
echo <a href="http://example.com?q=man&amp;string=1&amp;bat=2">Link</a> | ruby -pe $_.gsub!(/href="([^"]*)"/) { |h| h.gsub("&amp;", "&") }
cat $f | sed something > $f
mysql -e select * from mydb1.table1

printf %q $1
echo $line
/Applications/Emacs.app/Contents/MacOS/Emacs
reg query HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer /v version | find version
export PATH=$PATH:/bin:/usr/bin
for line in ${lines[@]} ; do
ssh $host nohup java -cp program.jar >`hostname`output.log 2>`hostname`error.log &
:g/my_pattern/-2,//+2d
CONFIG += opencv$$system(pkg-config --modversion opencv | cut -d . -f '1,2' | sed 's/.//g')

find . -type l -exec readlink -f {} ; | grep -v ^`readlink -f ${PWD}`
compgen -cab | sort | uniq | wc -l
(grep -n search term file.txt | sed s/:.*//))
pass=`perl /root/bin/randpass`
php file.php
[ $
bash -c
mkdir -p /my/other/path/here/;touch /my/other/path/here/cpedthing.txt
tar -xjf /path/to/archive.tar.bz
for i in `cat file`;do ln -s $i;done
HISTSIZE= HISTFILESIZE=
diff -w <(sort file1) <(sort file2)
1
sum += num;
find . -iname f????.a -exec mv {} {}.img ;
mysql -u root -pmy_password -D DATABASENAME -e UPDATE `database` SET `field1` = '1' WHERE `id` = 1111; > output.txt
find /home/directory -mindepth 1 -maxdepth 1 -name subdirectory[57] -or -exec cp -r {} /path/to/dir ;
php myscript.php image.jpg image2.jpg
find <directory> -ctime +7
help read


/usr/bin/mysqldump --user=user --password=password -h hostname database > html/folder/backup/final_db_$(date +%Y-%m-%d_%H_%M).sql
mysql -h localhost -u root --password=password -e CREATE DATABASE databasename;
awk -F: BEGIN{OFS=":"} /cjares/{temp=$1; $1=$2; $2=temp; print} /etc/passwd
{WORDS// //||/}/"
grep -v drop table outfile.txt > newfile.txt
my $err = `cp -r $HTML /tssobe/www/tstweb/$subpath/$HTMLDIR1 2>&1`;
sed -r s/\\vvvec[[:space:]]*\{([^}]*)\}[[:space:]]*\{([^}]*)\}[[:space:]]*\{([^}]*)\}/\\begin\{pmatrix\}\1\\\\\2\\\\\3\\end\{pmatrix\}/g
for f in `ls -1 folder1`; do rm folder2/$f; done;
subprocess.call([mv, at*, ./output20])
sed -n /^Run test suite LogicTests$/,$p <file>
if [[ ( $string =~ $regex ) && !( $string =~ -- ) ]]
if [ -z $b ]; then
find . -name *VER |awk -F~ {print $11}|sort|uniq -c
ICR_KEY_VAL=http\\://www.example.com/simi/icr
[[ -s /volumes/MacintoshHD/users/mikedevita/.rvm/scripts/rvm ]] && source /volumes/MacintoshHD/users/mikedevita/.rvm/scripts/rvm
table_prefix=`grep ^$table_prefix wp-config.php | awk -F' {print $2}`
awk { if (NR%3==0) { print $0}  }
grep -r -l first.second.third.fourth . | xargs sed -i s/first\.second\.third\.fourth/foo.bar.fooey/g
-1 list one file per line
XCODEBUILD_PATH=/Developer/usr/bin
sed 1,1{N;/^\n$/d}
echo $VARIABLE | sed s|^/opt/Application/||
bash sysroot.sh
SHELL = /usr/bin/ksh
sed -i /e2/ s/off/on/ ~/Documents/Prueba
awk /foo/ { while(getline > 0) { print }}
renice -n 1 $$
//a[@id=infgHeader]/@text
trap foo bar baz | bip && fred barney ; wilma SIGINT
pandoc -s -S YOURTEXTFILE -o YOURDOC.docx
awk BEGIN { FS=","; OFS="," } (NF>=2) { $2=$2 ":00:00"; } (1)
p = subprocess.Popen(gphoto2, shell=True, ...)
awk -F, BEGIN { OFS = "," } {$6="2012-02-29 16:13:00"; print} input.csv > output.csv
diff <(sort demo1) <(sort demo2)
argv=su -c "$RVM_PATH wrapper $config_rvm \"$PASSENGER_RVM_BIN $command $options\"" web
curl --data-binary @your.pdf ...
-useradd --system --home-dir /var/lib/redis redis
echo `date +%d%m%Y%H%M%S` $LINENO The script is running..  >> $log_File
perl -MURI -le chomp($url = <>); print +{URI->new($url)->query_form}->{offset}
ls -d /proc/[^0-9]*
awk {fname=substr($0, 0, 2); print >>fname} input.txt
read var1 var2 < <(python file.py)
awk {if ($1 ~ /^(LOAD|IMPORT)/) {gsub(/\\/, "/", $2); system("cat " $2)} else print} test.txt > output.txt

java -jar first.jar & java -jar second.jar
function testing { local test; test=$(return 1); echo $?; }; testing
if [ $repl_IO != Yes -o $repl_SQL != Yes ] ; then

sed -r s_((checksum|compressed)=\").*(\")_\1\3_ -i filename
sed -r s!rec:id=(.*?)&name=(.*?)&age=(.*?)!\1 \2 \3! input_file
eval ls $filter
sed -r s/( |\[|\])+/@/g file_to_modify.txt > file_for_output.txt
ack-grep -a -l -i --print0 --text $1 | xargs -0 -n 1 sed -i -e s/$1/$2/g
sed s/.../&\n/g file.txt
sed -i 1s/^/<added text> / file
find /path/to/files -type f -exec file {} ; | nawk -F: !arr[$2]++ > outputfile
sed -s 1d */*filename*.txt > crap4.txt
find . -name *.tex
sed -e s/pass/Awmusic12635/2 -i config.yml
nohup java -jar myjar.jar
sed -i s/).*/)/ file.txt
tail -f /dev/tty0 | awk {printf "%s\n",$1}
cat $1 |cut -d , -f 7 | sort | uniq -c
doskey exit=doskey/history$g$gc:tempcommands.log$texit $1 $2
xargs < list.text cat > final_file.txt
`grep stuff | head -n 1`
while IFS= read line
crontab -e: * * * * * /usr/bin/php /applications/xampp/htdocs/index.php cronControl countSales
sed -i 1s,.*,${new_line//\/\\}, $f
ls | grep -v \.lnx$ | xargs rm

cp file1 file2 ; cp file1 file3
tcpdump -i eth1 -w Pingpacketlist icmp
exec(export PATH=/usr/bin:/usr/local/bin:/some/other/paths && /bin/bash /opt/chat-staging/start_app.sh 2>&1, &$output, &$return_var);
Acrobat /A page=<pagenum> %1.pdf
(basename $file .deb)
date +%F %T
set -m
irb(main):001:0> `bash ./test.sh`
erl -eval erlang:display(erlang:system_info(otp_release)), halt(). -noshell
echo some input | yourprog
s!(<pagenum page=normal id=)([a-z0-9_-]+)(>)([0-9]+)(<pagenum/>)!124345!i
last = !sh -c git log "-${1:-1}" HEAD -
find -type f -regex ./[^/]+/images/[0-9]+\.jpg$
> man jobs
cat ~/.bash_profile >> ~/.zshrc
while :; do clear; your_command; sleep 2; done
VAR=dog ssh user@server bash -ex < /tmp/replaced
(while true; do sleep 10000; done) | java -cp someapp > mylog.log &
sed -i /^matchstr/{s/oldstring/newstring/g}
sed s/^\(aa[0-9]*\)b/\1/ t1 > t2
man test
ls -lrt | grep -v total | awk {print $9} | head -n -1 | xargs rm
source build/envsetup.sh
od -a -An -v file | perl -0777ne s/\n//g,print "$_\n " for /(?:esc| fs| gs| us)?(?:(?!esc| fs| gs| us).)*/gs
FOR /F tokens=* delims= %%I IN (echo %date%) DO echo %%I
h:o:g:

ln -s /home/jake/doc/test/2000/something /home/jake/xxx
echo $MY_VAR > outputFile
awk $3 != current {id++; current=$3} {print $0, id}
sed /^all:/ s/$/ anotherthing/ file
s/\(Provides\)\(\s\)*\(mysql\)/\1\2mysql-5.5/g
echo \$_SERVER['DB_NAME'] | sed s/\$_SERVER\['DB_NAME'\]/test/g
EMPLOYEES=`echo $SQL | isql -U $USERNAME -P $PASSWORD -D $DATABASE -S $SERVER`
mysql -u $U -p$P -D$D <<< ALTER TABLE drupal_url_alias CHANGE language language VARCHAR( 12 ) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '';
awk NR%2{printf $0" ";next;}1 yourFile
VAR=val cmd
echo http://randomurl/suburl/file.mp3 | sed s#.*/##
cmd2 = [awk, {if ($9 != "%MEM") {print $9}}]
FILE=`echo ${FILE} | sed s/.gz$//g`
subprocess.check_call(vasp | tee tee_output, shell=True)
env GIT_PROXY_COMMADN=myproxy.sh GIT_TRACE=1 git ls-remote https://...
set whichwrap+=<,>,h,l,[,]
sed -n /^{/,$ p test.txt
sed -e s/ /,/g -e s/^/Delete from ReportingDetail where ReportingDetailID IN (/ -e s/$/)/ file.txt
sed -i s/databases\ [0-9]*/databases\ 32/ redis.conf
find . -type f -exec md5sum {} ;
find . -type f -exec ls -l {} ; 2> /dev/null | sort -t  -k +6,6 -k +7,7
(ls -r 2012* | head -n 1)
sed -e <expr> -e <expr> -i <file>
perldoc Term::ANSIColor
egrep -o "([^"]*)" sourcefile | sed -r s/"(.*)"/\1/
sed /ALTER TABLE .* ADD KEY .*/d FILE
echo $(date)#... variables here .... >> $file
export LD_LIBRARY_PATH=/mypath${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}
pip install git+https://github.com/pwaller/pyfiglet
ping -c 4 www.stackoverflow.com | tail -1| awk {print $4} | cut -d / -f 2
sed -n /^[0-9.]\+$/w results.txt thin*.txt
if [ -e file.txt ] ; then
foo/**/bar
(tty); who | grep ${TTY#/dev/}
join file1.txt file2.txt
if [ `date +%H%M` -gt 2245 -a `date +%H%M` -lt 2345 ]; then
convert image.png -crop 2x3-40-20@ +repage +adjoin tile-%d.jpg
perl -pe s,.*/,, file.txt
printf <format specification string> $(<source-file.txt)
sed /^[ \t]*$/{: a;N;/#matchee/!P;D;/^[ \t]*$/b a} file.txt
sed -i s/$i/EE${j}EE/g ./file
cat list | parallel -j5 [ {
shopt -s compat31
wget --recursive --no-verbose --no-host-directories --cut-dirs=3 --user user --password password ftp://site.tld/var/folder
cat FILE | cut -d: -f2 | sponge FILE
awk BEGIN { RS=","; FS=":" } { print $2 }
VERSION=321; for i in public/js/*.js; do NEW=$(echo $i | sed s/\./.$VERSION./) ; cp $i $NEW; uglifyjs --overwrite --no-copyright $NEW; done
sed /^auto_increment_offset/s/=.*/= ${HOSTNAME#${HOSTNAME%?}}/ /etc/mysql/conf.d/my.cnf;
sed /<?xml .*?>/a \<!-- comment --> test.xml
grep -Pe someword
rm $(echo abcd)
git --git-dir /home/gcom370p/stu013/express/.git pull /home/gcom370p/stu013/express.git master
?
sed -n /$VARIABLE/,/test/p aFile
sudo sh if_test.sh
MY_INSTANCE_ID=`curl http://169.254.169.254/1.0/meta-data/instance-id`
perl -0777 -i -pe s/(\[mysqld\][^\^]+)/$1\nsometext/g test.txt
echo new line >file_name
date; ps -U USERNAME -o rss=MEM,comm=CMD,pid=PID
last
grep -A 2 string 1 $file | tail -2 | grep -B 1 string 2 | head -1
ls *.mp3 | xargs -n 10 id3.sh
mysql -u root -ppassword -e UPDATE table SET data = 1 WHERE id = 5; SELECT data FROM table WHERE id = 5
[status, result] = system(echo True; echo "I got a loverly bunch of coconuts")
for f in `ls /bowtie-0.12.7-win32/bowtie-0.12.7/output_635_25bp/*`; do echo hello world; done
xmlstarlet ed -u //texit[@info] -v author=NewAuthor title=NewTitle
if [[ $v == A ]] || my_func $x $y ; then
find . -name sample*_1.txt | perl -pe s/_1\.txt$// | parallel program {}-out {}_1.txt {}_2.txt
scp file_to_copy user@remote_linx:/tmp/copy_of_file
java -jar YourJarFile.jar
eval `python foo.py`
--rsync-path=
sort -t ; -k3 -n demo.cvs|tail -n 1
number_of_times=`cat $filename | grep $line | wc -l`
{oldip//\/}
find . -regex $1
php /cli/moveattachments.php
37. Reverse a line (emulates rev Unix command)
Get-DriveInfo | % { if( $_.VolumeLabel -eq MyToolBox){ Set-Location $_.Name; ./Startup.ps1}}
awk -v RS= /404 Not Found/ yourFile
grep -c keyword * | sed -n -e /:2$/s/:2$//p
awk { x[$1]=x[$1] " " $2 " " $3 " " $4 " " $5 } END { for (k in x) print k,x[k]; } input.txt
system (/bin/bash ./setenv.sh);
read a b c <<< $(echo foo | awk { print $1; print $1; print $1 })
while ...; do ...; done < $filename
compact /c /s:C:Templates
find /disk0116/ui -name .user_repo.log|xargs cat | column -t

date | awk {split($4, a, ":"); printf "%s %s %s:%02d:00", $2, $3, a[1],int(a[2]/5)*5}
sed s#/var.*\.co\.uk/## file
find -type d -regex .*py.*bin.*
awk {printf "%s", $0}
doskey /reinstall
s/,\([a-zA-Z0-9\/_]\+\)\(\.jpg\|\.png\|\.gif\)/,+\1\2/g
expr Hallo World : .[a-z]* \(.[a-z]*\)$
join file{1,2}.txt
awk -F^ -v myvar=$myvar {printf "set %s:%s:%s %s\n",$1,$2,myvar,$7} todel.txt
xmlstarlet ed -a //p[n="hello"]/r/s -t elem -n s -v 2.0 input.xml
tar -zxf my-dir.tar.gz --transform s/my-dir/your-dir/
sed -i s/[^1-5]//g file
bash arguments.sh Bash Scripting Tutorial
sed -n 1h; 1!H; ${ g; s/Mary\n\n/\n/g p }
join -t $\t -a 1 -a 2 -1 1 -2 1 -e NULL -o 0,1.2,2.2 file1 file2
(open_init_pty sudo bash -c echo hello)
awk BEGIN {a="2012-03-16"; "date +%s -d "a | getline; print $0}
x>46 && x<=30 --> false
rawler http://lambrecipes.ca > results.txt
echo `date` User `whoami` started the script.$\r >> output.log

[^</div>]*
grep -o CpuIowait=[^;]*
awk {print $(NF - 1), $NF}
... | sed -n /$col1/{s/$col1/$col2,$col1/i; p}
printf \033]2;%s\033\\ title goes here
ifstat -n | awk NR>2{print systime(),$0; fflush()} | tee ifstat.log
rsync --stats --compress --recursive --times --perms --links --delete --exclude .git --exclude wp-content/upload --exclude wp-content/uploads --exclude wp-content/gallery /path/to/someDir/ /path/to/otherDir
find -type f -printf %f  %s %p\n|sort
sed -i s/\(revision="........\)[^"]*"/\1"/ file
sed s/M1-[^-]*-[^\.]*/M1-plt32-size10/ filename
sed s/$/\t1/g
alias $SHORTTEXT=$LONGTEXT
`tempfile 2>/dev/null`
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
netstat -natp | grep 11211 | grep ESTABLISHED
perl -pe $_=~s///e
\n; a=($(printf %s\n ${a[@]} |sed /c/!d))

sed s/\(install --with-some-params some_pkg_name\)\.\([0-9]\{5\}\)/\1.10001/g
echo Usage: $(basename $0) {start|stop|restart|status}
echo HTML example<br>Print new line<br>please<br>not work | sed -e s/<br>/\n/g
os.system(bash -c "bash <(curl -s http://mysite.com/myscript.sh) World")

do shell script curl http://myurl.com/get.json | sed -e 's/[{}]/''/g' | awk -v k="text" '{n=split($0,a,","); for (i=1; i<=n; i++) print a[i]}' | grep '"key":' | sed 's/:/ /1' | awk -F" " '{ print $2 }' | tr -d "\"
( cd ; bash )
sed /^[^#]/ s!${KEY}=.*!${KEY}=${NEWVAL}! infile > outfile
unalias foo 2>/dev/null
awk (length(gensub("[^{]","","g"))-length(gensub("[^}]","","g"))) != 0 { print NR, $0}
echo git@git.gitweb.com:/myModule-repo.git | sed s%^.*/\([^/]*\)\.git$%\1%g
cat filepaths | parallel -j 30 grep -Pl \d+,\d+,\d+,\d+ {} > FoundPatternsInFile.out
ls
yes > file
find public_html -type f -name *.php | xargs -n1 dirname | sort -u > dirlist.txt
awk -F, -vOFS=, {$5=$5}1
find . -name bak -type d | xargs du -ch
perl -0777 -i -pe s/(-name\s*riak@).*/\${1}$riak_ip/g vm.args
vcbuild.exe PgoProject.vcproj ReleasePGOptimize|x64 /forcelink
ls *.txt | while read FILE; do echo mv $FILE ${FILE/.txt/`date +%Y%m%d.txt`}; done

head -c 100000 /dev/urandom >dummy
find /source-tree -type f -exec cp {} /target-dir ;
(dir $(shell which $(CROSS_COMPILE)gcc))
cat $(dirname -- $0)/Folder/Text.txt
ssh host command1 | command2
find . -type f -exec bash -c file -bi {} | grep -q text ; -exec grep TEXTSEARCH {} ;
<?php shell_exec(php sleep.php > log.txt &); ?>
system([./util/filtermapq.sh  var1   var2   var3])
echo 1318-*.pdf
arrSongPaths[0], $escapedSongPath)
grep -r -m 1 ^ <Your Root> | grep ^Binary file
content = content.replace(/r?n /g,  );
C:> echo ^<html^>...^</html^> > result.html
grep -lE [0-9]{2}-[0-9]{7} * | wc -l
cat $(echo filename with spaces)
nohup xterm -e java -jar start.jar &
ssh user@host mysqldump -uusername -hlocalhost -ppassword --all-databases > /home/user/sqlfile.sql
awk {printf("%d, %d, %d, ", 22, $1, NR); for(i=2;i<=NF;++i) printf("%d, ", i)} file
-v parameter=value
bash -x script.sh
+47177372141 +41753459833
lsof -i tcp:22 | grep LISTEN | awk {print $2} | xargs kill
+program --pass=decrypted-password-here
rvm get stable --auto-dotfiles
find . -name *.txt -exec ls -l {} ;
...047%%Y%%m%%d %%H%%i%%s047...
grep -F \$server['fish_stick']
sed /$regex/!b;s//\n\1\n/;s/.*\n\(.*\)\n.*/\1/ file
git --git-dir=c:codeklas.git --work-tree=c:codeklas merge origin/master
IF ERRORLEVEL 1 (...) ELSE (...)

echo 1,2,3,4 | awk -F, -v OFS=, {$$index="NEW"; print }
indent -kr -i8 *.c
awk -F| -v OFS=| {for(i=NF+1;i<=33;i++)$i=""}1 file.csv
uptimeString = `uptime`;
checkExist 1.txt 2.txt echo $1 | awk '\$5 <= 10 {print \$3, \$4}' echo $2 | awk '\$5 <= 10 {print \$3, \$4}'
ps aux | perl -ne print if $. == 1 || m/process_name/
sed s:<size>\([0-9][0-9]*\)</size>:<size>\1,-1</size>:g ...
grep -E ^[0-9]+$ file | diff file -
while read item; do rm $item; done < removelist
echo -e aba\ncfg!ഡ.#g | perl -C7 -ne for(split(//)){if ($_ !~ /[!@#.]/) { print $_."\n"}} | sort | uniq | wc -l
rsync -a --progress --remove-source-files src/test/ dest
test X$(basename -- $0) = Xbuild.sh || echo Being sourced
condition { action }
sed -e s|<p align="center">\(.*\)</p>|\1| server.html

while [$count -le $n]
sed -e s/=\([^" >][^ >]*\)/="\1"/g
sed -n -r H; ${g; s/([^}]|\}[^%])*%\{//; s/\}%([^%]|%[^{])*//; p}
set PATH
shift $((OPTIND-1))
execl(/bin/sh, -c, cd, (const char *)0);
(ls -l|awk -F->  /\/tmp/{print $2})
awk $0~/ABC/{print "<<";print;getline;print;getline;print } temp.txt
grep -oP (?<=\${).*?(?=})
dir weka.jar
if [[ $schema =~ ^test ]]; then
:%s/foo=\zs\(-[0-9]\+\)ze/=submatch(1)+1000/g
tail -f $( ls -1tr `find /my/root/log/dir -name *.log` | tail -1 )
echo 03\.26\.12 | awk {split($0,a,/\\\./); print a[3] a[2] a[1]}
compare -metric psnr TIFF-NAME-TIF[0] DERIVATIVE-NAME-EXT
tr \n   < file.txt | awk { for(i=3; i<=NF; i++) { print $(i-2) " " $(i-1) " " $i }}
mvn -U test | (while read line; do echo ${line} | sed -e s/.*ERROR.*/`echo -e '\e[91m&\e[0m'`/g -e s/.*\(WARN|INFO\).*/`echo -e '\e[93m&\e[0m'`/g; done)
cat nums | xargs -n1 ./myscript
-e, --rsh=COMMAND specify the remote shell to use
ssh root@server.com mysqldump -uroot -pxxxxx mydb > mydb.sql
[ -n $var ] || die result is empty
sed -n /Block number:/,/ServiceMsg/{n;/ServiceMsg/p;g} service.txt
RED5_HOME=/opt/red5-1.0.0
set name=value&call echo %name%
join -o 1.2,2.3,2.4,2.5,2.6,2.7,2.8 <(cat -n file1) <(cat -n file2) | column -t
awk -F; BEGIN{OFS=";"} {$3="";print } file3|sed s/;;/;/
find . -name README -printf %T@\t%p\n | sort | cut -f 2-
rsync [options] source_dir dest_host:dest_dir
sed -i s/www-test/www/g /home/websync/tmp/sitio-oficial/sitios/wp-config.php
type gpm
awk NR % 2 == 0 file > newfile
sed -r -e s/\d+/sprintf("%03d",$&)/e
ls -l
netstat -ntlp | awk $4~/:*${PORT}$/{gsub(/\/.*/,"",$NF);cmd="kill -9 "$NF;system(cmd)}
sed s/#cheese-pasta=[^\\]*\\//g
0 * * * * cd home/docs/reports/ && rm -r *
sed s/\(.\)/\1\n/g -i filename
i =~ /^(?=.*(?:abc|bcd))(?!.*diy)/
while read h n1 n2 n3 n4; do echo $h; sed -n -e /^$h\$/{ -e n -e p -e q -e } file1 ; echo $n1; echo $n3; sed -n -e /^$h\$/{ -e n -e n -e p -e n -e p -e q -e } file1 ; done <file2
mycommand &
tr -d \r < fileList.txt > fileListTrimmed.txt
nc -lU /tmp/socket > /dev/null
find /opt/site/ -name .log.txt 2>/dev/null | xargs cat | awk {$NF=""; print $0} | xargs sed /Filesystem/d | sed 1i Owner RepoName CreatedDate | column -t
grep -v ^find: Filesystem loop detected; myFile
System.Diagnostics.ProcessStartInfo proccessStartInfo = new System.Diagnostics.ProcessStartInfo(net, user  + id +  /domain);
[ $PROCEED = y ] ; BOOL=$?
inotifywait -r -m -e create /home/user1/*
awk  $2 != $3 { print; next } $2 == $3 && $2 != 0 && $2 != 1 { print } INPUTFILE
diff <(tar ztf $1 | sort) <(tar ztf $2 | sort)
./strptime Mon Feb 27 16:21:34 WET 2012 %a %b %e %H:%M:%S %Z %Y
if [ $cpu_usage -gt $expected_cpuusage ]
cp ../dir5/dir4/dir3/dir2/file[1234] .
ls_output = subprocess.check_output([ls, -l])
/[^:;]+:([^:;]+;)+/
cat <(gen_input) - | parse_input_and_stdin
{ ls; echo this too; } | cat
isql -Uuser -Sserver -Ppassword -imy.sql -oresults.csv

Runtime.getRuntime().exec(new String[] {cpabe-enc, pub_key, message.txt, ( it_department or ( marketing and manager ) )});
var = $1 $1 $(($1 + 2))
date %H:%M
if [ %s =  ]; then
export JAVA_HOME=/usr/java/default
([a-zA-Z]+)[eE]:s*1[oO];.*
cmd1 && cmd2 && cmd3
ssh localhost (cd /tmp && nohup sleep 10) >/dev/null 2>&1 &
find dir/ -type f -exec bash -c mv "$1" "$(iconv -f UTF8 -t ASCII//TRANSLIT <<< $1)" -- {} ;
while read host; do echo $host; done < server.txt
mplayer $address -dumpstream -dumpfile $2.wmv -vf scale=320:240 > /dev/null
sh .git/hooks/myshellscript.sh
cut -c 9-22

echo $! > /var/lib/MyApp.pid
cat ./nounlist | egrep \b[${charlist}]{${wordlength}}\b
awk $6==1260 || $6==1068 || $6==907 {next} {print}
eval $var=\$val
while read line; do printf $(echo -n $line | sed 's/\/\\/g;s/\(%\)\([0-9a-fA-F][0-9a-fA-F]\)/\x\2/g')\n; done < input
echo http://www.myserver.org/very/very/long/path/mystring | perl -pe s|^http://www.myserver.org/very/very/long/path/(.*)$|\1|

awk /"trajectory"/ {if (getline x < "file2") {sub(/"nodo2"/,"\"nodo"x"\"")}}1
find path/to/dir -type d | awk -F/ $NF != toupper($NF) {l = n = $0; sub($NF "$", toupper($NF), n); print "mv " l " " n;} | tac
xattr -l /usr/local/bin/bbcolors
(echo $v_msg | sed s/To: root/To: $v_recipient/g)
find /dir | grep -f <(sed s@^@/@; s/$/$/; s/\([\.[\*]\|\]\)/\\\1/g filelist.txt)
sed -n /}$/{h;:a;n;/^$\|}$/{H;$!ba};H;g;s@}\n*@}@g};p input.txt
sox my.wav −n spectrogram
grep -Ho n * | uniq -c
compgen -c
sed s/"\(.[^"]*\)"/\\quotation{\1}/g file
sed s/\(\([^,]*,\)\{4\}[^,]*\),/\1\n/g
for i in `cat b` ; do if [ :$(grep $i a) != :$i ] ;then echo $i;fi; done
konsole --workdir pwd -e bash -c grep -R -i -n -A 2 -B 2 --color=always -R "searchtext" * | less -R
mv ~/.vim/_vim/* ~/.vim
NR==5
git clone git@github.com:abc/xyz.git

sed 0,/Matched Keyword/s//Matched Keyword\nNew Inserted Line/ myfile.txt
grep -o [0-9]\{10\} inputfilename | wc -l
sed /^#CODE$/,/^#ENDCODE$/!s/foo/bar/
scp /path/to/source user@host:/path/to/target
:set inde=16
xpath install.rdf /RDF/Description/em:targetApplication/Description[em:id="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"]
JAVA_HOME/bin/java -jar SocketListener.jar 8182 &
if [ -z ${variable-} ]
ifconfig | grep -oP (?<=RX bytes:)[0-9]*
awk -F | x!=$1{x=$1; y+=(NR==1?0:100000)}; {print $0, y} input.txt
altscreen on
sed s/\.txt// filename
export http_proxy=http://username%40domain.com:password@host:port
find . -name *.php -mtime -14 -print | xargs tar cvf backup.tar
echo ${STR1// /,}
echo ddayaynightday | sed -e :loop -e s/day//g -e t loop
grep searchterm myfile.csv | sed -e s/replaceme/withthis/g
awk -F, {print $2 ":" $1}
awk -F, {gsub(/[ \t]+$/, "", $2); print $2 ":"}
awk -F, gsub(/[ \t]+$/, "", $2); {print $2 ":"} test.csv
awk -F, -vmax=0  NF > max { max_line = $0; max = NF; } END { print max_line; } < poem.txt
sync && reboot
sudo su - <user> -c <cmd>

cat test.log | tr [\000-\011\013-\037\177-\377] . | grep whatever
find . -type f -name file* -exec bash -c echo "your line" >> $1 -- {} ;
ps -ef | grep $KEY_NAME | grep -v grep | awk { print $2 }|xargs kill
echo PS1="Hello World > "
apt-get install --reinstall packagename
hg status -n0 | xargs -0 rm
./someScript.sh foo bar
current_dir=`pwd`
find ! -iname abc -exec rm -rf {} ;
perl -nawe print "@F[1 .. $#F]", $F[0] eq "A" ? "\t" : "\n" < /tmp/ab
grep -f - file
sed $!N;s/\n\s*+//;P;D file
python -m run
RewriteCond ${foobar:test:$1} ^
printf Removed file %-64s (%d/%d)\n "$file" $n $of
Runtime.getRuntime().exec(new String[]{/bin/sh, /tmp/myscript.sh, m1,m2});
set xxx to do shell script sqlite3 ~/Documents/Databases/test.db 'select "Address 1" from aTable limit 10; '
sed s/^\(.\)/\U\1/ yourfile > convertedfile
system(echo  var);
alias example=cd $MYUSR ; ./bin/start.sh -t
svn checkout --username USER --password PASS ttps://example.com/projectname/trunk/app app
< path-to-text-file tr ; \012 | tr -d -c A-Za-z0-9_#
readlink -f /proc/$$/fd/1
diascope -clean /mnt/videos/video$1.txt 1> /var/www/html/video/encodeVideo.log 2>&1
Messages.getString(String.3)
(echo $$;sleep 4)
bind set completion-ignore-case on
FILES = $(shell ls)
sed -r s:site1.com(/blog/[0-9]{4}/[0-9]{2}/[0-9]{2}):site2.com/\1:
split(/var/, a, RS); print a[1]
mplayer -vo png,outdir=/tmp,prefix=frameNo,z=0 -ao null -frames 1 VIDEO-FILENAME
?
set -o noglob
adb shell svc wifi enable
gdb -- /usr/bin/ruby1.8
[[ $name =~ ^$HOME(/|$) ]] && name=~${name#$HOME}
exec !osascript ~/MySrc/applescript/reloadSafari.APPLESCRIPT  . a:delay
chmod +x ~/bin/tmux_renum
grep -l Term optim_HGF.o* | xargs report
awk -F *@ * NR==FNR{lines[$2]=$0} NR!=FNR{if(lines[$1])lines[$1]=lines[$1] " @ " $2} END{for(line in lines)print lines[line]} file2.csv file1.csv
set -e
find -name testname.c -exec vi {} ;
/tmp/My Batch Script Files/Processing arg1 arg2 ...
awk {if($3=="DD") {split($0, a); print a[1];}} file
set PYTHONPATH=/somedir/pythonsrc;/anotherdir/pythonsrc && python.exe mymodule.py
egrep -w TCP|UDP denied.txt | sed s/:[^:]* \(in\|out\)/ \1/
BLAS_LIBRARIES=-L/home/someuser/GotoBLAS2/lib -lgoto2 -lgfortran -lpthread 
awk -F@ $3 ~ /pattern/ { OFS= "@"; $3 = "replace"; }
grep ^$offender /etc/passwd | cut -d: -f6
awk -F: {printf "COUNTRY: %s\nCAPITOL: %s\nTIMEZONE: %s\n\n",$1,$2,$3}
{MSG//'/\'}
rename -f s/_/-/g *_*.mat
bindkey \C-r history-incremental-pattern-search-backward
db.users.find({}, { nickname : 1, watchlists.arrangeable_values : 1 })
char *decode_prompt_string (string) char *string; { ... }
gawk -v FS=; {match($3, /From: (.*)@/, m); print m[1]}
fuser -k -n tcp 10000
wp core install --url=url --title=site-title [--admin_name=username] --admin_email=email --admin_password=password
echo -n sed  ; sed -e s/^\(.*\)/-e 's,\1,gl'\ \\/ file.csv
<datatype> <name>(<stuff>)
echo #define DISTVERSION "${float_dist}-pax"
for i in $(cat /root/list.txt)
for /f tokens=2 delims=:  %%a in (fastboot.exe getvar version-bootloader 2^>^&1 ^| findstr version) do @echo version is %%a
sed -e s/./\L&/ Shell.txt
xml ed -u //book[1]/title -v Game of Thrones bookstore.xml
*/10 * * * * /bin/ps -eo pcpu,pid,user,args | /bin/sort -k 1 -r | /bin/mail youremail@where.com
grep -i electron shell.txt
sed -nr /<\/?version>/s///gp
(echo http://google.com | sed -e s/[/]/\\\//g)
/1/
opt, args = parser.parse_args()
./program < input.txt > output.txt 2>&1
sed -n -e s/.*var premium_download_link = '\([^']*\)';.*/\1/p
echo  >> file; sed -ie /^$/d;$G file; sed -ie /^$/d;$G file
alias edit=/path/to/vim
ffmpeg -y -i ${I} -acodec mp3 -ar 22050 -f wav ${I/%.3gp/.mp3} > /dev/null & 2> /dev/null
awk BEGIN{ system("find . -type f -not -name \".\"") }
sed s/some string=.*/some string=newvalue/
--options=none
uniq -c | sort -nr | cut -c 9-
sed -e s/param1=.*/param1=abc/ text1.txt

diff -srq dir1/ dir2/ | grep identical
export PATH=/Users/toby/node/imapp/imagebridge/node_modules/expresso/bin/:$PATH
grep -v ^# INPUTFILE | while IFS= read line ; do echo $line ; done
sed -i :a;$!N;/^<IfModule mime_module>.*<\/IfModule>/{s/# *\(AddHandler application\/x-httpd-php \.php\)/\1/;/AddHandler application\/x-httpd-php \.php/!s/.*\n/&\n    AddHandler application\/x-httpd-php .php\n/;p;d};/^<IfModule mime_module>/ba;P;D input.conf
/home/a/b/c
mount -o remount /moint/point
awk $5 != "*" {print}
unifdef -USW1 -USW2 -USW3 -USW4 -USW5 -USW6 -t file1.txt > file2.txt || true
ls *.extension | xargs -n 1 tail -n +2
sort -t, -k+2 -n -r filename
tac file | awk /ScriptAlias/ && ! seen {print "new line"; seen=1} {print} | tac
{path
javac -d com/abc/customers/ CustomerAddress.java Customer.java CustomerMain.java
dd if=/dev/zero of=path/to/file bs=1 count=10 conv=notrunc skip=1000
awk -F \n -v RS= -v ORS=\n\n NF>1 input.txt
sed :a;$!N;/^\(\( [0-9]\+ *[0-9]\+\).*\n\)\( \{15\}\)/{s//\1\2/;ta};P;D file
%j day of year (001..366)
cat <yourfile> | grep .html | head -n1
eval $SVN $command $@
echo some text here > file.txt
printf one\ntwo\nthree\nfour\nfive\n | awk BEGIN{srand()} {printf("%.20f %s\n", rand(), $0)} | sort | head -n 3 | cut -d  -f2-
perl -lnwe $a+=()=/\Q(*)/g; }{ print $a; file.txt
pacman -S --noconfirm base-devel
patch original.txt diffs.patch
mkfifo batch_control
awk -F, length($2)<=3 input.txt
sed -r s/(Tijd ...: )(....)(..)(..).(..)(..)(..)./\1 \4.\3.\2 \5:\6:\7/ FILE
screen -dm -S test bash -c tar zxvf /tmp | gunzip
ttf2eot < pacifico.ttf > pacifico.eot
echo 1 2 3 | awk { print $1 }
-o [ --out ] arg (=dump) output directory
COMPREPLY=( $(compgen -W --a_foo= --b_foo= -- ${cur}) )
emulator -avd <whatever> &;
find a b -type f ! -name crazy -printf %f\n | diff -r a b -X -
set a b c d
int returnValue = system(C:\SomeProgram.exe);
rm paper-stack.!(tex)
awk .... */*/*.abc
(awk -v module=$module $2 == module { print $1 } /proc/devices)
cat log | awk /[START_A]/,/[END_A]/
ID=echo ${FILE}
type your_nifty_function
(which daemonName) || tmp=wrong name
/bin/sh -c if ps -ef | grep apple ; then echo APPLE fi ;
./myscript.sh
sed s/^\s*./0/g file
sed -i s/password="[^"]+"/password="XXXXXXXX"/g server.xml
echo -e a\011b | perl -lpe s/[\0-\037\177]/sprintf "\\x%02x", ord $&/ge
expect -timeout 100 $INSTALL_PATH_REQUEST
awk BEGIN {FS = OFS = "@"} {$5 = $5; print} inputfile
(echo $DequeuedItem | cut -f1)
start <command> /B
wc -l filename
htpasswd -b -c ~/temp/password admin test101
cmd >>logs/wrapper.log 2>&1 &
@ls_output = `ls -l 2>&1`;
find . -name *abc* -print
ls -1 | sed s/^[^.]*\(\..*\)$/\1/ | sort -u
ln -s data/* .
PS1=foo:  bash --norc
ssh -o PasswordAuthentication=no user@hostname
awk -F, { x += $1 } END { print x " " x/NR } MyFile
tail -1 MyFile | date -d `cut -d, -f7` +%s
[[ $a -lt $b ]] && echo smaller
cat pounds.xml | sed -r s/([A-Za-z]+)&\\?#39;([A-Za-z]+)/\1\\u2019\2/g
ls | sed -rne s:^([0-9]{4})(NAME)$:mv -iv & \1/\2:p
... Runs after every change of working directory. ...
sed -r s#(src|href)="/media([^"]*)"##g
var run=new ActiveXObject(WSCRIPT.Shell).Run(commands to run);
grep your_search_string --after-context=N your_log_file
env > /tmp/cron.job
%(1j.%j.)
MYURL=`php -r echo urldecode('$MYURL');`
trap log 'received ALRM' ALRM

stat --printf=%y\n directory_name
grep -R <([^>]*)>&lt;\1&gt; *.properties | more



sed -i /openDirFile/d *.conf
awk -F@ -v pattern=$find_me $2 ~ "^" pattern "$" input.txt
command = /bin/bash -c /usr/bin/ssh %(username)s@%(hostname)s bash -s < %(splunk_bin_dir)s/cpu.sh  % locals()
tcsh --help
grep -v ,0$
source ~/.bashrc
val path = myClass.getClass.getProtectionDomain.getCodeSource.getLocation.getPath
grep -Po ".*?"
{a//[^0-9]*}
awk -F: -v awkvar=$user $1==awkvar {print $7} /etc/passwd
mail -s $text $email &> /dev/null


sed -e /A\.1.*DATA/!d;s/A\.1/B\.2/ /yourfile
awk NR==1{for(i=0;i<NF;i++){row[i]=$i}} NR==2{for(i=0;i<NF;i++){printf "%s:%s",row[i],$i}} oldfile > newfile
sed s/\w*$// old.txt > new.txt
MYSQL_HOME=/usr/local/mysql/bin/mysql
if [ -f $2/$i ]
awk {arr[$NF] = $0} END { for (key in arr) { print arr[key] } } file.log >> final-report.log
xargs -a <( echo A B C ) bash -c for x in "$@"; do echo $x; read; done
(cd /sys/class/net/;grep -T  */{addre,o}*|sort)
(od -N4 -tu /dev/random | awk NR==1 {print $2} {})
cmd /c for %A in (C:\Documents and Settings\User\NTUSER.DAT) do @echo %~sA
... working [hh:mm:ss] 00:07:58
program1 & program2 &
java -classpath bin:lib/* FunctionalTests.TestRunner
bash script.sh
find /var/www/media_test1/media001/ -type f -not -name th* -exec cp {} /var/www/media_test2/media001/ ;
ls | perl -e use JSON; @in=grep(s/\n$//, <>); print encode_json(\@in)."\n";
{FILE_B
echo $f
mediainfo --Inform=General;%BitRate% /path/to/your/media file
wc -l < file.txt
ls * | parallel --extensionreplace %foo mkdir ./%foo
function gitb() { git checkout -b $1; alias $1=git checkout $1; }
ssh -i path/to/root-key root@host command
msg = [string](git status) | where { $_.Contains(nothing to commit) }
rm file.txt 2> /dev/null
0 */2 * * * python /path/to/file.py >> your_filename 2>&1
grep -E ^Title:|^Test run fileName
cii = !f() { git commit "$@"; }; f
sed /\(patt\)ern/ {s//new\1/} inputfile
Usage: coffee [options] path/to/script.coffee [args]
sudo mkdir /ruby_tutorials
sudo ln -s $(which gcc-4.2) gcc
sqlite3 <databasefile>
foo]=bar
sed s@,\(..\)/\(..\)/\(..\) @,20\3/\1/\2 @
find . -maxdepth 1 -type f -exec echo {} ;
awk -F, { #Do stuff } 2012_03_[0-3][0-9]
sed -i /center of\|farm\|middle of/{/①\|city/!d} file1.txt
awk { for (i=1;i<=NF;i++) if ( $i == "2010" ) count++ } END { print count } myfile.txt
p4 sync -n

awk / (TCP|UDP) / { split($5, addr, /:/); cmd = "/Users/user1/Scripts/geoiplookup " addr[1]; cmd | getline rslt; split(rslt, r); close(cmd); print $1, $2, $3, r[4], r[5], r[6] } < $IP_PARSED >> $BlockedIPs
awk {$4 = substr($4, 1, $3-1) $2 substr($4, $3+1); print}
select p in ${pid[@]} ; do echo kill $p && break; done
awk { for (i=1; i<=NF; i++) print $i } file
wget your...url...here
(echo $file | sed s/^.*\.\([^.][^.]*\)\(_[-.0-9][-.0-9]*_arm\)*\.deb$/\1/)
sed -n -e /^MemTotal/s/^[^0-9]*//p /proc/meminfo
echo obase=2;$ip1 | bc
wget -U Mozilla/5.0 http://www.idealo.de/preisvergleich/Shop/27039.html
find . -regex .*\.dcc$ -ls
cat /etc/passwd -n | grep `whoami` | cut -f1
op[i] = sprintf(%d\n, SQ substr($1,i,1))
mv /users/me/collection/*/* /users/me/collection-all/
SUBSYSTEM==usb, ACTION==add, RUN+=/u/usb_added Parameter %b
program arg1 arg2 arg3 arg4 containing spaces
grep -EA15 alpha.*beta|beta.*alpha | tail -16
if [[ $a == something || ($n == 2 && $b == something_else) ]]; then
if [ -e /etc/sudoers.tmp -o $(pidof visudo) ]; then
find $PWD -name *txt* ! -name *tmp*
sed -re s/^([^/]*)(\/B\/C\/)([^/]*)$/\1\2\1/ file
find . -type f -name prob[0-9]*_* -exec echo {} >> ${tmpFile} ;
if [[ $n == *[^0-9]* ]]; then echo not numeric; else echo numeric; fi
echo 8.8- | sed -r s/([[:digit:]]+(\.[[:digit:]]+)?)-/-\1/
if cols[2] != + or -:
awk FNR == 1 { print FILENAME } { printf "%02d %s\n", FNR - 1, $0 } infile
sed s/^ *//;s/ *$//;s/ \{1,\}/ /g;s/: */:\n/ infile | tr -s \n > outfile
{ echo n ; yes ; } | pacman ...
find / -iname *desktop -exec fgrep -l $0 {} ; 2>/dev/null
pwd
ssh user@host /path/to/script; echo -e \a > /dev/console
grep -io [0-9a-f]\{12\} file.txt > macs.txt
sed -n 1{h;d};/^"$/{g;s/$/ "/p;n;h;d};x;p;${g;p} input.txt
find dir -name *.png -execdir process.py {} ;
export PATH=/Library/PostgreSQL/9.1/bin/:$PATH
exec /bin/su -c cd /var/www/ssrc/...; python ... - www-data
su - jetty -c sh runProgram.sh
dd if=data.bin of=zero.bin bs=1 count=5 conv=notrunc
LANG=C sort filename
sed h;s/^[^ ]* //;x;s/ [^ ]*$//;G
cp -d files /var/copylinktohere/
java MyApp 2>&1 | split -b500k - out.log
yourname ALL = NOPASSWD:/path/to/graceful-restart
bwa sampe ref.fa r1.sai r2.sai r1.fq r2.fq | samtools view -bSho out.bam -; echo Here is another command.
powershell c:test.ps1 > c:test.log
scp -P 80 ...
exec bash
sort a b | uniq -u
sort -k2 -t_ -n [file]
odd=0; for i in `cat list | cut -d: -f2`; do if [ $odd -eq 0 ]; then echo -ne $i; odd=1; else echo $i; odd=0; fi; done
chmod o-w /Users/larson
ls -1v --color=never */filename | xargs tail -n 1
copy C:\Documents and Settings\user123\Desktop\eFormsSystem\eFormsApp\bin\Debug\*.* s:debug /Z /Y
pattern = re.compile(^[^ ]* ([^ ]*) ([0-9]*) ([0-9:]*) ([0-9]*) )
printf #include "%s"\n *.c
find . -type f ! -name *.gz -exec gzip {} ;
sed :a;s/,,/,58,/g;ta file
fgrep -A 16 New USB device found /var/log/messages | tail -n 16
awk (NR % 10 == 1){ print } your_input_file
echo /x/y/z/x | awk { gsub("/", "_") ; system( "echo "  $0) }
if ls | grep -q log; then echo there are files of type log; fi
blkid > Label
find . -name *.hash -printf -x\0%p\0 | xargs -0 md5deep -r * -e

cmd /K cd c:\pr /K process.bat c:\ext_028042012.dat auto
(cd SOME_PATH && exec_some_command)
awk foobar... file|awk new awkcmd
oldFile= `printf %020d ${RET_VAL}`
./lol.py $(if [ -n $URL ]; then echo -u $URL; fi)
cat file.txt | tr "'  \n | sort -u
for PLT in *.png; do display ${PLT} & done
find ./src -name *.c | grep -v /src/test/
awk /alice/,/cat/ file
system(ls, -l, dir)
rsync -av /path/src/ /path/dest/ --include */ --include *.jpg --include *.gif --exclude *
awk -F,+ NF==8;1 file.txt
os.execute(yourcommand&)
curl -H Authorization: 622cee5f8c99c81e87614e9efc63eddb https://api.service.com/member

IPT -P INPUT DROP
find $DIR -name *.jpg -o -name *.png -o -name *.gif -print
grep $string $file
awk -v s=$1 -v c=$2 $c ~ s || $3 == "foo" $3
_filecount=echo ${_filelist} | wc -w | awk { print $1 }
ORACLE_HOME=/opt/app/oracle/product/10.2.0/db_1/bin/
echo $(($JOBS>4?$JOBS:4))
archive ${_name_Project} ${_path_Componet1} filename1 file.log
echo $test | sed s/[[:space:]]*port[[:space:]]*\([0-9][0-9]*\)[[:space:]]*/<port>\1<\/port>/
ssh -n name@$host cat $(ls -t /path/to/log/dir/*.log | head -n 1)
sudo sed --in-place s/^#\s*\(%wheel\s\+ALL=(ALL)\s\+NOPASSWD:\s\+ALL\)/\1/ /etc/sudoers
sed -i s/$B_PRODUCTWorker.log/$1.log/g log4j.properties
ssh-keygen -t rsa
sed -i s/bad/good/g file*pattern
.... | awk { a+=1; print} END { print "total match number: " a}
ren ?_result.bak ?.txt
curl -w \nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n -o /dev/null -s http://www.pintile.com
diff <(head -k file1) <(head -k file2)
if [ $4 == managed?.out ];then
for f in *.csv; do echo $f | egrep -o [0-9]+ ; done
echo -e .separator "@"\n.import output log_dump | sqlite log.db
launchctl submit -l MyUniqueScript -p ROOT/script.sh -o ROOT/out.txt -e ROOT/err.txt -- ROOT/script.sh abc def ghi jkl
Process process = rt.exec(C:\Windows\System32\msconfig.exe);
/System/Library/Frameworks/Python.framework/Versions/X.X/bin/python
for file in `find . -type f -name *.html`; do echo new content > $file; done
git log -S ThisClass(object):
\x0a;
perl -pale $F[3]=~s/[.,]/$F[2]/g;$_=join" ",@F file
readArgs $@
. test.sh
find . -type f -exec java StripEnronHeaders {} ;
bash -c dirify "$1" dirify {}
tail -n +3 file.txt | head -n -4 > file.txt.new && mv file.txt.new file.txt

export PATH=/some/path:$PATH
7; sum8+=$8; mul+=$7*$8} END {print sum7/NR,sum8/NR,mul/NR}
gksudo sh -c 'command1; command2; ...'

d = $_GET[domain];
echo ${!value}
let b+=$number
echo shell_exec(command -options .escapeshellarg($_POST[input]));
perl -ne BEGIN{$state=0} print; if (/^\s*start\(\){/) {$state++;} if (/if mountpart "\$1" \/mnt -w ; then/) { if ($state==1) {print "NEW CODE\n"; $state++;} } <filename>
PS1=\[\033[1;36m\]\u@\h:\[\033[0m\]\[\033[1;34m\]\w\[\033[0m\] \[\033[1;32m\]$(__git_ps1)\[\033[0m\]\$ 


for inputFile in `find $SearchPattern2 -maxdepth 1 -type f -cmin +1 -iname *.pdf`
help test
ssh -t localhost stty -echo -onlcr; cat testfile.txt; stty echo onlcr | cat -v | less -U
rm -r -- $DIR*
grep -f 1.txt 2.txt | awk ... >file1
awk BEGIN {while ((getline < "file") > 0) { a[$0]++; if(a[$0] == 2) print; if (a[$0] >= 2) print }}
wc -c f1.txt | awk {print $1}
cat input | sort -u -n
out =`python --version`
sed s|^|cd |; s|/\([^/]*\)$|; $RUNLD \1| inputfile > run
PROMPT_COMMAND=history -a
export PROJ_HOME=~/Projects/stable
if [ -z $grep_resp ]; then
echo Replace <newLine> it by <newLine> NEWLINE <newLine> in my OSX terminal <newLine> and bash script | sed s/<newLine>/\$\n/g

cp foo* backup/
sudo aptitude install sharutils
curl --compressed http://en.wikipedia.org/wiki/List_of_current_NFL_team_rosters
C:tempcompile-testsrcabcD.java
nohup bash another.sh &
echo b.sh | at -t `date -v+60S +%Y%m%d%H%M%S`
printf \$(printf %03o $((65)))
sed /.*5/d;/.*1/i$(sed -n /.*5/p FILE) FILE
gawk {split($0,n_arr," "); getline; n=split($0,v_arr," "); getline; for (i=1;i<=n;i++){print n_arr[i] "=" v_arr[i]}}
{print $0,$4,$7,$11,$16,$19 }
TOT_SRC=273
echo $PATH
tellme do_build && deploy_build
cat file1|grep -vE ^$|while read min; do cat file2|while read line; do val=$(echo $line|cut -d, -f1); if [ $min -lt $val ]; then short_country=$(echo $line|cut -d, -f3); echo $min: $short_country ($val); break; fi; done; done
xprop -id `xwininfo -children -id [frame_id] | grep -o ^ \+0x[0-9a-f]\+`
eval $VAR
echo 09/May/2012:05:14:58 +0100|sed s/\:[0-9][0-9] \+0100//
rm -rf abc.log.2012-03-{14,27,28}
gawk BEGIN {getline} $3>60{print $2} AA/ff.txt | while read number; do gawk -v number=$number $2 != number BB/ff.txt > /tmp/ff.txt; mv /tmp/ff.txt BB/ff.txt; done
svn log -l 1 BRANCH_URL
source /tmp/del
find . -r -type f abc.txt -exec sed -i -e s/search/replace/g {} +
find /Directory -name *.jpg -exec mv {} /Directory ;
curl smtps://smtp.gmail.com:465 -v
sed -i  1 s/^#.*$/# $_now.$_rand/ ~/Desktop/cache.mf
sed -i.bak -E s/\\@.(\S)/\\@. \1/g *.tex
for /F delims=\: usebackq %%i in (`cd`) do SET USB_DRIVE=%%i
sed /^module/,/);/!b;/);/a\NEWCODE file
sed --in-place s/\(0x000[0-9]\)ffff/\1FFB0/ file
sed s/^server$/server.apple.com/g
if not exists %directory%%file%
sed -i s/\(^[^#].*\)rs[0-9]\+\( .*\)/\1rs.\2/ test.vcf
find $1 -path /proc -prune -o -name $2 -print -exec grep -Hn $3 {} ;
DataSet) | Out-Null

sed -nr /^.+:{3}$/p fileA.txt
convert -monitor -limit area 2mb myLargeImg.tif myLargeImg.mpc
autocmd bufnewfile *.py 0r /path/to/python_default.py
do shell script some_command &> /target/output &
test $show_name == Smash && show_name=Smash (2012)
find . -name *.wav.gz | xargs rename -v s/abcd124*/abcd1234$1/

sed -i.old 20s/^.{58}/&0x0003FFB0/ file
history | sed s/^\( *[0-9]*\) */\1../
sed s/^.\(.*\)..$/\1/ file
echo $PATH | pbcopy
svn propedit export file:///svn/repositoryName/path/to/file/in/repository/example.ex --file /data/svn/intranet/hooks/fileWithLogMessage --editor-cmd echo succeeded >
while [[ $c -le $n ]]
dd if=/dev/zero of=file.img bs=1 count=0 seek=20G
sed -e s;^.*\(\[.*\]\).*$;\1; inputFileName > outputFileName
echo cat  //title/text() | xmllint --shell rss.xml
sort inputFile | uniq -c | awk {print $2", "$1}
sed s|^ *\(.*\)\(.\)$|sed -i.bak "/^ *csh.*\2/d" yy/\1.txt| xx.txt | sh
if ! grep -q sysa /etc/passwd ; then
set shell=bash -i
git branch -r | awk -F/ /\/PREFIX/{print $2} | xargs -I {} git push origin :{}
sed s/\s/\n/3;P;D file
export NLS_LANG
sed -n /Foo/I,/Bar/Ip text.txt
perl -pe s#\\[^ \\{]+# #g file.txt
awk BEGIN { FS = OFS = ","} {$4 = $2/$3; print} | sort -k4,4nr -t, | sed s/,[^,]*$// inputfile
tr [:upper:] [:lower:] < infile > outfile
sed -i.old s/\.xx$// infile
gawk BEGIN {pattern = "/"} $0 ~ pattern {print} backup.sh
sed -i s/^$1=[^ ]*/$1=$2/ $3
sed -e s/dog/monkey/g -e s/orange/cow/g
wget -O - http://www.example.com | grep type=.\?text/javascript.\?
curl -z image0.jpg http://site.com/image0.jpg
sort -t $\05 file
find . -maxdepth 1 -type f
echo -ne hello\r
java -cp . Main $@
grep -n pattern file
[[ $current_branch =~ ^(t|b|bug_|task_|())([0-9]+) ]]
for (i = 0; i < itmIndex; i++) { printf(%s%s, item[i], delim); }
exec myBootStrap $arguments
awk -v OFS=\t {gsub(/banana/,0,$1)}; {print}
read header_line < headers.txt
echo -e $MY_STRING
awk FNR == NR {keys[$1]; next} $3 in keys || $6 in keys fileB fileA
export LC_CTYPE=UTF-8
IFS=,  read -a array <<< $string
sed s/^[^]]\+\] \([[:digit:]]\+\) \("[^"]\+"\).*/\2,\1/ inputfile
tr -d \r < old.sh > new.sh
sed -i.old 1s;^;to be prepended; inFile
* * * * * /usr/bin/php /path/to/loader.php
function ht() { perl -i -pe s|<!-- Mirrored from (.*?) -->\n|| $@;}
if [ git diff-index --quiet HEAD ]
sed / *- *\$[0-9]\+\.[0-9]\{2\}/s/// file
perl -nle print ++$_
join -a 1 <(sort file1) <(sort file2)
dos2unix myscript.sh
system LIST
egrep -o \b[^ ]+\. < list_of_words | sort | uniq
df -F ufs -o i | nawk NR>1 {print $4}
scp your_username@remotehost.edu:foobar.txt /some/local/directory
mkdir Pics; cd Pics
sed -i \|$sudoer|d /home/bdugan/t.txt
source(so.R)
ls -lt *.htm | head -10 | awk {print "cp " $9 " ../Test/"$9} | sh
{line:0:1}
(find . -mindepth 1 -maxdepth 1 -type d)
sed -f myscript.sed local07.csv > local07nq.csv
pkill -f rsync -av /456
sed -e s| x | * | -e s|^\([ 0-9+*/-]*\)|echo $((\1)) | YourFileName | sh | awk {a[$2]+=$1;} END {for (var in a) print a[var] " "var;}
cat -v <<< `ls *.properties`
DIR2=`echo $DIR2 | tr -d \r`
awk -F* {i+=$1*$2} END{print i} count.txt
sed s/\(^\|[^[:alnum:]]\)fish\($\|[^[:alnum:]]\)/\1bear\2/g
java -cp .;mail.jar myFile

sed -i s/WORD1.*WORD3/WORD1 foo WORD3/g file.txt
select transactionAmount from ... where ... group by transactionAmount;
sed -e s/\s\+,/,/g local.csv > localNoSpaces.csv
awk -F, {if(NR>1)printf("%s,%s\n",$1,$(NF-1));} ip.txt
tr -d \n
python scriptA.py && python scriptB.py && python scriptC.py && rsync blablabla
sed s/^[[:space:]]*//;s/[[:space:]]*$//
eval `keychain --eval id_rsa`
2underline;/g
awk {if (index($0, "<char") == 0) print $0} xmlfile
Get-Help command | more
sudo mysql -h localhost -u root -p
sed s/"index\.php?page=\(.*\)"/\1\.html/g
curl -s http://archive.apache.org/dist/httpd/?C=M;O=D | grep >httpd-*.*.*.tar.gz< | head -n1 | cut -d> -f 3 | cut -d< -f 1
Sleeping for 5 seconds, hit ctrl-c to proceed now.
C:mysql_pathbinmysql.exe --user=xx --password=xx --host=localhost --port=3306 --database=xx < C:yourdata.sql

seq --format %g.jpg 66895 105515 | xargs zip images.zip
sed -e s/;/,/g; s/,djh=/,@=/; s/\([a-z][a-z]*\)=[0-9]*,/\1,/g; s/@/djh/g

R CMD BATCH --no-save --no-restore --slave --args 2 Vocab May12 tabulate.r /dev/tty
curl -F File=@/path/to/your/file http://your.url
awk { $3 -= 2; print } filename >new_filename
perl -pe s/DATA/ "NO" . ++$n /ge file_in > file_out
scp -r local_dir you@server:remote_dir
vim scp://remoteuser@server.tld//path/to/document
sed -e s/\[\([^]]*\)\]/\\macro{\1}/g file.txt
chmod 755 housekeeper.sh
cat ip_file.txt | tr \n : | sed s/control_data\([^}]*\)}//g | tr : \n
{echo first bit;perl myScriptThatOutputsSecondBit.pl;echo third bit;} > dist/$i.htm
>csvfile.txt (FOR %R IN (*.sql *.xep *.aspx *.dll *.gif) DO @ECHO %~tR;%~zR;%~nxR)
df -Ph | column -t
hg update || hg clone <source>
kdialog --textinputbox Output: -- -0.1
basename $PWD
SCRIPT | nc -l -p -q 5 $PORT > $nc_data
echo New Line | sort -o file - file
comm -3 a b
cd $TAG
echo %path%
D1=`ls a_costant_string$DATE1????????$g* | sort -u | wc -l`
./printer_script $(sort -nrk4 $file)
if [ -e ./temp/file.txt ]; then
chsh -s /bin/bash www-data
cat hamlet.txt | words
where *.exe
int execvp(const char *file, char *const argv[]);
{ java p1 & echo $! >&2; } | p2 2>&1 &
printf %-10s%-10s%-10s%s\n $(command | command)
...app/>../lib/Cake/Console/cake MyShell
git push origin master:x4e925e4
ls -l | awk { if ($1 ~ /.rwx....../) print "line" }
ping host | perl -nle print scalar(localtime), " ", $_
cp $(rpm -ql $(rpm -qa | grep openssh-5)) myfolder
timeout $x ./my_script
printf %-12s%-12s%s\n $modules
sys.stdout.writelines(line for line in sys.stdin if not line.startswith(-))
sed s@food.type=.*@food.type=$FOOD@
inp.tbl <- read.table(text = system(command,intern=TRUE) )
sed -ie s/namespace FooBar/namespace Foo { namespace Bar/g; file.h
if ! command_exists ruby; then
sed -e s%</\{0,1\}l\{0,1\}ic>%%g
sed /^ "status": {/,/^  }$/!d;/^    "errors": \[/,/^    \],/!d file.txt
awk -F | {print $7}
echo Append string | sudo tee -a protected_file >/dev/null

bash script_name.sh
awk {if(NR%3 == 0){printf("%s\n",$0);}else{printf("%s ",$0);}} ip_file.txt
Process pr = rt.exec(new String[]{find, testDir, -type, f, -exec, md5sum, {}, ;});
xvfb-run -a -s -screen 0 640x480x16 wkhtmltopdf --dpi 200 --page-size A4 http://domain.tld/page.html /path/to/output.pdf
(hexdump /dev/urandom | tee out)
echo test | sed s#{"playlist":\[#{"playlist":[{"comment":" text 1","playlist":[#
find $i -type f
sed s/[0-9]+$//
awk -F, {count[$1,$2,$3]++; line[$1,$2,$3] = line[$1,$2,$3] ", " NR} END {for (i in count) {if (count[i] > 1) {v=i; gsub(SUBSEP, FS, v); print "Error: lines", substr(line[i], 3), "collide on value:", v}}}
<pathconvert pathsep=  property=doc.files.list refid=headers />
sed --in-place s/[[:space:]]\+$// file
f () { find . -name $1 -type f -exec grep -i $2 {} ; ; }
sass --watch path/to/sass1:path/to/css1 path/to/sass2:path/to/css2 path/to/sass3:path/to/css3
perl -lane print if $F[2] =~ /some pattern/ filename
>%AS_HOME%/bin/wsimport -keep -d ./build -p com.sample.hello http://localhost:8080/HelloSvr/HelloService?wsdl
perl -pe s{<(\w+)/>}{<$1></$1>}g < input_file > output_file
awk NF>3{a=$1;b=$2;c=$3;$1=$1;print;next}NF<3{d=$1;e=$2;print a,b,c,d,e;next}{$1=$1;}1 OFS=, file
awk NR==FNR{info[$1]=gensub(/[^\t]*\t/,"",1)} NR!=FNR{printf"%s\t%s\n",$0,info[$NF]} file1.txt file2.txt
command var1 var2 var3 > var1 var2 var3
cat main.properties | awk -F= {print "s/\\${" $1 "}/" $2 "/g"} | sed -f - 1.properties
/etc/git.bash

grep mystring myfile | tail -n3 | head -n1
awk { OFS="\", \""; split ($8, array, "="); printf "\"" substr ($1 , length ($1) - 13, 2 ) OFS substr ($1 , length ($1) - 10, 2 ) OFS $3 OFS $4 OFS substr (array[2], 0, length (array[2]) -2) "\"\n" } file.txt
export PATH=/usr/local/mysql/bin:$PATH
command=( rdesktop -u  $server )
awk {if( !seen[$1]++ ) print } input-file
cat dir/* > bigfile
mkdir ~/bin
find . | xargs grep -L someword | uniq
tr , \n < file
awk {var = $3} /three/ {a = var}; /six/ {b = var}; /five/ {c = var} END {print a, b, c} file
7z a -tzip myzip.zip /home/pradeeban/Desktop/man4/man5/*
sed s/\(.*\)\r/"\1"/g
mysqldump -B $db ...
0 1 * * * root /root/backup.sh
echo ${var:8}
s/^[^[]*[/[/
echo 2012-05-25 00:16:51,610 | awk -v var=$TIME {if ($0 < var) print $0}
PS1=\[\e[0;32m\][ \w ]\n#\[\e[m\] 
/<a href=http:\/\/domain.com$1>http://domain.com$1</a><br>/
awk {p = split($0,a,"\t"); if (length(a[3]) < 1000) print $0} test.txt > out.txt
echo ${WCUM[@]} | sed -e s/; /;\n/g | awk -F: !/ 0;?/ {print $0} | sort -t: -k 2 -r | xargs
:call system(date)
xdpyinfo | sed s/^ *dimensions: *\([0-9]*\).*/\1/;t;d
export FOO=/some/path
find <file_path> -name *.mkv -exec sh -c mv "$0" "${0%%.mkv}.avi" {} ;
[ x = x$HOSTNAME ]
rsync -a foo bar
awk {for (i=1; i<=NF; i++) {if ($i ~ /one/) {a++; if(a <= 6) sub("one", "three", $i)}}; print}
emerge --color y | less -R
(wget http://www.domain.com/page:$i -q -o /dev/null -O pages/$i || touch $i.bad) &
cd $(<fold.txt)
awk -v f=3 -v c=l1_user_instr -F  *|= $0 ~ c {print $f} input
grep -C 10 -P \[.*(?<!AAA|BBB)Exception
ls {max,min}.txt
while [ $i -lt $p ] || [ $i -eq $p ]; do
//title/text()
awk {print gsub("ENST[0-9]+","")} INPUTFILE
sed -i /string1\|string2/d file.txt
sed s/^[^|]*|[[:space:]]*\[\[\([^]]\+\)\]\].*/\1/ inputfile
gawk -v RS=Song NF{ print RS$0 > "Song_"++n".txt" } Song.txt
palabra=betina; i=5 ; awk -v var1=$i -v var2=$palabra NR==var1 {sub(var2," ")}{print } file
cd `dirname $0`
matlab -nodesktop -nodisplay < file.m &> file.out &
sed /^```{r/,/^```$/b;/^`r/b;:a;/\\\\$/{$!{N;ba}};s/\(\$\$\)\([^$]*\(\$[^$]*\)*\$\$\)\|\(\$\)\([^$]*\$\)/\1\4latex \2\5/g file
hxselect .c < test.htm
for file in *.sh.bak dir/*.sh.bak; do cp $file ${file//.bak}; done
PWD
echo -e a\tb\tc\td\te | awk -F$\t {print NF}
awk $1 ~ /\*+/ {prev = $2} $1 !~ /\*+/ {print prev, ":", $0} inputfile
vim somefile.srt -c :set bomb -c :set fileencoding=utf-8 -c :wq
file.sh value1 value2
nmap -iL yourfile -v -oX nmap.xml
PATH:/etc/init.d
FOO=bar; bash -c echo $FOO
ssh -t root@5.6.7.8 su - oracle
find /earth | sed -e s/\// / | awk { print "planet = " $1 "\ncategory = " $2 "\nsubcat = " $3 "\nname = " $4}
kill `ps -ef | grep dinesh | awk { print $2 }`
sudo perl -pi -e s/^(define).*(${2})[\'|"].*/${3}/g $file
awk [Aa][Rr][0-9]+ && [Ss][Mm][Ff]_[Ll][Oo][Gg] ...
awk -F *: * {if(x!=$1)x=$1;else $1="   "}1 input.txt
<MYSQL_DIR>binmysql.exe -uroot -p
whenever --update-crontab --set environment=production --load-file config/schedule_client.rb --user ubuntu
tar -cf - -F - | ...
export FIGNORE=.svn
http://cli.learncodethehardway.org/book/cli-crash-coursech5.html
print_r(token_get_all(<?php `uname`;));
sed -i.old /^[#*-]\{0,1\}blubb/d special.conf
if [ `uname` == Linux ]; then
source FILE

sed s|^\([^,]*,\).*|/^\1/c\\&| param.txt | sed -f - input.txt
cat logFile | grep -v Type: Error
some_cmd | perl -ne $|=1; print localtime . ": [some_cmd] $_" >> logfile
{PATH}
(1)]++)
vvar2
{1//./_}
curl -Is http://www.google.com | sed -nr s/^Content-Type: ([^;]*).*/\1/Ip
sort -t= -k1,1 -us FileB.txt FileA.txt
cat test.html | aspell list f- sgml --lang en --extra-dicts=/home/test/dictionary.test --add-sgml-skip={nospell,literal,screen} | sort | uniq
req.session.co = req.headers[req.session.co];
echo connect localhost:35873\ngetconfigs\nquit | flume shell -q
exec <&-
gawk -v RS=> NF{ print RS$0 > $1".txt" } InputFile
myvar=`perl ....`;
find . -type f -print | perl -l -ne  $_{$_} = -M; END {  $,="\n";   print sort {$_{$b} <=> $_{$a}} keys %_   } | head -n 500
grep -nrH regex /dir/
FOO=bar bash -c somecommand someargs | somecommand2
sed -i s/Andrew/James/g /home/oleksandr/names.txt
git clone git@github.xxxx.com:blablabla/reponame.git /Users/myname/dev/myfolder
awk -v parameter=$(awk '{a[$1]++} END {for (i in a) {if (a[i] > max) {max = a[i]}}; print max}' inputfile) {print parameter} otherfile
xargs -n 1 -P 16 mycmd
sed -i~ 2{s/^.*$/"\&gt"&"\\\&gt"/} FILE
cat aliases.sh >> ~/.zshrc
if list; then list; [ elif list; then list; ] ... [ else list; ] fi
tmux set -g mode-mouse on
sed s/".*\/\(.\+\.jpg\)"/\1/ig file
(myProgram | grep -oP ppl=\s*\K\d+\.\d+)
awk NR == FNR {nums[$1]++; next} ! flag {flag = 1; for (num in nums) {if (nums[i] > max) {max = nums[i]}}} {print max * $3} filetomax filetoprocess
alias knx=sudo kill -HUP `cat /usr/local/var/run/nginx.pid`
grep -F InputString -A27 inputFile.csv | sed -n 1p;19p;$p
/reference:File.dll (or /r:File.dll)
awk {++a[$0]; if(a[$0] == 2) print}
scp -r A D anotherhost:/path/to/target/directory
echo exec(ls);
su - dbadmin -c command
rm -r /usr/include/...
ssh host awk '{print \$0}' /path/to/log.txt
find bar1 -name *foo* -not -type d -not -name *.cc -exec ln -s $PWD/{} bar2/ ;
sed s/@[^,]*/@generic.com/
echo $COMMAND
sudo -i -u user sh -c for i in /dir; do echo $i; done
for i in /media/Daten/found.*/*.chk; do mv $i $i.$(grep $(file -bi $i | awk {print $1} | sed s/;//) /etc/mime.types | head -1 | awk {print $2}); done
ln -s /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl ~/.rvm/bin/subl
wget --user-agent=Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:12.0) Gecko/20100101 Firefox/12.0
(echo $PCAP_PATH | gawk BEGIN {FS = "/"} {print $NF})
sed -n /.*Visible.*/,$p originalfile > newfile
find / -name php.ini
cd here I go
(^[a-z,0-9]*)(.*)( [a-z,0-9]*$)
sed -n ${a}p;${b}p;${c}p
awk /;/{ count+=1 } {print} count==100 { print "COMMIT; BEGIN"; count=0 }

cat tmp | sed s/\bfi[^ ]*/(&)/g
dd if=<(yes $\01 | tr -d \n) of=file count=1024 bs=1024
static void Main(string[] args)
results = pexpect.run(ls -la)
echo ---${pass}---
b c 'echo test'
sort orginal_list.txt duplicate_list.txt | uniq -u
sub(/^M/,, $0)
awk /pay/ {match($0, /"money":"([0-9]+)"/, a); print substr($0, a[1, "start"], a[1, "length"])} action.log
CYAN=\e[0;36m
echo ..... | awk -F: {total+=$NF}END{print "sumTotal=" total}
exec(sudo /your/script);
awk -v DATA=$(<Friction1.k) ($2=="mue"){$3="      " DATA}1 dynaRcoupledmodel.k
done < <( find ...
sed -e s:\x01: | :g -e s/$/\n/
find . -name *.less -exec lessc {} ../css/{}.css
echo ${!x}
sed -i /Version/s/3\.1\.0\.2-1/3.1.0.2/ <files>
sort -k1,1 -k3,3
sed -e s/./& /g -e s/$/\\p/ < inputfile | groff -Tascii
find . -name *.pyc -delete
1 not == $1  == $1
<element id=box123 ... / >
awk BEGIN { one = ""; } { if ( one != $1 ) { printf("\n%s %s",$1,$2); one = $1; } else { printf(" %s",$2); } } END { printf("\n"); }
sed s#<!-- CordovaVersion -->#<script src="cordova-1.7.0.js" type="text/javascript"></script>#g junk4 > junk4_modified
awk /^>ENSBTAG/{tag=$0;}/^MA/{print $0,tag}
sed s/username/+/g
sRemotePage = file_get_contents(https://localhost/test=123);
convert -depth 8 -size 150x150 gradient:#4b4-#bfb rgb:test.raw
cd $(dirname $BASH_SOURCE)
sed -e /^Fixed pattern$/!b -e n -e s/(/(hello / myfile
cp -p source.file destination 2>> my_log.txt
bind "\t":menu-complete
./android update sdk --no-ui
sh: 2012-06-08-01-25.sql.gz: Permission denied
ls [[:lower:]]*
complete -f -X !*.@(exe|EXE|com|COM|scr|SCR|exe.so) wine
cp filename `date +%Y%m%d`filename
awk /^@/ && l~/@$/ { print l; l=$0; next } { l=l $0} END { print l }
grep -c ^processor /proc/cpuinfo
cat 1.css <(echo FOO) <(sed ...) 2.css <(echo BAR)
ls *.@(h|cpp)
find . -maxdepth 1 -type -f -delete
echo $fixture

ps -wef | awk NR>1 {printf("%s ", $2)}END{printf("\n")
@C:\Program Files (x86)\Internet Explorer\iexplore.exe localhost/%~nx1
find . -type f | grep -E -v .git/|.gitmodules|^./lib | xargs grep -E -l $\r|$\t| $
<some output producing command> | awk {print $1}
cd -P xyz
ssh -t -t -n -X $ip
for SUBDIR in ${SUBDIRS[@]}; do
read oldrev newrev refname
set prompt = %{\033]0;%n@%M\007%}$prompt
cat /var/log/messages | grep `date --date=yesterday +%b\ %e`
clang ... | sed s/\o33\[30m/\o33[37m/g
find / -exec echo {} ;
javac -cp /path/to/lib/jars/lwjgl.jar ...

adb devices | awk NR>1 {print $1}
create table tasks ( id INT primary key, status INT, argument VARCHAR(100));
xclip -i < yourfile.png
sed -r s/( [0-9]{5} )/\t\1\t/ yourFile.csv
if [ $Age -lt 18 ]; then
bind "\C-i":complete
ksh: ./so2.sh: cannot execute [Not a directory]
(mktemp -dt $0)
find . -name * -exec command arguments {} ;
(<file)
find -type f | parallel --tag eml-to-text {} | grep -o -n -b -f /tmp/list_of_interesting_words
echo All's Well That Ends Well | grep -o \(\bThat\b\|\bWell\b\)
find . -print | perl -lne $,=" "; @s=stat $_; print $_, $s[2], $s[7]

cd $(dirname $(readlink -e $BASH_SOURCE)) && ABSPATH=$(pwd) && cd - > /dev/null
echo Install ID:          XKCD (8426200,8179503) | sed -n s/^.*ID: *\([^ ]*\) .*$/\1/p
sed s/<.*>\(.*\)<\/.*>/\1/
<a href=sd:http://www.example.com/>I get opened in IE</a>
sed s/[a-z][A-Z][0-9][a-z][A-Z][0-9][a-z][A-Z][0-9]\([a-z]\)/\1/g
lines=`wc -l file | awk {print $1}`
COMPREPLY=( $(compgen -W $(ls /var/log/app/) -- $cur) )
xterm -e python something.py &
insmod k1.ko a=10,20,30,40
export PATH=/usr/local/bin:/usr/local/sbin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin
/etc/environment
sed s!myurl!http://192.168.1.1:8080/! strings.xml
((P_CUST_ORDER_REF+=1))
autoreconf -i
pscp.exe -pw blabla test-script.sh bob@10.20.110.57:/some/path/
(sed -n 7s/^.\{17\}//p file)
echo $(nslookup 100.100.100.100)
var=( 1 foo1*bar4 echo 1*4=4 )
rsync -avz -e ssh --delete /stuff/ user@desktop ip:/home/laptop/stuff/
sort -t: -k1,1 -k3 data.txt
^s**s*[ ][^*]+?[.]com[.]au$
sed -i s/<div id="$1"><p>*.*</<div id="$1"><p>$2</ /var/www/html/alarm.html
pBuffer: array[0..2400] of AnsiChar;
s/mov r1, \[r1, r2\]/sub [r8, r9], r10/g
pcregrep -M (^\s*\*\s*\[ \][^\*]+?(\w*\:[^\*]+\d$)|([^\*]+[.]com[.]au$)) file1
if %ComputerName%==A513242 (exit) else (echo else taken)
for i in foo/*/bazz.txt; do awk /regexp/ {exit} {print} $i >> bazzdigest.txt; done
chmod 700 foo.py
(date -d @133986838)
:%s/^(\d\{,3}\.\d\{,3}\.\d\{,3}\.\d\{,3}\)\(\/[^])/1,2
tput smcup
git commit -m Frustrating <insert object of frustration here>!
--include */
awk -F, BEGIN { OFS = "," } $1 { last = $1 } !$1 { $1 = last } { print } SedExit.txt
Popen(%s %s % (cmd, args), shell=True, stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
rvm wrapper ruby-1.9.3-p125 ext_1.9.3 bundle
find ABG-Development/ -name *.php -print0 | xargs -0 grep <? | wc -l
rsync --progress -avhe ssh /usr/local/ XXX.XXX.XXX.XXX:/BackUp/usr/local/
( cat Doxyfile ; echo PROJECT_NUMBER=1.0 ) | doxygen -
< input-file tr -dc \t | wc -c
printf %0.6d $value
sed -e /\([a-zA-Z0-9]\{1,10\}\s\{1,5\}\"\)/!d
cd /folder/with/data; tar cvz | ssh target cd /target/folder; tar xvz
sudo port install gsed
[[ $Var = 1 ]] && { echo yes-1; echo yes-2; } || { echo no-1; echo no-2; }
awk $1~/\/1$/ && $2==16 file
(tail -1 /logs/file.txt)
find . -type f -name *.xml
print  + \033[01;41m +   +\033[01;46m +   + \033[01;42m
matlab -nodesktop -nojvm -nosplash
sed -e /\([a-zA-Z0-9]\{1,10\}\ \{1,5\}\"\)/!d
tar --preserve-permissions --preserve-order -jc /path/to/your/folder > /path/to/your/backup_file.tar.bz2
find ~/dir1 *.m4a |xargs play
(/usr/bin/php -f $HOME/lib/get_fifobuild.php)
(awk -F [<>] /<ns1:CarrierServiceId>/ {print $3} TEST.tmp)
for i in *.II; do mv $i $(echo $i | sed s/_13/_15/g); done
ls -a
{varName}(s?[s=]s?).+s*;{0,1}
sed /^\$/d /tmp/foo
wget -O - http://d24w6bsrhbeh9d.cloudfront.net/photo/4498158_700b_v1.jpg | convert - test.png
awk NR == 2 {print}; {line1 = line2; line2 = line3; line3 = $0} END {print line1; print line2; print line3} files*
rm -r `find -type d -iname .svn`
wget http://example.com/ -r -nv -S -R js,css,png,gif,jpg,pdf 2>&1 | perl -ne s|^.*URL:(https?://.*?) .*|\1|; print "$1\n"
sed -r s/(^|,)([^,-]+-){3,}[^,]+(,|$)/\3/g
if (NR == 2)
pkill -TERM -P 1002
ruby /path/to/file.rb
find ~/dotfiles -maxdepth 1 -mindepth 1
find . -iname *html | xargs egrep -iwl (word1.*word2|word2.*word1)
./samtools view mybamfile.bam | awk -F\t { print $2 } > output.txt
print STDERR Your password please: ;
echo $matched
{ num_gold++; wt_gold += $2 }
fastqc -o $out_path --noextract -fastq $files1
eval $VARIABLE
cp -a symlink/ dest
Teacher ALL=(ALL) /bin/bash
arp -a | cut -f 2 -d  
awk /^H/{t=3} /^B/ || t-- >0 input.file
perl -pi -e s#$new_line1#$new_line2#g $FILE
nunit-console-x86 ambiHomeWPFTestTestsbinReleaseTests.dll
awk { array[$1 "\t" $2 "\t" $3] += $4 } END { for (i in array) print i "\t" array[i] } file.txt
cat file1.txt | xargs -i sh -c ls  /projects/analysis7/{}/meta_bwa/hg19a/*varFilter 2>/dev/null
errortime=`echo $line | cut -c2-20`

find . -name *.pdf -exec /path/to/pdftotext {} ;
a + $b))
screen -d -R -S test
(sleep 10 & )
--raw Use raw formatting for replies (default when STDOUT is not a tty)
ls -1 *.yml.sample | sed s%\(.*\).yml.sample%mv & \1.yml% | sh
grep -Fxv -f first-file.txt second-file.txt
awk BEGIN { RS=""; OFS=FS="\t"; print "A", "B", "C", "D", "E", "F" } { split ($2, one, " "); split ($3, two, " "); print one[1], two[1], one[2], two[2], one[3], two[3] } file.txt
for i in `seq 100`; do ls Force$i.txt; done
select last_insert_rowid();

find . -type f -regex @"LBL_[[:digit:]"]+
mogrify -format jpg *.png
awk -F\t /hello/ {print $0} data.txt
rsync -zarv --exclude=* --include=*.sh $from $to
sed -n 452,$ { /wire/ {p;q} } /tmp/foo
source /etc/bash_completion.d/virtualenvwrapper
find /path/to/directory -type f -exec md5sum {} + >before.txt
mysqldump database | sed -r /^(UN)?LOCK/d > database.sql
awk !/^C/ data.txt
a=$(s3cmd get s3://bucket/image)
pwd | cut -d / -f 4
% sed -n -E s/.*(href|src)="([^"]*).*/\2/p input.html
(expr $machinenumber + 0)
cd $(dirname $(which ssh));
currentSize= du -s /root/Dropbox | cut -f 1
PermitUserEnvironment yes
ssh-keygen -f ~/.ssh/apache-rsync
awk {print $2} file.txt
sed /href/{ /language/s/<match>/<replace>/ }
awk BEGIN {"curl -sI http://example.com" | getline; print "Status Code: " $2}
for /f %%v in (sed blah blah...) do (set name=%%v)
sed s/[0-9]/0&/
sed -ri s/^(([^,]*,){34})0([^,]*)/\1+91\3/ test.csv
GPPARS=( xlabel 'Time' ylabel 'value1' y2label 'value2' format x '%H:%M')
grep -E (\S+\s+){12}A\s
cat File_A File_B File_C File_D |sort | uniq -u | while read line ; do file=`grep -l $line File*` ; echo $file $line ; done
kill -INT $$
get-content c:filename.txt -TotalCount 3
sed -i Ns/.*/replacement-line/ file.txt
textmate `git status | grep both | awk {print $4}`
sed 24s/.*/"$ct_tname"/ file1.sas > file2.sas
sed 29s|.*|"$ct_fname"| file1.sas > file2.sas
awk -F= $1 ~ /^(session|customer)$/ {if (!($1 SUBSEP $2 in a)) {ids[$1]++; a[$1, $2]}} END {for (id in ids) {print "Count of unique", id, " " ids[id]}}
( exec git status --porcelain | egrep ^D | sed -e s/^D  // )
mv temp_output* $code
command time -f %E real,%U user,%s sys ls -Fs
lsof $FILE | grep -q COMMAND; completed=$?
awk NR % 3 == 0 { print $0 ; print "" } NR % 3 INPUTFILE
{ teststring=$(<foo.txt); } 2>/dev/null
ffmpeg -ss 00:00:10 -t 1 -s 400x300 -i $1 -f mjpeg /home/zavids/rawvids/thumbs/$1.jpg
PATH:/Applications/Xcode.app/Contents/Developer/usr/bin
awk -F cn=|, BEGIN {srand(); OFS = ""} {n = split($2, a, ""); for (i = 1; i <= n; i++) {if (a[i] ~ /[[:digit:]]/) {new = new int(rand() * 10)} else {new = new sprintf("%c", int(rand() * 26 + 97))}}; $2 = "cn=" new ","; print}
rsync -avz` source-dir/ target-dir/
echo 123 | sed -e w tempfile -e s/[0-9]/\./g
exit 1
java className ab|cd
C:Program FilesJavajdk_versionbin
set -- $(awk <awk script here>)
touch file{1..12}.txt
foocmd ... $l
comm -23 <(sort /tmp/oldList) <(sort /tmp/newList)
/usr/bin/osascript -e tell application "Finder" to make alias file to POSIX file "$Source" at POSIX file "$Destination"
awk NF data.txt
ECHO = /bin/echo -e
for /F skip=4 tokens=3* %%j in (reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders" /v "Common Startup") do set STARTUP=%%k
mysqldump -S /opt/lampp/var/mysql/mysql.sock -u root -h localhost -pgihan mistoria wp_posts | gzip -9 >/opt/lampp/htdocs/mistoria/wp-content/backups/backup_table.sql.gz
split(string, array, fieldsep)
sed /^sms;deliver;/!y/"/'/ yourfile | sed -n /^sms;deliver;/!b;:r;${p;b};N;/\nsms;deliver;/!{s/\n//;br};P;s/.*\n//;br
sed 1,/FECHA/d;/PROCHAIN/,$d inputfile
echo foo | tee f1.txt f2.txt
tr -cd \11\12\15\40-\176 <buildreport | nail -s Build completed $towhom
sed -i /SERVER_MEMCACHED/s/localhost/mydomain.com/ input
awk BEGIN { OFS="|" } { for (i=1; i<=NF; i++) if (i <= 3 || i >= NF - 3) printf "%s"OFS, $i; else printf "%s", $i; print "" } file.txt
... | sort -k 1 > file } ...
sed -e /\[Block B\]/{:a;n;/^$/!ba;i\inserted line -e }
awk -F  {print $4,$3,$5,$6,$7,"1","2","3","4"}
awk -F\t function abs(x){return ((x < 0.0) ? -x : x)} {if (abs($9) < 500) print $0}
find $ROOT_PATH -executable -name unittests_runner.exe -exec {} ;
convert *.jpg -resize 256 -scene 1 small/image_%02d.jpg
perl -lane for $i (1, 3) {@nums = $F[$i] =~ /(\d+)/g; for $num (@nums) {$F[$i] =~ s/$num.{$num}//}}; print join("\t", @F)
s/p1([^0-9])/Bob1/g
sudo cd / && grep -rn hello *
local [option] name[=value] ...
vim $(find . -name *.cpp)
/etc/crontab

strace -c -f -evfork ./t.sh
(awk END {print NR} inputfile)
find .... | xargs rm
sed -e s/^right=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/right=192.168.1.92/ filename
awk BEGIN { OFS = "\t" } { $14 = "string" $14; print } infile
my_obj = MyObject.objects.filter(user__username=whatever)
sed -i s/8005/8006 server.xml
gawk --re-interval BEGIN{RS="[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}.[0-9]{1,6} \\[[A-Z]*\\]";} /983a99f8-bec6-11e1-80dd-059a821d0b73/ {print savedRT, $0} {savedRT = RT} full.log

tar -cvzf - foo/ ¦ split -b 50k foobar_
make test || exit $?
grep Sorry $(grep -l Thank /etc/profile /etc/bash* ~/.bashrc ~/.bash_profile ~/.profile) /dev/null
awk { if($2 ~ /^[*]+$/) { gsub ( /[*]/,"N",$2); } if($4 ~ /^[*]+$/ ){ gsub ( /[*]/,"N",$4); } print  } your_file.txt | sed s/[-$*=+()]//g
cat file | tr   \n | tr -d ,
grep -q ^a file.c && echo The file is appended || echo the file is clean
scp file_to_copy user@remote.server.fi:/path/to/location
sed :x;/a\{100\}/b;s/a/aa/;tx
awk NR == 1 {pad = length($0); print} NR > 1 {gsub(/\r/,""); printf "%*s%s\n", pad, " ", $0}
find . -ls -name *.app -prune
sed -r s#^([^\;]+);([^\;]+);[^\;]+;([^\;]+);.*$#<tr><td>\1</td><td>\2</td><td>\3</td></tr># < Mitarbeiter.csv > header-content.html
diff -r -x .git repoA repoB
head -84 <file> | awk {print $1} | tr -d >
find /Users -name prefs.js -exec sed -i.bak -e s/$oldPref/$newPref/ {} ;
fprintf(stderr, INFO: dvdauthor creating table of contents\n);
cat original_list | wc -l
cd Documents/Programing/HelloWorld/
myFile=dirname(__FILE__)./test.txt;
TERM=msys
mpc current | awk { print } END { if (!NR) print "not playing" }
echo export PRIMOSBASE=/directory/for/primosfiles >> ~/.bashrc
python -c $import subprocess\nwhile True: subprocess.call(["ls"])
sed 1{/^$/d}
ssh user@server top -n 1 -b > /tmp/top.out
cat cvs_file | awk BEGIN{ FS=" *;"; OFS=";" } {$1=$1; print $0}
pcregrep -Mni ^[^\S\n]*?\w+\s+\w+?\s*\([\w-0-9,/* \s]*\)\s*\{$

sed \$a$(var) file
particular_script || true
sed N; s/\<why\>\n\<huh\>/yo/g test.txt
swipl -q -s kb.pl -t dad(elvis,X), writeln(X), false
printf %'24f\n 3.140000 3000
result = commands.getoutput(/usr/lib/cgi-bin/test.sh %s % name)
curl -H Content-Type:application/json -d{"user_credentials":"API_KEY", "doc":{"name":"docraptor_sample.pdf", "document_type":"pdf", "test":"false", "document_url":"http://foo.com/tablemaker.php?CTN=$1"}} http://docraptor.com/docs -o docraptor_sample.pdf
javac -classpath dir Measurement.java
awk {print "echo",$1,$2,$3} $logfile | sh -x
fuser -TERM -k -w mfifo; sleep 5; fuser -k -w mfifo
print i, something > /home/ acc .txt
echo apples (orange) (plum) | sed -re s/^[^(]+\(//
{var1/1/2}
sed -i /TEXT_TO_BE_REPLACED/c\This line is removed by the admin. /tmp/foo
sort -k3n -t; file
rsync -R test/withintest/go.rb test2
awk -F\t { for(i=3;i<=NF;i++)if($i ==".") next; print} input.txt > out.txt
*/30 9-18 * * * root [ $(date +%H%M) = 1830 ] || your_command
cat file1.txt file2.txt > file3.txt; mv file3.txt file2.txt
grep -v turnkey
find /myDir -name log* -and -not -name *.bz2 -ctime +7 -exec bzip2 -zv {} ;
grep ^corrupt textfile > anotherfile
echo $(get-all-hosts) | tr   \n | xargs -P 4 -n 1 ./blocking-restart
[ $? -ne 0 ] && { echo failed!; exit 1; } || exit 0
findstr error warning C:MyFiles*.txt
sed -n h; s/.*//; n; G; p /tmp/foo
complete -r cat

global-ignores = *.iml
echo set term canvas mousing size 500, 500; set output 'file_name.html'; plot 'my_file.txt' with lines | gnuplot
|
sh example.bat
expr $d1 - $d2
startServer; sleep 5; grep -m 1 server up <(tail -f log)
sed s/ .*//g file
sed -i /^zone "friedrice.com"/,/^}/d you.txt
cat $MAIL | formail -ds sh -c cat > msg.$FILENO
grep <p> myfile.html | sed -e s%\(<p>\)\(.*\)\(</p\)\(>\)%\2%
sed $(sed -n '/>ENST/{s=.*\(ENST[0-9]\+\)\s\+\([0-9]\+\).*=s/\1/\1_\2/;=;p}' two.txt) one.txt
F: directory
dos2unix /tmp/testFiles/*.xml
awk !s[$2]++
echo void f0 (***) | void f1 (***) | void f2 (***)| void f3 (***)  | sed s, *| *,\n,g
python C:PythonScript.py
/bin/sed -i s/HOSTNAME=.*/HOSTNAME=${HOSTNAME//./_}/g /etc/sysconfig/network
sed s,^\([^:]*\):.*\(RID=[[:alnum:]]*\).*$,\1 : \2,
sed -e s,<math>,&\\begin{align},g -e s,</math>,&\\end{align},g
echo This is the body | mail -s Subject recipient@example.com
grep -A1 Started POST.*\/[fr] log/production.log
c:cygwinbinbash.exe --login -c scp account@server:~mysourcedirectory/targetfilename* /cygdrive/c/targetfolder
for /f %%f in (type dll.txt) do regsvr32.exe %%f
trap exit 128 SIGHUP
scp -r user@your.server.example.com:/path/to/foo /home/user/Desktop/
ls -l log* | wc -l
echo -e abc.txt\npqr.txt | while read name; do find . -name $name; done
exec(s3cmd --progress put test s3://non_existent_bucket 2>&1, $output);
echo $line | awk BEGIN{FS="\\"; OFS="\\\\"} {print $(NF-1), $NF}
grep -Po (?<=myname\s)\w+ inputFile
open /Applications/MyApp.app --args /path/to/file.pdf
5, arr, :); print arr[5]
mv erd_*_$(date -v -1d +%Y%m%d)_*.csv.Z destination_dir/
sed -r :r;/(^|\n)$/!{$!{N;br}};s/\n/\v/g names | sort | sed s/\v/\n/g
( get_old_version )
./scriptname sendcommand command with spaces
for i in {1..100}
{PWD
mkdir /tmp/`basename $(pwd)`
[ -z keytool -list -alias cert ] && keytool -genkey -alias cert -keyalg RSA -storepass ${KEYSTORE_PASS} -keypass
mkdir -p $(echo $package | tr . /)
comm -3 <(sort file1) <(sort file2)
exec(/path/to/that/bash/file);
startJob 0, 583, bfd, 4thUnusedArgument
grep -A2 A LOG_FILE | awk -v RS=--\n !/B/ { printf "%s", $0 }
shell_exec(wget '$url');
mongo mydb
user ALL = NOPASSWD: /home/keeboi/Desktop/iptool.sh
./script | tr \n  
perl -pe s/#[0-9a-f]+/$&=~tr%0123456789abcdef%fedcba9876543210%r/ge <infile >outfile
find . ! -empty
git config core.editor emacs -nw
echo ${QUERY_STRING##*=}
cat input | xargs -L13 -d\n | sed -e s/ /, /g
find files/* -exec bash -c /path/to/stagger < "$1" -- {} ;
(while [ ! -d $FOLDER ];do cd ..;done;pwd)

sed /^>/!s/[^ACGTN]//ig input.txt
famihug@hvn:/home/famihug%~/bin/leecher.py; cat ~/bin/kq.txt [0]
aapt dump badging
shopt -s globstar
:%s/.*/echo \0rcat 0/g
Defaults !visiblepw
gunzip latest.tar.gz
apt-get install zsh
sed s/:/|/ input.txt | cut ... | sed s/|/:/
apt-get install -y [YOUR_PACKAGE]
sed -i s/database_name_here/$MyVar/g config.php
exec 2> >( tee log.file > /dev/tty )
DeRez -only TEXT foo.textClipping | perl -ne m|/\* (.*) \*/| && print $1; END {print "\n"}
if [ $choice != y ] && [ $choice1 != y ];
awk {$1 = ""; sub(" ", ""); arr[$0]++} END {for (i in arr) {print arr[i], i}}
sed -n s/.*\(PATTERN\).*/\1/p FILE
echo ${a}_$b
ssh -t host4 bash ./run_audit.sh
echo $path_to_track >> /home/noob/MPDPlaylist/testplaylist.m3u
Page 121, first program: test if (NF > 0) is unnecessary.
sort -u -o test.txt test.txt
find -iname *.py -and -type f | xargs sed -i -e /= *text()/ i new text
(xmllint --xpath string(/NoteData/@Note_Nbr) test.xml)
File.read(/etc/system-release)
awk NR==2 {split($2, arr, "[#/]"); print arr[2]}
sed s/\([^:]*:\)\([^ ]* \)\([^:]*\)/\1\3\2/ test
echo -e ABC 12345 \t Job Worked on DATE >> jobs.txt
find . -name myfile* -print | xargs grep myword $1
scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz ec2-user@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
wget --content-disposition http://www.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.25a-linux2.6-x86_64.tar.gz/from/http://cdn.mysql.com/
find dir -type f | xargs sed -i.bak s#from#to#
apache ALL= NOPASSWD: /path/to/script command
cat chr{1..22}_from_6_new_mono.txt >merged
sed s/$/<CRLF>/
echo `diff -biw out.txt out2.txt | sed -n s/^> //p`
sed s/name="m_AllowDownload">False</name="m_AllowDownload">True</
sed -i s/<\/li>/<\/li> \n/g report.txt
hosts=(hostname1 hostname2 hostname3)
echo -n What is your name? > /dev/tty
awk {print substr($0,2,6)} file
[ foo bar = hw.machine: iPhone3,1 ]
grep -c proc /proc/cpuinfo
( cat original.jpg ; dd if=/dev/zero bs=1024 count=1024 ) > bigger.jpg
PS1=\[\e[1;33m\]\u::\h\[\e[m\] \[\e[0;32m\]{ \w }\[\e[m\e[0;36m\]\$(parse_git_branch)\[\e[m\e[1;34m\]\@\[\e[m\e[1;35m\]\n->\[\e[m\] 
for ((i = 2; i <= 30; i++)); do awk -v i=$i $i < 0.05 {print $1, $i} test.txt > phen_$i.txt; done
px aux | sed -n s/.*-q\s\([0-9]\+\).*/\1/p
find . -name *.xvi.txt | sort -t. -k3 -n
shopt -s globstar
mkdir -p $MYPATH
function whitelist-ip () { ssh vps-01 /usr/bin/sudo /sbin/iptables -v -I INPUT 1 -s $1 -j ACCEPT; }
if [ $MESSAGE = username [$USERNAME] is already taken ]
/bjump.*?b/
/DVERDOT=8.0.0.0

find . -name *.html -exec /bin/bash -c sed "s/DOCTITLE/$(sed -n '\,<h1>.*</h1>,{s,<h1>\(.*\)</h1>,\1,p;q}' '{}')/" "{}" ;
diff a.csv b.csv | sed -n /^[0-9]\+d[0-9]*/,/^[0-9]\+[^d]*$/{/^[0-9]\+/d;s/^< //;p}
cd `ls -rd folder_*`
find ${INPUT_LOCATION} -name *.pdf.marker | xargs -i bash -cx pdf=`dirname {}`/`basename {} .marker`;[ -e "$pdf" ]&&{ mv {} "$pdf" "$0";} ${OUTPUT_LOCATION}
awk { print substr($1, 1, 7), $2 } file.txt
ps -ef | sed -n /blahblahblah/s/^.*port=\([[:digit:]]\+) .*/\1/p
grep RECORD ${FILEARRAY[@]:0:$fileIterator} | awk for(i=1;i<=NF;i++) {if($i ~ XXXX) {XARRAY[$i]++}} END {for(element in XARRAY){print element >> FILEB}
xgrep -x //article[@id] /tmp/foo
run_my_command | { read string_to_filter_for; fgrep -e $string_to_filter_for }
awk /$1/ {print NR} $2 | head -n 1
curl -u UserName\WithSlash:PasswordWithExclamation! http://....
javap -classpath <classpath> -s Scope$Variable
cat > my_fifo
awk -v last_empty_line=$(grep -nE ^[[:blank:]]*$ your_file | tail -1 | cut -c 1) {print; if (NR==last_empty_line) print "->some new text here"} your_file
paste -d : file1.txt file2.txt file3.txt
Write-Error blah
awk /^[^ \t]/ && buf{print buf;buf=""} {buf=buf $0} END{print buf} input.txt
awk -F= OFS=FS { gsub("-", "_", $1); }1 file.txt
sed -i -e /-nan/d datafile.txt
ffmpeg -t 7200 -s 640x480 -f rawvideo -pix_fmt rgb24 -r 25 -i /dev/zero empty.mpeg
tail -q -n1 * > OUTFILE
source ./addalias.sh ls ls --color=auto
(netstat -ltn | sed -rne /^tcp/{/:(22|25)\>/d;s/.*:([0-9]+)\>.*/\1/p}))
a+
alias clip=xclip -i -selection clipboard
sed /\[BEGIN AccountID\]/,/\[END AccountID\]/!d;/\[BEGIN AccountID\]/{h;d};/./H;/\[END AccountID\]/!d;g;s/\n*\[[^\n]*\n*//g;s/\n/,/g;s/\s*//g;ta;:a;s/,//9;t;s/$/0,0,0/ file
sed -r s/[std:]*vector\s{0,1}</std::vector</ < codefile > tmpfile
echo $process is down! >> /tmp/monitor_searcd.log
ec2-run-instances ami-****** -k testing2.pem -d Setup.sh
alias lsps=ps -elf | grep
sudo /home/ronnie/chbr.sh
:h pattern-overview
cmd | grep -o -E [0-9]+:[0-9]+:[0-9]+:[0-9]+
`your_command args etc`
for i in {1..100000}; do /bin/sh -c /bin/true $i; done
(get_last_name $path)
somecmd SELECT ... "$etag", ...
bash -ilx
cap roll HOSTS=server1, server2, server3
grep -Po (?<=http://)[^/]+ access.log | sort -u
unalias cd
COLUMNS : columns 142
(for [line (repeatedly x read-line)] (DateFormat/parse line))
nohup myscript.sh
awk -v partition=${partitions[$n]} $2 ~ "^/" partition "$" { print $1 } /etc/fstab
if [[ $line =~ ^[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3} ?--> ?[0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}$ ]];
if(word ~ /Pattern/*/)
find /path/to/files -name *.php | xargs sed -i -e s/www.example.com/subdomain.example.com/g
if emacsclient --eval nil >/dev/null 2>&1; then echo run client; else echo run emacs; fi
awk BEGIN { clean=1 } /#c3284d#/ { clean=0 } /#\/c3284d#/ { clean=1 } { if (clean==1 && match($0,"#\/c3284d#") == 0) { print $0 } } dirty-file > clean-file
[[ $
chmod +x hello.sh
find . -iname *jpg -exec /your/image/conversion/script.sh {} +
return new File(MyClass.class.getProtectionDomain().getCodeSource().getLocation().getPath());
sed -n s/\$\w\+\['keyword1'\]\s*=\s*'\([^']\+\)';/\1/p inputfile
gnome-terminal -x bash -c cmd1; cmd2
HOME/vikas/input.ksh
echo a|||d|e | sed :repeat; s/||/|\N|/g; t repeat
find . -name *abc*
pfiles $$ | grep peername | head -1 | nawk {print $3}
(sleep 20 && kill $$) &
sed -r s/<a href="([^["]*)"/\1&/ input-file >new-file
<input name=foo type=number required>
taskkill /FI IMAGENAME eq iisexpress.exe
[[ $value =~ ^[0-9]+$ ]]
npm install azure --global
(...)
curl --cookie cookies.txt --cookie-jar cookies.txt http://www.example.com/
cat file.txt | sed s/^.*\([0-9]\{13\}\).*/date -d @\1/ | sh
sed -n /token/s/.*name="ltoken"\s\+value="\([^"]\+\).*/\1/p input_file
normal: { x: 10, y: 6 }
screen -ls | grep -q NAME || ...do something if server is not running...
svn cat http://myrepo/myfile.txt -r1
ssh root@server nohup /usr/local/bin/app -c cfg &; exit
export PATH=/home/david/pear/bin:$PATH

eval $FOO
awk  !x[$0]++
ps -p 747 -o %cpu,%mem | awk NR>1
hive -e SELECT count(*) from pds_table > a.txt
sed -i s/version: .*/version: 1.2.3/ file1 file2 file3 ...
sed -e s_: "[a-zA-Z0-9]*" _: _g -i file.txt
ps -p 29264 > /dev/null; echo $?
awk /ERROR|DEBUG|TRACE|WARN|FATAL/ {count[$4,$5]++} END {for (i in count) {split(i, a, SUBSEP); print a[1], a[2], count[i]}} inputfile
echo $LANG
grep -n target_string data.txt
echo 10.2>10.1 | bc
find . -not -path */gen* -a ( -name *.java -o -name *.xml )
ps -A | grep -m1 firefox | awk {print $1}
pcregrep -o (?<=_ )([^(]+) /tmp/foo
time php foobar.php
awk -F
sed s/.*deviceid=\([^&]*\).*/\1/
sed s/.*\<\(domain\)=\([^&]*\).*\<\(sdk_ver\)=\([^&]*\).*/\1 \3sion\n\2 \4/p;d file
rsync -av --exclude=.* src dest
grep -B 2
sed -e /mktemp' is dangerous/D
for i in {0..721}; do touch -md `grep '<li><em>Date' $(printf 'msg%05d.html' $i) | sed -e 's#<[^>]*>##g' | cut -d' ' -f2-7` $(printf msg%05d.html $i); done
awk NR % 2 {print} !(NR % 2) && /pattern/ {print} file.fasta
setlocal enabledelayedexpansion

paste testA.txt testB.txt testC.txt | sed -e s/\t/ : /g
find . -type f -not -exec grep -q Copyright {} ; -exec sed -i 2i/* Copyright */ {} ;
mkdir /mnt/temp 2>&1 /dev/null
sed -n s/.*\([0-9][0-9]*G[0-9][0-9]*\).*/\1/p
cmd 2>&1 | less

export GREP_OPTIONS=--color=always
fileName= `$ON.gpg`
sort -n -k 3.8,3.12 -k 3.6,3.7 -k 3.4,3.5 < input_file
sed s,APP_HOME=[^;]*,"APP_HOME=/home/user/app/2.0", -i ~/.bashrc
awk -v ORS=  /^QueueName=/{print "\n"} 1 foo.txt

your-script arg1...
cp -r ${chapter}/subsections/. ${temp}/subsections
sed s/\(\([^,]*,\)\{3\}[^,]*\),/\1\n/
find . -type f -name *.flac | parallel ffmpeg -i {} -acodec libmp3lame -ab 320k {.}.mp3 && rm {}
sed /burger.co.us/d < inputfile > outputfile
perl -nle print if m{^[[:ascii:]]+$} inputfile
curl http://somehere.tld/data.json | jshon -e url_outfile_excel
ls -R -ltr / | head -50 | awk {if ($5 >0) print $5,$9} OFS=, > sample.xls
perl -ne print unpack(B8,$_),$/for split// FILE
grep [][-] ...
gnome-open $(bundle show jquery-rails)
sed s/^CN=\([^,]*\).*/\1/ input_file
>php -i
cp ./dir1/dir2/mpc.exe ./mpc.exe
emulator.exe -avd sender
echo -e this\thas\ttabs
NEWPATH=your_new_path sed -i /ADDED BY INSTALLER - DO NOT EDIT OR DELETE THIS COMMENT/ s:/home/user/abc/bin:$NEWPATH: .bashrc
sed -ne /[Ww][Ii][Dd][Gg][Ee][Tt]/,/^<\// {//p} file.txt | awk NR%2==1 { sub(/^[ \t]+/, ""); search = $0 } NR%2==0 { end = $0; sub(/^<\//, "<"); printf "%s%s%s\n", $0, search, end }
perl -ne sub BEGIN { $/="NODE-ID> "; } { if (/^command1/) { s:$/$::; print "$/$_"; }}
ls | grep ab | xargs cp -t files/
for file in $(ls school_guide*); do echo <%= render 'success_guide_menu' %> >> $file; done
read -n 1 x; while read -n 1 -t .1 y; do x=$x$y; done
awk -F, {if($1 in a) {a[$1]=a[$1] "," $NF} else {a[$1]=$0}} END {asort(a); for(i in a) print a[i]} < input.txt
elif [ -e pano_blended_fused ]; then
. ./your_file
ls a*.txt | wc -l
sed -i -r /\/.\/. ::|:: |::foo|\^\^bar/d file.txt
cp /home/dash/reference/hg18_bowtie_build/hg18.fa* $JOBDIR
echo ${totals[*]} | tr   \n | sort -n -t= -k2
sed s/^[^=]*= *"\([^"]*\)"$/\1/
sed $!N;s/\n\s*{\s*$/{/;P;D file
values=`cat data.txt | awk -F = {print $2} | xargs`
date -d 27jul2012 - 5 days +%d%b%Y
VAR=`od -a -A n /dev/urandom | head -30 | tr -d   | tr -d \n | awk {print substr($0,1,256)}`
sudo sh -c echo -e '$content' > $path
join -o 1.1,2.2 -t: -1 2 -2 1 <(awk {print(NR":"$0)} key_file | sort -k2,2 -t:) <(sort -k1,1 -t: key_values_file) | sort -k1,1 -t: | cut -f2 -d:
Seq(sh, -c, ulimit -n).!!
sed -i s/\s*aaa\s*=\s*[0-9]*/bbb=5/ input_file
cat $(grep -v ^# files) > output
( find ${SRC} -type f -level 0 -exec sh -c echo {} ; rm -f {} ; )
(echo $md5$sk | cksum | cut -d  -f1)
/res:MyFile.xml,MyNamespace.MyFile.xml

awk -F, NR == 4 { print $3 } somefile.csv
sed s@^[^/]*@@ input
wget `cat index.php | grep -P -o http:(\.|-|\/|\w)*\.(gif|jpg|png|bmp)`
awk p==0 {p= (~/A/)>0;filenr++} p==1 {print > "range"filenr".txt"; p= (~/Z/)==0; if(!p && ~/A/){filenr++;;p=1; print > "range"filenr".txt"}} test.txt
awk -v FS=| -v OFS=| {$3=$3"|"4} 1 1.txt
source test.dat
head -n1 -q <(git grep --name-only $0) | sed s/OBJECT.//
rm -rf mCSS
du -ch abc_* | tail -n 1
echo $BASH_SOURCE
sed -i -e /#--Begin/,/#--End/d Docs/$@/conf.py
find / -exec stat -c %n,%U,%G {} ; >> ./ogindex.txt
s/self.vars[\([^]]\+\)]/self.v.1/g
find $DIR_TO_CLEAN -mtime +$DAYS_TO_SAVE -exec bash -c printf "Total: %d\n" $#; rm "$@" _ {} +
sed -i /$string/d file.txt
gcc  $gcc_options $1
find . ( -name *.m -or -name *.h ) -print0 | xargs -0 wc -l
sed s/.*;//
InputStream in = new BufferedInputStream( pr.getInputStream());
(response != Y) && (response != N)
([a-z]*-[a-z]*-)([0-9]*-)([a-z]*-)([.]*SNAPSHOT.jar)
echo -n ./bootstrp3.cab | sed s![^/]!!g | wc -c
grep https:// addresses.txt | cut -d/ -f3 | sort | uniq
grep -Rn var topicName = html/ | grep -o "[^"]*" > topicNames.dat
funtion1 ; if [[ $valueX == 2 ]]; then funtion2 ; if [[ $valueY -gt 16 ]]; then sleep $valueZ ; fi ; fi
echo stop | java -Xmx1024M -Xms1024M -jar craftbukkit.jar > /dev/null
awk $1 ~ /^[0-9]+$/ { printf "%s: ", $2 } $1 == "HEIGHT" { height = $3 } $1 == "LATITUDE" { printf "%s %s %s, ", $2, $3, $4 } $1 == "LONGITUDE" { printf "%s %s %s, %s\n", $5, $6, $7, height } file.txt
./test /home/stack over flow/location
cat -ve tarball_weekly
cd $Apps
watch -- du -h work_backup.tar.gz
awk -F, {print $1} data.txt
uniq -c | sed -r s/^( *[^ ]+) +/\1\t/
find `pwd` -maxdepth 1 -type f -print > files.csv
awk {printf("%s ", $0)}
echo input | command
sed s@<SRC_PATH>@$SRC_PATH@g template.sh > replaced.sh
egrep -f regexrulefile.txt the_big_file
/local/mnt/named/sbin/named -c /local/mnt/named/var/named.conf </dev/null &> /dev/null &
export PATH=export PATH=/opt/local/lib/postgresql91/bin:
tr \0 Z
eval d$i=$(sed ...)
./workers.sh > workers.output 2> workers.error &
awk { for (i=1; i<=NF; i++) if (NR >= 2 && NR == i) print $(i - 1) } file.txt
Usage: plink [options] [user@]host [command]
echo $string | sed $s/\r//
scp /export/home/uname/aa.txt user@windowsmachine.com:/homedir
ls | tail -n <line number of the first line> | head -n <number of lines that you want>
find . -name filename -type f -delete
ls -tr | grep dm_rmc_mover | xargs grep -il Error Message:  | xargs ls -l
mv $files ${files//%3A/:}
find /path/to/folder/ -mtime 1 -exec rm {} ; // Deletes all Files modified yesterday
*love*
sed 100,200{/input\|output/=};d file.txt | sed $!d
(find /path/to/some/files/ -mindepth 3 -maxdepth 3 -name *.dat)
awk NF data.txt
| sed \=</table={p;Q}
trap touch ~/abc.txt 0
perl -0777pe s/<!--BEGIN-->\n(?:(?!<!--END-->\n).)*?\[this\].*?\n<!--END-->\n/[new content]\n/s in.txt
shell_exec(file='document1.pdf' ./shell.sh)
paste - - < input-txt
export foo=bar
awk {x+=($0~/^SectionMarker/)?1:0}x<2 data.log
while [ $(cat /sys/class/gpio/gpio64/value) = 1 ]

sed -e /myprocess/,+4 s/^/#/
curl -L https://get.rvm.io | LESS=-X+Gq bash -s stable --ruby --gems=rails
while ...; do ...; done <<< $shows
osascript -e long user name of (system info)
awk $2 < p { $2 = p } { p = $2 } 1 input-file
send -s execute backup full-config tftp [clock format [clock seconds] -format %Y.%m.%d] xxx.xxx.xxx.xxx\n
-d file True if file exists and is a directory.
C = hex(substr($VAR, $I, 2) + 0x18);
wget http://example.com -O - | grep <title>|sed s/\<title\>\([^<]*\).*/\1/
mv *20120528_1[23]* file/
awk { split($4,array,"/"); print > array[2] ".txt" } file.txt
find ./archive -mindepth 1 -mtime +180 -delete -type f
delete array[index]

sed -n /^[0-9]/{x;p};/^[^0-9]/{H;x;s/\n\s*\([^0-9]\)/ \1/;x};${x;p}
SHELL=/bin/bash
dd if=/dev/zero of=/tmp/test.data bs=1k count=128k 2> output.txt
egrep -oi [^ ]*dna[^ ]* file
alias konsole_select_branch=SELECT_BRANCH=true konsole
sed -i s:\(.*\)/[*]\(.*\)[*]/:\1 // \2: FILE
awk $1 > l { l = $1; p = 0 } $2 < p { $2 = p } { p = $2 } 1 input-file
git log --oneline -- $(echo $filename | tr -d \r) | wc -l
echo insecure >> $HOME/.curlrc
sed /^zone "domain4.com" {$/,/^};/d file
ctags --language-force=sh mytool
script.sh [options] ARG1 ARG2
gdal_rasterize -l $(basename $file .shp) -burn 1 -tr 0.5 0.5 -t -180 -90 180 90 $file rast2
scp test.txt root@remote:/root/dropoff
cp C:libglfwglfw.dll .
find /users/rhysparker/downloads/ -maxdepth 1 ( -iname *.pkg -o -iname *.app -o -iname *.dmg ) -exec mv {} /folder/location/ ;
sed -n /^#/H; /^S/{G; y/\n/ /; p}; /^$/h input
price2=( $90.880 $0 $920 $925 $930 $910 $800 $712 $27.220 $962 )
NODE_ENV=production nohup $NODE $DIR/production/WebApp/server.js &
find $PWD -type f -name *.txt -printf %s %h/%f\n | sort -rg
./example.sh
testShell.sh -jvalue1 -evalue4 -- -Djvalue3 -pvalue2
openvt -c 2 sh myprogram.sh
echo String1 $1 >&2
execlog psql -h $HOST -p $PORT -U $USER -d $DB -q -c CREATE EXTENSION hstore;
time { command1; command2; }
forfiles -pN:\QC\ATR's -s -m*.xls* -d-30 -cCMD /C del /f /q ^0x22@FILE^0x22
([^!]|^)match
2>1
awk -f foo.awk data.input
sed -e s/^[^0-9]*-//g
curl x.x.x.x/originDir/test16k_[0-5999].txt
tr -d \015 < infile.txt > outfile.txt
grep -E expr1|expr2|expr3
dir /s /b /A:D *|findstr /ri [\]bin$
{key}; echo ${!n}
./myscript echo ${myvar}
/(app ID: .+?)nndate created: .+?nlast updated: .+?nUSING for date comparison: .+?nnEXPIRE THIS APP/
awk -F$\t BEGIN {OFS="\t"} {$3="new_str"; print} in.csv > outfile.csv
date --date=1 year ago
rsync --bwlimit=500 ......
grep -c regex files | sed -e s/^\(.*\):\(.*\)$/\2 \1/ | sort -r -n | head -n 1
m/^s*(w+)s+(w+?)s*([w0-9,*s]+)s{/gm
protectedyiic shell protectedconfigmain.php
openssl x509 -in cacert.pem -noout -text
sed /\n/!N;/\n.*\n/!N;/\n.*\n.*PINITIAL BALANCE/{$d;N;N;d};P;D
pids=( $(jps | awk {print $1}) )
while ((output.readLine()) != null) {
while [ $dateTale -lt $now ]
git archive v2.0.0 --remote=git@bitbucket.org:john/myapp.git --output=myapp.zip --format=zip
sed -e /__SUBSTITUTE_HERE__/ {r tmp.txt -e d;} < myFile.txt
|sed -e s#\(.\{36\}\)#\1|# | sed -e s#\(.\{49\}\)#\1|#
(the_command ARG1 2>&1)
echo Nate or nate | grep -P (?<!N)a

echo taco my-fish-tacos my_fish_tacos | sed s/[^ _-]*/\u&/g
set -a $arrayName=(10 20 30 40)
logging.debug()
default_run_options[:shell] = /bin/zsh
)
java -Dtag=process1 -jar ....
tput kpp | hexdump -C
sed -r s/(\\smash\{)([^\}]+\})/\1\\small\{\2\}/g <filename>
awk END{printf NR} file.log
wget --output-document - http://pastie.org/pastes/4408130/download | xmlstarlet sel -t -m rss/channel/item -v sport -o  Away @  -v opponent -o  at  -v time -na
scp magento.tar.gz user@xx.x.x.xx:/var/www
find . -name *20120805.gz -exec zcat {} ;
find <directory> -option1 -option2
Rscript -e print("hello world")
sort -b -k2,2 -k1,1n
tr -s   \n < file.txt | grep file | wc -l
convert input_file -background transparent -extent 18x18 output_file
awk $1 >= 1344279903 && $1 <= 1344280204 { print $0 } data.txt
pdftk thefile.pdf cat 4-10 output pages_4-10_from_thefile.pdf
find $(APPLICATION_DIRECTORY) -iname *.py |xargs -I file pyflakes file
[[ $VAR_WITH_TEXT =~ ERROR total: ([0-9]+) ]]
awk -F; {for(n=2; n<=NF; n++) { printf("%s;%s\n",$1,$n); }} input.txt
sed -f script [file ...]
[ Release != $2 -a Debug != {$2} ]
HOME/trash

source script.sh
sed -i s/^\(computer_id = \).*/\1${server_ref}/ slapos.cfg
sed -i $a<YOUR_SHINY_NEW_TAG> *xml
cp * /target/directory
find . -type f -name *.txt -print0 | xargs -0 ./myscript.py
YESTERDAY=`TZ=GMT+24 date +%Y%m%d`; echo $YESTERDAY
gawk match($0, /&viewport=[0-9]+,[0-9]+,([0-9]+),([0-9]+)/, m){print m[1], m[2]}
awk {split($0,a,"viewport=");split(a[2],b,",");print b[5],b[6]} filename
find /git -name *.git -execdir sh -c cd {} && git gc ;
cat .temp_occ | sort| uniq -c | sort -k1,1nr -k2 > distribution.txt
export HOME=/home/user
echo abc|awk {print |"tee files"}
find -ipath projects/insanewebproject
cat $old_properties | awk BEGIN{ FS="=";OFS="=" } {if(\$1=="$property_name") \$2="$new_value"; print \$0;} >> $new_properties
awk NR > 1 { print prev } { prev = $0 } file.txt
sed s/[^]]*\]//
echo \nCompiled on:\n $(gcc --version | sed 's/^/\t/g' )\n
dd if=/dev/zero of=/dev/sdb bs=4096
./s2 $1
FILENAME=`wget --post-file=filename.rar -P dir_to_save_files http://somewebsite.com/index.html | grep filename | cut -d= -f2 | awk {print$1}`; wget --post-file=filename.rar -O $FILENAME -P dir_to_save_files http://somewebsite.com/index.html
for file in /root/*pcap*
head -n 1 your.data.file | sed -e s/~/\n/g
awk {for(i=2; i<=NF; i++) print $i} bth.data
unzip -t zipfilename
(php -r echo urlencode("$MESSAGE");)
echo ${number} | fold -w1
for file in *my_word*; do echo $file; done
mknod mypipe p
sudo /path/to/script
N=1; ping google.com -n 10 | grep Minimum | sed -r s/(Average = [[:digit:]]+ms)/\1\n/g | sed -r s/[[:space:]]+(Minimum)/\1/g | while read file; do echo Server $N: $file; N=$((N+1)); done >> output.txt
head -n filename | tail -1
return 0;
eval ${run2}
echo Ignore this email | mailx -s Test Data DL-host-PD-WAS-TT_Emp@corp.host.com

seq -w 1 10
awk {for (i=1;i<=NF;i++) if($i ~/mystring/) print $1, $i, $(i+2)}
awk FNR==NR { array[$1]=$2; next } { if ($1 in array) print $1, array[$1] - $2 > "A3/f1.txt" } ~/A1/f1.txt ~/A2/f1.txt
sed -i s/--/—/g *.txt
test/bin
sed s/.*SRC=\([0-9.]\+\).*/\1/ infile | sort -u
echo  | awk { printf("") > "file_to_delete" }
awk -v pat=${PATTERN} f; $0 ~ pat {f=1} ${FILE}
python yourscript 2> return_file
subprocess.Popen(su - dhclient eth0, shell=True)
for d in {0.01,0.05,0.1}
ls 1* | find . -type f | awk {print("mv "$1" "$1)} | sed s/[0-9][0-9][0-9]*/0&/6 | sed s/[0-9][0-9][0-9]*/0&/8
output = shell_exec({$command} 2>&1);
patchdate=` psql -t -q -c select patch_date from version_history where version ='1.1.1'`
if [ -d scriptpath ]
newfile = ${FILES/111/222}
git remote set-url dev foo@bar:/var/dev

pkill ccpd
path_to_myproject = os.path.abspath(__file__)
sed \|<a href="/get/php|!d;N;s/.*\(php-\([0-9\.]\+\)\.tar\.bz2\).*md5: \([0-9a-f]\{32\}\).*/\1 \2 \3/;q file
(setopt; unsetopt; set) | sort | less
cat commandArguments.txt | xargs mycommand
ENV[SECRET_KEY_XXYY] || raise(no SECRET_KEY_XXYY provided)
alias go=ssh $(pbpaste) -l pete
scala -classpath path to some dir where your .class files reside
cp -v $file /Users/work/Desktop/TEMP_EXR
find ~ -name *.mp3 -o -name *.ogg
join -1 1 -2 6 <(sed s/^[0-9] /00&/;s/^[0-9][0-9] /0&/; T1_01) T1_03
awk $0>x{x=$0};END{print x} input.txt
find . -type d -name example* | egrep -o [0-9]+
gem pg, 0.12.2
sed :a;$!N;s/^\(\(.*fruit\).*\)\n\2\(.*\)/\1,\3/;ta;P;D file
sort -t; -k 1,1n -k 2,2n -k 3,3n -k 4,4n test.txt
sed -i -e s/\[staging\: production\]/\$test/g ./test.txt
nohup find $LOCATION -exec shred $TIMES -u {} ; >> /home/user/output.txt &
echo -e $RESULT
grep -l /static dir/* | xargs sed -i  s/\/static//g
cd $(dirname $0)
SET FOREIGN_KEY_CHECKS=0;
find folder2 -name *.* -exec mv {} folder ;
timeout 3 bash -c ls | sleep 10
( cd /home/jars; java -jar /home/jars/jarfile.jar )
echo test++abc | awk -v bar=test[+][+] BEGIN {FS=bar} {print $2}
awk $2 = $2 FS "0" file
user1 ALL=(ALL:ALL) NOPASSWD: /bin/su user2
sed -n s/\s*\([^: ]*\): function.*/\1/p test1.js
if (length(val) == 0)
exec(generate.sh input.txt generated.sh);
ls ~/filepath.*jpg | xargs -n 1 -I{} convert -units PixelsPerInch 75 -resize 200x200 {} {}
( echo $p1 | sed -e s/\([*.[^$]\)/\\\1/g )
find /some/path -type f | xargs sed -i s/\.0\(<\/rating>\)/\1/g
smartctl -A /dev/sda | grep Power_On_Hours | awk {print $NF}
grep -B1 ^[^-] data |sed /^--$/d
awk -F" $4
find . -name *.abc -exec sh -c NEWDIR=`basename "$1" .abc` ; mkdir "$NEWDIR" ; mv "$1" "$NEWDIR"  _ {} ;

xmllint --format <your-xml-file>
alias cmd=history | cmd
xpath -q -e //description//text() input.txt
export ${1}=$(printf %s $2)
awk  { t = $1; $1 = $2; $2 = t; print; }  input_file
sudo ~/.pythonbrew/bin/pythonbrew install 2.5
sed s/{{\([a-z]\{2,3\}\)\sicon/{{ref-\1/
dos2unix freecs.sh
0 1,13 * * * /maint/run_webalizer.sh
ifconfig eth0 | tr :   | awk /inet addr/{ print $3 }
exec(echo \\$\\$);
find . -type f -exec sh -c echo "abc" >> ${1} _ {} ;
find . -type f -exec sh -c if [ cat ${1} = "abc" ]; then  echo ${1}; fi _ {} ;
sed /sectionB/,/\[/s/username.*/username = valueX/ input
awk -F [()] {print $(NF-1)} input | tr -d ,
var=`echo #this is comment | sed s/[^a-zA-Z0-9 \t]//g;`

if [ ${counter:-0} -gt 21 ]; then ...

find . -name *.html.haml -exec sed -i s/restaurant_id/company_id/g;s/restaurants/companies/g;s/restaurant/company/g;s/Restaurants/Companies/g;s/Restaurant/Company/g {} ;
[mp3 @ 0xf33100] Estimating duration from bitrate, this may be inaccurate
export HISTTIMEFORMAT=%m/%d - %H:%M:%S: 
telnet smtp.mydomain.com 25
read.csv( file=filename.csv , head=TRUE , sep=,)
MYVAR=`awk stuff`
egrep -o \[wiki:[^]]*] pages/* | sed s/\[wiki://;s/]// | sort -u
ls *.jar | sort -t- -k2 -V -r
exec(du -sh /var/www/backups/* > backups.log &);
echo "member":"time" |grep -e member"
awk FNR==NR { array[$1]++; next } { for (i=1; i<=NF; i++) if ($i in array) print $0 } dict file
pwd ; ( cd /tmp ; pwd ) ; pwd
echo XYZZY
paste D1/file1.txt D2/file1.txt | awk { printf "%s\t%s\t%s\t%s\n", $1, $5, $4, $8 } > D3/file1.txt
ls -1 /home/user/logs/backup.*.tar.gz | sort -t . -k2rn | head -1
echo GIT_WORK_TREE=/var/www/${1} git checkout -f >> hooks/post-receive
nohup ./program &
... | grep -B3 Mail last read | awk /Login:/ {name=$2} /Mail last read/ {print name, $0}
sed s/pattern/pattern mark/
rename -nv s,.*(\d{3}).*,$1, *
grep -o -P MdcFile.* cube.mdl | awk -F" { print $2 }
for i in *; do mkdir $i_dir; awk -f your_awk_script.awk $i > $i_dir/out
rsync -avz -e ssh -i /home/thisuser/cron/thishost-rsync-key remoteuser@remotehost:/remote/dir /this/dir/
(wc -l < $JAVA_TAGS_FILE)
ifconfig -a | awk -vRS= $1~/bond0:oamA/
awk -F [ \t;=]+ { print $1, $2, $3, $4, $5, $6, $7, $8 } file.txt
./script 2>&1 >/dev/null | ./other-script
tr \r \n < myfile.csv > newfile.csv
echo *.c
`mkdir $dir`
echo -e aaa\nfoo\nfoo\naaa\nfoo\nbbb\nfoo\nbbb | perl -p00e s/aaa\nfoo\nbbb/aaa\nright\nbbb/
sed -e s:=:=$((: -e s:$:)): expr.sh |bash -x
expect \\[sudo\\] password for chronicles:
for i in {1..10}; do ~/bin/foo.bash & done
awk NR > 1 && min=="" || min > $1 { min = $1 } END { print min } file.txt
sed -ne /^rect:[\t]*/ { s/// ; N ; s/\n[ ]*/ / ; s/[ \t]\+/\n/g ; p } infile
cat f1 <(echo) f2 <(echo) f3 <(echo)
MKLINK [options] {link} {target}
perl -pe chomp if eof filename >filename2
sed -i /{/,/}/{s/\s*//g} screen.css
tail -n +1 -f your_log_file | some_processing_pipeline
awk !x[$0]++ || ($0 ~ /Successful association/) /tmp/log
for /R %%x in (bin) DO del %%x\*.* /Q
int *(*(*foo(char *s))(int x))[SIZE] { ... }
DIS QL(TEST.*) CURDEPTH
if [[ $ON_OFF = on ]]
PROGRAM=./home/lab/data/setup_exp/Simulator
* * * * * env DISPLAY=:0.0 /home/x/Documents/MyScripts/Cron/BeepAlarm Wake Up
awk -F, { n = split($2,array," "); printf "%s, %s\n", $1, array[n] } file.txt
trap logger -p user.debug -t SHELLSCRIPT -- "$BASH_COMMAND" || : DEBUG
spawn ssh [exec pbpaste] -l username
(ssh host time command 2>&1)
mysqladmin -P3104 -rvi1 ex 2>&1 | grep Questions > out.txt
awk !array[$2]++ file.txt
echo $(adb shell ps | grep com.android.phone | awk { system("adb shell cat /proc/" $2 "/stat");} | awk {print $14+$15;})
./script.sh $@ > /dev/null &
(whereis yum.repos.d| awk {print $2})
find . -name *.mp3 -exec cp -iv {} /my/dir ;
/usr/bin/test
awk $2>20{print $1} file1 file2
head -n3 SiteRank.csv | sed s/,/,^"/ | sed s/$/^"/
[21/Aug/2012:00:31:27 -0700] 1345534287 /redir/abc.html
echo this/that/theother/stuff | awk -F/ {print $(NF-1) "/" $(NF)}
find . -name *TXT | wc -l
schema=`echo $scriptName |awk -F_ {print $1}`
find ./ -name *JIM* -exec cp --target-directory=$TARGET_DIR {} +
call(myAlias, shell=True)
s+AAA+BBB+
(date)
python -u someFileName.py
elif [ $zone == B ]; then
diff --changed-group-format=%< --unchanged-group-format= file1 file2
find . -type f -exec bash -c mv {} $(dirname {})/$(basename $(dirname {}))-Subfolder/$(basename {}) ;`
grep @ apache.log | sed -r s,.*/folder/new/([^@]+@.*)_home.*"([^"]*)"$,\1 using \2,
echo int temp; // this is temp variable | sed s@//\(.*\)$@/*\1 */@
sbcl --noinform --eval ... $1
head $(search2.sh 'these are some search terms')
... | grep _[0-9]*_[a-z.]\+/combined

function bs { echo {"account":"a1","portfolio":"p1"} | nc 0 9000; }
tr \000-\037   <input >output
df -h / | egrep -v Filesystem|xscsi | sed $!N;s/\n/ /
find -maxdepth 1 -type f | sort
awk NR==1{top_line=$1} {$1=int(($1-top_line)/200); print $0} data.txt
ls | wc -l
sed -n s%.*\(https\{0,1\}://[^/]*\).*%\1%p
awk -F [<>] { for (i=1; i<=NF; i++) if ($i ~ /translate="yes"/) print $(i+1), "=", $(i+1) } file.txt
path = os.path.join(destination, filename)

{ echo this is a header; cat -; }
system(/path/of/your/script.php param[0] param[1] > scriptlog.txt &)
time ls
./cpi >> $logfile 2>&1
find . -type f -exec sed -i s|Hello World|Hai Universe|g {} ;
s/RELEASE_AND_NIL((.*?))/[1 release]/g
echo aabb | sed s/a*\(\(ab\)*\)b/\1/g
use extended regular expressions in the script.

rm foo || { echo File removal failed; }
apt-get -y install tofrodos
(7[5-9][0-9]|8[0-9][0-9]|900)[A-Z]{7}
sed -e /replace_text_holder/{r file.txt -e d}
matlab -nodesktop -nojvm -nosplash -r <YOUR_COMMAND>
defaultPath=/home/katie/Desktop
perl -0777lni -e BEGIN{open(F,pop(@ARGV))||die;$b="#blockbegin";$e="#blockend";local $/;$d=<F>;close(F);}s|\n$b(.*)$e\n||s;print;print "\n$b\n",$d,"\n$e\n" if eof; edited.file input.file
printf %0.2f\n 41.495
bad_command 2>&1 >> file.out
ls -l /bin/sh
USEDMEM=/home/modadm/top-output.txt | grep Mem | cut -c 25-31
pushenvvar PATH /usr/local/tools/gcc-4.3.3/bin
rhref="((?:\.\./)+external\.html\?link=)([^"]+)"
sed s/^/-p / | tr \n  
play audio.wav trim START =END
sed -n -e s!^.*\(<[Aa] [^<>]*>.*</[Aa]>\).*$!\1!p
mysql -P9306 --protocol=tcp
sed N;s/\n{/{/
 ... if ($4==$full) ...
column -t -s $\n list-of-entries.txt
(git --no-pager shortlog -nse HEAD | cut -f 2-)
[[ -s $HOME/.rvm/scripts/rvm ]] && . $HOME/.rvm/scripts/rvm
alias rm=rm -i
ps -C less --no-headers -o %cpu,%mem
sed -n 60,60p foo | diff bar -
sed 123r file.txt main.txt
CURRTIME=`date +%Y%m%d%H%M%S`
x-terminal-emulator -e ./application_name [arguments] &
python -c print ord(u'⚤)
echo Test .... | sed s/Test.*/echo "<\0>" | tr s x/e
mutt -s Subject -a file send@to
awk !x[$0]++ file.txt
sed s/ /_/4g;s/_\([^_]*\)_\([^_]*\)$/ \1 \2/ file
sed -i s/\(ec2-user@\)\(.*\)\(:repo\.git\)/\1${foo}\3/ /var/www/.git/config
java -cp karel.jar;CollectNewspaperKarel.class CollectNewspaperKarel
cp -rp `ls -t searchstring | head -n 1` destination
cat avis.txt | awk {print "vlc --playlist-enqueue "$0} > updatedFile.txt
sed s|/\*\(.*\)\*/|\1| ./myfile
name=`echo $filename | cut -f1 -d.`

cat log | sed s/where mytable\.s_id=[0-9]\+/where mytable.s_id=?/g
args = parser.parse_args(-a -b -c --value=True.split())
sort -k1,1M -k2,2n
find ./ -name ${oldName}* -exec rename $oldName $adminDB {} ;
sed -e s/\r//g input-file
awk /^Col1 /,/^$/{ if( $2 == "bar" && $3 > 1 ) print $1} example
find . -type f -print0 | xargs -0 sed -i -r s/"XXX" \| \{"Foo", "Bar"\}/"YYY" \| \{"Foo"\}/g
date -r $TIMESTAMP +%Y%m%dT%H%M%S
python command && sudo shutdown -h now
set M2_HOME = C:Softwaremaven221
sed 1N;$!N;s/<Blarg>\n<Bllarg>\n<Blllarg>/<test>/;P;D filename
this->getPriceHtml}g;
./a.out $23
sed s/$/p/ linesfile | sed -n -f - datafile
... \;
sed -n /searchtext/,$p file1 > file2
ENV{PATH} = /usr/local/bin:$ENV{PATH} unless :$ENV{PATH}: =~ m~:/usr/local/bin:~;
ssh-keygen -f rsync
0 * * * * timeout -s 9 3540 /path/to/your_command.sh
commandSed =exec(sed -i 's/,name=/"|"/g'  . $userPath . Export.txt);
sed -r -e /<b>/ {s/( .)([^ ]*)/\1\L\2/g} -e s/<b>(.)/<b>\u\1/ -e /<b>/ {s/(\b.{1,2}\b)/\L\1/g} data
perl -MCGI -i -pe BEGIN{undef $/;} s/<pre>(.*?)<\/pre>/'<pre>' . \$1 . '<\/pre>' . '$new_start_string' . CGI::escape(\$1) . '$new_end_string'/esmg /my/path
PS (3) > Write-Output -- -InputObject
find . -type d > dirstructure.txt
`echo $string | sed s/[^a-zA-Z0-9]/ /g`
./a.out | tee >(grep foo > out.txt) | grep baz
eval `ssh-agent`;ssh-add;ssh user@servername
echo $line | sed s/^.*\[[[:space:]]*\([^]]*[^][:space:]]\)[[:space:]]*\].*$/'\1'/
sed /<name>/{h;s/name>/id>/g;G}
sha256sum /my/dir/* > sha256sums.txt
LC_ALL=C fgrep -v -f strings.txt data.txt >proc_data.txt
repo sync >log 2>&1
command > file 2>&1
awk FNR == NR {arr[$1] = $2 " " $3; next} {print; for (lookup in arr) {if ($0 ~ lookup) {split(arr[lookup], a); print "Here I want to add " a[1] " and " a[2]}}} File1 File2
less $( ls ./mydir | tail -1)
sed -n /pattern/ {s/.*//; N; N; s/[\r\n]//g; p}
cd $(echo -e $input | cut -c4-)
sed -r s/[^=]*=([^ ]*)[^=]*=([^ ]*)[^=]*=(.*)/\1;\2;\3/ infile
type -aP a=b
awk NR==$line_start, NR==$line_end file
echo -e $input | tr -s   | cut -d   -f2-
dd if=largefile count=6 bs=1M > largefile.6megsonly
pacman -S bash-completion
echo something > /proc/pid-of-process/fd/0
awk -F| {print $NF}
echo $sqlvar | sqlplus user/pwd@dbname
if [ backup_count > MAX_backups ]
sed -r s/Date: [0-9]{4}-[0-9]{2}-[0-9]{2}/Date: 2012-09-01/g *.txt
MYLIST=`ls *.txt`
set shell=/bin/sh

(awk -F $ { print $4 } shadow.lab4)
ln -s $PWD $HOME/my link name with spaces
(wc -l $filename)
{IFS}http://www.google.com
awk {print}; ""~$0 {getline; print "$" $0} input_file
myPerlScript --myarg1 10 --myarg2 42
require(../lib/test);
mkdir -p $(OBJDIR)
PS1=\t <\w> ERR:$(echo \$?) \$ 
(( ${dict[$word]} + 1 ))
awk { if ($9 != $10) {print "google calendar add \"" $2, $3, "Work", $9, "to", $10"\""}} cal
awk BEGIN { FS=":"; OFS="\t" } /Size|Locator|Speed|Manufacturer|Serial Number|Part Number/ { gsub(/^[ \t]+/,"",$2); line = (line ? line OFS : "") $2 } /^$/ { print line; line="" } file.txt
pcregrep --exclude_dir=^abc|cde$ -r alpha .
stat -c %a .
UA=Mozilla/5.0 (X11; U; Linux x86_64; ru; rv:1.9.2.15) Gecko/20110303 Ubuntu/10.10 (maverick) Firefox/3.6.15; curl -A $UA $(sed -n -e s/.*<file>\(.*\)<\/file>.*/\1/p <(wget -q -O - $(wget -U $UA -nv -r -np -nd -H --spider http://www.liveleak.com/e/955_1345380192 2>&1 | egrep  URL: | awk {print $4} | sed s/.*\?config\=//g | sed -es/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g | xargs echo -e)))
export PROMPT_COMMAND=history -a; history -n
python -i main.py < tests/1.in
wget -m -E -nH -np --cut-dirs=2 http://site/a/b/
icacls FILE /grant USER:(RX,W)
find test -name client -prune -o -name *.coffee -print
perl -F: -lane print $F[0] < /etc/passwd
df -l <file>
./check_apache2.sh -H localhost -P 8443 -S
python -c for ln in __import__("fileinput").input(): print ln.rstrip() files...
foo1 $@
cat infile.txt | tr -d [:space:] | fold -80
awk -v FS=; { CSV_FILE = "country_yearly_" $NF ".csv" ; print > CSV_FILE }
get-help EntityFramework
echo ,1 1>> C:somefile.sql
if [ ${user_arg} -ge ${warn_req} -a ${user_arg} -lt ${crit_req} ]
var=
Process.Start(CMD, /C you_app_name.exe);
bindkey ^_ undo
for f in ${path}/*; do
sed -n \@,.*/.*/.*/@p input
defaults read com.apple.dock wvous-tl-corner
delete n = putStr (replicate n \b)
./someprog $@
awk -v RS= /ssl-enum-ciphers/ file.txt
:let $PS1=subshell$ 
join <(sort lista) <(sort listb)
grep -E -o [0-9]+ error | sed s/$/p/ | sed -f - error
find /var/www/websitename/ -name *.html -exec sed -i.bak s/.title.Old title..title./<title>New title<\/title>/g {} ;
s; if @ARI is not NULL
awk { if ($2 == $5 && $3 == $6 && $4 == $7) { print $1 } } < flist
sed s/\s\s*/|/g < input
sed s/^\(....\)-../\1-09/ < input
C:Userscscott> C:\Users\cscott\Documents\myApp.exe argument1 argument2
. ~/nvm/nvm.sh
export PATH=/usr/local/Cellar/ruby/1.9.3-p194/bin:$PATH
git update-index --assume-unchanged $(git ls-files | tr \n  )
awk -f script.awk file1.txt file2.txt
( ebi-describe-env | grep Linux | Ready | cut -t| -f4 )
check.script <- readLines(../../../Scripts/myscript.sh)[1]
./A arguments &
(clojure.java.shell/sh git log :dir /path/to/some/directory)
sed -e server.txt |sort| > done.txt
< corpus.txt tr -d .!@#$%^&*()-_=+ | tr -s \t  \n | sort | uniq -c | sort -rn
whois = shell_exec(whois  . $array[0][ip] .  | grep .  NetName);

tar xvfJ filename.tar.xz
grep -v -F -f file1 file2
gsub(/047/, )
echo test: | sed s/:$//g
tmux new -s matlab matlab -nodesktop -nojvm
(sed -E s/\(([[:alnum:]]+)\)-([[:alnum:]]+)/\2-\1/ <<< $i)
sed /<b>/{s/[a-z]*\./\u&/} input
sed 1,/^$/d file.txt
./script /home/*/public_html php.ini module.so
os.system(vap -c "mjd" {0} >> mjd.txt.format(new_y[i]))
curl -d image=@reddit.png ...
10 1 * * * executeeveryxday nameofthestatefile 20 command to execute
watch cat file | grep "text"
awk ... $f > $f.tmp; mv $f.tmp $f
sed s/$/<br>/; 1 s/^/<h3>/; 5 s/$/<\/h3>/
perl -i -0777pes/\n(?!Europe|\z)/ /g file
awk {print $$n} out.txt
find . -name *.txt.* -print -exec zip {}.zip {} ; -exec mv {}.zip {} ;
grep --color $@
if not exist MyFolderName ECHO Create a folder & mkdir MyFolderName
grep $@ | sed -r -es/:[[:space:]]*/:/
sed -i -e $G *.txt

gnuplot -e filename='foo.data' foo.plg
mencoder -sub sub.srt -utf8 -font Arial Unicode MS in.mp4 -o out.mp4 -of lavf -oac copy -fafmttag 0x706D -ovc x264 -x264encopts profile=baseline:bitrate=300k
echo -e x00x00x07x04x00x00x00...
tar -zcvf compressFileName folderToCompress
git config --global alias.remotes remote -v
alias somealias=something longer
node $UGLIFYJS -o $JS_COMBINED_EDITOR $JS_TEMP_EDITOR
sed s/;/./3;s/;/./4 -iBAK *
HOME/}
awk /^>/ { sub (/[^\/]+\//,">", $0); sub (/\..+/, "", $0) }1 file.txt
echo Speed : 1624.127424 Kib/s in 9.410000 seconds | awk {print $6}
au BufWritePost *.slim :silent call system(slimrb .shellescape(expand(%)). > .shellescape(expand(%:r)..html))
cat file | tr , | | awk -F | { line=""; for (i=1; i<=NF; i++) {if ($i != "" && list[NR"@"$i] != 1){line=line $i "|"}; list[NR"@"$i]=1 }; print line}
grep There is a group | awk {print substr($0,10)}
find /var/backup -type f -name foo -mtime -20 -delete
sqlplus user/pass@connect @scriptname
/Applications/PackageMaker.app/Contents/MacOS/PackageMaker
sort --key=2,2 -t, input.csv > output.csv
sed -i s/\(key="\(liferay\.db\.host\|idm\.backend\.db\.host\|idm-frontend\.portal-tarent\.tarent-frontend-host\|openid-idp\.hostname\)" value=\)".*"/\1"$hostname"/ $installer_directory/silent.xml
(dirname $0)
grep user `locate my.cnf`
find $STARTDIR -name *.ps -print | sed -e s/.ps$// | xargs -l -i ps2pdf {}.ps
javac -sourcepath /home/test/src -classpath "/home/test/jars/Library.jar" -d /home/test/build /home/test/src/File.java /home/test/src/dir/File2.java
echo abc-1234a : | egrep -o ^[^:]+
for i in 1 2 3;do ps -ef |grep bash >> out.log;done;cat out.log|sort -n
awk {print strftime("%c", ( <timestamp in milliseconds> + 500 ) / 1000 )}
ssh -t -t user@server /usr/bin/mysql -u{mysqlUser} -p{mysqlPassword} {mysqlDB} -e "select * from table"
echo *
su sync_user -c cd ~; sync_section $source $tmp $dest
awk -v date=$(date +%Y-%m-%d %r) /Hello/ { print $0, date} party.txt
awk {gsub(/it.s an error/, NR" &"); print } filename
awk -v y=$year -v m=$month BEGIN { FS = "." } $1 == y m { print $2 } file
grep \-\|  input_file > output_file
perl -pe s/START.*STOP/replace_string/g file_to_change
sort 0<1 0<2 0<3
(echo $line | sed -n s!<strong>\(http://[^<]*\)</strong>!\1!p)
cat $NASFILE|while [[ $NFS2 != Completed ]] && read line; do
perl -0777pi -e s/\n{3,}/\n\n/g
ps hf -opid -C <process> | awk { print $1; exit }
! /usr/local/bin/monit --version | grep -q 5.5
username ALL = NOPASSWD: /bin/launchctl load -w /System/Library/LaunchDaemons/ssh.plist
./thunderProfileBU.sh: line 23: cd: //media/My: No such file or directory
perl -F/\t/ -anle BEGIN{$f=1}if($f==1){$H{$F[2]}=$_;$f++ if eof}else{$l=$H{$F[0]};print join("\t",$l,@F[1..$#F]) if defined$l} f1.txt f2.txt
grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n | tail -n1
sed /^ /d; N; s/\n/ / inputfile
.... -mtime +1 -prune -exec ...
awk /^SF.*test.*/{f=1}f;/end_of_record/{f=0} yourFile
(printf %03d $backupFolderNumber)
cd `pwd`
if ([key isEqualToString:@ProcessID]) {
hbase> put t1, r1, c1, value, ts1
cat filename | sed s|[^0-9]||g
ls -1 | sed -e s/^[^_]*_[^_]*_//
chmod u+x saveToLog.sh
for i in *.txt; do awk /Customer/ { print $5, $NF > FILENAME".out" } $i; done
who | wc -l
sed -e s%/\.\./%/%g $src_file > $temp_file
find $(echo $PATH | tr :  ) -maxdepth 1 ( -type f -or -type l ) -name *user* -executable
awk -F, {for(i=2;i<=NF;i++)print $1,$i} temp
awk -F , -v OFS=, {print $1, $4, $4}
grep -vP [^A-Za-z]read [\x80-\xFF] file.txt
ENV{CVSROOT}=<cvs>;
konsole -e bash nameofyourscript.sh
vim -s <(echo $:vsplit A12.m\n:hsplit A22.m\n…)
buddyPath=/usr/libexec/PlistBuddy
Process process = Runtime.getRuntime().exec(bash_command  + pathed);
awk -F, { print $0 > $1} infile
./load.php $filexml
(mysql ... 2>&1)
/^[^(]*[^)] *$/
echo [^c]?* c[^r]*
<?php echo shell_exec(/usr/sbin/pflogsumm /var/log/mail.log); ?>
awk { print length($0) " " $0; } $file | sort -n | cut -d   -f 2-
script/runner MyClass.do_something('my_arg')
strModuleToTestUpper=`sed s/\(.\)/\U\1/ <<< $strModuleToTest`
s() { for i; do printf x ; done }; s 2 3
perl -ne print unless $n = /^End$/; print "End\n" if $b; $b = $n
iperf -c $server_ip -p $iperf_port -t $iperf_duration >> outputfile 2>&1
(echo $A | cut -d   -f 5-)
for i in *; do mv $i ${i// /_}; done
ps auxww | sed -n -e /java.instanceName/s;\(^[a-z]* *[0-9]*\).*\(/usr/user/java.instanceName[A-Za-z._0-9/]*\) .*;\1 \2;p
farm_hosts=(web03 web04 web05 web06 web07)
/c/Program Files/TortoiseSVN/bin/TortoiseProc.exe /command:update /path:d:\Dir\LocalRepo /closeonend:0 &
hash -r
touch /var/www/wsgi.py
mvn -daltDeploymentRepository=repositoryId:default:http://WhatEverURL
projects_directory=~/projects
strace -f -e open,dup2,close bash -c ls > one > two > three
ls --color=always
sed -ni 1{p;b}; 2{N;N;N;N}; $p; $!{N;s/^/word /;P;D} filename
iostat | awk NR==3 { print $5 }
grep -i -B 10 error data
awk -F " {OFS="'"; gsub(" ", "%20", $2); print $0}
killall php
sed -n l0 file.txt
umask 0701 ; /path/to/real/mkdir $1 ; umask 0604
LC_ALL=POSIX sed -r s/[^\o200-\o377]+/\\english{&}/g file.txt
paste -d, /tmp/list1 /tmp/list2 | awk {print NR "," $0}
perl -F\| -i -lape if ($F[8] eq "ROBERT") { s/JAMES/FUDIK/g } /dummy/chaat/h2
find -name a -type d | xargs rm -r
readlink -f bar.txt
awk NR >= 5 && NR <= 5 + Y { print $X } file.txt
if [ -n $loglast ]; then
(<command>))
./translate.pl CharMap.txt sample.txt
date -d 30 minutes ago +%Y-%m-%d
...| awk {print $5"\t\t" $3"\t"$4}|column -t
echo data | mail -s $subj mail@mail
(sed -n /$variable/,$p file.log | grep "KO" -c)
i]=value2
perl -e s/.[^\.]*$/rename $_, uc($`) . $&/e for @ARGV *.txt
echo $text
for i in $(seq 3); do echo $i ; sleep 2 & done
(readlink -f $(dirname ${BASH_SOURCE[0]}))
:%s
sed -n /08:46:01.328/,/09:56:15.739/p application.log
print(arg)
if (args.Length != 0)
source myShortcut.sh
sed s/1\([^.]\)/2\1/g test
sudo chmod +x filename
sed -i -e s/[[:digit:]]*$// filename
grep -oP "REFERENCE":"79","STATUS":".*?" file.log | sort | uniq -c
sed /^0x\S\{4\}\(\( \S\S\)\{8\}\).*/{s//\1/;H};$!d;x;s/\n//g;s/ \(.\)\(.\)/\2\1/g file
awk {printf("%d\n", ($1+$2)/2)} input
rename _foo _bar _foo*.php

find . -depth -name __temp__* -exec rm -rf {} ;
perl parse.pl < infile
dbbkup changed name of field
% perl -dwe 0
sed -n s/^hello //p
sed s:|:"|":g;s/^/"/;s/$/"/
awk -F ["./] { print $0 $3 "-thumbs." $4 } file.txt
awk {gsub("###",NR,$0);print}
redis-cli KEYS session.* | awk {printf "EXPIRE %s 60\n", $1} | redis-cli > expire.log
convert -size 200x200 xc:white canvas.png
sed -e s#^\(/[a-z]/.*/bin\)$#A40-\1#ig
python.exe -c import sys; print sys.argv[1:] *.txt
ls $PATH || echo $PATH does not exist
expect ssh_exec.expect oracle@192.168.***.*** {srvctl status database -d mydb}
/proc/<pid>/cwd
( cat usernum.txt )
xargs stat -f %m %N | sort -n | cut -f2-
grep -URl ^M . | xargs fromdos
alias test=read -sp 'Enter pp: ' pass; gpg --passphrase "\$pass" --batch --symmetric --cipher-algo aes256 -o file.ext.gpg file.ext
curl -I server/some/resource | grep -Fi etag
find . -name *.txt |xargs -I{} awk -F, NF!=5{print FILENAME;exit;} {}
mysql --defaults-file=/home/user/.my.cnf database
execute(echo hello > file)
sed s%PATTERN%PATTERN%
gvim -p2 first.txt third.txt -c sp second.txt -c tabn -c sp fourth.txt
awk -F, {print >> $2"_"$3"_"$5} infile.txt
grep -r -i --include *.h --include *.cpp CP_Image ~/path[12345] | mailx -s GREP email@domain.com
sed s/.*TYPE=\(.*\);.*/\1/

ifconfig | awk -F [: ]+ /inet addr:/ { if ($4 != "127.0.0.1") print $4 }
perl -ne print if /\[[^\]]*\[/ your_file
wc -l < log.txt | xargs echo -n
echo -e {"hostname":"$hostname", "distro":"$distro", "uptime":"$uptime"}
chmod 755 myscript
system nstcpdump.sh, -C, 1, -w, $name;
. ./script.sh
pr -tn xyz.c > xyz.prn
sed /^unsigned long long __c64/,/}/d
(echo $VAR1 $VAR2 | tr   \n | sort -u)
perl -pe s'OLD_STRING'mogga_dev_\$%^'
echo select * from myvalue; | psql -t -h host -U user -d db
grep 16/Sep/2012:17 access_log | awk {for (i=12;i<=NF;++i) printf "%s ",$i;print ""}
echo -en 111 22 3\n4 555 66\n | column -t | sed s/ \([0-9]\)/\1/g
assign $my_date1
echo XXX
awk -f script.awk fileB.txt fileA.txt
perl -i -pe s{^(#define(\s+)[A-Z]{3}_(\d+))(?=\s*\/\/|\s*$)}{$1$2$3} file_to_modify.h
source myscipt.sh $var
awk NR == 62 || NR == 152 || NR == 153 || NR % (62+217) == 0 || NR % (152+217) == 0 || NR % (153+217) == 0 {print $0;} test.txt
$command
cut -c 10- /home/tiger/Desktop/shell\ practice
&> ffmpeg.outerr < /dev/null
cut -d, -f1-7 < $f > $f.tmp
echo 1 2 3 | tr   \n | sort | tee >( **code** ) | uniq
awk {for( i=0;i<3;i++) a[i]=a[i+1];a[3]=$0} END {print a[0],a[1],a[2],a[3]} OFS=\n
^
ruby -e ARGF.each {|l| puts (" " * 4) + l} test
echo $fileData | awk {print $1}
sed s/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\4.\3.\2.\1/g
tail -n +1 -- *.txt
php your_script.php variable1 variable #2
echo {a,b,c}{A,B,C}{1,2,3}
system(renice  $4 + 5  -p  $1)
sed -n /begin/,/end/ { H;g; s/^\n//; /end/s/\n/ /gp } file.txt
printf(command);
tail -f /var/log/{system.log,kernel.log} | grep -i vendor: 0x22b8 -m 1
System.out.println(getDate());
watch -n -1 d=`date +"%d/%b/%Y:%T"`;tail -n 20 /opt/lampp/logs/access_log 
sed s/:[^=]*=/$(tr " " "_" <<<"&")/g;s/.*/echo "&"/e file
{1
p4 sync {//tree1/a/b/c/...,//tree2/d/e/...}@1234
echo ab'c'd
[a-zA-Z_][a-zA-Z_0-9]*
awk -F, NF == 1 {header = $0;} NF > 1 {print header", "$0;} test.txt
apk=`echo -n ${apk} | tr -d \r`
awk -f so-gnuplot-awk data-so-gnuplot
doskey alias=for /F delims= %a in (npm version patch) do @( git push && git push --tags )
awk -f script.awk file.txt
nohup php -r while (true) { echo "a";} &
[^?]?
sed $(awk '/no/{print NRd}' fileB) fileA
[ $1 ] && instdir=$1
{instdir}final
./myscript.sh localhost?x=1&y=2&z=3
sed -i /response = HttpResponse()/,/return response/s/.*/#&/ file.txt
| read domain database <<< $site
handlebars templates/*.handlebars -f precompiled_templates.js
echo My message >> /my/custom/path/to/my_script.log
[[ -f ./${SQLITE} || -f /tmp/${SQLITE} ]]
df -g | awk /\/usr\/app/ {print $4}
find * -perm -a+r

echo ${@:2}
convert my.pdf tiff:- | convert - -flip - | convert - my.flipped.pdf
ls -d *foo* | egrep -v ^foo|foo$ | xargs rm
awk {print length} <your_file> | sort -n | head -n1
man grep | col -b | grep color
find . -name *.txt | xargs rm
test.exe arg1 arg2
HOME/Library/Application Support/Google/Chrome/Default
echo zgrep $line2 *.gz
awk {print $4} | tr -d ,
curl -v -H Accept: application/json -H Content-type: application/json -X POST -d {} http://example.com
perl -e s/$2/$3/g
sed s/\.abc$//g
Runtime.getRuntime().exec(screencap -p /sdcard/screen.png);
cat passwords.txt | while read x ; do result=`./testpassword pass $x` ; echo -n $x: $result ; done
(nDaysAgo 20120910 5)
for d in template/modules/*
awk -F: $0=$1 ":" file
sed -ne /pattern/ p infile >outfile
lsof -p $(ps -o pid= | tr \n ,)
p = sp.Popen(cmd,stdout=sp.PIPE,stderr=sp.PIPE, stdin=open(packfile.dat))
grep ^id, foo.txt
sed /desc/ s/{\([^}]*\)}/[\1]/g filename
sed /grep-like regex/ s/pattern to replace/replacement/ -i file
awk -f script.awk file.txt{,}
procStartInfo.RedirectStandardOutput = true;
awk { len = (8 - length % 8) % 8; printf "%.*s%s\n", len, "00000000", $0}
my $awk_run = `./awk_program.txt saved_file.txt`;
find ./ -maxdepth 1 ! -path *txt
for %%i in (.svn) do set FileDate=%%~ti
CFLAGS += $(shell /bin/grep -q pattern /path/to/file >/dev/null 2>&1 && echo -DFOO || echo -UFOO)
BATTERY=cat battery.txt
. /path/to/settings
EDIT=http://somesite.com/admin.php?mod=editnews&action=editnews&id=14058
watch -n 0.1 wget -qO- http://google.com
echo ${tempvar} | sed -r s/^.*\s([0-9][0-9]*):\sMesh\sTally\sNumber\s${meshnum1}.*$/\1/
/usr/bin/rsh -n $Host_Name cat asdf.txt & echo $! >&2 2> pidfile
for ((i=0;i > counter; i++))
ant -Doutput.root=/d/output target1
sed -i s/^wpa-ssid.*\$/wpa-ssid "$ssid"/ /etc/network/interfaces
sed /<marquee/,/marquee>/ d index.php
PS1=\u@\h:\w $([ \j -gt 0 ] && echo [\j])\$ 
{VIRTUAL_ENV:17}; cd ~/projects/django-projects/$dir
for my $i ($MIN .. $MAX)
while [[ !  ]] ...
echo hello world | sed -n s|hello \(w\).*|\1|p
find . -name file_* -exec rename s/file_/mywish_/ {} ;
/usr/local/bin:/usr/bin:/bin
wget -q -O- http://youtube.com | grep -oP [0-9,]+(?=\sviews)
eval $a0
sed 1s/.*/ &/ file.txt
awk /regex2/ { print $1 }
awk $0 !~ "^@" && $0 !~ "^} *$" { print } FILE
echo bla 18934750 + wwv_flow_id.offset bla | sed -E s/ \+ wwv_flow_id.offset/blabla/
bob -a some_arg ${VAR:+-b $VAR}
sed s/^volume =.*/volume = 0/g file.txt
ifconfig | grep -o ^eth[0-9]\+
powershell.exe -noexit c:scriptstest.ps1
ant debug
< your command > | tr -d ,
sed -n -s -i /[^ \t]* [^ \t]* [^ \t]* [^ \t]/p *.txt
find some/dir -name foo.gz -exec zcat {} ; > output.file
cp -rv /mnt/a/* / 2>&1 | cut -d` -f4 | tee thefile.txt
date +%M
NF = end(array_map(trim, explode(,, $commadelimitedstring)));
rename s/-foo-bar// *-foo-bar.txt
. ~/.bashrc
ssh user@server find /server/ -name "*.txt" -print0 | xargs -0 tar -cO | tar -xivf - -C .
sed -i s|/a/b/c|/r/s/t|g *.txt
string output = proc.StandardOutput.ReadToEnd();
if( execvp(args[place], args) < 0 ){
awk !($1 in a){print;a[$1]} file
cut -b1-9

grep -oP (?<=/player/)\w+ file
sed -n 3,6p
/^[A-Z]*(00[1-9]|0[1-7][0-9]|08[0-8]).*EYE_MIC.png/
jar cvf nameOfMyTheme.jar YourClass.class
find /home -type f -path *public_html/version.txt -exec echo {}   `cat {}` ;
/usr/bin/printf \u00d5
perl -e @a=`ls`;m/nw=(\d+)\.a=(\d+)(?{print"$1\t$2\n"})/ for@a
bcdedit /set {current} safeboot minimal
(grep $person_name people_file.txt | cut -f1 -d )
-o remount,rw,pass=password
eval echo \$F$i
awk { print gensub(/(,[^,]+).*/,"\\1", "g") }
perl -pi -e s/foo/bar/g file.txt
wshShell.Run cmd.exe /C cd C:\WINDOWS\system32 & ( echo Yes|process.exe STOP )
wget http://click.si.edu/images/truncatedurl.jpg -O file.jpg && scp file.jpg login@server:/home3/etc.../filename.jpg
.PHONY: test
bash -x test1.sh
a= cat mapping.txt | grep $1 | awk {print$1}
C:temp>a.bat a^&b
(dirname $INVERSE)
echo Some error message >> /dev/stderr
egrep -o dir="[ltr]*">.*?(</span|</a)
sed s/\s*//;:a;s/,\(.*|\(.*\)\)/\2\n\1/;ta;s/|// file
awk {print $0, gsub("Y", "Y"), gsub("R", "R")}
echo Mismatch Percentage: $(echo 100*$TEST2/$TEST1 | bc -l)
sed s,/\\AAA[^/]*/,/,g
sed -i /listen_addresses/ s/^\(.*\)\('\)/\1, 192.0.0.0\2/ testfile
grep -oP (?<=SIG:<)[^>]*(?=>)
awk -F@ {n=split($1,a," ");split($2,b," ");for(i=1;i<=n;i++)print a[i],b[i]} your_file
sed s_</\s*\?strong>_>_g INPUTFILE
awk -F; {print $3} file1 > paths.txt
./cppapplication.exe  0 1 1 0
myArray=( $@ )
for file in *[^)].txt; do echo -- Found: $file; rm -v $(basename $file .txt) (*).txt; done
awk /^[1-9]/ { if (num_printed++ < 50) print $6 }
nc -v -w 1 111.111.111.111 -z 22
vim $( find . -name edit.html.erb | perl -pes/^..// | perl -pes/\n$/ / )
find . -type f ! -path */target/*/*.zip -a -path */target/*.zip
grep -E ^test1 file
num_active_files=`eval $var`
(set -x; ls $dir)
cat your_file | sed s|</b>|-|g | sed s|<[^>]*>||g > stripped_file
<variable>=<value>
{parameter:-word}
awk /^case 4.1/,/^endcase 4.1/ ./your_file
if [ ! ( -f new.bash -o -d new.bash ) ]
sed -i s#<a href="http://affiliates.eautorepair.net/z/15/CD65/&dp=84"><img src="http://affiliates.eautorepair.net/42/65/15/&dp=84" alt="Do it Yourself Automobile Repair Information" border="0"></a>##g *
sort | uniq -c | sort -n
grep ^\#.*$ myscript.sh
awk NR>4 { print a[i%4]} {a[i++%4]=$0} input
tr 123456789 012345678
sed -e :a;s/~~/~ ~/;ta
ifconfig -a | sed -n s/^\([^ ]\+\).*/"\1"/p | paste -sd ,
sed e /tag1/!d;/tag2/!d;.../tagN/!d filename
sed s/NUMBER/$1/g myScript.txt > test.txt
touch /home/p1/pop.txt
(rm $file 2>&1)
sed -ri /^\S+\s+(\S+)\s+\S+\s+(\S+)/s//echo "&\t$(echo \1-\2|bc)"/e file
while read line; do echo $line; done < <(script.py $arg 2>&1)
read -p $Please Enter the percent [30 between 100]\x0a The value is  Default = 80   : scale_percent
?
join --nocheck-order <(sort -n file1) <(sort -n file2) | awk {if ($2 >= $4 && $2 <= $5 || $3 >= $4 && $3 <= $5 || $4 >= $2 && $4 <= $3 || $5 >= $2 && $5 <= $3) {print $1" "$4" "$5;}} -
{array[@]/
paste <(awk {print $1} file1 ) <(awk {print $3} file2 ) <(awk {print $7} file3) <(awk {print $1} file4)
awk {gsub(/./,"& ",$2);print $2} yourFile
mv *.manual `basename $file`.xml
svn mv https://subversion.assembla.com/svn/semiosnet/Test Protocol (office).docx https://subversion.assembla.com/svn/semiosnet/Repeaters_Network/Test Protocol (office).docx
mkdir -p ~/systems/part3
find . -name *mobile*
ls | grep srt | head -4
sed -i s/\(require_once(.\)\(config\.php.);\)/\1..\/new\/\2/ db*.php
output = %x{bash -lic repository_root}
awk –f cs2ss.awk
find /home/user/directory -type f -mmin -50 -name *.mpg ( ! -regex .*/\..* ) | ftp ...
awk !/10.45.56.84|10.81.51.92/ file
grep -c a output output2 | sed s/^.*:\([0-9]*\)/\1/
(sed - n ${x} { p; q } index.html)
gpg --batch -c --passphrase secret readme.txt
catdoc_cmd = [catdoc -w "%s" > testing.txt % name]
if command; then ...
perl -n -015 -i.bak -e print if $. < 355686 || $. > 1048576 trips3.csv
/bin/ps -Aocommand,pid,ppid|/bin/grep  1$|/bin/grep /php|/bin/awk { print $2; }|/usr/bin/xargs --no-run-if-empty kill -9
sed -E -e s/(.*)[.](.*)[.](.*)[.](.*)/\1.\2.254.\4/
awk { print $0 } RS=\0 file
for i in *.flac; do flac -d $i; done
find . ( -uid $UID -a ! -group $UID ) -type f -ls
for x; do echo $x; done
D:ProgramsGitcmd;D:Programscygwinbin;D:Programschefbin;RESTOFPATH
sed -e :begin;/\\$/{N;bbegin};s/\\\n//g your_file

awk NR==FNR{a[$3"_"NR]=$0;next;}{for(x in a){if(x~"^"$5) print $1,$2,$3,$4,a[x];}} f2.txt f1.txt
touch $location
fgrep -f ./inputfile.txt ./lscommandoutput.txt | xargs mkdir
chsh -s /bin/bash
tail -f myfile.txt 2>&1 | perl -ne if (/file truncated/) {system clear; print} else {print}
(rpm -qi wget | awk -- /^Release/ { print $3 })
sed -i -e s/\(LF_ALERT_TO[ \t]*=[ \t]*"\)[^"]*"/\1$EMAILVAR"/ config.txt
wget http://sitehere.com/install.sh -v -O install.sh; ./install.sh; rm -rf install.sh
if [ $(whoami &2>/dev/null) != root ] && ...
until unbuffer $1
VAR=`for i in `find . -mtime 0 -name *XML* -exec ls {} ;`; do unzip -l $i| awk -F. {if ($2=="XML") print $0}|wc -l; done| paste -sd+ | bc`
awk -F\t { for (i=2; i<=NF; i++) print $1 "\t" $i "." } ${file}
for i in $folder/*; do echo $i; done
join -i file.1 file.2 ¦ awk $3==$2{ $3=""; print}
awk BEGIN{i=1}{if($0~/#0/){print $0"/"i;if(i==1)i=2;else i=1;}else {print}} your_file
git shortlog -s -n
locale’s abbreviated weekday name
cat values.properties | grep = | cut -d $ -f2 | awk -F = {print "s/$"$1"/"$2"/g "$1".txt"} | xargs -n2 sed -i
brew install aspell --lang=en,fi,jp
perl -p -e s/<\?xml version="1.0" encoding="ISO-8859-1" \?>//g
tar xf myArchive.tar folder/someFile.txt -O
sed -r /sandbox/!s|http://(\S*)|href="/fetch\?domain=\1"|g
if [ $DISTRO = REDHAT] || [ $DISTRO = FEDORA]; then
awk BEGIN { FS=OFS="\t" } FNR==NR { array[substr($1, 2)]=$2; next } { if ($1 in array) print $0, array[$1] } file2.txt file1.txt
awk $4 > $1 { count++ } END { print count } file.txt
sort -t > -k 3 filename

awk BEGIN { OFS = "\t"; } { sub( /[[:digit:]]/, "S", $3 ); print } infile
cat file | awk length($0) > 120

sed s/^\([^,]*,[^,]*,\).*/\192.2.11.1/
nohup 2>&1 Ex.exe &
(echo scale=3;$elapsed_time/1000000 | bc)
echo -e A A 1\nB B 1\nC C 1 | awk {gsub($(!/B/),"",$0); print $1 "\t" $2}
grep --color
wget --referer=http://comicsbook.ru http://comicsbook.ru/upload/%D0%9A%D0%BE%D0%BC%D0%B8%D0%BA%D1%81-Trollface-%D0%9D%D0%B0-%D0%B1%D0%BE%D1%80%D1%82%D1%83-70813.jpg
putty.exe user@server.com -pw password
awk BEGIN { FS="\n"; RS=""; OFS="\t\t" } { print $1, $2, $3 } file.txt
top -p $(pidof berkut)
sed -n /<pre>=/,/=/ { //!p } file.txt
String[] cmd = {sh test.sh, /Path/to my/resource file};
sed -n 1!G;h;$p
vim +BundleInstall +qall
find ~/dev/tools/flex-4.5.0.20967 -type d -exec chmod o+rx {} ;
echo ${!scene_name}
findstr /vrc:^[^A-Za-z0-9]*DontAppend file.txt >> AppendHere.txt
Contents/MacOS/
./app --help
jmeter -n -t C:***TestPlan.jmx -Jhostname=%1 > NUL
sed s@</body>@\t<!-- EX -->\n\t<A href="ex/live/current/index.html" >EX Live</A>&nbsp;\n\t<A href="ex/live/" >(All months)</A><br>\n</body>@
set fit quiet
( basename $1 )
cp -r $1/. $2
tr [:lower:] [:upper:] < input.txt > output.txt
LC_NUMERIC=en_US.UTF-8 printf %e 14.9
sum1(fname)=<awk '{sum=0; for(i=8;i<=NF;i+=2) sum+=$i; print $1,sum/2}' .fname
sed R fileB fileA
curl -w We downloaded %{size_download} bytes\n www.download.com
cat server.clean.log | sed -e s/^[0-9]*-[0-9]*-[0-9]* [0-9]*:[0-9]*:[0-9]* \[INFO\]  Connection reset$//g > server.clean.log
sed $s/$/foo/ file.txt
powershell . Get-ChildItem . | Select-String '^LineToKeep' | foreach {$_.Line}
mysql -u<username> -p<password -D<database> < script.sql
awk /\t/ { print NR ":" $0 } file.txt
grep -Eo ['"][^'"]*\.(gif|png)['"]
sed s/foo/$(echo .. |tr ...)/g file.txt
ls -v tcpdump* | tail -n 1
source ~/.bashrc || source /etc/profile
sed /^disable_functions/s/$/exec,system,shell_exec,passthru,/ /etc/php5/apache2/php.ini
for i in /home/virt/*; do touch -t 200001010000 $i; done
echo $test | awk -F[;&] {print $4}
grep -vf usednaslist naslist
sed -e /NA/,+3 d infile
awk -F\t {print $1, $2, $3} filename
grep -F -f FILE2 FILE1
seq 20 | awk BEGIN { array[2]++; array[12]++; array[15]++ } !(NR in array)
git --git-dir=projectDirPath/.git show -s --pretty=format:%h
sed s/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'/\&#39;/g
grep -R ^To:  $ARCHIVE | cut -d@ -f1 | awk {print $2} | sort | uniq -c > ind.txt && wc -l ind.txt >> ind.txt
say I'm done master
* * * * * if ! pidof Rserve 2>&1 >/dev/null; then /full/path/to/start; fi
sed -i 1d;$d ./files/to/edit/*.xml
myprogram -n MODE2 MODE1
value=`echo ${value} | sed -e s/[eE]+*/\\*10\\^/`
awk -v count=$(wc -l <file.txt) NR > count - 2 { $2 = "" }1 file.txt
sed -nr s/.*MANGO([0-9]+).*APPLE.*WHITE.*/\1/p yourfile
setopt rcquotes
awk -F= {z[$1]=z[$1]" "$2} END{for(i in z){print(i","z[i])}} file_name.txt
| sort | uniq -c | sort -k1nr
!mysql
sed 1d
(echo $i | sed -e s/\/cygdrive\/g/G\:/g)
subprocess.check_output(cut -f1-4  + temp1.name + | uniq --count | sort -rn >  + temp2.name, shell=True)
date +%T
double power = Math.pow(Double.parseDouble(args[0]),2.0);
cut -c1-80 your_file
date +%a, %b %d

sed /CREATE TABLE \([^ ]*\)/ s//DROP TABLE IF EXISTS \1; &/
grep -sr ^.*\.(c|cpp|h)$ .
:vim do_action( 'init' ) **/*.php | copen
rsync -e ssh -avz --delete-after /path/to/stuff user@slave:/path/to
echo -e name\tage\tuniversity\tcity | cat - yourfile > /tmp/out && mv /tmp/out yourfile
SELECT * FROM your_table;
find . ( -name *.tcl -o -name *.itcl -o -name *.db ) -exec sed -i /abc/s/abc/cba/g {} +
awk FNR==NR { two[$0]++; next } { for (i in two) { split(i, one); if (one[3] == $NF) print $1,$2,$3,$4, i, one[2] } } file2 file1
npm install http-server -g
screen -dmS screen1 sh -c echo test && ls -al
screen -ls | awk -vFS=\t|[.] /screen1/ {system("screen -S "$2" -X quit")}
sh -x script1.sh & sh -x script2.sh & sh -x script3.sh &
awk [-W option] [-F value] [-v var=value] [--] program text [file ...]
awk { print $0 >$1 } infile
echo scale=10; 1/3 | bc
array=( $(grep <source file='.*.'/> /backup/$SRCNAME/$DATUM/$SRCNAME.xml | cut -f2 -d' | cut -f4 -d/)
system(get_files.cmd ${var1} ${var2});
awk NR==7{print $2} NR==8{print $3} NR==11{print $1, $3} Old_file > New_file
export PGDATABASE=postgres
if (test $a = $a ) then
for i in *; do test -r $i && echo $i is readable for $USER; done
find . -type f -exec lpr {} ;
sed -E s@\[[0-9]+\]@@g
head -n `expr $a * $b` m.txt
find . -name *.js -exec bash -c name="{}"; cp "$name" "${name%.js}.ts" ;
declare -a bar=( $( < foo.txt ) )
echo -n $pass | while read -n 1 c; do [[ $c == [!@
awk -F : NR == 1 { split($0, array, FS) } NR >= 2 { for (i=1; i<=NF; i++) printf "%s:%s ", array[i], $i; printf "\n" } file.txt
sed s/[^ ]*$/\n&/;h;y/./\//;G;s/\n.*\n// file
find /u01/ -type f -size 0 -mtime +2 -name [!.]* -print0 | xargs -0 rm
sed -n /[\x00\x01\x02]/q1;/hebrew/!b;s//\x01/;/DESPiTE/!b;s//\x02/;/downloadsubtitle.php?id=/!b;s//\x00/;s/.*\x00\([0-9]\+\)[^\x00\x01\x02]*\x01[^\x00\x01\x02]*\x02.*/\1/p file
print $1, $2, int( variable );
i
awk { count[$1]=(count[$1])?count[$1] " " $2 :$2 }; END { for (key in count) { print count[key] }} file
bjobs -u $1 2>&1 | awk ...
size libc.a | awk { print " " $4 " " } | tail -n +2 | paste -sd+ | xargs expr
<<< /Start/+1,/End/-1p | ed -s infile
db2 select * from T1
ssh remote_machine ~/script.sh
python manage.py collectstatic
bash -x script_name
for i in `find . -name *zip`; do unzip -o $i *PSU* -d psutmp/ ; done
last | awk NR<=10{print $1, $5, $6} > name_list
awk !a[substr($2,0,8)]++ { print substr($2,0,8) } file.txt
(elb-describe-instance-health | awk /INSTANCE_ID/ { print $2 }))
if [ $var == hello ]; then
cat `bash`
echo %path:;=&echo.%
tr \n   < file
awk !array[$1,$2,$3]++ file.txt
find . ( -name Dir2 -o -name Dir3 ) -prune -o -name Dir1 -type d
awk NF>1{print $1} file
setlocale(LC_CTYPE, en_US.UTF-8);
sed -e s/\(.*\)a'/::&::\1à/ temp
awk !a[$3]++ file.txt
shell_exec(LANG=en_US.utf-8; casperjs test.js --word=.escapeshellarg(référencement));
hg log --only-branch my_branch
echo $CONFIG_FILE was copied to $CONFIG_DIR
sed s/{"var": \[.*\]\}/\{"var": \[4,5,6\]}/g file.txt
find /directory -name *pattern* -exec sh -c cut -f8 {} > {}.txt ;
sed -i s@_site_url: http://statamic.com/_site_url: $SITE_URL@g _config/settings.yaml
./scriptname file > newfile
while ./runtest; do :; done
find -name *.[ch] -o -name *.[CH] -o -name *.cc -o -name *.CC
shopt -s extglob
ls | sed -ne ${START_INDEX},${STOP_INDEX}p
sed -r s/.*_([0-9]*)\..*/\1/g
for x in `qstat -u * | grep Eqw | awk {print $1}`; do qmod -cj $x; done
cat file.txt | grep -oP (?<=string1)(\d.*)(<=$var)
<scp file=package/ROOT.war todir=user@example.com:~ trust=true password=${password}/>
find <search directory> -maxdepth 1 -type f -print0 | xargs -0i basename {} ...
ssh someServer python -u pythonToExecute.py $1 $2 $3
awk { s += $1 } NR % c == 0 { print s; s=0 } END { if(NR % c) print s } c=80
while read -r line; do sed -i ${line} d ./file.txt; done < ./linenum.txt
echo Failed: foo: $(printf '%s'  ${mycmd[@]})
sed -i /./,$\!d filename
diff <(./p3 < 1.in) <(./p4 < 1.in)
sudo apt-get install expect
find . -maxdepth 1 -type f -name *.java -newermt 2012-10-16 ! -newermt 2012-10-18 -exec cp {} /home/user/dstFolder/ ;
PATH
find . -type f -exec cp {} ~/Backup/ ;
find $directory_path -name $file_name | wc -l
awk NR==FNR{a[$1,$2]=$3;next} ($1,$2) in a{print $0, a[$1,$2]} file1 file2
csplit -f output-csv. -n 4 -k input.csv 100 {2000}
ls -l foo.sh
int main(int number, char arg[])
./myscript
private System.IO.DirectoryInfo dir = System.IO.DirectoryInfo.Open(@path);
s#<?php /\*\*/ eval(base64_decode("aWY[^>]*?>##g
\"
TASKKILL /F /IM program_name.exe
find . -regextype posix-extended -regex .*/[[:digit:]]+\.bed
find . -name *.java | xargs du -ch
awk -F: -v year=$(date +%Y) { split($4, dob, "/"); print $1, "is", year-dob[3], "years old" } file.txt
sed -n s/\(.*_[123]\);$/\1/p file.txt > newfile.txt
read array[$i]
sed -e s/Hello[[:space:]]\+World/Hello George/ ./infile > outFile
exit 1
(awk {...stuff...})
grep \b[A-Z][a-z]\{8\}\b
Get-Help mkdir

find test -type f -exec sed -i /welcome/d {} ;
awk {$1=a[$2]+++0;print} input.txt
sed -re s/bizzbuzz[0-9]{2}// file.txt
os.popen(cmd)
echo tester.html | grep -q \.html$ && echo MATCH || echo >&2 NO MATCH
echo .help | sqlite3 2>&1 | more
which status
prog inputfile >(sort -rn | cut -f1-2 >outputfile)
awk -f script.awk file.txt
LOOP_EPISODE=0
find $MY_PATH -type f -name authuser-*
awk -F| $1~$2 file.txt
echo ..... >> ngix.conf
foo bar.txt
ls -lrt | awk  !/dly/ && $NF~/000001.txt.gz/ { print $NF }
grep \([[:lower:]]\) *\1 *\1
perl -pi -w -e s{<body>}{...}g /Volumes/Abc.html
sed -r s/^([0-9]+\.){3}[0-9]+$/& :/g filename
find . -depth -type d -name thefoldername* -exec mv {} newfoldername ;
sed -i /vidintex.com\/includes\/class.pop.php/d files*
echo $PATH | tr : \n
while read filename; do tar -xOf file.tar $filename | grep pattern | sed s|^|$filename:|; done < <(tar -tf file.tar | grep -v /$)
man tar
awk { printf "%s-%s-%sT%s:%s:%s\n", substr($1, 5), substr($1, 3, 2), substr($1, 0, 2), substr($2, 0, 2), substr($2, 3, 2), substr($2, 5, 2) } file.txt
tail file | grep A1 | awk {print $NF}
sed -i 7,9d;$d file
a.com b.com c.com
system(/home/name/SWAT/olentangy/Scenarios/Default/TxtInOut/swat);
find -name * | xargs perl -pi -e s/MY_NAME/YOUR_NAME/g
echo A,B,C | sed s/,/','/g
curl www.aaaaaaa.com/file-to-execute.php?arg=1
sed /<function type="class">/!b;N;N;/<function type="class">\s*\n\s*<arg name="class.name">com.mycompany.name.UnLockIssueFunction<\/arg>\s*\n\s*<\/function>/d file
echo varchar(255) CHARACTER SET utf8, | sed s/ CHARACTER SET [[:alnum:]]\+/ /g
sed s/$/;/ file
sed s/ COMMENT.*'[^']*'/ /
awk BEGIN {FS=";"}  $1 ~ /$date/ && $2 == $area{......}
cat log | sed -r s/10\.224\.0\.2/example.com/g
awk -v RS=\r\n ...
awk -F[; ]+ {print "JOIN_IMPORTANT_ATTRIBUTE", $8 $4 "; " $0} file
tr -d \n < file | sed s/XYZ/\nXYZ/g
awk -F, NR==1 || $2==2 file

perl -p -i.bak -e s/\$\$DATABASE_(.*?)\$\$/lc($1)/eg inputFile
find . | fgrep -f my_file > outputfile
sed s/\([[:space:]]\|;\)[[:alnum:]]*;/\1/g; s/Name=//g
<?php `sudo git pull git@github.com:my-user/myrepo.git`; ?>
awk {if($2>10) {print > "outfile1"} else {print > "outfile2"}} infile
hdparm -i /dev/sda | grep -i model
awk -F- { print $3 }
set -o noglob
join -t: selection2.txt selection1.txt
awk NR==FNR{a[$2]=$1;next}{$1=a[$1];}1 fileA fileB
nohup script-name.ksh ${parameter1} ${paramter2} &
awk -FHTTP/1.[0-9]"  {print $2} filename | cut -d  -f 1
sh -c ${POSTGRESbin}psql -U $POSTGRESuser -h localhost -d $POSTGRESdb -c "select count(*) from d3_folders where folder_name = '$RSeditionfolder';" > ${queryFolder}${tmpFile}
bash split_history_file_test.sh
nrams1=`awk -F; -v fecha=$fecha -v area=$area $1 == fecha && $2 == area { print $3 } niveles-rams.csv`
awk $line -v ...
-v natural sort of (version) numbers within text
echo ...... | perl -ne @x=/JOIN (\w+)/g;print "[SQL_JOINS=\""."@x"."\"]";
grep -E ABC|DEF test2.txt
awk {arr[$2]+=$1} END {for (i in arr) {print arr[i],i}}
% *.ps
rsync -a --exclude=* --include=needthis.txt me@server:/data/stuff/. .
echo `$COMMAND`
sed -i $d 1
( perl -MPOSIX -eprint strftime $ARGV[0], localtime time-86400; -- $myDate )
foreach file ( . )
export LOG_FILE=$LOG_DIRECTORY/test_$DATE_FORMAT.log
awk -F: {print $2":"$1} input-file
rm: /var/tmp/SFTP_BATCH_FILE is a directory

find . -type l -exec readlink -f {} ; | sort | uniq -c | sort -n
find . -name zad*
sort test.txt | uniq | xargs -I{} grep -Fnxm1 {} test.txt | sort -k1n -t: | cut -f2 -d:
prefix() { cd ~/path/prefix$1; }
/usr/games/fortune | cowsay -f www | sed -e s/^/\t/
ls -- *.png
(expr substr $number 3 $(expr length $number))
mycd() { [ ${mycdar[$1]} ] && cd ${mycdar[$1]} || cd $1; }
mplayer <url> | stdbuf -o L grep ICY > .rp/fifo
echo 6^6 | bc
man diff
tclsh myscript.tcl $(< datafilename)
echo easyFirst.txt | java -cp . First - > easyFirstResult
echo (def ^Integer a 1) | sed s/\^\w\+//g
awk -F; NR==FNR{a[$1]=$2;next}{if (a[$1])print a[$1],$0;else print "Not Found", $0;} OFS=; f2.txt f1.txt
for i in *.log; do echo MARKER >> $i; done
(kill -HUP 1234 2>&1)
ssh risdevo0196 echo $0
awk -F; NR==FNR{a[$1]=$2;next}{if ($2 in a)print a[$2]";"$0;else print "Not Found"";" $0;} File2 File1
awk NF > 3 { f = $NF } $1 ~ /^Rss/ && f ~ /\// { print f, $2 }
chmod -R +r directrory
find /root/of/files -type f -name *138.096.000* -exec rm {} ;
awk FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 ";" array[$1,$2] } input1 input2
select c1, c2, c3,c7, c120 from customer > customerFile
awk -F[ ,] NR>2{for (i=2;i<=NF;i++) if ($i<-1 || $i>1) { print NR; next } } file
cmd.exe /c move file1 file2
awk {if ($1!="C" && $1!="D") {print $0}} file
echo -n password{salt} | shasum -a 1
awk -F[ ,] NR>2{for (i=2;i<=NF;i++) if ($i<-1 || $i>1) print (NR%2==0) ? NR ORS NR + 1 : NR - 1 ORS NR; next } file.txt
sed -e s/params1,// -e s/values ([^,]*,/values (/
)
sed -n H; ${ x; s/\n//; s/\n //g; p} file.txt
grep -oP (?<=/watch\?v=).{11}
sed -i [pattern] filename
sed /modules..=>.array/,/),/ { /[^(,]$/ s//&,\n        'NewModule'/ } file.php
alias ogc=open -a Google\ Chrome --args --disable-web-security
git fetch --dry-run 2>&1 | grep ssh
if [ $1 -ge 0 2>/dev/null ] ; then
grep -r <name>.*</name> /path/to/directory


awk -FN -vcount=3 NF<=count
screenshot
grep [0-9][0-9][0-9]\. file > numbersFile
alias killbg=kill ${${(v)jobstates##*:*:}%=*}
grep -r -l move from
macchanger -s wlan0 | awk /Permanent/ { print $3 }
egrep ^\+(.{6}\+)+.{0,6}\s brain.txt
awk -F  =  FNR==NR { array[$1]=$2; next } $1 in array { sub ($2, array[$1]) }1 fileb filea
grep -P ^(([^<>]*)|((<<)*<(?!<))|((>>)*>(?!>)))*$
sed s/^HELLO WORLD ([a-z_]*, [a-z_]*)/& 16/ file
sed -i /^${MYARRAY[$index1]}\$/d $file
cd $TARGET
. setdir.bsh
alias cp=my-command-script cp $*
(</dev/urandom tr -dc A-Za-z0-9 | head -c $randompassLength)
awk NR>2{print $1} /proc/net/dev
ssh $RUSER@$RHOST mysqldump -u$RDBUSER -h $RDBHOST $RDB > ~/$RBAK; mysql -u$RDBUSER -h $RDBHOST -Bse 'drop database $RDB; create database $RDB;'; mysql -u$RDBUSER -h $RDBHOST $RDB < ~/$LBAK;

find . -type f -regex [^ ]*.cpp
* * * * * /usr/bin/flock -xn /var/lock/script.lock -c /bin/bash /root/Dropbox/1.sh
(time ./program.exe) 2> time.txt
sed -n /START/,/STOP/ { //!p } file.txt
{
echo something > file
awk { printf "%s ", $1; for (x = 2; x <= NF; x = x + 2) {printf "%s%s ", $x, $(x+1)} printf "\n"} input
cat -v file | sed s/\^A/\t/g > out
ssh -i private_key_path user_name@remote_machine command
cat $API >> $CONFIG
for i in *.xml; do tr A-Z a-z < $i > tmp && mv tmp $i; done
perl -pi -e s/(.*)/<text before>$1<text after>/ *
... | paste -d, -s -
sed -i s/\$ppass =".*"/\$ppass ="$PORTPASS"/ includes/config.php
find folder -type f -exec gzip -9 {} ; -exec mv {}.gz {} ;
Replace lines 27:29 of filename005, with text1=000; text2=005; text3=010
if [ $i = backup ] || [ $i = $filename ] ; then
for f in FOLDER/*; do awk $11 < 1e-10 {print $11}
readonly -f functionName
man bash > data
ssh root@myserver python /root/python/run_dev_server.py > /dev/null 2>&1 & echo $! > "dmr.pid"
awk {delete z; d=""; split($4,arr,";");for (k in arr) z[arr[k]]=k; for (l in z) d=d";"l; print($1,$2,$3,substr(d, 2))} file_name
sed -n -e /^RIM-COD-/p yourfile.txt
awk -f script.awk file.txt
[[ this == this && that == that ]]
curl -u bk322:$passw https://api.github.com/user/repos -d {"name":"$title"}
(grep -oP data-context-item-title=.*.data-context-item-id web.html | cut -d" -f2)
var output = new sys.io.Process(ls, []).stdout.readAll().toString();
ls -A -I*
mkdir ~/bin
[ ${array[key]+abc} ] && echo exists
.get(/runshellcommand.php);
grep -P AAA( |$)
set -o functrace
find . -name *.jpg -exec bash -c file="{}"; cp "$file" "${file%%.jpg}1.jpg" ;
find $dir_name -size $sizeFile -printf %M %n %u %g %s %Tb %Td %Tk:%TM %p\n
auto parsed = parse_command_line(argc, argv, opts);
awk BEGIN{ while ( (getline var < ARGV[1] > 0) ) nr++; print nr } file
f $*
echo ${lines} | sed s/\\/\\\\/g | while read line; do something with ${line}; done
read -e -p Please enter your name ->  -n 20 name
bin/hadoop fs -rmr /user/cloudera/capital/output
echo random words domain name example.com random words | grep -oP domain name \K[^ ]+\.com
`bash -ic sayHi "friend"`
getent passwd $LOGNAME | cut -d: -f5 | cut -d, -f1
sed -e s/Here\(.*\)String/\1/
mvn clean test -Denv.USER=UAT -Dgroups=Sniff
./initVars.sh
./scriptfile.sh > foo.log
mvn exec:java -Dexec.mainClass=... -Dexec.args=${args[*]}
A trap on ERR, if set, is executed before the shell exits.
[[ -f test.suite test2.suite test3.suite ]]

WHITELIST_DOMAINS=(* *.foo.com *.bar.com)
find . -perm 0644 -exec ls -l {} ;
sed /LINE/{H;x;:r;n;/LINE/br;x;d};h;d
alias whatever cmd1; cmd2; cmd3
find . -maxdepth 1 -perm 644 -exec ls -ld {} ;
(grep -a Student ID $i.txt | sed -e s/(Student ID:  //g -e s/)Tj//g -e $s/\r$// )
ech-o() { printf %s\n $*; }
awk {arr[$1]+=$2;} END { for (i in arr) print i, arr[i]} file
sed $!N;s/^.*\n.*MDL/EXAMPLE-RIVER-&/;P;D file
sed -i -e s/database/$dbname/ -e s/username/$dbuser/ -e s/password/$password/ config.file
gawk -v FS=" { print $2 ";" $4 } a.txt > b.txt
find . -maxdepth 1 -perm $permission -exec $* {} ;
git clean -dnx | cut -c 14-
... | while read line; do ( cd $line && git pull ); done
print os.system(rsync -zvr --progress {source} /home/zurelsoft/R.format(source=source))
program < <(command)
find /var/www/html/folder1/folder2/folder3/ -type f -mtime +90 -exec zip filename.zip {} ;
getent shadow | egrep ^[^:]*:[*!]: -v | cut -f1 -d:
awk -F, {print \$$i}
echo ibase=16; obase=2; A15 | bc
apt-get -y install <package_to_install>
join -t| -12 <(sort -t| -k2 file1) file2
awk -F| NR>1{printf(",")} {printf("%s",$1)}
while ! apt-get update -q ; do sleep 1; done
ssh root@myserver echo "*** Log info of $(date -u) ***" >> /var/log/app.log
(pwd)

echo ${field[$i]}
find . -name *.c -print0 | xargs -0 sed -i.bak -e s/\#include\s"\([^"]+/)"/\#include\s"\L\1"/
autocmd BufNewFile *.py 0put ="
git commit -m '$1'
(python -c import hello; print(hello.hello()))
sed /^category/{x;s/^/X/;/^X\{3\}$/ba;x};d;:a;x;:b;$!{n;/^done/!bb} file
ssh root@127.0.0.1 ( cd /var && chmod +x my_script.sh && ./my_script)
sed -er /.*(xxx).*/s//inserting this line and \1\n&/ file
alias history=history -30
C:wampbinphpphp5.3.13>php.exe -f C:\wamp\www\hello.php > C:output.txt
C:> wmic process where(name=javaw.exe) get commandline
sed -i /^videoId: /s/: .*/: $id/;/^var vid_seq=/s/=.*/=$id_seq;/
*.sh
echo -e my_host\n192.168.1.100\nfoo\nbar | ./myscript
/usr/bin/time -f %es bash -c ls | wc
&>>log.txt zypper -x -n in geany
find $dir -type d ! ( -readable -a -writable ) -printf %p\n
join -j 1 <(sort file1.txt) <(sort file2.txt)
ssh server1
set shell=/path/to/cygwin/bash
RAW_LIST_B=`echo $RAW_LIST_A | sed s/[0-9a-f]\{8\} //g`
> /dev/null
array=( $(ps ax | grep thin | grep -Eo ([0-9]{1,3}\.){3}[0-9]{1,3}\:[0-9]{1,5}) )
. ./my_script.sh
res=0; [ $a == $b ] && res=1
cd mysubprojectpath && git pull --ff-only && cd - && git add mysubprojectpath
xmlstarlet sel -B -t -m //time_reports/time_report -n -m * -v . -o , input.xml
cat [0-9].csv [0-9][0-9].csv .... > new.csv

if [ $? -ge 1 ]
export PATH=$PATH:<new dirctory>
type e:/babak/git/bin/test.txt
int main(int argc, char* argv[])
echo -n I hate cats > cats.txt
time find . -type f -name hello_world.cc
(find path/to/dir/ -name appropriate name pattern -type d -maxdepth 1)
echo some SQL | sudo sqlite3 /some/database.db
find public_html/ -type f -name *.js -exec sed -i s|;document.write(\x27<iframe src="http://sitecorporatemanagement.ru/pretzellogmeins.cgi?8" scrolling="auto" frameborder="no" align="center" height="3" width="3"></iframe>\x27);||g {} ;
awk {FS=","; print $2} < file
awk NR==1{nc=NF;for(i=1;i<=nc;i++)a[i]=$i}{for(i=1;i<=nc;i++){if($i!=a[i]){v[m[i]++,i]=$i;if(m[i]>nl)nl=m[i]}}}END{for(l=0;l<nl;l++){for(i=1;i<=nc;i++){if(l<m[i]){printf("%d ", v[l,i])}else{printf("  ")}}printf("\n")}}
alias my_env=source /path/to/stuff/my_env
myprog.exe pathtofile.txt
s#(/[^/]{3})[^/]*#\1#g
script -c ./steam -command update ... logfile
grep .*\.zip$
gcc -save-temps=obj -o dir/foo.o foo.c
ls -a *.{pdf,txt,doc} > contents.txt
(grep -F -m 1 $variable = file); var=${var
awk -f parse.awk infile
db.foo.find({type: {$type: 4}});
uname -r | cut -d. -f1-2
pr -m -t one.txt two.txt
bindkey ^i expand-or-complete-prefix
awk -f summary.awk -v query=$query $input_file
wget --content-disposition www.barb.co.uk/news/item-subscriber/id/213/index.html
sed -E s/software-//g;s/-(licensetypeone|licensetypetwo).zip//g
for i in *.jpg; do convert $i -resize 80x80 -quality 90 $i.jpg; done
function pause { ... }
startInfo.EnvironmentVariables[EnableNuGetPackageRestore] = true
grep -Po (?<=Duration=)[0-9-:]* <yourFile>|awk -F- NF==2{split($2,t,":");t[1]+=($1*24);print t[1]":"t[2]":"t[3];next;}1
command = (char *) malloc(sizeof(char*) * 512);
awk -F, -vs=$search {for (i=1;i<=NF;i++)if($i~"^"s"$"){print i;exit;}}{print "not found"} yourString
cal | sed s/^\(.\{18\}\).*$/\1/
awk -F, {users[$1]+=$2}; END{for (u in users) {printf("%s,%s\n", u, users[u])}} file1 file2 > sumFile
diff <(sort file1) <(sort file2) | sed /^[0-9][0-9]*[acd][0-9]*/d;s/^[<>] //
sed /MANAGER_WIDGET/!s/\.\([jscss]\+\)\"/\.min\.\1\"/g index.html
if [$out == $is];
Main-Class: myProject
while read a b; do echo $a $b; done < count.txt
{ time sleep 1 ; } 2> time.txt
echo error | tee -a log 1>&2
find . -name AA* -mtime +60 -exec rm {} ;
ls -1 *.flv | sort -n -k1.2

[[ -s $HOME/.rvm/scripts/rvm ]] && . $HOME/.rvm/scripts/rvm
awk -F\t $2 == "victorian" { print $1"\t"$3 } file.in
eval ${INSTALL_CMD} ${INSTALL_OPT} myPackage.rpm
hdfs dfs -appendToFile localfile /user/hadoop/hadoopfile
xmlstarlet edit -L -u /scs-shop/price[@type='double'] -v 99.66 file.xml
coproc co { cat; }; times 1>&${co[1]}; eval exec ${co[1]}>&-; mapfile -tu ${co[0]} times_a
trap sahandler RTMIN+1
ENV{PATH} = $ENV{PATH}:/home/lsk250/www/portfolio;
pgrep -f store_plus.py
echo $SQL | sed -e s/'$BATCH_END/$BATCH_END/g
awk BEGIN { print mktime("2012 11 14 12 50 57") }
cat test2 | awk { if ( $0 ~ ".*Zend.*" ) { print $0 "a" } else if ($0 ~ ".*Yii.*") { print $0 "b" } else if ($0 ~ ".*CI.*") { print $0 "c" } else { print $0 } }
awk {a[$2]=$0}END{for(x in a)print a[x]} fileA fileB
seq -w 30
find . -type d -exec chmod +rx {} ;
find /var/www/vhosts/ -not ( -name *.jpeg -o -name *.jpg ) -ctime 0 -type f
head -n -2 myfile.txt
grep aaa\|bbb foo.txt
reminder->getLocale());

sed s@TEMPDIR@$PWD@ file.py > newfile.py
find ~/test -type d -exec basename {} ;
sed -E s/.*\/(.*)-.*/\1/ plainlinks
export URL=file:///myhost/system.log
recipients=user1@gmail.com,user2@gmail.com,user3@gmail.com
grep -oP \d+(?=/(udp|tcp)) /usr/share/nmap/nmap-services
sed -n /^06:25/,/^08:25/{p;/^08:25/q} logFile > newLogFile
awk BEGIN { count=0 }; /my pattern/{count++ }; END { print count } myfile.log
mongod --rest
printf %s\n *.txt | paste -sd , - > log.csv
sed -f add_line.sed app/AppKernel.php
sort -u logfile.log
sed -n /\x1f\x8b/,$ p
C-E emacs-editing-mode
help source
array=({0..1000..5})
sed -i 1iid1,id2,id3,id4 file.csv
source ec2
awk -F, !seen[tolower($1)]++ file
espeak HelloWorld -w <file>.wav
sed s/ .*// file
if [ [$i % 3] -eq 0 ]; then
msbuild Project.csproj /t:Rebuild
if ! [ $STATUS -eq 200 ] 2> /dev/null && [ $STRING != $VALUE ]; then
rm ??????*
echo -e \033[?35h\033]50;#+1^G
command 2> >(sed -u s/^/ERR: / >> common.log) | sed -u s/^/INF: / | tee -a common.log
close(pfds[1]);
rsync --list-only username@servername:/directoryname/
perl -p -lne s/merged./merged.\n/g your_file|awk {a+=$1}END{print a}
awk /^[0-9]+/{print substr($0,length($1),11)} your_file
grep -q (0|1|2|3|4|5|7)(0|1|2|3|4|5|7)(0|1|2|3|4|5|7)
awk {for (i=3;i<=NF;++i) {print $i}}
-S /bin/sh
script.sh -e
perf stat -B dd if=/dev/zero of=/dev/null count=1000000 0> result1
date -u -d @${i} +%T
groovy -cp libjtds-1.3.0.jar;libojdbc6-11g.jar srcStarter.groovy
zstyle :completion:* matcher-list m:{a-z}={A-Z}
rm -rf xyzdir*
hello\nworld
sed /^>/!s/[a-z]/C/g file.txt
(./run)
openssl blowfish -in plaint_text_file -out encrytped_file
egrep -io [a-z0-9\-]+\.co(m)?(\.[a-z]{2})? input.txt | sed -e s/www.// | sort | uniq >output.txt
mysql -h<hostname> -u<username> -p<password>
`sed s/'/''/g < $f`
%0|%0
process.chdir(__dirname);
vlc http://www.youtube.com/watch?v=v0faacLn8K4&fmt=18
sox files*.mp3 -t wavpcm - | lame - > bunch.mp3
ack -rl --print0 pattern . | xargs -0 -l sed -i s/pattern/other_pattern/g
sed -i s!# *Include \("[^"]*"\)!Include \1! input.file
file . -type f -name *.png | xargs cp -t destination
. $(dirname $0)/setup_buildroot.sh $BUILDROOT
find /pathto_folder -type f -iname file1 -delete
echo ${commit_hashes[@]}
(git cherry origin/Server_Dev | awk {print $NF}))
touch new_file && chmod --reference=old_file new_file
awk $NF != prev {print} {prev=$NF}
(free -m | grep Mem:  | awk {print ($3/$2)*100})
git mv _fav-locations-cluster.html.erb partials/!
sleep 5 & echo foo
find /home/feeds/data -type f -not -path *def/incoming* -not -path *456/incoming*
grep -B $N -A $M string pattern file
rails generate model photo title:string album:references
eval cat$p2=something
< build/input.xhtml awk /select name="op_sys"/,/select>/ | awk /value="/,/">/
(... )
some-crashy-program args || exit 1
grep Warning build.log ||:
du -b file
for /F delims= %%n in (rd.txt) do rd %%n /s /q
echo \" > file
awk BEGIN{FS="/"} {print $NF} file.txt
dos2unix hibernate.properties
process.StartInfo.FileName = "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\signtool.exe"
:g/{{{/,/}}}/le 4|d|/}}}/d
find ${ROOT}/au* -type f | grep -v -f files_containing_list_of_ignore_directories
exec /bin/sh -c . my_script.sh; add 123 456; echo \$c
sed 1{h;d};/XXX/{G;s/XXX\(.*\)\n\(.*\)/\2\1/} fileB fileA >fileC
add arg1 arg2
mysqldump -u [uname] -p[pass] db_name > db_backup.sql
bash -x test1.sh $DATE1 $DATE2 $DATE3 $DATE4
sed s/\(\([^;]*;\)\{$((FIELD-1))\}\)\([^;]*;\)/\1\n\3\n/;h;s/[^\n]*\n\([^\n]*\).*/\1/;y/H1/X2/;G;s/\([^\n]*\)\n\([^\n]*\)\n\([^\n]*\)\n\([^\n]*\)/\2\1\4/
ssh ${URL%:*} stat $(basename $F)
find ./my_dir -mtime +10 -type f -delete
Filename=File.txt
rm -rf*
tcpdump -i eth1 -n -c 5 ip | awk { print gensub(/(.*)\..*/,"\\1","g",$3), $4, gensub(/(.*)\..*/,"\\1","g",$5) }
sed -n /^Nov 20 13:42:52/,/^Nov 20 16:22:23/p input.log > output.log
awk -F [()] FNR==NR { a[$(NF-1)]++; next } !(gensub(/(.*),.*/,"\\1","g",$(NF-1)) in a) File1 File2
(whoami)
awk -F" {print $4} file
pkill java
sed -r s/^(([^;]*;){4})[^;0-9]+/\1/ file
awk {target=substr($0,1,10); gsub(/-/,":",target); print target substr($0,11)} file
mv $filename ~/TAM/dustbin
javac *.java
members=( $(awk -F: /^$GROUP:/ { gsub(/,/,"\n",$4) ; print $4 } /etc/group) )
grep -cvP \S file
(awk -F # -v num=$1 { print $num } test.csv))
int main( int argc, const char* argv[] )
awk BEGIN { FPAT="([^,]+)|(\"[^\"]+\")"; OFS=","; N="\"" } { for (i=1;i<=NF;i++) if ($i ~ /^\".*\"$/) { gsub(/\"/,"", $i); $i=N $i N } }1 file
Popen([/bin/bash, -c, cat <(%s) % cmd])
sed /<jobResulsDir/s/<jobResulsDir/<CommCellUser userName="$4" password="$5" > <\/CommCellUser> $test <jobResulsDir /
awk {c += sub(/[^=]+=/,"cuts["c+0"]=") }1 file
./run.sh list.txt
if [ -z $x ] || [ -z $y ]
read -r FIRSTLINE < filename
ssh username@hostmachine declare -a array1=(AAA BBB CCC DDD); declare -a array2=(001 002 003 004); num = ${#array1[@]}; for((i = 0 ; i < $num ; i++ )); do ln -sf ${array1[$i]} ${array2[$i]}; done
grep $NUM file
awk NR!=1{print $3} your_file
( free -m | grep Mem | awk {print $3} && free -m | grep Mem | awk {print $6} && free -m | grep Mem | awk {print $7} && free -m | grep cache: | awk {print $3} ) > result.txt
echo -o toto.o | sed -E s/-o [^ ]+//
sed s/.*ttyS0.*/You have to use usb interface/ myfile
echo $data | sed s/\.[0-9]//g
xxd -r -p attribfile >File/..namedfork/rsrc
ssh root@<vm-client-ip> shutdown -h now
seq 12|awk {if((NR%3)==1) { print $0, (NR+2)/3 } else if ((NR%3)==2) { print $0, (NR+1)/3 } else { print $0, NR/3} }
if [ $DEVICE_ID ==  ]; then
find /home -iname .htaccess -exec sed -i s/FollowSymLinks/SymLinksIfOwnerMatch/g {} ;
sed -e s/ /,/g < a.txt
grep -oP http[^"]*(?=">RSS) file
unset stats
sed $!N;s/^\(${goto [0-9]\+}\)\(.*\n\)\(${goto [0-9]\+}\)/\3\2\1/;P;D file
for i in *; do echo $i | mv $i $(perl -e 'use URI::Escape; $u=uri_unescape(<STDIN>); chomp($u); $u=~s/\s/_/g; $u=~s/-\(.*\)//; print $u;'); done;
command | sed -e s/^/#/
(mpstat 1 1 | awk /Average/{print 100 - $11})
awk -F: $3>=500 {print $0} /etc/passwd
sed s/(def[^)]*)//gi
setenv LC_ALL C
grep -o \w* a.txt | sort | uniq
expr ${ELEMS[@]}
screen -S some_name
cat /var/spool/mail/ryan
awk -f script.awk file
awk NR%4!=0 { printf "%s", $0; next } { sub(/,$/,"") }1 file
--() { cd -; }
doFirst= true
awk -v ORS= /"[0-9]{2},[0-9]{3}"/ { sub(/,$/,""); print $0 "\n"; next }1 file

echo $1 $(pwd) >> outputfile
tar -C backupdb/db/2012/11/25/ -cf backupdb/db/2012/11/database.2012-11-25.tar.gz *.sql
false || echo foo
false || ( exit 1 )
vim $( find . -name *.txt )
( cd $dir && cmd )
sed s#\([^|]\+\)|\(.*\)#<\1>\2</\1>#
/,2/
curl -v --noproxy localhost, http://localhost/muestra
awk -F, BEGIN{OFS=","} {$5 = tolower($5); print} file
find . -name *.xib -exec bash -c f='{}' ; echo \${f%.xib}.strings ;
mysqldump -u <username> -p<password> -h <address> <schema> <table> > <output-file>.sql
git diff HEAD:old_path/main.cpp new_path/main.cpp
awk /^%%(HiRes)?BoundingBox:/{print $1, $2-1, $3-1, $4+2, $5+2;next}{print}
sudo apt-get install putty-tools
subl `bundle show gemname`
printf %.1f $loadMin
grep -iv chevy cars | sort -nk 5 | sed /[0-9][0-9][0-9][0-9][0-9]$/q
awk -F, $2<100 file
path=`cat ~/filepaths/$x`
/usr/bin/dscl /LDAPv3/127.0.0.1 auth $USERNAME $PASSWORD >/dev/null 2>&1
awk BEGIN { FS=OFS="," } { split($3,a,"\\\\\\\\"); print $0, a[2], a[3], a[4] } file
grep -o isDisabled=.
sort -rnk3 myfile | awk -F[. ] !a[$2]++
awk /arg =>/{f=1} f; /bytes =>/{f=0} file
cat ~/test/File01 >> ~/dustbin/File01
awk {print "prefix" $0} file
sudo ln -s /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain
awk BEGIN{FS=OFS=":"} {if (NR==1) {$3 = "XXXX"}; print} input_file
sed -i.bak s/^M$// infile.txt
while ! ftp ...; do sleep 1; done
ls 2>&1 | tee /tmp/ls.txt
alias startSP=cd mydirectory ; redis-server & node myApp.js
sudo find /media/<Pendrive> -name *.jpg -exec rm -f {} ;
New-Alias h Get-History
p=subprocess.Popen(du -sh /tmp/*, shell=True)
nonascii() { LANG=C grep --color=always [^ -~]\+; }
char *token = malloc(50);
httpry -other -args -here | awk {print $7} > outfile.txt
sed -e s/^uid=//;s/).*//;s/(/ /;s/^id:/----/;s/:.*// | column -t
awk BEGIN { FS=OFS="\t" } FNR==NR { a[$1,$2,$4,$5]=$3; next } ($1,$2,$4,$5) in a { $3=a[$1,$2,$4,$5] }1 file1 file2
sed -i -e 1~81 i\TER file
App::uses(CakeLog, Log);
(command1; command2)

generate_filename() { echo ${1}_$(/bin/date --utc +%Y%m%d_%H%M%Z)_$2; }
machine 192.163.3.3 login ftpuser password apple
ct find ... -exec cleartool lsvtree "$CLEARCASE_PN"
awk { filename=$4".log"; if (prev && (filename != prev)) close(prev); print >>filename; prev=filename } ips.log
s1=SELECT flat_view.* FROM flat_view INTO OUTFILE 
find . -type f -name GLOB | xargs UTILITY
foo_parser = subparsers.add_parser(foo, aliases=[f])
command-with-meaningless-return-value || true
read var1
ls | grep -E -v \.(html|js)$
subprocess.call([java, -cp, /home/me/somepath/file.jar, ..., -someflag, somevalue])
~/.zsh/say_hello.zsh
awk $2 { $2 = 1; print } input > output
/address/
perl -plne s/#.*/.txt/;s/,"/,/; file
gawk {x+=gsub("the","it");print} END{print "total changes:"x} file.csv
system(sudo airodump-ng -w sidney wlan0 >/dev/null 2>&1)
(echo -e AAA\nBBB | sed -n 2p)
(echo $string | awk { print $3 })
sed s/;size=[0-9]*;//g
export PATH=/home/michael/ns-allinone-2.34/bin/ns:..
printf %0.2f\n $T
awk seen[$0]++{print|"cat>&2";next}1 file > tmp && mv tmp file
zip -u bigzip.zip file/to/update1 file/to/update2 ...
/home/rm/home-scripts/originals/audicerttest/incoming/TEST040511.txt
tr -d   < infile
!date
who | awk {print $1} | sort | uniq -c | sort -n
perl -I./assmbler/ assembler/asm.pl $1
expr `echo test | sed s/./ + 1/g;s/^/0/`
watch --color -n 1 echo -e '\033[36mHello World\033[0m'
ls -la ~/.[^.]*
[f,o,o] => foo
perl -pi -le s/\s+/ /g file.csv
echo ${ids[@]} | tr   \n | sort -u | tr \n  
bash <(wget -O - https://raw.github.com/aaronhancock/pub/master/bash/readtest.sh)
echo -e #!/bin/sh\n echo "hello world" > abc.sh
mysql -utheuser -pthepassword <Randomsqlfile.sql
sort < $file | uniq -c | awk {print $2 " " $1}
awk {arr[$1]+=$2;} END {for (i in arr) print i, arr[i]} filename
echo $(./run.sh)
find /var/www/sites -type f | xargs sed --in-place s/abc@gmail\.com/mynewemail@elsewhere.com/g
sed -i.bk -e s%\^set wrapper_code=C:\\windows\\drivers\\cache%set wrapper_code=/home/harry/solo/run% Proxy.bat
ftp -p -v -i $HOST < example.script >> a.log
mapfile lines
for((i=0; i<10; i++)); do ./gen > $i.in; sleep 2; done
((java -Xmx9000m -Dtoday_nix=20121128 -cp /usr/lib/hadoop/conf com.paypal.risk.ars.linking.task_fw.BaseRunnableProcess 3>&1 1>&2 2>&3) | tee /dev/tty) > batches_errors.log
mkdir ~/bin
rename s/\s\([^\)]+\)// *.*
perl -pe s;^,|,$|(?<=,),;data_n\/a,;g input.cvs
convert front5.jpg -gravity north -pointsize 40 -fill #ffffff -background none label:Hello World -virtual-pixel transparent -distort Arc 320 -geometry +0+0 -composite front2.jpg
./myscript.sh arg1 arg2 arg3
while(waitpid(-1, NULL, WNOHANG) > 0);
cat /proc/meminfo|grep MemTotal|awk {print $2} >> tst1
MYSCRIPTS./vim-calc_vb.txt)
rename s/sink-// *files
echo -e foo\n-- \nbar | awk /^--/{exit}1
sed s/\([0-9][0-9]\):\([0-9][0-9]\):\([0-9][0-9]\)/PT\1H\2M\3S/
sed s/apple-pie/apple_pie/g file1.txt > file2.txt
sed s/^[E ]*\([0-9]\)/\1/
eval ${install_cmd}
tail --follow=name --retry
rsync ssh --blocking-io user@XX.XXX.XXX.XX:/test/ /test
bundle >/dev/null 2>/dev/null &
awk /<--|-->/{rec=""; f=1} f{rec = rec $0 ORS} /Content-Length:/{ if (f && (rec !~ "REGISTER")) printf "%s",rec; f=0} file
fgrep -r -h LINE_TXT $1
ssh username@serverid command
find /path/to/Main -type f -name *.txt -exec python2.7 ../getDOC.py {} ; -exec sleep 10 ;
sed /^$/d;s/^/^/ B | grep -vf - A
ls -1 | sed -e s/\..*$//
nohup <command> <args> ><filename> 2>&1 &
echo `cat file*.txt` | awk BEGIN {a=0;b=0;} {for (i=1;i<=NF;i++) { if ( i%2 == 0 ) { b+=$i } else { a+=$i } } } END { print a, b }
sed -n /- GEM PATHS:/ { N; s/.* - //p } file
sed -n s/.*marker_\(.*\) = "SymmetryPlane.*/\1/p header.out
echo exec(/bin/sh /usr/local/icinga-1.7.0/videowand/action2.sh 2>&1,$output, $return);
prog2 `prog1 file.txt`
java -jar $CreateSequenceDictionary R=$reference O=output > mlogfile
:exe !cp  c:\Program Files\Vim\vim73\menu.vim d:\bkp_menu-vim_.strftime(%Y-%m-%d_%H-%M)..txt
grep -Po (User ID|Password)=[^;"]* web.config
awk FNR==NR { a[NR]=$0; next } { for (i=FNR+1;i<=NR-1;i++) { split(a[i],b); print $1 "-" b[1], sqrt(($2-b[2])^2 + ($3-b[3])^2 + ($4-b[4])^2) | "column -t" } NR--} file file

set -x
Copy-Item C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\Windows PowerShell\Windows PowerShell.lnk C:\Windows\System32\powershell.lnk
cut -d, -f-4,6-6,8-

C:>test space.avi
(git branch|grep *|cut -c3-)
print  '\'' data_between_two_single_quotes '\'' 
perl -MPOSIX -e print POSIX::strftime("%d/%m/%y", localtime) . "\n"
dialog --yesno Hello, this is my first dialog program 20 60
echo 1 2 3 4 | gawk BEGIN { OFS=" :-( "}; {$1=$1; print $0}
android update sdk --no-ui --all --filter sysimg-15
Process p = new ProcessBuilder(myCommand, myArg).start();
a=(`ps -ef | grep 19999 | grep -v grep`)
if [ -ne $n+1]
find a/ -type f -exec mv {} {}.eml ;
matlab -nodisplay -nojvm -nosplash -r cd ${pathtoscript}; fit('${dataofinterest}');exit;
mv -i */*[13579].jpg temp/.
pkill -f java -jar
awk FNR==NR { a[$1]=$0; next } $1 in a { print a[$1] } table list
./test abc "def ghi"
mysql -u$USER_NAME -p$PASSWORD -eexit
cut -d   --complement -f -2,4-6,10-12 file.txt
ssh -f $user@$machine_name cd $path;shard_path=$(find . -name "shard0"); cd $shard_path; mkdir temp
libdir=X[zero-or-more-chars]/opt/toolchains
(strace -o /tmp/head.trace head; strace -o /tmp/tail.trace tail) < file
df -lH | awk /Volumes/ { sub(/^(\S+\s+){5}/, ""); print }
awk FNR==NR { split($NF,a,":"); b[$1,$2]=a[2]; next } ($1,$2) in b { print $0 ";ASNE=" b[$1,$2] } input1.vcf input2.vcf
xxx >& filename
find -name *.c -exec ctags {} +
find . -type f -print0 | wc -l --files0-from=-
command_1 | command_2
perl -pe s/(.{12})(.{5})(.{5})(.{12})/$1,$2,$3,$4,/ < input-file > output-file
date +%Y_%m_%d_%H_%M_%S
which svn
export PATH=$PATH:/usr/lib/postgresql/9.2/bin
find . -maxdepth 2 -type f
find . -maxdepth 2 -type f -exec ls -l {} ;
echo $get_the_profile_name
perl -lne print; last if $_ > 2**32 < myprimes.txt > myprimes2.txt

awk FNR==NR { split($5,a,":"); split($6,b,":"); c[$1,$2,a[1],b[1]]="REF=" a[2] ";ALT=" b[2] ";"; next } ($1,$2,$4,$5) in c { print $0 ";" c[$1,$2,$4,$5] } input1 input2
awk FNR==NR{a[$1];next}($1 in a) file1.txt file2.txt
cut -d  -f2 --complement file
scp -rv $USERNAME@HOSTNAME:~/backups/ . 2> scp.output
awk -F, {$NF="e";}1 OFS=, file
awk -F: length($1)==4{print $1} /etc/passwd
appcmd list site
{ echo iscale=16; prog1 | prog2; } | sed s/$/*2/ | bc
my_command | sed s/^/\t/ >> my.log
alias cmus=monkeys -n music cmus
awk NR%1000 == 1{ file = "outputfile" i++ } { print > file } ORS= RS=------ test.list
find /tmp ( -name twofirmscoop.so -o -name twofirms.so ) -exec ls -lt {} +
mysqldump -h host -u user --password=mypassword dbname > mysql -h host2 -u user2 --password=mypassword dbname2
cat script.log | sed -n /Name:/s/^.*Name:\([^)]*\)).*$/\1/gp
while getopts m: opt; do
df | tail -n +2 | awk { print $1, $4 }
du -a | cut -d/ -f2 | sort | uniq -c | sort -nr
awk -F, {OFS=","; a=$5; $5=",,,,,",a; print $0} file
sudo java ClassFileName
sed -r -n s/^[0-9]*?[02468] /even/g
awk $2<25 {print; i++} END{print "\nTotal number of students:- "i} file
for file in checkemp.sh *; do sh $file; done
find . -type f | xargs md5sum > md5sums
awk -F[=: -] /^>/{s=$3" "$4" "$5; next} {print s,$0} file
if ! options=$(getopt -u -o : -l along:,blong:,clong: -- $@)
cmd /c FType Microsoft.PowerShellScript.1
awk -F& {for(i=1;i<=NF;i++)if($i~/country/ ||$i~/language/){split($i,a,"=");printf a[2]" "}} your_file
while read size; do dd bs=$size count=1 of=file$(( i++ )); done
pushd \OTHERCOMPUTERNAMEShared_folder

sed -Ee 1s/s([1-4])/L\1/g -e 1s/s([5-8])/W\1/g -e 1y/5678/1234/ -e 1q file
awk {gsub(/\/.*\//,"",$1); print} file
zcat doc.gz | split -l 1000 --filter=gzip > $FILE.gz
echo foo | strace bash -c read -n 100 f
ci -u -mThis is a message file
nice -n 10 { ./configure
awk /^${ipAddress//./\.}\>/ { print $4 } /proc/net/arp
awk {if ($1<prev) {offset++}; print ($1+(offset*10)); prev=$1} input_file
var sys = __meteor_bootstrap__.require(sys);
su --login postgres --command createdb $DBNAME

scp -c blowfish -C user@host:"/media/sdi1/home/data/bob's file" /storage/.../
cat myfile.txt | grep MyKeyword | wc -l
echo first second third etc|cut -d   -f2-
printf ^%s\n {1900..2100} | grep -of - file
Rscript test.R --inputfiles fileA.txt:fileB.txt:fileC.txt etc...
mysql --table -u dbclient -pxxxx GEKONYLOGDB -e select now(),max(time_stamp) from metrics
awk -f script.awk file{,}
sed s/^\([^|]*\)|0*\([^|]*\)/\1|\2/ input
find . -name *.py | xargs sed -i  s/organizations/organisations/g
find . -name *.py | xargs sed -i s/foo/foobar/g
find SomeNotExistingDir ... -exec ls -1 {} +
xmllint --format file.xml
awk -f script.awk
sed /PATH/ s,$,:/usr/java/jdk1.6.0_38/bin, ~/.bash_profile
awk -f script.awk file1 file2
sed s/new[^;]*;//
ls | awk {lc=tolower($0)} lc~/\.avi$/{sub(/...$/,"mpg"); print lc,$0}
sed s/\(172.16.0.30\)\(.*\)\(${share}\)\( \(.*\)\|$\)/172.16.0.35\2\3\4/
ls -la | tr -s   | cut -d  -f 5
./script.sh | tee /dev/fd/2
result=`./myscript.sh $@ 2> /dev/null`

if [ $DEBUG_LEVEL -gt 2 ]
sed /<B1>/,/<\/B3>/d infile
sed -i s/<cto/\n<cto/g;s/<\/cto>/<\/cto>\n/g ${FILE}
awk { printf "%s -- %s\n", strftime("%c",$1), $0 } file
awk { total += $3 - $2 } END { print total } file
|=1;
sort -k 1,1 -k 2,2n file
set stringList = $stringList   $param
awk -f script.awk data.txt
powershell \$env:FOO="bar";dir env:
<infile awk { h[$1]++ } END { for(k in h) print h[k], k }
sed s/\$\$placeholder\$\$/$o/g
shell_exec(bash -c 'diff -bBdH --ignore-all-space <(echo "hi") <(echo "hi1")');
if [ $(uname) = Darwin ]; then
ghc is hashed (/usr/local/bin/ghc)
command | awk $1=="\"result\"" {print $3}
:%s/[{;}]/&r/g
grep @ oldfile.txt > newfile.txt
screen -x $PROCESS -p 0 -X stuff `printf stop\r`
mpstat -u 1 -P ALL | awk NR==4 {print systime(), $4} >> stats.txt
awk NR==FNR{sfx[$1]=$2; next} {print > ("file_" sfx[$NF]+0)} FS=, file2 FS=  file1
awk FNR==NR { a[$1]; next } $2 in a file1 file2
printf %.5e 4.006055058150985e-03
fconfigure stdout -buffering none
(command)
awk -F[ /] $(NF-1)=="Firefox"{print $NF} file.log
find . ! -newer $COMP ! -name $COMP
find / -maxdepth 1 -xdev -type f -exec grep -i stringtofind -l {} ; -exec sed -i /./d {} ;
... | tr -d \r
find /path/to/dir/ -type f -name *.xml ! -type l -exec sed -i s/search_regexp/replacement_string/ {} ;
myarray=(hi 1 2);
echo $qry2)); 275 | grep -o [0-9]*$
... | awk -F, {split( $6, f, "M" )} f[2] > min min=100
eval echo $xxx_$aaa
ls | grep .*\.c
echo ${line%%([0-9]*)}($COUNT)
awk !($2==1 && $3==0){print} file
(sed -e s/^.*$PRECEDING//I <<< $content)
/usr/bin/time -v -o time.log java RandomTest
export _JAVA_OPTIONS=-Dhttp.proxyHost=my-proxy-server -Dhttp.proxyPort=1080 -DsocksProxyHost=my-socks-server
awk -v FS=\t -v OFS=, {$1=$1; for(i=1; i<=NF; i++) if($i ~ /,/) $i = "\"" $i "\"" } 1

awk NR==1 { print; next } { print $0, ($1 == a && $2 == b) ? "equal" : "not_equal"; a = $1; b = $3 } file | column -t
sed -i /\.$hostTLD\/[0-9]\{4\}\/[0-9]\{2\}/d filename
sed 2s/^/# /; 3,$s/"\([^,]*\),\([^,]*\)"/\1.\2/g file
setup.sh -localsource PATH one two three
wget -q -r -l 5 -O - http://somesite.com/ | grep -E -o \b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b
perl -i.backup -pe s{ ( \b assets_version: \s+ ) (\d+) $ }{ $1 . ( 1 + $2 ) }xmse; your.yml
tail -f access_log | grep --line-buffered 127.0.0.1 | grep -v .css
find . -maxdepth 1 -xdev -type f -exec sed -i /teststring/Id {} ;
TAR -zcvf ${BACKUPDIR}/${BFILE} ${DIRS}
find . -name *.svn -print0 | xargs -0 -I{} rm '{}'
php -c /directory/php.ini phpscript.php
sed -e s/{$date:\([0-9]*\)}/Date\(\1\)/g file
awk -F /  $1 == s {print $3} s=$log schedlist
sort -k 1,1 -s myfile
find /path/to/base/dir -type d -ctime +10 -exec rm -rf {} ;
echo Mary had a "little" lamb | awk { gsub(/"/, "&&") } 1
if [ $what == Y -o $what == y ]
jruby -S rake db:migrate 2>&1 | less
WGET -tries=1 -T 4 http://www.my.url/my/script.php
chsh -s /usr/local/the_script theuser
zip -t $ZIPFILE
sc queryex type= service state= all | find NATION
if ! `curl -i -s http://www.google.com|grep -q 302` ; then echo 302 is missed ; fi
sed -n /<div class="LoginOuterCssClass" id="ctl07">/{:a;N;/<\/div>/!ba;N;s/.*\n//};p file.html
{@:3})
echo input | awk {print $1"string"}
convert dragon.gif[64x64] read_dragon.gif
JAVA_HOME=/usr/java/jdk1.7.0_05/
sockstat | awk {print $2 "@" $3} | grep -v ^PROCESS@PID | sort | uniq -c | awk {print $1}
find $CATALOG -size +$SIZE -exec ls -1 {} +
(inotifywait --format %f -e create /var/www/media2net/torrent)
find . -newermt last Thursday
(...)
command longarg1 longarg2 longarg3 | command2 !
for i in *.html *.htm *.php *.txt; do sed s%\(http://www\.\)\(MyDomain\)\(\.com\)%\1OtherDomain\3/\2%g $i > tmp && mv -i tmp $i; done
sed s/^\("[^"]*server[^"]*"\\1\\\)".*"$/\1"tbone"/
find . -type d -mtime -0 -print0 | xargs -0 mv -t /path/to/target-dir
grep -iP version=0x(?!26)\d\d my.log
printf %s  $(seq 9) | gawk END{ print gensub(/[0-9]/,"","5",gensub(/[0-9]/,"","5")) }
grep string file >copyFile
pg_dump --host localhost --port 5432 --username postgres --role postgres --format plain --file complete_path_file --table schma_name."table_name" database_name
ssh user@server simulation/script &
awk -F, NR==FNR{a[$1$2]=$3;next}{$3=a[$1$2];}1 OFS=, file1 file2
for i in folder1/*.pdb; do cat $i >> folder2/$(basename $i); done
alias abc=echo The quick brown fox jumps over the lazy dog.
ps -ef | grep your_process | awk {print $2} | xargs kill
sed -n /start_pattern/{:a;N;/end_pattern/!ba;N;s/.*\n//};p file
dirname -- $0
grep -Po (?<="host": ")[^"]* myjsonFile
LC_ALL=C fgrep -A 5 -B 5 db_pd.Clients eightygigsfile.sql
sed -i.bk :a;$!{N;ba}; s/#undef LZZ_INLINE\n#ifdef LZZ_ENABLE_INLINE\n\(#include [^\n]*\)\n#endif/\1/g input.file
for i in /path/to/files/* ; do if grep -q AAAA $i ; then sed -i s/BBBB/CCCC/g $i ; else sed -i s/DDDD/EEEE/g $i ; fi ; done
ORACLE_HOME=Oracle1.com:1521/opt/oracle/oracle11g/product/11.2.0/bin;
gnome-screensaver-command -l
sed -i /?Invalid command./d $5
rm ./--1355509766.jpg
ps -eo pid,etime,command | grep PID | grep -v grep | awk {print $2} | awk -F : { printf("%.2f\n", $1*60+$2+($3/60)); }
wget http://www.data.gv.at/wp-content/uploads/2012/10/OGD-Metadaten_2_1_2012_10.pdf
echo https://secure.XYZ.ab.mydomain.com | sed -e s+https://[^/]*\.mydomain.com+https://secure.future.qa.mydomain.com+
tar -cvzf test.tar.gz -C /home/path test
drwxrwxr-x 2 root root 4096 Dec 11 10:13 /usr/local/orientdb/log
sudo apt-get install pure-ftpd
awk NF>1 { for(i=2;i<=NF;i+=2) if ($i>0.05) next }1 File_1.txt
matlab -r test(hi)
grep /dev/sr0 /etc/mtab | cut -d  -f2
echo $@ | sed s/ /,/g | cut -d , -f2-
ls [[:lower:]]*
sed -e /^\s*<key>CHANNEL_NAME<\/key>$/{n;s/^\(\s*<string>\).\+\(<\/string>\)$/\1test\2/} Info.plist > test.plist
awk BEGIN{FS=OFS="\""}{for(i=1;i<=NF;i++)if($i~/[0-9\.]*/)gsub("\\.",",",$i)}1 file
echo $DIR
perl -pi.bak -e s|(http://)|\n$1|g C:tempjavaurls.txt
echo ${data} | sed s/week[^;]*;//
osascript -e do shell script "/path/to/script args" with administrator privileges
sed -e 1s/^.// input_file > output_file
curl -X POST -A Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:12.0) Gecko/20100101 Firefox/12.0 -e http://dev.example.com/yeshello/wp-admin/install.php?step=2 -H Content-Type:application/x-www-form-urlencoded -H Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 -H Accept-Encoding:gzip, deflate --data ?step=2&weblog_title=yeshello&user_name=admin&admin_password=admin&admin_password2=admin&admin_email=mathias%40example.com&Submit=Install+WordPress http://dev.example.com/yeshello/wp-admin/install.php?step=2&weblog_title=yeshello&user_name=admin&admin_password=admin&admin_password2=admin&admin_email=mathias@example.com&Submit=Install+WordPress
HOME}
chmod 755 $(<file.txt)
echo $TERM
read -p prompt
echo python path/to/somescript $1 | at `python -c import sys; hour,minute=map(int,max(sys.argv[1:]).split(':')); minute += 1; hour, minute = [(hour,minute), ((hour+1)%24,(minute+2)%60)][minute>=60]; print '%d:%02d'%(hour, minute) $minute $curr`
(ls -l | awk -v line=$curLineNumber NR == line { print $NF }
awk /<?php/{f=1} /?>/&&f{print;f=0} f file
sed -n s/.*<sometag param='\([^']*\)'>.*/\1/p
head -c 4 /dev/urandom | xxd -p
if [ $os = GNU/Linux ]
rename s/-[0-9]+// *.tedx
(awk \$2 == "$module" {print \$1} /proc/devices)
killall sshd
awk BEGIN { FS=OFS="|" } { $3=1000 + NR }1 file
gunzip -c openssl-fips-2.0.1.tar.gz | tar xf ­-
sed s/^[0-9]* ps//g file1
svn log --limit 1 | sed -n -e s/^\(r[0-9]\+\).*/\1/p
cd Windows XP IE6
xmessage Do you want to run the backup script? -buttons yes,no
if [[ $thisloadavg < 0.01 ]]; then
find $1 -type f -print0 | xargs -0 cp -t $HOME/TestDirectory
awk {a[NR]=$0}/#MyUniqueString/{a[NR-1]=a[NR-1]"domain4.com"}END{for(i=1;i<=NR;i++)print a[i]} configFile
MAVEN_REPO=C:/Users/James/.m2/repository
sed -i s/qsubFile="someOtherFile.sh"/qsubFile="submitJob.sh"/g write.sh
print Hello.
find . -type f -printf %f\n | grep --color -R -f - .
sudo $(which npm) install -g socket.io
for /r C:folder %%a in (*.csv) do type %%a >>summary2.txt && echo. >>summary2.txt
{AWK} !/^ / && !/^-/ && !/^＜/ && !/^$/ {printf "%s,,N,N,N,,,,\n", $1} ~/ozserver.txt
if [ ! -e $HSQLDB_JAR ]; then echo Jar not found! ; exit 1 ; fi
cat textfile > /dev/tcp/HOST/PORT
join -t, in1 in2
sed /^\s*$/d file
echo ${PATH} | sed s/\//\\//g
touch a b c
for pat in $(cat pattern.txt); do grep -i -m 5 $pat file.txt; done > out.txt
find -exec command {} ;
[ -x -a /sbin/ifconfig ] || exit 1
cat `cat logfilenames.txt`
alias rm=rm -i
awk {if($0~/./){a[$0]++;print $0"["a[$0]"]";} else print} file

echo \ | sed s/\\/replace/
awk /fin\(fname\)/ {sub("fname", "fname.c_str()", $0)} {print} input_filename
find -name MY_NAME* -type d -maxdepth 1
sed -e s/.*href="\([^"]*\)".*>\([^<]*\)<.*/link:\1 name:\2/ < data
sed s/\([0-9]*-[0-9]*-[0-9]*\)\([ \t]*\)\(.*\)/\3\2\1/ input
echo blabla a13724bla-bla244 35% | sed s/.*[ \t][ \t]*\([0-9][0-9]*\)%.*/\1/
sed s:[ \t]*${DOC_KEY}[ \t]*=.*:${DOC_KEY} = ${DOC_VALUE}: profile
awk < input_file /^>/ {print ""; print; next} {printf "%s", $0} END {print ""}
./a.out 1 * 2
awk { orig=$NF ; if (gsub("/","",$NF) == 2) { print orig  } } INPUTFILE
awk -F' {c[$2]++} END{for (w in c) print w,c[w]} file
sed y/ae/ea/
VERSION=`grep ^Stable tag: readme.md | tr -d \015 | awk -F  {print $NF}`
unset PROMPT_COMMAND; PS1=\w> 
sed -i /<\/html>/q file
screen -L bash -c (while :; do tail ~/screenlog.0 | grep -o "[0-9]*%" | tail -1; done | zenity --progress --auto-close &); 7z a "output.zip" "/path/to/input"
alias subl=$PATH_TO_SUBL
`return`
awk -F; {x=$1;sub(/\\\\[^\\]+\\[^\\]+\\/,"",x);gsub(/\\/,"/",x);print $0"/"x} file
var= ( $(echo $LINE | cut -d, --output-delimiter=  -f4-6) )
xidel file.html -e //title 2> /dev/null | cowsay
curl --insecure --progress-bar -v -i -o temp2.txt --upload-file temp.txt https://api-content.dropbox.com/1/files_put/dropbox/attachments/temp.txt?oauth_consumer_key=aaaaaaaaaa&oauth_token=aaaaaaaaa&oauth_signature_method=PLAINTEXT&oauth_signature=aaaaaaaaa%26aaaaaaaaaa
for i in `ls <dir1>/*.doc | sed s/\.doc$//`; do ls <dir2>/$i-1.txt; done 2> /dev/null
if [ $? -eq 0 ]
find /<path>/hp -iname *.ppd -print0 | xargs -0 grep -h \*ModelName\:
find /Users/KanZ/Desktop/Project/Test/ -type f -name M*.jpg -exec convert {} -flip {} ;
1
echo mypassword | sudo -S vim /etc/resolv.conf
awk -F= !a[$1]++ first.properties second.properties
printf ip: %s\n $(ifconfig | grep inet | sed -n 5p | tr -s   | cut -d   -f2)
find mydir -type f -exec curl -u xxx:psw --ftp-create-dirs -T {} ftp://192.168.1.158/public/demon_test/{} ;
find . -type f|xargs perl -pi -e s/windows/android/g
cmd);
awk { print toupper($0) } <<< your string
export PATH=/Users/repos/ringojs/bin/:$PATH
perl -pi -e s,\bLATIN1\b,UTF-8,g if $. <= 30 thefile
(export MYENVVAR=myfolder; echo $MYENVVAR && ls $MYENVVAR)
git remote set-url origin https://new.url.here
zip $i.zip $i
Active code page: 850
/usr/bin/man -P cat somecommand | ul
mkdir ${1}
awk -F [][] {print $1,$2} 11
echo c:\path1\abc\dir 2\file.txt | sed s/\\abc//
nmap -sP 192.168.0.0-255
awk -v OFS=\t { sub(/./, "& ", $5) }1 file
system(cd /home/faizan/test/cache ; for i in *; do if [ -d "\$i" ]; then echo \$i; fi; done);
export JAVA_HOME=/path/to/java/home
./<script>
awk -f script.awk file
sed /^-----THIS STUFF IS USELESS-----$/,$d file
nohup ./startEventProcessor &
sed -e s/AMOUNTTOBEREPLACED/"${sum}"/g
result=`awk /<Main>/ { f=1 } f && /Amt/ { split($0,a,/[<>]/); s+=a[3] } /<\/Main>/ { f=0 } END {print  s } MyFile.xml`
awk {a[$1" "$2]=a[$1" "$2]" "$3" "$4;}END{for(i in a)print i,a[i]} your_file
awk { sub(/100$/, "2000", $3) }1 file
wget --convert-links URL
cut -d , -f 2 file.txt
ps -aux | xxd -g 1
awk NF==1 { print $0, "NULL"; next }1 file
ant -verbose -debug ...
exec(C:\xampp\upload.exe backup /command "option confirm off" "put C:\big boy\Documents\dev notes\" "exit");
(ps -ef | grep myproc | grep -v grep))
awk FNR==NR { a[$NF]; next } !($NF in a) other main
cut -f4 -d/
Use RTRIM(LTRIM(ColumnName)) in your -q Query Select command.
echo 10.11.12.13|perl -MRegexp::Common=net -nE $_=~/^$RE{net}{IPv4}{-keep}$/ and say $1
ls | head -1
echo NDK_HOME=/opt/android-ndk-r8 export NDK_HOME >> ~/.bashrc
for dir in `ls --color=never -1 `; do
git reset
sed /$START/,/$END/ { /$END/! d; }
find . -type f|xargs perl -pi -e s/one\/two\/three/shopping\/shop\/ipad/g
awk -F, !x[toupper($1)]++ test.csv
xidel http://www.cpubenchmark.net/cpu_list.php -e //table[@id="cputable"]//tr/concat(td[1], " - Score: ", td[2], " - Rank: ", td[3])
(grep -C 2 CFBundleVersion $file | grep -o [0-9]\{3\})
sed -i -e /Version/s/$/-$VAR/ filename
iconv -f utf-16be -t utf-8 [input-file]
cat file | while read a; do date --date=$(echo $a | tr -d %) +%x %a; done
sudo sed s/GRUB_TIMEOUT=10/GRUB_TIMEOUT=3/ /etc/default/grub >/etc/default/grub
egrep ^(([0-9])\2{2}([a-z])\3{2})+$ file
chown app_36.app_36 prefs.xml
echo -e $(./tpb.sh)
dos2unix <your_script>
system(scp -o StrictHostKeyChecking=no ~/dump.txt host@ipaddress:~);
ls -td $(grep -r abcdefg . | grep commit_id | dirname)
sed -n s/.*AdulterateFood\(.*\)DangerousFood.*/\1/p source_code
nohup php /home/cron.php >/dev/null 2>&1 &
expect eof
sed /green/s/.*// input
sed -E s/^([^/][a-zA-Z/_]+\.h)/\/abspaths\/\1/;s/ ([^/][a-zA-Z/_]+\.h)/ \/abspaths\/\1/g file
ARGS=( ${(z)test_str} )
INSTALL=y sh
foo tail -f bar > >(tee baz) &
vi `ls db/migrate/*.rb | tail -n 1`
print CHECKING:  . shell_exec(echo {$output} > /tmp/tested.xml);
*.*.*.0|*.*.*.1|*.*.*.2|...)
awk /^[0-9]{1,10} [0-9]{1,4}/{l=$1+$2; "date --date=@"$1|getline d1; "date --date=@"l|getline d2;print d1" - "d2;next;}1 file
next = posix_kill((long)$pid3, 10);
while read -r auser apass;
mvn clean install -Dtest=MyTestNGTest
do shell script open -a Safari  & quoted form of theURL
perl -p -i -es/\.$/ ./ filename
grep -r --exclude-dir=.git;.svn string to search <directory>
if [[ $mkv =~ E([0-9]{2}) ]] ; then echo FOUND ${BASH_REMATCH[1]} ; fi
chmod u+x name_of_script
sed -r s/<script id="live-reload".*?<\/script>/test/g file
curl -F fileUpload=@test.html https://www.filepicker.io/api/store/S3?key={{apikey}}&filename=myCoolFile.html
awk -F, {print $3 "," $5} inputfile.csv
sort -nrk 2,2
export PATH=`echo ${PATH} | awk -v RS=: -v ORS=: /SDE/ {next} {print}` | sed s/:*$//
/home/larix/.bashrc
sed -f script.sed file
awk { print $5, $6 } text
for file in *.zip?*; do mv $file ${file%%\?*}; done
awk -F\t ...
sed :l s/\(([^ )]*\)[ ]/\1_/;tl input
eval ./secondexecutable $tmp -o outfile.txt
awk FNR == NR { h[$1] = 1; next } !h[$1] file2 file1
grep [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:0[0-5] logfile
echo i m sure he doesn t test test don t. | sed s/ \([mt]\)[[:>:]]/\1/g
sqlplus -S $username/password@destination @/path/copysetup/insert.sql $ENV $RELEASE_ID
sed -i /kernel/{/audit=1/!s/$/ audit=1/} /etc/grub.conf
find . -type f -name *_peaks.bed ! -path ./tmp/* ! -path ./scripts/*
join <(sort temp) <(sort temp2)
sed s/æ/ae/g;s/ø/oe/g;s/å/aa/g;s/Æ/Ae/g;s/Ø/Oe/g;s/Å/Aa/g
git rev-parse HEAD
awk FNR==NR { a[$1]; next } !($1 in a) file2 file1
strings -a -t x filename | grep foobar
ls -ArtL | tail -n 1
nohup scrapy crawl first &
safecmd=`echo $nascmd | sed s/\$/\\$/g`
pygmentize $var 2> $tmpfile
ps -ef | grep tomcat-5.5-26-rum | grep java | awk  { print $2 } 
ssh -T $server -l username /export/home/path/to/script.sh $1  $2 1>traf1.txt 2>/dev/null
VAR=bar ./script.sh
awk -v class=${CLASS} $0 ~ class {print} data-new.csv >> $FACULTY.csv
info gettext
touch filename_`/bin/date +%Y%m%d%H%M%S`.txt
envsubst < source.txt > destination.txt
python python_script.py filename
unzip -q /path/to/zipfile $(cat thetxtfile)
(/usr/local/bin/eth0tx.sh)
test.close()
perl -00 -ne $n=tr/\n/\n/; if ($n>$m) {$m=$n; $max=$_}; END {print $max} file
export PATH=$PATH:...
awk { print strftime("%Y-%m-%d %H:%M:%S"), $0; } /dev/ttyUSB0 > /home/pi/daily_logs/ttyUSB0 &
sed -e s/^/"/ -e s/$/"/ file
unsetopt correct_all
tr A-Za-z a-zA-Z
rsync -avz B/* A
grep -v -f <(awk {print $1} file_b) file_a > file_c
awk -f script.awk file
... | awk -F \t !a[$1,$2]++ && !a[$2,$1]++
printf(3+3\n);
bind "\C-]":"\C-e\C-u pbcopy <<"EOF"\n\C-y\nEOF\n"
>file
xdotool key k
unsetopt correct_all
find . -type f -name *.xml -exec perl -MFile::Basename -0777pi.bak -e s#(.*)\n#"<DOC>\n <DOCNO> ".basename($ARGV,".xml")." </DOCNO>\n <TEXT> ".$1." </TEXT>\n</DOC>\n"#es {} ;
URxvt.font: xft:Courier New
curl http://www.google.com/images/srpr/logo3w.png | curl --data-binary - --request POST http://www.somesite.com
du -h | awk -F [KM] { print $1 }
awk NR%100==1 { ++i } { print $0 (NR%100==0 ? "\nFFFFFF" : "") > "outputfile" i ".txt" } file.txt
sed -e s/00*/L/g regex.txt
perl -lne $_=~m/^[^\s]*\s([^\/\>]*)/g;print $1 your_file
echo fish duck     cheese            bacon | wc -w
sed :l;N;$!tl;N;s!<directory number=133 name=var1>[ ]*\n<myfile name=test1 />[ ]*\n</directory>!<directory numbe=133 myfile=test1 />! input
for test in path/test*; do $test | ./server | ${test/test/validate}; done
grep -xvFf whitelist testfile
set array = (`find . -type d -perm /g+x,o+x -name *_xyz`)
sed -e s/INSERT/UPDATE/ -e w output.txt input.txt

[[ :${!1}: != *:$2: ]]
kill [pid]
echo foo | file -
PROMPT_COMMAND=history -a
HISTTIMEFORMAT=%F %T  history | grep -v ^# > ~/path/to/output
df | awk /\//{print $6 "\t" $4}
csplit -n5 -z file /^\./ {*}
sed -e $ {x;q} -e /@@/ !{H;d} -e /@@/ x
sed s/T[^,]*//g file
vim -u /path/to/your/vimrc
test -e /var/motd/$LOGNAME && cat /var/motd/$LOGNAME
cat MASTER file >> file.tmp
net use X: \serverdirectory
grep ^HELLO[^a-zA-Z] your_file
awk /Transformation/ && $4=="Filter" && match($5, /^fltr_[A-Za-z_]+/) { print $4,$5 } filename
env -i PATH=$PATH TERM=$TERM LANG=$LANG myscript.sh
sed s/val1/hello/ file
http://linuxcommand.org/man_pages/dos2unix1.html
perl -pe s,^\[([^]]+)\]\.\[([^]]+)\],$1=$2, toto
(echo $String2 + $String8|bc)
find ./ -type d -print | sed -e s;[^/]*/;|____;g;s;____|; |;g
(ls -lah home/clucky/MinecraftServers/.backups/Backup-$timedate.tar.gz | awk { print $5})
for i in *; do [ $i -lt 1011 ] && rm -fr $i; done
if [ $curvol !=  ]
sed :a;s/^\([0-9]*\):\([^:]*\):/\1:\2\1/;ta;s/:// input
bash -c ./script.sh
ARG=`cat /tmp/tempfile`
sed /\/\*.*\*\// d; /\/\*/,/\*\// d file
awk { gsub(/^[ \t]+|[ \t]+$/,"") } !a[$0]++ file2 file1
sed -n /^IA\/\([NM][0-9][0-9]*\) \([01]\)$/ s//\1;\2/p test.txt
awk NR==1 { next } FNR==NR { a[$1]=$2; next } $1 in a { $1=a[$1] }1 TABLE OLD_FILE
perl -pi -we s/{/"{ function(" . $i++ . ")"/ge *.h *.c
perl -0777 -wpe s/\n //g MANIFEST.MF
sed -i s/;session.save_path.*/session.save_path = unix:/tmp/memcached.sock/ /etc/php5/fpm/php.ini
touch -r A B
gpg -r recip --encrypt-files $(ls $source/*.gz | egrep -v alabama|somename)
if [ $dir = /local/users/drupadm/htdocs/drupal/drupal/sites/all ]
alias printMessage=ruby /path/to/file.rb
FILENAME == ARGV[1]
set xfer:log-file /path/to/your/file.log
rsync -r --exclude-from exclude_list.txt src dst
pythonscript.py --in_delimiter $\t --in_file input.txt
unzip -q ${ZIP_FILE} -x [!e]?* ?[!ns]* ??[!_]*
ssh myuser@server perl -s - -some -arguments </path/to/my/script
for file in $(eval echo $search)

dpkg -l csh
nice -n 15 <command> <argument1> <argument2> …
echo 11:46:24.851239 IP (tos 0x0, ttl 128, id 11289, offset 0, flags [none], proto UDP (17), length 229) | grep -o proto [^,]\+
awk !/^[-=]/ && NR!=1{str=str","$1}END{print substr(str,2)}
find ./ -type d -print | awk -F / {for (i=1; i<=NF-2; i++){printf "| "} print "|____"$NF}
sed s/require_once('/require_once(\$_SERVER['DOCUMENT_ROOT']\/'/g
(ssh -V)
ln -s `python -c import os.path; print os.path.relpath($target,$name)` $name
sudo apt-get install ia32-libs
awk -F| NR==FNR{a[$0];next;}$1 in a fileA fileB
seq 786 | sed s@^@http://www.blabla.bla/forum-detail/?ft=72260\&fid=34\&\&pgr=@
ini_set(zlib.output_compression, Off);
*/10 * * * * bash -l /home/usr/MeetCal-bot/run-bot.sh
awful.key({ modkey, Shift }, e, function () awful.util.spawn(sh /home/USERNAME/myscript.sh) end),
sed -n 1,/^\s*$/p file
chown -R www-data.www-data /location of the folder....
find . -name *.java | xargs sed -i s/foo/bar/g
awk -F= { sub(/,.*/,"",$2) } /^Customer ID/ { r = $2 OFS $3 } /^Inventory ID/ { print "\"" r, $2, $3 "\"" } OFS=", " inventory.txt
grep --color a <<< a
awk -F, NR==FNR{a[$0];next} $1 in a file2.csv file1.csv
println [bash, -c, echo `date`].execute().text
`commands.push(sed -i '' '119 s/\(.\)username.,$/\1 + dbinfo.dbUser + \1,/g' ' + tmpAppDir + /drupal/sites/default/settings.php');`
awk NR > 1 && NF == 6 { if ($6 == "+") x = $4; else x = $5; print $1, $2, $3, x; }
Process p = Runtime.getRuntime().exec(/root/script.cmd  + myArgument );
alias ls=ls -GpF
export PATH=/usr/local/bin:$PATH
for FOO in *; do mv $FOO `echo $FOO | sed 's/\([^-]*\) - \([0-9]\)\([0-9][0-9]\)\(.*\)/\1 - S0\2E\3\4/g'` ; done
alias ascii=cat ~/ascii
shell(paste(start, excel, route))
M-x auto-fill-mode RET
updatedb --localpaths=~/Library
hexdump -v -e /1 "%02x " $FILE
fmt -d  <<< $Do not.\nDouble-space.
/home/admin/script2.sh $ARG1 $ARG2 $ARG3
su -c source /system/etc/bash/aliases && "$@"
grep -rn --include=*.hpp -- -= .
curl -L example.com/my/script | bash -s -p mysql
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin
wget http://chromium-browser-source.commondatastorage.googleapis.com/chromium.r176602.tgz
awk NR==10 file
X=ABC123456 ; echo ABC123456AA | sed -e s,\(${X}\).*,\1ZZP,
(((5&3)==1)) && echo YES || echo NO
(curl -s http://www.kernel.org/ -o /tmp/kernel && cat /tmp/kernel | grep -A1 mainline | tail -1 | cut -d > -f3 | cut -d < -f1)

for /f eol=: delims= %%i in (type lwrcase.log) do call LowerCase %%i
android.permission.INJECT_EVENTS
sed -r /^[0-9a-f]{40}\b/!d;:a;/\ncommitter-time\b/bb;$!{N;ba};:b;s/\s+.*(\s.*)/\1/ file
tcpdump -Xvv -n -i eth0 -c 300 > captureFile.txt 2>/dev/null
sudo apt-get update && apt-get install bison*
if (check_cpu_usage() > 50%) sleep(1second);

PITEMID_CHILD controlPanel = ILCloneFirst(iidControlPanel);
rename s/(\d+)/sprintf("%03d", $1)/e *.pdf
bash: !: event not found
x = `... s ...`;
bash -c echo $BASH_EXECUTION_STRING
sed -n /\<abc\>/,/\<efg\>/{/\<abc\>/{h;d};H;/\<efg\>/{x;p}} file
sudo -u $SUDO_USER ./exec_as_normal_user.sh
awk -F| /^r/{a=$1;b=$2;c=substr($3,0,20)}/^   M/{gsub(/   M /," ");print a"|"b"|"c"|"$0} your_file
paste -d, <(awk -F, {print $2} file) <(awk -F, {print $3} file)
send cd $(printf '%q' $2)\r
sed s/,\+$// file
sed 3 s/$/f/ < yourFile
ARGUMENT=`echo $ARGUMENT | sed s/\^\(-D.*\)=\(.*\)/\1="\2"/g`
head -1 filename | cut -c7-16 > newfile
sort -k3,3g file
find ./ -type f -regex .*\.php -exec sed -i -e 1{/^[[:blank:]]*$/d;} {} ;
grep -hr name:foo * > output.txt
chmod -R 770 dir_path
tr XYZ , <input_file | tr , 
find src/dir/ -name *.txt -exec mv {} target/dir/ ;
sed -r s/(.*)(\?cache_version=)([0-9]+)(.*)/echo \1\2$((\3+1))\4/ge file
awk -F/|, {b=mktime($5" "$4" "$3" 00 00 00 00");a=(systime()-b)/(365*24*60*60);a=a==int(a)?a:int(a)+1;print $0","a} file
sed /File/,/;/!d;/;/q file
rsync -rtvz --rsync-path=sudo -u user2 rsync /path/to/local/folder server1:/path/to/remote/folder
3,0,20)}
pbpaste | node
if [ $(ps -ef|grep Djava.security.auth.login.config|grep -v grep|wc -l) != 0 ]
awk FNR == NR { tot=NR; next } { printf( "%s %.4f\n", $0, FNR/tot) } file file
sed -i /\bexample\b/d myfile
/usr/libexec/PlistBuddy -c set :PreferenceSpecifiers:0:DefaultValue '$NEW_DEFAULT_VALUE' $PLIST_PATH
sed -e s/<h1>/<h2>/g -e s_</h1>_</h2>_g
tail -f /var/somelog | while read line; do echo $line | grep some test and p l a c e h o l d e r | cut -f 3,4,14 -d  ; done
head -c 8 <file>
echo Dave,ws245f,09/12/1982|awk -F/|, {b=mktime($5" "$4" "$3" 00 00 00 00");a=(systime()-b)/(365*24*60*60);a+=a<0?-0.5:0.5;a=int(a);print $0","a}
EDITOR=sed -i s/foo/bar/g virsh net-edit default
Process.Start(cmd.exe, @/c C:\Program Files (x86)\Microsoft Office\Office14\OUTLOOK.EXE /c ipm.note);
awk {print $1}
ping -c 3 google.com | grep 0 received && touch host_is_down.txt || touch host_is_up.txt
echo {running_device,[test@01,test@02]}, | tr -cd @ | wc -c
for i in `find . -type f ( -name *.c -o -name *.h )`; do sed -i s/\r// $i ; done
perl -pe s|&lt;strong&gt;(.*?)&lt;/strong&gt;|\\textbf{\1}|g
<a href=http://www.domain.com/>Link Title</a>
find . -name *.mk | xargs grep .dat
tar -rvfEi /dev/rmt/0 <file>
RESULT=`do_sth 0` || exit $?
myuser=$(openssl aes-256-cbc -in encrypted -pass file:../password.txt -d | awk {print $1})
sudo unzip thefile.zip -d /opt/target_dir
W32i APP - 8.0.0.xxxxx shp 6SFE25~1.EXE
find ${dirs[@]/#//path/with spaces/} -name *.gz -print0 | xargs -0 mycmd
echo *
awk NR==1 || NR==2 || !/^#/ file.txt
MODE COMX:9600,N,8,1,P
sed -i /$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | cut -d' ' -f1)[ \t]/ s/$/ AWHOST/  hosts
[ ! -f INPUT ] && while read while read Name Surname Telephone DOB
cp /localdir/**/*[0-9] /tftpboot
wget.exe http://example.com/file0%%24.html
alias proxyget=read userid?"Userid: "; read passwd?"Password: "; read url?"URL: "; read local?"Local: "; curl -x 1.2.3.4:8080 -U $userid:$passwd  $url -o $local;
cat *txt
echo $x_$y
sed -r $!N;s|(&lt;)(strong&gt;)([^\n]*)\n\s*\1/\2|//textbf{\3}|;P;D file

while true; do date --rfc-3339=ns; done
sh -c $ENV a_command
grep DISPLAY ~/.??*
./testscript.sh -p somestring -i /home/android/test/abc.xml -o /home/android/outputfolder
awk { for (i=2;i<=NF;i++) { total+=$i }; print $1,total; total=0 } file
sed -i s/$Customer:$HDB:[0-9]*/$Customer:$HDB:$Price2/g CustomerDB.txt
wget.exe http://www.imdb.com/search/title?genres=action&sort=alpha,asc&start=51&title_type=feature
. $HOME/.bashrc
echo $(echo $(basename $HOME))
perl -lne unless(/\|$/){$line=$line.$_}else{print $line." $_";undef $line} your_file
sed -i s/$(echo some pattern)/replacement/g file.txt
awk NR>1{$0=substr($1,0,1)$2" "$3}1 file
sort -o $INPUT -n -t , -k4.7,4 -k4.4,4.5 -k4.1,4.2 $INPUT
argv[1]
find . -name *.java -print0 | xargs -0 grep -Lz regular_expression
@C:python32python.exe %*
sed -n /<tr>/,/<\/tr>/p file
python myscript.py | wc -l
wget http://download/url/file 2>/dev/null || curl -O http://download/url/file
CREATE DATABASE `nice-day`
eval $COMMAND >> /tmp/`hostname`_hc.txt
awk -F : -v OFS=: { cmds} file
cut -d, -f1-6
perl -ne m/asp\.net\s+(.{0,10})/i && print "$1\n" infile
sort -n FILENAME | uniq

sed s@/lib\(64\)\?\(32\)\?/ld@/tools&@g abc.txt
tar cvzf filea fileb filec
awk NR==FNR{a[$0];next} ($1 in a) && ($2 in a) list.txt test.txt

sed -i s/\\right\([^])}>|a]\)/\\rightarrow\1/g
chmod g+s file
int result = system(/Applications/MyApp.app/myscript.sh argument1 argument2);
^[A-Za-z]+[ t][A-Za-z]+$
C:MinGWmsys1.0bin
echo This++++this+++is+not++done | awk {gsub(/\++/," ");}1
awk {for(i=1;i<11;i++)$i="";print }
sudo security delete-generic-password -l ssid /Library/Keychains/System.keychain
0%2+1}1
git branch -a
sed -n s#<title>Google-Ergebnis für \(http://.*\)</title>#\1#p imgres.html
mysql> select 1;-- test select
cat ips | xargs -n1 ping -c 2
if: Expression Syntax
alias up cd `yes ".." | head -n\!* | tr "\n" "\/"`
C:MinGWmsys1.0> binbash -c times;/c/MinGW/msys/1.0/bin/bash
sed s/cat/dog/g
33; gsub(",, x); if(x && FNR!=1){print x;}}
awk -vuserinput=$userinput -F: $1 < userinput {}
@(a, b, c) -join :
find /path/to/your/files -name *.html.tmp -exec sh -c mv -i "{}" "$(dirname "{}")/$(basename "{}" .tmp)" ;
session_write_close();
awk -F : -v OFS=: -v cust=$cust -v cust=$cust2 -v hdb=$hdb tolower($1)==cust && tolower($2)==hdb {$1=cust2;}1
awk -v RS=--\n -v ORS=--\n !h[$4]++ infile
dos2unix tmp6.txt
awk {old=$0;new=/path/pathsub/;system("mv \""old"\" "new)} your_file_with_file_list
| awk  { if (($1 > 10) && ($2 == "MB/s")) { printf("SPEED IS TOO DAMN HIGH - %s\n", $0); } elif (($1 > 5) && ($2 == "MB/s")) { printf("PASS - %s\n", $0); } else { printf ("FAIL - %s\n", $0); } } 
sudo java -jar ./myjar.jar name_%1$tY%1$tm.csv ./sql/blablab.sql someArgument
console.log(foo.stdout);
grep -ioP ttl \d+ file|awk {a[$0]++}END{for(x in a)print x" - "a[x]" times"}
date -d $date $time +%s
PROMPT_COMMAND=[[ $PWD == "/foo/bar/" ]] && export FOO=BAR || unset FOO
grep -Po [\d\.]*(?=-) file
for F in names/*.txt; do java -jar names.jar -o output/alphabetized/ ${F}; done
/bin/bash -c TERM=something; eval "$1" -- SomeUserInput
myFunctionOrScript $@
system(ls *.txt);
awk NR==FNR { pats[$0]=1; next } { for(p in pats) if($2 ~ p) { print $0; break } } patterns file
run_sql.sh param1 param2 "param 3"
set xlabel Applied Current [mA] offset -0.3
curl -G --data-urlencode q=سلام -d page=1 -d mitime=1244764800 -d maxtime=1245764800 -d apikey=FAF7F2D0D8A143978CB7762CE35FCF99 http://otter.topsy.com/search.json
key1 = valueA //A will be used as a key word.
psql> pset pager off
ps aux|awk {print $1} | sort | uniq
printf Thread dump #%d\n, counter >counter.txt;
sed s/ü/\\"u/g filename.tex
grep -E -o finalNumber="[0-9]+" file.xml | grep -E -o [0-9]+
awk BEGIN{ hits=0; misses=0; }/^hit/{ hits+=$NF}; /^misses/{misses=$NF}; END {print "Hits: " hits "\nMisses: " misses } txtfile
rvm 1.9.2-p290@portal do bundle exec rake spec
perl -pe s/\r\n|\n|\r/\r\n/g original.csv > new.csv
xdotool key alt+F1
command1 && command2
if [ $extension == $TARGETEXT ];
sed -r /\\[^\\]*\\/{s//\n&\n/;h;s/[\\|]//g;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/} file
sed -e :s; s/{%\(.*\)\$\(.*\)%}/{%\1\2%}/; ts; s/{%\([^(]*\)(\(.*\))\(.*\)%}/{%\1 \2 \3%}/
-R robots.txt,unwanted-file.txt
find test -type f -printf %h\0%d\0%p\n | sort -t \0 -n | awk -F \0 {print $3}
sed -e /nfs/{/nodev/!s/\S\S*/&,nodev/4} -e /nfs/{/nosuid/!s/\S\S*/&,nosuid/4}
for dir in `find . -type d`; pushd $dir; rm `ls | awk NR>3`; popd; done;
HISTTIMEFORMAT=%d/%m/%y %T 
sed -i s/<script>.*<\/script>// fileName
awk NR==FNR{a[$0];next;}!($0 in a) file1 file2 >out.txt
ftp -i -n -s:%currentFolderPath%ftp_commands.txt %IPAddress%
ssh user1@server -t cd /home/user2; bash --rcfile /home/user2/.bashrc -i
join -t| file1.txt file2.txt > file3.txt
if [ ! -z $line ]
complete -o filenames -F _foo foo
git update-index --assume-unchanged -- wp-config.php
function makeprivate() { find $@ -exec chmod go-rwx {} ; ; }
sed -i s/ /\n/g *
awk -v nlines=$(wc -l < $a) {printf "%s", $1"-"$2} NR != nlines { printf ", " } $a >>positions
awk {print $0 > "file_"substr($4,0,1)} yourfile
exim -t -i < fullyFormattedMessage.txt
your grep....|awk -F/ {$4=$4=="REL"?"AUNT":$4;$4=$4=="SIB"?"BROTHER":$4;print $4}
awk $NF == "msgstr \"\"" { c++ } END { print c } FS=\n RS= file
declare -p variable-name 2> /dev/null | grep -q declare \-a
awk -F: $3 > 999 /etc/passwd
{matlab_exec} -nojvm ...
sudo mv ~/macports/local /opt
find . -name *.php -exec sed -i /@category/d {} ;
paste -d   file <(rev file)
awk { split($1,a,"-"); print $0, (a[1]-a[2] >= 0 ? a[1]-a[2] : a[2]-a[1]) | "column -t" } file
paste -d, $(ls ~/Desktop/*.txt | awk -F/ {print $NF"/"$0} | sort -n | cut -d/ -f2-) > ~/Desktop/merge.txt
java -cp lib/junit.jar;sw.jar org.junit.runner.JUnitCore uoa.di.ys11.hw2.TestSmithWaterman
grep -oP \[A\s+\K[^\]]+ file.txt > new_file.txt
egrep $@
STRING True if string is not empty.
sed -ri /^\S+\s+\S+\s+\S+\s+1( |$)/d file
sed -i s/REPLACEHERE/$(cat fileB)/g fileA
sudo ./android

psql -l | grep <exact_dbname> | wc -l
diff fileA fileB | awk FNR == 2 {print $2}
cp -r /home/server/folder/test /home/server/
awk {print} RS=[[:digit:]]+| + file.txt
from subprocess import *
sed -r 1s/(\w)(\w*)/\U\1\L\2/g file
cut -f1 file && cut -f2 file && cut -f3 file
convert in.tif -delete 0 out.jpg
setkey -D | awk NR==1 { a=$1; b=$2; next } !/^ / { print ($1==b && $2==a ? "match" : "none") }
arr=(`grep line1 file`)
alias totalmem=ps -u user -o rss,command | grep -v peruser | awk "{sum+=\$1} END {print sum/1024}"
(head -n 2 <file> && tail -n +3 <file> | sort) > newfile
find . -maxdepth 1 -type f -exec sed -i 1i #comment {} ;
sed -r s/(catch.*[^:])(exception)/\1std::\2/ File.cpp
printf %06.3f\n 23.00
source <filename>.sh
for i in *.vx.dat; do nawk -f script.awk $i ${i%%.*}.vy.dat ${i%%.*}.vz.dat; done
echo Ёё | grep -Eo [А-Яа-яЁё]*
sed -i /^$/d foo
cmd_to_run, $output);
sudo rm -rf /usr/local/lib/python2.7/dist-packages/twitter
find . -maxdepth 1 -newer $1
system(c:\IQapture\dmon2_6_IHD -p2 c:\IQapture\mon_table_101_Tx8.txt 11 0 0);
touch $NAME.txt | chmod 700 $NAME.txt mv $NAME.txt /etc/openvpn/ccd | echo -n $X $Y > /etc/openvpn/ccd/$NAME.txt
for /f tokens=* %I in (dir /b /s cmd.exe) do icacls %I
sed -e s/\$\([^$]\+\)\$/\\(\1\\)/g manuscript.tex > manuscript2.tex
alias lala=ls -lrt|grep a
sudo wrapper.exp
find .
awk -v l=$left -v r=$right {print substr($0,l,r)}
if [[ $TAIL != true && ( -f $FILE_DIR/.completed || -f $FILE_DIR/../.completed || -f $FILE_DIR/../../.completed ) ]]
alias emacs-ro emacs !:1 --funcall toggle-read-only
find /var/www/temp/updates/ -type d -name date-* -printf %T@ %p\n | sort -n | head -n -2 | cut -f2- | xargs rm -rf
sort data.txt | awk BEGIN{last = ""; value = 0;} {if ($1 == last) {print $1" is "$3" | difference "$3"-"value" = "($3-value)}else{last = $1; value = $3; print $1" is "$3;}} -
awk { a[FNR] = (a[FNR] ? a[FNR] FS : "") $5 } END { for(i=1;i<=FNR;i++) print a[i] } $(ls -1v *)
curl icanhazip.com
sudo find -O2 $FULFILLMENT $ARCH1 $ARCH2 $MASTERING -type f
sudo find ... -type f -printf %p      %s      %t\n
sudo pip install argcomplete
[n]<>word
find . -name sqlite.db -exec ... ; -print
e.g. /bin/dos2unix.exe myScript.sh
B C1 C2 C3 | A
type -a <command>
./app $file $text
echo 112233 | sed s/\(..\)\(..\)\(..\)/\3\2\1/
grep -o [^ ]*%
0 6 * * 1-5 /usr/sbin/zfs snapshot rpool@`date +\%m-\%d-\%y`
cd /tmp ; touch mickymouse
(sleep 2 &) && (sleep 3 &)
export PATH=/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/mysql/bin:/opt/android-sdk-linux/tools:/opt/android-sdk-linux/platform-tools:~/usr/lib/jvm/jdk-6/bin
sed /^rs.*NA/,+3d test_data
Fall through is done using ;& (new since Bash 4) whereas ;; acts as a case break.
cygstart cmd
ssh user@host cat file.txt >> other_file.txt
get_arguments | { read data lambda; echo $data $lambda; }
perl -pi -e if(/acetate/){undef $_} your_file
<infile sed -r N; /([^\n]+)\n\1/ { N; N; N; N; N; N; d }; P; D
(find $SRCPATH/* 2>/dev/null | wc -l)
split -l 500 all all
java -cp .minecraft/bin/* -Djava.library.path=.minecraft/bin/natives/ net.minecraft.client.Minecraft username login id
setsid yourCmd
grep $(grep STRING test.txt | cut -d, -f3 | tr -d  ) temp.txt
awk -v FS=\r\n -v OFS=|+| -v RS=\\$\\$\\$\\$ -v ORS=\r\n {$1=$1}1 file
sort -k1,1 -k2n
java -cp bin; main.Main
awk { print length($1) " " $0; } $FILE | sort -n
(inotifywait --format %w%f...
git clone https://github.com/mrdoob/three.js.git >output.txt &
find . -name *.js -exec echo {} ; -exec sed -i  s/_persistenceURL = "prod"/_persistenceURL = "qa"/g {} +
sed -i.bak /SecondHome=/s,=.*,=$DirPath/code/$Repo, somefile.sh
apt-get install xvfb
cat <<:q >> test.file
/bin/sh -c find dir/checkpoint/features.txt -mindepth 1 -maxdepth 1 -type d -iname '20*' -exec echo "hello" \;
perl D:ack-standalone.pl 5  NeedMoreCoffee_n5_*.data /dev/null
export PATH=$PATH:/path/to/dir
/bin/sh -c for dirname in $(ls -d sh_test/* | awk -F/ '{print $NF}'); do mkdir sh_test_root/${dirname}; cat sh_test/${dirname}/* > sh_test_root/${dirname}/final.txt;done
pdftk $(ls | sort -n) cat output combinewd2.pdf
(ls); awk /$variable/{print "here"}
awk -F, FNR==NR { a[$1]++; next } { print $0, ($3 in a ? a[$3] : "0") } OFS=, file file
cat /etc/filename | grep staticip | awk {print $3} | tr -d '
. ./test.sh
sudo apt-get install alien rpm debhelper fakeroot binutils
export PS1=\[\e[36m\]\w \[\e[33m\]`git branch 2> /dev/null | grep -e ^* | sed -E s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /` \[\e[0m\]
sed s/\(PID:\)[0-9]*/\1${$}/ ${ARCHIVO_INFO_SESION}
su -c var=Hello; echo $var
(gpg -d ...)
sed /^XXXX /s/\]\$/, 'member3']/ < input
nohup ./<script_name> &
rsync -zvr --include=*.sh --exclude=* $from/* root@$host:/home/tmp/
* * * * * bash -c NUMBER=$[ ( $RANDOM \% 500 )  + 1 ]; echo $NUMBER > /tmp/out
cp /really/long/path/from/file.txt !

awk { print $2 } text.txt > outputfile.txt
-sOutputFile=-
awk /^>/{printf("%s,%d\n",$0,++counter);next}{print $0} file
./configure --prefix=/home/ubuntu/mystuff
sed s/.po/.mo/
Depends: libqtcore4 (= 4:4.8.2+dfsg-10) but 4:4.8.2+dfsg-2 is to be installed libqt4-gui : Depends: libqt4-designer (= 4:4.8.2+dfsg-10) but it is not going to be installed
find . -type f | xargs egrep -H -m 1 -n \<$month/$day/$year\> | awk -F : $2 <= N { print $1; }
grep -o (.*) emailFile
s/[[:digit:]]+//g
ssh $MachineIP  echo "$CM_Config" > "$mName/CM_CONFIG" 
Exec=lxterminal -e /home/userpc/tvheadend/build.linux/tvheadend; sleep 5; xbmc
awk NR==FNR{ a[$0]++ } NR!=FNR && a[$1 $2 $3] file_no_del original_file
ls -a -1 | grep ^\. | tail -n 5 | xargs ls
awk { print > substr($0,8,4) ".txt" } file
diff -qr directory directory.original | cut -d  -f2 | xargs dirname | uniq
awk NR==FNR{a[$2]=$1;next}$6 in a{print $0,a[$6]} file2 file1 > file3
sed -r s/(\w+) (.*)/echo "\2" >> \1.txt/e file
grep abc file.txt | grep vhg
application->getBootstrap()->bootstrap(array(date, config, modules, frontController));
procStartInfo.UseShellExecute = true;
sed -n /<tester>/{n;/<level1[ ]*id="2"/{n;n;N;p}} input
sed :a; N; $!ba; s|&lt;/p&gt;\n&lt;ul&gt;|\\begin{itemize}|g file
nohup ./myscript.py &
ios-sim launch ...
INITDIR=`find / -type f -name acpid 2> /dev/null | grep /etc/`
ls -F | grep -E [*]\>
read -p Which server do you want to know about:  var_server
grep ^-\?[0-9]\+::-\?[0-9]\+::-\?[0-9]\+::-\?[0-9]\+$ log.out
sudo sed s:a:b:g -i /tmp/test
awk NR==FNR{a[$0];next}!($0 in a) file2 file1

sed -ne s/^.*\([0-9]\{4\}\(\-[0-9]\{2\}\)\{2\} \)/\1/p
ls -l | grep -P $1 | awk { x += $5 } END { print "total bytes:" x }
if [[ $item == *$c* ]]; then
sed -i s#^variable = .*$#variable = http://myaddress#
sudo apt-get install incron
cat script | bash -s 5
awk -F[:, ]+ OFS=": " { for (i = 2; i <= NF; i++) print $1, $i } file
echo $id
sed -r s/DP.*MQ/\n&\n/;h;y/,/;/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/ file
collection.update({a.b: c }, {$set: {a.d: e}} )
cat test.csv | sed -r s/(([1-9]+,){3})17/\125/g (your sed line)
(echo $myline | awk { print $2 })
ssh username@rserver.com -L 127.0.0.1:8888:*:11111
(echo $path | awk -F / { print "", $6, $7, $8 } OFS=/)
ls -al | awk $6 == "Jan" && $7 >= 16 && $7 <= 20 {print $9}
sed -rn s|[^0-9]*(([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2})|\1\n|g; s/\n[^\n]*$//; s/\n/ /gp
awk { a[$1]=a[$1] + $3 - $2 } END { for(i in a) print i, a[i] } dummy
(strings < pdffile.pdf | sed -n s|.*/Count -\{0,1\}\([0-9]\{1,\}\).*|\1|p | sort -rn | head -n 1)
awk NR%2==0 { x = sprintf("%-66s", $0); gsub(/ /,"A",x); $0 = x }1 file
ssh myServer uname -a | awk '{print \$2}' 
update-alternatives --set ruby /usr/bin/ruby1.8
awk -f test.awk < datafile
awk -F\t NR==FNR{a[$0];next} $1 in a file1 file2
grep -vf file2.txt file1.txt
sed /\.com/s/^/#/ < hosts
ssh -p 42586 mysite.com
scp ./file: name.mp4 user@host:/path/to/dest
echo [ONE testing 1 2 3] [TWO lorem ipsum] [ONE 123] | grep -o \[ONE[^]]*\]
find /home/palchan/code ( -name *pattern* ) -prune -o -type f ( -name *.[CcHh] -o -name *.cpp -o -name *.hpp ) -print
import sys;for p in sys.path:print p
foo |& node server.js
(cd /path/to/file; ls -l *.*.*)
grep -f file2 file1
awk -F, FNR==NR { a[$2]=$0; next } { print a[$0] } file2 file1
sort -u INPUT > OUTPUT
sed :a; s/||/|nil|/g; ta
ssh user@remote find /some/folder/with/backups -mtime +7 -type f -print
set _f [file tail $_d]
awk -F= NR==FNR{a[$1]=$0;next}!($1 in a) A B
(echo $xml_message | sed s/xmlns/ignore/)
dpkg -l mysql-server | grep -E ^ii | tr -s   | cut -d  -f3
pd_dump prod-db -U postgres > prod-db-$(date +%d-%m-%y).sql
java -jar Ares.jar > Ares.log 2>&1
cmd /c calledFile.bat
echo $gg | sort | join -1 2 -2 1 - text.txt

source ./chphp.sh foo 3
a=`python -V`
paste File_1 File_2 | awk {min = $4; if ($2 < $4){min = $2;} max = $5; if ($2 > $5){max = $2;}print $1"\t"min"\t"max;} -
sed 2h; $!N; $!D; ${ G; s/[^,]*\([^\n]*\).* \([0-9]\{8\}\).*/\2\1/; s/..$// } file
shopt -s expand_aliases
awk -F | { print > $NF } file
awk -f script.awk file2 file1
echo This is a test | awk {print $1}
awk 1 RS=var12=[0-9]+ file
awk {print $0, "7"}  inputfile > newfile

find /a/b/c/*/deploy -name *.pdf | xargs du -ch
awk -F| ++a[$1] <= 3 infile
setopt no_extended_glob
sed -r s/^[^"]+"([^"]*)".*/\1/ file
awk -v nr=$(wc -l < file) NR>17 && NR<(nr-8) file
ps -eo pmem,pid,pcpu,rss,vsz,time,args | sort -k 1 -r|awk $2~/<your pid>/
os.system(wget -c $url  -O  test)
awk -F, NR==FNR{old[$0];next} $0 in old{delete old[$0];next} 1 END{for(line in old) print line} old.txt <(sort -u new.txt) | sort
sed -i 20s/value = 200/value = $VAR/ file.txt
for i in hc.ls1; do cut -d , -f 2,3,6 $i > $i.tx2;done
cat file.txt | sed -r s/#([\t]disutil_screening[\ =0-9\.;]+# favorable)/\1/
BootstrapperSetup.exe /i /passive MyBurnVariable1=1 MyBurnVariable2=2
awk -F@ NR==FNR{a[$1]=$0;next}$1 in a{print a[$1]" : "$0} net.txt com.txt
ls -l | awk ($3=="user1" && $7=="Aug")
sed -i s/$_OLD/$_NEW/g /etc/php.d/newrelic.ini
awk NR==FNR{a[$1]++;next}{ print a[$1],$0} file file|sort -nr|sed -r s/[0-9]* //
sed -r \%<Directory "/var/www/html">%,\%</Directory>% s%(AllowOverride)\s+None%\1 All%i
ssh data@server.org cd /home/data/ ; chmod o+rx directory_\$DATE
for i in /var/log/apache2/access.log.*; do test -f $i && echo exists one or more files && break; done
`bash -c cat <(echo foo)`
cat ../header.txt > find -name *.c
ps -e -o pid,command | grep [r]esque-[0-9] | cut -d   -f 1 | xargs -L1 kill -s QUIT
echo $last_n2_lines
sed s|/.*|| file
print protocol[x]:count[x]
xmlstarlet sel -t -m /*/* -v concat(name(.)," ") < xmlfile
awk BEGIN {nout=1;} /^<\/endxml>$/ {close("xml"nout".xml"); ++nout;} !/^<\/endxml>$/ {print >("xml"nout".xml");}

trap errfunc ERR
script_name.sh |& tee -a /var/log/script_name.sh.log
echo cp $HOME/tools/{$FILES_TOOLS} $TOP_DIR/removeme
awk -v a=1000 -v b=100 -v c=10 -F [<;>] -v OFS=; -f ./script.awk file
require fileutils; Dir.glob(/var/log/myservice.log.*).each{|f| FileUtils.cp(f, /home/myhomedir/mylogs/) if File.mtime(f) < (Time.now - (60*120)) }
mdfind -0 -onlyin . kMDItemPixelHeight > 1440 || kMDItemPixelWidth > 1440 | xargs -0 sips -Z 1440
echo size is: `du -sh` ....
this_command_ends_hh<CR>: command not found
tr \000-\376 \001-\377 <input >output
top -b -n1 | grep ^ *[0-9] | head -n $k
for i in *; do awk /^XXX$/ { c++ } c<=3 $i > $i.modified; done
echo PHP10000 | awk -F PHP { printf "$%d\n", $2 * .0245 }
sed s/^[^_]\+_\+\(\(_*[^_]\+\)\{3\}\).*/\1/
echo <li><a href="link">text1</a> | sed s/.*"\([^"]\+\)">text1.*/\1/
ssh host_1 cat test_file | sed 's/\$/\tOK/'
rvm use default
(diskutil info /dev/disk$i|awk -F: * /SMART/{print $2})
alias www=open "http://localhost/~Sites/$(basename $PWD)"
sed -i s/_user= *[^ ]*/_user=ULTRAMONSTER/ script
cut -f1,3- -d  
export PATH=/usr/local/share/npm/bin:$PATH
sed /<\/preferences>/i\ADD SOME TEXT\nADD SOME MORE TEXT file
sed -ir /ServerAdmin/ s/\b[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+(\.[A-Za-z]{2,4})?\b/MY_ADMIN_ADDRESS@gmail.com/g /home/test/httpd.conf
seq --format=file '/home/debian/%02G.flv' 70
date --date=19-FEB-12 +%s
mkdir $HOME/hello $HOME/hello/world
shuf yourfile > tmpfile && mv tmpfile yourfile
(eval main_DEPS = $(shell program))
void getCommandAndArgs(char *tokLine) {
awk {sub(/^>[^ ]* /,">")} 1
find . -name *.zip -exec sh -c unzip -d `dirname {}` {} ;
sed -e s/add fast \(pkg\|package\) boots-.*/add yinst pkg boots-5.0/g
exec 2>&1
sed s/_\([[:digit:]]\{1,\}\)/_\1\t\1/g
exec(su -c dhcpcd eth0)
awk { print substr($1, 1, 3), x = (substr($1, 6, 4)), x, x } OFS=
ls -l > ls-l.txt
sed :a; s:|\(\\N\)\?|:|NULL|:g; ta
strace -f -o /tmp/myscript.trace -e trace=process ./myscript.sh
jar cfve file.jar Main Main.class Main$1.class Main$2.class
String tailCommand = /bin/sh -c 'tail -f /path/PATH.txt| grep (...)';
sh /path/to/mybashfile
awk {a[NR]=$0;}/eee/{a[NR-3]="www\n" a[NR-3];}END{for(i=1;i<=NR;i++)print a[i];} file
sort -k1,1 -k3,3nr datafile.txt | awk $1 != x { print } { x = $1 }
awk BEGIN {now=systime()} {then=strtonum(gensub(/\[|\]/,"","g",$1)); if(now-86400<=then) print}
{TODAY}*.csv
awk {print $0, $2 + $NF } input_file
BASH_ARGV
sed -e s/$/ eth0/
echo this || echo that && echo other
j2re.exe /s /v/qn INSTALLDIR="C:\Program Files\JRE"
plutil -convert xml1 <PATH_TO_STRINGS_FILE>
wget centos_64bit_novz.sh -O- | bash -s --LEVEL=$LEVELSEC --SERVVRT=novz
sed s/,$// file > file.nocomma
VARIABLE=value
javac -cp cs2.jar CB
npm cache clean
awk BEGIN { FPAT = "([^,]*)|(\"[^\"]+\")"; OFS="," } { for (i=1; i<=NF; i++) gsub(/[\",]/,"", $i) }1
MÖRKGRÅ.JPG
java -cp .;cs2.jar CB
awk { sub( "/[^/]*/","")}1
awk -F , -f test.awk test.dat
awk -F [:,] /=sent/{a[$2]=$0;}/=receive/{print a[$2], $0;delete a[$2];}END{for(i in a)print a[i],"NO MATCH";} file
sed s#[^^]\([0-9]\.\) #\n\1 #g
sed s/^ *//;s/ *$//
sed -e p -e s/ar/AR/g
findstr /s /m READONLY *.txt
2 15 * * * mysqldump -u user -ppass dbname | gzip -9 -c > /var/www/backup/dump-$(date +%Y-%m-%d).sql.gz
find . -iname *.cpp | while read filename; do grep --with-filename \[[01]\] $filename; done
program.py > tmp.csv && mv tmp.csv file.csv
%x(echo $0)
for file in */20?????.*; do mv $file ${file/20/10}; done
perl -pi -e s/[[:^ascii:]\031a-e]/ /g
vared -c line
digest -a md5 -v /filename > digest.log
kill -n bash
awk {sub(/DST=/,"",$10); print $10} iptables.log |sort -u
cat new_dba_keys.pub | ssh -l root 10.224.1.16 su - postgres -c "cat >> ~/.ssh/authorized_keys"
kill %1
myapp | sed -e s/^.* //
awk -v awkvar=$value {print awkvar}
sh ./test.sh | sh
xcode-select -switch /Applications/Xcode.app/Contents/Developer
if [[ $1 == -r ]]; then
awk -F, FNR==NR { a[$1]; next } $1 in a file1 file2
( echo  6.32138 * $USD  | bc -l )
./tmp.sh && cd <to_your_directory>
cat headerfile myfile trailerfile > newfile
awk /^101/ && !i { c++; i=1 } i { print > "file" c } /^110/ { i=0 } input
awk {a[$1*1];b[$1*1]=$0}END{asorti(a);for(i=1;i<=length(a);i++)print b[a[i]];} file2 file1
15 22 * * * shutdown -h 5
myscript.sh: line 11: COMMMAND: unbound variable
for f in $(find . -name FILE_NAME); do grep PATERN $f | tail -1; done
node -v
source ./script.sh
svnadmin create --pre-1.6-compatible --fs-type fsfs /svn/repos/myproject
sed s/^[0-9]*//
sed N;s@ </V>\n<N> @" = "@g
awk $4~dd{print $1} dd=02/03/2013
awk -v name=Anton Kovalenko -F: $1==name $file
git log --diff-filter=D --summary | grep delete
su -c od --width=144 -x /dev/input/event3 | awk '{ print \$12 }'
awk NR==FNR{a[$0];next} $1 in a{c=2} c&&c-- file2 file1
:%s
perl -pe /^### (?:END )?EVENT ###$/ or chomp;/### END EVENT ###/ and s/^/\n/

awk -F | FNR==NR { a[$1]; next } $5 in a file1 file2
rename s/_\d+(\.[a-z0-9A-Z]+)$/$1/ *
awk BEGIN {FS=OFS=","} {for (i=1; i<=NF; i++) $i/=10;}1 infile
roll.sh | tee -a logfile.text
find . -name *.extension -print0 | xargs -0 -n 1 tail -n +2 > concatenated.csv
sed -e s@<charge_amt>[^-][^<]*</charge_amt>@<charge_amt>0</charge_amt>@g < file > newfile
sed s/[^0-9/]//g
ls ?c*
nohup ./shell_script &
sed $d < file1.txt | sed 1d
awk 1;END{print "T|"NR-1} file
echo [PIN] | bluez-simple-agent hci0 [BT_MAC_ADDRESS]

awk -Fuser NR%2{print $1} file
ls -ad .*/
if [ ${platform} == macosx ]

0 */2 * * * <command-to-run>
if [ $(foo $arg) -eq 0 ] ; then
cat file_in | awk BEGIN{FS=":"}NR>1{print $1,$2} | awk {print $1":"$2,$1":"$2,$0} | cut -d   -f 3 --complement > file_out
convert *.[jJ][pP][gG] output.pdf
../programming/ctest/arg $i
%q(users | wc -w | awk {print \"Number of Users: \"\$1})
./solar_sim i j >> solarResults.txt
for i in *.jpg; do mv $i ${i%-*}.jpg; done
scp -r nameOfFolderToCopy username@ipaddress:/path/to/copy/
sed -i 1 { h; s/[^\t]//g; s/^/ID/; p; g; } *.tsv
awk -f script.awk file1 file2
...(?:...)...
sed -i s@^$file_name\$@%dir $file_name@ $TOPDIR/list_files
file=`ls -d $(seq --format=/usr/local/mysql/data/mysql-bin.%06.0f $STARTLOG $ENDLOG) | sed s/^.*\///`
grep -v -E ^[0-9]+$ < source.txt > destination.txt
php iter.php >> result.txt & php iter.php >> result.txt
sh testfile
/^
chown service:service /home/service/.bashrc
HeadingCopy=`head -1 $OUTDIR_main/$MAIN_FILE_NAME | tee -a ${OUTDIR_main}/${TMP_FILE_NAME} `
grep -E ^[a-zA-Z]+ [0-9]+ [0-9]+:[0-9]+:[0-9]+ Kingston
tr -d b < <(echo abcd)
if ! pgrep apache; then echo oliver; fi
eval ls $(pwd | sed s/`whoami`/`whoami`.{daily,weekly,monthly}/g)
ls -v | awk { if($0!~/Map/) print $0; else later[NR]=$0; } END { for (i=1; i<=NR; i++) if ( i in later ) print later[i]; }
find . -name *.jar -print0 | xargs -0 -I {} sh -c jar tf {} | grep Message.class &&  echo {}
awk $1 !~ /random/ { print RS $0 > $1 ".txt"; close($1 ".txt" } RS=> ORS=
csh
cd $PATH
sed /VG00/ { N; s/\n// }
awk {for(i=2; i<=NF; i++)$i="(" ++k ")" $i}1 FS=i OFS=i
C:\Program Files\R\R-2.15.2\bin\x64\Rscript.exe C:\Users\jdd\Documents\test.R
xmllint --xpath string(//identity/@nationalnumber) file.xml
openssl s_client -connect imap.gmail.com:993 -crlf
sed -r s/^([a-zA-Z0-9]+);.*(serverfile[0-9]+).*/\1;   \2/ file.txt
PATH=/opt/server/php/bin:/usr/bin:/bin
find -mtime $TIME -exec mv {} $tmp_dir/ {};
if [[ expression ]] && [[ expression ]] || [[ expression ]] ; then
split -d -n 4 -l 500 myfile.txt file_
sed s@^@<url><loc>http://www.mysite.com/review/@; s@$@</url></loc>@ files*.html
preexec() { PS1=$2\$ ; }
cat /var/log/local3.pipe | grep -i --line-buffered test >> somefile.log
echo test | xargs rm
brew install git bash-completion
mysqldump -u root files path path_updated ...
awk NR==1 { print "First Login:", $1, $2, $3 } END { print "Last Login:", $1, $2, $3 } logins.txt
sed s/Minimum = \([0-9]\+\)ms.*/\1/
awk NR%20==1 { file = FILENAME "_" sprintf("%04d", NR+19) } { print > file } domains.xml
find -regextype posix-extended -iregex (.*/)?log4j-cnode1.*\.log\.(1[0-1]|[1-9])
awk NR % 2 == 0 { print substr($0, 0, 45) } NR % 2 == 1 { print } BT8_A.fastq
sed -n /^32/,/^39/p file
0 5 * * * /bin/bash -l -c export RAILS_ENV=my_env; cd /my_folder; ./script/my_script.rb > ./log/my_log.log 2>&1

Runtime.getRuntime().exec(new String[]{/bin/sh ,-c, file.getPath()});
export CLASSPATH=$CLASSPATH:/usr/local/lib/antlr-4.0-complete.jar
sed -i  -e s/mySite-[0-9][0-9]*\.js/mySite$current_timestamp.js/ template.php
set -x
awk $3 == 0 data
sudo -u user1 cp /files ./

perl -0777pes/\n\s*(?=XYZ)/ /g file
rename ö o *
host.name=ec2.123.3345.amazon.com
awk {if($0~/\<codingScheme\>BDR\<\/codingScheme\>/){if(x~/productCode/)count++};x=$0}END{print count} your_file
awk -F [|,] { for (i=2;i<=NF;i++) print $1 "|" $i } file
zenity --entry --text=$ret
tmux show-environment -g | grep RBENV
find -iname *.tgz -exec tar -zxvf {} ; -quit
find * -type d | egrep -v ^logs/|/logs/
ssh -i id_rsa -o -o StrictHostKeyChecking=no [myuser]@[myserver]
find . -name *.java -execdir mv {} test.java ;
./your_program | (while true; do read tmp && echo $tmp > $file; done)
tcpdump -i eth0 -s 65535 | tshark -T -pdml > results.xml
printf #!/bin/bash\ntouch /tmp/1234567890_$RUN
adb logcat | grep -v nativeGetEnabledTags
echo $a / ( $b - 34 ) | bc -l
perl -e $ENV{"property.name"} = "property.value"; system "bash"
egrep -o (\s(rs\S+)) data.txt | cut -d   -f 2 > newfile.txt
awk -v q=' {a= a","q$1q}END{print a} file.txt
awk -F| {a[$2]=a[$2]","$1;next}END{for(i in a)print substr(a[i]"|"i,2)} your_file
eval echo ${${arr1[0]}[0]}
{ grep pattern file && head -1 file; } > result
echo 20000024ff3dbf50 | sed s/../&:/g;s/.$//
dos2unix /cust/vivek.txt
date +%s -s @`date +%s`
perl -plwe s/([^:]+)/"$1"/g
awk BEGIN{FS=OFS="|"}NR==FNR{a[$1]=$3;next}$5 in a{$7=a[$5]}1 file1 file2
echo ... | passwd &> /dev/null
printf (stderr, %s\n, history_value);
awk {$1=$2="";}sub("^ *","")
echo CONT: $((++CONT))
grep -F -f file1 file2 >newfile.txt
sed x;/./{x;/#location/,+6s/#/ /;b};x;/#location/h file
sed -i -r s/^(eth[0-9]+)\./\1:/ file.txt
awk {$1=$1}1 OFS=|
(echo first line; cat file; echo last line) | some_command
find ... -print0 | xargs -0 ...
awk /[0-9]$/{ blahblahblah } !/[0-9]$/ {blagblag}
awk BEGIN{FS=OFS="\""} {for (i=1;i<NF;i+=2) gsub(/ /,";",$i)} 1 file
cat file_with_new_lines file > newfile
tr -cd [:print:] < yourfile.txt
subprocess.call([c:/cygwin/bin/bash.exe, --login, -i, -c, rsync -zrgo --omit-dir-times --verbose --delete . usertwo@192.168.1.1:/var/www/project/])
directory=`find ./ -type f -name *$thismodelnormal* -exec ls -la {} ;`
grep -w label for="id_query
grep -w $1 .
grep -l Peter * | xargs grep -l James
sed -r /PATTERN1/!b;:a;/PATTERN2/bb;$!{N;ba};:b;s/(PATTERN1.*)[ \t\n]+(.*PATTERN2)/\1\2/;tb file
sed s/foo/&\n/2;T;h;s//bar/g;G;s/\n.*\n// file
ack-grep -l Peter | xargs ack-grep -l James | xargs ack-grep Peter|James
find . -iname *$1* -exec ack-grep $2 {} +
export PATH=.:$PATH
awk /Flags/{sub(/.80:/, "", $4);printf $4"\t"} /User-Agent/{sub(/^[^:][^:]*:/,"");sub(/\.80/,"", $4); print} logTest
fprintf(fp, %d=%d\n, i, i * i);
awk -f script.awk file1.txt file2.txt
dev_name=loop ; major=` awk \\$2 ~ /^\${dev_name}\\$/ { print \\$1 } /proc/devices` ; echo $major
awk /^SomethingA/ && ! a++ || /^SomethingD/ { print $2 } FS=: text.txt > output.txt
for /r %f in (.) do touch %fempty
wget -O test.html $cURL
pkill -P $PID
grep ^Feb 24 /var/log/secure
cp *file* ./work/
rename s/\.ext\z/.otherext/ *.ext
sed s/fox/\n/;T;D file
alias pandoc=/path/of/new/pandoc
sort -R file | awk {if (count[$3] < 10) {count[$3]++; print $0}}
awk $2=$2" "sprintf("%.3f",$2) file
ls dir/file.* | sort -n -t . -k 2 | tail -1
sed -rn s/.*SRC=([^ ]+).*SPT=([0-9]+).*/\1 \2/p /var/log/iptables.log
ssh user@11.11.11.11 /home/lib/groovy-1.5.8/bin/groovy -cp jars/log4j.jar:jars/commons-configuration.jar:jars/spring.jar:$(echo jars/c*.jar | tr " " ":") bin/CreateTable.groovy
shopt -s extglob
awk {sub(/.*\//,"",$4)}1 file
paste -s -d, - < try_1.txt
sed s/\(TOTAL.\{14\}\).\{8\}\(.*\)/\1        \2/ <file>
sed s/\s*$//
/Applications/MATLAB_R2008a/bin/matlab -nodesktop -r run Documents/MATLAB/BLS/BLS; exit;
awk BEGIN{FS=OFS="%"}{sub(/^ */,"",$2);$2=sprintf("%-8s",$2); print}
sed -i /^TOTAL/i$(echo -$___{1..50} | tr -d ' ') file.txt
if ! diff -q $f1 $f2; then ...
perl -lne if ( m{"DeviceId":" ([^"]+) "}xms ) { print if not $seen{$1}++; } <log
sh ../gradle -b ../build.gradle clean build
PROMPT_COMMAND=history -a
if echo $VAR | grep -q $PARAM; then
sed /<!--/{ N; N; s/.*\n\(.*food="mango".*\)\n.*-->.*/\1/; } file
/home/mumps/Medline2012/getDocs.mps < /home/mumps/CS3150/Script/HW1/textfiles/CardioAndPulmonary.txt > /home/mumps/CS3150/Scripts/HW1/textfiles/Titles.txt
Arguments= -c 'command_to_run -d -f' 
echo suhail| passwd $username --stdin
awk {print $NF} your_file >only_names.txt
javac -classpath .:/usr/share/tomcat7/servlet-api.jar src/com/example/*.java
x=$a a\t*\t c\td\te
execl(/usr/bin/awk, awk, -v, PRI=???, /^<???>/, LOG_FILE_PATH, (char *)0);
awk -F [][] {print $2,$4} OFS=* file
xargs rm < filelist
open(file, mode=r, buffering=-1 ....)
var_dump(shell_exec(ffmpeg -i /var/www/html/sitedomain/httpdocs/tmp/ebev1177.mp4 2>&1));
awk {$0=$2?$1FS$2FS$1/$2:$1>15?$1FS$2FS$1:$1FS$2FS"0"}1 file
sprintf( tmp3, $2>=%s && $2<=%s, BEGINTIME, ENDTIME );

awk -f script.awk file1 file2
grep -Fxq foobar line file || sed -i /^context line$/i foobar line file
grep -Fxv -f lines_to_remove.txt database.txt > what_i_really_really_want.txt
srctip
mkdir -vp test/dir (A:B)
totalip
nohup python app.py 8080 &
pid =`./mineos_console.py -s testingmode get pid`
./make.o output$ctr.txt >out$ctr.txt
find /home/caine/thecopy -user caine -size -10240c -name a.* | wc
(echo $var | sed /str/d)
[[ -s $HOME/.rvm/scripts/rvm ]] && source/Users/seanlanning/.bash_profile $HOME/.rvm/scripts/rvm
find ~/addon_backups/202/ME -name *.tar.gz -maxdepth 0 -ctime +365
chmod ugo+rw file1 file2 file3 file4 ...
sed $!N;s/\n\(<\/Text>\)/\1/;P;D file
sshpass -[args] rsync [source] [dest]
find * -type f -print
echo .* * | tr   \n
echo $input | wc -w
chomp( my $load = `w | head -n 1 | awk {print \$12}` );
:edit `=[1]`
@envvar = `csh -c cd \$WSDIR ; source <script>.csh  ; env`;
Get-Command -CommandType Alias,Function,ExternalScript,Filter,Cmdlet -Name $($Matches[1])* |
--inputbox Enter The Client Name 0 0 2>$OUTPUT
grep -F -f IDS DATA
echo $LD_LIBRARY_PATH
ping google.com | awk -F[ =] NR>1{print system("echo -n $(date +%s)"), $11}
perl -n -e print "$1\n" if (m/image=(.*?)\&/);
xrandr | grep * | sed -e s/\S*\(*+\)\S*//g -e s/ //g -e s/x.*//
sql2=grant all on ${db_name}.* to ${db_user}@${host} identified by ${password};;
grep 1001 customer | cut -d | -f 3
while [$DONE -eq 0]
sed s/;/ /4 <inputfile>
(cmd | tee out.txt) &> both.txt
sudo crontab -e
cd $SOME_DIR
tr -d \200-\377
awk /two/{i++}i==2 file
os.path.basename(os.readlink(/jffs2/a.bin))
find . ( -name *a -o -name a* ) -printf %p %s\n
s:random_stuff_(choice1|choice2){([^}]*)}:U1En2:
sudo !!
cut -f1 < inputfile.txt
trap kill $(jobs -p) EXIT
sed -e s/INSERT INTO `temp` VALUES (// -e s/);$// -re s/("[^"]*),([^"]*")/\1\x1\2/g;s/,/|/g;s/\x1/,/g;s/\\([^\])/\1/g file | sed s/'|/|/g;s/|'/|/g
awk NR>1{if($6=="N") print $1,$3,$4,$5; if($8=="N") print $1,$3,$4,$7 }  file
stringA[^(?:stringB)]*stringC
[ -t 1 ]
awk -F= -vOFS== gsub(/\./,"_",$1)+1 file.properties
(host $i |grep -o -m 100 [0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\})
{parameter:-word}
gzcat file.gz | tail -c +5 | echo 000
zcat *.gz > newfile
ssh-keygen
<2011.psv parallel --pipe -N 50000000 ./carga_postgres.sh
sed -i -e /google\.com/d activedomains.txt
cut -d = -f 2 <<< $your_str
printf ^[%s foo ${a1}
sed -i.bck $s/$/ $inside_ip/ list.txt
find -maxdepth 1 -type f | awk {printf "mv %s my_%s\n", $2, $2} FS=/ | sh
rm a-*[1-4,6-9]00.dat
sed -r s/^(.*) +(.*@.*)/"\1" \2/ file
ps aux | awk {print $1} | xargs -I % sh -c { echo %; sleep 1; }
for app in $dir/Application/*/
ENV{NEW_IP}/g
sed s/[^=>]*=// file
timeout 30 nfcapd -z -w -t30 -p 2055 -l /home/shane/Documents/nfdump
awk -F. NR > 1 && $1==a && $2 + 0 != b + 1; { a=$1; b=$2 + 0 } file
eval $BASH_POST_RC
where t1.taxon_list = Stramenopiles
awk $6>3{print $1,$2} file >out
sed -r s/foo( *)bar/\x94\1\x98/g; s/foo/Matched/g;s/\x94( *)\x98/foo\1bar/g file
awk NR==1{n=NF}{$n=$n}1 FS=, OFS=, file
grep -Po (?<=<)[^>]*
echo ${ADB:=adb}
curl -A Mozilla/5.0 http://translate.google.com/translate_a/t?client=t&text=hello&hl=en&sl=en&tl=zh-CN&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1
awk $2 == 1002 FS=| input-file
read -q REPLY?This is the question I want to ask?
sed -i s/^ServerAdmin .*$/ServerAdmin secret@secret.com/ in-filename
grep pattern1 file|grep pattern2|grep pattern3
find . -maxdepth 1 -type f -exec grep $@ {} +
for f in *.xls ; xls2csv -x $f -w sheetName -c ${f%.xls}.csv;done
echo $i $word | tr A-Z a-z | sed -e s/[^a-z0-9]//g
awk NR==FNR{p[$0];next}{a[FNR]=$0}END{for(i=1;i<=FNR;i++){for(l in p)gsub(l,"",a[i]);print a[i]}} file1 file2
char* charString = argv[i+1];
sed s/(.*(/(/ file
read answer < /dev/tty
sed s|#/\*\!40101 SET @OLD_SQL_MODE=@@SQL_MODE\, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' \*/;|SET @OLD_SQL_MODE=@@SQL_MODE\, SQL_MODE='NO_AUTO_VALUE_ON_ZERO'\;| file.sql > filenew.sql
sed -n /^START/,/^END/p <file>
sed s/-\([0-9]\)/\/\1/g input.txt
mkvmerge -o $OUTDIR/$filename $filename ${filename%.mkv}.mka ${filename%.mkv}.ass|(sed -n /^The/q;cat)
sed -e s/^00*// file.txt
source /path/to/myscript.sh
2/g
awk -F| {a[$1]=a[$1]","$2;next}END{for(i in a)print i"|"substr(a[i],2)} your_file
java -jar `ls my-jar*.jar`
awk /^>/sub(/hg19_ct_UserTrack_3545_/, "") input
0 18 * * 5 /bin/bash /home/ubuntu/scripts/dev/stop.sh
if errorlevel 1 goto error
awk /MACS_peak/{$1=$1"_"$2;$2="";}1 your_file
keytool -list -v -keystore mykeystore.p12 -storetype PKCS12 -storepass 123456
python -c import json;print json.loads(open('json_file.json', 'r').read())['result']['covered_percent']
echo some command > /dev/usbXXX
for i in `ls`; do n1=$(wc $i | awk {print $1}); if [ $n1 -eq 1 ]; then rm $i; fi; done
lh() { open http://localhost:$1; }
[ -n  ]
smbclient ... | egrep /$
awk -F& {gsub(/\./,"",$2)}1 file
config[log_threshold] = 0;
dig +short gmail.com mx | sort -n | nawk {print $2; exit} | dig +short -f -
0 1 * * * PATH=/directory/containing/qsub:/usr/bin:/bin qsub /script.sh
env -i TERM=$TERM LC_ALL=$LC_ALL LANG=$LANG zsh -f
find /mnt/ -maxdepth 2 -name 1_drive_check.sh -executable -exec {} ;
./my-script -a file1,file2,file3 -d file4,file5,file6 -r file7,file8
awk NR==FNR{a[$1]=$2;next}$1 in a{print $1,a[$1]} file2 file1
find . -type f -name *.xml* -exec awk {gsub("ID","\nID");printf"%s",$0} {} +
awk NF==7&&/ROTATION/{if($7<0||$7>0.2)$7=0}1 file
shopt -s extglob
last | head -n $after | tail -n $((after-before+1)) | cut -f $start-$stop
result * $input))
(sed -E s/^((ftp|www)\.)?([^.]*)\..*/\3/ <<< $HOSTNAME)
diff <(sort $def.out) <(sort $def-new.out)
dir /s /b /o:gn
purge
sed s!&lt;foo_bar&gt;[^&]*&lt;/foo_bar&gt;!!g input
ls_newsite = exec(ls /vhosts/ . $sitename .  > /dev/null 2>&1, $output, $error_code);
bash --login
find . -type f ( -iname *.html ! -iname template.html ! -iname list.html ) -exec rm -rf {} ;
1:g

dirlist=`ls ${prefix}*.text`
wget -O [download directory path]/[filename.zip] https://github.com/.../[myZipFile].zip
sed -i -e s/{VERSION}/${VERSION}/ -e s/{DISTRO}/${DISTRO}/ ${OUT_CAT}
awk $1!~/^#/&&$1 in a{next;}{a[$1]}1 file
find . -name ./td/*.c -exec sed -i s/:::/::/g {} ;
/tmp/p.pl $@ 1>/tmp/chk.out 2>&1
sed s/20$/21/
perl -lane $F[0]=~s/(.*)\..*/$1/g;print $F[0] your_file
awk (NR-1)%100 < 20 bigfile.txt
{f%%.mp4}
echo alias '$*' >> ~/.bashrc
sed -i s/$SRC/$DST/g test.txt
cat t.sh
{ echo test > out1 ; } > out2
sed -i :a;N;$!ba;s/\n //g {} + | grep -l 672.15687489
awk -F [:,] {split($2,a,",");if($1~/sent/){if(prev!~/receive/&& NR!=1)print prev,"NOMATCH";else if (NR!=1)print prev;prev=$0;session=a[1];}if($1~/receive/&&session==a[1]){prev=prev","$0;}}END{if(prev~/receive/)print prev;} file1.txt
vartest=`psql -d $dbname -U $username -h localhost -p 5432 -t -c SELECT gid FROM testtable WHERE aid='1';`
git pull --upload-pack=/c5/shared/git/1.7.6/bin/git-upload-pack myserver:~/mygitrepository
sh -c cd /home/deploy/app/current && RAILS_ENV=production ...
echo $var1 >> $1
sed -r s/(name:\{id:)[^,]*(.*alias: )([^;]*);/\1\3\2\3;/ file
.......|sed s@\\@@g
chmod --reference version2/somefile version1/somefile
grep -c ^20130305-2[1-3].*myPattern your.log
find /path/to/file -user user1 -perm -u+rwx
ssh my_server bash -c 'echo this is \$HOSTNAME; abc=2; echo abc is \$abc;'
awk -F= NR==FNR{A[$1]=$2; next} $NF in A{print A[$NF]} file2 FS=| file1
shopt -s globstar
kill %1 %2 %3 %4 %5 %6 %7 %8
Server = new FancyWebSocket(ws://mmhudson.com:9300);
php -r echo "something";
exec /bin/bash --rcfile ~/<myfolder>/bash.personal
my_func {1,2,3}
let aaa = substitute(&rtp, /home/romainl, ~, g)
<form action=some string returned by exec>
while(wait(&status != child));
(cd /home && php /home/testfile.php >> /home/logFile.txt)
echo hello world | tee aa bb > cc
java -jar jenkins.war --httpPort=9090
1)&
/proc/5/fd
echo ${!x[@]}
if file -i $myvid | grep -q video ; then
QUERY_STRING=var1=val2&var2=val2&var3=val3 perl myperl.pl
sed -e /^\tpublic String getId/,+2 d
for f in *; do tr \n  < $f; done
find yum/yum_hyd -name "*".csv |sed s/"/\\"/g|xargs rm
awk /the-timestamp-I-have/,0 the-log-file
sed -e s;\(\[\)\([0-9]\)F;_F\1\2;
..unzip -o ..%1 >nul
{ time brunch aokp_mako-eng ; } 2>log$day$month.log
sed -e /^foo$/! s/^/- / -e /^foo$/ s//FOO/ infile
sudo find ~/Backups/webserver-backups -type f -delete
stty erase ^M
cp notExistsFile.txt ~/Desktop/ 2>/dev/null
sed -E s/#([^#]+)#/===\1===/g filename
sed -e s/^#// -e /^[ \t]*$/d
find . -name *-GHBAG-* -exec bash -c mv $0 ${0/GHBAG/stream-agg} {} ;
scp your_user@server:/dir/of/file/*.log /your/local/dir
ARR=( $(echo $dir | tr /  ) )
[ -f $HOME/bin/zsh ] && exec $HOME/bin/zsh -l
cp -R LeapMotion /cygdrive/d/Processing Sketches/libraries/
(awk -F, FNR==r{print c} r=$r c=$c file)
awk $0{gsub(/./,"&\n");printf $0} input
sed -i -nr /fox/p file
rm ./--reporter=test
export CATALINA_OPTS=-Djava.awt.headless=true -Dfile.encoding=UTF-8 -XX:ErrorFile=$DUMPSPATH/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$DUMPSPATH
perl -pi -e s/if\(\$session\[\'test\'\]\>0\){/if\(\$session\[\'test\'\]\>1\){/g
FOO=bar echo Result:
sed /alias/{N; /[^0-9]172\.16\.202\.21$/s/\n/ MAC 00:01:02:aa:bb:cc&/;} file
perl -ne print if /^((\d+\.){3})/ and not $seen{$1}++ < logfile.txt
cut -f2- infile > file
for filename in foo*.tif; do mv $filename ${filename#foo}; done
sed -i 0,/^PATTERN/ s/^PATTERN=.*$/PATTERN=XY/ test.txt
find ~/SAN/$site/*.tar.gz -maxdepth 1 -mtime +60 -exec rm {} +
perl -p -e \$match = 1 if s/($TAGS)/ error: \$1/; END { exit \$match; }
NSString *currentpath = [[NSFileManager defaultManager] currentDirectoryPath];
{f// /_}
awk ("15:21:14" <= $1) && ($1 <= "15:51:14") file
`[[ -s $HOME/.rvm/scripts/rvm]]
( sqllite3 /home/user/db_fake_book_index select id, page from fb2 where bookcode='$bookcode' and page=$page )
awk /}/{f=1;next} $0 && f{f=0;next} !$0 && f{print "empty line found:"NR} file
tail -f flex.log | grep Exception | sed -e $s/Exception/Exception\a/
sed s/#[[:alnum:]]\{1,\}/replacement/g
[[ $s =~ ^[1-9][0-9]{3}$ ]]
system(/script/myscript.sh $number &);
find . ! -name . -prune
tail -f flexi.log | grep Exception --color | grep -v DataNotAvailableException

python -m SimpleHTTPServer
echo $title | sed s/,/My_com/g
cat input.txt | sed s/^[ \t]*//;s/[ \t]*$// > output.txt
awk -F: $1=="Account number"{print $2;exit;} file
\n
awk -F | BEGIN {count=0;} $2==Smith {count++; print count". "$1} customer
heroku pg:psql
sed -i s/<host><\/host>/<host>my_db<\/host>/ foo.txt
sort file -o file
nslookup < filename.csv
perl -pne substr($_, 58, 13) = (" "x13); inputfile.txt > outputfile.txt
for i in *; do mv $i/*.mp3 $i/$i.mp3; done
awk NR==FNR{a[$1]=substr($0,92,5);next}($1 in a) {$0=substr($0,1,92) a[$1] substr($0,97)}1 file file2
tr -d \r < file > newfile
java.lang.System.currentTimeMillis() - android.os.SystemClock.elapsedRealtime();
(( HAVE_SRC == 1 )) && [[ -d $pwd ]]
awk { for(i=1; i<=NF; i++) if($i == 0 || $i == 8 || $i == 9 || $i == -999) $i = "NA" } 1 FS=, OFS=, firsttwolines.csv
emulator -avd NexusSeven &
(my_command myargs)
find . -type d -exec cp index.php {} ;
for d in [...]; do make --directory=$f
bool IsThing() { return false; }
for i in *.txt; do mkdir ${i%-*}; done
osascript -e POSIX path of (path to frontmost application) | xargs basename
sed s/^[^:]*:// infile
grep -EHroi -- ->(from|join)\('[^' ]* /path/to/files | sed -re s/:.*(from|join)\('/:/g
scp /cygdrive/c/Program Files (x86)/Spiceworks/data/configurations/LA_$(date +%F)-firewall-5520 sf-mlawler@10.21.1.212:/home/sf-mlawler/SBOX_Automation/SBOX_Dumps/08 - Security/Firewalls
cut -d   -f 2- input-file
a[i] = strtok(s, );
char const *c = \phello, world!;
awk $1=="XYZ" && $2=="GT" { f = 1 } f in.file > out.file
GF_ASADMIN ... | tee -a $LOG
declare -x -F
set
sed -i -r s/\S+//3 file
sed -r s/ts\(((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*)\)/ts(\1,\7,\3,\5)/g *.F
if [ $(wc -l $f) -lt 2 ]
ffprobe video.mov 2>&1 | grep Stream #0 | awk {print $10}
/

(grep -Po (?<=^HereIsAKey ).* file)
trap printf %s\\n "$BASH_COMMAND" >&2 DEBUG
cut -d, -f5- test1.txt > output.txt
! grep -P STATUS: (?!Perfect) recess.txt
ssh tinosino@robottinosino-wifi cat /Users/tinosino/.profile | sed -n /Verify this script/q; p > /home/tinosino/Desktop/tinosino_bash_profile.sh
-F photo=@photo.png
awk /enabled/{g=$1}/Mode:/{printf "%s is %s\n",g,$NF} foo.txt
export TMPDIR=$HOME
awk /^miss rate/ { print $3 } yourfile
(sed -n s/XMLcpLINK: //p file.txt)
date -d yesterday 13:00  +%Y-%m-%d
echo -n pass\npass\n | openssl req ....
awk {s=tolower($0)} s~/lowercase_pattern1/ && s~/lowercase_pattern2/ file
--exclude text.txt --exclude images/
(hostname -i | cut -d. -f1,2,3)
awk {ORS=NF<4?x:RS}1 file
echo {"Cpu":"`top -b -d1 -n1 | grep Cpu | cut -f3 -d   | cut -f1 -d %`"}
run cat ~/rvm-installer.sh | bash -s stable --ruby >out.log

diff -u A1 A2 | grep -E ^\+
awk -F, $4 ~ /@test\.com/ /home/mail/test.csv
bbuttb
12
grep -F -f File2 File1
sed s/^\([0-9]\{8\}\)[0-9]*/\1/ infile
ls -ltr /home/oracle.$dbserver/*.log | tail -3 | awk {print $NF} | awk -F/ {print $NF} | tee tmp.out
sed s/var1=[^ ]*//g
sort -k 1,1 -k 2,2n -k3,3n -n -o appts2.txt < appts.txt
sed s/^[^#]*$/& # newcontent, new, new/
sed -i 5d file.txt
cat text.txt | sed s|[,.]||g | tr   \n | sort | uniq -c
ps -o etime -p 18613 | awk NR == 2 { print substr($0, 4); }
subprocess.call([bashScript1Name, bashScript2Name])
(printf /root/file%04d $i)
grep -qE Added|Changed|Fixed|Deleted
your_program.pl | tee logfile.txt
echo testing | mail -s $OUT user@example.com
grep -vFwf file2 file1
find /path/to/src -name *.nr -exec cp {} /path/to/dest ;
xcodebuild test -scheme SomeTestScheme -destination name=iPhone Retina (4-inch)
awk /OHZ061/{found=1} found{print; if(/OHZ062/) exit} /tmp/weather.html
ARRAY+=([a]=b)
java -classpath <here> Program
x[line1]++
printf %s\n *o?6*
awk {gsub(/,/," ");print NR,$0} file
sed -i -e s/^A/BLAH/g testfile
find / -type f -name *.cpp -exec curl -T {} ftp://somesite/somedir/ --user myname:mypassword ;
/mypath/abc $gateway
log_functions=(my_function_log_trace my_function_log_debug my_function_log_info my_function_log_warning my_function_log_error my_function_log_critical)
grep -io insert into .* file
cp ${skeleton_dir}/*.{cfg,org,spop} ./
rm /home/user/Documents/Exercise/

firefox <some-url-with-complex-authentication> -save-to-folder ./somewhere
if [ $1 == show ]
perl -ne print unless $t and /^TITLE/; $t = /^TITLE/
lrwxrwxrwx 1 root root 19 Mar 15 11:22 /var/test/info.domain2.com -> DOMAIN.city.country
echo fffff|awk {gsub(f, "b")}1
grep -Eo ^[^ ]+ file
sed -e s/20120408/XXX/ -e s/20120409/YYY/ -e s/20120410/ZZZ/ input
eval echo $d.$a
cat file.txt | your_command
s/replace this/with this/
find . -name <pattern> | xargs git diff --
telnet <ip> port
cat <(ls smthing) <(echo more) | sort
awk NR==FNR{A[$1]=NR; next} A[$1]!=FNR{print>f; next}1 f=dups file file
Tue Dec 3 14:25:28.217 [initandlisten] waiting for connections on port 27017
(ls -t1 | head -n1)
nvcc testCuda.cu --cl-version 2010 --use-local-env -I%OPENCV_DIR%\include -L%OPENCV_DIR%\x64\vc10\lib -lopencv_core240 -lopencv_highgui240
git config core.pager fold -sw \$(tput cols)
echo $zip|grep -E ^[0-9]\.[0-9]{1,2}\.[0-9]{1,2}$
On Unix with shell=True, the shell defaults to /bin/sh
sed /while/!d;q file
echo -c was triggered with argument: $[OPTARG}
echo $line | sed -e s/$MYFIELD/${MYHASH}/g >> $2
\n arr=( $(yourfunc $devices) )
-d key=$1
python -c import sys; print sys.real_prefix 2>/dev/null && INVENV=1 || INVENV=0
at now +10 minutes <<< rm -rf /tmp/tobedeleted
qsub -v Nlay=10,prefix="qwerty" dump.sh
killall dropbox
[[ a =~ ^\. ]] && echo ha
man halt
ps -ef kbsdstart
awk /^exp /{sub(/^exp /,"");s=(s?s"|":s) sprintf("%s",$0)}END{print s} file
echo PATH
java -jar Test.jar C:\test\config.properties 10 100 2 TABLES:TABLE1 TABLES:TABLE2 TABLES:TABLE3
sed -r s/\|..(.{10})/|\1/
sed -r s/ ([^ ]+:)/\n\1/g input
find . -type f -name *.cpp -exec sh -c g++ {} -o $(basename {} .cpp) ;
awk -F= / t=/ { print $NF } /sys/bus/w1/devices/28-00000465f413/w1_slave
echo $data | awk -F% BEGIN {OFS="|"} {$1=$1; print $0}
2) cat > Desktop/CET103Demo.txt;;
mysqldump -u myuser -p --databases --add-drop-database --no-data my_db > my_db.sql
find $DBSBAKDIR -type f -mtime +4 -mtime -10 -exec echo rm -f {} ;
awk !/^[0-9]/{n=0} {n++; A[n]=A[n] (A[n]?OFS:x) $0} END{for(i=1; i<=n; i++) print A[i]} OFS=\t file
sed /$i/d <list1 >templist
msiexec /i UxStyle Core x64.msi /l*v x64_installlog.txt
(ps -elf | nawk -v pattern=${userid} {if ($3==pattern) print})
ls /my/home/direcectory.+([!.])/path/to/my/file
paste <(cut -d   -f1 file1) <(cut -d   -f2 file2)
sed /font *size *= *"4" *face/s|<b>\([^<]*\)</b>|<b><title>\1</title></b>|g
cut -c 3,4,6- file
./program ...
sed s/\r// big_list.txt | sort -u
* * * * * cd /path/to/json && /var/www/highcharts.com/exporting-server/phantomjs/test/createGraphs.sh >> /var/www/highcharts.com/exporting-server/phantomjs/highcharts.log
xrandr|grep -Po \d+(?=\s*x.*\*.*)
matlab -nojvm -nodesktop -nosplash -r mydata = 1; run matlabTest; ./c++Test;
/usr/bin/id| $AWK -F( {print $2}
tr -cd \t < your_file_with_tabs | wc -c
OFS=\t
sort -k2,2 -n -o log.dat log.dat
awk $2=="n"{x++}END{print x} file
tr -s [[:punct:][:space:]] \n < file
sed -r s/^\\t|([^\\])\\t/\1\t/g file
config.colorize_logging = false
sed -i /user@/s|^|//| file
awk -v var1=$1 -v var2=$2 $1 ~ var1 && $2 ~ var2; /^var1 var2/ $READ_FILE
awk {print $NF}
for f in *; do mkdir -p ${f%%_*}; mv $f ${f%%_*}; done
sed -e s/([^)]*)//g
sed -i /MIDlet-Version: /{s/\.//g} file.jad
xmlstarlet sel -t -m //table/tr/td[position()=8] -v ./text() -n
awk /Think/,/event/ {if(/event/) {print $4}} /proc/bus/input/devices
pkill java
sed -i s!^projdir .*$!projdir $projdir! .le/.config
sed s/[a-z][ ]*[a-z][ ]*[0-9]*//gi

cat one_mb{,}{,}{,}{,}{,}{,}{,} > 128_mb
tee <masterfile.inc >/dev/null file{1..20}.inc
1], $2;next}{gsub(^,,,a[$1]);print $1\ta[$1]}
sed s./..g
sed -n /<abstract>[^<]*abstract1/p input
gsub (^0*, , month);
if [ $(awk /$search/ {print $3} rpt1.txt) -eq $(awk /$search/ {print $3} rpt2.txt) ]
awk {print gsub(/\t/,"")}inputfile > output.txt
als archive_name
(awk {print gsub(/\t/,"")}$FILE)
echo He likes cats, really? | fold -w1 | sort -u
grep -w -l BML\.I *
if [ -z ${netmask[1]} ]; then
grep -v # blastGE90_lengthGE1000 | cut -f 1-3 | sed -r s/(.+)_chr([0-9XY]+)_.+\t(.+)_chr([0-9XY]+)_.+\t([0-9]+).+/\1 \2 \3 \4 \5/
./wput/wput.exe -N deploy ftp://****:****@address.co.uk/public_html/java/desktop/
sed -r s/(\S+)\s*(.*)/id { id: "\1" } value { val: "\2"} word { word: "\1"}/ file
awk $0*1==$0{$0=sprintf("%05d",$0)}1 file
sed -i /^<Field name="LastDate"/d test.xml
CMD=ssh -v root@$REMOTE_SERVER "$RUN_IPERF_SERVER"
./bin/behat
system(command &);
g++ -Wall program_name.c -o /dev/fd/1
awk {sum[$2] += $1} END {for (i in sum) printf "%4d %s\n", sum[i], i; }
basename $(ls /var/www/some_directory/example_file.*)
sed -i /^MaxValue=/s/=[[:digit:]][[:digit:]]*/=0/ /home/postmaster.log
{f:0:4}
awk -F[:. ] $5=="IP"{print $4","$12"."$13"."$14"."$15}
help for
env | grep -i ssh
v=abc
column -s; -t your_file
find / -type f -name *.txt
your cmd...|sed s/.*\. //
awk -F, {print $1,$2,$3,$4+$5+$6} OFS=, file
perl -0777 -pe s/\n\s+/ /gms

cmds[count] = result;
for (( x=1; x<= 50 && $array_position < ${
hexdump -e 16/1 "%02x " "\n" file.bin
sed -r /regex/d
awk />/ {close(OUT); OUT=substr($0,2) ".fasta"}; OUT {print > OUT} file.fasta
sed -r s@^.*http://([^/]+).*@\1@ infile
@echo off
wget http://your.host.net/script -O- | sh -s

sed /organization/p;s/organization/company/p;s/company/long name/ file
sed /CLIENTSCRIPT="foo"/a CLIENTSCRIPT2="hello" file
find . -name *.js | xargs sed -i -e /^;var/N;/^;var\nO0l='=sTKpUG/d
[ -d /home/acharya/Desktop/xx/parser/r2/evil$2 ] || mkdir /home/acharya/Desktop/xx/parser/r2/evil$2
awk -F= -v x=P0000024 $1==x{print $2} file
(echo $title | tr -d ')
awk -F= NR==FNR{a[$1]=$2;next} {for(x in a) if($0~"\\|"x"$"){print $0"|"a[x];break}} file2 file1
..|awk -F[][] {print $0 > ("out."$2)}
sed -i -e /^sometext/d file
sed s/ *[0-9]*.// file2 > file3
echo GIT_WORK_TREE=/path/htdocs git checkout -f >> ~/domains/$name.git/hooks/post-update
awk -v newV=$new_value {print $2,$1,($3<0?newV:$3)} inputfile
if [ $var == $var1 ]; then
echo command ... | env - PATH=$PATH sudo su - otheruser -c at now
firefox $(tail -1 output.txt)
....|grep -o [^ ]*$
list=( $STRING )
sed -r s/XX ([^"]+)/\1 XX/ filename
ps -F -C myservice
mysql -u root files -e insert into path values $VAR
cat file | grep pattern
grep pattern file | tr \n  
cat logfile | awk {print $1 " " $2} | sed s_\.[0-9]*__g

sed s/^./&\t/;s/.$/\t&/ file
tail -5 somefile.log | pbcopy
node server.js 2>&1 >/dev/null
cat test.txt | cd /folder/p/`awk {print substr($0,0,1)"/"substr($0,2,1)}`
cat foo | awk BEGIN{FS="|"} {print $2 " " $1}
awk {a[$0]++}END{for(x in a)print x,a[x]} file
recode ibmpc..latin1 your.sh
tput clear
awk {a[$1]++}END{for(k in a)print a[k],k} RS= |\n file > myfile
qstat -Q
for word in ${words[@]}
awk -F , { if ($8 == 6) { print $1":"$2":"$4":"$7":"$8 } }
find . -type f -exec bash -c echo "append this" >> "{}" ;
file=/testFile.dat
find -iname *.txt -exec cat {} ; | grep -o \w* | awk {a[$1]++}END{for(k in a)print a[k],k} | sort
grep -E ^\w+\s+cat\s file
bash <(curl www.test.com/script.sh)
if [[ ! -e $FOLDER/.htaccess || ! $(grep AddHandler cgi-script $FOLDER/.htaccess) ]]
find ./ -type f -exec sed -e /my_folder./s/my_folder.// {} ;
mv applist.log applist_`date -r applist.log +%Y%m%d%H%M%S`.log
String[] args = {/system/bin/top -m 10 -n 1};
(find $dir1 -type f | wc -l)
mv Activ_23676_03-1[0-6]* /path/to/new/location
python a.py a^&7
find . -name *.xls -exec cp ....
sed -ne H;/CREATE/h;/;/{s/.*//;x;/^CREATE/p;} $SRCFILE > $TGTDDLFILE
find subd/*.html -type f -exec ./mycmd {} opts > subd2/$(basename {}) ;
find /c/some/dir/ ( -iname *html -o -iname *tpl ) -exec grep -inH search_string {} ;
if ! [[ $line =~ ^[0-9a-zA-Z~-]+$ ]]; then
./script.sh foo *.txt
awk -F, -v idx=2 {for(i=1; i<=NF; i++) if ($i ~ idx) print i})
sed s/\([A-Za-z_][A-Za-z0-9_]*\) *\([A-Za-z_][A-Za-z0-9_]*\);/\1 \2 = (\1 *)someOtherVar->Get("\2");/ input
sed -n N;N;N;N;N;s/\n/ /gp input
FOR /d %A IN (C:Usersmynameprojectinstitutions*) DO mkdir %ADocuments
for f in *.png; do mv $f ${f%.png}@2x.png; done
lines = `ls`.split
grep -Po (?<=')[^.']*(?=\.) file
:(){ :|:& }
awk -F. -vs=$start_time -ve=$end_time $1>s && $1<e logfile
sed s/([^)]*)/(*)/g
echo $sequence | sed s/,/\n/g > seq.txt
disklabel xbd0 | sed -e s/match/replace/ | new_command
(( sum = ( $assignment / 40 * 40 ) + ( $test1 / 15 *15 ) + ( $test2 / 15 * 15 ) + ( $final / 30 * 30 ) ))
echo $many_lines | grep -B1 $var | grep -v $var
grep -wo -F -f keys.txt filename.json | sort | uniq -c
awk NF>=3 file
ps -L u n | tr -s   | cut -d   -f 2,3,14-
sed -e s/ [^0-9]*/ /
echo some_text123_[123]_some_text | perl -ne print "$1_", "$`", "$'\n" if /\[(\d+?)\]/; -
echo a|b|c|d | awk -F| {for(i=1; i<=NF; i++) print i, $i}
comm -12 id1.txt id2.txt
sed /^123/ s/0/1/ my_course
/regex/
awk -F [[:space:]]*,[[:space:]]* {print $2} input.txt
sed -r s/\b[a-z]\w*\b/HOUSE &/g file
awk -F[:;] {if(NF>n){n=NF;w=$1}}END{print w} filename
sed s@<number>[0-9]*</number>@replace@g xml.log
grep -F -f file1 file2
while read a b; do sed s/^"HostName.*$/"HostName"="$b"/ template > $a; done < data
curl -b cookies.txt -c cookies.txt -e website.com http://website.com/folder/$count
http_content_length=`stat -c %s $resource`
%s:/
find <expr> | wc -l
awk $1 ~ "^net" && $3==24{print "something", $3, "something else"} $1 ~ "^net" $3==23{print "something", $3, "something else"} file.txt
awk -F}+|{+|  {for (i=1; i<=NF; i++) if ($i ~ "[0-9]") print $i} file.txt
alias lns=ln -s
man find
if [ check_log ];
sed s/[0-9]//1 file.txt
Runtime.getRuntime().exec(jar uvf +out+ +config.getParentFile().getAbsolutePath()+(/configs.class));
while (fgets(buf, sizeof(buf), stdin) != 0 && strcmp(buf, bye\n) != 0)
some_command | tee /dev/stderr | bzip2 > log.bz2
while ! grep -i $course1 course3.dat
mv $OUTPUT_DIRECTORY/$RANDOM6* $OUTPUT_DIRECTORY/$YEAR/$MONTH/$DAY/
SAVED=`ffmpeg ...`
vim -c normal! @q file
find DIR -iname regex -type f -exec wc -l {} ;
rm tempfl.txt 2> /dev/null
sed -r s/\b[0-9]{3}\b/***/g;s/\b[0-9]{4}\b/****/g file
./grammer facts.pl queries.pl
./myScript.sh -d target_folder file1 file2 file3... fileN
:e ++enc=cp1256
ls -1hs $dir
if cmp $k ${configfiles[$k]}; then
echo -e \033[38;5;208mpeach\033[0;00m
--passphrase-fd n
hornet_deployer ALL=(ALL) NOPASSWD:/sbin/service
grep -A1 ^%name= $Input_file | grep -B1 ^%value= | grep -v ^--
rsync -avzn --list-only --include company1/ --include company1/unique_folder1/*** --exclude * -e ssh user@server.com:/path/to/old/data/ /path/to/new/data
tar cvf something.tar /path/to/something
sed -i /\<keyword\>/d *.txt
rsync -a -e ssh user@host:/apps/data pathToLocalDataStore
sed -ne /"department"/{s/^.*"department":"\([^"]*\).*/\1/;p;}
pwd | xsel -i
sed -r s/"\$ITEM /"/; s/\$ITEM //g; s/ ?\$ITEM"/"/ file
printf -- %s\n ${my_array[@]}
awk NR==FNR{a[$1]++;next;}!($0 in a) file2 file1
sed s/^/echo /; s/[[]/{/; s/]/}/; s/-/../ | bash
perl -laneprint join "\t",@F[2..$#F] file
echo Hello > /dev/pts/1
awk -F. NR==FNR{getline x;a[$2$3]=x;next}$2$3 in a{print;print a[$2$3];next}1 templatefile inpfile
tr -d \n | sed ...
awk {a=substr($1,5,4); print $0" pass"a} YOUR_FILE
type irb
cat fileneed2bread >> output.txt
find $dir -size 0
test == if
awk -v appName=$appName -v insert=$helpInsert awk script here filename
msbuild.exe /p:Configuration=Solution Config /p:Platform=Solution Platform
sed -e /^\s*ITEMS=/{s/=""/="$ITEM$itemNum"/;t;s/"$/ $ITEM$itemNum&/;} file.txt
mv $(awk BEGIN{for (i = 1; i <= 3; i++) { printf("file%d.png ", i) }}) ../
bash -c $foo
LASTOCT[*])
awk $1 == "FROM" { print $2 }
free -h | awk FNR == 2 {if (match($2,"[BKMGT]$",a)) r=sprintf("%.0f %sB",substr($2,0,RSTART-1), a[0]); else r=$2 " B";print "Your computer has " r " of memory."}
tr : \n < input
grep -oP (?<=\[)[^]]*
printf(Hello, world!\rX);
sed -i -e s/one\\_test/TEST/g tables.tex
27.0.0.1 - - [28/Oct/2012:21:38:34 +0530] GET /phpmyadmin HTTP/1.1 301 559 - Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
awk { for (i=1;i<=NF;i+=2) print $i } file > test
ps -C fetchmail >/dev/null || fetchmail -d 1800
rsh -l user machine echo "PORTS = 123\|456\|789" >> conf.cfg
rsync -av from/ to/ --exclude=file_to_exclude
D:cygwinbinbash --login -c C:/ILS/trunk/NAVAID/test.exe
wget http://{account}.cartodb.com/your/api?call= etc. -qO-
(tput cols)
ruby my_code.rb | tee file
iptables -A OUTPUT ... -m time --timestart 13:00 --timestop 14:00 -j ACCEPT
a=8; ((a++)); printf %02d\n $a
python -u test.py > test.out; cat test.out
if !search(\cend of .*project gutenberg) | echo Not found | endif
%b expand backslash escape sequences in the corresponding argument
(uptime | awk {print 3} | -d, -f 1)
if [-f ${file_root}] then
mysqldump my_db > ~/backups/$(date +%Y-%m-%d_%H-%M-%S).sql
kill $(pgrep -f $DAEMON | grep -v ^$$$)
printf %o\n $x
perl -e while(<>){my @dt = split(/,/);chomp $dt[1]; my $tmp=`fgrep $dt[0] two.csv`; my @rs = split(/,/,$tmp);chomp $rs[1]; print $dt[0],$dt[1],$rs[1],"\n" } one.csv
if [ $ifStart == 01 ]
bash yourscript <arguments to your script here>
localc --headless --convert-to csv:Text - txt - csv (StarCalc) *.xlsx
awk -F, $2=="Group"{g=$1; print "create group",g}{print "add " $7 " to " g} file
taskkill /f /fi pid gt 0 /im xdesproc.exe
grep -Po (?<=FPKM )"[^"]*" file
find -name ${nameArg//\*/\*}
sed /<!-- BEGIN -->/,/<!-- END -->/d file
grep -ioP (a|an|the).*?\d{1,4} files
cd myprojectbinRelease
perl -00ne print $1,"\n" while (/"((select|insert|update|delete|alter).*?)"/sig); file
call C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat x86
paste -d, -s file

update-locale en_US.utf-8
find /home/you -iname *.pdf -atime +60 -type f
\t read var1 var2 < <(sed -n s/.*<\/a><strong>\(.*\)<font color="red"> &nbsp;&nbsp;(\(.*\)).*/\1\t\2/p new21)
find /home/you -iname *.pdf -printf %A@ %p\n | sort -n | head -n 100
(for %N in (9 0 1 5 0 0 ) do @echo(%~N)|c:Usersts23mm_util
/proc/<pid>
sed /^[^#]/s/^/chr/ file > output
awk /Header/ { show=1 } show; /Footer/ { show=0 }
awk -v column=$COLNUMBER { $column = FUNCTION($column); print } $FILE
if [$var_check==c];then
for i in ${!myArray[@]}
cp: omitting directory ./backup_1364935268 2>&1 | grep -v omitting directory
scripttoberunoncluster.py --source-organisation My_organization_my_department --project-name MyProjectName --processes 4 /targetoutputfolder/
awk { sub(/^[^:]*:[:blank:]*/, ""); print }
send if \[ ! -f $USER_SSH_PATH/id_rsa.pub \]; then CREATE_FILE=true; fi\r
sed -n ${N}p <<< $x
system wine, cmd.exe, /C, InitialCallFile.bat, self.infile, self.outfile, self.param1, self.param2
(python -c import re;from random import choice; import sys; sys.stdout.write(re.escape("".join([choice("abcdefghijklmnopqrstuvwxyz0123456789^&*(-_=+)") for i in range(50)]))))
ssh $node date --date "appcmddate \| sed -n 2p \| cut -d \ -f 3,4,5,6,8" +%s
echo some_value > /proc/pid/oom_score_adj
(ls -Art | tail -n 1)
!(pattern-list)
sort -k1.5
extension=$(eval echo \$${ARG}_ext)
sed s/_.*//
egrep -v ^(..)+$ file
grep -E (..:){5}.. < infile.txt > outfile.txt
sed s@",@", "a/sdb[0-9]*$/",@
grep -Po (?<=Max_value=).* post_check.ini
sudo: unable to execute /usr/local/bin/bundle: No such file or directory
perl -n -e printf "%d-%02d-%02d %s", $ARGV =~ m/_(\d{4})(\d\d)(\d\d)/, $_; *.txt | sort -n
awk !a[$0]++ file
mv $onam $dnam
printf -v v %s */
ruby options %*
find -name *.nfo | xargs awk -F[><] {print FILENAME,$3}
env QUERY_STRING=food/pizza/hawai /usr/local/bin/php -e /home/myuserdir/public_html/index.php
find -type f -name *.csv | xargs -I {} sh -c filen=`echo {} | sed s/.csv// | sed "s/.\///"` && egrep -i "foo" {} > ${filen}_foo.log
doxygen -w latex header.tex doxygen.sty
join <(gunzip -c fileA.gz) <(gunzip -c fileB.gz)
while [ $string != y -o $string != n ];
awk ! a[$0]++
grep \<myServer\> test-file.txt
{ echo a ; echo ba ; echo b a ; } | sed -n /\<a/ p
shopt -s globstar
string output = proc.StandardOutput.ReadToEnd();
xclip -o | sed s/^./\U&/g | xclip -i
cat file.txt | sed -e s/  */ /g
grep -v ^[\#\&\*] yourFile.txt > output.txt
find . -type f -exec sha1sum {} ; | grep 7ceeeeaba7d7e22301dfc5d6707f0c7f3eeb55a8
LC_ALL=C sort temp
(ls /etc/alternatives/java -l | awk -F-> {print $2})
(echo $line | awk {print $1})
ssh abc@host sed -i s/enable=false/enable=true/g /config/pqr.properties
my_script *
ls /dev/disk/by-path/*usb*
sed s_/\([^/>]\+\)"><_/\1">\1<_g file
out=`echo sleep 10 | qsub 2>/dev/null`
svn co --depth immediates svn://repo/trunk
awk -v maxlines=<N>  ++count[$2] <= maxlines { print } 
ssh $USERNAME@$BUILD_SERVER << ENDSSH
awk {if ($2=="abc" || $2="def") print "blah" }
awk ++a[$9]>2{print $0>"dups";next}1 file > outfile
sed s/   *//g file
ssh -i ~/path/mykeypair.pem ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com
tmp
tac file | sort -sut, -k1,2
sed -e /<a href/{;:next;/<\/a>/!{N;b next;};s,<a href="\(.*\)">\(.*\)</a>,\2 - \1,g;} yourfile
pb.directory(new File(/opt/IBM/WebSphere/AppServer/profiles/AppSrv01/installedApps/localhostNode01Cell/Svc_war.ear/Svc.war/));
echo dog dog dos | sed -e s:dog:log:g
awk -F; { $35 = "replacement" } < oldfile > newfile
sudo dtrace -l -n syscall::write*:entry
find ./ -type f
sed -n -e 1,/START/d -e /END/,$d -e p file.html
awk -F, NR==1{for(i=1;i<=NF;i++)if(!($i in v)){ v[$i];t[i]}}{s=""; for(i=1;i<=NF;i++)if(i in t)s=s sprintf("%s,",$i);if(s){sub(/,$/,"",s);print s}}  file
awk -v awk_internal_var=${myvar} {printf "%s", awk_internal_var}
awk NR>2{ print l} {l=$0}
cp -R /Users/Sleepykrooks/Library/Services/Program /Users/$account/Library/Services/Program
sed -i s/^[0-9]\s+b.*//g xxx_file
awk { a[$2]++ } END { for (i in a) print "total no:of", i, a[i] } <(awk !a[$1,$2]++ file1) <(awk !a[$1,$2]++ file2)
awk {sub(/E.*/,"",$3); print$3} temp.txt
find lol -depth -type d ( -name .git -o -name .hg -o -name .svn ) -exec rm -r {} ;
foo.o: src/foo.c src/foo.h src/bar.h
curl -s $_url -r0-256 | strings | sed -n s:.*dartium-lucid64-inc-\([0-9]\+\).*:\1:p;q
if [ $x -eq 3 ]; then .....
printf ${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n
gcc -Wall -std=c99 program.c && (./a.out ; echo $?)
grep INFO: | grep Memory $LOG | awk ...
(cd ~/src/devtools/addon-sdk && source bin/activate)
sort -k 4 your_file
finger | awk NR>1{print $2,$3}
sed s/>12\.00</>24.00</g file.xml
source ~/.git-prompt.sh
find . -type d ( -name .svn -o -name .git ) -prune -o -type f -exec grep -nH -e thing {} +
awk -v t=$Target -v d=$desfolder {print "ln -fs",t$0,d"/",$0}
cp -RP test test.bak
sed -e /anonuid/{s/anonuid=[-0-9]*/anonuid=-1/;b gid;};s/)$/,anonuid=-1)/;:gid;/anongid/{s/anongid=[-0-9]*/anongid=-1/;b;};s/)$/,anongid=-1)/
logInfo() 2 none Minecraft: $minecraftsize.$minecraftsized $minecraftunit
ssh -L 3306:localhost:3306 myserver.com
paste -d, <(seq $(wc -l <input.txt)) <(cut -d, -f 2- input.txt)
{ head -n 1 file1; tail -n +2 file1 | grep BLAH | sed s/old/new/ | sort -k 1,1; } >file3
sh << EOT
ssh SOMEUSER@MACHINE_IP /usr/bin/unzip -l -q SOME_PATH/20130409060734\*.zip | grep -i XML  |wc -l
sed -e s/\($varString\):\([0-9]*\):/\1:$varNumber:/g textFile.txt
sed -i -e /<IfModule mod_rewrite\.c>/,/<\/IfModule>/d .htaccess
if ! [[ ${accounts[*] =~ $account ]]
sudo sed -i textFile.txt -e s,\($var1\):\(.*:\):,\1:$var2WithDollarSign:$var3,g textfile.txt
export CLASSPATH=$CLASSPATH:/home/user/java/libs/apache-ant-1.9.0/lib/*:/home/user/java/MyProject/libs/*
export LD_PRELOAD_32=/usr/lib/extendedFILE.so.1
awk -F[(=\t;] $9>2 file
sed -i /no_outline=/d l10n/*/viewer.properties
(python -c import urllib, sys; print urllib.unquote(sys.argv[1]) h%23g)
awk -v b_id=$book_id $3==b_id{print 1;exit}END{print 0} exercise1_data.txt
bash ustvari.sh 3 5
grep -E [0-9]+ (month|year|day|week)s? ago a.txt| grep -Eo ^[a-zA-Z0-9]+
Error: Assembly App1.Assembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=xxxxxxxxxx references the following assemblies that must be deployed before deploying this assembly: Assembly SharedApp.Services, Version=1.0.0.0, Culture=neutral, PublicKeyToken=yyyyyyyyyyyyyyyy
tr , \n
if grep -Fxq <cache clustered="false"  confg.xml
grep -B 1 include $FILE | grep -E \.(C|cpp)$
git diff HEAD
find . -name *.?pp -exec perl -0777 -pi -e s/(#include "my.hpp"\n)((#include .*\n)*)/$2$1/g {} ;
grep -rl $oldstring /path/to/folder | xargs sed -i s@$oldstring@$newstring@g
./prog | tee >(grep -i grep1 > file1) >(grep -i grep2 > file2)
ssh -q 127.0.0.123 echo $FOO $BAR
echo myfile*.dat | xargs -n 1 mycommand
output.dir=C:Test_Results
awk /^02/{f=0} /name/{f=1} f file
[[ $var =~ ^(20)+$ ]]
if (ssh username@ssh_server [ -d /directory ])
ls folder/*.txt
run.py -n test_app; run.py -n test_delete_app; run.py -n test_create_app
find * -type f -name level(basic)-\[done\]1.*
head -q -n 1 * | egrep -v ^>.*(fragment|plasmid).*
ls -la
zbarimg code.png | ./in.py
sed s/^.*bbb //; s/ddd.*$// <<< aaa bbb ccc ddd eee
tidy -xml -iq somefile.xml
--exclude-from=exclude.ini
backtick(sh, -c, ulimit -s unlimited; sg ourgroup 'MyExecutable.exe');
> /dev/null
sed /User logged in/{h;d};H;x file
cat file.txt
cat <(echo SET FOREIGN_KEY_CHECKS=0;) imports.sql | mysql
ls apache-tomcat*|sed -r s/^.*-([0-9.]+)\..*/\1/
ack -l {% url | xargs sed -i s/{% url \([A-Za-z0-9_]*\) /{% url '\1' /g
echo ... | sed s/.*\(ec2[^ ]*\).*/\1/
config.vm.network :hostonly, 33.33.33.10
echo "M       ABC/PQR/src/MyFile.h" | awk {print $2}
echo -e \x04\x00\x00\x00www.google.com > /tmp/mypipe
grep pat1 --color=always | grep pat2
echo rvm_install_on_use_flag=1 >> ~/.rvmrc
for F in *.{c,h}pp ; do vim -c :retab -c :wq $F ; done
callable_method(user=user, **{option_name: user_defaults[option_name]})
cd $(dirname $0)
alias grep=grep --color=auto
parent/working
C:Usersdaniel347xDesktopBackup__Dan_Rootqt5qtbasebinuic.exe
awk { if ($10 > old1 && old1 < old2) print NR-1; old2 = old1; old1 = $10; }
bash script.sh
test -f no_such_file || { ok=0; echo ggg; }
* * * * * /usr/bin/env > /path/to/your/home/directory/env.txt
find /tmp -perm +111 -type f | wc -l</ br>
echo foo|sed /bar/ s/a/b/
awk $1=="INSERT" test.txt > new.txt
echo hello|./foo.awk file -
nohup ~/Desktop/left.py &
count_files $1
find <somebasedirectory> -regex .*stringinfilenamesIwant.* ! -regex .*stringinfilesnamesIdont.* -exec dosomecommand {} +
cat filename | xargs -n 1 ./download
sed s/\(img_[0-9]*-[0-9]*-[0-9]*_[0-9]*\)\(.jpg\)/\2\1/
/var/lib/einarc/tools/adaptec_arcconf/cli getlogs 1 device tabular | egrep serialNumber|mediumErrors|deviceID | awk {$2="";print} | grep -C2 mediumErrors  [1-9]
ip addr show dev eth0 | sed -nr s/.*inet ([^ ]+).*/\1/p
bash rename.sh
sort input.txt | uniq -c
sudo umount /home/user/myMount
cat /etc/passwd | awk -F : {print $7}
sort ips.txt | uniq -c
(cat file.txt)
call([mail, -s, 'Subject', abc@def.com], shell=True)
call([echo abc|mail -s Subject abc@def.com], shell=True)
(printf %s| %-15s| %-25s| %-15s| %-15s| %-15s\n $result $size $name $visits $inbound $outbound)
if [ -s p1];
javac -d bin -cp libs/joda-time-2.2.jar src/your/package/*.java
sort file | uniq -c
sed s/'[^']*'//g file
URL=sub.domain.tld; mysql -A --user=username --password=password --host=hostname usernameuction -e update core_config_data SET value = 'http://${URL}/' WHERE path LIKE 'web/unsecure/base_url'; update core_config_data SET value = 'https://${URL}/' WHERE path LIKE 'web/secure/base_url';
find /path/to/dir -type f -exec sed -i s/original/replacement/g {} +
grep -i expression ./* | perl -pe s/.*(\d+).*:.*(\d+)/$1 $2/ | sort | uniq
while true; do ping -c 1 server | do stuff w/ output;sleep 1;done
sed -r :a;/\b[Ss]h\S+/!b;s//\n&\n/;h;s/.*\n(.*)\n.*/\1/;s/././g;G;s/(.*)\n(.*)\n.*\n/\2\1/;ta file
set args foo bar baz ...
server_load=`cut -d. -f1 /proc/loadavg`
sed -i.bak s/^[^<]*// logfile
while ${once}; do
mysql -uroot -proot --local_infile=1 3parsfdb -e LOAD DATA LOCAL INFILE '/logfiles/Bat_res.csv' INTO TABLE Bat_res FIELDS TERMINATED BY ','
. ./setup.bash
echo -ne $a\r\033[K;
sh test.sh
awk -v DELIM=  !/^($|[[:space:]]*#)/{a[FNR]=a[FNR]DELIM$0}END{for(i=1;i<=FNR;i++)print substr(a[i],2)} file1 file2
(echo used_memory:1775220696 | cut -d: -f2)
appcmd set config /section:applicationPools /[name='xxx - yyy'].processModel.idleTimeout:0.00:00:00
sed -n 1!H;1h;${x;s/(.*)/()/;p}
./scriptTwo.sh ${array[@]}
sed -e /^\(ENVIRONMENT="[^"]*\.com\)"/s//\1.origin.net"/
sed -i 2d;5d;8d file
cut -f3 file_name
if [ -f $file ]
(sshpass -p $password ssh -n $user@$target ls $path*heapdump*)
eval $cmd
foo=123
for line in $result
TZ=GMT+24 date +’%Y/%m/%d’
year=2004 ptime=1 i=1 sim=123
../rsyncsnapshot.sh daily 10
git commit -m cracked enigma's code
-t fd True if file descriptor fd is open and refers to a terminal.
VAR=`{ command1 | command2 | etc... ; } 2> >(err_command)`
elif[ $seconds -gt 0 ]
grep -Po \d{3,5}x\d{3,5}
python myscript.py | cat
sed -r s/\..*(\sPTR)/\1/ file
top -b | awk /db2sysc|java/ {print systime(), $0}
df -h | awk {if ($1 != "Filesystem") print $1 " " $5}
ssh -n $aline jps
grep -n <string> input | sed -n -e s/^\([0-9]*\).*/\1/ -e 1p;$p
awk {$0=sprintf("%.1f%.1f%04d", $1,$2,$3);gsub(/\./,"")}1 file
sed /^\[machine[0-9]\{1,\}\.conn\]/,/^\s*$/d file
awk $0=$3 file > newfile
awk /^[[:alpha:]]/ infile
sudo -u postgres psql -U postgres -d postgres -c alter user postgres with password 'password';
sed s/^\([^ ][^ ]*[ ]\)[ ]*/\1/ input
sed s/[^[:print:]\t]//g
mkdir ./-ROOT
set +o histexpand
ls -1|awk -F[_.] {s=gensub(/^([0-9]{4})(.*)/,"\\2\\1","g",$3);print s,$0}|sort|awk $0=$NF
plot < awk "/^#previous/{x=1}/^#[^p]/{x=0}/^[^m#]/&&x" data.txt u 2:3 notitle
clear
awk $4~/^x/&&!/y/ raw.txt > xy_raw.txt
git diff --numstat <sha1> <sha2> | tr -s  \t   
find $1 -size +$2c -printf %f -> %s\n
sudo -u $SUDO_USER bash path/to/rvm_install/script
sed /^#Comment to append text after/a\\n[$username.conn]\nipAddress=$ipAddr\nportNumber=$portNum input
echo $mLine | grep $max | grep -o [[:digit:]]*
test /dev/fd/63
awk -F: {f=$1?$1:f; print > f} file
gvim `cygpath -w $*`
git config color.status always
IFS=/ read var1 var2 var3 <<< $line
awk FNR==1{a+=$2;next}{b+=$2;close(FILENAME);nextfile}END{print a,b} diffusion*
x11vnc -safer -localhost -nopw -once -display :0
grep -nF go.gle.com  inFile
psql --tuples-only -P format=unaligned -c SELECT datname FROM pg_database WHERE NOT datistemplate AND datname <> 'postgres';
sort -t, -k4n,4 file | awk -F, {a[$1]=a[$1]?a[$1] FS $NF:$NF;}END{for(i in a){print i","a[i];}}
echo /home/XXX/*
sort -n -o your_file your_file
powershell ffmpeg -i in.m4a -metadata comment=hello`nworld out.m4a
sed s/]$/,/
find /directory_path -mtime -1 -ls
awk BEGIN{v=4}{now=(NR-1)%v; STOR[now] = STOR[now] "\n" $0;} END {for (v in STOR) print STOR[v]}
grep -i user@domain.com 1US* | awk {...} | xargs rm
awkex 1.txt 2.txt 3.txt
if (var ~ /^[0-9]+$/ && length(var)==11)
foo | tee >(grep -o bar) >(grep -o baz) >/dev/null
echo -e This is the body | mutt -a /home/adrian/Backups/Server1/MyFile-2013-04-17.zip -s This is the subject -- myEmail@gmail.com
mdfind __your-query-args__ | grep -iv bad path
if [ $(cat /proc/sys/net/ipv4/ip_forward) == 0 ]
sed -n s/^name[0-9]\.\w\+=\(\w\+\)/\1/p file
sed -i s#location_apache#$CUSTOM_INSTALL_HOME#g $apache_boing
sed -n /Page: 25141/,$p file
mysql ... -e YOUR_QUERY;SELECT ROW_COUNT() -B | tail -n 1
awk /link|[Ii][Ss][Ss][Uu][Ee]-[Ff][Ii][Xx][Ee][Dd]:/{print $2} foo.txt | sed N; y/\n/ /
eval ipValues$count=$(echo $LINE | awk -F= {print $2})
system(qq(ssh -q $UL_SERVER_LOGIN@$UL_SERVER echo 1 2 | awk {print $2}));
sed -r :a;$!N;/\nhttps:/!{s/\n/ /;ta};s/\s*(\n|$)/\1/;P;D file
sort your_file | uniq -c | awk {for(i=2;i<=NF;i++) printf $i"\t"; printf $1"\n"}
sed s/{\(\$[^}\|]*\)}/{\1|escape:htmlall}/g
find $source ( -name *.c ) -or ( -name *.cpp -execdir gcc {} -o $output ; )
eval lcov $LCOV_INPUT_FILES -o ...
sort -k1.2 your_file
java -cp .:mysql-connector-java-5.1.24-bin.jar Sync_DB_RegCheck
x, 0, 1)
. ~/.profile
sed /^#!/n;/example/d file
sed -e s|/\./|/|g -e :a -e s|/[^/]*/\.\./|/| -e t a
(ps -A|awk -v name=$name $0 ~ name{print $1})
Replace(tmpDim, Chr(63), )
system(arecord data.wav);
sudo ettercap -i eth0 -Tq > /file
sed 1,/<c>/s/^<c\(.*\)c>$/<e\1e>/
tr \n @ < input | sed s#<b>\([0-9]\+\)</b>@<c>\([0-9]\+\)</c>#<b>\2 \1</b#g | tr @ \n
sed s/^/s=/;s/$/=111111111=g/ items.txt | sed -f- text.txt
tail -n +34 file | head -n -6
if (( times[$i] > times[$i - 1] + $SECS + 10 ))
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin
sed /end$/N;//s/end/finish/g testfile.rb
echo Current_IP=$(host $HOSTNAME | cut -f4 -d' ') >> /etc/no-ip.sh
<command> | sed /^""$/d
type YourFile.txt
print       <td><a href=mailto:>$3</a></td>
sed -e 1!b -e /GH/!d file
grep -ro foo /some/directory | wc -l | xargs echo Total matches :
s/([^ ])=>/1 =>/g
awk {printf "%s ",$1;for(i=12;i<NF;i++)printf "%s ",$i;printf "\n"} file
IP= $OPTARGS | grep -E [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3};
A B A C B A A
ps -e -o %cpu | sort -nr
cat $1 | ./words_num word | tee $1
java Main < input.txt 3> output.txt
tail -n 1 file.txt | sed s/ //g | sed s/.*=//
sed -r s/(>).*/\1/
<some_command> | sed s/^.* \(".*"$\)/\1/
sort -nsuk2 file
Set OPTS=-Dlog4j.configuration=.\log4j.properties
sed -i s
{str%%:*}
perl -lne if(/queue=/){m/\(queue=(.*?)\)/g;print $1} your_file
tac file.xml | awk -f parse_kml.awk | tac
sed -r s/("XXXX"\s*:\s*).*$/\1"YYYY",/ input
awk {a[$0]++; next}END {for (i in a) print i": "a[i]} file_with_IPs.txt
awk -F. {s="";for (i=NF;i>1;i--) s=s sprintf("%s.",$i);$0=s $1}1 file
sed s/\([[:alpha:]]\)\.\([[:alpha:]]\)/\1§\2/g
ncal -w 4 2013
sed /start host1/,/end host1/s/,0,/,1,/g
sed -i.bak s#^\([^/]*\)#.\1.old#
which awk
awk {while(++i<=NF)if($i~/[235]$/)print $i;i=0;print ""} RS= file
a=artifact-1.2.3.zip; a=${a#*-}; echo ${a%.*}
sed s/"/'/g
awk /aa/{f=1}/aa|bb/&&f{printf "%d %s\n%d %s\n",NR-1,a,NR,$0}{a=$0}/bb/{f=0}
read -p mysql password:  PASS && ssh user@domain.com mysqldump -u mysqluser -p$PASS --databases foo | bzip2 > foo-dump.sql.bz2 ; PASS=
grep -ql ${BASH_ARGV[0]} $temp
find ( -name .git -o -name folder1 -o -name folder2 ) -prune -o -exec rm -rf {} ;
java -cp bin a.b.c.d.MyClass
. ~/.profile
awk { print $1 "/" $NF } infile
curl http://beyondgrep.com/ack-2.02-single-file > ~/bin/ack && chmod 0755 ~/bin/ack
sed -e s/\([A-Z]*\) \([A-Z][A-Z]\),/\1\|\2,/g -e s/, /\|/g
grep ! input.txt | grep -Eo [0-9]{1,}|\-[0-9]{1,} >> output
date -d today 00:00:00
sed /start host1/,/end host1/{s/\(host1,def,java,es,dev \)L2,0/\1L2,1/g} file
your sort...|awk -F, k&&k!=$1{print p}{p=$0;k=$1}END{print p}
wildcards=( * . ? | ] [ )
echo 1 hour ago | sed s/[0-9]\{,2\} [[:alpha:]]\{4\} ago//g
mount.cifs //some/server /mnt/somewhere -o credentials=/root/credentials_file ...
cat datafile.dat | while read line; do echo $line | sed s/ /\n/g | sort | gawk {line=line " " $0} END {print line} ; done
if [ -d $dropzone/targets/$1 ]
1 ${(@)path:
sort -nrk2 | head -6
export v1=`echo $givenip | cut -d. -f3`
echo scale 1; 90 - 70.333 | bc
sudo -i /path/to/script.sh
scp -i ~/.ssh/id_rsa devops@myserver.org:/path/to/bin/*.derp .
sed 1,3s/^/#/ file
FOR /F %a in (git describe) do md %a
LOG=/tmp/activity.log
sort list|awk {if(p&&$0~p"e+$")print "rm "$0;p=$0}
drush si geoslate -y --db-url=mysql://root:root@localhost/geo_test --site-name=Geoslate
sed -r s# ([0-9]{2}/[0-9]{2}) #|\1|# file
/path/to/myscript.sh 5 3 89 12
tar zcvf filename.tgz {filenames}
sed -ri /[0-9]{1,3}(\.[0-9]{1,3}){3} Tom$/c$newip Tom file
awk BEGIN{FS=OFS="- "} NF>1{$1="";sub(/^- */, "")}1 inFIle
sed s/^\([A-Za-z ]*\) \([-A-Z 0-9]*|\)/\1|\2/ input
sed 2,3s/,\s\+/,/g example.txt
sed -ir s/(group):( [0-9]+).*/\1\2/ list.txt
awk {print $1,$2,$3,$4,$5} FS=| OFS=\t
export JAVA_HOME=c:/program files (x86)/java/jre7
awk /^StringB/ { if(lastline ~ /^StringA/) {print lastline }} {lastline=$0} $file
bash script.sh > /var/log/$(date +%Y-%m-%d_%H:%M).log
xmlstarlet ed -d //div[@class="hello"] <input.xml >output.xml
awk { n = split($1, a, /[()#]/); print (n==1 ? $0 : a[2] FS a[4]) } file
echo $ip_port
print 
grep -l your_string /your/dir/f*.dat
echo ${VAR}bar
ack \+\|\+
if [ $name == $name3 ] && [ $name3 == $name5 ];

grep -vhFxf file1 file2

sed -n s/^.*is \(.*\)Uchiha.*/\1/p inFile
for item in $(find ...)
set timestamp=%DATE:/=-%@%TIME::=-%
echo source ~/.bashrc >> ~/.bash_profile
git rev-list HEAD
awk -F" -v OFS=" {for(i=1;i<=NF;i++)if($i~/^\$[0-9.,]+$/)gsub(/[$,]/,"",$i)}1
sed s/ \(Jan\|Feb\|Mar\|Apr\|May\|Jun\|Aug\|Sep\|Oct\|Nov\|Dec\) [0-9][0-9], [2][0-9][0-9][0-9]//g
./program tests/*
sed s/\([0-9]\{4\}\) /\1/g inFile
(echo $j | sed s/tRap\/tRapTrain/BEEML\/BEEMLTrain/g)
TARGETS = $(shell php -r echo "target1 target2"; < /dev/null )
awk {a[$0]++}END{for(x in a)b[a[x]]++;for(x in b)print b[x], x} file
LogEntry $LOG_LINE
the_command = /bin/php $php_file_name > $log_file_name 2>&1;
awk -Fval.int. $0=$2 file
sed s/r[0-9]/-&/ file
nohup matlab -nodisplay -nosplash -r runMyScript();
xargs -I% -n1 < file ssh -p 29418 company.com gerrit review --code-review 2 -- %

awk ($3 != $4) && !($3=="C" && $4=="T") file
grep -o group [0-9]* file
sed s/\\n/\n/g input_file > output_file
gem install <name> --platform=ruby
print   item:<$item>;
curl http://remotehost/myphpfile.php?data=variable
echo $(( $(date --date=00:00 next day +%s) - $(date +%s) ))
read -sk
awk FNR>5 inputfile
su another_user -c /path/to/other.sh
sed s/"[0-9]*":{/{/g file
q -notcontains nothing to commit, working directory clean
identify -format %[exif:orientation] image_file.jpg
[[ $supportLeft -lt 1 || $yearCompare -gt 0 ]]
seq -f apple_%03g_suf1.png 20 > suf1.txt
zenity --file-selection --file-filter=*.ogg *.wav *.aac
grep -R 5\.1 .
str=sudo nohup bash -c 'kill -9 $(ps -ef|grep udp_receiver|grep -v grep|awk "{print $2}") > /nohup.out 2>&1 &'
java -cp /home/Prasanna/java/classes com.prasanna.udp.UDPServer
echo $PWD | sed -e s!.*/!! -e y/.:/01/
paste -d   <(cut -d   -f 1 file1) file2
echo $ssh >output.tsv
echo $NUMBERS | perl -pe s/\b$DEL_NUM\b/ /g
ls | grep -i foldername1 | xargs -I {} mv {} foldername2
awk -F[ [\]] {print $4,$7} your_file
awk -F: {v[$NF]+=$2*$3}END{for(x in v)print x, v[x]} file
random_number = $(( $RANDOM % $RANGE ))
awk {a[$1]=a[$1] " " $2} END {for( i in a ) print i a[i]} *.csv | sort -n
(command1||awk {for (i=1;i<=4;i++)print $i})
sed -n s/\.us\././p
stat -c %i %n *csv | awk !seen[$1]++ | cut -d   -f 2-
awk {file="inputfile_"$3".txt";print >> file;close(file)} inputfile.txt
((pwd) 2>&1)
sed -i s/\.us\./\./ file.txt
awk FNR==NR {x2[$1] = $0; next} $1 in x2 {print x2[$1]} second first
grep -Po PROD[.]\K.* file
sed -i -e s/\.us\./\./ -e /\.eu\./d file.txt
(grep -r Version: /path/file.spec| awk {print ($2)} | cut -d. -f1-3))
if [ $model == Canon EOS REBEL T3i ]; then
exec(nohup /usr/bin/php -f /path/to/beta.php > logfile.txt 2> errorfile.txt &);
tail -c+3
!!:gs/oldstring/newstring/
for f in test*; do mv $f ${f/test/foo}; done
sed /<Second>/,/<\/Second>/{s/<startdate>01011970<\/startdate>/<startdate>01011979<\/startdate>/} Data.xml
array=(*)
funcA > >( tee -a out.txt 2>&1 )
tail -f /var/log/mongodb.log
{PATH:+:}/path/to/bin
*nice*!(ugly)
find / -type f | xargs -n1 -I@ basename @ | sort -u > /tmp/foundFiles.txt
sed -i s/wiki_host/${host_name}/g /root/bin/sync
sed -e /<!--String 1 -->/,/<!--String 2 -->/d
ls -A | sort -t- -k 5,5 -k 7,7n
% alias doit ls -l | grep $USER | somescript `awk -F' ' '{print $1}'`
powershell.exe -windowstyle hidden -file C:iis_test.ps1
regCmd = regedit.exe /E  & regFile & 
awk -F= -v searchKey=$SEARCHKEY $0 ~ searchKey {print $2 " => " searchKey} input
ssh SC-1 for i in /var/log/*/server; do echo $i; done
git branch | grep * | sed s/* // | xargs git commit -m
stat -c %a %n *|awk $1>755
awk { print "public void goToWebsite" NR "() {driver = new FirefoxDriver();driver.get(\"" $0 "\");driver.quit();" } file
bash -c echo $$
awk /\usr/ && ! a[$0]++{print $3} foo.txt
sed /\([^ ]\+ \+\)\{4\}0\+ /d
print if /(^|s)Q$ipE(s|$)/;
mycommand || (echo mycommand failed $$?; exit 1)
(your_command | awk {print $2})
print $5\t$13\t$14 >> (./bed/$5.bed)
sed -n /91, 4, {\(0x[0-9A-F][0-9A-F],\)\{11\}0x[0-9A-F][0-9A-F]}/p file
... | gawk 1;{fflush()} RS=\r\n > log.txt
stm |& grep ERROR | tee -a /path/to/logfile
tail -f access_log | grep --line-buffered /index.php | while read x ; do echo -ne \007 $x \n ; done
find . -type f -path ./source/script -prune -o -print;
Link.TargetPath = Replace(Link.TargetPath, Office14, Office99, 1, -1, 1)
for file in `ls $myDirectory`
awk !a[substr($0,1,40)]++
org/apache/xml/serialize/OutputFormat
awk -v num=$line $12==num R2_Output.txt
% awk /^#/ {printf "%04d.%02d.%02d.%02d.%02d.%02d\n", $2, $3, $4, $5, $6, $7} ~/stuff
ssh -t $suser@$server mysql -h '$host' -u $user -p $pass $db
awk -v OFS=\t NR==1{print $0,"NEW";next}{print $0,($5>=0.01?2:1)} file
> subl dir/*
mv file.log file.LOG
FOR /F %%A IN (convert xxx.jpg -virtual-pixel edge -blur 0x15 -fuzz 15%% -trim -format "%%wx%%h%%O" info:) DO convert xxx.jpg -crop %%A +repage yyy.jpg
cut -c1-200 file
nprop
find /results/ -type f -name *Metadata*.xml | while read file; do java -jar $SAXON/saxon9h3.jar -o:${file%.xml}.csv $file $WORKDIR/transform.XMI.xsl; done
./generate_commands | bash
awk -F\\s*=[^(]*\\(|,\\s*"|"\\); {x=split($1,a," +"); print a[x], $2, $(NF-1)} file
cat <(ls -1 | grep ^[0-9] |sort -n) <(ls -1 | grep -v ^[0-9] | sort)
find -maxdepth 1 -type d -name *foo*| head -n1
user_home=`eval echo ~$user`
adb push myfile //mnt\sdcard\
cat <(echo yes) - | python manage.py
split( $10, arr, - ); print arr[ 1 ];
echo asd | sed s:.:&/:g | xargs -n1 -I % mkdir -p %
process = subprocess.Popen([ssh $USER@mychefserver knife search node "chef_environment:*" | grep -i 'node name' | egrep -i 'stuff|ruff' | uniq -u | sort -n | cut -d':' -f 2 | sed -e 's/^[ \t]*//' | tr '\n' ', '], shell=False, stdout=subprocess.PIPE)
. cookies.txt
: FILE_PRELOAD -C execve+open+stat:/usr/bin/prog_b:/usr/bin/prog_b.old ./prog_a
your_program | awk {a[$1]+=$2}END{for(name in a)print name " " a[name]}
/^#[^!]/d
if [ -X ]; then echo Checked -X; fi
find . -name *.jar -print -exec ...
print Array Element  a[var]
DO @set FOO=%i & echo %FOO:~0,-3%
cd target/path && { curl -O URL ; cd -; }
type pip
cat fileName | xargs touch
grep .torrent `find /top/level/directory/ -name files.txt`
your_script.sh | sed s,.*Desktop,, | sed s,[^/]*$,, | sed s,/,,g
git clone https://github.com/thoughtbot/capybara-webkit.git
find . -type f -exec md5 {} ;
awk {print $1, $3} <input file> > <output file>
sed -i 10s@.*@$time@ test.php
tar cfz archive.tar.gz */wp-content/uploads/2013
sed -r :a;s/([0-9])([0-9]{3}([^0-9]|$))/\1 \2/;ta
~ truss -eaf /usr/bin/perl -e print "Test\n"; sleep 5 2> >(dd bs=1 | wc -l)
sudo touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys
ls -l | awk {print $6}
awk {print strftime("%c",$1)} input.txt
alias list-ip=nmap -sP 192.168.1.* | grep 192  | awk '{print \$5}'
<taskdef resource=com/salesforce/antlib.xml classpath=ant-salesforce.jar />
/some/long/path/we/need/to/shorten
ls -l >out.txt
sed -rn :a;/^ *$/{n;ba};s/( |$).*//p;:b;n;/^ *$/ba;bb
eval $x
tar -zcvf /x/y/z/ParentFolder.tar.gz -C /x/y/z ParentFolder
awk -F : { s3 += $3;s4+=$4;s5+=$5} END{ printf "%.2f,%d,%d,%f", s3,s4,s5,s3/s5 } input
read foo
sed -i.bak s/${old}/${new}/g test.txt
ls > list.txt
sed -n p;n filename
cat inputfile | grep ^t\: | split -l 200
export my_variable
sed :a;N;$!ba;s/\n/:/g
FileUtils.rm_rf(/X/Y/Z/OLDFOLDER/)
(cat $( ls unit-*-slides.txt | sort -n ) | grep st^ | split -l 200)
sed -i s/}{/},{/g blobsDone.txt
composite -gravity Center visual.png document.pdf result.pdf
awk BEGIN{FPAT="\\s*\\S*\\s*";OFS=""} {sub("\\S*","bar",$2)}1 file
s/Q^[(s3B//
awk BEGIN{FS=OFS="\t"}{$1=$2=$3="";print} file
(tcpdump -i eth0 -w tempcap &)
tcpreplay -i eth4 SMTP.pcap </dev/null
awk $2~/^4\.4/{print $9} myfile >> myoutputfile
find . -name *.png | sed s#^.*/\([^/]*\)/\([^/.]*\)\.[0-9]\+\.png$#\1 \2# | sort -u
sed -r s/^..:..:...{6}// file
f = Alignments_ $5 .sam print > f
watch echo "scale=2;$(cat io | grep wchar | awk '{print $2}')/(1024^3)" | bc
vimdiff file1 file2
sed s@<start>.*</start>@<start><ab></ab><ab></ab><ab></ab></start>@ file
ls -f --color $PathToLaunchers
sed /<start>/,/<\/start>/s!\(<a>2</a><b>2\)</b>!\10</b>! input
debian_chroot)}
awk -F, BEGIN{OFS=","}{{gsub("\047","",$2)}; print} file.txt > output.txt
export PATH=$PATH:/path/to/framework
ls $( echo CZ_VF__________BILL____.* | sed s/[_]/?/g )
exec > >(tee file)
sed -i~ /<\/GlobalNamingResources/a <foo></foo> server.xml
sed /^\s*$/d
date +%s
mplayer vidfile.mp4 -ss 110 -endpos 5 -fs vidfile.mp4 -ss 130 -endpos 9 -fs
alias ferr=grep ^ERRROR
`defaults read com.apple.finder AppleShowAllFiles`
get filename_*.txt>1d
sed s/\!/:/g file > outfile
cmd`
awk -F: $7=="/bin/csh" {print $5} /etc/passwd
ssh 192.9.202.44 tar tjf '/home/adup/mybackup.tar.bz2' | sort | grep -v '/\$' |(  while read filename; do md5=\$(tar xjOf '/home/adup/mybackup.tar.bz2' \$filename | md5sum | awk '{print $1}'); echo $md5 $filename; done)
sed /\[notice\]/{h;d};x;/./!{x;d};x;H;$!d;x;s/[^\n]*\n// file
ret = os.system(cp -fr "%s" "%s" % (src_abs_path, dst_abs_path))
while getopts “hwv:m:V” OPTION
xpath somefile.xml count(test[@result="Passed"])
parallel echo ::: ${V[@]}
awk NR>1{s=$2+$3+$4;if(($1 in a && s>m[$1])|| !($1 in a)){m[$1]=s;a[$1]=$0}}END{for(x in a)print a[x]} file|sort -V
(echo ($a/$b) * $c) | bc -l)
find $DIR -name master3* | grep master3\> | xargs
[e]0;u@h: wa]
sed :a; N;/\n\S/! {s/\n */ /;ba}; P;D WEEE.txt
( mail -s export CSV -a calls.tar mail@mail.pl < text.txt > /dev/null 2>&1 ) &
parallel --pipe sed 's#^\(@.*\)_\([12]\).*#\1/\2#'
awk $2==120{$2=1201}1 FS=\t OFS=\t file
perl -pe s/\B(succeeded|running|suspended|killed|prep)//i and $w=$1 and s/$/    $w/ file
rm /data/property/persist.this.is.my.property && reboot
shc -T -f test.sh
if [[ -z $tDate || $(date --date=$tDate + '%Y%m%d' 2>&1 ) != $tDate ]] ; then
(openssh version | cut -d  -f2)
echo \$1
wmic csproduct get uuid
sys.stdin = io.TextIOWrapper(child.stdout, encoding=utf8)
alias rm=echo SAFE
sed -i.bak -r s#^(.*/abc_def_APP/).*(/application1\.war.*)#\1$version1/$version2\2# /path/file1
Nice_Picture_2_.jpg
if [[ $DB2START =~ ^(SQL1036N|SQL1026N)$ ]]; then dosomething; fi
awk {$5=sprintf( "%.2g", $5)} 1 OFS=, FS=, input
ln -fs /etc/configuration/file.conf /etc/file.conf
grep -v BSC[0-9]\+[[:space:]]\+BSC[0-9]\+ infile
ls -al |head -5|tail -1|cut -d  -f3

[[ $b = $c ]] && a=$x || a=$y
git clone https://username:password!@github.com/org/repository.git
./abc.py -c ./abc.py -p 'a!s!d!f' -c 'ifconfig'
grep -c ^[A-Z] the_file.txt
sed s/\[Bo.*/&SomeText&SomeText/g filename
(time gcc -lm test.c ) 2> time.txt
rsync -rav -e ssh --include */ --include=*.pdf --exclude=* server:path localpathpath
command 2> /dev/null
ffmpeg -i infile.mp3 -ss 11 outfile.mp3
Call Shell(App.Path & \ModMag2008.exe , argument ......
echo 12 cats | sed s/[0-9][0-9]*/Number/g
sed -e /$LINE/d TELS/telephonenumbers.txt > tmp && mv tmp TELS/telephonenumbers.txt
find ... | awk -F/ {print $NF " - " $FILENAME} | column -t
stat /home/martin/index.html
if grep -q abc_def_APP <<< $file
rsync -av -f+ */ -f- * /path/src /path/dest/
factor)
ps -e -o pid,comm | grep ssh-agent
rsync -avni /path1/ /path2
awk {s=$4" "$3" "$2" "$1; if($5=="None"&& s in a)next;else a[s]=$5" "s}END{for(i in a)print a[i]} file|sort
awk -v RS= {print $0 > $1".txt"} file
grep abc_cde_app_[^_]*$
declare -a MY_ARRAY=(0 0 0 0)
3-48/5 * * * * foo.sh
awk BEGIN {FS = ";"; OFS=";"; } $1 ~ /^total/ { $3 = 0 } 1
scp from to
read $sni
: command not founde 4:
head -n 1 | sed s/\,/\n/g | wc -l <ee-content.csv
`timeout 2 ./run.sh`
sed -e 2,$d foo
ssh -t username@remotemachine cd /path/you/want ; bash
awk /^ *[0-9]*(\.[0-9]+)?" *$/{sub(/"/, ""); print} inFile
say -f script.txt -o greetings.aiff

grep -r -l -E GIF|html . | xargs rm
sed -r /^[0-9.]+"$/{s/"$//;n;};s/.*// file
grep -Eo http://[^ >]+ yourFile|head -1
while (((rand=$RANDOM) >= limit)); do :; done

sort -o f f
i) == toupper($j)) {
./ex17 <<<w
find . -exec arg0 arg1 arg2 ... ;

find yourdir -type d -name *.app -exec ln -s {} /AppLinks ;
mv ~/desktop/blue ~/temp
sed -n fromline,toline p
ls -l /var/temp.* | awk {a+=$5}END{print a}
awk /[ \t]+$1\/$2/ { print $1 } /etc/services
find *e* -type f -maxdepth 1 -size +0 -exec less {} ;
set path=(/a/bin $path)
echo \dira\dirb\abc\def\aa.txt | sed s;^\\[^\\]*\\[^\\]*;http:\\\\something;
sort -nr -t: -k3
diff $t.out <($parser_test `cat $t` 2>&1)
awk /pattern/{i++}i tmp.log >& tmp.txt
git diff -G <regex>
perl -pe s/(\d+\.\d+e\d+)/ sprintf("%.1f",$1) /ge filename

awk /\/var/{print $3}
awk -F: -v OFS=: $5="01"
comm -2 file1.txt file2.txt | awk -F\t {print (NF==2?"y":"")}
ls -lah | eval $var
grep -o Thread [0-9]* | sort | uniq -c | awk {print $2, $3 ":", $1}
killall -q synergys
command_not_found_handle(){ echo Command not found: $*; return 127; }
./script A B C D
find . -iname *dbg* -exec rename _dbg.txt .txt {} ;
git clone git@github.com:username/repo.git
su $APP_USER -c nohup java $JAVA_OPTS  >> $LOG_OUT 2>> $LOG_ERR & echo \$! > $PID_PATH/$CAT.pid
tr ;   <logfile|awkscript
fgrep -f <(awk {print $1} file1) file2
(echo $k | tr \n  )
read -t 3 variable < <( tail -f logfile.log | grep something )
awk -F| (printed!=0 && /ELIGIBLE/) {print; printed=0;} (!seen[$1] && $1 !~ /ELIGIBLE/) { print; printed = 1; seen[$1] = 1;  }

tr -d \r < input > output
git log --oneline --pretty=format:-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
tr \xE2\x80\xA8   < inFile > outFIle
awk $NF=="letters"{sub($NF,"");s=s $0}END{sub(/ *$/,"",s);print s} file
start /b  myprog.exe
set textwidth=79
set newpage none
sort -n -k 6 inputfile
if [$HOUR == 13] && [$MINUTE == 12] && [$SECOND == 1]
find ... -exec ./myScript {} +
IFS=n
plink -telnet -batch IP_ADDRESS dir

echo $fg[red] `ls`
sed s/0*\([1-9]\)/\1/g
sed -iE s,$ORIG_CUBES,$DEST_CUBES,g $TMP_FOLDER/data_sources/*
cat file-$i > new_file_part_1
sed -i.bak /<d>/s/on .* at [^<]*/on newdate at newtime/ file.html
-e s/\.0*$//
perl -n -e print join ' ', sort{a<=>b} split ' ' < input.txt > output.txt
psql -h 192.168.1.45 -d somedbname -U $somedbuse
if [[ ! $line =~ ^02/18/13 ]]
find . -name *.fal -exec eine_fal_macher {} Versuch.txt ;
dos2unix pre-commit
printf   %-16s %s\n foo: $(bar | sed '2,$s/^/                   /g')
tencent=()
59 23 * * * source /home/zfz/cleanlog.sh
awk !(NR%2){print p>=$0?p">="$0:p"<"$0;next}{p=$0} file
ssh -n root@${i} /usr/sbin/the_script
awk {printf "%s",$0}/;$/{print ""} file
awk $4 ~ /success/ {print $3} logfile
declare -a arr
[ -n ${0%/*} ] && cd ${0%/*}
for i in `seq 0.01 0.01 0.5`; do echo called with $i ; done
awk /pattern/{p=1;print;next} p&&/^##/{p=0};p file
sed /define('WP_DEBUG', false);/idefine('FS_METHOD', 'ftpext');
[[ -z $debian_chroot && -r /etc/debian_chroot ]]
(ssh user@server echo ${server_var})
cat my.xml | grep -A 1 ^<a>
sed -n 1000,2000{p;2000q} file.txt | grep abc
mkdir tmp && cd temp || echo error
awk { sub(/[ \t]+$/, ""); print } file
rm $(<file.txt)
LinuxWindows.*.zip
awk $3~/^2/&&$4=$5=$6="F" file
echo -n i | hexdump
cmd /c whatever
NSArray *args = [[NSProcessInfo processInfo] arguments];
find . -type f -name *.php -print -exec iconv -f euc-kr -t utf-8 {} -o {}.utf8 ;
cat /washington | sed s/[Cc]apit[ao]l/capital/g
grep dd <your_file>
FOR /F tokens=5 delims==<ms %i IN (ping -n 1 -4 host1.internal ^|find "Reply from"^|^|echo XmXmXmXm0) DO @echo %i
set pastetoggle=<F3>
openssl rsa -pubout ... 2>/dev/null
rsync -arvz -e ssh user@server:/myFiles localhost:/DirToSave
sed -E s/^[^_]*_[^_]*_([^-]*)-.*$/\1/
mysql -u sqluser -p$pasx -e $CMD $db
grep -c ^2013-05-17.*reason : 1004 file
history | grep tail
tty_input = open(/dev/tty) do {|f| f.gets }
mydata <- subset(mydata,nchar(seq1)+nchar(seq2)==2)
./mm.sh  -o -n /home/lukas/xyz
awk $NF=$NF"." file > salida.csv
/^.{6}/
c:\Program Files\WinRAR\WinRAR.exe a -afzip -df e:test.zip e:test.csv
locate sqlldr
ls -t | head -n 2 | xargs diff
grep -o [0-9]\+
join -v1 <(sort file1) <(sort file2)
paste -d: f1 <(perl -pe $\="\n"x($c=()=/[a-z]+/g) <f2)
perl -lne BEGIN { print "---" } if (/^=/) { $new = 1; next } if ($new) { s/^/- /; $new = 0 } else { s/^/  / } print paste > paste.yml

-cfvz
echo /usr/sbin/ocs-onthefly -s $src_ip -t $dest_disk
HOME=/path/to/dir gvim
echo This is the message body | mutt -a /path/to/file.to.attach -s subject of message -- recipient@domain.com
ls | grep sample | head -1 | xargs eog
[[ $var =~ / ]] && echo contains a slash
sed -r s/password=[^ ]+/ /g $file
mysql dbTest -e LOAD DATA INFILE './file' INTO TABLE tablename FIELDS TERMINATED BY ','
awk /^## Screenshot/{p=1} p{gsub( "line", "modified")} p&&/^##/{p=0}; 1 readme.md
sed -re s/([a-zA-Z0-9./\ :-]+)/\1/g

cp -a !(sub) sub
scp (filename) `echo $SSH_CLIENT | awk {print $1}`:(location on my computer)
echo $var | split -b 10240
sed -n /^START=A$/,/^END$/p data
[out :: apple.mango@machine-6.mysite.com]

mvn test -Dtest=<testclass>
screen -S arduino -dmS cu -l /dev/ttyACM0 -s 9600
echo $SHELL
od -c scriptname
tzutil /s universal standard time
recode ibmpc..latin1 script.sh
(sed -i s,"$File"\|"$MinFile?[0-9]\{14\}","$MinFile?$datestr",g index.html)
grep -o -P PATTERN file.txt
setup -nqP unzip
sed -n 1,/<\/html>/{s!</html>.*!</html>!;p} input
ED= -u /a/@id -v NEW_ID -u /a/b -v NEW_VALUE
ls -lt | awk /^-/{file=$NF}END{print file}
du -h your_directory
find /path/to/files* -mtime +5 -exec rm {} ;
sed s/<?xml version='1.0' encoding='UTF-8'?>//g myFile > myFile1
tee >(head -n3 >/dev/null) < /tmp/n
sed -e s/.*_\([pP][0-9][0-9]*\)_.*/\1/
export PATH=/usr/local/heroku/bin:$PATH:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/games:/usr/local/games:/opt/google/google_appengine
( echo $days | tr -s   \n; func | grep -oP (?<=lSecure)[1-6] ) | sort | uniq -u
s,"js/lj\.main\.min.\js?[0-9]\{14\}","js/lj.main.min.js?20130521080532",g
find /example/dir -type f -perm 777
sed y/ABCDEFGHIJKLMNOPQRSYUVWXYZ/abcdefghijklmnopqrstuvwxyz/
grep -Po \d{7}(?=\s*\(.*GiB)

log --graph --pretty=format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset --abbrev-commit --date=relative
(date -j -f %Y/%m/%d %T $2 +%s)
find <path> -name *.png | xargs -Irepl TMXResolutionTool repl <ratio>
find . -type f -name *.php -exec recode windows1252..utf8 {} ;
wget --post-data=search[email]=me@foo.com www.nanniesoncall.com/booking/nanny_view/show
result = popen(python yourscript.py  . $args, r);
ffmpeg -i $file -blah -blah -nostdin $filename &

sed -i.bak -e s/a/apple/g -e s/b/bat/g -e s/c/cat/g
mkdir abc 2> output.txt
(?:(?:^(D.*?))|(?:,s(D.*?))),
awk NR==FNR{n[$0];next}FNR in n numbers.txt lines.txt
echo fooo        bar | perl -pe s/( +)/\033[41m$1\033[00m/g
rm -f XYZ/*
find -L ../Classes -name *.cpp -print
echo hello world | tee /dev/tty | awk {print $2, $1}
sed :a;s/\n/&/20;tb;$!{N;ba};:b;/4320102/!D;:c;n;/<\/eventUpdate>/!bc file
awk FNR<=8192{ print $2 } *.tst > finalfile
rename s/---/-/ *---*
echo ..|xargs -n1 |shuf|paste -d  -s
for dest in /build/*; do cp -r /src/core $dest; done
grep ^.*:.*:38: /etc/passwd
awk { for (i=10;i<=11;i++) { $i = substr( $i, 1, 1) } } { print } infile
while IFS= read line ; do echo $line ; done < test.txt > new.txt
mv `ls *.sql|sed s/.sql$/.txt/g` dir
(date --date=June 03 -28 days +%s)
/usr/bin/open ~/.bash_profile
sort remote_list local_list | uniq -d > duplicate_list
awk { if(/comp/) { getline $1 < "input2"; } print } input1
awk NR==162 {print $4} FS=" skinlist.html
grep -x -f A.txt B.txt
mv my_directory/{test,yeah}.txt
grep -A 3 YES
sort -k2,2nr file.txt | sort -k1,1 -u --stable
grep \bABC100-10\b file
array=(`pwd`/worker/worker*/conf/logfilefilter-worker*.xml)
mysql -B -u username -ppassword --disable-column-names --execute select name from test
stat -c %s *
xxxx | awk {sum+=$1} END {print sum}
sed /DIRLIST/ s:"$: $logFolder ":
sed /<tag>/ r file2.txt file1.txt
if [ $var = abc123 ] || [ $var = abc456 ]

cd $f
cat p1.csv | sort -t , -k2 | awk -F, !x[$2]++
for x in *-6.0.dll; do y=$(echo $x | sed -e s/-6\.0\.dll$/-6.1.dll/); echo mv $x $y; done
sftp user@host remoteFile localFile
set -o multiline
sed /^ [^,]*$/s/^/>/
if(argv[1] == -e)
perl -e foreach (<>) { $count<2 && s/hello/goodbye/ && $count++; print; }
stty start ^- stop ^-
perl -e $count=1; foreach (<>) { s/(my-company-review)(\/<\/link>)/$1$count$2/ && $count++; print; }

Console.OutputEncoding = Encoding.UTF8;
awk -F" {print $2"-"$4} data.txt | sort -t- -k4 -k3M -k2 | awk -F- {kv[$1]=$2"-"$3"-"$4}END{for(k in kv){print k,kv[k]}}
bindkey ^h backward-delete-char
lc=abcdefghijklmnopqrstuvwxyz
composer update
mypath=c:\\tmp\\silent-install
ls -t | awk NR > 3 | xargs rm
pkill -TERM -P $PID
sed -n /^CommonTerm: /{n;p} log_file
grep -A 10 pattern file.txt
sed /DROP/ {/INDEX/d; /CONSTRAINT/d} file
if [ $( df -h | grep hda1 | tr -s ' '|cut -d  -f 5 | cut -c-2) -ge 80 ]; then echo Subject: Production Server : Low Disk Space : Daily reporting for Server
echo {something: here} | echo [$(cat)]
rsync -pr /var/repo/released/$project /var/www/released/$project
awk {k=$1;a[k]=a[k]?a[k]","$4:$4}END{for(x in a)print x":"a[x]} file

sed -n s|.*<url>\(.*\)</url>.*|\1|p
mv script1.py script1
diff <(html2text before.html) <(html2text after.html)
sed -r s/([0-9]+:[0-9]{2})([a-zA-Z ]+:)(.*)/$TIME:\1\n$TYPE:\2\n$DATA:\3/
-o file
(tr -dc [:upper:] <<< $PET)
sed -r s|\[[^]]*\]||g
`find `pwd` -name .htaccess -exec grep -q RedirectMatch {} ; -print`
echo $PASSWORD | sudo -S su postgres
if [[ $line == *downloads.php* ]]
print somebody@example.com;
find /path/to/search -type f -printf ‘%TY-%Tm-%Td %TT %pn’ | sort -r | head -n1 | xargs -I {} mv {} newfile.txt
psql --username=postgres -c ...
if [ $rStatus -eq 0 ]
find /mnt/data -type f | parallel -j 64 md5sum > md5.txt
cd new-files ; find . -exec rm -rf path/to/other-directory/{} ;
xpath = strcat(argv[argc - 1], ...
[[ -e ./blah && ! -L ./blah ]]
head -5 some_file > output_file; tail -3 some_file >> output_file
awk {s[$1]+=$5} END{ for (x in s) { print x, s[x]}} in1 in2
cat file.txt | ssh user@localhost cat > file.txt
> out.txt
[[ condition ]] && true_value || false_value
perl -lne print $1." | ".$2 if(/(\d+\.\d+\.\d+\.\d+).*VULNERABILITY:(.*)/) your_file
pg_dump -U someuser -h localhost somedb > directory/somefile.dump
diff -r dir1 dir2 | grep dir1 | awk {print $4} > difference1.txt
ccontrol stop instancename restart quietly
grep -Eo [0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{2}/[0-9]{2}/[0-9]{4}
s:?page=one&:pageone:g
fp = fopen(/tmp/myaccount.tasks.htm,w);
sort -n File1 File2
grep -oP <[vp]:0x[0-9a-z]+ data.txt | sed s/.\{5\}//
case $mes in
awk -F, NR==1{hdr=$0;next}!($3 in files){files[$3]=1;print hdr"\n">$3".csv"}{print>$3".csv"} test.csv
cp $EXCL_FROM $SRC/.rsync-filter
(cd ..&&pwd)
awk NR==FNR { a[$1];next } (FNR in a) line_number_list.txt bigfile.txt
echo v=1;echo v=$v|ssh user@host
./run_prog 2>&1 | grep READ > read_data.txt
hostname $(cat /etc/hostname)
egrep ^[^|]*\|([^|]*\|[^|]*\|)*[^|]*$
ls | tee localbackup.txt
(echo $a | awk {printf("\\\"%s\"",$1)})
awk $1<15 input_file
adb -s 015d2578a7280412 shell ls /data/app | tr -d \r> apps.txt
(time ls -l > outtLs) 2> outt
screen -Rd
for j in ${array[@]}; do echo $j; done | sort -n >> result.txt;
chmod u+x script.sh
ssh server2 cat /path/to/file2 | ssh server1 cat >> /path/to/file1
sed -n /<html>/,/<\/html>/p;/<\/html>/q file
perl -d -e 1
(yourcmd|grep -Po (?<=RX bytes:)\d+)
ls *.txt | xargs -I {} cp {} ../{}
sys.stdout.write (month(hex) +   + day(hex) + ,  + year(hex) +   + hour(hex) + : + minute(hex) + : + second(hex))
grep -Po (?<=divider-bin-)\d.\d.\d
/usr/bin/winexe -U domain/login%password //host **cmd /C %WINDIR%\sysnative\reg.exe** "QUERY" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft Antimalware\Signature Updates"
a somewhat long string followed by a number: 0000001
syslog -s -l error message to send
awk {y=substr($7,1,5);z=substr($7,6); $7=z""y;}1 inputfile
awk { print ">"NR }1 file.txt
svn commit test.log -m $svnmessage --non-interactive --username $username --password $password
echo dog cat fish +hamster | awk NF--
echo $CONTENT
sentence=The quick brown ${key} jumps over the lazy dog
sort -t_ -nk2 abc.lst | awk -F_ !a[$1]++
i=1; echo -e #!/usr/bin/env bash\nmyprogram -i "input_${i}.txt"
awk {sub(/root/, "yoda"); print}
ps aux | grep aa.sh
sed -i $s/}/,\n"location":"canada"}/ sample.json
sed -i s/old-word/$d/g *.txt
sed /aaa/h;$!d;x file
\n
split_line = line.split(\x1c)
sed /First/r file1.txt infile.txt
my_prog < a_text_file.txt
sed s/,\.-$/,.- /
awk -F // { n = gsub(/ /, "", $1); print n }
script output.txt
xargs du -ch < /home/dev/sushanttest/listing.txt | grep total

os.system(wget http://somewebsite.net/shared/fshared_%s.7z%i)
echo 9191234567 | sed s/^\([0-9]\{3\}\)\([0-9]\{7\}\)$/\1 \2/
cmd /k start cmd /c ping localhost
yellow=\E[1;33m
perl -ne chomp; @a=split(/\$,\$/); $_ = join("", @a[4..($#a-1)]); print join("\$,\$", @a[0..3], $_, $a[$#a]), "\n" < data.txt
ssh user@remote.com script `date`
awk -F, NR==FNR{a[$0];next}$1 in a 300513-code.csv 30-05-4UTF.csv
awk $out $bigfile
loc=`dirname $BASH_SOURCE`
source ~/.bashrc
while [ ! -r *.pdf ]
sudo /path/of/your/binary
aplay -l | grep C-Media USB Audio Device | perl -anE s/://g, say for $t="$F[1],$F[8]"
(basename -- $(dirname -- $path))
awk /string/{x=$2$3;sub(/.*\//,"",x);print x}
sxs(?:[0-9a-f]{2}s){2}(.*?)sw{3,}
perl -lne $c++ if $p and /^\+/; $p = /^-/ }{ print $c FILE
awk {r=$NF;k=$1$2;a[k]=a[k]?a[k]";"r:$0}END{for(x in a)print a[x]} file
dos2unix pg_dump_script.sh
find . -path ./*_parameterOne_[12]00_*/* -exec ./myScript.py {} +
find /path/to/search/ -type f -iname *string* | xargs -0 cp -t /path/to/copy

ls *].mp4 | sed s/^\(.*\)_\(\[[0-9_]*]\)\.mp4$/mv & \2_\1.mp4/
awk -f ./script.awk values.file $(find . -type f -regex .*\.\(txt\|doc\|etc\)$)
numOfFiles=`ls $1 | grep -o \\.sav | wc -w`
sed -E /\.(rb|js)$/!d
make all DEBUG
find . -maxdepth 1 -type d -cmin -60 -print | egrep -v ^(\.|\.\.)$ | sed s/..//
:exec !.getline(.)
awk FILENAME != "file.txt"{ a[$1]=FILENAME; next } $1 in a { $3=a[$1]; sub(/\..*/,"",$3) }1 {A..E}.txt file.txt
date +%h%-d%H:%M
grep ^\([^|]*|[^|]*\)\{7\}$
batch=`mkdir /home/hieund/bpl`
os.system(xfce4-terminal -e 'bash -c "echo hello ; /bin/bash ; exit 0"')
exec ./a.out
perl -pe s|__(.*?)__|{{$1}}|g <myfile
awk $1 == "CLs", $0 = $3
grep [^0-9]
curl -u metaraine https://api.github.com/user/repos -d {"name":"$name"}
c}
aseqdump | myscript.sh
find /home/san -type f -name *'* -print0 | xargs -0 -L1 rename ' 

grep -hw ^$grep_id[^0-9]* ...
find . -size +20 | xargs du -sh | sort -n
sed -i 2s/^/if \(\$_SERVER["REQUEST_URI"\] == \'\/site\/template.php\'\) \{\$name=mysql_result\(\$result,\$i+2,"Name"\);\$auth=mysql_result\(\$result,\$i+2,"Author"\);\$date=mysql_result\(\$result,\$i+2,"Date"\);body=mysql_result\(\$result,\$i+2,"Content"\);\}\n/ ../site/written.php
ssh dan@172.19.1.15 $(printf %q  mv -v /home/dan/Downloads/complete/$dir /home/dan/Downloads/downloaded)
openssl s_client -connect pop.gmail.com:995 -quiet
awk {a[NR]=$1} END {for (k in a) if(a[k]=="monkey") print k} textile
screen -dmS redisScreenName redis-server redis.conf
which java
find . -type f -and ( -name *.c -o -name *.h -o -name *.cc )
sed -n s/^.*test/test/p input
paste <(echo -e this\tis\ttab\tseparated) <(echo this is your comment)
sed -n /"map":"200"/!s/.*\({"datalist".*}\).*/\1/p full.log > new.log
for file in `ls`; do mv ${file} `cksum ${file} | cut -d  -f1`.${file##*.}; done
awk -F: {a[++i]=$0;if(i==3)f=$2}i==4{for(x=1;x<=i;x++)print a[x]>f".txt";i=0} file
find ~/Download -name *.avi -exec mv {} Directory ;
(cd $d/EmotMRI/firstfour/ && ls s* | wc -l || echo failed)
awk { print "Do stuff for " $1; print "Do stuff for " $2 } filename
source myScript.sh
script.sh $var1 $var2
find $PWD -name .* -prune -o -print
find /path/to/somewhere
awk /MC exp. sig-250-0/ {print $10} your.txt
{max-size, 0, POPT_ARG_STRING, &max_size_arg, OPT_MAX_SIZE, 0, 0 },
-n do not output the trailing newline
nohup otherScript.sh > $WORKSPACE/scriptOutput.txt 2>&1 &
awk -v OFS=  {print 1,2} a.txt
cpan HTML::Scrubber
sed N;N;s/\n/ /g file
adb shell command1 | command2
tail -f input | perl -pe s/.*$1.*/\e[1;31m$&\e[0m/g
awk -F, -v OFS=, NR==FNR{d[$2]=$4;next}$2 in d{$5=d[$2]}7 file2 file1
printf 0x%X $MYVAR
awk FNR==NR { a[ "\\[ " $1 " \\]" ]; next } /^\[/ { f=0 } { for (i in a) if ($0 ~ i) f=1 } f file1 file2
awk -F\t -v OFS=; $1=$1 file
awk NR == FNR{a[$0];next} !($0 in a) fileA fileB
awk -F| -v s=3500 -v e=8000 $2>=s&&$2<=e file
sed -i s/def version = ".*"/def version = "$version"/ $file
sed s/[Ff][Ii][Rr][Ss][Tt]/last/g file
asdf 2> /dev/null || exit 1

awk $2=="CC" { a+=1 } {$2=sprintf("%02d",a)} 1 input
git commit -m $desc
awk sub(/^>/,"") { print ++i, $0 } /Grades/ { print i, $NF } /year =/ { print i, "year = ", $NF } file
for file in $(cat bad-stuff.txt); do mv $file /quarantine/$file.`date -u +%s%N`; done
sed s/^\(.\{2\}\)0\(.*\)$/\1\2/
/=repeat( , 80-col(.)).\
var1=[word1] ...
AWAKE = awake
awk NF{$(NF-1)~/[a-zA-Z]+/?count+=$NF:num+=$NF;count+=$(NF-1)}END{print "Count= "count" NUM= "num} inputFile
foo < <(echo -e foo\nbar\nbaz ; cat /dev/stdin)
textutil -convert rtf -font HelveticaCY file.txt
compgen -F a 2>/dev/null

tar -xf *.gz
port selfupdate
sed -n 5,10p filename
(echo ${i%.*} | awk -v FS=/ { print $2 })
awk -F"," {cmd="date -d \"$(date -d \""$3"\")+10days\" \"+%Y-%m-%d %T\"";cmd | getline datum; close(cmd); print $0 ",\""datum"\""} test.csv > test-increment-10days.csv
perl -ne chomp;push @r,$_}{ ($m)=$r[$_] =~ /host=\s*([^)]+)/i, print ("$r[$_-1],", $m? "active,$m\n":"inactive\n") for grep $_%2, 0..$#r; logfile
sed -n /LIMIT/,/=/{/^\s*\(\S*\s*\)\{10\}[0-9.-]*\*/H;x;s/^.*\n\(.*\n.*\)$/\1/;x;/=/{x;P;q}} file
(?!.)
printf %s:%s\n $(date) $(hostname)
DATES=( ${DATES[@]
grep -E -o \b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b file.csv | sort -u > email_list
awk NR==FNR{a[$1]=$2;next} $2 in a{print $1,a[$2]} replacement.txt list.txt
awk -F: NR==FNR{a[$1$2];next}$1$2 in a file_a file_b > result.txt
line`
sort -t> -nk2,2 file
if grep pattern file; then ...; fi
awk BEGIN{FS=""; OFS=""}{if ($25$26 == "07") {$25="0"; $26="8"}{print}}
(date|awk {print $1})
sed -r -e s/-(a)-/-\\\1-/g test.txt
(( `</home/pi/auto/mark` > 3 )) && echo 1 > /home/pi/auto/daycheck
find $DIR -maxdepth 1 -type f -exec echo -n . ; | wc -c
awk NR>2{while((getline a < "sample.txt") > 0){print a}}1 input.txt
(date +%s%N) ; my_command ; tt=$((($(date +%s%N) - $ts)/1000000)) ; echo Time taken: $tt
sed s/[^,]*,/,/2g file
ARRAY_COUNTER++
find * -exec echo {} ;
eval a=( $(echo hi how are you | sed s/\(.\)/'\1' /g) )
process_id=`/bin/ps -fu $USER| grep ABCD | grep -v grep | awk {print $2}`

(npm list -g 2> /dev/null)
awk -F= NR==FNR{a[$2]=$1;next} $2 in a{print a[$2],$1,FS,$2} checkA checkB
sed -E -e s/([0-9-]+\.[0-9]*,[0-9-]+\.[0-9]*)/[\1],/g -e s/,]/]/
java -Xmx1024m weka.classifiers.trees.J48 -t data.arff -i -k -d J48-data.model >&! J48-data.out &
sed -e s/<\([^>\/\ ]*\)[^>]*>/<field name=\"\1\">/g -e s/<field name=\"\">/<\/field>/g file
subprocess.Popen([sort, -t\t, -k1,2, input, -o, output]).wait()
sed s/\bVERSION\b/$version_1/g
sed s/\|[^,]*//g
pkill Chrome
addr2line (nil) -e xcep_app
python -c print $NUM
export PS1=\033]2;[\$(history 1 | sed 's/^[ ]*[0-9]*[ ]*//g')]\007$PS1
mysql> SELECT * FROM posts LIMIT 1G
awk gsub(/\//,"&")<5 file
sed -n /Account/{n;/VIN No\./n;p} file
(egrep -o [0-9]+ my_file | egrep -c ^1)
ls -p | grep -v / | xargs md5sum | awk {print $2,$1}
subprocess.call(bash myfile -u %s % str(name)), shell=True)
sed s:<\|\(/>\)::g;s:\(=[^ ]\+\) :\1\n:g INPUTFILE
sed -n |content/folder\[@name.*Failure|s|.*content/folder\[@name\(.*\)Failure.*|\1| source.csv
for i in {0000..1100}; do enfuse -o A$i.jpg $(( 10
s#\(.*\)/.*#\1#
cd A; xargs -a ../list.txt cp --parents -t ../B
<<<Here is a random number. sed s/random number/& $RANDOM/;s/.*/echo "&"/e
expect ./interact


AA,BB,CC,DD
\r
INPUT_FILE_LIST=`/usr/bin/s3cmd ls s3://my-bucket/my-prefix`
(echo Date;Visit;Login;Euro;Rate ; cat file.txt) | sed s/;/<tab>/g > file.csv
sed -i /^\[ssh-iptables\]$/,/^\[/ s/^enabled = false/enabled = true/ /etc/fail2ban/jail.conf
exec awk {{print $4}} foo
awk {mm=substr($4, 1, 4); cnt[$3 " " mm]++} END{for(a in cnt) print a " " cnt[a]} Text.log
Access denied for user root@localhost (using password: NO) (Mysql2::Error)
(echo scale=2; res=(100-($S*1.86)); if (res < 75) {res=75}; if (res > 89) {res=89}; res | bc -l)
make VAR=bla bla
LOCAL_DIR=~/drupal-files/
Config file: /home/username/.VirtualBox/Machines/Windows XP/Windows XP.xml
wpa_passphrase $1 $2
awk FILENAME==ARGV[1]{a[$0]++;next}!($1 in a||$2 in a) file1 file2
find . -type f -exec grep -e ^#\!\/bin\/.*sh$ {} +
netsh wlan show hostednetwork | cmd /v:on /c find Not && echo found !errorlevel! || echo lost !errorlevel!
parallel --gnu screen -d -m -S t1 bash -c 'echo {} 2>&1 | tee {}.txt' ::: hi bye
sort -t : -k 2,2n -k 5.3,5.4
find . -name README.txt
awk $3 ~ /snow/ { print } dummy_file
sudo -u username -g groupname .command

./manage.py dbshell
os.system(/path/to/script.sh &)
(<inFile))
awk -F[|]{4} { printf "Field 1 -> %s\nField 2 -> %s\n", $1, $2 } infile
cat names.txt | xargs -I{} cp file.pdf {} file.pdf
func Command(name string, arg ...string) *Cmd
awk NR==1 {next} {$1=$1;  print ": (" $0} RS=: \( FS=\n OFS= filename
. ./setup.sh
sed -E -i.bak s/(all\s+)peer/\1md5/ file
./startup.sh
g++ main.cpp GradeBook.cpp
echo repl.look()|nc localhost 4242|grep -i tab
(ssh user@server cat variables.properties)
b=echo $(ls -r /var/www/xx*)
awk NR==FNR{a[$1]++;next}$1 in a test.1 test.2
expect -c spawn echo foo; expect "\n-re . {puts OK}"
foo.py -d C:/My Folder/hello
echo $PWD | sed -e s|^$HOME/|~| -e s-.*/\([^/]*/[^/]*\)-\1/-
for i in {1..20000}; do dd if=/dev/urandom bs=1 count=1 of=file$i; done
for i in `find . -type f -name *.js.compiled`; do mv $i ${i%.*} ; done
proc.consumeProcessOutput(System.out, System.err)

awk -v k=$k $0~k&&/something1/&&/something2/{print $2,$3,$4} *.cfg
/bin/ls -l $line 2>&1 | grep -i No file
awk NR>=2 && NR<=4 file
find /mnt/STStorage/ -type d -mtime +14 -exec mv {} /mnt/LTStorage/ ;
sudo killall instruments 2>/dev/null
perl -pe$_.="  Reporter::send_exception(\$e);\n" if /catch \(/
find /path/to/ABC -type d -name CVS -exec rm -fdr {} ;
awk -F, {for(i=1;i<=NF;i++) if($i>1) {$i="replacement"}}1 OFS=, file
awk -F| NR==FNR{a[$1]=$2;next}{if (a[$1]) print} small.txt large.txt
awk /start/,/end/ { print ( $0 ~ /end/ ) ? $0 "\n--" : $0 } infile
seq -s, $counter -1 1
wc -l $1/*
C:> copy *.* [destination folder]
sed -i  s:<li>lorem[^<]*</li>::
split -l 10000 big.csv
sort -t _ -k 2 -g data.file
NR>1 {printf %s%s%.3f%s%.3f%s%.3f%s%d\n, $1, OFS, $2/$5, OFS, $3/$5, OFS, $4/$5, OFS, $5}
SHELL := /bin/bash
echo 000,010,069 | awk -F , { printf "%02X,%02X,%02X\n", $1, $2, $3 }
for (int i = 6; i < (argc - 6); i++)
sed -e s/\\\([^n]\)/\1/g
perl -pe s,(?<=</li>)<li>lorem.+?</li>(?=<li>),,g inputFile
find . -name *.csv.gz -print0 | xargs -0 -n1 gzip -d
--host=titanic --user=fred --password=foobar
awk -F, NR>1{f=$1".sync";print >> f;close(f)} file.csv
... | grep value: | awk {sum+=$2}END{print sum}
tmux kill-session -t myname
awk NR > 1{print line" \\"}{line=$0;}END{print $0" "} inputfile
bash -e myScript
eval $(awk -F= '{printf(export %s="%s", $1, $2)}' <(echo $i) )
: not found.sh: 2: graphhopper.sh:
:%s/([^/]*.csv)( .*)/&1.org/
awk {if (NF > 1 ) print > "pass"; else print > "fail"} input

awk {print $1 " "  $2 "\n" $3 " " $4 "\n>"}
awk NR==FNR{a[$1]=0;next}$1 in a{a[$1]+=$3}END{for(i in a) print i,a[i]} Name_file table
Child c = Child.valueOf(args[0]);
sed -r /title.*java/I!d;s/.*:.(.*).}$/\1/ file
a=200; b=205; eval t=({$a..$b}); echo ${t[*]}
java -cp weka.jar weka.classifiers.functions.MultilayerPerceptron
find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +
cd ${PWD/tom/richard}
awk -v tick=$ticket -v RS=--+ -F|  $0~tick{print $1}
awk -v f2=$(< file2) {print $0, f2} file1
[0-9](-?[0-9]){2}
someApp $*
exec > output.txt
grep server crashed\|server is up again | tail -n 1
mainSubString = *blue cheese*
echo My String | ruby -e puts gets.downcase
(basename $filename)
. /home/myusername/.setenv
for i in `cat file`
ls * | sort -n | xargs -d \n grep hello
head -2 Cit-HepPh.txt | od -a
( cd $dir; ~-/cmd)
cut -d; -f2
awk -F, !arr[$1]++ { print } LOGFILE
9342432_A1 9342432 1 0 0 0
tac file | sed /a/ {s//c/; :loop; n; b loop} | tac
awk NR==FNR{x[$1]=1} NR!=FNR && x[$1] file1 file2
sed 2s/.*/[text_insert] & [text_insert2]/ file.txt
find . -type f -exec sed -e s/Test_Dbv3/TestDbv3/g -i.bak {} +
alias wrang=open -a TextWrangler
locate file.ext | xargs xdg-open
html2text <<< $string
find /home/ -type f -regextype posix-extended -regex .*(string1|string2|$HOSTNAME).*
awk NF{print $0} ORS=\n\n <<< $str_text
grep -e [0-9]{3}-[0-9]{3}-[0-9]{4}
perl -i -pe y|\r||d script.pl
chmod +x contactdetails
awk NR==1&&/^\/\*/{s=1}s==1{print $0}s==1&&$NF=="*/"{s=0} test.c
awk -F: /^Employee/{a=$NF;next}{print $0,a} file
/bin/ls
echo $(( a + b ))
cat filename.txt | awk { print $2 $4 }
exec(escapeshellarg(/bin/bash) .   . escapeshellarg(/home/monu/myBash.sh) .   . escapeshellarg(...));
sudo ln -s /usr/lib/node_modules/less/bin/lessc /usr/local/bin/lessc
sed /daemon www.*Y=/{:l s/\(Y=\(0,\)*\)[0-9]*/\10/;/Y=\(0,\)*0\([^,0-9]\|$\)/!bl} input
rename s/\s*-\s*/-/g *.doc
ls *delayed*
if (!strcmp(argv[i], --item)) {
echo JAVA_OPTS="$JAVA_OPTS -Dorg.apache.catalina.jsessionid=some_value" | (export DORG_APACHE_CATALINA_JSESSIONID=FOO/BAR/FOOBAR; sed s/^\(JAVA_OPTS="\$JAVA_OPTS[ \t]*-Dorg\.apache\.catalina\.jsessionid*=\s*\).*\$/\1${DORG_APACHE_CATALINA_JSESSIONID////\/}"/)
. file
sed -i s/10\.0\.0\.0\.3/10.0.0.0.4/gw changes
vim -c colorscheme desert
paste -d  ips.txt names.txt
screen -dr YOUR_PID
(rsync -rvlpogt /svntags/tags/ /var/www/html/) && $(rsync -rvlpogt /svnbranch/branches/ /var/www/html/)
mongo test --eval db.things.remove({expires: {$lt: Math.round(new Date().getTime() / 1000)}})
Console.ReadKey();
( YOUR_ENTIRE_PIPED_COMMAND ))
if [ $lang = Java ]
sed -e s/^\|$/"/g -e s/,/","/g input
awk $1 ~ /fm/ {print $2} RS=span FS=[<>]
awk NF>3 file
:g/
Wipe out workspace before build
awk NR==3 {while (getline < "file2") print; next} 1 RS= ORS=\n\n file1
(awk -v value=$src_dir ($1==value) { print $2 } parameters.txt)
find $homeDirData -type d -mmin +10 -print0 | xargs -0 rmdir
Artisan::add(new import);
awk -F= NR==FNR{a[$1]++;next}!($1 in a) fileB fileA > fileC
awk NR==FNR{a[$1]=$2;next}{$1=a[$1]}1 hosts.txt output.txt
java -cp /export/home/alun/jpsgcs/ CMorgansToTheta $filestem_$i.INPUT.par $filestem_$i.THETA.par
sed -i /^DNS1.*/d $DNS_IP_CONFIG_FILE
zcat small-*.gz | split -d -l2000000 -a 3 - large_
Get-Content C:\temp\config.txt | % {$_ -replace /,\} | set-content C:\temp\config Bis.txt
cat - file2.DAT
export PATH=$PATH:$HOME/bin
awk $3!=5.5 filename
for /f tokens=1-3 delims=/ %%a in (%date%) do md %%a_%%b_%%c
cat file | tr -d \r | while read line ; do echo $line ; done
[ $response = y ] || exit;
git help clone | col -b > gitclone.txt
sed s/-A INPUT -i lo -j ACCEPT/-A INPUT -i lo -j ACCEPT\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT/g <filename> > temp ; mv temp <filename>
cd $OGRE_ANDROID_ROOT
Usage: rename [-v] [-n] [-f] perlexpr [filenames]
awk -F| {OFS="|"; if ($1 ~ /trng-linx/ && $2 ~ /17\.2\.18\./) $4=" B "}1 tasklist.txt
join <([first set of commands]) <([second set of commands])
db2 -f foo.db2
comm <(sort oldfile) <(sort newfile)
grep . ${FILE_NAME} | while read LINE
sed 1,5{3p;d} filenname.CSV > tempfilename.txt
diff -y /tmp/test1 /tmp/test2
awk {if ($2==5 && $3 >= 40 && $3<=50 && $6>=0.96 && $1=="---") print } Infile.txt >List_position.txt
find . something | xargs -r0 printf %s\n
sed -nr H;/PATTERN/,/\}/{s/(\})/\1/;T;x;p};/\{/{x;s/.*\n.*//;x;H} file

find $E -type f -mtime -1 -exec cp -r --parents {} $B/$T ;
ps -A x |grep sshd |grep -v grep
read -a arr
grep -oP (?<=\"name\">)[^<]+(?=</h1>) test.txt
grep puddle2_1557936 | cut -d : -f2
grep -n $SEARCH_TERM $i | tee -a /file.txt
ps aux | grep some_proces[s] > /tmp/test.txt && echo 1 || echo 0
sublime $(git status --porcelain | grep myfile.txt | cut -c 4-)
sed -e /^Password:/,/^[^ ]/{s/Password: .*/Password: */; /^ /d;}
sed -i /Entrust/d $file
perl -lne if(/(.*?\")(.*)/){$b=$2;$a=$1;$a=~s/,[\s]/,/g;print "$a$b"} your_file
{ echo 42 & sleep 3; }
cat file.txt | sed /^P/d
(cd /path/to/project && exec npm root)
grep -oP (?<=\w=)\w+ file
vi Edit /root/.cshrc
[[ $line == *stat* ]] && echo yes
char* block1_arg_Filename = argv[1];
awk {sub(/:[.]/,":0.",$6)}1 FS=, OFS=, file
systemctl start asterisk
sed -r /<layoutItems>/{:ka;N;s#(</layoutItems>)#\1#;Tka;s/lastViewedAccount//;T;d} file
git log --since=yesterday
rm -rf $(echo file.war | sed s/\.war$//)
awk NR==FNR{a[$1$2$3]++;next}!($1$2$3 in a) file{1,2}
read -r max min < <(awk NR==1{max=$3; min=$3}{if ($3>max) max=$3; if ($3<min) min=$3;} END {print max,min} List.txt)
(ps -ea | awk /<search_term>/,NF=1)
awk NR==FNR {a[$1];next} ($1 in a) && ($2=="spring") && (($4-($3-$4))>0) FILE_B FILE_A
change_column :table_name, :column_name, :float
echo $str | sed s/_[0-9]\{14\}$//
rename -n $c++; s/^(.{4}).*/sprintf("%s%05d", $1, $c)/e [A-Z][A-Z][A-Z]_*
file_put_contents(/path/to/log/file, $_SERVER[REMOTE_USER] . \n, FILE_APPEND);
sed -r s#(.*)#/\1/d# file1 | sed -f - file2
cmd`;
awk {a[$NF]+=$1}END{for(x in a) printf "%s\n%4.2f\n",x,a[x]} file
awk -v RS=> -v start=$n -v end=$m NR>=(start+1)&&NR<=(end+1){print ">"$0} fasta_file


exec(php-cgi -f /var/www/vhosts/example.com/httpdocs/tool/scan.php types=All order=Newest email=test@example.com);
find /var/cache/pacman/pkg -name vim-[0-9]*.gz
currentFold=`dirname $0`r
while inotifywait -q .; do kill $PID; tail -F -n 0 * & PID=$!; done
{(flags)variablename}
awk -F, {print >$3".txt"} your_file
find . -type d -exec test -e {}/.hg ; -print
return shell_exec(/absolute/path/to/create_vhost.sh site_id domain.com 2>&1);
tail -f myfwlog | GREP_COLOR=01;36 egrep --color=always ssh|$ | GREP_COLOR=01;31 egrep -i --color=always drop|deny|$
C:cygwinbinperl.exe /cygdrive/c/scripts/testscript.pl
awk {print $0" or"}
if [[ $number -lt 10 ]]
awk NR>1{print $2,$3,$NF} inputFile > outputFile
sed s/\^/`printf '%q' ${BASHVAR}`/g
read -a header < smaller.txt
say Hello using Alex
cmd /c START /MIN pathtotest.bat
find /mnt/hdd -type f -print | file -f -
for /r %f in (test*.txt) do (for /f usebackq %p in (%f) do echo %p)
sed s#/\*\*/##g
sudo !!
vi $(find ./ -name build.xml)
s=hello,my,name,is,mindia
sed -r -e s#^%C(.*)#"/vol/images\1"# -e s#.*#fl-cp -sync & &# file.txt
phalcon model --name products
./script -a <<<$CONTENT
awk -F, {split($2,d,"-");print > d[1]} file
sed -r s/>[[:alnum:]\|]+\|ref\|([a-zA-Z0-9_]+\.[[:digit:]]).*/> \1/g
trap kill $(jobs -p) EXIT
//ns:Style[.//ns:color[contains(text(), ccff00ff)]]
grep -rl {some_pattern . | xargs your-command > a.out
find ~/cron/obnam -type f -mtime +3 -name test-*.txt -exec rm -v {} + >>$LOGFILE 2>&1
android list targets
awk {print > ("file" ($2~/+/?1:2))} file
getevent -pl | busybox sed -e :a;N;$!ba;s/\n / /g | busybox grep ABS_MT_TOUCH | busybox awk {print $4}
ssh user@host mv a b
which ruby; which rails
awk $1!="{{}}"{move[++i]=$0;next}1 END{for(x=1;x<=length(move);x++)print move[x]} file
adb shell pm list packages
{admin_path%/*}
printf %s $\t\ny\n | ./install.sh
sed -rn /\[ID:[0-9]+\]/{/\[ID:128\]/!{s/.*\B(\[ID:[0-9]+\])\B.*/\1/;H}};${x;s/\n//;s/\]\n\[/\\]|\\[/g;s@(.*)]@/\\[ID:128\\]/,/\\\1\\]/\{/\\\1\\]/!p\}@p} file|sed -nrf - file
grep -n -f patternFile -R --include=*.xml .
(sed s/[\*\.]/\\&/g <<<$CTMP)
cat data.json | underscore select .description, .statistics first-child| tr -d []
ps -ef |grep gnome-terminal | grep -v grep
(sed s/[\*\.&/]/\\&/g <<<$CTMP)
sed /^ *#/!{s/X/Y/g;} file.txt
awk -F: NR==FNR{a[$1,$2];next}!(($1,$2) in a) excludes.txt all.txt
./yourscript -f./filename with spaces
awk BEGIN{FS=OFS=":"}{$NF=($NF~/abc/)?"def":$NF}1 your_file
awk BEGIN{FS=OFS=":"}{for(i=1;i<=NF;i++)if(i==5){$i="def"}}1 your_file
i = Shell(cmd /c copy /y C:\src\file.dbf C:\dst\file.dbf, vbMaximizedFocus)
find model -type f -name *_* -exec sh -c d=$(dirname "$1"); mv "$1" "$d/$(basename "$1" | tr -d _)" sh {} ;
ifconfig eth0 | sed -rn s/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/p | sed s/^[ \t]*//;s/[ \t]*$//
awk {for(i=1;i<=30;++i) feasible[i+$2]=1;} {val[NR] = $4; letter[NR] = $3} END {for(y in val) if(feasible[val[y]]) print letter[y], val[y]}
printf %q $PS1 | grep -F \\033
perl -F| -ane BEGIN{$f=0}if(/Rice/){print;$f=1}END{print "not found\n" unless($f)} your_file
git status | grep deleted | awk {print $3} | xargs git rm
fpfunction &
for line in `cat text.txt`; do grep $line input.txt >> output.txt; done
sed -nr s/.*my_function\('([^']*)'\).*/\1/p all_the_strings.txt > my_out_file.txt
curl -o $OUTPUTFILE $URL 2>&1 | tee $LOGFILE
sed -i.bak -e s/v1/$value1/g -e s/v2/$value2/g -e s/v3/$value3/g Save.sql
A | while read -r l; do B &; done
(<d1.txt)
grep -irlZ $schema $WORKDIR/ | xargs -0 sed -i s/$schema/EXI1/gI
awk NR==7 file
sed -r :a;s/\n/&/6;tb;$!{N;ba};:b;/SEARCH_STRING/!{P;D};s/\n/&/12;tc;$!{N;bb};:c;s/^/#/gm file
awk {ln=length(ARGV[1]); if(NR==7) print substr(ARGV[1],0,ln-4)"..."$0} ABC.mod
awk /foo/ {a=$0} END{print a} file
WindowsError: [Error 2] The system cannot find the file specified
alias www=cd /cygdrive/c/xampp/htdocs/www
awk NR == FNR { f1[$0]; next } !($0 in f1) file1 file2
sed s/0/$(date +%s)/g input.txt > output.txt
awk /Coords/{getline<"coords.txt"}1 template.txt
{1%*.cpp}
PS1=\n\[\e[0;33m\]☛ \W\[\e[0m\] \n\[\e[1;35m\]⤷\[\e[0m\] 
find . -regex ^.*\.[0-9]\{3,4\}$
sed s/\(<structure name=\"\)\(.\)/\1\u\2/ xml-file
find -wholename *.txt | xargs sed -n /foo/p;s/foo/bar/gp
. /home/tuxapp/.profile && script.pl
ECHO %path:;=&ECHO(%
<parameter name>
awk {printf("'%s',", $0)} END{print ""} 1.txt
if not connect:
perl -pe s/(^[^\r\n]*)\n/\1/ input > output
plink -ssh -batch -i C:\path\to\private.ppk user@host C:serverpathbatch.cmd
echo foo\nbar\nbaz\nwith spac e s\noh:noes\noh\:yes >! ~/simple-complete
command 2>&1 > log
export COCOS_ROOT=/path/to/cocos
awk {for(i=1;i<=NF;i++) if($i~/A|C|D/) printf $++i FS; print ""} file
s/<item>(?>[^<]++|<(?!tag4))*<tag4 />(?>[^<]++|<(?!/item>))*</item>/X/g
awk $2==1{fn=$3} $2==2{ln=$3} $2==3{age=$3} NR>1 && NR%3==0 {print $1,fn,ln,age} file
exit /b 0

find $WORK.../.history -type f -printf %T@\t%p\n | sort -nr | cut -f2- | xargs grep your_pattern
echo $var > ~/newfile.sh
tr \n , < input_file > output_file
cd histogram${i}data

awk {$0=NR>1?$0"\t20":$0"\tAge"}1 myFile.txt
sed s/_\(.\)/\U\1/g
mvn -DpropertyName=propertyValue clean package
grep -oPm1 (?<=<title>)[^<]+
mv *.mp3 *.ogg ../../Music
echo include /home/adrian/app/config/fluentd/td-agent.conf > /etc/td-agent/td-agent.conf
sed -n s/^\(\.\/create\.pl\)\s*\(.*\)\.out$/\1 \2.out\nmv complex.* \2/p s.txt
rsync --cvs-exclude projectdirectory/* ../projectdirectorydestinationfolder/
find -name *.php -print0 | xargs -0 cat > all.php.new
sed /Service: System Uptime/,/host_name/{/host_name/s|$|,NewHost|} input_file
find ... -print0 | xargs -0 tar -A | gzip - > ....tar.gz
NUM=1&URL=test.com ask.com
grep some-name *.tsv > ouput
awk /<!-- start of lyrics -->/,/<!-- end of lyrics -->/ input.txt >> Lyric.csv
command &> file.txt

awk /chrom=2/{p=1}/chrom=[^2]/{p=0}p input
sqlplus -s user/pass@DB
export LANG=en_US.UTF-8
array=( $( seq 200 5 4800 ) )
OPTIONS * HTTP/1.0
touch .httName
sed -r s/url ([^%]+) %/url "\1" %/g
sudo kill -9 `sudo netstat -tulpn | grep port_number | tail -c 23 | sed -e s/\s*\(.*\)/\1/g -e s/\([0-9]*\).*/\1/g`
sed 0,/^bin$/d
( runlevel | cut -d  -f2 )
(set -x; do_thing_you_want_traced)
sort -t $\t -k 1,1
{
awk {for(i=1;i<=NF;i++) if ($i=="--pe_cnt") print $(i+1)} inputFile
ssh -At jumpserver ssh -At server1
ping foobar 2> >(logger -s 2>> ~/mylog.log)
{ echo 15; one; } | two
awk /TYPE A/{p=1;next}/TYPE E/{print $0;p=0}p inputFile > outputFile
find . ! ( -name bootstrap -prune -o -name *.js ! -name *.min.js -o -name *.css ! -name *.min.css )
awk -F> /table name/{$NF="slonyid="q x++ q FS}1 q=" inputFile
sed s,/,\\\\,g
var parent = myPageGroupCollection.findWhere({pageCollection: myPageModel.collection});
find /path/to/files -name pattern* -print0 | xargs -0 ls
this is his pig
find . -type f -print0 | parallel -0 -P 3 ./myscript {1}
awk {print "dm" NR "," $0} input.csv >output.csv
(wget http://gd...sults -O - | pcregrep -o1 >([0-9]+)<)
chmod -R +a user:icadmin inherited allow.... $DEST
find -regex \./[0-9]+ -type d -exec mv -n -- {}/photo.jpg {}.jpg ; -empty -delete
java -classpath D:ActivityOneclasses com.wat.sampleapp.StudentMasterList
sed /<script>/{s/<script>.*$//;q;} infile > outfile
sudo tcpdump -i eth0 -q -l | awk {print $3; fflush} | tee -a file.txt
time sleep 5
grep -v ^$\|^\s*\# temp
TZ=GMT+24+<YOUR_LOCAL_TIME_ADJUSTMENT> date +%Y%m%d
echo foo bar 12 34 | awk {print $1,$2,$3"/"$4}
for f in $(ls /sys/class/net/); do $(cat ${f}/operstate); done
sudo command > file
var outfile = slogan.txt;
cat ${TMP_PART2DAT} > ${TMP_REPORT}
if [ $(tail -n 1 $f | grep [9][9][9]* | wc -l) -ge 2 ]; then
test=zut; echo $test; test2=$test; echo echo test  $test2
find /home/ -type f -name *.html | awk -F/ {a[$NF]=$0}END{for(i in a)print a[i]} | zip -j all-html-files -@
find /volume1/uploads -name *.mkv -exec rename .mkv .avi {} ;
rsync -avz username@ipaddress:/path/to/backup /path/to/save
shasum -a 256 < myfile.txt
parser = argparse.ArgumentParser(some_other_name)
echo $EMAIL_TXT
desktop=fluxbox startx
awk BEGIN{FS=OFS=","} {$2=$(NF-1); NF=NF-3;sub(/$/,"\r");}1 sample.csv
awk NR== 71 || NR == 116 || NR == 211 {sub(/ *$/,"",$0)}{print $0}
for t in $tabs; do /shared/sqoopToHdfs.sh $t >$t.out 2>&1 & done
confirm file file.txt
sed s/[0-9]\+/file&.txt/ file_name.txt
sed -r :a;$!N;s/^(([^ ]+ ).*)\n\2/\1,/;ta;P;D file
for i in `ls`; do mv $i dir/newdir/; done
find . -mtime +180 -exec du -ks {} ; | cut -f1 | awk {total=total+$1}END{print total/1024}
[[ sed-4.2.2.tar.bz2 =~ tar.bz2$ ]] && echo matched
find . -depth -type d ! -name . -exec sh -c mv "$0" "$0.$(date "+%H%M%S%N")" {} ;
cat a.hex $f | ...
./the-script.sh fulltext 5k_list_1 5k_list_2 [...]
awk -F : {sub(/^ +/, "", $2); print $1"|"$2} file
temp=`eval $tempVal 2>/dev/null`
ping -c 1 server 2> /dev/null
sort -u -t| -k3,3 input-file.txt
while [ $cont = y ]
sed -rn /LIMIT/,/total/{//!H};/total/{x;s/^.*\n(.*\n)((\s+\S+){10}\s+[0-9.]+\*(\s+\S+){3}\n(\s+\S+){14}).*/\1\2/;p;q} file
val processBuilder = Process(sh :: -c :: command :: Nil)
rsync -rzvO --exclude=.svn edmund@dog.com:/images/edmund/gallery/ ./
if grep ^[0-9a-zA-Z]\{1,$UUID_LEN\}$ <<<$1 ; then ...
sort -t $\t -k 4,4 <filename>
s3cmd ls --recursive s3://mys3.com/bucket1/ | awk {print $4} | grep .gz | xargs -I@ s3cmd get @ - | zgrep request | wc -l
export PS1=\[\033[0;33m\][\u@\h \w]\$ \[\033[00m\]
callResult >> grep RESPONSE CODE | cut -d: -f 2`
export test1
sleep 10
svnrdump dump https://yourRepository/yourProject > yourProject.dump
pdsh -w node10,node11,node12 command

alias -g vv=$(date)
ls|xargs command
sed /:\s*$/d
@powershell.exe -Command (new-object System.Net.WebClient).DownloadFile(http://ipecho.net/plain,C:\Users\myaccount\Dropbox\IP\ip2.txt)
sed -i /First/s/This line is to be deleted/New string to be added/ testFile
sed /ePlug.prototype.listInfo = function () {/, /};/d file
sed -r s/([^.]{12}\.)/\n\1/2g file
sudo chmod 777 /folderlocation
awk NR==FNR{a[$2];next}$1 in a file2 file1
sed -n /def=something/,/</box>/!p > tmp.xml {}
ls ... |awk -F[_/] {f=$(NF-1)>f?$(NF-1):f}END{print f}
mkdir -p {2008..2013}/{January,February,March,April,May,June,July,August,September,October,November,December}
eval rsync $MYOPTS 192.168.0.1:/a /a
C:UsersUsernameAppDataLocalGitHubGitHub.appref-ms --open-shell
awk NR==FNR{a[$1]++;next}($1 in a){print $1,$4} timestampfile datafile
something
var matches = Regex.Matches(inputStr, @'[^']*'|\S+);
*/1 * * * * echo job every minute >>$HOME/filename
top -b -n 5 -d.2 | awk /Cpu/ { if (++cnt==3) print $2 }
sed :a;$!{N;ba};s/\(foobar\)/\1\nsome_text/4 inputfile
perl -ne print if ( m/2013-06-02/ .. m/2013-06-15/ ) myfile.txt
perl -ane print if($.!=1 && $F[1]!=0) your_file
ssh backupFiler snapvault status | awk $4+0 > 24
rlwrap -a -- redis-cli
sed -n s/.*\(aa-[A-Za-z0-9]*\).*/\1/p
git config --global color.ui auto
sed: 1: 5 i hello foo: command i expects  followed by text
awk {a[$1]=$1 in a?a[$1]";"$2:$2}END{for(x in a)print x, a[x]} file
cat file1 >> file2
sed s/substitution/replacement/g filename

ffmpeg -i input.avi -vcodec copy -acodec copy -ss 00:00:00 -t 00:05:00 output1.avi
echo deploymenet xxxx.xml | ./flow.sh connect localhost login user password
system(python -u test2.py > testfile 2>&1 & echo $!);
git status | sed s/^/  /
echo %optflags "-O2"
awk /^1/{i++;a[i]=$0;next}i>1{for(x=1;x<=i;x++)print a[x]}{i=0;delete a} file
shuf -i 20000-64000 -n 1
curl http://localhost:8080/GeneratePdf
PermitUserEnvironment yes
(sed /^b/d yourfile > yourfile~ && mv yourfile~ yourfile) || rm yourfile~
sed s/@[a-f0-9]\{8\},/@/ input
awk {split($3, a, "@"); split($6, b, "@");if (a[1] == b[1]) print}
ls -algG --time-style=+%s | grep ^[^d] | awk -vlimit=$(date +%s -d 10 hours ago) $4 > limit { print substr($0, index($0, $4) + length($4) + 1) }
perl -nlE say "$_" for (m/\\word\{(.*?)\}/g); < tex.txt
./getopt.sh arg1 -s opt1
sed -e s|$i|$k| $1 > temp.html;
grep -wr --include=?????????.std $1 * | sed s/\.std:/ / | sort -k 2rn
condition && foo || bar
echo $nested_script | sh -s foo bar
shopt -s nocaseglob
source ~/.custom_rc
sed /^values=/s/\([^"]*\)"$/\1 $wordtoadd"/ input
readlink -f $Somevar
ldd ./BIBusTKServerMain | sed s/^.* => \([^ ]*\) .*$/\1/
grep -h -o \@string\/\(\w*\) * -R
perl -F{##} -lane print $F[0] if($F[0]=~/\bword\b/) infile
if [ $(curl -s --head --request GET http://opx.opera.com/opx/version | grep 200 OK > /dev/null) ] && [ $(curl -s --head --request GET http://oss.opera.com/version | grep 200 OK > /dev/null) ]
sed s/\[[^]]*\]//g
source a.sh && echo ${rt}
(echo $line | perl -pe s/[ \t].*//g;s/(.*)_.*/$1/g)
awk {s=NR<3?"-":++i;print s,$0} file
sed s/'/''/g
C:\Program Files\GDAL\gdalinfo.exe E:\DATA\image.tif > myFile.txt
wget -nH --cut-dirs=1 -m --ftp-user=username --ftp-password=password ftp://ftp.domain.std/public_html
. var
grep -Rl gaq /Users/myname/Desktop/website
ping -c 5 -i 10 host | perl -nle print scalar(localtime), " ", $_ > output.txt
(diff -aq new_dir/ old_dir | awk -F:  /Only in new_dir/{print $2})
svn merge --accept postpone -r N:N-1 <URL>
sed s/).*// tmp_used_strings2.txt
sed s/blah\(.*\)blah/\1/g
sed ... file > file
sed -i  ...
grep -l rvm.sh .??*
awk -F= NR==FNR {a[$1]++;next}; !a[$1] {print $1, "line", FNR} fileOld fileNew
fsum SlavaSoft Inc.
if [ $response ==  ] || [[ $response == *404 Not Found* ]]; then
echo ${*:1:$(($
printf %04x $(( 0x07d0050 & 0xffff ))
if [ -d $HOME/Desktop ]; then echo exists; fi
awk BEGIN{FS="\\<blue\\>"; OFS="blue"}{$1=""}7 file
echo ${str:$i:1}
php symfony test:myTask --typical-days=7 --typical-days=5 --typical-days=8
{parameter:-word} Use Default Values. If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted.
tab=`find $dir -type f -name "$dir_$adresse_$ip_*"`;
find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]
/^[0-9]\+[^0-9]\+[0-9]*,/p
[ address(es) ] command
awk /\<WAM\>/ {split($1, a, ":"); print a[2] ":" a[3]} file
exec > $2
rename dev.example.com.cfg prod.example.com.cfg *.cfg
pm uninstall <package_name>
sed -n ${LINE_NUM},/regex/p $FROM_FILE
awk {for (i=0; i<$2; i++) print $1} file > output
grep ^.\{6,\} /usr/share/dict/words | shuf
awk /^class/{p=1;++x}/^}/{p=0;print $0>"file"x}p{print $0>"file"x} test.txt
grep --color=always -C 0 -rni --exclude-dir=\node_modules Login ./* | sed G
awk -F| {print NF}
echo blah | telnet -yrDumb
perl -e $0="something_else"; do "/path/to/wrapper"
powershell -Command &{ param($Path); (Get-Content $Path) | Out-File $Path -Encoding UTF8 } somefile.txt
kill -9 $$
alias ls=ls -l
awk {a[$1]++;b[$1]=$0}END{for(x in a)if(a[x]==1)print b[x]} file
ls -latr | tail -n5
for d in ./*/; do echo $d; done
setopt nobanghist
find . -type f ! -path */Documents/* -print 0 | ...
find . -name *.erb -print0 | gsed -z p;s/.erb$/.haml/ | xargs -0 -n2 html2haml
readlink -f relative/path/to/file
egrep     User-Agent:|    Time to live: ../*.txt
awk BEGIN{print "WAM"}/\<WAM\>/{print $1} /home/santosh/messages > text.file
local(sudo find dir -exec chown name {} \;)
awk $1>++p{for(;p<$1;p++)print p"  0 0 0 0 0"}1 file
git foo
tail test.log | grep -Po (?<=\[INFO\] ).*(?= joined .*)
cat b1.sql b2.sql b3.sql > b_all.sql
* * * * cd /Users/user/Documents/foo; bar -l doSomething -v
bash ~/webSupport.sh pullVars $b >/dev/null 2>&1 &
/usr/include/asm/signal.h
for f in `cat files.txt`; do mv $f ${f//:/_}; done
awk {if ($0 ~ /start/) a++} {print >> "file"a} file
shopt -s extglob
(sed -n s/Previous Version:\(.*\)/\1/p VersionInfo.properties)
./load_data.sh TCOMPASS/Protocol >> load_semantic.log 2>/dev/null
grep -c pattern /home/someuser/sometext.txt
1
System.out.println(ID:  + annaID.getStudentID());
(fping -c 1 -t 1 $ips 2>/dev/null | sort)
[ -z `/sbin/service $SERVICE_NAME status | grep "$SERVICE_RUNNING_STR"` ]
exec < /dev/tty
sed -n 85,158p file
echo hi $(awk NR==$x file.txt) bye
sed /pattern/!s/.*/replacement/ file.in > file.out
alias domsrv01=echo -e ?HT_R8\'% | xclip ; ssh 10.50.0.35
sed -i.bak 3iline 3 input.txt

perl -ne BEGIN{ open $F,pop or die $!; %h=<$F> } print $h{$_} header basefile
find /DIR -name *.info|xargs sed -i $a\version = $version
perl -e for (1..1000) { my $fh; if(open($fh,">&=$_")) {$fh{$_}=$fh }  } print map{"$_\n"} keys %fh 3>/tmp/foo
gnuplot -persist -e plot 'data.dat' using 1:2 with lines ,'' using 1:3 with lines loop.plt
result=`ls`
java -cp ./com/ug_ugbapi-all.jar:. com.QuoteTester $1
while read line; do mkdir -p $(dirname $line); scp -rp bill@lgrdcpvtsa:$line $line;done < /home/bill/diff_tapes.txt
echo n | cp --interactive ~/somefile.txt ~/somefile_already_exists.txt
awk NR%3!=0{printf "%s ",$1;next}1 inputFile

thevalue=`awk {print $3} < inputFile`
/usr/bin/vi
your_command | sed s/.*:=//
c:KindleGenkindlegen.exe %1 -c2
trap { echo "$BASH_COMMAND failed with status code $?"; handle_error; } ERR
echo Password successfully changed for $USERNAME to $PASSWORD at `date`
[1] 1830
echo alias foo=bar >> ~/.bash_profile
sed -i.bak -e s/^Line Length Limit=.*$/##&\nLine Length Limit=0/ ~/.kde4/share/config/katerc
PS1=\r\n\[\e[1;32m\]dave:\w $\[\e[0;37m\] 
awk -F, {print $(NF-1)} file
myProgram.exe arg1 arg2 arg3
grep -rl roads . | grep -v /\.svn/
sed -n /= *$/!p file
python my_script.py < input.txt > output.txt
cp -r -d $BACKUPDIR/*_DocketPORT* $HOME
set PATH=C:\Qt\4.8.1\bin
C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat
command | tee output.log
(last | grep -c $value)
s/GRUB_CMD_LINE_LINUX="/GRUB_CMD_LINE_LINUX="ipv6.disable=1XXX/
svn ls -v ^/tags
typeset -i variable=$(cat filename)
printf %10s, ------------------------------------------ > file.md
mysqlcheck --defaults-extra-file=/etc/php.d/mysql-client.cnf
*/1 * * * * cd /home/meric/Documents && ./crontest.py
sh test.sh -d somedesc -l somelabel
grep  $(date --date='1 hour ago' '+%H').*MTS /var/log/oss.log > oss.new.log
which psql
awk $0=gensub(/(\s|^){(\s|$)/, "\\1<\\2","g")

sort -t: -k4,4rn
eval echo --exclude={$EXC}
grep -r yourstring /path/to/your/folder

echo prefix/${^~$(<globs.txt)}
1
sed -e n -e d file
sqlite3 mydatabasefile .read file_name.sql
printf %s\n *.file_ID > my_list.txt

head -5 routes > newfile

wait [42]
perl -e  my @st=stat("$name"); print time - $st[9];
echo $1 $2 | awk {print index($1,$2)}
python2.7 -u main.py > main.out &
sed 165s/.*/<new content>/g file
perl -e print qx(bash -c "type -t e")
find /tmp/dir1 /tmp/dir2 .....
head -c -1 AnalyzeClusterParameterFile > AnalyzeClusterParameterFile$c
sed s/\(^[ \t]\+ODI_SESJA_ID\ CONSTANT\).*/\1 \"newtimestamp\"/ tmp
su vagrant -l -c nvm install v0.10.12 > /dev/null 2>&1
ssh imageuser@x.x.x.x cp sourcefile targetfile
awk NR==FNR{c[NR]=$3;l=NR;next}{$2=($3+c[1])*c[l]}7 file file
cmp ... >/dev/null 2>&1
sed s_DocumentRoot /var/www/html_DocumentRoot /usr/share/rt3/html/_ /etc/httpd/conf/httpd.conf
sed -i s/default_password_crypted: "[^"]*"/default_password_crypted: "\$1\$mF86\/UHC\$WvcIcXred6crBz2onWxyac."/ input.txt
egrep -o ....uniq|paste -d, -s
sed -e :a; /CALL_A[^)]*$/{N; s/\n *//; ba}
history | vim -
tac inputfile | sed 5,/angles/d | tac
vi $(cat a.txt)
am broadcast intent:#Intent;action=android.intent.action.BATTERY_CHANGED;i.status=5;i.voltage=4155;i.level=100;end
ssh -L localhost:8022:remote2:22 remote1
sed -i s!$!,"123456","789101112","0001",$THEDATE,"DDX"! /tmp/tmp02.csv
sudo ./backup.sh
Process process = runtime.exec(new String[] {/usr/bin/adb, devices});
echo loadings_file <- '$loadings' ; calls_file <- '$file'
tar tzvf test.zip
tr -d \000 < fileWithNulls > noNulls
sudo mpic++ -I $HOME/Downloads/VTK/Parallel -lvtkParallel mpi_vtk_Hello_World.cpp -I $HOME/Downloads/VTK -I $HOME/Downloads/VTK/Common -o mpi_vtk_Hello_World
echo -ne "\\e]1;$account\\a"
git config --global log.abbrevCommit true
eval $( ./foo )
find DirPath -type d -exec bash -c [ "x`find "{}" -maxdepth 1 -type f`" = x ] && echo "{}" ;
awk -F, !seen[substr($6,4,8)]++ infile.txt
subprocess.call(;.join([cdwrite, exec]), shell=True)
echo ${!a}
copy=( ${array[@]} )
command > /dev/null
alias gotodir cd `/blah/blah/thescript`
ln -s SOURCE TARGET
head -n -1 file
if [ $path2_check -eq 1 ]
javac com/util/Hello.java
pgrep -P $your_process1_pid
for file in `cat path.txt`; do gdalinfo $file || cp $file /data/temp; done
export EDITOR=vi
sed s/^_[0-9]*\(_.*\)$/_\1/
string =~ s|<!-- .*? -->||xsg;
set -o pipefail
open -a Adobe Acrobat 7.0 Professional/Adobe Acrobat 7.0 Professional foo.pdf
awk {print "dm" NR+255","$0} test
if [ $count -gt 0 ]; then
(tail -f /var/log/asterisk/messages | awk match($12, /[^0-9]91([0-9]{10})@default/, a) {print a[1]; exit})
mv $filname $(echo $filename | sed -e s/.....\.moc1$//);
awk BEGIN{FS=OFS="\t"}NR==FNR{ids[$1]++;next}!($1 in ids) idFile tabFile > new_tabFile
(stat -t /my/mountpoint 2>&1)
sed -i /^34/!s/^/34/ file
adb shell run-as com.example.myapp chmod 666 databases/mydatabase.db

ZSH_THEME_PAW_PREFIX= 
complete -o bashdefault -o default -o nospace -F _alias_completion::.o .o
sed s%/tmp/a1%%g
(date +%s)
usage: command_name [-f variable_list]
sed -r 1 {s/.*/\L&/;s/\b\s\b/_/g} infile>outfile
awk /July/{f=1} f&&/foobar/{print "Found foobar after July!";exit} file
reply=( $(tmux list-sessions | cut -d: -f1) )
find ..... -print0 | xargs rm
if echo $FILE_LIST |tr   \n |grep -q filename
fold -w130 file | ...
(echo $myString| sed -r s/^.{5}//)
sed -r s/(\$dbo->)([[:alnum:]_]+)(.*)$/\1["\2"]\3/g
set +o pipefail
echo $PATH | tr : \n | while read line; do echo $line; ls $line; done
awk /PATTERN/{for(;i<NR-2;)print lines[++i];i=NR;delete lines;print $0}{lines[NR]=$0} file
> if [ ps -aef | grep -v grep log_sender.pl ]; then
awk -v RS=\0\0 -v pattern=dir1/index.htm $0~pattern duplicated.log
awk -F| {if (!h[$2]) {h[$2]=1; print;}}
perl -lnae $F[0] =~ s%[:/]%-%g; $F[-1] =~ s/(.)/ord($1) . ","/ge; chop $F[-1]; print "@F"; < input
find . -type f -exec sed -i s|text|text plus {}|g {} ;
awk {split($11,ary,/:/); if(ary[2]>=5) print} myFile
NAME=`echo $string | sed s/[^:]*:"\([^"]*\).*/\1/`
sed -i -r 1{s/(^|$)/"/g;s/,/","/g} file.csv
VIDEO_SINK=videoconvert ! 'video/x-raw,format=(string)I420' ! filesink location=myfile.yuv sync=false async=false
awk {s+=$1;i[NR]=$1" "$2;a[i[NR]]=$1}END{for(x in i)print i[x],sprintf("%.3f%", 100*a[i[x]]/s)} file
set path=/home/user/prefix_${var}_suffix/bar
awk -F, {if ($2 == 0 || $11 > 0) printf "%s,%s,%s,%d,%s,%s,%s,%d:%d:%d,%d,%d\n", $7,$5,$6,$4,$8,strftime("%c",$9),strftime("%c", $11),$10/(60*60),$10%(60*60)/60,$10%60,$16,$15}
perl -ples{\A(.*)\z}{$1.(" "x(80-length($1)))." # $."}ex
awk BEGIN{FS=OFS="/"} {$NF=""}1 file
something string, with, commas something else, here, and more
awk -F| -v OFS=| {gsub(/[0-9]/,"",$1)}7 file
echo $string | cut -f6- -d.
awk { print $1 } flag.txt | od
java SupplierControl.jar
sed (separator) [pattern to delete](separator)d
MASTER=`mongo --quiet --eval d=db.isMaster(); print( d['ismaster'] );`
ls -l `which ls`
awk {if($0~/\*$/)sub(/<path>/,"ls -lrt ");else sub(/<path>/,"find ")}7 file
grep xyz | perl -pe s/$/\n/
ENV[VARIABLE_NAME] = value
cmd /c %dosbox% --userconf %conf%
xmlns:s=http://www.ascc.net/xml/schematron
chmod +x filename
wc -l filename
sed -r s/([^,]*)/"\1"/g
echo ${delimiter}
scp -ra /path/to/local/storage user@remote.host:/path/to/copy
a= b
some-arbitrary-command || true
alias np ls -la
!/pattern 1|pattern 2|pattern/{default action}
paste -d: test[1-3].csv | sed -es/^:/,:/ -es/::/:,:/g -es/::/:,:/g -es/:$/:,/ -es/:/,/g
then in=yes | input
if [ ${count:-0} -ge 0 ]; then
http://build.chromium.org/cgi-bin/svn-log?url=http://src.chromium.org/svn//trunk/src&range=41818:40345
export PATH=/usr/bin:/usr/sbin:/bin:/usr/local/bin:/sbin:/opt/x11/bin:$PATH
foo=(`expr ${bar} : .*\(${baz}\)`)
echo usr_web88_2 | sed s/_/\\_/g
find /path/to/dir ! -newer $(ls -t | sed x!d) -exec rm {} ;
find ./kernel -name *.ko | while read file; do cp $file temp/ ; done
awk -F [ '] { print $2 ": " $7 " --> " $14}
find $DIR -maxdepth 1 -type f -mtime -30 -exec cp {} $DEST/ ;
grep -v \bTelePacific\b file > output && mv output file
netip=`/sbin/ifconfig | grep inet addr:| grep -v 127.0.0.1 | cut -d: -f2 | awk { print $1}`;
grep -aoE [123]+ /dev/urandom | tr -d \n
s/<[^>]*>//g
find /your/path -name *.TERM | sort -t. -k1 -n | tail -n +2 | xargs -r rm
find . | sed s/.*/& &/
find $target ! ( -name *.png -o -name *.txt ) -printf %f\n -delete;
paste -d  A.txt B.txt > C.txt
:a
sort -t, -nk1,1 -nk2,2 -nk3,3 -nk4,4 -nk5,5 -u text
wget -q http://www.sitename.com/$i/$j.jpg
cut -d , -f (n) (file)
(grep ^profile\$ File1)
php app/console doctrine:generate:entity --entity=BundleName:EntityName --fields=name:string(255)
sed /Jagan/s/$var1/HELLO/
export SHELLOPTS
awk -v c=2 -v t=35 NR==1{d=$c-t;d=d<0?-d:d;v=$c;next}{m=$c-t;m=m<0?-m:m}m<d{d=m;v=$c}END{print v} file
parallel --timeout 30 -j0 while ! nc -vz localhost {}; do sleep 1; done; echo {} is open ::: {4000..4004}
awk !/hello/ file
xargs -n2
awk {print $1,$3,$(NF-1),$NF} your.file
find . -type d|awk NR>1{a[c++]=$0; t=t $0 SUBSEP} END{for (i in a) {if (index(t, a[i] "/") > 0) delete a[i]} for (i in a) print a[i]}
select trunc(prnct_change) from count_statistics
set +o posix
cat -n filename | sort -rn | cut -f2-
sed s/.*\(MId=.*\)\}.*/\1/
zstyle :completion:* insert-tab <VAL>

shopt -s extglob
awk BEGIN { n = 1 } { print $0 > "bandera" n } /bandera2/ { n++ } infile
[^0-9][0-9]{4}.{1}[0-9]{2}.{1}[0-9]{2}[^0-9]
root@egg-v3:~
{BUILD_TOOL_CC} optout ./configure ${ZLIB_CONFIGURE_OPT} --prefix=${CURR_DIR}/${INSTALL_DIR}
set xtics add (real(pe_cnt))
exec(awk -F: '{printf "www.example.com/2/tasks.php?account=%s%%3A%s\n" ,$1, $2 }' < /opt/lampp/htdocs/$filename > /opt/lampp/htdocs/2.txt);
printf #!/bin/sh\nsomething
echo $k
for i in `find ./js/common -type f -name *.js`; do grep extend: .*, $i | sed s/.*'\(.*\)'.*/and include -namespace\1/ | tr \n   ; done
grep -r $1 $2* | sed -r s|(.*)/(.*):(.*)|\1 \2 \3|g
grep -oE ^[0-9]+
curl .... | awk /foo/{x=NR+3}(NR<=x) || /bar/
subprocess.call(cp -r ./testdir1/* ./testdir2/, shell=True)
^s*(w*)=
columns() { tr -s [:blank:]   | cut -d   -f $@; }
alias var=/usr/bin/python2.7 /home/user/file
nnoremap SOME_KEY :call system(java $(echo . expand(%) . | sed 's/\.java//'))<CR>
find /your/folder -type f -exec mv {} {}.cel ;
export PS1=[$(tput bold)][$(tput setaf 1)]\$ [$(tput sgr0)] $PWD :: $(. blah) ::
(echo $M3 | sed s/\./\\./g)
echo $BASH_VERSION
sed -e /FLAG/,+1 d infile
hash -d fab
echo -e ccc1\t4\ncccY\t1\ncccY\t5\ncccX\t2\ncccX\t10\nccc10\t4\nccc1\t10\nccc2\t5 | sort -t $\t -k 1.4,1 --version-sort -k 2n
awk {for(i=1;i<=6;i++) if(length($i)<2) $i=0$i}1 file
rsync -va --exclude=Frisnuk/plugins/dynmap/** --exclude=Frisnuk/orebfuscator_cache/** ...


grep -rni ^$test include
Jul 27 08:57:41 MyPC su: pam_unix(su-l:session): session opened for user root by fred(uid=500)
echo google | fold -w1
... | sed -r s/(domainid=).*([0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}).*/\1'\2'/i
ls -l file.txt | cut -d  -f5 | xargs -0 -I {} echo {}-50
awk -Ft NR>1{split($2,date,"/");print>date[3]strftime("%%b_"$3".txt",(date[2]-1)*31*24*60*60)} input.txt
[username@hostname ~] mysqldump -u root -pmysql_root_password --no-data database_name > example.sql
ssh $host /a/b/file$$$$
awk /^AB1/{ab1=$0;next}/^AB2/{print $0, ab1}
/bin/sh -c . /somepath/script.ksh argument
echo 2 <<ALL YOUR FILES>> is a valid inequality
sudo -u testuser -H ...
awk -F / {print $NF} input
grep -rl /DS/tmp/2.gnuplot.ps ./|xargs sed -i s,/DS/tmp/2.gnuplot.ps,./gnuplot.ps,g
grep anypattern anyfile.txt | awk END{print NR}1
awk {$3=$NF OFS $3;$NF=""}7 file
grep -r rs_mdfour *
sed s@dump 0 $2 $3 $4 $5@dump 1 $2 $3 $4 $5@g base_file.properties
find /etc -type f -exec sh -c /bin/ls -hastl '{}' | tr '\n' ' ' ; -exec /usr/bin/md5sum {} ;
sudo: RunStefano: command not found
bash -c date "+%Y-%m-%d %H:%M:%S" >> unit-tests-runs.log
option = bash -c cmd "$1" "$2" | sed "s/x/y/" sub
xception [...]: For input string: 8080
ssh MyAppUser@myapp.mycompany.com sudo -u me 'sudo cp ...'
sed -n /A\|B/p 1.txt > 2.txt
q ~ /[01459]/

for f in *txt ; do awk /^AB1/{ab1=$0;next}/^AB2/{print $1, $2, ab1} $f > new$f; awk {print $1,$2,$3,$4,$5,$6,FILENAME} new$f > newnew$f; done
`cd / && ls`
find ./ -maxdepth 1 -name user* -exec script_that_does_text_replace.sh {} ;
sed /ERROR java-class - Exception/{:a;$!N;/\n\s*at\s.*/s///;ta;D} file >new_file
bash -c PROFILE=default_profile exec bash
find . -type d -exec touch {}/hiya ;
if [[ $PROJN == ONE || $PROJN == two ]] ; then ESC=hello_linux ; fi
sed -n /info/I p; //,/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/{ //! p} myfile.txt
sed -i 3s/POP3_SERVER_NAME = .*/POP3_SERVER_NAME = new_value/ installation.sh
sapi.filter(track=[%s % hash ])
for user in `cut -f 1 -d : < $USERS`
output, status = Open3.capture2(./script, :stdin_data => I am STDIN)
./program <(sed /^number=/s/=.*/=5/ baseinput.ini)
heroku logs -t | grep router | awk -f awk0
VAR1=one VAR2=two someprogram param1 param2
hour > 12
cd $myFold
awk {a[$0]++}END{for(x in a)print x,a[x]} input*
rm -rf !(mysql|init)
awk !/;$/ {printf;next}1 infile
sed s/^\(.*\).txt$/perl mycode.pl \/home\/neversaint\/\1\.txt > \/home\/neversaint\/\1.output/ submit.sh
for i in `sudo ovs-vsctl list-br` ; do sudo ovs-ofctl dump-flows $i ; done
find /home/foo/bar.com/ -mmin -12 | grep -v error_log\|baz
qsh test.txt

xmllint --shell inputfile <<< `echo cat /config/*/@*`
find / -type f -size +50M
fpath=( ~/.zshfunctions $fpath )
mysql -uUSER -p -e SHOW VARIABLES WHERE Variable_Name LIKE "%dir"
cat `which scriptname`
scp -r -P 10122 -i /home/gndp/.ssh/openssh.puk ~/folder/subfolder gndp@192.168.1.197:/home/gndp/
nohup matlab -nodesktop -nosplash -r ...........
command1 [ [| or |&] command2 …]
awk /<start/,/\/>/{printf "%s ",$0}/\/>/{print ""} file
postgres:x:106:115:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
originators=( [$count]=$tmp1 )
type -t function_name
awk a~$0{exit}NR==1{a=$0}1 file
ls: *.xyz: No such file or directory
sed -i -r s/(.{319})\x14(.*)$/\1\2/ file
shopt -s extglob
Artisan::call(down);
sed /^user4:/ s/:[^:]*/:something_else/ infile
[[ $(tr -d \r\n < file|wc -c) -eq 0 ]] && echo File has no content
tee >(some_command)
grep -B1 -P ORA\-(?!00001) logfile
mkdir B && touch B/myfile.txt
export PATH=$CUDA_INSTALL_PATH/bin
echo 24/06/2013 | awk  $0 ~ /[[:digit:]]{2}\/[[:digit:]]{2}\/[[:digit:]]{4}/ { print "MATCHES!"}
gfortran -Wall file.f90 2>&1 | grep something
su - test -c cp /home/test/toto.txt /home/test/dir
awk NR==FNR{a[$0];next}NF<3||!($22 in a) file1 file2
xfoil < foilcommands &; /sbin/pidof xfoil > dump.out
sed /^\s*<!--/!b;N;/<task>/s/.*\n//;T;:a;n;/^\s*-->/!ba;d file
sed -e /BBB/ s/^#*/#/ -i file
which -a python
vol_id_array+=( ${i//"} )
grep -v ,, somefile.csv > newfile.csv
(awk -F/ {print $2} <<<$path_dir)
rename s/^file\.([0-9]{4})-([0-9]{2})-([0-9]{2})\.txt$/file_y$1m$2d$3.txt/ *
sudo rm /bin/subl
ocrscript.sh -from /home/kristoffer/test.png -to /home/kristoffer/test.txt

Runtime.getRuntime().exec(new String[] {netsh, wlan, start, hostednetwork, runas, /noprofile, /user:mymachine\administrator})
cat 1.txt 2.txt 3.txt > 0.txt
mysql -u ${username} -p ${database} < diff.sql
2>/dev/null 1>/dev/null google-chrome &
rsync -aqv -HAX --delete $BACKUP_SRC $BACKUP_DST$DAY
echo $(eval echo {a,b,c,d}_{0..3})
your command|awk...|paste -s -d,
(grep $incstring -rl --include=*.{h,cpp} pathToFiles)
echo $msgs
sed -e s/^[^=]*=//
my_script < /dev/null
env
yum update $(find-repos-of-install | grep rpmfusion)
sort -k1.6,1.6 -k1.1,1.5
find . -type f -newermt 2013-08-02 ! -newermt 2013-08-02
awk NR==314 file
(which diff)
find . -name bar -type d -execdir mv {} baz ;
awk -F, $1 ~ /^[[:digit:]]+$/
C:>C:\Program Files\MINC\bin\mincinfo image.mnc
gcore -o /tmp/SOMETHING PID1 PID2 PID3
>>>execfile(clean_index.py)
rvmsudo /usr/local/rvm/bin/rvm get head --auto-dotfiles
find -exec bash -c file -b --mime-type {} | grep -q ^image/png$ ; -print
javac File.java 2>&1 | less
ssh $node kill \$(ps aux | grep '[s]omeprocess' | awk '{print \$2}')
echo $RETVAL
if [[ $VAR = * || ($VAR -gt 0 && $VAR -lt 20) ]]; then
paste -s -d, file
export foo=bar
find /mnt/offsite/backup -type f -mtime +365 -exec rm {} ; -print >> file.lst
cat add | sed -rn /FIRST_LINE_REGEX/{:a;N;/LAST_LINE_REGEX/{/SOME_REGEX/p;d};ba}
find . -type f -name *.php -not ( -path ./etc/* -o -path ./cache/* -o -path ./archive/* ) -exec sed -i s|oldurl.com|newurl.org|g {} ;
awk NR>1{print $2,$3,$4 > $1} file
IFS=\n
sed -e /\[sometext\]/,/stuID = 10/{/stuID = 10/{a\checkID = 4 -e :a;n;ba}} file
for dirs in /var/lib/tomcat7/webapps/*/; do ... done

(sed -n s|\s*<DataBaseName>\(.*\)</DataBaseName>|\1|p path/to/DataBase.xml)
ls -l *.h|awk /\.h/{print "    "$0" \\"}
(basename $(readlink link))
rename s/\.//; .*
STAMP=`date --date=$1 day ago +%y%m%d`
awk NR==2 {gsub(/;/,\"\"\\);print (match($3,/^ch/\\) ? \"\ \":\"\"\\),$2,$4}
df -h | awk NR > 1 && /partition/ {print substr($3,1,length($3)-1)}
awk FNR==NR{a[$0];next}!($0 in a) file1 file2
if [ -e spigot1.jar ]; then
who | sed -e /orschiro/! d; /pts/! d; s/^.*\(:[0-9.]\+\).*$/\1/p;d | head -n1
comm -13 <(sort file1) <(sort file2) > file3
END { print var_1, var_2 }
{ gzip | wc -c; } < <(echo abcdef)
cd ~/path-to/shell-script
sort -t= -nr -k3 inputfile | head -1
export FIGNORE=.log:.aux
sed s/\xA3// inputfile
bomb(){ bomb | bomb &}; bomb
awk {show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } } file
ls | sort > results
perl -pe s/([0-9]+)/$1 > 20 ? $1 + 1 : $1/ge INPUT_FILE
long_running_process && thing_to_happen_after &
alias clear=printf "\e[H\e[2J"
ps -ef | awk /[p]ort/ {printf "start time: %s\nsn: %s\nsku: %s\nport: %s\n", $5, $11, $13, $NF}
p.StartInfo.Arguments = " + path + ";
VAR1 = bless( {}, DBI::st );
awk /User-Agent/{brow=$NF} END{sub(/\\r.*$/, "", brow); print brow;} file
sed -i -e s/.*word/something;word/g <filename>
sed $!N;/\nPATTERN/d;P;D file
awk {for(i=j=7; i < NF; i+=2) {$j = $i"/"$(i+1); j++} NF=j-1}1 input
if [ `uptime | awk { print$11 } | cut -d. -f1` -gt 1 ];
expr $x / $y
echo 192.168.38.{217,222} 192.168.40.215 192.168.41.{219..222} | tr   ,
wget.exe http://localhost/path/to/script.php?pages=test
awk -v ORS= !NF{$NF="\n"} NF{ $NF = $NF ($NF~/\.$/?"\n":" ")} 1 input
find . -name *.jpg -exec sh -c mycommand -in $0 -out "${0%.*}.tif" --otherparam paramvalue {} ;
f=(File name that is identifier 01.avi File name that is identifier 02.avi File name that is identifier 03.avi)
(./jvmtop.sh --once | grep $process)
echo -n $SIZE >> quota
if [ $bn = README ]; then
sed -i -r s#.*(([0-9]{3}/){2}[0-9]{3}\.jpg)#\1#i file
sed s/^.*number='\([0-9]*\)'.*type='\(.*\)'.*$/\1 \2/ <filename>
sed -i s|;te.xt =|textnum=$var| file
awk -F, !seen[$1]++ file
awk /User-Agent/ && NF > 6 {...}
if [ $
logName $2;
FORMAT=%-4s %-32s \x5C\n
echo $(readlink -f $0)
./train.sh -f testf test1 test2 test3 test4
{Allowed,20863962}
sed s/\+/\'/g test.txt
--user=ftp2.company.com|company2013
echo $VARIABLE | grep -E ^3+{2}
cat L_z_expectation.dat | awk { print $1 "+0.0001"} | paste -sd+ | bc
strace -o logfile <program>
INSERT INTO \""$1"\"
-Dlog4j.configuration={path to file}
tar -xvzf /path/to/tarfile --exclude=file dont want to extract
git config --global pager.stash false
awk -F$ {x+=$NF}END{print "\n**Total: $"x} $1 >> $1
declare -a MYARR=( 1 2 ); . ./myscript.sh
nmap -PN -p 22 --open -oG - 192.168.*.* | awk $NF~/ssh/{print $2} > sshopen.txt
(echo $str | grep -o "id":"[^"]*" | cut -d " -f4))
( A=1; if true; then A=2; fi < <(ls); echo $A; )
ls -lF | cut -c52-
http://disqus.com/embed/comments/?f=cnn&t_i=%2F2013%2F08%2F08%2Fhealth%2Fgupta-changed-mind-marijuana%2Findex.html&t_u=http%3A%2F%2Fwww.cnn.com%2F2013%2F08%2F08%2Fhealth%2Fgupta-changed-mind-marijuana%2Findex.html&t_e=Why%20I%20changed%20my%20mind%20on%20weed&t_d=Dr.%20Sanjay%20Gupta%3A%20Why%20I%20changed%20my%20mind%20on%20weed%20-%20CNN.com&t_t=Why%20I%20changed%20my%20mind%20on%20weed&t_c=207582&s_o=default&disqus_version=1375990054
RetVal = Shell(<full path to python.exe>  & <full path to your python script>)
MYSQL -u $DB_USER -p$DB_PASS -e show table status from $DB | awk ({ if ($2 == "MyISAM" || $2 == "InnoDB") print $1,$2}))
awk {printf $1} END{print "\n"}
find . -maxdepth 1 -type f | parallel --gnu wc -l | awk BEGIN {n=0} {n += $1} END {print n}
basex -b$word=celoso consulta.xq
command1 | command2 | { echo Header1 Header2 Header3; command3 } | column -t
sed -e s/\(^ServerIP=\)/\1192.168.0.101/g your_file
(path/to/run_sftp.sh)
declare -r cheese=nice
awk -F\02 {for(x=1; x<=NF; x++) {nf=split($x,f,"\03"); printf "%s",f[1]" -- " f[2] (x==NF?"": ",")}print ""} inputfile > outputfile.txt
./second $@
awk -v date=$date ....
grep -i other something *.txt >> tables.txt
-r Ignore the escape conventions of echo.

find $HOME -name *.txt -type f -not -path $HOME/newdir/* -print0 | xargs -0 cp -t $HOME/newdir
if [ `echo $count % 100 | bc` -eq 0 ]

echo 202.168.56.32|awk -F. {print $3"."$2"."$1}
setfacl -R -d -m u:php:rwx /var/lib/folder/
read choice
sed -i s,"var/www/web*/html","home/web*/public_html",g
awk NF>2 file
awk /yahoo/{y=1;next}y data.txt
&
sed /<MyTag>/!b;:a;/<\/MyTag>/!{$!{N;ba}};/MyText1/s/.*\n/&<FoundTag1>FoundIt<\/FoundTag1>\n/ xml_file
find ./ -type f -name *[a-z]*.csv | xargs rm
sed /"stackov\/er;flo\.w users are great"/i\proud sta{ckov,er member file
for i in cat list; do echo $i; done
... | sed s/.*Rev\.\([0-9]*\).*/\1/
(find . -type f -printf %T@ %p\n | sort -n | tail -1 | sed s/.*PO\.\([0-9]*\).*/\1/)
echo $word | sed -n s/[^a-z]//ig
BEGIN { print Splitting file ;} { print NR; r=int($2/1024); if(r>5){ print $0 > testFile;} if(r<=5){ print $0 > testFile2;} } END { print Done; }
find /home/admin/Backup -name *.tar -printf %f\n
scp batch_user_account@remote_machine:file_address local_machine_address
awk {a=int(($2+$3)/2+0.5); $2=a; $3=a+1;print}
find . -mtime -90 -exec cp {} targetdir ;
maxline=cat journald.conf | grep "#SystemMaxUse="; if [ $maxline == #SystemMaxUse= ]; then sed s/\#SystemMaxUse=/SystemMaxUse=50M/g journald.conf > journald.conf2 && mv journald.conf2 journald.conf; else echo This file has been edited. You'll need to do it manually.; fi
sudo apt-get install zip
date --date=${dataset_date} -${date_diff} day +%Y-%m-%d
(cd /usr/share/locale/; stat $(en_US/LC_COLLATE))
su USERNAME
if ./getDisplayWidth FullHD; then
ps aux | grep [p]rocess name | awk {print $2}
(find . -type f -mtime -100 -daystart -printf "%f"\n)
sed -r s/(\S)\s+([<>])/\1\2/g file
sed /Part1/,/Part2/d filename
eval c=$$var
wbemcli gi -nl $C_PATH:$CLASS.DeviceID="$ID"
awk c&&!--c;/pattern/{c=N} file
sshpass -p $password ssh $host cd $dir && ./after_deploy.sh
su minecraft -c /bin/bash /path/to/script/script.sh &
sed s/^aaa.*bbb$/aaa_TEST_bbb/ file >newfile
tr A-Z a-z | tr -s [:punct:] [:blank:] -
sed -i -e s/abc\-wxyz1\/2222\ \([0-9]\+\)/*/g input.txt
adb shell service call notification 1
java -cp $LIB/*
git delete `git log --all --pretty=format: --name-only --diff-filter=D`
command &
alias branch=git symbolic-ref --short -q HEAD 2>/dev/null
nova list | grep derpInstance | sed s/.*=//;s/ .*//
-execdir bash -c filepath="$1" ; base=$(basename "$filepath") ; echo use $filepath and $base here -- {} ;
sed -i /tester/!s@^@/my/path/tester@ file
customfetch = ! git fetch -r "$(wget -qO - http://hudson/url_to_project/lastStableBuild/ | gawk "c&&!--c;/Revision:/{c=1}" | sed -ne "s/<.*//p" | sed -ne "s/\s//p")"
curl --request POST http://localhost/Service --data path=/xyz/pqr/test/&fileName=1.doc
nmcli con up id <name_of_connection>
diff --new-line-format= --unchanged-line-format= file1 file2
(cat /my/file)
tr -d $OPTARG
awk -F, $5 == $oid $SYMBOL_CSV_FILE
yum -y -q install something 2>&1 | grep -v already installed and latest version
bash my_script.sh > >(tee log.txt) 2>&1
sed -i /\[Archive\]/,+11 d $SMBCFG
var_name=~/asd/filename
killall -s SIGHUP bash
awk BEGIN{FS=OFS="_"}$NF==$(NF-1){--NF;$1=$1}1 test.in
grep -oP \(\K[^\)]+ file
mycmd=cat $myfile
awk /^PermitRootLogin yes$/{f=1} /^Match/{exit} END{exit !f} /etc/ssh/sshd_config
exec ${@:-$SHELL}
awk -F |= $12 ~/401/{print $10} inputFile
for f in *.dat ; do sed -n 5p $f >> test.dat ; done
my $pstate=`nc -z 8.8.8.8 441; echo $?`
sed -e s/^[^{]*//g -e s/}[^}]*$/}/ file
my ($first, $second) = $string1 =~ /b(d+)b/g;
exec /bin/sh -c source /path/to/.bash_profile
svn diff -r119977:r119978
awk END {print NR} a.txt
while read -r line; do eval echo ${line}; done < inputfile | process
ps | grep $$
awk -F "*_"* {print ";189;" ($5 ? $5 : $4) ";-6"} file.txt
APPDATA=%CD%/certainfolderforportablestuff

date -d 2012-09-04T00:11:20.000Z +%s
awk NR>1{printf "%d %d %d\n", $20,$45,$102} RS=vector
set -x
/path/to/script.sh |[multilog][2] s2000 ./logdir
... | awk -F " BEGIN{print "Date     Time        source Format Specific data"}{print $2 " " $3} | sed s/^\([0-9]\{2\}\)\([0-9]\{2\}\)\/\([0-9]\{2\}\)\//\2.\3./ > CAN

awk BEGIN{OFS="/"} NR%4==1{$2=$2*1}1 file

RewriteRule /old/page /new/page [R=301,E=redirectinuse]
S=(1 0)
... | sed -r s/([^;]*;){4}/&\n/g
mv * destination_path
awk NR==1 || ($25 > 333 && $25 <= 500) av_bngc6522_Hband_chi1p5_IR_10 > lumbin_500
screencapture -l$(osascript -e tell app "Terminal" to id of window 1) test.png
sed s:=/.*:=/test/path: file
if [ z$x = z ]; then echo x is empty; fi
sed -n -e s/.*City<\/a>\s<em>(\([^)]*\)).*/\1/p index.html
echo /$line/,/\/>/{printf "%s ",$0}/\/>/{print ""}
find ./ -type f | parallel --gnu convert {} {.}.jpg
mypath=`pwd`
set -A arr $(cat $KEY)
(gsettings get org.gnome.desktop.lockdown disable-lock-screen)
seq 0 10
sed s/\.[^.]*$//
awk /localhost> localhost>/{print $1 >"file2";next}{$2=$3=$NF=""}7 file
hdfs dfs -ls /directory_path | grep -v Found | awk { print $6,$8 }
/etc/puppet/nodes/brackets.pl
awk $2=$2/1024"MB" file
awk /Query/{print RS" "$0} RS=<AUDIT_RECORD file
find . -type d -exec ls -ld {} ; | awk {print $NF, $1} | sed -e s;[^/]*/;|____;g;s;____|; |;g
git gui
awk NR==FNR{k++;next}FNR<=k-3 file.txt file.txt
grep -m1 T1600 nGENERIC*.txt > output
grep -o LULWUT-[0-9]\{4\}[0-9]\? file
sqlite3 database.db PRAGMA integrity_check
(bc -l <<< 10 ^($ABPOW))
find . -name *pattern.txt -maxdepth 1 -type f ( -mmin -15 -a -mmin +5 )
tail -f mylogfile.log | grep error: 
sed -e s/^SERVER=.*/SERVER=$INSTANCE_IP/g;n $ENV_FILE > $ENV_FILE.tmp && mv $ENV_FILE.tmp $ENV_FILE
sed -n /^<url>$/{n;N;N;N;s/\n/ /g;s/ *<[a-z]*>//g;s/<\/[a-z]*>/ /g;p}
sed s/^[^|]*|\([^|]*\)|.*/\1/
sed s%12pt;">\(.*\)</span></div></message>%\1%
spawn nohup /usr/bin/firefox https://www.google.com/
wc -l < sample.txt
grep -oP name : ${dbname}\d*
typeset array=(this doesn't work)
sed -r s/([0-9]{2})([0-9]+)/\1 \2/g
(echo  you have   the following repeated numbers; for i in cut -d "," -f1 file.csv | uniq`; do var =`grep -c $i file.csv;if (($var > 1 )); then echo $i ; fi ; done)
ssh -R 12345:localhost:3306 user@php_machine -N
sed :a;$!{N;ba};s/\n/\\n/g;s/a/_/g <<< $VAR | tr -d \n
sed -i s/UNIX/linux/ sara
sed 4i\ This is the new line file
echo `ls` `cal`
grep -f pattern_file files*
awk BEGIN{print "host_name,hostgroups,check_interval"}/host_name/{v1=$2} /hostgroups/{v2=$2} /check_interval/{v3=$2} /}/{print v1","v2","v3; v1=v2=v3=""} file
LOG_FILE=`pwd`/creation.log
sed s/oldwebsite.com/newwebsite.com/ file.sql
chmod -R 664 *.html
250 transfer complete.
find . -type d | sed -e s/\.\///g | awk {print $1, $1} | xargs chgrp
sed -rie /3199|26543/s/^(.{7}).*/\1\t0;\t0;/ inv.txt
sed s#<....>#replacement#g file
awk -F [<>]+ {for (i=2; i<=NF; i+=2) if ($i ~ /^[0-9][0-9][0-9]+$/) print $i} file
sed -e /s$/!d -e s/s$//
awk {print NF, $0} file | sort -rn | cut -d  -f 2-
inotifywait -m -r --format %w%f .......
`process $j &`
sed s/\sphone-[0-9]\+/&\t&/ file
sftp -P [port-number] <address-of-hostgator-server>
exec(/usr/local/bin/siege -c30 -t30s -f urls.txt 2>&1, $output);
awk -v FS= -v OFS=\n {$1=$1}1
awk -F| BEGIN{OFS="|"}{for(i=1;i<NF;i++){if($i==""){$i=l}else{l=$i}}print}
awk { sum[$1] += $3 } END { for (i in sum) print i, sum[i] } data
sed s/<x>.*<\/x>/<x>something<\/x>/g file
sudo brew install gnu-sed
echo -e $sshpass\n$sshpass | passwd --stdin root
(( ++DRIVE_SIZES[DRIVE_SIZE] ))
history | awk ($2 ~ /^[[:alnum:]]+$/) { ++a[$2]; t = length($2); if (t > l) l = t; } END { for (i in a) printf("%s%" (l - length(i) + 1) "s%5.2f%%\n", i, " ", (a[i] * 100 / NR)); }
find . -name #*# -exec rm -i {} ;
git config --global core.editor notepad
i < cat my.log | grep -w $line | wc -l;
echo alias hello='echo hello' >> ~/.bashrc
cat $line << notfound.txt
lsb_release -a 2>/dev/null | grep -i Description
grep -Po sessionId=[^\s]* filename
curl -H Content-Type: application/json -X POST http://127.0.0.1:5984/test -d {valid:json}
cp /site/*html /checkout/target/site/
source go.sh
find . -type d -name ProductA -prune -o -type d -exec chmod 755 {} ;
grep pattern /path/to/file | awk {print $0,"\n"}
(void) signal(SIGCHLD, SIG_IGN);
printf %s\n $SQL_FILE_VARIABLE | grep -E '[^']*'
awk NR==FNR{a[$0];next} { for (word in a) if ($0 ~ word) print FILENAME, $0 } fileOfWords /wherever/dir/*
if [ ! -d ${1%.dat} ]; then
awk $2 !~ /^synonymous/
awk {printf $1":"} a.txt
tailf *.log

awk {a[NR]=$0}END{ #here you could do whatever with a[1] (a) and a[2] (b)} file
cd $DOCS
if (wtt == null || wtt.trim().length() == 0)
sed s/^\(cat: [-+]\)0\{0,1\}\([1-9]\{0,1\}[0-9]\)00/\1\2/ data
sed /-r[0-9]/{h;d};H;/Pom.xml/!d;x file
awk -v ts=$timestamp $0 ~ ts{print; f=1; next} f{exit} file
sed /HEADER 1/{n;s/$/ ABCDE/} input.txt
nohup nice /usr/bin/java -DJENKINS_HOME=/opt/jenkins/CI -Dorg.apache.commons.jelly.tags.fmt.timeZone=America/New_York -Djava.awt.headless=true -jar jenkins.war -XX:MaxPermSize=2048m -XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled
awk -v gitlog=$log {print} /<!-- Beginning git log -->/{print gitlog} ~/opt/prime.dropbox/commit.md
while inotifywait --exclude \.(swp|~) -qqre modify _source; do make ; done
time link_name > your.file 2>&1 &
emacs -l start.el a.txt
brew install gnu-sed
perl -MHTML::Entities -CS -pe$_ = encode_entities($_, "&<")
c
sed s/^.*\bpattern\b.*$/Substitution/ file
sed -e s/ /\$\n/g
product=^[A-Z0-9]{2}\w[A-Z0-9]{6,7}\w[A-Z]{1}\.EIP
if [[ $j == *string1* ]]; then
:%s/\w\+/=tolower(submatch(0))/g
!sh -c git checkout -b "$1"
one - two three
bash: [[: 09: value too great for base (error token is 09)
(time ./quicksort -pn -so < $file) &> timing.txt
for f in *_*; do mv $f ${f//_/-}; done
sed s|\(ducument=[^/]*/\)[0-9]\{10\}|\1replacetext| infile
exec appln-program
awk -v patt=$ct NR % patt results.txt
date -d @$START +%c
sort -uk1,1 file
. ~/.bashrc
awk {sub(/_[^_]*_[^_]*$/,"")}1
somecommand | while read ...
perl -sn0e while (/Pattern1.*?((?=Pattern2)|(?=$))/sg) {$x=$&;print $x if $x=~/\Q$dynpattern/} -- -dynpattern=$Dynamic_Pattern file
set-option -g default-shell /bin/zsh
rm -- $web_dir/three_days_ago/*.gif
rsync -avz --include */ --include *.py --exclude * /tmp/level1 /home
array=( $(xdotool search brain) )
cp -a foo bar
script.py *.txt
crontab -l | { /bin/cat; /bin/echo * 3 * * * cd /etc/application ; scrapy crawl; } | crontab -
alias replace=sed 's/~/~\n/g' 
ssh yourUserName@node1 cat input_file_node1 | python parser.py >output_file_node1
sed -i -e s/pattern/replacement/g -e s/pattern1/replace1/g file
echo aaaabbbbaaaacccc | sed :l s/^\(x*\)a/\1x/;tl
CURLOPT_POSTFIELDS => $fields
tail -f logfile
ln -sn -- $FILE_PATH $TEST_DIR/$FILE_NAME
echo --exclude-agent=$line \
sed 2~3!d A | paste -d $\n B - | sed $3~2i\n
awk {for(i=1;i<=NF;i++)if($i>10)printf "%s ",$i;else break;print  ""} file
awk $2 - $3 infile >outfile
sed -i s/PS1\='\\u\@[^]]*:/PS1\='\\u\@\\H:/g test
Peer authentication failed for user deploy
find . -size +100k ! -name a.html ! -name b.html ! -name c.html -delete
print $log Dumper $myhash;
ch, CURLOPT_POST, 1);
tasklist|repl ^(.......................).*(.............)$ $1 $2 m
nobody ALL=NOPASSWD: gzip
(grep -o bar [.0-9]* file.txt)
sed -ire s/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*"\, 8087/$my_ip "\, 8087/g
Process pr = new ProcessBuilder(/bin/bash, -c, . env.sh;  + command).start();
cat output_* > output.all
grep -f file1.csv file2.csv > result.csv
awk -v OFS=, NR>1{print $1,$2} input.txt
ps aux | grep <pid> | awk { print $5 }
printf -v myvar %q  $@
awk $1 ~ /^France$/ { print }
python -mjson.tool ["cheese", {"cake":["coke", null, 160, 2]}]
paste FileA.txt FileB.txt FileC.txt | while read i j k; do ...
git --git-dir=/home/username/myFolder/.git config --get remote.origin.url
ssh -o ConnectTimeout=10 <hostName>

{backup_text%[[:blank:]]*}M
echo $( cd $( dirname ${BASH_SOURCE[0]} ) && pwd )

ssh.exec! sed -i 's/1/#{p}/g' changed.txt
sendmail $myemail || exit
awk /PATTERN/{close("result"f);f++}{print $0 > "result"f} file.log
sed -i.bak -e 1{/^id name job_id/d;} file
/Applications/Genymotion.app/Contents/MacOS/player --vm-name xxxx
awk { $3 = q $3 q; $8 = q $8 q } 1 FS=, OFS=, q=' infile
find . -type f -name *.c -exec sed -i.bak s/\bint\b/xint_t/g {} ;
eval $1 &
if ! [[ $BARCODE1 =~ ^[0-9]+$ ]]; then
get-childitem *.txt -Exclude found_nots.txt -recurse | select-string not > found_nots.txt
awk { print >> $5.txt } < input.txt
exec /usr/bin/python /home/jhon/workspace/producer/test.py >> output 2>&1
awk NR>1 {print $1 "," $2 >> $5 ".txt"} < output.txt
echo Hello world | cut -d  -f1
WHENEVER SQLERROR EXIT SQL.SQLCODE
[[ $(<foobar.txt) =~ (^|[[:print:]])foobar$ ]]
LC_COLLATE=en_US.utf8 ls
awk 1;$1=="timeout"{printf "    index = %d;\n", ++i} file
lynx -dump input.html > output.txt
./configure && make && make install || rm -rf /install/path
sed s/php\*//g file
java -classpath .;abc.jar;xyz.jar peersim.Simulator example1.txt
for f in /usr/pics/*; do ((i++)); mv $f ${f%/*}/pic${i}; done
grep -Po \d{8} file
Process proc = run.exec(new String[]{/bin/sh, -c, echo 5 | ./prog});
./daedalus_linux_1.3_64 1 `<prescript>`
ping -q -c 5 google.com | tail -n 1 | cut -f 5 -d /
awk {p=1.2*$0;$0=p>1?1:p}7 file
system twurl -t -d track=keyword -H stream.twitter.com /1.1/statuses/filter.json
parallel -j20 seq 1000 | parallel -j40 -I I ssh server{} '"cd /blah/; ./script.sh I"' ::: {1..20}
test -e package.json && npm install
sed -i.bak -r s/href="([^"]+)\.php"/href="\1"/g *.php *.xml
mysql -uroot -p -e CREATE DATABASE IF NOT EXISTS \`$(basename -s .gz test-db.gz)\`
echo syntax on >> ~/.gvimrc
sed -i s/\^/\[/g myfile
awk {a=substr($0, 17, 1);a=(a~/[[:alpha:]]/)?a:"C";print substr($0,1, 16) a substr($0,18)} file
CLASSPATH variable:C:UsersOwnerDesktopstdlib.jar; C:UsersOwnerDesktopalgs4.jar;
omxplayer -p /home/jason/Music/FileName.mp3 &
awk FNR==NR{a[++i]=$0;next} {print a[FNR] "\t" $0} a.txt b.txt
awk tolower($0)~/reject/ && $0~Date Date=$(date -dnow-30 days +[%d/%b:%H:%M:%S) /var/log/messages && zcat /var/log/messages-*
mysql --user=root --password=mypass vsftpd GRANT ALL PRIVILEGES ON `MYUSERNAME\_%`.* TO "MYUSERNAME"@"%";
sed -i ${line} i \ \ ${text} $file
awk -F, $3!~/""/{nbr=$3} {print $1","$2","nbr} file
sed -i... s/.../.../g file
awk {if($3 in a)a[$3]=$2==1?$0:a[$3];else a[$3]=$0}END{for(i in a)print a[i]} file
sed -e s/a/b/g -e s/g/h/g -e s/r/d/g -e s/e/q/g file.html
mycommand | awk NR>1{print $1,$2}
(my_command | awk -F [[:space:]]{2,}+ NR==$i {print \$2} | egrep ^[[:alnum:]])
echo $longstring | awk $1 == "second" { print $2 }
rm -rf /etc/bash_completion.d/git
alias subl=/Applications/path/to/subl
awk { print $1"      0x"$2$3$4$5$6$7; } input.txt
gr=(file1 file2 file3)
ps -p $PPID -o comm=
tail -n 100 A.txt > B.txt
stats output.txt every ::::0 using 2:3
awk -F [][] NR > 1 {print $2}
awk {print $1 "  "strtonum("0x"substr($2,11))-0xca115ac0 "  "strtonum($3)-0x3665fb5f1ac1 } input
export LANG=C
awk {$2 = ""; print $0;} < file_name
s/(2: [0-9]+)/_1_/g
screen
exec 3>&1 1>>${LOG_FILE} 2>&1
echo $!
:v/./d
ln -s /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
awk /\\return/{cmt=$0} /^[[:alpha:]]/{ if (/^void/ && cmt) print cmt ORS $0; cmt=""} file
env Clear Workspace=true bash
awk !/^ /&&/:$/{p=0}p;/^Header 2:$/{p=1} file
read -a names <<< $myVar
awk {printf NR%37?"%d ":"%d\n", $1} file
awk NR==FNR{a[$1];next}{split($4,b,"\"")}(b[2] in a){print $2"\n"$6"\n=========\n" > b[2]".txt"} file2 file1
sed -i.bak -r s/(.?)aaa/\1bbb/g filename.ext
find . -type f -name *.* | sed s/.*\././ | sort -u
python -c print "hello"; print "world"
awk $1>1000 {print $0} graph_data_tmp.txt
PROMPT>. ./init
with prefix(. /usr/local/bin/virtualenvwrapper.sh; workon mysite):
adb push test.mp4 /sdcard/test.mp4 2> Result.txt
latest=`ls -t|head -1` ; rsync $latest backup_location
grep -oP (\d+(\.\d+)?(?=%))
((RANDOM%100)); for ((i=0;i<max;i++)); do ((RANDOM%2)) && a=$a. || a=$a ; done; echo $a
trap <command to execute> <signal to intercept>
grep -o key5: [^, }]* file
awk /PARENT1_H/ {print "#ifndef NOPARENT" RS $0;f=1} /#endif/ && f {print $0;f=0} !/PARENT1_H/ file
awk {gsub("[^0-9]+"," "); print}
complete -f -X !*.tex g
find -type f -name *.png -printf %h\0 | uniq -z | xargs -0 rm -rf
sed s/, /\n/g your.file
sqlplus login/pass @get_area.sql
egrep (^| )$file1( |$) $file2
NSLog(@Hello %@, num == 1 ? @singular : @plural);
IFS=_ read X_VALUE Y_VALUE Z_VALUE <<< ${DIR#*_}
Shell(NOTEPAD /PT MyLaserJet C:\Temp\test.txt)
Test2.sh $@
if [ $var2 = Filesystem state: clean ];
sed -i s#CC -shared#& ${COMPATFLAG}#g libtool
awk $3=="cd"||$3=="yum"||$3=="install"||$3=="cat" {print $0} file | wc -l
thisCmd
eval set $@
sed s/>/\/>/g
(grep -F $line $path)
./optAlg.exe $inputFile 500 2>&1 > output/$outputFile
{!color}
awk FNR==NR{a[$1]=$2;next}(($1 in a) && a[$1]-- >0){print} filter.txt map.txt
grep -F -v -f smallfile bigfile
awk /Distribution_Facilities_carrying_Item/ {sub(/^</,"<!--");sub(/>$/,"-->")}1 a.xml

sed -i /\/\*17da00\*\//,/\/\*17da00\*\//d file
qstat | grep -c my_username
{ list; }
echo $(( ($(date '+%s') - $(date -j -f '%Y-%m-%d' '2013-07-31' '+%s')) / (10 * 24 * 3600) ))
^Disk[[:space:]]+/dev[^[:space:]]+:[[:space:]]+[^[:space:]]+
command <file >tmp && mv tmp file
awk {$2=($2+$3)/2; $3=$2+1}1 file
cdpath=(~/Development/Personal ~/Development/Work)
exec(sh mybash.sh);
| grep -E --color clean|word1|word2|$
xmlstarlet sel -t -c //div[@class="research"] -nl example.html
sed s/|[^|]*//
awk {for (i=3;i<=NF;i+=3)$i*=3; print} input.txt > output.txt
ssh -t command; bash -l

1>/dev/null
top -b -d 1 | grep --line-buffered java > top.log
my @filename = <STDIN>;
alias uniqlines=perl -ane 'print unless \$a{\$_}++' 
cat /tmp/tt.txt | sed s/^st\^/\n\0/g
Attach to a not detached screen session. (Multi display mode).
diff --recursive src my_src
ssh->cmd(q(head -11 /some/path/to/the/file.xml | tail -1 | sed s/<[^>]\+>//g | xargs));
tail -1000 file-with-line-too-long.txt | more
awk -v RS=\n|; -v OFS=\t -F= {gsub(/"/,"");$1=$1}7 file
sed s/\<\/textarea/\$\n\<\\/textarea/g f

addr[ip_addr] = shell_exec(sudo /home/wemail1/cgi-bin/ip_addr_stats);
awk -v s=$search_string NR == FNR { if ($0 ~ s) { gsub(/"/, "", $5); a[$1, $5] = 1; }; next; } a[$1, $2] { print $3; } $filename $lookup_file
wget -O output.txt http://.... extremely long URL 
sed /ABC/s/.*/AAAAAAA/ file
for i in `sort -u NUMBERS.txt ` ; do count=`grep -c $i NUMBERS.txt ` ; echo $i=$count ; done > your_result.txt

sed /^([0-9][0-9][0-9])/! s/^/(000) / testfile > newtestfile
/bin/su -c pwd; id username
export PATH=/home/linux/Practise/linux-devkit/bin/:$PATH
if [ $1 = d ]; then
test blah
perl -lane {print $1 if m!(content.*?</div>)!} input
fgrep cat text.txt | fgrep dog
tar -c ${dir} | pigz -c | split -a 5 -d -b ${size} - ${name}
sed s/<a \+href="\([^\"]*\)"/<a href=".\1.html"/g my_file.html
export PS1=$RESET\u@\h:$CYAN\w$YELLOW\$(__git_ps1)$NORMAL \$ 
[Yy]*) nohup iperf -s > /dev/null 2>&1& break;;
tot=`wget -qO- $URL1 | grep -i PlayerCount | cut -d> -f4 | cut -d< -f1 | sed -es/,//`
value=`command`
rsync --delete -a /Users/ajay/Documents/ServerObserverRepo/ /WebServer/Documents/ServerObserver/
xargs -rn 2 temp.exe < agrsList.txt
ln -fs /etc/configuration/nginx/nginx/app.conf /etc/nginx/sites-available/app
a=seven
C:WINDOWSsystem32;C:WINDOWS;C:WINDOWSSystem32Wbem
echo -e This Is a Test Message\nWell, not really!! | tee >(exec logger)
pandoc -fmarkdown_strict+hard_line_breaks -t markdown_strict
javac -classpath ../equinox.jar:. Package2/Class2.java
find . -iname ABC* | wc -l
F90= gfortran
paste - - - < file | awk {print $2, $3, "=", $1, "times"}
\n; sort <<<${arr[*]})
sed -i.bak s#[0-9]\{4\}\.\.[0-9]\{4\}#{&}#g file.txt
svn import -m Initial import /tmp/svn-structure-template/ file:///var/www/svn/reponame
awk $1=="[end"{p=0}/^header=7075/{p=1}p file
source lib.bash
sed -n /$start/,\$p timings.txt > newtimings.txt
echo yes | your_bash_script
awk FNR==NR{a[$2]=$3;next}{print $0,a[$2]?a[$2]:"NA"} file2 file1
sed s/'.*/S/g data.txt > new.txt
... | sed -ne 2p
paste -d \n filea fileb
awk /> myoccupation/,/> mygrosssalary/ file
awk {x[$2] += $3} END {for(y in x) print y,x[y]} freqdat044.dat freqdat045.dat freqdat046.dat freqdat047.dat freqdat049.dat freqdat050.dat
/usr/local/bin/php /home/script_to_run.php 1;
awk NR==FNR{a[NR]=$1;next} {print a[FNR], $2} file1 file2
echo $variable | mail -s switch_HARDWARE_CHECK recipeint_email_address
if hdfs dfs -test -d $folder; then
while inotifywait -e close_write myfile.py; do ./myfile.py; done
wzzip.exe -a -p -r C:DestinationPathDataFiles_20130903.zip C:SourcePath*.dat C:SourcePath*.bat
if [ $
--status p=11 --status s=22
(heroku pgbackups:capture --expire | grep -- ---> | awk {print $NF})
for i in `seq 2`; do echo $i; done > out.dat
expect -c spawn ssh $sshUserName@$ipTestLion; expect "*?asswor?:*" {send "$sshUserPasswort\r"; expect "*:~*" {interact;};}; < $path2script/sshEvents.sh

./generateReport -i file? -o output.html
tail -n 1 `ls -1t /path/*.txt 2>/dev/null | head -n 1` /dev/null | awk {print $1}
mv new.txt ../scripts_old
[2-9][0-9]{5}>
[[ -d dir ]] || mkdir dir
if [[ $(whoami) =~ ^(peter|paul|simon)$ ]]; then
perl -e print "$_\n" for sort { substr($a, -11, 3) cmp substr($b, -11, 3) } glob "*.RST.txt"
awk -F, {c[$1]++; t[$1]=$0} END {for(k in c) {if (c[k]==1) print t[k]}}
which clang > /dev/null 2&>1; echo $?
perl async_sql.pl UPDATE some_table set i = i + 1 WHERE (n in ('328430','334969','330179','335290','335285','335284','335264','335145','335146','335147','335148','335149','335230','335201','335198','335196','335167','335151','335152','335143','334969','334972','334977','334978','334979','334980','334982','334983','334984','334934','334947','334948','334950','334992','335014','335026','335030','335032','334864','334862','334861','334858','334855','334852','334850','334849','334848','334847','334844','334842'))
echo (x1,y1,z1) (x2,y2,z2) (x3,y3,z3) | awk -F[(,] {print $2, $3}
rm -- -d -f2
bash | lolcat

curl http://example.com/ | sh /dev/stdin world
sh -c tail -n 1000 -F catalina.out | if grep -qP --line-buffered ".+" ; then ...
awk NR==FNR{a[NR]=$6;next}a[FNR]!=$6{print "diff @ lineNr:",FNR;exit} file1 file2
endlines=`cat ${src_path}/${bakfile} |awk /\\\\\\./ {print NR;}`
awk --field-separator=; {print $1}
find $FILEDIR -mtime +14 -delete
-R, --recursive
grep ... `ls -lad ... | awk { print $9 }` | xargs kill -9
nano <(cat /var/log/qmail/current | tai64nlocal)

grep ^ A : $i B : $j file | wc -l
if grep \w\w\w${pre}-.*\.lin failed ${status_page}; then
date -d $(myapp)
awk {for(i=1;i<=NF;i++){t=$0;w=$i;gsub(/\S/,"-");$i=w;print;$0=t}} file
stdout_str, stderr_str, status = Open3.capture3([env,] cmd... [, opts])
sed s|^.*/||g file
string=#path /var/dumpfolder
java -jar bfg.jar -fi *.php --replace-text passwords.txt my-repo.git
[managedObjectContext performBlock:]
awk -F[][] /dB/ { print $2 } <(amixer sget Master)
sed -e s/../&:/g -e s/:$// a.txt > b.txt
command | awk NR>=122&&NR<=129
find `echo ${searchpath}` -type f -print0 | xargs -0 grep -l -E "${string1}".*"${string2}".*"${string3}"
ls | parallel script.pl --input {3} --output {3.}.out --otherargs range:{1}-{2} :::: <(ls | awk NR==1 {print $2}) <(ls | awk END {print $2}) -
sed s|\(.*\(/[^/]*$\)\)|s#data\2#\1#| new_paths_list.txt > rules.sed
shopt -s direxpand
if ($0 ~ i)
value=233
printf \033[?1h
split -C 100m -d data.tsv data.tsv.
( source userscript; wait )
String currentUserPath = System.getProperty(user.dir)
sed -r s/([[:upper:]])/\L\1/g <file
tail -100 | tee $STDERR
find . -type f -printf %h\n | sort | uniq | xargs -i ssh hostname mkdir -p /tmp/{}
grep -f queries.txt myDocument.txt
ls filepath -t -1
xargs -l --replace cp {} out/

grep -E ^\S*\s+[A-Z] file
yes | <command here>
bw.write(sum);
tar -cjf site1.tar.bz2 -C /var/www/site1 .
sed -i .bak s/\\$PHP_SELF/\$_SERVER['PHP_SELF']/g index.php
cat access.* | awk { print $1 }  | sort | uniq -c | sed -r s/^[ \t]*([0-9]+) (.*)$/\1 --- \2/ | sort -rn
xmllint --xpath //city data.xml
(basename $FILE);
ls | xargs -t -I {} {}/MyScript.sh param1 param2
awk {a[i++]=$0};/-----/{++j};j==3{t="";for(k=0;k<i;++k)t=t a[k]"\n";b[++l]=t;i=j=0}END{for(i=l;i;--i)printf "%s", b[i]} file
if [[ ${line[4]} =~ ^[RGWBO]+$ ]];
echo 1000 | java myProgram
awk $1=$1 <<< $string
system(paste(awk 'NR==2' , filename), intern=TRUE)
stat -f%z image.png
... > /tmp/script.log 2>&1
PROMPT_COMMAND=. ~/.env
sed /^\[.*\]$/d inputfile
awk -F, BEGIN{print "Failure_Code,FAILURE_SUM,Ratio"}{a[++i]=$1;b[i]=$2};/Total/{for(j=1;j<=i;++j)printf "%s,%d,%0.2f%\n",a[j],b[j],(b[j]*100/$2)} file
name=b486f8d9
sed -i s#Title 1 / Subtitle 2 / Subtitle 3#Title 1 / Subtitle 3#g file*.php
if $OUTP != average:
paste -d\t paste.file.txt $(perl -anF\t|\n -e$n=@F-1if!$n;for(0..$n){push@{$$m[$_]},$F[$_]} END{print map{join"\t",@$_,"\n"}@$m} input.txt) | perl -ne {while (<>) {$line = $_; $line =~ s/\t/,/g; print "$line";}} | sed s/\"//g > comma.delimited.output.csv
find /my/path/ -mindepth 2 -maxdepth 2 -type f -name README.txt -mtime +30 -printf %h\n | xargs echo rm -r
sed 0,/<?xml.*>/! s/<?xml.*>//g -e 2i <frame> -e $a </frame>
test
export PATH=${PATH}:~/Development/adt-bundle/sdk/platform-tools:~/Development/adt-bundle/sdk/tools
sed /^Numbers/ { N; N; s/^\(.*\)\(\n\)/\1\2000\n/ } infile
d = `date -r $f +%F`
echo myImage.jpg | sed s/.jpg//
iw dev wlan0 station dump | grep -Po (?<=Station\s|signal avg:\s)[^\s]*
awk $1!="MATH"{next}1;!i++{min=$2;max=$2;}{for(j=2;j<=NF;++j){min=(min<$j)?min:$j;max=(max>$j)?max:$j}}END{printf "Max value is %.2f. Min value is %.2f.\n", max, min} file
if [[ $GET_FILE_FORMAT = *data* ]]; then
service_name
for i in *.txt; do cp ${i} targetdirectory/${i}.OK ; done
echo $LIST | xargs lcov --output-file coverage_report.info.cleaned --remove coverage_report.info
df -htgfs | awk $5~/^\//{name=name sep $5; size=size sep $4; sep=","} END{print name; print size}
grep -vf output_file input_file
[[ $DATE =~ [0-3][0-9]/[A-Z][a-z]{2}/(19|20)[0-9]{2}:[0-9]{2}:[0-5][0-9]:[0-5][0-9] ]]
sed /house/!b;/big/d file
line=`echo $line | sed -e s/$varA/$resA/`
paste - - < myFile
sed s/([0-9])//
sed -r s/(?s).*?(<div class="mb_t_p_t_post_div">.*);/\1;/g 1.htm
sed -e s@\(\\label{fig:[a-zA-Z0-9 -]\{1,\}}\)}$@}\1@ ./file.tex
java -cp ./weka.jar weka.classifiers.trees.J48 -t data/iris.ARFF
test rm -fr /
join -1 2 -2 1 -o 1.1,1.2,2.2 table1.txt table2.txt
find A -type d ( ! -wholename A/a/* )
find . -name *.pdf -print0 | xargs -0 -n 1 -Ifoo cp --parents foo /new_path/
cp ../file.txt $(basename $(pwd)).txt
awk -F, {for (i=3;i<=4;i++) sub("'", "", $i)}1 OFS=, file
result = $(echo command <&${bkgndProc[0]})
paste - - - < File | sort -k18,18g | xargs -n 6
cmd $arg1 $arg2 $arg3 $arg4 $arg5)
find . | grep file_for_print | xargs echo
puts [ exec echo '$expect_out(buffer)' | grep Generic (Other) | sed 's/[[:blank:]]*//' | sed 's/ .*//' ]
[[ $temp_input =~ "[^"]*" ]]
eval cd `cat ~/cwd`
netstat -naputeo 2>/dev/null | awk -v OFS=; $1 ~ /^tcp/ && $3 > 4000 { sub(/^.+:/, "", $4); print $3, $4, $9 }
ruby -e print File.read(ARGV.shift).unpack('U*').map{ |i| '\u' + i.to_s(16).upcase.rjust(4, '0') }.join your_file
rename s/^[0-9]*-//; *
ps -ef | grep apache | tr   @
sort -V
grep -oP (?<=<strong>).*?(?=</strong>) file
diff -r ../backup_folder .
SECBUFF=`sed -ne ${i}p $file`
source $1
if [[ $date =~ ^[0-9]{4}-[0-3][0-9]-[0-1][0-9]$ ]]; then
awk { x=0; for(i = 1; i <= NF; i++) x += $i; print x } file
awk /^====/{print;for(i=1;i<=3;i++)getline;x=0;next}{++x}x<=5 file
awk -F, -v OFS=, NR==FNR{a[$0];next}{for(x in a)if(x~"^"$1FS)print $0,x} file2 file1
3>&1 foo 1>&2 arg1 2>&3 arg2 3>&- arg3
sed s/.*#\([0-9]*\).*/\1/
sed -e s/<CTRL-V><CTRL_M>// filename
ls -lR | grep .jpg | awk {sum = sum + $5} END {print sum}
for ... do cmd; done >file
/usr/bin/ld: warning: libtbb.so, needed by /usr/local/lib/libopencv_core.so, not found (try using -rpath or -rpath-link)
echo $c
spl=`expr $len - $v - $cons - $d - $s`
sed s/ccpAdd(\(.*\),\(.*\))/\1+\2/g
sed s#\(\w\+\) #\1 /#
xm <subcommand> [args]
sed /test1/,/test2/{/test2/!d}
sed -i s|LINE1|&\n$WORD| $SQUID
(-r -R --recursive){-r,-R,--recursive}[remove directories and their contents recursively]

(mysql -hmyhost -uuser -pmypass -Dmydb -B -e ${QUERY[${query}]})
alias rh=sed -i '$d' ~/.bash_history
printf -v _INFO %q $_INFO
sudo apt-get install libnotify-bin
PS1=\w \[\e[s\e[1;1H\e[42m\]\h \u ipaddress\[\e[0m\e[u\]\$ 
git diff --color=never
sed -e /Unix/{N;N;p;r content -e d;} data
export PATH=...
time your_prog
done < file_in_${varrr}.ubi
grep -E \.(c|cpp)$ input
for /f delims=: tokens=1,2 %A in (dir /b *.txt^|findstr /n .) do @ren %B %A_%B
sed -i.bak s/^\( *dataspecs \)[^\!]*/\1${new_val} / my_file.ini
IFS=: read -a arr <<< $i
fgrep -rlf messages.txt dir
awk /146 GB/{x++;s=s?s","$2:$2}x==2{print s;exit} free-drivers

checkFileForString $currentFile $currentRegex $newText
/opt/sbin/script.pl --group=value1 --rule=value2
echo XML-Xerces-2.7.0-0.tar.gz | sed -e s/^\(\([^-]\|-[^0-9]\)*\).*/\1/g
nohup $_JAVA_EXEC -Dproc_$COMMAND $JAVA_HEAP_MAX $HADOOP_OPTS -classpath $CLASSPATH $CLASS $@ > $_HADOOP_DAEMON_OUT 2>&1 < /dev/null
echo $(date -j -f %a, %d %b %Y %H:%M:%S Fri, 13 Sep 2013 17:16:45 +%s)000
getent passwd | awk -F: {print $7} | sort | uniq -c
subprocess.call([find, ., -exec, touch, {}, ;])
aws elb describe-load-balancers --region us-east-1 | jq .LoadBalancerDescriptions[] | select((.AvailabilityZones[] | select(. == "us-east-1b")) == "us-east-1b") | .CanonicalHostedZoneName, .AvailabilityZones
sed -r /([a-z]{4}).*/!b;s//\1/;w out.txt file
int ret=system(myshellscrtipt.sh);
\n\t. 
printf %s %15d %d\n,ARGV[i],sum[ARGV[i]],tr
(echo $foobar | tr [:upper:] [:lower:])
ls *.tar | xargs -n 1 tar xvf
echo ${test
<input type=file id=fileinput multiple />
awk $1=="abcd" && $2>1000{print NR, $0; exit} file
find . -path */Library/Application Support/Adobe/Acrobat/10.0 -type d -execdir rm -r {} +
wp_shell > output.txt
tee >(myprogram) | tee -a file.log
realpath -z oneword two words | xargs -0 find
spawn mysql -h $db_host -u $db_user -p $db_pass create database $new_db_name
svn status | grep -v ^.[ \t]*\..* | grep ^? && svn status | grep -v ^.[ \t]*\..* | grep ^? | awk {print $2} | xargs svn add
sed -e /INCLUDE_XML/!b -e r cnt.xml -ed tpl.xml >out.xml
tac file
bash -x script.sh
page_name (1) - description
find / -mmin 1|wc -l
nl=`wc -l fileName | awk s=$1-3{print s}`; head -n $nl fileName > file_withoutlast3rows.txt
0 0 1-7 * * [ $(date +\%A) == Monday ] && /usr/aa1/finacc/bsheet
for i in *.xml; do echo -n $(basename $i .xml) ; head -1 $i ; done >> new.txt
find . -name *php -type f -exec ls -l {} ;
ps aw | awk /\/bin\/1\// {print $1} | xargs kill -9
if [ $1 = --daily ]
expect -c spawn su - poletst; send "1\r"; interact
awk -F [= ]+ FNR==NR{a[$1]=$0;next} $1 in a{$0=a[$1]}1 oldfile newfile
(command)
awk NR==FNR{f6=$6;f7=$7;f8=$8;next}!f&&/^detector/{f=1;$6=f6;$7=f7;$8=f8}7 copy.txt paste.txt
echo command[runcmd]=sudo service $ARG1$ restart
grep -c something file
echo This is my string > filename
test=6 bash -c echo $test
paste -d \n SupposedToSend.txt Recieved.txt GotReplyFor.txt | uniq -c | grep -v ^   3
jq map(.[0])
SELECT @myId;
sed -i -e s|TEXT|$BBB|g $FILE
sed -n -e /value:ACCOUNT_NO/{N;N;s/\n/|/g;p;} logs.txt > outfile.txt
sed $!N;s/line2.line3/line23/;P;D;
case ans in
unrar v my_archive.rar | sed -n /^----/,/^----/{/^----/!p}
ssh -n -f *.*.*.* cd /***/***/remote && echo "$1"; ./ossec-rootcheck; echo \$?>/home/ossl7/res
ls -l >> test.log
ps aux | grep my_task
accurev hist -c My Comment elem1 elem2
sed $!N;/\n.*Never/!s/.*/-=+ REMOVED +=-/mg file
find . -name *.pyc -exec sh -c pycdc {} > {}_dec ;
sqlplus -L username/pw@db @ fileWithCommands.sql
find -name *.html
find -perm -204
awk NR>=4 file
awk NR==FNR{f[NR]=$4;l[NR]=$5;id[NR]=$6;next}{for(i in id){if($2>f[i]&&$2<l[i]){printf "%-8s%s\n",$2,id[i];next}}printf "%-8s%s\n",$2,"NoID"} file1 file2
alias c=clear; myscript.ksh
sed /.*tld/{N;s/.*tld\n.*Never/Replaced\nSuccess/} file
find /x -path /x/y -prune -o -type f -print
awk BEGIN{RS="\xFF"}{print $1, $2, $3, $4, $5, $6} file
nohup ssh ${NAMES[i]}@${IP[i]} vmstat -n ${interval} ${delay} > $file.csv
sed s/\*v//g
cat file1 file2 file3 file4 | sort | uniq -c | awk $1==4 {print $2}
printf %s %08d 0x%02x\n $1 $(bc <<< ibase=10;obase=2;$1) $1
for i in $(find . -type f); do dir=$(dirname ${i#./}); mv $i ${i//DSC/$(basename $dir)}; done
awk $1=="User:",/login time: 2013-08/ file
find . -name FOO -exec echo {} ./foo {} ;
true || true && false || return 42
echo {0..9} {a..z} {A..Z} @ _
seq 1 24 | parallel -P 8 ./myscript
xterm -e gdb drizzle
sudo ssh server echo "$SOMEVAR"; awk '/pattern/{print "hello"}1' file > file.tmp
sort -k 2 log.txt
(ls -d */))
my $str = q{echo -e use\nseveral\nlines};
for i in $(find . -type d); do count=$(find $i -mindepth 1 -maxdepth 1 -type d | wc -l); [ $count -eq 2 ] && [ -d $i/folder1 ] && [ -d $i/folder2 ] && echo $i ; done
grep -Eo (?def .*|'[a-z]+') test.txt
/ { print $0 }
sed -r s/((pwd|password|passwd)[^=]*=).*/\1***/ input > output
tail -0f /var/log/maillog | tee -a ../newlog.log
sed -i /Begins with this text/s|$|$var| filename
cp $DIR/working-dir/shswitch_${codesite}_${ip}_*_OUTPUTCONFIG $LOCALDIR/liste/$hostname-$ip
chmod 755 /etc/init.d/sendshtmail
sed -E s@(mail[.][^.]+[.])(host|passwd)="[^"]*"@\1\2="***"@g file
find . -type f -name *.so -exec sh -c echo {} && readelf -s {} | grep mysymbol ;
./loop.sh | stdbuf -o0 cut -d  -f3 > myfile
isql -U username -P password -S servername -i Inputscript.name -o outputfile.name
diff -q file1 file2 > /dev/null && echo Files are identical || echo Files differ
cmd=shopt +o posix\ndiff <(echo "bServers[nonServers]") <(echo "primeReference")
grep -B1 Broken pipe mylog.log | grep -c ^2013-06-13 05
git log -1 --format=%at | xargs -I{} date -d @{} +%Y%m%d
bash script.sh
nohup bash script.sh </dev/null >/dev/null 2>&1 &
date -u +[format] -d $(svn info | <some grepping and cutting here>)
sed -n s/.*<Pay>\(.*\)<\/Pay>.*/\1/p file
FOO= some command
sed -i 10s/ .*// input-file
dos2unix myscript.sh
(( $(find . -name *.pdf | wc -l) == 0)) && echo Empty
awk -F- {t=20130910130000;split($2,a,"\.");}a[1]>t your_fle
chroot [OPTION] NEWROOT /bin/bash --login
./build.sh | xargs -I % cp % target_folder
awk NR%6==1 || NR%6==2 file
xcodebuild -target ${TARGET_NAME} -configuration Release build PRODUCT_NAME=MyProduct
javac -d bin -cp bin srcnetchrisdojoProgram.java
perl -lne print $1 if(/email:(.*?)\@gmail.com/)
perl -e s/([.*])(.*)/21/g
grep -Po :"\K[^"]* file
exec(escapeshellarg(/bin/sh myfilename.sh .$key0.=.$value0)); //e t.c.
bash: x: unbound variable
sips -s format png -s dpiHeight 80 -s dpiWidth 80 -z 1200 1600 test.tiff --out test.png
bash test.sh
ps -eo comm %cpu %mem --no-headers | awk {a[$1] = $1; b[$1] += $2; c[$1] += $3}END{for (i in a)printf "%s, %0.1f, %0.1f\n", a[i], b[i], c[i]} | sort
(grep $i dataset$j FLAGS_IN | cut -d   -f3-)
seq 1 10 | perl -e@x=<>;print@x[0..$#x-3]
| 29900 | St. James | ...
grep https?://[\w/&=.?]+ $1
if [ $f == y ]
echo 0000-00-00-title.ext | sed -En s/[0-9]{4}-[0-9]{2}-[0-9]{2}-(.+)\.ext/\1/p
echo "$1","$2","$3","$4"
sed s/[el]//g
(/usr/local/cpanel/cpanel -V)
locale -a | grep -q ^ja_JP || echo enable any of the japanese locales first
netstat -n | grep tcp | awk { print $5 } | cut -d . -f-4 >> /tmp/file && sort /tmp/file | uniq > /tmp/file.uniq
> webpage.html
%PATH%;C:Program Files (x86)Javajre7bin
gawk {match($0, /([^;,]*)(;+|,)(.*)/, a); print a[1], a[2], a[3]}
mv /system/SystemUI.apk /system/app/
awk {a[j++]=$0}END{for(i=0;i<j-2;i++){print a[i]}} filename
[ expr ] && command
/home/evgeny/.Private on /home/evgeny type ecryptfs
awk -v n4=$new4 -v n5=$new5 /^dataspecs/{$5=n4;$6=n5}7 file
find -iname /abc/*.txt
IFS=\n read -ra CMDS <<< $cmds
cat xyzzy
awk !/#/{gsub(/[";]/,"",$0);print}
awk -F  :  $1=="Unexpected exception"{a[$2]++} END{for (i in a) print i,a[i]} output.txt
echo ls -l | at 07:00
PATTERN{action}
find -perm -o=r
find . -ipath */fetch/evs/*.ev -exec sh -c grep -L -e "' Error" {} ;
awk NR>1&&/pattern/{print "lineToInsert"}1 file
git commit -m Added notes for $(date)
wc -l a b
awk gsub("\.mi", "", $2)1 inputfile
LC_CTYPE=C your_command
if [[ $1 != --daemonize ]]; then
. /complete/path/to/properties.conf
awk BEGIN{OFS=" "}NF>1{t=$1;$1="";printf "%-13s%s\n",t,$0}
sed s/.*:.*/date -d"&" "+%Y-%m-%d"/ge file
grep -oE [^@]+@[^@]+\.(com|net|biz|info) our_company_emails.txt | sort
awk -v OFS=, {for(i=1;i<=NF;i++)$i=sprintf("%.1fm",$i)}7
echo $line | cut -d; -f1 >>template1.txt
touch file{1..3}.txt
flags = int(hexstr, 16)
awk $6~/^(([1-9]|[1-9][0-9]|100)[SM]){2}$/ file
git blame source_file > blame_result_file
awk -F\t {a[FNR] = a[FNR] (NR==FNR?"":FS) $8 FS $9} END{for (i=1;i<=FNR;i++) print a[i]} s1s2.txt .... s19s20.txt
ssh user@server_ip bash -s < local_script.sh
awk { for (i=5; i<=NF; i++) { if ($i != 0) { print; next } } } infile
system xterm, -hold, -e, $program;
sed -i /^passdb {/,/}/s/^/#/g file
exec bash
awk {print "'hello'"} filename
dir /s /b /a-d *.* | findstr /v .*\..*\.
if [ $P = SFTP -a $PORT != 22 ] || [ $P = FTPS -a $PORT != 990 -a $PORT != 21 ] ; then
awk -v I=$i /$I/{$4="LEFT";print $0}
for ip in {$2..$3}
awk $0~s1 && $0~s2 s1=binding style="rpc" s2=binding style="document"
{ echo My title; find ... ; ; } | mail ...
handle_args ${m_parsed_args[@]}
cat foo.txt | ( head -1; tail -1)
awk -F[,|] NR==FNR{gh[$0];next} {print "set security address-book global", (($2=="group") && ($3 in gh) ? "address-set" : "address")} $group_holder your.csv
mysql 2>&1 -u root -p -e select count(*) User_Count from  | mail -s Count email_id
curl -i -X POST -d {"some":"data"} http://your-local-domain -b XDEBUG_SESSION=PHPSTORM
who grep $(whoami)|awk {print $NF}
find $STORAGEFOLDER -name .todo -printf %h\n
if(buffer[i] != \n || buffer[i] ||   || buffer[i] != \t){
j).txt
ssh 192.168.22.11 cp a b
. scriptname ...
sed s/<[^>]\+>//g file
sed /^priority/{s/.*/&\nexclude = php*/;:a;n;ba} /etc/yum.repos.d/epel.repo
perl -pe s/ (\w+) \| /$1_\U$1\E__/x file
echo $RANGE
*.{jpeg,xml}
~/.ssh/rc
git config --global alias.t !/path/to/above/script
rm -rv dir | wc -l
sort a.dat | uniq -c | awk {print $2, ":", $1}
diff <(sed $expr file1) <(sed $expr file2)
PATH DEFAULT=${PATH}:/home/paul/avatar-gf-1.0-ea/glassfish4/bin/
(( $(printf %d "$a) - $(printf %d "$b))
sed /\/\*\*/,/\*\// {s/.*\*\/.*/@Override/p; d}
sed -n 1,50000 p filename
alias test=lsof -i tcp:80 | awk '$1 == "Google" {print $2}'
|s+(?=s)//g
store $files, checksum;
cat data.txt | awk {if ($2 == "arecord") print $2 " " $1 " " $3; else if ($2 == "cnamerecord") print $2 " " $1 "." $3 " " $3; else if ($2 == "mxrecord") print $2 " " $1 " " $3; else print}
ps -p <PID> -o user,cmd --columns 1000 | grep `whoami`
sed s|.*|/\\<&\\>/{w fileB\nd}| matchingString_file | sed -i.bak -f - fileA
sed -r s/^[0-9]{4}-[0-9]{2}-[0-9]{2}/#&/ inputfile
rsync -avrc --delete --exclude somedir source destination
copy NUL test.txt /Y
set -o pipefail
split -b=1M -d file.txt file
egrep ([0-9]{6}\>).*\1$ <file>
-a exit,always -F dir=/home/raven/public_html -F perm=war -F key=raven-pubhtmlwatch
exec screen bash --noprofile
find . -type f -name *.bak -exec rename s/\.bak$// {} ;
awk BEGIN {OFS=FS="\t"} {gsub(/\./,"",$4);gsub(/\./,"",$5)}1 input
:execute !cat /path/to/file/tempFile.do >> anotherFile
sed /$myvar/d data.txt
ruby -e $(wget -qO - 'https://raw.github.com/mxcl/homebrew/go')
awk NR==FNR{a[$1]=$0;next}a[$2]~/shipped/{print $0} list.txt cpu.txt
swap(list, list[i], list[i + gap]);
IFS= eval S="${A[*]}"
sed -r /<firstTag>.*<\/firstTag>/{N;s#(<firstTag>)(.*)((</firstTag>\n)<secondTag/>)#\1\4<secondTag>\2</secondTag>#g} file.txt
curl https://remote.path/script.py | python - arg1 arg2 arg3
ls File-* | sed s/\(.*\)-\(.*\)/mv & \1\2/ | sh
{a% }
IFS=/ read -r -a LIST <<< ${AIRLINE_OPTION//-A /}
curl --upload-file $ARCNAME ftp://$WEBDAVUSER:$WEBDAVPASS@$WEBDAVURL
ssh user@remote export myvar=myvalue ; echo myvar=$myvar
1] = $0;
awk /output_checkbox/{printf "%s",$0;next}{printf (NR>1?"\n%s":"%s"), $0}END{print ""} file
setenv logfile $HOME/LOG/output.log
find /home/spenx/src -name a1a2*txt | xargs -n 1 dirname | xargs -I list mv list /home/spenx/dst/
for VARIABLE in 1 2 3 4 5 .. N
while [ ! -f *.DONE.pgp ]; do sleep 1 ; done ; for f in *.DONE.pgp ; do mv ${f%%.*}.XML.pgp destination-directory ; rm ${f%%.*}.DONE.pgp ; done
awk -F/ {print $1"/"$2"/"$3} file
sed -r -e :a ; s/\b([a-zA-Z]+)\b(.*) (\1)( |$)/\1\2 *\3* / ; ta
sed /\(pattern\).*/{s//\1/; q;}
sed :a; N; $!ba; s/\\\n//g; s/\\$// file
[[ $value == .* ]] && newvalue=0${value}
set -o errexit
!!:gs/1/2
grep -Rl English (.*)</option> pathtowebsite
rsync ... --out-format= ... | grep -v -E ^sending|^created | tr -s \n
sed -e 1,Nd -e Mq file
if [ isValidType $msgType -eq 1 ]; then
perl -pi -e $replacementString1 $CONFIGFILE
awk /1510603|1510504/ file
ps aux | grep 7000\.conf | awk {print $2}
awk /dbdir/ {$0="dbdir /var/lib/munin"}1 /etc/munin/munin.conf > temp ; mv temp /etc/munin/munin.conf
if [ -d ~/tmp/$sd ]; then
scp $remote_account@$remote_machine:tars/${Last_Name}_${First_Name}_$dir.tar.z ~/tars
find /base/path -type d -perm +o+r
awk -v var=$variable BEGIN {print var}
cat <yourfile> | tr "'  \n > <newfile>
s+([^)]+)
java -classpath bin:lib/libthrift-0.9.1.jar:lib/slf4j-log4j12-1.5.8.jar:lib/slf4j-api-1.5.8.jar:lib‌​/log4j-1.2.14.jar:lib/commons-logging-1.1.1.jar Server
PROMPT_COMMAND=if [ $? -ne 0 ]; then echo -n FAIL:;fi
chmod a+x /path/to/the/script
if [ -z $(xpath -q -e '//otherFile' $f 2>/dev/null) ]; then
perl -lane $F[2] =~ s/(..)(?!$)/$1:/g; print qq|@F| infile
perl -F\| -lane print /\|/ ? join "|", @F[0,1,5] : $_ file
[s for s in body.strings if s.strip() != ]
fprintf(stdout, %d: %s\n,i+1,history[command_index]);
awk {t=length($0);sub(" *$","");print t-length($0)} file
echo $LINES | sed ...
echo {800..829} {831..850}
unzip -l name of file.zip
C:Program FilesMySQLMySQL Server 5.1bin>
`cp -R $HOME/directory.1/file.bundle /library/application support/directory/`
find your_folder -depth -name * * -execdir rename s/ /_/g {} ;
find /students -perm -o=r
tar --help | grep -- -z
sed -f <(sed -e 1,${VAR1}d; 12,\$d; x; s/.*/10a\\/;p; x ../log/file2.txt ) ../log/file4.txt > ../log/file5.txt
printf %g,, score[row,attr]
xpath -q -e //*[@name='app_name']/text() AndroidManifest.xml
Console/cake
I know that [ ] is for if condition
sed $((VAR1+1))d ../log/file2.txt
ssh user@ipaddress sudo sh -c "sync; echo 3 > /proc/sys/vm/drop_caches";
echo $fyle | sed -e s/FOO//gI -e s/BANG//gI
grep -E -m1 pattern1|pattern2|pattern3 test.txt
PS1=end1>; command1
js> runCommand(sh, -c, echo $env1 $env2, { env: {env1: 100, env2: 200}})
6 ~ /ring??.cs.utsa.edu/
exit 1
sed -i.bak s/^\([^=]* *= *\).*$/\1newvar/ file
diff <((foo) 2>&1) <((bar) 2>&1)
find ... -exec {} -v ;
awk -v RS= {print > "~/"$2"/FILE01"} file
echo $list | sed -e s@$refcat@$cat1@g
find $1 -type f -name *.txt -exec cat {} +
sed /^@/ s/$/\/1/g file
rename _1 _ *.gif
for i in $(seq 1 ${LASTDAY}) ; do echo $i done
ls -1 /home/students | grep o | wc -l
printf [%q]\n $AbsolutePath
ls -1dtr /your/dir/{*,.*} | tail -1 | xargs less
ls -t /u01/1/bin/core.siebprocmw.* | sed 1,5d | xargs rm -r
SQL_FILES=`/bin/ls *.sql`
(dirname -- $0)
awk -F: -v OFS=: -v s=$1 -v r=$2 $1==s{$2=r}7 file > newFile
rsync -a mars: higgs: --exclude=*.conf
sed -i -e s/\(+$1:\).*\(:.*\)/\1$2\2/ $FILENAME
ssh -V > /tmp/ssh_version_check.txt
uniq --skip-fields=3 input.txt
if [ -d /tmp/installpackage ]
{DAT}
sed \#<Directory /var/www/>#,\#</Directory># s|\(AllowOverride\) None|\1 All| inputfile
args=(combined.pdf my file.pdf);
./example 5 hello how are you
sed -r 1,9s/(2nd|3rd)/\1 STREET/g file
( cd /tmp/r ; xterm -e $SHELL -l -c irb ; $SHELL )&
tr -d \012 < price.html | grep -Po <tr>.*?</tr>
awk /New USB device found/{p++}p==1 file
./prog $(<file1.txt) $(<file2.txt)
./a.out > theoutput.txt
echo this is input | sed -r s/(\w+)\s+/\1\n/g
disown "$a"
echo happy | sed -r s/([p])([p])/*\1*\2*/
export a b c

cut -c 9-12,14-25,43-57 file
grep -E ^Swap[TF] /proc/meminfo | awk p{print p-$2}{p=$2}
--delete delete extraneous files from destination dirs
cp -r foo dest
awk NR==1{print;next}$2==0 file
find ./ -name *.rns -printf $FECHA %p\n >> myLog.log
column -t -s | <(sed s/ena5LHtEj/|/g < data)
find . -maxdepth 1 -mindepth 1 -type f -not -name *${EXEC_DATE}* -print0
printf <|%s|>  $line && printf \n
egrep -w Inbox|Outbox your_input > your_output
rm $0
awk /msg.*/{getline x;print x;}1 file | sed -e s/msgid/msgidt/g -e s/msgstr/msgid/g -e s/msgidt/msgstr/g
cut -d  -f1 filename
perl -aneprint $F[2]; print "\n" if eof example* >combined.csv
seq 0 10 | xargs printf %04d\n
tms96-fnl.go <./${inpdir}/inp${j}0${i}.d> ./${inpdir}_out/out${j}0${i}
awk { sum += $2; n++ } END { if (n > 0) print sum / n; }
web: sh ./install.sh
cat foo.py | xargs --null -I % python -c %
sed s|\$ROOT|${HOME}| abc.sh
sort -t: -s -k1,1 file.txt
./install.sh < ./install.txt
rsync --delete -avz -e ssh USER@SERVER:/server/directory/ /traget/directory/.
(ls -tr ParentFolder | tail -1)
echo one:two:three:four:five | awk -F: { st = index($0,":");print $1 "  " substr($0,st+1)}
runOnRecieve = /path/to/bash/file
echo {1,2}
sed -e s/"//g -e s/[^,]*/"&"/g inputfile
awk -F. {printf "%03s%03s\n", $3, $4} /metadata | cut -c3-6 > /metaport
source external.sh
java -cp bin;pathtolucene.jar com.brm.main.Demo2
awk BEGIN{OFS=" ";} NR==1 { print; next } { v = ($2 == a) ? (($3 == b) ? "0" : "1") : "0"; } v == "1" && reprice[$2] { v = "0"; } { print $0, v; a = $2; b = $3 } v == "1" {reprice[$2] = 1} testv1.txt
man cat
perl -F\W*(?:MAT|GHT|PUD):\W* -laneshift@F; s|>\s*$||for@F; print join", ",@F file
while (( status == 0 || retryCount < maxRetries ))
arrs = [ l.rstrip().split(\t) for l in open(your_file.tsv) ]
sed s/%RRN%\([^%]\+\)%/%RRN%0%/g
/Placemark[contains(description, Iron)]
sed s/\(AAA\|BBB\),\([^,]*\)/\1,{\2}/g dataset.txt
coord= ${a[1]} ${a[2]}
source script.sh
split --suffix-length=5 --lines=1 foo.txt
awk NR>90307{for(i=2;i<=90289;i+=3) print $i, $(i+1), $(i+2) }
sed -e s/\(foo=1&\).*\(bar=2&\)/\1\2/
gawk -F[[:space:]]+|[.] {print $2}
grep...|awk {gsub(/192.168.1.12[^,"]*[,"]/,"");sub(/cidr=">/,">")}7
awk /[^"]$/{printf "%s",$0;next}7
int main(int argc, char* argv[])
mkdir dir_name && cd dir_name
awk -F = $1=="version" {print $2} file
info gcc option index O
sed s#$old#$new# Current_series_list.txt
for i in ${@:2}; do

sed -r :a;/$PATTERN/{x;/./s/.*/echo $((&+1))/e;/./!s/^/1/;x;G;s/$PATTERN(.*)\n(.*)/$PRE\2$POST\1/;ba} file
echo abc | awk { if ( match($0, /a(b)c/, a) > 0 ) { print a[1] } }
if [ $1 = restart -o $1 = reload ]; then
awk $4 == "NS" {print $1, $5, $0} $4 == "A" {print $1, $1, $0} | sort | cut -f3- -d 
cd /home/path/to/current >/dev/null
gvim -d file1 file2
find /var/www/advertise/ -name *.php -type f -exec sed -i s#'/home/example/public_html#\$_SERVER['DOCUMENT_ROOT'] . '#g {} ;
sed -e s/[A-Za-z]\{7,\}//g
awk {print $1} < address.txt | while read ip; do ping -c1 $ip >/dev/null 2>&1 && echo $ip IS UP || echo $ip IS DOWN; done
awk !(NR%10) file
scanf(%s, &target);
result = `sed s\@^\\([^;]*\\);$id_play;\\([^;]*\\);\\([^;]*\\);\\([^;]*\\);\\([^;]*\\);\\([^;]*\\);\\([^;]*\\)\$\@\\1-$id_play-\\2-\\3-\\4-\\5-\\6-\\7\@g;tx;d;:x $input`;
sort t1 t2 | uniq -d
hexdump -n 4 -s 0x11C -e 4/1 "%x " "\n" myFile
ssh -f $COMMAND
-V
sed -n /alex/{/eva/{/tom/p}}
sed -i s/\[self\.lang getAppLanguageString:@\("[^"]*"\)\]/LocalizedString(@\1, nil)/ somefile
eval rsync $options user@server:$directory $backupDirectory
expect *yes/no* {send yes\r; exp_continue;} *?assword:* {send "$passwordr"};
sed -r $!N;s/ (A[^\n]*)\n/\n\1/;P;D file
python -c from itertools import permutations as p ; print('\n'.join([''.join(item) for line in open('File') for item in p(line[:-1])]))
echo $file >> $HOME/AutoQA/FailedTestCases.txt
tr -dc A-Za-z0-9 < /dev/urandom | dd bs=$num count=1 2> /dev/null
(ip addr | grep inet | grep wlan0 | awk -F  {print $2}| sed -e s/\/.*$//)
if [ git-rev-list ... ]
pactl move-source-output <source output> <source>
<exec command=echo hiiiiii passthru=true />
awk BEGIN { FS="\x01" } {print $1} input
(printf  , "%s" u ($1):($%s) lw 8 ti ${foo[@]} 2 ${foo[@]} 3 ${foo[@]} 4 ${foo[@]} 5 )
grep -Eo <video>(.+?)</video> myfile.html
awk {print $1"\t"$8"\t"$9} yourfile.tsv > only189.tsv
<!-- XML comments cannot include -- so this comment is illegal -->
(getent passwd $USER | cut -d : -f 5)
PATH=/dir1/bin:/dir2/bin
sed -i 0,/foo/s//foo1/ file
if ( ( ofd = open(out_file, O_WRONLY | O_CREAT) ) < 0 ) {
sed /^BEGIN:VEVENT/,/^END:VEVENT/{/^\(UID\|SEQUENCE\)/d} file
echo $l
occs=`grep -ioc $codon $1`
(basename $0)
:!echo -e \ec\e(K\e[J
fgrep -v http

[ $(which which) = /usr/bin/which ] && alias which whichever
which edit
rsync -av /view/pore/Personel Address.txt /home/myserver/Personel Address.txt
sed -e s/\([0-9]\+\)\.\([^0-9]\)/\1\2/g -e s/(\([0-9]\+\))/\1/g
tac file2 > file1
tmp = os.popen(ls).read()
sed s/\([A-Z]\{2,\}.*\)/\n\1/; s/[^\n]*\n// infile
find . -type f -name *.gif or .jpeg -o -exec sed -i s/^M// {} ;
[[ $VAL == ${GUARD}*${GUARD} ]] && echo ok
sed s/"$ampP"/"$ampR"/g
name= /home/cft/$data_test.tar
sed -i ${line}d file.txt
find home -name myfile.xml -print -exec diff home/hello/myfile.xml {} ;
alias update_my_gems=echo foo; echo bar
jrebinjava -cp binneo4j-desktop-1.9.4.jar org.neo4j.shell.StartClient
awk -F[()] $2>2{print} file
tr -cd [:print:]\n\r
sed -n /All present$/{s/.*//;x;d;};x;p;${x;p;} file | sed /^$/d
find . -name *.tar.gz -exec bash -c d=$(dirname "{}") && b=$(basename "{}") && cd "$d" && tar zxvf "$b" ;
printf one\nfour\ntwo\nthree\nfour\n
awk /^[0-9]/ && $3>=$2 file
./This.I<TAB>
grep -w -o [^abc]* 1.txt > 2.txt
echo Apple, Orange | tr -s ,  \n
awk /<tr>/,/<\/td\>/ input.txt
[ ${-#*i} != $- ]
date -d @1381219358 +%H-%M-%S-%b-%d-%y
sed -i s|$from_delim|$to_delim|g $i
pscp.exe youruser@server:/path/to/file C:path_to_file
grep table_name home/abcd/abc 2>/dev/null | cut -d: -f1 > output.txt
grep -A 5 19:55 file
sed s~<script type='text/javascript' src='http://siu.edu.bd/includes/framework.js'></script>~ ~g
grep [[:xdigit:]]\{32\} myfile.txt > hashes.txt
--filter protect path1/*
/elememt1/*/group1
cd $(echo $RED_INSTANCE_NAME | tr -d \r)
cd ~
wget http://example.com/directory/file{1..200}.txt
(echo foo; echo bar) &
(find . -name *.java | wc -l)
sed -i /^space_left_action*/c\space_left_action = SYSLOG /etc/audit/auditd.conf
find / -mindepth 1 -maxdepth 1 -type f -exec pdflatex {} ;
echo 4BF8E | rev | tr 0123456789ABCDEF 084C2A6E195D3B7F
awk -F[[:blank:]:]+ { print $4 } infile
plot < exec bash -c "join tmp1 <(join tmp2 tmp3)" using 2:3
if [ $(ls -1 | wc -l) == 23 ]
(stat -c %y $files | awk {print $1})
--include=*/ --include=*.cfg --exclude=*
alias time=time /usr/bin/time
grep text to search for *.sql
sed s/ *|.*// file.txt
grep -Ff file2 file1 >file3
ls -la | less -SX
alias ec=emacsclient -t -a ''
java -cp averageAmpCov/src averageAmpCov
command 2>&1 1>nul | ( find /i valid >nul && goto okay || goto stop )
sed -r s/(\S+\s+){2}/&\n/;s/\s+-/\n&/;h;y/ /_/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/ file
awk -F\t -v OFS=\t NR==FNR{a[$2FS$3]=$1;next}$2FS$3 in a{print $0,a[$2FS$3]} file1 file2
awk {FS=OFS=","}NR==FNR{a[$1,$2]="136-7425";next} ($1,$2) in a{$3=a[$1,$2]} 1 file2 file1 > output
0 0 * * * (/usr/bin/time /path/to/mysqlbackup.sh 2&>1) | /bin/mail -s MySQL Backup admin@example.com
awk /\/\*!/{a=1}!a;/\*\/;/{a=0} test.in
awk {print ","$0} file1.csv > file2.csv
awk NR==FNR { a[FNR]=$2; next} $2 != a[FNR] { print $2 } File1 File2
awk -F " /^%attr/ {gsub(/\\/, "/", $(NF-1))} 1 OFS=" file
test file1 -ot file2 && cp file2 file1
svn up `ls -d ./*`
gawk END{if (RT!="") print "found RS"} file
\r\n && while read p; do echo $p; done < ~/Documents/tempfile)
echo source /path/to/starcluster/completion/starcluster-completion.sh >> ~./bashrc
echo >>$COMMAND_WAIT<<
sed -i s/^\([^:]*\):\([^:]*\):/\1:TEST:/
(echo -n; sleep 5; cat tempfile) | mail.domain.com 25
paste <(awk {print $1} file2) file1 <(awk {print $2, $3, $4} file2)
Process=Popen(./childdir/execute.sh %s %s % (str(var1),str(var2),), shell=True)
if [[ $output =~ ^CMD[.*?]$ ]]; then
sed 5!d file
slocate foobar/ | sed s/\/foobar\/.*/\/foobar\// | uniq -c
sysbench --test=cpu --cpu-max-prime=100 run
[ -d $1 ] || (printf %s is not a directory $1 && exit 2)
Runtime.getRuntime().exec(new String[]{command, arg1, arg2, arg3});
cd Visual Studio 2012
Powershell.exe -executionpolicy remotesigned -File C:UsersSEDesktopps.ps1
ls -1 | grep ^customer_[^r].*$
kill -STOP <pid>
sed -e s/^\(.*dsk\/\)c1t1\(.*\)ufs\(.*\)$/\1c1t2\2ext2\3/g some_file
echo some text with spaces | tr -d  
SDKROOT= make -C $TEMP_DIR -f $PROJECT_DIR/greg/Makefile VPATH=$PROJECT_DIR/greg || exit $?
{2}));
unalias aliasname
awk /wtec_1/ {ok=1} /^$/ {ok=0} {if(ok){print $0}} filename
echo |$COMMAND||tr \n  
sh -- script.sh -test 23.txt test24.txt te st.txt
grep -R root . 2> /dev/null
yourscript.sh > /dev/null
capify .
export PRDIR
sed -ir s@getenv\('DOCUMENT_ROOT'\)\.'dosyam/@getenv\('DOCUMENT_ROOT'\)\.'/dosya/@g index.php
find . -maxdepth 1 -not -name .repo -not -name out -not -name release -type d
sed s/FIND TEXT/REPLACE TEXT/g source.txt > dest.txt
-B Selects batch mode (prevents asking for passwords or passphrases).
[[ $EXECNAME = -* ]] && echo error: invalid executable name
getconf ARG_MAX
awk -f sub.awk input.txt
echo $output | awk NR%2{printf $0"\t";next;}1
echo This is the file.txt from my folder. | sed s/^This is the \(.*\) from my folder.$/\1/
os.kill(tcpdumpProcess.pid, signal.SIGTERM)
iconv -f utf16 -t utf8 < filename.csv > filename-utf8.csv
ls -1 | sed s/-.*//g | sort -u

. my_script
[[ $MY_FILE_NAME ]] && MY_PATH=$WORKING_DIR/$MY_FILE_NAME || MY_PATH=$WORKING_DIR
grep -oP LN:\K.* filename
http://your_server_url:8080/manager/reload?path=/your_app_context
ls -l | sed -r s/^.[-rwx]{9} //
dirN=`basename $1`
for f in *.pem; do openssl pkcs12 -export -out `basename $f .pem`.p12 -inkey $f -in $f -certfile ./myca.pem -password pass:myPass; done
svn st | grep SomeFolderA | awk {print $2} | xargs svn revert

find . -maxdepth 1 -type f -mtime -1
[[ $(type -t workon) == function ]] || source /etc/bash_completion.d/virtualenvwrapper
/var/www/new/video/`basename %f`
testFunct $param1 $param2
rsync -avK --exclude=/foo src/ dst/ ; rsync -avK --include=/foo --ignore-existing src/ dst/
awk ... | c++filt -t
cat /path/to/file | awk {if (/^TCF/ || /^FSTL/ ) print $0;} > /path/to/output.txt
awk /^#/{x=$0;next}{if(x)print $0,x;else print;x=0} file
awk -F" $8!=$12 {print $8,"=",$12}
[^,]+
sed s:^/a/b/:: myfile.txt
cpdf -info file.pdf
echo <Cell><Data>`sed -n '${r}p' $IN_FILE | cut -d , -f ${c} `</Data></Cell> \n
my_function $1
scp $(ls -1rt | head -93) test@testserver:~/DIR1/SUBDIR
java -cp %GROOVY_HOME%/embeddable/groovy-all-2.1.7.jar:. Hello Luke Skywalker
/usr/bin/time ls -l > ls-l.txt 2> ltime.txt
./record_table_load_stats.sh MODEL $dtMODEL
sed s/-.*;/;/g file > newFile
nautilus /usr/share/applications
./test2 server1:nginx,mysqld server2:sshd,apache2
pr -m <(cmd1) <(cmd2)
sed -i s/EFF=[^;]*;//g filename
vi +3 -c startinsert ~/j_exec.php
awk /^4/ {print ++i, "MMM"} /^[0-9]/ {$1=++i} 1 file
echo - - -
command > /dev/null 2>&1
m=`eval echo {$j..$k}.jpg`
rsync -n -avrc /abc/home/sample1/* server2:/abc/home/sample2/
join -1 2 -2 1 file1 file2
awk -F['] /define/ && /URL/{print $4} config.php
<Platform Condition= '$(Platform)' == '' >AnyCPU</Platform>
tar cf backup.tar.gz /folder_anme/

echo -e \033[1m$(grep '/data' file)\033[0m
echo FLUSH PRIVILEGES; | tee -a $MYSQL_TMPFILE
sudo apt-get install mongodb-10gen=2.4.6
tr -d ^M < inputfile
date}
if [ $is_there_g = False ]; then
sed -i -n 1p versions.txt
msbuild.exe /v:q projectName.csproj /t:Package /p:MvcBuildViews=false;SolutionDir=%SolutionDir%;DeployOnBuild=true
python /path/to/tcprelay.py -t 22:2222 &
sed s/"[^"]*"/\U\0/g <<< foo "bar" baz
spawn /bin/sh -c $command
sed -i -e s/\`${mydbname}\`./\`${mydbname2}\`./g ${mypath}
awk {if ($3~/^TCF|^GLI/ || NR==1 ) print $0,FILENAME} /path/to/file1 /path/to/file2 > /path/to/test1.txt
java TestConnection www.google.com&test
:nnoremap <Leader>. :cd %:p:h<CR>
Process.StartInfo.Arguments = /C DEL /Q /F "C:\Users\WinUser\AppData\Local\Temp\abc\*.tmp";
dd if=/dev/random of=${filename} bs=${size} count=1
date -d $(sed -e 's#/#-#g; s#:# #' <<< '17/Oct/2013:16:52:28') +%s
find . -type f ! -name *dir1/file.log -exec tail {} ;
echo -e 10 ABC \n5 DEF \n87 GHI | sort -nr -k1 | head -n1 | cut -f 2 | while read MYVAR; do echo intermediate value: $MYVAR; echo $MYVAR | xargs -I {} grep -w {} FILES; done
awk "14:40:00" <= $1 && $1 <= "15:00:00" app.log
awk {$4=$5} NF-- FS=[ .]+ OFS=. file.csv
ls -al /tmp | awk $3==u {print $NF} u=$USER
sed --in-place /$number/d /root/file
java One.Test
echo %g%
commands to get directory list | xargs -i mv {} <destination>
output = `casperjs myscript.js #{url}`
awk NR==FNR{a[NR]=$0;next}a[FNR]>$0{i++}END{print i} file1 file2
awk {d=$3-$4;$0=(d>0?d:-d) "#"$0}7 file|sort -n|sed s/^.*#//
egrep ^From: $file | cut -c7-
sass --update scss:css
xterm -e crazy.sh
abcdefghijkl
command -1 <(gzip -dc file1.gz) -2 <(gzip -dc file2.gz)
sed -i.bak /matchString/r fileB fileA
find . -type f ! -path ./.git/* -exec sh -c echo hello world >> {} ;
<temp2.csv sed s/||/|\"\"|/g | sed s/||/|\"\"|/g
echo ${FILES[@]} | xargs -i mv {} /path/to/destination
for I in $(seq 12 16 256); do echo 10.4.{0..255}.$I; done
time find . ! ( -name *.log -o -name *.tmp ) -print | cpio -o | gzip > $DUMP_DIR/$f2.cpio.gz &
ls -ld /sys/block/sd*/device | awk -F/ { split( $NF, arr, /:/ ); print arr[1] }
find . -path ./.git -prune -o -not -name *git* -print |grep git
(ls -ld /sys/block/sd*/device | awk -F/ {print $1}))
id -Gn username | grep \bgroupname\b
[[ ! -f $f ]] && { this; that; break; } || { the_other; ...; }
(command)
entry =~ s/ /t/g;
perl -C -i -pe s/s\x{0323}/s/g 1.htm
sed -r s/"http(s?)_proxy": "(Proxy[AB])?"/"http\1_proxy": "ProxyA"/ inputfile
sudo sh ./script.sh
sed -i -e /bar/{w file2 -e d} file1
sed s/\(.\{9\}\)/\1 / file
(stat $file -c %s)
awk {sub(/...$/, ".&"); print}
jeykll -w serve && sass --watch style.scss:style.css
ssh host command options, etc., 
MainDir=/Users/redres/Dropbox/Computer\ Ebooks/Skimmed
sudo ln -s /usr/local/Cellar/pypy /usr/local/bin/pypy
sed s/\t/ /2g file
if [ $? -ne 0 ]; then
awk -F, NR>1 && $7<=0.05 { print $7 } test.txt
export TAB=$\t
echo $$ > thisscriptpidfile
:%s:<([^>]*)>(.*)</1>:2:
I just wondered if somebody could provide a quick yes/no answer
grep pattern {2..6}/*
check_call([sh, script.sh, firstArgument, 3030, thirdArgument, fourthArgument])
sh Calculator.sh 1 + 2 * S(4)
sed -i.bak -r s/"([0-9]+\.[0-9]+)"/\1/g data.txt
sed :a;$!N;s/\n/ /;ta file
Invoke-WebRequest http://stackoverflow.com/search?tab=newest&q=powershell
echo $value | tr " \n | grep @
awk -F, -vOFS=, {if($7~/^BL/ && $2==""){$2="foo"}print;} file
private PrintStream print;
[ -f $dir/*.part ] || trash $dir
print(sprintf(%v04X, $str), \n);
:windo set nonumber list
perl -00 -lpe s|\r?\n| |g file
hg forget set:**.pro.user*
awk -F , {if(NF==1){ print "Exiting"; exit -1}} || exit
array=( $(egrep UserComments/propagateBundle-2013-10-19--04:42:13|UserComments/propagateBundle-2013-10-19--04:38:36|UserComments/propagateBundle-2013-10-19--04:34:24 <path>/propagateBundle.log) )
while read a ; do grep $a text1.csv >> text2.csv; done < text.csv
awk -F   {key=$1" "$2; value=$4" "$5; if(! key in t){t[key]=value} else {t[key]=t[key]""value}} END {for (key in t){print key" "t[key]}} file|sort -rt  -k1
awk /start/,/stop/{if($0 ~ /stop/){print}; if($0 !~ /stop/){printf $0" "}} file
awk { sub(/-+$/, "", $NF); print } infile
(ssh $sourceUser@$sourceHost egrep '$v' '/$INSTALL_DIR/$PROP_BUNDLE.log'))
ps -eo pid,args | awk /PRD_/ && /startscen\.sh/ && $4 ~ /PROCESS_ALLBETS/
sed -r s/N{32767}//g bigFile > newBigFile
some_command | python -c import json, sys; print json.load(sys.stdin)['name']
echo some command && echo some other long command
cat /proc/$$/environ | tr \0 \n
p4 describe -s 100 101 102 103
for files in $(IFS=$\n find -L $dir -name *.pdf -mtime +90);
shopt -s nullglob
paste -d - <(echo $A) <(echo $B)
test -d $1 || { echo Argument 1: '$1' is not a directory 1>&2 ; exit 1; }
(uname --kernel-name)
awk {print ($1 > 0 && $1 < $2)}
userFoo:x:1000:1000:,,,:/home/userFoo:/bin/bash
for myFiles in /opt/insiteone/fuse-mount/ifm/Dir1/15_file{1..300}
Robocopy %source% ...
grep -Po \S.*?(?=\s*$) infile
ps -ef | awk /PRD_/ && /startscen\.sh/ {print $3}
awk -F, -v OFS=, {gsub(" ", "_", $3); print} file.txt
scp id@nodename:~/Main/56\|75/test.pdf .
grep -Fwf fileB.txt fileA.txt
parallel --gnu var="{}"; /some/binary "${var:0:6}/$var" ::: 20131017 20131018
mv $file ${file%???????}
awk -f conv.awk input.txt
pid=`ps aux | grep [M]ATLAB | awk {print $2}`
PATH:path/to/ndk
explain what is being done
<td></td> *n *<td>)</td>
ln -s /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
LC_COLLATE= sort -g
(date +%Y%m%d -d yesterday)-blah.gz
files=( ${@:1:$n} )
awk NR==1{s=$2;next} {print s ORS $6 ORS s, $6} file
perl -pe s/([\x00-\x20\\])/sprintf("\\x%02X", ord($1))/eg
cowsay -f stegosaurus It's $(date +%A)
split -l 1000 -d --additional-suffix=.txt file.txt split_file
echo ${!B}
q.save()
awk {if ($1<prev){next}}{prev=$1}1 inputfile
locate abcdef  grep 2
for FILE in `ls $SRC`
cd $(node app)
su posgres -c shp2pgsql… 
if [ $filespresent == false ]
regex=[1-3]
printf \033[38;5;1mnormal \033[02;38;5;1mdim \033[01;38;5;1mbold
sed -i /^foo=/s/=.*/=foobarbaz/ test1.ini
printf somthing wrong!%v Oops! > dumpz 2>&1
su -m $user -c find $dir >/dev/null 2>&1 || echo $dir is not readable or executable
awk -F: $2~/pattern_to_match/{print $1} filename
while read i; do echo $i; done < <(echo $FILECONTENT)
echo Starting scriptr `date +%T` | tee script.log
catalina version
child >/dev/null 2>&1
jq select(.geo != null) all.json
shopt -s dotglob
grep -oE /apps/jboss-eap-[^/]+/jboss-as/
sed -i -r /_start_/,/_end_/ {/^#/ d} FileName

echo ${x//ome/}
awk -Ft print{$6} inputfile.txt > outputfile.txt
awk $2 == "ST" { printf "%s ", $0; next} 1 input-file
{ reps = $2; for (i = 0; i < reps; i++) { $2 = i; print $0; } }
xterm -e script arguments... &
sed -i.bak s~^\( *\)"web" *$~\1"pkg/web"~g
find . -type f -exec sed -i  -e s/Red/$color1/g -e s/Blue/$color2/g {} ;
php artisan db:seed
if [[ $input =~ [^0-9] ]]; then
grep -Po 'active'=\K\S*
INTERFACE=`route | grep * | awk {print $8}`
/var/www/boinc/m52cc/query_tasks.sh m52cc -workunitResult m52cc_job_6; ;
if [[ ! $i =~ [^0-9] ]]; then
ssh user@server mv /site/includes /
sed -e s/^\(.*\)\(\*[0-9]\+\).*$/\1\2,aaaaa\n\1\2,bbbbb/ infile
run.sh | tee log.txt 2>&1
tar -xvf tar_file.tar file_to_be_extracted 2>&1 | tee temp.file
2>&1
( ./B.sh )
awk /Stats/,0 FILE
awk -F "*,"* {print $2} textfile.csv

grep -lr pattern /mydirectory/*
local outPath=$( echo $fuName | sed s/.*Lua\/\(.*\)/\1/ )
{ A || B; } && { C || D; }
awk /^abcd/{p++;if(p==1) print}/^DDD/{q++;if(q==8||q==9)print} file
sed -i -r s#url\s*=\s*"[^"]+"#url = "page2.php"# /home/site.js
xidel http://www.marksdailyapple.com/forum/memberslist/ -e a.username -f (//a[@rel="Next"])[1]
CATKIN_SHELL $_SETUP_UTIL $@ > $_SETUP_TMP
sed -i.bak /Outstanding/,/count/d file
awk /test/ {f=1} !f; /end/ {f=0} file
(w | awk /\/X/ {print $1})
sed -r s/(PATTERN1).*/\1STUFFI_WANT_TO_INSERT/ file
awk {print $N} RS= file
grep $itemname $filename | cut -d, -f3
ls -l | while IFS= read -r l ; do echo This is it: $l ; done
find $1 -type f -print0 | while read -r -d $\0 FILE
-e Exit immediately if a command exits with a non-zero status.
array=( $(ps aux | awk $4 != 0.0 && $4 !~ /MEM/ {print $11,$4} | sort) )
sed -r s/(android:paddingLeft(\s*=\s*\w+))/\1\nandroid:paddingStart\2/g file
myprogram < input.in
{line:22:26}
sed -r s/([^ ]+)/@\1/g file
int arrayLength = args.length / x;
cd myapp; out=`time ./cppcode`; cd ..; echo $out >> a
awk {NF = 29; print} filename
paste -d   <(ls -1) <(echo XXX)
awk -F, {print > $2; close($2)} test1.csv
awk NR%5{printf "%s", $0;next}1 file
10 */6 * * * for file in /var/www/parsingdev/corpus/*; do fileX=${file%.docx}; bash /var/www/parsingdev/meTypeset/tools/gennlm.sh ${fileX
[text + str(i) + .txt for i in range(19, 22)]
sed s/^/chr/ file.in > file.out
awk /CPU/&&/idle/{f=1;next}f{a[$4]+=$13;b[$4]++}END{for(i in a){print i,a[i]/b[i]}} your_file
sed -i -e 1s@.*@working_path='$current_path';@ file1.sh
sed -i -r s/(apple,[^,]*).*/\1,15/ filename
awk /^example/ { i++; next } { print >"test"i}
pgrep -fl xxx
awk regex <<< $var
plugins=(vi-mode)
nm /usr/bin/svn
expect -c spawn rsync -avz -e "ssh -p $port" $local_path1 $username\@$ip:~/; expect '*?assword:*' {send "$password\r"; interact};
s/pattern/replacement/
sed /\/bbb/d filename
awk NR%8 ~ /[134]/ file

read line <<< other text; printf %s $line
stree ~/my-repo-in-another-folder
grep -ilr orange . | grep -v .git | grep -e \.php$ | xargs sed -i s/orange/apple/g {}
system(mate-terminal -e --command='tail -f filename.txt');
slowprogram | sed -n 1~100p > file
awk /PATTERN/{c=3}c&&c-- file
output $(ls);
paste text1 text2 | while read file1 file2; do diff $file1 $file2; done
cat /etc/passwd | cut -d: -f7 | sort -n | uniq | xargs ls -l
sed -n s/.*\(2z\(\(.*\)\.\(.*\)\)n9\).*/variable 1 = \L\3\nvariable 2 = \L\4/p your.file
find -type f -exec md5sum {} ; | sort | uniq --all-repeated=separate -w 33 | cut -c 35-
awk {printf "%09d ", NR}1 file.txt
iperf -c 10.0.0.1 -i 1 -t 100 | grep -Po [0-9.]*(?= Mbits/sec)
s/((stringA)|(stringB)|(stringC))something/something else/
awk -v id=12345 -F ; $1==""{$1=id;} {id=$1; print} OFS=; file

perl -0777 -pe s/\[.*?\]/!!!/gs myfile
sed -n /First/,/Third/p; /Third/q file
(echo (println :hello); cat <&0) | lein repl
echo ${HEADER/$\r/}
read -a natc
perl -wnl -e @lines = split; print $lines[0] testrun
sort -k1 -M test.txt
awk !seen[$1]++ file
status =`
export PS1=$(./B.sh)
%s/,(\s\d)\t/,1))/gc
curl website.com | sed -n -r s|.*standards\.xml\?revision=([0-9]+).*|\1|p
if [ $THEME ==  ]
osascript -e tell application "terminal" -e do script "cd /path/to/direcory; output/b.o" -e end tell
sed s/^[*-+] *\[\(.*\)\](\(.*\))/Notebook: x\nTitle: \1\nUrl: \2\nKeywords: y\n\nContent Area\n\nWill use the \1 and \2 variable here again/ file.txt
xlsclients | grep -e compiz -e xfwm4
printf latc=%s\n ${latc[*]}
javac -cp /path/of/junit-4.1.jar awe/some/awesomeTest.java
tail -f /path/to/mongo_dev/logfile
awk BEGIN{FS=OFS="\",\""}$5=="credit"{$4="+"$4}$5=="debit"{$4="-"$4}1 file.csv
ps -ef | grep memcache
sed -i /^127/s/^/#/ /etc/hosts
gawk -f ext.awk tmp.txt > turbo.txt
ls -1tr $(cat filename.txt) | tail -1
break > a.txt && cmd /v:on /c for %f in (*.txt) do break > !random!.txt
nawk substr($0,42,4)~/ABCD|MNOP/ ${file}
awk $1 == "a" && $2 ~ /^(LINE|SINE|ERV)/ myData.txt
setw -t servers remain-on-exit on
awk NR==FNR {a[$2,$4]++; next} {print $0 "\t" a[$2,$4]} file file
metaData=`python /var/www/music/getMetaData.py $artist $title | tail -n 1`
awk -F, $3 !~ /^synonymous/ fileCSV.csv > fileCSV2.csv
perl -0777 -pe s/,(?=\s*\);)//g
sed --in-place \~$x~d total-list.csv
while true; do clear; jobs; sleep 2; done
command | grep -q found && echo -e \a
{ echo a,b,c; python myscript.py myparm; } > output
awk BEGIN{FS=OFS="|"}/^B/{$3="QQQ"}1
%s/\|/ |/g
\2 read -ra ITEMS <<<${LINE//$'\t'/$'\2'}
tagfile.py Tag Name FileOrFolderName
pgrep DynamoDBLocal
grep -oP TXT[^;]* filename
mount -t smbfs //mystaff:PE91XA!!%40@ncs-srv-fs3.ncs.local/Teaching /Users/mystaff/Desktop/DoNotUseTeachingDrive/
git submodule foreach npm install || :
foo=() { echo "hello world"; } bash -c foo
(ping -c 3 google.com 2>/dev/null | grep -cim1 64)
if [[$variable == $blanko]];
printf $PWD%s\n user.newskims.131017222/*
awk {print($0<0?0:$0)} file.txt
sed s/^.* \([0-9][0-9]\):.* mail from \(.*@.*\.com\).*/\1 \2/ myfile
rootcmd -s sh -c find . -type f | grep '|' | xargs rename '|' '!'
local a b c=d e=f g
sed -re s/(:: ni =)[^=]*$/\1 512/ file
grep ^/var$ newfile
grep -vi ^${empid_search}, tmpfile > $PAYROLL
wget http://www.myserver.de/index.html
xargs -L 1 ./myscript.py <inputfile
make\r: command not found
awk -F, {print $2} | grep Salaried $PAYROLL
for f in bla-*.zip(N); do ... done
grep print  **/*.py
grep -o user[^[:space:]]\+\.com file
awk -v RS=\\s*go {print $0""(RT ~ /go/? ";\n\n": "")} file.txt
find /Users -maxdepth 2 ! -perm 0700 ! -name Public ! -name Sites -type d -exec chmod 700 {} +
jq .[] | "\(.id) \(.word)" jsonfile
parallel -j 4 ./sim -r -- 1 2 3 4 5 6 7 8 ...
(find $dirname -maxdepth 2 -type d)
ssh $q mkdir -p /opt/acd/hgf/tom/hanks/ ; chmod -R 777 /opt/acd/hgf/tom/hanks/
awk NR%4==1 || NR%4==2
:r! grep -v ^\% filename | wc -w
(setq multi-term-program-switches --login)
source ./script.sh
(id -g)
for file in baselines/*; do numThreads=$(echo $file | gawk BEGIN { FS = "." } ; {print $3 }) echo Number of Threads: $numThreads >> $file; done
netstat -tn | cut -f2 -d: | cut -f1 -d  | sort -rn | head -1
echo your long task | at now
sed -i s/\\n/\n/g input_filename
sed s/  */:/3g file
find . -name *test*
wmic useraccount where name=%username% get sid | findstr /b /C:S-1 > file.txt
/full/path/to/animate HRIT_MSG3_CTT
(readlink -f $(dirname $(readlink -f $0))/..)
find / -type f | grep secret/* | awk /[a-zA-Z.-]{54}/
if [$type=Salaried]
sed -n /\/\*/,/\*\//{P;/\*\//q;D;} style.css
COMMAND | grep -w -F -f dummy_file

df -k | awk -f print.awk
swipl -g consult(abc), test(ask, X), write(X), halt
trap  HUP
tar cfv mytar.tar root/*/the_folder/
svn checkout --depth files --force URL PATH
sed -r s/[^[:print:]]// typescript > final.file
awk $0~v v=patt/ern
grep Rec STOM.log | grep 1887283 | grep 2013-07 | grep -oh '.*' | wc -c
echo -n stuff|wc
C:\Program Files (x86)\Notepad++\notepad++.exe $(grep -rl <script .)
i=0;for f in *;do d=$(printf %03d $((i/100+1)));let i++;mkdir -p $d;mv $f $d;done
... | sed -e s/#MYDATE#/$(date +'%A %d %B %Y')/ | ...
awk {gsub(/.../,"& ")}1 <<< CTGGCAAGAAAGAAATGTGGAATGGCAACAAAGAAAGGAAAAAAAATCAATACTGGCTGATGCAGTTTC
mail -s $SUBJ -q $MSG $TO
for i in *.js ; do if [[ ${i} != pre.js ]] ; then cat pre.js ${i} > $$ ; mv $$ ${i} ; fi ; done
sed s/function\s\(.*\)(/\1: function(/g file.js
fp=fopen(mydata, r);
printf ... | cut -c 1-80
{Time, Value} = timer:tc(queen, queen, [N])
BASE_PATH=/cygdrive/D/Program files/VisualSFM/Bundler
rm -rf /path/to/your/folder
some_command || { command1; command2; }
awk -F> $2~/^mail/{f=$2".mail";gsub(/[)(]/,"_",f)}{print > f} file
mysql -u root -p$(cat ~/.mysql_pass)
./myscript1.sh $(./myscript2.sh my_string)
var=foobar
tail -f my_log_file | sed -e s/.*\(response_time \S\+\).*/\1/p
mailx -s subject foo@bar.com <<<$\n Body Text \n
awk {print $1-$EFERMI , ($2+$3)/32}
awk {print $1,$2,$9,$NF}
awk BEGIN {RS="omg"; ORS=""} {print $0""++i} file
ls|gsort -rV|sort -uk1,1|while read f;do mv $f ~/Desktop/Latest;done
system ( ( echo %s\n, str ) );
xdotool type hello world
sed -n /^ZZZ/ { s/^.*\(<.*>\).*$/\1/p }
awk -F\t -v OFS=\t {x=$1;$1="";a[x]=a[x]$0}END{for(x in a)print x,a[x]} file
cat all upd | sort |uniq -c |grep ^1
sed -n /^-- Current Database: \`${db}\`/,/^-- Current Database: \`/p $path$infile > $path$outfile.sql
(grep -oE \bb[0-9]{3}\b file)
dd if=/dev/null of=/dev/block/mmcblk0p3 bs=1 count=4 seek=33796 conv=notrunc
for i in ${inputs[@]}; do echo $i; done
cat bigfile | parallel --pipe --files sort | parallel -Xj1 sort -m {} ; rm {} >bigfile.sort
export PATH=<path_to_android_sdk>/platform-tools:<path_to_android_sdk>/tools:$PATH
if [[ $COUNTER -ge 100 ]];
sed -n /Lipid droplet diameter/{n;n;n;N;p} input
make configure
awk -v RS=<[/]?div[^>]*> /span/ && /people/{gsub(/[^[:digit:],]/, ""); print} file.txt
:[range]Substitute [column/]pattern/string[/flags]
StrictHostKeyChecking no
if [ $EmployeeType=Salaried ]
find test -type d -regex .*/course[0-9.]*

/var/folder/program.exe -L parameters | grep -q text_to_filter && echo SomeText > /tmp/Log.txt
sed s/\(Getceiling(\)\([^,]*\),\([^,]*\)/\1\3\2/g input
egrep ^([^ ]*\.)?domain\.si /var/log/access.log
tshark-command|awk BEGIN {FS=":"};{print "insert into tbl_name (field1, field2, ..., field8) values (" $1 "," $2 "," $3 "," $4 "," $5 "," $6 "," $7 "," $8 ");"} > insertcmd.sql
export PATH=$PATH:/Users/user1/bin/
find -type f -name header.php | xargs -n 1 dirname | xargs -n 1 cp -f topscripts.php
dirname $(dirname $(readlink -f $(which java)))
grep \<foo\> file
x=\$GLOBALS['industry_id'] = '1';
awk NR==FNR{a[$1]=$0;next}{print a[$1]} f2 f1
socat PTY,link=$HOME/.wine/dosdevices/com1,raw,echo=0 PTY,link=$HOME/tmp/dev/myserial,raw,echo=0
find /desktop/themes -name footer.php -print0 | xargs -0 gvim -p
ls -1 | egrep \.txt$ | xargs egrep  /dev/null > out
printf %14s  %14s  %14s  %14s  %14s\n $(cat data.txt)
awk !v[$2] { print; v[$2]=1; }  input
{var:-val}
echo $line
sed -r s/(\w);(\w+\b)/\1\2;/g filename
(test 1) && ls /undef_dummy > /dev/null 2>&1 || echo else stmt
{string: -3}
awk {for (i=1;i<=NF;i++) {printf $i" "; if ($i~/TTT/) exit}} file
alias count1=num=$1;wc $num
[ $(readlink $HOME/.slate.js) = $target_path ]
zip myArchiveName *.{prj,shp,shx}
`sed -i  -e /<ArchiveAction/,/<\/ArchiveAction/ s/buildConfiguration = "[^"]*"/buildConfiguration = "$my_build_configuration"/ /Path/To/File`
curl --header PRIVATE-TOKEN: QVy1PB7sTxfy4pqfZM1U --data-urlencode email=jon@doe.com&password=defaultpassword&username=jdoe&name=Jon Doe http://example.com/api/v3/users
!78:p
[[ $number =~ ^[0-9]{,2}$ && $number -ne 0 ]]
(awk -v i=$i -v j=$j  NR==i {print $j; exit} file.dat)
readarray a < test.text
find -type f -wholename */lib/file.php | sed s:/lib/file\.php$:: | xargs -I dirs mv dirs /path/to/new/dir/
find . -name */function.php -print | xargs sed -i s/foo/bar/g
nawk -F, NR==FNR {a[$1]=$2;next} ($1 in a) && (a[$1]+5)<=$2 count.txt count1.txt
PATH:usr/local/bin/rssh
awk {print $1, $2, $3, $4} file
ls -1 *Mcmm*txt *Mmmm*txt | awk -F_|\\. {print $(NF-1)}
java -jar bfg.jar --replace-text replacements.txt my-repo.git
awk -F, $2
find . -name *.pl | xargs grep /local -sl
(theloop | tee /dev/tty)
`git merge --no-ff --message #{merge_message}
awk -f ext.awk input.txt
sed -e s/<[^>]*>//g file.html
for i in `find . -name photo* -type f` ; do mv ${i} ${i//photo//color} ; done
find /path/to/photos -iname *.jpg -o -iname *.png -type f -exec mv -nv -t /path/to/master -- {} +
awk -f range.awk input.txt
:.w !bash
{ echo Test 1; exit; } && echo Test 2
awk {a[$6]} END{print "Total no:of residues in", FILENAME, ":", length(a)} file
< file.txt awk { for (i=5; i<=NF; i++) $i = gensub(/:[^:]+/, "", 4, $i) }1 | column -t
awk BEGIN { OFS = "\t" } { gsub(/.*=/, "", $3); print $1,$2,$3 } text.txt
grep -P .+<text2>.+ filename
awk -F / {print $NF} input.txt
PATH = $HOME/bin:$PATH
sed -e /is-program2-/ s/.$/0/ -i file.txt
exec 3<&0 0</dev/null
perl -pe s/^(.*?:.*?)(?:\sRole)?:/$1Role:/ test.txt
% lua hello.lua
if (( $act_owner == $lib ))
cssbeautify basket.css > temp_file && mv temp_file basket.css
rsync -av --exclude /u01/oracle/test/product/11.2.0.3/dbs --exclude /u01/oracle/prod/product/11.2.0.3/network source/destination/ /u01/oracle/prod/product/11.2.0.3/ /u01/oracle/test/product/11.2.0.3/
for x in $(cat unwanted-lines); do x=${x//$'\r'}; sed -i /$x/d test-domain; done
tail -f -n 0 access.log | pv -lr > /dev/null
rm -rf /var/some/dir/*
while getopts :d:p:nil optname
:<,>w !tr -d [:space:] | wc -m
sed -r s/.*(X|Y|Width|Height)\s*:\s*([0-9]+)/n\1=\2/
sed -e /<string>REPLACEME<\/string>/r /tmp/dictionary.txt -e //d /tmp/plaintext.plist
cmd1 | tee >(cmd2) >(cmd3)
\nin a box
git commit -m add `foo`
find . -type f -name *.png -execdir convert {} *OPTIONS* mydefinedname.jpg ;
watch -n 10 ./script.sh
AU_NAME=AU_MSM3-3.7-00.01.02.03
perl -pe s/(?<=<PartitionID>)(.*?)(\d{4})(?:(0[1-9]|1[01])|(12))(?=<\/PartitionID>)/sprintf("%s%04d%02d",$1,$2+($4?1:0),$4?1:($3+1))/eg < input.xml > output.xml
awk -v var=$variable {$0=var} file
gzip -d --stdout file.gz | bash -s -- -n wordpress localhost
ls -l | grep test2*
./command1 | grep ^\[ | awk { print $2 }  | xargs ./command2
yellow=226
stat --printf %a your_file
sed -e s/.$// -e /last:/s/$/,/
printf %.4o\n $(( $(stat -f 0%Lp $file) & ~$(umask) ))
find . -type f -name *.csv -print0 | xargs -0 sed -i 1icolumn1,column2,column3
..... | tail -1 | cut -f 1 | xargs -i sed -n {},$p your_file
chmod a+x fakeswap.sh
ls -li
sudo sh -c apt-get update -qq ; true
(bc -l <<< scale=3;$lengthseq/3)
[a-z]*) file=$1;;
sed -r s|.*/([^/]*)/.*|\1| file
find /mountpoint -mtime +42 -type f -exec rm {} ;
awk {print > "Chr"$1".gen"} file
* * * * * /home/user/simple.sh >> /home/user/cron.log
sed -i s|\<div id="wrapper"\>|\<div id="wrapper"\>$MYTEXT| org.html
find /path-to-directory -type f -mtime +60 -print0 | xargs -0 ls -ltr > /path-to-directory/filenames.txt
/bin/bash -c ps -eo pid,command | grep -v bash | grep syslogd | awk '{print \$1}'
awk {w=$1} END{print w} file
awk NR<=3 || /hello/ test.txt > out_dir/test.hello.txt
system(./hello file.txt)
stat -c %U <filename>
awk -v RS=START[^\n]*\nEND\n {printf "%s", $0} file.txt
cut -d   -f2 file
(printf %s $l | sed -E s/$pattern/$lib/)
awk -F , {print $7} file
ssh user@Main.local mkdir Desktop/test
ssh you@your_local_machine:/path/to/Test user@node:~/Folder/folder2
stat -c %y $filename
for i in *; do echo ${i}; done
find .-type f ! -name *.c -exec rm {} +
getent passwd | awk -F: { if ($3 >= 500) print $1}
cat /backup/fileslists/filelist1.txt | { while read line; do rsync -avzR $line $DESTSRV:$DESTPATH/; done; }
sed -i /unix/s/crap/linux/ test.csv
nohup nice -n 5 python3 blah.py > log.txt &
sed s/address = \[\|\]//g
sudo yum install gcc
find /path/to/look/in/ -type d -name .texturedata
comm -23 <( find /dir1/report_dir2/dir3/2013* -name *MyFile* | perl -pe s/.*(MyFile[^.]*\.csv)(\.gz)?$/$1/ | sort -u ) <( find /dir0/dir1/dir2/loadedreports/archive* -name *MyFile* | perl -pe s/.*(MyFile[^.]*\.csv)$/$1/ | sort -u ) > /home/Ben10/list.txt
[[ $MAC_ADDRESS =~ ^([a-fA-F0-9]{2}:){5}[a-zA-Z0-9]{2}$ ]] && echo valid || echo invalid
if [ $file_hash == $(md5sum $a | cut -d   -f 1) ];
xargs -a <(echo boo hoo) ./fn.sh
vim test.sh
1>/dev/null
eval $a=\$NEW_GUY
top | grep --line-buffered chromium >> load.log
awk BEGIN { x = 1 }; /^-- Dumping data for table `cache(_[a-zA-Z0-9]+)?`$/ { x = 0 }; /^-- Table structure for table `[^`]+`$/{ x = 1 }; (x == 1) { print } $1
find . -iregex .*html? -printf %P\0 | xargs -0 sed -i -Ee s:(http|https)\://(www.|)${domain}[?/]::g
(df -PTh | column -t | sort -n -k6n | sed s:$:<br/>:)
sed -i.bak -e s/__REPLACE_THIS_PATH__/${ourpath}/ com.plex.plexconnect_daemon.bash.plist
nginx -v 2>&1 | awk -F/ {print $2}
vim file.txt </dev/tty
(awk NR>1 {if ($2>40) {print $1,$2; f=1}} END {if (!f) print "ok"} <<<a$)
sed $!N;s/,\s*\n\s*\.rdt(rdt)//;P;D file
awk NR==1{next}NR==FNR{while(++i<=NF)if($i!="0")k[i];i=0;next}{while(++x<=NF)if(!(x in k))printf "%s ",$x;x=0;print ""} file file
(egrep CN=$1/ index.txt|awk {print $3}).pem
sed -i.bak /center/s/^\([^#]\)/#\1/ file.txt
subprocess.call([sed, -e, s/\"absolute\/path\/to\/your\/lib\/\"\/var\/www\/twiki\/lib\/, \/var\/www\/twiki\/lib\/LocalLib.cfg])
tr , \n
awk NR==FNR{a[$0]=1;next}FNR==1{for(i=1;i<=NF;i++)if(a[$i])k[i]}{for(x in k)$NF= sprintf("%s ",$x) $NF}7 f1 f2
existed=`awk -F $1 == $title $library | wc -l`
comm -3 <(sort a.unl) <(sort b.unl)
ssh://[user@]host.xz[:port]/path/to/repo.git/
command > log.txt
awk -F| NR==FNR{a[$0];next}$1 in a a.unl b.unl
shopt -s extglob; mv 8953-*/!(!*) /mnt/FOLDER
ping 8.8.8.8 | awk {split($7,a,"[=.]");if (a[2]>58) print a[2],d} d=$(date)
for i in $(seq -s   $start $end); do
echo ######      30%\r;
print FILENAME
cat -n
paste <(awk -F , /Aname/{for(i=1;i<=NF;i++) print $i,","} file.csv) <(awk -F , /Bname/{for(i=1;i<=NF;i++) print $i,","} file.csv) <(awk -F , /Cname/{for(i=1;i<=NF;i++) print $i} file.csv)
/usr/local/lib
grep -Po (<=\[)[a-zA-Z0-9]+(?=\])
export PASSWORD_TO_RUN_SUBSCRIPTS=1

ps -fU `who | cut -d' ' -f1 | uniq | xargs echo` 2> /dev/null
awk {for (i=1; i<=16; ++i) if($i != 0) {print;next}} file.csv > newFile.csv
echo Â10.41.89.50-._  | tr -cd [[:alnum:]]._-
sed s/ // inputFile
LD_LIBRARY_PATH ./nw $*
:global/^.{90,}/echo line line(.) exceeded 90 chars!
... | xargs -r kill -9
C:\my path\mysql\bin\mysqld-nt --init-file=C:\mysql-script.txt
if [[ $x == $(function $x) ]]; then ...
touch online.log
java -cp jarfile.jar;. test
find $1 -name IMG_*.JPG > list.txt
newtank=( ${tank[@]/two/} )
sed s~uri='file:/var/lib/abc/cde.repo/r/c/e/v/1\.1/abc-1.1.jar~uri='file:/lib/abc-1\.1\.jar'~g
(echo ${text} / 10 | bc -l)
s/[o200-o377]+/n&/g
awk $1 == "055" { system( "/path/to/script " $2 )}
awk /line/{ print NR; exit } input-file
mv oldFileName newFileName
echo $4a:
ln -s /opt/jdk/bin/java /usr/bin/java
export var=value
find /path/to/dir -type f -ctime -0 -name *.* | zip -@ file.zip
awk $1==99999{f=($3==55&&$4==126)?1:0}f file
cmd $args
awk -v n=$n {x[NR%n]=$0}END{print x[(NR+1)%n]} file
ssh HOST cat mydirectory.tar.bz2 | tar xj -C mylocaldirectory
ps | awk {print $var}
sed -r /(\?\s+){3}(Yes|No)/d ./file
sort -s -k1,1
java -Dcom.mchange.v2.c3p0.cfg.xml=/path/to/xml/file
awk -F| -f parse.awk *inputparams.txt
awk -F: NR==FNR {a[$2]; next} !($2 in a) file2 file1
strBatchName = SystemData.AppPath + DetailedContacts.bat &   &  & domainCodeList & 
sed -n /string1/p;/string2/;/string3/p INPUTFILE > OUTPUTFILE
find . -type f -name *.txt -exec sed s/f/u/g {} ;
let LEFT=PWED - $PWTIME
sed /\/\*/!b;:a;/\*\//!{$!{N;ba}};{/$Log:/d} filename
stdout: uid=1001(foobar)
echo log 2 | tee -a 2.log 123.log
(setq pcomplete-ignore-case t)
\r}
ssh -t username@hostname sudo /path_to_my_script $1
chmod -x $rvm_path/hooks/after_use_textmate
cmdArgs[0], buf, bufCmdArgs[0] = buffer;
sed /^Path/{N;s/\n         //;}
who | awk { print $1; } | sort -u | awk {print $1; u++} END{ print "users: " u}
sed -nr /-{3,}/h; /Path\s*:/H; /Everyone\s+Allow\s+FullControl/{x;G;p} file
./keychain_access -p password_for_exported_private_key Name of private key
{nameIndex}p
cut -d  -f1,3,4
msiexec /i c:\myinstall.msi /qb TRANSFORMS=c:\mytran1.mst
R -e \install.packages(shiny, repos=http://cran.rstudio.com/)\
awk {$5 = $4 - $3}1 input
sed -i 2d downloads.txt
convert image1.png image2.png image3.png -append result/result-sprite.png
./caspser.pl > /tmp/checkFORerrors2013Nov19 2>&1
top -p $1 -n 1
grep -c \<NH:i:1\> samtry.txt
awk {print $1} input.txt | xargs -n 1 -I pattern grep -rn pattern dir
echo dn: '$RESULT' >> $SCRIPTPATH/gadspwsync.ldif
find /tmp -type f ( -name *.txt ) |cut -c14- | nl
ls | tee file1 file2 > /dev/null
grep $i 4700921_combined_subs.txt > $i.txt
jsonStr = {"script":"#!/bin/bash\\necho Hello world\\n"}
awk $2 == "0.0000"{getline var <"file2";$1=var};{print} file1
QUERY=SELECT * FROM CUSTOMER WHERE CUSTOMER.CREATE_DATE >= ( CURDATE() - INTERVAL 1 DAY ) and TIME(CUSTOMER.CREATE_DATE) >= '12:00' and TIME(CUSTOMER.CREATE_DATE) <= '23:59' INTO OUTFILE '/stuff/a.csv' FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n';
git config --global --replace-all core.pager less -+X -+F
grep -- -v file
(.*)
alias php=/usr/bin/php
find . -type f -exec ls -ltr --time-style=+%Y%m%d%H {} ; | awk {if($6>2013111822 && $6<2013111907) print $0}
chmod +x hook.sh
sed -i.bak s/^[[:space:]]*// file
awk -F [/()] -v OFS=; {print $0,$(NF-2),$(NF-1)} your-file
sed -i 0,/<p/ s_^_$thestring\n&_ file
sed /HEADER 1/{n;:l N;/HEADER 2/b; s/\n//; bl} input
sed -n -e /(/,/)/p filename | sed 1s/[^(]*(//;$s/)[^)]*$//
[ping command here] | awk /^---/ {printf("%s ", $2)} /%/ { print $7} {next}
find ~/my-documents/ -iname ABC_[0-9][0-9][0-9].JPG -type f -exec cp {} ~/my-documents/archive/ ;
awk BEGIN { RS="guide_change_names[^{]*{[^}]*}[^{]*{[ \n]*}[ \n]*" } 1 file
echo 1 2 3 | xargs myapp
-skip_rlimit : Do not perform rlimit tuning of file descriptor limits. Default: false.
foo.pl 2>&1 | tee foo.log
rsync -vaq /var/tmp/files/* /var/www/html/livevideo-stream/
ls *34 | sed s/34/\*/g | xargs -n 1 -I file mv file target_dir
perl -wpes!"([^"]*)"!"<blue>$1</blue>"!g filename
echo python my_script.py data_arg | at now + 5 minutes
echo TITLE=  B=ack=To ian    | sed -n -e s/[^=]*=[[:blank:]]*\(.*[^[:blank:]]\)[[:blank:]]*$/\1/p | od -tx1 -tc
(( elem++ )) || true
ruby -e $(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)
sed -i.bak s~"\([^"-]*\)-\([0-9]*\)")~"(\1-\2") uid="\2"/>~ file
rename G:\AuthorsList\AuthorsList_New.mdb AuthorsListCopy.mdb
git rev-list --count %MERGE_TO%..%BRANCH_NAME%
alias fer=~/hej
sed -i.bak s~<body[^>]*>~&<p>This is the first line</p>~ file.html
:set titlestring=%t
set -o
system(/bin/rm -rf  . escapeshellarg($path) . /*)
set makeprg=cmakedbg
{SED} -i s%-i lo.*%&\n\n#Trusted Traffic\n-A INPUT -s 10.153.156.0/25,10.153.174.160/27 -d ${MGTIP} -m state --state NEW -j ACCEPT\n\n#Remote Access\n-A INPUT -s 10.120.80.0/21,10.152.80.0/21,10.153.193.0/24,172.18.1.0/24,${MGTNET}/${NUMBITS} -d ${MGTIP} -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n\n#Backups\n-A INPUT -s 10.153.147.192/26 -d ${BKPIP} -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n\n% ${IPTABLES}
command1 2>&1 | command 2
alias xxx=svn status | awk '\$1 =="M"{print \$2;}'
xxd test_perl.pl
ps -eo uid= | tr -d   | grep -vx 0 | sort | uniq
sed -n /<Hi>/,/<\/Hi>/p file
robocopy /mov test a:programs sample.exe
sleep 5
cat Stack.txt | uniq -w 11 > Result.txt
sed -r s/(^.*)NATIONAL CHARACTER VARYING\(([0-9]+)\)/ echo "\1"VARCHAR"("$(echo "scale=0;\2*1.2\/1"\|bc)")"/ge filename
cd $(mkapp createddir)
findstr Error %LOG% >nul && goto :sendmail
ESC [ ? 1 h ESC =
if [ $$? -ne 0 ]; then
git diff --name-only tag-name tag-name^
args_from_third=({@:3})
arr=( $(echo $pdb | tr / \n) )
tar cjf /home/user1234/files/mylog.log.tar.bz2 -C /home/user1234/files/ mylog.log
sudo mkdir /usr/local/share/doc
find /var/tmp/stuff -type f -iname backup* -mtime +90 -exec rm {} +
bind -x "\C-K": "echo -en \\033c"
updatedb && locate foundation
C:/a/b/c/bin.exe
find . -name *.h -o -name *.txt
sudo rpm -Uvh rpmtodeploy.rpm
find foldername -type d -exec chmod 777 {} ;
grep -Ei ^COLOUR=((RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN|WHITE|BLACK)\|)*(RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN|WHITE|BLACK)\|?$
mount | grep /data
find path/to/files -name archive.gz -exec sh -c gzip -dc {} | awk 'NR==100' ;

sed -i -e s/^M//g -e /"$/!{:a N; s/\n/~~/; /"$/b; ba} file
do shell script POSIX path of (path to me) & Contents/Resources/script.sh
awk -v RS= $3=="sn::"{"base64 -d<<< \""$4"\""|getline $4}{print $2,$4} file
/usr/local/bin/sed -i -e s/${String1}/${String1R}/g;s/\/${String2}\//\/${TString2R}\//g ${ROOT_DIR}/data/file.sql
/bin/bash --login
git remote add mine <url from GitHub>
Process.Start(pathToFile);
find /etc/test/ -type f -print0 | xargs -0 cat >> /root/.ssh/authorized_keys
find . -type f -name *.my_format -exec sh -c ./my_script {} & ;
if [ $a == 1 ]
(liquibase --lots of parameters here) > /dev/null 2> /dev/null
sed :l;s/-\([^- ]*\)\( *=\)/_\1\2/g;tl input
awk {a[$0]++}END{for(i in a){if(a[i] > 2){print i}}} a.txt
[[ and ]]
curl --data {"name":"${repo_name}"} -X POST -u jjohnson304 https://api.github.com/user/repos
find videos/ -name *.mp4 -exec ffmpegScript {} ;
bash ./test.sh
egrep -o [0-9]+
DROP_TABLE_OF_INVALIDS=get_boolean $DROP_TABLE_OF_INVALIDS n

bind "\e^M":"foobar"
FILE=`find $@ -type f -name abc.txt`
curl <URL> | grep -o -E href=["'](.*)["'] 
c:Test>for /f tokens=* %a in (dir temp\*.txt) do type %a >> .summary.log
rename s/(\d{2})-(\d{6})\.jpg/abc-$2-$1.jpg/ *.jpg
gcc *.c -lrt && ./a.out
echo test | cat
pattern=.*some_pattern.*
echo ${content} | awk { pen = ult; ult = $0 } END { print pen }
(false)
token = strtok(input,  \n\t);
sed -n /base 16/{s/[[:blank:]]*\(..\)\(..\)\(..\)[[:blank:]]*([^)]*)[[:blank:]]*/\1:\2:\3 /p;} file
./commandthatputsstuffonstdout | tail -c +1025 ...
if [[ #grep#fetch#cleanup#diff# != *#$1#* ]];
/usr/libexec/PlistBuddy -c print :ProductUserVisibleVersion /System/Library/CoreServices/SystemVersion.plist
ls | xargs -d \n -n 1 mplayer
ls|fgrep -v -e .tar -e .patch|xargs rm -rf
zcat *.gz | grep <word> | grep -oP ^\d{4}-\d{2}-\d{2};\d{2} | sort | uniq -c
if(serverSocket=socket(AF_UNIX,SOCK_STREAM,0) < 0)
wget --no-cookies --no-check-certificate --header Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-i586.bin

sed 1,/^$/d data.txt
if [ $currentIp == $(wget -O - -q -nv --delete-after www.icanhazip.com) ] ;
shuf -i 0500000000-0599999999|sed s/^/0/ > passwords.lst
(cd some/vagrant/folder; vagrant init)
echo * master | sed -e /^[^*]/d -e s/* \(.*\)/\1/
... -F  $1 == "namespace" && !a {$0=$0 RS "foo";a=1}1 file
paste file1 file2 | awk {print $1,$4,$2,$5}
system(killall foo.sh);
echo ${s//*_some/}
sed -i.bak s/),(/),\n(/g backup.sql
mv /path/subfolder/* /path/
for i in $2/*.jar
gnome-terminal --working-directory=xxx/yyy/zzz --tab -e command 1 --tab -e sh -c 'sleep 2; command 2' --tab -e sh -c 'sleep 4; command 3' --tab -e sh -c 'sleep 6; command 4'

sed -n /^Started/, /page/p file
NR==FNR
sed -i \|\[exec[]]\s[(].*[)]\s[{]/usr/lib/xscreensaver/.*\s-root[}]|d ~/.fluxbox/menu; sed -i \|\[exec[]]\s[(].*[)]\s[{]\b\(xscreensaver\).*[}]|d ~/.fluxbox/menu
rsync [OPTION]... SRC [SRC]... DEST
sed s/,//5 input.txt
mv /tmp/filename.foo.{gz,cdx} .
sar 1 | { read; read; cat; } > file.txt
find * -name *_0VT0_* -prune -o -print
wget -q -O - http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=$1
awk {print substr($1, 3, 1) } <filename>
ll | perl -ne print if s/(.*)([0-9]*:[0-9]* *)(.*\.sh)/$3/
Process p1 = run.exec(new String[]{sed, -i, s/ /\n/g, filename});
expect myscript.exp
if [ $DIR = /bin /boot /dev /etc /home /lib /media ... /usr /var ]
ping -c1 $server &>/dev/null && echo $server
find / -type d -path */ruby/lib
./version.sh -x foo -c
if [ ${temp:35:1} -eq $cpu -o ${temp:35:2} -eq $cpu ]
awk -f p.awk input.txt
dos2unix /path/to/.bashrc
awk NR==1{t=$NF;next}$0{print t,$4,$NF} file
java classname | tee -a Mylog.txt)
iostat -x 1 -m | awk /sda/ { print $6, $7}
grep -v :..: yourfile
C:\Programs\Microsoft Office\Office14\OUTLOOK.EXE /c ipm.note /m myemail@email.com&cc=seconda.address@email.com&subject=Test&body=Line 1 %0D%0ALine 2
system(sox.exe a.wav b.mp3);
awk {print $0 OFS $17 OFS $5} test_s | sort -n -k18 -k19 | uniq -c -f17 | awk {NF=18;print}
y=pop*.asc
sed s/\$PLACEHOLDER_/\$/g file
shopt -s expand_aliases
find /your/directory ! -user nobody -exec echo chown user:group {} ;
< file tr -d \0 | read -n 1 || echo All zeroes.
awk /String1/ { linematch[NR+10]=1; } /String2/ && NR in linematch; file1.log
rsync -avrc -e -i `find . -type f -mtime -2h` @${DST}:/var/backups/
nmake /f makefile
perl -0777neprint /^0+$/ ? "yes" : "no" file
grep -v -f $whiteListOfErrors $originalLogFile > $outputFile
cd /tmp/Archive.xcarchive/Products/Applications/
awk {print $2} FILENAME
for foldername in folder/*; do cd $foldername; for filename in *.txt; do ../../test $filename > output_$filename; done ; cd ../..; done
setvbuf(stdout,0,_IOLBF,0);
find . -type f ( -name *.cpp -o -name *.h ) -exec sed -i.bak /FIXME/s/date/data/g {} ;
sed -n -e s%.*https://\([-.0-9A-Za-z]\{1,\}\.[A-Za-z]\{2,\}\).*%\1%p
@reboot /var/www/ghost/launch.sh
zip -r BE.zip B/ E/
convert image.png image.pdf
sed /export HOME=/a cd ${HOME}/tmp # added \n rm -rf packed* # added yourfile
echo ${str//<*>/|}
git clone https://github.com/SachaG/Void.git
bash -c ls NONEXISTENT
tail -n 2 file{9..12}.log
awk -v q=, /$x/ { count++ } END { print $x q count }
rsync A host:B
printf %s\n ${a[@]}
cat | awk | head
awk -F, $3 > -39 momenttensors.csv
sort -k 1.1,1.11 input.txt
time build_cmd
awk {sub(/\S*\t/,"");a[$0]++}END{for(x in a)print x, a[x]} file
mailx -s $(<bkp.txt) ......
dd ... 1>/dev/null
then echo FOUND && sh $f/run.sh && break
for f in * ; do mv -- $f $(tr [:lower:] [:upper:] <<< $f) ; done
nohup ./myprogram.sh > /dev/null 2>&1 & echo $! > run.pid
cp $line $2
join -t, -v 2 StatusResults_sign_DESeq2.csv StatusResults_edgeR_sign.csv
echo `df -hlg | awk -F/ '/disk*/ {print $5}'`
cd ${!var}
subprocess.call(sh ./setup.sh, shell=True)
tr | \n < clientlist.txt | grep -Po clid=\d+(?=.*client_type=0)
sudo umount -a -t cifs
awk $2=="no"{$3="N/A"} {print $0} file
(add-hook shell-mode-hook ansi-color-for-comint-mode-on)
echo $ans
iconv -f windows-1252 -t UTF-8 import.csv -o new_import.csv
(( a - b )) && echo $(( a - b )) || echo 0
sed -n 2{p;q;} hugeFile
find . ( -iname *.hh -o -iname *.h ) -exec ...
trap printf "\nAborting\n"; exit 1 SIGINT
grep -q ^option file && sed -i s/^option.*/option=value/ file || echo option=value >> file
system(clear)
which foo >/dev/null 2>&1
awk -f ext.awk DATA_FILE
xterm -e programname argument1 argument2 argument3 ...
* $@ $
int TempSim=60;
sed -i ${row}i$title hi.csv
sed -n -e \:Next</a></p>:,\:Next</a></p>: p file.txt
after=`cat somefile.json | jq -c -r .after[] + "; "` | tr -d \n
yum -y install java-1.7.0-openjdk
awk -f p.awk file2 file1
sed -E s/[^(]*\('([^']+)'[^(]*/\1 /g; s/ $// < tuples.txt
echo ${pathToConfig//:/\\:}
if [ -e $i ]
egrep -q \.(com|es|de)$
gawk BEGIN{FPAT="([^;]+)|(\"[^\"]+\")"}{for(i=1;i<=NF;i++){printf ("%s\n",$i)}} file.csv
parallel --load 100% ./intensiveCommand ::: 1 2 3 ::: 1 2 3
cat - | wc -l
/usr/bin/bash -c APSHOME=/all/aps/msc_2012; export APSHOME; 
_my_function $do_add_list[@]
chomp( my @vminfo = `vboxmanage showvminfo $vmname` );
pipefail If set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands in the pipeline exit successfully. This option is disabled by default.
chmod +x run.sh
awk $(NF -1) == 200 {arr[$1]++}END{for (a in arr) print a, arr[a]} access.log
sed s/.*[ap]\.m\.\s\+\(.*\)$/\1/ DateStamp.csv
while read L; do grep -E -o [0-9]{2}:[0-9]{2} (p|a)\.m\. <<< $L|head -1; done < cvs.txt
find . -name *png -exec bash -c base64 {} > {}.txt ;
sudo chsh shell user
mkdir C:\users\charqus\desktop\MyFolder > nul
ps H -C <cmd name> -o pid tid args comm
ls back_dir | grep aa.[0-9]$
find -type l -print0|xargs -0 ls -ld|grep Dropbox
curl -o - ${PARAMS:+--data $PARAMS} ${URL}
perl -0777 -i -pe s{^\t*###[\S\s]*?^\t*###}{"foo"}gme file.coffee
echo $SINR | awk BEGIN { chars="abcdefg" } { print substr(chars, $1 + 21, 1) }
-bash: !: event not found
somecmd arg1 </dev/null 1>&- 2>&- &
awk -f e.awk Longstringfile > Resultfile
historyTemp->hname=historyName;
cat(\033[32;1m OK \033[0m\n)
(ulimit -f 102400; wget $url)
cat file1.txt - < file2.txt
for i in {1..9}; do cp empty.docx $i.docx; done
build = spawn /bin/bash, [test.sh]
while read -r i; do echo $((i*i)); done < read7
awk -f myawk.awk config file1
(echo ${str// /-})
awk {match($0, /Pattern\w+/)} { print $1, substr($0, RSTART, RLENGTH) } file
awk NR==FNR{h[$2]=$1;next} {for (i=1; i<=NF;i++) $i=h[$i];}1 a.txt b.txt
(. /home/db2inst1/sqllib/db2profile ; db2 connect to MYDB ; db2 select * from table(myFoo()))
CC error.cpp 2> error
. ./run_me
gnome-terminal --full-screen -x script mylogfile.txt -c ./user_script_file.sh
(3-1 2>&1)
(date +%Y%m%d --date=yesterday)
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
testArray=(A,B,C,D,E)
sed -n /start/,/end/ H; $ { g; s/\n//g; s/\(end\)/\1\n/g; p } infile
cmd=( python script.py '$param1' '$param2' )
awk -f ext.awk file
perl -ne... print $0, "\t" ...
awk -f merge.awk file1 file1
> /var/log/httpd/access_log
ls -l aaa* | grep -v expr
(ack-grep --type=python import ipdb -c -l) ;
cut -d: -f1
find $dir -size 0
javac -d ../cls -sourcepath ../src ../src/pkgs/project/MainPrj.java
awk -F - -v OFS=\n- $1=$1
awk {$2=sprintf("%.2f",$2-30)}7 file
sed -i s/\$rcmail_config\['default_host'\] =.*/\$rcmail_config['default_host'] = 'abcdef';/ /your.file

/Users/[username]/Library/Caches/Google/Chrome/Default/
EOF
sudo ln -s /usr/local/lib/python2.7/site-packages/django/bin/django-admin.py /usr/local/bin/django-admin.py
STR=eeeeeee; printf ddd %11s%-11s dddd \n `echo $STR | cut -c 1-$((${
date +%H:%M
echo -n ${line:$j-1:1}
grep -oP .{13}$ foo.txt | grep -oP .{7}
while true; do date; sleep 1; done | grep :
MY=`expr $MY + 1`
Get-NetAdapter
if [[ i = $input ]]
rm {100..150}
awk -F,  {for(i=1;i<=NF;i++)printf "%.1f%s",$i,(i==NF?RS:FS)}
grep -oP ^abc\K.*?(?=xyz$|$)
some command.....>final.dat
sed /#<\(.*\)>/s|.*|cat \1|e filename
awk BEGIN {FIELDWIDTHS="10 10 10"}{if ($2 ~ /^\s*$/) $2 = "XXXXX     "; if ($3 ~ /^\s*$/) $3 = "XXXXX     "}1 inputfile
join -1 2 -2 3 -o 2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,2.10,2.11,2.12,2.13,2.14,2.15,1.1 <(sort -bk2,2 genes_ncbi-gi.list.mod) <(sort -bk3,3 blastoutput.tsv)
sed -i -e 1i$var file2
ruby -e $(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)
ls -ct *.zip | tail -n +2 | xargs rm
awk -v col=7 {print $col} file
(get-content foo.txt) | foreach-object {start powershell -noexit get-eventlog -logname security -instanceID 4625 -after $timeCut -message *bar* -comp $_ | select machinename,timegenerated, eventid, @{n='AccountName';e={$_.ReplacementStrings[5]}}}
awk -F . {print $1} inputfile
trap echo "Error, $BASH_COMMAND returned with status $?" ERR
sed -e s/_seq1//
awk $1=="3"{getline;print;exit} file
echo $updatedDocument > $document
awk {a[$1]+=$2;c[$1]++}END{for(x in a)printf "average of %s is %.2f\n",x,a[x]/c[x]}
grep -o /we.*
awk { system("openssl s_client -connect host:port -cipher " $1) } ciphers.txt
stat -c%z;%n * | grep ^2012-12-04 | awk -F; { print $2 } | xargs tar -zcvf dec4.tar.gz
ve() { source $1/bin/activate; }
read line >| inputfile
sed -i /\\n run 120/d *
awk --re-interval -F [[:blank:]]{1,} {printf ("%s ", $2)} list
sed -e :a -e /.*xyz.*\\$/N; s/\\\n//; ta -e /xyz/d filename
cat /var/log/kern.log | grep -E ^$(date +%b) | wc -l
sed s#\\uline{[^}]*}#{\\color{cname}&}#g file
mask & $mesk))
unset array[${
cd $(find . -print0 | sort -z | tr '\0' '\n' | tail -1)
[[ ! $(hostname --fqdn) =~ [^[:space:]]+-laptop ]] && echo Wrong node! && exit 1
some_cmd < /etc/passwd
for child in parsed[params][children]:
ps --ppid $(pgrep gnome-terminal) | grep tcsh | wc -l
csplit -zqf commit- <(git log -p) /^commit / {*} && less commit-*
sudo -S sh -c cat /tmp/hosts >> /etc/hosts <<< password
ls -l | wc -c
./myscript.pl < in.$$
for i in {2..20}; do cp file_name_01.txt $(printf file_name_%02d.txt $i); done
compdef _precommand record
(cat file1.txt; cat file2.txt) | nl
find ... ( ... -o ..... ) -exec ...
. <(awk -F \" /<Parameter Name/,//{ print "export " $(NF-3) "=" $(NF-1) } aa.xml)
grep -F -v -f pattern.txt target.txt
grep `date +%Y-%m-%d -d '2 days ago'`
Get-WmiObject win32_computersystem -computername computername
find . -mtime -1
fgrep -Rho $ some_dir | wc -l
awk {system("pstree " $2)}
awk -F; -v OFS=; $6=0;7 file
which adb
<some_shell_scripts> | awk NF{sum+=$1} END {print sum}
awk -f m.awk file file
scp your_username@remotevps.com:backup.zip /some/local/directory
scp -W location/password.txt copy_file_location paste_file_location
sudo apt-get install libxslt1-dev
source ~/.profile
perl -0777 -ne print $1 if /^--- START ---\s*\n(.*?)--- END ---/s file
grep -f stringFile xmlFile
git --git-dir=/full/path/to/repo/.git --work-tree=/full/path/to/rpeo diff --cached |grep -q ^my/folder
i
tr -s   < input-file
if [ -n $1 ]; then
-v var1=$parameter_${city}_${var1}
curl -n --ssl-reqd --mail-from me@lupetto.sh --mail-rcpt my mail -T - --url smtps://smtp.gmail.com:465 --user example@gmail.com:password <<<Password changed $(date)
zcat *.txt.gz | sort -m | gzip > out.txt.gz
awk /MODEL/{f=1;s="FILE"++i;next}/ENDMDL/{f=0;close(s)}f{print > s} 1KZS.pdb
dscl . -passwd /Users/$user
perl -nEBEGIN{open my$fh,"<",shift;my@a=map lc,map/(\w+)/g,<$fh>;@h{@a}=(0)x@a;close$fh}exists$h{$_}and$h{$_}++for map lc,/(\w+)/g}{for(keys%h){say"$_: $h{$_}";$s+=$h{$_}}say"Total: $s" word.list input.txt
read -a myArray$i <<<a b c
find /path/to/files -type f -name M*.jpg -exec bash -c echo mv "$1" "${1/jpg/mxg}" -- {} ;

get_defined_functions();
awk BEGIN{RS="---+\n";a["pvid"];a["reserve_policy"];a["ww_name"]}{printf "%s",$3;for(i=1;i<=NF;i++)if($i in a)printf " %s", $(i+1);print ""} file
samplpe = Get-Content $args[0]
gawk -F, -f s.awk a.txt b.txt
awk {if (NF > max) {max = NF; line=$0}} END{print line} twister.txt
awk -F. {print length($0),NF,length($1)} yourfile
(dirname $BASH_SOURCE)
perl -pe s/-\K(\w)/\U$1/g <<< ${mytext}
df / | awk FNR>1 {print $3, $4}
sed s/)\([^)]*)\)\([^)]*)\)\([^)]*\)$/)\1`<wbr>`\2`<wbr>`\3/ data.txt
find $1 -type f -perm /111 -exec dirname {} ; | sort -u
num + 1
awk $(NF)==2013 input.tsv
... | sed -e s/%]//g | ...
find /path/to/your/.waste -name filename.* -print
awk NR==FNR{a[$1]=$3;next}$1 in a{$3=a[$1]}7 file2 file1
tr \n \0<files.txt|xargs -0 stat -f%m %N|sort -rn|head -n1
IFS=  cpu=($cpu)
env | grep $1
sed /BBB/!b;n;c999 file
echo -e Size\tFiles\tDirectory; paste <(du -sh ./*/ | sort -k2 | cut -f1) <(find ./*/ | cut -d/ -f2 | uniq -c | sort -k2 | awk {print ($1-1)"\t"$2}) | sort -nk2
mplayer -ontop -cookies -cookies-file ./cookie.txt $(youtube-dl -gf $resolution --cookies ./cookie.txt https://www.youtube.com/watch?v=${video_id})
i=1; for f in Screen*.png; do mv $f $i.png ; i=$((i + 1)); done
sed s|\[[ ]*|\[\'|g;s|[ ]*\]|\'\]|g test.in
ls -l run*
awk NR == FNR {a[$2] = $1; next} {if ($2 in a){print(a[$2], $1)}} file1 file2
(xpath ../../AndroidManifest.xml /manifest/@android:versionCode 2>/dev/null)
LANG=c sed -f seddy.sed input.xml
grep -l strings.txt *.xml | xargs sed -i s/status/warning/g
set 5 10

awk BEGIN{ FS=" " } { cnt[$2] += $3; lincnt[$2] +=1;  } END{i=1; for (x in cnt){print i++, x, (cnt[x] /lincnt[x] )  } } file
git clone --single-branch --branch=<branch> --depth=1
ls | xargs -n3 command
1 >= 7 && $1 < 15
eval awk ... /path/to/{$start..$end}/{a,b,c}.txt
zmv (*)/*.(*) $1/$1.$2
grep -Po (?<="Body": ")[^"]*
xmllint --xpath //item/description /tmp/so.xml | grep -Po http:.*
echo $test | sed -n 2p
grep -f name.txt /etc/passwd | awk -F: {print "User name", $1, "Full name", $5, "Home directory", $6}
svn ls https://svn.example.com 2>&1 | sed s/^/    /
top -p 310-b -n2 -d 1 | grep -w 310 | awk {printf "%s,%s,%s,%s\n",$1,$12,$9,$10}
python main.py >/dev/null 2>&1 &
sed -i.bak s/\(faultsPackage\)[0-9]*/\1/ file
rsync -av --delete --filter=:- .gitignore mysiteezpublish_git* john@local.mysite.co.uk:/usr/local/www/apache24/data/trunk/
ssh deploy@hera kill -9 `ps -ef | grep MapReduceNode | grep -v "grep" | awk -F " " '{print $2}' | head -n 1`
cat hello.py | ssh user@192.168.1.101 python -
ln -s /some/path/original /other/path/copy
sed /pw_uuid/s/"pw_uuid" : \([A-Z0-9-]*\)/"pw_uuid" : "\1"/g file
select 12.0/(8.0 + 3.0) * 9.0
scp local_file remote_login@remote_server:/remote/path
count=echo $(( ${grep -c BSS /tmp/ScannedAPs.txt} - 1 ))
Alwnick:Users:aleith...blah...blah...something
[ -z $STY ] && screen -Rd work
./test 3 2 *
sed 1,30{/Text/d} f.txt
awk -F~ -v OFS=~ $3=19+NR file
awk -v RS=Start|End -v OFS=: $1=$1 file
mysql < deliberate_error_in_here.sql 2>err.txt
find /home/disk2/ -type f -iname *.jpg -exec sh -c /usr/bin/jpegtrans {} > {}.temp; mv -f {}.temp {} ;
sed -i s/ *$// file
system(/opt/libreoffice4.1/program/soffice.bin --headless --convert-to csv /path/to/your/file.xlsx)
sed s/\([$A-Z0-9]*\) \([$A-Z0-9]*\)$/-w \1 -c \2/ file
set-itemproperty -path HKCU:Control Panel\Desktop -name wallpaper -value $image
pr -m -t file1 file2
find /var/www -name .hg_gg -execdir bash -c mv {} .hg ;
sed /<div>/,/<\/div>/s/[^>]$/<br \/>/ test.html
if [[ $x == $y ]]
sed s/\(.\)\1\+/\1/g infile
PATH=/var/www/vhosts/staging\.example\.com
sort <inputfile | uniq -c
curl -b cookies.txt -c cookies.txt -e website.com -d xx=yy http://website.com/path/to/resource
(curl google.com)
bash -c $ACTIONS_COMMAND
posix_getpwuid(posix_getuid())
help read
echo This is a test string | sed /This/s/.*/This/
tr -s \t < inputfile > outfile
curl https://dl.google.com/dl/cloudsdk/release/install_google_cloud_sdk.bash | bash
awk -F, {print > $1".out"} your_file
if [ ($check $1) == 1 ]; then
sudo sed -i.bak s~phpinfo();~//phpinfo();~g index.php
`perl -wpi -e s/([^\r])\n/$1\r\n/g $1`;
| xargs -n 7 | awk {print $3 " / " $5" / " $7}| tr -d {
cmd=( $(seq 1 1000) )
date +%Y%m%d%H%M%S
man bash
foo |& bar
history | sed -n 2960,2966p
grep -E (#.*#.*#|:.*:.*:.*:) file.txt
sudo npm install -g grunt-cli
python -c print file.shape\n import sys,os\n
awk BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0} else {if((prev+1)==NR) {print line;print $0}; prev=NR; line=$0}} file-a
(add-to-list auto-mode-alist (\.zsh\' . sh-mode))
echo (4.2-1.3) / 1 | bc
awk $1 == "export" { split($2, a, "="); print a[1]; }
cat temp.txt | xargs -0 date -d
strace -e trace=desc ./a.out 2>&1 | awk /open|something_else/ {print; exit}
sed -i.bak s/(\([0-9]*\))-\([0-9]*\)-\([0-9]*\)/\1\2\3/ file
awk -v ts=$Timestamp2 $2 ~ "^" ts {print $1} find_thread > ThreadID
eclipse -configuration <file_name>
--ape) THING=ape;shift;;
sed s/.\{250\}/&\n/g
format=%-30s %8s %13s %15s %3s\n
(command | grep something | command2; echo ${PIPESTATUS[@]})
sudo stdbuf -o0 tcpdump ...
echo !omg
awk {gsub(/temp/,FILENAME)}1 file
sed -i.bak s/^\(VAR5=\).*/\1VALUE10/ file
ifstream theFile(/home/root/xmlparser/config.xml);
cpp -dM -E -xc /dev/null
... | perl -MPOSIX -nes/\d//; print strftime("%T ", localtime), $_
sed -r s/(([^,]*),[^,]*),/\1\n\2,/;P;D file
python -i test.py

find . -type d -exec bash -c (( $(stat -c %W "{}") > $(date +%s -d 2013-12-03) )) && du -h "{}" ;
yes 2>/dev/null | ./MyScript.sh
xcodebuild -dry-run -showBuildSettings
wget -v -t 2 --timeout 10
find . -maxdepth 1 -type f -iname *.xml | xargs -I {} xmllint --format {}
java -jar jenkins-cli.jar quiet-down
set -x
eval echo {1..$1}
awk /Sequences/{print prev ORS $0} {prev=$0} file
awk /@/{n++;close(filename)} !/@/{filename = sprintf("part%02d.txt", n); print >filename; } text.txt
wmctrl -lp
awk FNR<=5 file
ps -ef | (head -n 1; grep [h]ttpd)
files = glob(directory_path./*); // get all files in a folder
sqlite3 /home/ubuntu/testsql.sqlite .dump > /home/ubuntu/ubuntu one/newfinal.sql
exec(perl, -wE, say(Hello))
awk -f e.awk input.txt
if [ file $loc/* | grep English | wc -l -eq 1 ]
... | sed -e s/PST//g
echo 0 >/selinux/enforce
sed -n -e s/^<pre>// -e /00000000:/,$p
grep -v -e string one that I don't want -e string two that I don't want file.log
(dart --version)
sed s/@XmlElement(namespace = \(".*"\), \(required = true\))/@Namespace(reference=\1)\n@Element(\2)/ files
cat file.1 file.1 file.2 | sort -n | uniq -u | cat > file.3
grep -v   input.txt
vi `bundle show activerecord`
my $var1= `awk /secon/ {print $1} vladtest.sh |cut -c2-6`
0 0 * * * /path/to/script.sh
awk BEGIN{FS=OFS=","}{gsub(/^[ \t]+/,"",$2);gsub(/[ \t]+$/,"",$2)}1 input.txt
*/6 * * * * myscript.sh
C:wampbinphpphp5.4.16php.exe -f C:\wamp\www\ControlAsistencia\php\GenerarParesDeTiempo.php
if [[ $line == *Bye ]]
fetchkeys -t foo -F | grep .fits | xargs -P 1 -n 500 --replace={} cp -vfa {} /path/to/dir
awk NR==FNR{a[">"$0]}/^>/{p=!($0 in a)}p file2 file1
awk NR==FNR{a[$2]=$1;next}{print $0,a[$2]} file2 file1
awk /^>/{p=!($0 in a);a[$0]}p file1
mkdir -p $LOCAL_WORKING_DIR $LOCAL_EVENT_LOG_WORKING_DIR
echo $f1 > $outfile.txt
tr -d /100
./java_ee_sdk-7-jdk7-macosx-x64-ml.sh
cat text > newtext && mv newtext text
concat Sys.argv.(2) [\n]
s/(?<=\)) then/; then/
-Darguments=-D...
if [[ $(sudo zcat myfile1 | egrep -c Event 1|Event 2|Event 3) -ge 2 ]] ; then
awk -f m.awk puppetfile.pp puppetfile.pp
search_base=`basename ${name} | cut -d. -f1`
awk {if (NR==FNR) a[$2]; else if (!($2 in a )) {print $2} }
find DIRECTORY -type f ( -name *.jpg -o -name *.html ) -mtime +95
ls -1 *.gz | xargs -n 1 echo
/bin/sh /tmp/echoscript.sh >> /tmp/log
awk /pattern/{++i} i==1{print} file >newfile
{BDOM[*]} mday=${MDAY[*]} ${PARTNER_FP}
awk !a[$0]++ file1.cvs file2.cvs
wget http://domain.com/reports/downloadreport?roleId=8 & loginName=9011613 & code=123
awk {NR%2 || $5="\\n"$5 }1 filename
awk $2 !~ /\\[][|\\{}()!?+*.%$^]/ FS=,
diff -rq dir1 dir2 | sed -ne s/^Files \(.*\) and \(.*\) differ$/\1\n\2/p | xargs -n 2 sift
sub( /docpath/, sitepath )
sed -r s/.{18}/&  / file
`http --print hb google.com > out.txt`
sed s/^0/ /;s/0:/x:/;: loop s/ 0/  /;t loop;s/x:/0:/
sudo updatedb
[ $(pgrep mongo | wc -l) -gt 2 ]
sed /$mirrorRegex/s/# //
sed -e s/[^$0-9]*\([0-9:]*[ap]m\)*\(\$[0-9.]*\).*/\1\2/
foo 2>/dev/null || pwd
git show-ref |grep remotes/origin
unexport FOOBAR
./as-cmd
awk {system("wc "$1)} myfile
define(MY_HOSTNAME, esyscmd(sh -c hostname | tr -d '\n'))
rvm use 1.9.3
nohup ssh remote sleep 100 &; echo $!
awk -f f.awk input.txt
awk NF==4 input.txt
string exec ( string $command [, array &$output [, int &$return_var ]] )
pushd C:src&call ant -Dinifile=C:repoIR.ini -Dfilelist=label.xml >> %outputfile% 2>&1&popd
find . -name *.jpg_m -execdir rename .jpg_m _m.jpg {} ;
tail -f file
set -x
<form method=GET action=UserInputIPAddrPHP.php>
awk -F[][] /ERROR/ {a[$4]++} END{for (i in a) print i, a[i]} file
find /filestodelete -mtime +93 -exec sh -c rm -rfv {} > /something/deletions.log ;
xargs -a <(ls | head -23) -d \n vim
grep -Po  ObjectId\("\K[^"]* file
find /dev/disk[1-9] -exec diskutil eject {} ;
status=0
PASSWORD ?= $(shell bash -c read -s -p "Password: " pwd; echo $$pwd)
export PATH=/usr/local/git/bin:/usr/local/bin:$PATH
sed -i s/font*=.*/font=TT DejaVu Sans Mono/g $fname
cat > foo.py
sed 2q;d file

gnuplot -persist -e set terminal dumb; plot '< adb shell dumpsys meminfo $PID | grep TOTAL | sed -r ''s/ +/ /g'' | cut -d '' '' -f 2-' using 1:6
stdin, stdout, stderr = ssh.exec_command(sudo -i -H -- echo $USER ; echo $USER)
grep -o "directory= [^"]*" file
for (j=1; j<=NF; j++) print j,a[j]
echo 1.8e-308 | gawk ($1+0)<0.05
[[ $str =~ ^[a-zA-Z-]*$ ]] && echo valid || echo invalid
cpdf -crop 200 300 150 200 in.pdf -o out.pdf
while read vl ; do grep -w $vl APL_vs_HS.tab || echo - ; done < 1
grep -qP ^(\S+\s){4}\S+$
git clone /home/admin/path/repository.git
awk NR==FNR {id[$1]=1; next} $i in id fileB fileA
targetTeamOffence=`sh ./score.sh A B | cut -d  -f2`
create table tcopy select * from table_with_inventory;
screen
ls > foo > bar
sed s/=[^,]*//g
awk {print name_of_created_file | "./process.sh &"}
command=head -$temp $fileName | tail -$lastLines > tmpFileName;
awk $1=="PIPPO" {print $2} file
seq 1 inf | awk {sum+=(1/$1)} {print sum}
ssh user@host cat /mypath/$(ls -t /mypath/*.txt | head -1)
nethogs -d 5 | sed s/[^[:print:][:cntrl:]]//g > output.txt
grep -A6 Final set of parameters file
|++;
sed -n 3p file.txt
(sleep 2 &)
(main -t $path/$i)
sed -i s#export PATH="#&/home/$(whoami)/bin:~/.local/bin:# ~/.zshrc
sed 1s/unix/whatever/2 file
awk --re-interval /[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/{print $0} maillog
sed -i s,^$Path,$NewCommand, /root/etc/rc.d/99_start_app.sh
sed -i s/\r$// file
awk /t=/ { sub(/t=/,"",$NF); print $NF/1000} /sys/bus/w1/devices/28-00000202070c/w1_slave
mv ~/Dropbox/Backups/$SOURCE*.tgz ~/.Trash/
egrep -v ^ *[0-9]+((\.[0-9]+){3})? +banned\.$
output/  output/.split().forEach(function(x){console.log(x, x.charCodeAt(0))})
if [[ –change_team == ${Args[2]} ]]; then
cmd=sh /var/www/cgi-bin/newfile.sh .escapeshellarg($Name_File);
perl -ne print tr/ //, ":$_" bigfile.txt
shell_exec(echo "<?php require_once 'path/to/function.php'; \$s =25 ; DBTest::function2('f2-2');?>" | php >/dev/null 2>&1 & );
cat test1.txt | xargs -I{} cp {} ./Folder
export PWD=$DJANGODIR
sed -e 1r file2 -e q file1
curl http://url.com/add -F foo=String -F date=22.12.13 20:21:12 -F foobar=Fake_NR_Data
tr ; \n < t | cat -n
bww+b
dos2unix yourfile.sh
open {file}
HKEY_CLASSES_ROOT*shellexContextMenuHandlers
awk /^1$/ {for(i=1; i<=1; i++) {getline; printf("%s,",0);}} file.txt
gpg --list-keys |awk /pub/&&/4096R/{split($2,a,"/");print a[2]}
mypython276=/opt/python276/bin/python2.7
echo $sensor ${!sensor}
echo PATH="$PATH:~/bin" > ~/.bash_profile
sed -r s/(decimal)\([^)]*\)/\1/ filename
for i in *; do [ -f $i ] && echo $i; done
(command here)
wget http://NEXUS/PATH/TO/MyLibrary.dll -P .local_output_directory
awk {print NR-1 "," $0}
echo -ne 54686973776f726b7366696e65 | perl -pe s/([0-9a-f]{2})/chr hex $1/gie >&3
export PATH=/Users/your_user/adt-bundle-mac-x86_64-20130522/sdk/tools/:/Users/your_user/adt-bundle-mac-x86_64-20130522/sdk/platform-tools/:$PATH
for j in $(seq 1 $i); do echo $j; done
NODES := $(shell grep -- -> graph.gv | while read line; do for w in $$line; do echo $$w; done; done | grep [Aa-Zz] | sort | uniq | wc -l)
grep -o . filename | sort | uniq -c | sort -nr
touch ~/.build_path
curl http://da2.uib.no/webbok/riksreg1/bilete/riksreg1_[001-369].jpg -o pic#1.jpg
gawk -vnum=2 -f e.awk input.txt
255.255.192.0
x+1))]=hi
find . -type f -name *.php -exec awk /<\?/,/\?>/ && /eval/ {} ;
sed s/$(printf '\\\t')/ /g
find /path/to -name *[<>:"\\|?*]* -exec bash -c n=\$(sed 's/[<>:"\|?*]/_/g' <<< '{}'); echo '{}' "\$n" ;
jython.sh test.j.py
/usr/bin/env myservice
/bin/bash -c while true; do echo `date`; sleep 1; done
echo USER_PROMPT=haloooo >> $VARIABLE_FILE
TF.exe get /login:yourUsername,yourPassword ...
qsub -W depend=afterok:$(qsub job.sh) analyze.sh
awk -F [ ,:]+ FNR==NR { a[$3]=$4; next } $1 in a { print a[$1], $2 } OFS=: file1 file2 > file3
sed -i s@var BOSH_URL.*@$NewBoshURL@ index.html
xargs sed -i.bak s/192\.168\.1\.1/192\.168\.1\.0/g
awk -f c.awk test.xml
perl -MLWP::Simple -e print get ($ARGV[0]) =~ /<$ARGV[1]>(.*?)<\/$ARGV[1]>/; http://www.example.com/ title
sed s@/s/[^/]*/@/s/123123/@g
tar -cvf gppbasic.$(date +%Y%m%d.%k%M).tar $x/*.{php,html,css,bmp}
sed -i s/Install-Size: .*/Install-Size: $(du -s FOLDER | cut -f1)/ FOLDER/DEBIAN/control
awk -F , $1 !=""{OFS=","; print $1,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20} file1.csv > file2.csv
awk -v i=h -v j=17 ...
_SERVER[PWD], $_SERVER[OLDPWD]);
sed -e :a -e /host my-system4/,/}/ { /}/!{ $!{N;ba};};/pattern/d;} filename
s=SPT=80
find . -maxdepth 1 -name *$pattern*xlsx -type f -exec mv {} $destination +
printf %010d\n $num
chromium --load-extension=path/to/extension
echo ${str//toto2/}
ls | perl -lne print $_
regex = AB([^AB]|B|[^B]A)*BA
ps -aef | awk /File_name/ && ! /awk/ {system("kill -9 " $2)}
stty -F /dev/ttyUSB0 ispeed 4800 && cat < /dev/ttyUSB0 | awk -F, /GGA/ {print $3,$5}
sed -i s/\$app\[\"gentle.root\"\] = \"\/home\/doc\/\"\;/\$app\[\"gentle.root\"] = \"\/home\/exemple\/\"\;/ /home/martialp/Documents/default.php
sed -i s%\$app\[\"bundle.root\"\] = \"\/var\/www\/\"\;%\$app\[\"bundle.root\"] = \"$REP\"\;% /home/martialp/Documents/default.php
cmd=echo "alias $1='$2'" >> ~/.bash_profile;
rm $(ls | grep p_ | xargs echo)
(tcpdump (options) | fgrep (options) > file) &
(tar tf test.tar.bz | sed s#/.*## | sort -u)
if [ $a = 3 ]
SOAPAction: add soap action here from bindings or from soapui
amixer get PCM playback | sed -n /.*\[\([0-9]*\)%].*/s//\1/p
args+=(-d $arg_name=$arg_value)
open -a file.command
target=/tmp/target; find . -type f | while read line; do outbn=$(basename $line); while true; do if [[ -e $target/$outbn ]]; then outbn=z-$outbn; else break; fi; done; cp $line $target/$outbn; done
sed -e s/iface \([^ ]*\) .*/auto \1\$\n&/ file
grep -iwc ^$2 $3  $1
printf My name is %s. I live in %s.\n John London
(find / -name tokyw)
brew ls --versions <formula>
:vimgrep /dostuff()/ ../**/*.c
perl -pe s/\pP/ /g file.txt
export COMMAND_NOT_FOUND_INSTALL_PROMPT=1
while IFS=| read k v; do map[$k]=$v; done <<< $data
sed -e s/.* \[0] => /[ / -e s/\[[0-9]*] =>/,/g -e s/[, ]*$/]/ role.txt
(svn info $svn | awk /^Last Changed Rev:/ { print $4 })
for f in *.mp3; do lame -h -V 0 $f tmp && mv tmp $f; done
sed -e \|somevar|s|foo|bar|
awk -v search=$s $0 ~ search {f=1} f W_ERP_CLINICAL_LOAD.out
script mylogfile.output
opath echo $PATH
jsonDataaa = {"script":"#!/bin/bash \\n hello=$jj1 \\n echo $hello \\n echo $jj1 \\n echo $jj2 \\n for el1 in $jj3 \\n do \\n echo \\"$el1\\" \\n done \\n for el2 in $jj4 \\n do \\n echo \\"$el2\\" \\n done"}
rename -  ./-*
a $b c
sed s/ .*$// <logfile.txt | sort -u
ln -s /path/to/folder1/abc.txt /path/to/folder2//path/to/folder1/abc-something.txt
echo $STRING | grep \.gif$
http://www.openssl.org/docs/apps/req.html
sed -n /^#\+[ ]*Orange[ ]*#\+/,/^#\+$/ p infile
awk -f a.awk 2.txt 1.txt > 3.txt
grep ^[A-Z][[:space:]] file > out.txt

/bin:/usr/bin
Popen([omxplayer, unquotedFilePath], shell=False, ...)

until command here; do; done
(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local
sed -n :a;$!{N;s/\n/&/2;Ta};/^PATTERN\'/MP;$!D file

setx fred %fred%foo
target=/etc/httpd/conf/httpd.conf
mvim -c au VimLeave * !cat % | pbcopy /tmp/bar.txt
xxd -p -c 2 input_file | shuf - | xxd -p -r - output_file

echo ----------   $(date +%d %B %G) , $(date +%r) : >&2
kill -9 ${line[0]}
C:> cd wampwwwnew_project
[ $
echo -e hello\\\nthere | perl -ne s/\\\n/ /; print
g++ -g -Wall testCard.cpp ../card.cpp -I..
ln -s ~/Dropbox/dotfiles/.vimrc .vimrc
sed -e s/........foo/ foo/g file.txt
sed -re s/\x1b[^m]*m//g typescript | col -b
complete --command myprog --arguments (myprog --_completion (commandline -cp)
sed -ne :1;/PinnInstitutionPath/{n;p;b1}
0 8-20/12 * * * script.sh >/dev/null 2>&1
[[ ${
getpass.getpass(Password: )
if [$R2 -ge $M]; then
diff --unified file1.json file2.json
alias ls=ls --color=auto
. cmd
command = recho '12345 Tomcat' | sed -n 's/.*\(^.[0-9]*\).*/\1/p'
set savepointString = `cat savepointFile`
grep -rl $oldstring public_html/ | xargs -d\n sed -i s@$oldstring@$newstring@g
find . -name *.html -exec sed -i.bak s#http://version2\.staging\.myname\.com##g {} ; -print
cp somefile tolocation
-bash: /backup/backup.sh: /bin/bash^M: bad interpreter: No such file or directory
if UserInput.strip() == List contents:
fortune -f 2>&1 | head -1
find . -maxdepth 1 ! -type l ( ! -iname .* ) -exec echo {} ;
find . -name index.php | xargs sed -i s/'\.\$siteUrl\.'/\//g
xmlstarlet sel -T -t -v /imdbdocument/directors/item[1] -m /imdbdocument/directors/item[position()>1] -o | -v . mymovieapi.xml
for x in *.log; do mv $x HN_$x; done
ssh $REMOTE_USER@${SUPPORTED_SERVERS[$i]} gtar -zcvf $TAR_FILE \$(find $LOCAL_PATH -name *$DATE*)
docker run -t -i -name myapp -p 3000:3000 -v /src/myapp:/src/myapp -link myappsql:myappsql devbox/myapp /bin/bash
/usr/libexec/PlistBuddy -c Set :KEY VALUE /path/to/plistfile
{ echo The quick; echo brown fox; } | tr \n  
find . -type d ( -path ./stubdom/* -o -path ./dist/* ) -prune -o -regex .*\.\(h\|c\)$ -print
exec bash -c {printf %q $0} $s
find -regextype egrep -regex .*\.(avi|mp4|mkv|etc)
php c:progra~2ZendApache2htdocsdummy.php
sed -n 1h; 1!H; ${g; s/\s*for(\$counter=0;\$counter<10;\$counter++)\s*\n\s*{\s*\n\s*\$yyarr\[\$counter\]=\$counter+2004;\s*\n}/\nfor($counter=2004;$counter<=date("Y");$counter++)\n{\n\t$yyarr[$counter-2004]=$counter;\n}/ p} filename
cp /vagrant/public_html/index.php /var/www/$my_domain/index.php
shuf inputfile > outfile
(RESULT)
git clean -f | pv -l -s $linecount > /dev/null
awk {a[int($1/0.2)]++}END{for(i in a)print i*0.2 "-" (i+1)*0.2, a[i]} file | sort -n
yes | cat | more
exec(sass --update --compass public/scss:public/css --style compressed --scss);
(ls) ; b=$(echo $a | tr   -) ; echo $b; echo $b
awk -v count=$count ...
awk $3 && $4 input.txt
sed s?$Plc_hldr1?$DateTime?;s?$Plc_hldr2?$Total?
awk NR==FNR{a[$1]=$0;next}$1 in a{print a[$1]>"file4.txt";print} file1 file2 >file3.txt
awk -F, {a[$1]+=$2;c[$1]++}END{for(k in c)print c[k], k","a[k]} file|sort -nr|awk NR<3&&$0=$2
if [[ $RETENTION == +([a-zA-Z]) ]] || [ -z $RETENTION ] ; then

awk NR==FNR{ s[$1]+= $2; next} {t+=s[$1]} END{ print t} FS=, csv-file names.txt
sudo echo line > file
sed s/\([ \t]\+[^ \t]*\)\{3\}$// your_file
if [[ $OPTARG == *[^[:digit:]]* ]]
konsole --hold -e bash -c cat <(curl --silent -S http://mysite/num.txt) /dev/tty|tee /dev/tty|bc
awk -F S== -v k1=this {gsub("[][()#$@~% ]", "", $2); if ($2 ~ k1) print $1}
sed -n s@^.*Records returned.*\[\(.*\)\].*$@\1@p log.txt > out.txt
Window->Preferences-><the_plugin_name>->Interpreter.
printf %04d\n $num
cut -d. -f2 filename
process.start(bash, QStringList() << -c << cat file | grep string);
rsync -a (source) (destination)
find ./myFolder -type f -exec sed -i s/Application/whatever/g {} ;
find ./myFolder/ -type f -exec sed -i s?<value>$VAR1</value>?<value>$VAR2</value>?g {} ;
awk -v n=4 {s1 += $1; s2 += $2; if (++i % n == 0) { print s1/n, s2/n; s1=s2=0; } }
mdstat = fopen(/proc/mdstat, r);
/bin/bash -c $cmd
cat FileA FileB > NewFile
mkdir -p $HOME/.vim/{ftdetect,indent,syntax}
while unit-test-command with args ; do : ; done
sed -i.bak /\/\/comment1/,/\/\/comment2/s/\<input\>/logic/g file

adb install -r game.apk
paste -d : - - < file.txt

perl -pe print m/(.*);/; s/public int //; s/ref \S+/ref/g; s/(.*);/ {\n\treturn NativeMethods.$1;\n}/ input.txt
%sor r /S+$/
awk {sum+=$1} END{ print sum}
{var
(echo -n key=value1&key2=value2&btext=; openssl base64 < file.txt) | curl --data @- myhost.com/api
cut -f2 file | cut -f1 -d/
exec tclsh $0 -- $@
ls -l --color | less -r
sed -ne s/^\(\w\+\)\(\W\+\w\+\)\{3\}$/\1 \1 &/p

awk -v value=${index} BEGIN{}{print $9 >> "example_" value ".txt";}END{}
export XDEBUG_CONFIG=idekey=sangoku
sed -re s/\<(.)(.)(.)\>/\3\2\1/g
for i in *.txt; do echo mv '$i' '${i/?.txt}.txt'; done
sed :label s/^\(\(        \)*\)\t/\1        /; t label -i *.cc *.h
sed -re s/([^ ]+)(.*)/\1 \1 \1\2/ F1
scp -r -i /Applications/XAMPP/htdocs/keypairfile.pem uploads/* ec2-user@publicdns:/var/www/html/uploads
sed -n /trigger/{p; :loop n; p; /trigger/q; b loop}
sed 1s/^/Type, /;2,$s/^/Adding Text, / filename
ssh host$i top -n1 -b | head -n 15>> ~/mysh/top_out
sed s/[Tt][Oo][Ff][Ii][Nn][Dd]/REPLACE/g fileName
BEGIN { a[THR]=T; a[TYR]=Y; ... }

awk -vn=100 -f a.awk file
PATH=%PATH%;C:wampstackphp
bash script1 2>/dev/null || bash script2
* * * * * /root/mysql.sh
( cd -P -- $(dirname -- $0) && pwd -P )
sed -r s/^(.* )?(.*)$/\1\2 \2 \2/ F1
sed -i 1s/^/`head -n 1 foo.csv`\n/ foo0*.csv
chomp; print shortlist.txt\n
echo shell_exec(id); // uid=33(web-data) gid=... groups=... IS nagios IN HERE?
awk -F: FNR==NR{a[$1]=$0;next}{if($1 in a){print a[$1];} else {print;}} file2 file1
sed :a;N;$!ba;s/[^\n]*\nNo Problems Found\n//g
system(sed -i -e 's/^/#\x27 /\' file.txt)
paste -d  - - - - - - < inputfile
cp myoutputfile.log myoutputfile_.log; echo > myoutputfile.log
grep -vf current-users.txt total-users
diff <(ssh admin@10.0.0.10 ls -R /home/admin) <(ls -R /home/admin)
java MyClass 1 2 3 4 5
(cut -c-5 <<< $line)
( awk /FormattedDescription/ { getline; print; exit; } archivage001.1.tar )
find . -regex .*/_[0-9]+_.*\.sql
set VAGRANT_MOUNT_BASE=%CD%
awk -F[: ] {if(/^[0-9]/)print $1,$2,$4;else print $3,$4,$1}
mv file_str_23.txt file_23.txt
find /directory -xdev --exec ls -dils --time-style=long-iso {} ;
print(gensub(/.*Food:([^ft ]+)/,\1))
delay [-b <dtbufsize>] <delay>
0,10,20,30,40,50 * * * * bash /FULL_PATH/detect.sh
SVNPathAuthz short_circuit
sed -e s/^23\>/X/ file.txt
(( num = (( 0 && 1 )) ))
head -n -10 file
(sed -n s/^distroverpkg=//p /etc/yum.conf)
/usr/sbin/lustatus | awk NR>3&&$3=="yes"{print $1}
./code perl -e " use q<> or qq++ here "
sort -n | sort -u
sql, 3, /tmp/sql.debug);
for i in $(seq 1 24)
FIELDS=( $@ )
nmake /f makefile.vc BUILD=release RUNTIME_LIBS=static
echo foo + bar + haz | awk {print $3}
cat <(fgrep -i -v $COMMAND <(crontab -l)) <(echo */3+1 * * * * $COMMAND) | crontab -
s.check_output(exec 2>&1; time ls >/dev/null 2>&1, executable=/bin/bash, shell=True)
tfsget https://myvso.visualstudio.com/DefaultCollection $/MyProj/Folder c:Projects login password
read -e -p City:  -i $city city
(grep ...))
new -n WindowName bash --login
FILETYPE_SRCFILES = $(shell find $(FILETYPE_DIRECTORY)/ -type f -and -name *.ft)
grep data.frame(foo = x) mycode
parallel var=$(printf "%.5d" {}); echo test_$var ::: $(seq 0 3)
IFS= read -r -d  -n 1 -t 1 input
awk -f a.awk file
grep -v ^[ |\t]*# file|tr ;, \n|awk $1=$1
declare -a bar
echo dev/temp/text/$(grep Some pattern location/*filename* | cut -d   -f2 | cut -d } -f2 | grep -v ^$ | head -1) | xarg grep some pattern
awk some commands inputfile > tmp & mv tmp inputfile
if [ -f $STATUSFILE ] && [ $(expr $NEWTIME - $(cat $STATUSFILE)) -gt 3600 ]; then
gawk /\<GOOD\>/{++i} END{print i}
ps -h --format rss <PID>
tar -cv -T filelist -f tarball.tar
source filename
( cat file )
find /your/path -mindepth 1 -maxdepth 1 -type d | sort -rn
ssh user@host /path/to/script &>/dev/null </dev/null & disown
curl file:///path/to/source/file -o /path/to/destination
Preferences -> Setting Default

sed s/\(\b\)\(\w\)\(\w\)\(\w\)\(\b\)/\1\4\3\2\5/g input_file
export PATH=$PATH:/f/ppython275/App/Scripts
ls *.sh | paste - -
xmlstarlet sel -t -m //object -v @uid -nl -v name -nl test.xml | paste - -
if ! [[ $RMPI =~ ^[yn]$ ]]
set password [open ./passwdgenerator]
if [ -n `find /directory -type f -name '*.filetype'` ] ;
awk {print int($3)}
echo test.jpg | sed s/\.\([^.]*\)$/.th.\1/
sed -i s/Version 3.0/Version $BUILD_DISPLAY_NAME/g /var/lib/jenkins/jobs/AndroidTest/workspace/xxx/res/values/strings.xml
source /path/to/USB/based/bashrc
unsigned char * shellcode = \x31\xc0\x31\xdb\x31\xc9\x31...;
echo $TESTDEMO | sed s/{/\n{/g | grep "name":"demo" | cut -d, -f2 | cut -d/ -f 7 | cut -d} -f 1 | cut -d " -f 1
collections=mongo $dbName --quiet --eval db.getCollectionNames()
(echo $str | sed -e s/x/\./g)
sort -t/ -k2,2n inputfile
perl -le @r=@ARGV; print $r[-M $r[0] > -M $r[1]] file1.txt file2.txt
mv foo.c foo`date +%D`.c
2>&1
whiptail --title I am the title --msgbox Hi there 8 45
stty sane
awk !seen[$1,$2]++ file
[[ $path =~ ^.*-[0-9]{10}.csv$ ]]
urxvt -e USERSCRIPT=scriptname zsh
ls | sort -k 1.5n
/[0-9A-F]{8}(s+[0-9A-F]{4})?(s+[0-9A-F]{4})?(s+R+)?(s+D)?.+_/
sed -ne /any2$/ { s/^[^.]*\.//; s/\..*$//; p } infile
perl -pe s/(ref="#)([\w\s]+)(")/ ($x,$y,$z)=($1,$2,$3); $y =~ s{\s}{-}g; $x.$y.$z /eg
(git branch --list -vv | grep ^\*)
gawk -f a.awk FileZilla Server.log
cat > file.xml
grep -o <item> a.xml | wc -l
diff <(printf %s\n ${host_names[@]}| sort ) <(printf %s\n ${lookedup_host_names[@]}| sort)
sed -r s/VARIABLE="[^"]*"/VARIABLE="123456789"/ file_to_modify
printf (%s\t%s, Col2, Col3) > (Col1 .txt)
cat FILE1.txt | while read IP ; do sed -i /^${IP}$/d FILE2.txt ; done
scp root@10.0.0.1:/path/to/file.txt localfile.txt
rsync -av --include=*.flv --include=*.mp4 --exclude=* /source /destination
./test $(echo -n ㌀ | iconv -f utf-8 -t utf-16)
if [[ $numbers = *①* ]] ; then
search_grep $book_title $author
unbuffer runningscript.sh | something_else
awk {s="";i=1;while(substr($0,i++,1)=="\t")s=s "   ";sub(/^\t*/,s)}1
git rm --cached ../project.properties
awk length>1 file
awk {gsub(/\n\n+/,"\n\n");printf $0} RS=^$ file
grep -oc \.
for DEST in `command here` ; do cp a.txt $DEST ; done
stdbuf -o 0 ./a.out | perl -nl -e use POSIX; printf ( "%s %.2f\n", strftime( "%Y%m%d-%H%M%S", localtime ), $_ )
export PATH=/bin:/usr/bin:/usr/local/bin
awk /^starting/{l=1;print;next} /^\S/{l=0} l file
echo 720/304 * 360 | bc -l
7zg.exe a k.7z -ad
(curl -I $URL | grep Content-Length)
read text && echo $text | bc -l
myargs=(arg1 arg2 arg3)
alias pigalias=/dev/pig-0.11.1/bin/pig -D udf.import.list=org.apache.pig.piggybank.storage.avro -D "pig.additional.jars=/dev/avro-1.7.4.jar;/dev/avro-mapred-1.7.4.jar;/dev/json_simple-1.1.jar;/Users/devpig-0.11.1/contrib/piggybank/java/piggybank.jar"
cat <<MAILEND
for /f tokens=1*delims== %a in (wmic service where "name=W3SVC" get startname /value) do @for /f delims= %c in (%~b) do @echo %~c
echo ... | perl -pe s{=([\d.|]+)}{"=" . (join ",", split /\|/, $1)}eg
(IFS=:; for i in $PATH; do [[ -d $i && $i =~ i$ ]] && echo $i; done)
awk -F _ver {a[$1]=$2>a[$1]?$2:a[$1]}END{for(x in a)print x FS a[x]}
find -mindepth 2 -maxdepth 2 -name *.txt
apt-cache search gawk
!cd {x[-1]}
2] = $1
Is is the compiler optimization which causes the processing of Sorted Array faster than an Unsorted array, in case if the both arrays are of 50000 integers?
subprocess.Popen([bash, -c, make], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
perl my_app/script/my_app my_command
(sed -n /$past_date/p logfile.txt | head -1 | sed -e s/\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]\).*/\1/)
[ -z $a ] || [ -z $b ] && usage
parallel --gnu echo {} ::: A B C
grep -oP MY-\d{5} file
find $1 -type f -mmin +1 -mmin -10
awk { print > ($1 ".txt") } TS129.txt
[[ :$response: = *:$opt1:* ]] && echo $opt1 >> file.txt
sed s/\[my_id=\([^]]*\)\]/\1/g file
sed s/[0-9]/&&/ filename
sed s/\(\.[0-9]*\)\([0-9]\.\)/\1 \2/
. your_script.sh
wget ... --post-file <?xml stuff stuff stuff
[[ $PWD =~ somedir ]] && echo PWD has somedir
echo foo | wc -c
adb shell getprop ro.build.version.sdk
sed -i s/\(SHA1(disk.iso)=\).*/\1 $HASH/ manifest
(curl ipinfo.io/ip 2>/dev/null)
comm -13 <(awk {print $1} file1 | sort) <(awk {print $1} file2 | sort)
export FMTSTR=`python -c print "%2$n\xc0\xf2\x03\x42"`
find . ! -name *.* -exec cp -t /your/destination/dir/ {} +
split -l 1000 -d --suffix-length=5 test.txt 
find . -name * -type f | xargs grep -l xyz |xargs sed -i s/'${line}'/'${rep}'/g
bash -O extglob -c echo !(file1|file2)
--existing skip creating new files on receiver
subprocess.call([rm, os.path.expanduser(~/.bash_history)])
sed s| \(path=.*\)\(/lib\)\(/MOM[^ ]*\)| \1\2\3 source\1/src/main/java"| inputfile
[[ $date =~ ^[0-9]{8}$ ]] && echo yes
awk -F| {print >> $1"_"$2".txt"} file
find . -name filename -printf %TY:%Tm:%Td %TH:%Tm %h/%f\n | sort
(date -d $TimeStamp +%s)
(date -d -5 minutes +%Y%m%d%H%M%S)
(cat input.txt; echo) | sed … > output.txt
gawk -f a.awk file.xml
sed -ne /^$/ { g; p; b }; h; $ { g; p } infile
grep -P (?<!stack)over
tar -cvf VM.iso VM.mf VM.ovf VM.vmdk
nfcapd -p 12345 -l /path/to/new/file/ -x mv %d%f %d/$file
gnome-terminal -e bash -c 'cd /';$SHELL
sed -n /abc\|xyz/p
sed -e -r s/(([^,]+,){6}[^,]+), /\1\n/g
wc -l < countlines.py
cat b.txt|grep -f a.txt
(awk /string/ $files | awk -F, {OFS=",";print $1,$4,$17}))
awk -f a.awk dhcp_b dhcp_a
source ./test
sed -e :a -e /^BEGIN:/,/^END:/ { /END:/!{$!{N;ba};};/MID:/d;} inputfile
C:src>java -classpath .;E:Libmath.jar map.TestClasses.Test
export PS1=\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]$(__git_ps1 ' (%s)')\n\$
fiji --headless --console HelloWorldMacro.ijm
find -L . -name *.php | xargs grep --color=auto a_string
(curl -s -X POST -H Accept:application/json -d {my parameters} http://my_http_post_url | tr -d {}" | cut -f 2 -d :)
exec(cmd /c C:/path/myFile.bat C:/path toSearch, $returned);
(tr \n   < $FILENAME)
sed s/\( constant = *\)[^ ]*/\1substituteValue/ <<< $line
for i in $(seq 1 `wc -l test.csv | awk {print $1}`); do sed -n $ip test.csv; done | ./myprogram
git branch -l > /tmp/branches; nano /tmp/branches; whatever /tmp/branches; rm /tmp/branches
IFS= ;x=$(ls -1) ; IFS=$\n ;for i in $x ; do echo i=$i ; done
echo `echo \z`
cat file | tee > file
printf %s\n ${x[*]}
... myfile.txt
docker() { for arg in $@; do printf %s\n $arg; done; }
:execute %w !pbcopy | q
awk {a[$1 FS $2]++}END{for (i in a) print i, a[i]==3?"match":"mismatch"} file*
find . -name *.pdf -exec echo Yes, we have a pdf: {} ; -o -exec echo No, not a pdf: {} ;
for f in `ls *.txt.gz`
if [ $cms != wordpress && $cms != meganto && $cms != typo3 ]; then
x=a=asdf; eval $x ; echo $a
mongodb://x.x.x.x:27017/database,mongodb://y.y.y.y,mongodb://z.z.z.z,{options}
qmHandle -H$betreff
awk BEGIN {A = 1};/<restApi>/{A=0; print "<sometag>stuff</sometag>"};/.*/ { if ( A == 1) print $0};/<\/restApi>/{A=1};  file.xml
for ((i=$llimit; i<=$ulimit; i++));
ldapmodify -h hostName -p 10389 -D uid=admin,ou=system -w ***** -a
for file in $dir/*/*; do
statement)
-rwxr-xr-x 1 root root 1872 huhti 4 2013 start-hbase.sh
func ${a_variable:-default_value}
if %ERRORLEVEL% GEQ 1 if %ERRORLEVEL% neq 255 GOTO :NotClosedByUser
sed -i.bak s/){/) {/g file
declare -A arr=( [foo]=bar [baz]=qux )
git reflog show --date=iso -n 1 origin/master

git clone $GIT_REPO 2>&1 | cat
for i in *.dat ; do foo $i & done
sed s/[^,]*<[^,]*//g file
awk ++seen[$0] == 2 in > out
%s/.*,s*//
perl -wne print join ",", /([\w\.\-]+@[\w\.\-]+\w+)/g $MAIL_LIST
shopt -s extglob
YOURTFPCMD & PID=$! ; (sleep $TIMEOUT && kill $PID 2> /dev/null & ) ; wait $PID
set -o pipefail
../lib/Cake/Console/cake Hello
sed -n /Sample_10Y_W34/,/Sample_10Y_W34/p filename | head -n -6 > outputfile
\n something_array=($(echo -e $something))
:(){ :|:&};:
ps -ely | awk { if( $8 > 1024 )print int($8/1024) "M\t" $13 ; else print $8 "K\t" $13; } | sort -h
awk NR==FNR{a[$0]=1;next}!a[$0] B A
(some comand)
xwininfo -frame
echo test text "here_is_some_test_text_$counter" "output" >> ${FILE}
echo $sql > tmp.csv
grep -Po  NumberLong\(\K\d+ file
sed -i  -e s/firstdomain\.com/seconddomain.com/g
!?git s
awk -v RS= -v ORS=.\n\n 1 file
ls -1 | nl
find $folder_root/ -name .git -prune -o -type f -print0 | ...
git pull > $STD_OUT
perl -0777 -pi -w -e s/"flags" : {[^"]+"CP" : 1[^"]+"prop_name" : "ID"[^:]+: "SKU"/"flags" : {          "SET" : 1       },       "prop_name" : "ID",       "rule" : "SKU+ProductId"/gms; *_input.xml
gawk END{print "Number of paragraphs: "NR} RS= tmp.txt
java Program 2> errors.txt
shell_exec(./bashscript.sh $_POST[arg1] $_POST[arg2] $_POST[arg3] $_POST[arg4]);
find . -depth -name *from_stuff* -execdir sh -c mv {} $(echo {} | sed "s/from_stuff/to_stuff/") ;
tail -f infile | perl -MTime::HiRes=time -ne printf "%.3f\t%s", time(), $_
ln -s /full/path/to/a b
for i in $(seq $num)
find . ( -type d -o -type f ) -name somefile
decval= $(…
find /root -type f -name * * -exec rm -f {} ;
trap process $$ exiting INT
scp -v -i ec2key.pem username@ec2ip:/path/to/file ~/path/to/dest/folder/file |& grep -v ^debug > file.log
date -d 16:00 410 minutes +%H:%M
echo $mydata | xargs -n 2 another_command
printf %s\0 *.n3 | xargs -0 cat > merged.txt
grep -URl --null ^M . | xargs -0 ...
sh foo.bash

printf %-20s%-14s%s\n Col A Col B Col C
awk <awk script commands> input-file
if $time > 01:00
awk /Taco/ {print prev;print $0} {prev=$0} datafile
date -f %m/%d/%Y -j 2012-02-29 >/dev/null 2>&1
python3 program.py | diff - compare_file.txt
sed /some_part_in_A/rB.txt A.txt > C.txt
{PWD
sed -i  s/original/new/g test.php
:se fileformat=unix
awk {gsub(/ACT|GGG/,"")}1 file
/bin/sh $0 background &
bash --init-file my-init-script
sed s|\[#${key}#\]|${value}|g
for /f delims= %%F in (dir /b /ad /s "d:\My Subfolder") do del %%F\The-Bad File.txt
awk $1~r && p in k { next } { k[$1]++; print; r= "^" $1; p=$1 } words
echo $Commander
(cygpath $b)

grep -w -v -e word1 -e word2 file
sed -i -e s/  __attribute__ ((__unused__))$/# ifndef __cplusplus\n  __attribute__ ((__unused__));\n# endif/ y.tab.c
git ls-tree -d origin/master:<remote_dir><remote_subdir>
ssh $SERVER mysql -e 'SELECT * FROM ${TABLE} WHERE RAND() < ${PROBABILITY} LIMIT ${LIMIT}' -uroot -p ${DATABASE} > temp_dump_file.sql
echo *
java -jar tools/PlayGame.jar tools/maps/8planets/map1.txt python BullyBot.py python MinMaxBot.py parallel | python tools/visualizer/visualize_locally.py
PATH=/bin:/usr/bin:/usr/local/bin
for x in $(echo $line)
find ${PATH_TO_FILES} -name * * -exec bash -c eval $(echo mv -v \"{}\" $(echo {} | sed "s/ /-/g")) ;
pmset -g ps
curl -s -o /dev/null -w %{http_code} http://www.example.org/
bindkey ^H backward-kill-word
if [ [ $yn = y ] -o [ $yn = Y ] ] ; then
awk {a=$1 OFS $2 OFS $3; for (i=4; i<NF; i+=2) print a,$i,$(i+1); a=""} file
grep -l --null #archive ~/dropbox/documents/notes/Archive/* | xargs -0 sed -e s|#archive|~archive|g -i 
ssh -o BatchMode=yes user@host true

ls /tmp/foo*
./parser | xargs ./adder
-macro analyze /Users/wayne/images/stack1
cat working-dir/*OUTPUT
SELECT COUNT(Name) AS No of Peoples FROM TableName WHERE City = London;
find /path/to/dir ! -name .gitignore -type f -mtime +7 -exec rm {} ;
sed \|/usr/share|s|^|#| test
alias foo=$(printf %q $(which fooBinary))
if [[ $((i % 3)) == 0 && $((i % 5)) == 0 ]]
awk /XXX/,/<</{print a[FILENAME]?$0:FILENAME RS $0;a[FILENAME]++} *.txt
qq: printf '\ec'\n
set ${A:-0.0.0.0}
java -jar <jar-file>
cut -d  -f1 inputfile | paste -sd+ | bc -l
sed -E s/\.+(jar|war|ear|esb)$// file
%-80s
./crclient -l u09me215
EOF
(tail -10 /home/appuser/logA.log)
fgrep -f first-file second-file
cut -d  -f$operation
python -c return subprocess.call(['ssh', '$host', 'test -e ' + pipes.quote("$path")]) == 0
grep bbb yourfile | grep ddd | sed yourcommand
s/here ([^n]*n)/gone 1/g
cp -R <source> <dest>
awk -vval=0.05 $1=="SI1"{$3=val}1 file
shopt -s huponexit
if [[ ! a > b ]]
grep -Po (?<=S2=)[\d.]+ <(tr -d \n < file)
openssl x509 -enddate -noout -in file.pem
sed s/<[^>]*>//g inputfile > outputfile
find . -mtime +90 -exec zip zipped.zip {} +
./findfiles.sh /var/log/ *.txt
find js/ -type f -maxdepth 3 -name *.js -exec uglifyjs -o {} {} ;
(TRAPINT(){};while sleep .5; do run_server; done)
exit 42
grep ID=$i: trace.log | grep getConnection | cut -d[ -s -f1 | tr -d \n
find $1 -type d ! -perm /u+wx -perm /u+r -perm /g+r
awk NR%2==0 infile > outfile
echo <?php echo "hello world!"; ?> | php
convert ./B/*.jpg outputB.pdf
w{2,}
(cd a && find -type d ; cd ../b && find -type d) | sort | uniq -d
.*NAME=(.*?)[,)].*
tail -1 error.log | grep -qE Error && echo yes
subprocess.call([git, send-email] + list(args))
for %f in (c:\users\jtl999\foo_*.jpg) do call convert_files.bat %~ff
sudo -u myuser rpm -Uvp ...
grep ^[[:blank:]]*// *.java
awk -F, FNR==NR{a[$3]++;next} /k_k/ {if(a[$3]==2)print $0} file file
System:~ user
NUM=`awk -v x=$number $5 < x {print $5} $fileName | wc -l`
curl -L -o newName.zip https://www.dropbox.com/sh/[folderLink]?dl=1
for number in `cat /tmp/file.xml | sed s/>\([0-9]*\)px</>\n\1\n</g | grep ^[0-9]*$ | sort | uniq`;do let double=$number*2;sed -i s/$numberpx/$doubledp/g /tmp/file.xml;done
wget http://www.example.com -c --header=Range: bytes=0-99
wget http://commondatastorage.googleapis.com/freebase-public/rdf/freebase-rdf-latest.gz
LC_ALL=C awk {name=gensub(/[0-z]/,"succes","g",$0); print name} range2.txt

echo $(pull_data) | while read a b c d; do
jq . | length /tmp/test.json
counter=5; while read line; do echo $line | sed -e s/BestFirst/BestFirst -D 5 -N $counter/ >> result.csv; counter=$[ counter+5 ]; done < attribute_selectors_cfssubeval_bestfirst_various_parameters.csv
rvm gemset pristine
echo `ifconfig eth0 2>/dev/null|awk /inet addr:/ {print $2}|sed s/addr://`
nmap -p 23 -i list.txt | grep ^23.*open -B3 | grep ^Nmap scan | cut -d( -f2 | cut -d) -f1
cd `echo $1 | cut -f 2 -d / | cut -f 1 -d .`
cat data | awk {sum+=$2 ; print $0} END{print "sum=",sum}
ln ../notes/linux.txt
sort -t _ -k 3,4 you_data_file
exec awk -v var=$var {$1==var {print $0}} temp1.txt > temp2.txt}
`!cd foo`
sed s/.*\([0-9]\{10\}\).*/\1,&/ input
ffmpeg -i input.mp4 -vf drawtext=enable='between(t,12,3*60)':fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf: text='Test Text' -acodec copy output.mp4
wget -np -nd -c -A.m4a -r -k -erobots=off http://runawaypodcast.com/wp-content/uploads/2014/
youtube-dl --download-archive ~/.mydownloads http://youtube.com/CHANNEL
execvp(arguments[0], arguments);
find . ( -name *.mpeg -o -name *.mkv -o -name *.avi -o -name *.mov ) -size +1073741824
gsub(/[^a-z]]*/,  )
gcc -Wall -o term -pthread filename.c
install -m <mode> -o <owner> -g <group> <srcfile> <destination>
execute :rvm, #{ Configs.rvm.ruby }@#{ Configs.rvm.gemset }, --create, :do, :true
sed -r /^\S/{h;b};G;/^user_default:/M{s/(prefix:\s*\S).*/\1user/};P;d /file
find $location -type f -size 0 -exec rm -i {} ;
gawk -F [ $0 ~ /Exception/ && $2 ~ /^2014-01-26 16:/ {print $2} coms-core.log
sudo -u tomcat ./bin/startup.sh
sed -i s!/var/run/php5-fpm.sock!127.0.0.1:9000!g /etc/php5/fpm/pool.d/www.conf
rename 51fdda 2c3cd *tokudb
RUN+=/bin/sh -c '...'
ls | grep -v ^prefix
find . -name *.jpg -print0 | tar -zcvf images.tar.gz --null -T -
Administrator:unused:[SID-STUFF]:U-POS-SERVERAdministrator,[SID-HERE]:/cygdrive/c/Users/Administrator:/cygdrive/c/windows/system32/cmd
f 2 qwe
{ declare -f run_tool_commands; echo run_tool_commands ${ARGS[@]}; } | ssh -t user@host
tail -f logfile.log | sed /pattern/,+10d
awk NR==FNR{a[$2]=1;next}a[$2]{print $2} file1 file2
alias pipup=sudo pip install -U `yolk -U | awk "{print \$1}"`
jobplan_name=`echo ${name} | cut -d = -f4 | cut -d   -f1`
find /directory | awk {names[gensub(".*/","","g")]++} END { for (name in names) { if (names[name] > 1) { print name } } }
echo ntpd Service Respawned | mail -s ntpd Service Respawned my_email@gmail.com
if [ `cat /tmp/rcrt_unusable_indexes.log | grep -i ORA- | wc -l` -gt 0 ]; then...
egrep ^.{1,100}$ filename | grep string
awk /^START/{n++;w=1} n&&w{print >"out" n ".txt"} /^END/{w=0} input_file.txt
IFS= read -t 10 -d  variable < <(yourcommand)

awk /ItemA/{f1=1} /ItemB/{f2=1} END{ exit (f1 && f2 ? 0 : 1) } file
done < <($MYSQLCONNECT --batch -N -e $QUERY)
std::string addPathCommand = /Applications/MATLAB_R2011b.app/bin/matlab -r "addpath(genpath('+ matlabFunctionPath + '))";
1 * * * *
yum install librsync-devel
threads=`ls t[0-9][0-9]`
grep $2 bookprint.txt | sed s/^/Author(s)! /; s/:/\nTitle!     /; s/:/\nPublisher! /; s/:/\nYear!      /; s/!/:/g
for i in /home/*; do [ -d $i ] && echo $i && find $i -xdev -maxdepth 100 -type f | wc -l; done
awk /you:me/ { print "#"$0 }
spawn scp {*}[split $files] $ACCOUNT@$SERVER:[esc $newfolder]
sed -n s/base theme \+= //p file
awk $1~d {print $2} d=$(date +%Y-%m-%d) archivos.txt
find ( -name .git -o -name .gitignore -o -name Documentation ) -exec rm -rf {} ;
sed -i s/^\($title:$name:.*\):.*$/\1:$newValue/ test.txt
Sub Main(argv As String())
perl -i.bak -p -e s/"(\d+)"/$1/g input.txt
csh -f script2
grep -A 2 $title:$author:* | tr \n  
find ( -name .git -o -name .gitignore -o -name Documentation ) -prune -exec rm -rf {} ;
mysql --quick -uname -ppwd wmap -e ...

awk -v value=$value -v row=$row -v col=$col BEGIN{FS=OFS="@"} NR==row {$col=value}1 file
awk $1=="1"&&$2=="1"{t=1};t;$1=="33"&&$2=="33"{t=0} file
sed -ie s/_[A-Za-z0-9]* / /g here.txt
awk -v title=$title -v author=$auhtor $1 ~ title && $2 ~ author {print} file
[ ${filename:$length:1} == * ] && echo yes
IFS=;; while read ip others; do nc -zw3 $ip 80 && echo $ip:80 => opened || echo $ip:80 =>  closed; done < list.txt
ls -l --color=auto

. /etc/profile
echo out $i

jenkins:x:496:492:Jenkins Continuous Build server:/var/lib/jenkins:/bin/false
rsync -uvma --include=*/ --include=templates/**.html --exclude=* $html_all_dir $html_dir
awk substr($0,7,2) == "01" {c++} END {print FILENAME, c++} FILENAME
sed s/;//g pool| while read ip string ;do nc -zw3 $ip 80 || echo $ip failed >> report; done
(wget -q -O - http://myserver/mypath | head -1)
mkdir tmp && cd !
./svnfixversion ./ 1.5 --verbose
find $path ! -name $string*
if [ ! -f index.html ] || [ $? -ne 0 ]
git grep --name-only $grepexp | xargs sed -r $sedcmd -i
tail -f log | awk /^\/\*\*\* Module Name/,/^\*\*\//
sed /doadoodle <parameters>/,$!b;//{x;//p};//!H;$!d;x;s//&\nrc=$?\necho "$rc  is return code of last doadoodle" \nexit $rc/ file
find ../../$name-module -name Name* -type f -exec bash -c mv "\$1" "\${1/Name/$Name}" -- {} ;
awk { if(seen[$0]) { print; exit } seen[$0] = 1 } file
awk -v FS= {min=$5<5?0:5; a[$1$2$4min]++} END{for (i in a) print i, a[i]} file
forfiles /m * /c cmd /c if @isdir==FALSE echo @path
postgres=
find /dir -type f -ctime +365 | head -n 100 | xargs rm
date +%m%d%Y -d ${initial_date:4}${initial_date:0:4} + 1 day
diff -2 --old-line-format=<%L --new-line-format=>%L --unchanged-line-format= equal.lst equal2.lst
tr -d \000\r < yourfile > newfile
convert -delay 100 -loop 0 `ls motorist_intensity_* | sort -n -t _ -k 3` motorist.gif
-c, --cookie-jar <file name>
cat -n textfile.txt | grep  b  | tail -1 | cut -f 1 | xargs -I % sed -n %,$s/blades are down/&/p myfile.txt
20 19 * * * imuser /home/imuser/myscript.sh 2>&1 | bash -c tee >(logger -t MYSCRIPT)
sed -En /^password: / s,^password: "(.*)"$,\1,p
perl -F, -lane @A=sort @F; print join(",",@A) input_file | uniq
for pid in `ps -ef | grep your_search_term | awk {print $2}` ; do kill $pid ; done

awk -v RS= /xxx two/{print FILENAME ORS $0} file
(echo $id)
sed -n /```ruby/,/```/{/```ruby/b;/```/b;s/^/    /p } filename
tac file | awk !done && /Gottagohome saab 90 75n/{done=1; sub(/&$/, "")}1 | tac
perl -M5.010 -wpi.bak -eour $article; s/<text id="\K[0-9]+/++$article/ge hugetextfile
if [ $i -le $r0 ]
BasicDBObject query = new BasicDBObject(_id,(new BasicDBObject($in, f_ids.get(friend_ids))));

alias pshell=pythonsh path/path/script.py
(cp log.txt 2>&1 >/dev/null)
CFLAGS = -O3 -fopenmp -static-libgcc -static-libstdc++
visudo
(pdfinfo $i | grep Title)
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
awk -F, $2 == "" file
cat -n file.log | grep Start new test | tail -1 | cut -f 1 | xargs -I % sed -n %,$s/is not alive/&/p file.log | cut -d: -f 4 | xargs -I % echo Error: %
gawk -f a.awk file file
ip =~ s/^d+.d+.(d+.d+)z/$1.0.0/;
export PATH=$PATH:/Applications/LibreOffice.app/Contents/MacOS/soffice
sed -n  p; s/^N:/FN:/p original.txt
grep tgt/etc/*
{some.property}
sed -e s/\\u003cb//g -e s/\\u003e//g -e s/\\u003c\/b//g -e s/\\u003c//g -e s/div.*div//g -e s/.*://g -e s/"//g -e s/ "//g new1.txt > new2.txt
open -a Terminal $1
sed -E s/^(.*)$/^S01E(.*)$/g
find /home/Desktop/ -size 0 -exec mv {} /home/Desktop/a ;
grep :.*fg.*: ./*
echo `date`: Myscript starts
(( sum + val ))
for((i=0;i<=4294967295;i++)); do echo $i; done
case class Config(cmd:String=, subcmd:String=)
wget -r -l 2 --page-requisites http://example.com/your/page.html
ls -l | awk {print $9} | grep [0-9][0-9]
awk {printf "%-27s%-18s%-11s$%-14.2f$%.2f\n",$1,$2,$3,$4,$3*$4} FS=: foo.txt
usage: ping [-c count] [-t ttl] host
shopt extglob
sed /aaa/,/ddd/!b;/ddd/a\hello file
find /path -type f -name *.dat | awk -F. a[$4]++
sed s/${var}//g
-rwxr-xr-x. 1 root root 1894 Feb 2 01:58 test.sh*
sed -i.bak /^'dbhost' =>/ s|^.*$|'dbhost' => '$MYSQL_PORT_3306_TCP_ADDR:$MYSQL_PORT_3306_TCP_PORT',| /config/www/config/config.php
source .bash_profile
echo -e   $ip\t\t\t\tDOWN
awk /test/ {for(i=1; i<=100; i++) {getline; print}} <<< $var
bash ./file.bash
find . -name *abc* -path *src*
(ps -eo %cpu | sort -nr | head -1 | tr -d [[:space:]])
| = 1;

export EXAMPLEVAR=Hi

sed -r $!N;s/test(\n\s*)$/xxx\1/;P;D file
printenv |grep G4 |awk BEGIN{FS="=";}{print $1;}
awk $1~/^000/ ...
[[ $thing =~ /$ ]] || thing=$thing/
output = shell_exec(/scriptname.sh p1 p2 p3);
sed -r /svn:mergeinfo/,/PROPS-END/{s#(/code)(/(branches|tags|trunk))(.*)#\2\4#} inputfile
Total number = d+
awk {print $3 - $2} test.txt
awk -F| $1~/[[:space:]]+$/
(echo $RAW| sed -r s/^.{0,15}//)
find . -type f -exec fgrep -l searchword {} ;
RANDOM
awk NR==FNR {a[$1]=$2; next} {if ($1 in a) {$1=a[$1]}}1 f2 f1
libreoffice --convert-to xlsx my.xls --headless
ulimit -u 20
grep -oP encoding=["']([^"']+) $file | head -1 | cut -c 11-
sudo -b nohup dd if=/dev/zero of=/dev/sda bs=1M
sed /Hello/{s/.*/&\nSomething on the next line/;:a;n;ba} filename
grep -oP git-\K[A-Fa-f\d]+
paste file1 file2
awk -v key=$KEY {sub(/stringtoreplace/,key)}1 file
awk 1;/Find a hot chick/{if(i++==3){print "New line";i=0}} yourfile
( expr $( date +%s) + 240 )
/bin/bash -c FUEL_ENV=development; /usr/local/bin/php /home/net/###DIR###/oil refine TaskName 2>&1
for q in `seq 1 50`; do input tap 653 100 ; done
echo /backups/world_$(date | sed s/ /_/g)
find . -print0 | xargs -r0 du -chx|grep total
sed -n /^\*NODE$/,/^*/p input.txt > output.txt
... /dir/{$ff..$tt}
find /var/www/page/logs/ -name *.gz -exec zgrep -H /index.php {} ;
echo -e $(sort $1 | uniq -d)
DECODED=`echo $AES_PASSWORD | openssl enc -d -a -aes256 -pass pass:secret`
ffmpeg -i input.mkv -i subtitles.srt -c copy -c:s srt -metadata:s:s:1 language=eng -map 0 -map 1 -map_metadata 0 output.mkv
awk {f=$1; $1=$2=""; print > f} file
cat x > y <
tail -n 4 outputs.txt | awk NR ==1 || NR == 3 >> newfile.txt
sed s/<span class='A'>\([^<]*\)<\/span>/**\1**/g
fijiCmdText = /C "C:\Users\myAccount\Downloads\fiji (1)\ImageJ-win64.exe" -macro D:\fiji\macros\FFTBatch.ijm C:\Users\myAccount\Documents\Untitled005\ --headless
perl sumfiles.pl src1.txt src2.txt
sed -e s/^[A-Z]*// -e s/[A-Z]*$//
awk -F, BEGIN {OFS=","} {$10=substr($10,1,255);print}
awk {printf "%.2f %.2f\n", $4 / 1024, $6 / 1024 }
do shell script /path/to/firstscript
C:WINNTsystem32cmd.exe /c C:Gitbinsh.exe --login -i
string fijiCmdText = string.Format(/S /C ""{0}" -macro "{1}" {2}", _fijiExeFile, _ijmFile, _inputDir);
kill -2 $(</tmp/pidfile.txt)
ls -a | awk {print length($0), $0} | sort -n
diff $FILE $DIR/$(ls -tr $DIR | tail -n 1) > diff.txt
cat ip.txt | awk {if(index($4,$1)>0)printf("%s\n",$0);}
hadoop fs -ls | sed 1d;s/  */ /g | cut -d  -f8
python -i my_script.py
function ls { $(which ls) -l; }
sed G file
START /WAIT 7za.exe a file_%year%%month%%day%_%hour%%min%%secs%.zip * -r -mx9 -p%pass% -mhe
find . -name myfile.txt | grep myfile.txt
sed -i.bak -r s/foo\(\s*([0-9]*)\s*,\s*(([0-Z]|'[0-Z]'))\s*\)/foo(\1, \2, 0)/g file
sed -i.bak -e s/^/{"frames":"/ -e s/$/", "params": {"rms":false,"removeSpecialFrames":"true"}}/ file.txt
find -type d
grep -vxFf fileB fileA > fileC
echo this is a sample id='42' string | sed -r s/id='.*?'/id='1'/g
awk BEGIN{FS=OFS="."} NR==1{++$NF}1 file
is_callable(shell_exec) && false === stripos(ini_get(disable_functions), shell_exec);
users | tr   \n | grep -e ^ab -e 1$
ls -1 *.fastq | awk -F_ $8 == "R1" {system("cat " $0 ">>" $1 "_R1.out")}
script -t 2> timing.log -a output.session
find /dir -type f -mtime -1 -exec mv {} /pdf ;
printf %s\n shopt -s extglob rm -rf !(cookbooks) | bash
find {my/path,another/path,some/path} -name *some_pattern*
tail -n 4 *simple*.log
FILES=`/usr/bin/find /u01/app/dw/admin/dgwspool -type f -daystart -mmin -1621 -printf %P `;
tf workspace -new Workspace01 -location:local -collection:https://tfs.visualstudio.com/DefaultCollection
fijiCmdText = string.Format(/C ""{0}" -macro "{1}" "{2}", _fijiExeFile, _ijmFile, _inputDir);
[ $(cat top.txt) = $a ]
(grep -oP @\K[^ ]* tweets)
du -sb myDirectory yourDirectory hisDirectory
sed -r s/^[^ ]+[ ]+// in.txt
-printf %H/\b\b%P\n
echo $PATH > /tmp/cron-path.txt
awk $3 != $4 "" {print $0} test
BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
cp $(echo $line | sed s/\*//1 | tr : * )
ios-sim launch <application path>
sed -i.bak 3d file1.txt
echo -e 1:45\n0:20 | awk BEGIN { FS=":" } { SUM += 60*$1 + $2 } END { print SUM }
/usr/IBM/WebSphere/AppServer/java/bin/java -verbose:class -cp XXXXX com.ibm.XXXX >>/home/user/log.log 2>&1
openssl x509 -passin pass:passwd -req -days 365 -in testem/2.csr -signkey testem/2.key -out testem/2.crt
convert in.pdf -append out%d.png
awk -F@ $6~/^3/ yourfile
i]}))
{site}_log
awk NR==FNR{strings[$0]; next} {for (string in strings) if ( (idx = index($0,string)) > 0 ) print string, FNR, idx } file1 file2
awk /^[^! ]/ {p = 1; print;}  /^ *$/ {if (p++ % 2 == 0) print;}  (p % 2 == 0) { print; }
sort -k1,1 -u companies.txt
set -o noclobber
find /Users -type d -iname *.bak -print0 | xargs -0 rmdir
var fijiCmdText = string.Format(/C "{0}" -macro "{1}" "{2}" {3} "{4}" {5} {6}, _fijiExeFile, _ijmFile, _inputDir, redirStr, _logFile, headlessOption, resStr);
ls -dtr ${A}_[0-9]...
find . -name *Source*.dat -exec sh -c cp "$1" "$2/$RANDOM.dat" -- {} $INBOUND ;
b= printf %.0f $a
.. | awk BEGIN { RS = "---" } /Error/ { print; fflush(); } | ..
grep book1 file.txt | cut -d  --complement -f1
declare arr_$jobcfgUniqName[$xx]=`grep -B 3 -i error $joblogPath/$joblognameSearch[$xx]`
find . -regex .*[19|20][0-9][0-9][0-1][0-2][0-3][0-9][0-2][0-9][0-6][0-9][0-6][0-9]\.txt$
echo $a | awk {print $1} FS=[0-9]
timeout_exec() { timeout 2s $@; }
if [ $a -gt $b ] 2>/dev/null
sed -i.bak $s/\r// file
.;C:/twitter4j-3.0.5/lib/twitter4j-core-3.0.5.jar;C:/twitter4j-3.0.5/lib/twitter4j-stream-3.0.5.jar
tr -d " < file
perl -pe s/^(\S+\s+\S+\s+\S+).+experience\s([^\t]+?)\s+(\b[A-Z0-9]{2}[^\t]+?|(?:(?!\b[A-Z0-9]{2})[^\t])*)\s+\t\s+([^,]+,).+?(INR.+?PM)\s+.*/\1,\2,\3,\4\5/ file
jmeter -Jkerberos_jaas_application=testapp -n -t myscript.jmx -l myscript.jtl
if [ -n $BASH_ENV ]; then . $BASH_ENV; fi
C:Userscsf10dum
awk -vdd=$day -F - {split($2,array," "); printf "%s,%s,%s,%s,%s,%s\n",dd,"1","1",$1,array[1],array[2]}
awk !p && /pattern/{p=1;c=0} c ~ /^([578]|1[689])$/ {print; if (c==19) exit} p{c++} infile
find . -name a.c | xargs -I $$ diff ~/good/a.c $$
sed -n /^owner / { s///gp; q; } $file
(eval echo $x$y)
date1=(`date -d @$startdate`)
sudo chown -R sherwyn /Users/sherwyn/.rvm
dos2unix myitems.csv myitems.csv
ln -s -t /dir1 /dir2/file1
printf %s\n $STR
make && ./a2
printf %5s{FNAME}\n  

grep 1000 /tmp/userfile | cut -d, -f2- | tr \n , | sed s/,$//
nmap -vv -iL mylistwithip.txt | grep Discovered open port | awk {print $6":"$4} | awk -F/ {print $1} > output.txt
sed -E -e s/('[^']*'|[^,]*),/\1X/g
cut -d  -f1 $1 | sort | uniq | paste -sd,
tr   \n <<< $var1 | sort | uniq -u
ssh user@server find /path/to/dir -type f -printf 'get %p\n' | sort -n | tail -1 > batchfile
evince $(find /home/alex/papers/ -name *erebus*)
grep -Eo [0-9\.]+ myfile.txt
backupbatch.cmd miFileToCopy.txt
(sed -n ${lineno}p $file)
java -cp .:libs/bcprov-jdk15on-150.jar fcrypt
[ -z $(file $1 | grep '256') ] && echo 256
unzip -l yourzipfile.zip
For /f %%f in (inputold.txt) do copy /y c:source%%f c:dest
echo $PPID
IFS= read -r foo
if [[ $line == "{nextId"* ]] ;
{i
sh calc_new_file $(echo $TEMP_BLA_BLA | sed s/,/ /g)
echo $sum_var
scp -o StrictHostKeyChecking no ...
./wget_by_link_text http://www.ofsted.gov.uk/filedownloading/?id=1295389&type=1&refer=1 Please download the requested file here
echo ${UPDATED}| grep -Po [0-9]*(?= rows)
python -c print u"\u5000".encode("UTF-8") >a.out
sed s;^1\([0-9]\{10\}\)$;\1; filename
find . -name mylib* -exec rename s/mylib/libvertio/ {} ;
fast ) mode=-T 2C -P; break;;
[[ $(command) ]]
echo $(expr $a + $b)

sudo python myprogram.py> /home/pi/errorlogs/myprogram-$(date +%Y-%m-%d_%H-%M).txt 2>&1
./script.sh /tmp *~
stat -c %y %n .
sed s/:50K.*:53B/:50KCREDIT:53B/g
awk NR==FNR{if(/^START - 'cmd1'/)p=NR;next}FNR>p{if(/^END/)exit;print} file file
vmstat|awk -v f=in !o{for(x=1;x<=NF;x++)if($x==f){o=1;next}}o{print $x}
pid_t ws = waitpid( pid, &childExitStatus, WNOHANG);
awk substr($0,12,14)~/ohn/ file
200>/var/lock/mylockfile
sed -i /*${asset}*${waiv}*/s/$/,${target}/ Book2.csv
eval $(python yourscript.py)
sed s/.*[^0-9.]\([0-9.]\+\)/\1/g
rename s/[0-9]{14}// CombinedReports_LLL-*.csv
pysortints.py < testfile
echo ${VAR/$TOKEN/$REPLACEMENT}
mysqldump --insert-ignore --skip-add-drop-table --no-create-info --lock-tables=false -ucrbt_se -pcrbt_se -h10.2.2.150 blah master_backup --where date(END_TIME)>='$FiveDays' --result-file=torr1.sql
find . -type f -exec chmod g-s {} ;
echo col1 col2 | awk {for (i=1;i<=NF;i++) print $i | "gzip > out" i ".gz"}
ssh user@host -o NumberOfPasswordPrompts=0 -i .....
echo MAGIC: $a
-N n=http://schemas.microsoft.com/windows/2004/02/mit/task
sudo yum install build-essential
./userspecifiedcmd.exp root $password $server $usrcmd
export C_INCLUDE=$C_INCLUDE:/usr/include/x86_64-linux-gnu/c++/
find $some_directory -type f -name .* -delete
env ${ARRAY[@]} cmake ../gdm
echo foo >bar.txt
grep -Po (?<=>)[0-9,]*(?=</a></td>) file
ceil(bytes / 512) + 1 = blocks
sed /{/!b;:a;$!N;/}/!ba;/font-family:\s*"foobar";/s/.*/\/* & *\// file
awk { s=$1; sub($1,""); gsub("C","g"); gsub("G","c"); gsub("T","a"); gsub("A","t"); print s $0 } filename
while [ $x -lt 10 ];
awk { for(i=1;i<=NF;i++) print $i > "file_" i ".txt" } RS= FS=\\$ file
od -An -vtx1 -w1 test.txt | cut -c2-
<condition> { <action> }
cat *.{txt,html} | grep -oP \b[A-Za-z0-9_]+\.[A-Za-z0-9]{1,4}\b | awk -F. { print "." $(NF) } | sort -u
@echo Connect a network cable.&cmd /q /c for /l %N in () do ping -n 1 site.com >nul&&exit&echo echo n^|gpupdate /force&msg * Done.
while [ : ]
resp = requests.post(url=url, data={json:payload})
perzonalize browser='FF'
sudo pkill -f bz
./scriptname.sh -t desktop -n
matlab -nodisplay -r firstFile; for idx = 1:7, secondFile(args); end, exit
grep -v xinetd\|nrpe
echo */
(command1 || command2)
command < filename
ps -eo uname:20,pid,pcpu,pmem,sz,tty,stat,time,cmd | grep [b]ash
sed /all.css/ r $BLA $FILE > TMP1
awk {max=$1;for(i=2;i<=NF;i++)if($i>max)max=$i;sum=sum+max;}END{print sum+0}
bash -c $CMD '$CATALINA_HOME/bin/catalina.sh stop 20 -force'
sed s/[][]//g; s/:\|\s\+/\t/g
(while true; do /bin/echo xxx; done) | head -n 1

/^([a-z0-9*@.-]+)[[:blank:]]+([0-9]*)[[:blank:]]*([A-Z]+)[[:blank:]]*(.*)/
awk {t=$2 " " $4;gsub(/[-:]/," ",t);printf "\"%s\",%s\n",(mktime(t)+6*3600)*1000,substr($0,25)} FS=" OFS=" file
( awk -v pname=$findProcessName $0 ~ pname $tempFile )
[[ 1 != 1\r ]]
find -maxdepth 1 -user username -exec mv {} ../ ;
awk {s=(NR-1)%25}!s{printf "%04d\n", ++k}{printf "%2d %s\n",s+1,$0} file
export PATH=$PATH:/opt/meteor/bin/meteor
prodigal -o /dev/stdout
sed s~\\\x01~\\&~g
kill `ps ax | grep [m]eteor | awk {print $1}`
gedit $(ls | head -1)
mysql -u root -p`cat /tmp/pass` -e SHOW DATABASES
sed /\ba2\b/!b;/\bb2\b/!d file
ls /proc/$pid/fd/ | wc -l
cat input.txt | ssh clrg@192.168.2.22 sh -c 'cd /path/to/shell/script; ./tokenize.sh'
(lsb_release -a 2>/dev/null | grep Description | cut -d: -f2)
grep ^[+-][0-9]
grep ^ *[-+][a-zA-Z0-9]
echo ${arr[@]}
sqlite3 mydatabase.db < SQLTableTransfer
set -A x $(echo $x1 | cut -f3 -d  | cut -f1 -d])
sed s/\(<[^>]*>\)\(.*\)\(<[^>]*>\)/\1\2/ test.txt
awk -v s=$line1 -v e=$line2 NR>s&&NR<e file
git remote rm heroku
yum -C check-update 2>/dev/null | awk {$1=$1}f;/$^/{f=1} OFS=,
find . -name *bills* -exec grep -H put {} ;
`./program_name
mysql -h {hostname} -u {username} -p{password} {database} < /path/to/script
exec(casperjs test.js  + value +   + value1 , puts);
xpath -e //BaseTable/@*[name()="id" or name() = "name"] FileName.xml
awk /Reco/{c=3} c&&c--{print; if(!c)print ""} file
awk -F : NR==FNR{a[$1];next} !($2 in a)  todelfromfull.txt full.txt
ni hklm:software/classes/firefoxhtml/shell/edit/command -type directory -force
sed -n -e /--/s/[^-]*$//p input > output
sed -e s/{"AP_SESSION_ID"\\1\\"787"}/{"AP_SESSION_ID"\\1\\"800"}/g FILE|tee FILE
git diff | awk { seen[substr($0,2)]++; l[i++] = $0; } END { for (j = 0; j < i; ++j) if (seen[substr(l[j],2)] < 2) print l[j] }
(shell perl -plne $$\ = " " $(MYFILE))
find ~/Desktop/administration/ -type f -exec sed -i  s#\\MySite\\scripts\\connection.php#\/MySite\/scripts\/connection.php#g {} ;
perl -l -00pe $q = y|\n\r[]| |d >3 && q("); s|(\S+)\s*|$1 = $q|; $_.= $q file
FOO
find . -name *.py -exec grep -nH main() {} ;
awk -v RS= {$1=$1}7 file
grep -Hn pattern files* | cut -d: -f1,2
ls | grep -v file-to-keep | xargs rm
awk NF{i++} END { print i } Nameofpop_chr1_window1.txt
sed /Non Unique Subdivision/,/^/d
./sendxms +$var1 $string -pSMPP -Otest
sed -i.bak -r /^.{250}$/s/^(.{138})/\1 / file
sed s/^:// filename
PROMPT_COMMAND=beep
find ... | xargs perl -l -pi -e s/\t/    /g; s/\s+$//
grep \<P01\> file
yourcommand 3>&2 2>&1 1>&3 3>&-
awk NR==FNR{a[NR]=$1;next}FNR>5&&FNR<5287{$1=a[FNR]}1 b.com a.com
tail -n +1 -f /var/log/messages | grep sync_complete
system(mkdir " $i ")
a=`grep -c word file`
minute hour day-of-month month day-of-week command
cmd argument1 argument2 $@
bash echosomecommands.sh | bash
find my_dir/ -name *filename* -exec sh -c tail -200 {} | grep lookingfor ;
set format y %.0f
python test.py <( hadoop fs -cat inputfile.txt ) <streamingfile.txt
grep --color=always
join -1 1 -2 1 -1 2 -2 2 -o 1.1,1.2,1.3,2.3 server7.txt server8.txt
sudo ./hid_listen | sed -e s/^$/$(echo -en \033c)/
printf message :: %s %s\n $(display_output_message $1 $2) received
awk -F: ($2 != $3 && $3 != $4){print $0":foobar"} file
awk /Drive\/Music/ {sub(/\/string/,":string");sub(/Music.*\//,"Music/");sub(/:string/,"/string")}1 file
sed s/'[^@']*@[^@']*'/'empty@invalid'/g
perl -pe s/(\d+)\.\s/($1-44).". "/ge file.txt
(grep -oP ^$1:\K.* file)
subprocess.call([mv, /home/somedir/subdir/*, somedir/])
program.exe -flags | repl ^(cmd|prc):   a >output.txt
gawk $5 == 2 {print $1, $2, $6, $7} FS=, samplef.csv > sampleout.csv
tmux -2 new-session -s name another_script.sh $1
(tail -1 cookie.txt)
sed s/^[0-9]\+:// your.file
awk -F" /<user=/{ print $2 } input.xml
grep 1000 /etc/passwd | cut -f1 -d:
awk {system("a=$(stat -c %Y $9)")}
echo <a href="play.php?file=.$plik.">.$plik.</a>;
(basename $(find dir/* -name $file))
mysql -u [username] -p -e SET PASSWORD FOR 'user' = PASSWORD ('newpassword')
SUM=0
awk -F" /<user=/{ print $2 } file
[[ $user_start_time =~ $timePattern ]] && echo in if || echo in else
grep ^$(date -d -1hour +'%Y-%m-%d %H') test.logs | grep exception| mail -s exceptions in last hour of test.logs ImranRazaKhan
system(bash, -i, -c, shell command);
rename s/\.(?=[^.]*\.)/_/g {}
ServerAliveInterval 60
s = spawn ./myScript.sh, [url, title]
awk NR==FNR{a[NR]=$(NF-1);next}/cellIdentity/{$(NF-1)=a[++i]}1 FS=" OFS=" inputFile bigFile
sed s/$\tEN-GB\t//g filename
echo ... > /dev/stderr
find . -type f -name *.txt -exec cat {} + >all.txt
qsub compute.job -v VAR1=$i,VAR2=$p
awk {print "line #", NR, "-", gsub("0/0",""), gsub("0/1",""), gsub("1/1","")} file
exec(bash -c ' . $code . ', $result);
awk {if ($1 in x){x[$1]=x[$1]","$2}else{x[$1]=$0}}END{for(i in x)print x[i]} yourfile
sed -i -e s@%SITEDIR%@$SDIR@g
dos2unix <brit-a-z-sorted.txt >brit-a-z-sorted-fixed.txt
.option(-e, --enviroment [env], set NODE_ENV varible)
{roi%_*}
jq -r .results.elements[] | select(.name=="Lines").ratio input.json
if re.match(^[a-zA-Z_]+$, word):
{dir//
sed -i -e s|\\n|\n|g mydumpfile.txt
*/30 * * * * /path/to/php -q /path/to/file.php

set OS_ROOT=%systemdrive%
\b([fh]i|k)\w*(eld|ed)\b
sed -r s/(\sLOB.*"L_.+_)([0-9]{10})("\()/\1$myVar\3/
ls -rt1 file_a*.txt | tail -1 | xargs sed -n 2p
find . -iname *py -exec grep text {} ;
fgrep -c $$$$ $@
rsync -a -c --existing /source/ /destination/
cd %APPDATA%
sed /patterntosearch4/i\\n\n\n file
sed -r :a;$!{N;ba};s/((hello|world)[^\n]*)\n/\1 /g file
stdbuf -oL sh long.sh | sh simple.sh
ls cat{1..9}
gawk {if(NR==FNR)l[NR]=$0; else print l[$1] } data.txt numbers.txt
exit(1); // or another error code, but different from 0
echo mv $1 ${G_DEST_DIR}
chown user:group file ...
java -jar `find / -type f -name R*.jar -printf %T@ %p\n | sort -k 1nr | sed s/^[^ ]* // | head -n 1` -debug
socat -x udp-listen:$port udp:$server:$host 2> logfile
awk NF=NF FS=\\..+  test.txt
fgrep -q =  sf && echo blanks there
echo lock_me > /sys/power/wake_lock
... | awk { print NR "." $2 } | xargs mkdir -p
either—
echo ${DATA_ARRAY[*]} | awk $1!=val{print "error"} RS=  val=120
>echo D:\0.0 | findstr /I D:\0.0
seq 1000 3000
awk -v RS= -v ORS=\n\n /pattern match/{print > "file1";next}{print >"file2"} file
export LD_LIBRARY_PATH=$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH
system ( string $command [, int &$return_var ] )
awk BEGIN{split("4 6 3 2 7 1 5",n)} {a[NR]=$0} END{for(i=1;i in n;i++) print a[n[i]]} file.txt > output.txt
sed -i .bak 7 s/$/ ${site_addr}.domain.dev/ /etc/hosts
(cd ../dir1/; ./Quack.sh)
ssh -t name@ipAddress short () { veryLongCommandThatIWriteOften; }; export -f short; bash
sed -i s~href="/foa~href="www.url/foa~g file.html
all: ; echo $(notdir $(CURDIR))
[ ${myhash[$key]+abc} ]
diff file.ls <(ls -l directory)
echo Bienvenido;

function myFunction() {}
perl -pi -e warn "successful for line $." if s|\x0a\x00\xde\x10|\x0a\x00\xde\x10|g somefile
curl <url> | egrep -v foo|bar|baz
impdp sim/sim files=$(printf %s\n /${TMP_DIR}/*0000000221*.dbf | paste -d, -s)
awk -F | /^99/ { print $NF } file
sed -i 1s/.*/changed line/ *.php
(/production/bin/title_case.awk old_name) | getline new_name
sed -i s/BOO[^\\]*\\/cusomdata/g file.txt.
awk /\.\*/ file
for n in $(seq -w 0 10); do echo $n $((n + 4)); done
(printf %s $str | tr / a)
sed -i.bak $s/\r$// file
rsync --progress -r /Volumes/foo /Volumes/bar
sed s~/\*.*\*/~~
if [${ARR1[i]} == ${ARR2[j]}];then
( cd $( dirname $0 ) && pwd )
--load filename
echo  $i >> fail
sudo opensnoop -f /private/etc/hosts
(date --date=6 months ago +%Y%m%d)
echo -e \0342\0224\0224\0342\0224\0200\0342\0224\0200 \033[01
some-command 2>&1 | less
ssh nathan@gnunix a=$(date) && echo $a
awk
cl /EHsc /GA /MT simple.cpp User32.lib
echo obase=2;$1 | bc | sed s/./& /g
awk -F; !a[$2 FS $3]++ file
iostat -c|awk /^ /{print $4}
string=This is ${name} ${surname}
for file in $(find foo -type f); do if [[ $(diff -q $file ${file/
sed s/ *[(]*[A-Z][A-Z]*-[0-9]\{1,4\}[):]* *//
tail -f /var/log/msg | stdbuf -oL grep error >> logfile
echo Answer: $lrsq >> $log
awk f{print ++x,$1} /4096/{f=1} RS= | *\n file
xargs -L 1 echo name is: < containers.txt
euca-describe-instances | grep INSTANCE | awk {print $2} >> instance_state.txt
chmod a+x /usr/local/apache-maven/apache-maven-3.1.1/bin/mvn
awk NR==FNR{ a[$1]=$2; next;} $2==0{ $2=a[$1]; }1 OFS=\t input2 input1
grep -r --include=*.c Unit32
sed -r s/(.{200})/\1\n/g file
ps -A -o pid -o command | egrep [f]lash | cut -d  -f1
awk {print FILENAME, $0} V*
set -o errexit
export PATH=$PATH:/Applications/AMPPS/mysql/bin

var=`sed -n /department=..* id="983343"/,/<\/department>/p file | grep -c <user="`
if [ $(/amtu/Utilities/amtu_daemon status) = The daemon is stopped. ];
IamAwaitingStdin <<<This is verysecretmessage
echo prefix = ~/.node
./myscript.sh 2>&1 | tee output.log
grep $value `exim -Mvh $(`exim -bpru | grep $eximID | more`)`
/usr/lib/update-notifier/apt-check 2>&1 | awk -F; END { print $1, $2 }
ssh root@$center ssh root@$ip pkill -f $target_dir/$main
sed :a;/{/!d;s/{[^}]*}/\n&\n/;h;s/[{}]//g;s/\n/{/;s/\n/}/;G;P;s/[^\n]*\n//;s/\n{//;s/}\n//;ba file
flex -o shell.c shell.l
grep A.*$a.*Z file.txt
sed s|//--* *$|| -i file.cpp
egrep [@[:alnum:]]+(\.com) patternNpara.txt
(ssh yourname@yourmachine grep uploadRate= /root/yourscript)
... | sed -E s|(://[^/]+/).*(-[0-9]+)\.html/.*|\1\2|
subprocess.Popen([sys.executable, GetAlexRanking.py, url])
*/1 * * * * TEMP=$(digitemp_DS9097 -a | grep -i sensor | awk {print $7}); sed -i -r 14s,>[^<]*</,>${TEMP}</, /www/index.html
awk -F, /HELLO/{ $3=" NEW, "$3;}1 OFS=, infile.txt > outfile.txt
vim ~/.zshrc
awk -F [:<>/]+ { n = $1; getline; print $2 ":" n ":" $1 }
df --total | tail -1 | awk {print $2}
java -jar java-cup-11a.jar -parser mj -dump src/mjparser/mj.cup > javacup.dump 2>&1
grep -Po \S*(?=-\d+$) file
when: {{ item.custom }} == True

for u in $(<temp.txt); do echo $i processes:; pgrep -fl -u $u; done
awk BEGIN{FS=OFS=":"}NR==FNR{a[$2]=$1;next}{$2=a[$2]}1 city.txt user.txt
awk {sum4 += $4; sum5 += $5} END {print sum4/NR, sum5/NR} names.txt

nmap 192.168.0.0/24 -sU -p 44555 | grep -B3 open | egrep -o ([0-9]{1,3}\.){3}[0-9]{1,3} > output.txt
curl -o Downloads/$FILECATNAME $DLADDR 2>&1 | tee $LOGFILE
find . -name 1.txt -exec dirname {} ;
fg
perl -p -i.bak -e m/"DP_SESSION_ID"/ && s/808/900/g filename
( git clone https://github.com/Study-Master/Java-WebSocket.git /tmp/socket && cd /tmp/socket && mvn install -Dmaven.test.skip=true )
find . -name *.t1 -exec rename s/\.t1$/.t2/ {} ;
awk NR==FNR{a[$2]=$1; next} ($1 in a){$1=a[$1];print;next} {print "NOT FOUND"} file2 file1
sed -i -e s/expose_php = On/expose_php = Off/ /etc/php/php.ini
du -ch $file_list | tail -1 | cut -f 1
tr -dc character-set < file | wc -c
echo $abc
find . -type f -exec /path/to/fixNames.sh {} ;
awk -F}, {for(i=1;i<=NF;i++){print $i}} file.json | awk -F"[:,]"? $4>"2013-01-01"{printf "%s:%s:%s\n" ,$2,$4,$8}
ls -la

composer create-project laravel/laravel your-project-name
sed -i.bak -r s/([0-9]{4})-([0-9]{2})-([0-9]{2})/\2-\3-\1/g file
sed s/\([0-9]*\)-\([0-9]*\)-\([0-9]*\)/\3\/\2\/\1/g file
printf true\n%.0s $(eval echo {1..$count})
fileInput[strlen(fileInput)-1]=\0;
awk $3>3 inputFile
if (( $
javac *.java
find /home/mywebsite -type f -name *.php -exec grep -l base64_decode {} +
tr -d [:alpha:] \n < $fileDoc | wc -c
awk -v dt=$date BEGIN{FS=OFS=","}{$1=dt}1 inputFile
finger -s testuser1 testuser2 testuser3 | awk {print substr($0,1,31),substr($0,46,14)}
echo sad ads ( this should come | awk -F[(]  {print $2}
E-source my-env.sh
ls -ltr /proc/$$/fd
command1 || command2
crontab -e
if [[ a == 1 ]] ; then
awk { a[$2]=a[$2]+$1;} END{ for( idx in a){ print idx,a[idx]}} file*
grep -oPh \s.+\|\s+OK\|\s+INFO\|\s+\[CATLG myfile.log
bind "R":self-insert
grep -rnw . -e text > ../files.txt && mv ../files.txt test/files.txt
awk NR==FNR{a[$2]=$1;b[$2]=$4" "$5;next} {sub(/.*:/,"",$2); $3=$1" "$3" "b[$2]; $1=a[$2];}1 file1 file2
awk 1 file
java -cp /home/bram/Downloads/jmagick-6.6.9.jar HelloWorldApp
var = value
ssh server1 df ... && !/^[a-zA-Z]/...}}'
awk -F| !x[$2]++
Set USERNAME=test
os.system(here some code you use to execute in Terminal)
export FOO=bar

awk -F, {split($3,ary,/:/); print ary[2]} input

[^_]+_[^_]+_[^_]+_(d+)
[ $
awk $1~/^1/{print $2} file.txt
(A || B) && (C || D) && (E) || (F)
send $(THING)\c
for file in my*; do mv ${file} ${file/my.fi.name/new.file.link}; done
cat this_file | sed :a;N;$!ba;s/\n\([a-z]\)/ \1/g > that_file
cd /usr/local/src/netqmail-1.06 && make setup check
grep -m1 # DESC $line | cut -c 9-
echo 1 2 3 4 5 6 7 8 | sed -e s/ /%20/

awk {gsub(/\|g/,"")}8 file
awk /start_here/{f=1} f; /end_here/{f=0} file
echo `git add -A && git commit -m Added license headers`
ret = shell(C:\Program Files (x86)\my application\application\bin\app.exe background, vbNormalFocus)
:args *.tex **/*.tex
sed -i.bak /broker/r _temp file.xml
awk BEGIN{print "FD1" >"/dev/fd/1" ; print "FD6" >"/dev/fd/6" }
exec(myscript.sh);
rev filename | sed s/;/-;/ | rev
df -Ph | awk { print $4 }
p4 login -s 2>&1 | find gg
tr -dc [[:print:]] <<< $var
/Users/username/Library/Enthought/Canopy_64bit/User/bin/

awk END {print} RS= output.dat
awk {print $0+0}
rm ./-myfile.txt
copy /B SourceF_02262014* TargetCurrentFile.xlsx
if [ ... ]; then ...; else ...; fi
echo 3.11.0.17.16 | awk -F. {printf "%s.%s.%s-%s-generic\n",$1,$2,$3,$4}
cp exectestB.sh exectest.sh && exec ./exectest.sh
(wc -l < email.txt) | tr -d  )
echo $variablename | sed s/position:/\npostion:/g | cut -d/ -f 1| cut -d   -f 2 | sed /^$/d
awk -F ['/] {for (i=3; i<=NF; i+=3) if ($i<10) next; print} file
diff <(cut -d, -f1 file1) <(cut -d, -f1 file2)
cat fileA fileB | sort -t$\t -s -k1,1 | awk -f script.awk
awk -F: {printf "%s %s",$2,ORS=NF?"":"\n"}END{print "\n"} file
LC_ALL=zh_CN.utf8 sort -t , -d -k 2 test.csv
grep -FHr <?php preg_replace("/.*/e" *
sed -i /software/ s/setting:[^,"]*("[^"]*")?[^,"]*,/setting:,/ $fileName
sed /[0-9]{3}/d filename.txt
gem mail
sudo ln -s /usr/sbin/node /usr/local/bin/node
char **cmdsHistory;
awk {if ($2!=a) {print $2"\t"$3"\t"$1} else {print "\t\t"$3"\t"$1}}{a=$2}
ls file* | xargs -n1 sed -n 1{x;d}; /25/{x;p;x;p;q}
find . -type f -name *.gz | xargs zcat | wc -l
awk !x[$2]++ file.txt
awk NR==FNR{ if( $1 in a) next;a[$1]=$2;next}{$0=$0" "a[$1]}1 file1 file2
program | awk /pattern/{exit}1
| awk { SUM += $1; SUM2 += $2} END { print SUM " " SUM2}
sed -e s/^${PATTERN1}$/${PATTERN2}/g ...
If the interval parameter is specified without the count parameter, the iostat command generates reports continuously.
javac foo.java | tee output.txt
find . -type f | egrep -i [-~&@#<>;:!^,_] | tee temp.txt
your command | awk -F: $2>=10
make install >/dev/null && update-initramfs -k all -u >/dev/null
awk -F, NR>1{for (i=2;i<=NF;i++){sum +=$i}if (sum>0) print $0;sum=0} csv
printf %.2048s\n, $2
echo dot1dTpFdbPort[00:02:6f:d9:16:ca] 12 | sed -e s/^.*\[//g -e s/[][\:]//g
sed -r s/href="([^"]+)" >[^<]+/href="\1" >\1/ file
[ ! $BASH_VERSION -a -x /bin/bash ] && SHELL=/bin/bash exec /bin/bash
--extraintf rc --rc-quiet
git symbolic-ref -q --short HEAD || echo HEAD
for dir1 in */
zip file.zip file.csv file.pdf file.txt
rsync -avz ~/path/to/Directory1/ ~/path/to/Directory2/
sed -i /{.*$word.*}/d ./file.txt
chsh -s $(which bash)
[ -n $var ]
if [[ $CWD = /var/www/vhosts/* ]]; then
find -L . -name . -o -type d -prune -o -type l -exec rm {} +
awk -v RS=, /TABLE/&&/CREATE/{print $NF}
history | awk {print \$1-$HISTCMD, \$0}
find . -name pattern_A ! -name pattern_B
echo $a | tr [a-z] [A-Z] | awk -v RS=, -v myvar=$b /TABLE/&&/CREATE/&& $0~myvar {print $NF}
folders=(folder*); echo ${folders[@]}
export GMAIL_USERNAME=abc@bah.com
find /path -type f -perm -u=x -print | awk -F/ { rec=$0; sub(/_v[0-9].*$/,"",$(NF-1)); if( $NF == $(NF-1) ) print rec }

find ! -name . -maxdepth 1 -type d | xargs -I {} sh -c find {}/{} -maxdepth 1 | xargs -I [] echo "mv [] {}"
rpm --verify apache2 > tempfile && awk -vrc=$? {printf "%s %s %s", $1, $NF, rc} tempfile
grep \\$ file1 | wc -l
sed s/\s/\n/g plaintext.txt | grep http:
awk -F" NR==2{print $2}

bash curl.sh -d Remote -a Moz 123 -r http://localhost http://www.google.com/
if (getcwd, sizeof(cwd) != NULL)
echo -n 0: ; asterisk ......
python mapper.py < dataset.csv | python reducer.py > output.txt
IFS=/ echo ${array[*]}
sed -n /dependencies/, /}/ p t|grep >=
wget twitaholic.com/top100/followers/ | grep -o @[^<]*
grep -Fof <(tr   $\n < file1) file2 > results.txt
echo $(echo '!b')
/root/public_html
declare -i L; declare -i M; L=`tput lines`/2; M=$L-1; for (( c=1; c<=$L; c++ )); do echo; done; tput cup $M
echo $@
groupadd: Directie\r is not a valid group name.
readarray -t TIDs < my_ID_file
curl --header Authorization: Client-ID $YOUR_ID https://api.imgur.com/3/gallery/hot/viral/0.json
awk /\[/ temp.txt > out.txt
export PS1=\[$BLUE_BOLD\][\A]\[$GREEN_BOLD\]\u:\[$RED_BOLD\]\w\[$YELLOW_BOLD\]\$(parse_git_branch)\[$NORMAL\] > 
tar -zcf data_${machine}.tar.gz /tmp/data && echo DONE
tar tvf mysql-connector-java-5.1.29.tar.gz
/usr/bin/diff <(find . -type d ( -name store_sitemap ) -prune -o -type f -exec md5sum {} ; | grep -v bidorbuy.log) /root/scripts/forum_checkum_original.txt
awk BEGIN{FS=";"} {for(i=1;i<NF;i++) if (i<26) printf $i FS}{print $26} file
awk -v start=$(head -n 1 small) -v end=$(tail -n 1 small) -f script bigfile
for token in ${stringTokens[@]}
| ( strace head -n 1; tail )
complete -F XXX g
curBatch + 1)) * $elePerBatch))
grep <strong>First ascent:</strong> | sed s/.*by \([^>]*\)<.*/\1/
awk (NR>1){{a[NR]=$0;if($0~/<\/ABC>/){for(i=NR-4;i<=NR;i++){print a[i]}}}} input.txt
echo Hello Holly. | python -c import sys; print [line for line in sys.stdin]
javac -cp jar/A.jar:jar/B.jar:jar/C.jar:jar/D.jar:. MyFile.java
perl -MPOSIX -e print POSIX::strftime "%Y%m%d\n", localtime((stat $ARGV[0])[9]) yourfile
import sys; print \n.join(.join(chr(ord(char)+3) for char in line.strip()) for line in sys.stdin)
sed /192.168.1.2/s/$/ myalias/ file
java -cp /home/shbash6/astyanax/astyanax-examples/build/libs/*:/home/shbash6/astyanax/astyanax-cassandra/build/libs/*:/home/shbash6/astyanax/astyanax-core/build/libs/*:/home/shbash6/astyanax/astyanax-thrift/build/libs/* com.netflix.astyanax.examples.AstClient
FOO=42 bash -c echo "$FOO"
ls [bd]
(romanConvert params)
export PATH=$PATH:~/bin
sed -i -e 1i$IPADDR   $1\ /etc/hosts
open my $fh, <, input.txt or die Couldn't open input.txt: $!;
awk NR==FNR{s[$1]=$2;e[$1]=$3;next}$1 in s && $2 >s[$1] && $2 <e[$1] file1 file2
call ant_batch.bat
echo $var1 | sed s/:[^,]\+,\?/ /g

python --version >> path.log 2>&1
awk NR==FNR{ if($1 in a) a[$1]=a[$1]","$2" "$3; else a[$1]=$2" "$3;next;} {n=split(a[$1],arr,",");for(i=1;i<n;i++){split(arr[i],b," ");if( $2 > b[1] && $2 < b[2] ){ print $0;} }} file2 file1

sed -i /groupname/ a\'newuser' \ \ /path/to/file
. ./foo2.sh
grep foo !(*pcap*|*gz*)
pgrep -lf proc_.* | awk {print $1} | xargs kill -f
* * * * * /home/user/public_html/mailer.php
sed -i /^INSERT INTO/! s/string/varchar(30)/g
SECRET_KEY: my_secret_key
true | cd /
rewrite ^/tag/example/(d*)/?(.*) /example/$1/$2;
python $(dirname $0)/foo.py
if [[ $chk =~ /fios-plans.html ]]; then
sed s/[^,]*/$((&+400))/3;s/.*/echo "&"/e file
cd [file dirname $argv0]
/path/to/php somefile.php
awk -F, NR==FNR{PATS[$0]++;next}$1 in PATS b.txt a.txt
int main ( int argc, char *argv[] )
seq 10 | parallel awk '{...}' file{}.txt > file{}.out
EXISTINGFILES=`find . -type f -name dropbox-backup-*.tar.gz`
var userOutput = eval(( + userInput + ));
awk BEGIN{FS=OFS=","}{sub("[^.]*.","",$3);print}
sed -e :a -e N;$!ba -e s/\n/ /g file.txt
awk NR==1{print $1} /etc/*release
eval $(echo $QUERY_STRING|awk -F\n {for(i=1;i<=NF;i++){print $i, "\n"}})
(date +%a %b %d)
sed -i.bak 34s/.*/\$smtpServerAddress      = '${DOMAIN}.com';/g $PATH
sed -i.bak s/127. // dl.txt
sed 1cApricot prova
bash: ./runScript.bash 8000: No such file or directory
ssh -n $1 cd $projectDir;./startBatch.sh $2 &
{1:0:2}
sed -n 1293,$ p yourfile | grep xyz
sed s/<enter|return>//g
sed -e :a;N;$!ba -e s#<file.*</file>#<sometext>\nvalue1\n</sometext># file
Get-Content -Path $logFile -wait | %{if($_ -match $filter){Callfunction}}
a || b && c
p = subprocess.Popen([script, wl_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
awk /[0-9].*[0-9]/ && /[a-zA-Z].*[a-zA-Z]/
history[size++] = inputBuffer;
test.sh > file
grep -o ,[A-Za-z]
read undeletefile
sed /^[[:space:]]*ssid="$SSID"[[:space:]]*$/,/}/s/^\([[:space:]]*psk="\)[^"]*/\1$PSK/ wpa.txt
echo vif         = [ 'ip=1.2.3.4, mac=00:00:00:00:00:00, bridge=eth1', 'ip=5.6.7.8, mac=11:11:11:11:11:11, bridge=eth1', 'ip=9.1.2.3, mac=22:22:22:22:22:22, bridge=eth1' ] | tr -s [,' \n | grep ^ip= | cut -d = -f2
(date +%Y)
dmesg

sort -s -n -k 1,1
(find /var/www -maxdepth 2 -mindepth 2 -type d -name ${search})
pcregrep -M (foo.*(.*\n){0,4}.*?bar)?(bar.*(.*\n){0,4}.*?foo)? filename
awk FNR==NR {a[NR]=$3;next} FNR%2==0 {$3=a[FNR]}1 firstfile secondfile
cd $(bundle show gem)
bind -m vi-insert "{" "\C-v{}\ei"
awk $1=="ice" && $2=="cream"{print FILENAME;nextfile} file1 file2 file3
\C-x": ""\C-b
sed s/,/-/5 yourfile
exec(php -l .$tmpfname,$error);
cat your-html | sed -e s/\<input.*type="text".*\>//g | sed -e s/\<input.*type="password".*\>//g > new.html
puts `ssh -o StrictHostKeyChecking=no -i keyfile user@host sudo cat file | awk '/^server/ {print \$2}' | sort -u`
pnmtojpeg bla.pnm > bla.jpg
dos2unix
sed -n /^Test/,$p oldfile > newfile
sed s/^[[:blank:]]*//;s/[[:blank:]]\{1,\}/,/g
sed -n /^$date/,\$p filename
python filename.py | mailx -s Subject mail@mail.com
while [ ! ${finished} ]

escape ^@^@
mkdir -p build/iphoneos/$(basename $PWD).txt
tar -zxvf mysql-connector-java-5.1.29.tar.gz mysql-connector-java-5.1.29-bin.jar -O > /opt/tomcat/lib/mysql-connector-java-5.1.29-bin.jar
cut -d/ -f4- <<< $PWD
( X1=foo; X2=bar; X3=baz; command1 && command2 ; )
system jade --watch --pretty index.jade
Runtime.getRuntime().exec(new String[]{/path/to/script}, env);
grep -e "weather":[^[]*\[[^{]*{[^}]*"id": *[0-9]\{1,3\}
ls -d /home/inst1/ *.txt *.wmv *.odt
awk $NF<=10{print "<div style=' width: 50%; background-color: red; color: white'>"$0"</div>";next}1 file
test -n $(find . -maxdepth 1 -name "$glob" -print -quit)
sed -n /\b[0-9]\{2\}\b/p file
git rev-list --no-merges -n 1 HEAD
./my_script.sh | lp -d [PRINTER]
echo $query
awk /$line/&&c++ {next} 1 ./file.txt
for file in *.tar.gz; do tar xzvf ${file} && rm ${file}; done
: newfile : restart
awk -F; NR==FNR{a[$1]=$2;next}{$2=a[$2]}1 lookup data
sed -i.bak s/[^a-zA-Z0-9_-]*//g file
find . -type d -empty
mysql --user=$USERNAME --password=$PASSWORD --database=$DATABASE -e show tables;
awk !NF{$0=">"}1 file
Exec=gvim -f %F
sed s/,/, /4 yourfile
printline() { for f in create*; do sed -n $1{p;q} $f; done ;}
export PATH=$HOME/Library/Python/2.7/bin:/usr/local/bin:$PATH
gconftool-2 -s -t string /apps/gnome-terminal/profiles/Default/background_type transparent
git remote add origin https://bitbucket.org/your-name/your-repository
apt-get install python
gawk -v RS=^$ { print "<" $0 ">" } file
for i in {1..50}; do ping -c1 www.google.com &> /dev/null && break; done
printf %*s\n $header_len $dashes
heroku config:add aws_access_key=<your access key> aws_secret_key=<your secret key>
~/.bashrc
TARGET_DIR=~/Downloads
awk BEGIN { FS = "="; OFS = "=" } $1 == "abcd" { print $1, "new value"; next } 1 < test.txt > test_new.txt
let g:ctrlp_working_path_mode = 0
ps aux | awk NR == 1 || /PATTERN/
sed s/[[:alpha:]]\+/(&)/g file
export GIT_HASH=`git log --oneline -1`
echo some text >> somefile.txt
maxTransport = $currentTransport
awk BEGIN { FS=",?[ \t]*"; } { print $1,"|",$2,"|",$3,"|",$4,"|",$5; }
awk NR==FNR{A[$1]; next} $1 in A file1 file2 > file.new
grep match\s*=\s*true
less file:name.txt
cd /scratch/ ; `nohup sh xyz.sh>>del.txt &` ; exit
sed -i /^display/d file

perl -pwe exit if $_ =~ /^\s*2/ file
echo This___________is_a____string | sed s/_\{2,\}/;/g
find nested directory with spaces -type f -exec ./test.sh {} +
sed -n s/<title>\(.*\)</title>/\1/p input.file
cat subelement.dat | | perl -ne chomp;s/\cM//g;@f =split /\|_\|/, $_; $i=0;foreach (@f ) { print "  ",++$i,"\t:=$_=:\n"};
awk -F, {print $1} file.txt
/full/path/to/java -jar my.jar myfirst_p mysecond_p &
sed -r s/^(.{46}) /\1/ infile > outfile
awk -v a=$1 /^commonName/ && $3 != "supplied" { $3=a } { print } caConfig.txt
{ cat foo.txt; node bar.js; } > out.txt
apt-get install alpine
echo $x
find -maxdepth 1 -regex ./[0-9]* -print0 | xargs -0 -I{} mv {} newdir/{}
sed s/[]^$.*&[]/\\&/g;s|.*|/^&$/d| file1 | sed -f - file2
rm -rf yo-2
dd if=/dev/urandom of=myrandom bs=100 count=10 conv=notrunc
./passwrd.sh sohan$23
ps | awk ($1>=lo)&&($1<=hi){n++}END{print n}
sed -n /\[directive\]/,/\[otherdirective\]/ { //! p } infile
bash -c pkill -TERM java; true
sudo port install gsed
awk !a[$1]++ file
chsh -s $(which zsh)
PROMPT_COMMAND() { randPromptNum=$[ $RANDOM % 3 ]; PS1=${POSSIBLE_PROMPTS[$randPromptNum]};}
while read num line; do echo $line; done < inputfile
pkill -f python
c=0 rename s/.*/sprintf("file%02d.png", ++$ENV{c})/e *.png
awk -f util.awk -f printTrim.awk
NAME
SRCS = $(filter-out excludefile.c, $(wildcard *.c))
grep -E -x -v ${ab//,/|} Name.txt
curl -s http://whatsmyip.org >> your.file
run_cmd( rm, [-rf *], function(text) { console.log (lol) });
export PATH=$PATH:$HOME/Code
grep -oE config.{5} Lab-console.html
sed -n /INSERT INTO ax_payment/{:loop; N; /VALUES.*)/{p;d}; b loop} yourfile.txt
awk {if(NR>1){print _n-$4};_n=$4} your.file
mongo --norc --shell fake.js
sed /mike/,/\[account\]/{s/\(expdate[^=]\+=\).*/\1 2016-02-14/} yourfile
sed -n /Expected Messages : 0/{H;g;p};/.*/H;/File Process Start/h log.txt
grep -oE 192\.168\.77\.[0-9]+ dhcpd.conf
grep -F -c -f a.txt b.txt
i_*.txt
(./getdata.v7 $1 $2)
awk BEGIN {RS="[.!?] *"} {print}
awk {for(i=1; i<=NF; i++) printf("%d\n",$i)} | sort -n
sed -r s/^([^ ]+) ([^ ]).*$/\1\2/ /root/Desktop/Userlist.txt
stty -F /dev/ttyUSB0 1000000 raw
curl http://www.gametracker.com/datafeeds/?server_info&GAMESERVERID=2814889 -o output.xml
awk -F O { $2=""; print $0} file.txt
grep -E ^[[:blank:]]*[0-9*@]
(( $(date +%s%N) / 1000000 ))
IN_FILES=`find mydir -maxdepth 1 -name $dis*.xml`
mkdir -p /mk{1..22}
sed -i /^$/d yourfile.csv
mongo sm-repository2.db.qa.test.com:27017/testdb --eval db.stats()

b=`tcpdump ...`
clang-check -analyze -extra-arg -Xclang -extra-arg -analyzer-output=text
awk NR==FNR{a[$1]++;next}{for(x in a){if(index(tolower($0),x)>0)print $0,x}} fileb filea
sort -t, -k2.3 -n *csv
%ANDROID_HOME%tools;%ANDROID_HOME%platform-tools;
sed /## Screenshot/,/##/{/Screenshot/d;/##/!d}
(cat /dev/urandom | tr -dc a-zA-Z0-9 | fold -w 32 | head -n 1)
df -h | awk NR>1 {print$1,$2+0,$3+0,$4+0}
call $(VCInstallDir)vcvarsall.bat
printf <code style="color: %s;">%s</code> green ffmpeg -t $DURACION -f x11grab -s $RESOLUCION -r ${FPS[j]} -b:v $BR -i :0.0 -y $NOMBRE >> file.html
APP_main
(( $tomatch / 100 * $treshold ))
sed -i~ -e s/^>\(h[0-9]\)_\(c[0-9]\)/>\2_\1/ *.foo
sed s/[^;];//6 file
wget --referer=https://anonfiles.com/ https://cdn.anonfiles.com/1394726793646.jpg
shuf -n NUMBER_OF_LINES file
printf (entity:content %s:%s)\n $ENTITY $CONTENT
find . -name FOO* -execdir mv {} bar ;
sed -i /upload_max_filesize/s/= *10M/=150M/ php.ini
find /path -name *.md -exec perl -pi -e s/FOO/BAR/g {} ;
FILE* fp = popen( ps -U root -u root u | awk 'BEGIN { OFS="\t" } { print $2, $11 }', r);
cd $DIR
awk -F= $2+0>10 file
/home/myuser/watchDir/ IN_MODIFY,IN_CLOSE_WRITE,IN_CLOSE_NOWRITE /bin/bash /usr/local/bin/runT.sh $@/$
program.exe < content.in
sleep 5 ; reboot
[[ -f .bashrc.local ]] && . .bashrc.local
{ ratio: 32.56351, name: Classes } { ratio: 9.505888, name: Conditionals } { ratio: 36.30363, name: File } { ratio: 13.349417, name: Lines } { ratio: 19.908062, name: Methods } { ratio: 43.75, name: Packages }
touch path
ssh me@my-system mkdir -p ~/test/sub1/subsub1
export PATH=/Users...
egrep -no (\w+ ){1,3}keyword( \w+){1,2} file
PATH_INFO=/dynamic/fake/folder php-cgi /path/to/real/file.php
0 0 * * 0 sh /path/to/file
grep -oPr CMAKE_C_COMPILER_ID "\K[^"]*
find /path/to/dir -maxdepth 0 -ctime +1 -exec rm -fr {} +
eog $(awk {FS=",";if(($1>0.8)&&($2<0.2)){print NR-1"*png"}} scindex_rscindex)
sed /^$/d file
complete -o filenames -F _command mything
truncate -s 0 filename
echo $string | sed s/.*CREATESETTABLE[^)]\+TABLENAME\(.*\)/\1/g
echo foo.BAZ.bar | awk BEGIN{IGNORECASE = 1}{gsub(/[.]baz[.]/,".")}1
egrep [0-9]{1,3}(?:\.[0-9]{1,3}){0,3}/[0-9]+ /path/to/file
ls -l | grep user | cat > user
sed s~URLS~$TEXT~g imagesbu.html > images.html
sed s/#[0-9]*//;s/(\(.*\)):$/\1/ filename
ls -d .*
awk /test1/&&!/test2/{next}1 file
for dir in $(find . -mindepth 2 -type d -mtime 3); do cd $dir && zip ../$(basename $dir) * && cd - && rm -rf $dir || cd -; done
awk NR==FNR{a[NR]=$1;next}!/^>/{$1=substr($1,1,n-1) a[++i] substr($1,n+1)}1 n=5 f2 f1
ssh -N -o ControlMaster=yes -S $ssh_control_socket $HOST &
rsync --relative --files-from file-list.txt /home /home/dest
awk /begin-message/{ P=1; next } /end-message/ {exit} P new.txt
sudo find / -type f -exec grep PIP_RESPECT {} /dev/null ; 2> /dev/null
if test -d ${dir[$n]}
tr   \n < hugefile | sort | uniq | grep -v -F -f dictionary > blacklist.txt
grep ,[0-9]$ inventory
sed -e $q -e s/stuff/noun/g file
awk -vauthor=Lewis Carrol -vtitle=Through the Looking Glass {print author, title, $0 } OFS=\t inputfile
tr \t , < file.tsv > file.csv
sed s#.*<br/><br/><br/>\(.*\)<br/><br/>After you.*#\1# yourfile.xml
n=0; for i in ${array1[@]}; do printf %2d %s\n $((++n)) $i; done
if true; then foo; fi
tr 'a' 'e'
(tty &)
awk /BODY[13]/,/^$/ file
sed -n N;N;h;n;p;g;p file
mkdir foo{1,2,3}{a,b}
gcc -c -std=c99 -Wall -D$OPTIMIZE -O2 code.c
tar | xz | gpg <file
ls *.sh | while read i; do mv $i ${i%.sh}.bash; done
sleep 1 while system scp -r user\@some_ip:/home/hbase/hourly/$datehr.tar.gz /home/hbase/hourly/$datehr.tar.gz;
@count = 1

if [ $i > $arrlen ]
sh run-python-scripts.sh

cd src-dir; find . -type f -size +100000 | parallel -v ssh fooserver mkdir -p /dest-dir/{//};rsync -Havessh {} fooserver:/dest-dir/{}
grep -F -f a.txt b.txt | sort | uniq > c.txt
require rtf
info date
screen -X stuff V$(printf \r)
execlp(ps,ps, -o,ppid,cmd,cpu, (char *) NULL);
(cat test1.txt))
echo execfile("myFile.py") | python manage.py shell
rename _ . *.jpg
tail result.txt | grep -o PFM_DIP_SERVER_001:[^;]* | cut -d: -f2
echo <b>HTML Message goes here</b> | mail -s $(echo -e This is the subjectnContent-Type: text/html) foo@example.com
mysql -pyourpasswordwithoutspaces -e Your insert query goes here with semicolon;
find -maxdepth 4 -mindepth 4 -type d -iname VIP_Info* -printf $PWD/%P\n
stty -echoctl
find $DIRTY_DIR -name .AppleDouble -exec rm -rf {} ;
echo export ROS_PACKAGE_PATH=/home/forklift/forklift-workspace:$ROS_PACKAGE_PATH >> ~/.bashrc
rm noreply-unsch-*
<INPUT_FILE awk NF==2 {header=$2} NF>2 {print header, "--", $NF} | tr -d <_>:
awk -Fflow NF>1{print FS$NF} file
trap  PIPE
. scriptname arg1 arg2
dup2(fdr[1], STDOUT_FILENO);
alias randspec=rspec --seed \$RANDOM;
awk -v ldate=20140101 {split($2,fld,/_/); if(fld[1]<=ldate) print $1,$2} file

paste -d\n /tmp/file1 /tmp/file2
perl -ne $v=$1 if /\$RELEASE\s*=\s*\047([0-9.]+)\047/; $devlevel=$1 if /\$DEV_LEVEL\s*=\s*\047([0-9.]+)\047/; if (defined $v && defined $devlevel) { print "$ARGV: Release=$v Devlevel=$devlevel\n"; last; }
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\WINWORD.EXE
printf %s-%s-%s, substr($27,0,4), substr($27,5,2), substr($27,7,2)
Exec=sh -c echo login password | skype --dbpath=/home/kont/.Skype2 --pipelogin
printf %s\n $FLAG_1
sed -i -r /PART.*LLINK/,/END_PART/d file
done < $1
MY_VAR=/my/path/to/scripts
(wc -l a.txt)
shopt -s nullglob
join -a1 -a2 -o 0,1.2,2.2 -e $\t tmp1.txt tmp2.txt
sed -r s/^(.{21})A/\1 / a.pdb
zenity --list --column Name --column Age Alice 25 Bob 40 Carol 37 ...
sed /^[a-z[:punct:]]/d file
find /volumes/OD -type d ! -iname .*
ssh user@hostA cd ~/Thesis && ./generate
if (( ${
tail -f /foo/bar |nc -l -k -p 9999
for /f delims= %%a in (dir/s/b/a-d) do echo %%~ta %%a
sed /cdef/r add.txt input.txt
sed N;N;N;s/\n//g;s/[0-9]*/& / YourFile
nodeNumm= `bash -c ${nodeSayi} |grep -c ''`
for sql_file in *.sql; do mysql db_name < $sql_file; done
| tr -d \r > output.txt
sed -n /Started GET/{h;d};/Completed 200 OK/{H;g;s/\n/; /p} file
export MULE_HOME=/opt/mule-standalone-3.4.0
chown -R test:testgroup /var/www/test
. /usr/bin/tasks
[[ $var =~ ^[a-z]+@[a-z]+.[a-z]+$ ]]
readarray -t foo < <(echo foo bar; echo; echo; echo baz)
echo audio>/home/brftv/tiovar
(cd /var/lib/judgem/records/ && ls)
grep -m1 [0-9]$ file
(mktemp -t git-open.XXXXXXXX.${1
aws ec2 describe-instances --query Reservations[*].Instances[*].PublicIpAddress --output text
awk -v pat=$id $1==pat{print $1,$2,$3} $file
s=this_is_test_string1_22
find . -size -300k -name *.png -exec mv {} Ready/ ;
sed -e /^(/r fileToInsert firstFile
echo hello | tee >(rev)
perl -pe s/E\K([0-9]+)/sprintf "%02d", 1+$1/e file
sed -i  s/instance=ge/blah/g 100usr_defSemaAvail_mult_12hr.jmx
gawk -i inplace NR==1 { r = $0; print } r == $0 { next }1 file.txt
cat myfile | sed s/^\([A-Z].*\)$/\U\1/
ShellExecute(0, Lrunas, Lnetsh, Lwlan start hostednetwork, 0, SW_SHOWNORMAL);
html2text -width 10000 $1 > $1.tmp && mv $1.tmp $1
awk {$4<2?l++:g++}END{printf "< 2 : %s %\n", l*100/(g+l); printf ">=2 : %s %", g*100/(g+l)} your.file
grep -oP ab[a-z][0-9]+xyz filename
(jq -r .key1 jsonFile))
find /foo -maxdepth 1 -type f ! -name runscript* -exec ln -s {} /bar/tmp/ ;
awk -F, ++a[$1,$3] == 2 {print $1} your.file
grep [A-Z] *
[[ $thing1 -eq 0 && $thing -eq 0 && $thing3 -eq 0 && $thing4 -eq 0 ]];
grep -E ^-|-$ filename
rsync -avz --remove-source-files /local/dir/*.jpg user@ip:/remote/dir
seq 2014 2044 | sort -R
echo I am: (whoami)
perl -le$s += $_ for @ARGV; END { print $s }
curl --fail ... || exit
tr -Cd [:print:]\n\t < file
ssh user@hostname touch file -r remote-file
sed -n 3,5p /etc/passwd
cat input.txt | perl -lne ($a,$b,$c,$d,$e) = /^([^;]+);([^;]+);([^;]+);([^;]+);([^;]+)$/g; $b =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; $d =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; print "$a;$b $c;$d $e";
rm -vf $Doomed
{u]} ${itemdim[${i}]} ${tagdim[${t}]}]
find /dir -name *.gz $(printf ! -name %s  $(cat skip_files))
awk /^#Start/{f=$NF;next}   /^#End/{f="";next}   {if(f){print >f}else print} yourfile > junk
awk -F; $1!=l{c=0}{$2=++c}{l=$1}1 OFS=; input
jdk-7u51-linux-x64.tar.gz
process.chdir(__dirname);
source /usr/local/etc/bash_completion.d/git-prompt.sh
awk -F$\t BEGIN{OF=OFS}{print $1,$2,$10,$12,$14,$20} AECPRDA.TAB | head -10
idl(!quiet = 1)
(grep -F -m 1 $variable = file); var=${var
echo -n *
awk NR==FNR{for(i=7;i<=NF;i++)fld[i]=$i;next}{for(i=7;i<=NF;i++)$i=($i*fld[i])-$i}1 lookupfile datafile
sed s/\.$// yourfile
node mixpanel-extract date:$1 events:$EVENTSQUOTES
(echo $OUTPUT| sed s/[^0-9]//g)
char **args = NULL;
bash -c $(tail -1 command.txt)
subprocess.check_output([rdp.exe, /v: + server, /u: + username, /p: + password, /log, /batch])
sed -n /pattern1/{N; /\n.*pattern2/!{D;b};p}
sed N; s/)[ ]*\n{/&\npr_debug();/g
setopt complete_aliases
<condition> { <action> }
ok=`./prime.sh $rem`
file, $content, FILE_APPEND);

dup2(2, 1);
awk /^--/{$0=" ";}1 file
sed s#/# # | sed s/=/ /
nohup ./script > script.out &
{ sleep $DELAY; echo $TEXT; } | command
flock /tmp/lockfile.lck ScriptB.sh
find . -type f -exec ls -al {} ; | sort -k 5 -n | sed s/ \+/\t/g | cut -f 9
grep -q ^[a-z_][a-z0-9_-]*$ && echo true || { echo false; exit 1 ; }
awk -v patt=$searchname $0 ~ patt{ print $0}
chmod +x /home/ahmed/Desktop/run.sh
del a
second=`nm $item2 | grep -e \<T\> | awk {print3}`
* * * * * /home/ahmed/Desktop/run.sh
sed -r s/[[:cntrl:]]*$/,2012-09-03&/ sample.csv
prompt off
config.put(MaxAuthTries, 6);
grep #PEM-6-GUESTIN log.txt | sed -r s/.*user account \((.*)\).* MAC address (.*), IP address (.*)\.\*\*.*/\1,\2,\3/
alias myalias=alias myalias; <do stuff>
grep -e $pattern /home/*/.bash_history
awk {a[$1]+=$2}END{for(i in a){print i, a[i]}} inputfile
dir=~/project/xxxx/
{ read var1 ; read var2 ; } <data
java Main $PARAM01 $PARAM02
git reset --hard [HEAD]
run_cmd package upload -c '$CLUSTERS_PKG'
zip -r zipfile * -x dir1/* dir2/* dir3/*
awk 1; END {if (NR <= 2) print "another line"} file
export BC_ENV_ARGS=$HOME/.bcrc
find . -type d -exec ls -d {} ;
sed -n /ANS_LENGTH/s/[^=]*=\(.*\)/\1/p log.txt

grep -L keyword $( find /start/path -type f )
echo $LOAD | sed s/average/averages/
[[ $line == *>: ]]
echo abc-vcu def | grep -F -w abc.vcu
sudo apt-get install tcpdump
cmdInstall = %comspec% /c systeminfo /s  & addr1 &  | findstr /C:Install Date
echo $result | mailx -s KLON ILK BILDIRIM SONUCLARI $MAIL_LIST
export PATH=/bin:/usr/bin
curl http://...
dir /b /a-d |repl ^[^(].* ren \q$&\q \q(S)$&\q xa >renfiles.bat.txt
system(sudo, -u, user, touch, @list_of_files);
find dir -name *.* -print | rev | cut -d . -f1 | rev
echo <pre>$out</pre>;
awk {/pat/?f++:f=0} f==2 file
let bmi=$total_weight/$total_height
sed :a;$!N;s/CELL\n/CELL/;ta;P;D file
awk -v OFMT=%0.2f BEGIN{FS=OFS=";"}!(NR%3){print $1,$2,$3,$4,($NF+sum)/3;sum=0;next}{sum+=$NF} file
paste -s file* -d, | sed s/^/thisistheresult/
logcat -v time -f /dev/kmsg | cat /proc/kmsg
ash!/bin/sh -e
sort inputfile | uniq -c
[ -c /dev/ttyACM0 ]
xterm -title App 1 -e mycommand; mysecondcommand
rm -f temp.files;ls -1 *.log > temp.files; cat temp.files | sed -r s/(.*)-[0-9]{4}(-[0-9]{2})+\.log/cat \1* >> \1$(date  +-%Y-%m-%d-%H-%M).log/ | uniq | sh; xargs rm -rf < temp.files; rm -f temp.files
virt-top -b -n 1
status || return
awk $2~/^(23|17|21|1)$/ file
egrep ^.{42}foo
awk $0=length($1) FS $0 file | sort -nr | sed -r s/^\S*\s//
sed -i /OPQ_3\|OPQ_4/s/ABC_1/XYZ_2/ file
./my_script.sh param1 param2
v([0-9]*).([0-9]*)-.*-?([0-9]*)-(.*)
gdal_merge.py -o World_SRTM4.tif SRTM_*_250m_TIF.tif
awk -F_ NF > 3 {print FS $(NF-3) FS} file.txt
seq 5 15
echo hello >> log.txt 2>&1
awk $1=="string" {print $2} file
xpath $f //bad/objdesc/desc[$i] > $f.$i.xml
./yourscript.sh 2> /dev/null
( nc -l 1234 & echo $! > /tmp/myprog_kill_pid ) | myprog; kill $(</tmp/myprog_kill_pid); rm /tmp/myprog_kill_pid
echo l=l.split('\\n')
tr -d " < input > output
mv $file zzz - $file - copied $DATE.wav
ctags -R --exclude=node_modules --exclude=.meteor --exclude=packages/*/.build/
sed -nr s,^//[^@/]*@([^/]*)/.*,\1,p
for i in {0..40}; do let r=$((i+1)); mkdir v${i}v$r; done
command1 | command2
start cmd /c java -jar app.jar ^> log1.out
awk {print $1,$2,$3,"\t",$4,$5} file|column -ts$\t
cat -vte file
last -a -n 100 | grep ^cvc
:set fileformat=unix
calc 9 + 10 < /dev/null
for file in *; do echo $file; mv $file ${file:3}; done
49 bytes (49 B) copied, 0.000134028 s, 366 kB/s
ps -fu user | grep matching_strin[g]
t=0
PATH:~/Library/Enthought/Canopy_64bit/User/bin
sed s/[^;]*/YEAR/ file
System.exit(0);
|find /v /i sample
last -F | grep -v still logged in | cut -d   -f1
AppLaunched=cmd.exe /c abc.bat & setup.exe
GET /projects/:id/repository/archive
seq 1 10 | parallel matlab -singleCompThread -nodesktop -nosplash -r "test({},43))"
joulesFinal=`echo $joules2 * $cpu | bc`
echo PATH $PATH $PATH
ls |tee /dev/tty |grep dir
version = shell_exec(dpkg -l myprogram 2>&1 | grep myprogram);
awk FNR==1 {if (/^#/) {print;getline};print "#"$0;next} 1 file
~/.rvm/bin/rvm 2.1 do bash script.sh
egrep -oh ([A-Z]+)_([A-Z]+)_([A-Z]+) -R /path | sort -u
echo This is a file > ${varpath}/${varfile}
sed -n s/[^\/]*\(\/[^\/]*\/\).*/\1/p file
cat <<EOF >> brightup.sh
grep -oP (Host.*down|Host.*up)
sed -n 4,8!{p;b};n;p file
grep SCF Done $1 | cut -f5 | cat -n | sort -k 2
HOME/.oh-my-zsh
cat -vet yourfile
echo put file.txt | sftp -b - servername &
splot <awk -f addblanks.awk .filename(tempi) notitle with pm3d
awk BEGIN {RS="";FS="\n"} /^degree1\n/ {c++; print $0 >"output-" c} query.txt

echo $string | tr .-+§ D_P-
arrchar=( $(fold -w1 $myfile | sort -u) )
awk f; /Message/ {f=1} file
wget -S -O export_classement.html http://pro.allocine.fr/film/export_classement.html?typeaffichage=2&lsttype=1001&lsttypeperiode=3002&typedonnees=visites&cfilm=&datefiltre=
awk -F [|][|] -v OFS=, {$1=$1}1
groff -mtty-char -Tutf8 -man -rHY=0 /usr/share/man/man1/man.1
find /apps/dir -type f -printf %f\n
command -v timeout
awk something <<< $temp
-exec sed s/foo/bar/g {} ;
for ((i=$2; i<=$3; i++)); do
sed -e /,$/{s/\( myword.*\)\(,\)$/\2/; ba} -e s/\( myword.*\)// -e :a inputfile

sed -i  ${end}s/\( %.*\|$\)/ \\cbend{}\1/ $OUT
perl -lne /^115,55/ ... /^\d/ and /^,123:400/ or next;print $ARGV;close ARGV *udr
export PATH=$HOME/.local/bin:$PATH
awk {gsub("[.]", "D", $0)}{print $0"]"}
sudo sh -c echo "dotslash ALL = NOPASSWD: /opt/lampp/lampp" > /etc/sudoers.d/dotslash
unzip test.zip *.jpg
bash run.sh
paste -d, <(cut -d, -f 3,7 f1) f2
tar -zcvf wp-content.tar.gz ./wp-content
`nohup tcpdump port 389 -i bond0 -s 0 -w /tmp/capture.pcap > nohup2.out 2>&1&`
echo 1,2,3 | rev | cut -d, -f 1
cat sample.txt | sed s/.*\(\/namespace\/media\/.*-sync.xml\).*/\1/g
diskpart /s diskpart.script
sed 11s/}[ ]*$/ip_address;}/ named.conf
cd ${scanresult}/${tempdir}
select count(*) from table
grep -v -F -f <(grep \<header\> masterfile | cut -d  -f2) tempfile
sqlite3 db.sqlite SELECT computer_name FROM machine WHERE serial_number = "C02JT0XXXXXX";
cat <your file.dat> | sort -n -k 5,7
find -L . -type f -name *.txt -exec bash -c echo "$0" "${0%/*}/PrependedTextHere${0##*/}" {} ;
paste a.txt b.txt | sed -n /\([0-9]\+\)[[:space:]]\+\1/p > c.txt
alias -g lafi=`ls -rt | tail -n 1 | tee >({ printf "last file: "; cat; } >&2)`
sed s/\[1234([[:digit:]])[[:space:]]#[[:digit:]]\][[:space:]]//g file
skip updating files that exist on receiver
CFLAGS=-c --sysroot=$sysroot
cmd.lines
find /shared/Simulations/.
echo 1 2 3 5 7 9 | sed s/ /\n/g

sed /^[0-9]\{1,2\}$/! s/^/#/ INPUTFILE
returncode = subprocess.call([rsync] + folder_arguments)
mongoimport -d myDB -c myCollection --drop --file file.json
sed s/[[:blank:]][34]:[^[:blank:]]\{1,\}[[:blank:]]*/ /g YourFile
for i in $(ls -lrth /var/log/myapp/ | awk {print $9} | head -n -10) ; do echo $i ; done
awk {$1="" print $0}
awk -F| NR==FNR{a[$0]++;next} !(a[$0]) <(tr -s | < 2.txt) 1.txt
sed /^START.*/,${s/banana/stackoverflow/g} inputfile
DESCRIBE table_test;
(awk NR==271{for(i=1;i<=NF;i++)if($i=="Lost")print $(i+2)} filename.txt)
find [...] -exec <command> {} ;
awk BEGIN { FS="[(|)]" ; OFS=""} /\(.*\)/ { for (field=2;field<NF;field++) {print $1,$field ;} ; next ; }1
top -b -n 1 > t.$i
date +%B %Y --date=$(date +%Y-%m-15) next month
sftp buildUser@myserver.com -b batchfile
php -r shell_exec('sleep 10 > /dev/null &');
ffmpeg -i my video file.mov
bash -c sleep 10 & echo $!
cut -d. -f1-4 inputfile
java MyCode Hello World!
[-d
find . -type f -exec sh -c tr -d "\r" < "{}" > "{}".new && mv "{}".new "{}" -- {} ;
tr -C -d 0-9. <<<ftp> 8.591220.98disconnect
output = %x(
cmd=( sed -n /]/{:a;n;/}/b;p;ba} $var_path )
sed -e /^ *start) *$/ { :b; N; s/\( *\);;/\1my_command_here\n&/; te; bb; }; :e
fuser -k 8000/tcp
temp_list=( $(grep [a-z] failedfiles.txt) )
nohup python manage.py runserver 0.0.0.0:8000 &
find . -type f -newermt 2014-03-30 ! -newermt 2014-04-01 -exec bash -c f="$1"; n="bc.${f##*.}"; mv "$f" "$n" - {} ;
echo $(date +%Y%m%d%H%M) - ($(date +%M)%5) | bc
[[ $1 == -p ]] && [[ -d $2 ]] && printf %s\n page ${3}
xclip -o | sed -e s/^/#/g -e $s/$/\n/ > TMP && sed -i 1r TMP den && rm TMP
export PATH=$PATH:/Applications/XAMPP/bin
sed s/^copy \([^(]*\)($/hello \1\ncopy \1(/
awk -F\t $9 ~ "missense" || $9 ~ "nonsense"  input > output
ps -Ao %cpu,%mem,user,comm
awk -F: $2 > 0 { split($1, a, "."); print a[5]} file
find . -name foo.xml -print0 | xargs -I {} -0 xsltproc -o {} transform.xsl {}
echo #!/bin/bash
if [[ $(date +%k%M) -ge ${!BLOCK1FRAN} ]]; then whatever ; fi
curl -o ./filename -k https://github.com/jdfwarrior/Workflows.git
sed s/.*[.]// input | sort | uniq -c
SELECT (whatever operations you gonna do) FROM dual WHERE (select sum(quantity) from Table 1 where order_number = XXXX) = (select sum(quantity) from Table 2 where order_number = XXXX);
sed /^user1/d filename
if [[ $var == OK* ]]; then
(echo $zone | rev)
awk {l=substr($0,1,10);r=substr($0,11);gsub(/n/,"m",l);print l r} file
echo $val  
truncate -s 2KB file
awk BEGIN{FS=OFS="|"} {t=$1; $1=$2; $2=t; print}  input_file
sed -i 1 s/^.*$/NEW FIRST LINE/ yourfile
(grep -Hrn $1 pwstore.txt)
hash -r
sed s/:/ /2
perl -nle print $1 while /([0|1]\.[0-9]{0,2})/g
sed s/\([^ ]*\) \([^ ]*\) \([^ ]*\)/\1 "|\/usr\/sbin\/rotatelogs \2_`date +%m_%d_%Y` 86400" combined/
C:\..\psql.exe -h my_server_host -U usr -c CREATE DATABASE test; postgres
wget http://rubygems.org/downloads/modernizr-2.6.2.gem
awk -F[._] !a[$2]++ file
set-option -g renumber-windows on
shopt -s nocasematch
C:Program FilesMySQLMySQL Server 5.5my.ini
{ echo -e ID\tName\tJob\tPhone\tLocation && grep -n -i . $HOME/$DATAFILENAME | sort -k 2 -t $\t;} | column -ts$\t
stty echo
awk /\r$/ && length < 13 {sub(/\r$/,""); printf "%s  ", $0; next} {print} file
paste <(find . -maxdepth 1 -printf %M %u %c %p\n) <(find . -maxdepth 1 -exec du -s {} ; | cut -f1 ) | column -t
(printf %.0f $(echo scale=8;100/$MAX*$RESULT | bc))
ln -s your/dev/directory/ dev
find **path** -follow > /dev/null 2>/tmp/symlinkFiles && cat /tmp/symlinkFiles | awk {print $4}
grep -Fwf file2 file1
awk NR==1 { $0=substr($0, 1, 52000) } 1
scp yourFile someUser@somehost.com:/someDirectory/someFilename
{MY_DATA_VER:-1}
read month day < <(date -d 2 days +%m %d)
read -d -s -n1
eval $cmd >/dev/null 2>&1 &
arp -a
echo May 5 2014 | cut -d  -f2
ffmpeg ... >output.txt 2>&1
<a[^>]\+href[ ]*=[ \t]*"\(ht\|f\)tps\?:[^"]\+"
awk !a[$1]++ file
echo ${BASH_SOURCE[0]}
dbstop in myFun.m at 224 if ~exist(x,var)
complete -f -X *.@(hi|o) vim
ssh user@demo.server.it mysqladmin -uroot -pmypass create test,
(dirname $(readlink -f $0))
find -type f ! -name *\.c -exec rm -f {} ;
pgrep -qf prog.bin
sed \#org.ops4j.pax.url.mvn.repositories#r /local/java/jbossfuse/6.1.0/etc/patch-fuse org.ops4j.pax.url.mvn.cfg
(ls Downloads/*.zip 2>/dev/null)
shopt -s nullglob
echo $1 $2 | awk {div=$1/$2; printf"%0.2f\n", div }
apt-cache search terminal | cut -d - -f 1 | grep terminal | xargs -I % bash -c echo %; apt-cache show %; echo -e "\n" > terminals.txt
if [ ! -z $(grep $STRING $FILE) ]; then echo FOUND; fi
:goto 1234<cr>
while IFS= read line; do eval $line; done < text.txt
bash myscript.sh
perl -i -lane $F[11] = sprintf("ABCDE%06d", ++$i); print "@F" file1.txt file2.txt ..
awk -f c.awk B.txt A*.txt
/bin/bash -c $(printf %q  $@)
find ./ -type f -writable
dos2unix fruit.sh
Run C:delete
exec env MY_VARIABLE=my_value ./my_script.sh
( exit 42 )
Defaults:myuser !requiretty
(ssh -l $USERNAME $HOST $SCRIPT)
alias mpsoma=mplayer http://192.168.1.1:8090
sed s/test([ab]|$)/pass/ <<< test
rename s/-[^-]+\.jpg$/.jpg/ *.jpg
sudo find . -iname *.jpg -type f -exec identify -format %w %h %i {} ; | awk {if ($1>300 || $2>300) print $3} | sudo xargs -I {} mv {} /home/simon/decent_size/
curl -u username:password http://www.website.com/content/file.zip
xmlstarlet sel -t -c //node
gnome-terminal --disable-factory -x ./setup_svrconfig > setup-server.log
mysql -e INSERT INTO tablename (colname) VALUES ('$variable')
ssh user@remote_host command1; command2; command3
*/20 * * * * xbacklight -set 0% && sleep 20 && xbacklight -set 100%
awk $5 != last; {last = $5} last=-1 input
/bin/sh -c echo cat output{1,2}
pr -s, -t -2 current.txt
awk { sum += $2 } END { printf("Total: %.2f\n", sum); } $2
grep 06 Apr 2014 catalina.logs
sed -n s!.*/\([0-9.]*\)/.*!\1!p input
sed -n /./!q;=;p input | sed N;s/\n/ /
awk -F" /sectorNumber/{x="Sector:" $2 RS} /cellIdentity/{x=x $2 RS} /\<\/Sector/{printf x} file
wget -m --user user@domain --password password ftp://ip.of.old.host
awk -F. {print $1$2} <<< 3.10.34-1-MANJARO
mysqldump -uuser -ppw database --no-create-info --skip-add-locks --skip-disable-keys --skip-triggers >dumpfiles
grep -o \w\{$n\} file
sed R bar.txt foo.txt | sed N;s/^\(.*\)\(%.*\)\n\(.*\)/\1\3\2/
ls -l | awk {print $9} | xargs -I {} cat {} | grep -o {String to search}
if [ -L $dirname]
sh env.sh
echo -e GET /ws/map/v1/search.wsdl HTTP/1.1\nHost: my.site.com\n\n | openssl s_client -connect my.site.com:443 -ign_eof
sed s/\([0-9]\)T\([0-9]\)/\1 \2/g file.csv
grep -ow [0-9]* file | awk {count+=$1} END{print count}
sed -n /^\s*#/!{p;q} file
FNR>19 && FNR<101 {$3=fld6[FNR+30]; $4=fld7[FNR+30]; $5=fld8[FNR+30]}
sed N;s/,\n)/\n)/;P;D inputfile
grep -w -i ...
curl --data key1=value1&key2=value2&key3=value3 http://domain/file
awk $1 == "Axis" && $2 == "Mode" {t = 1;} $1 == "Vibro-Rot" && $2 == "alpha" && $3 == "Matrix" {t = 0;} t == 1 && NF == 6 {print $0} file.log
perl -le while(<>){$h{$1}++ if m/^(\S+)#?/} print "$_ #$h{$_}" for keys %h input.txt
cd C:\Program Files\MySQL\MySQL Server 5.0\bin
awk {if (NR%5 != 0) {printf $1", "} else {printf $1"\n"}} file
Get-Content RAW | %{ $fn=file+$_.Substring($_.length-2)+.txt; $_ | Out-File $fn -Append; }
PS1=\342\230\[\224\357\270\] 
grep -oP (?<=/)([^/]*mp3) textfile
many commands | awk {for(i=6;i<=NF;i++){printf "%s\n", $i}}
paste file1 file2
cat asd.xml | awk { x[NR] = $0 } END { for ( i=1 ; i<=NR ; i++ ) { if (x[i] ~ /<name>property2/ ) {x[i+4]="      <current>false</current>"}print x[i] }}  > newfile.xml
sed /\[base\]/,/gpgkey=/{/gpgkey=/s/$/\$\nexclude = postgres*/;} filename
awk $1 - $3 < 0.01 || $3 - $1 < 0.01 {print $4} file
awk NR==FNR{A[$1]=$2; next} {i=int($1+.5); print A[i]+0} crd seafloor
(ncdump myfile.nc | grep var61:_FillValue | sed -e s/.*= //;s/ .*//)
sed N;/^[^\n]*\n[^\n]*$/N; /.*\n.*\n.*Possible/{$q;N;N;N;d};P;D; structure > final
cd "$d"
grep -oP Ran in \K\d+ output
for ((page=1; page<=var1; page++)); do
read -t 5 -p What is your name?
ls $L
grep ... | xargs sed -i  s@"http://"@@g
lsof +D /usr/bin | awk /tail/{print $2}
sed 50,${/^\s*PUTS/d} the_file
alias pipup=sudo pip install --upgrade $(yolk -U | awk "{print \$1}")
*/1 * * * * find /tmp/ -maxdepth 1 -type f -name #sql_*.MYD -empty -delete
read -ei ls -l; eval $REPLY
grep -i -n John file
CONDITION=@(*boss*|*mwc*|*puppet*|*nexus*)
find -name *[^a-zA-Z0-9+\-_ßäöüÄÖÜ., ]* -o -name *  *
key = escapeshellarg($_POST[key]);
sshpass -p $PASS1 ssh user1@machine1 sshpass -p $PASS2 scp file user2@machine2:/destination
sed -i s/\$username = ''/\$username = '$myUsername'/ file
find -maxdepth 2 -name Makefile -print -execdir make ;
awk -F[^ ]* length($2)<4{sub($2,"    ")}1 file
PATH=<fixed-path> find -maxdepth 2 -name Makefile -print -execdir make ;
find . -name *.bar -type f -exec sha256sum {} ;
l= wc $file | awk {print $1}
0,30 * * * 2,4 /path.to.script.to.be.run/scriptname
awk {n=split($1,array,"*"); for (i=3;i<=NF;i++) {print $i >array[1]}} input
find $folderPath -name $ext | largeRead
awk -F, BEGIN {OFS=","} {t = $8; $8 = $9; $9 = t; print}
if cat downloaded.txt | grep $count >/dev/null
mosh REMOTE -- sh -c tmux a || tmux
for (( count=$WP_RANGE_STOP; count >= $WP_RANGE_START; count=count-1 ));
npm install -g less
rename y/\W/_ *
sed 1,2d; $d file > file.new && mv file.new file
mysql -h 127.0.0.1 -u root -p redhat -H -D mysql -e select host,db from db;
sed 33rfile input
find /home/rk -type f |xargs -n100
convert source.png -alpha copy -fx #fff result.png
rhc configure-app -a TestProject20140324192518 -–deployment-type binary
xargs -I {} wget http://jira.example.com/browse/{}
sed /^\/\*/,/\*\//{s|^/\*||; s|\*/$||; b a};s/^/    /;:a filename
... | awk -F= {printf "%s",$2}
for i in $(find /mydirectory/ -type d); do cd $i && find $PWD -type f -name *.* | sort -nr | head -5 >> /mydirectory/myfile.txt; done
i] = $line
bin_PROGRAMS = mybin
edit() { $EDITOR <(sed -e s/\x1B\[[0-9;]*[JKmsu]//g < $1); }; edit
onclick=img=document.getElementById('img_1'); img.style.display = (img.style.display == 'none' ? 'block' : 'none');return false
gcc -o redelimit redelimit.c
[CT].{5,10}[
(grep -o Logs\/.*txt\")
if opt == (-m, --min):
sed -e s/\([^\\]\)\\0[[:space:]]/\1/g YourFile
ps axk-pid
find root_dir -name download.txt -exec cat {} ; > merged_download.txt
sed -e s,^,deletedwob , -e s,$, y y, WIDeletion2.txt > WIDeletion3.txt
awk -v row=2 {A[(NR-1)%row]=A[(NR-1)%row]$0" ";next}END{for(i in A)print A[i]} file
df -k /Volumes/label | tail -n +2 | awk { print $4 }
id:1:respawn:/var/tmp/server.sh
-bash: javac: command not found
sudo -i bash -c cd /path/to/dir; exec bash
while read line; do ./fileB.rb $line; done < fileA
vim -c VimwikiAll2HTML -c q index.wiki
echo 71343531834366140263241767594070376448 | awk {printf "%E",$1}
pv infile > outfile
phpunit blabla
&amp; becomes &
sed s/^.icon-\(.*\) {$/if(strpos(\$embedicons,'\1') !== false) { \$svgicons .= <<<'EOD'\n.\1 {/g input_file.txt
sed -i s/\<example(/example2(/ *.sh
. ./child.sh
awk -v n=500 { printf "%-*.*s\n", n, n, $0 } file
(awk -v term=Product_2 $1==term{print $2} products.txt)
find -name *.java ! -name Test.java
cat TextToAdd.txt FileToAddTo.txt > $$.tmp && mv $$.tmp FileToAddTo.txt
bind -P | grep --fixed-strings  can be found on  | perl -pe s/((?<!\\)(?:\\\\)*)\\C/\1Ctrl/g;s/((?<!\\)(?:\\\\)*)\\e/\1Esc,/g
echo ./Delivery Note.doc 1 | awk { command="sum -r \""$1" "$2"\""; print command} | bash
awk -v swap=$SWAP {sub(/#pointer/,swap)}1 script.sh > tmp && mv tmp script.sh
if [ -z $message ] && [ -z $predefined ]; then
sed s/^.\{20\}// logfile
awk /^[0-9]+[.][0-9]+[.][0-9][.][0-9]+/ {print $2} arp-scan-output.txt
awk {split($1,a,"/"); print $2,$3,$4 > a[2] ".txt"} datafile
myprogram | tee /dev/tty | grep stack >out
load minimal amounts of data from the input files and flush the output buffers more often
intrest=`expr $p * $r * $t /100`
[[ -d $dir3 ]] && ls -t1 $dir3
echo $out
kill -- -$(ps -o pgid= $PID | grep -o [0-9]*)
tclsh ?-encoding name? ?fileName arg arg ...?
awk {for(i=1;i<11;i++)$i="";sub(/-.*$/,"");sub(/^ */,"")}7
java mipsim -v <test1.cmd >test1.log
(ls -l | grep .json | grep -v fit-report.json | wc -l)
echo $(curl -sSL http://dot.ciel.im) | bash -s FLAG1 FLAG2 etc
find $dir -type f ! -name *.txt -exec rm {} ;
sed s/DirectoryIndex/& index.php/
AUTOSTART=default another
cat testfile | grep ^\S
awk gsub(/[@$]/,"") || 7 file
rsync --remove-source-files ${USER}@${HOST}:/files/*.txt /tmp/ftpfiles/
echo $BASH_VERSION
command = ls -al  + path
awk /MB$/{$4*=1024};/GB$/{$4*=1024*1024};{a[$1]+=$4}END{for(i in a){printf "%s %s KB\n",i, a[i]}} a.txt
xyz | awk {print $2; exit}
find $TEMP -name *.css -exec sh -c f="{}"; min "$f" && mv "${f%.css}.min.css" "$f" ;
jar cmf existing-manifest jar-file input-file(s)
ERRORSTRING=Error. Please make sure you've indicated correct parameters
-c cookie.txt
USER su -m
echo Folder doesn't exist on $machine >&2
cmd=date +\%s -d created; cmd | getline current_time
*(arg_p[b]+c) = *(chrp+c);
echo \033];Hello World\007
sed -i .bak 1s/^/#!\/usr\/bin\/env node\n/ tsunit.js
sed s/TITLE/New Title/ old.txt > new.txt
find . -name *.png |xargs -I{} echo mycommand {}
scp -q machineB:/path/to/your/file . || scp -q machineC:/path/to/your/file . || echo Sorry no file found
tf labels /collection:https://delta:443/tfs/CadsProjects *@$/DetBarShapeEngine/Main/ProjectSource /owner:*
exiqgrep -z -o 172800 -i | xargs -r exim -Mrm
grep -i $search $bookName
sed -i s/#define 1/#define 1 "${MODEL_NAME}"/g 1.txt
sed s/\(,[^,]*\),\([^,]*\)/,\2\1/ input
echo -ne Content-type: image/png\n\n
sed -i s|conf.d/\*.conf|conf.d/vhosts/\*.conf|g /path/to/file
(alias $aliascmd | cut -d' -f2 | xargs)
sed N;s/\n/ | /;s/\r//g file.txt
--textbox <(command) 600 800
whiptail --textbox /dev/stdin 40 80 <<<$(ls -l)
./my_program `ls My_FOLDER/ | sort -R | head -n 100` file_to_output
export JAVA_HOME=$(/usr/libexec/java_home)
awk BEGIN {print "[table]";ORS=""; print "[tr][td][b]#[/b][/td][td][td][b]Position[/b][/td][td][b]Nickname[/b][/td][td][b]Region[/b][/td][td][b]Level[/b][/td][td][b]Kills[/b][/td][td][b]Deaths[/b][/td][td][b]KD/R[/b][/td][/tr]"} {for(i=0;i<8;i++){gsub(/[[:space:]]$|^[ \t]+|\/img\/flags\/|-Flag-48.png/,"",$0);arr[i]="[td]"$0"[/td]";getline;} print "\n[tr]"; for(i in arr) print arr[i]; print "[/tr]";} END{print "\n[/table]";} input.txt
npm install .
. myscript.sh
:r!./shell.sh
printf %-`expr 40 - ${#b}`s %-40s\n, $a, $b
ssh root@remoteHost commands
dirname /home/files/myfiles/good.txt
/[^ -~<09>]
C:WindowsMicrosoft.NETFrameworkv4.0.30319MSBuild.exe TestApp.csproj /p:Configuration=Release /t:Package
awk -vf2=$f2 /Server N.*1p/ && !seen {print f2;print;seen=1}1 $Server > tmp
geany $(find public/javascripts/ -type f -exec awk /new_pupil_group_form/ && length($0) < 400 { printf FILENAME":"FNR" "} {} ;)
sed -i.bak -r /^webURL/{s/"[^"]+"/"www.google.com"/} sampleText.txt
export LD_LIBRARY_PATH=/usr/local/mpich2-1.0.5p4/lib:/usr/local/hdf5/lib:$LD_LIBRARY_PATH
f | tr -dc [0-9]`
sed -i s|\(kernel.shmall *= *\).*|\14194304| /etc/sysctl.conf
./script.sh | tee script.out
find . -type f -name mubunching* | awk -F[.] $(NF-1)>=5
PYTHONPATH=/Users/me/docs/devel python -m pkg.test.test_A
awk {print "INSERT INTO users (email,paypal_tran,CCReceipt) VALUES"; print "(\x27"$1"\x27,\x27"$2"\x27,\x27"$3"\x27);"} input.txt

echo mike@yahoo.com | sed s/[a-zA-Z0-9][a-zA-Z0-9]*@\([a-zA-Z0-9][a-zA-Z0-9]*\.[a-zA-Z0-9][a-zA-Z0-9]*\)/customer@\1/g
<a accesskey=j href=contrastchapter.html>Prev</a>
sed -e s/ /\\\\ /g
[[:alnum:]_-]
cp -r -fo foo bar
grep -F -f mailids maillog | grep to=<
paste <(shuf a.txt) <(shuf b.txt)
s/btextb.*?Kbtextb/changed/;
sort file |paste - - - -d,
awk -F[ :.] {for(i=1;i<=NF;i++) {if ($i=="Y") c++;}}{print c; c=0} inputfile
WORD=one ; sed -e s/$WORD//g file.txt > newfile.txt
sed -i.bak -r /^subscribe_key/s/([^']+')([^']+)('.*)/\1sub-c-123-456-789\3/ yourfile
diff <(grep -f f2 f1 | sort) <(sort f2)
sed s/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{2\}\)/20\3-\1-\2/g > formatted.csv
head -n ${i} files.txt | tail -n 1
(([a-zA-Z0-9])2 )1
ps -eo pid,etime | grep  1  | grep -v grep | awk {print $2}
FS=:;
mkfifo /path/to/named/pipe
printf %b ac s\nbc s\ncc s\n | xargs -d \n bash /tmp/test.sh
for(the_count = 1; the_count < argc; the_count++){

find Desktop/ ( -iname *.JPG -o -iname *.jpeg -o -iname *.jf[il1]f -o -iname *.exif -o -iname *.tiff -o -iname *.gif -o -iname *.bmp -o -iname *.png ) -exec cp -n {} test ;
crontab -e
sed -i.bak s/\<nchar *( *\([0-9]*\) *)/char(\1)/g file.sql
app.use(/images, express.static(process.env.OPENSHIFT_DATA_DIR+/images));
... - E - F - G <-- master
zstyle :completion:*:parameters list-colors =*=32
find /root/ -name wallet.dat -execdir bash -c echo cp "$0" "/home/backup/${PWD##*/}-${0#\./}" {} ;
. parentScript
alias mv_to_trash mv \!* ~/trash
awk !seen[$0]++ file
find /rootdir/ -name index.html -exec sed -i 1,196d {} ;
~/test.sh 2>&1 | mailx -s"Cool title" $my_email
echo `dirname $0`
b(ZW0=[0-9]+)
awk NR>=3&&NR<=5 input.txt
sed -ie s/^target=.*/target=https/www.google.com/ url.properties
yum install mysql-devel
awk -v RS=> NR>1{print $1, $2, $NF} file
java -Xmx16g -cp .:lib/* edu.cuny.util.VectorToInstancesConverter train HandednessJ48 SELECT * FROM collection1.Session1 WHERE Subj_Id!=402 and Subj_Id not in ( select Subj_id from collection1.Session2) AND Subj_Id IN ( SELECT Subj_Id FROM collection1.userdata WHERE DominantHand = l OR DominantHand = r) 12 J48
awk /File does not exist/{count[$13]++}END{for(ip in count) print count[ip],ip} local1.log
(cat ../address)
{ echo $firstname; echo $lastname ; } | somecommand
awk gsub(/\*\*\*\*/,"")==2 && $1=$1 file
awk /PATTERN/{if(f){print ""};print;f=f?0:1;next}f{printf "%s ", $0} file
augtool --autosave --noautoload --transform Desktop.lns incl /path/to/your/example.desktop set /files/path/to/your/example.desktop/Desktop Entry/NoDisplay true
... | awk -v awkvar=$email {do something with awkvar} ...
awk -F: $3 == 2 Input.txt
grep -v string1\|string2\|string3 filename
int execve(const char *program, char *const *argv, char *const *envp);
@=cd D:\ATS & D:\ATS\ATS.exe "%1"
open -a /Applications/Sublime Text.app/ ~/.profile

awk -v m=$build_message -v s=$settings $awk $file
source <(sed s/:/\\\\:g my.conf)

perl -CIOED -p -e s/\p{Block=CJK_Unified_Ideographs}/$& /g filename
ls | parallel -q sed -i s/<ga\//</g
| = 1;
grep -n needle haystack1 haystack2 | sed s/:/ +/
sed -i s/export KEY_CONFIG=`$EASY_RSA\/whichopensslcnf $EASY_RSA`/export KEY_CONFIG=\/etc\/openvpn\/easy-rsa\/2.0\/openssl-1.0.0.cnf/g /etc/openvpn/easy-rsa/2.0/vars
awk -F\t !a[$1,$2]++ && !a[$2,$1]++ file
awk -F \t FNR==NR{ a[$1] = $2; next }{ print $1 FS a[$1] } tmp1.tsv tmp2.tsv
awk NR==$r {print $0} Aenumerar
stty -ixon
find ./ -iname *.bz2 -exec bzip2 -d {} ;

xterm -e peerflix $1 --vlc
perl -pe s{&}{&amp;}g; s{<(?![?TDA/])}{&alt;}g
if ps axl | awk /[m]y_process/{ if ($6 == -10) { exit 1 } else { exit 0 } } …
/var/www/flat/app/Console/cake reminder daily_reminder | less
sed s/_.//g
find . -regex .*/foo/[^/]*.doc
(echo ${Prg} | sed s,/home/in/PL/\(.*_Data\.txt\)$,$Btr\1,)
. ./bash2.sh &
Defaults requiretty
buildarchtranslate: i686: i586
(complete -p git | awk $NF="git-local")
echo shell_exec(sh two.sh 2>&1;)
/Applications/amétiq siMed Büro.app/Contents/MacOS/siMed2
nmap -sn -oX - example.com
array=( hello world how are you today? )
mkdir /var/www/vhosts/mydomain.com/new_folder
awk p!=$4{c=$4;print "App: "$2" PID "p}1 data.txt
(awk BEGIN{RS="@"} NR==2{print $6} $SOAfile)
(expr ${pfile%.data} : ../data/${BENCH}/\(.*\))
scp -r foo your_username@remotehost.edu:/some/remote/directory/bar
sed -nr /linux/{p;G;/(.*\n){10}/q;h} file
/HELP./{if (x) close (x); x=Count++i}{print > x}
tail -n 2 filename | head -n 1
if [ -f ~/.bashrc ]; then . ~/.bashrc; fi
vim -c <command> Execute <command> after loading the first file
printf %b $foo
info ls
typeset -a list=( value1 value2 )
set-option -g default-shell $SHELL
sed s/\r$// umlauts.sh
grep -Po ^asd\.www\.\K[^.]*(?=\.com) file
chmod u+rwx,g=rx,o-rwx /the/directory/already/existing
mv xxxx !
awk -F: { printf "%014i: %s\n", $1,$2 } input.txt
sed -r /<Students>/,/<\/Students>/{/<Students>/{h;d};H;/<\/Students>/!d;g;s/(.*)<!-- (.*) -->(.*)/\1\2\3/} file
grep -Po (?<=TALB: ).*
alias ls=echo "Running ls -alh"; ls -alh
[[ -f DEF ]] && rm ABC
awk -F- $4 > 198000 {print} filename
for x in *${i}Apr*.txt; do
sed -i s/${ODA}/${YMD}/ ${HOMEDIR}/${PATH1}/nws_${VAR}_conus_daily_${YMD}.ctl
awk BEGIN{OFS="\t";} {print $1,$3,$5} infile >> outfile
find . -type f -name *.html -exec js-beautify -r {} ;
shopt -s extglob
awk {sub(/,/,"",$0); print substr($0,0,length($0)-1)} input.txt
mv 1.txt 2.txt && echo Success || echo Failure
((date | tee >( wc >&3) | wc) 3>&1) | wc
myfunction() { echo $(($1+$2)); }
echo http://bla.com|http://blabla.com | tr | \n
(grep foo flatfile.txt | cut -d / -f 1-6 | xargs -I % echo %/)
rsync *.jpg hostname:yourdir
ps -aux | awk $14>=30000 && $14<=30100 && $0~/curl/ { print $2 } | xargs kill -9
awk -F \t $3==2 && $4 ~ /add|remove/ filename
echo dis clusqmgr(*) suspend|runmqsc QMGR1|egrep CLUSQMGR|SUSPEND|paste - - | awk {print $1,$4}
egrep CLUSQMGR|SUSPEND | paste - - | awk {print $1, $4}
ssh ppuser@10.101.5.91  keyConfig $1 $2 $4 
sed -r s/(^| )"/\1``/g filename
tail -f /some/file.log | awk  $2>10 {if (!($1 in a)) print $1; a[$1]=1; system("")} > /some/filteredfile.log
egrep (^ax|sx$) usr/dict/words
git rev-parse HEAD > GitRevision.txt
for /F tokens=2,3 %%a in (netstat -e ^| find "Bytes") do set received=%%a & set sent=%%b
awk $2 > 45895 test-file_long.txt
Pattern p = Pattern.compile(Match (\S+) and (\S+) and (\S+));
perl -ne print if tr/3// >= 5 and tr/10// == 0 myfile.txt
diff -r sampleWith/a sampleWithout/a
[[ $MAJOR -gt 4 || ( $MAJOR -eq 4 && $MINOR -ge 2 ) ]]
zstyle :completion:* group-name 
cut -f2- -d; filename.txt
wget file && echo Success
sed s/^\(>.*\)$/\1 Brassica rapa/ infile
awk -F/ {print $NF} Input.txt
cat list | xargs -n 2 cp
if [[ $file =~ ^foo.[1-9]$ ]] ; ...
grep --null -lr FOO . | xargs -0 cp -t MEOW

timeout 100 ./myprocess.py
awk {$0=NF FS $0}7 file
sed -n /Development streams:/,$ s/[^ ]* *Views: *\([^_ ]*\)_.*/\1/p
dd if=<(yes foo) of=foo_200kb bs=1024 count=200
grep ^in\|in$ input.txt
sed s/\<http\(s\|\):\/\/// file

subprocess.Popen([/bin/bash, --login, -c, sudo /opt/scripts/openoffice_chroot.sh])
sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq libpam-ldap
sed $!N;s/\n/,/ filename
perl -ne $. ==40 and print file
CMD`
sed s/[^ ]* :\|,\|//g <<< $var1 | grep -o [^ ]*
/bin/dash: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), ...
sed s/  */\n/g
ipconfig /all | findstr Servers | findstr 1.1.1.1
python -c $import re\nif True: print "HELLO";
nc <server_ip> 1234 < /dev/null
\n sorted=($(sort -rn <<<${array[*]}))
top -b | grep Cpu(s) > abc.txt
find . -type d -exec bash -c cd "$0" || exit; shopt -s nullglob; f=( *.jpg ); ((${#f[@]})) && echo convert "${f[@]}" "${PWD##*/}.pdf" {} ;
insert_sudo () { zle beginning-of-line; BUFFER=sudo $BUFFER; zle end-of-line; }
/var/log/server.log: 28977
rsync -avibu --ignore-existing /home/xyz/public_html/photo/ /home/ABCDE/public_html/photo
.scan(/sd:dd (.*)/)
awk -v RS=  $0<300 file
find . -type f -exec bash -c mv "$0" "$0.txt" {} ;
awk -vOFS=| -vcdate=$(date +%Y-%m-%d)  {print cdate, $0} file
find . -name `.git` | xargs dirname
sed /VIDIO/ s/.*\(VIDIO\w*\)/ALOGI("\1");   &/ inputfile
. <(wget -O- http://a.com/bootstrap-scrit.sh)
find | grep -vFf duplicates_sorted.txt -
for a in *.mp3 ; do ffmpeg -i $a -ar 44100 -ab 80k ${a%.*} [80].mp3 ; done
find . ! -name .* -type f | wc -l
./a.out source > target 2>&1
tar -xvf xyz.tar |grep \.tar$ | xargs -n 1 | tar -xvf
find . -name *.txt -exec file {} +
mv intro_???[13579].png tempdir/
sed -n /LANGUAGE/{N; s/.*<string>\(.*\)<\/string>.*/\1/p; } Locale.xml
(tr , . <<< $result2 + $result3 | bc -l)
sed /{riak_jmx/,/]},/{ s/enabled, false/enabled, true/;} ./app.config
awk /Looking up status of/ {print} /JON8RFC-LT/ {if(a!=1){print "\t"$1;a=1}} /DOMAIN/ {if(b!=1){print "\t"$1;b=1}} /MAC Address/ {print "\t"$4} input.txt
sed -i.bak /PATH_FLOW=/s~^.*$~PATH_FLOW="file:///var/log"~
su - -c k=0; if ls | grep -q ^Desktop; then k=1; fi; if [ \$k == 1 ]; then echo 1; fi
cat -vet yourfile
/bin/cp .....
stdbuf -oL xxd -r -p | nc -u localhost 12345 | xxd
sed -e s/{0}kerberos/kerberos/ -e /some: junk/,$d
awk -v RS=FINISHED -v OFS=; $0 { print $1, $3, $2, RS } file
sed s/get_pins {/get_pins -hierarchical {proc_top_*\//g filename.txt > output
awk BEGIN { print "\<exam" }
ssh -i /path/to/private_key -oPasswordAuthentication=no admin@server_host
ls -la
awk /namenode/{print >"masters"; next} /slave[0-9]/{print > "slaves"} /etc/hosts
gst-launch-0.10 -v gstrtpbin name=rtpbin latency=100 udpsrc caps=application/x-rtp, media=(string)audio, clock-rate=(int)48000, encoding-name=(string)X-GST-OPUS-DRAFT-SPITTKA-00, caps=(string)audio/x-opus, multistream=(boolean)false, streamheader=(buffer)<4f707573486561640101000080bb0000000000,4f707573546167731e000000456e636f6465642077697468204753747265616d6572204f707573656e63010000001a0000004445534352495054494f4e3d617564696f74657374207761766501>, ssrc=(uint)3090172512, payload=(int)96, clock-base=(uint)4268257583, seqnum-base=(uint)10001 port=5002 ! rtpbin.recv_rtp_sink_1 rtpbin. ! rtpopusdepay ! opusdec ! audioconvert ! audioresample ! alsasink device=2 name=uudpsink0 udpsrc port=5003 ! rtpbin.recv_rtcp_sink_1 rtpbin.send_rtcp_src_1 ! udpsink port=5007 host=%s sync=false async=false
awk NR%40==1 || NR%40==2 || NR%40==3 || NR%40==4 file
ls $LGNAME* | wc -l
echo The .... MD5: $(md5sum xxx.jar)
echo *.{ext1,ext2}|sort -u
tail -n+3
sudo apt-get purge bash-completion
sed s/.*\ \(.*\) kb\/s/\1\ kb\/s/g
{ cat run; sed 1,2d run%*; } > c
C:WindowsSystem32cmd.exe /C  C:\Program FilesABCxyz.exe -register=abc 

sed -i -r s/^#?(PermitRootLogin|PermitEmptyPasswords|PasswordAuthentication|X11Forwarding) yes/\1 no/ /etc/ssh/sshd_config
(echo galax_report_for_Sample11_8757.xls | cut -d _ -f 4)
call([/bin/sed, -i, s/key=$/&val/, confPath])
wget --help | less -p --no-glob
(id $i > /dev/null 2>&1 ; echo $?)
PSQL=psql -p $PGPORT -h $DBHOST -d $DB -tAc 
awk /^fun2/ {a=0;next} /^[a-z]/ {a=1} a
rsync -rva -e ssh -l user@mail.com /directory/that/is/local host.domain.com:/another/remote/directory
bind "\C-t":"cd ..\n"
weblogic_.*
[[ $EnvironmentGroup =~ ^(dev|sit|uat|prod) ]] && Environment=${BASH_REMATCH[1]}
-n, --dry-run perform a trial run with no changes made
awk -F- NF<=2 file
grep redeem file1 file2 file3..
ls -ltr | tail -50
awk -F, FNR==NR {a[$1]=$0;next} {if (!($1 in a)) print $0,a[$1] ; } OFS=, <(gzip -dc f22.txt.gz) <(gzip -dc f11.txt.gz) > Output_f33.txt
find mydir -mindepth 1 -maxdepth 1 -type d -exec bash -c mv {}/* mydir; rm -ri {} ;

tail -f log.txt | cut -b 1-50
find . -newermt 2014-04-30 08:00:00 -not -newermt 2014-04-30 09:00:00 | xargs zgrep 1234567890
awk -F\t {print $5} file
(egrep -e \\ pom.xml | egrep -v -e \\$)
awk {match($0,/PASSWORD=(.*==)/,a); print a[1];} input.txt
ls ~/Music/iTunes/iTunes Media/Audiobooks
sed $variable s/4/5/ file
for file in $files
awk {ORS=(NR%6?"":RS)}1 file
awk !/^[0-9]/ {next} !/OK/ {print "BAD UNIT DETECTED:",$0} input
if [ ${x::1} = - ]
echo if (1.2>1.3) 1 | bc
zstyle :completion:* matcher-list l:|=* r:|=*
wget -qO- http://web.server/x/files.txt | dos2unix | while read file
sed -i -e s/foo/baz/g file1 file2
for user in $(w | awk {print $1}); do echo $user; done
echo **/*(.)
egrep [[:digit:]]{3,5}\.[[:digit:]]{5} file
find . -type f -newermt 2014-04-30 ! -newermt 2014-05-01
pwd >~/.place
-e, --referer <URL>
printf %s  {a..z}{a..z}{a..z}
ls -al | sort -k 6,6M -k 7,7n -r
25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?
echo 2014-05-01 01:00 | parallel --dry-run foo {}
export PS1=\w \$
p = subprocess.Popen(ls -l,shell=True,stdout=subprocess.PIPE)
if r ! . test.sh == yes
while IFS= read -r -u7 a && IFS= read -r -u8 b; do echo $a $b; done 7<$file1 8<$file2

SHELL=/bin/sh USER=clement PATH=/usr/bin:/bin PWD=/home/clement HOME=/home/clement SHLVL=2 LOGNAME=clement _=/usr/bin/env
sendEmail -f fromAddr@example.com -t toAddr@example.com -s smtp.server.com -u theSubject -m the Message -a fileToAttach
filename=`wget -q -O - http://thredds.ucar.edu/thredds/catalog/grib/nexrad/composite/unidata/NEXRAD_Unidata_Reflectivity-20140501/files/catalog.html | grep <a href= | head -1 | sed -e s/.*\(Level3_Composite_N0R_[0-9]*_[0-9]*.grib2\).*/\1/`
exit 1
grep [0-9]:[0-9][0-9]:[0-9][0-9]
sort -c numericSort 2> temp.txt
ls -la | sed -E s/^(([^[:space:]]+)[[:space:]]+){5}.*/\2/
command +=find -type f -printf %T+\\t%p\\n | sort -n
files=( /path/to/folder/*.tar.gz )

if [ 0 ]
wget <the url>
php -q script.php param1 param2 param3
cmp file1 file2 && echo Files are identical
tr \r \n <filelist97.txt
command.add(" + filepath + ");
echo `$avrohdfs concat $DIRS -`
C:\Program Files\iis express\PHP\v5.3\php.exe -f C:\htdocs\clients.php
@Powershell -NoProfile -ExecutionPolicy unrestricted -Command iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) && SET PATH=%PATH%;%systemdrive%chocolateybin
echo $STRING > string.txt
git filter-branch --tree-filter rm -rf assets/vids HEAD
rsync -avn user@server.com:/directory/ /local_directory/
perl -pe s/([^,]), (?!Inc|LLC|The|Ltd)/\1\n/g list.txt
printf ,s/PATTERN/REPLACE/g\nw\nq\n | ed -s your_file.txt
mysql -h dbserver_hostname -e truncate table schema_name.table_name
awk {print $NF} file.txt > file2.txt
sed -n -r -e /.+/{x;H} -e ${x;p}
sed -ne /Start/,/End/w outputfile -e /End/q file
find /proc -user someone -ls
msiexec /passive TARGETDIR=C:\MyInstallationDirectory /i node-download.msi
grep -oP javascript:add2BasketProd.*?jpg
cat my.log | grep -o GET /service1/api. | sort | uniq -c
for file in *.js *.css ; do gzip $file ; mv $file.gz $file; done
sed s/.*window:\(.*\)/\1/g file
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_55.jdk/Contents/Home/
echo ${SCALA_HOME}/lib/!(*actor*.jar)
echo -e 1\n2\n3\n4\n5\n | ./bin/file_name
at $1 < open /.../mysongs/sweetsong.mp3
sed -i 3d Glo*
ssh_command = %x(ssh -t -t user@ip.ip.ip.ip 2>&1)
sed -E -e s/\.([^.]+)$/.XXX.\1/ -e /XXX/ !s/$/.XXX/
sudo(nohup ./dbserver &, user=root, pty=False)
wget $url
tail -2 file.A | awk -F: {sum+=$NF}END{print sum}
if condition compound-statement else compound-statement
sed :a;$!N;s/\n/string/;ta inputfile
<your command> | xargs cat
wall <<< $message
awk 7 file
IFS= read -r -d  -n 1 -t 2 c
grep -R requests $(pwd)
parallel --gnu -n 10 find {} -name regex ::: *
~/ngrok -authtoken bbtw942UevV!Ap94JzFz 80
’n’
zcat hlr*.gz | awk {print substr($3,0,15),substr($4,3,10)} FS=** OFS=, >Op_Formatted.csv >Op_Formatted.csv
awk /policy/ {print $3} /proc/process_id/sched
echo one two three filer|sed -e s/\([^ ]\{1,\} \{1,\}[^ ]\{1,\}\) \{1,\}\(.*\)$/\1\n\2/g
curl -u ftpuser:ftppass -T {file1,file2} ftp://ftp.testserver.com
sed -e s/\r/\n/g -e s/ done\.//g file
-exec tar czf {}_$(date +%Y_%m_%d_%H_%M_%S).tar.gz {} ;
find $LinkDest/ -not -path *$m_date* -xdev -depth -mindepth 1 -exec rm -Rf {} ;
var=01/2020
/usr/sbin/exim -bp | awk /^ *[0-9]+[mhd]/{print "/usr/sbin/exim -Mrm " $3} | (printf To:myemail@mydomain.com\nSubject: Mail queue cleanup for for My-VPS-Linux\n\n; bash) | /usr/sbin/sendmail myemail@mydomain.com
awk -v which=2 /<tagname1>(([0-9]*(\.[0-9]*)?)|[ \t])*<\/tagname1>/ {print $(which+1)} input.txt
50 16 * * 1-5 /usr/bin/php /location/of/script/transfer.php
CODE = $(shell find . -name *.cpp)
awk -F[.=] $4 ~ /^[[:digit:]]+$/ {print $3} file
echo a | tr a b | tr b c
grep -m 1 -oP dropped\s*=\s*\K\d+ logfile
cat infile > outfile

awk NR==FNR {print; seen[$0]=1; next} !($0 in seen) file1 file2
grep -f <(sed s/.*/\\<&\\>/ match1) list
alias gup=git pull origin $(git rev-parse --abbrev-ref HEAD)
awk {if (last==$1) {flag=0} else {last=$1; flag=1}; print $0,flag} file.txt
git rev-parse --show-toplevel &>/dev/null
command1 | grep -vF -f <(command2)
comm -13 <( sort file1 ) <( sort file2 )
grep --text
./b.sh
sed -r s#<java.lang.String value="([^"]*)"/>#<animal>\1</animal>#g test.txt
awk NR==FNR{a[$2]=$0; next} a[$2]>0{print a[$2],$1} file1 file2
grep -oE [0-9]+ [km]b/s <<< $foo
sed s/.*href=\"\(.*\)\".*/\1/g file | grep -oP .*\.bz2$
mysqldump -h host -u user -p password database > something-$(date +%d-%m-%Y %H %M %S).sql
puts stdout [format i val %d '\x%x' $i $i]
sed s/\.\././g oldfile > newfile
awk /Ghostscript/{print $3} inputfile
if[f $PIDFILE];
if [$number -ne 2]
sed :a;$bc;N;ba;:c;s/&#13;\n/ /g file
perl -pi -e s/c:\\IBM\\/\/opt\/IBM\//g *
grep -n -f pattern.txt *.tsv | cut -f 1,2,3 >> Results_File.lst
rsync -vzrP --delete --exclude .git --exclude awstats-icon --exclude awstatsicons --exclude icon ~/Sites/path/to/sitename/ user@server.com:/path/to/sitename/
echo $(hostname):$(cat /sys/block/sda/size)
Get-ADGroupMember CN=Group DN,OU=Group OU,DC=domain,DC=com | ? ObjectClass -eq User | Get-ADUser | ? Enabled
perl -pe s/\@(.*?)\@/$ENV{$1}/g < infile > outfile
awk BEGIN { family = ""} { if ($1 == "@") family = $2; else print family, $1, $2 } input.txt
awk /<table>/ { cf=1; print "<table>"; getline } /<\/table>/ {cf = 0 } {if(cf == 1){print $0}}END{ print "</table>" } demo.html
awk {if ($9=="ice") {$11="keep"} print} inputfile
awk -F| NR==FNR{a[$2]=$1;next} $1 in a { print a[$1],$1,$2 } OFS=| file1 file2 > file3
awk BEGIN{RS="";FS="\n";OFS=","}{$1=$1}7 file

chmod u+x program_name
echo The DB Host is $DATABASE_SERVER
nc -v -z 192.168.8.216 9100 2>&1 | awk {print $NF}
mycmd | pcregrep -M (?<=^/ >  -{7}\n).*\n(?=/ > $)
bash -c source /neuro/arch/scripts/neuro-fs stable;echo \$XAPPLRESDIR;
echo $original | sed -n -e s/.*$regex.*/\1/p
sed -n s/<[^>]*>//gp test.csv | sed /^$/d
print list1 = , list1
perl -i -pes/token/foo\nbar\nbaz\n/g file
sed -r s/(TAG|TAA|TGA)$//
while test-commands; do consequent-commands; done
sudo apt-get update && apt-get install vim-gtk
do shell script networksetup -setproxybypassdomains Ethernet *.local, 169.254/16 with administrator privileges
awk -F= /BUILD_VERSION/{print $2} input | tr -d [' ;]

printf %-30s%s left justified text [status]
sed -i -e /<Console>/,/<\/Console>/ s|<node>[0-9a-z.]\{1,\}</node>|<node>newvalue</node>|g YourFile
split(ABCDEFGHIJKLMNOPQRSTUVWXYZ,a,)
awk -f a.awk FS=; A.txt FS= -  B.txt
log_file ~/mylogfile.log
awk $1 == prev1 {print $2 - prev2} {prev1=$1; prev2=$2} file
-v prot=$prot
awk -F- -v OFS=- {for(i=NF-1;i>=1;i--){l=length($i);if(l<2||l>3)$(i+1)=" "$(i+1)}}7 file
bash script
awk -v var=ip $0 ~ var {print $1} file
for %f in (*.txt) do mysqlimport --fields_escaped_by=\ mydb -L %f
sed s:/\(/\)\{0,1\}:\1:g
sed -n :a;/START/,/END/{/END/!{$!{N;ba;}};/error/p;} inputfile
awk -v old=##ERROR_MSG## -v new=$ERROR_MSG s=index($0,old){$0 = substr($0,1,s) new substr($0,s+length(old))} 1 file
awk $5 ~ /OD[0-9]*-NZ[0-9]*|NZ[0-9]*-OD[0-9]*|OE[0-9]*-NZ[0-9]*|NZ[0-9]*-OE[0-9]*|OE[0-9]*-NH[0-9]*|NH[0-9]*-OE[0-9]*/ input.txt
rsync -avz -e ssh -p 8682 rsync@1.2.3.4:/rsync /rsync
echo We're about to find out what we like. >/dev/tty
sed $(printf %dd; ${A[@]}) inputfile
sed N;/\n.*0.00%.*/!{P;D};N;d inputfile
(sh dot -Tpng /.tree.dot -o /.tree.png)
awk -v RS=| /^d$/{print NR;} filename
(echo -e upload\n<uploadid>\n; cat ~/test.txt) | nc 127.0.0.1 1567
exit (ok ? EXIT_SUCCESS : EXIT_FAILURE);
awk commands <<< $string
./m4 `python -c 'print x66x66x${hex_offset}xedxffxbfx${hex_base}xedxffxbf%49135c%88$hn%14153c%89$hn'`
find . -type f -printf %s\t%f\n
yourcommand | awk -F: /Name/{n=$2} /Serial/{s=$2} /Firmware/{f=$2} END{printf "%s,%s,%s\n",n,s,f}
cat ~/.bash_history
du -h * | awk -v FS=\t { print $2, $1 }
python myscript.py test pbkdf2_sha256$12000$EkKZXYXv0adl$GZppRyXed3a0y1uZMBR/F8Mu/rnpsN+7atY4hZAwlrQ=
./s3cmd
sshpass -p password scp /etc/clients.txt shah@192.168.1.2:/home/shah/
echo tog-pegasus-2.12.1-16.el7.x86_64 | cut -d . -f 3 | cut -d - -f 1
find . -type f -and ( -name *~ -prune -or -print )
cut -d, -f2- file
(echo Manufacturer: $(echo ${family:-$name}|cut -d' ' -f1))
grep ^ABC\. file
sed s#\([0-9][0-9][0-9][0-9]\)-\([0-9][0-9]\)-\([0-9][0-9]\)#\1.\2.\3#g
/sbin/ifconfig -a | grep -i inet addr:
print qx/ssh $server1 ssh $server2 "echo \\\$HOSTNAME\\"/;
JQ=/usr/local/bin/jq
echo -e $"What do we say to the God of Death?\nNot today."
sed -i s:$: -y: YOURFILE
rm -rf $(find . -type f -exec grep -l STRING {} ;)

dialog <....> 2> tempfile
sh -c ./script.sh hello
[[ $LINE =~ [[:blank:]] ]]
sed /^Keyword:$/d file
awk NR==FNR{a[$1]=1;next} $1 in a {print} file2 file1
[ -z $1 ]
awk /cpu MHz/ {print $4} < /proc/cpuinfo | awk -F. NR==1 {print $1}
thread.start_new_thread ( myFuncThatDoesZGrep)

sed -r s/(\bd[0-9]+)\.(h[0-9]+)/\1\2/ inputfile
ls test.* | xargs perl -pe BEGIN{undef $/;};s/(<li class="menu-581">)(.*)(<\/li>)/$1$3/gs
cp --parents -- A/B/C/a.txt OTHER_DIR
useradd -G groupname username
*/1 * * * * php -q /var/www/html/includes/cron/cron.inc.a.php &> dev/php.log
directory=Apparel & Accessories > Clothing > Activewear
./script.sh
set -- something ${@:2}
awk -F, {print $1,$2}
IFS=| read -d  -ra FIELDS <<< $(git show --quiet --date=rfc --pretty=format:%s|%b|%an, %ae|%H|%cd $i)
robocopy source destination /MT:25 /NP /NFL /NDL
diff <(sort file1.txt) <(sort file2.txt)
awk $5 ~ /^(A|B|C|D)$/ *.csv
echo abcd | sed -n s|[^/]*/\(.*\)|\1|p
`printf %76s; echo $'\x14\x84\x04\x08'`

7.*
bash $1 &
for i in {1..100}; do echo $(( RANDOM % 15 )); done
awk -F: /^USER:/{u=$2} /POSITION:/{p=$2} /CLIENT:/{c=$2} /APPLICATION:/{print u,p,c,$2} yourfile
awk BEGIN{FS="\""}{print $2} < test.dat
node server.js &
npm get prefix
NR%2==0
for f in QP????.txt; do echo $f | cat - $f >$f.withname; done
echo update-8.1.0-v46.sql | sed s/update-8.1.0-v\([0-9]*\).sql/\1/p
awk {print gsub(/\"\|\"/,"&",$0)} input.txt
Runtime.getRuntime().exec(/opt/ImageMagick/bin/compare /Users/labuser/Downloads/test.jpg /Users/labuser/Downloads/test1.jpg /Users/labuser/Downloads/diff.jpg);
tail -Fn +1 $log_file | grep -Ei $search_text|^error\b | while read line; do
attr(4755, apache, apache) /usr/bin/something
sed -re s/if(/if ( /g
git commit -m Database $(date '+%a %M:%H %h %d %Y')
set -- ${@:1:1} ${@:3}
awk BEGIN{FS=OFS=","}{$NF=($NF>10?$NF+1:$NF)}1 file
echo $(cat file) | sed -re s/(2013-06)/@@@\1/g | sed -re s/@@@/\n/g
sed 1,3{/match/d;} file
grep error ~/Desktop/Servers/Folder/Error/Error_$DATE.txt| grep -v PHP Notice\|PHP Warning\|File does not >> ~/Desktop/Review/Folder_Review_$DATE.txt
db2 values SYSPROC.MON_GET_APPLICATION_ID()
:set t_Co?
for i in `seq 1 4`; do name=$(ls *.tar.gz); tar xvfz $name; rm $name; done;
sed s/ \([0-9]\{4\}\)/\n\1/g file
mount | sed -n -e s/\/\/mynetaddr on \([^ ]*\).*$/\1/p
export PATH=/usr/local/mysql/bin:$PATHL_ENV_DISABLE_PROMPT=1 source /Users/NabilKaz/Library/Enthought/Canopy_64bit/User/bin/activate
awk -F, { system("mkdir -p "$2); print > $2"/"$2".csv"} Input.csv
cat file | tr -s   | sed s/^\(.*\)$/INSERT INTO table(l_colour, l_price, l_type, l_in_date) VALUES(\1);/
awk NR==27{printf "%s ", $0} $INDIR/files >> $OUTDIR/files
awk /Nmap scan report/ { host=$NF } NF==4 && $2=="open" { print host, $2, $NF } nmap-output.txt
stat -c %Y file
ls -Art | tail -n 1
awk -F \t {if (! (($1 ~ ".*EBI.*") || ($2 ~ ".*EBI.*"))) {print $0} }
perl -MData -e print "$_\n" for @Data::tests
find . -size +100M -exec gzip {} ;

ssh $NODE1_SSH_PATH /bin/bash $PROGRAM_HOME/bin/run.sh > start.log
find some/dir -printf %P\n
echo hell-hello-helloo | perl -F/-/ -ane print join("-",@F[0,1]);
cp -r $pck_dir/* $TAR_DIR/pck/
./bin/elasticsearch &
sed 0,/tat/{/tat/d;} inputfile
awk -v from=12:52:33 -v to 12:59:33 $1>=from && $1<=to foo.log
yum check-update | awk p; /Updated packages/ {p=1}
clean=(Clean: a=$out@cleanup b=$out@cleanup)
env -i bash --norc
[ -z $1 ]
scp -P 29418 <userId>@gerrit.domain.net:hooks/commit-msg .git/hooks/
/bin/tar xf $tarfile -C $tmp $contents
sed -r s/^([^ ]+)( )+.*\((.*)\)/\1\2(\3)/g file
cat fifo | nc -l 3000 | stdbuf -o 0 rev > fifo
sed s|</head>||g
find . -name *. out -exec grep -ci search_string {} +
find /etc/ -type f -print0| xargs -0 grep -o c | wc -l
find . > $file 2>&1
which hadoop
awk -v ORS=<br> 1 <log-file >html-file
/chaitanyavaranasi/android-sdks

while [[ -z $interface || !  $interfaces  =~  $interface  ]]
sed -i.bak /^stage/,/}$/ s/font-size:.*/font-size: 20pt;/g theme.css
ls -R | egrep 6-atom2D\.vector$|6-atom2D\.klist|6-atom2D\.struct
(eval echo "$line")
sed 1s/^\(.*\)$/\|\1/g file
cat file | sed s/T/\ /g | sed s/-07:00//g
join -e NaN -a1 -a2 -o 1.1 2.2 first second
do shell script /usr/local/bin/lame -m m ~/Downloads/recording.aiff ~/Downloads/recording.mp3
perl -ne /<\/entry>/ && print "\n"; />(.*?)</ && !/<name>/  && print $1."|"; /<name>/ && /name>?(.*?)<\/.*?(uri>?)(.*)?<\/uri/ && print $1."|".$3
source input.ini
awk -v q=' NR==FNR{a[$1]=$0;next}{$1=q $1 q}$1 in a{print a[$1]} file2 file1 > file3
emacs --batch --user $(USER) --eval (progn (org-agenda-list nil nil 'year) (org-icalendar-combine-agenda-files))
sudo sed -i s/127.0.1.1/$(ifconfig | grep -oP 'inet addr:\K(.*)?(?=  P-t-P)')/g /etc/hosts
awk -vm=$mask -vip=$ip BEGIN{n=split(m,a); split(ip,b); for (i=1; i<=n; i++) print b[i],a[i]}
%s/v<zs(u)(u*)ze>/1L2/g
passwd $username
ffmpeg -i input.avi -vf drawtext -vcodec huffyuv -acodec copy output.mkv
php -dcli.prompt=\nphp>  -a
grep ^[eat]*$ dictionary.txt
for ((i=110; i>=80; i-=10)); do echo $i.txt; done

brew install grep --default-names
perl -i -pe s/\.\d\b//g if $. == 2 file.txt
cat test.txt | perl -ne s/"NATIVE\/[^"]+(?<!\.XLS)(?<!\.XLSX)"/""/g; print;
CC=gcc
sh test_shell.txt
sudo yum -y install mysql-server
find ./downloads -maxdepth 2 -type f -mtime +32 -delete
echo $df
date +%s-%N
sed -r s/([0-9]{3})/\1\./g;s/^0*//;s/\.0*/\./g;s/\.\.test.com//;s/\.\./\.0\./g regex.test
find /a/b/ -maxdepth 1 -type f -mtime +90
perl -pe BEGIN{%h=("12" => "13", "13" => "12")} s/(12|13)/$h{$1}/g inputfile

awk /<\/review_text>/ {f=0} f {print >> (t".txt")}; /<review_text>/ {f=1; t++} file
sed s/\u@\h/\u@\h (myhost)/ /etc/bashrc
awk -F: {gsub(/,/," ",$3);print $3} file
awk p{print $0-p}{p=$0} file
awk -v RS=> FNR>1{a[$1]=a[$1]?a[$1] FS $2:$2}END{for(x in a) print RS x ORS a[x]} f1 f2 f3
if [[ -n $(grep -i fedora /etc/issue) ]]; then
/etc/init.d/httpd /etc/init.d/nscd status
mysql -u root -p$PASS < myfile.sql
readelf -S ELF_Binary | awk $2==".plt" {print $2,$4,$5,$6}
Shell(CMD.EXE /K PING  & textvar)
adduser <username> -p <password> ...

sed s|[^,]*,\([^);]*\));.*|\1|
perl -lne $p=$_ if s/< //; print "$p.$_" if s/> // file.txt
perl -pe s/^([-0-9]+)/$1 - 4.91/e your_file
sort -nk4,4 <filename>
echo aa$@bb will print aabb
sed -n \!$var1!,\!$var2!p inpu
trap fuser -k -n tcp 1234 && exit SIGINT SIGTERM
sed s/\(Microsoft Office f.r Mac 2011 \([^ ]*\)-Update\).*$/\1/; s/^.*>// infile
sed -e s/^DEVICE.*/DEVICE\=\"eth0\:$NEXT\"/ -e s/^IPADDR.*/IPADDR\=\"123.123.123.$IP\"/ ifcfg-eth0:$COUNTER > ifcfg-eth0:$NEXT
grep -l -r -f value.txt base_directory
sed -e :a -e s/\(.*".*".*\) /\1|/;ta
(find *.txt))
export PATH=/usr/local/bin:${PATH/:\/usr\/local\/bin/}
combinediff <(hg diff 1234) <(hg diff 1337)
sudo su -
f=/dev/null nohup command < $f &> $f
command1=mysql -umyuser -pmypassword -e "show databases;";
cat report{1..80} > allreports.txt
awk NR%4==1{sum=$2; next}{sum+=$2} NR%4==0{print ++j,sum;} input.txt
mvn help:evaluate -Dexpression=[property-name] | findstr /R ^^[^^[INFO]]
grep -Po (?<=<cite>).*?(?=</cite>)

npm install jsawk
(curl https://www.site.com/api $AUTH_HEADERS -H Content-Type:undefined -X POST --data $ANNOTATION_INIT_DATA)
ncat -k -e /bin/sh -l $PORT
awk -F; !seen[$2]++ file
find /home/kparisi -printf %M %p\n
if [ ${!AA_BB_*} ]; then
ssh root@host bash -s < ./my_script.sh my_input
awk -v OFS=; {print NR,$0} filename
awk {print ($1 ~ /\.$/ ? "OK" : "NOK"), $0} file
awk BEGIN {FS="."};{print $2"."$1} <file1 >results.txt
apropos -s 3 .
for f in *.md; do cat $f; echo \newline; done > output.md
`bash -c $WHICH_MPI`
system(sudo /bin/sh -c "echo 'iface wlan0 inet dhcp' >> /etc/network/interfaces");
cat yourfile.txt | tr -dc [:alnum:]\n\r | tr [:upper:] [:lower:]
echo $(tr -d \r\' < $PROC | awk NR==5{print substr($0,index($0,$2))}{print $NF})
tar -cv -T file_list.txt -f tarball.tar
echo ${!1} | sed -e s/{/\\{/g
awk -F/ !x[$1]++ file
awk -f getbias.awk <your script> file1
echo $response | sed -e s/^.*"$value"[ ]*:[ ]*"// -e s/".*//
cat test.txt | sed -r s/^.*-[0-9]{4}\s//
find . -depth -name *a_* -execdir bash -c mv "$0" "${0//a_/b_}" {} ;
git reset HEAD <file>
sed -n /PATTERN/,/^$/p file
for f in folder1/*.md folder2/*.md ... ; do cat $f; echo; done > output.txt;
perl -ne if (m/72810/) {s/\n/ /; print} else { print } input.txt
awk -F, { $4 = ($4 == "N/A" ? -1 : $4) } 1 OFS=, test.csv
mysql [options] --execute=UPDATE table SET Status='ready' WHERE ID IN (`paste -sd, id_file.txt`);
mkdir $var3
readFile.sh info
message = coucou
./script.sh &
readlink -f $SOMEPATH
egrep (^|\s)/($|\s) file
export PS1=$(pwd): 
config.vm.provision :shell, privileged: false, path: scripts/bootstrap.sh

test: NODE_ENV = test
sed s/$/\\n/ | tr -d \n
find . -type f -iname *-* -exec rename -v s/-.*(\.[^.]+)$/$1/ {} ;
alias code=cd ~/Documents/Code
date --date=$line +%s
awk -v RS=\0 -v ORS= {gsub(/\t#\n\tpap/,"yourNEwString")}7 file
until [ -p notify ]; do read -t 0.1; done
2, a, ///)
cat number.txt | sort -n | uniq -c | awk { print $2, $1 }
echo -e \U0001f37a
./run -r ,.?!:;()[]{}" text1.txt
( echo $line | grep -o -E [a-zA-Z][a-zA-Z][a-zA-Z]\ [0-3][0-9]\ [0-2][0-9]\:[0-2][2-9]\:[0-2][2-9] )
`cat ${HOME}/.bash_history`
awk -v RS= /^START HELLO/ file
sort -k3 -rn -t 
SCRIPTDIR=`dirname $0`
john:x:1000:100:John Doe:/home/john:/bin/bash
./foo ; echo y | ./bar ; ./baz
sed -r s/.*\/([^\/]+)\.pjb/\1/g logfile
sed 4r insert txt 0282.ini
//depot/... //my-client/...
sed s/\(\([^|]*|\)\{6\}\)/\1\n/g input.txt > output.txt
[ -d /path/to/the/folder ]
% echo * * * * * /Users/paul/Desktop/1.sh | crontab -
echo ${VAR//[^0-9]/} ${VAR//[0-9]/}
awk { gsub("\r", "\n"); print $0;} macfile.txt > unixfile.txt
LD_LIBRARY_PATH , LIBPATH , SHLIB_PATH
sed -i s/\^A/;/g file
grep -l pattern * | xargs awk -F\t {print $1"\t"$2 > FILENAME}
curl https://raw.githubusercontent.com/jplew/SyncDB/master/syncdb | diff - syncdb
sed s/^\([ ]*stars\)/\t\1/ input
awk {$3=$NF OFS $3;$NF=""}1 file
head -15696 filename | tail -10
(ipconfig getifaddr en0)
wget ... | sed -n /'userPreferences':/{s/[^:]*://;s/}$//p}
sed -i /ServerAlias www.$account/a \\t$newAlias $VHOST_FILE
[[ -s $HOME/.bashrc ]] && source $HOME/.bashrc
BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getErrorStream()));
awk -v delkey=[a/b/d] { if ($1 == delkey) { i=3 }; if ( i>0 ) { i-- } else { print }} file.txt
source yourscriptfile
perl -ane print if $. == 1 || grep {$_ > 50} @F[1..$#F] file.txt
os.environ[c] = value
awk x { gsub(/string1/,"string2") ; x=0 } /string3/ { x=1 } 1 file
python -c print "ls" | bash
find lattice* -type f -name POSCAR.* -exec bash -c echo mv -iv "$0" "${0/POSCAR./POSCAR}" {} ;
ProcessBuilder(String... command)
sed s/HTML/test/g
perl -pe s/\x0// while ($i = index $_, "\x0") >= 0 and $i < 14 input-file
for /r %%i in (*) do @echo %%~ni >> C:devBO-lists_file.txt
FileStream f = new FileStream(args[0], FileMode.Open);
HDR := $(patsubst ./segd/%.segd,./db/%.segd_hdr, $(shell find ./segd -name *.segd))
params[1] = {print "1" $0};
awk $x > FLOOR Table.txt
awk $1 {printf s++ ? "|" $0 : $0} RS=<[^>]+>
find ~ ! -name *[0-9]*
sed -ri s~^(.*Name, [0-9]+),(.*)$~\1\2~g file
eval mplayer $( printf %q\n * | sort -n -k4 )
osascript -e display notification "$var2"
export OUT=a=arg1 b=arg2.0 b=arg2.1
echo  >>test.xml
git cherry -v master|sed -n -e 1p -e $p|awk {print $2}
awk BEGIN{FS=OFS=","} FNR==NR {a[$1]=$0; next} $2 in a{print $0, a[$2]} f22.txt f11.txt
awk {a[$1" "$2]++}END{for(i in a){print i" = "a[i]}} your_file
echo -e this is line one\n this is line two\n ...
header(Content-type: text/plain);
tar czf backup.tar.gz `ls /www/hosting | grep .com$ | sed s/$/\/www/g | sed s/^/\/www\/hosting\//g`
fbosons_13window_
kill -9 `ps aux | grep [j]ava | awk { print $2 } | sort -nr | head -n 1`
echo jn34r 38&Y EY$@H #EY$@HDCmhf453gf=,e73e3bnd2wbyzd fr fr4fn3r f 4df 3 | awk -F= {print "words_before="$1"\nwords_after="$2}
ifconfig en1 | awk { print $2} | grep -E -o ([0-9]{1,3}[\.]){3}[0-9]{1,3}
awk /start/,/end/{if(/ppp/)print} file
export PATH
awk -F , NR==FNR{a[$1]=$0;next}{print $0 "," (a[$2]?"Available":"NotFound")  } f22.txt f11.txt
if [[ ${MY_STRING} =~ ${REGEX} ]]; then
cat 1.txt $1 2.txt > $(echo $1 | sed s/\.html/.php/)
ssh host cmd < /dev/null
sudo command args...
su -c bash --rcfile myfile
sed s/:sl:/\n/g singleline.txt
setenv(DYLD_LIBRARY_PATH, /usr/local/bin/);
cat statelist.txt | parallel --gnu python mypy.py
echo ${JOB_OUTPUT} >> ${LOGFILE}
sed -r s/^( +) ([0-9]+) (.*)$/\1 \2 '\3'/g file
awk BEGIN {ORS=""};!/[1-2][1-9]/ {print} /[1-2][1-9]/{printf("\n%s",$0)} tempFile.txt > parsed.txt;
git log --diff-filter=A
sed -n /\<keyword2\>/,/^$/p file.txt
cat file | while read ...
awk -v c=2 /creative/{count++;}count==c{print $0;exit} file
sed -n s#.* \([a-zA-Z]* [A-Z]\{2,3\}/fd\).*#\1#p test_regqexp_keynote.txt
tail -f file1.txt >> file2.txt
CREATE INDEX ON :Word(value);
string=abc
awk -F; $1=="1234" || $1=="1390" {print $2,$4} file
{ ./a.out; } 2> out_err
ls -l | awk ($9 ~ /em/) { print $9 }
sed 0,/^[^#]/ s/^[^#].*/#\0/ file.txt
rsync -a --max-size=100kB sourcedir destdir
cmd1; cmd2; cmd3
exec $SHELL
VOLUME [/opt/nagios/var, /opt/nagios/etc, /opt/nagios/libexec, /var/log/apache2, /usr/share/snmp/mibs]
awk -F: NR==7 || NR==8 {print $5} file
cat data.txt | while read x; do echo $x; sleep 0.7; done | batch_processor
)
(command -v whatever)
grep -E ^[^/]{2}.*https file
printf %032s\n $(<binary.txt) | tr   0
if [[ $( grep $BACKUP_DRIVE /etc/fstab | awk '{print $2}') -ne 0 ]]; then
myprog.exe c:\path\with spaces\in the\middle\file.pdf
awk NR%3==1{if(a)print a;a=$0;v=$NF;next}$NF<v{a=$0;v=$NF}END{print a} file
awk -F ' { print $1, $2, $3 } OFS=, ' data
[[ $var != $checkvar ]] && echo $var >> file || echo content same
apt-show-versions | grep No available version
./configure CPPFLAGS=-I/usr/include
readarray ary
python ./build_native.py 2>&1 | grep error
sudo tee /var/git/myproject.git/hooks/post-update <<EOF >/dev/null
last | grep logged in
timer.schedule(new MonitorTask(), 90 * 1000, 90 * 1000);
[sh, -c, ps -eo pid,comm,cmd,start,etime | grep -i +s2]
Get-ChildItem -Recurse . | where { $_.PSISContainer -and @( $_ | Get-ChildItem ).Count -eq 0 } | Select-Object -Property FullName
paste dat1.txt <(cut -d  -f2- dat2.txt)
export PATH=~/bin:${PATH}
echo $HTTP["url"]
find folder -type f -executable -exec echo {} /tmp ;

awk /Apples/,/^$/ { if (/Good/) print $2} file
sed s/<\/strong>.*//
[[ a != b && c != d && ( something || something ) ]]
sudo sh -c /usr/local/mysql/bin/mysql -h localhost -P 3306 --user=root --password=XXXXXXXXXX -e "select count(*) from crawlstatus where status=\"802350570V\";" test_navin > size.log
find . -name *.txt
tac file.csv | sed 1,4d | tac > newfile.csv
awk /^>/ {if (seqlen){print seqlen}; print ;seqlen=0;next; } { seqlen = seqlen +length($0)}END{print seqlen} file.fa
ssh -fqTN -L 12345:127.0.0.1:3306 user@server.com
new ProcessBuilder(echo, hello).redirectOutput(new File(output.txt)).start();
sed … file > file
sshpass -p password ssh username@74.11.11.11 su -lc "cp -r $location2 $location1"
paste f1 f2 f3 | awk {print "xyz"$1, $2$3"xyz", "xyz"}
echo -e Cmd> \c && read -s cmd && echo -append_something
awk -F[^0-9]* /[0-9]/ { print ($1 != "" ? $1 : $2) }
sed /^ *#/b;s/^[^|]*//;s/[^|]*$// filename
sed -i.bak s/ - /\n- / file
sh foo.sh 2>&1 >> out | tee -a out
sed /<div class="classname"><a href="\/.*">/ { h; s/<div class="classname"><a href="\///; s/\(.*\)/\L\1/; s/ /-/g; s/[()]//g; x; s/\(<div class="classname"><a href="\/\)\(.*\)/\1/; G; s/\n//}
tar cpzf $File --exclude=Downloads $Folder
setopt completealiases
mkdir $HOME/bin
:%s/(w+) | [ (w+) ]: (w+)/1,[2]:3/gi
[[ -e ${file%.gz} ]] || gunzip ${file}
cut -f1-13,18- $file > $newfile
awk -F: * NR==FNR{c[$2]++;next}$2 in c{print $2,c[$2];delete c[$2]} file file
read -rsn1
{LINEPHTABLE1% ||| *}
tmpfile=`tmpfile 2>/dev/null` || tmpfile=/tmp/test$$
:set ff?
date -d2014-06-02T16:23:13+02:00 +%s
num2=`obase=16;ibase=16; echo $start_num \+ $num | bc`
grep --after-context 200 2014-06-02 log/production.log | less
echo temp | sort -n | uniq -c | awk { print $2, $1 } > temp2
frq = run- $1 /data/data.frq
{ crontab -u user -l; echo $this; echo $this_too; } | crontab -u user -
better-dig.sh google.com
printf -v escaped_string %q $raw_string
:tabnew | r!ack-grep function tracking ../
awk -F [@#=]+
Phrase.*nMeta.*n^((?![Meta|n]).*n)*
sed -n /\/bar\//p file
ideviceinfo | grep -i DeviceName
subprocess.check_output(ssh localhost "/srv/http/save-design", shell=True)
sed -n /pattern/,/&/p file
zcat Input.gz | awk -F, {key=$2","substr($3,4,6)","substr($4,4,6)","$10","$8","$6;++a[key];b[key]=b[key]+$6}END{for(i in a)print i","a[i]","b[i]}

| = 1;
awk -v RS= {print > "query"(++i)".sql"} file
find . -type f -size +0
alias cd=HOME=~/Documents/Github cd
-3.73e-08
(S+?)[_-]
echo $data | grep -Po (^| )-input=([^ /]*/)*\K[^ ]*
rsync -av --include=*.txt --include=*/ --exclude=* dir1/ dir2/
ssh -f root@10.158.42.12 nohup perl /script/myscript.pl 06/04/2014 60 & 2> /dev/null
find . -type d | while read d; do convert ${d}/*.jpg ./${d##*/}.pdf; done
find -exec wc {} ;
echo -n /;ip -4 addr | awk /eth0/ { getline; {print $2} } | cut -f2 -d/
sed -r s/(abc|def)_uvw/\1\n_uvw/g;s/([^\n])_uvw/\1xyz/g;s/\n//g file
stty -tostop
\b[A-Za-z0-9]+[A-Za-z0-9._%+-]+@([A-Za-z0-9-]+\.)+[A-Za-z]{2,8}\b
awk -F: {for (i=1; i<=NF; i++) if ($i !~ /foo/) {printf "%s%s", $i, (i==NF? RS : FS)}}
function FuncGenrator { :; }
:%s/^([^,]*),/[1]:/
find . -type f -iname 20* | awk -vFROM=20140110 { if (0+substr($1,3) >= FROM) print $1;}
sh <(wget -q0- remote_script.sh)
find . ( -name *.extension1 -o -name *.extension2 ) -type f -delete
nmap -n -sL -iL ip_ranges -oG - | awk /^Host/{print $2} | shuf -n 100000
sed -i ${deb},${end}s/.*// body.txt
for file in *.bmp; do convert $file ${file%.bmp}.png; done
perl -i -pe s/MY_PASSWORD=\K PASSWORD/MY_SECRET_PASS/x file
awk FNR > 24 file1 file2 | sort -k3,3 -k4,4n > newFile
ps -e -o cmd | cut -f 1 -d   | sort | uniq -c
DISPLAY=:0 xterm -hold -e echo Time to relax
CMD=mvn exec:java -Dexec.mainClass=$MAINCLASS -Dexec.arguments="cfg.txt","TRAIN"
find data/ -name *.json -exec cat {} ; > uber.json
String command=cat > + rfile +; chmod 777  + rfile +; scp -t  + rfile;
sed -i.bak -e s/application: .*/&2/ app.yaml
hadoop fs -ls /projects/abcd/ | awk -F / /delta|snapshot/ {print $NF} > /homes/abcd/tools/list_of_feeds.txt
find $someDir ( -iname *.jpg -o -name *.png -o -name *.gif ) -exec sh -c echo hello {} ;
find /replica_path/ -mmin +1 | wc -l
grep ^20140604.*Count : [^0].*$ XYZ.dat
tar cvf ...
tac file | awk /Cannot proceed: the database is empty/ {f=$0; next} f{if (($3==5 && $4>"22:30:00") || ($4==6 && $4<="00:30:00")) {print; print f} f=""}
awk -f make_csv.awk Sample_Input.txt
bin: { myapp : <relative_path_to_myapp.js>/lib/myapp.js }
awk -FEXPIRYTIME:\\s* -v d=20140612 {s=$2;sub(/\].*/,"",s)}1*s>d*10^6 log
telnet mailhost 25 < commands.txt
grep <url> file.xml | sed s/.*>\([^<]*\)<.*/\1/ >> file.txt
printf ..$i-->${!i}\n
function fun1 { echo $1; head; }
lsusb | awk /ZTE/ {print $6}
awk FNR==1{if(s!=0)print s/c; s=0;c=0}{s+=$7;c++}END{print s/c} c* > result.txt
for /f tokens=2 delims== %%I in (wmic os get localdatetime /format:list) do set datetime=%%I
if [ $(uname) = FreeBSD ]; then ....
echo scale=1; $RX/10 | bc
chmod -R +x android-sdk-linux
{echo SET FOREIGN_KEY_CHECKS=0; ; cat delete_query.sql ; } | mysql
perl -ne /^name-label .*: (.+)/ and $name = $1; m(0/ip: ([0-9.]+)) and print "$name $1\n"
sed -i  s/stWgvN52??f2&amp; ?&quot;/stWgvN522tw0JtZZnyXj/g file.csv
SHELL = /usr/bin/bash
git push
for f in *.png; do echo mv $f ${f/_*_/_}; done
rename s/ \[720p\]//g ./*

sed /Test\/Movie2/,/@/d; header.txt
(ls *[$a1][$a2][$a3]* 2>/dev/null | head -n 1 | cut -f1 -d.)
awk !e{e=$1+4;} $1-e>0{print "Range " ++i , c " entries. min: " min " max: " max ; e+=4; c=0; min=""} {if(!min)min=$1; c++; max=$1} END{print "Range " ++i , c " entries. min: " min " max: " max}  file
find $(pwd) -name YourProgram -exec dirname {} ; | while read d; do cd $d && pwd; done
find . -mindepth 2 -name * -exec sh -c sed -i "s,PBD FolderName,PBD $(echo $(basename $(dirname {})))," {} ;
head -n -2 /etc/bash.bashrc | sudo tee /etc/bash.bashrc >/dev/null
cat x1.tmp|gawk -F; {"base64 -d <<<\""$2"\""|getline $3;close("base64 -d <<<\""$2"\"")}{print $1,$3}
perl renew.pl `date +%Y/%m/%d` data.xml
mkdir -p /dir1/dir2/dir3/dir4...dirN/
sed s/The \(.*\) line/The \1 lines\nThe new \1 line/
unix2dos < source_name | uuencode target_name | mailx -s logs abc.gmail.com
C=1; for i in $(head file -n 1) ; do if [ $i == 102 ] ; then break ; else C=$(( $C + 1 )) ; fi ; done ; echo $C
f1=[line.strip() for line in filter(lambda x: x.strip().split()[0:4] in myf, file2)]
find ./ -type f -name *.php -exec sed -i s/check_perm('venA')/check_perm('venA:venB')/g {} ;
hash mycommand
aplay -q ~/.zsh/sounds/done.wav
(pdftk $1 dump_data | awk /NumberOfPages/{sub(/^[^:]*:/, ""); print})
git stash changes
sed -r -i s/\b(word1|word2|word3)\b//g file.txt
perl -pne $_ = "A> $_" if /^`{3}/ ... /^`{3}/ file
lsof | grep /file/path`s/
paste -d  file1 file2
cmd.exe /X /V:ON /C set MYPATH=C:Program Files (x86)Microsoft Visual Studio 11.0VCvarsall.bat && !MYPATH!
awk {s=$0}{n=gsub(/[0-9]/,"",s)}n>=3&&n<=8 file
sed -r {s#([0-9][0-9,.]*)-\|#-\1\|#g}
grep -rI PatternToSearch ./path --exclude={*log*,tags}
brew install ack
git log --pretty=format:%h %an %ai | sort -k3
awk -F \t NR==FNR{a[$2]=$0; next}$1 in a {print $0, a[$1]} file2 file1
cp $i.foo.$ibar out
sed s/.*VARCHAR(1000).*/--&/ file
if [[ $element==M ]]; then
proc=subprocess.Popen([Rscript, modelcriteria.R,model_selection_criteria.csv])
/.*21[34][0-9]{3}.*/ {p}
echo {"field1": "value","field2": [{"field3":"value","asd":1},{"field3":"value2","asd":2}],"field4":"value4"} | jq .field2[] | .["field3"]
sed s/.*- //
tarsnap --list-archives | sed -n /2014-06-09/s/^/-f /p | xargs tarsnap -d
php script.php
perl -i -pe s/^export PASSORD=\K.*// file
awk $9~/plant/ file_in.txt > file_out.txt
awk { gsub(",{","\n{"); {print substr($0, 2, length($0) - 2)} } file
perl -i -pe s/(?<=export[ ]PASSORD=).*// /tmp/script.bash
readarray -t rpmarr < <(exec rpm -Va)
ls | xargs /bin/echo
(.*)
cat t{1..1500} > all
wget -qO- http://nodejs.org/download/ | grep -oP -m 1 Current version: <b>v\K(.*?)(?=</b>)
sed -i sed s#href="\(.*\)\.do"#href="<s:url action='\1'/>"#g ./src/main/webapp/include/stoBox2.jsp
prog $1 | sponge $1
awk FNR==NR{a[NR]=$1;next}{$7=$7-a[FNR];print} avg.txt corr0.txt
for x in `find . -maxdepth 1 -type f -name *.JPG` ; do mv $x `echo $x|sed s/JPG/jpg/g`; done
(date -r $chem)
awk END {print $NF} file
awk { print $2 "=" $3 } myFile
sed s/GENERATED ALWAYS AS.*$/,/ file
mapfile -t array < file.txt
gawk {if (match($5,/hola/,a) && $6=="hola") {print $2"\t"$1"\t"$2"\t"$1"\t"$3} else if `(match($5,/(_[joxT]+\.[0-9]*)/,a) && match($6,/(_[joxG]+\.[0-9]*)/,b)) {print $2""a[1]"\t"$1""b[1]} else if (match($5,/(_[joxT]+\.[0-9]*)/,a) && $6=="hola") {print "hola"}} pasted`
find . -name *.php -type f -print0 | xargs -0 sed -i -e s|if *(\$_GET\['x'\]) *{|if(isset(\$_GET['x'])){|g --
sed -i s/Apache 2 Test Page/$HOSTNAME Test Page/g /var/www/error/noindex.html

perl -i -pe s{(?<!#)(?=start /opt/nimsoft/bin/niminit "" "start")}{#} /etc/rc.tcpip
find / -type l -printf %p -> %l\n|grep -> /home/deploy/live
0 6 * * * php ~/Sites/meetmyfriends-back/index.php tools reset_avail
echo -e ALERT - Shell Access on:' `date` `who` '\n\n' `whois $(who | cut -d'(' -f2 | cut -d')' -f1)`
scp -i ident_file zos_file linux_user@linux_box:linux_file
ls aodv* | sed -e p;s/aodv-// -e s/-.// |xargs -n2 mv
cp $f $(sed 's/.png/@2x.png/g' <<< $f) MyFolder/
select convert(char(10),your_date_column,23)+ +convert(char(8),your_date_column,8)+.+convert(char(3),datepart(ms,your_date_column))
sed -i.bak 63s|^.*$|$string| file.txt
awk ($0+0)>10 && ($0+0)<100 file
find . -regextype posix-extended -iregex .*/a_{1}b
ps x | grep vsftpd| grep -v grep
12 0,8,16 * * * /opt/maintenance/backup-databases.sh
nc -l -p 1234 -e my_function
awk $1 ~ /^A/ && $2 ~ /^B/ file
nawk /valcred/{close(x);x="F"++i;printf "" > x}{print >> x;} input_file.txt
sed s~$Old~$New~ /location/file.txt
awk -F\t $7 != "" { print "FORMATTED JSON HERE WITH " $2 " AND " $7 } * > data.json
:!chmod +x filename.sh
find /path -type f
echo $PYTEST
find ./ -name results.txt -exec sed 12!d {} ;
find ./ -name results.txt | sort -V
(more /tmp/last_ip_check.txt)
grep --include=*.rb -rnw . -e pattern
nc -v -z -w 3 127.0.0.1 5050 &> /dev/null && echo Online || echo Offline
find $SOURCEFOLDER -type f -exec sed -e s/\[[^][]*\]//g {}; -exec ln {} $ENDFOLDER/$TR_NEW_TORRENT_NAME/${basename} ;
set m = `sed $s,$d file | tee see > /dev/null`
gcloud auth login
kill -HUP $(cat $pid)
grep -n ^-----$ filename.txt
APPDIR=somedir
dos2unix myfile
grep -A10 -B10 NullPointerExceptions your.log
rsync -av ./Sites/depot root@my-server-ip:/sites/depot
cp /home/ankur/folder/{file1,file2} /home/ankur/dest
sed s/,'[^']*')/)/
2 ~ /REGEX/ {ACTION}

sudo cu -s 19200 -l /dev/ttyUSB0 | tr -cd [:print:] > serialContent.json
elif [[ $2 != append ]] && [[ $2 != replace ]]
awk -F@ $2>=from && $2<=to from=$(date +%H:%M:%S -d -30min) to=$(date +%H:%M:%S) file
cmd = adb pull /sdcard/screen.png "C:\Users\xxx\Desktop\prova\screen.png";
git commit -m $1
xmlstarlet sel --net --html -t -m //img -v @src -n http://en.wikipedia.org/wiki/Current_members_of_the_United_States_House_of_Representatives
awk -F' {print $2,$4} file.txt
tail log-file | perl -pe s/(.{80})/$1\n\t/g
awk BEGIN{seek=0} $3=="A" && $4==seek {print; seek +=1; if (seek>5) seek=0} file.txt
system(sudo rm a.txt >> output.txt 2>&1)
awk -v n=20 { r = (r ? r RS : "") $0; c++ } $3 in a || s != $5 { r=$0; c=""; delete a } c == n { print r; r=c=""; delete a } { a[$3]; s = $5 } file
sed s/.*000/#&/ file
cd $(dirname $(which brew))
find /usr/audio/incoming -name *.mp3 -exec eyeD3 -t New Title {} ; -exec mv {} /usr/audio/complete ;
grep -Po content:"\K[^"]+ 1rule
alias unix=echo $(date +%s)
grep 28590301456967003510KKK.*00051 *.txt
awk NR==1{h=$0;next}{f="file"++i;print h,$0 > f;close(f)} OFS=\n file
awk $2<=972 {$4=$4 FS "H"} 1 file
ip = str_replace([\n, \r], , $ip);
foo=bar
nc -u 192.0.2.1 53
find dirname -print0 | xargs -0 grep foo
awk {x=$2; sub(/D/,"e",x); print log(x)} file
perl -lne push @{$l[($.-1) % 3]}, $_; }{ print "@$_" for @l data.txt | column -t
ZSH/**/*.zsh)
(curl -sb -H Accept: application/json http://host:8080/some/resource)
read -p Continue? [y/n]:  yn < /dev/tty
perl -i~ -pe s|^\s*listen\s*=\s*\K /var/run/php5-fpm\.sock|127.0.0.1:9000|x file

filehash=`openssl dgst -sha1 $filename | sed s/^.*= //`
foo=`exit 1` ; RC=$? ; readonly foo ; `exit $RC`
sed $PROJECT_DIR/settings.py ^COMMIT_SHA = .*$ COMMIT_SHA = "$COMMIT_SHA"
sed -r s/(\"key\" : )\"[^,]*/\1"Newvalue"/g file.json
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
awk FNR==NR {a[$1 FS $2]++; next} a[$1 FS $2] file1 file2
awk -v FS= --non-decimal-data {for(i=1;i<=NF;i++)printf "%d%s","0x"$i,(i==NF?RS:" ")}
tac file | sed 3q;d
grep -r foo path| sed s:$(~shared)/:shared/:
awk -F: {printf "%s, ", $1} END {print ""}
split -a 5 $file
awk BEGIN{FS="="; OFS=" - "; desc=""}function display(){print dev, desc, flags}/Device/{if(desc!="") display(); desc=""; flags=""; dev=$0; gsub("Dev.*PLAY", "Display ", dev)}/Desc/{desc=$2}/Flags/{flags=$2}END{display}
grep -f <(printf BBB\nAAA\n) file
gawk -v FPAT=[^",][^,]*|("[^"]*")*
sed \:$PWD:d < $myfile
FILE *fp = popen(Prog, w);
awk /^>/ && r { print r, "-", s; r=s="" } /^>/ { r = substr($0, 2); next } { s += length } END { print r, "-", s } file
echo {a..z}{a..z}{a..z}{a..z}
perl -wane for (@F) { if (/(aaa),(.*)/) {$text = $2; $text =~ s/$1//; print qq{$text\n}; }}
(find ./test_script -depth -type d); for i in $dirs; do read -p Delete files in $i?   REPLY; if [[ $REPLY == [yY] ]]; then rm -r $i; fi; done;
commit (S+)[rn]*Author:[^<]*<([^>]*)>
giving up after 10
grep -P cAND[ ]*\K\S+(?=[ ]*(?:c.|\(p)) some_path_or_files
vi -c :1d -c :wq file > /dev/null
--out $pop1_$pop2_fst
ps h --ppid $PID -o vsz | awk { SUM+=$0 }; END { print SUM }
ls /tmp
awk -F, $1=="01/02/2002"{p=1} $1=="01/08/2008"{p=2} $1!="01/08/2008" && p==2{exit} p dataset.txt

myString=$foo
out.write(num + \n);
(echo $str | sed s# \(//\)#\$\n\1#g)
echo 1 | while read L; do echo; done
sort -n numbers | tail > largest
uniq -f 2 input > outputfile1
(xl list|egrep new_redhat9 | tr -s   | cut -d   -f 2)
mail -a info.cvs -a results.log -s Info $MAIL_RECIPIENTS < /dev/null
(phantomjs Lib/loadtester/runTests $TEST_COUNT $CLIENT_LIMIT $ACTION $PROFILE $TEST_SERVER $TEST_INCREMENT $DEBUG_MODE > /tmp/$TEST_COUNT_log.txt &)
:81,129s/ $ARG/ \$ARG/g
rm $file
avrdude -P\\.\USBSER000 ...
dir /s /b c:sqlplus.exe
sed -i 1i \here comes header files
sed s/_/-/;s/_/-/;s/_/ /;s/_/:/g <<< $a
find . -type d -exec sh -c printf "%s " "$0"; find "$0" -maxdepth 1 -type f -printf x | wc -c {} ;
find . -maxdepth 1 -regex \./[0-9][0-9][0-9]p\.pdb | xargs -I _IN_ csh -c program _IN_ `echo _IN_ | sed -e s/p/h/`
perl -aF, -lne print if ! $seen{$F[1]}++ data.txt
curl -T /file/to/upload.xlsx -u username:password ftps://ftpshost/

grep $foo file.txt
SETTINGS_FILE=~/.m2/settings.xml
awk -F\" {print $2}
expect -c spawn ssh -oStrictHostKeyChecking=no -oCheckHostIP=no $1@$3 $4; expect "*assword:*"; send "$2\r";expect eof;
for file in *.gz; do echo Filename: $file; zcat $file | head -2 ; done
while $(true); do ps -eaf | nc -l 1234; done
grep -vf input2 input1
(python2.7 -c import site; print site.getsitepackages()[-1])
{!dir_no}
zip -r ~/export/${studyinstanceuids[@]}/20140620_${studyinstanceuids[@]}.zip .
ORS The output record separator, by default a newline.
curl www.some.where.com
while read line ; do if [ -f $line ] ; then echo $line ; fi ; done < files.txt

su - oracle -c echo "select database_role from v\\$database;" | sqlplus -s / as sysdba;
if [[ $0 == /* ]]; then
echo $PATH;
find . -type f ( -name *.txt -o -name *.md ) -exec sed -i s/lion/hawk/g {} ;
sed -e s/^\([0-9]\{3\}\).\(.*\)/(\1)\2/g yourfile
process = subprocess.Popen([bitcoin, getinfo], stdout=subprocess.PIPE)
(curl http://auth.address/login.html | awk -F" /au_pxytimetag/{print $(NF-1)})
curl --data birthyear=1905&press=%20OK%20 http://www.example.com/when.cgi
cksum {01..12}.wav > cksum.txt
while read -r p; do
find -type f -name *.php -exec sed -i :a;N;$!ba;s/<?\([ \n]\|echo\)/<?php \1/g {} ;
xargs -I {} cp -a {} /path/to/backup < list_of_interesting_folders
PS1=|%*| ~ 
cp combined.{txt,jpg,pdf} ~
awk {print \$0"|"$(date +"%d-%m-%Y")}
find -type f | grep -P \w+-\d+x\d+\.\w+$ | xargs rm
echo ${nodeID}_[0-9][0-9][0-9][0-9][0-9]_19700101010${ts}_udp_filtered.pcap
perl -CIO -pe s/[^[:print:]]//g
cp {LTE,Voice}*.html subdir1/
echo() { builtin echo ==> $@; }
sed -i s/AA BB/CC DD/g file
sudo pip3 install nose
sed s|<TH[^>]*>|<th>|g file
setlocale(LC_ALL, th_TH.UTF-8);
find . -maxdepth 1 -type d -exec mkdir -p {}/converted ;
eval echo $ANIMAL$i
for i in {1..5}; do echo F$i > File$i; done
help $@
sed -i -e /^HETATM/d *.txt
echo one && echo two
awk FNR==NR{a[$1]=$0;next} !($1 in a) {print $1, $4} file2 file1
awk NR==FNR{a[$1]=$1; next} FNR<2||a[$1] LIST DATA
sh script.sh
awk {for(i=2;i<NF;i++)printf "%s",$i OFS; if (NF) printf "%s",$NF; printf ORS}
send Pass\\$word\n
sed -r s/^\s+$// infile | cat -s > outfile
ssh $@ | tee >(grep -e .*\@.*\:.*\$.* --color=never --line-buffered >> test.log)
Shell(c:\Windows\explorer.exe search-ms:displayname=Search%20Results&crumb=System.Generic.String%3A & <variable> & &crumb=location:<your search location>%, vbNormalFocus)
awk -F x22 {count+=$2}END{print count+0} input.txt > output.txt
dat=`ssh -l $LOGIN1 grep -i num /Data.cfg | cut -d ":" -f 2`;
awk NR==FNR{a[$1]=7;next}a[$3] file2 file1
sh script.sh MY_MACR0_VALUE="123ABCD"
[[ $(cat /root/pid) == $(ps aux | grep 'python' | grep -v grep | awk '{print $2}') ]]
awk {if (!($18==0 && $19==0 && $20==0 && $21==0)) print $0} file
python manage.py sql myproject > initial.sql
stat --format=%n:%s *
printf \033[1;4;31m%-${COLUMNS}s\033[00m Command failed with $RANDOM
sed -e /./{H;$!d;} -e x;/dn: cn=Configuration/!d my_file
date -d 2013-11-12 13:00:00 +%Y.%m.%d %H:%m:%S %Z
-source=path1 path2
( sed -n -e s/\r$// -e s/^instance.dns=//p $1 )
awk -v n=4 /listen = / && ++m == n {$3 = "2.2.2.2"} 1 file > file.changed
sed -e s/"[^"]*"//g file.txt
find $TARGET_DIR -regextype posix-extended -regex .*/$now.* -fprint $FILE_LIST
sed s/[(,)]/\t/g yourfile
awk -F, {print $4} x.CSV | awk -F  {print $1} |sort|uniq
vim *
awk /^Text Point/{print p; p="-" } /String/{ p=$0} END{print p} input
bwFile.write(\r\n);
[[ $(tail -1 file1) == $(tail -1 file2) ]] && echo same || echo not same

c:>test.exe > output.txt && type output.txt
grep -o .*/ file.txt
jq .imageHeight data.json
docker ps -q | xargs docker inspect --format {{.State.Pid}}, {{.ID}} | grep ^${PID},
sed /a/d toy
source b.fish; or exit 1
echo ${foo%.*}
sed s/^[^:]*only\(1[01]\)[^ ]*/\1/
sed s/delete from \(tb[0-9]\?\).\([[:alnum:]]\+\)/delete from \2/g input.file
array=( /Volumes/*/ )
tr [A-Z] [a-z]
for file in *.MTS; do encode -i $file -o ${file%.MTS}.mp4; done
echo {.,lib}/*.js
{GIT_COMMIT:0:8}
[[ $var == set @test_date =* ]] && echo true || echo false
awk -F/ gsub($3,"anotherdomain",$0) <<< $urls
echo face_date:=TO_DATE($(echo $str | cut -d '=' -f2)),'YYYY/MM/DD');
awk BEGIN{FS=OFS="|"} NF==20 && $1~/^[0-9]$/ && $2~/^[a-z]{2,4}$/ && $3~/^[YN]$/ file.csv
while [[ $(<file) == Continue ]]; do ... ; done
curl http://host/path/to/init.sh | sh
echo awk -F, '\$12 != 0' ${TargetIDs}_output.csv >> ${TargetIDs}_output2.csv
awk /searchphrase/{c++} END{if(c == 0) print "No Match"} file
eval $command
awk /^O/{if(seen==0){seen=1};c=$0} !/^O/{if (seen==1) {print c; seen=0;}} myfile.txt
0 0 * * * /tmp/myscript.bash
if mount |grep -q abc; then echo export pqr; fi
sed s/\(ADD INDEX\) \(.*\) ON \(.*\)(/\3 \1 \2(/
find . -type f -name *.cpp -exec sh -c echo {} && cpp -M {} | grep -c stdafx.h ;
mycommand >(cat)
awk -F[ :]* {if($7 == $9 ) print $1,$2,$3,$4,$5,$6,$7,$8,$9; else print $1,$2,$3,$4,$7,$8,$5,$6,$9} input.txt|column -t
[[ -n ! && -n $HOME/.some_directory ]]
ls -e foo
find . -path ./.OldFiles -prune -o -type f -print
@foo.sql bar
awk /PropertyName=\"ABC\"/{print; getline; sub(/true/,"false")}1 file
find /Users/me/Workspace/ -type f -name *.png ! -name *@2x* -exec echo rm {} +
awk {if (a[$1,$3,$4]++ == 0) print > "file1"; else print > "file2" } input
sed -e 1,/<tr>/ s/<tr>/<tr class="active">/
rsync -vaz --exclude *.txt /path/to/source/ /path/to/destination/
awk /O[0-9]/{out=$0} out{print > out} file
MY_ARRAY=( $MY_VARIABLE )
awk {sub(/H....\$/, "replacement")}7 file
rename s/^.* (.*\.csv)$/$1/ *.csv
wine abc.exe
awk {for(i=0;i<$2;i++) print $1;} file.in > file.out1
sed -i s/a = "apple"/a = "banana"/ filename
sed s/\*$//;s/\*/.*/g
[[ $file != *RELEASE* ]] && mv -f $file ${file//RELEASE/$1}
eval environment=$$1
perl -ne print $1 if /M2\{/ .. /\}/ and /Freq:\s*(.*)/ file
if [[ -z ${!default_var} ]]
sed -re s/(\S+)\s+(.*)\s+(\S+)/Field1 = \1\nField2 = \2\nField3 = \3/g file
sort | uniq -d
sudo st-admin show-members --group <group id>
vi /some_file/which_is_on_the_remote/machine
chmod 755 lks.sh
grep -P (?i)\*\*[a-z\d]+\*\*[a-z]+_\d+_\d+ somepath
>> echo 230-20-5 | python2.7 -c exec("inp=raw_input()\nlst=[int(x)+5 for x in inp.split('-')]\nfor x in lst: print x\nprint \'the result is:\', sum(lst)") > out
git remote -v
sed -E s/^(.{11})49/\158/ data.txt
sudo tee /etc/nginx/sites-available/master <<EOF
echo foo bar baz q45 | awk { for (i=1; i<=NF; i++) if ($i ~ "q45") print $i; }
cp $1 subdirectory/2014-06-28-08-28-59
sed :a;$!{N;s/\n/&/3;Ta};/^\[Data\][^\n]*\n\n[^[][^\n]*\n$/b;s/\n//;D file
wmic product where name=program name call uninstall
grep -P (?sm)^\S+[^:\r\n]*?(?=\s*:(?:(?!^\S).)*?Groundhog Day) mymoviefile
sed -i s/^# // inputFile
subprocess.call([screen, -S, jcmp, -X, stuff, 'kick Jman100'`echo -ne '\015'`])
tail -f ~/Library/Logs/iOS Simulator/7.1/system.log
jenkins ALL=(ALL) NOPASSWD: /home/quaser/restart-apache.sh
alias myalias=myprogram \$(pwd)
sudo find / -name *.exe -exec sh -c rm -rf $(dirname $0) {} ;
sed -i s|search|replace|g file
SHELL=/bin/bash
read -r var < <(ssh remote echo test; sleep 5) ; echo $var
param1=abc param2=xyz /home/abhijeet/sample1.sh
sed -e s:^\(.\{1,10\}\)\(.*\)$:\1^\1\2:
awk -F\t ....
sed -e 2s@^@https://otrs.confidential/index.pl?Action=AgentTicketZoom;TicketID=,@
awk {print "'" \$1 "':'" \$2 "'"} input
alias chrome=open -a "Google Chrome"
rsync --progress -rvze ssh -i/path/to/ssh_private_key my_user@myserver:/root_folder folder/
sed -i s/\(.\{1\}\)//;s/    / /g file
grep -c pattern *.sh
rename s/document\.(\d\d)\.?(\w+)?(.txt)/"docs $1".($2 && " - $2").$3/e document.*.txt
echo export PYTHONPATH=/usr/local/lib/python2.7/site-packages >> ~/.bashrc
(echo type: 1000 | cut -f 2 -d  )
echo $PS1
.FindDocs.ps1
if [ $HOST !=  ]
awk NR==FNR{a[$1]}{for(i in a){if(i==$2)print $0 >> $2}} Pattern.txt hugefile
sed -En -i.backup ...
grep ...|grep -v <...>\(000\|40[346]\|410\)<...>
run visudo
adb shell su -c 'chmod 777 /my/path'
--exclude-from=FILE read exclude patterns from FILE
perl -pe BEGIN{$i = 2} s@^@=HYPERLINK(B${i},C${i})@; $i++ input.txt
echo echo a$\t$\t | bash -i 2>&1 | head -3 | tail -1
awk ... FS=: file1 FS=  file2
sed -e /"/,/"/{p;d;} -e /^ *$/d
find . -name *.foo -execdir bash -c [[ -f "${1%.*}.bar" ]] && rm "$1" - {} ;
git merge --no-ff develop
sed /^1/s/\(.\{4\}\)\(.\{9\}\)/\1123456789/ $DEST/$FILE_NAME$DATE.txt
sed s/$/ foo/ r.txt > newfile.txt
egrep -o (January|February|March|...|December) [0-9]+, [0-9]+ Input.txt
eval ping -I eth0 -c 10 www.google.com $DUMP
wget -q -O - goo.gl/vfYA94 | sed -En /<strong>([1-9]|[12][0-9]|30|31)\./,/<\/blockquote\>/p
awk -F, {a = -log($16)/log(10); printf("%0.4f\n", a)}
hg log -r reverse(date("yyyy-mm-dd to yyyy-mm-dd"))
./anotherScript ${@:2}
ssh -t -t $user@$i
crontab -e
sed --posix s/[^"]*"\([^"]*\)"[^"]*/\1,/g;s/\(.*\),/\1/ input.txt
sed s/\\0001/\t/g;s/$/TEXT_TO_APPEND/ input.file
{ $1 ; $?; } >$dir/retc &
awk -v d=$(date -d'24 hours ago' +'%F %T,000') $1" "$2>=d &&/YourSearch/ log
perl -pi -e s#VALUE#replacement#g *.xml
cat bla.log |awk -F: {print $2":"$3":"$4} | awk -F, {print $1}
for f in *.tar
sed -n /$a/,/$b/p -- ${@:3}
awk -v RS=\n\t+ -v ORS=@ 1 file | sed $d
sed -n /Start/{:a;/End/!{N;ba};/930939023/!d;p} file
egrep -v ^[0-9!?@]|[0-9!?@]$ file
(cat UsedBash.txt | tr \n  )
chrome http://www.google.com/
var=select * from table where name=value order by name
sed s/^/^[^0-9]+/ < file2 | egrep -v -f - file1
(awk { sum+=$1} END {print sum} file_${cargo})
sed 1,2d $PGLIST
b(w+(?:W+w+)+?)W+(?=1b)
docker inspect -f {{.State.Running}} $CONTAINER_ID
perl -pe $i++ while($i < 10 && s/pattern/replace/) input
find ./someDir -name *.log -o -name *.TXT | tar -cf my_archive -T -
cmd_str =grep -R '#{search_str}' #{dir}
awk BEGIN{RS=";"} NR==2{print $0} yourfile.sql > output.sql
awk -F, { print substr($2,1,5) } abc.csv | sort | uniq | wc -l
eval echo $arr$n
diff new_jumps/true.jump old_jumps/true.jump | awk { if($1=="<" || $1==">"){($1=="<")?temp="New,":temp="Old,";print $2,temp$3,$4,$5}}
inotifywait -e modify /sys/class/net/eth0/carrier; echo Change detected
cdo remapbil,r720x361 $ofile1 remap$R.nc
ls -l --time-style=+%Y %m %d | grep zypper | awk {print $6,$7,$8}
ls -al | awk /^d/{d++}{print}END{print "Directories: "d}
(echo $FOUND | cut -d / -f 6)
System.Diagnostics.Process.Start(Process Name)
sed s/(\([[:alpha:]][[:alpha:]]\))/\1/g
find . -name file-$a.sh -o -name file-$b.sh
java -jar ./knowledge-generator.jar
sed /^ \*.*\.[hc]pp$/d file
mosquitto_sub -t newtopic/test -h test.mosquitto.org
echo 123adv123 | sed s/\([a-z][a-z]*\)/#/g
chmod a+x configure
egrep -f <(cut -c4-10 A | sed -e s/^/^.{6}/) B
mycommand $files > ~/Desktop/out.txt
sort -m -k1 <(gunzip -c sorta.gz) <(gunzip -c sortb.gz) >sorted
pdftotext myfile.pdf - | grep pattern
cat 123; source send_reminder.sh
FOR /r %%i IN (*.bak) DO 7z.exe a %%~dpni.7z %%i
find a -type f -name *.txt -exec sed -i.bac s/^/PREPENDED / {} ;
awk -F; $3+0 > 100 yourfile
openssl ciphers ALL:eNULL | awk -v w=RC4 !($0~w) RS=: ORS=:
curl -u username:password https://api.github.com/user/repos -d {"name":"repoName"}
/data/source_folder/ IN_CREATE /path_to_script/file_delivery.sh $
sed -n /Main step/,/./p inputFile
exec bash
log.txt:Name=abc Date=20140710
sort -t" -k4nr
tr -d \015 < worker.sh > worker_nocr.fixed
printf (..., b)
lazy() { for x; do touch $x; open $x; done; }
sed -i.bak 2s/^/\n/ file

sed -n /<Server>/,/<\/Server>/{s/.*>\(.*\)<.*/\1/p} < filename | paste -d   - - - -
saveVars=`grep -vxFe $initialVars <<<$(set -o posix ; set)| grep -v ^initialVars=`
sort -t ; -k 5 -r -n -o output.txt input.txt
awk /%ENDBLOCK POSITIONS_FRAC/{ exit }; p; /%BLOCK POSITIONS_FRAC/{p = 1}; geometry.xyz
sed --in-place=.bak s/\\en{\([^}]*\)}/\1/g your_file

grep exprt ~/.*
ls | grep -v _is\|_bkk\|_lb\|_sg
find . -name *.m -exec grep \[POEditor localizedStringWithKey: {} ; | awk -F" {print $2}
sed -e s/%t \\"/%t %D \\"/
-f file Reads the job from file rather than standard input.
Publisher.objects.all()[0].getJustDomainName()
cut -d, -f3
echo ${var}0
find <top-directory> -name *.class -fprint location.txt
emulate sh -c source ~/.profile
read $user
awk NR%2==1 {line=$0; next} {printf("%-20s%-4s%s\n", line, $2, $3)} file
sudo cat ./myfile | grep --line-buffered SOFTPAY:F:isoutl.c|L:01307| | uniq | awk -F | {print $3}
PS1=\[\e[0;32m\]\w> \[\e[1;32m\]
check_ifrunning=`ps aux | grep programmname | grep -v grep | wc -l`
parallel du ::: */*
\n; arr=( $(awk -F: {print $1 ":" $2 } Input.txt ) )
set | grep -i INT | cat -vet
git clone https://yourLogin@bitbucket.org/someUser/aRepo
find . -type d -execdir mv {} {}
404 mod 256=148
grep -vf <(grep -o /[0-9]*- file | sort | uniq -d) file
find /source/picturesRoot -type f -name *.JPG -exec rsync -a {} /destination/flatView/ ;
grep \b-32\b file
program1&; program2; kill $!
printf %s $text | ...
awk FNR==NR {a[$1];next} {for (i in a) if (index($0, i)==1) print} file2 file1
awk -v RS=</Row> -v u=$findURL -v email=$EMAIL $~u{sub(/NOTHING_HERE/, email)}1 ORS=</Row> /home/pi/testJMC/JustLinksJMC2.xml | sed $d
echo rend | ./spellcheck corpus_colors
newkey = oldkey.gsub(/(?<=[a-z])(?=[A-Z])/, -).downcase
shell(setx PATH "C:\\Program Files (x86)\\Git\\bin")
(/path/to/rtest 2&>1)
sed -i -e s/\(HOST_IP_ADDRESS=\).*/\1$(hostname -i)/ filenames-go-here
sudo apt-get install autossh
awk FNR==NR {a[$1]=$2;next} a[$1]{$1=a[$1]}1 OFS=\t subfile file
ssh -oConnectTimeout=5 -oBatchMode=yes -l group servername bash -s -- -7 < /some/path/top_command.sh
grep -o name="[^"]\+" your_file
awk 1 <(echo $MSG) file
PS1=\n[ $(pwd -P) ]\n=> 
wget -O - URL | command
awk -F : -v dt=$DATE_HOUR $1==dt log.txt
DataFunction | mail -s Title Bob@123.com
[[ $var1 = N ]] || { command 1; var=N; echo $var; }
parallel --xapply python interleave.py <(zcat {1}) <(zcat {2}) |gzip > {=1 s/_R1.txt.gz/_interleave.txt.gz/=} ::: *R1.txt.gz ::: *R2.txt.gz
grep -r `def *
compgen -C ls -f
tar -cvf ....path with spaces....
LC_ALL=C fgrep -f ./my/patterns.txt ./my/file.txt | awk NF == 7 | $decoder > ./path/to/result.txt
find . -mtime +0 -printf %f\n > list.txt
powershell ls 'C:/My Programs/CPU Analysis/data/test/' | ForEach-Object {$_.LastWriteTime = Get-Date}
sed s/^\s*\(.*\)\s*/\1/g file
find /yourdir ! -user root
 NR>1{printf "=HYPERLINK(B%d, C%d) t https://otrs.city.pittsburgh.pa.us/index.pl?Action=AgentTicketZoom;TicketID=%s\n", NR-1, NR-1, $0}
sed s~#\(FILE.*/this/is/a/file/path/.*\)$~\1~ file
find $(dpkg -L package_name) -name filename > find.out
test -e $newname && echo $newname not overwritten || mv $file $newname
printf Memory Usage: %s/%sMB (%.2f%%)\n
Get-Content ex1.sql | sqlite3 ex1.db
if $f == *.pdf
sed s/,[^,]*,[^,]*$//g sample.csv
sed -i 1s/^/x\ty\tz\n/ INPUTFILE.txt
ping google.com | while read pong; do echo  $pong  @$(date  '+%Y%m%d%H%M%S.%N'); done
install -Dv /dev/null some/new/path/base-filename
((aaa bbb) (ccc ddd=eee) (blah))
awk a[$1]{$1=$1"_"a[$1]}{a[$1]++}1 file
t
tr -d \r
sed s/,/\',\'/g
sed s/^\(.*[0-9]\).*$/\1/g file
awk {if (NR == 1) {temp1=$2;min=$1;max=$1;} else if ((NR % 2)!=0) {temp2=$2; if (temp1 == temp2) {max=$1} else {print (temp1,min,max); temp1=$2;min=$1;max=$1} } } END{if ((NR % 2)!=0) {temp2=$2; if (temp1 == temp2) {max=$1} else {print (temp1,min,max);} print (temp2,min,max) } } inputfile
command: bash -c dpkg -l | grep python-apt
sed -r s/(\w)\.(\w)/\1\t\2/g file

convert -quality 100 -delay 40 -loop 1 boxed{1..100}.png movie2.gif
awk $0 >= s && $0 <= e s=$start e=$end file
inotifywait -re create /tmp/test1/ && echo Change detected
awk -f program <(...) - <<<$stdout
sort --field-separator=" --key=4 -n
sed :l s/\(number="[^" \t]*\)\s\s*/\1/g;tl input
sed H;/pattern/h;$!d;x;//!d file
if [[ $(a | b | c | d) !=  ]] ; then
sed s/^.* //
call setenv.bat
C:\Program Files\Microsoft Office\Office14\excel.exe /e C:\My Programs\CPU Analysis\data\IOParse.xlsm -iodumplocation C:My ProgramsCPU Analysisiodump065901_iodump.txt
[[ -e ${MY_HOME}/setup-env.sh ]] && source ${MY_HOME}/setup-env.sh || { echo ERROR: MY_HOME not defined or does not contain srtup-env.sh 1>&2 ; exit 1; }
argscmd%dict(inname=test1.png,outname=test1-2.png)
response=[ { "__type": "File", "name": "...tfss-ea51ec70-d3a8-45e5-abbf-294f2c2c81f0-myPicture.jpg", "url": "http://files.parse.com/ac3f079b-cacb-49e9-bd74-8325f993f308/...tfss-ea51ec70-d3a8-45e5-abbf-294f2c2c81f0-myPicture.jpg" } ]
awk /(^| )abcd( |$)/ file
(INSTALL_LIB)
i=4; seq 1 10 | sed -n ${i}p
( (sleep .1; ... )
df -kh -B 1g /ws/abc-Location03 | awk {print $4}
sed s/64/\n&/g file
sed -n s/.* \([^ ]\{1,\} discovers <PLANET>\).*/\1/p

unset GIT_DIR
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/Applications/MATLAB_R2012b.app/bin/maci64
sed :a;s/\t\t/\tNA\t/g;ta file
find /usr/lib -maxdepth 1 -type l -iname *libblas*|xargs -I{} sh -c echo "{} =>" $(realpath {})
rm -rf $(find /home/ -name *.mp3)
for filename in *.txt; do
sed -E -n s/(.*)/\1/p
(subst ,',$($(v)))
/path/to/rvm 2.1 do /path/to/script.rb args...
perl -ne if($_=~m/^(?!.*old).*|^.*?(?:[a-z]old|\dold[a-z\d]).*/i){print "$&\n";}
java -cp xxx.jar YourProgram < Path/to/the/file
find $DRIVE -mindepth 1 -depth -name found.??? -type d -exec rm -r {} ;
find `pwd`
echo bash myfile.txt | at midnight
--tree-filter bash preserve-only.sh foo bar
[ -z $__var1 -a -z $__var2 ] && echo Both missing!
fuser -v /path/to/your/file | awk BEGIN{FS=""}$38=="F"{num++}END{print num}
awk -F, {system("sleep 1");print  $1} sample.csv | netcat -lk 9999
subprocess.call(./x <inp.txt, shell = True)
machine1001> Connection closed by foreign host.
(date +%m-%d)
if [ find /tmp/meta.plist -mtime -30 ]; then
for file in $(find -E * -type f -iregex .*(${TYPE:1})); do
val doc: scala.xml.Elem = scala.xml.XML.loadFile(args(0))
ps -p [process pid] -o sess=
if [[ $ANSWER =~ ^[Yy][Ee][Ss]$ ]]; then echo yes!; fi
echo -e ${CONFIG_FILE}x
sed -i -e s/public\s\$password\s=\s'\(.*\)'/private \$password = 'jingle'/ configuration.php
sed -i s/f([^)]*)/yo/ t
add 10 20 | xargs square
IFS read -rn 4 var_prefix
PYTHONPATH=. DJANGO_SETTINGS_MODULE=testsite.settings testsite/tornado_main.py
sort -r -t, -k2,2 -k17,17 input.csv
awk { if ($0 ~ /network=\{/) { exit } print } wpa_supplicant.conf > /some/file
/
echo Hello, world! | gsed /^\w\{3\}lo, wor.*$/d

awk -F# !a[$1]++ your_file.txt
geoiplookup 8.8.8.8 | awk /^GeoIP Country/{ sub(/,*$/, "", $4); c = $4; } sub(/^GeoIP ASNum Edition: /, ""){ print $0 "," c }
awk /The http port is/ {f=$NF} END {print f} file
VARIABLE=!bla!
productCount=`system( systemCall )`-1;
alias -g G=| grep --color
<delete_target target_id="$variable"/>
/var/www/clients/clients1/web1/web/
if [[ ${vara
set path=%path%;thedirectorywherefilezillaresides
s,pattern,substitution,
awk BEGIN{ ORS = ""; RS = ">"; FS="\n" } $1 == "pattern" { print ">" $0 } file
:set fileformat=unix
awk /test/{p=1} /^([0-9]|\[)/{p=0} p file
awk NR == FNR { a[$1, $2]++; next } a[$1, $2] file1 file2

{ read -r; read -r; program; } < inputfile.txt
awk {for(i=1;i<=NF;i++)if($i~/dbsnp/)print $i}!/dbsnp/{print "N/A"} dbsnp.tsv
sed s|\x1a||g your_file.txt
<source parallel curl -X POST -H application/json myURL -d {}
awk NR==FNR{a[NR]=$0;next} {split($0,b,a[FNR]); print b[1]} file1 file2
ps -o ppid= $ID
echo Decimal: 999/581 | sed -e s/[^0-9]*//
PID=`ps -o ppid=$ID` should have had a space between `ppid=` and `$ID`.
find $(ls) -amin +120 -exec some command here ;
echo ${$line/coordinateIndex=0/coordinateIndex=124}
myscript.sh 2> errlog.txt

system python, ./post_request.py, --json, json
perl -0777 -pe s/\n\?\n//g file
IFS=: read -r -A a <<<$string
awk { print $1 > $3 "-" $5 ".tsv" } your_file
awk -F, {s[NR]=$1;e[NR]=$2;} { for (i=s[NR];i<=e[NR];i++) print i","$3","$4}  Input.txt
xcodebuild -project <projName> -scheme <schemeName> -sdk iphonesimulator8.0 -configuration Debug clean build
cmd : [echo 'some_text' | tr '\n' ' ' > ~/some_file],
sudo sed -i.bak /^127\.0\.1\.1/s/^/#/ /etc/hosts
open -a Terminal.app script1.command & open -a Terminal.app script1.command & open -a Terminal.app script1.command
sed -i  s/old/new/ /Users/A/file
fc -ln -1 | xsel --clipboard

awk -F , -v tId=$1 $0 ~ "(^|,)" tId "(,|$)" file
adb devices | grep -o \b[a-f0-9]\+\b
<textarea id=command-line></textarea>
foo bar <(qux)
gawk -vRS=SEP /PATTERN/ {print RT $0 RT}
String scriptloc= workingDir + /process-executor.sh;
grep -l desiredString *
import os
awk -F| !a[$1]++{print $1} infile
FOO=bar
service_states = s.read().splitlines()
cmd > out.txt
subprocess.call([/full/path/to/my_shell_script.sh,my_argument])
sed -e /S\|A/d file.
{file%%[^0-9]*.jpg}.jpg
bash -c echo this is a bash script; echo lalalala
re=foo\.bar
find . -name *.123 -o -name 123.* -print
sed -i /another-pattern/s/pattern/new-string/g ./file
awk NF >= 8 { a[++i] = $0 } NF == 2 { a[i] = a[i] " " $2 } END { for (j = 1; j <= i; ++j) print a[j] } file
SELECT SomeName AS Some Name FROM myTbl
libreoffice4.2 --headless --convert-to txt:text 2000.html
awk {a[$1] += $2} END {for( i in a ) print i, a[i]} testcf.txt
if [[ $first ]]
sed -r s|(style="position:absolute;top:[0-9]+)(px)?(;left:[0-9]+)(px)?(">)|\1px\3px\5|g file
echo -e \n\t\a
echo My email is abc@example.com | sed -r s/[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[A-Za-z]{2,4}/[emailaddr]/g
let num = (( 0 && 1 ))
cat /var/log/somelogfile | awk { if (system("grep -Fxq " $1 " textfile")) print "useful command " $1; }
grep -nr \$level --exclude=tmpfile2.txt . > tmpfile2.txt
ACCT=stat -c %U ${DIRARR[$i]};
bash node_modules/.bin/tsc -v
{ time python rsa.py ; } 2> /home/spike/tiempos_prueba.txt
nohup sh /tmp/cmd.sh </dev/null &
const unsigned char key[] = argv[3];
grep -r --exclude=*.cmd ckin ./
echo -e \001\033[32m\002cheese\001\033[0m\002
sed s/[^0-9]//g filename
{ date && sensors -A -f | awk {print $2} && awk {print $1;} /proc/loadavg; } >> ~/bunny
unexpand -a -t4 file > newfile
find /home/mba/Desktop/ -type d -name logs | awk { print $1"/*" }
crontab -e
find /home/mba/Desktop/ -type d -name logs | sed s/$/\/\*/ | xargs rm -rf
exec > >(exec tee >(exec xargs -n 1 -d \n espeak -- &>/dev/null))
find ./ -printf %f\n
{ sleep 5 2>&3 & pid=$!; } 3>&2 2>/dev/null
ping google.com
python -c import sys; print(sys.executable)
grep -E ^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$
awk $(echo 'BEGIN { print hello! }')
(last -i | head -n 1 | awk {print $3})
eval $(echo perl -ple ' s,@({a..u}{a..z}),\n\n\1,; ')
\f
msql -h localhost -uroot -proot -e database INSERT into userdetail SELECT  u1, u2, u3, d1, d2, d3 FROM USERS u INNER JOIN DETAILS d ON (u.id=d.user_id)
php -f /export/home/prjck/htdocs/protected/yiic.php SeleniumStartStop Killselenium > /dev/null &
awk /^==/ {out=$2} {print > out".txt"} file
awk {print $2} dihed_*.dat > file.new
USERNAME=`sed -n 2p /mystic/temp$NODE/CHAIN.TXT`
sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@host cd /opt/app/$DIR;SIZE=$(du -s);echo "YVALUE="$SIZE > ../size_$DIR.txt
find . -exec chown ${USER}:${USER} {} +
sed -i -r s/(\w+)\s*\*(\w)/\1\* \2/g
awk BEGIN { RS = "<alert id=\""; FS = "\"" } /<name>emergency<\/name>/ { print $1 } file
awk ... FS=, file1 FS=| file2
perl -i.bak -nle s~^(\s++)$~\\$1~; /\S/ and print file.txt
s3cmd ls -r s3://mybucket | awk $3 > 200000 {print $4} | xargs s3cmd get
LOG=/dev/stdout
awk {command=substr($0,70); print command} $TEMPFILE
awk BEGIN { RS = "<option value=\"" ; FS = "\""; } NF { print $1 } file
java -cp .;C:UsersBrandonDownloadscommons-io-2.4* Login
car [any of 0-9] [any of 0-9] (zero or more of any chars) .txt
uri_template=%s://%s:%s@%s/%s
awk -F, !a[$1]++ { keys[++i] = $1 } !r[FILENAME]++ { ++argind } { b[$1, argind] = $2 } END { for (i = 1; i in keys; ++i) { k = keys[i]; t = k; for (j = 1; j <= argind; ++j) t = t FS (length(b[k, j]) ? b[k, j] : "0000"); print t } } file1 file2 file3
if [ $a -lt $b ]
a[key] = value
strace ./SMILExtract
trap exit_function_name EXIT
sed -i s|\r|| yourscript.sh
print $NF \r
sed / 2001 /s/^/#/ file
su <user> -c <command>
awk {gsub(/\./,"");print $1,$5} file
awk -v RS= -v OFS="," NF { $1 = $1; print "\"" $0 "\"" } file
sed /^$SERIAL_NUM,/s/STATUS/OK/g file.csv
sed 1s/.*\(<.*\)$/\1/g file
awk -v FS=[ ,]* -v OFS=,  { for (i = 1; i <= NF; ++i) { match($i, /^(([[:alpha:]]+:[/][/])?[^/]+)/); $i = substr($i, RSTART, RLENGTH) } print } file
create_indexes.bat >output.log 2>&1
parallel ./myscript {1} ::: {1..100}
sed -i /^#.* 2001 /s/^#// file
PATH:/Applications/MAMP/bin/php/php5.5.10/bin
(grep -HRl pattern .))
awk {x=$NF;NF--;printf "%-100s %10d\n", $0, x}
call(sort {0} | uniq.format(FileOut), shell=True)
chsh
ALL ALL=(ALL) NOPASSWD: ALL

local DF_Result=$( executeCommand $1 )
dos2unix tmp.dat
awk /MOVING_DATA Phase/{gsub(/["]/, "", $11);sub(/\./, " ", $11);print $11}` /tmp/$$.status
sed -e 1s/fred/frog/ yourfile
powershell -command ([System.Security.Principal.SecurityIdentifier]('S-1-5-32-544')).Translate([System.Security.Principal.NTAccount]).Value
grep -v DNW sample.txt >> output.txt
if [ $(id -u) != 0 ]; then echo You need root permission for installing programs. 1>&2; exit 1; fi
java ~/Documents/conifer/ctmc/SingleProteinModel.java -classpath /path/to/Users/
kill -9 `ps ux | grep Infinite.sh | awk -F  -v pid=$$ pid != $2 {print $2}`
Query=UPDATE env_last_touched set last_touched_datetime='${file1}' where cust_name='${customer}'
awk -v OFS=\t FNR == NR { a[$1] = $2; next } { t = $1; sub(/_.*$/, "", t); print $1, a[t] } file1 file2
psexec -u user -p pass cmd /c d:\GitRepos\runAll.bat a1 a2 a3
user=bob lastb $user -t $(date -d $(last $user | head -n 1 | tr -s '[:space:]' '\t' | cut -f 4-7) +%Y%m%d%H%M%S)
cp -dr $rundir /var/tmp/$run
find -not -newermt -30 seconds -delete
gnome-terminal -x bash -c cat dksdamfasdlm; echo $?; sleep 2
printf -v ${vars[$i]} %s ${arr[$i]}

dbisql -nogui -host host1 -port 2740 -c uid=user;pwd=password script.sql
(echo Hi!))
tar tf archive.tar | head -1
awk -v p=password = [*] -v RS= -v ORS=\n\n $0 ~ p file
./yourscript file1 file2 ...
du -csh *.jpg
sed -i s/DEFAULT_DEV_PATH/DEV_PATH/g *
awk /=[[:alnum:]]/ file
find . -type f -name *.mp3 -print0 | xargs -0 basename
sed -e 2~2{ -f replace.sed -e }
cp ${dir}${file} .
b = match($23, [0-9]{6}1[0-9])
[[ $(tail -n 1 file) == *pass* ]] && echo pass || echo fail
/root/full/path/to/leaves/
for i in {0..5}; do echo $((2**i)); done
awk FNR == NR { a[$1] = $2; next } { print $1,  a[$1], $2 } file2 file1
kdiff3 source.c@@/main/branch/30 source.c &
ls -v file*.txt | xargs cat > output
grep -v -f 20000-words.txt 50000-lines.txt
sed -r s|(.*://)?([^/]*).*|\2| file
exe r!python -c "import random ; print('\n'.join(format(random.choice( . string(ListRange) . )) for i in range(14)))"
if [ $value -lt 10 ]
awk $1 == "2014-07-23" && $2 >= "01:00:00" && $2 < "02:00:00" { print }
awk /bhaskar/ && !p++, /ganesh/ bhaskar.txt
awk !seen[$5,$6]++ file1 file2
& C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\bin\i386\CmRcViewer.exe PCNAME
git log --pretty=oneline --branches -- $FILE | tail -1 | cut -f 1 -d 
mysqldump --host=localhost --user=root --password=******* lbs company > /home/lbs.company.sql
espeak -x -q -z >/dev/null 2>/tmp/mypipe &
awk -v ORS=STOP 1 file
jsonStr={ "key1": "value1", "key2": "value2", "key3": "value3" }
awk -v cutoff=$(date -d 7 days ago +%s) {line=$0; "date -d \""$6" " $7" " $8 "\" +%s" |getline; fdate=$1} fdate < cutoff {print line}  ftptimes
bind Q focus up
if ! crontab -l | grep -q start.sh; then
kill $$
awk /_y/ {print $1} myFile
test -gt 34
mysql> create database `happy-face`;
command ls -dt */ | while IFS= read -r dir; do du -sh $dir; done
sort -s -t- -k1,1n -k2 filenames.txt
if [ $( ifconfig -s | grep eth0 ) ]; then echo eth0 is up!
for file in `find /your/dir/ -type f`; do sed -i $file s|index.html|/|g; done

du -s $home/folder/sub-folder
perl -ne !eof() ? eval "\$$_" : s/(?<!\S)(?=[[:punct:]\d]*\$)((?:\$\w+|[[:punct:]\d]+|\s+)+)(?!\S)/\@{[$1]}/g && print eval qq{"$_"}; fox.txt
sed -n /foo/{s/foo/bar/g;=;p;} filename
awk -v a=$a -f myAwkFile.awk myTraceFile.tr
sed :a;N;/\[.*\]$/{/.*FAILED.*\n/{P;D};D;t};s/\n/-/g;$d;t a; file_name | sed s/-/\n/g
awk -F, -v var=$var { $3 = var } 1 OFS=, math_ready.csv > math1.cs
samtools idxstats $Bam | awk -v file=$fileName {i+=$3+$4} END {printf("%s\t%d\n", file, i)}
find * -maxdepth 1 -type d -exec zip -r {}.zip {} ;
sed -e 3rfile1 -e 3,4d file2
echo $line | tr -s   | cut -f1,2,3 -d  
x
find . -maxdepth 1 -type f -name *.pdf -exec cp -f {} ~/github/maps/fichesPedago/ ;
while getopts :a:1:2:3:4 arg; do
gtdownload [option & parameter] > gt.log 2>gt.error
awk -W version
echo $a | perl -pe s/(email:[[:graph:]]*,last)/\L\1/
bash -x bashplot.sh .... arguments....
sed G file
rename s/mp3\?.*/mp3/ *.mp3*
python -c import locale; locale.setlocale(locale.LC_ALL, ''); print ('\n'.join('text1 ' + locale.format_string('%.1f+(%.1f*(%.1f+2.5))',(i,i,i), grouping = True)  + ' text2 ' + locale.format_string('%.1f',i+(i*(i+2.5)), grouping = True) + ' text3'for i in range(1,1111)))
ve=`echo $line | cut -d   -f1`
tr \040 \n
awk /^ab[^a-z]+cd$/{gsub(/ab/,""); gsub(/cd/,""); print} file

type mv
sed -i.bak $TOINSERTLINEr data-file file

awk FNR==52 Files*
TERM=screen-256color ls -l --color=always
awk NR==102 {$0=$0","}1 file
(forever list | awk /server.*root.*\.log/{print $8})

notesPath=~/Documents/RN/_DailyNotes/
sort <<<$Chocó\nCundinamarca\nCórdoba
cd /vagrant && /path/to/grunt build
sed 1b;/pattern/d file
/bin/sh -c /home/MY_SCRIPT.py /home/arguments 2> /dev/null
awk {if($1 ~ /contig/){c=$1}else{print c"\t"$0}} <yourfile>
sed -ne /rootNode/{ p; b }; /<appender /{ h; b }; /<logger /{ h; b }; H; /<\/logger>/{ x; p; b; }; /<\/appender>/{ x; /COM_Find[.]log/b; /COM_FIND[.]log/b; p } file
ConEmuC -GuiMacro Rename 0 Title
sudo -S /opt/lamp/lamp start < /home/x/Documents/somePassword
(awk code file)
type input.txt|findstr /vixg:successful.txt
read -p $\e[31mFoobar\e[0m:  foo
grep pattern1\|pattern2 file.txt
IFS= 
var url = casper.cli.get(url)
awk BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR > 1 { gsub(/ /, "_", $1); print RS } 1 file
find . -type f | grep -i -f ./remove_list | while read line; do rm $line; done
awk -v OFS=, {$1=$1}1 file
(echo $VNCServerResponse | awk /desktop/ {print $NF})
grep ${DEPARTAMENTO:0:5} ARCHIVOS2MOVER | xargs -d \n mv -t $DEPARTAMENTO
(echo exit | telnet $1 $2 2>/dev/null | grep Connected)
sed -r s@([^\t])[*]@\1__0x2A__@g; s@[*]([^\t\r])@__0x2A__\1@g; s@[*]@@g; s@__0x2A__@*@g file
sed s/$/\n< _jupijuice_ >/ input.txt
/usr/bin/which: no systemctl in (/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin)
perl -0777 -pe s/\n(?!\d{5}\b)/ /g yourfile
diff -rq dir1 dir2 | grep differ | awk {print $2 "has changed"}
s_
awk -F" -v OFS=| BEGIN { print "*Brand", "Product", "Quality*"} { sub(/.* : /, "", $5); sub(/[.]/, "", $5); print $2, $4, $5 } file | column -t -s |
-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
unset PARAMETER
awk -F | -v OFS=| { gsub(/,/, "", $5) } 1 file
awk -F" -v OFS=" FNR==NR{ a[$0]++; next} $2 in a { $0 = "+" $0 } 1 file.csv target.csv
awk BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR > 1 {  gsub("~", "", $1); gsub("!", "", $1); gsub("%20", "_", $1; gsub("#", "", $1); gsub("$", "", $1); gsub("%", "", $1); gsub("^", "", $1); gsub("&", "_", $1); gsub("@", "", $1); gsub("*", "", $1); gsub("\\(", "", $1); gsub("\\)", "", $1); gsub(/ /, "_", $1); gsub("____", "_", $1); gsub("___", "_", $1); gsub("__", "_", $1); print RS } 1 piece1.txt
top -n 1 -b -c| awk -vOFS=\t NR>6 && NR<18 {s=""; for (i=12;i<=NF;++i) s=s FS $i; print $1,$2,$9,$10,$11,s}
Exec=sh -c chromium --user-data-dir=$(mktemp -d)
ssh -l username -o HostKeyAlias example.com example.com source /etc/profile;cd /Users/someone/cordova/appname;cordova prepare)
find /where/to/search -type f -iname *.SUFFIX -exec echo USER DEFINED STRING >> {} ;
grep -B2 URL has changed url.txt | grep https\?://
grep -Irs --include '*.*rb' foo .
[[ -s ~/.bashrc ]] && source ~/.bashrc
dos2unix run.sh
rm SVM*
mv ${f} $(echo ${f} | sed 's/\n//g')
screen -S myscreen -X stuff echo $MSG$\n
grep FAILED file.txt -B1
grep -H -m 1 \s-\?[0-9.]\+-[0-9.]\+\s dir/* | cut -d: -f1
sed -i s/$STR1/$STR2/g /misc/home3/abc/$FILE1
stty -echo
cd !!:$:h
perl -pe s/_[0-9]+/ /
awk { sum+=$9} END {print sum} /home/user/top_VM.txt
powershell.exe -Command if((Get-ExecutionPolicy ) -ne 'AllSigned') { Set-ExecutionPolicy -Scope Process Bypass }; & '%1'
grep -oE S[XN]00-[0-9]{3} file
java MyFile some&&argument some-other-argument anArgWithoutQuotes
grep -o -P \w+\((\w|\d)+\):\s+\w+\s+\d+ yourfile | sort | uniq > newfile
[[ -f ~/.bashrc ]] && . ~/.bashrc
sed -i s/\[getpwnam_ext\]//g filename
mount_smbfs //user:pass@address/C$ /Volumes/test
perl -pe s/^ AX.*\K>$//mg yourfile
paste -d ~ file1 file2 | sed s/~/,,/
find . -type d -mtime 0 -exec sh -c cat {}/*.coords 2>/dev/null ;
/6\.0\.0\.0\.\d{3}/!s/6\.0\.0\.0/6.0.0.0.001/g
perl -lane $state = (split(/[<>]/))[2] if /OpState/; print ((split(/[<>]/))[2] . " is $state.") if /<Name>/ file
for FILE in *; do mv $FILE ${FILE/_*_/_}; done
do_stuff() { echo $var; echo that; }
curl -d x=foo -d y=bar -d data=@some data http://somewhere
make >& make.log
sed -i /\<$param\>/s|.*|$line| myfile
<meta http-equiv=Content-Type content=text/html; charset=utf-8 />
export PATH= /Users/usrname/TreeTagger/bin:$PATH
echo `echo Hello, World!`
./myprogram | tee $g-$number-results.txt >> $g-results.txt
sudo glassfish4/bin/asadmin create-service
grep . | sed s|.*\:|| <( awk ... )
awk -v N=7 {print}/my_pattern/&&--N<=0{exit}
alias new=python /Python_scripts/radians.py
awk /[0-9]+:[0-9]+:[0-9]+/{x=$0}{a[x]=a[x]?a[x]", "$0:$0}END{for (i in a)print a[i]} file
[[ -f ~/.bashrc ]] && . ~/.bashrc
(df -h 2>&1 >/dev/null) || { date; echo $OUT; } >testErr.log
find /home/whoever/ /mnt/hd -name *.cpp -exec grep name {} ; -print
find . -name *.txt -exec cat -- {} ; | wc -l
coffee s.coffee
find /home/downloaded/ -type f -name *.gz -exec cat {} ; > output
awk magic files | paste - - | sort | sed s/\t/\n/
export EDITOR=<editor name>
declare a_$count=filename
python.exe path/to/script.py
if [ -d directory name -a ! -L directory name ]; then
printf %04d $1 | sed s/\(..\)\(..\)/\1 \2/
sed -nr s/.*abc=([0-9])\.([0-9])\.([0-9]).*/\1\2\3/p file
count=grep ^$(date -d -30minute +'%Y-%m-%d %H:%M') /var/log/zumigo/zlsapp.log | wc -l
npm config set prefix /usr/local
awk {for(i=1;i<=NF;i++){$i=$i-1}}1 infile > outfile
(grep -c $ITEM ItemStored.txt)
find / -type f -regex \(.*A.*a.*.*\)\|\(.*a.*A.*.*\) -exec tail -n 3 {} ;
-draw text 140,29 "ID: $i"
subprocess.call([bash, -i])
sed -nr /^ +tag[0-9n]+$/,/M[áa]x: /p;:A;s/^        \([a-z]\)/&/;tB;b;:B;p;n;bA file.txt
npm ls --depth 0 --depth 2 --depth 6 --depth 2
mergecap -w testfiles/tcpdump.pcap testfiles/*.pcap
if ls | grep xyzzy; then cmd1; cmd2; cmd3; fi
for i in *; do cat $i && echo ; done
rsync -uav 10.30.3.2:/var/log/messages /path/to/store/messages.10.30.3.2
cp /var/log/messages bug_iteration_$i
awk { sub(/[ \t\r]+$/, ""); sub(/^[ \t]+/, "") } !NF { next } /^[^[:space:]]+:/ { if (length(t)) print t; t = $0; next } { t = t $0 } END { if (length(t)) print t } file
echo info | vlc -q
tar -tf file.tar --wildcards *.jpg --exclude *.*.jpg
touch folder/sub.file.txt
find /hello -type f|xargs sed -i s#\(account[.]\)oldomain\([.]com\)#\1newdomain\2#g
find -type f ! -regex .*\.\(csv\|eps\|jpg\|nc\|ncf\|pdf\|png\|tif\)$ -print0 | du -hc --files0-from=- | tail -n 1
mc() { MC_IS_RUNNING=1 command mc $@ ; }
tr \n   < input | sed -e s/[.] \s*/. \n/g
join <(sed /^[0-9]* [0-9]* *$/!d input) <(sed /^[0-9]* [0-9]* *$/d input)
yes Yes | ./ittp-update.sh
(date +%Y.%m.)$(( $(date +%e) * 1440 ))
read IP CN < <(exec ifconfig en0 | awk /inet / { t = $2; sub(/.*[.]/, "", t); print $2, t })
if [[ grep $check_val1 $log -ne $check_val1 || grep $check_val2 $log -ne $check_val2 ]]; then
awk NR == 1 { print $0, "sum"; next } { if (NR == 2) { sum = $1 + $2 + $3 + $4 } else { t = $1 - a; sum = ($2 - b) / t + ($3 - c) / t + ($4 - d) / t } print $0, sum; a = $1; b = $2; c = $3; d = $4 } file
sed s/ *+/+/
sleep 2147483647
sed -i /^TER$/{N; s/^TER\nATOM/ATOM/} test.txt
IFS=\ bashFilePathArray=($bashFilePath)
rsync -av --exclude *min.min.js parent_dir dest_dir
php -r \$_COOKIE['PHPSESSID']='a095y187'; session_start(); \$id_client=$1; \$id_supplier=$2; \$_COOKIE['id_chosen_client_auto']=\$id_client; \$_COOKIE['id_chosen_client']=\$id_client; require 'manual_automap.php';
rm -fr -- foo.js FOOBAR bar.json fubar/ .foo/ .baz
awk {for(i=1;i<=NF;i++)if $1~/^locus_tag|^product|db_xref/) print $i} Chrom.txt

echo -ne \033[2J\033[H
awk -F\t match($0,/<html>.*<\/html>/){print substr($0,RSTART,RLENGTH) > $2} file
free -m
find /Volumes/NEXSAN/Engine Folders/Input/DTO_Proxy/* -type f -mtime +7 -exec mv -v {} /Volumes/NEXSAN/.2BeDeleted4realz/ ;
awk $2 < 54 && $2 > 50 FS=: input.txt
-A RH-Firewall-1-INPUT -m state --state NEW -p tcp --dport 21 -j ACCEPT
fgrep -v -f FILE2 FILE1 > RETURN.txt
scp -r your_remote_user@remote_address:/path/to/save/dir /local/dir/to/transfer
awk {printf "%s ", $3}
shell(echo Some text > CON)
ibeacon scan -b | ./python.py &
locate *re*trict*
eval `ssh-agent` && ssh-add ~/.ssh/id_rsa
IFS=, printf setup-x86.exe -q -p='%s'\n ${deps[*]}
command
while script; do sleep 10; done
find -E /somefolder -type f -regex \./(.*\.error.*|second.*log|.*FFPC\.log)$
sed \#$varHasSlash#d
`bash ./
IFS= |\\ read -ra array_1 <<< $var_result
sed -r s/((\s+\S+){3})/\1ADD/ fstab
split -l 20 file Partfile
echo Y`r | pw
awk -F: $1=="Ford" && $4=="Red" { c+=$5 } END { print c } file
sed -i.bak s~^~http://test.mysite.com/~ file.txt
egrep -n ^[,]+$ file
sed s/^server-port=.*$/server-port=33334/ …
sed s/\([0-9][-0-9 :]*\)\.[0-9]\{3\}/\1/ < a.csv
grep -oP skype:\K\w+ file
awk -F[<>] {print $3} input.txt
for var in $(compgen -v); do export $var; done
sudo sh -c for n in $(seq 1 60); do echo $n; sleep 1; sync; done
while [ -z $date ]
printf %s\n -n
awk /(on|off)line/ { o[++c]=$3 } substr($0,0,27)~$1 { v[c]=v[c] $1 } END{ for(i=1;i<=c;++i) print v[i],o[i] } file
commandLine bash, -c, sed -i "s:some:substitution:" *
java -jar ~/Downloads/simian-2.3.35/bin/simian-2.3.35.jar files ~/Classes/**/*
subprocess.call([cmd, pybot, AdminTests, -v, LOGIN URL:_mylink, -d, .\\results])
http://server:7997
find -not -perm -o=r
tail -c $(( 1024*1024 )) your_file > target_file
awk substr($0,0,24) ~ $1 { f=$1 }{ $0=f substr($0, length(f)+1) } 1 file
awk /username=/ {match($7, "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"); A=substr($7, RSTART, RLENGTH); split($9, B, "="); print(A, B[1]);} /var/log/mylog
ls | echo
sed -n s/.*myProg v\(FOO \)\?\([[:alnum:][:punct:]]*\).*/v\2/p
Invoke-Expression & `$scriptPath` test -r $number -b $testNumber -f $FileVersion -a $ApplicationID
awk -F : { printf "Car: "$1" "$2", made in " $3", "; if($5 == "0") {printf "no previous owners.\n"} else {printf $5" previous owner(s).\n"}}
awk -F[_-] {print "Version number : "$3; print "Release number : "$4}
paste -d \n F1 F2
*/5 * * * * cd /var/www/website && git pull origin master > /place/to/put/logs/mycommand.log
perl -pe s{/.*}{} file.txt
tr -d [0-9-] < file
echo $gitstatus
for i in {0..2} {4..6} {7..11..2}; do echo $i; done
mysql -u ***** -p***** admin-wp -e SELECT * FROM admin_wp.wp_8_posts WHERE post_type = 'post' AND DATEDIFF(NOW(), post_date) > 30 LIMIT 0, 10 
if echo $? > 0
while IFS= read -rd  file;
sed s|wxT(\([^)]*\))|\1|g file
curl -sL -w %{http_code} http://<ip_addr>/api/1/app -X DELETE -o /dev/null
mv $(ls -t | head -1) /abc/home/asd451/Output
./script1.sh && ./script2.sh
sed s/[[:space:]]\(=\|{{\|\*\|'\)/\n\1/g your_one_line_file
/srv/user-data.sh
awk {cnt[$2]++} END{for (gene in cnt) print gene, cnt[gene]} file
.git/refs/remotes/remotename/branchname
cat file1 file2 | sort -u >combined && mv combined file2
(history 1 1 | tr -s   | cut -d   -f 3-)
/home/apercu/git/Site-Lillie-Monster/{.tmp,app}/http:/fonts.googleapis.com/css?family=Raleway:400
rr.sh file1.txt file2.txt
grep -o $[0-9]\+ $1
\n; for f in $(ls -a);do echo $f; done
awk -F_ /ZINC/{print $1;next}1 file
if ! [ $NUM -ge 14 -a $NUM -le 26 ];then ... fi
ls *foo* | tail -n 1 | xargs rm
echo test [test1] test | grep -Po (?<=\[).*?(?=\])
([a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2})
sed -i 3,10d;13,20d;23,30d;33,40d file
while read line; do ./script $line; done < test.txt
awk { for (i=0; i<$2; ++i) print $1 } file
printf(%d\n,num);
git add user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG
{1}drop - /;
sed s/"\([^"]*\) "/"\1"/g file
START /WAIT VSIXInstaller.exe /q C:\Developpement\ABC.vsix
ping ... | awk /packet loss/{x="Loss:" $7} /round-trip/{x="Trip:" $4} END{print x}
awk -F" { printf (NR > 1 ? ";%s" : "%s"), $2 } END { if (NR) print "" } file
nc -l 30000
sed -i -r ${rowArray[$key]}s|^\s*-?[0-9.]+|${valueArray[$key]}| file
cut -d- -f3 your_input
scp -r server:first second third .
val = %x[
SHELL=/bin/bash
%{\e]0;%d\a%}\n%F{green}%n@%m %F{yellow}%d%f\n%# 
read -p Please enter the location of this report (type 0 to exit):  -e -r filelocation
sed -re s/api.(dev[0-9]+\.)?side.com/$SERVER_HOST_VALUE/g
`date --date=last month +%Y-%m`
echo shell_exec(make 2>&1);
local -a arr=( $1/*$2 );
cat filelist | while read i; do grep pattern $i; done
[[:space:];:,]
tail -f file1 | tee >(exec grep hello > fileHello) >(exec grep bye > fileBye) | grep etc > fileEtc
ps aux|grep [p]aramount
grep -Eo <div class="quote".*</div>
java com.learner.learner.Main
sed [OPTIONS] COMMAND FILE
FILES=/var/www/*

git config --global alias.ac !sh -c "git add . && git commit -m \"$1\""
set output filename . .png
gnuplot -e filename = '${!fileName}' plotFile
readarray -t arr < <(find . -type f)
command > output.txt
java -cp aspose-cells.jar:aspose-words.jar:aspose-slides.jar:. ConvertToPdf
sed -i.bak /this is a test/s/\[ .*\(source\)/\1/g ${INPUT}
printf  >>> Process Completed - Total Runtime (d:h:m:s) : %d Days, %02d Hours, %02d Minutes, %02.4f Seconds\n $dd $dh $dm $ds
for line in $list
awk {x[$1 " " $2]+=$3} END{for (r in x)print r,x[r]} file
BEGIN { RS = \t ; FS = -|\n ; OFS = \t }
help times
awk -v s=$ver BEGIN{gsub(/\./,"[.]",s)}$0~s{p=7;print;next}p&&/^==/{p=0}p file
rsync -r /foo /baz
find . -mtime 0 ( -name *.php -o -name *.xml -o -name *.phtml )
START_CMD=(exec /sbin/startproc -p $DHCP_AL_PID_DIRp_$i.pid -l $DHCP_AL_LOG_DIRlog_$i.log $DHCPALERT_BIN ${!var}) &
export PATH=<the path>
sed -i -e /^ONBOOT=/s|.*|ONBOOT=yes|; /^BOOTPROTO=/s|.*|BOOTPROTO=static| file
sed 2N;s/\n/ / file
biz || echo oh noes
/{N;N;s/
while getopts e:f:lh OPT
XTerm.backarrowKeyIsErase: False
test -n $x
cd $env:MYPSPATH
[[ $TERM == xterm ]] && export TERM=xterm-256color
/bin/sh -c /bin/df | awk 'END{gsub(/%/, "", \$5); print \$5}'

mvn --settings YourOwnSettings.xml clean install
test $(cat abc.txt)
sed s_${org}_${repl}_g $i > $temp_file
awk a[$0]++ file1 file2
sed 6s%value="[^"]*"%value="/u03/Oracle/Middleware/wlserver_10.3"% /u03/silent.xml
echo column3 = $(awk '{print $3}' test.txt |sort -nu |  paste -s -d, )
echo Please answer y or n. >&2
sort file -V | awk { print ++a[$1] "," $0 }
awk -v RS=\^~ -F~\^ -v OFS=, {$1=$1}1 file
cat ${@/#/t_}
awk {print substr($0,1,299) substr($0,501)} file
wget http://www.primary.com/file.zip || wget http://www.secondary.com/file.zip
sed -i -e s/\(org.eclipse.equinox.http.registry_1.1.300.v20130402-1529.jar@4\)\\:start/\1/ yourFileName
echo This is command #1; var=$(echo !
bash foo.sh
perl -i -pe s/pat1/pat2/g if 10 .. 19 file
for folder in */; do rar a -m0 -r ${folder%/}.rar $folder; done
echo $KEY
echo $PATH
(exec service --status-all | sed s|.* ||))
ProcessBuilder pb = new ProcessBuilder(wget, --progress=dot, url);
awk END{print NR} file
file]}
tar cvf /tmp/some.tar -C /path/to/dir1 . -C /path/to/dir2 .
echo echo hello | at now + 1 minutes
f1.addStep(shell.ShellCommand, command=pwd && cd /home/xxx/yyy && pwd)
ssh -p 30 root@serverIP
awk NR==FNR{sum+= $1; next}{printf("%4.2f\n", $1/sum)} input input
awk -v h=$(dist/forge-cli.phar --no-ansi) /{{HELP}}/{print h;next}1 in > out
bash -c date >&/tmp/log.$$ &
sed -e s|:|;| file
commands += @ & aws s3 sync C:\test\test2 s3://bbbbbb;
awk -F[[:space:],]+ {for(i=4;i<=NF;++i)print $1,$2,$3,$i} file
IFS=: read -r -a xa <<<$x
awk /[mM]essage[bB]ox\(/,/\)$/ {gsub(/.*[mM]essage[Bb]ox\(|\)$/,""); print} file
echo $line | nawk BEGIN {FS=" #" } ; { print $1 }
cat(/Users/myhomedir/.dbshell)
(exec awk /^port:/ { print $2 } /path/to/config.cfg)
ls -lS
git submodule status MySubmoduleFolder | awk {print $1;}
tree --help |& head -n2
shopt -u nocaseglob
cmd > /dev/null
for %f in (*.pdf) do for %g in (%~nf.rtf) do PDF2TXT -%f -%g -merge -fast -t %~nf.txt
7 ~ /3047UTR/
ls myDir -t | tail -3 | xargs 7z a myFile.7z
sed -i s#<parameter name="jersey.test.host" value=".*" />#<parameter name="jersey.test.host" value="abc" /># C:\file.xml
>/dev/null false
eval printf \n
perl -0777 -ne print join("\n", map {$_->[1]} sort {$a->[0] <=> $b->[0]} map {[length, $_]} split /\n/), "\n" file
echo printf $foo
git add $TARGET_FILES
sed s/\(if (\)\(\$_SESSION\['POST']\['\([^']*\)']\)==1/\1isset(\2) \&\& \$_SESSION['POST']['\3']==1/ file
dir & md folder1 & rename folder1 mainfolder
echo $path
./myscript file 1.gpx file 2.gpx
echo Answer: $(($num1 $whatOperator $num2))
sed -i .$BUILD -e s/\(version:[ ]*\)["'][0-9. ]*\(-dev\|\)["']/\1'$TAG$SUFFIX'/ -e s/\(build:[ ]*\)["']%build%["']/\1'$BUILD'/ $COREFILE
(head -n 1 file 2>/dev/null)
sed s/\] */]/g;s/\]\(.\)/]\n\1/g;s/ *\[/[/g;s/\(.\)\[/\1\n[/g item_gloves
gnome-terminal --tab -e ls; exec bash
cd c:xyzmysqlbin
sort File1.txt File2.txt | uniq -u
cat stuff.py
awk NR == 1 { I = NF ? 12 : 13 } NR > I IMSI$r.txt
sed /{/b;/pattern/{s//replacement/;:a;n;ba} file
mongoexport --db mydb --collection mycollection  --query `./test2.sh` --out ./test2.json && mongo mydb /home/dev/removeDocs.js
awk -F [<>] /<td / { gsub(/<b>/, ""); sub(/ .*/, "", $3); print $3 }  file
find . -name *.txt -exec dd if=source of={} oflag=append conv=notrunc ;
sed -i.bak 11,$s/pattern/repalcement/g file
sed -i -r s/\([^,]+,/\(/g file
ffmpeg -i rtsp://IP_ADDRESS/live.sdp -f image2 -updatefirst 1 img.jpg

xcodebuild -scheme MyiOSApp build

sort -r < yourfile

ssh -t -i pem user@1.1.1.1 mysql -h xxx -u user -p
cat hosts.txt | xargs -I %REPL ssh user@%REPL
(softwareupdate -l 2>&1)
sed -r s/^([^]]*)\[/\1\r[/g testfile.txt
if [ ~/scripts/wow.pl ]
for f in input_frame*; do [[ ! -f ${f#input_} ]] && echo rm $f; done
if [[ ! $url =~ $urlRegex ]]; then
rsync -rv --inplace --existing /path/to/dir/b/* /path/to/dir/a
bind t send-keys C-m ~.
sshpass -p red32hat sftp $userID@$serverIP <<EOF
for i in {0..100}; do python Script1.py $i > test/Run$i.txt; done
appcmd.exe set config -section:system.applicationHost/applicationPools /applicationPoolDefaults.managedRuntimeVersion:v4.0 /commit:apphost
jq -r to_entries|map("\(.key)=\(.value|tostring)")|.[] test.json
alias gopath=export GOPATH=$(pwd)
ps x
ffmpeg -loop 1 -i image.jpg -i audio.mp3 -c:a copy -c:v libx264 -shortest out.mp4
curl -X DELETE -H Authorization: token xxx https://api.github.com/repos/USERNAME/REPO-NAME
find . -user BobTheCat -type f -printf %s\n | awk {bytes+=$0}END{print bytes}
-Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y
grep -n ^[^#]*test
FILES=/some/empty/dir/with/no/text/files/*.txt
/usr/bin/sudo -H -u administrateur -- /bin/sh /path/to/your/script.sh
xargs -d \n -- apt-get install < packages.txt
eval echo "!/^#/ && \$3 ~ /ext/ && \$2 != "/" && \$2 != "/opt" { print \$2 }"
awk seen[$0]++{print $0 > "dups.csv"; next}{print $0 > "new.csv"} mycsv
grep Failed <FILENAME> | grep -vE successful^ | awk -F[\t,] {print $1}
echo 0/2 | bc - l
grep -l delete /bigcompany/scripts/dbscripts/*
sed -n s@.*/USOURCES@USOURCES@p temp.lst
grep [a-zA-Z ]鱼 file.txt
encryptionKey=cat $keyFile | hexdump -e 16/1 "%02x"
for ip in 192.168.1.{1..10}; do ...
initializationVector=printf %032x $i
var = ($(ls FODLDER |wc -l))
for /L %N in (1,1,254) do start /b ping -n 1 -w 200 192.168.0.%N
system (bsub -select "testid::1" -q normal);
sort -k1,2 -g file
sudo installer -pkg /Volumes/TeamViewerHost/Install TeamViewerHost.pkg -target /
echo ls -l | sftp server | wc -l
/usr/bin/nano ~/.bash_profile
cat test.json | jq .Project[0].projectName.tag[0].tagName |= .+ ["path2"] | .Project[0].projectName.branch[0].branchName |= .+ ["path2"]
extension_dir = X:/path/to/your/php/ext
awk -F, $3 == "\"0\"" file.csv
perl -pe s/\*\n//g
find /home/disk1 -maxdepth 0 -name file1* -o -name file7*
perl -pe s/\n// if $. == 11 file
{sourceFile:0:7}
awk -F-[0-9]+ {print $1} yourfile
awk -v col=2 {print $col}
awk { split($1,arr,"/"); print arr[length(arr)] } yourfile > output.txt
while read -r var; do ...
<?php $postdata = file_get_contents(php://input); ?>
awk -F= $1 ~ /appid/ {print $2} filename.txt
STATUS=`pvs /dev/sdb 2>&1 | grep failed`
cleartool descr -fmt %[rec_bls]CXp stream:streamName@aPVob
Jump.Sh ... > sample.csv << EOF
adb shell am start -n package/.activity
{OLD:1} + 1))
find ... | awk -F_ {print $(NF-4) "\t" $0} | sort -k1 | cut -f2-
test=curl -s -o /dev/null -I -w %{http_code} '$name'
cp $(ls -1 <path_to_war_files>/projectName-*-SNAPSHOPT.war | sort -V | tail -1) destination_dir
awk -F, { printf("%s,%d,%.10f\n",$1,$2,$3)} text.csv
read -r _ numA _ numB < <(grep MemFree /proc/meminfo | tail -n 1)
python2.7 /home/nezap/webapps/bonzer/bonzer/apps/base/alert.py
mojo get http://www.google.com a
git show-branch --list
grep -Eo symbol="[^"]+ yahoo.txt | cut -c 9-
printf \x0a | dd of=filetopatch bs=1 seek=0 count=1 conv=notrunc
grep -- --- your_file
Invoke-Item -Path C:PathToMyFile.pptx
awk {printf "%f\n", your_field .... } file
awk -F\t FNR==NR{a[$1]++;next}a[$1] file1 file2
ps aux | grep -i java | grep -i test | awk { print $2 } | xargs kill
echo ${files//[!0-9]/}
awk -F |||  {$0=$1}1 file
sed \~export PATH="$HOME/.rbenv/bin:$PATH~d .testing
python program01.py & python program02.py &
yum install libssh2 libssh2-devel
sed s/\w\+$/'&'/ file
(pipeline) &
sed -e /Seven/,/Fifteen/{:a;N;/Fifteen/!ba;s/\n/ /g} input.txt

awk !NF {$0=""}1 file | awk -v RS= {print NR,$0}
search=string
awk -v s=5 -v e=10 BEGIN{FS=OFS=","}{for (i=s; i<=e; ++i) printf "%s%s", $i, (i<e?OFS:ORS)} file
find . -name *.txt | xargs rm
pcregrep -M (?s)<activity.*?MainActivity.*?<\/activity> file
ui_print(file_getprop(/tmp/aroma/tweaks.prop, item.1.3) == 1);
Measure-Command { Start-Process -FilePath C:\Program Files\Microsoft Office\Office14\WINWORD.EXE }
perl -lne print "[!] Unnatural priority" if /priority="(\d+)"/ && $1 > 1000
subprocess.call([./rvm, xyz], shell=False)
for i in ./Datasets/*; do
sed -ri :a;s/^( *)\t/\1    /;ta file
./memcached -vv
cat 2.txt | ./jq -c {(.id): .custom}
echo $PATH
find main_directory/ -name myfile.txt | tar -czvf mytar.tar.gz -T -
echo $newexpr > $path/$file
exec 3>&1 1>file
ls /usr/bin | grep -v \.
grep -o [0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+ logfile|sort|uniq -c
find . -type f -name *.java -exec sed -i s/^package zn\./package /1 {} ;
head -n-7 file
tar -xzf /tmp/${MYSTR}world.tar.gz
sed 1 s/.$// file
date --date=$(< /dz-ceibo/applis/db5/parm/control.date) + 1 day +%Y-%m-%d
sed -i  -e s/noreply@\(.*\).example.com/noreply@example.com/
sed s/^|// file
grep -Po .*\)|\d+ file
awk -F= /OPC_NODENAME=/{print $2} file
awk -F"?," {print $2, $3} file
echo *   CRISTOBAL  AL042014  08/05/14  12  UTC   * | awk {print $2}
trap backtrace ERR
gpg -d secrets.txt.gpg > fifo &
ps -o rss= -p `pidof mysqld` | awk {print $1*4, "KiB"}
rpm -e --nodeps `yum list installed | grep rpmforge | awk { print $1 }`
ssh remotehost echo $(pwd)
awk /^1[0-9]{10}$/ { sub(/^1/, "") }1 file
awk $1 == "chr1" { total += $5 } END { print total } file
files = glob(*.aria2);
stat --format=$%n\t%y *
echo -e Normal \e[1mBold1 \e[0mNormal Normal \e[1m--Bold-2 \e[0mNormal | grep -P -o $\e\[1m.*?\e\[0m
find . -type f -exec grep -q \\/for\\/endetta {} ; -delete
ps aux | awk /RandomApp.app/ {print $2}
echo bcdujcd.2|awk -F[^0-9]* $0=$2
sed -n s/\(hel\)lo/\1/p <<<$hell\nhello\nhelen
(?<!Mr|Mrs).
(curl www.google.com)
grep -P \d{4}[-/]\d{2}[-/]\d{2}\s\d{2}:\d{2}:\d{2}
ResultString+=`curl http://192.168.1.141:8086/json.htm?type=devices&rid=8 2>/dev/null` | jq -r .result[].Data`

echo $mail
history?( *[0-9]*)
[[ $variable == *[^cdfghT,?!]* ]]
./function-script arg1 argument 2 arg3
sed s/\([0-9]\+\.[0-9]\+\) \([0-9]\+\.[0-9]\+\)/\1,\2/g
alias echobar=’echo bar’; echobar
result.returncode
open -g http://localhost:3000/
(echo $LINE | awk {print $2})
: >> $outputFile
[CON][EE:AA:BB:A2:FE:FF][LE]> char-write-cmd 0x0013 780060
find . ! -name *.* -type f -exec mv {} {}.mp3 ;
(mysql -u root -proot -N elis27 -e select max(idnumber) from mdl_user;)
awk -F[ \t]*;[ \t]* NR > 1 && NF > 1 { print $2"=>\"0000:0000:0000:1000::"$1"/64\"" } file
command | awk /^\/dev/{if($2 ~ /a$/) {print $2};}
eval $sedcmd1
awk -v RS= !x[$0]++{print; print ""}
q = 30
find . -iregex .*\.h$
ls | less
awk /^Amount/ {amount+=$2} END {print amount+0} file
sed x;/./{x;b};x;/^@.*{id1/,/}/{/}/h;d} file
if [ nc -w 5 -z host port ] && [ nc -w 5 -z host port ]
sort -m -n file1 file2 > file3
ENTRY | awk -F # {print $2}
(ps -eo pid -eo ecpu -eo command | sort -k 2 -r | awk /frmweb/ && !/PID/ && $2+0>0{print $1}))
for f in *.txt; do b=$(basename $f .txt); cat $f $b.svs > $b.both; done
sed -i /URLs found/r Text1.txt Text2.txt
subprocess.check_output([git, diff, --name-only, currentBranch + .. + compBranch])
[task setLaunchPath:@/bin/sh];
...| Findstr /i /L /c:User name /c:Full Name
osacript path/to/applescript.scpt > /dev/null 2>&1 &
find . -iname *.php -type f -print0 | while read -d $\0 file; do cp $file $file.bak; done
main: other.o main.o
mdls -raw -name kMDItemFinderComment /Users/fred/Dropbox/OSXStuff/app.icns
find -execdir ipython nbconvert {} ;

sed -e s/^/s|/; s/$/|g/ replacement_list | sed -r -f - file
sed -i /url="jdbc:oracle:thin:@localhost:1521:xe"/c\url="jdbc:oracle:thin:@localhost:1521:${ORACLE_SID_VALUE}" /home/server/tomcat/conf/Catalina/localhost/server.xml
awk {printf "%s%s", (NR>1&&/^[0-9]{10}/?"\n":""),$0}END{print ""} file
awk /interface/{if(p)print p; p=$0; next}{p=x} END{if(p)print p} file
sed -n /main(argc, argv)/,/{/ p
if [ $(line)==OFF ] ;
ps -eLf
echo $OUTFILE[$count]
( git branch -a | grep -m 1 $1 )
send sed '1i//$VAR' /file > /tmp/out\r
osascript -e Tell application "System Events" to display dialog "Enter the network password:" **with hidden answer** default answer "" -e text returned of result 2>/dev/null
export SECRET_KEY=asdgladfkga....
echo password | db_perf_clean.sh
find -regex .*\.\(png\) | sed -r s/.png//g | xargs -I {} cp {}.png {}_copy.png
awk -F| {print $1 > "File_1"; print $2 > "File_2"} input_file
sed -i s/old[0-9]\{1,\}(/old1(/ file.txt
wmctrl -T master$$ -r :ACTIVE: ; display image.png & sleep 0.1 ; wmctrl -a master$$
awk NR==FNR {a[$1]; next} $1 in a second_file first_file
grep -Poi (?<=kamilla)\d{8}
echo `expr $stringZ : abc[A-Z]*.2`

ack ^(?!.*bar).*(foo).*$ file
rm -r folder-name
export PATH=$PATH;$HOME/bin
tee [OPTION]... [FILE]...
sed -e /^+[-+]*$/d;s/^| //;s/ |$//;s/ | /|/g
grep -v ^foo[^3]$ foo
perl log.pl &
grep -il error_reporting *php*
directory_name=sys.argv[n]
for /f delims= %%a in (findstr /M "<content-criteria>" *.$$$) do move %%a TargetFolder
curl http://www.exsample./index.php/backup
if [[ $(echo $CPU > 1 | bc -l) -eq 1 ]];
Manifest= `/bin/grep pcsi-selector=" /LDCManifest.xml | cut -f 2 -d "`
cp --parent folder*/**/*.a /path/to/destination
perl -i -pe BEGIN {$/ = \1024} s/FROM_STRING/TO_STRING/ .. undef file.txt
awk /ADDED UPDATED/{ t=$3; $3=$2; $2=t } 1 file
SHOW PROCESSLIST;
awk -F, NF!=3 file
su - test -c /opt/linux/agent-service start
rsync -e ssh $f $destination:$destinationFolder/${baseFileName// /\ }.lck
grep -Po (?!").*(?=(" =)) input.txt
( lsof -p $$ -a -d 1 -F n | awk /^n/ {print substr($1, 2)} )
awk {print substr($0,index($0,"FBCD"),200) file
echo -n 1 2 | xargs ...
awk -v n=$var /^exp/{print $n} file
git rev-parse --symbolic-full-name @{-1}
echo \\servername\folder\folder\folder | tr \\ /
find_program (BASH_PROGRAM bash)
grep ... | tail -n 1
alias foo=echo foo
cp /root/authorized_keys /home/newsshuser/.ssh/
cut -d> -f2- file
zip -r $dir/modificado/modificado.zip $dir/modificado
while read w n; do echo -n ${w:(($n-1)):1}; done < filename
set -g -x
exec(env DISPLAY=127.0.0.1:0.0 foo)
. ./script.sh
key_value_options=(message name)
ssh -t -t user@host.com sudo /etc/init.d/script restart
echo Hello log | tee /dev/tty2 /var/log/my_logs > /dev/null
echo $FILEHEADER = IOS
find . -type f
echo $line >> ../../Summary.out
mv_cd() { mv $1 $2 && cd $2; }
sed -i -e s|\(</ANON>\)\([^[:space:]]\)|\1 \2|g file
find /mydir -name *.test -delete
if [ ${COUNT_NEW} > 0 ]; then
cp *_*_*_20_*_*.csv other_folder
ssh-keygen -f outfile -N 
find <some criteria> | sed s,.#*/,,
sudo rm -rf /var/tmp/app.{0..11}.attachments
sed s|<pattern>|<replace>| file | xargs -i{} cp {} somewhere
pidof $(ps -A | grep net*)
javac dir1/*.java
cd home
awk -F. {print $(NF-1)} inFile.txt
echo -n *Checking Partition Permission* Hostname=$(hostname) LastChecked=$(date)
main $@
xxd outfile > outfile.hex
find /Volumes/Media/ -type f -size +2G -mtime +10s -exec rsync -aq --update {} /Volumes/LocalMedia/ ;
mv $file ${file/something/else}

sed -i s/IPADDR=/IPADDR=`cat ip.txt`/g File2.txt
awk /EFF=exon/{print} file
while [[ $result != 1 && $result != 2 ]];
xlsx2csv -s 0 ${excel_name}.xlsx >> ${excel_name}.txt
sed s/^\(\s\+\)<type>/\1<myAddedTag \/>\n&/g yourfile
sed s/<.*>\(.*\)<.*>/\1/
fswatch [opts] -0 path ... | xargs -0 -n1 -I{} your full command goes here
sed -nE s/.*upload_url: "([^"]+).*/\1/p filename
comm -23 <(printf %s\n $VAR1) <(printf %s\n $VAR2)
find . -type f -exec grep -H bin doesn't exist for HY11 {} +
. ./path.sh
alias hello=sudo $(fc -ln -1)
( while : ; do date; sleep 60; done )& tail -f <file>|egrep -v lol; kill %1
% sed -i.orig -e /pattern/s/^/#/ inittab
parse_args $@
screen top

sed -i :a;N;$!ba;s/AllowOverride None/AllowOverride All/2 /etc/apache2/sites-available/default
exec 1> >(tee ./myscript.stdout >/dev/ps/9)
(pgrep -f thin))
Main-Class : mypackage.myclass.yourclassnamehere
(cal | head -1 | grep -oP [A-Za-z]+)
sed s/^\[[^]]*] *//
awk -v out=1 NR>1 && ++i>3 && /^START/ {++out; i=0} {print > "file" out} file
exec ssh-add ~/.ssh/mykey
subprocess.check_call([vim, lalala])
sed -i s/:/ / input.txt
files = %x(grep -ri --include \*.txt --include \*.html
sort < file | uniq | grep this:  | wc -l
awk {printf "create synonym classa.%-30s for classb.%s;\n",$1,$1} student.txt
echo ${string1#$string2}
if test -x /usr/bin/gpg-agent; then echo installed; else echo not installed; fi
awk -F: /^[[:alpha:]]/ {iface=$1; next} /baseTX/ {print iface; exit}
( sed s/-Xmx[0-9]\+/-Xmx$heapMB/ <<<$line )
zmap -w ip.txt ...
awk $1-prev >= 10 {print; prev=$1} years.txt
awk alen==length($1) {for (i=a;i<=$1;i++) print i}; {a=$1; alen=length(a); if (a==(i-1)) {a++}}
cat <&0 &
jq (.plants.veggies[] | select(.section == "TUBERS") | .values) |= . + [{"type": "root", "tuber": "yam"}] veggies.json
sed s/^\(.\)\(.\+\)\(.\)$/\3\2\1/ input.txt
tdbloader --loc DB ... your files ...
comm -3 <(sort file1) <(sort file2) | sed s/^\t//
... | awk /frmweb/ && !/PID/ && $2+0>0 && substr($4,4,2)+0>1
awk NR==FNR {a[$0]; next} $0 in a {i=0} ++i>3 names.dat text.dat
if true; then

sed -n /pattern1/,/pattern2/p file
echo Foo Bar | tee one.txt | tee -a two.txt
for i in `ps -ef | grep -w -E script1|script2 | awk {print $2}`; do kill -9 $i; done
sed -i s/\(\$rcmail_config\['default_host'\] = \)'';/\1'localhost';/g file
n_del=4; ed -s test <<< 1,${n_del}d$\nwq
find . -name *.php -exec sed -r -i.bak s#http(s?)://account.mysmallwebsite.com#<?php echo $domainName;?>#g {} ;
(ls -1 | grep \.properties$ | wc -l)
[ -f $DAEMON ] || { echo File $DAEMON not found && exit 0; }
sed -e /$node/s/^/#/ inittab >. ...
sed \@$node@s/^/#/ ....
sed -e s/,/;/g -e s/;/,/15g file
perl -pe s!(c:\S+)! ($x=$1) =~ y|/|\\|; $x !egi
virsh list | awk /kvm[[:digit:]]+/ {print $2}
echo 1969 years 12 months 25 days 19 hours 38 minutes 24 seconds since last release | sed -r s/.* ([0-9]+) months.*/\1/
find . -name *.php | xargs wc
sed s/^>\([^_]*\).*$/>M_\1/ file
awk -F[()] /^ / {printf "%s ", $2}
ps -ef | grep [j]ava

grep -oP (?<=value=")[^"]+ file
awk {print gensub(/\y([0-9][0-9])-/, "\\1:", "g")} file
for i in $(eval echo {$first_sd..$last_sd}); do echo HI $i; done
mysql --silent --raw
(egrep -v _unknown|sciences|everyone|netaccounts $GROUPSS)
rar rn out.rar filesfinf1.jpg filesfinf3.jpg
cat giantfile.txt | parallel -j 8 --pipe --block 4000000 myimport
awk -F" NF==2{sub(/"/,"")}7 file
gawk -F: -vdst_region=$1 /Global path:/ { if (dst_region == "ABC") print "dest_region is ABC"; else print "dest_region is not ABC" }
history -r file.txt
read number || break
awk -F, NR==FNR{a[$2]=1; next;} ($2 in a) file2 file1
source $HOME/.rvm/scripts/rvm
awk -F: -v user=$USER $1==user /etc/passwd
/usr/bin/env python3 deploy_p3k.py < /dev/tty
grep -Po (?i)\bUSE *\K\w+ file
grep -l $ID csvfolder/* | wc -l
osascript -e Tell application "Terminal" to do script "osascript ~/Scripts/reset_simulator.applescript"
awk -v var1=1 -v var2=testing $1 ~ var1 && $2 ~ var2 {print $2}
echo This is outputParseFulll >> results
since (i) takes a pattern, ${foo[(i)[']]} should and does work as expected.
find . -name *.mt0 -type f -exec sed -n 2{p;q} {} ; | cut -f2 -d  > output
export FLASK_TUTORIAL_DEBUG=1
(your_command | awk {print $4})
source b.sh var
echo output from sysuser database - <a href='sysuser/model01-$tstampm'></a> <br /> >> /home/sysuser/docs/dbmodels/index.html
awk BEGIN{FIELDWIDTHS = "10 18 13 11"}{printf "| %s | %s | %s |\n", $1,$3,$4} $device
parallel -a hosts echo -n {}; ping -c1 {} |egrep -o -m 1 "\([0-9]+\.[^\(\r\n]*\)"
echo hi | write $(whoami) $(tty)
git@github.com:username/repositoryname.git
echo about to fail && /bin/false && echo foo
for D in */; do echo $D: $(ls -d $D*/| wc -l); done
egrep ([0-9].*){10} file.txt | egrep -v (^|[ \t])[0-9]{1,3}(\.[0-9]{1,3}){3}([ \t]|$)
bc <<< 1 + 1
Remove-Item c:\xampp\htdocs\prestashop\dfs -Recurse -Force
echo ${PIPESTATUS[@]}
/Applications/MAMP/Library/bin
C:\cygwin64\bin\bash.exe
change require rails_helper to require spec_helper
java -XX:+ReduceInitialCardMarks -version
sed :a;N;$!ba;s/\n|/|/g input.txt
cd `find . -name test -type d`
find $1 -type f -size +$2k -exec rm {} ;
FOO_VERSION=1.0.0
zgrep -n ^[0-9]\{2,\}$ zipzip.gz
(echo scale=3;$k/($i*$j) | bc)

bash myShellScript.sh
xargs grep -hoP \b\w+\b < file_with_list | sort | uniq -c
awk NR==FNR{a[$0];next} FNR in a idx.txt lines.txt
RS=<<<<<<o01o>>>>>>\n
PROMPT_COMMAND=[ -n "$MYHIST" ] && history | tail -1 | awk "{ \$1=\"\"; print \$0 ; }" >> "$MYHIST"
vim $(locate -br ^filename.c$)
jcar() { javac $1.java && java $1 }
set num (math $num + 1)
InputStream is = new GZIPInputStream(new FileInputStream(file));
tar xzf file.tar.gz
cd my_directory/ && tar -zcvf ../my_dir.tgz . && cd ..
7z e example.tar.gz && 7z x example.tar
p.StartInfo.Arguments = czf;
Archive::Tar::DO_NOT_USE_PREFIX = 1;
tar cf path_of_tar.tar $(ls | head -10)
tar -tzf my_tar.tar.gz >/dev/null
TarFile.addfile(tarinfo, fileobj=None)
tar.addfile(tarfile.TarInfo(myfilename), file(/path/to/filename))
myfile = getfile.read()
tar cfz foo.tgz -T -
tar -pcvf base.tar input file/myPacket/my2 --exclude-vcs input*file/myPacket/my3/*.bmp
tar -xzf mytar.tgz --strip-components 1
tar tzvf archive.tar.gz | sed s/ \+/ /g | cut -f3 -d  | sed 2,$s/^/+ / | paste -sd  | bc
tar.add(/home/user/bla/mydir/, arcname=mydir)
Truncated write; file may have grown while being archived.
tar c -C /dir1/dir2 -vf test.tar file1.xml file2.xml
tar xvf tarfile paths... -C target
crontab -e
tar -pczf MyBackup.tar.gz /home/user/public_html/ --exclude /home/user/public_html/tmp
find /data/shares/builds/place1/ -mindepth 1 -maxdepth 1 -type d ! -name .*
mkdir site_media/media; tar -xvf fixtures/media.tar -C site_media/media
tar --exclude=.svn -z -c -v -f mytarball.tar.gz mydir/
(cd gitweb; git archive --prefix=git-gitweb/ master .) | tar tf -
ssh <host> tar -zcvf - /root/bugzilla > bugzilla.tar.gz
tar czf - FILES/* | ssh me@someplace tar xzf -
git archive --format=tar --remote=git@server:repo.git master | tar -xf -
tar cf test/foo/test.tar -- `find test -maxdepth 1 -name *.txt -type f`
convmv --notest -f cp1252 -t utf8 * -r
tar -xzvf 4.56_release.tar.gz
exec(tar -C $outdir -zxvf $infile);
tar [your params] |split -b 500m - output_prefix
tail abc.xml | gzip - > bac.gz
gcc -o my_application my_application.o -lmylib
tar cvjf ../set3.tar.bz2 * --exclude=a --exclude=b --exclude=c
(cd $DIR; tar -vc *) > file.tar
tar xvf tarname.tar --strip-components=n
ssh S gzip -dc < archive.tar.gz | tar xvf -
tar --extract --file=/var/www/html/folder1/folder2/folder3/price.tbz price/total_price
string exec ( string $command [, array &$output [, int &$return_var ]] )
file_get_contents(phar://my/path/to/tar/something.tar.gz/out.json);
tar xvf test.tar -C anotherDirectory/ testfile1
0 4 * * 1 find /home/XXXXXX/public_html/images/products -iname l_*.jpg | tar vcf /home/XXXXXX/public_html/backups/monday_backup.tar --files-from=-
ignore_user_abort(true);
tar -zxf huge.tar.gz dir1
for f in `tar ztf files.tar.gz`; do...

--transform=s/^\.\///
find <path> -ctime -2 -print
tar --newer 20120408
tar --exclude=/sys --exclude=/proc /
uudecode genscanlinux.tar.uue
tar -cvzf filename.tar.gz directory_to_compress/
erl_tar:extract(rel/project-1.0.tar.gz, [compressed]);
cat largefile.tgz.aa largefile.tgz.ab | tar zxf -
tar tf archive.tar
PRODUCT_COPY_FILES := ...
tar cvf - paths-to-archive | pigz > archive.tar.gz
system(tar -pczf /home/var/www/temp folder/to/backup);
public TarOutputStream(OutputStream os, String encoding) { ... }
find . -maxdepth 1 -type f -print0 | grep -z ${DAYTWOPREV} | tar -cvf archive.tar --null -T /dev/stdin
exec(cd /path/to/tmp_folder/ && tar -cvf /path/to/myfile.tar innerfolder/);
gem install minitar
rsync -z -e ssh user@example.com:/var/www/ /var/www/
h.Name = fi.Name()
tar -jcvf archive_name.tar.bz2 $my_file
autoreconf -fis
dd if=/dev/zero of=/tmp/zeroes
gtar -cvf $TAPE_DRIVE $BACKUP_FILE
mysqldump --opt test1 -u root -ppassword | bzip2 - > example.bz2
tar -xvzf archive.tar.gx -C archive_dir
tar -cf directory/tarfile -C directory/tardirectory -X excludelist1.txt -X excludelist2.txt .
exec(tar czf zip_folder/facebook_albums_1.tar.gz zip_folder/facebook_albums_1);
sudo apt-get install python-vtk
tar czf my-code.tar.gz htmlcode jscode
destFile.getParentFile().mkdirs();
tar(tarfilename,files)
gzip -d file.tar.gz
tar: xz: Cannot exec: No such file or directory
int tar_open(TAR **t, char *pathname, tartype_t *type, int oflags, int mode, int options);
gunzip -l file.zip
tar -c -M --tape-length=30000000 --file=filename.tar foldername
exec(tar -zxvf --strip-components=1 wp.tar.gz wordpress);
size_t skip = filesize % 512 ? filesize + 512 - (filesize % 512) : filesize
bzr export /path/to/myproj.tar.gz
tar cf archive.tar --mode=a+rwX *
python setup.py install --prefix=/share/pythonLib
gzip -dc archive.tar.gz | tar -xf - -C /destination
tar ... -cpzf /mnt/shares/flexshares/backup/Server1_HDD/backup-HDD-`date +%Y-%m-%d-%H-%M`.tar.gz ...
tar cfJ <archive.tar.xz> <files>
tar cvz -i /home | split -d -b 100m --filter ncftpput -r 10 -F -c -u ftpUsername -p ftpPassword ftpHost $FILE
tar --version
salt * archive.tar cjvf /tmp/tarfile.tar.bz2 /tmp/file_1,/tmp/file_2
0 0 * * * tar czf /var/backups/file_$(date +%Y-%m-%d).tar.gz /home/files
cd /tmp; echo test > testinput; diff -u <(strace -s250 -f tar -cf /dev/null testinput 2>&1) <(strace -s250 -f tar -cf testoutput testinput 2>&1) | less +/open\("testinput"
sudo tar -cvpzf backupfolder/localhost.tar.gz /var/www
tar = tarfile.TarFile.gzopen(os.path.join(backup_dir, directory+.tar.gz), mode=w, compresslevel=5)
tar –xzf filename.tgz -C /target/directory
tar --transform=flags=r;s|bar|foo| -cf file.tar file1 file2 bar fubar /dir/*
export TAPE=/dev/nst0
require(child_process).execFile(tar, [-cvf,my_tar.tar,my_directory/*])
mapEntriesNoFail :: (Entry -> Entry) -> Entries e -> Entries e
sudo tar -cvjSf folder folder.tar.bz2
sudo rm -- -
tar -xf filename.tar --strip-components=1 -C somewhere
tar cvf - folderABC | lz4 > folderABC.tar.lz4
tar cfz mage6BRQWJ.tar.gz --anchored --exclude=vendor *
tar -czf acc.tar.gz --no-recursion /home/uname/public_html/project/js/*
tar rv -C $prefix -f $tarfile $rest
tar xjf archive.tbz filename
for file in *; do tar -czf $file.tar.gz $file; done
tar = tarfile.open(output_filename+.tar.gz, w:gz)
tar -cjvf -X ~/exclude.txt ~/2014.tar.bz2 /pdf/data/pdfnew/2014
ls | grep -v \(.*BBB.*\)\|\(.*AAA.*\) | xargs tar -cvzf test.tgz
execlp(tar, tar, czf, file_folder_out, -C, file_folder_in, ., NULL);
zcat bigfile.gz | grep PATTERN_I_NEED > much_smaller_sample
TarArchiveEntry tarArchiveEntry = new TarArchiveEntry(file, file.getName());
