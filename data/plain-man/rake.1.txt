
RAKE(1)                Ruby Programmers Reference Guide                RAKE(1)

NAME
     rake -- Ruby Make

SYNOPSIS
     rake [--f Rakefile] [--version] [-CGNPgnqstv] [-D [PATTERN]] [-E CODE]
          [-I LIBDIR] [-R RAKELIBDIR] [-T [PATTERN]] [-e CODE] [-p CODE]
          [-r MODULE] [--rules] [variable=value] target ...

DESCRIPTION
     Rake is a simple ruby(1) build program with capabilities similar to the
     regular make(1) command.

     Rake has the following features:

     o   Rakefiles (Rake's version of Makefiles) are completely defined in
         standard Ruby syntax.  No XML files to edit. No quirky Makefile syn-
         tax to worry about (is that a tab or a space?).

     o   Users can specify tasks with prerequisites.

     o   Rake supports rule patterns to synthesize implicit tasks.

     o   Flexible FileLists that act like arrays but know about manipulating
         file names and paths.

     o   A library of prepackaged tasks to make building rakefiles easier.

OPTIONS
     --version           Display the program version.

     -C
     --classic-namespace
                         Put Task and FileTask in the top level namespace

     -D [PATTERN]
     --describe [PATTERN]
                         Describe the tasks (matching optional PATTERN), then
                         exit.

     -E CODE
     --execute-continue CODE
                         Execute some Ruby code, then continue with normal
                         task processing.

     -G
     --no-system
     --nosystem          Use standard project Rakefile search paths, ignore
                         system wide rakefiles.

     -I LIBDIR
     --libdir LIBDIR     Include LIBDIR in the search path for required mod-
                         ules.

     -N
     --no-search
     --nosearch          Do not search parent directories for the Rakefile.

     -P
     --prereqs           Display the tasks and dependencies, then exit.

     -R RAKELIBDIR
     --rakelib RAKELIBDIR
     --rakelibdir RAKELIBDIR
                         Auto-import any .rake files in RAKELIBDIR.  (default
                         is rakelib )

     -T [PATTERN]
     --tasks [PATTERN]   Display the tasks (matching optional PATTERN) with
                         descriptions, then exit.

     -e CODE
     --execute CODE      Execute some Ruby code and exit.

     -f FILE
     --rakefile FILE     Use FILE as the rakefile.

     -h
     --help              Prints a summary of options.

     -g
     --system            Using system wide (global) rakefiles (usually
                         ~/.rake/*.rake ).

     -n
     --dry-run           Do a dry run without executing actions.

     -p CODE
     --execute-print CODE
                         Execute some Ruby code, print the result, then exit.

     -q
     --quiet             Do not log messages to standard output.

     -r MODULE
     --require MODULE    Require MODULE before executing rakefile.

     -s
     --silent            Like --quiet, but also suppresses the 'in directory'
                         announcement.

     -t
     --trace             Turn on invoke/execute tracing, enable full back-
                         trace.

     -v
     --verbose           Log message to standard output (default).

     --rules             Trace the rules resolution.

SEE ALSO
     ruby(1) make(1)

     http://rake.rubyforge.org/

REPORTING BUGS
     Bugs, features requests and other issues can be logged at
     <http://onestepback.org/redmine/projects/show/rake>.

     You will need an account to before you can post issues. Register at
     <http://onestepback.org/redmine/account/register>.  Or you can send an
     email to the author.

AUTHOR
     Rake is written by Jim Weirich <jim@weirichhouse.org>

UNIX                           November 7, 2012                           UNIX
