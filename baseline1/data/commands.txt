"    Limit("POST", "*", ".*", 1000, PER_MINUTE),"

" > /dev/null 2>/dev/null &"

" &> /dev/null &"

' ... if ($4=="") ...'

' ... if ($4=="'$full'") ...'

' ... if ($4=='$full') ...'

' ... if ($4==wc) ...'

" NR>1{printf \"=HYPERLINK(B%d, C%d) "\t" https://otrs.city.pittsburgh.pa.us/index.pl?Action=AgentTicketZoom;TicketID=%s\n\", NR-1, NR-1, $0}"

<( some-command )

<(du -sh ./*/ | sort -k2 | cut -f1)

<(echo '&&&&&')

<(find "/Volumes/foo/imagesequence/" -name "*.*" -print0)

<(find ./*/ | cut -d/ -f2 | uniq -c | sort -k2 | awk '{print ($1-1)"\t"$2}')

<(sort -k 2,2 gar2.txt | grep -v 'n/a$')

'<,'>w !sh

'<a[^>]\+href[ ]*=[ \t]*"\(ht\|f\)tps\?:[^"]\+"'

"<delete_target target_id=\"$variable\"/>"

$'<string>'

[ ]*   # remove the star if you only care about exactly 2 spaces 

[ ! "$BASH_VERSION" -a -x /bin/bash ] && SHELL=/bin/bash exec /bin/bash 

(while [ ! -d "$FOLDER" ];do cd ..;done;pwd)

if [ ! -d ${MYDIR} ]; then DO_SOMETHING; DO_SOMETHING_ELSE; fi

[ ! -d "/path/to/the/folder" ]

if [ ! -d xxx/tmp/pids ]; then mkdir -p xxx/tmp/pids && chmod 0777 xxx/tmp/pids; fi

if [ ! -d xxx/tmp/pids ]; then mkdir xxx/tmp/pids && chmod 0777 xxx/tmp/pids; fi

if [ ! -e "$HSQLDB_JAR" ]; then echo "Jar not found!" ; exit 1 ; fi

while [ ! -e "/dev/sdd1" ]; do sleep 1; done

[ ! -f "$filename" ] && continue

while [ ! -f *.DONE.pgp ]; do sleep 1 ; done ; for f in *.DONE.pgp ; do mv ${f%%.*}.XML.pgp destination-directory ; rm  ${f%%.*}.DONE.pgp ; done

if [ ! -f index.html -o  $? -ne 0 ]; then echo "error"; else echo "success"; fi

[ ! -n "$res" ]

if [ ! -z $(grep "$STRING" "$FILE") ]; then echo "FOUND"; fi

[ $# >=1 ]

[ $# -ge 1 ]

[ $# -gt 0 ]

[ "$#" -gt 0 ]

[ $# -ne 1 ] || [ $# -ne 2 ]

[ $# -ne 1 -a $# -ne 2 ]

[ "$(cat top.txt)" = "$a" ]

[ "$(cat top.txt; printf x)" = "$a"x ]

[ $(date +%Y) = 1969 ] && date 010112002014

[ $(echo "$pdb" | cut -c22-23) == "${chain[$c]}" ] \

[ $(echo "$string" | grep -E "^[0-9]{8}$") ] && echo "yes"

if [ $(expr $count / 4) = 0 ]; then echo "yes"; else echo "no"; fi

if [ "$(id -u)" != "0" ]; then echo "You need root permission for installing programs." 1>&2; exit 1; fi

if [ $(pgrep -c "myApplication") -eq 1 ]; then echo "true"; fi

[ $(pgrep mongo | wc -l) -gt 2 ]

if [ $(ps -ef | grep -c "myApplication") -eq 1 ]; then echo "true"; fi

[ "$(readlink $HOME/.slate.js)" = "$target_path" ]

[ "$(tail -n 1 a)" == "pass" ] && echo "pass" || echo "fail"

[ "$(which which)" = /usr/bin/which ] && alias which "whichever"

[ "$1" ] && instdir="$1"

[ $1 -gt 1 ] && shift $1 || shift

[ "$1" = "-u" ]    # Note the quotes around $1

[ $? != 0 ] && return 1

[ $? -eq 0 ] || [ $? -eq 1 ]

[ $? -eq 0 -o $? -eq 1 ]

if [ $? -ne 0 ] || [ ! -f index.html ] ; then echo "error"; else echo "success"; fi

[ $? -ne 0 ] && echo "Problems Creating Backup File">&2 && exit 1

[ $? -ne 0 ] && { echo "failed!"; exit 1; } || exit 0

INDEX=$[ $INDEX + 1 ]

if [ "$LOCALE" == DE -o "$LOCALE" == FR ]; then ...; fi

[ "$PROCEED" = "y" ] ; BOOL=$?

[ "$STRING" = dog ]

res=0; [ "$a" == "$b" ] && res=1

res=1; [ "$a" == "$b" ] || res=0

[ "$a1" = "$b1" ]

[ $a1 == $b1 ]

[ "$arg1" = "$arg2" -a "$arg1" != "$arg3" ]

while IFS= read -rn1 c;do [ "$c" ]&&echo -n "$c"||echo;done < <(ls -l --color)

while IFS= read -r -n1 car;do [ "$car" ] && echo -n "$car" || echo ; done

[ $check -gt 10000 ]

[ $check = 'Running' ]

    [ $code -ne 0 ] && echo "command [$*] failed with error code $code" >&2

[ "$db" = "$i" ] && skipdb=1 || :

[ "$db" == "$i" ] && skipdb=1 || :

if [ $f = $i ] ; then  grep ... ; fi

for i in *; do [ $i -lt 1011 ] && rm -fr $i; done

[ $i = "ls.sh" ]

[ $i == "ls.sh" ]

[ $j -gt 20 ] && break

[ "$limit" ] && [ $count -gt $limit ]

maxline='cat journald.conf | grep "#SystemMaxUse="'; if [ $maxline == "#SystemMaxUse=" ]; then sed 's/\#SystemMaxUse=/SystemMaxUse=50M/g' journald.conf > journald.conf2 && mv journald.conf2 journald.conf; else echo "This file has been edited. You'll need to do it manually."; fi

[ "$old_stash" != "$new_stash" ] && git stash pop

if [ "$old_stash" = "$new_stash" ]; then ...; else ...; fi

[ "$response" = "y" ] || exit;

while [ "$s" -lt 10 ]; do s=`echo $s+1|bc`; echo $s; done

totaltrackseval=`if [ $totaltracks -ge 0 ]; then echo "-N $totaltracks"; else echo "elsetext"; fi`

if [ $true ]; then p=1; else p=0; fi

[ $word == "t" -o $word == "T" ]

[ $wtf ]

[ "$x" = "" ]

[ $x = "" ]

if [ "$x" = "" ]; then echo x is empty; fi

if [ "$x" = "" ]; then echo x is empty; fi

if [ "$x" = 5 ]; then echo "it is 5"; fi

[ "${-#*i}" != "$-" ]

function [[ { [ "${@:1:${#@}-1}" ]; }; \[[ -a -o -a -o -a ]] || echo lulz

[ "${LOG_FILE:=}HELLO_MY_NAME_IS_BLABLA" != "HELLO_MY_NAME_IS_BLABLA" ]

[ "${LOG_FILE:=}x" != "x" ]

[ "${LOG_FILE:=}x" != "x" ]

[ "${MODE}" == "top10gainers" ] || [ "${MODE}" == "top10losers" ]

[ "${MODE}" == "top10gainers" -o "${MODE}" == "top10losers" ]

[ "${VAR/#\//}" != "$VAR" ] || VAR="$SCRIPT_DIR/$VAR"

[ "${VAR/#\//}" != "$VAR" ] || VAR="$ORIGINAL_DIR/$VAR"

[ ${array[key]+abc} ] && echo "exists"

[ "${filename: -1}" == "*" ] && echo yes

[ "${filename:$length:1}" == "*" ] && echo yes

[ "${like:0:1}" == "E" ]

[ "${like:0:1}"=="E" ]

mycd() { [ "${mycdar[$1]}" ] && cd "${mycdar[$1]}" || cd "$1"; }

[ ${myhash[$key]+abc} ]

[ -L "$your_file" ] && echo "this is a link"

if [ -X "" ]; then echo "Checked -X"; fi

if [ -X ]; then echo "Checked -X"; fi

[ -c /dev/ttyACM0 ]

[ -d

[ -d "$1" ] || (printf "%s is not a directory" "$1" && exit 2)

if [ -d "$HOME/Desktop" ]; then echo "exists"; fi

for i in /home/*; do [ -d "$i" ] && echo "$i" && find "$i" -xdev -maxdepth 100 -type f | wc -l;  done

for i in xyzdir*; do [ -d $i ] && rm -rf $i; done

for i in public/{stylesheet,image,javascript}s; do [ -d $i ] || rm -rfv $i; done

for path in *_*; do [ -d "$path" ] && ln -s "$path" "${path//_/-}"; done

[ -d .git ] || git rev-parse --git-dir > /dev/null 2>&1

[ -d .git/svn  ] && [ x != x"$(ls -A .git/svn/)" ] && echo Looks like git-svn

 [ -d /home/acharya/Desktop/xx/parser/r2/evil$2 ] || mkdir /home/acharya/Desktop/xx/parser/r2/evil$2

[ -d "/path/to/the/folder" ]

if [ -d Desktop ]; then k=1; fi

[ -d foo ] || mkdir foo

if ! [ -e "/home/File.txt" ]; then exit; fi

while [ -e /proc/15435 ]; do sleep 0.1; done

[ -e ~/.app/config ] && source ~/.app/config

[ -f "$DAEMON" ] || { echo "File $DAEMON not found" && exit 0; }

[ -f "$FILE1" ] && [ -f "$FILE2" ] || { echo "NOT FOUND"; exit 1; }

[ -f $FileName ] && fileNameListStr=$( tr '\n' ' ' < $FileName )

[ -f $HOME/bin/zsh ] && exec $HOME/bin/zsh -l

[ -f $dir/*.part ] || trash $dir

[ -f "$file" ] || continue

[ -f "$file" ] && echo "<end>" >> "$file"

for i in *; do [ -f "$i" ] && echo "$i"; done

[ -f /tmp/filename.pid ] || python daemon.py restart

[ -f /tmp/myfile.txt ] && echo foo || echo bar

[ -f = "" ]

[ -f doesnotexist ] && diff doesnotexist exists

[ -f foo -o x = "" ]

if [ -f foo -o x = "" ]; then echo x is empty; fi

if [ -f ~/.bashrc ]; then . ~/.bashrc; fi

[ -n "" ]

[ -n "" ]

[ -n ]

[ -n ]

if [ -n "$(ps -Af | awk '$11 == "HomeDir"')" ]; then echo "running"; fi

for x in *; do if [ -n "$(tail -c 1 <"$x")" ]; then echo >>"$x"; fi; done

   if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi

[ -n "$val" ]

[ -n $var ]

[ -n "$var" ]

[ -n "$var" ] || die "result is empty"

[ -n "${0%/*}" ] && cd ${0%/*}

[ -n "${DISPLAY}" ] && export EDITOR=gedit || export EDITOR=emacs

until [ -p notify ]; do read -t 0.1; done

for i in *; do [ -r "$i" ] && echo "$i is readable for $USER"; done

[ -s "$f" ] && mail me@example.com -s "$f contents" < $f

if [ -s test ] ; then cat test | xargs echo content: ; fi

[ -s ~/.lastdirectory ] && cd `cat ~/.lastdirectory`

[ -t 1 ]

if [ -t 1 ] ; then echo terminal; fi

(if [ -t 1 ] ; then echo terminal; fi) | cat

[ -v ONE_COMMAND_SHELL ] && bind '"\C-m":" & \n"'

[ -w . ] && echo "writeable parent directory"

[ -x "$(type -p "$mysql_exec")" ]

[ -x -a /sbin/ifconfig ] || exit 1

if [ -x /usr/bin/gpg-agent ]; then echo insatlled; else echo not installed; fi

if [ "-x" = "" ]; then echo x is empty; fi

[ -z "$(file "$1" | grep '256')" ] && echo 256

[ -z "$1" ]

[ -z "$1" ]

[ -z "$OO_EXE" ] && OO_EXE=/usr/bin/oo # or whatever the executable is called

[ -z $PID]

[ -z "$PS1" ] && return

[ -z "$STY" ] && screen -Rd "work"

if [ -z "$VAR" -a "${VAR+xxx}" = "xxx" ]; then echo VAR is set but empty; fi

[ -z "$__var1" -a -z "$__var2" ] && echo "Both missing!"

[ -z $a ] || [ -z $b ] && usage

[ -z "$dbuser"]

[ -z "$line" ]

[ -z "$line" ] && continue

[ -z "$res" ]

ACTION=$([ -z "${1:+X}" ] && echo echo)

if [ -z "${VAR+xxx}" ]; then echo VAR is not set at all; fi

if [ -z "${VAR}" ]; then echo VAR is not set at all; fi

while [ -z "${month##0*}" ]; do month=${month#0}; done

[ -z "`/sbin/service $SERVICE_NAME status | grep \"$SERVICE_RUNNING_STR\"`" ] 

[ -z `ps aux | grep "fetchmail" | grep -v "grep"` ] && fetchmail -d 1800

[ -z keytool -list -alias cert ] && keytool -genkey -alias cert -keyalg RSA -storepass "${KEYSTORE_PASS}" -keypass

[ ... ]

if [ ... ]; then ...; else ...; fi

[ 08:45 jon@host ~ ]$ source ~/.bashrc

while [ 1 ]; do clear; echo -e '\033[36mHello World\033[0m'; sleep 1; done

$ if [ "1" = "1" ] && [ "$cont" = "1" ]; then echo "ha"; fi

[ = foo ]

[ "FILE_TESTx" != "x" ]

[ "Release" != "$2" -a "Debug" != "{$2}" ]

[ STR1 -a STR2 ]

[ `ls | wc -l` -eq 1 ]

if [ "`which binary`" ]; then echo it\'s ok to continue.. ;fi

[ expr ] && command

[ foo ] || [ bar ] || [ baz ]

[ foo -o bar -o baz ]

[ foo bar = "hw.machine: iPhone3,1" ]

[ git-rev-list ... ]

[ grep '^[0-9]' | grep -qv "OK" ]  <<< "$line"

[[:^ascii:][:cntrl:]]

[[:alnum:]_-]

[[:space:];:,]

[[NSWorkspace sharedWorkspace] openFile:@"file.txt"]

[ this = this ] && [ that = that ]

{ while [ true ]; do inotifywait -e modify test >/dev/null 2>&1 ; echo "Do something" ; done }& echo $! > ~/inotitfy.something.pid

[ "x" != "x" ]

[ x != x"$(git log -n 1 --grep='^\s*git-svn-id' --oneline)" ] && echo "git-svn!"

[ "x" = "x" ]

[ "x" = "x$HOSTNAME" ]

[ "x" = "x$HOSTNAME" ] && HOSTNAME=`env hostname`

[ x = xfoo ]

[ x || grep xyzzy somefile

$ [ z = z ]

[ "z$x" = z ]

[ z$x = z ]

if [ "z$x" = z ]; then echo x is empty; fi

if [ "z$x" = z ]; then echo x is empty; fi

[ z-f = z ]

[ z-f foo -o x = z ]

['*.txt']

['', '/usr/lib64/python27.zip', '/usr/lib64/python2.7', '/usr/lib64/python2.7/plat-linux2', '/usr/lib64/python2.7/lib-tk', '/usr/lib64/python2.7/lib-old', '/usr/lib64/python2.7/lib-dynload', '/usr/lib64/python2.7/site-packages', '/usr/lib64/python2.7/site-packages/PIL', '/usr/lib64/python2.7/site-packages/gst-0.10', '/usr/lib64/python2.7/site-packages/gtk-2.0', '/usr/lib64/python2.7/site-packages/webkit-1.0', '/usr/lib64/python2.7/site-packages/wx-2.8-gtk2-unicode', '/usr/lib/python2.7/site-packages', '/usr/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg-info']

[-+]\{0,1\}[0-9]\{1,\}

['-c', 'find /home/user/directory \( -name "*.mp4" -o -name "*.zip" \) ! \( -name "tokeep.mp4" -o -name "tokeep2.mp4" \) -ls -delete']

[-d

[0-9] 

[1] "10"

[1] 1830

[1]+  Stopped                 cat > mypipe

[1 value_@0] [2 value_@1] [3 value_@2] [4 value_@3]

[2-9][0-9]\{5\}\>

[21/Aug/2012:00:31:27 -0700] 1345534287 /redir/abc.html

     [2addr]s/regular expression/replacement/flags

[2addr]t [label]

[98937.147950] sd 15:0:0:0: [sdb] Attached SCSI removable disk

[:\47]

[A-Za-z][A-Za-z0-9]*

[CON][EE:AA:BB:A2:FE:FF][LE]> char-write-cmd 0x0013 780060

[CT].{5,10}\[

['Lyon','Marseille','Paris']

[NSTask launchedTaskWithLaunchPath:@"/usr/bin/purge" arguments:[NSArray array]];

[^<\/div>]*

([^*]*\*)

[^,]+

[^0-9] 

[^0-9][0-9]{4}.{1}[0-9]{2}.{1}[0-9]{2}[^0-9]

\[^?]?

[^x]

[^x]*x

([a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2}:[a-z0-9]{2})

([a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2})

[a-zA-Z_][a-zA-Z_0-9]*

[console] --> [program.exe] --> [sort.exe] --> [console]

[console] --> [program.exe] --> [sort.exe] --> [more.exe] --> [console]

[date]\t[time]\t[post-entry]\t[user-tobenotified]\t[someotherinfo]

\[\e]0;\u@\h: \w\a\]

 [echo] Hello MerryPrankster

[echo] property: git version 1.7.5.4

['f','o','o'] => "foo"

[firstName = John, lastName = Doe]

['i386-linux-gnu_xorg_extra_modules', 'nvctrl_include', 'template-dkms-mkdsc', 'run', '1', 'conf.d', 'conf.d']

[jsmith@regan ~]$ mvn -version 

[managedObjectContext performBlock:]

[min] [hour] [day_of_month] [month] [day_of_week] [command]

[mp3 @ 0xf33100] Estimating duration from bitrate, this may be inaccurate

['mv', 'at0_l0_l0', 'at0_l1_l-1', './output20']

["myscript.py", "1", "foo", "bar", "baz"]

[n]<>word 

\[out :: apple\.mango@machine-6\.mysite\.com\]

p=$[p+1]

[param1] [param2]

[pfisher ~]$ php run-me.php

[ping command here] | awk '/^---/ {printf("%s ", $2)} /%/ { print $7} {next}'

[root@host2] etc >> echo "/opt/pcre/lib/" >> /etc/ld.so.conf

[root@quackwall ~]

[s]tring

["sed", "-e", "s/^[ ]*//g", "-e", "s/\([0-9a-zA-Z\.]*\)*/\1;/g", "LogFile.txt"]

["sh", "-c", "ps -eo pid,comm,cmd,start,etime | grep -i "+s2]

[task setArguments: [NSArray arrayWithObjects: @"~/connect.sh", nil]];

[task setLaunchPath: @"/sbin/ping"];

[task setLaunchPath: @"/usr/bin/ping"];

[task setLaunchPath:@"/bin/sh"];

[task setStandardInput: [NSPipe pipe]];

[task setStandardInput:[NSPipe pipe]];

['test19.txt', 'test20.txt', 'test21.txt']

[u'The First Artist', u'The Second Artist']

[username@hostname ~] mysqldump -u root -pmysql_root_password --no-data database_name > example.sql

[{"field30":"value6","field6":"value6"},{"field30":"value6","field6":"value6"}]

"> /dev/null 2>/dev/null &"

">/dev/null" "false"

!!:gs/1/2

!!:gs/1/2/

!!:gs/9241/9243/

!!:gs/foo/bar/

!!:gs/oldstring/newstring/

!!:s/oldstring/newstring/

 !!sh

!-2

!-n

!/[1-2][1-9]/ {print}

!/^#/ && $3 ~ /ext/ && $2 != / && $2 != /opt { print $2 }

!/^#/ && $3 ~ /ext/ && $2 != "/" && $2 != "/opt" { print $2 }

!/pat3/

!/pattern 1|pattern 2|pattern/{default action}

!78:p

!:gs/jpg/png

!?git s

!?grep

!N

!bla!

!cd {x[-1]}

!date

!git push -u origin ${$(git symbolic-ref HEAD)##refs/heads/}

!git push -u origin `git symbolic-ref HEAD | sed -e "s#^refs/heads/##"`

!ls -l | awk '{print $$1}'

!mysql

!n:s/previous/replacement/

!sh -c 'git checkout -b "$1"'

!sh -c 'git checkout -b "$1"' -

:l;N;$!tl;N;  # label l, read line, while not eof jump to label l

\"

'"a \\"$b\\" c"'

'#' chmod 4777 strace

'#' chown root strace 

(( $# ))

START=$(( $(date '+%s%N') / 1000000 ))

(( $(find . -name "*.pdf" | wc -l) == 0)) && echo "Empty"

abc_length=$(( $(find ... | wc -l) - 1 ))

(( $(grep -c "$1" ./[FILE]) == 1 )) && echo "it worked"

count=$(( $(grep -c BSS /tmp/ScannedAPs.txt) - 1 ))

if $(grep -q -F -x $CURR_LINE_IP $IGNORE_IP_LIST); then continue; fi

while $(true); do ps -eaf | nc -l 1234; done

len=$(( $(wc -c < "$FILE") - 1 ))

function ls { $(which ls) -l; }

{ $1 ; "$?"; } >"$dir/retc" &

if (( $? == 0 )); then return 0; fi

(( $? )) && { echo "failed!"; exit 1; } || exit 0

if (( $? )); then echo "failed!"; exit 1; else exit 0; fi

~$ bgh() { "$@" >/dev/null 2>&1 & }

edit() { $EDITOR <(sed -e "s/\x1B\[[0-9;]*[JKmsu]//g" < "$1"); }; edit

INDEX=$(( $INDEX + 1 ))

fileName= `$ON.gpg`

(( $a < $b )) && echo smaller

$ $command

if (( $count / 4 == 0 )); then echo "yes"; else echo "no"; fi

for file in checkemp.sh *; do $file & done

if $myVar ; then ... ; fi

  num=$(( $num + 1 ))

for test in path/test*; do $test | ./server | ${test/test/validate}; done

okvalue=$(( $tomatch / 100 * $treshold ))

total_weight=$(( $weight * 703 ))

avg_word_size=$(( ${chars} / ${words} ))

dict[$word]=$(( ${dict[$word]} + 1 ))

(( ${proc[$i]} >= 20 )) && (( sum += ${proc[$i]} ))

time2=$(( ${time#0} % 15 ))

% [[ 1 < 2 ]] && echo 'hooray for angle brackets!'

% *.p?

% *.ps

% ./youtube-dl -a batch.txt -c

% alias doit 'ls -l | grep $USER | somescript `awk -F'"'"' '"'"' '"'"'{print $1}'"'"'`'

% awk '/^#/ {printf "%04d.%02d.%02d.%02d.%02d.%02d\n", $2, $3, $4, $5, $6, $7}' ~/stuff 

% echo "* * * * * /Users/paul/Desktop/1.sh" | crontab -

% echo 'SELECT * FROM table' | mysql -B -uxxx -pyyy database

% echo "http://www.youtube.com/watch?v=j9SgDoypXcI" >>batch.txt

% eval "program $(helper)"

% files=$(hadoop fs -ls /user/foo/bar | awk  '!/^d|nolzo/ {print $8}' )

% find . -type f -a \! -links 1

% find . -type f -links +1

% find . -type l

% find / -print0 | access_test | xargs -0 -n 1 do_cmd

% find /share1/test -name '*.dat' -exec ./test.sh /staging/data/project/ {} projectZ \;

% info bash

% install_app.sh ~/Downloads/MyApp.dmg

% lua hello.lua

% matlab -nosplash -nodisplay -r "test($$)" -logfile matlab-log-$$.tmp

% mv /path2/$SRC/$OLD_DIR/$OLD_FILE /same/path_w/$NEW_DIR/$NEW_FILE \000

% perl -0777 -i.orig -ne 's/\R+/\n/' file1 file2 file3

% perl -CSD -i.orig -ne 'print unless /^\s*$/' file1 file2 file3

 %  perl -MO=Deparse -nle '$sum += $_ } END { print $sum'

% perl -dwe 0

% perl -i.orig -00 -ple 's/\s*\n\s*/ /g' file1 file2 file3

% perl -i.orig -ne 'print unless /^$/' file1 file2 file3

% perl -i.orig -ne 'print unless /^\s*$/' file1 file2 file3

 % perl -nle '$sum += $_ } END { print $sum'

% screen -d -m okular *.ps

% sed -i.orig -e '/pattern/s/^/#/' inittab

% sed -n -E 's/.*(href|src)="([^"]*).*/\2/p' input.html

% sudo python /path/to/test.py

% xxd -r -p in.txt out.bin

%!sed "s/\#.\+$/end/" 

%%BTAD_InstallDir%%

%-80s

%0|%0

%ANDROID_HOME%;

%ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools;

%FF_CMD% /c "cmd /c if @isdir==TRUE echoxml.bat @fname"

%b        expand backslash escape sequences in the corresponding argument

%filename%

%post -p /bin/bash

%run my_script.py

%s/.*,\s*//

%s/\\|/ |/g

%sor r /\S\+$/

%x[/bin/bash -c 'echo -n foobar' | pbcopy]

  %x{  zip -r -j  #{bundle_filename}  #{filenames}}

PS1=$'%{\e]0;%d\a%}\n%F{green}%n@%m %F{yellow}%d%f\n%# '

"%~dp0myrename.cmd"

%~fI

'''something'''

\([^ ][^ ]*[ ]\)

\([a-z]*-[a-z]*-\)\([0-9]*-\)\([a-z]*-\)\([.]*SNAPSHOT.jar\)

'(', '-name', '*.mp4', '-o', '-name', '*.zip', ')', '!', '('

'(-r -R --recursive)'{-r,-R,--recursive}'[remove directories and their contents recursively]'

\(.*\)

\(.*\)/.*

\(.*jpg\)

\(^[a-z,0-9]*\)\(.*\)\( [a-z,0-9]*$\)

'(^| )[a-zA-Z][a-zA-Z0-9]*( |$)'

\(something\)\(something_else\)

/\(^$\)\|\([!?;.,]\s*$\)/! s/\s*$/.&/

s/\([^~]*~[^~]*~0~[^~]*~[^~]*~[^~]*~[^~]*~[^~]*~[^~]*~[^~]*~\)\([0-9][0-9]\/[0-9][0-9]\/[0-9][0-9]~\)\(.*$\)/\1~\3/

")syntax error: invalid arithmetic operator (error token is "

$* $@ $# $? $- $$ $! $0 $_

result=$(( * $input))

* * * * * . /home/you/.bashrc ; curl -L --maxredirs 5 ...

* * * * * /bin/bash scriptname

* * * * * /bin/ps -C named > /dev/null 2>&1 || service named start

* * * * * /bin/sh /path/to/script.sh 2>/dev/null

* * * * * /data/backups/scripts/server_log_check.sh > /data/backups/logs/cron_logs/server_log_check.sh_cron.log 2>&1

* * * * * /home/ahmed/Desktop/run.sh

* * * * * /home/myscript.sh

* * * * * /home/user/mycronscript.sh 2>&1 >/tmp/test.log

* * * * * /home/user/public_html/mailer.php

* * * * * /home/user/simple.sh >> /home/user/cron.log

* * * * * /home/x.x.x/testing/s3 -f x.x.x.log >> /tmp/mys3Log 2>&1

* * * * * /path/to/the/ruby/you/want /usr/local/src/hello/hello.rb >> /usr/local/src/hello/hello.log 2>&1

* * * * * /root/mysql.sh 

* * * * * /some/path/test.sh >> $(date "+/home/oompah/logs/\%Y\%m\%d.test.log")

* * * * * /usr/bin/env > /path/to/your/home/directory/env.txt

* * * * * /usr/bin/flock -xn /var/lock/script.lock -c '/bin/bash /root/Dropbox/1.sh'

* * * * * /usr/bin/flock -xn /var/lock/script.lock -c '/bin/bash ~/1.sh'

* * * * * /usr/bin/php -f /path/to/your/php/file

* * * * *  /usr/bin/php /path/to/loader.php

* * * * *   /usr/bin/php /path/to/script --cron

* * * * * /usr/testjob.sh

* * * * * bash -c 'NUMBER=$[ ( $RANDOM \% 500 )  + 1 ]; echo $NUMBER > /tmp/out'

* * * * * cd /path/to/json && /var/www/highcharts.com/exporting-server/phantomjs/test/createGraphs.sh >> /var/www/highcharts.com/exporting-server/phantomjs/highcharts.log

* * * * * cp -f /customTemplates/login.tpl /www/img/templates/adm/login.tpl

* * * * * echo $(date +\%F) >> /tmp/date.txt

* * * * * echo `date +\%F` >> /tmp/date2.txt

* * * * * env > /tmp/cron.env

* * * * * env > /home/user/EnvOutputFromCrontab

* * * * * env DISPLAY=:0.0 /home/x/Documents/MyScripts/Cron/BeepAlarm "Wake Up"

* * * * * export DISPLAY=:0 && gnome-terminal -e 'bash -c "echo password | sudo -S cat /etc/shadow > /tmp/shadow 2>&1"'

* * * * * export PATH="/some/path:/some/other/path" && /usr/bin/php /path/to/script.php >> /path/to/log.log

* * * * * michael /home/michael/Documents/CS288/homework7/usatoday_runner.sh > /tmp/why_is_this_failing.log 2>&1

* * * * * php /home/user/public_html/mailer.php

* * * * * php cron.cli $(date +\%R)

* * * * * printenv > cron-env

* * * * * root curl /etc/notify.sh >>/var/log/cron.log

* * * * * script >/tmp/outputfile 2>&1

* * * * cd /Users/user/Documents/foo; bar -l doSomething -v 

* */3 * * * /usr/local/bin/dowatch

* 0 * * * /usr/bin/mysqldump -uUser -pPass Db_name > /var/www/db_backup/db.$(date +\%Y\%m\%d\%H\%M).sql

* 21 * * * bash -x /var/spool/asterisk/monitorDONE/MP3/recording_script.sh >/tmp/rs_log 2>&1

*   ?   [   #   ~   =   %

*[[:upper:]]*

!(*[A-Z]*)

   * users/15217: Src/Zle/zle_main.c: use top-level status when redrawing prompt.

*.cpp

 *.emerg *

*.emerg /var/log/emerg.log

'*.sh'

*.{jpeg,xml}

*/*.php

*/1     *     *     *     *         /bin/bash /path/to/script.sh

*/1 * * * * /home/David_Legassick/test.sh

*/1 * * * * /path/to/script.sh

*/1 * * * * TEMP=$(digitemp_DS9097 -a | grep -i sensor | awk '{print $7}'); sed -i -r "14s,>[^<]*</,>${TEMP}</," /www/index.html

*/1 * * * * TEMP=$(digitemp_DS9097 -a |grep -i sensor | awk '{print $7}');sed -i.bak "s,\\(66cc00.*\">\\)[^<]*</,\\1$TEMP</,"  /www/index.html

*/1 * * * * TEMP=$(digitemp_DS9097 -q -t 0 -O"%.2C");sed -i.bak "s,\\(66cc00.*\">\\)[^<]*</,\\1$TEMP</,"  /www/index.html

*/1 * * * * cd /home/meric/Documents && ./crontest.py

*/1 * * * * echo "job every minute" >>$HOME/filename

*/1 * * * * find /tmp/ -maxdepth 1 -type f -name '#sql_*.MYD' -empty -delete

*/1 * * * * php -q /var/www/html/includes/cron/cron.inc.a.php &> dev/php.log

*/10 * * * * /bin/ps -eo pcpu,pid,user,args | /bin/sort -k 1 -r | /bin/mail youremail@where.com

*/10 * * * * /home/ismetb/glassfishv3.0.1/glassfish/bin/asadmin start-domain

*/10 * * * * /path_to_script

*/10 * * * * bash -l /home/usr/MeetCal-bot/run-bot.sh

*/10 * * * * root rsync -avz --delete /home/laptop/stuff /Maildir/

*/15 * * * * bash -c 'source /home/username/.rvm/scripts/rvm && /usr/bin/env ruby /home/username/twitter/twitter.rb friends'

*/2 * * * *   /home/XXXXXX/private_scripts/backup-script 2>&1 >> /home/XXXXXX/private_scripts/backup-log

*/2 * * * * cd /home/nezap/webapps/bonzer/bonzer && /usr/local/bin/python2.7 ./apps/base/alert.py

*/2 * * * * cd /home/nezap/webapps/bonzer/bonzer/apps/base && /usr/local/bin/python2.7 ./alert.py

*/2 * * * * root rsync -avz -e ssh --delete /stuff/ user@desktop ip:/home/laptop/stuff/

*/20 * * * * xbacklight -set 0\% && sleep 20 && xbacklight -set 100\%

*/30 * * * * /path/to/php -q /path/to/file.php

*/30 * * * 2,4 /path.to.script.to.be.run/scriptname

*/30 9-18 * * * root [ $(date +%H%M) = 1830 ] || your_command

*/5 * * * * /home/user/loadcheck.sh

*/5 * * * * /var/www/update.sh 2>&1| mail -s "Cron job execution" youremail@wherever.com

*/5 * * * * cd /full/path/to/script/; ./cpu_monitor.sh;

*/5 * * * * cd /var/www/website && git pull origin master > /place/to/put/logs/mycommand.log

 */5 * * * * date >> /path/to/the/logfile/dates.log 

*/6 * * * * myscript.sh

*CLI> help originate

*RECORD $DATE-n++ [some_serial_#]

*argv

*argv[i]

*love*

+ [ -e /home/somebody/... ]

+ [ -e /home/somebody/... ]

+ [ -e ~/... ]

+ YYY | bc -l

++ sed 's/~/~\\n/g' file

(( ++DRIVE_SIZES[DRIVE_SIZE] ))

${name1}_$((++a))

((++cnt))

((++k))

+0 23:00:00

+47177372141 +41753459833

+program '--pass=decrypted-password-here'

,"CHADWICK R GORE","C00538975","2012","10000.00",,"10000.00",,,"5000.00",,,"15000.00",,,,,,,,,,,,,"15000.00","15000.00",,,,

,article{gjn2010jucs

.

. <(./generate_commands)

. <(awk -F '\"' '/<Parameter Name/,//{ print "export " $(NF-3) "=" $(NF-1) }' aa.xml)

. <(wget -O- http://a.com/bootstrap-scrit.sh)

. "$(dirname "$0")"/setup_buildroot.sh "$BUILDROOT" # call the sub-script

. "$HOME/.bashrc"

. $HOME/.cronenv

. $INST_DATADIR/$PKG/install/aosbootcommon.sh

. $USERSCRIPT

. ./addalias.sh ls 'ls --color=auto'

. ./b.sh

. ./bash2.sh &

. ./cd.sh

. ./child.sh

. ./conf/prac1

. ./file1.bash

. ./foo2.sh

. ./import.properties

. ./init.bash

$ . ./my_script.sh

. ./path.sh

. ./project/bash/env.vars.sh

. ./properties.conf

. ./run_me

. ./script.sh

$ . ./script.sh

. ./script.sh

. ./script.sh

(. ./script1.sh && ./script2.sh)

. ./setenv.sh

$ . ./setup.bash

. ./setup.sh

. ./test.sh

. ./two.sh

. ./your_file

. /complete/path/to/properties.conf

. /etc/profile

. /etc/profile

. /etc/yourdaemon.env

VALUE=$(. /home/db2inst1/sqllib/db2profile ; db2 connect to MYDB ; db2 "select * from table(myFoo())")

. /home/myuser/.bashrc ; /home/myuser/bin/runreport >/tmp/qq 2>&1

. /home/myusername/.setenv

. /home/tuxapp/.profile && script.pl

. /path/to/bgx.sh

. /path/to/file

$ . /path/to/function_file

. /path/to/myscript.sh

. /path/to/script.sh

. /path/to/script.sh

 . /path/to/settings  # Dot, blank, name of file.

. /path/to/temp/file

. /usr/Mytest/Log_Deleter.prop

. /usr/bin/tasks

.;C:/twitter4j-3.0.5/lib/*

.;C:/twitter4j-3.0.5/lib/twitter4j-core-3.0.5.jar;C:/twitter4j-3.0.5/lib/twitter4j-stream-3.0.5.jar

. FILE

. Hello "Luke Skywalker"

. changePrompt.sh

. cmd

. cookies.txt

. create_replica_set.sh

. ec2

. external.sh

. file

. file

. file.sh

. input.ini

$ . myScript.sh 1 0 1 1

. my_script

. myfile.sh

. myscript.sh

. myscript.sh

. myshell.sh

. myshell.sh

. parameters.txt

. parentScript

. script; env

. script-two.sh

. script.sh

. script.sh

$ . script.sh

. scriptfile

. scriptname ...

. scriptname arg1 arg2

$ . setdir.bsh

. show_parms.sh foo

. somefile

. test.dat

. test.sh

. the_other_script.sh

. var

. virtualenv_activate.sh

. your_script.sh

. ~/.bashrc

. ~/.bashrc

. ~/.bashrc

. ~/.bashrc.local

. ~/.profile

. ~/.profile

. ~/.profile

. ~/.profile

  . ~/.profile

( . ~/.profile ; /sw/bin/perl /path/to/tv_grab_oztivo ... ) >/tmp/qq 2>&1

. ~/.yourfile

. ~/bin/dirstack.ksh

. ~/nvm/nvm.sh

VAR=$(. ~db2inst1/sqllib/db2profile ; db2 -tvf myfile.sql)

.*\$\(Id\|Header\|Date\|DateTime\|Change\|File\|Revision\|Author\):.*\$.*

(.*)

.*?x

> >(..)

..|awk -F'[][]' '{print $0 > ("out."$2)}'

.. | awk 'BEGIN { RS = "---" } /Error/ { print; fflush(); }' | ..

.. | stdbuf -o 0 any_other_command | ..

( ... ) 2>/tmp/mydiagnosis$$.log

AWKRESULT=$(...)

$vname=$(... )

vname=$(... )

$(...)

... > /tmp/script.log 2>&1

... >> ~/.npmrc

... -F' ' '$1 == "namespace" && !_ {$0=$0 RS "foo";_=1}1' file

... -F' ' '$1 == "namespace" && !a {$0=$0 RS "foo";a=1}1' file

... -F' ' 'BEGINFILE {a=0} $1 == "namespace" && !a {$0=$0 RS "foo";a=1}1' *

... -F' ' 'FNR==1 {a=0} $1 == "namespace" && !a {$0=$0 RS "foo";a=1}1' *

... -classpath `ls Classes/jars/* | tr '\n' :` ...

while ...; do ...; done < $filename

while ...; do ...; done <<< "$shows"

... /dir/{$ff..$tt}

... /p:customOutputDir="%1"

... - E - F - G   <-- master

...| Findstr /i /L /c:"User name" /c:"Full Name"

... Runs after every change of working directory. ...

... \\\;

...|awk '$0=$NF'

... | awk -- '$0~/[0-9]+(.[0-9]+)*\/?$/{t=$0;sub(/\/$/,"",t);sub(/.*\//,"",t);c=split(t,a,/\./);l=0;for(i=1;i<=c||i<=z;++i){if(a[i]>x[i]){l=1;break}else if(x[i]>a[i])break}if(l){s=$0;z=split(t,x,/\./)}}END{if(z)print s}'

... | awk -F "\"" 'BEGIN{print "Date     Time        source Format Specific data"}{print $2 " " $3}' | sed 's/^\([0-9]\{2\}\)\([0-9]\{2\}\)\/\([0-9]\{2\}\)\//\2.\3./' > CAN

... awk -F'[><]' '/<user>/{print FILENAME,$3}' file

... | awk -F\" '/^value:/{sum+=$2}END{print sum}'

... | awk -F, '{ split( $6, f, " " )} 0+substr( f[2], 8 ) > min' min=100

... | awk -F, '{split( $6, f, "M" )} f[2] > min' min=100

... | awk -F. 'a[$(NF-1)]++'

... | awk -F. 'a[$4]++' 

... | awk -F. 'a[$4]++ > 1 {print}'

... | awk -F. '{{if(a[$4]++ > 1){print}}'

... | awk -F= '{printf "%s",$2}'

... | awk -F "\t" '!a[$1,$2]++ && !a[$2,$1]++'

... | awk -v awkvar="$email" '{do something with awkvar}' ...

... | awk '/frmweb/ && !/PID/ && $2+0>0 && $4!~"00:00:"'

... | awk '/frmweb/ && !/PID/ && $2+0>0 && substr($4,4,2)+0>1'

... | awk '{ print $NF }'

... | awk '{ print NR "." $2 }' | xargs mkdir -p

... | awk '{print "dm" NR "," $0}' >output.csv

...| awk '{print $5"\t\t" $3"\t"$4}'|column -t

... | awk '{printf $2; for (i=3; i<=17; ++i) printf " " $i; print ""}'

... | awk '{sub(/\r$/,x); print>>f; close(f)}' f=log.out

... | column -t

... | cut -d '&' -f 1

... | gawk '1;{fflush()}' RS='\r\n' > log.txt

... grep --label "{}" -oHP "\\\\HF=[-]?\d+(\.\d{1,4})?"

... | grep -B3 "Mail last read" | awk '/Login:/ {name=$2} /Mail last read/ {print name, $0}'

... grep -i "congratz\|we found" ...

... | grep -oP "(?<=<sometag param=').*?(?='>)"

... | grep Link | sed 's/\/100//g' | tr '=' ' ' | awk '{printf "{\"link\":"$3",\"signal\":"$6",\"noise\":"$9"}"}'

... | grep '_[0-9]*_[a-z.]\+/combined'

... | grep "asdf" | sed -e 's:.*-ProcessName=\([^ ]\+\).*:Process \1:'

... | grep value: | awk '{sum+=$2}END{print sum}'

... | mail -s "Test Data" address1@company.com address2@company.com

... myfile.txt

... myfile.txt\r\n

... | nawk -F";" -v now=$now -v "commentValue=$commentValue"

... | paste -d, -s -

... | paste -d, -s - | sed 's/,/, /g'

... | perl -MPOSIX -ne's/\d//; print strftime("%T ", localtime), $_'

... | perl -ne 'print scalar split(/\$,\$/), "\n"' | sort -u

... | print_2nd_line 2  ## Still could be used like this.

... | while IFS= read -r line; do printf "%s\n" "${line%$'\r'}"; done > log.out

while ...; do read -n 1 -p "do stuff? [y/n] : " -u 3 resp; done 3<&0 <<< "$shows"

... | while read line; do ( cd $line && git pull ); done

... | sed -E 's|(://[^/]+/).*(-[0-9]+)\.html/.*|\1\2|'

 ... | sed -e "s/#MYDATE#/$(date +'%A %d %B %Y')/" | ...

... | sed -e 's/%]//g' | ...

... | sed -e 's/%%]//g' | ...

... | sed -e 's/CST//g'

... | sed -e 's/PST//g'

... | sed -ne 2p

... | sed -n "/$col1/{s/$col1/$col2,$col1/i; p}"

... | sed -n 's/.*<sometag param='\''\([^'\'']*\)'\''>.*/\1/p'

... | sed -r 's/([^;]*;){4}/&\n/g'

... | sed -r "s/(domainid=).*([0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}).*/\1'\2'/i"

... | sed '/^#include/s&\\&/&g'

... | sed 's/.*Rev\.\([0-9]*\).*/\1/'

... | sed 's|\(://[^/]*/\).*\(-[0-9][0-9]*\)\.html/.*|\1\2|'

... | "sort -k 1 > file" } ...

... | sort -k 1 > "file" } ...

... | sort -k4 -t: > index.by.word

... | sort -k4 -t: | tee index.by.word | awk 'FS=":" {print $4}' | uniq -c

... | split -l 1000000 --filter='gzip > $FILE.gz'

... | split -l 999 -d --filter='> ${FILE}.list' - 'files_xselect.'

... | tar -cf - -F - | ...

... | tdbloader --loc DB -- -

... | tr -d '\r'

... working [hh:mm:ss]  00:07:58

... | xargs -I '{}' xmllint --format '{}' --output formatted/'{}'

... | xargs -r kill -9

for i in *; do ....; done

.... -k 1,1nr -k 2,2nr -k 3,3nr -k 4,4nr -k 5,5nr ....

.... -mtime +1 -prune -exec ...

.... GREP_COLOR='01;31' egrep -i --color=always '^.*drop.*$|^.*deny.*$|$'

.... | awk '/^value:/{sum+=$2}END{print sum}'

.... | awk '{ a+=1; print} END { print "total match number: " a}'

....|grep -o "[^ ]*$"

.... | sed -n '/my_pattern/,$p'

.....    User-Agent ....

..... | tail -1 | cut -f 1 | xargs -i sed -n '{},$p' your_file

.......|awk 'BEGIN {res="Down"} /^445.*smbd\s*$/ {res=$3} END {print res}'

.......|sed 's@\\@@g'

.......|sed "s@\\\\@@g"

.....^IUser-Agent .....

.....\bogus>javac -cp target\dependency\*; src\main\java\Bogus.java

....pv -cN untar -s $(du -sb /root/networkshare/someFile.tar | awk '{print $1}')

.../rename: Perl script, ASCII text executable

.../rename: Perl script, ASCII text executable

...\047%%Y%%m%%d %%H%%i%%s\047...

...: binary operator expected

...app/>../lib/Cake/Console/cake MyShell

...app/>Console/cake MyShell

...things... &> $PIPENAME

../d/script.sh

../lib/Cake/Console/cake Hello

../otherstuff/code.py

"../programming/ctest/arg $i"

../rsyncsnapshot.sh daily 10

..\unzip -o ..\%1 >nul

 ./*

./A arguments &

./After.sh 123 'for f in *; do echo $f; done'

a=$( ./B.sh )

./Compile myprogram.c -o myprogram -llibrary

./FOO ./foo ./FOO

./Foo.sh

./Foo.sh my/path/goes/here

./MyCocoaApp -arg1 42 -arg2 "Hello, world!" -arg3 /path/to/file.txt

./MyCocoaApp -argument /path/to/file.txt

./MyProg <inputdata.txt | ./MyProg2

./MyProg <inputdata.txt | cat inputdata.txt - | ./MyProg2

./ShellFile.sh >& pathToLogFile.log

./ShellFile.sh 2>&1 | pathToLogFile.log

./YourJarFile.jar

sh-4.1$ ./a.bat '"a&b"'

sh-4.1$ ./a.bat "\"a&b\""

$ ./a.out > theoutput.txt

result=$(./a.out)

result=$(./a.out 42>&1 > /dev/null)

{ ./a.out; } 2> out_err 

./a.out \$23

./a.out *

./a.out | ./b.out

./a.out 1 \* 2

./a.out source > target 2>&1

./a.out source 2> target 1>&2

./a.out | tee >(grep foo > foo.txt) >(grep bar > bar.txt) [etc]

./a.out | tee >(grep foo > out.txt) | grep baz

./a.out 2>&1 | tee output

./a.out |& tee output

./abc.py -c "./abc.py -p '"'a!s!d!f'"' -c 'ifconfig'"

./abc.py -c "./abcy.py -p 'a\!s\!d\!f' -c 'ifconfig'"

./abc.sh

./abc.sh &

$ ./android update sdk --no-ui

./anotherScript "${@:2}"

./app "$file" "$text"

./app --help

$ ./as-cmd

./assests.sh ver1

./atompot < filename

./audit.sh myotherfile.csv MyOtherAudit.txt

./b.sh

./bash2: line 3: if[ =0 ]: command not found

./bashor.sh path/to/input.txt

./behead.sh inputfile outputfile

./bin/behat

./bin/elasticsearch &

$ ./build.sh | grep `pwd` | xargs -I % cp % target_folder

$ ./build.sh | xargs -I % cp % target_folder

$ ./cake bake

./caller.sh '-f -hello -q "blah"'

./caller.sh -f -hello -q '"blah"'

bash-3.00$ ./caspser.pl > /tmp/checkFORerrors2013Nov19 2>&1

./check_apache2.sh -H localhost -P 8443 -S

./child | tee file

./clean.sh

./cmd

./code 'perl -e " use q<> or qq++ here "'

./command

./command1 | grep '^\[' | awk '{ print $2 } ' | xargs ./command2

./commands.txt

./commandthatputsstuffonstdout | tail -c +1025 ...

./configure --prefix=$HOME/eco

./configure --prefix=/home/ubuntu/mystuff

./configure --with-sed=gsed

./configure CC="gcc -arch i386" CXX="g++ -arch i386"

./configure CPPFLAGS='-I/usr/include'

./configure && make && make install && echo "All good!"

./configure && make && make install && echo "All good!" || echo "Something's awry"

./configure && make && make install || rm -rf /install/path

$ ./correlate user*

./cpi >> $logfile 2>&1

./cppapplication.exe "" 0 1 1 0

./crclient -l u09me215

$ ./dat2dot data.dat > data.dot

./daterange.awk inputfile

./dbbkup.sh prefix

./deleteme no mp3

$ ./dir.sh 2 > log.file

my_sum_var=$(./do_something.sh)

(./doit >> log) 2>&1 | tee -a log

$ ./download.sh

$ ./env.rb

./ex17 <<<'w'

./ex17 <filename    

./example 5 hello how are you

    $ ./example.pl

./example.sh    # runs example.sh from the current directory

./example.sh

./execSudoScript.sh --sudoUser root --sudoPwd pass ls /opt

./expect.sh "$SERVER1_PASS" ssh root@$SERVER1

$ ./export.sh EXPORT_FLT_2

$ ./extractimages terms.txt http://system.com > imgname.txt

./factorial.awk

./fakeswap.sh

./file1.bash

./filename

./fileparts file1 file2 anotherfile somemorefiles*.txt

$ ./findfiles.sh /var/log/ '*.txt'

./follow.sh ./main.sh

./foo

./foo --option bar file1.txt file2.txt file3.txt

./foo -n / bar

./foo -o /dev/stdout | less

./foo -p / bar

./foo ; ./bar <<<"y" ; ./baz

./foo ; echo "y" | ./bar ; ./baz

./foo.sh

./foo.sh "a a" "b b" "c c"

./foo: line 9: [1: command not found

./function-script arg1 "argument 2" arg3

./generateReport -i `find . -name "file*" -mtime -1` -o output.html

./generateReport -i file? -o output.html

./generate_commands | bash

data=$(./getdata.v7 "$1" "$2")

./getopt.sh arg1 -s opt1

./grammer facts.pl queries.pl

./grandparentScript CD_TO_USER_NAME_OPTION

 ./grep-result.sh  < grep-result-test.txt 

./hello

./hello

./hello-world

./hello.bash

./hello.sh

./hhhqst >/tmp/hhh.out

./hiefe.txt

$ ./ind apple banana cantaloupe dates

./initVars.sh # or whatever is your script name...

./install.sh < ./install.txt

./interact

./java_ee_sdk-7-jdk7-macosx-x64-ml.sh

./jmeter.sh -t Block1Thread-1000.jmx

for i in `./jsonValueExtracter.pl -s exampleId < input.json`; do curl http://brsitv01:8080/exampleId/$i > example$i.json; done

tmp_output=$(./jvmtop.sh --once | grep $process)

./keychain_access -p password_for_exported_private_key "Name of private key"

./killMyPorts 5000

./load.php "$filexml"

./load_data.sh TCOMPASS/Protocol >> load_semantic.log 2>/dev/null

./lol.py "$(if [ -n "$URL" ]; then echo -u "$URL"; fi)"

./loop.sh | stdbuf -o0 cut -d' ' -f3  > myfile

./m4 "`python -c 'print "\x66\x66\x'${hex_offset}'\xed\xff\xbf\x'${hex_base}'\xed\xff\xbf%49135c%88$hn%14153c%89$hn"'`"

./make.o  >out$ctr.txt <output$ctr.txt

./make.o output$ctr.txt >out$ctr.txt

./manage.py dbshell

./manage.py runserver

./manage.py shell --plain

./matlab_batcher.sh myfunction myinput

./mc.sh

./memcached -vv

./mipsim test1

./mkiso aa.iso bb.asm

./mm.sh ' -o -n /home/lukas/xyz'

./mongo localhost:27017/dbname

$ ./my-script -a file1,file2,file3 -d file4,file5,file6 -r file7,file8

./myPlotter.R "$fileWithSpeeds" "$titleOfGraph" "$lowestHP" "$highestHP"

./myProgram.exe arg1 arg2 arg3

./myScript > newFile.txt

./myScript "first argument has spaces"

./myScript rootDirectoryWhereSearchForFiles

./myScript.sh -d target_folder file1 file2 file3... fileN

./myShellScript.sh 

./my_program "$*"

./my_program `ls My_FOLDER/ | sort -R | head -n 100` file_to_output

./my_script input_file output_file

./my_script.sh

$ ./my_script.sh /home/user/file1.txt /home/user/file2.txt

$ ./my_script.sh | lp -d [PRINTER]

./my_script.sh param1 param2

./my_secured_process some parameters 3<<< "b@dP2ssword"

./myawk.awk inputfile

./mycode somefile | sed -f sedfile

./mycode somefile | sedfile

./mycommand smallcmd1

./myprogram "11*15"

 $ ./myprogram || echo failure

 $ ./myprogram && echo success

./myprogram | tee "$g-$number-results.txt" >> $g-results.txt

./myrage.sh "insert into Processing values(1,2,3,'huge bear');"

./myscript

./myscript

./myscript

./myscript ./otherscript

./myscript "Text1 Text2"

./myscript bash -c 'echo "$myvar"'

./myscript echo ''

./myscript 'echo "${myvar}"'

./myscript echo "${myvar}"

./myscript "file 1.gpx" "file 2.gpx"

./myscript foo bar ick poo   # won't work

./myscript "foo bar" "ick poo"

./myscript http://www.example.com my\ other\ filename\ with\ spaces

./myscript my_host 192.168.1.100 foo

./myscript.pl < in.$$

./myscript.pl runabnormal --help /sbin/proc -f filename --config=set.config --log=me.log

./myscript.py < somefile.txt

./myscript.py $(< pids.txt) -a "something here" -b "something else"

./myscript.py $(cat pids.txt) -a "something here" -b "something else"

./myscript.py ./foo.txt ./biz/foobar.txt ./baz/yougettheidea.txt

./myscript.sh

./myscript.sh

$./myscript.sh 

$ ./myscript.sh 2> /dev/null

./myscript.sh

./myscript.sh $(< mycmds.txt)

result=`./myscript.sh $@ 2> /dev/null`

./myscript.sh -m 1 -i "$I" -t 2142

./myscript.sh 20120705

./myscript.sh 5 3 89 12

./myscript.sh arg1 arg2 arg3

./myscript.sh dir1 dir2 .. dirN

./myscript.sh example.asm

./myscript.sh example.o

./myscript.sh foo

./myscript.sh "localhost?x=1&y=2&z=3"

./myscript.sh 2>&1 | tee output.log

./myscript1.sh $(./myscript2.sh my_string)

./mysql -u root -p

./new.sh 2013-03-20 201

./node_modules/.bin/tsc -v

./optAlg.exe "$inputFile" 500 2>&1 > "output/$outputFile"

./our_program

./our_program hello.txt

./out_program hello.txt output.txt

./package

./parse.awk input.txt

 $ ./parser | xargs ./adder

./passwrd.sh 'sohan$23'

./pax.sh: line 7: bye: No such file or directory

./plot.plt > mypng.png

./plot_file_in_terminal Mset

./plot_file_in_terminal sine

./prgm_bin_file  mydata

ok=`./prime.sh $rem`

./print_args *

./print_args '*'

./print_args a b

./printer_script $(sort -nrk4 $file) 

./prog "$(<file1.txt)" "$(<file2.txt)"

./prog "`cat file1.txt`" "`cat file2.txt`"

./prog | tee >(grep -i 'grep1' > file1) >(grep -i 'grep2' > file2)

./prog_name -d -o direct_io test_directory

./program < infile.in &> outfile.o

./program < infile.in 2> outfile.o

./program < input.txt > output.txt 2>&1

./program < input.txt &> output.txt

./program < sometest.in

./program <(sed "/^number=/s/=.*/=5/" baseinput.ini) 

./program --bash

./program ...

$ ./program | grep 'Total Events Processed\|Total Remote (shared mem) Events Processed'

./program tests/*

./r_script.R arg1 arg2

./random: line 14: 86: No such file or directory

./record_table_load_stats.sh MODEL "$dtMODEL"

./redelimit

./redelimit > newfile.csv

./rename.sh *gif

$ ./renumber {A,B,C}/run.txt

./reset_db.sh

./resizemany.sh 'allfiles\(.*\).jpg' 30 'newnames\1.jpg'

./restart-apps app1 app2 app3 ...

checkdate=$(./rtest 2&>1) # if rtest is in current directory.

output=$(./run)

output=`./run`

./run > output.txt

./run -r ',.?!:;()[]{}"'"'" text1.txt

./run -r ',.?!:;()[]{}"' text1.txt

./run | tee output.txt

./run text.txt ./check

./run.sh 465

./run.sh list.txt

./runArguments.sh

./runArguments.sh $(grep foo bar.txt > output.txt)

./runArguments.sh eval "grep foo bar.txt > output.txt"

./run_prog 2>&1 | grep READ > read_data.txt 

 ./run_some_process 2>&1 | tail -10 >>logfle

./runall 2>&1 | fold -w 80 2>&1 | tee ${log_file}

while ./runtest; do :; done

./s2 "$1"

./s3cmd

 ./samtools view mybamfile.bam | awk -F'\t' '{ print $2 }' > output.txt

./script

./script -a <<<"$CONTENT"

./script -i "some text"

./script 2>&1 >/dev/null | ./other-script

./script '/home/*/public_html' php.ini module.so

./script /home/*/public_html php.ini module.so

./script A B C D

./script | less +Gg

 ./script >x & less x ; rm x

./script 'test\42'

./script "test\\42"

./script tgt ver "this is the description" rev-1.1.1 -d "apt-transport-https > 0.8.16~exp12ubuntu10.15" -d "mongodb > 1:2.0.4-1ubuntu2" -d "ntp > 1:4.2.6.p3+dfsg-1ubuntu3.1"

./script | tr '\n' ' '

./script-name

./script-two.sh

$ ./script.awk data2.txt data1.txt

$ ./script.awk file1 file2

./script.awk regex logfile

./script.awk regex outputfile1 outputfile2 inputfile

./script.bash *.sql

./script.bash sql_dir/*.sql

./script.bin | sed "s/\$/ IP=$IP/" | tee -a file.log

./script.pl -t '2010/11/29 09:39:57'

./script.pl in.txt > out.txt

./script.py --aligner aligner1 param=12 --aligner aligner2 param=30 other_param=28

./script.py 1 2 3 4.0 5.0 > /proc/somefile...

./script.py `cat args-file` > /proc/somefile...

./script.r

$ ./script.sh

./script.sh

$ ./script.sh

./script.sh &

./script.sh $@ > /dev/null &

./script.sh -n 4 -g "AAA TGC" sequence.fasta

./script.sh /tmp '*~'

./script.sh arg1 arg2

./script.sh check1.txt

./script.sh check1.txt 123

./script.sh domain email from_email rcpt_email

./script.sh file.c

./script.sh file2.txt file1.txt

./script.sh file24.txt

./script.sh file_name_test.txt 5

./script.sh filename.txt 30

./script.sh folder/*

./script.sh foo '*.txt'

./script.sh oldfile newfile

./script.sh root /bin/echo 'apple pie'

./script.sh | tee /dev/fd/2

./script.sh | tee script.out

./script.sh | tee script.out | awk '/^Password/ {print;}'

./script.sh 'test1$test2'

./script.txt 2>&1 | tee -a example.txt

./script1.sh && ./script2.sh

./script1.sh ; ./script2.sh

./script2.sh "$@"

./scriptTwo.sh "${array[@]}"

$ ./script_name < input_file > output_file

./script_name.py 

./scriptfile.sh > foo.log

./scriptname G_P_map.txt G_S_map.txt S_P_map.txt

./scriptname arg1 arg2

./scriptname 'file > newfile'

./scriptname file newfile

$ ./scriptname inputfile

./scriptname sendcommand "command with spaces"

./scriptname.sh -t desktop -n

./scriptname.sh -t minimal -n

./search.sh 3.175399 21.913555 < input.txt  

./search.sh "echo"

./search_replace

./search_text.sh 'string_to_search' *

./search_text.sh 'string_to_search' file1 file2

./second "$@"

./second -t "$(./first -t)" -s "$(./first -s)" -o output.txt

./sedS.sh > out.txt

$ ./sendsms.php -u your_username -p your_password -k your_api_key 447771234567 'Hello from CLI'

./sendxms +$var1 $string -pSMPP -Otest

./sendxms +"$var1" "$string" -pSMPP -Otest

./setenv.sh

$ ./shellcode `echo "something"`

./show_parms.sh foo

./sign < bright_side_of_life | cat > output

./simple.sh *

./solar_sim "$i" "$j" >> solarResults.txt

./solar_sim 'i' 'j' >> solarResults.txt

./someScript.sh foo bar

./some_script.sh*

a=`./somefile`

a=`./somefile 2>&1`

./someprog "$@"

./someprogram | tee /dev/tty | sed -u 's/^.\{2\}//' > output_file

./spellcheck corpus_colors <<<rend

./sqlitestudio-2.0.22.bin

./sshlogin.exp password 192.168.1.11 who 

./start.sh -dayoffset 1 -processMode true

./start.sh 1 true

./start_parallel.sh

./startup.sh

./stats.sh < input.txt

$ ./stopWithZip.sh 

./stream_generator | egrep --line-buffered 'TICK' | ./topic_processor 

$ ./strptime "Mon Feb 27 16:21:34 WET 2012" "%a %b %e %H:%M:%S %Z %Y"

dene=$(./sub.sh | sed -n 's/^MAGIC: //p')

./sumcell.awk table*

./sumcell.awk table1 table2 table3

./svnfixversion ./ 1.5 --verbose

./svnfixversion ./ 1.5 --verbose 2>&1 | less

./test "/home/stack over flow/location"

./test 3 2 '*'

./test '3 2 *'

./test abc '"def ghi"'

./test.csh >test.out 2>test.err

$ ./test.exp -d user1 pass1

./test.pl |  awk '{ print strftime("%Y-%m-%d %H:%M:%S"), $0; }'

dummy:~$ ./test.py http://example.com

$ ./test.rb

$ ./test.rb "test1 test2"

$ ./test.sh

./test.sh

./test.sh "*.cpp"

./test.sh /media/2C44138344134F48/RB1

./test.sh 1 2 "3 4"

./test.sh FILENAME LINE_NUMBER FIELD_NUMBER

$ ./test.sh 2>&1 | awk '{if(!match($0, /^\+ echo/)){print $0}}'

$ ./test.sh 2>&1 | grep -v '^\+ echo'

$  ./test.sh rc_file bashrc_snippet

./test.sh this is '"some test"'

./test.sh.x&  ( sleep 0.2 && kill -SIGSEGV $! )

./test1.sh

./test2 server1:nginx,mysqld server2:sshd,apache2

./testX.sh "Hello World" Foo Bar

./test_shell.txt

./testarg.sh -ARG1 $ARG1 ${ARG2:+-ARG2 $ARG2} -$ARG3

./testess.sh test1 test2 test3

./testess.sh test1 test2 test3 test4 test5

./testscript.sh -p "somestring" -i "/home/android/test/abc.xml" -o "/home/android/outputfolder"

./thatScript.pl inputFile.html > newInputFile.html

./the-script.sh fulltext 5k_list_*

./the-script.sh fulltext 5k_list_1 5k_list_2 [...]

$ ./this-script.sh < logfile

./thunderProfileBU.sh: line 23: cd: //media/My: No such file or directory

./thunderProfileBU.sh: line 23: cd: /mcp/.thunderbird/lOdhn9gd.default: No such file or directory

$ ./tinymce_compressor.sh

(./tmp.sh 2> >(tee >(cat >&2) >&1)) > tmp.log

./train.sh -f testf test1  test2 test3 test4

./translate.pl CharMap.txt sample.txt

./twice.sh 15

./two.sh

./update configfile key2 test

./upload_to_github 'minor change'

ERROR=$( { ./useless.sh | sed s/Output/Useless/ > outfile; } 2>&1 )

./userspecifiedcmd.exp root "$password" "$server" "$usrcmd"

./valecho &

./verify-export-realtime.sh && sh -x lca_query.sh && sh -x liv_query.sh && sh -x lqu_query.sh

./version.sh -x foo -c

./webbmaster_bellarose_joomla_12-29-2009.sql.gz

./webbmaster_bellarose_joomla_2009-12-29.sql.gz

 ./wget_by_link_text 'http://www.ofsted.gov.uk/filedownloading/?id=1295389&type=1&refer=1' "Please download the requested file here"

   ./wget_by_link_text url link_text [save_as]

[user@host]$ ./workers.sh > workers.output 2> workers.error &

./wput/wput.exe -N deploy "ftp://****:****@address.co.uk/public_html/java/desktop/"

./wrap.sh ./tool --formula="\"Foo bar baz\""

./wrapper -q --params somefile1 somefile2

./wrapper input.txt myprog possible command line arguments

./xml-translator.bash en fr ./input.xml

    ./xmlparse.sh $your_one_line_xml > ${your_one_line_xml}_new

./your_file_name.rb

./your_program | (while true; do read tmp && echo "$tmp" > $file; done)

$ ./your_script.sh &

./your_script.sh | sh -x

 $ ./yourprog 2>&1 | uniq >> logfile

./yourscript -f"./filename with spaces"

./yourscript | ./read1000.sh > output.txt

./yourscript Buildings.csv | sort -u > floors.csv

./yourscript file1 file2 ...

./yourscript parameters

./yourscript.sh 2> /dev/null

.09197621484831000000

.DS_Store

PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.RB;.RBW

   .\FindDocs.ps1

.PHONY: all

.PHONY: clean

.PHONY: test

.command1 | awk '/^\[/ { print $2 }' | xargs ./command2

.cshrc

.\dotnet\TestRunner -format xml -results results.xml localhost 8080 FrontPage.MemoryMustPass

.git/refs/remotes/remotename/branchname

.help

.\my.ps1 2>stderr.txt | Tee-Object -file stdout.txt

.profile

.tables

.\type e:/babak/git/bin/test.txt

/\/[^/]+$/

/^[0-9]*\.[0-9]*\.[0-9]*$/

/^[0-9]\+d[0-9]*/,/^[0-9]\+[^d]*$/

/

/^445.*smbd$/

\(.*\)$/ 

/

/<div>/,/<\/div>/

/^[0-9A-F]{8}.*_.*$/

/ *<div class="item_title">\(.*\)<\/div>/

myarr["range-one"]=NR~/^2$/ , NR~/^8$/;

s/$/<br \/>/

s/[^>]$/<br \/>/

/[<]\/app-deployment/{a=0; n=0}

/[[.a.]/]/

/[[:alpha:]/]/

/[\]/]/

/[.]/

/[/[:alpha:]]/

/[0-9]\+\.[0-9]\+\.[0-9]/

/[0-9A-F]{8}[^_]+_/

/[^ -~]

/[a-zA-Z0-9_]+\.[12][90][0-9][0-9][01][0-9][0-3][0-9]/

/<tr valign=top>/&&v++%2

/^[01]*_[01]*$/ { print $0 }

/\/some_simple_string$/ { print $0 }

!/^$/ {print $1"\n" \

/#/ {print $1};

/\(A B\) D/ s//\1 C/

/* This will go away */This will stay

/**/

:%s/,3$/,2/

/.*21[34][0-9]\{3\}.*/ {p}

/\./

//a[@id='infgHeader']/@text

//a[img]

//depot/... //my-client/...

//depot/main/my-project/... //my-client/main/my-project/...

//div[@class='fullImageLink']/a

s/\..*$//g

'//ns:Style[.//ns:color[contains(text(), "ccff00ff")]]'

'//ns:Style[.//ns:color[contains(text(), 'ccff00ff')]]'

//row[field[1]='Charterish']/field[4]

:%s/^.*name="\([^"]*\)".*$/\1

:%s/^\([^,]+,[^,]+\),.*$/\1/

s/1$/2/

'/6\.0\.0\.0\.[0-9]{3}/!s/6\.0\.0\.0/6.0.0.0.001/g'

'/6\.0\.0\.0\.\d{3}/!s/6\.0\.0\.0/6.0.0.0.001/g'

'/6\.0\.0\.0\.\d{3}/b; s/6\.0\.0\.0/6.0.0.0.001/g'

/A B / s/D/C/

/Applications/DiffMerge.app/Contents/MacOS:/usr/bin:...etc

 /Applications/Emacs.app/Contents/MacOS/Emacs  

/Applications/Genymotion.app/Contents/MacOS/player --vm-name "xxxx"

/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf thefile.odt

/Applications/MAMP/Library/bin

/Applications/MAMP/Library/bin/mysql -uUsername -pPassword

/Applications/MAMP/Library/bin/mysql -u root -p

/Applications/MAMP/bin/php5.3/bin

/Applications/MAMP/bin/php5.3/bin/php

/Applications/MATLAB_R2008a/bin/matlab -nodesktop -r "run Documents/MATLAB/BLS/BLS; exit;"

mma () { /Applications/Mathematica.app/Contents/MacOS/MathKernel -noprompt -run "<<$1" ; }

/Applications/Mathematica.app/Contents/MacOS/MathKernel -noprompt -run "<<test.m"

/Applications/MonoDevelop.app/Contents/MacOS/mdtool build MySolution.sln

/Applications/PackageMaker.app/Contents/MacOS/PackageMaker

/Applications/Utilities/Automator.app 

subl() { /Applications/path/to/subl ; }

'/BEGIN_FOO_END/b; s/BEGIN_\(.*\)_END/(\1)/g'

/DVERDOT=""8.0.0.0""

'/Eth|Net/{if ($2 ~ /^Eth|^Net/) print}'

/Library/Frameworks/Python.framework/Versions/X.X/bin/python

/:$/N

    /StartServers/        s/[0-9][0-9]*/$ifmodfork_StartServers/

/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -seed

/System/Library/Frameworks/Python.framework/Versions/X.X/bin/python

/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I

/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'

"/TR ""C:\Documents and Settings\All Users\Desktop\ABC.exe"""

/Users/[username]/Application Support/Google/Chrome/

/Users/[username]/Library/Caches/Google/Chrome/Default/

/Users/Robert/Desktop/Untitled.sh /Users/Robert/Desktop/file.txt 6

/Users/justinz/.rvm/scripts/rvm

/Users/simont/bin/batcharge.py

/Users/userme/.rbenv/versions/1.9.3-p194/gemsets/global

 /Users/username/Library/Enthought/Canopy_64bit/User/bin/

/Volumes/backMeUp/main/Comics/Bleach/Volume 004/bleach_031.zip

/^[[:space:]]*<div class="item_title">[[:space:]]*\(.*\)[[:space:]]*<\/div>[[:space:]]*$/

"/^[ \t]*COMMAND/ s/OLD/NEW/g"

/^"[0-9]\+[^0-9]\+[0-9]*",/p

/^[0-9]\+/d

/^;var/N;

'/^#[^!]/d'

/^#/!{s/a/b/;s/c/d/}

/^#/d

/^-/

/^....../

/^.{6}/

/^INSERT/, /.*;/ {print}  

/^hits/{ hits+=$NF}; /^misses/{misses=$NF};

/a/b/c/foo.txt

/a/b/c/x/a/b/foo.txt

/address/

/b/,/d/s/./X/

/backups/world_Mon_Feb__3_21:56:33_PST_2014

/bin/bash --login 

/bin/bash --rcfile ~/.pycharmrc

/bin/bash -c "$(printf "%q " "$@")"

/bin/bash -c '$cmd'

/bin/bash -c "Command1 && Command2...." &

/bin/bash -c "FUEL_ENV=development; /usr/local/bin/php /home/net/###DIR###/oil refine TaskName 2>&1"

/bin/bash -c 'TERM=something; eval "$1"' -- 'SomeUserInput'

/bin/bash -c 'echo cat output{1,2}'

/bin/bash -c "ps -eo pid,command | grep -v bash | grep syslogd | awk '{print \$1}'"

/bin/bash -c 'test -e failurefile && retrycommand -someflag -etc'

/bin/bash -c 'while true; do echo `date`; sleep 1; done'

/bin/bash -l -c "The entire command line that you want to execute"

/bin/bash a.sh 1 2 3

/bin/bash my_script input_file output_file

/bin/bash myscript arg1 arg2 '' arg4

/bin/bash myscript.sh arg1 arg2 arg3

var=$(/bin/command.out 2> /dev/null)

/bin/cp .....

/bin/date +%V

/bin/date -d "20100215"

/bin/date -d "20100215" +%V

for elem in {1..100} ; do /bin/echo "$elem" > mypipe ; done

/bin/echo "Timestamp: `/bin/date +"%m-%d-%y %T"` Files: `/usr/sbin/lsof | /bin/grep app | /bin/wc -l`"

/bin/echo `date` $* | $LOG

/bin/echo foo bar barfoo foobar barbar foofoo

/bin/env "perl -w"

/bin/false

Manifest= `/bin/grep  'pcsi-selector="'  /LDCManifest.xml | cut  -f 2 -d '"'`

Manifest='' `/bin/grep  'pcsi-selector="'  /LDCManifest.xml | cut  -f 2 -d '"'`

HOSTNAME=$( /bin/hostname -s | /usr/bin/tr A-Z a-z )

/bin/kill -- -$$

/bin/kill -9 1234

/bin/kill -f 1234

/bin/ls

/bin/ls

SQL_FILES=`/bin/ls [^D]*.sql`

SQL_FILES=`/bin/ls *.sql`

function ls { /bin/ls -l; }

/bin/ls -l $line 2>&1 | grep -i "No file"

/bin/ls /tmp

/bin/mv ...

/bin/phpunit blabla

/bin/ps -Ao"command,pid,ppid"|/bin/grep ' 1$'|/bin/grep /php|/bin/awk '{ print $2; }'|/usr/bin/xargs --no-run-if-empty kill -9

process_id=`/bin/ps -fu $USER| grep "ABCD" | grep -v "grep" | awk '{print $2}'`

/bin/sed -i "s/HOSTNAME=.*/HOSTNAME=${HOSTNAME//./_}/g" /etc/sysconfig/network

/bin/sh -> /usr/bin/python

/bin/sh $0 background &

/bin/sh $PENTAHO_HOME/kitchen -file $ETL_JOB_HOME/sync_job.kjb >> $JOB_LOG_FILE_PATH/$JOB_LOG_FILE_NAME

/bin/sh -c '<command>'

/bin/sh -c . /somepath/script.ksh argument

/bin/sh -c ". /somepath/script.ksh argument"

/bin/sh -c "/bin/df | awk 'END{gsub(/%/, \"\", \$5); print \$5}'"

/bin/sh -c "/bin/df | awk '{p=\$5} END{sub(/%/, \"\", p); print p}'"

for i in {1..100000}; do /bin/sh -c "/bin/true $i"; done

/bin/sh -c '/home/MY_SCRIPT.py /home/arguments 2> /dev/null'

/bin/sh -c "RAILS_ROOT/lib/parking_timer.sh STRING_VARIABLE | at 12:57"

/bin/sh -c "at 12:57 < RAILS_ROOT/lib/parking_timer.sh STRING_VARIABLE"

/bin/sh -c 'echo cat output{1,2}'

/bin/sh -c "find dir/checkpoint/features.txt -mindepth 1 -maxdepth 1 -type d -iname '20*' -exec echo \"hello\" \;"

/bin/sh -c "find dir/checkpoint/features.txt -mindepth 1 -maxdepth 1 -type d -iname '20*' -exec yourscript.sh {} \;"

/bin/sh  -c 'for dirname in $(ls -d sh_test/* | awk -F/ '\''{print $NF}'\''); do mkdir sh_test_root/${dirname}; cat sh_test/${dirname}/* > sh_test_root/${dirname}/final.txt;done'

/bin/sh -c gcc --version

/bin/sh -c "gcc --version" gcc --version

$ /bin/sh -c "if ps -ef | grep apple ; then echo APPLE fi ;"

/bin/sh -c 'ls -l -R'

(/bin/sh -c "myscript.sh" >log.txt 2>&1 ; echo $? >somefile) & echo $!

/bin/sh /somepath/script.ksh argument

/bin/sh "/tmp/echoscript.sh" ">>" "/tmp/log"

/bin/sh /your/script/path/your_file

/bin/sh 'ls -l -R'

/bin/sh: c: command not found

/bin/sh: cannot create : nonexistent

/bin/su -c "pwd; id" username

/bin/tar xf $tarfile -C $tmp $contents

/bin:/usr/bin

/\bjump.*?\b/

/c 0\.5p_f/{n;s/\([^[:space:]]*[[:space:]]\+[^[:space:]]*[[:space:]]\+\)\S*/\1modify/}

$ "/c/Program Files/TortoiseSVN/bin/TortoiseProc.exe" /command:update /path:"d:\Dir\LocalRepo" /closeonend:0 &

/c/WINDOWS/system32/notepad.exe $1 &

/c/users/file.txt

/c9d0s3/ {print}

/chaitanyavaranasi/android-sdks

/cygdrive/c/temp/dirA/

/cygdrive/c/users/file.txt

/data/source_folder/ IN_CREATE /path_to_script/file_delivery.sh $#

/def/d;/page/d;

/dev/bin/com/example/Hello.class

/dev/disk1s2

/elememt1/*/group1

/etc/bash_completion.d/git

/etc/cron.weekly

/etc/crontab

/etc/environment

/etc/git.bash

/etc/init.d/auditd restart

/etc/init.d/functions

/etc/init.d/httpd /etc/init.d/nscd status

/etc/init.d/sshd restart

/etc/init.d/sshd restart

/etc/init.d/syslog stop; /etc/init.d/syslog start

/etc/mysql/my.cnf

/etc/profile

$ /etc/puppet/nodes/brackets.pl

/etc/shells

/filename\.[12][90][0-9][0-9][01][0-9][0-3][0-9]/

/foo bar baz/d

/foo/bar/home/project/myscript.sh

/fox/{

/frmweb/ && !/PID/ && $2+0>0

/full/path/to/animate HRIT_MSG3_CTT

/full/path/to/java -jar my.jar myfirst_p mysecond_p &

/full/path/to/myscript

/full/path/to/rvm/bin/ext_1.9.3_bundle exec unicorn_rails -E production -D

/great/path/to/my/application/script/rails runner "Student.do_something"

/home/a/b

/home/a/b/c

/home/a/b/c

/home/a/b/c/home/a/b/d

/home/a/b/d

/home/admin/script2.sh "$ARG1" "$ARG2" "$ARG3"

/home/ahmed/Desktop/run.sh

/home/apercu/git/Site-Lillie-Monster/{.tmp,app}/http:/fonts.googleapis.com/css?family=Raleway:400

/home/appname/script/rails s -p 3333 -d

/home/evgeny/.Private on /home/evgeny type ecryptfs 

/home/hsaka/public_html

/home/klenwell/.pyenv/versions/2.7.7/bin/python

      /home/larix/.bashrc

/home/mumps/Medline2012/getDocs.mps < /home/mumps/CS3150/Script/HW1/textfiles/CardioAndPulmonary.txt > /home/mumps/CS3150/Scripts/HW1/textfiles/Titles.txt

/home/my_username/path/myfile.swf IN_MODIFY killall gtk-gnash

/home/my_username/path/myfile.swf IN_MODIFY xargs kill < /var/run/gtk-gnash.pid

/home/myname/project/stopWithZip.sh >> /home/myname/project/cronlog/$(date +"\%F")-stop.log 2>&1

$ /home/myname/project/stopWithZip.sh >> /home/myname/project/cronlog/$(date +"\%F")-stop.log 2>&1

/home/myuser/watchDir/ IN_MODIFY,IN_CLOSE_WRITE,IN_CLOSE_NOWRITE /bin/bash /usr/local/bin/runT.sh  $@/$#

/home/myusername

/home/rm/home-scripts/originals/audicerttest/incoming/TEST040511.txt

/home/ubuntu/testsql.sqlite .dump one/newfinal.sql

$ /home/user/scripts/./my_script.sh

/home/user1/run.sh $SEED > ${SEED}/output.txt 2> ${SEED}/error.txt

/home/whatever/bar/code/foo.txt

/home/whatever/foo/code/foo.txt

/home/you/bin/unsetsugid vim /tmp/xyz

/local/mnt/named/sbin/named -c /local/mnt/named/var/named.conf </dev/null &> /dev/null &

/mnt/backup/daily0/localhost/var/www/clients/client1/web1/web/

/mnt/backup/daily0/localhost/var/www/domain.ext/web/

/mypath/abc $gateway

/opt/Oracle/Java/bin/java

/opt/local/bin/bash

/opt/local/bin/id3v2

children=`/opt/local/bin/pgrep -P ${_pid}`

/opt/sbin/script.pl --group="value1" --rule="value2"

/p:AutoParameterizationWebConfigConnectionStrings=false

/path/to/a/banana/././././././././././././/

$ /path/to/bar abc 123 fixed args

$ /path/to/bar some args

/path/to/file -q --params somefile1 somefile2

tmp_output=$(/path/to/jvmtop.sh --once | grep $process)

/path/to/musicdir/genre/artist/album/track.suffix

/path/to/myscript.r

/path/to/myscript.sh 5 3 89 12

$ /path/to/php somefile.php

/path/to/recorder.sh < $PIPENAME &

 /path/to/rhino /path/to/your/script

checkdate=$(/path/to/rtest 2&>1)

/path/to/rvm 2.1 do /path/to/script.rb args...

/path/to/script

/path/to/script.bash /usr/bin/xmessage -buttons "button a","button b" some text to test

/path/to/script.sh |[multilog][2] s2000 ./logdir

/path/to/script: 1: CR: command not found

/path/to/ustvari.sh 3 5

/path/to/your_script.py arg1 arg2 [...]

/path/v1/module/order/some other value

/patt/!d;s//repl/

/proc/<pid>/cwd

/proc/5/fd

("/production/bin/title_case.awk "old_name) | getline new_name

$ /program/that/generates/lines | /path/to/your/php/script

/regex/

/res:MyFile.xml,MyNamespace.MyFile.xml

/root/full/path/to/leaves/

/root/public_html

/root/script.sh|mail -E -s topic my@mail.com

/sbin/blkid > Label

 /sbin/ifconfig -a | grep -i 'inet addr:'

/sbin/ifconfig eth0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}'

/sbin/ifconfig | grep -B1 1.2.3.4 | awk '{print $1; exit}'

netip=`/sbin/ifconfig | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'`;

/sbin/ifconfig ppp0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'
$ /sbin/ifconfig | sed -n '2 p' | awk '{print $3}'

/sbin/service --test-if-configured-on "org.apache.httpd"

/sbin/stop api

/search_replace

/share/pythonLib/lib/python2.7/site-packages/

for t in $tabs; do /shared/sqoopToHdfs.sh $t >$t.out 2>&1 & done

/some/long/path/we/need

/some/long/path/we/need/to/shorten

/some/path/here/phpunit ....php

/something/ { arrayPARAM1[something]++ }

  /srv/user-data.sh

/str1/{found=1}

( /sw/bin/perl /path/to/tv_grab_oztivo ... ) >/tmp/qq 2>&1

/tmp/ DELETE foo

"/tmp/My Batch Script Files/Processing" arg1 arg2 ...

/tmp/My" Batch Script "Files/Processing arg1 arg2 ...

/tmp/My\ Batch\ Script\ Files/Processing arg1 arg2 ...

/tmp/a.sh 1 2 3

/tmp/a:5.79.78.236

/tmp/inventury.expect | tr -d '\r'  1>> /tmp/VM.log 2>> /tmp/VM.log

/tmp/p.pl "$@" 1>/tmp/chk.out 2>&1

/trunk/ui/mydialog.h

/u01/app/oracle/product/11.2.0/xe/bin/sqlldr

\/user\/dj\/a\/mydir

/usr/IBM/WebSphere/AppServer/java/bin/java -verbose:class -cp "XXXXX" com.ibm.XXXX >>/home/user/log.log 2>&1

/usr/bin/[

/usr/bin/Rscript -e "library(knitr); knit(\"${input}\")"

/usr/bin/bash -c "APSHOME=/all/aps/msc_2012; export APSHOME; "

PORT=`/usr/bin/ckint -d 389 -p 'port(389)=' -h 'Enter a port number'`

/usr/bin/diff <(find . -type d \( -name store_sitemap \) -prune -o -type f -exec md5sum {} \; | grep -v "bidorbuy.log") /root/scripts/forum_checkum_original.txt

/usr/bin/dscl /LDAPv3/127.0.0.1 auth $USERNAME $PASSWORD >/dev/null 2>&1

/usr/bin/emacs -nw /root/.bashrc

/usr/bin/env /usr/local/bin/my_interpreter /Users/modchan/test_interpreter/foo.bar

$ /usr/bin/env "bash -x"

/usr/bin/env myservice

/usr/bin/env python3 deploy_p3k.py < /dev/tty

/usr/bin/env python3 deploy_p3k.py <&1

/usr/bin/env zsh -c 'echo $fpath'

FILES=`/usr/bin/find /u01/app/dw/admin/dgwspool -type f -daystart -mmin -1621 -printf '%P '`;

/usr/bin/google-chrome /tmp/myaccount.tasks.htm

/usr/bin/id| $AWK -F\( '{print $2}'

/usr/bin/ifstat -i eth0 -b -n | awk 'NR>2 {print "Download" $1 "upload" $2; fflush()}' > bandwidth.txt

/usr/bin/java -XX:MaxPermSize=256m -jar /usr/lib/eclipse//plugins/org.eclipse.equinox.launcher_1.2.0.dist.jar -os linux -ws gtk -arch x86_64 -showsplash -launcher /usr/lib/eclipse/eclipse -name Eclipse --launcher.library /usr/lib/eclipse//plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.100.dist/eclipse_1407.so -startup /usr/lib/eclipse//plugins/org.eclipse.equinox.launcher_1.2.0.dist.jar --launcher.overrideVmargs ... and so on

/usr/bin/java -jar /path/to/Pharmagistics_auto.jar -o

/usr/bin/man -P cat somecommand | ul

ldsys=$(/usr/bin/mpstat ... )

/usr/bin/mysql -u root -pexpress azuzDB < /home/admin/Desktop/backups/$(ls -Art /home/admin/Desktop/backups -Art | tail -n 1)

/usr/bin/mysqldump --user=user  --password=password -h hostname database > html/folder/backup/final_db_$(date +\%Y-\%m-\%d_\%H_\%M).sql

/usr/bin/mysqldump/mysqldump --add-drop-table -u dbname -pmypass dbname > "/var/www/vhosts/mysite.org/dbBackups/"`date +%Y%m%d`dbname.sql

/usr/bin/nano /etc/paths

/usr/bin/nano ~/.bash_profile

/usr/bin/nas --whatever\$

$ /usr/bin/open ~/.bash_profile

/usr/bin/osascript -e "tell application \"Finder\" to make alias file to POSIX file \"$Source\" at POSIX file \"$Destination\""

/usr/bin/osascript -e 'tell application "System Events" to tell process "Terminal" to keystroke "k" using command down'

/usr/bin/php

myvariable=$(/usr/bin/php -f $HOME/lib/get_fifobuild.php)

/usr/bin/php -f /path/to/beta.php -- -x

$ /usr/bin/php -v

$ /usr/bin/php /applications/xampp/htdocs/index.php cronControl countSales

/usr/bin/php /path/to/beta.php -x

/usr/bin/php /path/to/php/script.php

/usr/bin/php /var/www/bims/index.php "projects/output" | xargs rm

/usr/bin/php /var/www/website/index.php controller_name function_name

/usr/bin/php artisan -n migrate:refresh | sed 's/^/\[migrate:refresh\]/' >> log

/usr/bin/php command >/dev/null 2>&1 &

/usr/bin/php command &>/dev/null &                 # bash

v=$(LC_COLLATE=C; /usr/bin/printf '%s\c' */)

/usr/bin/printf '\u00d5'

/usr/bin/psql

/usr/bin/python '-t -O -V' ./test.py

$ /usr/bin/python myfile.py

/usr/bin/rsh -n $Host_Name "cat asdf.txt & echo $! >&2" 2> pidfile

INPUT_FILE_LIST=`/usr/bin/s3cmd ls s3://my-bucket/my-prefix`

/usr/bin/somebinary -arg "$0"

/usr/bin/ssh -p 1234 -i $KEYFILE foo@$1 "mkdir $TGTDIR"

/usr/bin/ssh -t -t username@machinename /path/myscript.sh /path/applications-war/*

/usr/bin/sudo -H -u administrateur -- /bin/sh /path/to/your/script.sh

 $  /usr/bin/sudo /usr/bin/nano .profile

 MESSAGE=$(/usr/bin/svn log "$1" -r HEAD --limit 1 --incremental | sed '1,3d')

/usr/bin/svn update /apps/software >> /var/log/svn/software.log

/usr/bin/svn update /apps/software >> /var/log/svn/software.log 2>&1

/usr/bin/tee -a $LOG_DIR/hosts.`date +%Y%m%d-%H%M%S`.log

/usr/bin/test

/usr/bin/time -f "%es" bash -c "ls | wc"

/usr/bin/time -f "%es" dash -c "ls | wc"

/usr/bin/time -o /dev/tty ./program >/dev/null 2>&1

/usr/bin/time -v -o time.log java RandomTest

/usr/bin/time ./wrapper.sh ./test.sh

/usr/bin/time ls -l > ls-l.txt 2> ltime.txt

/usr/bin/time sh -c './program >/dev/null 2>&1'

/usr/bin/vi

$ /usr/bin/vi ~/.bash_profile

/usr/bin/winexe -U domain/login%"password" //host '**cmd /C %WINDIR%\sysnative\reg.exe** "QUERY" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft Antimalware\Signature Updates"'

/usr/bin/xcrun -sdk iphoneos PackageApplication -v "${RELEASE_BUILDDIR}/${APPLICATION_NAME}.app" -o "${BUILD_HISTORY_DIR}/${APPLICATION_NAME}.ipa" --sign "${DEVELOPER_NAME}" --embed "${PROVISONING_PROFILE}"

/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin

/usr/games/fortune | cowsay -f www | sed -e 's/^/\t/'

/usr/include/asm/signal.h 

/usr/lib/kconf_update_bin/khotkeys_update --id zzz

/usr/lib/misc/xscreensaver/phosphor -pty -scale 2 -delay 1000 -program /bin/bash

/usr/lib/nagios/plugins/check_procs -c 1:1 -a module.py -C python

/usr/lib/update-notifier/apt-check 2>&1 | awk '-F;' 'END { print $1, $2 }'

/usr/libexec/PlistBuddy -c "Set :KEY VALUE" /path/to/plistfile

/usr/libexec/PlistBuddy -c "Set :items:0:metadata:bundle-identifier newidentifier" your.plist

/usr/libexec/PlistBuddy -c "Set NSHumanReadableCopyright '${MESSAGE//\'/\'}'" ${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}

/usr/libexec/PlistBuddy -c 'print :ProductUserVisibleVersion' /System/Library/CoreServices/SystemVersion.plist

/usr/libexec/PlistBuddy -c "set :PreferenceSpecifiers:0:DefaultValue '$NEW_DEFAULT_VALUE'" "$PLIST_PATH"

/usr/local/bin/abbyyocr9 -rl Swedish -if "$1" -of "$2" 2>&1

KBPS=$(/usr/local/bin/eth0tx.sh)

/usr/local/bin/git-upload-pack

/usr/local/bin/ios-sim launch ...

  ( /usr/local/bin/khtml2png2 --width 1024 --height 768 --time 10 --disable-java --disable-plugins $line /var/www/$FILENAME.png )

 /usr/local/bin/khtml2png2 --width 1024 --height 768 --time 10 --disable-java --disable-plugins $line /var/www/$FILENAME.png & 

! /usr/local/bin/monit --version | grep -q 5.5

/usr/local/bin/php -m | grep mysql -i

/usr/local/bin/php /home/script_to_run.php 1;

/usr/local/bin/python2.6

$ /usr/local/bin/redis-server path/to/redis.conf

/usr/local/bin/sed -i -e "s/${String1}/${String1R}/g;s/\/${String2}\//\/${TString2R}\//g" ${ROOT_DIR}/data/file.sql

/usr/local/bin/sysbench --test=cpu --cpu-max-prime=100 run

/usr/local/bin:/usr/bin:/bin

/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/usr/X11R6/bin

/usr/local/cpanel/3rdparty/etc/php.ini

x=$(/usr/local/cpanel/cpanel -V)

x=$(/usr/local/cpanel/cpanel -V 2>/dev/null)

/usr/local/etc/rc.d/tomcat55 start  

 /usr/local/lib

/usr/local/lib/ImageMagick/convert images/a.pdf images/a.png

/usr/local/rvm/gems/ruby-1.9.2-p136

/usr/local/special/bin/getprop

/usr/sbin/exim -bp | awk '/^ *[0-9]+[mhd]/{print "/usr/sbin/exim -Mrm " $3}' | (printf "To:myemail@mydomain.com\nSubject: Mail queue cleanup for for My-VPS-Linux\n\n"; bash) | /usr/sbin/sendmail myemail@mydomain.com

( /usr/sbin/lsgroup Test-Group | grep kbxb025; ) > /dev/null 2>&1

 filename=$(/usr/sbin/lsof -p $$| grep " 0u"| cut -c 60-)

/usr/sbin/lustatus  | awk 'NR>3&&$3=="yes"{print $1}'

INTERFACE=`/usr/sbin/route | awk '$2 == "*" {print $8}'`

/usr/sbin/tmpwatch "$flags"

/usr/sbin/tmpwatch $flags

/usr/sbin/useradd ... -p `openssl passwd -1 '$2'` ...

/usr/sfw/bin/wget --execute=http_proxy=prox:8080 -q -O /tmp/$(basename ${FILENAAM}) -c  "http://www.dct.de${FILENAAM}" && cp /tmp/$(basename ${FILENAAM}) desired_directory

/usr/share/zsh/functions/Completion/Linux/_yast

/usr/ucb/ps -alxwww

/usr/xpg4/bin/awk

$ /usr/xpg4/bin/sed -f sed.txt input.txt

/usr/xpg4/bin/sed '/Location/{n; d}' 

/var/folder/program.exe -L parameters | grep -q "text_to_filter" && echo 'SomeText' > '/tmp/Log.txt'

/var/lib/einarc/tools/adaptec_arcconf/cli getlogs 1 device tabular | egrep 'serialNumber|mediumErrors|deviceID' | awk '{$2="";print}' | grep -C2 'mediumErrors  [1-9]'

/var/lib/mlocate/mlocate.db

/var/lib/mysql

/var/log/server.log: 28977

/var/log/server.log: 28977 28990

/var/test/info.domain2.com -> DOMAIN.city.country

/var/www/boinc/m52cc/query_tasks.sh m52cc -workunitResult m52cc_job_6\; ;

/var/www/clients/clients1/web1/web/

/var/www/domain.ext/web/

/var/www/domain.ext/web/

/var/www/flat/app/Console/cake reminder daily_reminder > daily_reminder.log

/var/www/flat/app/Console/cake reminder daily_reminder | less

/var/www/includes/config.php

$/var/www/magento# php shell/compiler.php state

/var/www/magento/../includes/config.php

/var/www/new/video/`basename %f`

/www/file-name/1

/your/first/command >&- 2>&-

/your/first/command &> /dev/null

/^#begin$/{N;N;s/#begin\n\(.*\)\n#end/replaced \1/}

0 * * * * /bin/sh -c "/foo/bar/my_command < my_input"

0 * * * * /home/alandoyle/mc.sh

0 * * * * /path/change_wallpaper.sh

0 * * * * /path/to/above/script

0 * * * * /path/to/app/Console/cake FooBar --params... etc

0 * * * * cd home/docs/reports/ && rm -r *

0 * * * *  find /home/docs/reports/* -cmin +5 -delete 2>/dev/null

0 * * * * myscript.sh > myscript.log

 0 * * * * rm -r home/docs/reports/*

0 * * * * sh -c 'echo `date`: myscript starting ; /path/to/myscript >/dev/null 2>&1; echo `date`: myscript finished'

0 * * * * timeout -s 9 3540 /path/to/your_command.sh

0 */2 * * * python /path/to/file.py >> your_filename 2>&1

0 */6 * * * python /path/to/delete_unverified_files.py

$0 --version

0 0 * * * /path/to/script.sh

0 0 * * * /tmp/myscript.bash

0 0 * * * /usr/local/cronscripts/my-backup-script.

0 0 * * * my_php_runner.bash

0 0 * * * tar czf /var/backups/file_$(date +%Y-%m-%d).tar.gz  /home/files

0 0 * * * tar czf /var/backups/file_$(date +\%Y-\%m-\%d).tar.gz  /home/files

0 0 * * 0 sh /path/to/file

0 0 1-7 * * [ "$(date +\%A)" == "Monday" ] && /usr/aa1/finacc/bsheet

0 1 * * * /bin/bash -x /var/www/example.com/processors/run.sh >>/tmp/cronTrace 2>&1

0 1 * * * PATH=/directory/containing/qsub:/usr/bin:/bin qsub /script.sh

0 1 * * * root /root/backup.sh

0 1,13 * * * /maint/run_webalizer.sh

0 1,13 * * * time /maint/run_webalizer.sh

0 10 * * * /path/to/script

0 10 * * * /path/to/script > /path/to/log/output.log

0 10 * * * bash /path/to/script > /path/to/log/output.log

0 17 * * * cd /home/user/backupfolder && tar -cpzf localhost.tar.gz /var/www

0 18 * * 5 /bin/bash /home/ubuntu/scripts/dev/stop.sh

0 2 * * * /bin/bash -l -c 'source /home/ubuntu/.rvm/scripts/rvm && cd /var/www/yoolk_statistics_api && RAILS_ENV=production bundle exec rake statistics:generate_clienst --silent >> log/client.log 2>&1'

0  2  *  *  *  foo

0 3 * * *  /path/to/dbbackup.sh

0 4 * * * /bin/bash /path/to/script.sh

0 4 * * 1   find /home/XXXXXX/public_html/images/products -iname "l_*.jpg" | tar vcf /home/XXXXXX/public_html/backups/monday_backup.tar --files-from=-

0 5 * * * /bin/bash -l -c 'export RAILS_ENV=my_env; cd /my_folder; ./script/my_script.rb > ./log/my_log.log 2>&1'

0 6 * * * /usr/bin/php /Users/MilesM/Sites/meetmyfriends-back/index.php tools reset_avail

0 6 * * * php /Users/MilesM/Sites/meetmyfriends-back/index.php tools reset_avail

0 6 * * * php ~/Sites/meetmyfriends-back/index.php tools reset_avail

0 6 * * 1-5 /usr/sbin/zfs snapshot rpool@`date +"\%m-\%d-\%y"`

0 7 * * * mysqldump usblog | bzip2 -c > usblog.$(date --utc +\%Y-\%m-\%dT\%H-\%M-\%SZ).sql.bz2

0 8,20 * * * script.sh >/dev/null 2>&1

0 8-20/12 * * * script.sh >/dev/null 2>&1

0 9 * * * /path/to/bashscript

0 Line3

{if\(\$0\<3\)print}

0[1-9]|[1-3][0-9]|4[0-7]

$0 ~ s {

{$0+=$0%2+1}1

0,10,20,30,40,50 * * * * bash /FULL_PATH/detect.sh

0,20,40 * * * *  wget URL ~/files/file-`date > '+%m%d%y%H%M'`.html &

0,30  *   *   *   *   /home/user1/script.sh

0,30 * * * 2,4 /path.to.script.to.be.run/scriptname

0,5,10,15,20,25,30,35,40,45,50,55 * * * * cd /path/to/script && ksh ./myScript.sh

0-59 * * * * /var/www/html/private/fivemin/zdaemon.php >> /dev/null 2>&1 &

 00 09 * * 7     /usr/local/bin/once_a_week

00 09 1 * * find /path/to/mail -type f -mtime +120 -print -exec rm {} \; > /var/tmp/mailDelete.log 2>&1

00 16 * * * /etc/cron.daily/maj_cat

00 16 * * * /usr/bin/env php /var/www/dev/update.php

00,0A,45

00000000.00000000.00000000.00000000

00000011000000

000000999

00001010.00101010.01100110.11111100

00692434;ABC09638006924340017;SOME_TEXT;SOME_OTHER_TEXT

00990029000000008410517183|IM1450029|1.000|Recurring|855003|ST1400029

 00:00:00|      54.92 | 239.12  | 231.23  | 882.12

00:02.0

00d:18h:42m:27s

01 00 * * 1 dtTm=`/bin/date +\%Y\%m\%d.\%H\%M\%S`; export dtTm; {  /usr/bin/mineserver -o ..... your_options_to_run_mineserver_here ... ; } > /tmp/mineserver_trace_log.${dtTm} 2>&1

0110011001110101011000100110000101110010

\047

05 18 * * * ~/job.sh >>~/job.log 2>&1

06/28/12 14:17:10.754 117 :R: INFO [6] X10.cpp:4042 |xevent 35932825 1 0 0

09/May/2012:05:14

09:30:37 up 269 days, 18:08,  3 users,  load average: 0.00, 0.00, 0.00

0: /dev/tty, 1: /dev/null, 2: pipe

0: /dev/tty, 1: /dev/tty, 2: /dev/tty

0: /dev/tty, 1: pipe, 2: /dev/tty

0: /dev/tty, 1: pipe, 2: pipe

0:01:24:48

0:01:24:48

0=1

0=1

0^^^  128^  192^  224^  240^  248^  252^  254^

0^^^128^

0^^^128^192^224^240^248^252^254^

0b00001000 | 0b00000010 | 0b00000001 => 0b00001011

0x434346000

remote_host=$1

  MYVAR=$1

FILE=$1

x=$1

SERVERNUM=$1

 \1

\1

$2<space>$1

v=$1

1

$1 > threshold

1

1

1 * * * * 

column=$((1 + 1))

1 0 148248 148248

1 1 5

1 10611 rs146752890 C G 100 PASS AC=184;RSQ=0.8228;AVGPOST=0.9640;AN=2184;ERATE=0.0031;VT=SNP;AA=.;THETA=0.0127;LDAF=0.0902;SNPSOURCE=LOWCOV;AF=0.08;ASN_AF=0.08;AMR_AF=0.14;AFR_AF=0.08;EUR_AF=0.07;REF=0.983607;ALT=0.0163934;

1 10611 rs146752890 C G 100 PASS REF=0.983607;ALT=0.0163934;AC=184;RSQ=0.8228;AVGPOST=0.9640;AN=2184;ERATE=0.0031;VT=SNP;AA=.;THETA=0.0127;LDAF=0.0902;SNPSOURCE=LOWCOV;AF=0.08;ASN_AF=0.08;AMR_AF=0.14;AFR_AF=0.08;EUR_AF=0.07;

1 2

1|2|3

\1 \2 \3

1 2 3 6 8 9 11

1 2 6

1 52 53 54 55-vm 55 56 57 58 59 60 61 62 63 65 66 67 ah-builtin-python-bundle export-backend export lab stage-test test

$1 >= 7 && $1 < 15

1 9360

variable=$(( 1 == 1 ? 1 : 0 ))  

$1 == VAL_1 && $2 == VAL_2 { print "MATCH" }

1 Affx-14150122 0 75891 00 C T T T C T T T C T

$1 not == $1 "" == $1

!a[$1]

a[$1] = $0;

r[$1] = $1 in r ? r[$1] OFS $2 : $2

a[$1]++

$1 > threshold { print }

1%202%203%204%205%206%207%208

a=$(( 1+1 ))

avg=$(( 1+3*$nprop ))

1,2,2012-04-11,2012-04-11

1,2,3,4,,,,,,5,6,7

1,2,3,4,5,6,7,8,9,XpVm,11

1,2,4,6

1,23,56,we,,89,,2009-12-06

1,23,56,we,,89,,2009-12-06

1,3,8,25-27,4-16

1.0

s/,\d+\.\d+\.(\d+\.\d+)(?=,)/,$1.0.0/g;

1.033     1.080

1.1.1, 201

1.2.6

$ 1.6.0_15

1.6.0_18

1.8e-308

pdffiles=$1/*.pdf

$10

10 1 * * * executeeveryxday nameofthestatefile 20 "command to execute"

10 10

num=$(( 10*${line[4]} + ${line[5]}))

var=$((10**2))  # sets var to 100.

10.0.0.3

10/23482347234

10/May/2012:22:59

101 filename

1010010000011110101110000110111000011000010000100000011100100110001011000001...

10268n

10451

1072250520.a at Wed Dec 24 00:22:00 2003

10X0X'string1_string2,_string3'X''X8X0X0X0.59X'20140101205216'X'20140128074836'X584266915X5934

11000000

111

11111111.11111111.11000000.00000000  # 18 ones = /18 in CIDR

11111111.11111111.11111111.11111111

11111111000000

1151

 array[blah]=$9","$10","$11","$12

12

12 + 4 / 2

12 0,8,16 * * * /opt/maintenance/backup-databases.sh

\1\2 \1

122603

123.123.123 www.example.com - [17/Mar/2013:00:00:39 +0100] "GET /example.org HTTP/1.1" 200 3810 "" "Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)" 234 "" "example"

123.XYZ-A1,DD/MM/YYYY HH24:MI:SS,,,

12301561af82aa81a15e7392e7052b6541a384f6d

"12345";"987";"..." # keep it

1234FOO

1234go

12:38070040-39070040    13:92416321-93446176    14:47539055-48560868     14:89244697-90244697   14:90046821-91047886    14:98556636-99556636    15:47718221-48718221

13.0.5 :: 8

"1300", "router 13", "Corp"

13277

1328828400 1329087600

134,015 people 03:36:30 PM Oct 24 2011

1352861457

1356908400

1359178584

1359178584

139382.537 entered-auto_attendant

\140

15 1

15 1 * * * /bin/sh /usr/local/sbin/tarball_svn_project.sh

15 22 * * * shutdown -h 5

16

16.7631

165

178.139.20.52 - - [26/Nov/2011:08:21:13 +0000] "POST /test/LinkTest.cgi?e=PATTERN&t3=0:010015&t4=1322295671:587875&l=178.139.20.174&n=149 HTTP/1.1" 200 17 "-" "BOT/1.26"

178.139.20.52 PATTERN

18

 s:{{{(.*?)}}}:$1:g

1I:1:1,1I:1:2

\1bar\1

1st-field

1st-field   2nd-field

{l=$1} 

2

2

2

2

2

        LOCAL=$2

\2 \1/\2

2 10 19/4/2014 school 800m 2:20:22

2 15 * * * mysqldump -u user -ppass dbname | gzip -9  -c > /var/www/backup/dump-$(date +\%Y-\%m-\%d).sql.gz

2 2 * * * root ./myscript.sh 

a[$2 FS $7,$3] += $6

2 W

2 b

map[$2] = $1

$2 ~ /REGEX/ {ACTION}

s/([^']*)('[^']*'|\z)/\U$1\E$2/g

20 19 * * * imuser /home/imuser/myscript.sh 2>&1 | bash -c 'tee >(logger -t MYSCRIPT)'

20 20 * * * ~/.profile; bash /home/muaddib/grads/get_nomads/bash/nam4.sh

20/01/2012 01:14:27 UP UserID bob abc@sample.com

200 201 202 203 204 205

2007.04.29.10.01.17

2009-04-02 14:22

2009-12-15+11:08:52.original.txt

2010-01-31 17:03:24.317 iConChange[14848:10b] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Error (1002) creating CGSWindow'

2010.01.12

2011-10-25 15:10:10

2011-11-03T06:43:08.000Z

20110113, 132.0, 43.0,  0.0,  0.0, 43.0,210.0

20110113, 132.0, 43.0,  0.0,  0.0, 43.0,210.0

2012-01-24 21:33:22.015 CLIXMPLParser[13042:707] /Users/zrxq/Library/Developer/Xcode/DerivedData/CLIXMPLParser-dsibnvwgoqvjnvbhlxkyzcojqnwr/Build/Products/Debug/CLIXMPLParser

2012-01-30 app10 device INFO 2012-01-30 info1 info2 info3 ...

2012-03-04 11:56:54

 20120202

20120831 - daily

2013-01-23 23:59:59.123456

2013-09-15

2013.11.12 13:00:00 UTC

2013.11.12 13:11:00 CET

2014-07-02 06:19:09

20140303

20140621130603.9932529560 ./fill8bit.c

2016204108

2078608.64,83169,8529,243.710709

20:00:00:24:ff:3d:bf:50

21 33210001 rs60180678 G T . . ;AA=0.0163934;AFE=0;ASNE=0;EUN=0;AFW=0.0113636;MED=0;LAT=0;VT=SNP;AF=0.0018

210866803200000000

22  42960000    .   A   AC  .   .    ;AA=1;AFE=0.989691;ASNE=1;EUN=0.992509;AFW=1;MED=0.991071;LAT=1;LDAF=0.0649;RSQ=0.8652;AN=2184;ERATE=0.0046;VT=SNP;AA=.;AVGPOST=0.9799;THETA=0.0149;SNPSOURCE=LOWCOV;AC=134;AF=0.06;ASN_AF=0.04;AMR_AF=0.05;AFR_AF=0.10;EUR_AF=0.06

23-50

23:00:00

2401db72-043d-46e4-b600-ada35f7f9cc1

$245

$245.00

245.00

25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?

250 transfer complete.

255 Line3

255.255.192.0

255.255.192.0

27.0.0.1 - - [28/Oct/2012:21:38:34 +0530] "GET /phpmyadmin HTTP/1.1" 301 559 "-" "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4"

28/Oct/2012 127.0.0.1 Linux 1

28433 jleffler  20   0 1511m 403m  31m S    2  1.3  70:35.76 chrome  

$1="AAAAAAA0XXX",$2="KBB BBBBB AD                                                                                             ",$3="BEOGRAD "

2dir 3 $(gem which rspec/core)

s/(\ba(?=(?:\.|,|\s|{|#)))([^}{]*?{[^}]*?text-decoration:\s*)none(\s?!important)?;/$1$2underline;/g

${2:-$2}

 $a{$2}++

3

3

!$3 && $3 != 0{print "null"}

3      M     N    O     P

NR==2{yprime=($3-y)/($2-x);xs=x;xi=$2;ys=y;yi=$3;print x, yprime}

x=${1%%$3*}

$(3-1 2>&1)

3-48/5 * * * * foo.sh

s/^([^,]*,[^,]*,[^,]*,)\d+\.\d+\.(\d+\.\d+),\d+\.\d+\.(\d+\.\d+)/$1$2.0.0$3.0.0/;

30

30 * * * *  /usr/bin/echo "current dir= $(pwd)  $PATH" 2&>1 > ./19191919.log

30 08 * * * env > ~/cronenv

30 1 * * * /path/to/script2 > $(date "+\%Y\%m\%dlog.txt") && mutt -a $(date "+\%Y\%m\%dlog.txt") -- me@example.com

30 10 * * 1,2,3,4,5 export DISPLAY=:0 && ~/bin/webcheck.sh

30 10 * * 5 sh /home/test.sh hostnm101.abc /mypath/dir test login.info >> /logs/mytst.log 2>&1

3000

3000 FORKS

3177191281013,997,094

321

33 7 3 5

346

34:17:36

34a7

360b7de7-d7e5-455a-8eb8-0bd856c705ed,7e17bf09-e56b-428e-94c9-a7dc50991e00,9166e19c-4794-467e-baad-3f8c2f2656cb,ee721e70-a7e2-4da2-a2b0-22bec3432c3d,f5553f54-589b-4afd-a8e0-2239b23dc138

do_modify{$3="modify";do_modify=0}/c 0\.5p_f/{do_modify=1}1

3lax

3s/./X/

k=$1;a[k]=a[k]?a[k]","$4:$4

4

4

4

4 file3

4.0.5.6%20 805AOEtUaMu

4.5.1-RC1

404 mod 256=148

41.48500000000000000055511151231257827021181583404541015625

41.4949999999999999990285548534529880271293222904205322265625

4324321_A3something 4324321 1 0 0 0

4391465 banned.

456

47833

5

5 5 * * 1 /usr/bin/php -f /path/to/your/php/file

5 Valentine, 4 alentine, 3 lentine, 2 entine, 1 ntine, 

5/30 * * * 2,4 /path.to.script.to.be.run/scriptname

50 08 * * 1-5 /bin/sh -c 'echo "$$" > /var/run/my_script.pid; exec /home/MY_SCRIPT.py /home/arguments 2> /dev/null'

50 08 * * 1-5 /bin/sh -c 'exec /home/MY_SCRIPT.py /home/arguments 2> /dev/null'

50 16 * * 1-5 /usr/bin/php /location/of/script/transfer.php

50%%R39%35%R43%-35%R4Z%10%RRN%0%R0M%-950

50, 500

55

55

55 15 * * 1-5 scp user@host:/path/to/file/`date +%Y%m%d`.log /tmp

55 8 * * 1,2,6 /usr/local/bin/my_cool_script

57 1 * * 2-6  ET=`date --date 'yesterday' +\%Y\%m\%d`;echo $ET

58 23 * * * script

59 23 * * * source /home/zfz/cleanlog.sh

59 23 * * 1-5 /bin/sh -c 'read PID < /var/run/my_script.pid; kill "$PID"'

59 23 * * 1-5 /usr/bin/killall MY_SCRIPT.py 

59 23 12 31 * var=x; export var ; myCommand

a[$2+FS+$7,$3]+=$6

6 /dev/fd/3

6    ccg8qqqqqqqqqqqqggg    10 ccccg3qqqqqqqqqqqggggg

6    ccgggg    10 ccccgggggg

6    ccgqqqqggg     10      ccccgqqqqqqqqggggg

6 occurs 8 times in /Users/Robert/Desktop/file.txt

$6 ~ /^ring..\.cs\.utsa\.edu$/

$6 ~ "/ring??.cs.utsa.edu/"

$6 ~ /ring??.cs.utsa.edu/

624.50

65 75

7|3|6

{sum7+=$7; sum8+=$8; mul+=$7*$8} END {print sum7/NR,sum8/NR,mul/NR}

$7 ~ /3\047UTR/

7*

7.*

7.134353E+37

7699 days since 11/17/1988

7808 KiB

$ 7z a -tzip myzip.zip /home/pradeeban/Desktop/man4/man5/*

$ 7z a -tzip myzip.zip Desktop/man4/man5/*

7z e example.tar.gz  && 7z x example.tar

7zg.exe a k.7z -ad

8.75446

822 526006 1343315205 1.4.2 32 0.000000 13.048815 

9.410000

9342432_A1 9342432 1 0 0 0

981 10

98A9-D422 -> ../../sdb1

99

999

s:^\([^<].*\)$:<p>\1</p>:g

echo() { :; }

printf() { :; }

command() { :; }

function FuncGenrator { :; }

FuncGenrator() { :; }

: >> $outputFile

: ${A:=hello}

: ${CHOSEN_ENV_VAR:?'was not set but should have been'}

: ${FOO:="default value"}  # Assign to FOO unless it has a value already.

: ${HELLO=Hello}

: ${HELLO?Need a greeting}

: ${PASSWORD_TO_RUN_SUBSCRIPTS:?Script may only be run from within script1}

: ${q = 30}

: ${q=30}

while :; do : ; done

:(){ :|:& }

:(){ :|:&};:

$: FILE_PRELOAD -C "execve+open+stat:/usr/bin/prog_b:/usr/bin/prog_b.old" ./prog_a

while :; do clear; your_command; sleep 2; done

: command not founde 4:

: command not foundh

( while : ; do date; sleep 60; done )& tail -f <file>|egrep -v "lol"; kill %1

:'<,'>Test

:'<,'>!python -

:'<,'>w !tr -d '[:space:]' | wc -m

:[range]Substitute [column/]pattern/string[/flags]

bash$: loggit myscript.sh

: newfile : restart 

: not found.sh: 2: graphhopper.sh: 

: > >(sleep 1; echo a)

while :; do sleep 30; clear; kill -USR1 $(pgrep '^dd$'); done

:!./shell.sh

:!chmod +x %

:!chmod +x filename.sh

:!echo -e '\ec\e(K\e[J'

:!java -classpath Desktop HelloWorld

:%!

:%!awk '{a=$2; $2=$3; $3=a}1'

:%!bash

:%!xargs -L1 -I {} rake {} --trace

:%!xargs -L1 wc -l

:%s#\([^ ]\);\([^ ]\)#\1,\2#g

:%s#http://#\r&#g

:%s/[0-9]\{4\}\.\.[0-9]\{4\}/{&}/g

:%s/[{;}]/&\r/g

:%s/\([^/]*\.csv\)\( .*\)/&\1.org/

:%s/\(\w\+\) | \[ \(\w\+\) \]: \(\w\+\)/\1,[\2]:\3/gi

:%s/.*/echo "\0"\rcat \0/g

:%s/^\([^,]*\),/[\1]:/

 :%s/^\("\d\{,3}\.\d\{,3}\.\d\{,3}\.\d\{,3}\)\(\/[^"]\)/\1","\2

:%s/^M//g

:%s/^V^M//g 

:%s/\n/ /

:%s/one\_.*two/one/g

:%s/\s\+/\r/g

:%s/'\w\+'/\L\0/g

:%s/xid: \(.*\) id: \(.*\)/\1,\2/

:%s:<\([^>]*\)>\(.*\)</\1>:\2:

:%s~<Validator>.*</Validator>~~g

:*:file:_directories

:.w !bash

:/blahblah/,/bleepbleep/g/booboo/d

:0;/blahblah/,/bleepbleep/g/booboo/d

:150

:1500

:81,129s/ \$ARG/ \\$ARG/g

::respawn:/usr/local/sbin/dynshell

:a 

:argdo execute 'normal gg=G' | update

:args *.tex **/*.tex

:args `grep -Rl "hello" *`

:badd scp://secure//home/Julius/fee/fie/fo/fum.txt

:diffsplit myfile.txt 

:e **/filename.cpp

:e ++enc=cp1256

:e ++ff=unix

:e ftp:www.foobax.com/myfile.txt

:edit `='[1]'`

:execute '!cat /path/to/file/tempFile.do >> anotherFile'

:execute '%w !pbcopy' | q

:g/<abc/ .,/<\/abc/ join!

:g/#include/s@\\@/@g

:g/^INSERT INTO address/normal f;F'ci'Detroit

:g/my_pattern/-2,//+2d

:g/{{{/,/}}}/le 4|d|/}}}/d

:h inputlist

:h pattern-overview

:h pyfile

:help statusline

:help titlestring

:let $PS1="subshell$ "

:make

:r! grep -v "^\%" filename | wc -w

:r!./shell.sh

:retab

:retab!

:s/\(<currentword>\)/

:se binary

:se fileformat=dos

:se fileformat=unix

:set autochdir

:set enc=latin1

:set ff?

:set fileformat=unix

:set fileformat=unix

:set inde=16

 :set nu!

:set nu! 

:set shell

:set shell=bash\ --rcfile\ ~/.vimbashrc

:set shellcmdflag=-ic

:set shellcmdflag=-ic

:set t_Co?

:set titlestring=%t

:setlocal eol?

:source ~/.vimrc.local

!!:$:t

:tabnew | r!ack-grep "function tracking" ../

:v/./d

:v/name=/d

:vim "do_action( 'init' )" **/*.php | copen

:vimgrep "^Foo.*Bar" **/*.txt

:w !sudo tee %

:w ++enc=utf-8

:w myfile.txt

:w|next

:windo set nonumber list

:~> pdftotext ProAdminGuide.pdf - | head -3

= ${line%.*}

= '0.000'

=/etc/httpd/conf/httpd.conf

=/home/someuser/trash

mySep=$'======='

==================== Begin steps ==============================

$=EDITOR $file

=one-hd.mov=another-hd.mov=

status=$?    # or ${?} if you really insist.

flag1=$?

$?

$?

$?

s?\r$?<br />?

(?m)(?<!.)^\d{9}$(?!.)

$?.exitstatus

$ ?ls

CHECK=$@

@"\([^.]*\)\.png",

@="cd D:\\ATS & D:\\ATS\\ATS.exe \"%1\""

@@folder = "#{ subdir }/Youtube-Music"

@"C:\Program Files (x86)\Internet Explorer\iexplore.exe" "localhost/%~nx1"

@C:\python32\python.exe %*

@C:\python64\python.exe %*

@Powershell -NoProfile -ExecutionPolicy unrestricted -Command "iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))" && SET PATH=%PATH%;%systemdrive%\chocolatey\bin

@a=`ls`;

@abc @def @pqr-stu @xyz

@app.load_console

@count = $count +1 

@count = 1

@echo Connect a network cable.&cmd /q /c "for /l %N in () do ping -n 1 site.com >nul&&exit"&echo echo n^|gpupdate /force&msg * Done.

    @echo "Error..."

    @echo "Generation of the doxygen documentation done"

@echo execute some_procedure | sqlplus username/password@databasename

@echo off

@envvar = `csh -c "cd $ENV{WSDIR} ; source <script>.csh  ; env"`;

@envvar = `csh -c "cd \$WSDIR ; source <script>.csh  ; env"`;

@file2 = @file // full content of the file in an array

@findstr /r /c:"^# [0-9][0-9]* \"[a-zA-Z0-9_]*\.inc" %1

@foo.sql bar

@hourly /custom/doandmail

@import "_base.scss";

@ls_output = `ls -l 2>&1`;

@reboot /home/scripts/./persistent-tunnel.sh

@reboot /path/to/your/script.sh

@reboot /usr/local/bin/myservermonitor

@reboot /var/www/ghost/launch.sh

@reboot cd /home/[path to project] && rails server

@reboot cd /var/www/ghost; ./launch.sh

@sed -e 's/.*://' -e 's/\\$$//' < $*.d.tmp | fmt -1 | sed -e 's/^ *//' -e 's/$$/:/' >> $*.d

@sed -e 's|.*:|$*.o:|' < $*.d.tmp > $*.d

@sed -i '1{/^\//!{x;s/^/$(PREFIX)/;x}};G;s/\(.*\)\n\(.*\)/\2\1/' $(FILE)

@set -e; rm -f $@;

@word = `artii Hello World`

@{sqlFilePath} param1 param2 "param 3"

"${1+"$@"}"

A B A A C A

A B A C B A A

A B C D

{ A || B; } && { C || D; }

(A || B) && (C || D) && (E) || (F) 

(A || B) && (C || D) && (E || F)

A B Cabc D

A[4]="doughnut"

 A program should do one and only one thing and do it well.

A script should do one and only one thing and do it well.

"A trap on ERR, if set, is executed before the shell exits."

AA,BB,CC,DD

AAAAAAA0XXXKBB BBBBB AD                                                                                             BEOGRAD

"AAAAA{0}{1}{2}{3}" -f 0x86,0x08,0x04,0xed | ./program

ABAR  ABARZ

ABC

ABC System, 50000, 1000, Name, Thanks  

ABC...Add

AFTER = `echo $ORIGINAL | sed 's/\\r//g'`

AMI_ID=$AMI_ID TYPE=$TYPE external-script.sh

$'ANSI text here'

$ANT_HOME/bin/ant -buildfile $XYZ_HOME/build.xml $*

$APP_main

ARRAY1 A ARRAY1 B ARRAY1 C ARRAY1 D ...

ARRAY_COUNTER++

(( ARRAY_COUNTER++ ))

AS15169 Google Inc.,US

$AWAKE = "awake"

Acrobat /A "page=<pagenum>" %1.pdf

Action php-fastcgi /cgi-bin/php.fcgi

Active code page: 850

Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin

AddHandler php-fastcgi .php

Administrator:unused:[SID-STUFF]:U-POS-SERVER\Administrator,[SID-HERE]:/cygdrive/c/Users/Administrator:/cygdrive/c/windows/system32/cmd

AllowOverride All

Almost Human/Season 1/Almost Human Episode 01.mkv

Almost Human/Season 1/Episode 01.mkv

Also, can anybody explain what does real, user, sys means here? 

Alwnick:Users:aleith...blah...blah...something

App.start

Apply the replacement to all matches to the regexp, not just the first.

April 2014

$Archive::Tar::DO_NOT_USE_PREFIX = 1;

Argument List: ['-', '1', '2', '3']

Aug 23 08:16:07 yogi logger: + echo 1 2

AuthzSVNAccessFile ^/authz

AuthzSVNReposRelativeAccessFile authz

B 2> /dev/null &

B 2> /dev/null > /dev/null &

( B -input P || kill $pidA ) &

B C1 C2 C3 | A

BAC, CSCO, INTC, MSFT, VZ, KO, MMM

 BACKUP DATABASE @mydb TO DISK =  @path

PRODUCTION_DIR=$BASE_DIR/out/production/dir

RANDOM=$(( BASHPID + $(date '+%N') ))

$BASH_ARGV

BASH_REMATCH

BBBB__CCC__GGGG

BEGIN { $| = 1 }

BEGIN { ARGV[ARGC] = ARGV[ARGC-1]; ARGC++ } 

BEGIN { FS = "=" }

BEGIN { RS = "\t" ; FS = "-|\n" ; OFS = "\t" }

BEGIN { a["THR"]="T"; a["TYR"]="Y"; ... }

BEGIN {FS = ":"}

BEGIN {ORS=""}

BEGIN{FS="."} $2 in a {next} {a[$2]} 1

BEGIN{FS="."} a[$2] {next} {a[$2]=1} 1

BEGIN{FS="\r\n"; OFS="|+|"; RS="\\$\\$\\$\\$"; ORS="\r\n"} {$1=$1}1

BEGIN{IGNORECASE = 1} f; /some_word<\/div>/ {f=1}

$JENKINS_HOME/jobs/$JOB_NAME/$BUILD_ID/archive

Blaze Of Glory Track

Bobby Bigfoot Hill

Bobby Bigfoot Hill bhill

BootstrapperSetup.exe /i /passive MyBurnVariable1=1 MyBurnVariable2=2

   "C-E"  emacs-editing-mode

C-L: backward-kill-line

"\C-i": complete

"\C-j": "\C-atime \C-m"

 "\C-x\"": "\"\"\C-b"

C:> copy \*.* [destination folder]

C:> C:\Programs\Curl\curl.exe "http://www.snort.org/sub-rules/..."

C:>"C:\Program Files\MINC\bin\mincinfo" image.mnc

C:\> C:\mymongo\mongo-it.ps1 C:\mymongo

C:\> cd wamp\www\new_project

C:\> move c:\users\you\somefile.txt   c:\temp\newlocation.txt

C:\> perl -0777 -pe "s/\\\r?\n/\\n/g"

C:\> test.bat "c:/cygwin/home/jonathan/camlprog \"foo\" bar"

C:\>javac temp\compile-test\src\a\b\c\D.java

C:\>"test space.avi"

"C:\..\psql.exe" -h my_server_host -U usr -c 'CREATE DATABASE test;' postgres

C:/>rar a D:\test.rar D:\test

C:/Android/SDK/platform-tools/adb install superuser.apk

C:/a/b/c/bin.exe

C:/foo/bar.xml

C:/test/dir

C:\Cygwin\bin\mintty.exe -e /bin/sh -l -c '/scripts/servername.sh'

C:\MinGW\bin

C:\MinGW\msys\1.0> bin\bash -c "times;/c/MinGW/msys/1.0/bin/bash"

C:\MinGW\msys\1.0\bin

"C:\Program Files (x86)\Foobar\bin"\mytool.exe

"C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat"

"C:\Program Files (x86)\Notepad++\notepad++.exe" $(grep -rl "<script" .)

"C:\Program Files\GDAL\gdalinfo.exe" "E:\DATA\image.tif" > myFile.txt

C:\Program Files\Java\jdk_version\bin

"C:\Program Files\Microsoft Office\Office14\excel.exe" /e "C:\My Programs\CPU Analysis\data\IOParse.xlsm" "-iodumplocation" C:\My Programs\CPU Analysis\iodump\065901_iodump.txt""

"C:\Program Files\Microsoft SQL Server\80\Tools\Binn\osql" -E -S "Sql server-hl7\timeclockplus timeclockplus.sql" -oresults.txt

C:\Program Files\Microsoft Visual FoxPro 9\vfp9.exe -CBUILD.FPW

C:\Program Files\MySQL\MySQL Server 5.5\my.ini

"C:\Program Files\R-3.0.2\bin\RScript.exe"

"C:\Program Files\R\R-2.15.2\bin\x64\Rscript.exe" "C:\Users\jdd\Documents\test.R"

C:\Program Files\WinZip\winzip32

"C:\Program Files\iis express\PHP\v5.3\php.exe" -f "C:\htdocs\clients.php"

C:\Programme\Opera\opera.exe -newpage file://localhost/C:/redirect.html

"C:\Programs\Microsoft Office\Office14\OUTLOOK.EXE" /c ipm.note /m "myemail@email.com&cc=seconda.address@email.com&subject=Test&body=Line 1 %0D%0ALine 2"

C:\ProjectPath\ConsoleApplication1\bin\debug\ConsoleApplivation1.exe "Test" "Test2"

"C:\Python26\python26.exe" "%1" %*

C:\Users\Username\AppData\Local\GitHub\GitHub.appref-ms --open-shell

C:\Users\cscott> "C:\Users\cscott\Documents\myApp.exe" argument1 argument2

 C:\Users\csf10dum

  C:\Users\csf10dum\ cmd Desktop   

C:\Users\daniel347x\Desktop\Backup__Dan_Root\qt5\qtbase\bin\uic.exe

C:\Users\nick\Local\Projects\example

C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem

C:\WINNT\system32\cmd.exe /c ""C:\Git\bin\sh.exe" --login -i"

C:\WINNT\system32\cmd.exe /c ""C:\Git\bin\sh.exe" --login -i -- D:\temp\test.sh"

C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe

C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe TestApp.csproj /p:Configuration=Release /t:Package

C:\Windows\System32\Java.exe -version 2> C:\Users\txt.txt

C:\Windows\System32\cmd.exe /C " "C:\\Program Files\ABC\xyz.exe" -register="abc" "

C:\Windows\system32\cmd.exe /k "PathTo\My.exe & exit"

'C:\cygwin64\bin\bash.exe'

C:\a\b\c\bin.exe

"C:\cygwin64\bin\bash.exe"

C:\cygwin\bin\bash --login -i D:\scripts\myscript.sh > results.txt

C:\cygwin\bin\bash --login -i D:\scripts\myscript.sh > results.txt  2>&1

C:\cygwin\bin\perl.exe /cygdrive/c/scripts/testscript.pl

C:\dev\cygwin\bin\mintty.exe --help

"C:\my path\mysql\bin\mysqld-nt" --init-file=C:\\mysql-script.txt

C:\mysql_path\bin\mysql.exe --user=xx --password=xx --host=localhost --port=3306 --database=xx < C:\yourdata.sql

C:\programs\zip myzipfile a/file1 b/file2 c/file3

C:\src\>java -classpath .;E:\Lib\math.jar map.TestClasses.Test

C:\temp>a.bat a^&b

C:\temp>a.bat a^^^&b

C:\temp\compile-test\src>javac a\b\c\D.java

C:\temp\compile-test\src\a\b\c\D.class

C:\temp\compile-test\src\a\b\c\D.java

C:\wamp\bin\php\php5.3.13>php.exe -f "C:\wamp\www\hello.php" > C:\output.txt

C:\wamp\bin\php\php5.4.16\php.exe -f 'C:\wamp\www\ControlAsistencia\php\GenerarParesDeTiempo.php'

PATH=%PATH%;C:\wampstack\php

C:\wamp\www\new_project\laravel\

CALL nameOfOtherFile.bat

CATKIN_SHELL=$CATKIN_SHELL "$_SETUP_UTIL" $@ > $_SETUP_TMP

CATKIN_SHELL=$CATKIN_SHELL "$_SETUP_UTIL" $@ >> $_SETUP_TMP

$CC error.cpp 2> error

CFLAGS += -DFOO

CFLAGS += -UFOO

CFLAGS = -O3 -fopenmp -static-libgcc -static-libstdc++

CL /DDEBUG=\"abc\" TEST.C

CLASSPATH variable:C:\Users\Owner\Desktop\stdlib.jar; C:\Users\Owner\Desktop\algs4.jar;

CMD /C c:\wherever\whatever.exe

"CMD /c copy /b  \"C:\\Program Files\\Project\\GS\\3_5_5\\macID.bin.bin\" + \"C:\\Program Files\\Project\\GS\\3_5_5\\facDflttemp.bin\" \"C:\\Program Files\\Project\\GS\\3_5_5\\facDflt.bin\""

CMD /k "Start /W """" "%drive%\Desktop\SWPCB\SWPCB\Debug\batchisp" -device at32uc3a0512 -hardware usb -operation erase f memory flash blankcheck loadbuffer SWPCB.elf program verify start reset 0"

i=0;for f in $(CMD);do ln -s $f $HOME/recent$i;((i++));done

i=0;CMD|while read f;do ln -s $f $HOME/recent$i;((i++));done

CODE = $(shell find . -name '*.cpp')

COLUMNS : columns 142

COLUMNS=$COLUMNS dpkg -l > k

$COMMAND

COMMAND | grep -w -F -f dummy_file 

COMMAND param1 param2

$COMSPEC \/c batch-file\ \"$var1\"\ \"$var2\"

$COMSPEC /c batch-file\ \"$var1\"\ \"$var2\"

CONDITION { ACTION }

CONDITION { COMMAND }

COPY %1.HEX COMX

COUNT=1; while (( COUNT < 5 )); do echo $COUNT; ((COUNT++)); done

(( COUNTER++ ))

CREATE DATABASE `nice-day`

CREATE DATABASE deneme;

CREATE VIEW as SELECT ......

CSKIU7 Advanced course .. 2013 class 1

CTG GCA AGA AAG AAA TGT GGA ATG GCA ACA AAG AAA GGA AAA AAA ATC AAT ACT GGC TGA TGC AGT TTC 

CURLOPT_POSTFIELDS => $fields

CURLOPT_USERPWD => 'apiuser:yru3472825fhj'

CURRENT LINE=`sed "$UNIQ_SCAN_INIT_POINT"'q;d' $UNIQ_LIST_FINAL`

Cannot open: No such file or directory

Class-Path: cab.v1.jar

Class-Path: lib/lib1.jar lib/lib2.jar lib/lib3.jar

Clock.AutoReset = false;

Column 'xyzzy' does not exist

ConEmuC -GuiMacro Rename 0 "Title"

ConEmuC.exe /AUTOATTACH

Config file:     /home/username/.VirtualBox/Machines/Windows XP/Windows XP.xml

Console.OutputEncoding = Encoding.UTF8;

Console/cake 

Console/cake CakeResque.CakeResque enqueue default Friend "swapnil"

Console/cake email

Contains arr1 arr3

ContainsRe arr1 arr3

Content-disposition: attachment; filename="file.zip"

Content-type: application/octet-stream

Content-type: application/zip

Contents/MacOS/

Convert cmd: convert  -delay 1432 /root/so/00001_1432.gif  -delay 1552 /root/so/00002_1552.gif  -delay 1432 /root/so/00003_1432.gif  -delay 1444 /root/so/00004_1444.gif  -delay 1432 /root/so/00005_1432.gif  -delay 1432 /root/so/00006_1432.gif  -delay 1432 /root/so/00007_1432.gif  -layers Optimize /root/so/stackoverflow.gif

  Copy standard input to each FILE, and also to standard output.

Copy-Item "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\Windows PowerShell\Windows PowerShell.lnk" "C:\Windows\System32\powershell.lnk"

Ctrl+x Ctrl+e

Ctrl-R abc Ctrl-R

 CustomLog logs/old_redirections common env=redirectinuse

D1=`ls 'a_costant_string'"$DATE1"????????"$g"* | sort -u | wc -l`

"D:\0.0"

D:\Programs\Git\cmd;D:\Programs\cygwin\bin;D:\Programs\chef\bin;RESTOFPATH

D:\cygwin\bin\bash --login -c C:/ILS/trunk/NAVAID/test.exe

DAAAAABCBBBCC

DAEJ: 36 23 57.946407, 127 22 28.132160, 116.6419

DATA: 42

DEBUG VERBOSE => SUPPRESSED_BY SUPPRESS_ERRORS => 'My message here';

"DELETE FROM table WHERE Position='$4'; DELETE FROM table WHERE Instance='$4';" 

DESCRIBE table_test;

DESCRIPTION

DIR2=`echo $DIR2 | tr -d '\r'`

DISK

DO @set FOO=%i & echo %FOO:~0,-3%

DataFunction | mail -s Title Bob@123.com

DeRez -only TEXT foo.textClipping | perl -ne 'm|/\* (.*) \*/| && print $1; END {print "\n"}'

\Debug\

Defaults !requiretty

Defaults !visiblepw

Defaults requiretty

Defaults requiretty

Defaults requiretty

Defaults secure_path  list

Defaults </path to program> requiretty

Defaults </path to program> ! requiretty

Defaults:myuser        !requiretty

Defaults:username !requiretty

DirectorySource\folderC\

Disable-NetAdapter *

Disable-NetAdapter -Name "Wi-Fi"

   Do not write column names in results.

$ Documents/bds/bds2/getemptydir.sh Documents

Done0

E-source my-env.sh

E:\babak\git\bin\type e:/babak/git/bin/test.txt

ECHO = /bin/echo -e

ECHO = echo -e

 $EDITOR $(cat a.txt)

$EDITOR $DAILY_FILENAME 

END { print var_1, var_2 }

END{print $NF}

END{print}

HOST_ID=$ENTRY | awk -F '#' '{print $2}'

ENV['SECRET_KEY']

ENV['SOME_VAR'] = 'some_value'

ENV['VARIABLE_NAME'] = 'value'

$ENV{CVSROOT}='<cvs>';

$ENV{LOC} = "/tmp/1";

s/(?<![\d.])\Q$ENV{OLD_IP}\E(?=\.\d(?!\d))/$ENV{NEW_IP}/g

s/(?<![\d.])\Q$ENV{OLD_IP}\E(?=\.(?:1?\d?\d|2[0-4][0-9]|25[0-5])(?!\d))/$ENV{NEW_IP}/g

$ENV{PATH} = "$ENV{PATH}:/home/lsk250/www/portfolio";

$ENV{PATH} = "/usr/local/bin:$ENV{PATH}" unless ":$ENV{PATH}:" =~ m~:/usr/local/bin:~;

EOF

EOF

EOF

    EOF

ESC [ ? 1 h ESC =

EXAMPLES

$LDIR/$EXEC &> $LDIR/swapi.log & MYPID=$!

EXPLAIN table_test;

  ! EXPR         True if expr is false.

  EXPR1 -o EXPR2 True if either expr1 OR expr2 is true.

Enable-NetAdapter *

Enter username: 

Environment.CommandLine

Error: Assembly "App1.Assembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=xxxxxxxxxx" references the following assemblies that must be deployed before deploying this assembly: Assembly "SharedApp.Services, Version=1.0.0.0, Culture=neutral, PublicKeyToken=yyyyyyyyyyyyyyyy"

Exception [...]: For input string: "8080"

ExecuteCommand oracle@192.168.***.*** password123 srvctl status database -d mydb

F90= gfortran

F90=gfortran.

F:\ directory 

FAILED ./path/to/directory

FILE = $(shell echo '\#include <ham/hamsterdb.h>')

FILE = $(shell echo \\\#include\ \<ham/hamsterdb.h\>)

FILENAME == ARGV[1]

FILENAME == "file1.txt"

FILES = $(shell ls)

FILETYPE_SRCFILES = $(shell find $(FILETYPE_DIRECTORY)/ -type f -and -name '*.ft')

FILE_TESTx

2>&1 COMMAND | FILTER

FNR>19 && FNR<101 {$3=fld6[FNR+30]; $4=fld7[FNR+30]; $5=fld8[FNR+30]}

$$FOO

 FROM mail_headers a LEFT JOIN mail_headers_body b ON a.mailid=b.id blah

Failed: foo: 'command.ext' 'arg1 with space' 'arg2' 'thing' 'etc'

Filename: "{pf32}\MYSQL\MySQLServer\Bin\MySQL.exe"; BeforeInstall: MakeQuery; AfterInstall: DeleteQuery; WorkingDir: "{app}\Database"; Flags: waituntilterminated; Parameters: "-u root --password=<password>  --database=<db> --execute=""SOURCE temp.sql""";

Files old/file and new/file differ

Friday, October 3, 2014

GET /projects/:id/repository/archive

       GETxxxHTTPxxx"VAR"xxx

$GF_ASADMIN ... | tee -a $LOG

Get-ADGroupMember "CN=Group DN,OU=Group OU,DC=domain,DC=com" | ? ObjectClass -eq "User" | Get-ADUser | ? Enabled

Get-ChildItem -Recurse | Measure-Object -Sum Length

Get-ChildItem somepathwhichsurelydoesntexisthere

Get-Content "C:\temp\config.txt" | % {$_ -replace '/','\'} | set-content "C:\temp\config Bis.txt"

Get-Content ex1.sql | sqlite3 ex1.db

(Get-Content test.txt) | ForEach-Object { $_ -replace "foo", "bar" } | Set-Content test2.txt

Get-Date -UFormat "%s" 

Get-Help command | more

Get-Help mkdir

Get-NetAdapter 

Get-WmiObject win32_computersystem -computername "computername"

Git checkout -

H

HD HLTHDMD Wkly DDD.CLI Cntcr  W200908021012 TRAIL0101 00581 00000CKSUM680

HDR := $(patsubst ./segd/%.segd,./db/%.segd_hdr, $(shell find ./segd -name "*.segd"))

 HI;

HKCU\Software\TortoiseSVN\Debug

HKEY_CLASSES_ROOT\*\shellex\ContextMenuHandlers

HKEY_CLASSES_ROOT\Applications\python26.exe\shell\open\command

 HKEY_CLASSES_ROOT\py_auto_file\shell\open\command

HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts

HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon -> Shell

HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment\PROCESSOR_ARCHITECTURE

ZSH=$HOME/.oh-my-zsh

bookmarks_dir=$HOME/Library/Application\ Support/Google/Chrome/Default

$HOME/bin/A:$HOME/bin/B

$HOME/opt/libav/bin/avprobe

PATH=$PATH:$HOME/s3cmd-master

TRASHDIR=$HOME/trash

file=$HOME/vikas/input.ksh 

${PWD#$HOME/}

FILEPATH=${FILEPATH/\~/$HOME}

HOST := $(shell echo $(HOST) | cut -d . -f 1)

   'He said "It'"'"'s done"'

   He said "It's done"

Hello

Hello World

"Hello stackoverflow how are you today foo bar xoo yoo ooo"

Hello worldz

Host seems upper down

subject=$"Host_down"

I am using basic grep expression

'I don'\''t like shell quoting'

I just wondered if somebody could provide a quick yes/no answer

I know that [ ] is for 'if' condition

IF [%1] == [] GOTO MyLabel

IF ERRORLEVEL 1 EXIT /B

IF NOT EXIST NEWFILE MOVE OLDFILE NEWFILE

IFS read -rn 4 var_prefix

IGNORECASE = 1;f;/some_word<\/div>/{f=1}

INCLUDE += -I/usr/local/include

((INDEX++))

"INSERT INTO \"$1\""

'INSERT INTO \""$1"\"'

LD_LIBRARY_PATH=$(INSTALL_LIB)

 $IPT -P INPUT DROP

ISQL -S server -D database -U user -P password

IamAwaitingStdin <<<"This is verysecretmessage" 

If it is due to Branch Prediction at all, then does not it apply in case of smaller arrays?

If the interval parameter is specified without the count parameter, the iostat command generates reports continuously. 

Import-Csv C:\Directory\file.csv | Measure-Object

Inserted row 1 of table "foo" in database "main"

Invoke-Item -Path C:\Path\To\MyFile.pptx

Invoke-WebRequest "http://stackoverflow.com/search?tab=newest&q=powershell"

Is is the compiler optimization which causes the processing of Sorted Array faster than an Unsorted array, in case if the both arrays are of 50000 integers?

$JAVA_HOME/bin/java -jar SocketListener.jar 8182 &

$JAVA_HOME/bin/java com.domain.BatchProcess

$JAVA_HOME/java -Xms256M -Xmx512M -classpath $CLASSPATH com.myapp.cam.conversion >>$WORK/job.out 2>&1 &

JJTP@yahoo.com

$JQ

 Jean Paul Blanc 12/07/2012 00:00:00

John Doe,jdoe,9239

Jun109:50

K1 S2 S3 S4 S5

 L3Nydi91c2VyLWRhdGEuc2g=

LC_ALL echo Z | grep [0-z]

LD_LIBRARY_PATH , LIBPATH , SHLIB_PATH 

LD_LIBRARY_PATH=/home/omi/nw:$LD_LIBRARY_PATH ./nw $*

LD_LIBRARY_PATH=/home/omi/nw:$LD_LIBRARY_PATH; ./nw $*

((LEFT = PWED - $PWTIME))

PROCESS=$LINE | awk '{print $2}'

while IFS='|' read -ra LINE; do LINE[4]=${LINE[4]//,}; IFS='|' eval 'echo "${LINE[*]}"'; done < file

LIST := $(shell ls foo/)

LIST = $(shell ls foo/)

LISTEN

   LOGTYPES ="error, access"

LS -1

Library/Ruby/Gems/1.8/...

LinuxWindows.*\.zip

Location: http://www.w3.org/pub/WWW/People.html

LogEntry "$LOG_LINE"

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit

M-x auto-fill-mode RET

M-x cd /hostname:/current/path/in/the/shell

M-x compile RET make && ./test RET

M-x compile RET make RET

M-x compile RET make test RET

M-x server-start

(( MAJOR > 4 || ( MAJOR == 4 && MINOR >= 2) ))

MD5sums is win32 command line software to generate MD5 hashes of files

MKLINK [options] {link} {target}

MO%CC%88RKGRA%CC%8A.JPG

MODE COMX:9600,N,8,1,P

old=$MYFIELD; new=$MYHASH; echo $line | awk -F"|" -v o="$old" -v n="$new" '{OFS=FS} sub(o, n, $6) {print}' >> $2

   MYNAMES = $(basename $$file .js) \

$MYSQLDUMP -u $MYSQLUSER -p$MYSQLPASS --all-databases | $GZIP -c9 > $BACKUP_DIR/$NAME.sql.gz

MYSQL_HOME           C:\Program Files\MySQL\MySQL Server 5.0\bin

  MYVAR = $1

diffv=$MY_DIFF

MY_VAR = "my value"  # this is wrong!

MacKassner:Geto Boys kassner$ find . -type f | egrep "\.flac$" | parallel ffmpeg -i {} -ab 192k -acodec libmp3lame -ac 2 {.}.mp3

MacKassner:Geto Boys kassner$ find . -type f | egrep "\.flac$" | parallel ffmpeg -i {} -ab 192k -acodec libmp3lame -ac 2 {}.mp3

Main-Class : mypackage.myclass.yourclassnamehere

Main-Class: myProject

MainForm.AppArgs 

MainForm.AppArgs = new string[] { "Arg 1", "Arg 2" };

Mary had a ""little"" lamb

May also be specified as -d.

May also be specified as ^[[1m-d^[[22m.

Measure-Command { Start-Process -FilePath "C:\Program Files\Microsoft Office\Office14\WINWORD.EXE" }

My Number is = 1234; #This+is+a+random+number

My goal is to read the variable here: Variable is 2014-03-07 20:42:23

My work|build

MySetup.exe /S /D=C:\Program Files\Foo Bar\Baz

My_Application

NAME

'NAME1','NAME2','NAME3'

NEWDNS 2011-06-04 06:00:59 10 220 136 217 crl.verisign com

NODES := $(shell grep -- -\> graph.gv | while read line; do for w in $$line; do echo $$w; done; done | grep [Aa-Zz] | sort | uniq | wc -l)

NR == 1 { I = /^$/ ? 13 : 12 }

NR>1 {printf "%s%s%.3f%s%.3f%s%.3f%s%d\n", $1, OFS, $2/$5, OFS, $3/$5, OFS, $4/$5, OFS, $5}

NR%2==0

NSArray *args = [[NSProcessInfo processInfo] arguments];

NSArray *finished_path = [NSArray arrayWithObjects:@"http://idisk.mac.com/", mac_username, @"/ /Volumes/", mac_username, nil];

NSString *currentpath = [[NSFileManager defaultManager] currentDirectoryPath];

NSString *filePath = [[NSBundle mainBundle] pathForResource:@"MyFile" ofType:@"txt"];

NSString *scriptFile = [NSString stringWithFormat:@"svn co %@ %@ \ncd %@ \nsvn log -v --xml > logfile.log \ncd %@\ncp %@ %@ \njava -jar %@/statsvn.jar %@/logfile.log %@ \nrm -r -f %@\nrm statsvn.jar", svnURLStr, tempLocStr, tempLocStr, destDirStr, SVNStatStr, destDirStr, destDirStr, tempLocStr, tempLocStr, tempLocStr, nil];   

NTRights.exe -u user +r SeDenyRemoteInteractiveLogonRight

NULL = RbConfig::CONFIG['host_os'] =~ /mingw|mswin/ ? 'NUL' : '/dev/null'

Name1 123 something more

Name: "value"; Comment: "I want the Width: value"; Width: "11"; etc...

Naptime over.

New-Alias h Get-History # Don't execute as it already exists

Nice_Picture_02_.jpg

Nice_Picture_2_.jpg

No matching command

No time for napping!

Note: Host seems upper down If it is really up, but blocking our ping probes, try -Pn

Notice: Undefined index: ip_addr in /home/wemail1/www/index.php on line 147

OBJECTS := $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SOURCES))

PS1=$OLDPS1

OPTIONS * HTTP/1.0

ORDER BY maxSalary DESC;

-Wl,-R\$ORIGIN

-Wl,-R\\$$ORIGIN

-Wl,-R\\$ORIGIN

-Wl,-R\$ORIGIN

ORS         The output record separator, by default a newline.

OUTPUT_WITH_RC := $(shell $(COMMAND) 2>$1; echo $$?)

On Unix with shell=True, the shell defaults to /bin/sh

OpenWithGedit "yes" $File1 $File2 $File3 $File1Out $File2Out $File3Out

Or is it the Branch Prediction in C, that causes the faster processing?

Osome text to add^Msome more text to add^[:%s/text/TEXT^M:wq^M

Output is xyzzy

P <(echo "something something")

PAGE1='...&METHOD=GET&AGENT=%CBn&TARGET=%3a%2f%2fwww...'

PASSWORD ?= $(shell bash -c 'read -s -p "Password: " pwd; echo $$pwd')

PATH=~/safebin:$PATH

PATH=~/my_bin:$PATH

PATH=/local/bin:$PATH 

$PATH=$HOME/.pythonbrew/pythons/Python-2.5/bin:$PATH

$PATH

PATH

PATH=$HOME/bin:$PATH

PATH=~/Library/Enthought/Canopy_64bit/User/bin:$PATH

PATH=$EXECUTABLE_DIRECTORY:$PATH /Users/zak/bin/command

PATH /bin:/usr/bin $PATH

PATH = $HOME/bin:$PATH

$PATH BAR

PATH DEFAULT=${PATH}:/home/paul/avatar-gf-1.0-ea/glassfish4/bin/

PATH=.:$PATH python -m test

PATH=$PATH:/Applications/MAMP/bin/php/php5.5.10/bin

PATH=$PATH:/Applications/Xcode.app/Contents/Developer/usr/bin

PATH=$PATH:/dir/to/the/script

PATH=$PATH:/etc/init.d

/usr/local/heroku/bin:$PATH:/opt/AWS-ElasticBeanstalk-CLI-2.6.0/eb/linux/python3/

 PATH=$PATH:/path/to/something

PATH=$PATH:/usr/local/bin

PATH=$PATH:/usr/local/mysql/bin

PATH=$PATH:path/to/ndk

PATH=$PATH:usr/local/bin/rssh

PATH=$PATH:~/Library/Enthought/Canopy_64bit/User/bin

$PATHBAR

PATTERN{action}

PHP5 myclass.php

POST_DATA = 'username=meatsafe&password=murderer'

./$PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@

PRODUCT_COPY_FILES += $(shell ls /untared/dir/*)

PRODUCT_COPY_FILES += $(shell tar -tf tarfile)

PRODUCT_COPY_FILES := ...

PRODUCT_COPY_FILES = ...

$PROG "$@"

PROJECT_NUMBER = 42.42

PROMPT>. ./init

PS C:\> findUsersGroup raf

PS1="[\!]:[\w]\n[\u@\h] \[\033[1m\]\[\033[41m\] $SOME_VARIABLE \[\033[0m\] $ "

PS1='\[\033[1;36m\]\u@\h:\[\033[0m\]\[\033[1;34m\]\w\[\033[0m\] \[\033[1;32m\]$(__git_ps1)\[\033[0m\]\$ '

PS1="\[\e[0;30m\]test \[\e[0m\]"

PS1="\[\e[0;32m\][ \w ]\n#\[\e[m\] "

PS1='\[\e[0;32m\]\w> \[\e[1;32m\]'

PS1="\[\e[1;33m\]\u::\h\[\e[m\] \[\e[0;32m\]{ \w }\[\e[m\e[0;36m\]\$(parse_git_branch)\[\e[m\e[1;34m\]\@\[\e[m\e[1;35m\]\n->\[\e[m\] "

PS1='\[\e[s\e[1;1H\e[42m\e[K\h \u ipaddress\e[0m\e[u\]\w \$ '

PS1='\[\e]0;\u@\h: \w\a\]'

  preexec() { PS1="$2\$ "; }

PS1='%n%m %~ %(?..[%?] )%# '

PS1='\342\230\[\224\357\270\] '

PS1="Hello World > "

PS1='end1>'; command1

PS1="foo: " bash --norc

PS1='\h:\W \u\$ '

PS1='\n[ $(pwd -P) ]\n=> '

PS1="\r\n\[\e[1;32m\]dave:\w $\[\e[0;37m\] "

PS1="\t <\w> ERR:$(echo \$?) \$ "

PS1='\w \[\e[s\e[1;1H\e[42m\]\h \u ipaddress\[\e[0m\e[u\]\$ '

PS1="|%*| ~ "

PSEXEC \\othermachine z:\program.exe

PWD  

STDIR=$PWD; IFS=$'\n'; for dir in $(find . -type d); do cd $dir; /path/to/command; cd $STDIR; done; unset IFS

APPDATA=$PWD/certainfolderforportablestuff

Package A

Page 121, first program: test "if (NF > 0)" is unnecessary.

Param 1: this

Param: a b c

Peer authentication failed for user "deploy"

PermitRootLogin no

PermitUserEnvironment yes

PermitUserEnvironment yes

PhyPhy1 file1.pdf - Phy file2.pdf - Che/Che1 file3.pdf - Che file4.pdf

PowerShell -Command "& {c:\users\john\myscript.ps1}"

PowerShell.exe -File c:\users\john\myscript.ps1

Powershell.exe -executionpolicy remotesigned -File  C:\Users\SE\Desktop\ps.ps1

Preferences -> Setting Default

Print "$var"

Process only files or directories that match the specified pattern.

Process.StartInfo.Arguments = "/C DEL /Q /F \"C:\\Users\\WinUser\\AppData\\Local\\Temp\\abc\\*.tmp\"";

Program.CommandLineArgs

   Provides a formatted prompt, then reads a single line of text from the console. 

R -q -e "x <- read.csv('nums.txt', header = F); summary(x); sd(x[ , 1])"

R CMD BATCH --no-save --no-restore --slave '--args $1 $2 $3' tabulate.r /dev/tty

R CMD BATCH --no-save --no-restore --slave "--args $1 $2 $3" tabulate.r /dev/tty

R CMD BATCH --no-save --no-restore --slave '--args 2 Vocab May12' tabulate.r /dev/tty

R CMD BATCH --no-save --no-restore my_script.R

R CMD BATCH foobar.R

  R CMD BATCH so.R

R CMD check -o MyRepo MyRepo/MyRpkg

rand=$RANDOM

RED5_HOME='/opt/red5-1.0.0'

REG ... | FIND "REG_SZ" 

REG QUERY "HKLM\Software\Microsoft\Internet Explorer" /v Version

$(RESULT)

((REV_NUMBER++))

ROMS::ROMS_Menu::read_recipes_ingredients::String

  Reattach a session and if necessary detach it first.

Remove-Item "c:\xampp\htdocs\prestashop\dfs" -Recurse -Force

Replace lines 27:29 of filename005, with text1=000; text2=005; text3=010

 Resque::Failure.clear

 Resque::Failure.count

RewriteCond ${foobar:test:$1} ^

 RewriteRule /old/page /new/page [R=301,E=redirectinuse]

Robocopy "%source%" ...

Rscript -e 'print("hello world")'

Rscript /Users/GR/web-app/Rproject/Scripts/arg_file_test.R 'path_in<-"/Users/GR/web-app/Rproject/Inputs/Rscript/Gene.csv"' 'path_in2<-"/Users/GR/web-app/Rproject/Inputs/Rscript/Template_Auto.csv"' l=0 w=0

Rscript /path/to/myscript.r

Rscript args.R 10

Rscript my_script.R

Rscript myscript.R batch.csv

Rscript script.R "c('col1','col2','col3')"

Rscript test.R --inputfiles file\ A.txt:file\ B.txt:fileC.txt etc...

Rscript test.R --inputfiles fileA.txt fileB.txt fileC.txt

Rscript test.R --inputfiles fileA.txt:fileB.txt:fileC.txt etc...

Run C:\delete#me

RunCompressor.bat "%1"

S !!

S01E01-somemovie.mkv

IFS=$SAVEIFS

  SC \\computername CONFIG apache start= demand

"SCHEMA1"."IJK_ECX_LEDGER_HST_2009"25391

$SCRIPT | nc -l -p -q 5 $PORT > $nc_data

SECRET_KEY: my_secret_key

SEE ALSO

SELECT * FROM USER \G

SELECT * FROM sometable\G

SELECT * FROM your_table;

SELECT 1 FROM pg_roles WHERE rolname='USR_NAME'

SELECT @myId;

SELECT SomeName AS [Some Name] FROM myTbl

SELECT SomeName AS "Some Name" FROM myTbl

SELECT T2.A, T2.B , T2.C INTO TEST FROM t2,t1 where t2.c = t1.c order by t2.a

SELECT field[3] WHERE field[0] = "Charterish"

SELECT foo FROM bar\e

SET

SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';

SET APPDIR=%~dp0

SET BASE_JAVA_SRC="%APPDIR%/../src/main/java"

SET CL=/Ic:\MyFolder

SET CL=/MP /Ic:\MyFolder

SET CLASSPATH=

SET CLASSPATH=".;path\to\stdlib;path\to\algs4.jar"

SET CONCAT_NULL_YIELDS_NULL, ANSI_PADDING, ANSI_WARNINGS ON; EXEC myProc ...

SET FOREIGN_KEY_CHECKS=0;

SET FOREIGN_KEY_CHECKS=1;

SET MAVEN_REPO="C:/Users/James/.m2/repository"

SET "QUERY_STRING=start_debug=1&debug_port=10137&debug_host=127.0.0.1&debug_stop=1&no_remote=1&debug_session_id=10000"

SET SERVEROUTPUT ON FORMAT WRAPPED;

SHARED_LIB_PACK=$SHARED_LIB_PACK" "$LIB"="${LIB##*/}

$SHELL -c 'cp file/that/might/not/exist . ; echo "good"'

SHELL := /bin/bash

SHELL = /usr/bin/bash  # or whatever else

SHELL = /usr/bin/ksh # Or whatever path it's at

SHELL = myshell

SHELL:=/bin/bash -O extglob

SHOW DATABASES LIKE 'yourdb';

SHOW PROCESSLIST;

SHOW TABLES LIKE 'yourtable';

SITE=$SITENAME

SLEEP 9600

"SOAPAction: add soap action here from bindings or from soapui" 

 GIT_WORK_TREE=$SOURCE_PATH git checkout -- path/to/deploy.sh

SPTH = '/home/Foo/Documents/Programs/ShellScripts/Butler'

SRCS = $(filter-out excludefile.c, $(wildcard *.c))

START /WAIT 7za.exe a file_%year%%month%%day%_%hour%%min%%secs%.zip * -r -mx9 -p%pass% -mhe

START /WAIT VSIXInstaller.exe /q "C:\Developpement\ABC.vsix"

START = `date +%s` 

START "MyMacros" /D "M:\applications\AutoIt" "M:\applications\AutoIt\KeyShortcuts.exe"

START "Tasklist Monitor" /LOW TheBatchFile

START http://www.google.com

START_STOP_AA_07Jun2013

STR = "foo"

STR =foo

     STRING      True if string is not empty.

SUM[NR]=...

$SVNLOOK cat -t "$TXN" "$REPOS" "$FILE"

$SVNLOOK cat -t "$TXN" "$REPOS" "$FILEPATH" | $ICONV -f UTF-8 -o /dev/null

$SVNLOOK cat -t "$TXN" "$REPOS" "$FILEPATH" | $ICONV -f UTF-8 -t UTF-16 -o /dev/null

SVNPathAuthz short_circuit

SYNOPSIS

Safari  "http://stackoverflow.com"

Scan1

  ScrabbleHelper.exe 

Second Third Fourth Fifth

'SellerName',2013-08-20 17:19:49,'71.185.24.60',-8523106007192903367,5526150741,1,null,'25d20a500342-653AC57AF9E6401B',16,2574455867,product description,-8574103407192903368,353860,_,null,-1

Server API => Command Line Interface

Server1

ServerAliveInterval 60

Session id: foobar

Set MSBuildEmitSolution=1

Set "OPTS=-Dlog4j.configuration=.\log4j.properties"

Set USERNAME=test

 Set or unset values of shell options and positional parameters.

Set-ExecutionPolicy RemoteSigned

Set-ExecutionPolicy RemoteSigned # you can also use Unrestricted if you'd like

Set-WebConfiguration system.webServer/httpRedirect "IIS:\sites\Default Web Site" -Value @{enabled="true";destination="domain.com";exactDestination="true";httpResponseStatus="Permanent"}

 SetEnvIf User-Agent ".*MSIE.*" \

Shell Environ$("COMSPEC") & " /c """"c:\path to\rfrompcb"" ""file path""""" 

Shell Environ$("COMSPEC") & " /c rfrompcb ""file path"""

Shell "cmd echo foo", vbNormalFocus

ShellListView1.RootFolder.PathName

ShellStr = PathZipProgram & "7z.exe a """ & NameZipFile & """ """ & FolderName & "\*.fat"" """ & FolderName & "\*.sh"""

Shopping Internet Technology C/C++

Shutdown hook is executing

 Sleeping for 5 seconds, hit ctrl-c to proceed now.

Some Text that should be changed \

Some Text that should be changed \\

Some Title Here v1.2.3 Some Other Description About the Title in Here

SomeFilter all-hidden-files.txt > list_files

Start Application.exe %OPTS%

Start FILEPATH\FILENAME.mdb

StrictHostKeyChecking no

String args [] = {arg1, arg2, "-dname", "dNameArguments"};

String cmd[] = {"gnome-terminal", "-x", "bash", "-c", "ls; echo '<enter>'; read" };

 String command="cat >" + rfile +"; chmod 777 " + rfile +"; scp -t " + rfile;

String[] args = {"/system/bin/top -m 10 -n 1"};

String[] args = {"/system/bin/top", "-m", "10", "-n", "1"};

String[] cmd = {"/usr/bin/open", "-a" , "love.app",  "/Users/mtc06/testgame"};

 String[] cmd = {"sh test.sh", "/Path/to my/resource file"};

String[] cmd = {"sh",  "test.sh", "/Path/to my/resource file"};

String[] command = {"/bin/bash", "/home/pi/tbe/testSleep.sh"};

String[] commands = {"sysrw", "rm /data/local/bootanimation.zip", "sysro"};

String[] processCommand = { "cmd", "/c", "c:\\dir with spaces\\test.bat" };

String scriptloc= workingDir + "/process-executor.sh";

String tailCommand = "/bin/sh -c 'tail -f /path/PATH.txt| grep (...)'";

Student Number:92839342 Name:Robert Bloomingdale Lab1:9 Lab2:26 Lab3:18 Lab4:22 Lab5:9 Lab6:12 Exam1:25 Exam2:39 Final:99

SumatraPDF.exe -inverse-search "\"C:\Program Files (x86)\Eclipse (C++)\inverse_search.bat\" \"%f\" %l"

Sun Feb 21 00:00:00 EST 2010

Sun, 26 Feb 2012 14:33:00 +0100

System.AppDomain.CurrentDomain.FriendlyName

System:~ user# ls -C -w "$(tput cols)" | cat

TAB: menu-complete

$TAR -zcvf ${BACKUPDIR}/${BFILE} ${DIRS}

TARGETS = $(shell echo '' | php -r 'echo "target1 target2";' )

TARGETS = $(shell php -r 'echo "target1 target2";' < /dev/null )

TASKKILL /F /IM "program_name.exe"

$TEMP_DIR/greg -o $DERIVED_FILES_DIR/${INPUT_FILE_BASE}.m $INPUT_FILE_PATH

TESTS = foo.test bar.test baz.test

TEST_ENVIRONMENT = $(SHELL) -e $${V+-x}

TEST_ENVIRONMENT = $(srcdir)/run

TF get /?

TF.exe get /login:yourUsername,yourPassword ...

THIS sentence \textsc{is all caps} Except not really \textsc{but this is}

TOT_SRC = 273

Taco My-Fish-Tacos My_Fish_Tacos

Test `perl -a "print qq{A\n}x500"`

Test2.sh "$@"

Test: Jaguar XKR-S: Unter dem Blech lauert d

TestApp

TextTransform.exe Model1.tt

The 21 is only the half of answer

The current path is ../bin/test.sh

The expression is false.

The expression is true if and only if the argument is not null.

The quick brown fox 

The quick brown fox jumped 144 times over the lazy dog

This [mv] command is equivalent to an svn copy followed by svn delete

This commit has double spaced sections. And a tab, and a new line

This;is_a;string

This morning, I ate $3^12$ apples.

Thu Jan  1 23:00:00 UTC 1970

TortoiseProc /command:log /path:"%SOURCE%" /outfile:%Des%svnlog.xml

Total number = [0-9]+

Total number = \d+

True

True

Truncated write; file may have grown while being archived.

Tue Dec  3 14:25:28.217 [initandlisten] waiting for connections on port 27017

Type 'help;' or '\h' for help. Type '\c' to clear the buffer.

UPDATE address SET city ='Detroit'

URLMD5=`/bin/echo $URL | /usr/bin/md5sum | /bin/cut -f1 -d" "`

URxvt.backspacekey: ^H

URxvt.font: xft:Courier New

URxvt.font: xft:Courier New:pixelsize=18:antialias=false

OLD_USER=$USER su -m # the `-m` flag says to keep the current environment

Usage: coffee [options] path/to/script.coffee [args]

Usage: plink [options] [user@]host [command]

Usage: rename [-v] [-n] [-f] perlexpr [filenames]

Usage: script.pl [-start=1] [-end=0] [-pos=80] [-count=1] <file> ...

Useless use of single ref constructor in void context at -e line 1.

UserKnownHostsFile ~/.ssh/known_hosts

Uzing ztdin and ztdout

VAR := $(shell find . -name "*.txt")

myvar=$VAR/some

VAR2=$(( VAR1 * ONEDAY ))

VAR1 := CONFIG_X1=$(CONFIG_X1) CONFIG_X2=$(CONFIG_X2) CONFIG_X33=$(CONFIG_X33)

VAR1=`ssh $i localhost "echo awk -F: '/^bar/ {print \\\$2}' /local/foo.txt"`

$ VAR1=one VAR2=two someprogram param1 param2

VAR2= expr $VAR1 \\* $ONEDAY

vm_dir=`VBoxManage showvminfo "${vm}" | grep "Config file"| cut -2 -d:`

VMOne;VM Second

 VOLUME ["/opt/nagios/var", "/opt/nagios/etc", "/opt/nagios/libexec", "/var/log/apache2", "/usr/share/snmp/mibs"]

Vanilla-Server-Files

Var3=$((Var1 + Var2))

 Vos bureaux

W32i   APP   -     8.0.0.xxxxx shp 6SFE25~1.EXE

WAIT        Start application and wait for it to terminate.

WGET -tries=1 -T 4 http://www.my.url/my/script.php

WHENEVER SQLERROR EXIT SQL.SQLCODE

Wednesday, August 27, 2014

Why are there pipes between each pattern? "sh|SH|exe"

Why is there a dollar sign at the end? "...BAT)$"

WindowsError: [Error 2] The system cannot find the file specified

Wipe out workspace before build

World

Write-Error blah

X := $(shell echo 5)

( X1=foo; X2=bar; X3=baz; command1 && command2 ; )

( X1=foo; X2=bar; X3=baz; export X1 X2 X3 ; command1 && command2 ; )

XTerm*deleteIsDEL:      True

XTerm.backarrowKeyIsErase: False

XX /* comment1 */ YY /* comment2 */ ZZ

XX  comment1 */ YY /* comment2  ZZ

YOURTFPCMD & PID=$! ; (sleep $TIMEOUT && kill $PID 2> /dev/null & ) ; wait $PID

YYYY/MM/DD H:M:S

Yes, 2 is 2

Your computer has 4 GB of memory.

Your file has 5 lines

"\\\""

'\\(', '-name', '"*.mp4"', '-o', '-name', '"*.zip"', '\\)', '!', '\\('

"\\."

\\\/ -> \\/

IFS=$'\2' read -ra ITEMS <<<"${LINE//$'\t'/$'\2'}"

\\\\/ -> \\/ 

'\b[A-Za-z0-9]+[A-Za-z0-9._%+-]+@([A-Za-z0-9-]+\.)+[A-Za-z]{2,8}\b'

'\bweblogic_'

d=$'\e[33m'

$'\f'

IFS=$'\n'

IFS=$'\n'

nl=$'\n'

IFS=$'\n'

IFS=$'\n'

IFS=$'\n' # newline between quotes

IFS=$'\n'

IFS=$'\n'

 IFS=$'\n'; for i in `find -iname '.#*'`; do foobar "$i"; done

           IFS=$'\n'; for f in $(ls -a);do echo "$f"; done

IFS=$'\n' read -d -r -a DESCRIPTION < "test1.txt"

IFS=$'\n' read -ra CMDS <<< "$cmds"

mySep=$'\n=======\n'

IFS=$'\n\t. '

 x=$'\r'

"\\server\share\in_house_thingy.exe" myusername mypassword

IFS=$'\t' read var1 var2 < <(sed -n 's/.*<\/a><strong>\(.*\)<font color="red"> &nbsp;&nbsp;(\(.*\)).*/\1\t\2/p' new21)

$'\x01\x02abc'

    IFS=$'\x0a';

IFS=$'\xBF' read -d '' -a array <<< "$var"

^ 

^[[3;5~

^[A-Z][a-z]+[\ \t][A-Z][a-z]+$

^[A-Za-z]+[\ \t][A-Za-z]+$

^#.*

^\+[^ ]* $

^.* -t "([^\"]*)" .*$

^Disk[[:space:]]+/dev[^[:space:]]+:[[:space:]]+[^[:space:]]+

'^Filesystem|^tmpfs|^cdrom|^none'

^old^new

^\s*\*\s*\[ \][^\*]+?[.]com[.]au$

^this is a cat\Nthis is a dog$

^this is a dog\Nthis is a cat$

_FtpWebRequest->Method = System::Net::WebRequestMethods::Ftp.UploadFile;

_FtpWebRequest->Method = System::Net::WebRequestMethods::Ftp::UploadFile;

_ZN4ROMS9ROMS_Menu24read_recipes_ingredientsE6String

__git_complete gco _git_checkout

_completion_loader man

_my_function $do_add_list[@]

_my_function "${do_add_list[@]}"

_www    ALL=NOPASSWD: /path/to/script

$i-=@a=map{($b[$i++]+=$_)||$_}@F}{print"@a"

(( `</home/pi/auto/mark` > 3 )) && echo 1 > /home/pi/auto/daycheck

`!cd foo`

`"C:\Documents and Settings\test.exe"`

`./program --bash`

`./program_name #{params} >#{temp_file} 2>&1`

`/bin/sh --login -i`

`: not a valid identifierad: `var_name

`a.sh`

`a.sh`

  `basename .txt ${i}`.bak

`bash -c "$WHICH_MPI"`

`bash -c 'cat <(echo foo)'`  #=> "foo"

`bash -c \"your command with args\"`

`bash -ic 'sayHi "friend"'`

`bash ./#{path_to_pullLogs_sh} #{args}`

`cat ${HOME}/.bash_history`

`cd $dir`

`cd / && ls`

`cd ~/stage.mydomain.com && unset GIT_DIR && git pull core stage`

`chmod -v 700 {}`

`command`

`command`

`command`

`command`

`command`

`command`

`cp -R $HOME/directory.1/file.bundle /library/application\ support/directory/`

`cp /home/bhavya/workspace/UnetStack/logs/log-0.txt $dir/log.txt`

if ! `curl -i -s http://www.google.com|grep -q 302` ; then echo "302 is missed" ; fi

`date "+%Y-%m-%d"`

`date --date="last month" +%Y-%m`

`date`

`defaults read com.apple.finder AppleShowAllFiles`

`diff -b file1 file2` ?

`echo "$f" | sed "s/'/''/g"`

`echo "$line" | sed 's/.*--- \([^(]*\) (.*/\1/'`

`echo "$string" | sed 's/[^a-zA-Z0-9]/ /g'`

`echo "${searchpath}"` 

`echo $FILE | sed 's/bond/distance/'`

`echo $MXrecords | awk '{ printf "%s", $0; }'`

"`echo ${filename%.mkv}.mp4`"

`echo foo bar`

`echo hi there` # -- command not found 'hi'

"`echo test`"

`eval echo echo $VAR=\\\\\"\\$$VAR\\\\\"` >> $FILE

`exec "C:\Documents and Settings\test.exe"`

`exec 2> filename`  

`expr match "$holder" '\([A-Z|a-z]*\)'`

`find ... 2>&1`

`find ...`

`find /xyz/abc/music/ |grep def | head -n 1`

`find /xyz/abc/music/ |grep def | head -n line_number | tail -n 1`

$(`foo`)

`func args ...`

`git merge --no-ff --message "#{merge_message}" #{branch}`

`grep '^[  ]*datadir[  ]*=' /etc/mysql/my.cnf | cut -f2 -d'='`/db_backups

`grep -l 'Credits'` 

`grep stuff | head -n 1` 

`gui google-chrome`

`http --print hb google.com > out.txt`

`mkdir $dir`

`mkdir -p "$FINALPATH"`

`nohup tcpdump port 389 -i bond0 -s 0 -w /tmp/capture.pcap  > nohup2.out 2>&1&`

`perl -wpi -e 's/([^\r])\n/$1\r\n/g' $1`;

`php get_defs.php`

 `printf "%76s"; echo "$'\x14\x84\x04\x08'"`

 `printf "%76s"; echo $'\x14\x84\x04\x08'`

 `process $j &`

\`return\`

`rm $tempFile` 

`rm -rf xyz.log`

`say "I'm done master"`

`sed "s/'/''/g" < "$f"`

`sed '/CREATE DATABASE/s/dms/dms_old/'`

`sed -i '' -e '/<ArchiveAction/,/<\/ArchiveAction/ s/buildConfiguration = "[^"]*"/buildConfiguration = "'$my_build_configuration'"/' /Path/To/File`

`sed -r ...`

`su - oracle -c  "echo \\"select database_role from v\\\\\\\$database;\\" | sqlplus -s / as sysdba";`

`tar -C $folder3Path -r --file=$sampleBackupsPath $compressedSampleName --remove-files`

`tempfile 2>/dev/null`

`timeout 2 ./run.sh` 

middle=$((`wc -l < file` / 2))

`your_command args etc`

a

"a \"$b\" c"

"a "$b" c"

("a" .. "z", "A" .. "Z", 0 .. 9)

a = b if c else d if e else f if g else h

a A1 A2

a 'b '\''c '\''\'\'\''echo test'\''\'\'

a b c

a || b && c

a | b; c

(a | b); c

"a b c d"

"a b" c d

a b c d

a b c d

a b c d e f g h ice j keep l m

(( a > b )) && echo "a is greater than b"

a[0]='seven'

a[key] = value

a | sed -e 's/M$/ 1024 * +/'  -e 's/K$/ +/'  | dc -e '0' -f - -e 'p'

a somewhat long string followed by a number: 0000001

a+

${name1}_$((a++))

a=8; ((a++)); printf "%02d\n" $a

a++\nb++\nc++\n

a,b,c,d,e,f,g

 $ a.bash b.txt < a.txt > a_match.txt  

a.com b.com c.com

a1  a2  a3 

a39qrT

aAbBcCdDeE...

foo=$'a\0b'; [ ${#foo} -eq 3 ] && echo "$0 rocks"

a_command || fallback_command

(a_command && other_command) || fallback_command

a_command && second_command

aa ab ac ad

aa |bb|cc

aa*

aaa /* c1 */ bbb /* c2 */ ccc

aaa  /* test */

aaa  // test

aaa bbb 0.21

aaa  bbb ccc // c1 c2

aaaaabbbbbccccc

aapt dump badging

aapt dump badging $1 | grep launchable | cut -d "'" -f 2

aa\|bb|cc

abc "$@"

(( 'abc' == 0 )) && date

abc def pqr-stu xyz

abc#def#ghi

'abc','def','ghi','jkl','mno'

'abc','def','ghi','jkl','mno'

abc,345, some words ,"some text","text,with,commas"

"abc","345"," some words ",""some text"",""text,with,commas""

"abc","345"," some words ","some text","text,with,commas"

abc,"pqr,mno" 

abc-tmp

abc.so* def.so* hij.so*

abc123 unknown text which might have spaces/Windows/There might be /es here

file=$abc_def_APP_13.4.5.2

abcdeXfghijkl

abcdefghijkl

abcidentified file def as /Users/jleffler/tmp/soq/defghi

accurev hist -c "My Comment" -a

accurev hist -c "My Comment" elem1 elem2

$ ack "\+\|\+"

ack --print0 --html -l searchpattern | xargs -0 perl -p -i -e 's/old/new/g'

ack --print0 -l --type=java "(List|Collection|Map|Set)" | xargs -0 ack "String"

ack --print0 -l searchpattern | xargs -0 perl -p -i -e 's/old/new/g'

ack --ruby -l 'pattern' | xargs mate

ack -l Peter * | xargs ack -l James

ack -l "{% url" | xargs sed -i "s/{% url \([A-Za-z0-9_]*\) /{% url '\1' /g"

ack -rl --print0 "pattern" . | xargs -0 -l sed -i 's/pattern/other_pattern/g'

ack '^(?!.*bar).*(foo).*$' file

ack assert_equal | ack -v amazon

res=$(ack-grep --type=python "import ipdb" -c -l) ; 

ack-grep -a -l -i --print0 --text "$1" | xargs -0 -n 1 sed -i -e "s/$1/$2/g"

ack-grep -l Peter | xargs ack-grep -l James | xargs ack-grep 'Peter|James'

acp "your comment"

acroread -help

$action $src "$@"

action /path/to/prog args

$ actions start

$ actions stop

adb -e install -r "your-apk-file-complete-path"

adb -s $deviceID shell am start -a android.intent.action.MAIN -n $packageName/$launchableActivity

adb -s 015d2578a7280412 shell ls /data/app | tr -d '\r'> apps.txt

adb devices | awk 'NR>1 {print $1}'

adb devices | grep -o '\b[a-f0-9]\+\b'

adb install -r game.apk

adb install MyApp.apk

adb logcat filter1:V

adb logcat | grep -v nativeGetEnabledTags

adb push myfile '//mnt\sdcard\'

adb push test.mp4 /sdcard/test.mp4 2> Result.txt

adb push test.mp4 /sdcard/test.mp4 > Result.txt 2>&1

adb push vmstat /sdcard/

adb shell

adb shell

adb shell am force-stop com.blah.foo

adb shell am kill com.blah.foo

adb shell am start -n com.example/.ActivityName

adb shell am start -n com.package.name/com.package.name.ActivityName

adb shell am start -n package/.activity

adb shell "command1 | command2"

~$ adb shell dumpsys cpuinfo

~$ adb shell dumpsys meminfo 'your apps package name'

~$ adb shell dumpsys wifi

adb shell 'echo 1 | while read L; do echo $L; done'

adb shell getprop

adb shell getprop ro.build.version.sdk

x=$(adb shell getprop  service.adb.root | tr -d '\015')

adb shell grep ro.build.version.sdk= system/build.prop

adb shell pm list packages 

adb shell "run-as com.example.myapp chmod 666 databases/mydatabase.db"

adb shell service call notification 1

adb shell "sqlite3 /data/data/ileran.game/databases/ilearn.db"

adb shell "su -c 'chmod 777 /my/path'"

adb shell "su -c 'command1; command2; command3'"

adb shell svc wifi disable

adb shell svc wifi enable

add 10 20 | xargs square

add arg1 arg2

(add-hook 'emacs-startup-hook 'toggle-window-split)

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

adduser <username> -p <password> ...

$ adiff fromfile

agcc vmstat.c -o vmstat

airport -s | egrep -o '([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}'

$ alias >myalias

alias $SHORTTEXT='$LONGTEXT'

alias $SHORTTEXT="$LONGTEXT"

cmdstr=$(alias $aliascmd | cut -d"'" -f2 | xargs)

alias -g G='| grep --color'

alias -g lafi='`ls -rt | tail -n 1 | tee >({ printf "last file: "; cat; } >&2)`'

alias -g vv="$(date)" # replace 'date' with your command of choice

alias -s c='compile_c'

alias -s ps='screen -d -m okular'

alias S=sudo

alias aaa="./script2.sh"

alias abc="echo The quick brown fox jumps over the lazy dog."

alias adiff '/usr/bin/diff --to-file=standard'

$ alias alias_name 

alias alias_name="expect -c 'spawn ssh usr@ip -p 57022 ; expect password ; send \"pass\n\" ; interact'"

alias alternate_name="MY_ALIAS_WAS=alternate_name real_name"

alias ant="ant | grep -v 'Trying to override old definition of task'" 

alias ascii='cat ~/ascii'

alias b='bundle'

alias bashcd = 'bash -l;cd `cat ~/.place`'

alias be="bundle exec rake"

alias branch='git symbolic-ref --short -q HEAD 2>/dev/null'

alias build-product1='(cd $working-copy/delivery; mvn package;)'

alias c='clear; myscript.ksh'

alias calc='noglob calc'

alias cd    'cd \!*; <dir of script file>/titleRename.tcsh'

alias cd-='cd ${${(z)$(fc -l -1)}[3]}'

alias cd='HOME=~/Documents/Github cd'

$ alias cd=_cd

alias cda='cd \/a; exit_code=$?; echo "STATUS: $exit_code"; [[ exit_code -eq 0 ]]'; alias cdb='cd \/b'

alias cgrep="grep --color=always"

alias chrome='open -a "Google Chrome"'

alias chrome="open -a 'Google Chrome'"

alias cleanup='rm -Rf -- foo bar baz'

alias cleanup='rm -Rf -- {foo,bar,baz}'

alias cleanup='rm -Rf `pwd`/{foo,bar,baz}'

alias clear='printf "\e[H\e[2J"'

alias clip="xclip -i -selection clipboard"

alias closure='python /var/www/closure-library/closure/bin/calcdeps.py -p ../closure-library/closure/goog/ -c /var/www//closure-compiler/build/compiler.jar -f "--compilation_level=ADVANCED_OPTIMIZATIONS" -o compiled'

alias cls='printf "\033c"'

alias cmd="history | cmd"

alias cmus='monkeys -n music cmus'

alias code='cd ~/Documents/Code'

alias count1='num=$1;wc $num'

$ alias cp="my-command-script cp $*"

 alias csvcc="awk -F, 'NR==1 { print NF }'"

alias dev='cd /path/to/my/dev'

alias dev="cd your/dev/direcrory/"

alias do 'grep -iE '\''pattern'\'' filename | awk '\''{if ( $2 < 0 ) print}'\'''

alias doit='cd somedir && rm -rf *'

alias domsrv01='echo -e ?HT_R8\'"'"'% | xclip ; ssh 10.50.0.35'

alias ec="emacsclient -t -a ''"

alias edit=/path/to/vim

alias em=emacs

alias emacs-ro emacs \!:1 --funcall toggle-read-only

alias example='cd $MYUSR ; ./bin/start.sh -t'

alias execute_testfile="sh /path/to/file/testfile"

alias exiftool=~/et/exiftool

alias faster='export http_proxy=http://192.168.0.205:1099'

alias faster='http_proxy=http://192.168.0.205:1099'

alias fer='~/Documents/tutorials/ruby/RnR/third_course_0/projects'

alias fer='~/hej'

alias ferr="grep \"^ ERRROR\""

alias ferr="grep ^ERRROR"

alias ff='grep -irl'

alias fixpermissions='( cd ~/public_html/wp-content/themes/presstheme; find . -type f -exec chmod 644 {} \; ; find . -type d -exec chmod 755 {} \; )'

alias fixpermissions='cd ~/public_html/wp-content/themes/presstheme; find . -type f -exec chmod 644 {} \; ; find . -type d -exec chmod 755 {} \; ; cd'

alias foo 2>/dev/null >/dev/null && echo "foo is set as an alias"

alias foo="$(printf %q "$(which fooBinary)")"

alias foo='bar() { echo Hello; }'

alias foo='bar="$(echo testing hello world | grep "hello world")"; echo "$bar"'

alias foo='echo foo'

alias foo="pwd | rev | cut -d '/' -f1 | rev"

alias fvgm="export|grep '^declare -x gm'"

alias g++='g++ -WHATEVER'

alias gdb /usr/local/bin/gdb

$ alias geturl="python /some/cool/script.py"

alias git-root='cd $(git rev-parse --show-cdup)'

alias go='ssh $(pbpaste) -l pete'

alias gopath="export GOPATH=\$(pwd)"

alias gopath='export GOPATH=$(pwd)'

alias gotodir 'cd `/blah/blah/thescript \!:1`'

alias gotodir 'cd `/blah/blah/thescript`'

$ alias | grep youtube-dl

alias grep='GREP_COLOR="1;32" grep --color'

alias grep='grep --color=auto'

alias gup='git pull origin $(git rev-parse --abbrev-ref HEAD)'

alias hello='sudo $(fc -ln -1)'

alias hgx='open -a Murky .'

alias history="history -30"

alias hists="history | grep -v '^ *[0-9]* *hists' | grep $@"

alias "ij=open -a /Applications/IntelliJ\ IDEA\ 9.0.2.app"

alias jump="cd $(myscript.sh)"

alias kill3000="fuser -k -n tcp 3000"

alias killbg='kill ${${(v)jobstates##*:*:}%=*}'

alias knx='sudo kill -HUP `cat /usr/local/var/run/nginx.pid`'

$ alias konsole_select_branch='SELECT_BRANCH=true konsole'

alias lala="ls -lrt|grep a"

alias lh='ls -lh'

 alias list-ip='nmap -sP 192.168.1.* | grep -o "192[0-9.]*"'

 alias list-ip="nmap -sP 192.168.1.* | grep 192  | awk '{print \$5}'"

 alias list-ip='nmap -sP 192.168.1.* | grep 192  | awk "{print $5}"'

alias lls='ls -l --color=auto'

alias lns='ln -s'

alias lock='gnome-screensaver; gnome-screensaver-command --lock'

alias ls='clear;\ls'

alias ls='echo "Running ls -alh"; ls -alh'

alias ls='ls --color=auto'

alias ls='ls -GpF'

alias ls="ls -l"

alias lsps='ps -elf | grep'

alias mpsoma='mplayer http://192.168.1.1:8090'

alias murky open -a Murky

alias mv_to_trash 'mv \!* ~/trash'

alias mx="find . -name '*.sh' -exec chmod a+x {} \;"

alias my_env="source /path/to/stuff/my_env"

alias my_g++='g++ -WHATEVER'

alias myalias="alias myalias; <do stuff>"

alias myalias="myprogram \$(pwd)"

alias myfind "find . -name 'pattern*'"

alias myfold='cd ~/Files/Scripts/Main'

alias myip="python -c 'from urllib import urlopen; print urlopen(\"http://whatismyip.appjet.net\").read()[:-1]'"

alias myprog.awk="awk '{print $0}'  `ls -1rt | tail -1`"

alias myscript='set -f; globstopper /usr/bin/myscript'

alias mysu="su -c \"ZDOTDIR=$HOME zsh\""

alias new="python /Python_scripts/radians.py"

alias new="python Python_scripts/radians.py"

alias new="python ~/Python_scripts/radians.py"

alias newpython="/path/to/your/new_version/python"

alias np "ls -la"

alias npp='notepad.exe&'

alias ogc='open -a Google\ Chrome --args --disable-web-security'

alias open='cygstart'

alias p="python"

 alias pandoc="/path/of/new/pandoc"

alias php="/usr/bin/php"

alias pigalias='/dev/pig-0.11.1/bin/pig -D udf.import.list=org.apache.pig.piggybank.storage.avro -D "pig.additional.jars=/dev/avro-1.7.4.jar;/dev/avro-mapred-1.7.4.jar;/dev/json_simple-1.1.jar;/Users/devpig-0.11.1/contrib/piggybank/java/piggybank.jar"'

alias pipup='sudo pip install --upgrade $(yolk -U | awk "{print \$1}")'

alias pipup='sudo pip install --upgrade $(yolk -U | cut -d" " -f 2)'

alias pipup='sudo pip install -U `yolk -U | awk "{print \$1}"`'

alias pipup='sudo pip install -U fnord'

alias precmd 'echo -n "\033]0;$user@`hostname`\007"'

alias prev 'history | grep \!^'

alias printMessag='ruby -e "puts \"Hello World\""'

alias printMessage='ruby /path/to/file.rb'

alias proj="cd /home/tree/projects/java"

alias proxyget='read userid?"Userid: "; read passwd?"Password: "; read url?"URL: "; read local?"Local: "; curl -x 1.2.3.4:8080 -U $userid:$passwd  $url -o $local;'

alias pshell="pythonsh path/path/script.py"

alias rails=/var/lib/gems/1.8/bin/rails

alias rake='nocorrect rake'

alias randspec="rspec --seed \$RANDOM";

  alias rdc="open -a \"Remote Desktop Connection\""

alias replace="sed 's/~/~\\n/g' "

alias rh='sed -i '\''$d'\'' ~/.bash_history'

alias rm='echo SAFE'

alias rm='rm -i'

alias rm='rm -i'

alias rot13="tr '[A-Za-z]' '[N-ZA-Mn-za-m]'"

alias setup_diffuser='export GIT_COMMITTER_NAME="Blah" && export GIT_COMMITTER_EMAIL="blah@blah.com" && export GIT_AUTHOR_NAME="Blah" && export GIT_AUTHOR_EMAIL="blah@blah.com" && export blah="true"'

alias sin='rerun ruby "${PWD##*/}.rb"'

alias somealias='something longer'

alias sourcetree='open -a SourceTree'

alias ssh_nokia='ssh -l root'

alias sshx='TERM=xterm ssh -X 123.45.67.89'

alias st="/correct/path/to/subl"

 alias startSP='cd mydirectory ; redis-server & node myApp.js'

 alias startSP='cd mydirectory ;redis-server & node myApp.js &'

alias subl="$PATH_TO_SUBL"

alias subl="/Applications/path/to/subl"

alias suble=/some/thing else/here

alias svn-reset="svn status | perl -nale 'print \$F[1] if /^M/' | xargs svn revert"

alias svndiff='svn diff --diff-cmd=diff -x -U0'

alias svnx='~/bin/svnx wc . && ~/bin/svnx log .'

alias tcl='tclsh tclhelper.tcl'

alias test='if [ ! -d "/path/to/the/folder" ]; then mkdir -p "/path/to/the/folder"; fi'

alias test="lsof -i tcp:80 | awk '\$1 == \"Google\" {print \$2}'"

alias test='lsof -i tcp:80 | awk '\''$1 == "Google" {print $2}'\'

alias test="read -sp 'Enter pp: ' pass; gpg --passphrase \"\$pass\" --batch --symmetric --cipher-algo aes256 -o file.ext.gpg file.ext"

alias test="read -sp 'pp: ' pass; gpg --passphrase-fd 3 --etc-etc 3<<< \$pass"

alias time='time /usr/bin/time'

alias totalmem='ps -u user -o rss,command | grep -v peruser | awk "{sum+=\$1} END {print sum/1024}"'

alias umusic="cd '/Volumes/180 gram/Uncompressed'"

alias uniqlines 'perl -ane '"'"'print unless $a{$_}++'"'"' '

alias uniqlines="perl -ane 'print unless \$a{\$_}++' "

alias unix='echo $(date +%s)'

alias up 'cd `yes ".." | head -n\!* | tr "\n" "\/"`'

alias up-svn='svn up `ls -d ./*`'

alias update_my_gems="echo foo; echo bar"

alias v='vim -c "'"'"'\""'

alias var="/usr/bin/python2.7 /home/user/file"

alias vim=/Applications/MacVim.app/Contents/MacOS/vim

alias vim='mvim --remote-tab-silent'

alias whatever "cmd1; cmd2; cmd3"

alias wrang="open -a TextWrangler"

alias www='cd /cygdrive/c/xampp/htdocs/www'

alias www='open "http://localhost/~Sites/$(basename $PWD)"'

alias xxx="svn status | awk '\$1 ==\"M\"{print \$2;}'"

all: $(patsubst %.c,%,$(wildcard *.c))

all: $(subst .src,.png,$(wildcard *.src))

all: ; echo $(notdir $(CURDIR))

all: radgrd_py.so lodiso_py.so

allow nano to suspend

als archive_name

altscreen on

   altscreen on

am broadcast "intent:#Intent;action=android.intent.action.BATTERY_CHANGED;i.status=5;i.voltage=4155;i.level=100;end"

am start -a com.example.ACTION_NAME -n com.package.name/com.package.name.ActivityName

amixer get PCM playback | sed -n '/.*\[\([0-9]*\)%].*/s//\1/p'

playback=$(amixer get PCM playback | sed -n '/.*\[\([0-9]*\)%].*/s//\1/p')

and should be able to be done using Bash

android create avd -t 12 -n test_002 -a --abi armeabi_v7a

android list targets

android update project -t android-10 -p .

android update sdk --no-ui --all --filter "sysimg-15"

android-sdk-windows\tools

   android.permission.INJECT_EVENTS 

android.permission.WRITE_EXTERNAL_STORAGE

 android:versionCode="38"

ansible playbook.yml -i hosts

ant -Dfile1=file1 -Dfile2=file2 -buildfile=build.xml -verbose

ant -Dfile1=file1 -Dfile2=file2 -buildfile build.xml -verbose

ant -Doutput.root="/d/output" target1

ant -Dperson="MerryPrankster" hi

$ ant -Dproperty="$(git --version)"

ant -Dtest.entry=YourTestName

ant -buildfile build.xml

$ ant -verbose -debug ...

ant debug

ant debug add-jar

aoeu "$(pyfg)"

apache ALL = NOPASSWD: /usr/bin/git

apache ALL= NOPASSWD: /path/to/script command

apachectl -V

aplay -l | grep "C-Media USB Audio Device" | perl -anE 's/://g, say for $t="$F[1],$F[8]"'

aplay -l | grep "C-Media USB Audio Device" | perl -nE 's/ \[.*?\] | : //xg; say join",",(split)[1,5];'

aplay -q ~/.zsh/sounds/done.wav

aplay ~/.zsh/sounds/done.wav 2>/dev/null

appcmd list site

appcmd set config /section:applicationPools "/[name='xxx - yyy'].processModel.idleTimeout:0.00:00:00"

appcmd.exe set config -section:system.applicationHost/applicationPools /applicationPoolDefaults.managedRuntimeVersion:"v4.0" /commit:apphost

"apple","banana","pineapple"

( application_to_run 2>&1 ) | grep FATAL

( application_to_run 2>&1 >/dev/null ) | grep FATAL

apropos '(3)' | grep ^[a-z]

apropos -s 3 . 

apropos -s 3 . | grep ^[a-z]

apt-cache search gawk

apt-cache search terminal | cut -d "-" -f 1 | grep terminal | xargs -I % bash -c 'echo %; apt-cache show %; echo -e "\n"' > terminals.txt

apt-get -s -o Debug::NoLocking=true upgrade | grep -c ^Inst

apt-get -y install tofrodos

apt-get install --reinstall packagename

apt-get install -y [YOUR_PACKAGE]

apt-get install alpine

$ apt-get install php5-cli

apt-get install python

apt-get install sshpass

apt-get install wmctrl

apt-get install xvfb

apt-get install zsh

while ! apt-get update -q ; do sleep 1; done

apt-get update && apt-get -fy upgrade && [ -f /var/run/reboot-required ] && shutdown -r now 

apt-show-versions | grep 'No available version' 

aptitude install expect

$ aptitude search '?provides(pattern)'

$ arch -i386 executable_file

$ arch -x86_64 executable_file

 archive "${_name_Project}" "${_path_Componet1}" "filename1" "file.log" 

$((archive + 1))  ## here $archive = 22:ARCHIVE: before

arg_count++;  

args = [pathToScript, input1, input2, ....]

args[i] = 0;

argument at index: 3 is 2

argv[1]

argv[argc] = NULL;

arp -a

arp -a | cut -f 2 -d ' '

arp -a | cut -f 2 -d ' ' | sed 's/[()]//g'

arp -s $1 $2 2>/dev/null

arp -s $1 $2 &>/dev/null

arp -s $1 $2 | grep -v 'SIOCSARP: Invalid argument'

arp -s $1 $2 2>&1 | grep -v 'SIOCSARP: Invalid argument'

arr_obj[SomeSection\034Blah] = 1

array

    (( array[i] = val1 + val2, ++val1 )) ## val1++ + val2 looks dirty

asdf 2> /dev/null || exit 1

aseqdump | myscript.sh

ash -c 'addr2line (nil) -e xcep_app'

ash!/bin/sh -e

for f in *.txt; do aspell check $f; done

aspell list --personal=$HOME/Library/Spelling/en

aspnet_compiler -v/WebsiteOne -p c:\projects\Website1 -f c:\Inetpub\wwwroot\WebsiteOne 

assign $my_date1

assoc .py

assoc .py=Python.File

asterisk -nrx \"transcoder show\"

$ asterisk -rx "originate SIP/1000 extension 4105556666@outbound"

at <<< $'first line\nsecond line'

at "$1" < 'open /.../mysongs/sweetsong.mp3'

at -c 1072250520.a

at -f /app/data/scripts/func_test.sh -v 09:50

at -f your_command $hh:$mm

at 00:00 cmd /c copy C:\Documents\*.* C:\MyDocs

at now +10 minutes <<< "rm -rf /tmp/tobedeleted"

attachment[i]="--attach-file ${font1[i]}"

attrib /S *.xxx +r > NUL

audicerttest/incoming

$ augtool --autosave --noautoload --transform "Desktop.lns incl /path/to/your/example.desktop" set "/files/path/to/your/example.desktop/Desktop Entry/NoDisplay" true

autocmd BufNewFile *.py 0put =\"#!/usr/bin/python\<nl>\"|$

autocmd BufNewFile,BufReadPost *.m set filetype=objc

autocmd BufWrite /etc/httpd/conf/* !restart_apache.sh

autocmd FileType zsh set noundofile

autocmd bufnewfile *.py 0r /path/to/python_default.py

autocmd bufwritepost *.pl silent! !chmod +x %

$ autoreconf -fis

autoreconf -i

avrdude -P\\\\.\\USBSER000 ...

$avrohdfs concat $DIRS -

awk

awk ' !x[$0]++'

awk ' $2 != $3 { print; next } $2 == $3 && $2 != 0 && $2 != 1 { print }' INPUTFILE

awk ' NR == 1 || /^13/ ' infile.txt > outfile.txt

awk '<awk script commands>' input-file

awk [-W option] [-F value] [-v var=value] [--] 'program text' [file ...]

 awk '[Aa][Rr][0-9]+ && [Ss][Mm][Ff]_[Ll][Oo][Gg] ...'

awk ' { t = $1; $1 = $2; $2 = t; print; } ' input_file

awk '! a[$0]++'

awk '! a[$1]++' input-file

awk '! seen[$0]++' log1 log2 ...

awk '! seen[$2]++' filename

awk "!($0 in seen) {seen[$0];print}"

$ awk '!($0~s1 || $0~s2)' s1='binding style="rpc"' s2='binding style="document"'

awk '!($1 in a){print;a[$1]}' file

awk '!($1~/EBI/ || $2~/EBI/)'

awk '!($2 in a){i[NR]=$2}{a[$2]=$0}END{for(x=1;x<=NR;x++)if(x in i)print a[i[x]]}' a b

 awk '!($2==1 && $3==0){print}' file

awk '!(/^FILE NAME:/ && seen[$NF]++)' infile

awk '!(/pattern1/ && /pattern2/)' file

awk '!(NR%10)' file

awk '!(NR%10)' yourfile > newfile

awk '!(NR%2) {$5="\\n"$5 }1' filename

 awk '!(NR%2){print p>=$0?p">="$0:p"<"$0;next}{p=$0}' file

awk '!(NR%2){print$0p}{p=$0}' infile

awk '!(NR%n){print $0 p; p=x; next}{p=p ORS $0}' n=4 file

awk '!/ /' input.txt 

awk '!/##SA/' "$1" > "${G_DEST_DIR}/${G_DEST_FILENAME}"

awk '!/#/{gsub(/[";]/,"",$0);print}'

awk '!/(^|\y)hello(\y|$)/' file

 awk '!/10.45.56.84|10.81.51.92/' file

awk '!/;$/ {printf;next}1' infile

awk '!/;$/{l=l""$0;next;}{print l""$0;l=""}' file

awk '!/^ /&&/:$/{p=0}p;/^Header 2:$/{p=1}' file

awk '!/^[ \t]*###/' file

awk '!/^[-=]/ && NR!=1{str=str","$1}END{print substr(str,2)}'

awk '!/^[0-9]/ {next} !/OK/ {print "BAD UNIT DETECTED:",$0}' input

awk '!/^[0-9]/{n=0} {n++; A[n]=A[n] (A[n]?OFS:x) $0} END{for(i=1; i<=n; i++) print A[i]}' OFS='\t' file

awk '!/^[0-9]/{n=0} {n++; A[n]=A[n] (A[n]?OFS:x) $2} END{for(i=1; i<=n; i++) print A[i]}' OFS='\t' file

awk '!/^>/ { gsub(/[a-z]/, "C") }1' file.txt

awk '!/^#/ && substr($12,1,3)~/[01.]\/[01.]/ && substr($15,1,3)~/[01.]\/[01.]/' <<< $1 > /proj/b2014091/nobackup/potHomoF1.txt

awk '!/^*/{next}$1=="*"{sub("\\*+ ","");p=$0}$1="**"{c[p]+=1}END{for(i in c) printf "* %s [%s]\n", i ,c[i]-1}'

awk '!/^C/' data.txt

$ awk '!/^my/{$0=++cnt" "$0} 1' input 

awk '!/affraid/{print} /affraid/{print "Substitution"}' file

awk '!/hello/' file

awk '!/searchphrase/{print "No Match"}' file

awk '!NF {$0=""}1' file | awk -v RS="" '{print NR,$0}'

awk '!NF{$0=">"}1' file

awk '!NF{f=0} /PATTERN/ {f=1} f' file

awk '!NR%2{next} /Oranges/,/^$/ { if (/Good/) print $2}' file

awk '!_[$0]++' infile

awk '!_[$0]++' text | sort -t, -nk1,1

awk '!a[$0]++' file

awk '!a[$0]++' file1.cvs file2.cvs

awk '!a[$0]++' infile > outfile

$ awk '!a[$0]++' input.txt

awk '!a[$1]++' file

 awk '!a[$1]++' file

awk '!a[$3]++' file.txt

awk '!a[substr($0,1,40)]++'

awk '!a[substr($2,0,8)]++ { print substr($2,0,8) }' file.txt

awk '!a++,$0=$NF' RS="Fa" input-awk.txt

awk '!array[$1,$2,$3]++' file.txt

awk '!array[$2]++' file.txt

awk '!e{e=$1+4;} $1-e>0{print "Range " ++i , c " entries. min: " min " max: " max ; e+=4; c=0; min=""} {if(!min)min=$1; c++; max=$1} END{print "Range " ++i , c " entries. min: " min " max: " max} ' file

awk '!h[$1] { g[$1]=$0 } { h[$1]++ } END { for(k in g) print h[k], g[k] }'

awk '!h[$4]++' RS='--\n' ORS='--\n' FS='\n| *: *' infile

awk '!h[$4]++' RS='--\n' ORS='--\n' infile

awk '!p && /pattern/{p=1;c=0} c ~ /^([578]|1[689])$/ {print; if (c==19) exit} p{c++}' infile

awk '!s[$2]++'

awk '!seen[$0]++' file

awk '!seen[$0]++' file

awk '!seen[$1]++' file

awk '!seen[$1,$2]++' file

awk '!seen[$5,$6]++' file1 file2

awk '!v[$2] { print; v[$2]=1; } ' input

awk '!x[ substr( $0, 2 )]++' file.txt

awk '!x[$0]++' file.txt

awk '!x[$0]++' file.txt

awk '!x[$0]++ || ($0 ~ /Successful association/)' /tmp/log

awk '!x[$1]++' FS="/" $PATH_TO_FILE

awk '!x[$2]++' file.txt

awk '""~$0 {flag=1; print; next}; flag {printf "$"; flag=0} 1'

awk '"14:40:00" <= $1 && $1 <= "15:00:00"' app.log

awk '$(NF -1) == 200 {arr[$1]++}END{for (a in arr) print a, arr[a]}' access.log

awk '$(NF)==2013' input.tsv

awk '$(NF)==2013 { count+=1 }; END { print count }' input.tsv

awk "$(awk '/mySearchString/ { print "NR==" NR-19 }' myInputFile.txt)" myInputFile.txt

awk "$(echo 'BEGIN { print "hello!" }')"

awk '$0 >= s && $0 <= e' s="$start" e="$end" file

awk '$0 != "-"'

awk '$0 != "Keyword:"' file

awk '$0 !~ "^@" && $0 !~ "^} *$" { print }' FILE 

awk '$0 !~ /NO/ {print $0 "|YES|"} $0 ~ /NO/ {print}' temp.txt

awk '$0 == "Keyword:" {next} 1' file

awk '$0>=s && $0<=e' s='$(date +%H":00:00" -d 1h)' e='$(date +%H":59:59" -d 1h)' file

awk '$0>x{x=$0};END{print x}' input.txt

awk '$0' yourFile

awk '$0 ~ /^>/ { print ">" $15; next } 1'

awk '$0 ~ str{print NR-1 FS b}{b=$0}' str="findme" path_to_file

awk '$0*1==$0{$0=sprintf("%05d",$0)}1' file

awk '$0*1==$0{printf("%05d\n",$0);next}1' file

> ls -1 *.h | awk '$0="    "$0" \\"'

awk '$0=$0" or"'

awk '$0=$0*1==$0?sprintf("%05d",$0):$0' file

awk '$0=$0FS tolower(substr($1,1,1)$NF)' file

awk '$0=$3' file > newfile

$ awk '$0=="pattern1" {p=1}; p; $0=="pattern2" {p=0}' file

awk '$0=gensub(/(\s|^){(\s|$)/, "\\1<\\2","g")'                                                                                  

awk '$0=length($1) FS $0' file | sort -nr | sed -r 's/^\S*\s//'

awk '$0{gsub(/./,"&\n");printf $0}' input

awk '$0~/ABC/{print "<<";print;getline;print;getline;print }' temp.txt

awk '$0~m {$0=$0":p=abcde"} 1' m=$(cat mac.txt) file

$ awk '$0~s1 && $0~s2' s1='binding style="rpc"' s2='binding style="document"'  

$ awk '$0~s1 && $0~s2{print FILENAME;nextfile}'

$ awk '$0~s1 || $0~s2' s1='binding style="rpc"' s2='binding style="document"'  

$ awk '$0~s1 || $0~s2{print FILENAME;nextfile}'

$ awk '$0~s1{f1=1} $0~s2{f2=1}ENDFILE{if (!(f1||f2)) print FILENAME;f1=f2=0}'

$ awk '$0~s1{f1=1} $0~s2{f2=1}ENDFILE{if (f1&&f2) print FILENAME;f1=f2=0}'

awk '$0~v' v="patt/ern"

awk '$1 > l { l = $1; p = 0 } $2 < p { $2 = p } { p = $2 } 1' input-file

awk '$1 >= 100 && $1 <= 999' file1

awk '$1 >= 1344279903 && $1 <= 1344280204 { print $0 }' data.txt

awk '$1 !~ /random/ { print RS $0 > $1 ".txt"; close($1 ".txt" }' RS='>' ORS=''

awk '$1 - $3 < 0.01 || $3 - $1 < 0.01 {print $4}' file

awk '$1 == "055" { system( "/path/to/script " $2 )}'

awk '$1 == "2014-07-23" && $2 >= "01:00:00" && $2 < "02:00:00" { print }'

awk '$1 == "ADDRESS" && substr($2,0,3) == "abc"'

awk '$1 == "ALTER" { $5=$5+5 } 1'

awk '$1 == "Axis" && $2 == "Mode" {t = 1;} $1 == "Vibro-Rot" && $2 == "alpha" && $3 == "Matrix" {t = 0;} t == 1 && NF == 6 {print $0}' file.log

awk '$1 == "CLs", $0 = $3'

awk '$1 == "FROM" { print $2 }'

VAR=$(awk '$1 == "HAI" && NR==1{print NR}' file1)

awk '$1 == "SomethingA" && ! a++ || $1 == "SomethingD" { print $2 }' FS=: text.txt > output.txt

 awk '$1 == "Start" || $1 == "End" || $1 == "Slack----" {print $0}' InputFile

awk '$1 == "Vibro-Rot" && $2 == "alpha" && $3 == "Matrix" {t = 0;} t == 1 && NF == 6 {print $0} $1 == "Axis" && $2 == "Mode" {t = 1;}' file.log

awk '$1 == "a" && $2 ~ /^(LINE|SINE|ERV)/' myData.txt

awk '$1 == "chr1" { total += $5 } END { print total }' file

awk '$1 == "export" { split($2, a, "="); print a[1]; }'

awk '$1 == "go.gle.com"{print NR ":" $0}' inFile

awk '$1 == $2 {next} {print}' oldfile > newfile

awk '$1 == 3, $1 == 5 { next }; { print }' INFILE

awk '$1 == m { system( "/path/to/script " $2 )}' m=${BTSID} 

awk '$1 == prev1 {print $2 - prev2} {prev1=$1; prev2=$2}' file

awk '$1<15' input_file

var1=$(awk '$1>$3{ print "5"}' newfile2)

awk '$1>1000 {print $0}' graph_data_tmp.txt

awk '$1 {printf s++ ? "|" $0 : $0}' RS='<[^>]+>'

awk '$1 ~ "^net" && $3==24{print "something", $3, "something else"} $1 ~ "^net" $3==23{print "something", $3, "something else"}' file.txt

awk '$1 ~ /\*+/ {prev = $2} $1 !~ /\*+/ {print prev, ":", $0}' inputfile

awk '$1 ~ /^[0-9]+$/ { printf "%s: ", $2 } $1 == "HEIGHT" { height = $3 } $1 == "LATITUDE" { printf "%s %s %s, ", $2, $3, $4 } $1 == "LONGITUDE" { printf "%s %s %s, %s\n", $5, $6, $7, height }' file.txt

awk '$1 ~ /^(three|six|five)$/ {arr[++c] = $3} END {for (i = 1; i <= c; i++) {printf "%s%s", delim, arr[i]; delim = OFS}; printf "\n"}' file

awk '$1 ~ /^A/ && $2 ~ /^B/' file

awk '$1 ~ /^France$/ { print }'

awk '$1 ~ /fm/ {print $2}' RS=span FS='[<>]'

awk '$1!="MATH"{next}1;!i++{min=$2;max=$2;}{for(j=2;j<=NF;++j){min=(min<$j)?min:$j;max=(max>$j)?max:$j}}END{printf "Max value is %.2f. Min value is %.2f.\n", max, min}' file

awk '$1!="{{}}"{move[++i]=$0;next}1 END{for(x=1;x<=length(move);x++)print move[x]}' file

awk '$1!~/^#/&&$1 in a{next;}{a[$1]}1' file 

awk '$1-prev >= 10 {print; prev=$1}' years.txt

awk '$10~/^DST=/{sub(/DST=/,"",$10); print $10};$11~/^DST=/{sub(/DST=/,"",$11); print $11}' iptables.log | sort -u

awk '$13 ~ /type/ {print $15}' filename.txt | tee >(wc -l >&2) | sort -u

awk '$1=$1' <<< $string

awk '$1=="[end"{p=0}/^header=7075/{p=1}p' file

awk '$1=="1"&&$2=="1"{t=1};t;$1=="33"&&$2=="33"{exit}' file

awk '$1=="1"&&$2=="1"{t=1};t;$1=="33"&&$2=="33"{t=0}' file

awk '$1=="3"{A=NR}NR==(A+1)&&A'

awk '$1=="3"{getline;print;exit}' file

awk '$1=="Birthday"{birthday = $3} $1=="Name" && birthday<1999 {print $3}' birthday.txt

$ awk '$1=="INSERT"' test.txt > new.txt  

awk '$1=="PIPPO" {print $2}' file

awk '$1=="Uid" && $2==1234 { print FILENAME }' /proc[1-9]*/status

awk '$1=="User:",/login time: 2013-08/' file

awk '$1=="XYZ" && $2=="GT" { f = 1 } f' in.file > out.file

$ awk '$1=="abcd" && $2>1000{print NR, $0; exit}' file

awk '$1=="ice" && $2=="cream" {names[FILENAME]++} END{for(i in names)print i}'

awk '$1=="ice" && $2=="cream"{print FILENAME;nextfile}'  file1 file2 file3

awk '$1=="number"{print $2}' file

 awk '$1=="restartfreq"{$2=$2/2;}1' file > t && mv t file

awk '$1=="string" {print $2}' file

awk '$1==15{print $2}' infile

 awk '$1==99999{f=($3==55&&$4==126)?1:0}f' file

awk '$1~"BODY[13]"' RS= ORS='\n\n' file

awk '$1~/\/1$/ && $2==16' file

awk '$1~/^000/' ... 

awk '$1~/^1/{print $2}' file.txt

awk '$1~/organization/{print $0;sub(/organization/,"company");print $0;sub(/company/,"long name")}1' file

awk '$1~d {print $2}' d=$(date +%Y-%m-%d) archivos.txt

awk '$1~r && p in k { next } { k[$1]++; print; r= "^" $1; p=$1 }' words

awk '$2 < 54 && $2 > 50' FS=: input.txt

awk '$2 < p { $2 = p } { p = $2 } 1' input-file

awk '$2 > 45895' test-file_long.txt

  awk '$2 !~ /\\[][|\\{}()!?+*.%$^]/' FS=,

awk '$2 !~ /^synonymous/'

awk '$2 - $3' infile >outfile

awk '$2 = "xyz" {print $1, "\t", $8}' infile > outfile

awk '$2 = $2 FS "0"' file

major=$(awk "\$2 == \"$module\" {print \$1}" /proc/devices)

awk '$2 == "0.0000"{getline var <"file2";$1=var};{print}' file1

awk '$2 == "ST" { printf "%s ", $0; next} 1' input-file

awk '$2 == "linux1" && $3 ~ /^eth[0-8]$/'

awk '$2 == "lo" {print ""} {printf("%s", $1)} END {print ""}'

awk '$2 == "xyz"' infile | sort -k 8n | head -1 | cut -f1,8

awk '$2 == 1002' FS=\| input-file

$ awk '$2<25 {print; i++} END{print "\nTotal number of students:- "i}' file

awk '$2<=972 {$4=$4 FS "H"} 1' file

awk "\$2>0 && \$1==\"$col1type\"" 

$ awk '$2>1000{print NR, $0; exit}' file

awk '$2>20{print $1}' file1 file2

awk '$2 { $2 = 1 } 1' input > output

awk '$2 { $2 = 1; print }' input > output

awk '$2 ~ /[/].*[/].*[/]/' FS=, input

awk '$2 ~ /[^\\][][|{}()!?+*.%$^]/' FS=,

awk '$2 ~ /(^|[^\\])[][|{}()!?+*.%$^]/' FS=,

awk '$2 ~ /^[0-9]$/{print}' FS="\t" file

awk '$2=$2" "sprintf("%.3f",$2)' file

awk '$2=$2/1024"MB"' file

major=$(awk "\$2==\"$module\" {print \$1}" /proc/devices)

awk '$2=="CC" { a+=1 } {$2=sprintf("%02d",a)} 1' input

$ awk '$2=="header"{h=$1;next} {print h " " $0}' input.txt

awk '$2=="n"{x++}END{print x}' file

awk '$2=="no"{$3="N/A"} {print $0}' file

awk '$2=="no"{$3="N/A"} {print}' file

awk '$2==120{$2=1201;next}$3==130{$3==1301}1'

 awk '$2==120{$2=1201;next}{$2==1202}1'

awk '$2==120{$2=1201}$3==130{$3==1301}1'

awk '$2==120{$2=1201}1'

awk '$2==120{$2=1201}1' FS='\t' OFS='\t' file

awk '$2==120{$2=1201}{print $0}'

awk '$2==1{fn=$3} $2==2{ln=$3} $2==3{age=$3} NR>1 && NR%3==0 {print $1,fn,ln,age}' file

awk '$2~"^/$"{$4="acl,"$4}1' OFS="\t" /etc/fstab

awk '$2~/^(23|17|21|1)$/' file

awk '$2~/^4\.4/{print $9;exit}' myfile

awk '$2~/^4\.4/{print $9}' myfile >> myoutputfile

awk '$3 > 0 && $4 > 0' input.txt

awk '$3 != $4 "" {print $0}' test

awk '$3 != current {id++; current=$3} {print $0, id}'

awk '$3 && $4' input.txt

awk '$3 == "*" { $3=$2 }1' file.txt

awk '$3 == 0' data

awk '$3>3' inputFile

 awk '$3 || $3=="0" {t=$3} {$3=t} 1' file

awk '$3 ~ /snow/ { print }' dummy_file 

awk '$3!=5.5' filename

awk '$3=="cd" {print $0}' | wc -l

awk '$3=="cd"||$3=="yum"||$3=="install"||$3=="cat" {print $0}' file | wc -l

 awk '$3~/^2/&&$4=$5=$6="F"' file  

awk '$3~/^2/{gsub(/T/,"F");print}' file

awk '$4 > $1 { count++ } END { print count }' file.txt

awk '$4 != "TelePacific"' file > output && mv output file

awk '$4 == "NS" {print $1, $5, $0} $4 == "A" {print $1, $1, $0}' | sort | cut -f3- -d' '

awk '$4 ~ /\/foo$/ { print $1 }'

 awk '$4 ~ /success/ {print $3}' logfile

awk '$4==dd{print $1}' dd=02/03/2013

awk '$4{c++}END{print c}' file

awk '$4~/^x/&&!/y/' raw.txt > xy_raw.txt

awk '$4~dd{print $1}' dd=02/03/2013

awk '$5 != "*" {print}'

awk '$5 != 14003 && $4~/DC/' file > new_file && mv new_file file

 awk '$5 != last; {last = $5}' last=-1 input

 awk '$5 !=b && NR>1{print a} {a=$0; b=$5}' input

awk '$5 ~ /OD[0-9]*-NZ[0-9]*|NZ[0-9]*-OD[0-9]*|OE[0-9]*-NZ[0-9]*|NZ[0-9]*-OE[0-9]*|OE[0-9]*-NH[0-9]*|NH[0-9]*-OE[0-9]*/' input.txt

awk '$5 ~ /^(A|B|C|D)$/' *.csv

awk '$5~/[ACGT]/ && $8~/^DP=/ && $10!~/^0/{split($0,tmp,/[=;]/);if(tmp[2]>10) print}' file

awk '$6 == "SYN_RECV" {++ip[substr($5, 1, index($5, ":") - 1)]} END{for (i in ip) print ip[i], i}'

awk '$6 == "SYN_RECV" {print substr($5, 1, index($5, ":") - 1)}'

awk '$6>3{print $1,$2}' file >out

awk '$6 ~ /a/' file

awk '$6==1260 || $6==1068 || $6==907 {next} {print}'

awk '$6~/^(([1-9]|[1-9][0-9]|100)[SM]){2}$/' file

awk '$7 ~ /\.html/ {print <your-field-list>}'

awk '$7~=/datasheets/{a[$7]++;} END{for(x in a)print x": "a[x]' file

awk '$8 == 1 || $8 == 2 || $8 == 3 || $8 == 4' file

awk '$9 >= 0.1 &&$9 < 0.2 ' s_all_frq.txt | wc -l >> 1.txt

awk '$9 != "NTM" && $9 !=""' $file > $nn

awk '$9=="plant"' file_in.txt > file_out.txt

awk '$9~/plant/' file_in.txt > file_out.txt

awk '$NF != prev {print} {prev=$NF}'

awk '$NF == "msgstr \"\"" { c++ } END { print c }' FS="\n" RS= file

awk '$NF<=10{print "<div style='"'"' width: 50%; background-color: red; color: white'"'"'>"$0"</div>";next}1' file

 awk '$NF ~ /^@/ {print $NF}'

awk '$NF=$NF"."' file > salida.csv

awk '$NF=="letters"{sub($NF,"");s=s $0}END{sub(/ *$/,"",s);print s}' file

awk $line -v ...

awk "$out" "$bigfile"

awk "$out"' { /* do stuff */ }' "$bigfile"

awk '$x > FLOOR' Table.txt

awk $'{ print "\\"" $1 " :{$row[\'" $1 "\']}\\"" }'

$ awk '(!( $1 in arr) ){arr[$1]=$0}END{for(i in arr) print arr[i]}' file

awk '("15:21:14" <= $1) && ($1 <= "15:51:14")' file

awk '("15:21:14" <= $1) && ($1 <= "15:51:14")' file | sort

   awk '($0 !~ /#/ && $2 !~ /_R/){print $2}' ../download/interactions.$1.$2 | sort -u -k > rna.names.txt

awk '($0+0)>10 && ($0+0)<100' file

awk '($1==c1 && $2==c2){print line RS $0}{line=$0;c1=$1;c2=$2}' file

awk '($3 != $4) && !($3=="C" && $4=="T")' file

awk '($3 in t){ln[$3]=t[$3]":"$0;next}{t[$3]=$0}END{for(s in ln) print ln[s]}' file

awk '(NF > 1){print}' input

awk "(NR >= $4) && (NR <= $5) {print}" $1

awk '(NR % 10 == 1){ print }' your_input_file

awk '(NR>1){{a[NR]=$0;if($0~/<\/ABC>/){for(i=NR-4;i<=NR;i++){print a[i]}}}}' input.txt

awk '(NR-1)%100 < 20' bigfile.txt

awk '(PROGRAM)' testfile.txt > testfile.tmp && mv testfile.tmp testfile.txt

awk '(length(gensub("[^{]","","g"))-length(gensub("[^}]","","g"))) != 0 { print NR, $0}'

awk '++a[$9]>2{print $0>"dups";next}1' file > outfile

awk '++seen[$0] == 2' in > out

awk -- 'BEGIN { input = ARGV[1]; while (getline line < input) { sub(/^ +/, "", line); split(line, a, /   +/); for (i = 2; i < ARGC; ++i) { if (a[1] == ARGV[i]) {; printf "%s %s\n", a[1], a[2]; break; }; }; }; exit; }' <(my_command) "${ROWS[@]}"

awk --field-separator=";" '{print $1}'

awk --posix '{ if ($6 ~ /^.{14}:$/) print $6}' file

awk --re-interval '$2 ~ /[0-9]{1}/{print}' FS="\t" file

awk --re-interval '$23 ~ /[0-9]{6}[1357][0-9]/{print "Found a match", $23}'

awk --re-interval -F '[[:blank:]]{1,}' '{printf ("%s ", $2)}' list

awk --re-interval -F'  +' '/^[0-9]{4}/{print $2}' ./infile

awk --re-interval '...b = match($23, /[0-9]{6}1[0-9]/)...'

awk --re-interval '/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/{print $0}' maillog

awk --re-interval "/size='0x[0-9a-fA-F]{4,}'/" thefile

awk -F " " '$1, { }'

awk -F " " '{key=$1" "$2; value=$4" "$5; if(! key in t){t[key]=value} else {t[key]=t[key]""value}} END {for (key in t){print key" "t[key]}}' file|sort -rt' ' -k1

$> awk -F " " '{print $2-40000}' Input.txt > Output.txt

awk -F ' : ' '$1=="Unexpected exception"{a[$2]++} END{for (i in a) print i,a[i]}' output.txt

awk -F " = " 'FNR==NR { array[$1]=$2; next } $1 in array { sub ($2, array[$1]) }1' fileb filea

awk -F " = " 'FNR==NR { array[$1]=$2; next } $1 in array { sub ($2, array[$1]); delete array[$1] }1; END { for (i in array) print i FS array[i] }' fileb filea

 awk -F "</*td>|</*tr>" '/<\/*t[td]>.*[A-Z][A-Z]/ {print $3, $5, $7 }' FILE

awk -F "[ ']" '{ print $2 ": " $7 " --> " $14}'

awk -F "[ ,:]+" 'FNR==NR { a[$3]=$4; next } $1 in a { print a[$1], $2 }' OFS=":" file1 file2 > file3

awk -F "[ =:,]" 'FNR==NR { a[$1]=$0; next } $2 in a { split(a[$2],b); for (i=3;i<=NF-1;i+=2) for (j=2;j<=length(b)-1;j+=2) if ($(i+1) == b[j]) line = (line ? line "," : "") $i ":" b[j+1]; print $1 "=" line; line = "" }' file1 file2

FOUND=$(awk -F '[<>]' '/<ns1:CarrierServiceId>/ {print $3}' TEST.tmp)

awk  -F '[<>]' '/<td / { gsub(/<b>/, ""); sub(/ .*/, "", $3); print $3 } ' file

awk -F '[<>]' '{ for (i=1; i<=NF; i++) if ($i ~ /translate="yes"/) print $(i+1), "=", $(i+1) }' file.txt

awk -F '[<>]+' '{for (i=2; i<=NF; i+=2) if ($i ~ /^[0-9][0-9][0-9]+$/) print $i}' file

awk -F '[[:blank:]]*\\|[[:blank:]]*' -v OFS=, '$2 ~ /[0-9]{5}/ {print $2,$3}'

awk -F '[[:space:]]*,[[:space:]]*' '{print $2}' input.txt

awk -F '[][]' 'NR > 1 {print $2}'

awk -F '[][]' '{$0=NF==3?$2:NF>4?$2 OFS $4:1}1' OFS=\* file

awk -F '[][]' '{if(NF==3)print $2; else if(NF>4)print $2,$4; else print 1}' OFS=\* file

awk -F '[][]' '{print $1,$2}' 11

awk -F '[][]' '{print $2,$4}' OFS=\* file

awk -F "[ \t;=]+" '{ print $1, $2, $3, $4, $5, $6, $7, $8 }' file.txt

awk -F '["./]' '{ print $0 $3 "-thumbs." $4 }' file.txt

awk -F "['/]" '{for (i=3; i<=NF; i+=3) if ($i<10) next; print}' file

awk -F "[()]" 'FNR==NR { a[$(NF-1)]++; next } !(gensub(/(.*),.*/,"\\1","g",$(NF-1)) in a)' File1 File2

awk -F '[()]' '{print $(NF-1)}' input | tr -d ,

awk -F "[,~]" 'NF < 21 { line = (line ? line OFS : line) $0; fields = fields + NF } fields >= 21 { print line; line=""; fields=0 } NF == 21 { print }' file.txt

awk -F "[/()]" -v OFS=';' '{print $0,$(NF-2),$(NF-1)}' your-file

awk -F '[:<>/]+' 'NR % 2 { n = $1 } NR % 2 == 0 { print $2 ":" n ":" $1 }'

awk -F '[:<>/]+' '{ n = $1; getline; print $2 ":" n ":" $1 }'

awk -F "[:,]"  '/=sent/{a[$2]=$0;}/=receive/{print a[$2], $0;delete a[$2];}END{for(i in a)print a[i],"NO MATCH";}' file

awk -F "[:,]"  '{split($2,a,",");if($1~/sent/){if(prev!~/receive/&& NR!=1)print prev,"NOMATCH";else if (NR!=1)print prev;prev=$0;session=a[1];}if($1~/receive/&&session==a[1]){prev=prev","$0;}}'END'{if(prev~/receive/)print prev;}' file1.txt

awk -F '[:\t]' 'FNR==NR{n[$1];next}$5 in n{print > ("Alignments_"$5".sam")}'

awk -F '[= ]+' 'FNR==NR{a[$1]=$0;next} $1 in a{$0=a[$1]}1' oldfile newfile

awk -F "[=,]" 'FNR==NR { for(i=2;i<=NF;i++) a[$1][$i]; next } { $5 = "NOMATCH"; for(j in a) for (k in a[j]) if (substr($2,0,6) == k) $5 = j }1' OFS=, file1.txt file2.txt

awk -F "[=,]" 'FNR==NR { for(i=2;i<=NF;i++) a[$1,$i]; next } { $5 = "NOMATCH"; for(j in a) { split(j,b,SUBSEP); if (substr($2,0,6) == b[2]) $5 = b[1] } }1' OFS=, file1.txt file2.txt

awk -F '[@#=]+'

awk -F '[|][|]' -v OFS="," '{$1=$1}1'

awk -F "[|,]" '{ for (i=2;i<=NF;i++) print $1 "|" $i }' file

awk -F "" '{for(i=1;i<=NF;i++) freq[$i]++;}END{for(i in freq) printf("%c %d\n", i, freq[i]);}'

awk -F '"' '/^%attr/ {gsub(/\\/, "/", $(NF-1))} 1' OFS='"' file

awk -F '"' '/^%attr/ {gsub(/\\/, "/", $(NF-1))} 1' OFS='"' file > _tmp && mv _tmp file

awk -F "\"" '/upload_url/ {print $2}' filename

awk -F '"' '{OFS="'"'"'"; gsub(" ", "%20", $2); print $0}'

awk -F "\"*,\"*" '{print $2}' textfile.csv

awk -F "\"*_\"*" '{print ";189;" ($5 ? $5 : $4) ";-6"}' file.txt

HOST_ID='banana#Apple' | awk -F '#' '{print $2}'

HOST_ID="$(awk -F '#' '{print $2}' <<< "$ENTRY")

awk -F "#+|@+|=" 

salt=$(awk -F "$" '{ print $(NF-1) }' shadow.lab4)

salt=$(awk -F "$" '{ print $3 }' shadow.lab4)

encr=$(awk -F "$" '{ print $4 }' shadow.lab4)

encr=$(awk -F "$" '{ print $NF }' shadow.lab4)

existed=`awk -F '$1 == $title' $library | wc -l`

awk -F'"' '$8!=$12 {print $8,"=",$12}'

awk -F $':' -f file.awk < datafile

awk -F "," '$1 !=""{OFS=","; print $1,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20}' file1.csv > file2.csv

$ awk -F "," -f test.awk test.dat

awk -F , -v OFS=, '{ for (i=1;i<=NF-4;i++){ printf $i, }; printf "\n"}'

awk -F , -v OFS=, '{print $1, $4, $4}'

for i in {1..100}; do awk -F "," -v i=$i '{ i++; j=i+2; printf "%3d, %12.3f, %12.3f\n", $1, $i, $j }' All_Runs.csv > Run-$i.csv; done

awk -F "," -v oid="$oid" '$5 == oid' "$SYMBOL_CSV_FILE"

awk -F ',' -v tId="$1" '$0 ~ "(^|,)" tId "(,|$)"' file

awk -F "," 'BEGIN { i = j = 1 } { i++; j+=3; printf "%3d, %12.3f, %12.3f\n", $1, $i, $j > Run-$i.csv }' All_Runs.csv 

awk -F ',' 'FNR == 2 {print $1 " age is " $2}' names

awk -F "," 'NR==FNR{a[$1]=$0;next}{print $0 "," (a[$2]?"Available":"NotFound")  }' f22.txt f11.txt

awk -F , '{ gsub(/(^{)|(}$)|"/, ""); for (i = 1; i <= NF; ++i) print $i }'

awk -F ',' '{ if ($8 == 6) { print $1":"$2":"$4":"$7":"$8 } }'

awk -F , '{if ($2!='0') print}'

awk -F "," '{if(NF==1){ print "Exiting"; exit -1}}' || exit

awk -F ',' '{print $7}' file

 awk -F'  +' '{print $2}' ./infile

awk -F"  " '{print $3}' file

awk -F' *: *' '{if(x!=$1)x=$1;else $1="   "}1' input.txt

awk -F" *@ *" 'NR==FNR{lines[$2]=$0} NR!=FNR{if(lines[$1])lines[$1]=lines[$1] " @ " $2} END{for(line in lines)print lines[line]}' file2.csv file1.csv

awk -F" - " -v date="$YESTERDAY" -v patt="$1" '$0 ~ date && $0 ~ patt {print $1}' "$ACCESSLOG"

awk -F' -' -v OFS='\n-' '$1=$1'

awk -F' / ' '$1 == "'"$log"'" { print $3}' schedlist

awk -F' / ' '$1 == s {print $3}' s="$log" schedlist

awk -F' ObjectId\\("' '{sub(/".*$/,"",$2)}$0=$2' file

awk -F' S==' -v k1=this '{gsub("[][()#$@~% ]", "", $2); if ($2 ~ k1) print $1}'

awk -F' S==' -v k1=this '{gsub("[^[:alnum:]]", "", $2); if ($2 ~ k1) print $1}'

awk -F' S==' -v k1=this '{gsub("[^a-zA-Z0-9]", "", $2); if ($2 ~ k1) print $1}'

awk -F' |=' '$12 ~/401/{print $10}' inputFile

awk -F" ||| " '{$0=$1}1' file

awk -F" '" 'BEGIN {OFS="," FS} { print $1, $2, $3 }' data

awk -F '- ' '{ print $1 }'

awk -F" '" '{ print $1, $2, $3 }' OFS=", '" data

awk -F' ' '{ print $1, $2, $3 }' file.txt

awk -F' ' '{print "00000000"$7}' tmp.txt > tmp1.txt

awk -F" " '{print $4,$3,$5,$6,$7,"1","2","3","4"}'

awk -F' ' '{printf "%s:%s:%s:%s\n", substr($9, 1, 2), $3, $17, $0}'

$ awk -F"[ [\]]" '{print $4,$7}' your_file

awk -F'[ ,]' 'NR>2{for (i=2;i<=NF;i++) if ($i<-1 || $i>1) print (NR%2==0) ? NR ORS NR + 1 : NR - 1 ORS NR; next }' file.txt

awk -F'[ ,]' 'NR>2{for (i=2;i<=NF;i++) if ($i<-1 || $i>1) { print NR; next } }' file

awk -F'[ .]' -v ts="$Timestamp2" '$2 == ts {print $1}' find_thread > ThreadID

awk -F"[ .]" '/cpu MHz/ {if (f) {print $(NF-1); exit}; f=1}' /proc/cpuinfo

awk -F'[ /]' '$(NF-1)=="Firefox"{print $NF}' file.log

awk -F'[ /]' 'NR~/^[123]$/; /^---/{ip=$2} /^rtt/{print ip, $8} /100% packet loss/{print ip, "100% packet loss"}' file

awk -F'[ /\t]' '{print $2}' /usr/share/nmap/nmap-services

awk -F'[ :]*'  '{if($7 == $9 ) print $1,$2,$3,$4,$5,$6,$7,$8,$9; else print $1,$2,$3,$4,$7,$8,$5,$6,$9}' input.txt|column -t

awk -F'[ :.]' '{for(i=1;i<=NF;i++) {if ($i=="Y") c++;}}{print c; c=0}' inputfile

awk -F'[ \t]*;[ \t]*' 'NR > 1 && NF > 1 { print $2"=>\"0000:0000:0000:1000::"$1"/64\"" }'  file

awk -F"[ \t:]*" 'FNR==NR {a[$2]=$0;next} {print a[$3],$5,$6,$7 }' OFS="\t" f2 f1

awk -F"[<>]" '{print $3}'

awk -F'[<>]' '{print $3}' input.txt

awk -F'[[:blank:]:]+' '{ print $4 }' infile

awk -F'[[:space:],]+' '{for(i=4;i<=NF;++i)print $1,$2,$3,$i}' file

awk -F"[>,)]" '{gsub(/.*ID /,"",$6);gsub(/Addr.*/,"",$7);print $2,$3,$6,$7 }' file

awk -F"[>,)]" '{print $2,$3,$6,$7 }' file

awk -F[][] '/ERROR/ {a[$4]++} END{for (i in a) print i, a[i]}' file

awk -F"[][]" '/dB/ { print $2 }' <(amixer sget Master)

awk -F'["][|]["]' '{print NF-1}' input.txt

awk -F'["][|]["]' '{print NF}' input.txt

awk -F"[']" '/define/ && /URL/{print $4}' config.php

var=$(awk -F"[']" '/define/ && /URL/{print $4}' config.php)

$ awk -F'['$'\t'',]' '{print "$0 =",$0; for (i=1;i<=NF;i++) print "\t$" i, "=", $i}' file

awk -F'[()]' '$2>2{print}' file

awk -F'[()]' '/^ / {printf "%s ", $2; next} /^[^[:space:]]/{print ""}'

awk -F'[()]' '/^ / {printf "%s ", $2}'

awk -F"[()]" 'FNR==NR { m[++d]=$1;next } { for(i=1;i<=d;i++){if( $0 ~ m[i] ){ print }}}' dataset secondfile

awk -F'[()]' '{print $2}' file

$ awk -F'[(=\t;]' '$9>2' file

awk -F'[, ]' '{for (i=2; i<=NF;i++) print $1","toupper($i)}' file

awk -F'[,|]' 'NR==FNR{gh[$0];next} {print "set security address-book global", (($2=="group") && ($3 in gh) ? "address-set" : "address")}' "$group_holder" "your.csv"

awk -F"['.]" 'NF>2{print $2}' file

awk -F'[.=]' '$4 ~ /^[[:digit:]]+$/ {print $3}' file

awk -F"[._]" '!a[$2]++' file

 awk -F'[: ]' '{if(/^[0-9]/)print $1,$2,$4;else print $3,$4,$1}' 

kent$  awk -F'[:[]' -v vd=$sd 'BEGIN{ gsub(/\//," ",vd);"date +%s -d \""vd"\""|getline d} {p=$0;  gsub(/\//," ",$2); "date +%s -d \""$2"\""|getline o;if(o>d) print p}' log.txt

awk -F'[:, ]+' 'OFS=": " { for (i = 2; i <= NF; i++) print $1, $i }' file 

 awk -F'[:. ]' '$5=="IP"{print $4","$12"."$13"."$14"."$15}'

awk -F'[:;]' '{if(NF>n){n=NF;w=$1}}END{print w}' filename

awk -F'[; ]+' '{print "JOIN_IMPORTANT_ATTRIBUTE", $8 $4 "; " $0}' file

version=$(awk -F[=#] 'NR==15 {gsub("\"","",$2); print $2}' main.py)

awk -F'[=: -]' '/^>/{s=$3" "$4" "$5; next} {print s,$0}' file

awk -F'[^ ]*' 'NR==1{f=$2}{sub($2,f)}1' file

awk -F'[^ ]*' 'length($2)<4{sub($2,"    ")}1' file

awk -F'[^ ]*' '{sub($2,"    ")}1' file

awk -F'[^0-9]*' '/[0-9]/ { print ($1 != "" ? $1 : $2) }'

awk -F'[_-]' '{print "Version number : "$3; print "Release number : "$4}'

awk -F'[\t/]' '{print $2}' file

awk -F'[|]{4}' '{ printf "Field 1 -> %s\nField 2 -> %s\n", $1, $2 }' infile

$ awk -F'>' '$2~/^mail/{f=$2".mail";gsub(/[)(]/,"_",f)}{print > f}' file

awk -F'>' '/table name/{$NF="slonyid="q x++ q FS}1' q='"' inputFile

awk -F'>' '/table name/{print $(NF-1)" slonyid""=""\""NR-1"\""">"}' inputFile

awk -F'>' '{print $2}' file.txt

awk -F\" '$2~/^[[:space:]]*PATTERN/{print $2}' file

awk -F\" '$4' 

awk -F\" '$4' huge.csv > filtered.csv

awk -F"\",\"" '{cmd="date -d \"$(date -d \""$3"\")+10days\" \"+%Y-%m-%d %T\"";cmd | getline datum; close(cmd); print $0 ",\""datum"\""}' test.csv > test-increment-10days.csv

awk -F\" -v OFS=\" 'FNR==NR{ a[$0]++; next} $2 in a { $0 = "+" $0 } 1' file.csv target.csv 

awk -F\" -v OFS=\" 'FNR==NR{ a[$0]++; next} { sub(/^ ?/, $2 in a ? "+" : " ") } 1' file.csv target.csv

awk -F\" -v OFS=\" 'FNR==NR{ a[$0]++; next} { sub(/^ ?/, $2 in a ? "+" : " ") } 1' file.csv target.csv

awk -F\" -v OFS='|' 'BEGIN { print "*Brand", "Product", "Quality*"} { sub(/.* : /, "", $5); sub(/[.]/, "", $5); print $2, $4, $5 }' file | column -t -s '|'

awk -F"\"" '/<address|<hostnames/{print $2}' file

var=$(awk -F\" '/au_pxytimetag/{print $(NF-1)}' yourfile)

awk -F\" '/sectorNumber/{x="Sector:" $2 RS} /cellIdentity/{x=x $2 RS} /\<\/Sector/{printf x}' file

awk -F\" 'NR==FNR{a[$1];next}($6 in a){print "TIMESTAMP=\""$2"\"\nSQLTEXT=\""$10"\"\n=========\n" > $6".txt"}' file2  file1

awk -F\" '{ for(i=1;i<NF;i++) if ($(i+1) ~ /RSS/) print $i }' file

awk -F\" '{ printf (NR > 1 ? ";%s" : "%s"), $2 } END { if (NR) print "" }' file

awk -F\" '{for (i=2;i<=NF;i+=2) if ($i ~/^[[:space:]]*PATTERN/ ) {print $i;next}}'

awk -F"\"" '{print $2"-"$4}' data.txt | sort -t- -k4 -k3M -k2 | awk -F- '{kv[$1]=$2"-"$3"-"$4}END{for(k in kv){print k,kv[k]}}'

awk -F'\"' '{print $2}'

awk -F\" '{print $4}' file

awk -F\# '!a[$1]++' your_file.txt

awk -F'#' 'NF>1{split($2,a,"[0-9]+");print $1 FS $2+11 a[2];next}1' infile

awk -F# 'OFS=FS { for (i=2; i <= NF; i++) gsub(" ", "+", $i); print }' file.txt

awk -F# 'OFS=FS { gsub(" ", "+", $2) }1' file.txt

count=`awk -F"$formatindicator" '{print $formatarg}' $filename`

awk -F$'\t' 'BEGIN {OFS="\t"} {$3="new_str"; print}' in.csv > outfile.csv

awk -F$'\t' 'BEGIN{OF=OFS}{print $1,$2,$10,$12,$14,$20}' AECPRDA.TAB | head -10

awk -F"${HOSTNAME%%.*}" '/usb/ && !seen[$1]++ {print $1}' /var/log/messages

awk -F'$' '/\$/{printf("%-79s$%s\n", $1, $2);next}1' ./params

awk -F\$ '{x+=$NF}END{print "\n**Total: $"x}' "$1" >> "$1"

awk -F% '/^\s*kernel/{print NR}' "$grubFile"

awk -F"&" '{for(i=1;i<=NF;i++)if($i~/country/ ||$i~/language/){split($i,a,"=");printf a[2]" "}}' your_file

awk -F'&' '{gsub(/\./,"",$2)}1' file

awk -F\' '{c[$2]++} END{for (w in c) print w,c[w]}' file

awk -F\' '{print $2,$4}' file.txt

awk  -F")" '/-/ {a=$0;getline;t=split($1,x," ");sub(/-/,"-"x[t]")",a);$t="";print a"\n"$0;next} !/-/' file

awk -F'*' '{i+=$1*$2} END{print i}' count.txt

awk -F, '!($2 ~ / / || $3 ~ / /)' input.txt

awk -F, '!a[$1]++ { keys[++i] = $1 } !r[FILENAME]++ { ++argind } { b[$1, argind] = $2 } END { for (i = 1; i in keys; ++i) { k = keys[i]; t = k; for (j = 1; j <= argind; ++j) t = t FS (length(b[k, j]) ? b[k, j] : "0000"); print t } }' file1 file2 file3

awk -F, '!arr[$1]++ { print }' LOGFILE

awk -F, '!seen[$1]++' file

awk -F, '!seen[substr($6,4,8)]++' infile.txt

awk -F, '!seen[tolower($1)]++' file

awk -F"," '!x[toupper($1)]++' test.csv

author=$(awk -F, '$0~var {print $2}' var="$title" $library)

awk -F, '$1 !~ /[^[:digit:]]/'

awk -F, '$1 ~ /^[[:digit:]]+$/'

awk -F, '$1!="'${empid_search}'"' tmpfile > $PAYROLL

awk -F, '$1=="01/02/2002"{p=1} $1=="01/08/2008"{p=2} $1!="01/08/2008" && p==2{exit} p' dataset.txt

awk -F, '$2'

awk -F, '$2 !~ / /' input.txt

awk -F, '$2 == ""' file

awk -F, '$2' file

awk -F, '$2<100' file

awk -F, '$2 ~ /\/.*\/.*\//'  input

awk -F, '$2 ~ /^[a]{2}$/' <<< "aa,bb,cc\ndd,eaae,ff"

awk -F, '$2=="Group"{ g=$1; print "create group",g } $7!="-"{print "add " $7 " to " g}' file

awk -F, '$2=="Group"{g=$1; print "create group",g}{print "add " $7 " to " g}' file

awk -F, '$3 > -39' momenttensors.csv

awk -F, '$3 !~ /^synonymous/' fileCSV.csv > fileCSV2.csv

awk -F"," '$3 == "\"0\""' file.csv

awk -F"," '$3 ~ /"0"/' file.csv

awk -F',' '$3!~/""/{nbr=$3} {print $1","$2","nbr}' file

awk -F, '$4 ~ /@test\.com/' /home/mail/test.csv

awk -F, '$5 == $oid' "$SYMBOL_CSV_FILE"

awk -F, '++a[$1,$3] == 2 {print $1}' your.file

awk -F', ' '!/^#/ && NF{$1=$1; print}' OFS=':' file

$ var=$(awk -F', ' '$1=="foo"{print $2}' file)

awk -F', ' -v OFS=':' '!/^#/ && NF{$1=$1; print}' file

awk -F', ' 'BEGIN{OFS=":"} !/^[[:space:]]*#/ && NF{$1=$1; print}' file

$ awk  -F', ' '{for(i=1;i<=NF;i++)printf "%.1f%s",$i,(i==NF?RS:FS)}'

awk -F',[[:space:]]*' '{print $1,$2}'

awk -F',+' 'NF==8;1' file.txt

awk -F, -f qq.awk qq.in

awk -F, -vCOLM=minAccessTime -f qq.awk qq.in

awk -F, -vOFS=, -vc=1 'NR == 1 {for (i=1; i<NF; i++) {if ($i != "") {g[c]=i; f[c++]=$i}}} NR>2 { for (i=1; i < c; i++) {print $1,$2, $g[i] > "file_"f[i]".csv" }}' data.csv

awk -F, -vOFS=, '{$1=NR}1' input.txt

awk -F, -vOFS=, '{$5=$5}1'

awk -F, -vOFS=, '{if($7~/^BL/ && $2==""){$2="foo"}print;}' file

awk -F, -vmax=0 ' NF > max { max_line = $0; max = NF; } END { print max_line; }' < poem.txt

awk -F, -vs=$search '{for (i=1;i<=NF;i++)if($i~"^"s"$"){print i;exit;}}{print "not found"}' yourString

userType=$(awk -F, -vtype=2 '($1=="'"$user"'") {type=1}; END {print type}' notas.csv)

awk -F, -v OFS=, '$1 != "" { link=$1 } { $1 = link; print $0 }'

awk -F, -v OFS=, 'FNR==NR{ sub(/[ \t\r]$/, ""); a[$0]++; b[FNR]=$0; next} { t = $4; gsub(/(^"|"$)/, "", t); r = " "; if (t in a) { c[t]++; r = "+" }; sub(/^[ \t]*/, r); } 1; END { for (i = 1; i in b; ++i) { t = b[i]; sub(/^[ \t]*/, t in c ? "+" : " ", t); print t > "/dev/stderr" } }' file.csv target.csv > new_target.csv 2> new_file.cs

awk -F, -v OFS=, 'FNR==NR{ sub(/[ \t\r]*$/, ""); a[$0]++; next} { t = $4; gsub(/(^"|"$)/, "", t); sub(/^[ \t]*/, t in a ? "+" : " "); } 1' file.csv target.csv 

 awk -F, -v OFS="," 'NR==FNR{a[$0];next}{for(x in a)if(x~"^"$1FS)print $0,x}' file2 file1

kent$  awk -F, -v OFS="," 'NR==FNR{d[$2]=$4;next}$2 in d{$5=d[$2]}7' file2 file1

awk -F, -v OFS=, '{$1 = sprintf("%13.0f", $1); print}' foo.csv

awk -F, -v OFS=, '{$5 = tolower($5); print}' file

awk -F, -v OFS=, '{gsub(" ", "_", $3); print}' file.txt 

awk -F, -v a=$a '{ if ($10==a) print $0 }' ...

awk -F, -v awkvar="$1" '$4 ~ "^\""awkvar {print $1 $2}' records.txt

awk -F, -v col="B" 'NR==1{for(i=1;i<=NF;i++)if($i==col)break;print;next}$i==2'  file

awk -F, -v var="$var" '{ $3 = var } 1' OFS=, math_ready.csv > math1.cs

awk -F'","|^"|"$' '{print $2}' testfile.csv 

awk -F,       .....

awk -F, "/$itemname/ { print \$3 }"

author=`awk -F, '/'$title'/ {print $2}' $library`

awk -F, '/HELLO/{ $3=" NEW, "$3;}1' OFS=, infile.txt > outfile.txt

awk -F, '/Salaried/{print $2}' "$PAYROLL"

awk -F, 'BEGIN { OFS = "," } $1 { last = $1 } !$1 { $1 = last } { print }' SedExit.txt 

awk -F"," 'BEGIN { OFS = "," } {$6="2012-02-29 16:13:00"; print}' input.csv > output.csv

awk -F, 'BEGIN {OFS = ","} {gsub("-([0-9.]+)", "(" substr($3, 2) ")", $3); print}' inputfile

awk -F, 'BEGIN {OFS=","} {$10=substr($10,1,255);print}'

awk -F',' 'BEGIN {OFS=","} {t = $8; $8 = $9; $9 = t; print}'

years=$(awk -F, 'BEGIN{ OFS=", "} {print $1, $4+1}' 0809_data.csv)

awk -F"," 'BEGIN{OFS=","} {$5 = tolower($5); print}' file

awk -F, 'BEGIN{OFS=","}{{gsub("\047","",$2)}; print}' file.txt > output.txt

awk -F, 'BEGIN{print "Failure_Code,FAILURE_SUM,Ratio"}{a[++i]=$1;b[i]=$2};/Total/{for(j=1;j<=i;++j)printf "%s,%d,%0.2f%\n",a[j],b[j],(b[j]*100/$2)}' file

awk -F, 'FNR==NR && /STRING/ { gsub(/ /,""); a[$3]; next } FNR!=NR { for (i in a) if ($0 ~ i) { print; next } }' test.txt temp.txt

awk -F, 'FNR==NR { a[$1]++; next } { print $0, ($3 in a ? a[$3] : "0") }' OFS=, file file

awk -F, 'FNR==NR { a[$1]; next } $1 in a' file1 file2

awk -F, 'FNR==NR { a[$2]=$0; next } { print a[$0] }' file2 file1

awk -F, 'FNR==NR { for(i=1;i<=NF;i++) a[$i]; next } { for(j=1;j<=NF;j++) if (!($j in a)) r = (r ? r FS : "") $j } END { print r }' file2 file1

awk -F, 'FNR==NR {a[$1]+=$2;next} {print $0 ","($2 in a?$2","a[$2]:"NotFound,NotFound")}' f2.txt f1.txt

awk -F, 'FNR==NR {a[$1]=$0;next} {if (!($1 in a)) print $0,a[$1] ; }' OFS=, <(gzip -dc f22.txt.gz) <(gzip -dc f11.txt.gz) > Output_f33.txt

awk -F, 'FNR==NR{a[$1]=$0;next} ($2 in a){print $0,a[$2]}' OFS=, f22.txt f11.txt

awk -F, 'FNR==NR{a[$3]++;next} /k_k/ {if(a[$3]==2)print $0}' file file

s=$(awk -F, 'FNR==r{print c}' r="$r" c="$c" file)

awk -F"," 'NF == 1 {header = $0;} NF > 1 {print header", "$0;}' test.txt

awk -F, 'NF!=3' file

awk -F, 'NR > 1 {a[$1]=$1} END { delim=":"; num=asort(a); for (i=1;i<=num;i++) printf "\"%s\" ",a[i]; printf "\n"}' tables/ansi.csv

awk -F',' 'NR == 4 { print $3 }' somefile.csv

awk -F, 'NR == FNR { r = $3; next } { $3 = r } 1' OFS=, math_ready.csv math_ready.csv > math1.csv

awk -F, 'NR>1 && $7<=0.05 { print $7 }' test.txt

 awk -F, 'NR>1{ fname=$2".csv"; print >>(fname); close(fname);}' yourCsv

$ awk -F, 'NR>1{f=$1".sync";print >> f;close(f)}' file.csv

awk -F',' 'NR>1{for (i=2;i<=NF;i++){sum +=$i}if (sum>0) print $0;sum=0}' csv

awk -F, 'NR=="'$line'"{print $'$index'}' "$1"

awk -F, 'NR==1 || $2==2' file

awk -F',' 'NR==100{ $150 = "NewValue"}1' OFS=',' myfile.csv

awk -F, 'NR==1{for(i=1;i<=NF;i++)if(!($i in v)){ v[$i];t[i]}}{s=""; for(i=1;i<=NF;i++)if(i in t)s=s sprintf("%s,",$i);if(s){sub(/,$/,"",s);print s}} ' file

awk -F, 'NR==1{hdr=$0;next}!($3 in files){files[$3]=1;print hdr"\n">$3".csv"}{print>$3".csv"}' test.csv

awk -F, "NR==1{hdr=$0;next}!($3 in files){files[$3]=1;print hdr\"\n\">$3\".csv\"}{print>$3\".csv\"}" test.csv

awk -F, 'NR==1{hdr=$0;next}{out=$3".csv"}!($3 in files){files[$3];print hdr"\n">out}{print>out}' test.csv

 awk -F, 'NR==1{title=$0;next} { print >> ($2".csv");colse}' yourCSV

awk -F, 'NR==FNR{PATS[$0]++;next}$1 in PATS' b.txt a.txt

awk -F, 'NR==FNR{PATS[$0]++;next}{for(p in PATS) if($1~p) print $0}' b.txt a.txt

awk -F, 'NR==FNR{a[$0];next} $1 in a' file2.csv file1.csv

awk -F, 'NR==FNR{a[$0];next}$1 in a' 300513-code.csv 30-05-4UTF.csv

 awk -F, 'NR==FNR{a[$1$2]=$3;next}{$3=a[$1$2];}1' OFS=, file1 file2

awk -F, 'NR==FNR{a[$1,$2,$3,$4];next} ($1SUBSEP$3SUBSEP$6SUBSEP$7 in a)' file1.txt file2.txt

awk -F, 'NR==FNR{a[$2]=1; next;} ($2 in a)' file2 file1

awk -F, 'NR==FNR{old[$0];next} $0 in old{delete old[$0];next} 1 END{for(line in old) print line}' old.txt <(sort -u new.txt) | sort

awk -F\, 'gsub(/[ \t]+$/, "", $2); {print $2 ":"}' test.csv

$ awk -F, 'length($19)>1' file.txt

awk -F, 'length($2)<=3' input.txt

awk -F, 'length($2)>5' file

awk -F, 'seen[$3,$4]++{print $0 > "dups.csv"; next}{print $0 > "new.csv"}' mycsv

awk -F, '{ #Do stuff }' 2012_03_[0-3][0-9]

awk -F, '{ $4 = ($4 == "N/A" ? -1 : $4) } 1' OFS=, test.csv

awk -F, '{ count[substr($2,0,5)] = 1; } END { for(i in count) x++; print x; }' abc.csv 

awk -F, '{ for (i=1;i<=NF;i++) print (i>1 ? substr($0,0,4) : "") $i }' file

awk -F, '{ if (((length($2) == 15 ) || length($2) == 16) && (length($1) == 12 && length($3) == 15)) print }'

awk -F, '{ if (NF < 15 ) print NR "," $0 }' fileToTest

awk -F, '{ n = split($2,array," "); printf "%s, %s\n", $1, array[n] }' file.txt

awk -F, '{ outFile="$1"; gsub(/\//, "", outFile); print $0 > outFile }' infile

awk -F, '{ print > substr($2,0,4) ".txt" }' file

awk -F, '{ print $0 > $1}' infile 

awk -F, '{ print $2 "\\" $1 }' file

awk -F, '{ print $NF, $0 }' yourfile | sort -n -k1 | sed 's/^[0-9][0-9]* //'

awk -F, '{ print substr($2,1,5) }' abc.csv | sort | uniq | wc -l

awk -F',' '{ printf "INSERT INTO Testing (\x27\Date\x27,\x27User\x27,\x27Usage\x27) VALUES (\x27%s\x27,\x27%s\x27,\x27%s\x27)",$1,$2,$3;print ""}' yourFile

awk -F, '{ printf("%s,%d,%.10f\n",$1,$2,$3)}' text.csv

awk -F, '{ sub(/T.*/,"",$3); sub(/T.*/,"",$4) }1' OFS=, file.txt

awk -F, '{ system("mkdir -p "$2); print > $2"/"$2".csv"}' Input.csv

awk -F, '{ x += $1 } END { print x " " x/NR }' MyFile

awk -F, '{$NF="e";}1' OFS=, file

awk -F"," '{OFS=","; a=$5; $5=",,,,,",a; print $0}' file

awk -F, '{OFS=",";print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$20,$21,$22,$23,$24,$25,$30,$33}' infile.csv > outfile.csv

awk -F, '{SUM+=$3} END{print SUM}' $FILE

awk -F"," '{a = -log($16)/log(10); printf("%0.4f\n", a)}'

 awk -F, '{a[$1]+=$2;c[$1]++}END{for(k in c)print c[k], k","a[k]}' file|sort -nr|awk 'NR<3&&$0=$2'

awk -F, '{a[$1]=$2} END{for (i in a) print i > a[i]}' file

awk -F, '{a[$3/$2] = $3/$2; b[$3/$2] = $0} END {c = asort(a); for (i = 1; i <= c; i++) print b[a[i]]}' inputfile

 awk -F, '{a=$0;gsub(/ /,"",$2);if(length($2)>5)print a}' file

awk -F, '{arr[$2]++; if (FILENAME != prevfile) {c++; prevfile = FILENAME}} END {for (i in arr) {if (arr[i] == c) {print i}}}' file*.csv

awk -F, '{arr[$2]+=$1}END{for(i in arr)print i,",",arr[i]}'

awk -F, '{array[$1","$2]+=$3} END { for (i in array) {print i"," array[i]}}' datas.csv

awk -F, '{c[$1]++; t[$1]=$0} END {for(k in c) {if (c[k]==1) print t[k]}}'

awk -F"," '{cnt[$2]+=$3}END{for (x in cnt){printf "%s,%d\n",x,cnt[x]}}' file

awk -F, '{count[$1,$2,$3]++; line[$1,$2,$3] = line[$1,$2,$3] ", " NR} END {for (i in count) {if (count[i] > 1) {v=i; gsub(SUBSEP, FS, v); print "Error: lines", substr(line[i], 3), "collide on value:", v}}}'

awk -F"," '{for (i=2;i<=NF;i++) printf $i" "}' filename

awk -F, '{for (i=3;i<=4;i++) sub("'\''", "", $i)}1' OFS=, file

awk -F, '{for(i=1;i<=NF;i++) if($i>1) {$i="replacement"}}1' OFS=, file

awk -F, '{for(i=1;i<=NF;i++) {if ($i=="alireza") c++;}}{print c; c=0}' inputfile

awk -F, '{for(i=1;i<NF-2;i++)printf("%s,", $i)}{print $NF+$(NF-1)+$(NF-2)}' file

awk -F, '{for(i=2;i<=NF;i++)print $1,$i}' temp

awk -F"," '{for(i=length($3);i>=1;i--){s=s substr($3,i,1)};$3=s;s=""}1' OFS="," file > temp && mv temp file

awk -F\, '{gsub(/[ \t]+$/, "", $2); print $2 ":"}'

awk -F, "{if ($2 == 0 || $11 > 0) printf \"%s,%s,%s,%d,%s,%s,%s,%d:%d:%d,%d,%d\n\", $7,$5,$6,$4,$8,strftime(\"%c\",$9),strftime(\"%c\", $11),$10/(60*60),$10%(60*60)/60,$10%60,$16,$15}"

awk -F',' '{if($1 in a) {a[$1]=a[$1] "," $NF} else {a[$1]=$0}} END {asort(a); for(i in a) print a[i]}' < input.txt

awk -F, '{if(NR>1)printf("%s,%s\n",$1,$(NF-1));}' ip.txt

awk -F, '{print > $1".out"}' your_file

awk -F, '{print > $2; close($2)}' test1.csv

awk -F, '{print >> $2"_"$3"_"$5}' infile.txt 

awk -F, '{print >$3".txt"}' your_file

awk -F, "{print \$$i}"

awk -F, '{print $(NF-1)}' file

awk -F, '{print $1 > $2}' INPUT_FILE

awk -F, '{print $1 "," $2}'

awk -F"," '{print $1","$2","$3":"$4":"$5}' inputfile > outputfile

awk -F, '{print $1, $2}' <<< "$string"

awk -F, '{print $1,$2,$3,$4+$5+$6}' OFS=, file

awk -F, '{print $1,$2}'

 awk -F"," '{print $1}' data.txt

awk -F, '{print $1}' file.txt

awk -F, '{print $1}' inputfile.csv > outfile.txt

awk -F\, '{print $2 ":" $1}'

awk -F, '{print $2}' "$PAYROLL" | grep Salaried 

awk -F, '{print $2}' abc.csv | cut -c 1-5 | sort | uniq | wc -l

awk -F',' '{print $2}' | grep "Salaried" $PAYROLL

awk -F, '{print $3 "," $5}' inputfile.csv

awk -F, '{print $4}' x.CSV | awk -F\  '{print $1}' | sort -u

awk -F, '{print $4}' x.CSV | awk -F\  '{print $1}' |sort|uniq

awk -F, '{printf("%s\t%s", $2, $3) > "Col1.txt"}' file.csv

awk -F, '{s[NR]=$1;e[NR]=$2;} { for (i=s[NR];i<=e[NR];i++) print i","$3","$4} ' Input.txt

awk -F, '{split($1,a,".");print >a[1]"/"$1".out"}' your_file

awk -F, '{split($2,d,"-");print > d[1]}' file

awk -F, '{split($3,ary,/:/); print ary[2]}' input

awk -F, '{system("sleep 1");print  $1}' sample.csv | netcat -lk 9999

 awk '-F,' '{users[$1]+=$2}; END{for (u in users) {printf("%s,%s\n", u, users[u])}}' file1 file2 > sumFile

awk -F- '$4 > 198000 {print}' filename

awk -F- '$4 > 198000 {print}' filename > tmp && mv tmp filename

awk -F"-[0-9][.][0-9]" '{print $1}' file

awk -F"-[0-9]+" '{print $1}'  yourfile

awk -F"-[0-9]" '{$0=$1}1' yourfile

 awk -F- -v OFS="-" 'NF>1{l=length($1);if(l<2||l>3)$2=" "$2}7' file

awk -F- -v OFS="-" '{for(i=NF-1;i>=1;i--){l=length($i);if(l<2||l>3)$(i+1)=" "$(i+1)}}7' file

awk -F- 'NF<=2' file

awk -F- 'NF<=2' file > tmp_file && mv tmp_file file

awk -F"-" '{ print $3 }'

awk -F"-" '{t=20130910130000;split($2,a,"\.");}a[1]>t' your_fle

awk -F. '$1 != x; { x = $1 }' file 

awk -F'.' -vs="$start_time" -ve="$end_time" '$1>s && $1<e' logfile

awk  -F. -v OFS=. '/_AA/,/#else/ {if (/[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+/) {$NF=$NF+1}}; {print}' file > tmp && mv tmp file

awk -F"." -v OFS=".\n;" '{ $1=$1; print $0 }' filename.txt

awk -F"." -v OFS=".\n;" '{ $1=$1; print $0 }' filename.txt > outfile.txt

awk -F. '...' <<< $VERSION

awk -F. '/[0-9]+\./{$NF++;print}' OFS=. <<< "$VERSIONS"

awk -F. '/[0-9]+\./{$NF+=1;OFS=".";print}' <<< "$VERSIONS"

awk -F\. 'NF==4 {$0=substr($0,1,4)"."substr($0,5,4)"."substr($0,9)}1' OFS=\. file

awk -F. 'NR > 1 && $1==a && $2 + 0 != b + 1; { a=$1; b=$2 + 0 }' file

awk -F. 'NR > 1 && strtonum("0x" $1) == a && strtonum("0x" $2) != b + 1; { a=strtonum("0x" $1); b=strtonum("0x" $2) }' file

awk -F. 'NR==FNR{getline x;a[$2$3]=x;next}$2$3 in a{print;print a[$2$3];next}1' templatefile inpfile

awk -F. 'strtonum("0x" $1) != x; { x = strtonum("0x" $1) }' file

awk -F. '{$NF+=1; OFS="."; print $0}'

awk -F. '{print $(NF-1)}' inFile.txt

awk -F. '{print $1$2}' <<< "3.10.34-1-MANJARO"

awk -F. '{print $1}' your_file | sort -u | xargs mkdir

awk -F. '{print length($0),NF,length($1)}'   yourfile

awk -F'.' '{printf "%03s%03s\n", $3, $4}' /metadata | cut -c3-6 > /metaport

awk -F'.' '{printf "%d%03d\n", $3 % 10, $4}' /metadata > /metaport

awk -F. '{s="";for (i=NF;i>1;i--) s=s sprintf("%s.",$i);$0=s $1}1' file

awk -F/ '!x[$1]++' file

awk -F/ -vOFS=/ '{$1=""}1' input

awk -F'/|,' '{b=mktime($5" "$4" "$3" 00 00 00 00");a=(systime()-b)/(365*24*60*60);a=a==int(a)?a:int(a)+1;print $0","a}' file

awk -F/ '/^FILE_PATHS/{$4=$4=="REL"?"AUNT":$4;$4=$4=="SIB"?"BROTHER":$4;print $4}' file.txt

  awk -F/ '/^FILE_PATHS/{$4=$4~"^(REL|SIB)$"?$6:$4;print $4}' file.txt

awk -F'/' '/std_out_file:|std_err_file:/{print ($(NF-1)=="batchlog" ? "$BATCH" : "$CONSOLE") "LOG_DIR/"$NF}' file

awk -F/ 'gsub($3,"anotherdomain",$0)' <<< "$urls"

awk -F/ '{print $1"/"$2"/"$3}' file

dir_name=$(awk -F'/' '{print $2}' <<<$path_dir)

ver=$(awk -F/ '{print $4}' <<< "$line")

awk -F'/' '{print $NF}' Input.txt

awk -F/ '{print $NF}' file

awk -F/ '{print $NF}' file.txt

awk -F":" ' $3 > 499 {print $1} ' /etc/passwd | sudo grep -f - /etc/shadow > shadow.out

awk -F':' '$0=$1 ":"' file

awk -F: '$1=="Account number"{print $2;exit;}' file

awk -F: '$1=="Ford" && $4=="Red" { c+=$5 } END { print c }' file

awk -F':' '$2 > 0 { split($1, a, "."); print a[5]}' file

awk -F: '$2~/12.345.678.99/{print $1}' inputfile

awk -F: '$2~/pattern_to_match/{print $1}' filename

awk -F: '$3 > 999' /etc/passwd

awk -F: '$3 !~ /^ ?#/ { print }'

awk -F: '$3 !~ /^[[:space:]]*#/ { print }'

awk -F':' '$3 == 2' Input.txt

awk -F':' '$3 == 2' Input.txt | wc -l

awk -F: '$3>=500 {print $0}' /etc/passwd

awk -F: '$4>2500 && $4 < 5500' file

$ awk -F':' '$7=="/bin/csh" {print $5}' /etc/passwd

awk -F: '($2 != $3 && $3 != $4){print $0":foobar"}' file

awk -F': *' 'NR==FNR{c[$2]++;next}$2 in c{print $2,c[$2];delete c[$2]}' file file

awk -F': | ' '{print $1,$2}' list.txt > /tmp/t.tmp && mv /tmp/t.tmp /path/to/list.txt

awk -F: -f script_above.awk /etc/passwd

awk -F: -v OFS=":" '$5="01"'

 awk -F: -v OFS=":" -v s="$1" -v r="$2" '$1==s{$2=r}7' file > newFile

awk -F: -v awkvar="$user" '$1==awkvar {print $7}' /etc/passwd

awk -F: -v user=$USER '$1==user' /etc/passwd

awk -F: -v year=$(date +"%Y") '{ split($4, dob, "/"); if (year-dob[3] <= 60) print $1 }' file.txt

awk -F: -v year=$(date +"%Y") '{ split($4, dob, "/"); print $1, "is", year-dob[3], "years old" }' file.txt

awk -F'":"|","|"}' '{print $2,$4,$6,$8}' file

awk -F":|," 'BEGIN {split("ABCDEFGHIJKLMNOPQRSTUVWXYZ",a,"");for (i=1;i<=27;i++) x[a[i]]=i} {printf "%s,",x[$1];for (i=3;i<NF;i+=2) printf "%s,",$i;print $NF}' OFS=, file

awk -F: '/LOC/ {sum += $3;} END {print sum;}' InputFileName

awk -F: '/^[[:alpha:]]/ {iface=$1; next} /baseTX/ {print iface; exit}'

awk -F":" '/^Employee/{a=$NF;next}{print $0,a}' file

awk -F: '/^USER:/{u=$2} /POSITION:/{p=$2} /CLIENT:/{c=$2} /APPLICATION:/{print u,p,c,$2}' yourfile

awk -F: /^bar/ {print $2} /local/foo.txt

awk -F: /^bar/ {print } /local/foo.txt

awk -F: '/^lg325:/{$6="/sbin/nologin"}1' OFS=: file

awk -F: '/eval/{a[$1]+=$2}END{for(i in a)print i ": " a[i]}' results.txt

n=$(awk -F: '/name/{print $2}' infile)

awk -F: 'BEGIN {OFS="\t"; print "Turbine\047s" OFS "My"} /Turbine/ {tflag=1; mflag=0} /My/ {mflag=1; tflag=0} /Full speed/ {if (tflag) {T=$2; tflag=0}; if (mflag) { print T OFS OFS $2; mflag=0}}' inputfile

awk -F: 'BEGIN{OFS=":"} /cjares/{temp=$1; $1=$2; $2=temp; print}' /etc/passwd

awk -F: 'BEGIN{print "USER\t\tHOME\t\tSHELL"}{printf("%s\t\t%s\t\t%s\n", $1, $6, $7)}' /etc/passwd

awk -F: 'FNR==NR{a[$1]=$0;next}{if($1 in a){print a[$1];} else {print;}}' file2 file1

awk -F: 'NR==7 || NR==8 {print $5}' file

awk -F: 'NR==FNR {a[$2]; next} !($2 in a)' file2 file1

awk -F":" 'NR==FNR {x[$1] = $0; y[$1] = $2; next} ($1 in x) {print $2":"y[$1]}' file1 file2

awk -F: 'NR==FNR{a[$1$2];next}$1$2 in a' file_a file_b > result.txt

awk -F: 'NR==FNR{a[$1,$2];next}!(($1,$2) in a)' excludes.txt all.txt

awk  -F:  'NR~/^(7|8)$/ {print $5}' file

awk -F: 'length($1)==4{print $1}' /etc/passwd

awk -F: '{ printf "%014i: %s\n", $1,$2 }' input.txt

awk -F: { printf "uid: %s\n cn: %s %s\n sn: %s\ntel: %s\n", $1, $3, $2, $3, $4 } INPUTFILE

awk -F: '{a[++i]=$0;if(i==3)f=$2}i==4{for(x=1;x<=i;x++)print a[x]>f".txt";i=0}' file

$ awk -F: '{cmd = "last "$1; cmd | getline result;printf "%s", result}' /etc/passwd

 awk -F: '{f=$1?$1:f; print > f}' file

awk -F: '{f=$1?$1:f; print >> f; close(f)}' file

awk -F: '{for (i=1; i<=NF; i++) if ($i !~ /foo/) {printf "%s%s", $i, (i==NF? RS : FS)}}'

awk -F: '{gsub(/,/," ",$3);print $3}' file

awk -F: '{if ($3 > 999) print "user", $1, "uid", $3}' /etc/passwd

awk -F: '{print $1':'$2}' inputFile > outFile

awk -F: '{print $1}'

awk -F: '{print $2":"$1}' input-file

awk -F":" '{print $2, $4}'

awk -F":" '{print $2, $4}' data.txt

awk -F: '{print $2,$1}' OFS=: input-file

awk -F: '{print $NF; for(i=NF-1; i; i-- ) print ":"$i }' input-file

awk -F":" '{print $NF}' file > output.txt

awk -F':' '{printf "%s %s",$2,ORS=NF?"":"\n"}END{print "\n"}' file

awk -F: '{printf "%s, ", $1} END {print ""}'

awk -F: '{printf "COUNTRY: %s\nCAPITOL: %s\nTIMEZONE: %s\n\n",$1,$2,$3}'

awk -F: '{v[$NF]+=$2*$3}END{for(x in v)print x, v[x]}' file 

awk -F';' '!a[$2 FS $3]++' file

awk -F';' '!seen[$2]++' file

awk -F';' '$0=length($1)<5?"0" $1 FS:$1 FS'

awk -F\; '$1!=l{c=$2}{$2=c++}{l=$1}1' OFS=\; input

awk -F\; '$1!=l{c=0}{$2=++c}{l=$1}1' OFS=\; input

awk -F\; '$1=="1234" || $1=="1390" {print $2,$4}' file

awk -F';' '$3+0 > 100' yourfile

awk -F';' -v OFS=';' '$6=0;7' file

PO_list=$(awk -F";" -v col="$1" '!seen[$col]++ {print $col}' test.csv)

awk -F";" -v col="$1" '{ print > "fisier_"$col".csv" }' test.csv

awk -F';' -v col=$col -v pat="$val" '$col ~ pat' $input

awk -F";" 'BEGIN{OFS=";"} {$3="";print }' file3|sed 's/;;/;/'

awk -F";" 'NR==FNR{a[$0]}{for(i in a){if(i==substr($3,4))print substr($1,2),substr($3,4),$2 >> substr($3,4)}}' Pattern.txt hugefile

awk -F";" 'NR==FNR{a[$0]}{x=substr($3,4);for(i in a){if(i==x)print substr($1,2),x,$2 >> x}}' Pattern.txt hugefile

awk -F';' 'NR==FNR{a[$1]=$2;next}{$2=a[$2]}1' lookup data

 awk -F";" 'NR==FNR{a[$1]=$2;next}{if ($2 in a)print a[$2]";"$0;else print "Not Found"";" $0;}'  File2 File1

awk -F";" 'NR==FNR{a[$1]=$2;next}{if (a[$1])print a[$1],$0;else print "Not Found", $0;}' OFS=";" f2.txt f1.txt

awk -F';' '{ $35 = "replacement" }' < oldfile > newfile

awk -F\; '{for (i=1;i<=NF;++i) { print i" "$i }}'

$ awk -F\; '{for(n=2; n<=NF; n++) { printf("%s;%s\n",$1,$n); }}' input.txt

awk -F';' '{print $1}' filename

awk -F\; '{print $3}' file1 > paths.txt

 awk -F';' '{x=$1;sub(/\\\\[^\\]+\\[^\\]+\\/,"",x);gsub(/\\/,"/",x);print $0"/"x}' file

$ awk -F= '!a[$1]++' first.properties second.properties

awk -F'=' '$1 == "appid" {print $2}' filename.txt

awk -F= '$1 ~ /^(session|customer)$/ {if (!($1 SUBSEP $2 in a)) {ids[$1]++; a[$1, $2]}} END {for (id in ids) {print "Count of unique", id, " " ids[id]}}'

awk -F'=' '$1 ~ /appid/ {print $2}' filename.txt

awk -F= '$1=="Icon" {print $2}' "$file" >> /tmp/text.txt

awk -F= '$1~/^ *Icon/ {print $2}' file

awk -F= '$2 ~ /^ *(AA|AB|AC|AD) *$/ {print "passed"}'

awk -F= '$2 ~ /^(AA|AB|AC|AD)$/ {print "passed"}'

awk -F'=' '$2+0>10' file

awk -F= -vOFS="=" 'gsub(/\./,"_",$1)+1' file.properties

awk -F"=" -v newval="$var" '/param2/{$2=newval;print;next}1' filename > newfile

awk -F= -v "searchKey=$SEARCHKEY" '$0 ~ searchKey {print $2 " => " searchKey}' input

awk -F= -v x="P0000024" '$1==x{print $2}' file

awk -F'=| ' '/record/ {print $2}'

awk -F'=' '/ t=/ { print $NF }' /sys/bus/w1/devices/28-00000465f413/w1_slave 

T1FILE=$(awk -F'=' '/ t=/ { print $NF }' /sys/bus/w1/devices/28-00000465f413/w1_slave)

awk -F= '/BUILD_VERSION/{print $2}' input | tr -d "[' ;]"

awk -F= '/OPC_NODENAME=/{print $2}' file

awk -F"=" '/param2/{$2="new value";print;next}1' filename > newfile

distro=$(awk -F= 'END { print $2 }' /etc/lsb-release)

awk -F= 'NR==FNR {a[$1]++;next}; !a[$1] {print $1, "line", FNR}' fileOld fileNew

 awk -F= 'NR==FNR{A[$1]=$2; next} $NF in A{print $0,A[$NF]}' file2.txt FS=\| OFS="|" file1.txt

awk -F= 'NR==FNR{A[$1]=$2; next} $NF in A{print A[$NF]}' file2 FS=\| file1

awk -F= 'NR==FNR{a[$1]++;next}!($1 in a)' fileB fileA > fileC

awk -F'=' 'NR==FNR{a[$1]=$0;next}!($1 in a)' A B

awk -F'=' 'NR==FNR{a[$1]=$0;next}!($1 in a)' B A

 awk -F= 'NR==FNR{a[$1]=$2;next} {for(x in a) if($0~"\\|"x"$"){print $0"|"a[x];break}}' file2 file1

awk -F'=' 'NR==FNR{a[$2]=$1;next} $2 in a{print a[$2],$1,FS,$2}' checkA checkB

awk -F= 'OFS=FS { gsub("-", "_", $1); }1' file.txt

awk -F= '{ sub(/,.*/,"",$2) } /^Customer ID/ { r = $2 OFS $3 } /^Inventory ID/ { print "\"" r, $2, $3 "\"" }' OFS="\", \"" inventory.txt

awk -F'=' '{a[$1]++;v[$1]=$0}END{for(i in a)if(a[i]==1)print v[i]}' A B

awk -F= '{gsub("_",".",$1)}1' OFS="=" ./infile

awk -F= '{print $1}' thefile

awk -F'=' '{z[$1]=z[$1]" "$2} END{for(i in z){print(i","z[i])}}' file_name.txt

awk -F'"?,"' -v OFS=',' '{print $2, $3}' file

awk -F'"?,"' 'BEGIN{OFS=","}{print $2, $3}' file

awk -F'"?,"' '{print $2, $3}' file

awk -F'"?,"' '{printf "\"%s\",\"%s\"\n", $2, $3}' file

awk -F@ '$2>=from && $2<=to' from="$(date +%H:%M:%S -d -30min)" to="$(date +%H:%M:%S)" file

awk -F@ '$2>=from' from="$(date +%H:%M:%S -d -30min)" file

awk -F@ '$3 ~ /pattern/ { OFS= "@"; $3 = "replace"; }'

awk -F@ '$6~/^3/'  yourfile

awk -F@ -v pattern="$find_me" '$2 ~ "^" pattern "$"' input.txt

awk -F@ -v pattern="^$find_me\$" '$2 ~ pattern' input.txt

awk -F'@' 'NR==FNR{a[$1]=$0;next}$1 in a{print a[$1]" : "$0}' net.txt com.txt

awk -F@ '{for(i=1;i<=NF;i++){printf "%-20s", $i};printf "\n"}' input.csv

awk -F"@" '{n=split($1,a," ");split($2,b," ");for(i=1;i<=n;i++)print a[i],b[i]}' your_file

awk -F'EXPIRYTIME:\\s*' -v d="20140612" '{s=$2;sub(/\].*/,"",s)}1*s>d*10^6' log

 awk -F"HTTP/1.[0-9]\" " '{print $2}' filename | cut -d' ' -f 1

awk -FN -vcount=3 'NF<=count'

awk -FN 'NF<=count' count=3

awk -F\O '{$2=""}1'

rxBytes=$(awk -F'RX bytes:' 'NF>1{sub(/ .*$/,"",$2);print $2}')

awk -F"The http port is " '{f=$2+0} END {print f}' file

awk -F'\\s*=[^(]*\\(|,\\s*"|"\\);' '{x=split($1,a," +"); print a[x], $2, $(NF-1)}' file

awk -F'^' -v myvar=$myvar '{printf "set %s:%s:%s %s\n",$1,$2,myvar,$7}' todel.txt

awk -F'^"|","|"$' '{print $2,$3}' ./infile.csv

awk -F_ '!a[$1]++' <(sort -t_ -nk2 abc.lst)

awk -F_ '$0=$1'

awk -F_ '$4>c+1{print p"\n"$0}{p=$0;c=$4}'

awk -F"_" -f <file> '{ print $1" "$2" "$3"_"$4 }'

awk -F_ -v OFS=_ '{print $1, $2, $4, $3}'

awk -F'_' '/ZINC/{print $1;next}1' file

awk -F_ 'NF > 3 {print FS $(NF-3) FS}' file.txt

awk -F_ '{print $1 " " $2}'

awk -F'flow' 'NF>1{print FS$NF}' file

awk -F'line_[0-9]+:' 'NR==FNR {a[$2]; next} !($2 in a)' file2 file1

awk -F'\n' 'NR%2==1 {line=$0}; NR%2==0 {print $1 "\n" line}' /tmp/foo

awk -F'\t' '!/\t\.\t/' input.txt > out.txt

awk -F'\t' '!a[$1,$2]++ && !a[$2,$1]++' file

awk -F"\t" '$2 == "victorian" { print $1"\t"$3 }' file.in

awk -F"\t" '$2=="01020300" && $8=="FFFFFF00"' file

awk -F'\t' '$7 != "" { print "FORMATTED JSON HERE WITH " $2 " AND " $7 }' * > data.json

awk -F"\t" '$9 ~ "missense" || $9 ~ "nonsense" ' input > output

awk -F'\t+' 'NF == 3' INFILE > OUTFILE

 awk -F'\t' -vOFS='\t' '!$2{$2=$3":"$4}1' file

 awk -F'\t' -v OFS=";" '$1=$1' file

 awk -F'\t' -v OFS=";" 'NR>1{$1=$}1' file

 awk -F'\t' -v OFS=";" 'NR==1{$1=$1}1' file

awk -F'\t' -v OFS='\t' 'NR==FNR{a[$2FS$3]=$1;next}$2FS$3 in a{print $0,a[$2FS$3]}' file1 file2

awk -F'\t' -v OFS='\t' 'NR==FNR{a[NR]=$0;next}{print $1,$2,a[(FNR-1)*3+2],$3,a[FNR*3],$4}' file2 file

awk -F'\t' -v OFS="\t" '{$3=$NF OFS $3;$NF=""}7' file

awk -F'\t' -v OFS='\t' '{sub(/phone-[0-9]+/,"&\t&",$2)}7' file

awk -F'\t' -v OFS='\t' '{t=$10; split(t,a,/[:,]/)}(a[3]+a[2])>=30' oldcsv > newcsv

 awk -F'\t' -v OFS='\t' '{x=$1;$1="";a[x]=a[x]$0}END{for(x in a)print x,a[x]}' file

awk -F'\t' -v OFS='\t\t' -v ldate='20140101' '{split($2,fld,/_/); if(fld[1]<=ldate) print $1,$2}' file

awk -F"\t" ...

awk -F'\t' '....'

awk -F'\t' '/\[Header B\]/{f=1;next} /^$/{f=0} f{gsub(/\t/,",");print}' file

awk -F"\t" '/hello/ {print $0}' data.txt

awk -F"\t" 'BEGIN{IGNORECASE=1} /hello/ {print $0}' data.txt

awk -F'\t' 'FNR==NR{a[$1]++;next}a[$1]' file1 file2

  awk -F"\t" 'NF==6' file >temp && mv temp file

awk -F\t "NR>1{split($2,date,\"[/ ]\");print>date[3]strftime(\"%%b_\"$3\".txt\",(date[2]-1)*31*24*60*60)}" input.txt

awk -F\t "NR>1{split($2,date,\"/\");print>date[3]strftime(\"%%b_\"$3\".txt\",(date[2]-1)*31*24*60*60)}" input.txt

awk -F'\t' 'NR==1 {  for(i=1;i<=NF;i++) { names[i] = $i }; next } { for(i=1;i<=NF;i++) {gsub(/"/,"",$i); print $i >> names[i] }}' example.tsv

awk -F'\t' 'NR==1 {  for(i=1;i<=NF;i++) { names[i] = $i }; next } { for(i=1;i<=NF;i++) {gsub(/^"|"$/,"",$i); print $i >> names[i] }}' example.tsv

awk -F'\t' 'NR==FNR.....'

awk -F'\t' 'NR==FNR{a[$0];next} $1 in a' file1 file2

awk -F'\t' 'function abs(x){return ((x < 0.0) ? -x : x)} {if (abs($9) < 500) print $0}'

awk -F'\t' 'match($0,/<html>.*<\/html>/){print substr($0,RSTART,RLENGTH) > $2}' file

awk -F\t print{$6} inputfile.txt > outputfile.txt

awk -F'\t' '{ for (i=2; i<=NF; i++) print $1 "\t" $i "." }' ${file}

awk -F'\t' '{ for(i=3;i<=NF;i++)if($i ==".") next; print}' input.txt > out.txt

awk -F"\t" '{ print $1, $5 }' filename > newfilename 

awk -F'\t' '{a[FNR] = a[FNR] (NR==FNR?"":FS) $8 FS $9} END{for (i=1;i<=FNR;i++) print a[i]}' s1s2.txt .... s19s20.txt

awk -F"\t" '{for (i=1;i<=NF;i++) {if($i~/locus_tag/) printf $i"\t"; if($i~/product/) printf $i"\n"}}' file

awk -F"\t" '{for(i=2;i<=4;++i) printf "%s%s", $i, (i==4?RS:FS)}'

awk -F"\t" '{if (match(tolower($0), "hello")) print $0}' data.txt

awk -F'\t'  '{print $1, $2, $3}'   filename

awk -F'\t' '{print $5}' file

 awk -F'user' 'NR%2{a[++i]=$1;s+=$1}END{asort(a);print "best: "a[1];print "worst: "a[length(a)];print "avg: "s/length(a)}' file   

awk -F'user' 'NR%2{print $1}' file 

awk -F'val.int.' '$0=$2' file

awk -F'"' -v OFS="\"" '{for(i=1;i<=NF;i++)if($i~/^\$[0-9.,]+$/)gsub(/[$,]/,"",$i)}1'

awk -F"|" ' { print substr($10,1,11) }'  _file_name_ |sort -u > _output_file_

$ awk -F\| '!a[$1]++{print $1}' infile

awk -F\| '!seen[$5]++ && $0=$5' file

awk -F'|' '!x[$2]++' 

awk -F\| '$1~$2' file.txt

awk -F\| '$1~/[[:space:]]+$/'

awk -F'|' '$2=="RC"{print >"RC_RECORDS.TXT";next} $2=="RE"{print >"RE_RECORDS.TXT";next}{print >"OTHER_RECORDS.TXT"}' file

awk -F'|' '$2=="RC"{print >"RC_RECORDS.TXT";next} 1' file | awk -F'|' '$2=="RE"{print >"RE_RECORDS.TXT";next} 1' > OTHER_RECORDS.TXT

awk -F\| '(printed!=0 && /ELIGIBLE/) {print; printed=0;} (!seen[$1] && $1 !~ /ELIGIBLE/) { print; printed = 1; seen[$1] = 1;  }' 

awk -F'|' '++a[$1] <= 3' infile

awk -F"|" -f parse.awk *inputparams.txt

awk -F'|' -v OFS='|' '{for(i=NF+1;i<=33;i++)$i=""}1' file.csv

awk -F'|' -v OFS='|' '{gsub(/[0-9]/,"",$1)}7'  file

awk -F\| -v s="3500" -v e="8000" '$2>=s&&$2<=e' file

awk -F"|" ...

awk -F\| '/<pattern>/{print $2;}{next;}' file

awk -F"|" '/^r/{a=$1;b=$2;c=substr($3,0,20)}/^   M/{gsub(/   M /," ");print a"|"b"|"c"|"$0}' your_file

awk -F'|' 'BEGIN{OFS="|"}{for(i=1;i<NF;i++){if($i==""){$i=l}else{l=$i}}print}'

gs_version=`awk -F'|' 'Ghostscript/ {version=$3; print version}' $str`

awk -F'|' 'NF != 36' filename

awk -F'|' 'NR>1{printf(",")} {printf("%s",$1)}'

awk -F"|" 'NR==FNR{a[$0]++;next} !(a[$0])' <(tr -s '|' < 2.txt) 1.txt

awk -F'|' 'NR==FNR{a[$0];next;}$1 in a' fileA fileB

awk -F'|' 'NR==FNR{a[$0];next}$1 in a' a.unl b.unl

awk -F"|" 'NR==FNR{a[$1]++;next} !(a[$1])' 2.txt 1.txt

awk -F"|" 'NR==FNR{a[$1]=$2;next}{if (a[$1]) print}' small.txt large.txt

awk -F'|' 'NR==FNR{a[$2]=$1;next} $1 in a { print a[$1],$1,$2 }' OFS="|" file1 file2 > file3

awk -F'|' '{OFS="|"; a[$1]++; if (a[$1] > 1) $1=" "; print;}' file

 awk -F'|' '{OFS="|"; if ($1 ~ /trng-linx/ && $2 ~ /17\.2\.18\./) $4=" B "}1' tasklist.txt

awk -F"|" '{a[$1]=a[$1]","$2;next}END{for(i in a)print i"|"substr(a[i],2)}' your_file

awk -F"|" '{a[$2]=a[$2]","$1;next}END{for(i in a)print substr(a[i]"|"i,2)}' your_file

awk -F\| '{for(i=1;i<=NF;++i) print $i > "File_" i}' input_file

awk -F"|"  '{if (!h[$2]) {h[$2]=1; print;}}'

awk -F"|" '{print >> $1"_"$2".txt"}' file

awk -F\| '{print $1 > "File_1"; print $2 > "File_2"}' input_file

awk -F"|" '{print $1, "|", $5}' input

awk -F'|' '{print $2" "$1}' foo 

awk -F"|" '{print $NF}'

awk -F'|' '{print NF; exit}' stores.dat 

awk -F\| '{print NF}'

awk -F'}+|{+| ' '{for (i=1; i<=NF; i++) if ($i ~ "[0-9]") print $i}' file.txt

 awk -F"}," '{for(i=1;i<=NF;i++){print $i}}' file.json | awk -F"\"[:,]\"?" '$4>"2013-01-01"{printf "%s:%s:%s\n" ,$2,$4,$8}'

awk -F'~\^' -v OFS=, '{gsub(/\^~/,ORS); $1=$1}1' file

awk -F~ -v OFS='~' '$3=19+NR' file

SOMETHING=$(awk -F "." '/^ something/{split($1, a, " "); print a[2]}' somefile.conf)

var_check= echo $str |awk -F . '{if (NF>1) {print $NF}}'

awk -F "." '{print $1}'  inputfile

awk -F'"' '/<user=/{ print $2 }' file

awk -F'"' '/<user=/{ print $2 }' input.xml

awk -F "/" '{print $NF}' input

awk -F "/" '{print $NF}' input.txt

awk -F '//' '{ n = gsub(/ /, "", $1); print n }'

awk -F'"' '/android:versionName/{print $(NF-1); exit}' manifestFile

awk -F'\02' '{for(x=1; x<=NF; x++) {nf=split($x,f,"\03"); printf "%s",f[1]" -- " f[2] (x==NF?"": ",")}print ""}' inputfile > outputfile.txt

awk -F1 '/FIELDB2/ { for (x=1;x<=NF;x++) if ($x~"FIELDB2") print $(x+1) }'

awk -F : '$3 ~ /startScript/ { print }'

awk -F : -v OFS=: -v cust="$cust" -v cust="$cust2" -v hdb="$hdb" 'tolower($1)==cust && tolower($2)==hdb {$1=cust2;}1'

awk -F : -v OFS=':' '{ cmds}' file

awk -F ":" -v dt="$DATE_HOUR" '$1==dt' log.txt 

awk -F ":" 'NR == 1 { split($0, array, FS) } NR >= 2 { for (i=1; i<=NF; i++) printf "%s:%s ", array[i], $i; printf "\n" }' file.txt

awk -F : 'NR==FNR{a[$1];next} !($2 in a) ' todelfromfull.txt full.txt

awk -F ":" '{ if ($1 == "Ford" && $2 == "Mondeo") {printf "Car: "$1" "$2", made in " $3", "} else {next}; if($5 == "0") {printf "no previous owners.\n"} else {printf $5" previous owner(s).\n"}}' 

awk -F ":" '{ printf "Car: "$1" "$2", made in " $3", "; if($5 == "0") {printf "no previous owners.\n"} else {printf $5" previous owner(s).\n"}}' 

 awk -F ':' '{ s3 += $3;s4+=$4;s5+=$5} END{ printf "%.2f,%d,%d,%f", s3,s4,s5,s3/s5 }' input

awk -F ":" '{sub(/^ +/, "", $2); print $1"|"$2}' file

awk -F ':|,' '{ print NF }' 

awk -F ";" -- '{ t = $3; gsub(/"/, "", t); n = split(t, a, /, /); for (i = 1; i <= n; ++i) print $1 ";" $2 ";\"" a[i] "\";" $4 ";" $5 ";" $6 }'

awk -F ";" -- '{ t = $3; gsub(/"|from /, "", t); n = split(t, a, /, | to /); for (i = 1; i <= n; i += 2) print $1 ";" $2 ";\"" a[i] "\";\"" a[i + 1] "\";"$4 ";" $5 ";" $6; }'

awk -F = '$1=="version" {print $2}' file

awk -F = "$1==\"version\" {print $2}" file

$ awk -F'"' 'BEGIN{RS="\n\n";OFS=""} NR==FNR {c[tolower($2)]=$4; next} {print $1,"\"",$2,"\"",$3,"\"",c[tolower($2)],"\"\n"}' file2 file1 >tmp && mv tmp file1

awk -F'"' 'NF==2{sub(/"/,"")}7' file

awk -F'"' 'NR==2{print $2}'

awk  -F'"' 'NR==FNR && $1=="msgid " {id=tolower($2)} NR==FNR && $1=="msgstr " {c[id]=$2} NR==FNR {next} $1=="msgid " {id=tolower($2)} {if ($1=="msgstr ") print "msgstr \"" c[id] "\""; else print $0}' file2 file1 >tmp && mv tmp file1

awk -F "O" '{ $2=""; print $0}' file.txt

awk -F "O" '{ print $1}' file.txt

awk -F '\n' -v RS='' -v ORS='\n\n' 'NF>1' input.txt

awk -F '\t' '$3==2 && $4 ~ /add|remove/' filename

awk -F '\t' '$7~/3\047UTR/{c++} END{print c+0}' a.txt

awk -F '\t' 'BEGIN { } { if (max[$1] == "" || $2 > max[$1]){ max[$1] = $2 } } END { for (var in max) { print var,"\t",max[var] } } ' tab-limited-data-file

awk -F '\t' 'BEGIN {OFS=FS} {for (i=1; i<=NF-1;i++) if ($i == prev[i]) $i = ""; else prev[i] = $i; print}' inputfile

awk -F '\t' 'BEGIN {OFS=FS} {if ($1 == prev1) $1 = ""; else prev1 = $1; if ($2 == prev2) $2 = ""; else prev2 = $2; if ($3 == prev3) $3 = ""; else prev3 = $3; print}' inputfile

 awk -F '\t' 'FNR==NR{ a[$1] = $2; next }{ print $1 FS a[$1] }' tmp1.tsv tmp2.tsv

awk -F '\t' '{if (! (($1 ~ ".*EBI.*") || ($2 ~ ".*EBI.*"))) {print $0} }'

awk -F '_' '{sub(/-.*$/, "", $3); print $3}'

awk -F '_ver' '{a[$1]=$2>a[$1]?$2:a[$1]}END{for(x in a)print x FS a[x]}'

awk -F 'cn=|,' 'BEGIN {srand(); OFS = ""} {n = split($2, a, ""); for (i = 1; i <= n; i++) {if (a[i] ~ /[[:digit:]]/) {new = new int(rand() * 10)} else {new = new sprintf("%c", int(rand() * 26 + 97))}}; $2 = "cn=" new ","; print}'

awk -F "searchTerm" '{print NF-1}' $(<subset.txt) >> output.txt

awk -F "\t" '$5 && $6 {gsub("\"", "\\\"", $6); printf "INSERT INTO nodes (name, timestamp, lat, lon, cid) VALUES (\"%s\", \"%s\", \"%s\", \"%s\", \"%s\");\n", $6, $4, $2, $3, cid}' cid=$cid

awk -F "\t" -v OFS="\t" '{gsub(/^999$/, "XXX", $3); print}' test.txt

awk -F "\t" 'NR==FNR{a[$2]=$0; next}$1 in a {print $0, a[$1]}' file2 file1

awk -F "\t" '{gsub(/^999$/, "XXX", $3); print}' OFS="\t" test.txt

awk -F "\t" '{if($5 != "" && $6 != "") print "INSERT INTO nodes (name, timestamp, lat, lon, cid) VALUES (\"",$6,"\",\"",$4,"\",",$2,",",$3,","'$cid'");"}' 

awk -F \x22 "{count+=$2}END{print count+0}" "input.txt" > "output.txt"

awk -F '{{|}}' 'NF>1{for(i=2; i<=NF; i+=2) print $i}'

awk -F '|' -v OFS='|' '{ gsub(/,/, "", $5) } 1' file

awk -F '|' '/^99/ { print $NF }' file

awk -F '|' 'BEGIN {count=0;} $2==Smith {count++; print count". "$1}' customer

awk -F "|" 'FNR==NR { a[$1]; next } $5 in a' file1 file2

awk -F '|'  'NF != 35 {print NR, $0} ' your_filefile

awk -F "|" 'NR==FNR{a[$1 $2 $3 $4]++}!a[$1 $2 $3 $4]' NEWFILE OLDFILE > OUTFILE

awk -F '|' 'x!=$1{x=$1; y+=(NR==1?0:100000)}; {print $0, y}' input.txt

awk -F '|' '{ $3=1000 + NR }1' OFS='|' file

awk -F "|" '{ print > $NF ".txt" }' file

awk -F "|" '{ print > $NF }' file

awk -F "|" {' sub(".*@","",$5); print $5 '} test.log

awk -F '|' '{ temp=$1; $1=$3; $3=temp; print }' data.txt

awk -F '|' '{print $7}'

awk -W version 

awk -c --re-interval -F'[|]{4}' '{ printf "Field 1 -> %s\nField2 -> %s\n", $1, $2 }' infile 

awk -c -F'[|]+' '{ printf "Field 1 -> %s\nField2 -> %s\n", $1, $2 }' infile

awk -f ./script.awk file.txt

awk -f ./script.awk values.file $(find . -type f -regex ".*\.\(txt\|doc\|etc\)$")

awk -f `which script.awk` arg1

awk -f a.awk 2.txt 1.txt > 3.txt

awk -f a.awk FS=";" A.txt FS=" - " B.txt

awk -f a.awk dhcp_b dhcp_a

awk -f a.awk file

awk -f add-server-name.awk httpd.conf

awk -f c.awk B.txt A*.txt 

awk -f c.awk test.xml

 awk -f commandFile file1

awk -f conv.awk input.txt

awk -f dms2deg -e 'NR>1 { $4 = dms2deg($4); $5 = dms2deg($5) } $1=$1' infile

awk -f dms2deg -e 'NR>1 { $4 = dms2deg($4); $5 = dms2deg($5) } $1=$1' infile | column -t

awk -f dms2deg -e 'NR>1 { print dms2deg($4), dms2deg($5) }' infile

awk -f e.awk Longstringfile > Resultfile

awk -f e.awk input.txt

awk -f exclude.awk multiple_hits.list matched_sequences.list

awk -f ext.awk DATA_FILE

awk -f ext.awk file

awk -f ext.awk input.txt

awk -f extract.awk input1 input2

$ awk -f f.awk file

awk -f f.awk input.txt

awk -f factorial.awk

 awk -f file.awk < file.dat

awk -f file.awk fileA fileB

awk -f findfunc.awk name=function_name source.c

awk -f foo.awk data.input

awk -f getbias.awk '<your script>' file1

awk -f gettoken.awk logfile logfile logfile

awk -f logstrip.awk  in.log > out.log

awk -f m.awk file file

awk -f m.awk puppetfile.pp  puppetfile.pp

awk -f makeCSV.awk myInputFile > myOutputFile.csv

awk -f make_csv.awk Sample_Input.txt

awk -f merge.awk <(paste A.txt B.txt) C.txt

awk -f merge.awk file1 file1 

awk -f met.awk subj{1..10}_*.txt

awk -f more-work.awk File1

awk -f myawk.awk config file1

awk -f myscript.awk 1.txt

awk -f myscript.awk domain.txt site.txt

awk -f p.awk file2 file1

awk -f p.awk input.txt

awk -f parse.awk col2=3 infile infile | gnuplot

awk -f parse.awk file2 file1

awk -f parse.awk heading=TABLE n=2 infile

awk -f parse.awk infile

awk -f parse.awk infile

awk -f parse.awk infile

awk -f parse.awk infile infile | gnuplot

awk -f parse.awk input.txt

awk -f pathrefs.awk paths.txt file1

awk -f percent.awk your.file 

awk -f products.awk data.txt

awk -f program <(...) - <<<"$stdout"

awk -f program.awk < my_multi_line_file.txt

awk -f range.awk input.txt

awk -f run.awk

awk -f script.awk

awk -f script.awk

$ awk -f script.awk "$filename" "${file_dir}/id.txt" > "${dest_dir}/id.txt"

awk -f script.awk -v f="ok_start" infile

awk -f script.awk 1.blast 1.fasta

awk -f script.awk HumanGenCodeV12 GenBasicV12 > output.txt

awk -f script.awk OGD-Metadaten_2_1_2012_10.txt

awk -f script.awk data.txt

awk -f script.awk data.txt

awk -f script.awk delimd2iffpipe.dat

awk -f script.awk file

awk -f script.awk file

awk -f script.awk file

$ awk -f script.awk file

awk -f script.awk file

awk -f script.awk file

awk -f script.awk file

awk -f script.awk file.txt

awk -f script.awk file.txt

awk -f script.awk file.txt

awk -f script.awk file.txt

awk -f script.awk file.txt

awk -f script.awk file.txt

awk -f script.awk file.txt{,}

awk -f script.awk file1 file2

awk -f script.awk file1 file2

awk -f script.awk file1 file2

awk -f script.awk file1 file2

awk -f script.awk file1 file2 file3

awk -f script.awk file1 file2 file3 file4 file5 file6 file7 file8

awk -f script.awk file1.csv file2.csv

awk -f script.awk file1.txt file2.txt

awk -f script.awk file1.txt file2.txt

awk -f script.awk file1.txt file2.txt

awk -f script.awk file1.txt file2.txt

awk -f script.awk file2 file1

awk -f script.awk file2 file1

awk -f script.awk file2 file1

awk -f script.awk fileA fileB

awk -f script.awk fileB fileA > fileC

awk -f script.awk fileB.txt fileA.txt

awk -f script.awk file{,}

awk -f script.awk file{1..200}

awk -f script.awk first_file.txt second_file.txt

awk -f script.awk headfpkm file2

awk -f script.awk infile

awk -f script.awk infile

awk -f script.awk infile

awk -f script.awk infile

awk -f script.awk infile

awk -f script.awk infile

awk -f script.awk infile

$ awk -f script.awk input.csv

awk -f script.awk input.txt

awk -f script.awk input.txt

awk -f script.awk logins.txt

awk -f script.awk object.txt input.txt

awk -f script.awk sample

awk -f script.awk testing.txt

awk -f search.awk file2 file1

awk -f simple.awk -v file=SOME_FILE File1

awk -f simple.awk File1

awk -f so-gnuplot-awk data-so-gnuplot

 awk -f so.awk data.txt

awk -f sub.awk input.txt

awk -f summary.awk -v query="$query" "$input_file"

awk -f test.awk < datafile 

awk -f test.awk test.csv

awk -f translate.awk translate.txt input.txt

awk -f translated.awk data.txt

awk -f transpose.awk data

$ awk -f tst.awk file

awk -f util.awk -f printTrim.awk

awk -f whatever.awk file

awk -f your_script.awk -v first_col=2 -v second_col=4 file

awk -i inedit 'script' "$outputfile"

awk -i inplace 'commands' caConfig.txt

awk -i inplace 'script' file

awk -vDate=`date -d'now-2 hours' +[%d/%b/%Y:%H:%M:%S` ' { if ($4 > Date) print $1}' | sort  |uniq -c |sort -n | tail

awk -vDate=`date -d'now-2 hours' +[%d/%b/%Y:%H:%M:%S` ' { if ($4 > Date) print Date FS $0}' access_log

awk -vDate=`date -d'now-4 hours' +[%d/%b/%Y:%H:%M:%S` -vDate2=`date -d'now-2 hours' +[%d/%b/%Y:%H:%M:%S` ' { if ($4 > Date && $4 < Date2) print Date FS Date2 FS $4} access_log'

awk -vFS="" '{for(i=1;i<=NF;i++)w[$i]++}END{for(i in w) print i,w[i]}' file

awk -vFS="" '{for(i=1;i<=NF;i++)w[tolower($i)]++}END{for(i in w) print i,w[i]}' file

awk -vFS="" '{for(i=1;i<=NF;i++){ if($i~/[a-zA-Z]/) { w[tolower($i)]++} } }END{for(i in w) print i,w[i]}' file

awk -vOFMT=%15.7f -vCONVFMT=%15.7f 'BEGIN{print 123.456; print strtonum(123); print strtonum(123.0)}'

awk -vOFS='|' -vcdate=$(date '+%Y-%m-%d') ' {print cdate, $0}' file

awk -vORS=' ' 1 file

awk -vORS=$'\0' //

awk -vORS=, '{ print $2 }' file.txt | sed 's/,$/\n/'

awk -vPARAM="Pitter" 'BEGIN{RS="# *NAMES."} {if($0~PARAM)print}' file 

awk -vRS='-+\n' '/Ticket #1000/' svn.log

awk -vRS="" -F"\n" -vOFS="','" -vORS="'" '{$1=$1;print ORS $0}'

awk -vRS='\n[(]-!-[)]\n' -vprefix="file" '{print > prefix NR}' file.temp

awk -vRS='\n[(]-!-[)]\n' 'NR==3 {print}' file.temp

awk -vRS="" '{gsub("\n","\x27,\x27");print"\x27"$0"\x27"}'

awk -vRS='"' '{}' file

awk -vauthor="Lewis Carrol" -vtitle="Through the Looking Glass" '{print author, title, $0 }' OFS='\t' inputfile

$ awk -vcol="5" -F"|" '{print $1, "|", $col}' input

awk -vdd="$day" -F "-" '{split($2,array," "); printf "%s,%s,%s,%s,%s,%s\n",dd,"1","1",$1,array[1],array[2]}'

awk -vf2="$f2" '/Server N.*1p/ && !seen {print f2;print;seen=1}1' $Server > tmp

awk -vf='\t'%15.7f 'NR==FNR{x[$1]=sprintf("%s"f f f,$1,$2,$3,$4);next}$1 in x{printf("%s"f f f"\n",x[$1],$2,$3,$4)}' file1.txt file2.txt

awk -vm="$mask" -vip="$ip" 'BEGIN{n=split(m,a); split(ip,b); for (i=1; i<=n; i++) print b[i],a[i]}'

awk -vn=100 -f a.awk file

 awk -vn=5 '{a[NR]=$0}END{ x=1; while (x<=n){ for(i=x;i<=length(a);i+=n) printf a[i]" "; print ""; x++; } }' file

awk -vuserinput="$userinput" -F: '$1 < userinput {}'

awk -vval="0.05" '$1=="SI1"{$3=val}1' file

awk -vvar="hot" '{gsub("cool",hot,t);print t}{t=$0}END{print}' file

awk -v DATA=$(<Friction1.k) '($2=="mue"){$3="      " DATA}1' dynaRcoupledmodel.k

awk -v DATA=$(<Friction1.k) '($2=="mue"){$3=sprintf("%14s",DATA)}1' dynaRcoupledmodel.k

awk -v DATA=$(<Friction1.k) '($2=="mue"){sub($3,DATA)}1' dynaRcoupledmodel.k

awk -v DELIM=' ' '!/^($|[[:space:]]*#)/{a[FNR]=a[FNR]DELIM$0}END{for(i=1;i<=FNR;i++)print substr(a[i],2)}' file1 file2

awk -v Date=$(date "+%y%m%d") '$1 == Date { print $3; next } { print $1 }'

awk -v EFERMI=$EFERMI '{print ($1-EFERMI), ($2+$3)/32}'

for j in file*; do awk -v FILE=$j.out 'FNR==NR { array[$1]++; next } { for (i=1; i<=NF; i++) if ($i in array) { print $0 > FILE; print FILENAME, $0 } }' dict $j; done 2>&1 | tee output

for i in A1/*; do awk -v FILE=A3/${i/A1\//} 'FNR==NR { array[$1]=$2; next } { if ($1 in array) print $1, array[$1] - $2 > FILE }' A1/${i/A1\//} A2/${i/A1\//}; done

for i in A1/*; do awk -v FILE=A3/${i/A1\//} 'FNR==NR { array[$2]=$6; next } { if ($2 in array) print $2, array[$2] - $6 > FILE }' A1/${i/A1\//} A2/${i/A1\//}; done

awk -v FPAT='[A-Z]+(_[A-Z]+)+' '$0=tolower($1)' file|sed -r 's/_(.)/\u\1/g'

awk -v FS='' --non-decimal-data '{for(i=1;i<=NF;i++)printf "%d%s","0x"$i,(i==NF?RS:" ")}'

awk -v FS= -v OFS= 'NR==1{NF=NF-1}1' file

awk -v FS= -v OFS='\n' '{$1=$1}1'

awk -v FS= '/^>/ {print; next} {for (i=0;i<=NF/60;i++) {for (j=1;j<=60;j++) printf "%s", $(i*60 +j); print ""}}' file

awk -v FS='[ ,]*' -v OFS=', ' '{ for (i = 1; i <= NF; ++i) { match($i, /^(([[:alpha:]]+:[/][/])?[^/]+)/); $i = substr($i, RSTART, RLENGTH) } print }' file

awk -v FS=''  '{for(i=1;i<=NF;i++){"printf \"%d\" \"0x"$i"\""|getline v;printf "%d%s",v,(i==NF?RS:" ")}}'

awk -v FS="" '{min=$5<5?0:5; a[$1$2$4min]++} END{for (i in a) print i, a[i]}' file

awk -v FS="," 'NR==FNR{a[$1]=$0;next} ($1 in a){print a[$1]}' csv_file txt_file

awk -v FS=";" '{ CSV_FILE = "country_yearly_" $NF ".csv" ; print > CSV_FILE }'

awk -v FS='\r\n' -v OFS='|+|' -v RS='\\$\\$\\$\\$' -v ORS='\r\n' '{$1=$1}1' file

awk -v FS='\t' -v OFS=, '{$1=$1; for(i=1; i<=NF; i++) if($i ~ /,/) $i = "\"" $i "\"" } 1'

 awk -v FS='|' -v OFS='|' '{$3=$3"|"4} 1' 1.txt

awk -v I=$i '$0 ~ I{$4="LEFT";print $0}'

awk -v I=$i '/$I/{$4="LEFT";print $0}'

awk -v MYPATTERN="INSERT_YOUR_PATTERN" '$0 ~ MYPATTERN { print MYPATTERN }' INPUTFILE

awk -v MYPATTERN="INSERT_YOUR_PATTERN" '$0 ~ MYPATTERN { print gensub(".*(" MYPATTERN ").*","\\1","1",$0) }' INPUTFILE

awk -v MYVAR=nameToSearch -v OTHERVAR=somethingElse -f myAwk.awk file.txt

awk -v MYVAR="somedinamicdata" '{print $0 >> (MYVAR "-SomeStaticText") }' 2procfile

awk -v N=7 -v M=my_pattern '1;(N-=gsub(M,""))<=0{exit}'

awk -v N=7 '1;/my_pattern/&&--N<=0{exit}'

awk -v N=7 '{print}/my_pattern/&&--N<=0{exit}'

awk -v OFMT="%0.2f" 'BEGIN{FS=OFS=";"}!(NR%3){print $1,$2,$3,$4,($NF+sum)/3;sum=0;next}{sum+=$NF}' file

awk -v OFS=' ' '{print 1,2}' a.txt

awk -v OFS=" :-( " '{$1=$1}1'

awk -v OFS=', ' '/There is a group/ { print $6, $12, $16 }'

awk -v OFS="," 'NR>1{print $1,$2}' input.txt

awk -v OFS=, '{$1=$1}1' file

awk -v OFS="," '{for(i=1;i<=NF;i++)$i=sprintf("%.1fm",$i)}7'

awk -v OFS=';' '{print 1,2}' a.txt

awk -v OFS=';' '{print NR,$0}' filename

awk -v OFS='\r\n' 'NR == 1 { I = NF ? 12 : 13 } NR > I { print $NF }' "IMSI$r.txt"

awk -v OFS='\t' 'FNR == NR { a[$1] = $2; next } { t = $1; sub(/_.*$/, "", t); print $1, a[t] }' file1 file2

 awk -v OFS="\t" 'NR==1{print $0,"NEW";next}{print $0,($5>=0.01?2:1)}' file

awk -v OFS="\t" '{ sub(/./, "& ", $5) }1' file

awk -v OFS="\t" '{gsub(/banana/,0,$1)}; {print}'

awk -v OFS="|" -v FS="|" ' {t=$1; $1=$2; $2=t; print} ' input_file

awk -v ORS=' ' '/^QueueName=/{print "\n"} 1' foo.txt

awk -v ORS= '!NF{$NF="\n"} NF{ $NF = $NF ($NF~/\.$/?"\n":" ")} 1' input

awk -v ORS="" '/"[0-9]{2},[0-9]{3}"/ { sub(/,$/,""); print $0 "\n"; next }1' file

awk -v ORS='<br>' 1 <log-file >html-file

awk -v ORS=. '/(version|build).*=/ { sub(/^[^=]*=/, ""); print; } '

awk -v ORS='STOP' '1' file

awk -v RS=" " '$0<300' file

awk -v RS= '!x[$0]++{print; print ""}'

awk -v RS="" '$3=="sn::"{"base64 -d<<< \""$4"\""|getline $4}{print $2,$4}' file

awk -v RS="" -F'\n' '{$1=$1}7' file

awk -v RS='' -v OFS='","' 'NF { $1 = $1; print "\"" $0 "\"" }' file

awk -v RS="" -v ORS=".\n\n" 1 file

awk -v RS= -v ORS='\n\n' '!seen[$0]++'

awk -v RS= -v ORS='\n\n' '/^global/{ sub(/maxconn[^\n]+/,"maxconn 10000") }1' file > /usr/tmp/tmp$$ && mv /usr/tmp/tmp$$ file

awk -v RS= -v ORS='\n\n' '/password = [*]/' file

  awk -v RS="" -v ORS="\n\n" '/pattern match/{print > "file1";next}{print >"file2"}' file

awk -v RS="" -v ORS="\n\n" '{sub(/\.?$/,".")} 1'

awk -v RS="" -v start=HELLO '$1 == "START" && $2 == start' file

 awk -v RS="" '/404 Not Found/' yourFile

awk -v RS="" '/^START HELLO/' file

awk -v RS='' '/ssl-enum-ciphers/ && !/host down/' file.txt

awk -v RS='' '/ssl-enum-ciphers/' file.txt

awk -v RS= '/xxx two/{print FILENAME ORS $0}' file

awk -v RS='<[/]?div[^>]*>' '/span/ && /people/{gsub(/[^[:digit:],]/, ""); print}' file.txt

awk -v RS="</Row>" -v u="$findURL" -v email="$EMAIL" '$~u{sub(/NOTHING_HERE/, email)}1' ORS="</Row>" /home/pi/testJMC/JustLinksJMC2.xml | sed '$d'

awk -v RS='>' -v start=$n -v end=$m 'NR>=(start+1)&&NR<=(end+1){print ">"$0}' fasta_file

awk -v RS=">" 'FNR>1{a[$1]=a[$1]?a[$1] FS $2:$2}END{for(x in a) print RS x ORS a[x]}' f1 f2 f3

awk -v RS='>' 'NR>1{print $1, $2, $NF}' file

awk -v RS="" '{$1=$1}7' file

awk -v RS= '{for (i=1; i<=NF; i++) printf "%s%s", $i, (i==NF?ORS:FS)}' file

awk -v RS= '{gsub(/[[:blank:]]+$/,""); gsub(/[[:blank:]]+\n/,"\n")} !seen[$0]++{ORS=RT;print}'

awk -v RS="" '{print > "query"(++i)".sql"}' file

 awk -v RS= '{print > "~/"$2"/FILE01"}' file    

 awk -v RS="" '{print $0 > $1".txt"}' file

awk -v RS="" '{sub(/\(.*\)/,"()")}1' 

awk -v RS=, '/TABLE/&&/CREATE/{print $NF}'

awk -v RS='--\n' -v ORS='--\n' '!h[$4]++' infile

 awk -v RS="\0" -v ORS="" '{gsub(/LIST\s*=\s*\([^)]*\)/,"LIST = ()")}1' file

awk -v RS="\0" -v ORS="" '{gsub(/\t#\n\tpap/,"yourNEwString")}7' file

awk -v RS='\0\0' -v pattern="dir1/index.htm" '$0~pattern' duplicated.log

awk -v RS=: -v var=/path -v ORS=: '{sub (/.*hello.*/,var)}1' file

awk -v RS='FINISHED' -v OFS=';' '$0 { print $1, $3, $2, RS }' file

awk -v RS='START[^\n]*\nEND\n' '{printf "%s", $0}' file.txt

awk -v RS="START" '{$1=$1} NR>1' file

 awk -v RS='Start|End' -v OFS=":" '$1=$1' file

awk -v 'RS=\0' -F= '$1=="ENV_VAR_NAME" {print $2}' /proc/pid/environ

awk -v RS="\\n|;" -v OFS="#"  -F=  '{gsub(/"/,"");$1=$1}7' file|column -s"#" -t

awk -v RS="\\n|;" -v OFS="\t"  -F=  '{gsub(/"/,"");$1=$1}7' file

awk -v RS='\\s*go' '{print $0""(RT ~ /go/? ";\n\n": "")}' file.txt

awk -v RS='\^~' -F'~\^' -v OFS=, '{$1=$1}1' file

awk -v RS="\n[[:space:]]*\n+" '{print NR,$0}' file

awk -v RS="\n([[:space:]]*\n)+" '{print NR,$0}' file

$ awk -v RS='\n\n' -v FS='\n' '{ if ($1 == "Network J") print $1,$3,$4 }' data

$ awk -v RS='\n\n' -v FS='\n' '{ print $1,$3,$4 }' data

awk -v RS='\n\t+' -v ORS=@  '1' file | sed '$d'

awk -v RS='\r\n' ...

awk -v RS='\r\n' ...

NUMBER_OF_PORTS=$(awk -v RS='\r\n' '/^number of ports:/ {print $4}' Config_input.txt)

awk -v RS="|" '/^d$/{print NR;}' filename

awk -v T=some-text 'NR==1{print T} 1' file

awk -v WIDTH=5 --posix '{ gsub(".{"WIDTH"}", "&\n"); print }' file

awk -v a="$1" '/^commonName/ && $3 != "supplied" { $3 = a } 1' caConfig.txt

awk -v a="$1" '/^commonName/ && $3 != "supplied" { $3=a } { print }' caConfig.txt

awk -v a="$a" -f myAwkFile.awk myTraceFile.tr

VAR=$(awk -v a=$i 'NR==a{$1="";$2="";$3="";print $0}' log.log)

VAR=$(awk -v a=$i 'NR==a{print $4}' log.log)

VAR=$(awk -v a=$i 'NR==a{print $NF}' log.log)

awk -v a="$var1" -v b="$var2" '$1==a{$3=b}1' FS=: OFS=: file > t && mv t file

awk -v a=1000 -v b=100 -v c=10 -F "[<;>]" -v OFS=";" -f ./script.awk file

awk -v a=1000 -v b=100 -v c=10 -F "[<;>]" -v OFS=";" '/^<sit>/ && /<\/sit>$/ { $0 = "<sit>" sprintf("%06d",int($3-a)) OFS sprintf("%06d",int($4-b)) OFS sprintf("%06d",int($5-c)) "</sit>" }1' file

var=$(awk -v "app=$app" '$NF == app {split($1,a,"."); print a[1]}' version.lst)

awk -v appName="$appName" -v insert="$helpInsert" 'awk script here' filename

awk -v awk_internal_var=${myvar} '{printf "%s", awk_internal_var}'

awk -v awkvar=$value '{print awkvar}'

awk -v b_id="$book_id" '$3==b_id{print 1;exit}END{print 0}' exercise1_data.txt

awk -v beginning=$first -v end=$last 'NR>=beginning && NR<=end' $file

awk -v beginning=$first -v end=$last 'NR==beginning, NR==end' $file

$ awk -v c1=FIRST_COL -v c2=SECOND_COL '{a=$c1; $c1=$c2; $c2=a}1' file

awk -v c=2 -v t=35 'NR==1{d=$c-t;d=d<0?-d:d;v=$c;next}{m=$c-t;m=m<0?-m:m}m<d{d=m;v=$c}END{print v}' file

awk -v c=2 '/creative/{count++;}count==c{print $0;exit}' file

awk -v c=2 '/creative/{count++;}count==c{print $1;exit}' file

awk -v cargo="$cargo" '{sum+=$1} END {printf "Cargo %s has %d items\n", cargo, sum}' "file_${cargo}"

awk -v class="${CLASS}" '$0 ~ class {print}' data-new.csv >> $FACULTY.csv

awk -v col1=2 -v col2=7 '{print $col1, $col2}' file

awk -v col=$col 'NR==FNR { pats[$0]=1; next } { for(p in pats) if($col == p) { print $0; break } }' patterns file

awk -v col=$col 'NR==FNR { pats[$0]=1; next } { for(p in pats) if($col ~ p) { print $0; break } }' patterns file

awk -v col=2 '{print $col}'

awk -v col='2:7' '{split (col, a, ":"); for (i in a) printf "%s%s", $a[i], OFS; print ""}' file

awk -v col=7 '{print $col}' file

$ awk -v column=$COLNUMBER '{ $column = FUNCTION($column); print }' $FILE

awk -v column="$X" -v range="$Y" 'NR >= 5 && NR <= 5 + range { print $column }' file.txt

awk -v count=$(wc -l <file.txt) 'NR > count - 2 { $2 = "" }1' file.txt

awk -v count="$count" '...'

$ awk -v cutoff="$(date -d "7 days ago" +%s)" '{line=$0; "date -d \""$6" " $7" " $8 "\" +%s" |getline; fdate=$1} fdate < cutoff {print line} ' ftptimes

awk -v d1="$d1" -v d2="$d2" '$0 > d1 && $0 < d2 || $0 ~ d2'

awk -v d="$(date -d'24 hours ago' +'%F %T,000')" '$1" "$2>=d &&/YourSearch/' log

awk -v d="$dest" -v m="$mask" '$2==d && $8==m' file

for i in *; do awk -v database="$DB" -v table="$TB" 'BEGIN { print "header" } /backup/ { print " ('\''DROP TABLE " database "." table ";'\'' ) , " }1' "$i" > "${i}.new"; done

awk -v date="$(date +"%Y-%m-%d %r")" '/Hello/ { print $0, date}' party.txt

awk -v date="$date" ....

awk -v day=$day 'BEGIN{split("Sunday Monday Tuesday Wednesday Thursday Friday Saturday", array)} $0 ~ "\\<"day"\\>"{for(i=1;i<=NF;i++)if($i == day){print array[i]}}'

awk -v delkey="[a/b/d]" '{ if ($1 == delkey) { i=3 }; if ( i>0 ) { i-- } else { print }}' file.txt

awk -v docpath="$DOCPATH" -v sitepath="$SITEPATH" '{sub(docpath, sitepath)}1' filename

awk -v dt="$date" 'BEGIN{FS=OFS=","}{$1=dt}1' inputFile

awk -v f2="$(< file2)" '{print $0, f2}' file1

awk -v f=3 -v c=l1_user_instr -F ' *|=' '$0 ~ c {print $f}' input

awk -v field1=26 -v field2=41 -v field3=56

SOA=$(awk -v field=6 '/^@/ { if($2=="IN"){field++} for(i=1;i<field;i++){if(i==NF){field=field-NF;getline;i=1}} print $field}' $SOAfile)

awk -v from="12:52:33" -v to "12:59:33" '$1>=from && $1<=to' foo.log

awk -v gitlog="$log" '{print} /<!-- Beginning git log -->/{print gitlog}' ~/opt/prime.dropbox/commit.md

awk -v h="$(dist/forge-cli.phar --no-ansi)" '/{{HELP}}/{print h;next}1' in > out

x=$(awk -v i=$i -v j=$j ' NR==i {print $j; exit}' file.dat)

$ awk -v i="$i" 'NR==i' files.txt

$ awk -v i="$i" 'NR==i{print;exit}' files.txt

awk -v i=h -v j=17 ...

awk -v id=12345 -F ';' '$1==""{$1=id;} {id=$1; print}'  OFS=';' file

awk -v interface=eth0 '$0 ~ interface{print}'

awk -v interface="eth0" '$1~interface{print $3,$11 }' /proc/net/dev

awk -v k="$k" '$0~k&&/something1/&&/something2/{print $2,$3,$4}' *.cfg

awk -v k="$k" '$0~k&&/something1/&&/something2/{print FILENAME;nextfile}' *.cfg

awk -v key="$KEY" '{sub(/stringtoreplace/,key)}1' file

awk -v l=$left -v r=$right '{print substr($0,l,r)}'

awk -v last_empty_line=$(grep -nE '^[[:blank:]]*$' your_file | tail -1 | cut -c 1) '{print; if (NR==last_empty_line) print "->some new text here"}' your_file

awk -v ldate='20140101' '{split($2,fld,/_/); if(fld[1]<=ldate) print $1,$2}' file

awk -v len=$(wc -l < infile) -f parse.awk infile

awk -v lim=12 '{for(x=1;x<lim;x++){printf "%s",$x};print ""}'

awk -v line=$line -v delay=$delay 'NR==line {print "longest delay was **", delay, "** on", $1, $2, "at", $3, "at server",$4}' file

awk -v "line_start=$line_start" -v "line_end=$line_end" 'NR==line_start, NR==line_end' file

awk -v ln=$line_number -v ip4=$ipv4 -v ip6=$ipv6 'BEGIN {printf "%d, %s %s\n" ln, ip4, ip6}'

awk -v lo=10 -v hi=78 'NR >= lo && NR <= hi { print }'

awk -v m="$build_message" -v s="$settings" "$awk" "$file"

awk -v matchfile=/path/to/file1 -v nomatchfile=/path/to/file2 '/pattern/ {print > matchfile; next} {print > nomatchfile}' inputfile

awk -v maxlines=<N> ' ++count[$2] <= maxlines { print } '

major=$(awk -v module=$module '$2 == module { print $1 }' /proc/devices)

awk -v mysize="$size" '{if ($5>=mysize) print $9}' <(ls -l)

awk -v n4="$new4" -v n5="$new5" '/^dataspecs/{$5=n4;$6=n5}7' file

awk -v n="$n" '{print $n}' out.txt

awk -v n=$n '{x[NR%n]=$0}END{print x[(NR+1)%n]}' file

awk -v n="$var" '/^exp/{print $n}' file

awk -v n=20 '{ r = (r ? r RS : "") $0; c++ } $3 in a || s != $5 { r=$0; c=""; delete a } c == n { print r; r=c=""; delete a } { a[$3]; s = $5 }' file

awk -v n=4 '/listen = / && ++m == n {$3 = "2.2.2.2"} 1' file > file.changed

awk -v n=4 '{s1 += $1; s2 += $2; if (++i % n == 0) { print s1/n, s2/n; s1=s2=0; } }'

awk -v n=500 '{ printf "%-" n "." n "s\n", $0 }' file

awk -v n=500 '{ printf "%-*.*s\n", n, n, $0 }' file

awk -v name="$name" -F ':' '{ print name ":" $2 }' dbHashFile.txt >>dbHash.txt

awk -v name="Anton Kovalenko" -F: '$1==name' "$file"

awk -v name="emergency" 'BEGIN { RS = "<alert id=\""; FS = "\"" } $0 ~ "<name>" name "</name>" { print $1 }' file

awk -v newV="$new_value" '{print $2,$1,($3<0?newV:$3)}' inputfile

awk -v nl=$(wc -l <fileName) 'NR<(nl-2)' fileName

awk -v nlines=$(wc -l < $a) '{printf "%s", $1"-"$2} NR != nlines { printf ", " }' $a >>positions

awk -v nlines=2 '/^Exception/ {for (i=0; i<nlines; i++) {getline}; next} 1'

awk -v nr="$(wc -l < file)" 'BEGIN{ print nr }' file

awk -v nr="$(wc -l < file)" 'NR>17 && NR<(nr-8)' file

awk -v num="$NUM" 'NR==num' file

awk -v num=$line '$12==num' R2_Output.txt

awk -v numbers=$numbers_file -f extract.awk infile

awk -v old="##ERROR_MSG##" -v new="$ERROR_MSG" 's=index($0,old){$0 = substr($0,1,s) new substr($0,s+length(old))} 1' file

awk -v old="#pointer" -v new="$SWAP" 's=index($0,old){$0 = substr($0,1,s-1) new substr($0,s+length(old))} 1'

awk -v out=1 'NR>1 && ++i>3 && /^START/ {++out; i=0} {print > "file" out}' file

awk -v p=$p ...

for p in 20 21 22; do awk -v p=$p 'BEGIN { ORS = " " } {print p, $1, NR; for(i=2;i<=NF;++i) print $i}{print "\n"}' file > file$p; done

awk -v p="$player" '$0 ~ p{ sub(/2013-08-25/,"test") }1' "$outputfile"

awk -v p="MC exp. sig-$p" '/p/ {print $10}' a.txt | tr -d '$'

awk -v p="^2" '$3~p{gsub(/T/,"F");print}' file

awk -v p='password = [*]' -v RS= -v ORS='\n\n' '$0 ~ p' file

awk -v p="pattern" 'BEGIN {ORS = ""; RS = ">"; FS = "\n" } $1 == p { print ">" $0 }' file

awk -v parameter="$(awk '{a[$1]++} END {for (i in a) {if (a[i] > max) {max = a[i]}}; print max}' inputfile)" '{print parameter}' otherfile

awk -v partition="${partitions[$n]}" '$2 ~ "^/" partition "$" { print $1 }' /etc/fstab

awk -v pat="$id" '$1==pat{print $1,$2,$3}' "$file"

awk -v pat="${PATTERN}" 'f; $0 == pat {f=1}' "${FILE}"

awk -v pat="${PATTERN}" 'f; $0 ~ pat {f=1}' "${FILE}"

awk -v pat="${PATTERN}" 'f; index($0, pat) {f=1}' "${FILE}"

$ awk -v patt="$ct" '!(NR % patt)' a

awk -v patt="$ct" 'NR % patt' results.txt

awk -v patt="$searchname" '$0 ~ patt{ print $0}'

awk -v pdb="${file}" 'BEGIN{f=1} NR==1{n=$5;s[$5]=f} $5!=n{s[$5]=f++ ;n=$5} { print > pdb"_"$5"_"s[$5]".txt" }' ${file}

findProcess=$( awk -v pname="$findProcessName" '$0 ~ pname' $tempFile )

awk -v q="'" 'NR==FNR{a[$1]=$0;next}{$1=q $1 q}$1 in a{print a[$1]}' file2 file1 > file3

awk -v q="'" '{a= a","q$1q}END{print a}' file.txt

awk -v q=, "/$x/ { count++ } END { print $x q count }"

awk -v r="$r" 'NR==r' Aenumerar

awk -v r=11000 'BEGIN{w[r-1]++;w[r]++;w[r+1]++;w[r-1001]++;w[r-1000]++;w[r-999]++;w[r+999]++;w[r+1000]++;w[r+1001]++} NR in w{print $0}' file

awk -v r='ARCHIVE:$' '!p && $0 ~ r { p = 1; getline } p' "$0" | gzip -vdc - | tar -xvf - > /dev/null || die

$ awk -v regexp=user6q -f tst.awk file

 awk -v row=2 '{A[(NR-1)%row]=A[(NR-1)%row]$0" ";next}END{for(i in A)print A[i]}' file

awk -v s='$(date +%H":00:00" -d 1h)' -v e='$(date +%H":59:59" -d 1h)' '$0>=s && $0<=e' file

awk -v s=$1 -v c=$2 '$c ~ s || $3 == "foo"' $3

 awk -v s="$line1" -v e="$line2" 'NR>1*s&&NR<1*e' file

awk -v s="$line1" -v e="$line2" 'NR>s&&NR<e' file

awk -v s="$search_string" 'NR == FNR { if ($0 ~ s) { gsub(/"/, "", $5); a[$1, $5] = 1; }; next; } a[$1, $2] { print $3; }' "$filename" "$lookup_file"

awk -v s="$ver" 'BEGIN{gsub(/\./,"[.]",s)}$0~s{p=7;print;next}p&&/^==/{p=0}p' file

awk -v s=5 -v e=10 'BEGIN{FS=OFS=","}{for (i=s; i<=e; ++i) printf "%s%s", $i, (i<e?OFS:ORS)}' file

awk -v search="$s" '$0 ~ search {f=1} f' W_ERP_CLINICAL_LOAD.out

awk -v seed=$RANDOM 'BEGIN{srand(seed);}{print rand()" "$0}' ...

awk -v sep=: '{ if (NR % 2 == 0) { print prev sep $0 } else prev = $0 }' file.txt

awk -v start=$(head -n 1 small) -v end=$(tail -n 1 small) -f script bigfile

awk -v start="$1" -v end="$1" '$0 ~ start {p=1}; p; $0 ~ end {p=0}' "$file"

awk -v start=1 -v end=10 ...

awk -v start=25000000 'NR < start {next} {your program here}' file

awk -v swap="$SWAP" '{sub(/#pointer/,swap)}1' script.sh > tmp && mv tmp script.sh

awk -v t="$(date +%F)" -v y="$(date +%F --date='yesterday')" -v hr="$(date +%k)" '$1==t || $1==y && $2>=hr' file

awk -v t="$Target" -v d="$desfolder" '{print "ln -fs",t$0,d"/",$0}' 

awk -v t=6 '... same as before ...'

awk -v tId="$1" 'BEGIN{FS=OFS=","} {p=$0; $1=$2=""} $0 ~ "(^|,)" tId "(,|$)"{print p}' file

var2=$(awk -v term="Product_2" '$1==term{print $2}' products.txt)

awk -v tick="$ticket" -v RS="--+" -F'|' ' $0~tick{print $1}'

existed=$(awk -v title="$title" -F '$1 == title{i++} End{print i}' "$library")

awk -v title="$title" -v author="$auhtor" '$1 ~ title && $2 ~ author {print}' file

awk -v tot=$(wc -l < file) '{ printf( "%s %.4f\n", $0, FNR/tot) }' file

awk -v ts="$Timestamp2" '$2 ~ "^" ts {print $1}' find_thread > ThreadID

awk -v ts="$timestamp" '$0 ~ ts{print; f=1; next} f{exit}' file

awk -v u="$TEXT" '{gsub(/URLS/,u)}1' imagesbu.html > images.html

awk -v uniq="#4" '$NF!~uniq' file > temp && mv temp file

awk -v username="$username" -v password="$password" -v acccess="$access" -F : -v OFS=: '$1 == username && $2 == password { $3 = access } 1' password_file.txt > "$temp_file"

awk -v "v1=$VAR1" -v "v2=$VAR2" '{print v1, v2}' input_file

$ awk -v v=YOUR_SEED 'BEGIN {FS = "|"; OFS="|" } $3=++v' a > output_file

awk -v val="10" '$0 == "NET: Registered protocol family "val { print "matched" }'

awk -v val="10" '/^NET: Registered protocol family / && $NF==val { print "matched" }'

result=$(awk -v value=$src_dir '($1==value) { print $2 }' parameters.txt)

awk -v value=$value -v row=$row -v col=$col 'BEGIN{FS=OFS="@"} NR==row {$col=value}1' file

awk -v value="${index}" 'BEGIN{}{print $9 >> "example_" value ".txt";}END{}'

awk -v var1="$1" -v var2="$2" '$1 ~ var1 && $2 ~ var2; /^var1 var2/' "$READ_FILE"

palabra=betina; i=5 ; awk -v var1="$i" -v var2="$palabra" 'NR==var1 {sub(var2," ")}{print }' file

awk -v var1=1 -v var2=testing '$1 ~ var1 && $2 ~ var2 {print $2}'

awk -v var="$awkvar" '$1==var {print $2,$3}' spreadsheet.xls

awk -v var="$var" '/^_/{$0=var $0 }1'  file

awk -v var="$variable" 'BEGIN {print var}'

awk -v var="$variable" '{$0=var}' file

awk -v var="ip" '$0 ~ var {print $1}' file

awk -v variable=$bashvariable 'NF { print variable ... }' myinfile

awk -v variable=$bashvariable 'length { print variable  ... }' myinfile

awk -v which=2 '/<tagname1>(([0-9]*(\.[0-9]*)?)|[ \t])*<\/tagname1>/ {print $(which+1)}' input.txt

awk -v x="$READ_LINE" -v y="SOME_WORD" 'BEGIN { split(x, a); if (a[2] != y) print "not match";}'

NUM=`awk -v x=$number '$5 < x {print $5}' $fileName | wc -l`

awk -v x="$x" -v q="," '$0 ~ x { count++ } END { print x q count }'

awk -v y="$year" -v m="$month" 'BEGIN { FS = "." } $1 == y m { print $2 }' file

< file sed 's/^ *$//' | awk ...

var=`awk '...'`

var=$(awk '...')

var=`awk '... "\\\." ...'`

awk ... "$f" > "$f".tmp; mv "$f".tmp "$f"

filesystems=$(awk '...' /proc/mounts)

awk '...' FS="," file1 FS="|" file2

awk '...' FS=":" file1 FS=" " file2

awk ... | c++filt -t 

awk '...' count="$count" /tmp/input.csv

awk '...' file file > new_file && mv new_file file

awk '...' file.txt > file.tmp && mv file.tmp file.txt

awk '...' fileB fileA > tmp && mv tmp fileA

awk ... | sed 's/.$//g' 

awk ... | sort

awk ... | sort -t, -k2,2n -k1,1

awk '....' */*/*.abc

awk .... file > temp_file && mv temp_file file

awk '....' file.db > /tmp/file.db.tmp && mv file.db.tmp /path/to/your/file.db

(awk '...{print}' file1; cat file3) > file4

awk '/ (TCP|UDP) / { split($5, addr, /:/); cmd = "/Users/user1/Scripts/geoiplookup " addr[1]; cmd | getline rslt; split(rslt, r); close(cmd); print $1, $2, $3, r[4], r[5], r[6] }' < "$IP_PARSED" >> "$BlockedIPs"

awk '/ HOSTNAME sendmail\[.*.from=.*., size=/{ split($8,a,"=") ; SUM += a[2] } END { print SUM/1048576 }' maillog

awk '/ differ$/ {print "diff "$2" "$4" >"$2".diff"}{}'

 awk '/<<<HDOC/{f=1;next}f{if($0 ~ /\<foo\>/)print NR,FILENAME,": "$0}/HDOC;/{f=0}' *.php

awk '/<!-- start of lyrics -->/,/<!-- end of lyrics -->/' input.txt >> Lyric.csv

awk '/<--|-->/{rec=""; f=1} f{rec = rec $0 ORS} !f; /Content-Length:/{ if (f && (rec !~ "REGISTER")) printf "%s",rec; f=0}' file

awk '/<--|-->/{rec=""; f=1} f{rec = rec $0 ORS} /Content-Length:/{ if (f && (rec !~ "REGISTER")) printf "%s",rec; f=0}' file

 awk '/<?php/{f=1;next;} /?>/&&f{f=0} f' file

 awk '/<?php/{f=1} /?>/&&f{print;f=0} f'  file

awk '/<IPv6>/,/<\/IPv6>/ {sub(/Automatic/,"__INACTIVE__")}1' xml_file > new_xml_file

result=`awk '/<Main>/ { f=1 } f && /Amt/ { split($0,a,/[<>]/); s+=a[3] } /<\/Main>/ { f=0 } END {print  s }' MyFile.xml`

awk '/<\/review_text>/ {f=0} f {print >> (t".txt")}; /<review_text>/ {f=1; t++}' file

awk '/<failure/ {print s} /^ name/ {getline;s=$0}' RS=\" file.xml

awk '/<li><p><a href="anti\/recent.html">/ && ++a == 4 {next} 1' file

awk '/<li><p><a href="anti\/recent.html">/ {a++} a == 4 { getline } 1' file

epochlastUpdated=$(awk "/<pl:updated>/" feed.rss | head -n 1 | awk -F\< ' { print $2 } ' | awk -F\> ' { print $2 } '| date -j -f "%a, %d %b %Y %H:%M:%S %Z" "Fri, 13 Sep 2013 17:16:45 GMT" +%s000)

 awk '/<start/,/\/>/{printf "%s ",$0}/\/>/{print ""}' file

awk '/<table>/ { cf=1; print "<table>"; getline } /<\/table>/ {cf = 0 } {if(cf == 1){print $0}}END{ print "</table>" }' demo.html

awk '/<tr>/,/<\/td\>/' input.txt

awk '/<tr valign=top>/&&v++%2{sub(/<tr valign=top>/, "<tr valign=top bgcolor='#E0E0E0'>")}{print}' untitled.html 

awk '/<ul>/ {ul++} ul == 6 { getline } 1' INPUTFILE > TMPFILE && mv TMPFILE INPUTFILE

awk '/[ \t]+'$1'\/'$2'/ { print $1 }' /etc/services

 awk '/[0-9]$/{ blahblahblah } !/[0-9]$/ {blagblag}'

awk '/[0-9]+ of [0-9]+ DOCUMENTS/{g++} { print $0 > g".txt"}' file

awk '/[0-9]+:[0-9]+:[0-9]+/{x=$0}{a[x]=a[x]?a[x]", "$0:$0}END{for (i in a)print a[i]}' file

awk '/[0-9].*[0-9]/ && /[a-zA-Z].*[a-zA-Z]/'

awk '/[0-9].*[0-9]/ && /^[^a-zA-Z]*[a-zA-Z][^a-zA-Z]*[a-zA-Z][^a-zA-Z]*$/'

awk '/[^"]$/{printf "%s",$0;next}7'

awk '/[mM]essage[bB]ox\(/,/\)$/ {gsub(/.*[mM]essage[Bb]ox\(|\)$/,""); print}' file

awk '/> myoccupation/,/> mygrosssalary/' file

awk '/>/ {close(OUT); OUT=substr($0,2) ".fasta"}; OUT {print > OUT}' file.fasta

awk '/"'$line'"/,/\/>/{printf "%s ",$0}/\/>/{print ""}'

awk '/"trajectory"/ {if (getline x < "file2") {sub(/"nodo2"/,"\"nodo"x"\"")}}1' 

awk '/#/{sub(/# +/,"#");n=gsub(/#/,"",$NF);$(n+1)=$NF;$NF="\t\t#"}1' file

awk "/$1/ {print NR}" $2 | head -n 1

awk  "/$args/"' {f=$0} END{print f}' $TMP_FILE > data.out

$ awk "/$line/&&c++ {next} 1" ./file.txt

awk '/%ENDBLOCK POSITIONS_FRAC/{ exit }; p; /%BLOCK POSITIONS_FRAC/{p = 1};' geometry.xyz

awk '/(#.*#.*#|:.*:.*:.*:)/' file.txt

awk '/(^| )abcd( |$)/' file

awk '/(on|off)line/ { o[++c]=$3 } substr($0,0,27)~$1 { v[c]=v[c] $1 } END{ for(i=1;i<=c;++i) print v[i],o[i] }' file

awk '/- GEM PATHS:/ { getline; sub(/.* - /,""); print }' file

awk '/------------------/ {p=0} /Specific/ {p=1; next} p' file

awk '/-/ {a=$0;getline;for (i=1;i<=NF;i++) if ($i~")")t=i;sub(/-/,"-"$t,a);$t="";print a "\n" $0;next} !/-/' file

awk '/-END PUBLIC KEY-/ { p = 0 }; p; /-BEGIN PUBLIC KEY-/ { p = 1 }' file.key

 awk '/.*(Bob).*(Bob).*/' yourFile

awk '/./{line=$0} END{print line}' my_file.txt

 awk '/146 GB/{x++;s=s?s","$2:$2}x==2{print s;exit}' free-drivers

awk '/1510603|1510504/' file

awk '/2/'

awk '/80\/open/{print $2}' infile > iplist_port_80

awk '/;/{ count+=1 } {print} count==100 { print "COMMIT; BEGIN"; count=0 }'

awk '/=[[:alnum:]]/' file

awk '/@/{n++;close(filename)} !/@/{filename = sprintf("part%02d.txt", n); print >filename; }' text.txt

awk '/ABC/{$0="AAAAAAA"}7' file

awk '/ADDED UPDATED/{ t=$3; $3=$2; $2=t } 1' file

archive=$(awk '/ARCHIVE:$/{print NR; exit}' "$0")

awk '/Allow from local/ {sub(/localhost 127.0.0.0\/8 ::1/,"all")}1' /etc/munin/apache.conf

awk '/Apples/,/^$/ { if (/Good/) print $2}' file

awk '/BODY[13]/,/^$/' file

awk '/BirthdayYear/{birthday=$NF} $1=="Name" && birthday<1999 {print $3}' birthday.txt

awk '/Blah/,/Failed/' file

awk '/CPU/&&/idle/{f=1;next}f{a[$4]+=$13;b[$4]++}END{for(i in a){print i,a[i]/b[i]}}' your_file

awk '/Coords/{getline<"coords.txt"}1' template.txt

awk '/Current Network Information/,0' INPUT_FILE

for i in *.txt; do awk '/Customer/ { out=FILENAME".out"; print $5, $NF > out }' "$i"; done

for i in *.txt; do awk '/Customer/ { print $5, $NF > FILENAME".out" }' "$i"; done

awk '/Distribution_Facilities_carrying_Item/ {sub(/^</,"<!--");sub(/>$/,"-->")}1' a.xml

awk '/Drive\/Music/ {sub(/\/string/,":string");sub(/Music.*\//,"Music/");sub(/:string/,"/string")}1' file

awk '/EFF=exon/{print}' file

awk '/ERROR|DEBUG|TRACE|WARN|FATAL/ {count[$4,$5]++} END {for (i in count) {split(i, a, SUBSEP); print a[1], a[2], count[i]}}' inputfile

awk '/FINDME/{f=1}f&&/NEWSEARCH/{print}' file

awk '/File does not exist/{count[$13]++}END{for(ip in count) print count[ip],ip}' local1.log 

$ awk '/Flags/{sub(/.80:/, "", $4);printf $4"\t"} /User-Agent/{sub(/^[^:][^:]*:/,"");sub(/\.80/,"", $4); print}'  logTest

output=$( awk '/FormattedDescription/ { getline; print; exit; }' archivage001.1.tar )

gs_version=$(awk '/Ghostscript/ {version=$3; print version}' <<< "$str")

awk '/Ghostscript/{print $3}' inputfile

awk '/Header/ { show=1 } show; /Footer/ { show=0 }'

awk '/ItemA/{f1=1} /ItemB/{f2=1} END{ exit (f1 && f2 ? 0 : 1) }' file

awk '/John/{print NR, $0}' file

awk '/July/{f=1} f&&/foobar/{print "Found foobar after July!";exit}' file

  awk '/LOCATION/{l=$0;getline;if(!$0)i=33; else print l}i{if(--i);next}1'

awk '/Line-to-reorder/ {tmp = $1; $1 = $3; $3 = tmp} {print}' file.txt

awk '/Looking up status of/ {print} /JON8RFC-LT/ && !a {print "\t"$1;a=1} /DOMAIN/ && !b {print "\t"$1;b=1} /MAC Address/ {print "\t"$4}' input.txt

awk '/Looking up status of/ {print} /JON8RFC-LT/ {if(a!=1){print "\t"$1;a=1}} /DOMAIN/ {if(b!=1){print "\t"$1;b=1}} /MAC Address/ {print "\t"$4}' input.txt

awk '/Looking up status of/,/MAC Address/ {print; getline;print "\t"$1;getline;print "\t"$1;getline;getline;getline;getline;print "\t"$4;exit 0}' input.txt

awk '/MACS_peak/{$1=$1"_"$2;$2="";}1' your_file

awk '/MB$/{$4*=1024};/GB$/{$4*=1024*1024};{a[$1]+=$4}END{for(i in a){printf "%s %s KB\n",i, a[i]}}' a.txt 

awk '/MC exp. sig-250-0/ {print $10}' your.txt 

awk '/MC exp. sig-250-0/ {print $10}' your.txt | tr -d '$'

$ awk '/MODEL/{f=1;s="FILE"++i;next}/ENDMDL/{f=0;close(s)}f{print > s}' 1KZS.pdb

awk '/MYSTRING/ {n++} {p=97+int(n/26); q=(n%26)+97; s=sprintf("out_%c%c.txt", p, q); print > s}' LARGEFILE

awk '/MemTotal/ { print $2 }' /proc/meminfo

awk '/NA/ { for ( i = 1; i <= 4; i++ ) { getline; } } { print }' infile

awk '/New USB device found/{p++}p==1' file

awk '/Nmap scan report/ { host=$NF } NF==4 && $2=="open" { print host, $2, $NF }' nmap-output.txt

awk '/O[0-9]/{out=$0} out{print > out}' file

awk '/OBJECT-TYPE/ { obj= $1 } /KEY { .* }/ { print obj, $3 }' file.txt

awk '/OHZ061/{found=1} found{print; if(/OHZ062/) exit}' /tmp/weather.html

awk '/PARENT1_H/ {print "#ifndef NOPARENT" RS $0;f=1} /#endif/ && f {print $0;f=0} !/PARENT1_H/' file

awk '/PATTERN/{c=3}c&&c--' file

awk '/PATTERN/{c=3}c-->0' file

awk '/PATTERN/{close("result"f);f++}{print $0 > "result"f}' file.log

awk '/PATTERN/{for(;i<NR-2;)print lines[++i];i=NR;delete lines;print $0}{lines[NR]=$0}' file

$ awk '/PATTERN/{if(f){print ""};print;f=f?0:1;next}f{printf "%s ", $0}' file

awk '/PropertyName=\"ABC\"/{print; getline; sub(/true/,"false")}1' file

awk '/Query/{print RS" "$0}' RS='<AUDIT_RECORD' file

awk '/Reco/{c=3} c&&c--{print; if(!c)print ""}' file

awk '/Reco/{c=3} c{c--; print; if(c == 0)print ""}' file

awk '/Release: [0-9]+/ { printf "Release: %d\n", $2+1 }' < $file > $file.new

awk '/SEPARATOR/{n++}{filename = "part" n ".txt"; print >filename }' in.txt

awk '/Sending file/ {print $NF}' scp.output

awk '/Sequences/{print prev ORS $0} {prev=$0}' file

awk '/Start of activty/{f=$1;next}   /End of activity/{f="";next}   {if(f){print >f}else print}' yourfile > junk

awk '/Start/ { start = $3 } /End/ { end = $3; print end - start }' < file

awk '/Stats/,0' FILE

awk '/String1/ { linematch[NR+10]=1; } /String2/ && NR in linematch;' file1.log

awk '/TYPE A/{p=1;next}/TYPE E/{print $0;p=0}p' inputFile > outputFile

awk  '/Taco/ {print prev;print $0} {prev=$0}' datafile

awk '/The http port is/ {f=$NF} END {print f}' file 

awk '/Think/,/event/ {if(/event/) {print $4}}' /proc/bus/input/devices

awk '/Transformation/ && $4=="Filter" && match($5, /^fltr_[A-Za-z_]+/) { print $4,$5 }' filename

awk '/User-Agent/ && NF > 6 {...}'

awk '/User-Agent/{brow=$NF} END{sub(/\\r.*$/, "", brow); print brow;}' file

 awk '/Version:/{$2++}1' ./infile > ./outfile

awk '/WACSLAW1 CRITICAL INCOMING/ && $14 !~ /192.168.1./ && $14 !~ /IN=eth1/ && $14 !~ /MAC/ { print $14 }' /var/log/messages

awk '/XXX/,/<</{print a[FILENAME]?$0:FILENAME RS $0;a[FILENAME]++}' *.txt

awk '/\<WAM\>/ {split($1, a, ":"); print a[2] ":" a[3]}' file

awk '/\[/' temp.txt > out.txt

awk '/\('\''Backup/ {print " ('\''Drop the no good white.cap ;'\'' ) , " } { print }' filename.sh 

awk '/\* \* \* \* \* \* \*/{i++}i && $2 == "-" { print $1 }' data2.txt

awk '/\.\*/' file

awk '/\/\*!/{a=1}!a;/\*\/;/{a=0}' test.in

awk '/\/dev\/vda/ {if(c++>0){print _n-$4};_n=$4}' src/checkout-plugin/a.txt 

awk '/\/var/{print $3}'

awk '/\\return/{cmt=$0} /^[[:alpha:]]/{ if (/^void/ && cmt) print cmt ORS $0; cmt=""}' file

awk '/\r$/ && length < 13 {sub(/\r$/,""); printf "%s  ", $0; next} {print}' file

awk '/\t/ { print NR ":" $0 }' file.txt

 awk '/\usr/ && ! a[$0]++{print $3}' foo.txt

awk '/^ *[0-9]*(\.[0-9]+)?" *$/{sub(/"/, ""); print}' inFile

awk '/^ / {gsub(/[()]/, "", $3); printf "%s ", $3}'

awk '/^ / {printf "%s ", substr($3, 2, (length($3) - 2))}'

awk '/^</{i="old,"}/^>/{i="new,"}i{$2=$2" "i;print;i=0}'

awk '/^[[:alpha:]]/' infile

awk '/^[[:digit:]]+$/ {i++} END { print i }' Nameofpop_chr1_window1.txt

 awk '/^[[:space:]]*#/ { NR-- } {sum+=$3} END { ... }' coriolis_data

awk '/^[0-9]+[.][0-9]+[.][0-9][.][0-9]+/ {print $2}' arp-scan-output.txt

awk '/^[0-9]+$/' file

awk '/^[0-9]+$/{$0=sprintf("%05d",$0)}1' file

awk '/^[0-9]+/{print substr($0,length($1),11)}' your_file

awk '/^[0-9]/ && !/OK/ {print "BAD UNIT DETECTED:",$0}' input

awk '/^[0-9]/ && $3>$2 {a=$2; $2=$3; $3=a} {print}' file | column -t | sort -u

awk '/^[0-9]/ && $3>=$2' file

$ awk '/^[0-9]/' file

awk '/^[0-9]/ {print $1}'

$ awk '/^[0-9]/{print $0}' file

awk '/^[0-9]{1,10} [0-9]{1,4}/{l=$1+$2; "date --date=@"$1|getline d1; "date --date=@"l|getline d2;print d1" - "d2;next;}1' file

awk '/^[1-9]/ { if (num_printed++ < 50) print $6 }'

awk '/^[1-9]/ { print $6; if (++num_printed == 50) exit }'

awk '/^[A-Z][[:space:]]/' file > out.txt

awk '/^[^ \t]/ && buf{print buf;buf=""} {buf=buf $0} END{print buf}' input.txt

awk '/^[^! ]/ {p = 1; print;}  /^ *$/ {if (p++ % 2 == 0) print;}  (p % 2 == 0) { print; }'

awk '/^>/ && r { print r, "-", s; r=s="" } /^>/ { r = substr($0, 2); next } { s += length } END { print r, "-", s }' file

awk '/^>/ { $0=$0 "," ++i }1' file

awk < input_file > output_file '/^>/ { .... }'

awk '/^>/ { file = substr($1,2); next } { a[file][$1] } END { for (i in a) { while ( ( getline line < ("./F1/" i) ) > 0 ) { split(line,b); for (j in a[i]) if (b[6]==j) print line > "./F1/" i ".new" } system(sprintf("mv ./F1/%s.new ./F1/%s", i, i)) } }' data.txt

awk '/^>/ { file = substr($1,2); next } { a[file]=( a[file] ? a[file] SUBSEP : "") $1 } END { for (i in a) { split(a[i],b,SUBSEP); while ( ( getline line < ("./F1/" i) ) > 0 ) { split(line,c); for (j in b) if (c[6]==b[j]) print line > "./F1/" i ".new" } system(sprintf("mv ./F1/%s.new ./F1/%s", i, i)) } }' data.txt

awk '/^>/ { sub (/[^\/]+\//,">", $0); sub (/\..+/, "", $0) }1' file.txt

awk '/^>/ {if (seqlen){print seqlen}; print ;seqlen=0;next; } { seqlen = seqlen +length($0)}END{print seqlen}' file.fa

awk < input_file '/^>/ {print ""; print; next} {printf "%s", $0} END {print ""}'

awk '/^>/sub(/hg19_ct_UserTrack_3545_/, "")' input

awk '/^>/sub(/hg19_ct_UserTrack_3545_/, "");sub(/ /, "_")' input

awk '/^>/{i++};{print > (i".txt")}' yourFile

awk '/^>/{p=!($0 in a);a[$0]}p' file1

awk '/^>/{printf("%s,%d\n",$0,++counter);next}{print $0}' file

awk '/^>ENSBTAG/{tag=$0;}/^MA/{print $0,tag}'

awk '/^## Screenshot/{p=1} p{gsub( "line", "modified")} p&&/^##/{p=0}; 1' readme.md

awk '/^#/{x=$0;next}{if(x)print $0,x;else print;x=0}' file

awk '/^#/{x=$0;next}{print $0 (x? FS x:"");x=0}' file

awk '/^#PRINTME/ { sub( /^#PRINTME /, "" ) ; system( "echo " $0 ) }'

awk '/^#Start/{f=$NF;next}   /^#End/{f="";next}   {if(f){print >f}else print}' yourfile > junk

awk "/^${ipAddress//./\.}\>/"' { print $4 }' /proc/net/arp

awk '/^%%(HiRes)?BoundingBox:/{print $1, $2-1, $3-1, $4+2, $5+2;next}{print}'

awk '/^-----+$/{++j};!j{next};{a[i++]=$0}j==3{t="";for(k=0;k<i;++k)t=t a[k]"\n";b[++l]=t;i=j=0}END{for(i=l;i;--i)printf "%s", b[i]}' file

awk '/^--/{$0=" ";}1' file

awk '/^0/{next}{print $0>FILENAME}' file 

awk '/^02/{f=0} /name/{f=1} f' file

awk '/^1[0-9]{10}$/ { $0 = substr($0, 2) }1' file

awk '/^1[0-9]{10}$/ { sub(/^1/, "") }1' file

awk '/^1$/ {for(i=1; i<=1; i++) {getline; printf("%s,",0);}}' file.txt

awk '/^1/{i++;a[i]=$0;next}i>1{for(x=1;x<=i;x++)print a[x]}{i=0;delete a}' file

awk '/^101/ && !i { c++; i=1 } i { print > "file" c } /^110/ { i=0 }' input

awk '/^101/,/^110/{ print > "output" c } /^110/{c++}' c=1 input

awk '/^15 /{print $2}' infile

awk '/^4/ {print ++i, "MMM"} /^[0-9]/ {$1=++i} 1' file

awk '/^==/ {out=$2} {print > out".txt"}' file

awk '/^===/{h=$0;next}h{print h;h=0}1' file

awk '/^====/{print;for(i=1;i<=3;i++)getline;x=0;next}{++x}x<=5' file

awk '/^@/ && l~/@$/ { print l; l=$0; next } { l=l $0} END { print l }'

awk '/^@/{a=substr($0,2)}/^\+/{printf ("%s%s\n", $0,a);next}1' file > newfile

awk '/^AB1/{ab1=$0;next}/^AB2/{print $0, ab1}'

for f in *txt ; do awk '/^AB1/{ab1=$0;next}/^AB2/{print $1, $2, ab1, FILENAME}' "$f" > "new$f"; done

for f in *txt ; do awk '/^AB1/{ab1=$0;next}/^AB2/{print $1, $2, ab1}' "$f" > "new$f"; awk '{print $1,$2,$3,$4,$5,$6,FILENAME}' "new$f" > "newnew$f"; done

awk '/^ABC\./{print; f=1; next} f{exit}' file

awk '/^ATOM/&&substr($0,20,1)~/[GATC]/'  file

awk '/^Amount/ {amount+=$2} END {print amount+0}' file

newexpr=$(awk '/^Build Number/{$4=$4+1;}1' "$path/$file")

awk '/^Build Number/{$4=$4+1;}1' "$path/$file" > /tmp/file && mv /tmp/file "$path/$file"

awk '/^Case Notes:$/ { matched = 1 } matched { print }'

awk '/^Col1 /,/^$/{ if( $2 == "bar" && $3 > 1 ) print $1}' example

awk '/^Content-Length:/ { gsub("\015", "", $2); print $2 }'

awk '/^Content-Type: application\/octet-stream/,/^--------/'

awk '/^E/ && $2=="2" {$0=substr($0,1,length($0)-5)"     "}1' file

awk '/^E/ && $2=="2" {NF--}1' file

awk '/^Ge/{print $8,$9}/^ea/{print $3,$4}' file

awk '/^H/{t=3} /^B/ || t-- >0' input.file

awk '/^Line$/,/^10$/' myfile

awk '/^Nmap/{h=$0;i=NR;next}NR==i+1{if($0){print h;p=1}else p=0}p' file

awk '/^O/{if(seen==0){seen=1};c=$0} !/^O/{if (seen==1) {print c; seen=0;}}' myfile.txt

awk '/^O/{x=$0} !/^O/&&x{print x;x=0;}' myfile

 awk '/^O/{x=$0} !/^O/{if(x!=0) {print x; x=0;}}' myfile.txt

awk '/^O/{x=$0} !/^O/{if(x){print x;x=0;}}' myfile

$ awk '/^P01/{cnt+=$3; num+=1} END{print "avg="cnt/num}' input

awk '/^PermitRootLogin yes$/{f=1} /^Match/{exit} END{exit !f}' /etc/ssh/sshd_config

awk '/^SF.*test.*/{f=1}f;/end_of_record/{f=0}' yourFile

awk '/^START/{n++;w=1} n&&w{print >"out" n ".txt"} /^END/{w=0}' input_file.txt

awk '/^START=A$/,/^END$/ { print }' data

awk '/^SomethingA/ && ! a++ || /^SomethingD/ { print $2 }' FS=: text.txt > output.txt

awk '/^StringB/ { if(lastline ~ /^StringA/) {print lastline }} {lastline=$0}' $file

awk '/^TCF/ || /^FSTL/' /path/to/file > /path/to/output.txt

awk '/^Text Point/{print p; p="-" } /String/{ p=$0} END{print p}'  input

for i in *; do awk '/^XXX$/ { c++ } c<=3' "$i" > "$i.modified"; done

for i in *; do awk '/^XXX$/ { c++ } c>=3 { exit }1' "$i" > "$i.modified"; done

awk '/^\[PATTERN\]$/{close("file"f);f++;next}{print $0 > "file"f}' data

 awk '/^\s*$/{a[NR];if(!(NR-1 in a))print} /[235]$/{print}' file

awk '/^\|/' file

$ awk '/^ab[^a-z]+cd$/{gsub(/ab/,""); gsub(/cd/,""); print}' file

awk '/^abcd/{p++;if(p==1) print}/^DDD/{q++;if(q==8||q==9)print}' file

awk '/^case 4.1/,/^endcase 4.1/' ./your_file

awk  '/^category/,/^done/{if(++m==1)n++;if(n==3)print;if(/^done/)m=0}'  file

$ awk '/^category/{c=$3}/^item/{printf "%s %s %s %d\n",c,$1,$2,$3}' file

$ awk '/^category/{c=$3}/^item/{printf "%s %s %s\t%d\n",c,$1,$2,$3}' file

awk '/^class/{p=1;++x}/^}/{p=0;print $0>"file"x}p{print $0>"file"x}' test.txt

awk '/^cpu/ { total=0; idle=$5; for (i=2; i<=NF; ++i) { total += $i }; print $1, int((1000 * (total - idle) / total + 5) / 10) }' < /proc/stat

awk '/^example/ { i++; next } { print >"test"i}'

awk '/^exp /{sub(/^exp /,"");s=(s?s"|":s) sprintf("%s",$0)}END{print s}' file

awk '/^foo[34]$/||!/^foo/{print}' foo

awk '/^foo$/ { if (NR>1) printf("\n"); print; next } { printf("%s ", $0) }'

awk '/^fun2/ {a=0;next} /^[a-z]/ {a=1} a'

awk '/^lg325/ {sub(/\/bin\/bash/,"/sbin/nologin")}1' file > tmp && mv tmp file

awk '/^miss rate/ { print $3 }' yourfile

awk '/^num/ {n++;sum+=$2} END {print n?sum/n:0}' file

NUMBER_OF_PORTS=$(awk '/^number of ports:/ {print $4}' Config_input.txt)

awk '/^password/ {split($0, a, "="); gsub(/^[ \t]+|[ \t]+$/, "", a[2]); print a[2]; exit}' file

awk '/^starting/{l=1;print;next} /^\S/{l=0} l' file

awk '/_y/ {print $1}' myFile

awk '/aa/{f=1}/aa|bb/&&f{printf "%d %s\n%d %s\n",NR-1,a,NR,$0}{a=$0}/bb/{f=0}' 

awk '/aa\|/ {print $2}' FS=\| try_1.txt | paste -s -d, - >> abc.txt

awk '/abc/ && /vhg/' file.txt

awk '/alice/,/cat/' file

awk '/arg =>/{f=1} f; /bytes =>/{f=0}' file

awk '/arg =>/{rec=""; f=1} f{rec = rec $0 ORS} /bytes =>/{ if (f && (rec !~ "whatever")) printf "%s",rec; f=0}' file

awk '/arg =>/{rec=""; f=1} f{rec = rec $0 ORS} /bytes =>/{ if (f && (rec ~ "whatever")) printf "%s",rec; f=0}' file

awk '/arg =>/{rec=""; f=1} f{rec = rec $0 ORS} /bytes =>/{ if (f) printf "%s",rec; f=0}' file

awk '/begin-message/{ P=1; next } /end-message/ {exit} P' new.txt

awk '/bhaskar/ && !p++, /ganesh/' bhaskar.txt

awk '/bhaskar/ {p=1} p {print} /ganesh/ {exit}' bhaskar.txt

awk '/chrom=2/{p=1}/chrom=[^2]/{p=0}p' input

awk '/client.dom.lcl/ && !(/timeout/||/disconnect/) {sub(":","",$6); msgid[$6] = 1} {if (gensub(":", "", 1, $6) in msgid) print}' sampledata

awk '/client.host.name/ && !(/timeout/||/disconnect/) {sub(":","",$6);msgid[$6]=1} {if ($FIELD in msgid) print}' maillog

awk '/count=/ { sub("count=","",$2); gsub("\042","",$2); sum += $2} END{print sum}' tmp_20100923*.xml

awk '/cpu MHz/ {print $4}' < /proc/cpuinfo | awk -F'.' 'NR==1 {print $1}'

awk '/dbdir/ {$0="dbdir /var/lib/munin"}1' /etc/munin/munin.conf > temp ; mv temp /etc/munin/munin.conf

awk '/dbdir/ {sub(/^#/,x)}1' /etc/munin/munin.conf

VNCServerAndDisplayNumber=$(awk '/desktop/ {print $NF}' <<<"$VNCServerResponse")

awk '/enabled/{g=$1}/Mode:/{printf "%s is %s\n",g,$NF}' foo.txt

awk '/f89e7000/ {print $2}' syscall_list.txt

awk '/fin\(fname\)/ {sub("fname", "fname.c_str()", $0)} {print}' input_filename

awk  '/find user/ {print "-A INPUT -s " $NF "-j DROP"}' /usr/local/freeswitch/log/freeswitch.log

awk '/foo$/ { printf("%s\t", $0); next } 1'

awk '/foo/'      # same as grep foo

$ awk '/foo/ && /bar/{print FILENAME;nextfile}' folder/* | basename

awk '/foo/ { while(getline > 0) { print }}'

awk '/foo/ {a=$0} END{print a}' file

awk '/foo/ {sub(/foo/, "&_" sprintf("%02d",++c))} 1' infile

awk '/foo/{if (a && a !~ /foo/) print a; print} {a=$0}' file

awk '/group ProfileLocator/ {f=1} f && /Address/ {print;f=0}' file

awk '/interface/{if(p)print p; p=$0; next}{p=x} END{if(p)print p}' file

awk '/line/ && !(++c%3)' infile

awk '/line/{ print NR; exit }' input-file

awk '/link|[Ii][Ss][Ss][Uu][Ee]-[Ff][Ii][Xx][Ee][Dd]:/{print $2}' foo.txt | sed 'N; y/\n/ /'

awk '/localhost> localhost>/{print $1 >"file2";next}{$2=$3=$NF=""}7' file

awk '/msg.*/{getline x;print x;}1' file | sed -e 's/msgid/msgidt/g' -e 's/msgstr/msgid/g' -e 's/msgidt/msgstr/g'

awk '/msg_sent_node number/ { node_total += $5  } /msg_sent/ { sent_total = sent_total + $4} END { print sent_total " " node_total }'

awk '/my pattern/{count++ }; END { print count };' myfile.log

awk '/mystring/{three = two; two = one; one = $0} END{print three}' myfile

awk '/namenode/{print >"masters"; next} /slave[0-9]/{print > "slaves"}' /etc/hosts

awk '/not enough space/{split(pre,a);print a[pNF]}{pre=$0;pNF=NF}' input-awk.txt

awk '/output_checkbox/{printf "%s",$0;next}{printf (NR>1?"\n%s":"%s"), $0}END{print ""}' file

awk '/packet loss/ && /100/{x="Loss: " $7} /round-trip/{split($4,a,/\//);x="Ave: " a[2]} END{print x}'

awk  '/pattern 1/,/pattern 2/ {if ($0 !~ /pattern 1|pattern 2/) print}' input.txt

awk '/pattern/ {p=1;next}p' file

awk '/pattern/ {print; next} {print > "/dev/stderr"}' inputfile

awk '/pattern/,0{if (!/pattern/)print}' < list.txt

awk '/pattern/{ print $0 }' file

awk '/pattern/{++i} i==1{print}' file >newfile

awk '/pattern/{c=N}c&&c--' file

awk '/pattern/{c=N}c&&c--' file

awk '/pattern/{f=1}f' file

awk '/pattern/{f=1}f' file

awk '/pattern/{i++}i' tmp.log >& tmp.txt

awk '/pattern/{p=1;print;next} p&&/^##/{p=0};p' file

awk '/pattern/{special processing; next} 7' file

awk '/pattern1/ || /pattern2/{print}'

awk '/pattern_a/{f=1;c+=1;next}/pattern_b/{f=0;next}f{print > "outfile_"c}' input_file

awk '/patterns/{e=0}/Hi /{gsub("^.*Hi ","",$0);e=1}{if(e==1){print}}'

awk '/pay/ {match($0, /"money":"([0-9]+)"/); split(substr($0, RSTART, RLENGTH), a, /[":]/); print a[5]}' action.log

awk '/pay/ {match($0, /"money":"([0-9]+)"/, a); print substr($0, a[1, "start"], a[1, "length"])}' action.log

awk '/policy/ {print $3}' /proc/process_id/sched

awk '/regex/,0' INPUTFILE

awk '/regex/{c++}END{print c+0}' /home/someuser/sometext.txt

awk '/regex1/,/regex2/' INPUT_FILE > NEW_FILE

awk '/regex2/ { print $1 }'

for i in foo/*/bazz.txt; do awk '/regexp/ {exit} {print}' "$i" >> bazzdigest.txt; done

awk '/searchTerm/ {print NF-1}' $(cat subset.txt) >> output.txt

awk '/searchphrase/{c++; print} END{if(c == 0) print "No Match"}' file

awk '/searchphrase/{c++} END{if(c == 0) print "No Match"}' file

awk '/searchtext/ {flag=1} flag;' file1 > file2

awk '/something/ { array'$1'[something]++ }'

awk '/start/,/end/ { print ( $0 ~ /end/ ) ? $0 "\n--" : $0 }' infile

awk '/start/,/end/{if(/ppp/)print}' file

awk '/start/,/end/{next}1'

awk '/start/,/stop/{if($0 ~ /stop/){print}; if($0 !~ /stop/){printf $0" "}}' file

awk '/start/{f=1} /ppp/ && f; /end/{f=0}' file

awk '/start_here/{f=1} /end_here/{f=0;print} f' file

awk '/start_here/{f=1} f; /end_here/{f=0}' file

awk '/string/ && length($0) <=100' filename

awk '/string/{x=$2$3;sub(/.*\//,"",x);print x}'

awk '/t=/ { sub(/t=/,"",$NF); print $NF/1000}' /sys/bus/w1/devices/28-00000202070c/w1_slave

awk '/task/ { a = "(....)(..)(..).(..)(..)(..)"; b = "\\1 \\2 \\3 \\4 \\5 \\6"; t += mktime(gensub(a, b, "", $NF)) - mktime(gensub(a, b, "", $(NF-1))) } END { print t }' file

awk '/test/ {f=1} !f; /end/ {f=0}' file

awk "/test/ {for(i=1; i<=100; i++) {getline; print}}" <<< "$var"

awk '/test/{p=1} /^([0-9]|\[)/{p=0} p' file

awk '/test1/&&!/test2/{next}1' file

awk '/the-timestamp-I-have/,0' the-log-file

awk '/this/{count++;if(count==3){sub("this","something")}}1'

awk '/two/{i++}i==2' file

awk '/two/{i++}i==2{print; exit}' file

awk '/username=/ {match($7, "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+"); A=substr($7, RSTART, RLENGTH); split($9, B, "="); print(A, B[1]);}' /var/log/mylog

< build/input.xhtml awk '/select name="op_sys"/,/select>/' | awk '/value="/,/">/'

awk '/wtec_1/ {ok=1} /^$/ {ok=0} {if(ok){print $0}}' filename

awk '/yahoo/{y=1;next}y' data.txt

awk '/you:me/ { print "#"$0 }'

     awk '/}/{f=1;m=0;next} $0 && f{f=0;m=0;next} !$0 && f &&!m{m=1;next} m{print "empty line found:"NR}' file

 awk '/}/{f=1;next} $0 && f{f=0;next} !$0 && f{print "empty line found:"NR}' file

awk '1' <(echo "$MSG") file

awk '1' ORS=";\n" file

awk '1' RS="var12=[0-9]+" file

awk '1' file

awk '1' file

awk '1300000000 < $1 && $1 < 1305000000' Log2.log

awk '1; END {if (NR <= 2) print "another line"}' file

awk '1;$1=="timeout"{printf "    index = %d;\n", ++i}' file

awk '1;/Find a hot chick/{if(i++==3){print "New line";i=0}}' yourfile

awk '1;END{print "T|"NR-1}' file

awk '7' file

awk 'BEGIN { FPAT = "([^,]*)|(\"[^\"]+\")"; OFS="," } { for (i=1; i<=NF; i++) gsub(/[\",]/,"", $i) }1'

awk 'BEGIN { FPAT="([^,]+)|(\"[^\"]+\")"; OFS=","; N="\"" } { for (i=1;i<=NF;i++) if ($i ~ /^\".*\"$/) { gsub(/\"/,"", $i); $i=N $i N } }1' file

awk 'BEGIN { FS = "=" } { ip = substr( $1, 0, index( $1, " " ) - 1 ); pattern = substr( $2, 0, index( $2, "&" ) - 1 ); printf "%s %s\n", ip, pattern }' infile

awk 'BEGIN { FS = "="; OFS = "=" } $1 == "abcd" { print $1, "new value"; next } 1' < test.txt > test_new.txt

awk 'BEGIN { FS = "\t" } ; { print $1, $5 }' filename > newfilename 

awk 'BEGIN { FS = "|" } { sum += $4 } END { print sum }' tag_FLI1

awk 'BEGIN { FS = OFS = ","} {$4 = $2/$3; print}' | sort -k4,4nr -t, | sed 's/,[^,]*$//' inputfile

awk 'BEGIN { FS="[ \t;]+"; OFS=" " } { for (i=1; i<=NF; i++) { sub (/[^=]*=/,"", $i); line = (line ? line OFS : "") $i } print line; line = "" }' file.txt

awk 'BEGIN { FS="[(|)]" ; OFS=""} /\(.*\)/ { for (field=2;field<NF;field++) {print $1,$field ;} ; next ; }1'

awk 'BEGIN { FS=","; OFS="," } (NF>=2) { $2=$2 ":00:00"; } (1)'

awk 'BEGIN { FS=","; OFS="," } (NF>=2) { $2=$2 ":00:00"; } (1)' source.txt >result.txt

 awk 'BEGIN { FS=",?[ \t]*"; OFS="|"; } { $1=$1; print $0; }'

 awk 'BEGIN { FS=",?[ \t]*"; } { print $1,"|",$2,"|",$3,"|",$4,"|",$5; }'

awk 'BEGIN { FS=": " } { print $2 }' lines.txt

awk 'BEGIN { FS=":"; OFS="\t" } /Size|Locator|Speed|Manufacturer|Serial Number|Part Number/ { gsub(/^[ \t]+/,"",$2); line = (line ? line OFS : "") $2 } /^$/ { print line; line="" }' file.txt

awk 'BEGIN { FS="\n"; RS=""; OFS="\t\t" } { print $1, $2, $3 }' file.txt

awk 'BEGIN { FS="\t"; OFS="," } {$1=$1; print}' file.tsv > file.csv

awk 'BEGIN { FS="\x01" } {print $1}' input

awk 'BEGIN { FS=OFS="," } $1 == x=("Node") { c++; f=sub(/[^,]*,/,""); one = (one ? one : x) OFS $0; next } c==5 && $2 !~ /CBMR/ { next } f==1 { y=$1; gsub(/^[^,]*,|[ \t]*$/,""); two = (two ? two : y) OFS $0; f=0 } END { print one ORS two }' file

awk 'BEGIN { FS=OFS="," } { split($3,a,"\\\\\\\\"); print $0, a[2], a[3], a[4] }' file

awk 'BEGIN { FS=OFS="\t" } FNR==NR { a[$1,$2,$4,$5]=$3; next } ($1,$2,$4,$5) in a { $3=a[$1,$2,$4,$5] }1' file1 file2

awk 'BEGIN { FS=OFS="\t" } FNR==NR { array[substr($1, 2)]=$2; next } { if ($1 in array) print $0, array[$1] }' file2.txt file1.txt

awk 'BEGIN { FS=OFS="\t" } FNR==NR { gsub(/[^0-9]+/, "", $1); array[$1]=$2; next } { if ($1 in array) print $0, array[$1] }' file2.txt file1.txt

awk 'BEGIN { FS=OFS="|" } { $3=1000 + NR }1' file

awk 'BEGIN { FS=OFS="|" } { $3=1000 + NR; print }' file

awk 'BEGIN { FS=OFS="|" } { sub(/.*_/,"",$3); $3+=1000 }1' file

awk 'BEGIN { OFS = "\t" } { $14 = "string" $14; print }' infile

awk 'BEGIN { OFS = "\t" } { gsub(/.*=/, "", $3); print $1,$2,$3 }' text.txt

awk 'BEGIN { OFS = "\t"; } { sub( /[[:digit:]]/, "S", $3 ); print }' infile

awk 'BEGIN { OFS="|" } { for (i=1; i<=NF; i++) if (i <= 3 || i >= NF - 3) printf "%s"OFS, $i; else printf "%s", $i; print "" }' file.txt

awk 'BEGIN { OFS=FS="|" } $1 == "01" { c++ } $1 == "99" { $2 = c }1' file

awk 'BEGIN { ORS = " " } {print 22, $1, NR; for(i=2;i<=NF;++i) print $i}{print "\n"}' file 

awk 'BEGIN { ORS=" " }; { print $2 }' file

awk 'BEGIN { RS = "<alert id=\""; FS = "\"" } /<name>emergency<\/name>/ { print $1 }' file

awk 'BEGIN { RS = "<option value=\"" ; FS = "\""; } NF { print $1 }' file

 awk 'BEGIN { RS = "/" } ; { print $0 }' BBS-list

awk 'BEGIN { RS = "START" } {$1=$1} 1' file

awk 'BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR > 1 {  gsub("~", "", $1); gsub("!", "", $1); gsub("%20", "_", $1; gsub("#", "", $1); gsub("$", "", $1); gsub("%", "", $1); gsub("^", "", $1); gsub("&", "_", $1); gsub("@", "", $1); gsub("*", "", $1); gsub("\\(", "", $1); gsub("\\)", "", $1); gsub(/ /, "_", $1); gsub("____", "_", $1); gsub("___", "_", $1); gsub("__", "_", $1); print RS } 1' piece1.txt

awk 'BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR > 1 { gsub(/ /, "_", $1); print RS } 1' file

awk 'BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR > 1 { gsub(/%20/, "_", $1); gsub(/[~!#$%^&*()@]/, "", $1); gsub(/_+/, "_", $1); print RS } 1' piece1.txt

awk 'BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR > 1 { gsub(/(%20|_)+/, "_", $1); gsub(/[~!#$%^&*()@]/, "", $1); print RS } 1' piece1.txt

awk 'BEGIN { RS=""; FS="\n" } /ssl-enum-ciphers/ && $1 !~ /host down/' file.txt

awk 'BEGIN { RS=""; FS="\n" } /ssl-enum-ciphers/ && $1 !~ /host down/ { printf "%s\n\n", $0 }' file.txt

awk 'BEGIN { RS=""; OFS=FS="\t"; print "A", "B", "C", "D", "E", "F" } { split ($2, one, " "); split ($3, two, " "); print one[1], two[1], one[2], two[2], one[3], two[3] }' file.txt

awk 'BEGIN { RS=","; FS=":" } { print $2 }'

awk 'BEGIN { RS="NODE-ID> "; } /^command1/ { print RS $0; }'

awk 'BEGIN { RS="\n\n" } ; { print $1, $3, $5 }' < myfile

awk 'BEGIN { RS="\r\n"; FS=":" } NR == 1 { split($0, array, FS) } NR >= 2 { for (i=1; i<=NF; i++) printf "%s:%s ", array[i], $i; printf "\n" }' file.txt

awk 'BEGIN { RS="guide_change_names[^{]*{[^}]*}[^{]*{[ \n]*}[ \n]*" } 1' file

awk 'BEGIN { clean=1 } /#c3284d#/ { clean=0 } /#\/c3284d#/ { clean=1 } { if (clean==1 && match($0,"#\/c3284d#") == 0) { print $0 } }' dirty-file > clean-file

 awk 'BEGIN { count=0 }; /my pattern/{count++ }; END { print count }' myfile.log

awk 'BEGIN { count=0};  { if ($0 ~ /my pattern/)  count++ }; END { print count };' myfile.log

awk 'BEGIN { family = ""} { if ($1 == "@") family = $2; else print family, $1, $2 }' input.txt

awk 'BEGIN { for (i=1; i<=9999999; i++) { print i, i, i, int(i * rand()), i, i, i, i, i, i } }' > INFILE

awk 'BEGIN { i=""; FS = "([[:space:]]|\\.)+" };{if($2 == i) print $1; i = $2;}'

awk 'BEGIN { n = 1 } { print $0 > "bandera" n } /bandera2/ { n++ }' infile

awk 'BEGIN { nl=1 } /^$/ { nl=1 }  /OBJECT-TYPE/ && nl { obj= $1; nl=0; } /KEY { .* }/ { print obj, $3 }' file.txt

awk 'BEGIN { ok = 1 } { if (/^ *[0-9]+ +[0-9]+ *$/) { a += $1; b += $2 } else { ok = 0; exit 1 } } END { if (ok) print a, b }' foo.log

awk 'BEGIN { one = ""; } { if ( one != $1 ) { printf("\n%s %s",$1,$2); one = $1; } else { printf(" %s",$2); } } END { printf("\n"); }'

awk 'BEGIN { print "<exam" }'  # -> '<exam'

awk 'BEGIN { print "\<exam" }'  # -> '<exam'

awk 'BEGIN { print "\\<exam" }'  # -> '\<exam'

awk 'BEGIN { print mktime("2012 11 14 12 50 57") }'

awk 'BEGIN { print strftime("%d/%m/%y") }'

awk 'BEGIN { t = 0 } {t += $NF} END { print t }'   # print total of last column 

awk 'BEGIN { t = systime() } { s = $1 " " $2; gsub(/[-:]/, " ", s) } t - mktime(s) < 86400' file

awk 'BEGIN { while ("ls" | getline var) print "I got: " var; }'

awk 'BEGIN { while(" w_scan -c PL -x " | getline ) print >> "tmp"; while(" w_scan -I tmp -E 0 -t 3 -F " | getline) print >> "channels" }'

awk 'BEGIN { x = 1 }; /^-- Dumping data for table `cache(_[a-zA-Z0-9]+)?`$/ { x = 0 }; /^-- Table structure for table `[^`]+`$/{ x = 1 }; (x == 1) { print }' $1

awk 'BEGIN {"curl -sI http://example.com" | getline; print "Status Code: " $2}'

awk  'BEGIN {A = 1};/<restApi>/{A=0; print "<sometag>stuff</sometag>"};/.*/ { if ( A == 1) print $0};/<\/restApi>/{A=1}; ' file.xml

awk 'BEGIN {FIELDWIDTHS="10 10 10"}{if ($2 ~ /^\s*$/) $2 = "XXXXX     "; if ($3 ~ /^\s*$/) $3 = "XXXXX     "; $1=substr($1,1,4)0substr($1,6)}1' OFS='' inputfile

awk 'BEGIN {FIELDWIDTHS="10 10 10"}{if ($2 ~ /^\s*$/) $2 = "XXXXX     "; if ($3 ~ /^\s*$/) $3 = "XXXXX     "}1' inputfile

awk  'BEGIN {FS = ";"; OFS=";"; } $1 ~ /^total/ { $3 = 0 } 1'

awk 'BEGIN {FS = OFS = "@"} {$5 = $5; print}' inputfile

awk 'BEGIN {FS="."};{print $2"."$1}' <file1 >results.txt

awk 'BEGIN {FS=";"}  $1 ~ /'$date'/ && $2 == '$area'{......}'

awk 'BEGIN {FS="\n"; RS="-\n"}{for(i=1;i<=NF;i++) printf("%s   ",$i); if($1)print"-";}' dict.txt

awk 'BEGIN {FS=OFS=","} {for (i=1; i<=NF; i++) $i/=10;}1' infile

awk 'BEGIN {FS=OFS="\t"; hd1=hd2=hd3=""} $1=="" {$1=hd1;$2=hd2;$3=hd3; print; next} {hd1=$1;hd2=$2;hd3=$3; print}' yourfile

 awk 'BEGIN {FS=OFS="\t"}{t=$44;gsub("-"," ",t); print strftime("%d %b %Y", mktime(t" 00 00 00")),$44}' test.txt

awk 'BEGIN {OFS = "\t"} {for (n = 11; n < 18; n++) {split($n, arr, ":"); $n = arr[5]}; print $0}'

awk 'BEGIN {OFS = FS = ","} {a[$1] = $2; ind[j++] = $1} $2 > max {max=$2} END {n = asort(ind); for (i=1; i<=n; i++) print ind[i], a[ind[i]]/max}' inputfile

awk 'BEGIN {OFS = FS = ","} {a[$1] = $2} $2 > max {max=$2} END {for (w in a) print w, a[w]/max}' inputfile

awk 'BEGIN {OFS=FS="\t"} {gsub(/\./,"",$4);gsub(/\./,"",$5)}1' input

awk 'BEGIN {ORS=""};!/[1-2][1-9]/ {print} /[1-2][1-9]/{printf("\n%s",$0)}' tempFile.txt > parsed.txt;

awk 'BEGIN {RS = "$"} { ... }'

awk 'BEGIN {RS="[.!?] *"} {print}'

awk 'BEGIN {RS=""; FS="\n"; ORS="\n\n"} $2 !~ /New Code\?/'

awk 'BEGIN {RS="";FS="\n"} $1=="degree1" {c1++; print $0 >$1 "-" c1} $1=="degree2" {c2++; print $0 >$1 "-" c2}' query.txt

awk 'BEGIN {RS="";FS="\n"} /^degree1\n/ {c++; print $0 >"output-" c}' query.txt

awk 'BEGIN {RS="----->"} ! /5\. select \* from mytable/ { printf("%s %s",RS,$0)}' INPUT_FILE

awk 'BEGIN {RS="----->"} /5\. select \* from mytable/ { printf("%s %s",RS,$0)}' INPUT_FILE

awk 'BEGIN {RS="omg"; ORS=""} {print $0""++i}' file

$ awk 'BEGIN {a="2012-03-16"; "date +%s -d "a | getline; print $0}'

awk 'BEGIN {acnt=0; bcnt=0;} /a/ {acnt++;} /b/ {bcnt++} END { if (acnt > 0 && bcnt > 0) print "Matches"; }' $FILE

$ awk 'BEGIN {notThis=0} /<not-this>/ {notThis=1} /<\/not-this>/ {notThis=0} /<this>.*<\/this>/ {if (notThis==0) print}' input.txt

awk 'BEGIN {nout=1;} /^<\/endxml>$/ {close("xml"nout".xml"); ++nout;} !/^<\/endxml>$/ {print >("xml"nout".xml");}'

awk 'BEGIN {now=systime()} {then=strtonum(gensub(/\[|\]/,"","g",$1)); if(now-86400<=then) print}'

awk 'BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0; print FILENAME} else {if((prev+1)==NR) {print NR-1 ":" line;print NR ":" $0}; prev=NR; line=$0}}' file-a

awk 'BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0} else {if((prev+1)==NR) {print FILENAME ":" NR-1 ":" line;print FILENAME ":" NR ":" $0}; prev=NR; line=$0}}' file-a

awk 'BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0} else {if((prev+1)==NR) {print FILENAME ":" NR-1;print FILENAME ":" NR}; prev=NR; line=$0}}' file-a

awk 'BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0} else {if((prev+1)==NR) {print line;print $0}; prev=NR; line=$0}}' file-a

awk 'BEGIN {print "[table]";ORS=""; print "[tr][td][b]#[/b][/td][td][td][b]Position[/b][/td][td][b]Nickname[/b][/td][td][b]Region[/b][/td][td][b]Level[/b][/td][td][b]Kills[/b][/td][td][b]Deaths[/b][/td][td][b]KD/R[/b][/td][/tr]"} {for(i=0;i<8;i++){gsub(/[[:space:]]$|^[ \t]+|\/img\/flags\/|-Flag-48.png/,"",$0);arr[i]="[td]"$0"[/td]";getline;} print "\n[tr]"; for(i in arr) print arr[i]; print "[/tr]";} END{print "\n[/table]";}' input.txt

awk 'BEGIN {print "GB FREE\n--------"} NR>2{print $4}' INPUT_FILE

awk 'BEGIN {print "Name\t\tAge"}  FNR == 5 {print "Name: "$3"\tAge: "$2}'

awk 'BEGIN {srand()} !/^$/ { if (rand() <= .01 || FNR==1) print $0}'

awk 'BEGIN {srand()} !/^$/ { if (rand() <= .01) print $0}'

awk 'BEGIN {srand()} {match($0, /cn=[^,]*,/); n = split(substr($0, RSTART+3, RLENGTH-4), a, ""); for (i = 1; i <= n; i++) {if (a[i] ~ /[[:digit:]]/) {new = new int(rand() * 10)} else {new = new sprintf("%c", int(rand() * 26 + 97))}}; print substr($0, 1, RSTART+2) new substr($0, RSTART+RLENGTH-1)}'

awk 'BEGIN {while ((getline < "file") > 0) { a[$0]++; if(a[$0] == 2) print; if (a[$0] >= 2) print }}'

awk 'BEGIN{ FS=" " } { cnt[$2] += $3; lincnt[$2] +=1;  } END{i=1; for (x in cnt){print i++, x, (cnt[x] /lincnt[x] )  } }' file

awk 'BEGIN{ FS="-[0-9]+" } {print $1}' yourfile

awk 'BEGIN{ FS="INDEX | ON "}{gsub(/[ (].*/,"",$3); print $2", " $3}' test.dat

awk  'BEGIN{ OFS=FS="|";} NR==FNR{a[$2]=$1;next} $1 in a { print a[$1],$0 }' file1 file2 > file3

awk  'BEGIN{ OFS=FS="|";} NR==FNR{a[$2]=$1;next} $1 in a { print a[$1],$1,$2 }' file1 file2 > file3

awk 'BEGIN{ ORS = ""; RS = ">"; FS="\n" } $1 == "pattern" { print ">" $0 }' file

awk 'BEGIN{ fmt = "| %s | %s | %s | %s |\n"; printf fmt,  "Date", "Event", "Days Until", "~Weeks" } { match($0,/.* in /); printf fmt, $1, substr($0,12,RLENGTH-15), $(NF-4), $(NF-1) }' file

awk 'BEGIN{ hits=0; misses=0; }/^hit/{ hits+=$NF}; /^misses/{misses=$NF}; END {print "Hits: " hits "\nMisses: " misses }' txtfile

$ awk 'BEGIN{ system("find . -type f -not -name \".\"") }'

awk 'BEGIN{ while ( (getline var < ARGV[1] > 0) ) nr++; print nr }' file

awk 'BEGIN{A[0]="aaa";A[1]="bbb"}{ print $1, A[$1] }' abc.txt

awk 'BEGIN{FIELDWIDTHS = "10 18 13 11"}{printf "| %s | %s | %s |\n", $1,$3,$4}' "$device"

awk 'BEGIN{FIELDWIDTHS="14 8 6 6 6 8 6 8 6 8 200"}{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11}' $TMPFILE

 awk  'BEGIN{FPAT="\\s*\\S*\\s*";OFS=""} {sub("\\S*","bar",$2)}1' file

awk 'BEGIN{FS = ","}{print $1, $8, $10}'

awk  'BEGIN{FS=""; OFS=""}{if ($25$26 == "07") {$25="0"; $26="8"}{print}}'

awk 'BEGIN{FS=","; OFS=""} ...' file

awk 'BEGIN{FS=","; OFS=","} {$25=$22; print}' < test.csv

awk 'BEGIN{FS=","} $3 !~ /^synonymous/' fileCSV.csv > fileCSV2.csv

awk 'BEGIN{FS="/"} {print $NF}' file.txt

awk 'BEGIN{FS=";"} {for(i=1;i<NF;i++) if (i<26) printf $i FS}{print $26}' file

awk 'BEGIN{FS="="; OFS=" - "; desc=""}function display(){print dev, desc, flags}/Device/{if(desc!="") display(); desc=""; flags=""; dev=$0; gsub("Dev.*PLAY", "Display ", dev)}/Desc/{desc=$2}/Flags/{flags=$2}END{display}'

$ awk 'BEGIN{FS="\""}{print $2}' < test.dat

awk 'BEGIN{FS="\\<blue\\>"; OFS="blue"}{$1=""}7' file

awk 'BEGIN{FS="\n"; RS=""} $2~/country.*MO/ && $1~/SMS-MO-FSM/ ' file

awk 'BEGIN{FS="from|FROM|where|WHERE"} /from|FROM/ {print $2}'

awk 'BEGIN{FS="}+|{+| "} {for(i=1;i<=NF;i++) if($i ~ "[0-9]")print $i}' file.txt

awk 'BEGIN{FS=OFS="%"}{sub(/^ */,"",$2);$2=sprintf("%-8s",$2); print}'

awk 'BEGIN{FS=OFS=","} FNR==NR {a[$1]=$0; next} $2 in a{print $0, a[$2]}' f22.txt f11.txt

awk 'BEGIN{FS=OFS=","} {gsub(/^[ \t]+|[ \t]+$/, "", $2)}1' infile

awk 'BEGIN{FS=OFS=","} {if ($2>0) $2="-"$2; else sub("-", "", $2)}1' file

awk 'BEGIN{FS=OFS=","}{$NF=($NF>10?$NF+1:$NF)}1' file

awk 'BEGIN{FS=OFS=","}{gsub(/\"/,"");gsub(/[^,\r]+/,"\"&\"")}1' 

awk 'BEGIN{FS=OFS=","}{gsub(/^[ \t]+/,"",$2);gsub(/[ \t]+$/,"",$2)}1' input.txt

awk 'BEGIN{FS=OFS=","}{sub("[^.]*.","",$3);print}'

awk 'BEGIN{FS=OFS="."} NR==1{++$NF}1' file

awk 'BEGIN{FS=OFS="."} NR==1{++$NF}1' file > tmp_file && mv tmp_file file

awk 'BEGIN{FS=OFS="."} {$4=$4+4; print}' input > output

awk 'BEGIN{FS=OFS="."} {$4=$4+4; print}' input | while read line; do echo "hello world" > "$line"; done

awk 'BEGIN{FS=OFS="/"} {print $6, $7}' input_file.txt > parsed_vars.txt

awk 'BEGIN{FS=OFS=":"} {if (NR==1) {$3 = "XXXX"}; print}' input_file

awk 'BEGIN{FS=OFS=":"}NR==FNR{a[$2]=$1;next}{$2=a[$2]}1' city.txt user.txt

awk 'BEGIN{FS=OFS=":"}{$NF=($NF~/abc/)?"def":$NF}1' your_file

awk 'BEGIN{FS=OFS=":"}{for(i=1;i<=NF;i++)if(i==5 && $i=="abc"){$i="def"}}1' your_file

awk 'BEGIN{FS=OFS=":"}{for(i=1;i<=NF;i++)if(i==5){$i="def"}}1' your_file

awk 'BEGIN{FS=OFS="\""} {for (i=1;i<NF;i+=2) gsub(/ /,";",$i)} 1' file

awk  'BEGIN{FS=OFS="\""}{for(i=1;i<=NF;i++)if($i~/[0-9\.]*/)gsub("\\.",",",$i)}1' file

awk 'BEGIN{FS=OFS="\",\""}$5=="credit"{$4="+"$4}$5=="debit"{$4="-"$4}1' file.csv

awk 'BEGIN{FS=OFS="\t"} {sub("\.", $3, $2)}1' file

awk 'BEGIN{FS=OFS="\t"}NR==FNR{ids[$1]++;next}!($1 in ids)' idFile tabFile > new_tabFile

awk 'BEGIN{FS=OFS="\t"}{$1=$2=$3="";print}' file

awk 'BEGIN{FS=OFS="\t"}{print $4,$5,$6}' file

awk 'BEGIN{FS=OFS="\t"}{split($2,a,"_"); $2=a[1]"_"a[2]"\t"a[3] }1'  file

awk 'BEGIN{FS=OFS="_"}$NF==$(NF-1){--NF;$1=$1}1' test.in

awk 'BEGIN{FS=OFS="|"} NF!=20{print "not enough fields"; exit} !($1~/^[0-9]$/) {print "1st field invalid"; exit}' file.csv

awk 'BEGIN{FS=OFS="|"} NF==20 && $1~/^[0-9]$/ && $2~/^[a-z]{2,4}$/ && $3~/^[YN]$/' file.csv

awk 'BEGIN{FS=OFS="|"} {t=$1; $1=$2; $2=t; print} ' input_file

awk 'BEGIN{FS=OFS="|"}/^B/{$3="QQQ"$3}1'

awk 'BEGIN{FS=OFS="|"}/^B/{$3="QQQ"}1'

 awk 'BEGIN{FS=OFS="|"}NR==FNR{a[$1]=$3;next}$5 in a{$7=a[$5]}1' file1 file2

awk 'BEGIN{FS=OFS=","} {$2=$(NF-1); NF=NF-3;sub(/$/,"\r");}'1 sample.csv 

awk 'BEGIN{FS=OFS="- "} NF>1{$1="";sub(/^- */, "")}'1 inFIle

awk 'BEGIN{FS=OFS="/"} {$NF=""}'1 file

awk 'BEGIN{IGNORECASE = 1} f; /some_word<\/div>/ {f=1}' <<< "$source"

awk 'BEGIN{OFMT="%.16f";print rand()}'

awk 'BEGIN{OFS = ","; FS = ";"} {$1 = $1; print $0, FILENAME}' *.csv > newfile.csv

awk 'BEGIN{OFS = ","; FS = ";"} {$1 = $1; split(FILENAME, a, "_"); print $0, a[1]}' *.csv > newfile.csv

awk 'BEGIN{OFS = FS = ";"} {print $0, FILENAME}' *.csv > newfile.csv

awk 'BEGIN{OFS=" ";} NR==1 { print; next } { v = ($2 == a) ? (($3 == b) ? "0" : "1") : "0"; } v == "1" && reprice[$2] { v = "0"; } { print $0, v; a = $2; b = $3 } v == "1" {reprice[$2] = 1}' testv1.txt

awk 'BEGIN{OFS=" "}NF>1{t=$1;$1="";printf "%-13s%s\n",t,$0}'

awk 'BEGIN{OFS="/"} NR%4==1{$2=$2*1}1' file

awk  'BEGIN{OFS="\t";} {print $1,$3,$5}' infile >> outfile

 awk 'BEGIN{OFS="\t"} NR==1{print;next}{if ($4==0) {print $0, "inf"} else {print $0, ($3/$4)/log(2)}}' file

awk 'BEGIN{OFS='\t'} {print $2, $1}'

$ awk 'BEGIN{OFS=FS="\t"} $2=FS$2' file

awk 'BEGIN{OFS=FS="\t"}{gsub(/^999$/, "XXX", $3); print}' OFS="\t" test.txt

awk 'BEGIN{ORS="";} NR==1 { print; next; } /^[[:digit:]]/ { print "\n"; print; next; } { print; }'

PATH=$(awk 'BEGIN{ORS=":";RS="[:\n]"}!a[$0]++' <<<"${PATH%:}")

awk 'BEGIN{RS="<<<<<<o01o>>>>>>";FS="\n"} /CLAUSEID/{system("banner " substr($2,10)); for(i=8;i<NF;i++) if(i==8) print substr($i,8);else print $i; system("read i;clear")}' autocontract.txt

awk 'BEGIN{RS="<<<<<<o01o>>>>>>";FS="\n"} /CLAUSEID/{system("banner " substr($2,10)); for(i=8;i<NF;i++) print $i; system("read i;clear")}' auto_contract_data1.txt

awk 'BEGIN{RS=""; FS="\n"; } { for (i=1;i<=NF;i++){ printf "%s ", $i; };printf "\n";} ' test4.txt > text4.txt.cln

awk 'BEGIN{RS="";FS="\n";OFS=","}{$1=$1}7' file

awk 'BEGIN{RS="";FS="\n";OFS=","}{print $1,$2}' file

awk 'BEGIN{RS=""} {for (i=NF-l-p-1;i<NF-p-1;i++) printf $i" "; print ""}' p=3 l=1159 file1.txt | sed 's/..\{47\}/&\n/g'

awk 'BEGIN{RS=""} {for (i=NF-p-1;i<NF-1;i++) printf $i" "; print ""}' p=1 file.txt | sed 's/..\{47\}/&\n/g'

awk 'BEGIN{RS="---+\n";a["pvid"];a["reserve_policy"];a["ww_name"]}{printf "%s",$3;for(i=1;i<=NF;i++)if($i in a)printf " %s", $(i+1);print ""}' file

awk 'BEGIN{RS=";"} NR==2{print $0}' yourfile.sql > output.sql

SOA=$(awk 'BEGIN{RS="@"} NR==2{print $6}' $SOAfile)

awk 'BEGIN{RS="\042"}{}' file

awk 'BEGIN{RS="\xFF"}{print $1, $2, $3, $4, $5, $6}' file

 awk 'BEGIN{RS="dob=";OFS="\n\n"}$1~/Customer1/{$0=$0"dob=1234";print}' input

awk 'BEGIN{for(i=2;i in ARGV;++i){j=ARGV[i];users[j]=1;ARGV[i]="";}}$N in users{print $4,$7,$14}' /var/log/xferlog "${userdirs[@]}"

awk 'BEGIN{getline to_add < "f3"}{print $0,to_add}' f

awk 'BEGIN{i=1}{if($0~/#0/){print $0"/"i;if(i==1)i=2;else i=1;}else {print}}' your_file

awk 'BEGIN{line=0;}/,,/{line=0;}!/,,/{a[line++]=a[line]" "$0;}END{for (i in a ) print a[i]}' datafile 

awk 'BEGIN{print "FD1" >"/dev/fd/1" ; print "FD6" >"/dev/fd/6" }'

awk 'BEGIN{print "WAM"}/\<WAM\>/{print $1}' /home/santosh/messages > text.file

awk 'BEGIN{print "host_name,hostgroups,check_interval"}/host_name/{v1=$2} /hostgroups/{v2=$2} /check_interval/{v3=$2} /}/{print v1","v2","v3; v1=v2=v3=""}' file

totalmark=$(awk 'BEGIN{print $sum / $subjects}')

awk 'BEGIN{print ($x~/^[A-L]/)?"YES":"NO"}'

awk 'BEGIN{print 0.5*2}' 

awk 'BEGIN{print ARGV[1]}' file

awk 'BEGIN{printf("%.16f", rand())}'

awk 'BEGIN{rs=RS;RS=FS} {last=$0} END{if (last ~ rs"$") print "found RS"}' file

awk 'BEGIN{s=0}/^of_interest /{s=1}/^)$/{if(s==1){print};s=0}{if(s==1)print}'

awk 'BEGIN{s=substr($x,1,1);print (s>="A"&&s<="L")?"YES":"NO"}'

awk 'BEGIN{seek=0} $3=="A" && $4==seek {print; seek +=1; if (seek>5) seek=0}' file.txt

awk 'BEGIN{split("23 17 21 1",tmp); for (i in tmp) arr[tmp[i]]} $2 in arr' file

awk 'BEGIN{split("4 6 3 2 7 1 5",n)} {a[NR]=$0} END{for(i=1;i in n;i++) print a[n[i]]}' file.txt > output.txt

awk 'BEGIN{split("5 6 7",a," ")}{t=$0;sub(/.$/,a[++i],$2);$0=t RS $0}1' FS=\" OFS=\" /tmp/MC/Cell_F1 > /tmp/MC/Cell_F2

awk 'BEGIN{srand();R=rand()}{print $0, R}'

awk 'BEGIN{v="variable_name";V=toupper(v); FS=OFS=" : "} $1~"^"v{$2=($2~"^"V)?V"myValue":"myValue"}1' file

awk 'BEGIN{v=4}{now=(NR-1)%v; STOR[now] = STOR[now] "\n" $0;} END {for (v in STOR) print STOR[v]}'

awk 'BEGIN{v=4}{now=(NR-1)%v; STOR[now] = STOR[now] "\n" $0;} END {for (v in STOR) print substr(STOR[v],2)}'

awk 'BEGIN{while(a++<30)s=s " "} {print substr($0, 1, 6) s substr($0, 7)}' myfile

awk 'END {print $NF}' file

awk 'END {print NR}' a.txt

var2=$(awk 'END {print NR}' inputfile)

awk 'END {print x,"Total Matches"} $3~/0[69]:/&&++x'

awk 'END {print}' RS= output.dat

awk 'END{if (NR>2) {print}}' FILE

awk 'END{print FNR}' file

awk 'END{print NR}' file

awk 'END{print NR}' file1 file2

awk 'END{printf NR}' file.log

awk 'FILENAME != "file.txt"{ a[$1]=FILENAME; next } $1 in a { $3=a[$1]; sub(/\..*/,"",$3) }1' {A..E}.txt file.txt

awk 'FILENAME == "file1.txt" { print $1 } FILENAME == "file2.txt" { print $1 } FILENAME == "file3.txt" { print $1 }' *.txt

awk 'FILENAME == ARGV[1] { print $1 } FILENAME == ARGV[2] { print $1 } FILENAME == ARGV[3] { print $1 }' file1.txt file2.txt file3.txt

awk 'FILENAME==ARGV[1]{a[$0]++;next}!($1 in a||$2 in a)' file1 file2

awk 'FNR > 24' file1 file2 | sort -k3,3 -k4,4n > newFile

awk 'FNR > 24 { print $0 | "sort -k3,3 -k4,4n" }' file1 file2 > newFile

awk 'FNR != NR { if(!tot) tot=NR-1; printf( "%s %.4f\n", $0, FNR/tot) }' file file

awk 'FNR == 1 { print FILENAME } { printf "%02d %s\n", FNR - 1, $0 }' infile

awk 'FNR == 2 {print}'

awk 'FNR == 3' file1 [file2 .. filen] > output3

awk 'FNR == 5 {print $3}'

awk 'FNR == NR { a[$1] = $2; next } { print $1,  a[$1], $2 }' file2 <(sort -nr -k 2 file1)

awk 'FNR == NR { a[$1] = $2; next } { print $1,  a[$1], $2 }' file2 file1

awk 'FNR == NR { a[$1] = $2; next } { t = $1; sub(/_.*$/, "", t); printf "%s\t%s\n", $1, a[t] }' file1 file2

awk 'FNR == NR { f2[ $1 ] = 1; next } FNR < NR { print (($1 in f2) ? 1 : 0) >"output" }' file2 file1

awk 'FNR == NR { h[$1] = 1; next } !h[$1]' file2 file1

 awk 'FNR == NR { tot=NR; next } { printf( "%s %.4f\n", $0, FNR/tot) }' file file 

awk 'FNR == NR {arr[$1] = $2 " " $3; next} {print; for (lookup in arr) {if ($0 ~ lookup) {split(arr[lookup], a); print "Here I want to add " a[1] " and " a[2]}}}' File1 File2

awk 'FNR == NR {keys[$1]; next} $3 in keys || $6 in keys' fileB fileA

awk 'FNR<=5' file

awk 'FNR<=8192{ print $2 }' *.tst > finalfile

awk 'FNR>5'  inputfile

awk 'FNR==1 && NR!=1 {print "END"} /START/,/END/{if (!/START/&&!/END/) print} END {print "END"}' test*.txt

awk 'FNR==1 {if (/^#/) {print;getline};print "#"$0;next} 1' file

awk 'FNR==1 {print ">"FILENAME} f+1==$0 {a++} f+1!=$0 {if (a>1) {for (i=f-a;i<=f;i++) print i}a=0} {f=$0}' *

awk 'FNR==1{a+=$2;next}{b+=$2;close(FILENAME);nextfile}END{print a,b}' diffusion*

awk 'FNR==1{if(s!=0)print s/c; s=0;c=0}{s+=$7;c++}END{print s/c}' c* > result.txt

awk 'FNR==1{p=0} $1=="ice" && $2=="cream" && !p {print FILENAME;p=1}'  file1 file2 file3

awk 'FNR==1{print ""}1' *.txt

awk 'FNR==1{print FILENAME} $2>20{print "    ",$1}' file1 file2

awk 'FNR==1{r=0;w=0;lasttime=$1} $1!=lasttime{print lasttime,"Read: ",r, "Write: ",w;r=0;w=0;lasttime=$1} /write\(/{w++} /read\(/{r++}' file

awk 'FNR==52' Files*

awk 'FNR==52 {print; nextfile}' Files*

awk 'FNR==NR && /^0/{a[FNR]} NR>FNR && (!(FNR in a))' inputfile anotherfile

awk 'FNR==NR && /regex2/ { var = $1; next } /regex1/ { print var }' file.txt{,}

awk 'FNR==NR { a[ "\\[ " $1 " \\]" ]; next } /^\[/ { f=0 } { for (i in a) if ($0 ~ i) f=1 } f' file1 file2

awk 'FNR==NR { a[$0]; next } $0 in a' file2 file1

awk 'FNR==NR { a[$1]; next } !($1 in a)' file2 file1

awk 'FNR==NR { a[$1]; next } $1 in a' file2 file1

awk 'FNR==NR { a[$1]; next } $2 in a' file1 file2

awk 'FNR==NR { a[$1]=$0; next } $1 in a { print a[$1] }' table list

awk 'FNR==NR { a[$1]=$0; next } $1 in a { print a[$1] }' table list | column -t

awk 'FNR==NR { a[$1]=$2; next } FNR==1 { for (i in a) b[i]=a[i] } { for (j in b) if ($0 ~ j && b[j]-- > 0) print > FILENAME ".out" }' values.file $(find . -type f -regex ".*\.\(txt\|doc\)$")

awk 'FNR==NR { a[$NF]; next } !($NF in a)' other main

awk 'FNR==NR { a[$NF]; next } $NF in a' other main

awk 'FNR==NR { a[$NF]; next } { print > ($NF in a ? "deleted" : "present") }' other main

for i in *; do awk 'FNR==NR { a[NR]=$0; next } { for (i=FNR+1;i<=NR-1;i++) { split(a[i],b); print $1 "-" b[1], sqrt(($2-b[2])^2 + ($3-b[3])^2 + ($4-b[4])^2) | "column -t > /path/to/folder/" FILENAME } NR--}' "$i"{,}; done

awk 'FNR==NR { a[NR]=$0; next } { for (i=FNR+1;i<=NR-1;i++) { split(a[i],b); print $1 "-" b[1], sqrt(($2-b[2])^2 + ($3-b[3])^2 + ($4-b[4])^2) | "column -t" } NR--}' file file

awk 'FNR==NR { array[$0]++; next } { line = $4; sub(/\.[0-9]+$/, "", line); if (line in array) print }' fileB.txt fileA.txt

awk 'FNR==NR { array[$1]++; next } { for (i=1; i<=NF; i++) if ($i in array) print $0 }' dict file

awk 'FNR==NR { array[$1]=$2; next } { if ($1 in array) print $1, array[$1] - $2 > "A3/f1.txt" }' ~/A1/f1.txt ~/A2/f1.txt

awk 'FNR==NR { array[$1,$2]=$8; next } ($1,$2) in array { print $0 ";" array[$1,$2] }' input1 input2

awk 'FNR==NR { array[$2]=$6; next } { if ($2 in array) print $2, array[$2] - $6 > "A3/f1.txt" }' ~/A1/f1.txt ~/A2/f1.txt

awk 'FNR==NR { c++; next } FNR==2 { x = substr($NF,0,8) } FNR==c-1 { sub(/[^,]*/,x); sub(/..$/,""); print }' file file

awk 'FNR==NR { for (i=$2-4;i<$2+5;i++) a[i]; next } $4 in a { b[$10,$4] } END { print length b }' LISTFILE INFILE

awk 'FNR==NR { for (i=1;i<=NF;i++) if ($i != "NA") a[$i]++; next } { for (j=1;j<=NF;j++) if ($j in a) next }1' file1 file2

awk 'FNR==NR { for(i=1;i<=NF;i++) a[NR][i]=$i; next } { for(j=1;j<=NF;j++) $j = $j * a[FNR][j] }1' file1 file2

awk 'FNR==NR { split($5,a,":"); split($6,b,":"); c[$1,$2,a[1],b[1]]="REF=" a[2] ";ALT=" b[2] ";"; next } ($1,$2,$4,$5) in c { print $0 ";" c[$1,$2,$4,$5] }' <(gzip -dc input1.gz) <(gzip -dc input2.gz) | gzip > output.gz

awk 'FNR==NR { split($5,a,":"); split($6,b,":"); c[$1,$2,a[1],b[1]]="REF=" a[2] ";ALT=" b[2] ";"; next } ($1,$2,$4,$5) in c { print $0 ";" c[$1,$2,$4,$5] }' input1 input2

awk 'FNR==NR { split($5,a,":"); split($6,b,":"); c[$1,$2,a[1],b[1]]="REF=" a[2] ";ALT=" b[2] ";"; next } ($1,$2,$4,$5) in c { print $1, $2, $3, $4, $5, $6, $7, c[$1,$2,$4,$5] $8 ";" }' file1 file2

awk 'FNR==NR { split($NF,a,":"); b[$1,$2]=a[2]; next } ($1,$2) in b { print $0 ";ASNE=" b[$1,$2] }' <(gzip -dc input1.vcf.gz) <(gzip -dc input2.vcf.gz) | gzip > output.vcf.gz

awk 'FNR==NR { split($NF,a,":"); b[$1,$2]=a[2]; next } ($1,$2) in b { print $0 ";ASNE=" b[$1,$2] }' input1.vcf input2.vcf

awk 'FNR==NR { two[$0]++; next } { for (i in two) { split(i, one); if (one[3] == $NF) print $1,$2,$3,$4, i, one[2] } }' file2 file1

awk 'FNR==NR {a[$1 FS $2]++; next} a[$1 FS $2]' file1 file2

awk 'FNR==NR {a[$1];next} {for (i in a) if (index($0, i)==1) print}' file2 file1

awk 'FNR==NR {a[$1]=$0;next} a[$1] {$0=a[$1]}1' file2 file1

awk 'FNR==NR {a[$1]=$2;next} a[$1]{$1=a[$1]}1' OFS="\t" subfile file

awk 'FNR==NR {a[NR]=$3;next} FNR%2==0 {$3=a[FNR]}1' firstfile secondfile

awk 'FNR==NR {a[NR]=$3;next} FNR%2==0 {$3=a[FNR]}1' firstfile secondfile > tmp && mv tmp secondfile 

$ awk 'FNR==NR {if(length($0)==32)p = substr($0,12,18);if(/Invnum.*/)A[p]=substr($0,7);next}((s=substr($1,1,18)) in A){ print $1 A[s] }' file2 file1.txt

awk 'FNR==NR {keys[FNR]=$2; cnt=FNR} {x[$2] += $3} END {for(i=1; i<=cnt; ++i) print keys[i],x[keys[i]]}' freqdat044.dat freqdat045.dat freqdat046.dat freqdat047.dat freqdat049.dat freqdat050.dat

awk 'FNR==NR {something; next} {other things}' file1 file2

awk 'FNR==NR {x2[$1] = $0; next} $1 in x2 {print x2[$1]}' second first

awk 'FNR==NR {x2[$1] = $0; next} $1 in x2 {print x2[$1]}' second first

awk 'FNR==NR{a[$0]++;next}a[$0]' file1 file2

awk 'FNR==NR{a[$0];next} $0 in a' <(awk 'FNR==NR{a[$0];next} $0 in a' f1 f2) <(awk 'FNR==NR{a[$0];next} $0 in a' f3 f4)

awk 'FNR==NR{a[$0];next}!($0 in a)' file1 file2

$ awk 'FNR==NR{a[$0];next}!($0 in a)' file1 file2 > file3

awk 'FNR==NR{a[$0];next}($0 in a)' file2 file1

awk 'FNR==NR{a[$0];next}($0 in a)' file_1 file_2

awk 'FNR==NR{a[$0]=1;next}a[$0]-- > 0' file1 file2

awk 'FNR==NR{a[$1]++;next}(a[$1] > 1)' ./infile ./infile

awk 'FNR==NR{a[$1];next} ($1 in a){delete a[$1]; print $1}' file1 file2

awk 'FNR==NR{a[$1];next} {for (i=1; i<=NF; i++) if ($i in a) print}' A B

awk 'FNR==NR{a[$1];next}($1 in a)' file1.txt file2.txt

awk 'FNR==NR{a[$1];next}{ for(i=1;i<=NF;i++){ if($i in a) {print $i} } } '  file1 file2_wget

awk 'FNR==NR{a[$1]=$0;next} !($1 in a) {print $1, $4}' file2 file1

awk 'FNR==NR{a[$1]=$2;next}(($1 in a) && a[$1]-- >0)' filter.txt map.txt

awk 'FNR==NR{a[$1]=$2;next}(($1 in a) && a[$1]-- >0){print}' filter.txt map.txt

awk 'FNR==NR{a[$2]=$3;next}{print $0,a[$2]?a[$2]:"NA"}' file2 file1

awk 'FNR==NR{a[++i]=$0;next} {print a[FNR] "\t" $0}' a.txt b.txt

$ awk 'FNR==NR{a[NR]=$1;next}{$7=$7-a[FNR];print}' avg.txt corr0.txt

awk 'FNR==NR{a[NR]=$3;next}{$2=a[FNR]}1' f2 f1

$ awk 'FNR==NR{dict[$1]; next}; $1 in dict' file{1,2}.txt

awk 'FNR==NR{i[$1]=1;next} i[$1]{print}' file1 file2

 awk 'FNR==NR{if(NR%2)i=$0;else a[i]=$0;next;}{if($0 in a){print; print a[$0]}else if ($0!~/someurl/) print}' f2 f1

awk 'FNR==NR{if(NR%2)i=$0;else a[i]=$0;next;}{if($0 in a){print; print a[$0]}else print}' file2 file1

awk 'FNR==row { printf "%6.3f    ", $col } END { printf "\n" }' row=2 col=2 file1 file2

awk 'NF > 0 { print $1 "\t" ($3 - $2) }' input.txt

awk 'NF > 2' input_file > output_file

awk 'NF > 3 { f = $NF } $1 ~ /^Rss/ && f ~ /\// { print f, $2 }'

awk 'NF >= 3' filename

awk 'NF >= 8 { a[++i] = $0 } NF == 2 { a[i] = a[i] " " $2 } END { for (j = 1; j <= i; ++j) print a[j] }' file

awk 'NF != 3 || !/\r$/' file

$ awk 'NF && !/^(>|END)/ && !/#.*/' file

LC_ALL=C fgrep -f ./my/patterns.txt ./my/file.txt | awk 'NF == 7' | "$decoder" > ./path/to/result.txt

awk 'NF == 7' ./my/file.txt | LC_ALL=C fgrep -f ./my/patterns.txt | "$decoder" > ./path/to/result.txt

awk 'NF' INPUT_FILE > OUTPUT_FILE

awk 'NF' data.txt

awk 'NF' data.txt

awk 'NF<4{getline $(NF+1)}1' file

awk 'NF>1 { for(i=2;i<=NF;i+=2) if ($i>0.05) next }1' File_1.txt

awk 'NF>1{print $1}' file

awk 'NF>2' file

awk 'NF>3' ./infile

awk 'NF>3' file

awk 'NF>3{a=$1;b=$2;c=$3;$1=$1;print;next}NF<3{d=$1;e=$2;print a,b,c,d,e;next}{$1=$1;}1' OFS=',' file

awk 'NF>=3' file

awk 'NF { print $1 }' your_input

 awk 'NF==0&&s==0{NR=0}NR==1&&$1=="/*"{s=1}s==1{print $0}$NF=="*/"{s=2}' test.c

awk 'NF==1 { print $0, "NULL"; next }1' file

awk 'NF==1{cmd=$1;next} NF==0{next} $1==cmd{printf "%s", $0; while (1) { if (! getline tmp) break; if(length(tmp)) printf " %s", tmp; else break;};print ""}' test.txt

awk 'NF==2'

awk 'NF==4'

awk 'NF==4' input.txt

awk 'NF==4 {print > "OutputChr"$1".txt}'

awk 'NF==4{count++} END {print count}' file

awk 'NF==4{t=$NF;next}$0{print t,$4,$NF}' file

awk 'NF==7&&/ROTATION/{if($7<0||$7>0.2)$7=0}1' file

awk NF=NF FS='\\..+ ' test.txt

awk 'NF{$(NF-1)~/[a-zA-Z]+/?count+=$NF:num+=$NF;count+=$(NF-1)}END{print "Count= "count" NUM= "num}' inputFile

awk 'NF{i++} END { print i }' Nameofpop_chr1_window1.txt

awk 'NF{print $0}' ORS='\n\n' <<< "$str_text"

awk 'NR > 1 && $2 < p ...'

awk 'NR > 1 && $2 < p { $2 = p } { p = $2 } 1' OFS=\\t input-file

awk 'NR > 1 && NF == 6 { if ($6 == "+") x = $4; else x = $5; print $1, $2, $3, x; }'

awk 'NR > 1 && max < $1 { max = $1 } END { print max }' file.txt

awk 'NR > 1 && min=="" || min > $1 { min = $1 } END { print min }' file.txt

awk 'NR > 1 { print prev } { prev = $0 }' file.txt

 awk 'NR > 1{print line" \\"}{line=$0;}END{print $0" "}' inputfile

awk 'NR >= 23 && NR <= 56'

awk 'NR >= 5 && NR <= 5 + Y { print $X }' file.txt

awk 'NR >=2 {for (i=7;i<=NF;i++) if ($i !~ /^-/) sum += $i; print $1,$2,$3,$4,$5,$6,sum; sum = 0}' data.txt

awk 'NR % 10 != 0' file > newfile

awk 'NR % 2 == 0' file > newfile

awk 'NR % 2 == 0' filename

awk 'NR % 2 == 0 { print substr($0, 0, 45) } NR % 2 == 1 { print }' BT8_A.fastq

awk 'NR % 2 == 1 { saved_line=$0 ; next } { print saved_line $0 }' INPUTFILE

awk 'NR % 2 {print} !(NR % 2) && /pattern/ {print}' file.fasta

awk 'NR % 2 {print} !(NR % 2) {print length($0)}' file.fasta

awk 'NR % 2 {print} !(NR % 2) {print | "grep pattern | rev" }' file.fasta

awk 'NR % 3 == 0 { print $0 ; print "" } NR % 3' INPUTFILE

awk 'NR % 4 == 1 {sub(/$/,",")} {print}'

awk 'NR == 1 { I = NF ? 12 : 13 } NR > I' "IMSI$r.txt"

awk 'NR == 1 { I = NF ? 12 : 13 } NR > I { print $NF "\r" }' "IMSI$r.txt"

awk 'NR == 1 { I = NF ? 12 : 13 } NR > I { print $NF "\r" }' "IMSI$r.txt" | tee -a out > "N$x"

awk 'NR == 1 { print $0, "sum"; next } { if (NR == 2) { sum = $1 + $2 + $3 + $4 } else { t = $1 - a; sum = ($2 - b) / t + ($3 - c) / t + ($4 - d) / t } print $0, sum; a = $1; b = $2; c = $3; d = $4 }' file

awk 'NR == 1 {pad = length($0); print} NR > 1 {gsub(/\r/,""); printf "%*s%s\n", pad, " ", $0}'

awk 'NR == 1 || $3 < min {line = $0; min = $3}END{print line}' file.txt

awk 'NR == 2 {print}; {line1 = line2; line2 = line3; line3 = $0} END {print line1; print line2; print line3}' files*

 awk 'NR == 62 || NR == 152 || NR == 153 || NR % (62+217) == 0 || NR % (152+217) == 0 || NR % (153+217) == 0 {print $0;}' test.txt

awk 'NR == FNR { a[$1, $2]++; next } a[$1, $2]' file1 file2

awk 'NR == FNR { f1[$0]; next } !($0 in f1)' file1 file2

awk 'NR == FNR {a[$2] = $1; next} {if ($2 in a){print(a[$2], $1)}}' file1 file2

awk 'NR == FNR {nums[$1]++; next} ! flag {flag = 1; for (num in nums) {if (nums[i] > max) {max = nums[i]}}} {print max * $3}' filetomax filetoprocess

awk 'NR == FNR{a[$0];next} !($0 in a)'  fileA fileB

awk 'NR<4' file

awk 'NR<=3 || /hello/' test.txt > out_dir/test.hello.txt

$ awk 'NR>1 && $1~"/"{print s; s=""} {s=s $0} END{print s}' file

awk 'NR>1 && $1~r { next } { print; r="^" $1 }' words

$ awk 'NR>1' file

e=$(awk 'NR>1 {if ($2>40) {print $1,$2; f=1}} END {if (!f) print "ok"}' <<<"a$")

awk 'NR>1 {print $1 "," $2 >> $5 ".txt"}' < output.txt

awk 'NR>1&&/pattern/{print "lineToInsert"}1' file

awk 'NR>1000 {print $0}' graph_data_tmp.txt

awk 'NR>10{for (i=13;i<=NF;i++) $i=substr($i,1,3)} 1' file

awk 'NR>1{$0=substr($1,0,1)$2" "$3}1' file

awk 'NR>1{a=$3;$3="@";gsub(/ -1\>/," ? ?");gsub(/\<0\>/,$5 " " $5);gsub(/\<1\>/,$5 " " $6);gsub(/\<2\>/,$6 " " $6);$3=a;print}' file

 awk 'NR>1{if($6=="N") print $1,$3,$4,$5; if($8=="N") print $1,$3,$4,$7 } ' file

awk 'NR>1{print $2,$3,$4 > $1}' file

awk 'NR>1{print $2,$3,$NF}' inputFile > outputFile

awk 'NR>1{printf "%d %d %d\n", $20,$45,$102}' RS='vector'

awk 'NR>1{printf "=HYPERLINK(B%d, C%d) \t https://otrs.city.pittsburgh.pa.us/index.pl?Action=AgentTicketZoom;TicketID=%s\n", NR-1, NR-1, $0}' temp.txt > untemp.txt

awk 'NR>1{s=$2+$3+$4;if(($1 in a && s>m[$1])|| !($1 in a)){m[$1]=s;a[$1]=$0}}END{for(x in a)print a[x]}' file|sort -V

awk 'NR>1{t=$1;gsub(/[^[:alpha:]]/,"");$0=t "\t" $0}1' file

awk 'NR>2 && $1~/DISK_2/{print $4}' INPUT_FILE

awk 'NR>2 {print $NF "\r"}' IMSI.txt

awk 'NR>2{ print l} {l=$0}'

awk 'NR>2{print $1}' /proc/net/dev

awk 'NR>2{print $4}' INPUT_FILE

awk 'NR>2{while((getline a < "sample.txt") > 0){print a}}1' input.txt

awk 'NR>4 { print a[i%4]} {a[i++%4]=$0}' input

awk 'NR>90307{for(i=2;i<=90289;i+=3) print $i, $(i+1), $(i+2) }'

awk 'NR>=2 && NR<=4' file

awk 'NR>=3&&NR<=5' input.txt

awk 'NR>=3{print}NR==5{exit}' /etc/passwd

awk 'NR>=4' file

awk 'NR>=start && NR<=end && /string/ {print NR}' start=$LINESTART end=$LINEEND ${myFile}

awk 'NR ~ /^9|13|17|21$/{sub(/[0-9]+\r$/, "1\r")}1' file > _temp && mv _temp file

awk 'NR!=1{print $3}' your_file

awk 'NR!=FNR && FNR==1 { print NR - FNR }' file file

awk 'NR%10' yourfile > newfile

awk 'NR%1000 == 1{ file = "outputfile" i++ } { print > file }' ORS= RS=------ test.list

awk 'NR%100==1 { ++i } { print $0 (NR%100==0 ? "\nFFFFFF" : "") > "outputfile" i ".txt" }' file.txt

awk 'NR%2'

awk 'NR%20==1 { file = FILENAME "_" sprintf("%04d", NR+19) } { print > file }' domains.xml

awk 'NR%2==0' infile > outfile

awk 'NR%2==0 { x = sprintf("%-66s", $0); gsub(/ /,"A",x); $0 = x }1' file

awk 'NR%2==1 {line=$0; next} {printf("%-20s%-4s%s\n", line, $2, $3)}' file

awk 'NR%2{printf $0" ";next;}1' yourFile

awk 'NR%3!=0{printf "%s ",$1;next}1' inputFile

awk 'NR%3==1{if(a)print a;a=$0;v=$NF;next}$NF<v{a=$0;v=$NF}END{print a}' file

awk 'NR%4 && NR%4!=3'

awk 'NR%4!=0 { printf "%s", $0; next } { sub(/,$/,"") }1' file

awk 'NR%4!=0 { printf "\"%s\",", $0; next } { printf "\"%s\"\n", $0 }' file

awk 'NR%40==1 || NR%40==2 || NR%40==3 || NR%40==4' file

awk 'NR%40~/^[1-4]$/' file

awk 'NR%4==1 || NR%4==2'

awk 'NR%4==1 || NR%4==2' file

awk 'NR%4==1{sum=$2; next}{sum+=$2} NR%4==0{print ++j,sum;}' input.txt

awk 'NR%5{printf "%s", $0;next}1' file

awk 'NR%5{printf "%s, ",$0;next}1' file

awk 'NR%6==1 || NR%6==2' file

awk 'NR%7==0 { print ++i, $2, $3, $4}' Files*.txt

awk 'NR%8 ~ /[134]/' file

awk 'NR== 71 || NR == 116 || NR == 211 {sub(/ *$/,"",$0)}{print $0}'

awk "NR==$line_start, NR==$line_end" file

awk "NR==$r {print $0}" Aenumerar

awk 'NR==1 { $0=substr($0, 1, 5) } 1' file

awk 'NR==1 { $0=substr($0, 1, 52000) } 1'

for i in *; do awk 'NR==1 { n = $5 } FNR==NR && $5 != n { a[c++]=$0 } FNR!=NR && $5 == n { for (i=0;i<=c-1;i++) { split (a[i],b); dist = sqrt (($7-b[7])^2 + ($8-b[8])^2 + ($9-b[9])^2); if (dist >= 5) printf "%s-%s\t%.2f\n", $NF, b[NF], dist > "/path/to/folder/" FILENAME } }' "$i"{,}; done

awk 'NR==1 { n = $5 } FNR==NR && $5 != n { a[c++]=$0 } FNR!=NR && $5 == n { for (i=0;i<=c-1;i++) { split (a[i],b); dist = sqrt (($7-b[7])^2 + ($8-b[8])^2 + ($9-b[9])^2); if (dist >= 5) printf "%s-%s\t%.2f\n", $NF, b[NF], dist } }' file{,}

awk 'NR==1 { next } FNR==NR { a[$1]=$2; next } $1 in a { $1=a[$1] }1' TABLE OLD_FILE

awk 'NR==1 { print "First Login:", $1, $2, $3 } END { print "Last Login:", $1, $2, $3 }' logins.txt

awk 'NR==1 { print; next } { print $0, ($1 == a && $2 == b) ? "equal" : "not_equal"; a = $1; b = $3 }' file | column -t

awk 'NR==1 {next} {$1=$1;  print ": (" $0}' RS=': \(' FS='\n' OFS="" filename

awk 'NR==1 {print substr($0,12,6),substr($0,21,7)}' inputfile.inp

awk 'NR==1 {print; next} {split($2,a,/,/); for (i in a) {$2=a[i]; print}}'

awk 'NR==1 {s=l=$1; next} $1!=l+1 {if(l == s) print l; else print s ":" l; s=$1} {l=$1} END {if(l == s) print l; else print s ":" l; s=$1}'

awk 'NR==1 || ($25 > 333 && $25 <= 500)' av_bngc6522_Hband_chi1p5_IR_10 > lumbin_500

awk 'NR==1 || NR==2 || !/^#/' file.txt

awk 'NR==1&&/^\/\*/{s=1}s==1{print $0}s==1&&$NF=="*/"{s=0}' test.c

awk 'NR==1,/mySearchString/' | tail -n 19 | head -n 1

awk 'NR==1,NR==750' INPUT_FILE

awk 'NR==10' file

awk 'NR==100,NR==200{print $8}' file.tsv

awk 'NR==102 {$0=$0","}1' file

awk 'NR==162 {print $4}' FS='"' skinlist.html

awk 'NR==1{OFS="\t";print;next} {x[$1 OFS $2]+=$3} END{for (r in x)print r,x[r]}' file

awk 'NR==1{for(i=0;i<NF;i++){row[i]=$i}} NR==2{for(i=0;i<NF;i++){printf "%s:%s",row[i],$i}}' oldfile > newfile

awk 'NR==1{for(i=1;i<=NF;i++)n[i]=$i}; NR==3{for(i=1;i<=NF;i++){if($i~/florida|texas/)print $i"\t"n[i];}}' yourFile

$ awk 'NR==1{for(i=1;i<=NF;i++)print i,$i}' FS='"' RS='</client>' file

$ awk 'NR==1{h=$0;next}{f="file"++i;print h,$0 > f;close(f)}' OFS='\n' file

awk 'NR==1{n=NF}{$n=$n}1' FS=, OFS=, file

awk 'NR==1{nc=NF;for(i=1;i<=nc;i++)a[i]=$i}{for(i=1;i<=nc;i++){if($i!=a[i]){v[m[i]++,i]=$i;if(m[i]>nl)nl=m[i]}}}END{for(l=0;l<nl;l++){for(i=1;i<=nc;i++){if(l<m[i]){printf("%d ", v[l,i])}else{printf("  ")}}printf("\n")}}'

awk 'NR==1{next}NR==FNR{while(++i<=NF)if($i!="0")k[i];i=0;next}{while(++x<=NF)if(!(x in k))printf "%s ",$x;x=0;print ""}' file file

awk 'NR==1{prev=$0}NR>1{printf "%s\n%s\n%s\n%s\n%s\n%s\n", prev, prev, $0, $0, prev, prev; prev=$0}' input.txt

awk 'NR==1{print "Type,",$0}NR>1{print "Adding Text,",$0}' filename

awk 'NR==1{print $1}' /etc/*release

awk 'NR==1{print $NF}' RS="Failed to clone" input-awk.txt

awk 'NR==1{print;next}$2==0' file

awk 'NR==1{s=$2;next} {print s ORS $6 ORS s, $6}' file

awk 'NR==1{t=$NF;next}$0{print t,$4,$NF}' file

awk 'NR==1{top_line=$1} {$1=int(($1-top_line)/200); print $0}' data.txt

awk 'NR==2 {gsub(/;/,\"\"\\);print (match($3,/^ch/\\) ? \"\ \":\"\"\\),$2,$4}'

awk 'NR==2 {split($2, arr, "[#/]"); print arr[2]}'

awk 'NR==2, NR==4' file

awk 'NR==2,NR==5' INPUT_FILE

extpinglostvalue=$(awk 'NR==271{for(i=1;i<=NF;i++)if($i=="Lost")print $(i+2)}' filename.txt)

awk 'NR==27{printf "%s ", $0}' $INDIR/files >> $OUTDIR/files

awk 'NR==2{print "\n" $0; next}1' file

awk 'NR==2{printf("%s ",$0);next}1' file

Wifi=$(awk 'NR==3 {print $3}' /proc/net/wireless)

awk 'NR==3 {while (getline < "file2") print; next} 1' RS='' ORS='\n\n' file1

awk 'NR==3,NR==5' /etc/passwd

$ awk 'NR==314' file

$ awk 'NR==314{print;exit}' file

awk 'NR==3{print "my log"}1' INPUT_FILE

awk 'NR==42{print $1; exit}'

awk 'NR==5' file

awk 'NR==6 { print $2 }'

awk 'NR==7' file

awk 'NR==7{print $2} NR==8{print $3} NR==11{print $1, $3}' Old_file > New_file

awk 'NR==FNR { a[$0]; next } { for (i in a) print i",", $0 }' file1 file2

awk 'NR==FNR { a[$1];next } (FNR in a)' line_number_list.txt bigfile.txt

awk 'NR==FNR { a[FNR]=$2; next} $2 != a[FNR] { print $2 }' File1 File2

awk 'NR==FNR { pats[$0]=1; next } { for(p in pats) if($2 ~ p) { print $0; break } }' patterns file

awk 'NR==FNR {a[$0]; next} $0 in a {i=0} ++i>3' names.dat text.dat

awk 'NR==FNR {a[$1]; next} $1 in a' second_file first_file

awk 'NR==FNR {a[$1];next} ($1 in a) && ($2=="spring") && (($4-($3-$4))>0)' FILE_B FILE_A

awk 'NR==FNR {a[$1]=$2; next} {if ($1 in a) {$1=a[$1]}}1' f2 f1

awk 'NR==FNR {a[$2,$4]++; next} {print $0 "\t" a[$2,$4]}' file file

awk 'NR==FNR {id[$1]=1; next} $i in id' fileB fileA

awk 'NR==FNR {if($0 ~ /^---/) {b=1} else if(b==1) {a[$1$2]=$3; b=0} next} $1$2 in a {if(a[$1$2]<$3) print $2}' file1 file2

awk 'NR==FNR {n[FNR]=$1; next} {sub(/[^[:space:]]+/, n[FNR]); print}' f1 f2

awk 'NR==FNR {print; seen[$0]=1; next} !($0 in seen)' file1 file2 

awk 'NR==FNR{ a[$0]++ } NR!=FNR && a[$1 $2 $3]' file_no_del original_file

awk  'NR==FNR{ a[$1]=$2; next;} $2==0{ $2=a[$1]; }1' OFS="\t" input2 input1 

awk 'NR==FNR{ if( $1 in a) next;a[$1]=$2;next}{$0=$0" "a[$1]}1' file1 file2

awk 'NR==FNR{ if($1 in a) a[$1]=a[$1]","$2" "$3; else a[$1]=$2" "$3;next;} {n=split(a[$1],arr,",");for(i=1;i<n;i++){split(arr[i],b," ");if( $2 > b[1] && $2 < b[2] ){ print $0;} }}' file2 file1

awk 'NR==FNR{ s[$1]+= $2; next} {t+=s[$1]} END{ print t}' FS=, csv-file names.txt

awk 'NR==FNR{A[$1]; next} $1 in A' file1 file2 > file.new

awk 'NR==FNR{A[$1]=$2; next} {i=int($1+.5); print (i in A)?A[i]:0}' ctd seafloor 

awk 'NR==FNR{A[$1]=$2; next} {i=int($1+.5); print A[i]+0}' crd seafloor

awk 'NR==FNR{A[$1]=NR; next} A[$1]!=FNR{print>f; next}1' f=dups file file

awk 'NR==FNR{NF==2?k=$2:a[k]=$1;next}{for(i=2;i<=NF;i++){for(k in a){$i=$i==k?$i OFS a[k]:$i}}}1' FS="[> ]" file{2,1}

awk 'NR==FNR{a[">"$0]}/^>/{p=!($0 in a)}p' file2 file1

awk 'NR==FNR{a[$0]++;next}{for(x in a) if(index($0,x)>0) next}1' file{1,2}

awk 'NR==FNR{a[$0];next;}!($0 in a)' file1 file2 >out.txt

awk 'NR==FNR{a[$0];next} $1 in a{c=2} c&&c--' file2 file1

awk 'NR==FNR{a[$0];next} ($1 in a) && ($2 in a)' list.txt test.txt

awk 'NR==FNR{a[$0];next} /^>/{f=0} $1 in a{f=1} f' file2 file1

awk 'NR==FNR{a[$0];next} FNR in a' idx.txt lines.txt

awk 'NR==FNR{a[$0];next} { for (word in a) if ($0 ~ word) print FILENAME, $0 }' fileOfWords /wherever/dir/*

awk 'NR==FNR{a[$0];next}!($0 in a)' file2 file1

 awk 'NR==FNR{a[$0];next}NF<3||!($22 in a)' file1 file2

awk 'NR==FNR{a[$0]=1;next}!a[$0]' B A

awk 'NR==FNR{a[$0]=1;next}FNR==1{for(i=1;i<=NF;i++)if(a[$i])k[i]}{for(x in k)$NF= sprintf("%s ",$x) $NF}7' f1 f2 

awk 'NR==FNR{a[$0]=1;next}a[$1]' file2 file1

 awk 'NR==FNR{a[$1]++;next;}!($0 in a)' file2 file1

awk 'NR==FNR{a[$1]++;next;}!($0 in a)' file2 file1

awk 'NR==FNR{a[$1]++;next}$1 in a' test.1 test.2

awk 'NR==FNR{a[$1]++;next}($1 in a){print $1,$4}' timestampfile datafile

 awk  'NR==FNR{a[$1]++;next}{ print a[$1],$0}' file file|sort -nr|sed -r 's/[0-9]* //'

awk 'NR==FNR{a[$1]++;next}{for(x in a){if(index(tolower($0),x)>0)print $0,x}}' fileb filea

awk 'NR==FNR{a[$1]+=$3;next}{printf("%s/%d\n",$0,a[$1])}' ./infile ./infile

$ awk 'NR==FNR{a[$1];next}!($4 in a)' file2 file1

awk 'NR==FNR{a[$1];next}{split($4,b,"\"")}(b[2] in a){print $2"\n"$6"\n=========\n" > b[2]".txt"}' file2  file1

awk 'NR==FNR{a[$1]=$0;next}$1 in a{$0=a[$1]}1' value zero

awk 'NR==FNR{a[$1]=$0;next}$1 in a{print a[$1]>"file4.txt";print}' file1 file2 >file3.txt

awk 'NR==FNR{a[$1]=$0;next}a[$2]~/shipped/{print $0}' list.txt cpu.txt

awk 'NR==FNR{a[$1]=$0;next}{print a[$1]}' f2 f1

awk 'NR==FNR{a[$1]=$1; next} FNR<2||a[$1]'  LIST DATA

awk 'NR==FNR{a[$1]=$2;next} $2 in a{print $1,a[$2]}' replacement.txt list.txt 

awk 'NR==FNR{a[$1]=$2;next}$1 in a{print $1,a[$1]}' file2 file1

awk 'NR==FNR{a[$1]=$2;next}{$1=a[$1]}1' hosts.txt output.txt

awk 'NR==FNR{a[$1]=$3;next}$1 in a{$3=a[$1]}7' file2 file1

awk 'NR==FNR{a[$1]=0;next}$1 in a{a[$1]+=$3}END{for(i in a) print i,a[i]}' Name_file table

awk 'NR==FNR{a[$1]=1;next} $1 in a {print}' file2 file1

awk 'NR==FNR{a[$1]=7;next}a[$3]' file2 file1

 awk 'NR==FNR{a[$1]=substr($0,92,5);next}($1 in a) {$0=substr($0,1,92) a[$1] substr($0,97)}1' file file2

awk 'NR==FNR{a[$1]}{for(i in a){if(i==$2)print $0 >> $2}}' Pattern.txt hugefile

awk 'NR==FNR{a[$1$2]=$0;next}$1$4 in a{print a[$1$4],$2-$3}' file{A,B}

awk 'NR==FNR{a[$1$2$3]++;next}!($1$2$3 in a)' file{1,2}

awk 'NR==FNR{a[$1,$2]=$3;next} ($1,$2) in a{print $0, a[$1,$2]}' file1 file2

$ awk 'NR==FNR{a[$2];next}!($2 in a)' file2 file1 > tmp && mv tmp file1

awk 'NR==FNR{a[$2];next}$1 in a' file2 file1

awk 'NR==FNR{a[$2]=$0; next} a[$2]>0{print a[$2],$1}' file1 file2

awk 'NR==FNR{a[$2]=$1; next} ($1 in a){$1=a[$1];print;next} {print "NOT FOUND"}' file2 file1

awk 'NR==FNR{a[$2]=$1;b[$2]=$4" "$5;next} {sub(/.*:/,"",$2); $3=$1" "$3" "b[$2]; $1=a[$2];}1' file1 file2

awk 'NR==FNR{a[$2]=$1;next}$6 in a{print $0,a[$6]}' file2 file1 > file3

awk 'NR==FNR{a[$2]=$1;next}{$1=a[$1];}1' fileA fileB

awk 'NR==FNR{a[$2]=$1;next}{print $0,a[$2]}' file2 file1

 awk 'NR==FNR{a[$2]=1;next}a[$2]{print $2}' file1 file2

 awk 'NR==FNR{a[$3"_"NR]=$0;next;}{for(x in a){if(x~"^"$5) print $1,$2,$3,$4,a[x];}}' f2.txt f1.txt

awk 'NR==FNR{a[NR]=$(NF-1);next}/cellIdentity/{$(NF-1)=a[++i]}1' FS='"' OFS='"' inputFile bigFile

awk 'NR==FNR{a[NR]=$0;next} {split($0,b,a[FNR]); print b[1]}' file1 file2

awk 'NR==FNR{a[NR]=$0;next} {split($0,b,a[FNR]); print b[2]}' file1 file2

awk 'NR==FNR{a[NR]=$0;next}a[FNR]>$0{i++}END{print i}' file1 file2

awk 'NR==FNR{a[NR]=$1; next} {for (x in a) if ($0 ~ a[x]) print $0 " found because of --> " a[x]}' textile text2

awk 'NR==FNR{a[NR]=$1;next} {print a[FNR], $2}' file1 file2

awk 'NR==FNR{a[NR]=$1;next}!/^>/{$1=substr($1,1,n-1) a[++i] substr($1,n+1)}1' n=5 f2 f1

awk 'NR==FNR{a[NR]=$1;next}FNR>5&&FNR<5287{$1=a[FNR]}1' b.com a.com

awk 'NR==FNR{a[NR]=$6;next}a[FNR]!=$6{print "diff @ lineNr:",FNR;exit}' file1 file2

awk 'NR==FNR{a[n++]=$0;next} 1; /URLs found/{for (i=0;i<n;++i) print a[i]}' Text1.txt Text2.txt > tmp && mv tmp Text2.txt

awk 'NR==FNR{c[++n]=$3;next}{$2=($3+c[1])*c[n]" "$2}7' file file

awk 'NR==FNR{c[NR]=$3;l=NR;next}{$2=($3+c[1])*c[l]" "$2}7' file file

 awk 'NR==FNR{c[NR]=$3;l=NR;next}{$2=($3+c[1])*c[l]}7' file file

awk 'NR==FNR{c[NR==1]=$3;next}{$2=($3+c[1])*c[0]" "$2}7' file file

awk 'NR==FNR{e[i++]=$0;next} /person/{sub("person",e[j++])}1' emails.txt xmlFile.xml

awk 'NR==FNR{f[NR]=$4;l[NR]=$5;id[NR]=$6;next}{for(i in id){if($2>f[i]&&$2<l[i]){printf "%-8s%s\n",$2,id[i];next}}printf "%-8s%s\n",$2,"NoID"}' file1 file2

awk 'NR==FNR{f2[$1];next}$1 in f2' file-2 file-1

awk 'NR==FNR{f6=$6;f7=$7;f8=$8;next}!f&&/^detector/{f=1;$6=f6;$7=f7;$8=f8}7' copy.txt paste.txt

awk 'NR==FNR{for(i=7;i<=NF;i++)fld[i]=$i;next}{for(i=7;i<=NF;i++)$i=($i*fld[i])-$i}1' lookupfile datafile

awk 'NR==FNR{h[$2]=$1;next} {for (i=1; i<=NF;i++) $i=h[$i];}1' a.txt b.txt

awk 'NR==FNR{h[tolower($2)]=$1;next} {for (i=1; i<=NF;i++) $i=h[tolower($i)];}1' a.txt b.txt

$ awk 'NR==FNR{idx[$0]; next}; !(FNR in idx)' idx.txt data.txt

awk "NR==FNR{if(/^START - 'cmd1'/)p=NR;next}FNR>p{if(/^END/)exit;print}" file file

awk 'NR==FNR{info[$1]=gensub(/[^\t]*\t/,"",1)} NR!=FNR{printf"%s\t%s\n",$0,info[$NF]}' file1.txt file2.txt

awk 'NR==FNR{k++;next}FNR<=k-3' file.txt file.txt

awk 'NR==FNR{n[$0];next}FNR in n' numbers.txt lines.txt

 awk 'NR==FNR{p[$0];next}{a[FNR]=$0}END{for(i=1;i<=FNR;i++){for(l in p)gsub(l,"",a[i]);print a[i]}}' file1 file2

awk 'NR==FNR{repl[NR]=$0;next}/Coords/{$0=repl[++n]}1' coords.txt template.txt

awk 'NR==FNR{s[$1]=$2;e[$1]=$3;next}$1 in s && $2 >s[$1] && $2 <e[$1]' file1 file2

awk 'NR==FNR{sfx[$1]=$2; next} {print > ("file_" sfx[$NF]+0)}' FS="," file2 FS=" " file1

awk 'NR==FNR{strings[$0]; next} {for (string in strings) if ( (idx = index($0,string)) > 0 ) print string, FNR, idx }' file1 file2

awk 'NR==FNR{sum+= $1; next}{printf("%4.2f\n", $1/sum)}' input input

awk 'NR==FNR{x[$1]=1} NR!=FNR && x[$1]' file1 file2

    awk 'NR==FNR{x[$1]=1} NR!=FNR && x[$1]' file1 file2 | awk 'NR==1 {s=l=$1; next} $1!=l+1 {if(l == s) print l; else print s ":" l; s=$1} {l=$1} END {if(l == s) print l; else print s ":" l; s=$1}'

awk 'OFS="\t" split ($0, a, ";"){print a[1],$5,$6}'

awk 'ORS=/PowerOnHours/?RS:"\t"' ./infile

awk 'ORS=NF<4?FS:RS' file

awk 'ORS=NR%4?"\t":RS' ./infile

dev_name='loop' ; major=` awk "\\\$2 ~ /^\${dev_name}\\\$/ { print \\\$1 }" /proc/devices` ; echo $major

awk '\$9 != "NTM" && \$9 !=""' $file > $nn

awk 'a<$1{a=$1}b<$2{b=$2}c<$3{c=$3}d<$4{d=$4} END{print a,b,c,d}' numbers

awk 'a[$0]++' file1 file2

awk 'a[$0]++' file1 file2 | wc -l

awk 'a[$1]{$1=$1"_"a[$1]}{a[$1]++}1' file

awk 'a[$1]{a[$1]++}NF&&a[$1]{$1=$1"_"a[$1]}!a[$1]{a[$1]++}1' file

awk 'a=/^O/{x=$0} !a&&x{print x;x=0;}' myfile

awk 'alen==length($1) {for (i=a;i<=$1;i++) print i}; {a=$1; alen=length(a); if (a==(i-1)) {a++}}'

awk 'a~$0{exit}NR==1{a=$0}1' file

awk 'c&&!--c;/Revision:/{c=5}' file

awk 'c&&!--c;/pattern/{c=N}' file

awk 'c&&!--c;/pattern/{c=N}' file

awk 'c&&!--c;/pattern/{c=N}' file

awk 'c&&!--c{next}/pattern/{c=N}1' file

awk 'c&&!--c{next}/pattern/{c=N}1' file

awk 'c&&c--;/pattern/{c=N}' file

awk 'c&&c--;/pattern/{c=N}' file

 awk 'c&&c--;/str3/{print p;print $0;c=1}{p=$0}' file

awk 'c&&c--{next}/pattern/{c=N}1' file

awk 'c&&c--{next}/pattern/{c=N}1' file

var=$(awk 'code' file)

awk command | sort -k2,2

awk 'commands' <<< "$string"

awk 'commands' > tmp && mv tmp caConfig.txt

awk 'f && !NF{exit} /PATTERN/ {f=1} f' file

awk 'f {print; exit} /Message/ {f=1}' <<< "$var"

awk 'f; /Message/ {f=1}' file

awk 'f; tolower($0) ~ /some_word<\/div>/ {f=1}' <<< "$source"

awk 'f;/pattern/{f=1}' file

awk 'f;/pattern/{f=1}' file

awk 'f==1{print last}{last=$0;f=1}END{print "NEW WORD\n"$0}' file

awk file

awk 'foobar...' file|awk 'new awkcmd'

awk 'function print_all() { if (i >= 5) { print "*" FILENAME; for (j = 1; j <= i; ++j) print a[j] } i = 0 } $4 > 0 { a[++i] = $2; next } { print_all() } ENDFILE { print_all() }' file1.txt file2.txt

awk 'function update(array) { array[1]="hi" } BEGIN { update(); print array[1];}'

$ awk 'f{fmt=$0; gsub(/[^[:space:]]+/,"%s",fmt); $0=sprintf(fmt,$1+10,$2+20); f=0} /RANDOM/{f=1} 1' file

awk 'f{print ++x,$1} /4096/{f=1}' RS=" | *\n" file

awk 'gsub("\.mi", "", $2)1' inputfile

 awk 'gsub(/[@$]/,"") || 7' file

awk 'gsub(/\*\*\*\*/,"")==2 && $1=$1' file

awk 'gsub(/\//,"&")<5' file

awk 'if($2="AF1%" {print $1,"\t"NULL"\t", print$2, print$3}' input.vcf

awk 'index($1, "A")==1 && index($2, "B")==1' file

awk 'index($1, "go.gle.com"){print NR ":" $0}' inFile

awk 'length > 80 {print FILENAME " line " FNR "\n\t" $0}' *.cpp

awk 'length > 80 {print FILENAME "(" FNR "): " $0}' *.cpp

awk 'length' data.txt

awk 'length' data.txt

awk 'length>1' file

awk 'length!=1' file

awk 'length%2' file

awk 'length($1) == 3' file1

$ awk 'length($4)==4{$4=substr($4,2)}1' file | column -t > new_file

awk magic files | paste -d'|' - - | sort | sed 's/|/\n/'

awk magic files | paste - - | sort | sed 's/\t/\n/'

awk 'match($0, "(www\\.)?([a-z0-9\\-]+\\.com?(\\.[a-z]{2})?)", r) { print r[2] }' input.txt | sort -u 

awk 'match($0, /(ERROR|DEBUG|TRACE|WARN|FATAL) +[^ ]+/) {s = substr($0, RSTART, RLENGTH); split(s, a); count[a[1],a[2]]++} END {for (i in count) {split(i, a, SUBSEP); print a[1], a[2], count[i]}}' inputfile

awk 'match($0,/string1|string2|string3/){print $2,substr($0,RSTART,RLENGTH)}' file1 file2...

awk 'matched { print } /^Case Notes:$/ { matched = 1 }'

awk 'n && !--n { sub(/.* - /,""); print } /- GEM PATHS:/ { n = 1 }' file

awk 'p!=$4{c=$4;print "App: "$2" PID "p}1' data.txt

awk 'p!=$4{p=$4;print s"App: "$2" PID "p;s="--\n"}1' data.txt

awk 'p; /foo/{p=1}'

awk 'p==0 {p= (~/A/)>0;filenr++} p==1 {print > "range"filenr".txt"; p= (~/Z/)==0; if(!p && ~/A/){filenr++;;p=1; print > "range"filenr".txt"}}' test.txt

$ awk 'program' *

awk 'p{print $0-p}{p=$0}' file

awk 'regex' <<< "$var"

awk 'script' "$outputfile" > tmp && mv tmp "$outputfile"

awk 'script' file > tmp && mv tmp file

awk 'seen[$0]++{print $0 > "dups.csv"; next}{print $0 > "new.csv"}' mycsv

awk 'seen[$0]++{print|"cat>&2";next}1' file > tmp && mv tmp file

awk 'some commands' inputfile > tmp & mv tmp inputfile

awk 'something' <<< "$temp"

MYVAR=`awk stuff`

awk 'sub(/.*flow/,"flow")' file

awk 'sub(/^>/,"") { print ++i, $0 } /Grades/ { print i, $NF } /year =/ { print i, "year = ", $NF }' file

awk 'sub(/^.*\//, "")' file

awk 'substr($0,0,24) ~ $1 { f=$1 }{ $0=f substr($0, length(f)+1) } 1' file

awk 'substr($0,12,14)~/ohn/' file

awk 'substr($0,7,2) == "01" {c++} END {print FILENAME, c++}' FILENAME

awk 'tolower($0) ~ /jack/ && tolower($0) ~ /Jill/{ print FILENAME ":" $0; }' *.txt

awk 'tolower($0)~/reject/ && $0>=from && $0<=to' from=$(date -d'now-30 days' +[%d/%b:%H:%M:%S) to==$(date +[%d/%b:%H:%M:%S) /var/log/messages && zcat /var/log/messages-*

awk 'tolower($0)~/reject/ && $0~Date' Date=$(date -d'now-30 days' +[%d/%b:%H:%M:%S) /var/log/messages && zcat /var/log/messages-*

awk 'x { gsub(/string1/,"string2") ; x=0 } /string3/ { x=1 } 1' file

awk '{ $0 = gensub(/[^\t]*,[^\t]*/, "\"&\"", "g"); $1=$1 } 1' FS='\t' OFS=,

awk '{ $1=$1 } !a[$0]++' file2 file1

awk '{ $3 -= 2; print }' filename >new_filename 

awk '{ $3 = q $3 q; $8 = q $8 q } 1' FS=, OFS=, q=\' infile

awk '{ OFS="\", \""; ORS="\"\n"; split ($8, array, "="); print "\"" substr ($1 , 12, 2 ), substr ($1 , 15, 2 ), $3, $4, array[2] + 0 }' file.txt

awk '{ OFS="\", \""; split ($8, array, "="); printf "\"" substr ($1 , length ($1) - 13, 2 ) OFS substr ($1 , length ($1) - 10, 2 ) OFS $3 OFS $4 OFS substr (array[2], 0, length (array[2]) -2) "\"\n" }' file.txt

awk '{ a[$1]=a[$1] + $3 - $2 } END { for(i in a) print i, a[i] | "sort" }' dummy

awk '{ a[$1]=a[$1] + $3 - $2 } END { for(i in a) print i, a[i] }' dummy

awk '{ a[$1]=a[$1] + $3 - $2 } END { for(i in a) print i, a[i] }' dummy | sort

awk '{ a[$2]++ } END { for (i in a) print "total no:of", i, a[i] }' <(awk '!a[$1,$2]++' file1) <(awk '!a[$1,$2]++' file2)

awk '{ a[$2]=a[$2]+$1;} END{ for( idx in a){ print idx,a[idx]}}' file*

awk '{ a[FILENAME,$1,$2] } END { for (i in a) { split (i,x,SUBSEP); b[x[3]]++ } for (j in b) print "total no:of", j, b[j] }' file{1..200}

awk '{ a[FNR] = (a[FNR] ? a[FNR] FS : "") $5 } END { for(i=1;i<=FNR;i++) print a[i] }' $(ls -1v *)

awk '{ a=$0; sub (/txt$/,"tst",$NF); print a" > "$NF}' file

awk '{ array[$1 "\t" $2 "\t" $3] += $4 } END { for (i in array) print i "\t" array[i] }' file.txt

awk '{ c[$1]+=$2 } END { for (i in c) { print i,c[i] } }' groceries

awk '{ count[$1]=(count[$1])?count[$1] " " $2 :$2 }; END { for (key in count) { print count[key] }}' file

awk '{ f = $3 "-" $5 ".tsv" } !a[f]++ { printf "" > f } { print $1 >> f; close(f) }' your_file

awk '{ f = $3 "-" $5 ".tsv"; print $1 > f }' your_file

awk '{ filename=$4".log"; if (prev && (filename != prev)) close(prev); print >>filename; prev=filename }' ips.log

awk '{ for (i=0; i<$2; ++i) print $1 }' file

awk '{ for (i=10;i<=11;i++) { $i = substr( $i, 1, 1) } } { print }' infile

awk '{ for (i=1; i<=NF; i++) if (NR >= 2 && NR == i) print $(i - 1) }' file.txt

awk '{ for (i=1; i<=NF; i++) print $i }' file

awk '{ for (i=1;i<=NF;i++) if ( $i == "2010" ) count++ } END { print count }' myfile.txt

awk '{ for (i=1;i<=NF;i++) if($i=="pattern") arry[NR]=$i } END {. . .}' inputfile

awk '{ for (i=1;i<=NF;i+=2) print $i }' file > test

awk '{ for (i=2;i<=NF;i++) { total+=$i }; print $1,total; total=0 }' file

awk '{ for (i=2;i<=NF;i+=2) $i="" }1' file > test

awk '{ for (i=5; i<=NF; i++) { if ($i != 0) { print; next } } }' infile

$ awk '{ for(i = 1; i <= NF; i++) { print $i; } }' foo.txt

awk '{ for(i=1; i<=NF; i++) if ($i ~ /^1[0-9]{10}$/) sub(/^1/, "", $i) }1' file

awk '{ for(i=1; i<=NF; i++) if($i == 0 || $i == 8 || $i == 9 || $i == -999) $i = "NA" } 1' FS=, OFS=, firsttwolines.csv

awk '{ for(i=1;i<=NF;i++) if(length($i)==0) $i="nil"} 1' FS='|' OFS='|'

awk '{ for(i=1;i<=NF;i++) print $i > "file_" i ".txt" }' RS= FS='\\$' file

awk '{ getline add < "file-2"; $3 += add; print }' file-1

awk '{ gsub(",{","\n{"); {print substr($0, 2, length($0) - 2)} }' file

 awk '{ gsub("\r", "\n"); print $0;}' macfile.txt > unixfile.txt

awk '{ gsub(/T[^,]*/,"") }1' file

awk '{ gsub(/\$file/, file); print }' file="$file" script.in > script.out

awk '{ gsub(/^[ \t]+|[ \t]+$/,"") } !a[$0]++' file2 file1

awk '{ if ( $3 == 3 ) { $3 = 1 } else if ( $3 == 4 ) { $3 = 2 }; print}' filename >new_filename

awk '{ if ( NR > 1 ) print }'

awk '{ if ($0 != prev) n = 0; print $0, ++n; prev = $0 }'

awk '{ if ($0 == "@") {n++;close(filename)} else {filename = sprintf("part%02d.txt", n); print >filename; }}' text.txt

 awk '{ if ($0 ~ /^[[:space:]]*#/) {NR--} else {sum+=$3} END { ... }' coriolis_data

awk '{ if ($0 ~ /network=\{/) { exit } print }' wpa_supplicant.conf > /some/file

awk '{ if ($1 == 23) sub("23", "X"); print }' file.txt

awk '{ if ($10 > old1 && old1 < old2) print NR-1; old2 = old1; old1 = $10; }'

awk '{ if ($2 == $5 && $3 == $6 && $4 == $7) { print $1 } }' < flist

awk '{ if ($2==5) count++ } END { print count }'

awk '{ if ($3 != 0) print $1/$3; else print 0 }' your-data-file

awk '{ if ($9 != $10) {print "google calendar add \"" $2, $3, "Work", $9, "to", $10"\""}}' cal

awk '{ if (NF > 0) { last = $NF } } END { print last }' "$@"

awk '{ if (NR%3==0) { print $0}  }'

awk '{ if (NR==1) sub(/^\xef\xbb\xbf/,""); print }' INFILE > OUTFILE

awk '{ if (a[$1]++ == 0) print $0; }' "$@"

awk '{ if (match($0, "*RECORD") != 0) { $2="$DATE-n++"; }; print }' $BATCH > $OUTPUT

awk '{ if($1 == "for") id = $2; else arr[id $5]+=$7 } END {for (i in arr) {print i,arr[i]}   } ' testfile

awk '{ if($2 ~ /^[*]+$/) { gsub ( /[*]/,"N",$2); } if($4 ~ /^[*]+$/ ){ gsub ( /[*]/,"N",$4); } print  }' your_file.txt  | sed 's/[-$*=+()]//g'

awk '{ if(/comp/) { getline $1 < "input2"; } print }' input1

awk '{ if(seen[$0]) { print NR, $0; exit } seen[$0] = 1 }' file

awk '{ if(seen[$0]) { print; exit } seen[$0] = 1 }' file

awk '{ ips[$5]++ } END { for (ip in ips) { print ip } }' your_log_file

awk '{ lastfield = $NF; $NF = ""; print lastfield " " $0 }'

awk '{ len = (8 - length % 8) % 8; printf "%.*s%s\n", len, "00000000", $0}'

awk '{ line[ FNR ] = $0 } END { if ( FNR > 0 ) { print "File" } else { print "NO file" } }' infile

awk '{ n = split($1, a, /[()#]/); print (n==1 ? $0 : a[2] FS a[4]) }' file

awk '{ names[$2] = names[$2] " " $5; } END { for (name in names) print name " " names[name] }' file

 awk '{ orig=$NF ; if (gsub("/","",$NF) == 2) { print orig  } }' INPUTFILE

awk '{ p = 1 } /<appender /{ t = $0; while (getline > 0) { t = t ORS $0; if (/COM_FIND[.]log/ || /COM_Find[.]log/) p = 0; if (/<\/appender>/) break } $0 = t } p' file

awk '{ print <whatever> }' /dir/*

awk '{ print > ($1 ".txt") }' TS129.txt 

awk '{ print >> $5 }' yourfile

awk '{ print >> $5.txt }' < input.txt

awk '{ print >>($4".log"); close($4".log") }' ips.log

awk '{ print > substr($0,8,4) ".txt" }' file

awk '{ print ">"NR }1' file.txt

awk '{ print "Do stuff for " $1; print "Do stuff for " $2 }' filename

awk '{ print "public void goToWebsite" NR "() {driver = new FirefoxDriver();driver.get(\"" $0 "\");driver.quit();" }' file

awk '{ print $(NF-3) }'

awk '{ print $0 >$1 }' infile

awk '{ print $0 (NF==5 ? "NA" : "") }'

awk '{ print $0 }' RS="\0" file

awk '{ print $1 > $3 "-" $5 ".tsv" }' your_file

awk '{ print $1 "/" $NF }' infile

awk '{ print $1 }' < inputfile > outputfile

$ awk '{ print $1 }' flag.txt | od

awk '{ print $1"      0x"$2$3$4$5$6$7; }' input.txt

awk '{ print $1+$2; }' file.txt

awk '{ print $2 " " $1}' file.txt

awk '{ print $2 "=" $3 }' myFile

awk '{ print $2 $4 }' filename.txt

FAKETTY=1 redis-cli llen some_list | awk '{ print $2 }'

awk '{ print $2 }' text.txt > outputfile.txt

awk '{ print $2, $3, $4 > $1 ".txt" }' file

awk '{ print $2, gensub(/@:/, "", "g", $5), $6}' log.txt

awk '{ print $3 }' common_pattern* > output3

awk '{ print $3 }' file1 [file2 .. filen] > output3

awk '{ print $5, $6 }' text

awk '{ print '"$eq"' }' file

awk '{ print .... }'

awk '{ print gensub(/(,[^,]+).*/,"\\1", "g") }'

awk '{ print gensub(/^(..\/)(..\/)..(..,)/, "\\2\\1\\3", "g"); next }1' file

awk '{ print length($0) " " $0; }' $file | sort -n | cut -d ' ' -f 2-

awk '{ print length($0) " " $0; }' $file | sort -r -n | cut -d ' ' -f 2-

awk '{ print length($0); }' abc.txt

awk '{ print length($1) " " $0; }' $FILE | sort -n

awk '{ print strftime("%Y-%m-%d %H:%M:%S"), $0; }' /dev/ttyUSB0 > /home/pi/daily_logs/ttyUSB0 &

awk '{ print substr($0,8) }' lines.txt

awk '{ print substr($1, 1, 3), x = (substr($1, 6, 4)), x, x }' OFS=

awk '{ print substr($1, 1, 7), $2 }' file.txt

awk '{ print toupper($0) }' <<< "your string"

awk '{ print toupper($0) }' yourfile.txt

awk '{ print }' lsfiles.txt | Out-File awkedlsfile.txt -encoding ASCII

awk '{ printf "%-20s %-40s\n", $1, $2}'

awk '{ printf "%s ", $1; for (x = 2; x <= NF; x = x + 2) {printf "%s%s ", $x, $(x+1)} printf "\n"}' input

awk '{ printf "%s -- %s\n", strftime("%c",$1), $0 }' file

awk '{ printf "%s-%s-%sT%s:%s:%s\n", substr($1, 5), substr($1, 3, 2), substr($1, 0, 2), substr($2, 0, 2), substr($2, 3, 2), substr($2, 5, 2) }' file.txt

awk '{ printf "Do stuff for %s\nDo stuff for %s\n", $1, $2 }' filename

awk '{ printf $0 " " } NR%1000 == 0 { print "" }' file

awk '{ printf $0 " " } NR%1000 == 0 { print "" }' file | sed 's/.*/(&)/'

awk '{ printf $0 " " } NR%1000 == 0 { print "" }' file.txt | sed -e 's/ /,/g' -e 's/^/Delete from ReportingDetail where ReportingDetailID IN (/' -e 's/,$/)/'

Batt=$(awk '{ printf("%.2f\n", $1/$2 * 100) }' <<< "$now $full")

html[$dId]=$(awk '{ printf("\n%s", $0) }' <<< "$list")

awk '{ r=$1; sub($1 FS, ""); print > r ".txt" }' file

awk '{ s += $1 } NR % c == 0 { print s; s=0 } END { if(NR % c) print s }' c=80

awk '{ s = ""; for (i = 9; i <= NF; i++) s = s $i " "; print s }'

awk '{ s=$1; sub($1,""); gsub("C","g"); gsub("G","c"); gsub("T","a"); gsub("A","t"); print s $0 }' filename

for i in *; do awk '{ split($1,a,"-"); print $0, (a[1]-a[2] >= 0 ? a[1]-a[2] : a[2]-a[1]) | "column -t" }' "$i" > "$i.temp" && mv "$i.temp" "$i"; done

awk '{ split($1,a,"-"); print $0, (a[1]-a[2] >= 0 ? a[1]-a[2] : a[2]-a[1]) | "column -t" }' file

awk '{ split($1,arr,"/"); print arr[length(arr)] }' yourfile > output.txt

awk '{ split($4,array,"[:/]"); print > array[2] array[3] ".txt" }' file.txt

awk '{ split($4,array,"/"); print > array[2] ".txt" }' file.txt

awk '{ sub ("\\\\$", ""); printf "%s", $0 } END { print "" }' file

awk '{ sub( "/[^/]*/","")}1'

awk '{ sub(/[ \t]+$/, ""); print }' file

awk '{ sub(/[ \t\r]+$/, ""); sub(/^[ \t]+/, "") } !NF { next } /^[^[:space:]]+:/ { if (length(t)) print t; t = $0; next } { t = t $0 } END { if (length(t)) print t }' file

awk '{ sub(/-+$/, "", $NF); print }' infile

awk '{ sub(/100$/, "2000", $3) }1' file

awk '{ sub(/^[^:]*:[:blank:]*/, ""); print }'

awk '{ sub(/^[^:]*:[:blank:]*/, "", $0); print $0; }'

awk '{ sum += $2 } END { if (NR > 0) print sum / NR }'

awk '{ sum += $2 } END { printf("Total: %.2f\n", sum); }' $2

awk '{ sum += $2; n++ } END { if (n > 0) print sum / n; }'

awk '{ sum += $4 } END { print sum }' tag_FLI1

awk '{ sum[$1] += $3 } END { for (i in sum) print i, sum[i] }' data

awk '{ sum+=$1} END {print "Cargo '"${cargo}"' has " sum " items"}' "file_${cargo}"

awk '{ sum+=$1} END {print sum}'

calculation=$(awk '{ sum+=$1} END {print sum}' "file_${cargo}")

awk '{ sum+=$9} END {print sum}' /home/user/top_VM.txt

awk '{ system("mkdir " $1); system("chown " $1 ":" $2 " " $1); }' idlist

awk '{ system("openssl s_client -connect host:port -cipher " $1) }' ciphers.txt

awk '{ total += $2 } END { print total/NR }' yourFile.whatever

awk '{ total += $3 - $2 } END { print total }' file

awk '{ vals[$1] = vals[$1] " " $2 }; END { for (key in vals) { print key,vals[key] }}' list

 awk '{ while( i< c && sub( "pattern", "replace" )) i+=1}1' c=10 input

awk '{ x[$1]=x[$1] " " $2 " " $3 " " $4 " " $5 } END { for (k in x) print k,x[k]; }' input.txt

awk '{ x=0; for(i = 1; i <= NF; i++) x += $i; print x }' file

awk '{"date -d\""$0"\" +\"%s\""|getline d; print strftime("%Y-%m-%d %T",d)}' 

awk '{"expr "NR" + 225"|getline n; print "dm" n ","$0}' test

awk '{"stat -c %Y " $9  | getline a; ...}'

awk '{$(NF+1)=$2}1' file

 awk '{$0=$2?$1FS$2FS$1/$2:$1>15?$1FS$2FS$1:$1FS$2FS"0"}1' file

awk '{$0=NF FS $0}7' file

awk '{$0=NR>1?$0"\t20":$0"\tAge"}1' myFile.txt

 awk '{$0=sprintf("%.1f%.1f%04d", $1,$2,$3);gsub(/\./,"")}1' file 

awk '{$0=var}' var="$variable" file

awk '{$1 = ""; sub(" ", ""); arr[$0]++} END {for (i in arr) {print arr[i], i}}' 

awk '{$1="" print $0}'

awk '{$1=""; print $0}'

awk '{$1=""}1'

awk '{$1=$1;$0=$0"\\\\"}1' OFS=" & " file

awk '{$1=$1}1' OFS=\|

awk '{$1=$1}1' RS="\n\n" file

awk '{$1=$2="";}sub("^ *","")'

awk '{$1=a[$2]+++0;print}' input.txt

awk '{$2 = ""; print $0;}' < file_name

awk '{$2 = substr($2, 1, 12) " " substr($2, 13); print}'

awk '{$2=($2+$3)/2; $3=$2+1}1' file

awk '{$2=int($2)}1' file

awk '{$2=int(($2+$3)/2); $3=$2+1}1' file

awk '{$2=sprintf("%.2f",$2-30)}7' file

awk '{$3="new_str"; print}' FS=$'\t' OFS=$'\t' in.csv > outfile.csv

awk '{$3=$NF OFS $3;$NF=""}1' file

awk '{$3=$NF OFS $3;$NF=""}7' file

awk '{$3=gensub(/([0-9])([A-Z])/,"\\1 \\2","",$3)}1' ./infile

awk '{$4 = substr($4, 1, $3-1) $2 substr($4, $3+1); print}'

awk '{$4<2?l++:g++}END{printf "< 2 : %s %\n", l*100/(g+l); printf ">=2 : %s %", g*100/(g+l)}' your.file 

awk '{$4=$5"/28"} NF--' FS='[ .]+' OFS=. file.csv

awk '{$4=$5} NF--' FS='[ .]+' OFS=. file.csv

awk '{$5 = $4 - $3}1' input

awk '{$5=sprintf( "%.2g", $5)} 1' OFS=, FS=, input

awk '{++a[$0]; if(a[$0] == 2) print}'

command=$(awk '{...stuff...}')

command=$(awk '{...stuff...}' file1 file2)

awk '{...}' a.txt FS='\t'

awk '{/pat/?f++:f=0} f==2' file

awk '{BEGIN RS=" ";ORS="\n";} { if (NR >20 && NR < 31) print $0}' hexFile

awk '{FS=","; print $2}' < file

awk '{FS="var="; if ($1~/big/) { print $2"\tmsg="$1} else {print }}' a

awk '{FS="|";OFS="\t";$0=$0} {print $1,$2,$3,$4,$5}'

awk '{FS=OFS=","}NR==FNR{a[$1,$2]="136-7425";next} ($1,$2) in a{$3=a[$1,$2]} 1' file2 file1 > output

awk '{FS=OFS=","}NR==FNR{seen[$1,$2]++;next} seen[$1,$2]{$3="136-7425"} 1' file2 file1 > output

awk '{NF = 29; print}' filename

awk '{NF = 29; print}' filename > filename.new && mv filename.new filename

awk '{NR%2 || $5="\\n"$5 }1' filename

$ awk '{ORS=(NR%6?"":RS)}1' file

awk '{ORS=(NR%6?"":RS)}1' file > newfile

awk '{ORS=(NR%6?"":RS)}1' file > tmp && mv tmp file

awk '{ORS=NF<4?x:RS}1' file

awk '{a += $1; b += $2} END { print a " " b }' foo.log

awk '{a[$0]++; next}END {for (i in a) print i": "a[i]}' file_with_IPs.txt

awk '{a[$0]++} END{for (i in a) print a[i], i}' file

awk '{a[$0]++}END{for(i in a){if(a[i] > 2){print i}}}' a.txt 

awk '{a[$0]++}END{for(x in a)b[a[x]]++;for(x in b)print b[x], x}' file

awk '{a[$0]++}END{for(x in a)print x,a[x]}' file

awk '{a[$0]++}END{for(x in a)print x,a[x]}' input*

awk '{a[$1 FS $2]++}END{for (i in a) print i, a[i]==3?"match":"mismatch"}' file*

awk '{a[$1] += $2} END {for( i in a ) print i, a[i]}' testcf.txt

awk '{a[$1]++;b[$1]=$0}END{for(x in a)if(a[x]==1)print b[x]}' file

 awk '{a[$1]++;b[$1]=$0}END{for(x in a)if(a[x]==1)print b[x]}' file

awk '{a[$1]++}END{for(k in a)print a[k],k}' RS=" |\n" file > myfile

awk '{a[$1]++}END{for(k in a)print a[k],k}' RS=" |\n" file | sort > myfile

$ awk '{a[$1]++}END{for(k in a)print k,a[k]}' RS=" |\n" file > outfile

awk '{a[$1]+=$2;c[$1]++}END{for(x in a)printf "average of %s is %.2f\n",x,a[x]/c[x]}'

awk '{a[$1]+=$2}END{for(i in a){print i, a[i]}}' inputfile

awk '{a[$1]=$1 in a?a[$1]";"$2:$2}END{for(x in a)print x, a[x]}' file

awk '{a[$1]=a[$1] " " $2} END {for( i in a ) print i a[i]}' *.csv | sort -n

awk '{a[$1]=a[$1] FS $2} END {for (i in a) print i a[i]}' file1 file2 | sort

awk '{a[$1]=a[$1] FS $2}END{for(i in a) print i,a[i]}' file

awk '{a[$1" "$2]++}END{for(i in a){print i" = "a[i]}}' your_file

awk '{a[$1" "$2]=a[$1" "$2]" "$3" "$4;}END{for(i in a)print i,a[i]}' your_file

  awk '{a[$1*1];b[$1*1]=$0}END{asorti(a);for(i=1;i<=length(a);i++)print b[a[i]];}' file2 file1

awk '{a[$2]+=$1} END{for (i in a) print a[i],i}' *cnt

awk '{a[$2]=$0}END{for(x in a)print a[x]}' fileA fileB

awk '{a[$2]} END { for (i in a) { if (+i > 45895) print i } }' test-file_long.txt

awk '{a[$6]} END{for (i in a) s++;print "Total no:of residues in", FILENAME, ":",s}' file

awk '{a[$6]} END{print "Total no:of residues in", FILENAME, ":", length(a)}' file

awk '{a[$7]+=$10}END{for(x in a)print x, a[x]}' yourLogfile|sort -r -n -k2|head -n10

awk '{a[$NF]++} END{for (el in a) print a[el] " lines end with \""el "\""}' file | sort -nr

awk '{a[$NF]+=$1}END{for(x in a) printf "%s\n%4.2f\n",x,a[x]}' file

awk '{a[++i%4]=$0} END {print a[++i%4],a[++i%4],a[++i%4],a[++i%4]}' OFS='\n'

awk '{a[FNR]+=$7}END{for(i=1;i<=FNR;i++)print a[i]/(ARGC-1);}' c* >...

awk '{a[NR]=$0;}/eee/{a[NR-3]="www\n" a[NR-3];}END{for(i=1;i<=NR;i++)print a[i];}' file

awk '{a[NR]=$0}/#MyUniqueString/{a[NR-1]=a[NR-1]"domain4.com"}END{for(i=1;i<=NR;i++)print a[i]}' configFile

awk '{a[NR]=$0}END{ #here you could do whatever with a[1] (a) and a[2] (b)}' file

awk '{a[NR]=$1} END {for (k in a) if(a[k]=="monkey") print k}' textile

$ awk '{a[NR]=$1}END{for(i=1;i<=3;i++)for(j=1;j<=NR;j++)print a[j]}' file

awk '{a[i++]=$0};/-----/{++j};j==3{t="";for(k=0;k<i;++k)t=t a[k]"\n";b[++l]=t;i=j=0}END{for(i=l;i;--i)printf "%s", b[i]}' file

awk '{a[i++]=$0}i==7{t="";for(i=0;i<7;++i)t=t a[i]"\n";b[++j]=t;i=0}END{for(;j;--j)printf "%s", b[j]}' file

awk '{a[i++]=$0}i==7{t="";for(k=0;k<i;++k)t=t a[k]"\n";b[++l]=t;i=0}END{for(i=l;i;--i)printf "%s", b[i]}' file

$ awk '{a[int($1/0.2)]++}END{for(i in a)print i*0.2 "-" (i+1)*0.2, a[i]}' file | sort -n

  awk '{a[j++]=$0}END{for(i=0;i<j-2;i++){print a[i]}}' filename

awk '{a= a",'"'"'"$1"'"'"'"}END{print a}' file.txt

awk '{a= a",'\''"$1"'\''"}END{print a}' file.txt

awk '{a= a",\x27"$1"\x27"}END{print a}' file.txt

 awk '{a=$0;}END{if(!a)print FILENAME}' file

awk '{a=$1 OFS $2 OFS $3; for (i=4; i<NF; i+=2) print a,$i,$(i+1); a=""}' file

awk '{a=a colon $0; colon=":"} END {print a}' INPUT.TXT

awk '{a=int(($2+$3)/2+0.5); $2=a; $3=a+1;print}'

awk '{a=substr($0, 17, 1);a=(a~/[[:alpha:]]/)?a:"C";print substr($0,1, 16) a substr($0,18)}' file

awk '{a=substr($1,5,4); print $0" pass"a}' YOUR_FILE

awk '{a=substr($1,length($1)-3,4); print $0" pass"a}' YOUR_FILE

awk '{a=substr($12,1,3);b=substr($15,1,3)} !/^#/ && ((a=="1/1" && b=="1/1") || (a=="0/0" && b=="0/0") || (a=="1/1" && b=="./.") || (a=="./." && b=="1/1") || (a=="0/0" && b=="./.") || (a=="./." && b=="0/0"))' $1 > /proj/b2014091/nobackup/potHomoF1.txt

awk '{arr[$1]+=$2; ++n[$1]} END {for (i in arr) {print "[epoch", i,arr[i]/n[i]}}'

awk '{arr[$1]+=$2;} END { for (i in arr) print i, arr[i]}'  file

 awk '{arr[$1]+=$2;} END {for (i in arr) print i, arr[i]}' filename

awk '{arr[$2]+=$1} END {for (i in arr) {print arr[i],i}}'

awk '{arr[$NF] = $0} END { for (key in arr) { print arr[key] } }' file.log >> final-report.log

awk '{array[$1]+=$2} END { for (i in array) {print "Sum for time stamp",i,"=", array[i]}}' data.txt

awk '{b=gensub(/page-([0-9]+)/,"apple-\\1.html","g",$0) ;print b  }' file

awk '{c += sub(/[^=]+=/,"cuts["c+0"]=") }1' file

awk '{c+=1} END if c (c>2) print $0' FILE

awk '{c=1 ; for (f in ARGV) {print c, f ; c++ } }' *

awk '{cmd="c_program "$1; cmd|getline l;print $1,$2-l}' file

awk '{cnt[$2]++} END{for (gene in cnt) print gene, cnt[gene]}' file

awk '{command=substr($0,70); print command}' $TEMPFILE

awk '{count[$1 " " $2]++} END {for (key in count) print key, count[key]}' | sort

awk '{count[$8]++}END{for(i=1;i<925;i++) print i, count[i]" HIT"}' myfile.txt

awk '{d = $1-$2; if (-1 <= d && d <= 1) next; else print}' oldfile

 awk '{d=$3-$4;$0=(d>0?d:-d) "#"$0}7' file|sort -n|sed 's/^.*#//'

awk '{delete z; d=""; split($4,arr,";");for (k in arr) z[arr[k]]=k; for (l in z) d=d";"l; print($1,$2,$3,substr(d, 2))}' file_name

awk '{f=$1; $1=$2=""; print > f}' file

awk '{f=$1; $1=$2=""; sub("  ", ""); print > f}' file

awk '{f=0; if (alen==length($1)) {for (i=a;i<=$1;i++) print i} else {f=1}} {a=$1; alen=length(a)} a==(i-1){a++} f{print; a++}'

awk '{file="inputfile_"$3".txt";print >> file;close(file)}' inputfile.txt 

$ awk '{fname=substr($0, 0, 2); print >>fname}' input.txt

awk '{for (i = 2; i <= 30; i++) {if ($i < 0.05) {print $1, $i > "phen_" i ".txt"}}}' test.txt

awk '{for (i=0; i<$2; i++) print $1}' file > output

awk '{for (i=0; i<4; i++) printf(" "); print $0}' test

awk '{for (i=0;i<2;i++) sub(",", "|", $0); print}' file.txt

awk '{for (i=1; i<=16; ++i) if($i != 0) {print;next}}' file.csv > newFile.csv

awk '{for (i=1; i<=NF; ++i) { $i=toupper(substr($i,1,1)) tolower(substr($i,2)); } print }'

awk '{for (i=1; i<=NF; i++) printf "%.3f %s", $i, (i==NF?RS:FS)}' file

awk '{for (i=1; i<=NF; i++) {if ($i ~ /one/) {a++; if(a <= 6) sub("one", "three", $i)}}; print}'

awk '{for (i=1;i<5;i++) if (NR%40==i) print $0}' file

awk '{for (i=1;i<=NF;i++) if ((1<=i && i<=7) || (9<=i && i<=15) || i==19) printf("%s ", $i); print ""}' file

awk '{for (i=1;i<=NF;i++) if($i ~/mystring/) print $1, $i, $(i+2)}'

awk '{for (i=1;i<=NF;i++) {printf $i" "; if ($i~/TTT/) exit}}' file

awk '{for (i=1;i<=NF;i++)if($i==-1) print NR, i}' file.txt

awk '{for (i=2;i<=NF;i++) printf $i" ";printf "\n"}' file

awk '{for (i=3;i<=NF;++i) {print $i}}'

awk '{for (i=3;i<=NF;i+=3)$i*=3; print}' input.txt > output.txt

awk '{for( i=0;i<3;i++) a[i]=a[i+1];a[3]=$0} END {print a[0],a[1],a[2],a[3]}' OFS='\n'

awk '{for(i = 1; i <= NF; i++) { x = "0x" $i + 0; printf(" %d", x); printf "\n";}'

awk '{for(i=0;i<$1;i++) printf "%.2f %.2f\n", $2+i*$3/$1, $4+i*$5/$1; }' file

awk '{for(i=0;i<$2;i++) print $1;}' file.in > file.out1

awk '{for(i=0;i<$3;i++) print $1;}' file.in > file.out2

awk '{for(i=1; i<=NF; i++) print $i}' | sort -n

awk '{for(i=1; i<=NF; i++) printf("%d\n",$i)}' | sort -n

awk '{for(i=1; i<=NF; i++) printf("%d\n",$i)}' | sort -n | paste -s -d ' '

awk '{for(i=1;i<11;i++)$i="";print }'

awk '{for(i=1;i<11;i++)$i="";sub(/-.*$/,"");sub(/^ */,"")}7'

awk '{for(i=1;i<=30;++i) feasible[i+$2]=1;} {val[NR] = $4; letter[NR] = $3} END {for(y in val) if(feasible[val[y]]) print letter[y], val[y]}'

awk '{for(i=1;i<=6;i++) if(length($i)<2) $i=0$i}1' file

awk '{for(i=1;i<=NF;i++) if ($i=="--pe_cnt") print $(i+1)}' inputFile

awk '{for(i=1;i<=NF;i++) if($i~/A|C|D/) printf $++i FS; print ""}' file

awk '{for(i=1;i<=NF;i++) sub(/string[0-9]*/,"string"int(10*rand()),$i)}1' file

awk '{for(i=1;i<=NF;i++) {if ($i=="$$$$") count++; if ($i=="$$$$" && count==3396) print $(i+1);}}' INPUT_FILE

awk '{for(i=1;i<=NF;i++) {if ($i~/:Y$/) c++;}}{print c; c=0}' inputfile

awk '{for(i=1;i<=NF;i++)if $1~/^locus_tag|^product|db_xref/) print $i}' Chrom.txt

awk '{for(i=1;i<=NF;i++)if(!a[$i]++)print $i}' ORS= FS= *.ext

awk '{for(i=1;i<=NF;i++)if($i>10)printf "%s ",$i;else break;print  ""}' file

awk '{for(i=1;i<=NF;i++)if($i~/dbsnp/)print $i}!/dbsnp/{print "N/A"}' dbsnp.tsv

awk '{for(i=1;i<=NF;i++)if(i%8==0)print $i;else printf $i" "}' auth_data

awk '{for(i=1;i<=NF;i++){ if($i=="yyy"){print $i} } }' file

awk '{for(i=1;i<=NF;i++){$i=$i-1}}1' infile > outfile

awk '{for(i=1;i<=NF;i++){t=$0;w=$i;gsub(/\S/,"-");$i=w;print;$0=t}}' file

awk '{for(i=2; i<=NF; i++) print $i}' bth.data

awk '{for(i=2; i<=NF; i++)$i="(" ++k ")" $i}1' FS=i OFS=i

awk '{for(i=2;i<=NF;i++)$i !~ /var_.*\.h/ && $i=""}1' Makefile

awk '{for(i=2;i<=NF;i++)if($i!=$1)printf(" %d",$i);printf("\n")}'

awk '{for(i=2;i<NF;i++)printf "%s",$i OFS; if (NF) printf "%s",$NF; printf ORS}'

awk '{for(i=3;i<=51;i+=4) printf "%s ",$i ;for(i=52;i<=119;i++) {printf "%s ",$i} ;print ""}' file

awk '{for(i=4;i<NF;i++)printf "%s",$i OFS; if (NF) printf "%s",$NF; printf ORS}'

awk '{for(i=j=7; i < NF; i+=2) {$j = $i"/"$(i+1); j++} NF=j-1}1' input

awk '{getline second < "example"; printf("%s\t%s\n",$0,second)}' input.txt

awk '{getline t<"file1"; print $0-t}' file2  #file2-file1

 awk '{getline x < "file2"}$0>x{i++}END{print i}' file1

awk '{gsub("[.]", "D", $0)}{print $0"]"}'

awk '{gsub("[^0-9]+"," "); print}'

awk '{gsub("###",NR,$0);print}'

awk '{gsub("/.*", ""); print $2}' /usr/share/nmap/nmap-services

awk '{gsub("\\.", "D", $0)}{print $0"]"}'

 awk '{gsub("_",".",$1)}1' ./infile

awk '{gsub(/[[:space:]]/,"")}length!=1' file

awk '{gsub(/[[:upper:]]/,"_&");sub(/^_/,"");print tolower($0)}'

awk '{gsub(/[0-9].*|_/,x);gsub(/\.$/,x)} {print $0 ".apk"}' file

awk '{gsub(/,/," ");print NR,$0}'  file

awk '{gsub(/,/," ");print NR,$0}'  file|column -t

awk '{gsub(/.../,"& ")}1' <<< CTGGCAAGAAAGAAATGTGGAATGGCAACAAAGAAAGGAAAAAAAATCAATACTGGCTGATGCAGTTTC

awk '{gsub(/./,"& ",$2);print $2}' yourFile

awk '{gsub(/ACT|GGG/,"")}1' file

awk '{gsub(/\./,"");print $1,$5}' file

awk '{gsub(/\/.*\//,"",$1); print}' file

awk '{gsub(/\n\n+/,"\n\n");printf $0}' RS="^$" file

awk '{gsub(/\|g/,"")}8' file

awk '{gsub(/it.s an error/, NR" &"); print }' filename

$ awk '{gsub(/temp/,FILENAME)}1' file

awk '{i=RT=="\n"?1:RT;while(i--) if (NF) print $0}' RS="[0-9]+|\n" file

awk '{id = gensub(":", "", 1, $6)} /client.dom.lcl/ && !(/timeout/||/disconnect/) {msgid[id] = 1} {if (id in msgid) print}' sampledata

awk '{if (!($0 in ids)) ids[$0] = ++i; print ids[$0]}'

awk '{if (!($18==0 && $19==0 && $20==0 && $21==0)) print $0}' file

awk '{if ($0 ~ /^\s*$/) {print line; line="";} else line=line $0 "|"}' file.txt

$ awk '{if ($0 ~ /start/) a++} {print >> "file"a}' file

awk '{if ($1 == "false") {array[$2] = $1} else if (array[$2] != "false") array[$2] = $1} END {for (i in array) if (array[i] == "true") print i}' inputfile

awk '{if ($1 == 10993) {print $NF}}' someFileName

awk '{if ($1 in x){x[$1]=x[$1]","$2}else{x[$1]=$0}}END{for(i in x)print x[i]}' yourfile

awk '{if ($1<prev) {offset++}; print ($1+(offset*10)); prev=$1}' input_file

awk '{if ($1<prev){next}}{prev=$1; gsub("\"", "", $2); $2=substr($2,0,3);$2="\""$2"\""}1' inputfile

awk '{if ($1<prev){next}}{prev=$1}1' inputfile

awk '{if ($1 ~ /^(LOAD|IMPORT)/) {gsub(/\\/, "/", $2); system("cat " $2)} else print}' test.txt > output.txt

awk '{if ($1!="C" && $1!="D") {print $0}}'  file

awk '{if ($1=="3") A=NR}{ if (NR==(A+1)&&A) print $0}'

awk '{if ($2>0) print; $3=0; for (i=1; i<$2; i++) print}' inputfile

awk '{if ($2!=a) {print $2"\t"$3"\t"$1} else {print "\t\t"$3"\t"$1}}{a=$2}'

awk '{if ($2=="abc" || $2="def") print "blah" }'

awk '{if ($2==5 && $3 >= 40 && $3<=50 && $6>=0.96 && $1=="---") print }' Infile.txt >List_position.txt

awk '{if ($3~/^TCF|^GLI/ || NR==1 ) print $0,FILENAME}' /path/to/file1 /path/to/file2 > /path/to/test1.txt

awk '{if ($9=="ice") {$11="keep"} print}' inputfile

awk '{if ((FNR % 4)==2) {print FNR":"$0}}' inputFile | grep '(=([14-9]|[23][0-9])'

awk '{if (NF > 1 ) print > "pass"; else print > "fail"}' input

awk '{if (NF > max) {max = NF; line=$0}} END{print line}' twister.txt

awk '{if (NR == 1) {temp1=$2;min=$1;max=$1;} else if ((NR % 2)!=0) {temp2=$2; if (temp1 == temp2) {max=$1} else {print (temp1,min,max); temp1=$2;min=$1;max=$1} } } END{if ((NR % 2)!=0) {temp2=$2; if (temp1 == temp2) {max=$1} else {print (temp1,min,max);} print (temp2,min,max) } }' inputfile 

awk '{if (NR>1) print old; old=$0;} END { printf "%s", old }'

awk '{if (NR%5 != 0) {printf $1", "} else {printf $1"\n"}}' file

 awk '{if (NR==FNR) a[$2]; else if (!($2 in a )) {print $2} }' 

awk '{if (a[$1]) next; a[$1]++} 1' file

awk '{if (a[$1,$3,$4]++ == 0) print > "file1"; else print > "file2" }' input

awk '{if (flag) print line; line = $0; flag = 1} END {gsub("[[:space:]]+$","",line); printf line}'

awk '{if (index($0, "<char") == 0) print $0}' xmlfile

awk '{if (last==$1) {flag=0} else {last=$1; flag=1}; print $0,flag}' file.txt

awk '{if (substr($0,299,11)=="")print $0}' file

awk '{if( !seen[$1]++ ) print }' input-file

awk '{if($0~/./){a[$0]++;print $0"["a[$0]"]";} else print}' file

awk '{if($0~/\<codingScheme\>BDR\<\/codingScheme\>/){if(x~/productCode/)count++};x=$0}END{print count}' your_file

awk '{if($0~/\*$/)sub(/<path>/,"ls -lrt ");else sub(/<path>/,"find ")}7' file

awk '{if($1=="foo") {TERM=$2; gsub(",", "", TERM); SUM+=TERM}}END{print "foos ",SUM}'

awk '{if($1=="foo") {gsub(",", "", $2); SUM+=$2}}END{print "foos ",SUM}'

awk '{if($2>10) {print > "outfile1"} else {print > "outfile2"}}' infile

awk '{if($2~/^AF1/) print $1 "\tNULL\t" $2 "\t" $3; else print}' input.vcf

awk '{if($3 in a)a[$3]=$2==1?$0:a[$3];else a[$3]=$0}END{for(i in a)print a[i]}' file

awk '{if($3=="DD") {split($0, a); print a[1];}}' file

awk '{if(NR > 1 && $2 != prev_two){printf "\n";} prev_two=$2; print $0}' A

awk '{if(NR>1){print _n-$4};_n=$4}' your.file

awk '{if(NR%3 == 0){printf("%s\n",$0);}else{printf("%s ",$0);}}' ip_file.txt

$ awk '{if(NR==FNR)idx[$0];else if(!(FNR in idx))print}' idx.txt data.txt

 awk '{if(s==0 && /abended/){s = 1;st = $NF}}{if(s && /restarted/) {et = $NF}}1; /completed/{s=0;print "Downtime of this job was: "et "-" st}' tmp.log

 awk '{k=$1;a[k]=a[k]?a[k]","$4:$4}END{for(x in a)print x":"a[x]}' file

awk '{k=tolower($2); arr[k]=arr[k] " " NR} END{for(v in arr) print v, arr[v]}' test.txt | sort -f -k 1,1

awk '{k=tolower($2); arr[k]=arr[k] " " NR} END{n=asorti(arr, dest); for(i = 1; i <= n; i++) print dest[i], arr[dest[i]]}' test.txt

awk '{l=l$0;if(NR%3==0){print l;l=""}else{l=l","}}END{if(l!=""){print substr(l,1,length(l)-1)}}' yourData.txt

awk '{l=substr($0,1,10);r=substr($0,11);gsub(/n/,"m",l);print l r}' file

awk '{line=$0; sub(/^[^|]+\|/, "", line)} !found[line]++'

awk '{ln=length(ARGV[1]); if(NR==7) print substr(ARGV[1],0,ln-4)"..."$0}' ABC.mod

awk '{match($0, /Pattern\w+/)} { print $1, substr($0, RSTART, RLENGTH) }' file

awk '{match($0,/PASSWORD=(.*==)/,a); print a[1];}' input.txt

awk '{max=$1;for(i=2;i<=NF;i++)if($i>max)max=$i;sum=sum+max;}END{print sum+0}'

awk '{mm=substr($4, 1, 4); cnt[$3 " " mm]++} END{for(a in cnt) print a " " cnt[a]}' Text.log

awk '{n[$1]}END{print length(n)}' s.log

awk '{n2=n1;n1=n;n=$0;if(NR%3==0){printf"%s,%s,%s\n",n2,n1,n}}' yourData.txt

awk '{n=split($1,array,"*"); for (i=3;i<=NF;i++) {print $i >array[1]}}' input

awk '{names[$1]=$1;vals[$1]+=$2} END {for(i in names){sum+=vals[i];print i, vals[i]}; print "total " sum}' foo.txt

awk '{num[$1,$2]++; fruits[$1]=1; colors[$2]=1}END{for(i in fruits) {for(j in colors) printf("%d ", num[i,j]); printf("\n");}}'

awk '{old=$0;new=/path/pathsub/;system("mv \""old"\" "new)}' your_file_with_file_list

awk '{out=$1; for (i=2; i<=NF; i++) {out=out"\t"i-1":"$i} {print out}}' inputfile

awk '{p = split($0,a,"\t"); if (length(a[3]) < 1000) print $0}' test.txt > out.txt

awk '{p=1.2*$0;$0=p>1?1:p;printf "%.5f\n",$0}' file

awk '{p=1.2*$0;$0=p>1?1:p}7' file

awk '{print  > "data"substr($1,0,8)".dat"}' myfile

awk '{print > "Chr"$1".gen"}' file

awk '{print > ("file" ($2~/+/?1:2))}' file

awk '{print >> "output." $2}' input.file

awk '{print >("SMALL_BATCH_OF_FILES_" int((NR+2)/3))}' BIG_INPUT_FILE

awk '{print "$line_number $ipv4 $ipv6" $1 $2 $3}'

awk "{print \"'\" \$1 \"':'\" \$2 \"'\"}" input

awk "{print \"'hello'\"}" filename

awk '{print ","$0}' file1.csv > file2.csv

awk '{print "INSERT INTO users (email,paypal_tran,CCReceipt) VALUES"; print "(\x27"$1"\x27,\x27"$2"\x27,\x27"$3"\x27);"}' input.txt

awk '{print "chr"$0}' file.in > file.out

COMMAND=pwd | awk '{print "dir: "$1}'

awk '{print "dm" NR "," $0}' input.csv >output.csv

awk '{print "dm" NR+255","$0}'  test

awk '{print "echo",$1,$2,$3}' $logfile | sh -x

awk '{print "foo"}' input

awk '{print "line #", NR, "-", gsub("0/0",""), gsub("0/1",""), gsub("1/1","")}' file

awk '{print "prefix" $0}' file

awk '{print "s/" tolower($1) "/" tolower($2) "/g;s/" toupper(substr($1,1,1)) tolower(substr($1,2)) "/" toupper(substr($2,1,1)) tolower(substr($2,2)) "/g"}' words.dat > sedscript.sed

awk '{print $'$n'}' out.txt

awk '{print $(NF - 1), $NF}'

awk '{print $(NF-1), $NF;}' filename

awk '{print $(NF-1),"\t",$NF}' file

awk '{print $(NF-1)}'

awk '{print $(NF-1)}' file > new_file

awk '{print $(NF-2), $(NF-1), $NF}'

awk '{print $(NF-2), $(NF-1), $NF}' file

 awk '{print $0 > "file_"$1"_"$2}' file

awk '{print $0 > "file_"substr($4,0,1)}' yourfile

awk '{print $0 ; exit(0); }'

awk '{print $0 OFS $17 OFS $5}' test_s  | sort -n -k18 -k19  | uniq -c -f17 | awk '{NF=18;print}'

awk '{print $0>$2".txt"}' file

awk '{print $0" or"}'

awk "{print \$0\"|\"$(date +\"%d-%m-%Y\")}"

awk '{print $0+0}'

awk '{print $0, "7"} ' inputfile > newfile

awk '{print $0, "or"}'

awk '{print $0, $2 + $NF }' input_file

awk '{print $0, $2}' file

awk '{print $0, ++a[$0]}'

awk '{print $0, gsub("Y", "Y"), gsub("R", "R")}'

$ awk '{print $0,"\t",FILENAME}' file

awk '{print $0,$2+$3+$4+$5+$6+$7}' input.txt > output.txt

$ awk '{print $0,FILENAME}' OFS='\t' file

awk '{print $0,FILENAME}' file1 file2

awk  '{print $1 "  "strtonum("0x"substr($2,11))-0xca115ac0 "  "strtonum($3)-0x3665fb5f1ac1 }' input

awk '{print $1 " "  $2 "\n" $3 " " $4 "\n>"}'

awk '{print $1" "$2}' a b c | sort | uniq -c | awk '{if ($1==3){print $2" "$3}}'

awk '{print $1"\t"$8"\t"$9}' yourfile.tsv > only189.tsv

awk '{print $1$2" "$3}' inputFile

awk '{print $1$2$3$4$5$6$7$8$9$10$11$12}'

awk '{print $1+1}'

awk '{print $1, " ", gensub(/.*(serverfile[0-9]+).*/, "\\1", $0)}' file.txt

$ awk '{print $1, $2, $3, $4}' file

awk '{print $1, $3}'  filename

awk '{print $1,$2,$3,"\t",$4,$5}' file|column -ts$'\t'

awk '{print $1,$2,$3,$4,$5}' FS='|' OFS='\t'

awk '{print $1,$2,$3,$4,$5}' FS='|' OFS='\t'

awk '{print $1,$2,$9,$NF}'

awk '{print $1,$2}' RS="" file | sort | awk '{print $1 "\n" $2 "\n"}'

awk '{print $1,$3,$(NF-1),$NF}' your.file

awk '{print $1-$EFERMI , ($2+$3)/32}' 

awk '{print $10 ".torrent"}'

OUTP= uptime | awk '{print $10}' | cut -f1 -d,

awk '{print $11,$12}'

awk '{print $1; exit}'

awk '{print $1FS"has {"substr($0,index($0,$2))"} itmes in his bag."}' data.txt

awk {'print $1'} 

awk '{print $1}' <<<"This is a test"

tmp=$(awk '{print $1}' <<< "$line")

l= wc $file | awk {'print $1'}

awk '{print $1}' /path/to/file

awk '{print $1}'  /proc/"$PPID"/cmdline

awk '{print $1}' file 

awk '{print $1}' file.txt | xargs dig +short 

awk '{print $1}' file1 | fgrep -f - file2

awk '{print $1}' input.txt | xargs -n 1 -I pattern grep -rn pattern dir

awk '{print $1}' < address.txt | while read ip; do ping -c1 $ip >/dev/null 2>&1 && echo $ip IS UP || echo $ip IS DOWN; done

awk '{print $2,$1}' ip-list

awk '{print $2}'

PROCESS='mayoff  10732 ...' | awk '{print $2}'

awk '{print $2}' FILENAME

awk '{print $2}' dihed_*.dat > file.new

awk '{print $2}' dl.txt > $$.tmp && mv $$.tmp dl.txt

awk '{print $2}' file > new_file

awk '{print $2}' file.txt

awk '{print $2}' frequency.txt | grep -Fxf dictionary.txt > corpus-lexicon.txt

awk '{print $2}' input

awk '{print $2}' | sort -rn | perl -e '$d=.1;@l=<>;print $l[int($d*$#l)]'

awk '{print $3 - $2}' temp.txt

awk '{print $3 - $2}' test.txt

awk '{print $3, $4, $5, $6, "<a href=" $7 ">" $7 "</a>"}'

awk '{print $39}' /proc/2338/stat

awk '{print $3}'

thevalue=`awk '{print $3}' < inputFile`

awk '{print $3}' file

awk '{print $4".jpg"}'

awk '{print $4}' | tr -d ,

awk '{print $6}' data.txt

ENE=$(awk '{print $7}' temp)

$ awk '{print $NF}'

awk '{print $NF}'   # print the last field of every line

awk '{print $NF}' file.txt > file2.txt

awk '{print $NF}' your_file >only_names.txt

awk '{print $N}' RS= file

awk '{print ($1 > 0 && $1 < $2)}'

awk '{print ($1 - 1280449530) " " $2}' file

awk '{print ($1 ~ /\.$/ ? "OK" : "NOK"), $0}' file

awk '{print ($4) ? $4 : " "}' FILE.CSV

awk '{print ((NR-1)%3)+1 $0}' $1 > data.out

awk '{print ((NR-1)%3)+1, $0}' $1 > data.out

awk '{print FILENAME " : " $0}' V*

awk '{print FILENAME, $0}' V*

awk '{print NF, $0}' file | sort -rn | cut -d' ' -f 2-

awk '{print NR, $0}'

awk '{print NR-1 "," $0}'

awk '{print gensub(/\y([0-9][0-9])-/, "\\1:", "g")}' file

awk '{print gsub("ENST[0-9]+","")}' INPUTFILE

awk '{print gsub(/\"\|\"/,"&",$0) +1 }' input.txt

awk '{print gsub(/\"\|\"/,"&",$0)}' input.txt

COUNT=$(awk '{print gsub(/\t/,"")}'$FILE)

awk '{print gsub(/\t/,"")}'inputfile > output.txt

awk '{print int($3)}' 

awk '{print name_of_created_file | "./process.sh &"}'

awk '{print strftime("%c", ( <timestamp in milliseconds> + 500 ) / 1000 )}'

awk '{print strftime("%c",$1)}' input.txt

awk '{print substr($0,0,80)}' your_file

awk '{print substr($0,1,299) substr($0,501)}' file

awk '{print substr($0,2,6)}' file

awk '{print substr($0,index($0,"FBCD"),200)' file

awk '{print($0<0?0:$0)}' file.txt

awk '{print($2,"\t",$1)}' abcd.txt

awk '{print; $3=0; for (i=1; i<$2; i++) print}' inputfile

awk '{printf "%-27s%-18s%-11s$%-14.2f$%.2f\n",$1,$2,$3,$4,$3*$4}' FS=: foo.txt

awk '{printf "%.2f %.2f\n", $4 / 1024, $6 / 1024 }'

awk '{printf "%.2f\n",$0/59.5}' ball_dropping_times >bull_velocities

awk '{printf "%09d ", NR}1' file.txt

awk '{printf "%d %d\n", $1, $1-a; a=$1;}' file

awk '{printf "%f\n", your_field .... }' file

awk '{printf "%s "(!NF?"\n\n":""),$0}' file

awk '{printf "%s ", $3}'

awk '{printf "%s ",$0} !NF {print "\n"}' file

awk '{printf "%s ",$1;for(i=12;i<NF;i++)printf "%s ",$i;printf "\n"}' file

awk '{printf "%s %.2fMB %s\n", $1, $2/1024, $3 }' file

awk '{printf "%s"(NR%5?", ":"\n"),$1}' file

awk '{printf "%s", $0}'

awk '{printf "%s",$0}/;$/{print ""}' file

$ awk '{printf "%s",$0}/;$/{print ""}' file > newfile

awk '{printf "%s%s", (NR>1&&/^[0-9]{10}/?"\n":""),$0}END{print ""}' file

awk '{printf "%s%s%s\n", "\"", $0, "\" = \"\";"}' file

awk '{printf "%s\0", $0}'

awk '{printf "create synonym classa.%-30s for classb.%s;\n",$1,$1}' student.txt

awk '{printf $1":"}' a.txt

awk '{printf $1FS$2; for (i=5; i <= NF; i++) printf FS$i; print NL }'

awk '{printf $1} END{print "\n"}'

awk '{printf ("%-10.9s%s\n", $1,$2)}' file

awk '{printf NR%37?"%d ":"%d\n", $1}' file

awk '{printf colon $0; colon=":"} END {printf "\n" }' INPUT.TXT

 awk '{printf( "Type %s, %s", $4, $5 )}' FS=, $i > $i.result

$ awk '{printf("%d %s\n", length($NF), $0)}' junk.lst|sort -n -k1,1|sed 's/^[0-9]* //'

awk '{printf("%d, %d, %d, ", 22, $1, NR); for(i=2;i<=NF;++i) printf("%d, ", i)}' file

awk '{printf("%d\n", ($1+$2)/2)}' input

awk '{printf("%s ", $0)}'

awk '{printf("%s ", $0)}' data.txt

awk '{printf("%s - ", $1) ; system("ip2country \"" $1 "\"")}' < inputfile

awk '{printf("%s%s",$0,NR==2?OFS:ORS)}' file

awk '{printf("'"'"'%s'"'"',", $0)} END{print ""}' 1.txt

awk '{printf("\x27%s\x27,", $0)} END{print ""}' 1.txt

awk '{print}' RS="[[:digit:]]+| +" file.txt

awk '{print}; ""~$0 {getline; print "$" $0}' input_file

awk '{r=$NF;k=$1$2;a[k]=a[k]?a[k]";"r:$0}END{for(x in a)print a[x]}' file

awk '{rec = rec (NR>1?RS:"") $0} END{ print "<" rec ">" }' file

awk '{s[$1]+=$5} END{ for (x in s) { print x, s[x]}}' in1 in2

 awk '{s+=$1;i[NR]=$1" "$2;a[i[NR]]=$1}END{for(x in i)print i[x],sprintf("%.3f%", 100*a[i[x]]/s)}' file

awk '{s+=$1} END {print s}' mydatafile

awk '{s+=$1}NR%4==0{print s;s=0}' file

awk '{s+=$7}END{print s/NR}' c* > result.txt

awk '{s="";i=1;while(substr($0,i++,1)=="\t")s=s "   ";sub(/^\t*/,s)}1'

awk '{s=$0;getline < "file2";print s,$0}' file1

awk '{s=$0}{n=gsub(/[0-9]/,"",s)}n>=3&&n<=8' file

awk '{s=$1;gsub(/:/,"",s);if (s>max[$2]){max[$2]=s;l[$2]=$0}}END{for (i in max) print l[i]}' file|sort -n

awk '{s=$4" "$3" "$2" "$1; if($5=="None"&& s in a)next;else a[s]=$5" "s}END{for(i in a)print a[i]}' file|sort

awk '{s=(NR-1)%25}!s{printf "%04d\n", ++k}{printf "%2d %s\n",s+1,$0}' file

awk '{s=NR<3?"-":++i;print s,$0}' file

awk '{s=NR<3?"-":++i;print s,$0}' file|less

awk '{s=tolower($0)} s~/lowercase_pattern1/ && s~/lowercase_pattern2/' file

awk '{show=0; for (i=1; i<=NF; i++) {if ($i!=0) show=1; col[i]+=$i;}} show==1{tr++; for (i=1; i<=NF; i++) vals[tr,i]=$i; tc=NF} END{for(i=1; i<=tr; i++) { for (j=1; j<=tc; j++) { if (col[j]>0) printf("%s%s", vals[i,j], OFS)} print ""; } }' file

awk '{split($0,a,""); for (i=1; i<=100; i++) print a[i]}' anyFile.txt | xargs bash -i -c 'ord $@' _

awk '{split($0,a,""); for (i=1; i<=100; i++) printf("%d",a[i])}' anyFile.txt

awk '{split($0,a,"viewport=");split(a[2],b,",");print b[5],b[6]}' filename

awk '{split($1,a,"/"); print $2,$3,$4 > a[2] ".txt"}' datafile

awk '{split($11,ary,/:/); if(ary[2]>=5) print}' myFile

awk '{split($3, a, "@"); split($6, b, "@");if (a[1] == b[1]) print}'

awk '{split($3, a, "@"); split($6, b, "@")}; a[1] == b[1]' 

awk '{sub(",","")}1' file >temp; mv temp file

awk '{sub("T", " ", $3)}1' file.csv

awk '{sub(/ # [^ ]+/,x)}1' file

awk '{sub(/ +"CN=[^"]+" +/," ")}1' infile

awk '{sub(/<DistanceMeters>[^>]*>/,x)}8' file

awk '{sub(/[^[:alpha:]].*/,"X",$1)}1' file

awk '{sub(/,/,"",$0); print substr($0,0,length($0)-1)}'  input.txt

awk '{sub(/.*\//,"",$4)}1' file

awk '{sub(/...$/, ".&"); print}'

$ awk '{sub(/:[.]/,":0.",$6)}1' FS=, OFS=, file

awk '{sub(/AA BB/,"CC DD")}1' infile > outfile

awk '{sub(/DST=/,"",$10); print $10}' iptables.log |sort -u

awk '{sub(/E.*/,"",$3); print$3}' temp.txt

awk '{sub(/E.*/,"",$4); print$4}' temp.txt

awk '{sub(/H....\$/, "replacement")}7' file

awk '{sub(/\.$/,"",$1);sub(/\.$/,"",$5);print $1,$5}' file

 awk '{sub(/\S*\t/,"");a[$0]++}END{for(x in a)print x, a[x]}' file

awk '{sub(/\r$/,"");print $2,$1}'

awk '{sub(/^>[^ ]* /,">")} 1'

what_i_want=$(awk '{sub(/^END=/,"",$8); sub(/;.*$/,"",$8); print $1,$2,$8}' line)

awk '{sub(/^M/,"")}1' filename > newfilename

awk '{sub(/_[^_]*_[^_]*$/,"")}1'

awk '{sub(/root/, "yoda"); print}'

awk '{sum[$2] += $1} END {for (i in sum) printf "%4d %s\n", sum[i], i; }'

awk '{sum[$2]+= $1;}END{for (date in sum){print sum[date], date;}}'

awk '{sum+=$1} END {print sum}' 

awk '{sum+=$1} END {print sum}' data

awk '{sum+=$1} END {print sum}' read

awk '{sum+=$1} END{ print sum}'

awk '{sum+=$3;s3[NR]=$3} END {ave=sum/NR; for(i=1;i<=NR;i++)print s3[i]-ave}' coriolis_data

awk '{sum4 += $4; sum5 += $5} END {print sum4/NR, sum5/NR}' names.txt

awk '{system("a=$(stat -c %Y $9)")}'

awk '{system("pstree " $2)}'

awk '{system("rm -i " $10 ".torrent")}'

awk '{system("rm -i " gensub(" ","\\\\ ","g",$10) ".torrent")}'

awk '{system("touch /tmp/pages/"NR".txt")}' /tmp/file.txt

awk '{system("wc "$1)}' myfile

awk '{t += $NF} END {print t}'

awk '{t=$1; $1=$2; $2=t; print}' OFS="|" FS="|" input_file

awk '{t=$1;$1=$NF;$NF=t}1'

awk  '{t=$2 " " $4;gsub(/[-:]/," ",t);printf "\"%s\",%s\n",(mktime(t)+6*3600)*1000,substr($0,25)}' FS=\" OFS=\" file

 awk '{t=length($0);sub(" *$","");print t-length($0)}' file

awk '{target=substr($0,1,10); gsub(/-/,":",target); print target substr($0,11)}' file

awk '{total += $1; count++ } END {print total/count}'

awk '{var = $3} /three/ {a = var}; /six/ {b = var}; /five/ {c = var} END {print a, b, c}' file

awk '{w=$1} END{print w}' file

awk '{while(++i<=NF)if($i~/[235]$/)print $i;i=0;print ""}' RS="" file

awk '{while(/0$/) { getline a; $0=$0 a; sub(/\n/,_) }; print}'

awk '{x = ($3 > 0 ? 1 : -1); print $1*x "\t" $2*x}' file

awk '{x[$1 " " $2]+=$3} END{for (r in x)print r,x[r]}' file

awk '{x[$2] += $3} END {for(y in x) print y,x[y]}' freqdat044.dat freqdat045.dat freqdat046.dat freqdat047.dat freqdat049.dat freqdat050.dat

 awk '{x+=($0~/^SectionMarker/)?1:0}x<2' data.log

awk '{x=$0;sub($1FS$2,"",x);gsub(FS,"",x);print $1,$2,x}'   

awk '{x=$1/10; a[int(x)]++} END{for(i in a) print i,a[i] | "sort -n"}' INPUT_FILE

awk '{x=$2; sub(/D/,"e",x); print log(x)}' file

awk '{x=$NF;NF--;printf "%-100s %10d\n", $0, x}'

awk '{x=4; print $x}'

awk '{x=x ORS $0};/pattern/{x=$0};END{if(x ~ //)print x}' file

awk '{y=substr($7,1,5);z=substr($7,6); $7=z""y;}1' inputfile

awkex 1.txt 2.txt 3.txt

awko data | column -t > output.txt

  aws ec2 create-tags --resources ami-78a54011 --tags Key=Name,Value=myname

aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --output text

aws elb describe-load-balancers --region us-east-1 | jq '.LoadBalancerDescriptions[] | select((.AvailabilityZones[] | select(. == "us-east-1b")) == "us-east-1b") | .CanonicalHostedZoneName, .AvailabilityZones'

aws.user_data = "#!/bin/bash\necho 'Defaults:ec2-user !requiretty' > /etc/sudoers.d/999-vagrant-cloud-init-requiretty && chmod 440 /etc/sudoers.d/999-vagrant-cloud-init-requiretty\nyum install -y puppet\n"

b

b

b 'c '\''echo test'\'

'b c d f'

"\b([fh]i|k)\w*(eld|ed)\b"

b.sh 'My first' 'My second'

b101001.0111 11101011100001010001 11101011100001010001 11101011100001010001 ...

b101001.0111111010111000010100011110101110000101000111101011100001

b2 = ${b} + 2

backupbatch.cmd miFileToCopy.txt

backy --whatever --this --is=ignored not ignored anymore

bad-cmd || echo "failed"

bad_command 2>&1  >> file.out

bad_command >> file.out 2>&1

bankAccountBalance = b;

bankAccountNumber = n;

bar

base64 --wrap=0 /dev/urandom

base64 /dev/urandom

test=$( base64 DSC_0251.JPG )

$ base64 reddit.png > reddit.base64.png

basename $(dirname $(dirname $0))

var=$(basename "$(find dir/* -name "$file")")

basename $(ls /var/www/some_directory/example_file.*)

base=$(basename $(readlink link))

interpreter=$(basename $(sed '2q;s/^#!//;s/ .*//' test.sh))

me=`basename $0`

__COMMAND=$(basename $0)

arg0=$(basename $0 .sh)

MYBASENAME=$(basename "$1")

THEDIR=`basename "$1"`

file=$( basename "$1" )

dirN=`basename $1`

filename=`basename $1`

base=$(basename $1 .zip)

BASE=$(basename $FILE);

basename $PWD

for f in *.txt; do b=$(basename "$f" .txt); cat "$f" "$b.svs" > "$b.both"; done

    name=$(basename "$file")

basename "$file" >> $HOME/AutoQA/FailedTestCases.txt

test=$(basename "$file" .deb)

test=`basename "$file" .deb`

file=`basename "$filename"`

file=$(basename $filename)

basename $filename >> /directory/log

file=$(basename $filename)

prot=$( basename "$pfile" ".data" )

END_OF_PATH=`basename "${1}"`

search_base=`basename ${name} | cut -d'.' -f1`

finalName=$(basename -- "$(dirname -- "$path")")

DIRECTORY=`basename "SF_Library/example/Platform/DS-PLATFORM.car"`

basename `pwd`

basename file1.java file2.java file3.java...

basename git@git.gitweb.com:/myModule-repo.git .git

$ basex -b\$word=celoso consulta.xq

$ basex -bword=celoso consulta.xq

bash <(cat "test.sh")

bash <(curl -s http://mywebsite.com/myscript.txt)

bash <(curl -s https://raw.github.com/gist/419201/gitconfig.bash | head -n 3)

bash <(curl www.test.com/script.sh)

bash <(wget -O - https://raw.github.com/aaronhancock/pub/master/bash/readtest.sh)

bash $1 &

bash --init-file my-init-script

bash --login 

bash --login

bash --login -c '/var/www/tweeet/get_tweeet.sh'

bash --login -i

bash --login -i -c 'cd somdir; exec bash'

$ bash --noprofile --norc

bash --rcfile <(cat ~/.bashrc; echo 'PS1="change > "')

bash --rcfile <(echo ". ~/.bashrc && cd ~/Work")

bash --rcfile <(echo "export PS1='> ' && ls")

bash --version

bash -O extglob -c 'echo !(file1|file2)'

bash -O extglob -c 'ls !(*site*).mol2'

bash -O extglob scriptname

bash -c

bash -c "$(tail -1 command.txt)"

bash -c "$ACTIONS_COMMAND"

bash -c "$CMD '$CATALINA_HOME/bin/catalina.sh stop 20 -force'"

bash -c "$cmd"

bash -c "$foo"

bash -c $'shopt -s extglob\necho !(file1|file2)'

nodeNumm=$(bash -c "${nodeSayi}" | grep -c '""')

nodeNumm=$(bash -c "${nodeSayi} | grep -c '\"\"'")

nodeNumm= $(bash -c "${nodeSayi} |grep -c '\"\"'")

nodeNumm= `bash -c "${nodeSayi} |grep -c '""'"`

bash -c '(sleep 5m; kill $$ 2> /dev/null) & exec script' &

bash -c '...$1...$1...' bash "argument"

bash -c ./script.sh

bash -c 'PROFILE=default_profile exec bash'

bash -c 'PROFILE=screen_profile exec screen -U'

bash -c 'XXXX ; bash'

bash -c 'cmd >output.file 2>error.file' >bash_output.file 2>&1

bash -c 'date >&/tmp/log.$$' &

$ bash -c 'date "+%Y-%m-%d %H:%M:%S" >> unit-tests-runs.log'

bash -c 'db2 connect to mydb;db2 -x -v "select 1,'\'','\'',2,'\'','\'',3  from SYSIBM.SYSDUMMY1 fetch first 10 rows only"; db2 connect reset;'

bash -c 'diff <(sort text2) <(sort text1)'

bash -c 'dirify "$1"' dirify {}

bash -c 'echo $$'

bash -c 'echo $$'

bash -c 'echo $0' "Hello, world"

bash -c 'echo $BASH_EXECUTION_STRING'

FOO=bar; bash -c 'echo $FOO'

bash -c "echo this is a bash script; echo lalalala"

bash -c "for ((i=0; i<10; i=i+1)); do echo $i; done"

bash -c "for ((i=0; i<10; i=i+1)); do echo \$i; done"

 bash -c 'for i in * ; do echo -n > $i ; done'

$ bash -c ls

$ bash -c ls NONEXISTENT

$ bash -c 'ls NONEXISTENT'

bash -c 'pkill -TERM -f "[j]ava"; true'

bash -c 'pkill -TERM java; true'

bash -c 'r=$( dd bs=4096 count=1 2> /dev/null); echo "$r"'

bash -c 'sleep 10 & echo $!'

bash -c "source /neuro/arch/scripts/neuro-fs stable;echo \$XAPPLRESDIR;"

bash -c "stat $(echo "${files[*]}")"

bash -e myScript

bash -e my_script.sh

$ bash -e yourscript.sh

bash> php -f /path/to/my/php/script.php

bash -ilx

bash -n script.sh

bash -n scriptname

bash -x

bash -x -ls -c "exit" 2> shell-startup-output

bash -x ...

$ bash -x ./boot.sh

bash -x /path/to/birthdays.bash 

bash -x /path/to/script

bash -x bashplot.sh .... arguments....

$ bash -x chart.sh

$ bash -x commit.sh

bash -x myscript.sh

$ bash -x myscript.sh

bash -x myscript.sh

bash -x run.sh

 bash -x script

bash -x script.sh

bash -x script.sh

bash -x script.sh <<< yes

bash -x script_name

bash -x test1.sh

 bash -x test1.sh $DATE1 $DATE2 $DATE3 $DATE4

bash ./env.sh

bash ./errtest.sh

bash ./file.bash

bash ./log_sender.sh

bash ./myscript.sh

$ bash ./script.sh

bash ./so.sh 127.0.0.1

$ bash ./test.sh

bash ./test.sh

bash /path/to/script

bash /path/to/script/deploy.sh

bash "/tmp/My Batch Script Files/Processing" arg1 arg2 ...

bash MakeDB.sh > result 2>&1

bash a.bash ;bash b.bash

$ bash argtest ubrs badarg brd

bash arguments.sh Bash Scripting Tutorial

bash b.sh

bash create_thumbs.sh

bash curl.sh -d Remote -a "Moz 123" -r http://localhost http://www.google.com/

$ bash echosomecommands.sh | bash

bash fancy_rename.sh Ebc-345- 10 1 /path/to/files/*

$bash file.sh

bash filename $'sed \'s/foo/foo" "bar/g\' file'

bash foo.sh

$ bash format_output.sh < myfile.txt

bash hhhqst

bash | lolcat

bash mksql.bash < your_id_file

bash myShellScript.sh 

bash my_script.sh > >(tee -a log.txt) 2>&1

bash my_script.sh > >(tee log.txt) 2>&1

bash myscript

bash myscript.sh

bash myscript.sh < mytextfile.txt

bash myscript.sh

$ bash myscript.sh

bash myscript.sh

bash node_modules/.bin/tsc -v

bash proc_${i}.sh

bash rename.sh

bash run.sh

bash script

bash script -a -b b_arg

$ bash script -a a_arg -b b_arg extra

bash script.sh

bash script.sh

bash script.sh

bash script.sh

bash script.sh

bash script.sh

bash script.sh

bash script.sh <<< yes

bash script.sh /usr/local/bin

bash script.sh "/usr/local/src/file1.props" "/usr/local/src/file2.props"

bash script.sh A B C

bash script.sh > "/var/log/$(date +%Y-%m-%d_%H:%M).log"

bash script.sh dir string replacement

bash script.sh </dev/null >/dev/null 2>&1 & disown

bash script.sh file

bash script.sh file1 file2

bash script.sh test >(wc)

bash script.sh your_config_file pattern1 pattern2 ...

bash script.sh your_config_file patterns_file

bash script1 2>/dev/null || bash script2

bash script_name.sh

bash scriptname.sh

bash shell_expansion.sh Text_File.msh Text_File_expanded.msh

bash split_history_file_test.sh

bash sysroot.sh

bash temp.sh /var/tmp/tar-1.27.1/ -e m4 -fl c

bash temp.sh 'gnl|SRA|SRR035294.8575.2 FIHSSUW01EWK4S.2 length=287' temp.txt

bash test.sh

bash test.sh

bash test.sh

bash test.sh /media/2C44138344134F48/RB1

bash ustvari.sh 3 5

bash yourscript

$ bash yourscript.sh

bash ~/webSupport.sh pullVars "$b" >/dev/null 2>&1 &

bash ~/webSupport.sh pullVars "$b" >&- 2>&- &

bash, 0.0, 1.5

bash.exe --rcfile 01.txt -i

bash: !: event not found

bash: ./install_programs: /bin/bash^M: bad interpreter: No such file or directory

bash: ./runScript.bash 8000: No such file or directory

bash: /usr/local/bin/w: No such file or directory

bash: badcommand: command not found

bash: cheese: readonly variable

bash: functionName: readonly function

bash: test: -gt: unary operator expected

bash: x: unbound variable

bash: ~/folds/DarumaFramework/: is a directory

bash: ~/folds/myfile.dot: command not found

  batch_gs.sh 3 5 fileName

\bbutt\b

bc <<< "ibase=2;101010"

kw=$(bc <<< -2^63)

bc <<< "1 + 1"

bc -l <<< "for (i=0;i<400;++i) { x=i*6.28/400; print x,\" \",s(x),\"\\n\" }" > sine

ABC=$(bc -l <<< "10 ^($ABPOW)")

codonsnum=$(bc -l <<< "scale=3;$lengthseq/3")

bc -l <<< '720/304*360'

bc <<< "scale=2; $(du wednesday | cut -f1) / $(du tuesday | cut -f1)"

bcdedit /deletevalue {current} safeboot

bcdedit /set {current} safeboot minimal 

bcdedit /set {current} safeboot network

bcp MyDB..my_view out my_data.out -Uusername -Ppassword -Sservername -c

$ better-dig.sh google.com

 bin>mysql -uroot -p<server_password> {database_name} < {complete filepath}

"bin" : { "myapp" : "<relative_path_to_the_script>/script.js" }

"bin-path" => "rvm 1.9.2-p180 exec bundle exec rackup"

bin/executable < inputfiles/input > output/output

bin/hadoop fs -rmr /user/cloudera/capital/output

bin/python /usr/local/bin/nosetests --with-snort

bin/someapp do-action --option1 some_value --input /dev/stdin

"bin": { "myapp" : "<relative_path_to_myapp.js>/lib/myapp.js" }

bin_PROGRAMS = mybin 

bind '"'`echo -e '\x52'`'":self-insert'

bind '"R":self-insert'

bind '"\C-]":"\C-e\C-u pbcopy <<"EOF"\n\C-y\nEOF\n"'

bind '"\C-M":"foobar"'

bind '"\C-i":complete'

bind '"\C-i":complete'

$ bind '"\C-j": "\C-atime \C-m"'

 bind '"\C-t":"\C-a\ed"'

bind '"\C-t":"cd ..\n"'

bind '"\e[24~": "\e[1~gui \e[4~\n"'

bind '"\e[24~":"\C-k \C-upwd\n"'

bind '"\e[24~":"foobar"'

bind '"\e[24~":"pwd\n"'

bind '"\e[3;5~":kill-word'

bind '"\eY": "\e2\e."'

bind '"\e^M":"foobar"'

bind '"\ee": " \C-u \C-a\C-k${PWD##*/}\e\C-e\C-y\C-a\C-y\ey\b"'

bind '"\ee": " \C-u \C-a\C-k${PWD##*/}\e\C-e\C-y\C-a\C-y\ey\b\ef\C-f"'

bind '"\ee": "${PWD##*/}\e\C-e"'

bind '"\ee": "${PWD##*/}\e\C-e\eb\"\C-e"'

bind '"\t":menu-complete'

bind '"^M":"foobar"'

bind -P | grep --fixed-strings ' can be found on ' | perl -pe 's/((?<!\\)(?:\\\\)*)\\C/\1Ctrl/g;s/((?<!\\)(?:\\\\)*)\\e/\1Esc,/g'

 bind -P|grep "can be found"|sort | awk '{printf "%-40s", $1} {for(i=6;i<=NF;i++){printf "%s ", $i}{printf"\n"}}'

bind -m vi-insert '"{" "\C-v{}\ei"'

bind -p|grep -i '"[pE]"'

bind -q complete

bind -x '"\C-K": "echo -en \\033c"'

bind -x '"\C-x\C-e":fg %emacs' 

bind -x '"\eW":"who"'

bind Q focus up

bind 'RETURN: "\e[1~gui \e[4~\n"'

bind 'set completion-ignore-case on'

bind 'set show-all-if-ambiguous on'

bind t send-keys "C-m" "~."

bind-key C-c respawn-pane -k bash

bind_ip = 127.0.0.1

bindkey -M vicmd '?' history-incremental-search-backward

bindkey -m 2>/dev/null

bindkey "\C-r" history-incremental-pattern-search-backward

bindkey '^[[3~' backward-delete-word

bindkey '^[[Z' reverse-menu-complete

bindkey '^H' backward-kill-word

$> bindkey ^O forward-word

bindkey \^U backward-kill-line

bindkey ^X/ i-search-back

bindkey '^_' undo

bindkey '^h' backward-delete-char

bindkey '^i' expand-or-complete-prefix

binmode STDOUT, ':utf8:raw';

biz || echo "oh noes"

bjobs -u $1 2>&1 | awk '...'

blah blah blah = change "disposition" to "disposition".

blaunch -I -n <num_tasks> blaunch env | grep TASKID

blaunch -u JobHost cmd.sh

blender ~ $ bash ./script.sh

blkid > Label

blockdev --getsize64 /dev/sda

bob -a some_arg ${VAR:+-b "$VAR"}

body must be at least 30 characters; you entered 15

bomb(){ bomb | bomb &}; bomb

bond0 bond1 bond2 eth0 eth1 eth2

boost::lexical_cast<int>(optarg);

break > a.txt && cmd /v:on /c "for %f in (*.txt) do break > !random!.txt"

brew install ack

brew install aspell --lang=en,fi,jp

brew install git bash-completion

brew install gnu-sed

brew install grep --default-names

brew install node

brew install redis

brew outdated | wc -l

brew tap homebrew/dupes && brew install apple-gcc42

'browser.tabs.loadDivertedInBackground' to 'true'.

bsdtar -czf mage6BRQWJ-1.tar.gz --exclude=^vendor *

btick1 `def`

build = spawn '/bin/bash', ['test.sh']

buildarchtranslate: i686: i586

function echo(){ builtin echo $(basename $0 .sh): $1; }

echo() { builtin echo "==>" "$@"; }

builtin echo "This 'echo' will not be suppressed."

bundle >/dev/null 2>/dev/null &

bundle exec my_script.rb

$ bundle install; beep 

bundle show gem | xargs cd

bwa sampe ref.fa r1.sai r2.sai r1.fq r2.fq | samtools view -bSho out.bam -; echo Here is another command.

\bw\w+\b

bzip2 -c < pipe > file.tar.bz2 &

bzip2 -c directory.tar > directory.bz2

bzip2 -dc archive.tbz | tar xvf - filename

bzr commit -m "merged upstream version ${REV_UPSTREAM}" || exit 0

bzr commit whatever || true

bzr export /path/to/myproj.tar.gz

lastfib=$c

c  3

c&&c--;/Reco/{c=3}

c&&c--;/pattern/{c=N}

c/foo.txt

c/x/a/b/foo.txt

c/xfoo.txt

c1TIME=$hours:$minutes:$c1seconds[0-9]

c:\ *something you did* \android-sdk-windows-1.5_r2\tools\

c:\>test.exe > output.txt && type output.txt 

"c:/cygwin/home/jonathan/camlprog \"foo\" bar"

"c:\123.doc"

c:\KindleGen\kindlegen.exe %1 -c2

c:\KindleGen\kindlegen.exe Htmlpage.html -c2

"c:\MySetup.exe" /exelog "c:\log.txt" /x // /log "c:\msilog.txt"

"c:\Program Files\WinRAR\WinRAR.exe" a -afzip -df e:\test.zip e:\test.csv

"c:\Program Files\gs\gs9.04\bin\gswin64c.exe" -dQUIET -dNOPAUSE dBATCH -dDEVICEWIDTHPOINTS=2592 -dDEVICEHEIGHTPOINTS=1728 -dFIXEDMEDIA -sDEVICE=pdfwrite -sOutputFile="justafile.ext" "justafile.ext"

c:\Temp>mergefiles

c:\Temp>notepad summary.log

"c:\\123.doc"

c:\cygwin\bin\bash  myscript

c:\cygwin\bin\bash.exe --login -c "scp account@server:~mysourcedirectory/targetfilename* /cygdrive/c/targetfolder"

c:\foo.flibble|test|of|args

c:\my documents\file1.xls

c:\myapp.exe -foo -bar

c:\oracle\product\11.2.0\client_1

c:\oracle\product\11.2.0\client_1\bin\sqlplus.exe

c:\windows\system32\inetsrv\appcmd set config "Default Web Site" -section:requestFiltering -requestLimits.maxAllowedContentLength:157286400

cake email

cal | awk 'NR==2 {split($0,a)} {for (i=1;i<=NF;i++) if ($i==date) print a[i]}' FIELDWIDTHS="3 3 3 3 3 3 3 3" date=31

 month=$(cal | head -1 | grep -oP "[A-Za-z]+")

cal | sed -e 's/^.\{3\}//' -e 's/^\(.\{15\}\).\{3\}$/\1/'

cal | sed 's/^.\{9\}\(.\{3\}\).*$/\1/'

cal | sed 's/^\(.\{18\}\).*$/\1/'

calc 9 + 10 < /dev/null

for A in *; do calculateforfile < "$A"; done

call $(VCInstallDir)vcvarsall.bat

call $(VS110COMNTOOLS)..\..\VC\vcvarsall.bat

call %vs90comntools%vsvars64.bat

call :ack %m% %2 

call :ack %m% 1

call "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" x86

call SecondDirectory\foo.bat

call ant_batch.bat

( call command && echo valid ) | find /i "valid" >nul && goto okay || goto stop

call command > "%Temp%\out.txt" && goto okay || ( find /i "valid" "%Temp%\out.txt" >nul && goto okay || goto stop )

$(call rem, my comment goes here)

call setenv.bat

call shortcut.bat C:\PROGRA~2\TeraTerm\ttermpro.exe TeraTerm >nul

call test.bat %changeFrom% %changeTo% %origFile%>%newFile%

user@host$ canonicalize ./bash_profile

cantaloupe

cap install

cap roll HOSTS="server1, server2, server3"

cap roll HOSTS=server1,server2,server3

cap roll ROLES=myrole

cap roll ROLES=myrole1,myrole2,myrole3

capify .

\caption[Server HTTP responses]{Server HTTP responses}\label{fig:http-status}

casperjs test test.js --url="http://google.com"

casperjs test.js --word='soccer ball'

cat > /Users/derek/projects/Crema/Classes/CoffeeFormController.m.uncrustify

text=$(cat)

cat < /dev/mypipe > /var/log/log.txt &

the_input=`cat`

cat <<< "This is coming from the stdin"

cat > fifoin

cat < fifoout

TERM=dumb redis-cli | cat

$ cat > my_fifo

cat > somefile <<< "foo"

LD_PRELOAD=./libisatty.so ls --color=auto | cat

COLUMNS=300 /usr/bin/w | cat

cat <&"${myproc[0]}"

cat

output=$(cat <&3)

~$ cat > foo.py

cat > file.xml

input=$(cat)

cat >d.txt <<<"a b"

cat <&0 &

cat <( some-command ) some-input <( some-other-command )

cat <(echo "SET FOREIGN_KEY_CHECKS=0;") imports.sql | mysql

cat <(echo "yes") - <(echo "no") -

cat <(echo "yes") - | python manage.py

cat <(fgrep -i -v "$COMMAND" <(crontab -l)) <(echo "*/3+1 * * * * $COMMAND") | crontab -

cat <(gen_input) - | parse_input_and_stdin

cat <(grep "match1|match2" input.txt) <(grep -v "match1|match2" input.txt) > output.txt

cat <(ls -1 | grep '^[0-9]' |sort -n) <(ls -1 | grep -v '^[0-9]' | sort)

cat <(ls smthing) <(echo more) | sort

cat <(ls somedir | grep some_prefix | cut -d '_' -f2) <(echo 2.5) | sort -t '.' -k1 -r | head -n 1

  cat [0-9].csv [0-9][0-9].csv .... > new.csv

cat [file] | script.foo

  cat $( ls -1 *.csv | sort -n  ) > new.csv

tabs=$(cat $( ls unit-*-slides.txt | sort -n ) | grep "st^" | split -l 200)

cat "$(dirname -- "$0")/Folder/Text.txt"

cat "$(echo filename with spaces)"

cat $(echo tmp.sh)

cat $(find src/js -type f -name "*.js" -printf "%d\t%p\n" | sort -n | sed -e "s|[0-9]*\t||")>min.js

cat $(grep -v '^#' files) > output

cat $(seq -f "report%g.txt" $NUM) > allreports.txt

cat $(seq -f "report%g.txt" $start $end) > allreports.txt

lastNLines=`cat $1`

cat $1 | ./words_num word | tee $1

cat $1 |cut -d "," -f 7 | sort | uniq -c

cat "$@" > /home/christy/Documents/filetest/catted.txt

cat "$@" | awk '{ c[$1]+=$2 } END { for (i in c) { print i,"=",c[i] } }'

cat $@.tmp > $@ ;

cat $@.tmp | cut -d: -f2 | grep '\.h' | sed 's,\.h,.h :,g' >> $@ ;

 cat "$API" >> "$CONFIG"

$CHANGED=`cat $CHANGED | grep -v $IG`

cat $EMAILMESSAGE | mail -s "$SUBJECT" "$EMAIL"

ECOS=$(cat $FILE | cut -d: -f1)

LINE=$(cat "$FILENAME")

cat $HOME/.rvm/environments/default >> ~/.profile

$ cat $MAIL | formail -ds sh -c 'cat > msg.$FILENO'

COUNT=`cat "$NEWLIST" | wc -l | awk ' { print $1 } ' `

CURRENT_LINE=`cat $UNIQ_LIST_FINAL | sed "$UNIQ_SCAN_INIT_POINT"'q;d'`

  cat $f >>$OUTPUT

for f in folder1/*.md folder2/*.md ... ; do cat "$f"; echo; done > output.txt;

for f in *.md; do cat "$f"; echo "\newline"; done > output.md

for f in *.md; do cat "$f"; echo "\newline"; done > out && mv out output.md

for f in * ; do cat $f | grep '^From: ' | head -1 | sort -u ; done

cat "$f" | sed 'something' > "$f"

cat $file | cut -c 1-10

cat $file | cut -d ' ' -f 1  

cat $file | egrep -v "xxx|yyy|zzz" | grep -v -E -i '([0-z])\1{2,}' | uniq | sort -u  > tmp_file

number_of_times=`cat $filename | grep $line | wc -l`

result=$(cat $filename | wc -l)

 findString=`cat $findString | perl -0777pe 's/\t/\\t/g'`

\$(cat \$foo)

for i in user_*; do cat $i | ./fetch_contact.php; done;

for i in folder1/*.pdb; do cat "$i" >> folder2/"$(basename $i)"; done

for i in *; do cat "$i" && echo ""; done

filesize=$(cat $i.html | wc -c)

encryptionKey=$(cat "$keyFile" | hexdump -e '16/1 "%02x"')

cat $name

cat $old_properties |  awk "BEGIN{ FS=\"=\";OFS=\"=\" } {if(\$1==\"$property_name\") \$2=\"$new_value\"; print \$0;}" >> $new_properties

cat $param

cat $rootFilename | perl -pe 's/Policy[ \t]+([a-zA-Z0-9_]+)[ \t]*[;=].*/\1/g'

cat $sndf | gawk '{ printf "%f\t"  $3 -$2 "\t", (((($4/"'$tag'")/($3-$2)))*100) }'

cat "${1:-.}"/*

cat "${@/#/t_}"

cat ${ITEM_LIST} | ...

cat ${LOG}.tmp1 ${LOG}.tmp2 ${LOG}.tmp3 >> ${LOG}

cat ${TEMPFILE} | cut -d ' ' -f1 | sed '/^$/d' | sed '1,4d' | sed 's/$/|ON_ICE|OFF_ICE/g' > ${MYREPORT}

cat ${TMP_PART2DAT} > ${TMP_REPORT}

cat ${arr[$m]} ${arr[m+1]} >> $op

cat - >/tmp/test.tmp && "${cmd[@]}" >/tmp/new.conf.tmp

for c in */current; do cat ${c} >> ${c%%current}revisions; done

lc=$(cat ${filename} | wc -l)

cat ${file} | awk '{c = c + $3; d = d + $4} END {print "APPNAME", c, d}'

for f in /sys/class/net/*; do cat ${f}/operstate; done

endlines=`cat ${src_path}/${bakfile} |awk '/\\\\\\./ {print NR;}'`

cat * | grep '^From: ' | sort -u

cat *.csv > merged.csv

cat *.eml > file.txt

cat *.eml | lpr

$ cat *.java

cat *.js > merged_`date +%Y%m%d%H%M`.js

cat *.js > merged_`date +%d%m%Y%H%M`.js

cat *.txt >> all.txt

cat *.txt > all.txt

cat *.txt | aspell list | sort -u

$ cat *.{txt,html} | grep -oP '\b[A-Za-z0-9_]+\.[A-Za-z0-9]{1,4}\b' | awk -F. '{ print "." $(NF) }' | sort -u

cat *cnt | awk '{count=$1; $1=""; a[$0]=count} END{for (i in a) print a[i],i}'

$ cat *txt

cat -- "$1"

cat -e ble.txt; cat -e bla.txt

cat -n

cat -n <(ls -1)

TARGET=`cat -n $1 | grep "$c1TIME" | awk '{printf "%s\n",$1}' | awk 'sub("$", "")'| head -1`

cat -n file.log | grep "Start new test" | tail -1 |  cut -f 1 |  xargs -I % sed -n %',$s/is not alive/&/p' file.log | cut -d: -f 4 | xargs -I % echo Error: %

cat -n filename | sort -rn | cut -f2-

cat -n log.txt | sed -n "/TST STARTS/,/TST FINISHED/p" | grep "MATCHED"

cat -n textfile.txt | grep " b " | tail -1 |  cut -f 1 |  xargs -I % sed -n %',$s/blades are down/&/p' myfile.txt

cat -n yourfile | sed -n '8,12p'

cat -vet <<< "$1"

cat -vet yourfile

cat -vet yourfile

cat -ve tarball_weekly

cat -vte file

cat -v file | sed 's/\^A/\t/g' > out

cat -v <<< `ls *.properties`

my_email=$(cat ../address)

cat ../download/interactions.$1.$2 | grep -v "#" | awk '($2!~/_R/){print $2}' | sort -k 1 | uniq > rna.names.txt

cat ../header.txt > find -name *.c

cat ../header.txt -name *.c > find

cat ../header.txt | tee *.c

cat ./mycommands.sql > psql.pipe

cat ./nounlist | egrep "\b[${charlist}]{${wordlength}}\b"

cat ./pipeddata | ./awko ./output.xml -

var=`cat ./version | tr -d ' ' | tr -d '\n'`

cat .temp_occ | sort| uniq -c | sort -k1,1nr -k2 > distribution.txt

 VERSION=`cat .version`

cat /backup/fileslists/filelist1.txt | { while read line; do rsync -avzR $line "$DESTSRV":"$DESTPATH"/; done; }

cat /dev/null >| file

cat /dev/null >! file

cat /dev/urandom | base64

cat /dev/urandom | env LC_CTYPE=C tr -cd 'a-f0-9' | head -c 32

cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32

DBPASS=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

cat /dev/usbXXX | grep "what you're looking for"

cat /etc/filename | grep staticip | awk '{print $3}' | tr -d \'

cat /etc/issue

cat /etc/passwd -n | grep `whoami` | cut -f1 

cat /etc/passwd | awk -F ":" '$7=="/bin/bash" { print $1 }'

cat /etc/passwd | awk -F ":" '{print $7}'

cat /etc/passwd | cut -d: -f7 | sort -n | uniq | xargs ls -l

cat /etc/passwd | grep "^$usernamevariable:" | cut -d":" -f3

$ cat /etc/passwd | sed -e s/^[^:]*/USER/

cat /etc/passwd | some_cmd

cat /home/dell/case3.3/private.key

foo=$(cat /my/file)

foo=`cat /my/file`

fileData=$(cat /path/to/file)

cat /path/to/file  | awk '{if ('/^TCF/' || '/^FSTL/' ) print $0;}' > /path/to/output.txt

$ cat /path/to/file | mail -s "your subject" your@email.com

$ cat /proc/$$/environ | tr '\0' '\n'

cat /proc/asound/cards

cat /proc/cpuinfo

cat /proc/cpuinfo | awk '/^processor/{print $3}' | tail -1

cat /proc/cpuinfo | grep "model name"

cat /proc/meminfo | grep MemTotal | awk '{print $2}'

cat /proc/meminfo|grep MemTotal|awk '{print $2}' >> tst1

cat /proc/version

cat /sys/class/net/*/operstate

foo=$(cat /sys/class/net/eth0/carrier)

cat /sys/class/net/eth0/carrier

for number in `cat /tmp/file.xml | sed 's/>\([0-9]*\)px</>\n\1\n</g' | grep '^[0-9]*$' | sort | uniq`;do let double=$number*2;sed -i 's/'$number'px/'$double'dp/g' /tmp/file.xml;done

 cat /tmp/filesToFind.txt | xargs -n1 -I@ egrep '/@$' /tmp/allFiles.txt

cat /tmp/foo

last_ip=$(cat /tmp/last_ip_check.txt)

cat /tmp/list_of_interesting_words | parallel --pipe --block 10k --files > /tmp/blocks_of_words

cat /tmp/myfile | dos2unix | sed 's#^\(.*\)$#\1\t1#g'

cat /tmp/out.log | sed -r 's/(\sLOB.*"L_.+_)([0-9]{10})("\()/\1'$NUM'\3/g' > /tmp/newout.log

cat /tmp/tables | while read line; do echo "$line"; done

cat /tmp/tables | xargs -L1 echo

ARG="`cat /tmp/tempfile`"

$cat /tmp/tt.txt | sed 's/^st\^/\n\0/g'

PROMPT_COMMAND='LAST="`cat /tmp/x`"; exec >/dev/tty; exec > >(tee /tmp/x)'

cat /usr/include/boost/version.hpp | grep "BOOST_LIB_VERSION"

cat /var/log/kern.log | grep -E "^$(date +%b)" | wc -l

cat /var/log/local3.pipe | grep -i --line-buffered test >> somefile.log

cat /var/log/local3.pipe | stdbuf -oL grep -i test >> somefile.log

cat /var/log/messages > "bug_iteration_$i"

cat /var/log/messages | grep "`date --date="yesterday" +%b\ %e`"

cat /var/log/somelogfile | awk '{ if (system("grep -Fxq " $1 " textfile")) print "useful command " $1; }'

cat /var/spool/mail/ryan

$ cat /washington | sed 's/[Cc]apit[ao]l/capital/g'

cat 1.css <(echo "FOO") <(sed ...) 2.css <(echo "BAR")

cat 1.js 2.js blabla.js > merged_280120111257.js

cat 1.txt $1 2.txt > $(echo $1 | sed 's/\.html/.php/')

cat 1.txt 2.txt 3.txt > 0.txt

cat 123; . send_reminder.sh. 

cat 123; source send_reminder.sh

cat 2.txt | ./jq -c '{(.id): .custom}'

cat A >> B

cat A | xargs -n 1 xyz.pl

( cat Doxyfile ; echo "PROJECT_NUMBER=1.0" ) | doxygen -

cat FILE | cut -d':' -f2 | sponge FILE

cat FILE | xargs | sed "s/ ---- /\n---- /g"

cat FILE1.txt | while read IP ; do sed -i "/^${IP}$/d" FILE2.txt ; done

cat FileA FileB > NewFile

cat FileA | xargs -n4 echo | paste - FileB | while read a b c d e ; do cat $a $b $c $d > $e ; done

cat File_A File_B File_C File_D |sort | uniq

cat File_A File_B File_C File_D |sort | uniq -u

cat File_A File_B File_C File_D |sort | uniq -u | while read line ; do file=`grep -l $line File*` ; echo "$file $line" ; done

cat HTML | grep -Po "(?<=<img src=\"http://example.com/images/I/).*?(?=\._.*.jpg\" style=\"display:none;\"/>)"

for PARTNAME in `cat LIST.TXT`; do mv *"$PARTNAME"* /NEWDIR ; done

cat L_z_expectation.dat | awk '{ print $1 "+0.0001"}' | bc

cat L_z_expectation.dat | awk '{ print $1 "+0.0001"}' | paste -sd+ | bc

cat Logone2.txt | sed "s/^name1=.*/name1=`date`/g" > newfile.txt

cat MASTER file >> file.tmp

cat 'STUDENT."7534"'

cat Stack.txt | uniq -w 11 > Result.txt

cat TextToAdd.txt FileToAddTo.txt > $$.tmp && mv $$.tmp FileToAddTo.txt

expected=$(cat UnitTests/expect-process-$process)

input=$(cat UsedBash.txt | tr '\n' ' ')

cat X | grep Y

$ cat `bash`

cat `cat logfilenames.txt` 

cat `echo file`

cat `find -name '*.as'` > onebigfile

cat `find /wherever/you/want/to/start/from -name name_of_file`

cat `ls -t _system*.log`

cat `which scriptname`

cat a.hex $f | ...

a=`cat a.txt`

a=$(cat a.txt)

$cat a.txt | awk -F "|" '{print $4}'

$cat a.txt | awk -F "|" '{printf("insert into table (id,value,status,starttime,endtime,number,phone,number) values (%d, %d, %d, %d, %d, %d, %d, %d) \n", $1, $2, $3, $4, $5, $6, $7, $8)}'

cat a.txt | awk 'END {print NR}'

cat a.txt | grep RG1|grep '+'| cut -d':' -f3-| cut -d'+' -f2 |sed -e 's/ //'

cat a.txt | xargs -I % sh -c 'command1; command2; ...'

cat access.* | awk '{ print $1 } ' | sort | uniq -c | sed -r 's/^[ \t]*([0-9]+) (.*)$/\1 --- \2/' | sort -rn

cat access_log | Select-String '^\s*(?:\w+\s+){8}503'

cat add | sed -rn '/FIRST_LINE_REGEX/{:a;N;/LAST_LINE_REGEX/{/SOME_REGEX/p;d};ba}'

cat aliases | awk '{$1=sprintf("%20s =",$1);print}'

cat aliases.sh >> ~/.zshrc

cat all upd | sort |uniq -c |grep '^1'

cat arglist.dos | tr -d "\r" | xargs -n2 echo cp

cat arglist.unix | tr -d "\r" | xargs -n2 echo cp

cat args.list | parallel --max-procs 8 python run.py

cat asd.xml | awk '{ x[NR] = $0 } END { for ( i=1 ; i<=NR ; i++ ) { if (x[i] ~ /<name>property2/ ) {x[i+4]="      <current>false</current>"}print x[i] }} ' > newfile.xml

cat avis.txt | awk '{print "vlc --playlist-enqueue "$0}' > updatedFile.txt

 cat | awk | head

cat >d.txt <<<a b

for i in `cat b` ; do if [ :$(grep $i a) != :$i ] ;then echo $i;fi; done

cat b.txt|grep -f a.txt

$ cat b1.sql b2.sql b3.sql > b_all.sql

$ ( cat b1.sql ; cat b2.sql b3.sql | sed -e '/^DROP TABLE/,/^-- Dumping data/d' ) > b_all.sql

for file in $(cat bad-stuff.txt); do mv $file /quarantine/$file.`date -u +%s%N`; done

BATTERY=$(cat battery.txt)

BATTERY=`cat battery.txt`

cat bigfile | parallel --pipe --files sort | parallel -Xj1 sort -m {} ';' rm {} >bigfile.sort

cat bigfile.sort | uniq -c | awk '{print $2 "\t" $3 "\t" $1*$4}'

cat bla.log |awk -F":" '{print $2":"$3":"$4}' | awk -F"," '{print $1}'

cat < in1.txt | cat < in2.txt

cat < `cat /etc/termcap`

cat chr{1..22}_from_6_new_mono.txt >merged

cat commandArguments.txt | xargs mycommand

{ cat commands.txt; sleep 1; } | telnet mailhost.25

$ cat config_file | xargs your_script.sh

$ cat config_file1 config_file2 | xargs your_script.sh

cat core | strings

cat crap.txt | awk '{ sub(/D/,"E",$3); A[NR-1] = $3; } END { print A[1] - A[0] }'

$ cat cvs_file | awk 'BEGIN{ FS=" *;"; OFS=";" } {$1=$1; print $0}'

cat data | awk '{sum+=$2 ; print $0} END{print "sum=",sum}'

foo@producer:~$ cat data | ssh foo@processor "cat > process_fifo"

cat data.dat | perl convert.pl

cat data.gz | gunzip_and_map_to_old.sh

cat data.json | underscore select '.description, .statistics first-child'| tr -d '[]'

data=$(cat data.txt)

values=`cat data.txt | awk -F '=' '{print $2}' | xargs`

cat data.txt | awk '{if ($2 == "arecord") print $2 " " $1 " " $3; else if ($2 == "cnamerecord") print $2 " " $1 "." $3 " " $3; else if ($2 == "mxrecord") print $2 " " $1 " " $3; else print}'

cat data.txt | while read x; do echo "$x"; sleep 0.7; done | batch_processor

cat data.xml | xmllint --format - | tee data.xml

cat datafile.dat | while read line; do echo $line | sed 's/ /\n/g' | sort | gawk '{line=line " " $0} END {print line}' ; done

cat dir/* > bigfile

cat directoryname/*|tr [:upper:] [:lower:]|sort -u > unique_elements.txt

cat done1 | parallel --eta wget

cat dump.file | grep -C 250 "Revision-number: xxxxx"

cat >> log.txt <<<"$(echo -e "$wd1\t$wd2\n\n")"

cat < `echo /etc/termcap`

cat example.txt | perl -pe 's/My favorite dog is\s+(\w+).*/\1/g'

cat f1 <(echo) f2 <(echo) f3 <(echo) 

cat ff.log | tr "\r" "\n" | tail -n 2 | head -n 1

cat fifo

cat fifo | nc -l 3000 | stdbuf -o 0 rev > fifo

foo="`cat file`"

cat file

DIR=$( cat file )

cat file | awk '$2 == "qux" { print $1 } $2 != "qux" { print $0 }'

cat file | awk -f p.awk

cat file | awk ...

cat file | awk 'length($0) > 120'

cat file | awk '{ if ($2 == "qux") {$2 = ""}; print }'

$ cat file | dos2unix | tr '\n' '\r' | sed 's,\(.*</div>\).*,\1,' | tr '\r' '\n' | unix2dos

cat file | grep '\(.*"48"\)\{5\}' | grep -v '\(.*"48"\)\{6\}'

cat file | grep '\(.*"48"\)\{n\}' | grep -v '\(.*"48"\)\{n+1\}'

cat file | grep apple | python -c "for line in __import__('sys').stdin: print line.replace(\"apple\", \"orange\"),"

cat file | grep pattern

for i in `cat file`;do ln -s $i;done

cat file | while read a; do date --date=$(echo "$a" | tr -d '%') +"%x %a"; done

cat file | while read a; do echo $a; done

cat file | sed -r ':a;N;$!ba;s/((^|\n)([^,]+,){0,2}[^,]+)\n/\1/g'

cat file | sed '/^--/d'

cat file | sed 's/  *qux *$//'

cat file | sed 's/%/%%/g' | while read -r line ; do printf "${line}\n" ; done | sed 's/\\ / /g'

cat file | sed s/://g

cat file | sed 's/T/\ /g' | sed 's/-07:00//g'

cat file | sed "s/^[0-9]*//g;=;" | sed -n "N;s/\n//g;p"

cat file | tee > file

cat file | tr ' ' '\n' | tr -d , 

 cat file | tr ',' '|' | awk -F '|' '{ line=""; for (i=1; i<=NF; i++) {if ($i != "" && list[NR"@"$i] != 1){line=line $i "|"}; list[NR"@"$i]=1 }; print line}'

cat file | tr -d "\r" | while read line ; do echo $line ; done

cat file | tr -s ' ' | sed 's/^\(.*\)$/INSERT INTO table(l_colour, l_price, l_type, l_in_date) VALUES(\1);/'

cat file | xargs -L1 -I db mysqldump db > db.sql && cat file; gzip *.sql

cat file | xargs -L1 -I db mysqldump db > db.sql && cat file | xargs -L1 -I db gzip database.sql

cat file-$i > new_file_part_1

cat file-$i >> new_file_part_1

cat file-{2..10} >> $op    #the '>>' adds to the end of file...

cat file.1 file.1 file.2 | sort -n | uniq -u | cat > file.3

cat file.asm | perl script.pl

cat file.csv | sed "1,2d;10d;12d;28,35d" > file2.csv

$ cat file.html | grep -o -E 'href="([^"#]+)"' | cut -d'"' -f2 | sort | uniq

cat file.html | php -r "echo strip_tags(file_get_contents('php://stdin'), '<a>');" > removed_tags.html

cat file.html | sed -e :a -re 's/<!--.*?-->//g;/<!--/N;//ba'

cat file.txt # all file descriptors are pointing to the terminal where you type the      command

VAR=$(cat file.txt)

F=`cat file.txt`

cat file.txt|awk '{for (i=1;i<=NF;i++)if($i==-1) print i}'

cat file.txt file2 > _tmp && mv _tmp file2

cat file.txt | grep -oP "(?<=string1)(\d.*)(<=$var)"

COMPANY_NAME=`cat file.txt | grep "company_name" | cut -d '=' -f 2 | sed 's/;$//'`

cat file.txt | java myProgram

cat file.txt | perl -pe 's/one/1/'

cat file.txt | while read line; do chmod 777 "$line"; done

 cat file.txt | sed -e "s/  */ /g"

cat file.txt | sed -e 's/"\([^"]*\)"/`\1`/g' | sed '/"/s/`/\"/g' | sed -e 's/`\([^`]*\)`/``\1'\'''\''/g'

cat file.txt | sed -e 's/"\([^"]*\)"/``\1'\'\''/g' | sed '/"/s/``/"/g' | sed '/"/s/'\'\''/"/g'

cat file.txt | sed -e 's/, /\'$'\n/g'

cat file.txt | sed -e 's/\([^|]*\)|\([^|]*\)|\([^|]*\)|\([^|]*\)|/insert into table set date-time=\1, process-name=\2, thread-id=\3, sequence-num=\4, /' -e 's/,[^=]*,/,/g' -e 's/ \([,=]\)/\1/g' -e 's/\([,=]\) /\1/g' -e 's/\([^,]*\)=\([^,]*\),/\1="\2",/g' -e 's/"[^"]*$/";/' | mysql dbname

$ cat file.txt | sed -r 's/#([\t]disutil_screening[\ =0-9\.;]+# favorable)/\1/'

cat file.txt | sed '/^P/d'

cat file.txt | sed 's/, /\n/g'

cat file.txt | sed "s/^.*\([0-9]\{13\}\).*/date -d @\1/" | sh

cat file.txt | ssh user@localhost 'cat > file.txt'

cat file.txt |  tr "\"' " '\n' | sort -u

cat file.txt |  tr "\"' " '\n' | sort | uniq -c 

cat file.txt | tr -d " \t\n\r" 

cat file.txt | tr -d '\r' | awk '{print $NF $1}'

cat file.txt | your_command

cat file.xml | sed -ne 's/<f:facet[^>]*>//;s/<\/f:facet>//p'|grep Name

cat file1 >> file2 

cat file1 file2

cat file1 file2 >> file3

cat file1 file2 file3 file4 | sort | uniq -c | awk '$1==4 {print $2}'

cat file1 file2 | sort -k 2 > sorted

cat file1 file2 | sort -u >combined && mv combined file2

cat file1|grep -vE '^$'|while read min; do cat file2|while read line; do val=$(echo $line|cut -d, -f1); if [ $min -lt $val ]; then short_country=$(echo $line|cut -d, -f3); echo $min: $short_country "($val)"; break; fi; done; done

{ cat file1; sed '1d' file2; } > file.csv

$ cat file1.txt - < file2.txt

cat file1.txt

cat file1.txt < 0

(cat file1.txt; cat file2.txt) | nl

cat file1.txt file2.txt > file3.txt; mv file3.txt file2.txt

 cat file1.txt | xargs -i sh -c 'ls  /projects/analysis7/{}/meta_bwa/hg19a/*varFilter' 2>/dev/null

( cat file2  ; comm -23 file1 <(cut -d';' -f1 file2) | sed 's/$/;cost1;cost2;cost3;cost4;0/' ) | sort

cat - file2.DAT

cat file2.DAT -

cat fileA fileB | sort -t$'\t' -s -k1,1 | awk -f script.awk

cat fileName | xargs touch

$ cat file_1 file_2 ... file_x

cat file_full_of_files_names | xargs touch

  cat file_in | awk 'BEGIN{FS=":"}NR>1{print $1,$2}' | awk '{print $1":"$2,$1":"$2,$0}' | cut -d " " -f 3 --complement > file_out

myVar=$(cat file_name.txt|grep ':*\.,')

myVar=$(cat file_name.txt|grep ':*\.,'|./x.pl)

cat file_with_new_lines file > newfile

cat fileinput | parallel --colsep '\t' myprogram {1} {2} {1}_vs_{2}.result

cat filelist | while read i; do grep "pattern" "$i"; done

cat filename | awk '{if($1==$1+0 && $1<THRESHOLD_VALUE)print $1}' | sort -n

cat filename | command

cat filename | sed "s/$/ `date`/"

cat filename | sed 's/^..\(.*\)$/\1,/'

cat filename | sed 's|[^0-9]*||'

cat filename | sed 's|[^0-9]||g'

cat filename | sed 's|[^0-9]||g' | sort | uniq

cat filename | xargs -n 1 ./download

cat filename.sql | mysql -u username -p # type mysql password when asked for it

cat filename.txt | awk '{ print $2 $4 }'

cat fileneed2bread >> output.txt

cat filepaths | parallel -j 30 grep -Pl '\d+,\d+,\d+,\d+' {} > FoundPatternsInFile.out

for f in `cat files.txt`; do mv $f "${f//:/_}"; done

cat files.txt | xargs grep keyword

FOO=$(cat foo)

cat foo | awk -F "," -f awkfile

cat foo | awk 'BEGIN{FS="|"} {print $2 " " $1}' 

cat foo | awk '{ for(i=3; i<=NF-3; i++) { printf $i "_"; } printf $i "\n";  }'

v=`cat foo | grep "^[^<]"`

cat foo  | sed -e 's/^[[:digit:][:space:]]*//g' -e 's/[[:space:]]*[[:digit:][:space:]]*$//g' -e 's/ /_/g'

cat foo  | sed -e 's/^[0-9 ]*//g' -e 's/ [0-9 ]*$//g' -e 's/ /_/g'

$ cat foo | sed 's/[^a-zA-Z]//g'

cat foo.c | sed '/^\s*$/d' | wc -l

cat foo.pl | sed '/^\s*#/d;/^\s*$/d' | wc -l

cat foo.py | xargs --null -I % python -c %

cat foo.txt | ( head -1; tail -1)

{ cat foo.txt; node bar.js; } > out.txt

cat foo.txt | sed -e 'N;s/\n//'

$ cat foo.txt | uniq -c

cat "func_list" | sed "s#//.*##" > "file_list"

cat giantfile.txt | parallel -j 8 --pipe --block 4000000 myimport

cat hamlet.txt | words

for i in $( cat hc.ls1 ) ; do cut -d "," -f 2,3,6 $i > $i.tx2;done

for f in *.xml; do cat header $f footer > tmp && mv tmp $f; done

for i in *.htm; do cat header.txt $i footer.txt > new-$i; done

cat headerfile myfile trailerfile > newfile

cat hello.py | ssh user@192.168.1.101 python -

cat hosts | while read host; do echo "$host: $(ssh $host uptime)"; done

cat hosts.txt | xargs -I %REPL ssh user@%REPL

cat html | sed -n 's/.*<img src="\([^"]*\)".*/\1/p'
for i in `cat i.txt`; do wine ~/run.exe $i.asc 2>> out.asc; done

cat id_dsa.pub >> .ssh/authorized_keys

cat image.jpg | convert -strip - - | md5sum

cat image.jpg | exiftool -all= - -out - | md5sum

cat image.jpg | image.sh

cat image.png | impbcopy -

cat in.txt > out1.txt | cat > out2.txt

cat in_file | tr -d '(' | tr ')' '\n' > out_file

cat in_file | tr -d '()' > out_file

cat infile > outfile1 > outfile2

cat infile > outfile

cat infile.txt | tr -d "[:space:]" | fold -80

cat input | perl -ne 'print join " ", sort split /\s/ ; print "\n"' > output

cat input | sh mysort.sh

cat input | sort -u -n

cat input | sort | uniq -c | awk '{print $3 "\t" $4 "\t" $1}'

cat input | xargs -L13 -d'\n' | sed -e 's/ /, /g'

cat input$1 | ./prog$1 > output$1 && [ "$2" != "" ] && diff output$1 expected$1

cat input-one input-two input-n > output

cat input.files | xargs grep -w HTC_One

cat input.html | sed -r 's/<script([^<]|<[^\/]|<\/[^s]|<\/s[^c])*<\/script>|<style([^<]|<[^\/]|<\/[^s]|<\/s[^t])*<\/style>|<[^>]*>//g'

cat input.html | sed 's/<script.*<\/script>\|<style.*<\/style>\|<[^>]*>//g'

cat input.svg | grep translate | sed 's/^.*translate(.*,\(.*\)\..*) scale.*$/\1/'

(cat input.txt; cat example.txt | awk '{ print "      "$0}') > output.txt

cat input.txt | grep -e "^192.168.1.102" > output.txt

cat input.txt | grep -e "^192\.168\.1\.102" > output.txt

cat input.txt | perl -lne '($a,$b,$c,$d,$e) = /^([^;]+);([^;]+);([^;]+);([^;]+);([^;]+)$/g; $b =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; $d =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; print "$a;$b $c;$d $e";'

$ cat input.txt | sed 's/^[ \t]*//;s/[ \t]*$//' > output.txt

cat input.txt | ssh clrg@192.168.2.22  "sh -c 'cd /path/to/shell/script; ./tokenize.sh'"

cat input3 | sed 's/\ct/^T/g'

cat input3 | sed 's/\o024/^T/g'

cat input3 | sed 's/\x14/^T/g'

cat input3 | sed 's/\x1b/^[/'

cat input_file | cut -f 1 | sort | uniq

cat input_file - | program

cat inputfile | grep "^t\:" | split -l 200

cat inputfile | sed 's/\(.\)/\1\n/g' | sort | uniq -c

cat inputfile.txt | while read line; do echo "$line"; done

cat ip.txt | awk '{if(index($4,$1)>0)printf("%s\n",$0);}'

cat ip_file.txt | tr '\n' ':' | sed "s/control_data\([^}]*\)}//g" | tr ':' '\n'

$ cat ips | xargs -n1 ping -c 2

$ var=$(cat isbndb.sample); echo "$var" | wc -l

cat largefile | awk 'NR >= 10000  && NR <= 100000 { print }'

cat largefile | cut -d '\t' -f 10000-100000

cat largefile.tgz.aa largefile.tgz.ab | tar zxf -

result=`cat launched | grep MyTest`

cat lines | sort -k 3

odd=0; for i in `cat list | cut -d":" -f2`; do if [ $odd -eq 0 ]; then echo -ne $i; odd=1; else echo $i; odd=0; fi; done

cat list of all files | awk '{print "Type "$4, $5}'

cat list | parallel -j5 [ {#} -lt 6 ] \&\& sleep {#}\; upload {}

cat list | xargs -n 2 cp

cat list-of-entries.txt

cat list_part* | sort --unique | wc -l

x=1; for y in $(cat lista.txt); do mv $y filename$x; let x=$x+1; done

cat log | awk '/[START_A]/,/[END_A]/'

$ cat log | perl -pe 's/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/`host \1`/ge'

cat log | sed -e 's/"\([^:]*\):\([^"]*\)"/"\1" "\2"/'

$ cat log | sed -r 's/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/example.com/g'

$ cat log | sed -r 's/10\.224\.0\.2/example.com/g'

cat log | sed 's/where mytable\.s_id=[0-9]\+/where mytable.s_id=?/g'

cat logFile | egrep -v '(firstString)|(secondString)|(thirdString)|...|(nString)'

cat logFile | grep -v "Type: Error"

cat logfile | awk '{print $1 " " $2}' | sed 's_\.[0-9]*__g'

cat machinesList.txt | xargs -i ssh {} cat log.txt

cat main.properties | awk -F= '{print "s/\\${" $1 "}/" $2 "/g"}' | sed -f - 1.properties

a=$(cat mapping.txt | grep $1 | awk '{print$1}')

cat my.log | grep -o "GET /service1/api." | sort | uniq -c

i=$(cat "my.log" | grep -w '$line' | wc -l)

cat my.xml | grep -A 1 '^<a>'

cat my_bash_file.sh | sed 's#/opt/Test/conf/server#/opt/Test/conf#g'

cat my_code.rb | node my_code.js

$ cat my_fifo

my_var=$(cat my_file)

cat my_smaller_files.txt.* > my_really_big_file.txt

cat myfile > fifoin

cat myfile | sed 's/^\([A-Z].*\)$/\U\1/'

cat myfile.txt | grep MyKeyword | wc -l

cat myfile.txt | perl -ne 'BEGIN...'

$ cat mysig | tee -a F*

cat "name.txt" | sed 's/One/Two/1' > "temp.name.txt" && mv "temp.name.txt" "name.txt"

cat named.local | grep zone | sed -e "s/^.*\"\(.*\)\".*$/\"\1\"/"

cat names.txt | xargs -I{} cp file.pdf "{}"\ file.pdf

cat new_dba_keys.pub | ssh -l root 10.224.1.16 "su - postgres -c \"cat >> ~/.ssh/authorized_keys\""

cat new_section.txt >> ngix.conf

$ cat nonexistantFile | echo ; echo "e: $? p: ${PIPESTATUS[@]}"

cat number.txt | sort -n | uniq -c | awk '{ print $2, $1 }'

cat nums | xargs -I ARG ./myscript ARG

cat nums | xargs -n1 -J ARG ./myscript ARG

cat nums | xargs -n1 ./myscript

cat old.file | sed 's%/var/www/%/home/www/%g' > new.file

cat one_mb{,}{,}{,}{,}{,}{,}{,} > 128_mb

cat optionsfile | xargs gcc

cat orig_filenames.txt | while read file ; do find /dest/directory -name "$file" ; done > output_file_with_paths 

( cat original.jpg ; dd if=/dev/zero bs=1024 count=1024 ) > bigger.jpg

cat original_list | wc -l

cat originalfile | tr -d "\r" > newfile

cat originalfile.txt | sed -r 's/,Fromdate[^\n]+//' | sed 's/,/\n/' | sed -r 's/$/\n\n' > nocommas.txt

$ cat output

cat output_* > output.all

cat p1.csv | sort -t "," -k2 | awk -F, '!x[$2]++'

cat | parallel --pipe --recend '===\n' --rrs do_stuff

cat passwords.txt | while read x ; do result=`./testpassword pass $x` ; echo -n "$x: $result" ; done

for file in `cat path.txt`; do gdalinfo $file || cp $file /data/temp; done

for file in `cat path.txt`; do gdalinfo $file || (echo $file && cp $file /data/temp); done

 cat path/to/your_text_file | sed 's/:50K.*:53B/:50KCREDIT:53B/g'

for pat in $(cat pattern.txt); do grep -i -m 5 $pat file.txt; done > out.txt

line=$(cat php.ini | grep -n 'Module Settings' | grep -o '^[0-9]*')

cat pounds.xml | sed -r 's/([A-Za-z]+)&\\?#39;([A-Za-z]+)/\1\\u2019\2/g'

cat prog |  ruby -ne 'puts $_.gsub(/{{{(.+?)}}}/) {  File.read $1 }'

cat prog | ruby -pe '$_.gsub!(/{{{(.+?)}}}/) { File.read $1 }'

$ cat query.sql | mysql -uroot -proot

cat regex.test | sed -r 's/([0-9]{3})/\1\./g' | sed -r "s/^0*//" | sed -r "s/\.0*/\./g" | sed -r "s/\.\.test.com//" | sed -r "s/\.\./\.0\./g"

cat report{1..80} > allreports.txt

cat result

cat results.txt | python -c "import re, sys; print ''.join(re.sub(r'.+(\d\.\d+)\.\n', r'\1 ', line) for line in sys.stdin)"

{ cat run; sed '1,2d' run%*; } > c

cat sample.txt | sed 's/.*\(\/namespace\/media\/.*-sync.xml\).*/\1/g'

$ cat - | sandwich header.txt footer.txt

cat script | bash -s 5

cat script.log | sed -n '/Name:/s/^.*Name:\([^)]*\)).*$/\1/gp'

cat script.sh | bash /dev/stdin arguments

cat script.sh | sed '/\015/d' >newscript.sh

cat script_file | rsh fooDNS bash

cat scriptname.sh | sed 's/\r/<CR>/'

cat server.clean.log | sed -e 's/^[0-9]*-[0-9]*-[0-9]* [0-9]*:[0-9]*:[0-9]* \[INFO\]  Connection reset$//g' > server.clean.log

cat server.log | sed -e 's/^[0-9]*-[0-9]*-[0-9]* [0-9]*:[0-9]*:[0-9]* \[INFO\]  Connection reset$//g' > server.clean.log

cat sha256sums.txt | sort | cut -b -32 | uniq -cd | sort -nr

cat somefile | awk '{$1=""; print $0}'    

cat somefile | awk '{$1=$2=""; print $0}'

cat somefile | grep example | awk -F '"' '{ print $2 }' | while read file; do cat $file; echo ""; done

 cat somefile | sed 's/,\([0-9a-f]*\)$/,0x\1,/'

after=`cat somefile.json | jq -c -r '.after[] + "; "'` | tr -d '\n'

cat sortedfiles.txt | xargs -n1 -i{} grep '^{}$' ngfilelist.txt

cat source | ssh user@host "cat >> /path/to/target"

cat statelist.txt | parallel --gnu python mypy.py 

cat states | sed '/./,/^$/!d'

cat stats.txt | gnuplot -p -e 'set datafile separator " "; plot "-" using 1:2 with lines'

cat stuff.py

cat syscall_list.txt | grep f89e7000

$ cat t.sh

cat temp | sort -n | uniq -c | awk '{ print $2, $1 }' > temp2

$ cat temp.txt | xargs -0 date -d

cat temp1 | awk 'email="$1"; transaction="$2"; ccreceipt="$3";'

cat template.txt | sed -e "s/\${i}/1/" -e "s/\${word}/dog/"

for line in $(cat test); do echo ${line//*::}; done

cat test | while read a b c d; do echo "$a:$b:$c:$d"; done

cat test | sed -e "s/\(\${[A-Z]*}\)/`eval "echo '\1'"`/" > outputfile

$ cat test.csv | tr '\n' ',' | tr -d ' '

cat test.data | awk 'BEGIN{FS="/"}{print $5}'  | sed 's/\..*//g'

cat test.html | aspell list f- sgml --lang en --extra-dicts=/home/test/dictionary.test --add-sgml-skip={nospell,literal,screen} | sort | uniq

$ cat test.html | awk 'sub(/<li[^>]*><a[^>]*>/,"")&&sub(/<\/a>.*/,"")'

$ cat test.html | gawk '/<li[^>]*><a[^>]*>(.*?)<\/a>.*/&&$0=gensub(/<li[^>]*><a[^>]*>(.*?)<\/a>.*/,"\\1", 1)'

cat test.json | jq '.Project[0].projectName.tag[0].tagName |= .+ ["path2"] | .Project[0].projectName.branch[0].branchName |= .+ ["path2"]'

cat test.json | perl -MJSON -MXML::Simple -e 'print XMLout(decode_json(do{local$/;<>}),RootName=>"json")'

cat test.log | tr '[\000-\011\013-\037\177-\377]' '.' | grep whatever

cat test.txt | cd /folder/p/`awk '{print substr($0,0,1)"/"substr($0,2,1)}'`

cat test.txt | perl -ne 's/"NATIVE\/[^"]+(?<!\.XLS)(?<!\.XLSX)"/""/g; print;'

cat test.txt | perl -ne 's/"NATIVE\/[^"]++(?<!\.XLS)(?<!\.XLSX)/"/g; print;'

cat test.txt | while (while read LINE && [ "$LINE" ]; do echo "$LINE"; done) | (read HEADER && (echo "$HEADER"; sort; echo)); do :; done

for i in `cat test.txt | sed -e "s/\r//g"`; do find -name $i; done

 cat test.txt | sed -r 's/^.*-[0-9]{4}\s//'

cat test1.txt | xargs -I{} cp {} ./Folder

cat test2 | awk '{ if ( $0 ~ ".*Zend.*" ) { print $0 "a" } else if ($0 ~ ".*Yii.*") { print $0 "b" } else if ($0 ~ ".*CI.*") { print $0 "c" } else { print $0 } }'

cat test_dump.txt | perl -pe "s/[^(\);INSERT INTO)]\n/\\$1\\n/"

cat testfile | awk '{ print length, $0 }' | sort -n | cut -d" " -f2-

cat testfile | grep  '^\S' 

cat text > newtext && mv newtext text

for line in `cat text.txt`; do grep $line input.txt >> output.txt; done

 cat text.txt | while read line; do grep "\<${line}\>" input.txt >> output.txt; done

cat text.txt | while read line; do grep "$line" input.txt >> output.txt; done

cat text.txt | while read line; do grep "$line" input.txt >> output.txt; done; cat output.txt | sort | uniq > output2.txt

cat text.txt | sed 's/\./.\n/g' | grep pattern

cat text.txt | sed 's|[,.]||g' | tr ' ' '\n' | sort | uniq -c

cat text.txt | tr -s ' ' | cut -d ' ' -f 4

cat textfile > /dev/tcp/HOST/PORT

    cat textfile | grep -o "target_string.*"

cat thefile | while read line; do printf "%d %s\n" "0x$line" "$line"; done | sort -n | awk '{print $2}'

cat this_file | sed ':a;N;$!ba;s/\n\([a-z]\)/ \1/g' > that_file

cat tmp | sed 's/\bfi[^ ]*/(&)/g'

cat tmp.sh

cat to_be_removed.txt | xargs rm -f

cat - | tr a-z A-Z | tr A-Z a-z

 cat tst | xargs | grep -o '<\s*C\s*o\s*d\s*e[^>]*>' | wc -l

cat t{1..1500} > all

for x in $(cat unwanted-lines); do x="${x//$'\r'}"; sed -i "/$x/d" test-domain; done

ID=$( cat 'usernum.txt' )

cat values.properties  | grep "=" | cut -d "$" -f2 | awk -F "=" '{print "s/$"$1"/"$2"/g "$1".txt"}' | xargs -n2 sed -i

cat - | wc -l

$ cat wget.html | grep -e 'http:.*jpg' |sed -e 's/^.*\(http:.*jpg\).*$/\1/g'

cat working-dir/*OUTPUT

cat working-dir/*OUTPUT >> result_file.txt

cat www-backup.tar.*|gunzip -c |tar xvf -

cat x* > originalFile.tar

cat x1.tmp|gawk -F\; '{"base64 -d <<<\""$2"\""|getline $3;close("base64 -d <<<\""$2"\"")}{print $1,$3}'

cat xyzzy

cat your-html | sed -e 's/\<input.*type="text".*\>//g' | sed -e 's/\<input.*type="password".*\>//g' > new.html

cat yourFileWithTheLines | sort | uniq -d

cat your_file | sed "s/default_color\ .*/default_color\ $VAR/"

cat your_file | sed 's|</b>|-|g' | sed 's|<[^>]*>||g' > stripped_file

t2val=$(cat your_file_with_numbers | tr '\n' ',' | sed 's/,$//')

cat yourfile.txt | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]'

cat yourscript.sh | tr -d '\r' >> yournewscript.sh

cat ~/.bash_history

cat ~/.bash_profile >> ~/.zshrc

cat ~/.profile | openssl des3 -e -a -salt -pass pass:asdf -out /tmp/output.txt

cat ~/Documents/weather.dat |awk 'BEGIN { FS = "[\"]" } ; /yweather:condition/ { print $2 } '

path=`cat ~/filepaths/$x`

cat ~/test/File01 >> ~/dustbin/File01

catalina version

catdoc_cmd = ['catdoc -w "%s" > testing.txt' % name]

cc -Wno-implicit-int -I. -dynamiclib -o libmarkdown.dylib mkdio.o markdown.o dumptree.o generate.o resource.o docheader.o version.o toc.o css.o xml.o Csio.o xmlpage.o basename.o emmatch.o github_flavoured.o setup.o tags.o html5.o flags.o 

cc -o redelimit redelimit.c

cc -o reserve reserve.c && ./reserve

cc -o size_of size_of.c

cc -o size_of size_of.o

ccc

ccc

ccontrol stop instancename restart quietly

--() { cd -; }

cd -

cd [file dirname $argv0]

$ cd !!:$:h

$ cd !$:h

cd \""$d"\"

$ cd '"/cygdrive/c/Users/my' 'dir/Documents"'

DIR="$( cd "$( dirname "$0" )" && pwd )

cd $(<fold.txt)

cd "$(bundle show gem)"

cd $(cut -c4- <<<$input)

cd "$(dirname "$(find . -name file.xml 2> /dev/null)")"

cd "$(dirname "$(readlink -e "$BASH_SOURCE")")" && ABSPATH=$(pwd) && cd - > /dev/null

cd "$(dirname "$0")"

cd "$(dirname "$0")"

cd "$(dirname "$0")"

ABSPATH=$(cd "$(dirname "$0")"; pwd)

cd "$(dirname "$BASH_SOURCE")"

cd $(dirname $(find . -name file.xml 2> /dev/null))

cd $(dirname $(which brew))

cd $(dirname $(which oracle))

cd "$(dirname $(which oracle))"

cd $(dirname $(which ssh));

SCRIPT_DIR=$(cd $(dirname $0); /bin/pwd)

function cdfoo() { cd $(dirname `which $@`); }

cd $(dirname `which python`)

cd $(dirname relative/path/to/file)

cd "$(echo "$dir" | sed -e 's:\\\\fmg_cifs1\\Dept_Shares:/Volumes/Dept_Shares:')"

cd $(echo $RED_INSTANCE_NAME | tr -d '\r')

cd $(echo -e "$input" | cut -c4-)

cd $(find . -name Subscription.java | xargs dirname)

cd $(find . -name test -type d)

cd "$(find . -print0 | sort -z | tr '\0' '\n' | tail -1)"

cd $(getent passwd foo | cut -d: -f6)

cd $(git rev-parse --show-cdup)

cd $(mkapp createddir)

cd "$(node app)"

cd $(pwd)

cd "$(sed -e 's:\\\\fmg_cifs1\\Dept_Shares:/Volumes/Dept_Shares:' -e 's: :\ :g' -e 's:\\:/:g')"

cd $(which oracle)

cd "$(xsel)"

cd "$@" || exit 1

cd "$ARCHIVE_PATH/tmp"; tar -cvzf  "$ARCHIVE_PATH/$3_$fileYear$fileMonth.tar.gz" *

cd "$Apps"

cd $CENTRASITE_HOME

cd "$DIR"

cd "$DIR" && git add "${TARGET_FILES[@]}" && git commit -qm "Current tag $TAG$SUFFIX."

(cd $DIR; tar -vc *) > file.tar

cd $DJANGODIR

$ cd "$DOCS"

$ cd $DOCS

$ cd "$FUBAR"

cd $HOME

cd $OGRE_ANDROID_ROOT

cd "$PATH"

cd $SOME_DIR

cd "$TAG"

cd "$TARGET"

(cd $TRUNK; $SERVERCOMMAND &)

cd $WORKDIR

cd "$bin"

cd "$c"

cd "$d"

gr=$(cd $d/EmotMRI/firstfour/ && ls s* | wc -l || echo failed)

( cd $dir && cmd )

list="10 12 13 14 18 24"; for dir in $list; do cd "$dir"; do_something "foo $dir bar"; done

cd $dir; ls -1s --block-size=1 is*.* | awk '{print $2"\t"$1}'

( cd $dir; ~-/cmd)

filename=$(cd $directory; basename "$(find . -type f)")

cd $env:MYPSPATH

cd "$f"

( cd $folder; for i in *; do echo "$i"; done )

for foldername in folder/*; do cd "$foldername"; for filename in *.txt; do ../../test "$filename" > output_"$filename"; done ; cd ../..; done

cd "$myFold"

cd "$src" && cp -rf . "$tgt"

cd "$umusic"

cd "${!var}"

cd "${0%%/$(basename "$0")}"

function shorter() { cd "${1%/*}"; }

cd "${DESTINATION_FOLDER/#~/$HOME}"

cd ${PWD%.*}

cd ${PWD/a/another}

cd ${PWD/tom/richard}

cd ${scanresult}/${tempdir}

cd %APPDATA%

cd %USERPROFILE%\Documents\DropFolder

dir=$( cd -P -- "$(dirname -- "$0")" && pwd -P )

cd -P xyz

src=$(cd ..&&pwd)

( cd ../.. ; pwd )

(cd ../dir1/; ./Quack.sh)

cd /Developer/Platforms/iPhoneOS.platform/DeviceSupport/4.2.1\ \(8C148\)/Symbols

cd "/Developer/Platforms/iPhoneOS.platform/DeviceSupport/4.2.1 (8C148)/Symbols"

cd "/Volumes/180 gram/Uncompressed/"

cd /d %Pathname%

cd /d C:\TargetFolder

cd /d C:\leads\

foo() { cd /d/work_space_for_my_company/project/code_source ; }

cd /dir && ls > filename

cd /folder/with/data; tar cvz | ssh target 'cd /target/folder; tar xvz'

(cd /home && php /home/testfile.php >> /home/logFile.txt)

(cd /home/inst1; ls *.txt *.wmv *.odt >> /home/inst1/EXEofThurs9.txt)

( cd /home/jars; java -jar /home/jars/jarfile.jar )

cd /home/my_home; ruby -x test.rb

cd /home/path/to/current >/dev/null

cd "/home/piperoman/Librerias/Ogre" "Android" "SDK"

cd /home/username/files

cd /mail; find . -type f | cpio -pvdmB /home/username/mail

(cd /mail; find . -type f | tar -cf - -F - ) | (cd /home/username/mail; tar -xf - )

(cd /mail; tar -cf - . ) | (cd /home/username/mail; tar -xf - )

cd /media/movies && for dir in */; do mkdir "/tmp/movies/$dir"; done

(cd /path/to/file; ls -l *.*.*)

(cd /path/to/project && exec npm root)

cd /scratch/ ; `nohup sh xyz.sh>>del.txt &` ; exit

(cd /sys/class/net/;grep -T '' */{addre,o}*|sort)

cd /tmp

cd /tmp; echo test > testinput; diff -u <(strace -s250 -f tar -cf /dev/null testinput 2>&1) <(strace -s250 -f tar -cf testoutput testinput 2>&1) | less +'/open\("testinput"'

cd /tmp ; ls *.txt | grep -n ""

cd /tmp ; ls *.txt | nl

{ cd /tmp && nohup sleep 10; } >/dev/null 2>&1

( cd /tmp ; pwd ) ; pwd

cd /tmp ; touch mickymouse

cd /tmp && touch mickymouse

cd "/tmp/Archive.xcarchive/Products/Applications/"

( cd /tmp/r ; xterm -e $SHELL -l -c "irb ; $SHELL" )&

cd /usr/local/src/ && cp a b c ../d

cd /usr/local/src/netqmail-1.06 && make setup check

(cd /usr/share/locale/; stat $(en_US/LC_COLLATE))

(cd /usr/share/locale/; stat $(readlink en_US/LC_COLLATE))

cd /vagrant && /path/to/grunt build

(cd /var/lib/judgem/records/ && ls)

cd A; xargs -a ../list.txt cp --parents -t ../B

cd "C:\Program Files\MySQL\MySQL Server 5.0\bin"

cd C:\Users\Username\Dropbox\Websites\2014\Projects\ProjectName

cd Documents/Programing/HelloWorld/

(cd SOME_PATH && exec_some_command)

cd "Visual Studio 2012"

cd Visual\ Studio\ 2012

$ cd "Windows XP IE6"

cd `dirname $0`

cd `echo "$1" | cut -f 2 -d '/' | cut -f 1 -d '.'`

cd `find . -name test -type d`

cd `ls -rd folder_*`

(cd `pwd | cut -d / -f 1-4`; your-command-here)

cd `pwd`

cd `pwd`

cd `qstat -f $queuenum | grep -Po '(?<=PBS_O_WORKDIR=).*(?=,)' `

cd `which oracle`

(cd a && find -type d ; cd ../b && find -type d) | sort | uniq -d

(cd a && find -type d ; cd ../b && find -type d) | sort | uniq -d | grep '^[^/]*/[^/]*$'

(cd a && git ls-files -z) | (cd b && xargs -0 git add)

( cd ; bash )

cd c:\xyz\mysql\bin

cd capybara-webkit && gem build capybara-webkit.gemspec

(cd dir1; scp -r . remote:/newfolder)

cd folder; ls *.txt

cd folder && tar xvf "$f" && cd -

(cd gitweb; git archive --prefix=git-gitweb/ master .) | tar tf -

 cd here\ I\ go 

 cd "here I go" 

 cd here" I "go

 cd "here\ I\ go" 

cd histogram${i}data

cd home

cd my_directory/ && tar -zcvf ../my_dir.tgz . && cd .. 

cd myproject\bin\Release

cd mysubprojectpath && git pull --ff-only && cd - && git add mysubprojectpath

cd new-files ; find . -exec rm -rf path/to/other-directory/{} \;

cd pqr

(cd some/vagrant/folder; vagrant init)

cd src-dir; find . -type f -size +100000 | parallel -v ssh fooserver mkdir -p /dest-dir/{//}\;rsync -Havessh {} fooserver:/dest-dir/{}

cd target/path && { curl -O URL ; cd -; }

cd {x[-1]}

cd ~

cd ~ && node week2/part1.js

cd ~/

cd ~/Documents/

cd ~/path-to/shell-script

prefix() { cd ~/path/prefix"$1"; }

(cd ~/src/devtools/addon-sdk && source bin/activate)

cd ~/src/devtools/addon-sdk && source bin/activate && cd -

$> cd ~LBIN

cdo remapbil,r720x361 $ofile1 remap$R.nc

cdrm ~/Dropbox/myproject/

cdwin "J:\abc\def"

cdx.exe > c:\windows\abc.zip

chain_exists foo || create_chain foo ...

change require 'rails_helper' to require 'spec_helper'

changeThat foo this "mow the lawn"

change_column :table_name, :column_name, :float

char * arrayOfCommands[] = {"ls", "-l", NULL};

char * arrayOfCommands[] = {"wc", NULL};

char * path_list_[2] = { "lib/sun", "lib/matlab" };

char **args = NULL;

char **cmdsHistory;

char **paths = &argv[optind];

char *arg[MAX_ARG_LENGTH];

char *cmdsHistory[10]; //or any desire number/macro

char *string1

char const *c = "\phello, world!";

char line[PATH_MAX];

char path[1024];

char script = "script.sh";

char str[1] = {'\0'};

char* block1_arg_Filename = argv[1];

char* charString = argv[i+1];

char-write-cmd

char2=b, char4=d

chcp 1252

chcp 65001

chcp 65001

check $1

check = $(du -sb /home/chris/Dropbox/VideoMonitor | cut -f1)

checkExist 1.txt 2.txt "echo $1 | awk '\$5 <= 10 {print \$3, \$4}'" "echo $2 | awk '\$5 <= 10 {print \$3, \$4}'"

checkFileForString "$currentFile" "$currentRegex" "$newText"

checkemp.sh *

chflags hidden ~/bin

child >/dev/null 2>&1

child &>/dev/null

child_script "${args[@]}"

chmod +x *.sh jmeter jmeter-server

chmod +x ./clean.sh

$ chmod +x ./x.sh

chmod +x "/Users/Shared/Jenkins/Home/my_scripts/run_jenkins.sh"

chmod +x /etc/network/if-up.d/your-service

chmod +x /home/ahmed/Desktop/run.sh

chmod +x /home/myscript.sh

$ chmod +x /home/user/scripts/my_script.sh 

chmod +x /usr/local/bin/dowatch

chmod +x /usr/local/myproject/*/bin/* 2>/dev/null

chmod +x abc.sh

chmod +x arbitraryname

chmod +x backup.sh 

chmod +x behead.sh

chmod +x contactdetails

chmod +x create_replica_set.sh

chmod +x deletion.sh

chmod +x delhttp.pl

chmod +x delhttp.sh

$ chmod +x download.sh

chmod +x example.sh

chmod +x filename

chmod +x filename

chmod +x foo

chmod +x hello

chmod +x hello-world

chmod +x hello.sh

chmod +x hook.sh

chmod +x mc.sh

me@somewhere$ chmod +x mode2.sh

chmod +x myScript

chmod +x my_script.sh

chmod +x myfile.coffee

chmod +x myscript

$ chmod +x myscript.command

chmod +x myscript.py

chmod +x myscript.py

chmod +x myscript.sh

chmod +x myscript.sh

chmod +x myscript.sh 

 chmod +x proc_${i}.sh

chmod +x queue

chmod +x ruby_script.rb

chmod +x run.sh

chmod +x script.sh

$ chmod +x script.sh

chmod +x script_name.py

chmod +x shellscript.sh

chmod +x test.sh

chmod +x test.sh

chmod +x test1.sh

chmod +x testscript.csh

chmod +x your_file

$ chmod +x your_file_name.rb

chmod +x yourscript

chmod +x ~/bin/tmux_renum

chmod +x ~/test/main.pl

chmod --reference version2/somefile version1/somefile

chmod -R +a "user:icadmin inherited allow...." "$DEST"

chmod -R +r directrory

chmod -R +x android-sdk-linux

chmod -R --reference=. .

chmod -R 664 *.html

chmod -R 770 dir_path

chmod -R 777 *

chmod -R 777 '/Users/Anuraag/.cordova/lib/tmp'

chmod -R `stat -c %a .` .

chmod -R g+w /var/www/test 

chmod -R g=u apps

chmod -R o=g *

chmod -x $rvm_path/hooks/*

chmod -x $rvm_path/hooks/after_use_textmate

chmod 444 "${HOME}"/some_specific_file

chmod 444 "${HOME}"/your_app_dir/*

chmod 600 option_file

chmod 600 ~/.my.cnf

 chmod 644 "$0"

chmod 644 org.jenkins-ci.plist

chmod 664 *.html */*.html */*/*.html

 chmod 666 /dev/ttyS1

chmod 700 /path/to/script.sh

chmod 700 foo.py

chmod 755 \$

chmod 755 $(<file.txt)

chmod 755 $PWD/sqlcronprocedure.sh

chmod 755 $cronscript

chmod 755 /etc/init.d/sendshtmail

chmod 755 /path/opt/apache-ant-1.8.2/bin/ant

chmod 755 /var/www/vhosts/mydomain.com/new_folder

chmod 755 file.bash

chmod 755 foo.sh

chmod 755 housekeeper.sh

chmod 755 lks.sh

chmod 755 myscript

chmod 755 myscript.sh

chmod 755 scriptname.sh

chmod 755 sendsms.php

chmod 770 folder_name

max@serv$ chmod 777 .

chmod 777 /home/administrator/*

chmod a+rx example.sh

chmod a+x "/path/to/procscripts/"*

chmod a+x /path/to/the/script

chmod a+x /usr/local/apache-maven/apache-maven-3.1.1/bin/mvn

$ chmod a+x ComputeDate col printdirections

chmod a+x autologin.sh

chmod a+x configure

chmod a+x fakeswap.sh

chmod a+x gemmove

chmod a+x my-remove.sh

chmod a+x node_modules/.bin/tsc

chmod a+x program

chmod a+x temp_check.sh

chmod g+s file

chmod g+w .[^.]* ..?*

chmod g+w file

chmod o-w /Users/larson

chmod o-w yourfile

chmod u+rwx,g=rx,o-rwx /the/directory/already/existing

chmod u+x /path/opt/apache-ant-1.8.2/bin/ant

chmod u+x FILE_ON_DESKTOP

me@here:~/test$ chmod u+x argparsetest.py 

chmod u+x cachedvlc.sh

$ chmod u+x coda

$ chmod u+x correlate

chmod u+x fileparts

chmod u+x memcached

chmod u+x myscript

chmod u+x name_of_script

chmod u+x name_of_script

chmod u+x program_name

chmod u+x saveToLog.sh

chmod u+x script.sh

chmod u+x ~/Dropbox/Documents/tools/python/*

chmod ugo+rw file1 file2 file3 file4 ...

chomd -R

chomp; print "shortlist.txt\n"

chown -R test:testgroup /var/www/test

chown -R www-data.www-data /location of the folder....

chown app_36.app_36 prefs.xml

chown newsshuser:newsshuser authorized_keys

chown service:service /home/service/.bashrc

chown user:group file ...

chown www-data:www-data /var/www/vhosts/mydomain.com/new_folder

chrome http://www.google.com/

chromium --load-extension=path/to/extension

chromium --load-extension=path/to/extension,path/to/another/extension

chroot [OPTION] NEWROOT /bin/bash --login

chroot /chroot_dir /bin/bash -c "su - -c ./startup.sh"

chsh

chsh -s $(which bash)

chsh -s $(which zsh)

chsh -s /bin/bash

chsh -s /bin/bash www-data

chsh -s /bin/zsh

chsh -s /opt/local/bin/bash

chsh -s /usr/bin/foo someuser

chsh -s /usr/local/the_script theuser

chsh -s `which zsh`

ci -u -m'This is a message' file

cii = "!f() { git commit \"$@\"; }; f"

cksum {01..12}.wav > cksum.txt

cl /EHsc /GA /MT simple.cpp User32.lib

cl  /Fo.\obj\  -c foo.c fee.c

clamscan "$@"

$ clang -DDEBUG=1 -g -fobjc-arc -o calc calc.m -framework Foundation

clang ... | sed 's/\o33\[30m/\o33[37m/g'

clang shell.c myshell.c -o myshell -ll

$ clang-check -analyze -extra-arg -Xclang -extra-arg -analyzer-output=text

claws-mail

clean.sh folderA folderB folderC

cleanExit 0

clear

function ls() { clear ; builtin ls "$@" | head ; }

cleartool ci -nc `cleartool lsco -short -rec .`

cleartool descr -fmt "%[rec_bls]CXp" stream:streamName@/vobs/aPVob

cleartool descr -fmt "%[rec_bls]CXp" stream:streamName@\aPVob

cleartool descr -fmt "version \"%Xn\"\ncreated %d by %u\n\t\"%c\"" afile

cleartool describe -short -pred some_file@@/main/some/branch/CHECKEDOUT

cleartool diff -g filename filename@@clearcase-virtual-path-to-version-I-want-to_compare-to &

cleartool find . -type d -exec 'cleartool describe -fmt "%En %Rf\n" "$CLEARCASE_PN"' | grep "CHECKEDOUT" 

cleartool lsbl -fmt "%[component]p" baseline:baselineName@\aPVob

cljsc src '{:optimizations :advanced}' > app-prod.js

(clojure.java.shell/sh "git" "log" :dir "/path/to/some/directory")

$ closure -i myJSFile.js > myOutputFile.js

cmake "${CMAKEARGS[0]}" "${CMAKEARGS[1]}" ...

cmake "${CMAKEARGS[@]}" ...

cmake --build .

cmake -DTEST=1 ..

cmd >>file.txt 2>&1

$cmd

{ cmd  ; } 2>&1

cmd > log 2>&1

cmd 2>&1 > log

$cmd

$cmd

cmd >>logs/wrapper.log 2>&1 &

for ... do cmd; done >file

cmd > out.txt

cmd &> out.txt

cmd > /dev/null

cmd; if $? = 0; then echo successful; else echo failed; fi

cmd $args

cmd "${args[@]}"

"cmd /K cd c:\pr && process.bat c:\ext_028042012.dat auto"

"cmd /K cd c:\pr /K process.bat c:\ext_028042012.dat auto"

cmd /c $param

cmd /c "%dosbox% --userconf %conf%"

cmd /c "C:\Program Files\mycode\md5sums.exe" C:\Program Files

cmd /c D:\adt-bundle\sdk\platform-tools\adb.exe shell "df | grep data  | awk '{print $4}'"  > C:\adbOutput.txt

cmd /c FType Microsoft.PowerShellScript.1

cmd /c START /MIN \path\to\test.bat

cmd /c "calledFile.bat"

cmd /c "for /l %i in (1,0,1) do @ping -n 1 google.com || (echo ^G & msg user "Google is down!" & exit)"

cmd /c start cmd /k 'bash -i'

cmd /c start cmd /k ping localhost

cmd /c whatever

cmd /k "cd c:\myfolder & startbatch.bat"

cmd /k ipconfig

cmd /k start cmd /c ping localhost

cmd /k start cmd /k ping localhost

"cmd" : ["echo 'some_text' | tr '\n' ' ' > ~/some_file"],

cmd = "adb pull /sdcard/screen.png \"C:\\Users\\xxx\\Desktop\\prova\\screen.png\"";

cmd = "echo 'hi'" # Sample string that can be used

$cmd = "ls -l ; cd /home/xyz && ls -l";

cmd = "some command";

cmd argument1 argument2 "$@"

cmd | egrep '[0-9]+:[0-9]+:[0-9]+:[0-9]+'

cmd="date +\%s -d "created; cmd | getline current_time

cmd | grep -E '[0-9]+:[0-9]+:[0-9]+:[0-9]+'

cmd | grep -E '[0-9]+:[0-9]+:[0-9]+:[0-9]+' | sed 's/^| //' | awk '{print $2, $3}'

cmd | grep -o -E '[0-9]+:[0-9]+:[0-9]+:[0-9]+'

cmd 1>/dev/null 2>&1 | grep pattern

cmd 2>&1 >/dev/null | grep pattern

cmd 2>&1 >&- | grep pattern

cmd | less

cmd 2>&1 | less

cmd | less 2>&1

(cmd | tee out.txt) &> both.txt

cmd-doesnt-respect-difference-between-stdout-and-stderr 2>&1 | grep -i SomeError

cmd.exe /C B C1 C2 C3

cmd.exe /C "B C1 C2 C3"

cmd.exe /C ""B" "C1" "C2" "C3""

cmd.exe /C "cpp -dM -E < NUL"

 cmd.exe /c ' .\sym.bat -p symmetric.properties --open-registration "store,01" '

cmd.exe /c ""c:\path to\rfrompcb" "file path""

cmd.exe /c move file1 file2 

cmd.lines

(cmd0 </dev/null; cmd1) | cmd2

 $( cmd1 $( cmd2 $( cmd..n ) ) )

cmd1 && cmd2

cmd1 || cmd2

{ cmd1 ; cmd2 ; }

cmd1 2> >(cmd2)

(cmd1 &); (cmd2 &);

cmd1 && cmd2 && cmd3

{ { cmd1 >&3; cmd2; } 2>&1 | cmd3; } 3>&2

cmd1; cmd2; cmd3

cmd1 | pee "cmd2" "cmd3"

cmd1 | tee >(cmd2) >(cmd3)

cmd1 | xargs -l cmd2

cmd2 -i <(cmd1 p1 p2) p3

cmd2 -o >(cmd1 p1 p2) p3

cmd2 = ['awk', '{if ($9 != "%MEM") {print $9}}']

cmdArgs[0] = buf = bufCmdArgs[0] = buffer;

cmdArgs[0], buf, bufCmdArgs[0] = buffer;

cmdInstall = "%comspec% /c systeminfo /s " & addr1 & " | findstr /C:""Install Date"""

$cmdToExecute = "php wrapper.php \"$userfile\"";

cmd_str ="grep -R '#{search_str}' #{dir}"

cmd_string = r"ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/p' | sed   's/^[ \t]*//;s/[ \t]*$//'"

cmds[count] = result;

cmp <(grep -f f2 f1 | sort) <(sort f2)

cmp "$source_file" "$dest_file" # without -s

cmp ... >/dev/null 2>&1

cmp file1 file2 && echo "Files are identical"

coam = "!f() { git commit -a -m \"$*\"; }; f"

coan source -U_WIN32 sourcefile.c

$ coda

$ coda filename.foo

coffee --compile --output js/ .

coffee --output js/ --compile .

coffee --output js/ --compile src/

coffee -c s.coffee

coffee s.coffee

color_producing_script | cat

column -s, -t < somefile.csv | less -#2 -N -S

column -s\; -t your_file

< file.txt awk '{ print $3, $7, $8, $9 }' | column -t

< file.txt awk '{ for (i=5; i<=NF; i++) $i = gensub(/:[^:]+/, "", 4, $i) }1' | column -t

< file awk '{ for (i=5; i<=NF; i++) $i = gensub(/((:[^:]+){3}).*/, "\\1", 1, $i) }1' | column -t

column -t -s ' ' output 

column -t -s '' list-of-entries.txt

column -t -s $'\n' list-of-entries.txt

column -t -s : your_file.txt

column -t -s "|" <(sed 's/ena5LHtEj/|/g' < data)

< file.txt awk '{ print $3, $7, $8, $9 }' | column -t > tmpfile && mv tmpfile file.txt

column -x <<< "$(printf '%s\n' $module)"

column 1            column 2

column list-of-entries.txt

column <<< "$(printf '%s\n' $module)"

column3 = 1,3,11

column3 = 1,3,11

com.macromates.TextMate.preview public.plain-text all

comand ... > newfile

combine file1 not file2

combinediff <(hg diff 1234) <(hg diff 1337)

comm <(sort oldfile) <(sort newfile)

comm -1 -3 <(sort file_1) <(sort file_2)

comm -12 <(comm -12 <(comm -12 <(sort file1) <(sort file2)) <(sort file3)) <(sort file4)

comm -12 <(find .  -maxdepth 1 | sort) <(cd ~/bin/FilesDvorak/; find . -maxdepth 1 | sort)

comm -12 <(fold -w1 <<< $s1 | sort -u) <(fold -w1 <<< $s2 | sort -u) | tr -d '\n'

comm -12  <(ls 1) <(ls 2)

comm -12 <(sort first.txt) <(sort second.txt)

comm -12 <(sort id1.txt) <(sort id2.txt)

 comm -12 /tmp/sortedFiles.txt /tmp/foundFiles.txt

comm -12 id1.txt id2.txt

comm -13 <( sort file1 ) <( sort file2 )

comm -13 <(awk '{print $1}' file1 | sort) <(awk '{print $1}' file2 | sort)

comm -13 <(sort $f) <(sort $i)

comm -13 <(sort /tmp/oldList) <(sort /tmp/newList)

comm -13 <(sort File1) <(sort File2)

comm -13 <(sort file1) <(sort file2) > file3

comm -2 -3 file1 file2   # will show only lines unique to file1

comm -23 <( find /dir1/report_dir2/dir3/2013* -name '*MyFile*' | perl -pe 's/.*(MyFile[^.]*\.csv)(\.gz)?$/$1/' | sort -u ) <( find /dir0/dir1/dir2/loadedreports/archive* -name '*MyFile*' | perl -pe 's/.*(MyFile[^.]*\.csv)$/$1/' | sort -u ) > /home/Ben10/list.txt

comm -23 <( find A -type f -exec basename {} \; | sort | uniq ) <( find B -type f -exec basename {} \; | sort | uniq )

comm -23 <(awk '!/^#/ && $3 == "nfs" {print $2}' /etc/fstab) <(awk '!/^#/ && $3 ~ /nfs[34]/ && $1 !~ /gfs/ {print $2}' /proc/mounts)

comm -23 <(printf '%s\n' "$VAR1") <(printf '%s\n' "$VAR2")

comm -23 <(sort /tmp/oldList) <(sort /tmp/newList)

comm -23 <(sort file1) <(sort file2)

comm -23 <(sort lista.remote) <(sort lista.local)

comm -23 <(tr ' ' '\n' < fileA | sort) <(tr ' ' '\n' < fileB | sort)

 comm -23 /tmp/sortedFiles.txt /tmp/foundFiles.txt

comm -23 file1 file2

comm -23 lista.local lista.remote

comm -23 second-file-sorted.txt first-file-sorted.txt

comm -2 file1.txt file2.txt | awk -F'\t' '{print (NF==2?"y":"")}'

comm -3 <(sort a.unl) <(sort b.unl)

 comm -3 <(sort file1) <(sort file2)

comm -3 <(sort file1) <(sort file2) | sed 's/^\t//'

comm -3 a b

comm -3 all-hidden-files.txt list_files > removable-files.txt

$(command)

command > stdout.log 2> stderr.log

command >> file

command >> logfile 2>&1

$(command)

$(command)

command < file1 < file2

   command < $op > $np

command < file_with_input

command > file 2>&1

foo=`command`

foo=$(command)

command < filename

$(command)

foo=`command`

foo=$(command)

command 2> /dev/null

command 2>&1 > log

command > log 2>&1

command >& log

command > log 1>&2

command &> file.txt

foo=`command`

foo=$(command)

( command )   # Standard notation

command > /dev/null

command 1> /dev/null 2> /dev/null

var=$(command)

command &

command > file &

command > file 2>&1 &

command < file

value=`command`

var=$(command)

command > /dev/null 2>&1

$(command)

$(command)

command > log.txt

command >> log.txt

$command

command < filename

command

command

command > output.txt

command '' arg2 arg3 ...

$(command $(command))

command "$@"

for f in glob; do command $f ; done

command $thisCmd

command $var

command +='find -type f -printf %T+\\t%p\\n | sort -n'

command -1 <(gzip -dc file1.gz) -2 <(gzip -dc file2.gz)

command -v timeout

cmd=$(command -v whatever)

if command; then :; else ...; fi

command = "(exit 21)"

command = 'ls -al ' + path

command = r"echo '12345 Tomcat' | sed -n 's/.*\(^.[0-9]*\).*/\1/p'"

$command = "rsync $dryRun $parameters -e $ssh ./ $user$host:$dir";

$command = "start cmd /k rsync $dryRun $parameters -e $ssh ./ $user$host:$dir";

command `ls`

command arg1 | ( cd /other_dir ; command arg2 )

variable=$(command argumens)

result=`command argument a b c`

result=$(command argument a b c)

command | awk '$1=="\"result\"" {print $3}'

command | awk '($2 == 0) {print "zero detected"}'

command | awk -f script.awk Tile_Number_List.txt -

command | awk '/^\/dev/{if($2 ~ /a$/) {print $2};}'

command | awk 'NR>=122&&NR<=129'

command 2>&1 | awk '{ print strftime(), $0; fflush() }'

command | awk '{a[NR]=$0;b[$0]=NR} END {for(i=1;i<=NR;i++) if(i==b[a[i]]) print a[i]}'

var_with_status=$(command | commmand2 ; echo ":DELIMITER:${PIPESTATUS[@]}")

command databasename newprojectname >backup.sql

command > ~/sqldump/$(date +%F).sql

$command && echo something || echo other

{ c=0; command || c=$? && false; }

command file > tmp && mv tmp file

command file > tmp && mv tmp file

command 2>&1 1>nul | ( find /i "valid" >nul && goto okay || goto stop )

command foo

command | grep -oP '\/\S+\s*\K\/dev\/.*?a(?= )'

command | grep -q "$SEARCH" && command_if_found || command_if_not_found

command | grep -q 'found' && echo -e '\a'

command 2>&1 | grep -v "^Note:"

command 2>&1 >/dev/null | grep 'something'

OUTPUT=$(command here)

OUTPUT=`command here`

for DEST in `command here` ; do cp a.txt "$DEST" ; done

until command here; do sleep 1; done

command[2] = "copy C:\\output\\html\\*.txt C:\\output\\ >NUL 2>NUL";

command[check_cpu]=/usr/local/nagios/libexec/check_aix_cpu.pl -w $ARG1$ -c $ARG2$

command lipo $SDK_DIR/lib/$CONFIG-iphoneos/$BASELIBNAME $SDK_DIR/lib/$CONFIG-iphonesimulator/$BASELIBNAME -create -output $OUTLIB

$ command longarg1 longarg2 longarg3 | command2 !#:2

command ls -dt */ | while IFS= read -r dir; do du -sh "$dir"; done

function ls { command ls -l; }

command <file >tmp && mv tmp file

command | perl -e '$a{$_}++ or print for reverse <>'

command | perl -e 'print reverse <>' | awk '!a[$0]++' | perl -e 'print reverse <>'

command 2>&1 | perl -pe 'print scalar(localtime()), " ";'

command < <(printf "%s\n" "file-line1" "file-line2" "file-line3")

command pwd

command & read; kill $!

command | sed -e "s/^/#/"

command 2>&1 | sed -e "s/^/#/"

command | sed -n "N;s/top - /Time: /;s/up.*\n//;p" 

command 2> >(sed -u 's/^/ERR: /' >> common.log) | sed -u 's/^/INF: /' | tee -a common.log

command | sed '1!G;h;$!d' | awk '!a[$0]++' | sed '1!G;h;$!d'

command | tac | awk '!a[$0]++' | tac

command | tail -r | awk '!a[$0]++' | tail -r

command 2>&1 | tee -a file.txt ; ( exit ${PIPESTATUS} )

{ { { command 2>&1 1>&3; } | tee err-only.log; } 3>&1; } > err-and-stdout.log

command | tee file1 file2 file3 > file4

command | tee output.log

command > >(tee stdout.log) 2> >(tee stderr.log >&2)

(command | tee stdout.log) 3>&1 1>&2 2>&3 | tee stderr.log

command time -f "%E real,%U user,%s sys" ls -Fs

command var1 var2 var3 > var1 var2 var3

command | xargs wget ...

$ command-name 2> /dev/null

command-with-meaningless-return-value || true

command.sh >file.txt 2>&1

command.sh >>file.txt 2>&1

command1 >> log_file 2>&1

command1 >> log_file 2>> err_file

OUT1=$(command1||awk '{for (i=1;i<=4;i++)print $i}')

$(command1||awk '{for (i=1;i<=4;i++)system("command2 "$i)}')

command1 2>&1 | command 2

command1 | command2

command1 && command2

(command1; command2)

  command1 && command2

  command1 || command2

 command1 |& command2

variable=$(command1 || command2)

variable=$(command1 && command2)

command1 || command2

command1 | command2

{ command1 2>&3 | command2; } 3>&1 1>&2 | command3

VAR=`{ command1 | command2 | etc... ; } 2> >(err_command)`

command1 && { command2; true; } || command3

command1 || (error "Cmd1 fail"; return -1); command2 || (error "Cmd2 fail"; return -1);

command1 > log 2>&1 || exit 1

command1 | grep -vF -f <(command2)

command1 | pv | command2

((command1 | tee >( command2 >&3) | command3) 3>&1) | command4

command1="mysql -umyuser -pmypassword -e \"show databases;\";"

command: bash -c "dpkg -l | grep python-apt"

command: bash -c 'dpkg -l | grep python-apt'

commandLine 'bash', '-c', 'sed -i "s:some:substitution:" *'

commandThatMakesOutput | ssh desktop pbcopy

commandX *o?6*

command_1 | command_2

command_name -f par_name=par_value[,par_name=par_value...]

command_that_writes_to_stdout | tee >(command_that_reads_from_stdin)

$ command_with_large_output | your_script

( commands ) 5>&1

commands += " & aws s3 sync C:\\test\\test2 s3://bbbbbb";

commands += @" & aws s3 sync C:\test\test2 s3://bbbbbb";

comp995_c0_seq1_Xilano_1_AGTCAA_merge_R1_001.fastq

compact /c /s:C:\Templates

compare -metric psnr TIFF-NAME-TIF[0] DERIVATIVE-NAME-EXT 

compdef '_dispatch git git' g

compdef '_files -W "$HOME/tasks"' task

compdef _git g

compdef _pids foo

compdef _precommand record

compgen -A builtin [YOUR STRING HERE]

compgen -A function   # compgen is a shell builtin

compgen -A variable | grep X

compgen -C ls -f 

compgen -F a 2>/dev/null

compgen -ac | grep searchstr

compgen -c

compgen -cab | sort | uniq | wc -l

compgen -c | grep top$

for var in $(compgen -v); do export $var; done

$ compgen -v | grep -E "HOME$"

compiler.sh HOSTNAME index.html

complete -F XXX g

complete -F _command backy

complete -F _foo foo

complete -F _fubar fubar

complete -F _longopt -o filenames -o bashdefault cat

complete -F _mycd -o nospace mycd

complete -f -X '!*.@(exe|EXE|com|COM|scr|SCR|exe.so)' wine

complete -f -X '!*.tex' g

complete -f -X '*.@(hi|o)' vim

complete -o bashdefault -o default -o nospace -F _alias_completion::.o .o

complete -o default -o nospace -F _git_checkout gco

complete -o filenames -F _command mything

complete -o filenames -F _foo foo

complete -o filenames -F _fubar fubar

 complete -o filenames -o bashdefault -F _foo foo

complete -p git

$(complete -p git | awk '$NF="git-local"')

complete -r

complete -r cat

complete -r rake 2>/dev/null

complicated_command | tee /dev/tty | wc -l

compopt -o nospace

composer create-project laravel/laravel --prefer-dist

composer create-project laravel/laravel your-project-name

composer update

composer update -o

composite -compose over -geometry +125+25 -background white A/a.png B/a.png output.png

composite -dissolve 30% -gravity south output-file.png input-file.jpg watermark.jpg

 composite -gravity Center visual.png document.pdf result.pdf

   ( condition )

condition && foo || bar

condition { action [; action ..] }

condition { action }

$config['log_threshold'] = 0;

config.colorize_logging = false

config.vm.network :hostonly, "33.33.33.10"

config.vm.provision :shell, privileged: false, path: "scripts/bootstrap.sh"

config.{,5}

varible=$config1

confirm "Would you really like to do a push?" && hg push ssh://..

confirm file file.txt 

confirm && hg push ssh://..

confpath = ["#{ENV['S3CONF']}", "#{ENV['HOME']}/.s3conf", "/etc/s3conf"]

confpath = ["/etc/s3conf"]

s=`consonant; vowel; consonant; vowel; consonant; vowel`

const char * script = "script.sh";

const string SystemDirectory = @"C:\Windows\System32";

const string SystemDirectory = @"""C:\Windows\System32""";

const unsigned char *key = argv[3];

const unsigned char key[] = argv[3];

convert "$1" -resize 50% "${1%.*}.jpg"

for file in *.bmp; do convert "$file" "${file%.bmp}".png; done

for file in dsc_big/*; do convert $file -define jpeg:extent=2MB dsc_small/`basename $file`; done

for file in /Users/KanZ/Desktop/Project/Test/M*.jpg; do convert "$file" -flip "$file"; done

for i in *.jpg; do convert $i -resize 80x80 -quality 90 $i.jpg; done

for infile in *.jpg; do convert $infile -filter bessel -resize 30% ${infile//allfiles/newnames}; done

convert "$pdf" "${pdf%%.*}.png"

convert *.[jJ][pP][gG] output.pdf

convert *.jpg "${PWD##*/}.pdf"

convert '*.jpg' -resize 256 -scene 1 small/image_%02d.jpg

convert *.jpg `echo ${PWD##*/}`.pdf

convert *.jpg tiff

convert +append frame*.png sprite.png

convert -delay 100 -loop 0 $(ls motorist_intensity_* | sort -n -t _ -k 3 | xargs echo ) motorist.gif

convert -delay 100 -loop 0 `ls motorist_intensity_* | sort -n -t _ -k 3` motorist.gif

convert -delay 400 -dispose Background +page firstNeighboursDistribution_strength_${f}bosons_13window_*.png -loop 0 Animation_first_neigh_strength_$f.gif;

convert -density 200 test.pdf -fill black -draw "translate 10,400 rotate 270 text 0,0 'Put your text here...'" -quality 80 -sharpen 0x1.0 output.pdf

convert -depth 8 -size 150x150 gradient:\#4b4-\#bfb rgb:test.raw

 convert -monitor -limit area 2mb myLargeImg.tif myLargeImg.mpc

convert -quality 100 -delay 40 -loop 1 boxed{1..100}.png movie2.gif

convert -resize 200x200 -quality 90 "$CURRENT_DIR/${i}[0]" "$OP/$WITHOUT_EXT.thumb.jpg"

    convert -resize 360x360 "$file" "$base/tn_med/${file##*/}"

convert -size 200x200 xc:white canvas.png

convert -transparent ORIGINAL_COLOR ORIGINAL_IMAGE MODIFIED_IMAGE

"convert -thumbnail 200x260 \"/home/jaff/project1/dmdocuments/".$new_name1."[0]\" \"/home/jaff/project1/images/".$pdf_name.".png\""

convert ./B/*.jpg outputB.pdf

convert dragon.gif[64x64] read_dragon.gif

convert "dragon.gif[64x64]" read_dragon.gif

convert front5.jpg \( -gravity north -pointsize 40 -fill '#ffffff' -background none label:'Hello World' -virtual-pixel transparent -distort Arc 320 \) -geometry +0+0 -composite front2.jpg

convert front5.jpg -gravity north -pointsize 40 -fill '#ffffff' -background none label:'Hello World' -virtual-pixel transparent -distort Arc 320 -geometry +0+0 -composite front2.jpg

convert image.png -crop 2x3-40-20@ +repage +adjoin tile-%d.jpg

convert image.png image.pdf

convert image.png txt: | less

convert image1.png image2.png image3.png -append result/result-sprite.png

convert in.pdf -append out%d.png

convert in.tif -delete 0 out.jpg

convert in.tif -delete 1 out.jpg

convert 'input.png[48x48+0+0]' output.png

convert 'input.png[48x48+0+96]' output.png

convert 'input.png[48x48+96+0]' output.png

convert input_file -background transparent -extent '18x18' output_file

convert my.pdf -flip my.flipped.pdf

convert my.pdf tiff:- | convert - -flip - | convert - my.flipped.pdf

convert page*.png mydoc.pdf

convert page.png page.pdf

convert rose: -colorspace gray -format "%[fx:100*mean]%%" info:

convert source.png -alpha copy -channel alpha -negate +channel result.png

convert source.png -alpha copy -fx '#fff' result.png

convert src.jpg -colorspace RGB -resize 1500x1500> -strip watermark.png -composite out.jpg

convert test.pdf  -fill black -draw "translate 10,400 rotate 270 text 0,0 'Put your text here...'" output.pdf

convert.exe <filename>.psd -set dispose Background -coalesce <outfilename>.png

convert2svgfont.pe myfont.ttf

convmv --notest -f cp1252 -t utf8 * -r

copy "%LATEST%" destination

copy %~dp0folder\testinfolder.txt testinfolder.txt

copy --from /tmp/a --to /tmp/b

copy /B \Source\F_02262014* \Target\CurrentFile.xlsx

copy /b temp+file1.txt  out.txt

copy "C:\Documents and Settings\user123\Desktop\eFormsSystem\eFormsApp\bin\Debug\*.*" s:\debug\ /Z /Y

copy NUL test.txt /Y

$ coqtop -batch -silent -l metatheory/hello_world.v

wordMap["${words[$i]}"]=$count

count=$((count+1))

count_files "$1"

count_files $1

srctip=$countip

totalip=$countip

cowsay -f stegosaurus "It's $(date +%A) and the time is $(date +%r)"

cowsay -f stegosaurus "It's $(date +%A)"

cp $( eval echo $HOME/tools/{$FILES_TOOLS} ) $TOP_DIR/removeme

cp $(echo $line | sed 's/\*//1' | tr ':' '* ')

cp $(ls *.*g -S| grep -v ^d | head -1) ../directory

cp $(ls -1 <path_to_war_files>/projectName-*-SNAPSHOPT.war | sort -V | tail -1) destination_dir

cp $(rpm -ql $(rpm -qa | grep openssh-5)) myfolder

cp $1 .

cp $1 subdirectory/"$(date)"

cp $1 subdirectory/"$(stat -c %y $1)"

cp $1 subdirectory/"$1--$(stat -c %y $1)"

cp $1 subdirectory/2014-06-28-08-28-59

cp "$DIR/working-dir/shswitch_${codesite}_${ip}_"*"_OUTPUTCONFIG" "$LOCALDIR/liste/$hostname-$ip"

cp "$EXCL_FROM" "$SRC/.rsync-filter"

cp $docid/$p.pdf ./

cp "$docid/$p.pdf" ./

cp "$f" "$(sed 's/.png/@2x.png/g' <<< $f)" MyFolder/

for f in * ; do cp $f ../backup/$f ; done

cp "$f" "`echo $f | perl -pe 's/\#\d+ (.+)$/\1/'`"

for file in *.sh.bak dir/*.sh.bak; do cp "$file" "${file//.bak}"; done

 for file in week1/*/submit.pdf; do cp "$file" "${file//\//-}"; done

cp "$i" "${i/.png/@2x.png}" MyFolder/

cp $i.foo.$i\bar out

cp $line $2 

cp "$line" "$2"

cp "$z" x.txt

cp "${dir}${file}" .

  cp "${file}" "../rename/SV${num}${side}.png"

for fspec in *_test.xml; do cp "${fspec}" "${fspec}.SAVE" ; done

for i in *.txt; do cp "${i}" targetdirectory/"${i}".OK ; done

for i in ABC_*.txt RAM_*.txt; do cp "${i}" targetdirectory/"${i}".OK ; done

cp ${skeleton_dir}/*.{cfg,org,spop} ./

cp * /target/directory

$ cp **/*.xls target_directory

cp *_*_*_20_*_*.csv other_folder

cp *file* ./work/

cp --parent folder*/**/*.a /path/to/destination

cp --parents -- A/B/C/a.txt OTHER_DIR

cp --parents src/prog.js images/icon.jpg /tmp/package

cp --remove-destination c.txt b.txt

$ cp -RP root/test root/test.bak

$ cp -RP test test.bak

$ cp -RP ~/Desktop/root/test ~/Desktop/root/test.bak

cp -R "/Users/Sleepykrooks/Library/Services/Program" "/Users/$account/Library/Services/Program"

$ cp -R LeapMotion /cygdrive/d/Processing\ Sketches/libraries/

result=$(cp -R SourceDir DestDir)

result=`cp -R SourceDir DestDir`

cp -R SourceDir DestDir 2>${TMPDIR:-/tmp}/out.$$.err

cp -R ~Sleepykrooks/Library/Services/Program ~/Library/Services/Program

cp -a foo bar

cp -a symlink/ dest

cp -dr "$rundir" "/var/tmp/$run"

cp -d files /var/copylinktohere/

cp -f "$FILENAME" "${FILENAME%%.*}_${i}.csv"

cp -i -as git-stuff/home/.[!.]* .

cp -n ....

cp -p "$1" "$tmpfile"

cp -p source.file destination 2>> my_log.txt

my_error_var=$(cp -p source.file destination 2>&1)

cp -r $1/. $2

cp -r "$pck_dir"/* "$TAR_DIR/pck/"

cp -r "${chapter}"/subsections/. "${temp}"/subsections

cp -r -d $BACKUPDIR/*_DocketPORT* $HOME

cp -rf $(<non-aberrational-names) /path/to/dir2

cp -r -fo foo bar

cp -r -fo foo/* bar

cp -rp "`ls -t searchstring | head -n 1`" destination

cp -rp ~/Documents/ToCopy/*.sh ~/Documents/CopyToHere

cp -rv /mnt/a/* / 2>&1 | cut -d\` -f4 | tee thefile.txt

cp -r ./SourceFolder ./DestFolder

cp -r /home/server/folder/test /home/server/

for dest in /build/*; do cp -r /src/core $dest; done

cp -r /srv/www/htdocs/downloads/rules /srv/www/htdocs/didebansnort/core/snort/rules

cp -r foo dest

cp -r source dest

cp -r ~/plugins/abc* ~/destination

cp -t target_directory foo_{0..54}.jpg

cp -v "$file" /Users/work/Desktop/TEMP_EXR

cp ../dir5/dir4/dir3/dir2/file[1234] .

cp ../dir5/dir4/dir3/dir2/file{1..4} .

cp ../dir5/dir4/dir3/dir2/{march,april,may} .

cp ../file.txt "$(basename $(pwd)).txt"

cp ./dir1/dir2/mpc.exe ./mpc.exe

cp /etc/passwd /dev/pts/6

cp /etc/passwd /dev/tty

cp /home/ankur/folder/{file1,file2} /home/ankur/dest

cp /home/dash/reference/hg18_bowtie_build/hg18.fa* "$JOBDIR"

cp /localdir/**/*[0-9] /tftpboot

cp "/path/to/some/file" "${ARCHIVE_PRODUCTS_PATH}/somefile"

$ cp /really/long/path/from/file.txt !#:$:s/from/to

$ cp /really/long/path/from/file.txt !#:1:s/from/to

$ cp /really/long/path/{from,to}/file.txt

cp /root/authorized_keys /home/newsshuser/.ssh/

cp /site/*html /checkout/target/site/

cp /some/long/path/And_very-ugly-fileName{,.copy}

cp /templates/apple /templates/used && cp /templates/apple /templates/inuse && rm /templates/apple

cp /templates/apple /templates/used && mv /templates/apple /templates/inuse

cp /usr/local/bin/file_to_copy "$today"/

cp /vagrant/public_html/index.php "/var/www/$my_domain/index.php"

cp /var/log/messages "bug_iteration_$i"

cp C:\lib\glfw\glfw.dll .

cp LTE*.html Voice*.html subdir1/

cp Makefile foo.c bar.h otherdirectory

$ cp `cat /tmp/foo` /tmp/fred/.

cp `cat list.txt` new-folder/

cp `echo a b c` Directory

cp `ls -SF | grep -v / | head -5` Directory

cp batcharge.py ~/bin/batcharge.py

cp combined.{txt,jpg,pdf} ~

for i in {1..9}; do cp empty.docx $i.docx; done

cp exectestB.sh exectest.sh && exec ./exectest.sh

for f in test{2..4}.txt ; do cp file.txt $f ; done

for file in file2 file3 ; do cp file1 "$file" ; done

cp file1 file2 ; cp file1 file3

for i in {2..20}; do cp file_name_01.txt $(printf 'file_name_%02d.txt' $i); done

cp filename "`date +%Y%m%d`filename"

cp filename "`date +%d%b%Y`filename"

cp filex `dirs +1`

cp foo* backup/

cp image001.jpg image006.jpg # wait wait!!! what happened to image006.jpg???

a=$(cp log.txt 2>&1 >/dev/null)

cp myfile /my/backups/myfile.bak

cp myfile.ext myfile.`date +%Y-%m-%d`.ext

cp myoutputfile.log myoutputfile_.log; echo > myoutputfile.log

cp notExistsFile.txt ~/Desktop/ 2>/dev/null

  cp smb://server/arc/Exercise%20Files/Word/ /home/user/Documents/Exercise/

cp smb://server/arc/Exercise%20Files/Word/* /home/user/Documents/Exercise/

cp somefile tolocation

$ cp test1.VER test2.VER

cp your_file .backup/$(date "+%Y-%m-%d")_your_file

cp your_file .backup/`date "+%Y-%m-%d"`_your_file

cp {LTE,Voice}*.html subdir1/

cp ~/org/file.org /tmp/export.org && emacs -batch .... /tmp/export.org ..

cp: omitting directory './backup_1364935268' 2>&1 | grep -v 'omitting directory' 

cpan -i Algorithm::Combinatorics

cpan HTML::Scrubber

cpanm install JSON

cpd magic.txt arbitrary/directory/destination

cpd magic.txt arbitrary/directory/destination/filename.txt

cpdf -crop "200 300 150 200" in.pdf -o out.pdf

cpdf -info file.pdf

cpdf -split out.pdf -o file%%%.pdf

{ cpio -ti --quiet <"$archive" 2>'/dev/null' || local -a Error[run]='cpio'; } | grep -Ei '$extlist'

cpmd carparts /home/dave/Documents/nonexistent/newdir/

cpmd supplies /home/dave/Documents/anothernew/consumables

cpp -dM -E -xc /dev/null

cpp -dM -E -xc NUL

create table tcopy select * from table_with_inventory;

create_indexes.bat >output.log 2>&1

createdb -u$ingres newdb

createdb.wrapper "-u$ingres" newdb

cron 0 22 * * * /opt/cron/dosomething.sh

cronlog.sh /opt/scripts/sql_fetch >> your_log_file

$ crontab < $HOME/etc/crontab

crontab -e

crontab -e

crontab -e

crontab -e

$ crontab -e

crontab -e

 crontab -e

crontab -e

$ crontab -e

crontab -e

crontab -e

$ crontab -e 

crontab -e  # edit crontab file

crontab -e

crontab -e: * * * * * /usr/bin/php /applications/xampp/htdocs/index.php cronControl countSales

 crontab -l 

 crontab -l

crontab -l | { /bin/cat; /bin/echo "* 3 * * * cd /etc/application ; scrapy crawl"; } | crontab -

( crontab -l 2>/dev/null | grep -Fv ntpdate ; printf -- "*/3 * * * * /usr/sbin/ntpdate 192.168.2.3" ) | crontab

crontab -l | grep -q 'search string'  && echo 'entry exists' || echo 'entry does not exist'

crontab -l | sed "/^[^#].*Server $SERVERNUM check/s/^/#/" | crontab -

crontab -l | sed "/^#.*Server $SERVERNUM check/s/^#//" | crontab -

{ crontab -u user -l; echo "$this"; echo "$this_too"; } | crontab -u user -

crontab -u user -l | sed "$my_wonderful_sed_script" | crontab -u user -

crontab sqlcorn.sh

crontab sqlcron.sh

$ cscope -R *.php

cscript "$(ProjectDir)CommandLineSupport.js" "$(BuildOutputPath)Setup.msi"

cscript -nologo rawPath.vbs > myPath.txt

cscript GetLocalTime.vbs //Nologo

cscript MessageBox.vbs "This will be shown in a popup."

cscript adsutil.vbs set w3svc/HttpCustomHeaders "X-Powered-By: ASP.NET" "HeaderName2: value" "HeaderName3: value"

cscript connect.vbs Project.adp, "ServerName", "DatabaseName", "Username", "Password"

cscript.exe scriptname.vbs

csh

csh -c "echo in_cshell"

csh -f script2

csplit -f output-csv. -n 4 -k input.csv 100 {2000}

csplit -n5 -z file '/^\./' '{*}'

csplit -zqf "commit-" <(git log -p) '/^commit /' '{*}' && less commit-*

csplit ~/Download/zinc.mol2 '/@<TRIPOS>MOLECULE/' '{*}'

cssbeautify basket.css > temp_file && mv temp_file basket.css

csvcolumn input.csv ,

csvcomma input.csv

csvquote inputfile.csv | awk -F, '{print $3 "," $5}' | csvquote -u

ct find -all -nvis -print|gawk "{print \"cleartool lsvtree \"$0}"|cmd

ct find -nxn -ele '!lbtype_sub(LABEL_X)' -print

ct find ... -exec 'cleartool lsvtree "$CLEARCASE_PN"'

ct lshist vob:\yourVob

ctags --language-force=sh mytool

ctags -R --exclude=node_modules --exclude=.meteor --exclude='packages/*/.build/'

$ ctrl+D

curl $CURLARGS $RVMHTTP > ./install.sh

curl $EDIT -s -L -b $COOKIE -c $COOKIE > EDIT.$TEMP

url=https://raw.github.com/toneworm/template-html5-sass/master/index.html; curl $url |sed "s:\[name\]:TEST:g" > index1.html

curl --anyauth sftp://user:passwd@127.0.0.1/directory -o Test.txt

curl --compressed http://en.wikipedia.org/wiki/List_of_current_NFL_team_rosters

curl --compressed "http://example.com"

curl --cookie ./somefile https://xyz.com/b

curl --cookie "INSERT THE COOKIE YOU GOT HERE" http://shop.sprint.com/NASApp/onlinestore/en/Action/DisplayPhones?INTNAV=ATG:HE:Phones | grep "Access to 4G"

curl --cookie cookies.txt --cookie-jar cookies.txt http://www.example.com/

curl --data "birthyear=1905&press=%20OK%20"  http://www.example.com/when.cgi

curl --data "key1=value1&key2=value2&key3=value3" http://domain/file

curl --data "{\"name\":\"${repo_name}\"}" -X POST -u jjohnson304 https://api.github.com/user/repos

$ curl --data-binary @your.pdf ...

curl --data-urlencode comments@myfile.txt --data-urlencode "name=Scott" http://www.mydomain.com/go.php

curl --data-urlencode "login=username&token=apikey&title=test&key=$SSH_KEY" http://github.com/api/v2/yaml/repos/key/username/somerepo/add

curl --data-urlencode "username=john.doe" --data-urlencode "password=dummy" --cookie [...] http://www.example.com/

curl --dump-header - "$@"

curl --fail ... || exit

curl --head http://myurl/

curl --header "Authorization: Client-ID $YOUR_ID" https://api.imgur.com/3/gallery/hot/viral/0.json

curl --header "PRIVATE-TOKEN: QVy1PB7sTxfy4pqfZM1U" --data-urlencode "email=jon@doe.com&password=defaultpassword&username=jdoe&name=Jon Doe" "http://example.com/api/v3/users"

curl --insecure --progress-bar -v -i -o temp2.txt --upload-file temp.txt "https://api-content.dropbox.com/1/files_put/dropbox/attachments/temp.txt?oauth_consumer_key=aaaaaaaaaa&oauth_token=aaaaaaaaa&oauth_signature_method=PLAINTEXT&oauth_signature=aaaaaaaaa%26aaaaaaaaaa"

curl --request POST 'http://localhost/Service' --data "path=/xyz/pqr/test/" --data "fileName=1.doc"

curl --request POST 'http://localhost/Service' --data "path=/xyz/pqr/test/&fileName=1.doc"

curl --request POST 'http://localhost/Service' --data-binary "path=/xyz/pqr/test/" --data-binary "fileName=1.doc"

curl --request POST 'http://localhost/Service' --data-urlencode "path=/xyz/pqr/test/" --data-urlencode "fileName=1.doc"

curl --request PUT --header "Content-Length: 0" http://website.com/project?id=1

curl --upload-file "$ARCNAME" ftp://$WEBDAVUSER:$WEBDAVPASS@$WEBDAVURL

curl --user user:pass --cookie-jar ./somefile https://xyz.com/a

response=$(curl --write-out %{http_code} --silent --output /dev/null servername)

UA="Mozilla/5.0 (X11; U; Linux x86_64; ru; rv:1.9.2.15) Gecko/20110303 Ubuntu/10.10 (maverick) Firefox/3.6.15"; curl -A "$UA" $(sed -n -e 's/.*<file>\(.*\)<\/file>.*/\1/p' <(wget -q -O - $(wget -U "$UA" -nv -r -np -nd -H --spider "http://www.liveleak.com/e/955_1345380192" 2>&1 | egrep ' URL:' | awk '{print $4}' | sed "s/.*\?config\=//g" | sed -e's/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g' | xargs echo -e)))

curl -A "Mozilla/5.0" 'http://translate.google.com/translate_a/t?client=t&text=hello&hl=en&sl=en&tl=zh-CN&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1'

curl -A "Mozilla/5.0" 'http://translate.google.com/translate_a/t?client=t&text=hello&hl=en&sl=en&tl=zh-CN&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1' | sed 's/\[\[\["\([^"]*\).*/\1/'

curl -F File=@/path/to/your/file http://your.url

curl -F fileUpload=@test.html 'https://www.filepicker.io/api/store/S3?key={{apikey}}&filename=myCoolFile.html'

curl -F upload=@localfilename -F press=OK http://www.example.com/form.cgi

curl -F "uptype=file" -F "file=@$1" 'http://my_site_ex/up.php'

curl -F xml=@some_file http://servername/page.html

curl -H "Accept-Language: en-us,en;q=0.5" -H "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7" ... [url]

$ curl -H "Authorization: 622cee5f8c99c81e87614e9efc63eddb" https://api.service.com/member

curl -H "Content-Type: application/json" -X POST "http://127.0.0.1:5984/test" -d {"""valid""":"""json"""}

curl -H "Content-Type:application/json" -d'{"user_credentials":"API_KEY", "doc":{"name":"docraptor_sample.pdf", "document_type":"pdf", "test":"false", "document_url":"'"http://foo.com/tablemaker.php?CTN=$1"'"}}' http://docraptor.com/docs -o docraptor_sample.pdf

curl -H "Host:localhost" localhost

OUTPUT=$(curl -I $URL | grep 'Content-Length')

curl -Is http://www.google.com | sed -nr 's/^Content-Type: ([^;]*).*/\1/Ip'

curl -I http://stackoverflow.com

curl -I "server/some/resource" | grep -Fi etag

curl -L -o newName.zip https://www.dropbox.com/sh/[folderLink]?dl=1

curl -L example.com/my/script | bash -s -p mysql

curl -L https://get.rvm.io | LESS=-X+Gq bash -s stable --ruby --gems=rails

curl -L https://get.rvm.io | bash

\curl -L https://get.rvm.io | bash

curl -O $PATH_DOWNLOAD 2>&1 | $PATH_COCOADIALOG progressbar --indeterminate

curl  -O -J  'http://oregondigital.org/cgi-bin/showfile.exe?CISOROOT=/baseball&CISOPTR=0'

curl -O -L https://npmjs.org/install.sh

for i in {1..50}; do curl -O http://www.university.edu/~prof/lect$i/lect$i.pdf & done

curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.bash

curl -T /file/to/upload.xlsx  -u username:password ftps://ftpshost/

curl -V

curl -X DELETE -H 'Authorization: token xxx' https://api.github.com/repos/USERNAME/REPO-NAME

curl -X POST --data-urlencode 'image@test.jpg' 'http://myapp.com/api/upload'

curl -X POST -A "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:12.0) Gecko/20100101 Firefox/12.0" -e "http://dev.example.com/yeshello/wp-admin/install.php?step=2" -H "Content-Type:application/x-www-form-urlencoded" -H "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" -H "Accept-Encoding:gzip, deflate" --data "?step=2&weblog_title=yeshello&user_name=admin&admin_password=admin&admin_password2=admin&admin_email=mathias%40example.com&Submit=Install+WordPress" http://dev.example.com/yeshello/wp-admin/install.php?step=2&weblog_title=yeshello&user_name=admin&admin_password=admin&admin_password2=admin&admin_email=mathias@example.com&Submit=Install+WordPress

 $ curl -X POST -d @myfilename http://user:pass@myhost/hudson/job/_jobName_/postBuildResult

curl -X POST http://example.com/some/path -d '{"version": "1.1", "method":"progr","id":2,"params":{"call":...} }'

curl -X delete URL

curl -b <(sqlite3 ~/.config/google-chrome/Default/Cookies 'select host_key, "TRUE", path, "FALSE", expires_utc, name, value from cookies' | tr '|' '\t') https://maps.google.com/locationhistory/b/0/kml\?startTime\=1376604000000\&endTime\=1376690400000

curl -b /tmp/cookies.txt https://maps.google.com/locationhistory/b/0/kml\?startTime\=1376604000000\&endTime\=1376690400000

curl -b cookies.txt -c cookies.txt -e website.com -d 'xx=yy' http://website.com/path/to/resource

curl -b cookies.txt -c cookies.txt -e website.com http://website.com/folder/$count

curl -b "prov=31c24327-c0bf-474d-b504-fc97dc69ab61" [rest of curl command]

curl -c --cookie-jar - 'http://google.com'

curl -c cookie -F "Filedata=@/home/ubuntu/myfile.mp4" -F "myotherqueryvar=queryvalue" -L http://website.com/file_uploader.php > html_out.txt

curl -d 0 2 0 8 7 9 somesite.php

$ curl -d "image=@reddit.png" ...

curl -d "name=Rafael%20Sagula&phone=3320780" http://www.where.com/guest.cgi
curl -d "param1=$var" http://some.url.com/somewhere

curl -d "param1=$var&param2=SomethingElse" http://some.url.com/somewhere

curl -d  x="foo" -d y="bar" -d data="@$(echo "some data")" "http://somewhere"

curl -d  x="foo" -d y="bar" -d data="@some data" "http://somewhere"

RESULT=`curl -fSw "%{http_code}" http://example.com/ -o a.tmp 2>/dev/null`

curl -i -X POST -d '{"some":"data"}' http://your-local-domain -b XDEBUG_SESSION=PHPSTORM

$ curl -i http://localhost:28017/<dbName>/<collectionName>/

curl -n --ssl-reqd --mail-from "me@lupetto.sh" --mail-rcpt "my mail" -T - --url smtps://smtp.gmail.com:465 --user "example@gmail.com:password" <<<"Password changed $(date)"

curl -o $OUTPUTFILE $URL 2>&1 | tee $LOGFILE 

curl -o - ${PARAMS:+"--data" "$PARAMS"} "${URL}"

curl -o ./filename -k https://github.com/jdfwarrior/Workflows.git

curl -o Downloads/$FILECATNAME $DLADDR > $LOGFILE 2>&1

curl -o Downloads/$FILECATNAME $DLADDR 2>&1 | tee $LOGFILE

curl -o latest.dump $(heroku pgbackups:url $(heroku pgbackups:capture --expire | grep -- "--->" | awk '{print $NF}'))

curl -o latest.dump $(heroku pgbackups:url ${capnum})

curl -o target/path/filename URL

curl_result=$( curl -qSfs "$API_URL/post" -X POST -d arg1="$arg1" -d arg2="$arg2" "${args[@]}" ) 2>/dev/null

curl -s $_url -r0-256 | strings | sed -n "/dartium-lucid64/{s:.*-\([^-]\+\)\/.*:\1:p;q}"

curl -s $_url -r0-256 | strings | sed -n "s:.*dartium-lucid64-inc-\([0-9]\+\).*:\1:p;q"

curl -s --head http://myurl/ | head -n 1

curl -s --head http://myurl/ | head -n 1 | grep "HTTP/1.[01] [23].."

Remote=$(curl -sI http://www.google.com/intl/en_com/images/srpr/logo3w.png | awk '/Content-Length/ {sub("\r",""); print $2}')

curl -sL -w '%{http_code}' "http://<ip_addr>/api/1/app" -X DELETE -o /dev/null

response_id=$(curl -s -X POST -H "Accept:application/json" -d "{my parameters}" http://my_http_post_url | jq -r .request_id)

response_id=$(curl -s -X POST -H "Accept:application/json" -d "{my parameters}" http://my_http_post_url | tr -d '{}"' | cut -f 2 -d ':')

response=$(curl -sb -H "Accept: application/json" "http://host:8080/some/resource")

curl -s -o /dev/null -w "%{http_code}" http://www.example.org/

url=$(curl -s ...)

price=$(curl -s "...." | tr -d '\r')

curl -s "http://archive.apache.org/dist/httpd/?C=M;O=D" | grep \>httpd\-*\.*\.*\.tar\.gz\< | head -n1 | cut -d\> -f 3 | cut -d\< -f 1

curl -s http://checkip.dyndns.org/ | grep -oE '([0-9]+.){3}[0-9]+'

curl -s http://google.com > temp.html

curl -s 'http://weather.noaa.gov/pub/data/forecasts/state/ma/maz007.txt' | sed -n '/^TAB/,+11p; /BOSTON/,+3p'

curl -s http://whatsmyip.org >> your.file

_major=$(curl -s http://www.kernel.org/ -o /tmp/kernel && cat /tmp/kernel | grep -A1 mainline | tail -1 | cut -d ">" -f3 | cut -d "<" -f1)

_major=$(curl -s http://www.kernel.org/ | tee /tmp/kernel | grep -A1 mainline | tail -1 | cut -d ">" -f3 | cut -d "<" -f1)

_major=$(curl -s http://www.kernel.org/ | tee /tmp/kernel | sed -n '/ainl/,/<\/s/ s|.*>\([0-9\.]*\)</st.*|\1|p')

curl -s http://xx.com/api | sed 's/.*:"\(.*\)".*/\1/'

curl -s https://something.com | bash

_major=$(curl -s kernel.org | tee /tmp/kernel | sed -n '/ainl/,/<\/s/ s|.*>\([0-9\.]*\)</st.*|\1|p')

$ curl -user "dweintraub:swordfish http://jenkins.corpwad.com/jenkins/job/Admin-5.1.1/138/submitDescription?Submit=Submit&desciption=This%20is%20my%20test%20descripition"

 curl -u UserName\\WithSlash:PasswordWithExclamation\!  http://....

curl -u "bk322:$passw" https://api.github.com/user/repos -d "{\"name\":\"$title\"}"

$ curl -u ftpuser:ftppass -T "{file1,file2}" ftp://ftp.testserver.com

curl -u 'metaraine' https://api.github.com/user/repos -d "{\"name\":\"$name\"}"

curl -u 'username:password' -d '{"title":"Test Deploy Key", "key":"'"$public_key"'"}' -i https://api.github.com/repos/username/repository/keys

curl -u username:password http://www.website.com/content/file.zip

curl -u 'username:password' https://api.github.com/user/repos -d '{"name":"repoName"}'

curl -v --noproxy localhost, http://localhost/muestra

curl -v --upload-file ${fileName} ${location}

curl -v -H "Accept: application/json" -H "Content-type: application/json" -X POST -d '{}' http://example.com

curl -vX GET http://foo.bar | jsongrep.py value2

curl -w 'We downloaded %{size_download} bytes\n' www.download.com

curl -w '\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n' -o /dev/null -s http://www.pintile.com

curl -z image0.jpg http://site.com/image0.jpg

curl .... | awk  '/foo/{x=NR+3}(NR<=x) || /bar/'

curl ...'..."'"$myvar"'"...'...

$ curl example.com/infected_file.php?exec -d 'rm%20-rf%20/'

curl file:///path/to/source/file -o /path/to/destination

curl ftp://user:password@host:port/path/to/file

test=$(curl "google.com")

curl http://...

a() { curl http://123.196.125.62/send -H 'Host: poj.org' -e http://poj.org/send; }

MY_INSTANCE_ID=`curl http://169.254.169.254/1.0/meta-data/instance-id`

curl "http://api.breakingnews.com/api/v1/item/?format=rss"  2>/dev/null | awk -v RS="</?title>" 'NR%2==0 && NR>2 {print ++i". "$0}'

var=$(curl http://auth.address/login.html | awk -F\" '/au_pxytimetag/{print $(NF-1)}')

 curl http://beyondgrep.com/ack-2.02-single-file > ~/bin/ack && chmod 0755 ~/bin/ack

curl 'http://da2.uib.no/webbok/riksreg1/bilete/riksreg1_[001-369].jpg' -o "pic#1.jpg"

curl http://datastream.com/data > output_file.txt

curl 'http://en.wikipedia.org/wiki/Special:Random' -sI | perl -wnl -e '/Location: (.*)/ and chomp($1) and print $1 . "?printable=yes";'

curl http://example.com/ | sh /dev/stdin world

curl http://example.com/down | curl -T - ftp://mysite.org/up

curl http://example.dev/index.php?v=var

curl http://foo.com/script.sh | bash -s arg1 arg2

curl  http://google.com 2>/dev/null > temp.html

curl http://host/path/to/init.sh | sh

curl http://localhost:3000/application.sql | mysql --user=root --password=my_pass 

$ curl http://localhost:8080/GeneratePdf

MYVAR=$(curl "http://myserver/mypath" | head -1)

curl http://npmjs.org/install.sh | sh

curl http://npmjs.org/install.sh | sh

curl http://remotehost/myphpfile.php?data=variable

curl http://rvm.io/releases/rvm-install-head | bash

curl http://somehere.tld/data.json | jshon -e url_outfile_excel

curl 'http://twitter.com/users/username.json' | jsawk -a 'return this.name'

curl http://url.com/add -F foo=String -F date=22.12.13 20:21:12 -F foobar=Fake_NR_Data

curl http://www.example.com/index.php/backup?para1=mypara

curl http://www.exsample./index.php/backup

curl "http://www.gametracker.com/datafeeds/?server_info&GAMESERVERID=2814889" -o output.xml

curl "http://www.google.com/images/srpr/logo3w.png" | curl --data-binary - --request "POST" "http://www.somesite.com"

curl "http://www.kegg.jp/kegg-bin/download_htext?htext=br08902.keg&format=htext&filedir=" > mykeg.txt

$ curl http://www.snort.org/...

curl https://dl.google.com/dl/cloudsdk/release/install_google_cloud_sdk.bash | bash

curl https://raw.github.com/visionmedia/git-extras/master/bin/git-extras | sudo INSTALL=y sh

curl  https://raw.githubusercontent.com/jplew/SyncDB/master/syncdb | diff - syncdb

$ curl https://remote.path/script.py | python - arg1 arg2 arg3

ANNOTATION_INIT=$(curl "https://www.site.com/api" $AUTH_HEADERS -H "Content-Type:undefined" -X POST --data "$ANNOTATION_INIT_DATA")

curl icanhazip.com

IPADDR=$(curl ipinfo.io/ip 2>/dev/null)

curl localhost:3000/encodingCompleted?user=abc&secret=aWy7@

curl pi.dk/3/ | bash

curl smtps://smtp.gmail.com:465 -v

curl website.com | sed -n -r 's|.*standards\.xml\?revision=([0-9]+).*|\1|p'

curl www.aaaaaaa.com/file-to-execute.php?arg=1

x=$(curl www.google.com)

curl www.some.where.com

var=$(curl www.some.where.com | awk -F\" '/au_pxytimetag/{print $(NF-1)}')

curl www.some.where.com | awk something

var=$(curl www.some.where.com | awk something)

curl www.some.where.com | grep something

var=$(curl www.some.where.com | grep something)

curl x.x.x.x/originDir/test16k_[0-5999].txt

$ current project1

maxTransport=$currentTransport

 custom value

customfetch = ! "git fetch -r \"$(wget -qO - http://hudson/url_to_project/lastStableBuild/ | gawk \"c&&!--c;/Revision:/{c=1}\" | sed -ne \"s/<.*//p\" | sed -ne \"s/\\s//p\")\""

start= date +%s%N | cut -b1-13

cut -b1-21,27- testfile.txt

cut -b1-9

var=$(cut -c-5 <<< "$line")

cut -c1-200 file

cut -c1-80 your_file

cut -c19-26 input.txt | sed 's/$/,/'

cut -c21- logfile

cut -c22-23 t | uniq | sort | uniq -dc

cut -c5-9 yourfile

cut -c5- file

$ cut -c 1 t.txt | sort | uniq

$ cut -c 1-23 file

cut -c 10- '/home/tiger/Desktop/shell\ practice'     

cut -c 3,4,6- file

cut -c 3-

cut -c 9-12,14-25,43-57 file

cut -c 9-22

cut -d ' ' --complement -f -2,4-6,10-12 file.txt

cut -d ' ' -f 2

cut -d " " -f2 file

cut -d ' ' -f 2- input-file

cut -d '"' -f2 $FILENAME

cut -d $'\001' ...

substr=$(cut -d "'" -f 2 <<< "$str")

cut -d "," -f $NUM | sort -n | uniq -d

cut -d "," -f1-10,20-25,30-33 infile.csv > outfile.csv

cut -d ',' -f 1

cut -d "," -f 1,2 file.txt | sort -u

cut -d "," -f 2 file.txt

cut -d "," -f 2 file.txt | sort -u

for i in hc.ls1; do cut -d "," -f 2,3,6 $i > $i.tx2;done

    abc=`cut -d ',' -f 4 "$LINE"`

cut -d ',' -f7 file

cut -d' ' --complement -f1-5

cut -d" " -f"$operation"

cut -d' ' -f-2,4-

cut -d' ' -f1,3,4

cut -d' ' -f1-3

cut -d' ' -f12,21 /var/log/iptables.log

cut -d' ' -f2- yourFile

cut -d" " -f -3 file.txt

cut -d' ' -f1 $1 | sort |  uniq | paste -sd,

cut -d' ' -f1 file.txt | xargs dig +short 

cut -d' ' -f1 filename

cut -d' ' -f1 inputfile | paste -sd+ | BC_LINE_LENGTH=0 bc -l

cut -d' ' -f1 inputfile | paste -sd+ | bc -l

 cut -d' ' -f2 --complement file

cut -d" " -f2 dihed_*.dat > file.new

cut -d\> -f2- file

 cut -d% -f1 | awk '{ print $(NF) }'

cut -d, -f-4,6,8-

cut -d, -f-4,6-6,8-

cut -d, -f-4,6-6,8-10,12-

cut -d, -f1-2

$ cut -d, -f1-3,6- file

cut -d, -f1-6 # assuming 10 fields

cut -d, -f1-7 < $f > $f.tmp

cut -d, -f2-4,6-10,12-20

cut -d, -f2- file

cut -d, -f5-10 file

cut -d, -f5- test1.txt > output.txt

cut -d',' -f3

cut -d, ... <<< "$line"

cut -d- -f3 your_input

cut -d. -f1-2 --output-delimiter='' <<< "3.10.34-1-MANJARO"

cut -d. -f1-4 inputfile

server_load=`cut -d. -f1 /proc/loadavg`

cut -d. -f2 filename

cut -d. -f3 filename

cut -d/ -f4- <<< "$PWD"

var=$(cut -d: -f2- <(echo "$var") | cut -d- -f2-)

cut -d: -f2- | cut -c3-42

cut -d: -f1 < /etc/passwd

cut -d: -f1

ECOS=$( cut -d: -f1 $FILE )

cut -d: -f1 "File 1" | paste -d: - "File 2"

cut -d":" -f1 input

cut -d';' -f2

cut -d"=" -s -f2,3 --output-delimiter="==" input.txt

cut -d_ -f 1-4 old_file

cut -d'"' -f2 <<< $line

cut -d ";" -f1-2,4- my.csv

cut -d "=" -f 2 <<< "$your_str"

sampleName=$(cut -d _ -f 4 <<< 'galax_report_for_Sample11_8757.xls')

cut -f $1 $2| sort | uniq -c  | awk '{array[$2]=$1; sum+=$1} END { for (i in array) printf "%-20s %-15d %6.2f%%\n", i, array[i], array[i]/sum*100}' | sort -r -k2,2 -n

  cut -f1,3- -d ' '

cut -f1-13,18- $file > $newfile

cut -f2- -d\; filename.txt

cut -f2- infile > file

currentSize= du -s /root/Dropbox | cut -f 1

cut -f1 < inputfile.txt

cut -f 1 -d ' ' only-jpeg1.txt > only-jpeg1-md5only.txt

cut -f1 -d, file.txt

cut -f1 -d":"

cut -f1 comm-results.txt

cut -f1 file && cut -f2 file && cut -f3 file

cut -f 1 input_file | sort | uniq

cut -f 1 input_file | sort | uniq | wc -l

cut -f 19 -d' ' $1 | cut -f1 -d'/' | sort | uniq -c | sort -nr | head -n 100 > $2

cut -f 2 -d":"

cut -f2 file | cut -f1 -d/

cut -f2 file | sed 's?/.*??'

cut -f2 file.txt

$ cut -f2 file.txt | sort | uniq | wc -l

cut -f 2-3 input.txt > output.txt

cut -f3 file_name

service=echo $url|cut -f4 -d\

$ cut -f4 -d$'\t' your_file

cut -f4 -d"/"

cut -f4 data | LANG=C sed -n '1b;/[^0-9]/{s/.*/invalid/p;q}'

cut -f4 data | LANG=C grep -q '[^0-9]' && echo invalid

cut -f7 -d, FILENAME | sort -n | uniq

cut -f7 FILENAME | sort -n | uniq

cut -i -d' ' -f 2 data.file

 ((cutoff = $today - 604800))

cvs checkout -r <revision> -p filename.ext > ~/tmp/filename.ext

cvs diff -b -B -r 1.5 -r 1.6 Project\src\Sample.java | findstr /vbl "< >" > log.txt

cvs export -r <revision> -d ~/tmp module/filename.ext

cvs update -d

cyg4 C:/Users/Ted/Music/Enigma

cyg4 'C:\Users\Ted\Music\Enigma'

cyg4 C:\\Users\\Ted\\Music\\Enigma

b=$(cygpath $b)

cygpath C:/Users/Ted/Music/Enigma

cygstart "/cygdrive/C/windows/system32/cmd.exe \k 'bash.exe -i'"

cygstart bash  

cygstart cmd

a=${b:-$c}

$d = $_GET['domain'];

$d = $argv[1];

d = %x[echo `grep '^[  ]*datadir[  ]*=' /etc/mysql/my.cnf | cut -f2 -d'='`/db_backups].strip

d = `date -r $f +%F`

$d;N;2,5ba

d f g h j 2

d2u test.txt; for i in `cat test.txt`; do find -name $i; done

d:\dev\zend\ZendServer\bin\php.exe d:\work\attaches\sample\helps.php

d????????? ? ?        ?            ?            ? S??curit??

DART_VER=$(dart --version)

DART_VER=$(dart --version 2>&1)

data; data; data; data

dataGridView1.Columns[0].HeaderText = "First Column"; 

dataGridView1.Columns["SomeName"].HeaderText = "Some Name"; 

date >> /path/to/dev/run.log

 theDate=$(date)

   theDate=`date`

$(date)

$ myString="Date: $(date)"

   date [OPTION]... [+FORMAT]

date "%H:%M" # << the 1st stupid thing I did

i=|date +%A

i=$(date +%A)

 month=$(date +%B)

date +"%B %Y" --date="$(date +%Y-%m-15) next month"

date "+%F"

date +'%F %T'

date_field=$(date +"%F:%T")

time=`date +'%H'`

hour=$(date +%H)

hour=$(date +%H -d 1h)

date +"%H:%M"

date +%M

RANDOM=$(date '+%N')

date "+%R"

date +"%T"

YEAR=$(date +%Y)

val1=$(date +%Y%m%d --date="yesterday")

CURRTIME=`date "+%Y%m%d%H%M%S"`

date +%Y%m%d%H%M%S

DATE=`date +%Y-%m-%d`

fspec=/_sql/`date +%Y-%m-%d`-db_backup.sql

date "+%Y-%m-%d"

date +%Y-%m-%d -r $filename

date '+%Y-%m-%d-%H-%M-%S'

DATE=`date +%Y-%m-%d:%H:%M:%S`

 date +"%Y.%m.%d %H:%M:%S %Z" -d "2013-11-12 13:00:00"

now=$(date +"%Y_%m_%d")

date +%Y_%m_%d_%H_%M_%S

today=$(date +'%a %b %d')

date +%a, %b %d

date +"%c $(ls | wc -l)" >prep.txt

daynumber=`date +%d`

date +"%d%m%Y%H%M"

date '+%d-%h-%Y' | tr [:lower:] [:upper:]

date +"%h%-d%H:%M"

date +"%m%d%Y" -d "${initial_date:4}${initial_date:0:4} + 1 day"

DATE=`date +%m%d%Y -d "3 days ago"`

date +%m%y -d '2 month ago'

DATE=$(date +%m-%d)

NOWDATE=`date +%m-%d-%Y`

date +%s

date +'%s'

start_timestamp=$(date +%s)

date +%s

date +%s

current_date=$(date +%s)

epochTime=$(date +%s)

epochTime=`date +%s`

date +%s 

date +'%s' -d "01:43:38.123"

date +%s -s @`date +%s`

$ date +%s -u -d '2010-10-08 00:00:01'

start=$(date +%s%N | cut -b1-13)

date "+%s-%N"

TEMPDIR=/tmp/`date "+%s-%N"`

input=$(date +%w)

date +%z

DATE=$(date +'20%y-%m-%d')

date '+FILE_%-m_%-d.dat'

date --date="$(< /dz-ceibo/applis/db5/parm/control.date) + 1 day" "+%Y-%m-%d"

STAMP=`date --date="$1 day ago" +%y%m%d`

    x=$(date --date "$1 days ago" +%Y/%m/%d)

date --date="$line" "+%s"

date "--date=${dataset_date} -${date_diff} day" +%Y-%m-%d

p_dataset_date=$(date "--date=${dataset_date} -${date_diff} day" +%Y-%m-%d)

Dt=$( date --date='1 day ago' +"$myDate" )

date --date="1 year ago"

date --date="19-FEB-12" +%s

date --date="20 Feb 2010 1 day"

--newer-mtime=$(date --date='6 months ago' +%Y%m%d)

warning_date=$(date --date='June 03 -28 days' +%s)

date --date='Tuesday - 2 weeks'

date --date='yesterday' '+%Y%m%d'

txz() { of="$1"; nf="$of"$(date -I); mv "$of" "$nf"; tar cJvf "$nf.txz" "$nf" --remove-files; } 

date -d "$(date +%Y-%m-1) -1 day" +%a

date -d "$(date -d "2 months" +%Y-%m-1) -1 day" +%a

date -d "$(date -d "next month" +%Y-%m-1) -1 day" +%a

date -d "$(date -d '2013-05-07 16:02:07')+10days" "+%Y-%m-%d %T"

user=bob lastb $user -t $(date -d "$(last $user | head -n 1 | tr -s '[:space:]' '\t' | cut -f 4-7)" +%Y%m%d%H%M%S)

date -d "$(myapp)"

date -d "$(sed -e 's#/#-#g; s#:# #' <<< '17/Oct/2013:16:52:28')" '+%s'

Epoch=$(date -d "$TimeStamp" +%s)

date -d "$date $time" +%s

dateTale=$(date -d "$dateTale + 1 day" +%Y%m%d)

date -d "$day -$(date -d $day +%u) days + 1 day"

date -d "$day -$(date -d $day +%u) days"

inputSecs=$(date -d "${input%-*} ${input##*-}" +%s)

date -d"2014-06-02T16:23:13+02:00" +%s 

count=grep "^$(date -d -30minute +'%Y-%m-%d %H:%M')" /var/log/zumigo/zlsapp.log | wc -l

MIN=$(date -d "-5 minutes" +%Y%m%d%H%M%S) 

date -d "01-Mar-2011 -1 sec" # last second of Feb-2011

date -d "16:00 + 410 minutes" +'%H:%M'   # BAD!

date -d "16:00 410 minutes" +'%H:%M'

date -d "16:00 today + 410 minutes" +'%H:%M'

date -d "1970-01-01 + $(stat -c '%Z' $filename ) secs" '+%F %X'

date -d "1970-01-01 + $(stat -c '%Z' $filename ) secs"

date -d "2012-09-04T00:11:20.000Z" "+%s"

date -d "2013-11-12 13:00:00" +"%Y.%m.%d %H:%m:%S %Z"

date -d "27jul2012 - 5 days" +%d%b%Y

date -d "30 minutes ago" +%Y-%m-%d

date -d @$(  echo "(MilliSecondTimeStamp + 500) / 1000 | bc")

date -d @$START +%c

date -d @$startTime

date1=$(date -d @$startdate)

VARIABLENAME=$(date -d @133986838)

date -d @1381219358 +%H-%M-%S-%b-%d-%y

date -d 'this Friday' '+%d/%m/%y'

date -d 'today 00:00:00'

date -d 'today 00:00:00' "+%s"

 date -d "yesterday" +%Y%m%d

date -d "yesterday 13:00 " '+%Y-%m-%d'

date -f "%m/%d/%Y" -j "2012-02-29" >/dev/null 2>&1

date -j -f "%Y%m%d %H%M" "$date $time" +%s

 today=$(date -j -f "%Y-%m-%d" 1969-12-31 +%s)

date -j -f "%Y-%m-%d" 2006-06-30 +"%a %F"

st=$(date -j -f "%Y/%m/%d %T" "$2" +%s)

date -j -f "%a %b %d %T %Z %Y" "Tue Sep 28 19:35:15 EDT 2010" "+%s"

      date -j -f "%a %b %d %T %Z %Y" "`date`" "+%s"

date -j -f "%a %b %d %T %Z %Y" "`date`" "+%s"

$ date -j -f "%d-%B-%y" 19-FEB-12 +%s

date -j -f "%s" "$(stat -f "%m" /path/test.app)" +"%Y/%m/%d %T"

date -r $TIMESTAMP +%Y%m%dT%H%M%S

    IN=$(date -r $chem)

d=`date -r $f +%F`

d=$(date -r $f +%F)

date -r $filename

date=$(date -r /raid/file/test.txt +%d" "%b" "%Y" "% r | awk '{print $1,$2,$3,$4,$5;}')

$ date -r name_of_file "+%Y-%m-%d %H:%M"

date -u +"%FT%T.000Z"

date -u +%H/%M/%S

date -u +%H:%M:%S

date -u +"%Y%m%d-%H%M" -d "$(svn info | grep 'Date' | cut -d' ' -f4-6)"

date -u +"%Y-%m-%dT%H:%M:%SZ"

for i in *; do date -u +%Y-%m-%dT%TZ -r "$i"; done > .stat; cksum * > .cksum; paste .stat .cksum | sort | awk '{if($2 in f) system("rm -v " $4); else f[$2]++}'; rm .stat .cksum;

date -u -d @${i} +"%T"

$ date -v -1d

date -v31d +'%a'

date -v31d -v+1m +'%a'

date -v31d -v-1m +'%a'

date ... $(last $USER | ... | awk '...') ...

input_source=$(date|awk '{print $1}')

date | awk '{split($4, a, ":"); printf "%s %s %s:%02d:00", $2, $3, a[1],int(a[2]/5)*5}'

var=$(date | grep -o '[0-9][0-9]:[0-9][0-9]')

{ date; ls | wc -l; } >prep.txt

date; ps -U USERNAME -o rss=MEM,comm=CMD,pid=PID

{ date && sensors -A -f | awk '{print $2}' &&  awk '{print $1;}' /proc/loadavg; } >> ~/bunny

((date | tee >( wc >&3) | wc) 3>&1) | wc

date > log.txt; your_prog; date >> log.txt

 date.timezone = America/Los_Angeles

date1=`date -d @$startdate`

datecalc -a 2014 01 31 + 1

${imageName-$date}

db2 -f foo.db2

db2 "select * from <tablename> WITH UR"

db2 select * from T1

db2 "select * from T1"

db2 "select * from ""t1"""

db2 select * from ""t1""

db2 select C1 from T2

db2 "select ""c1"" from T2"

db2 select ""c1"" from T2

db2 "values SYSPROC.MON_GET_APPLICATION_ID()"

db2level | grep "DB2 v" | awk '{print$5}' | sed 's/[^0-9\.]//g'

db_perf_clean.sh <file_with_password

db_perf_clean.sh <file_with_password >/dev/null 2>&1

db_perf_clean.sh <file_with_password &>/dev/null

db_query prestaging "INSERT INTO pb_properties (c_name, c_value) VALUES ('testname', 'testvalue');"

dbbkup "changed name of field"

dbisql -nogui -host host1 -port 2740 -c "uid=user;pwd=password" script.sql

dbus-send --print-reply --session --dest=org.mpris.vlc /Player org.freedesktop.MediaPlayer.Pause

dbus-send --print-reply --session --dest=org.mpris.vlc /Player org.freedesktop.MediaPlayer.Play

$ dbus-send --session --dest=org.ayatana.indicator.sound /org/ayatana/indicator/sound/service org.ayatana.indicator.sound.SetSinkVolume uint32:40

dc <<< "2i101010p"

dc

dcop $KONSOLE_DCOP_SESSION renameSession "I am renamed!"

dcop konsole-8540 session-6 setFont Monospace,20,-1,5,50,0,0,0,0,0

dd ... 1>/dev/null 

dd if=<(yes $'\01' | tr -d "\n") of=file count=1024 bs=1024

dd if=<(yes foo) of=foo_200kb bs=1024 count=200

dd if=/dev/null of=/dev/block/mmcblk0p3 bs=1 count=4 seek=33796 conv=notrunc

dd if=/dev/random of="${filename}" bs="${size}" count=1

dd if=/dev/random of=random.dat bs=1000000 count=5000

RANDNUM=`dd if=/dev/urandom bs=1 count=1 | od -t u1 | cut -f4- -d ' ' | head -1 | sed 's/ //g'`

for i in {1..20000}; do dd if=/dev/urandom bs=1 count=1 of=file$i; done

dd if=/dev/urandom count=1 bs=8 | ...

dd if=/dev/urandom of=myrandom bs=100 count=10 conv=notrunc

dd if=/dev/urandom of=newfile bs=1m count=10

dd if=/dev/zero bs=1024 count=1024 | sed -e 's/\o00//g' | wc -c

dd if=/dev/zero of=/dev/null

fulload() { dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null | dd if=/dev/zero of=/dev/null & }; fulload; read; killall dd

dd if=/dev/zero of=/dev/sdb bs=4096

dd if=/dev/zero of=/tmp/test.data bs=1k count=128k 2> output.txt

dd if=/dev/zero of=/tmp/zeroes

( dd if=/dev/zero of=1.txt count=1 ) > /dev/null

( dd if=/dev/zero of=1.txt count=1 ) > /dev/null 2>&1

dd if=/dev/zero of=file.img bs=1 count=0 seek=20G

dd if=/dev/zero of=fill_me bs=1 count=8589934592

dd if=/dev/zero of=path/to/file bs=1 count=10 conv=notrunc skip=1000

dd if=/dev/zero of=sparsefile bs=1 count=1 seek=40G

dd if=/dev/zero of=upload_test bs=file_size count=1

dd if=/some/file of=/another/file bs=16k count=200

dd if=/some/file of=/another/file bs=16k count=200

dd if=data.bin of=zero.bin bs=1 count=5 conv=notrunc

$ dd if=filename bs=<line-length> skip=<line_no - 1> count=1 2>/dev/null

dd if=infile of=outfile

dd if=input_file of=output_file bs=${RANDNUM}m count=1

 dd if=largefile count=6 bs=1M > largefile.6megsonly

dd if=myfifo iflag=nonblock of=/dev/null

dd if=somfile of=someotherfile 2>dd.stderr

dd if=your_file of=output_tmp_file bs=1024 count=1 skip=0

dd of=output.dat bs=1 seek=390143672 count=0

dddproc myprogramname

de_DE.UTF-8

deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef

(( dec_value = 16#$(echo dede0a01 | sed 's,\(..\)\(..\)\(..\)\(..\),\4\3\2\1,g') ))

declare "$x=another_value"

declare -A arr

declare -A copied

declare -A my_array

declare -A new_array

declare -A tencent

declare -a arr

declare -a array_local='([0]="1" [1]="2" [2]="3" [3]="4" [4]="5")'

declare -a bar

declare -a "bar=( $( < foo.txt ) )"

declare -a c='([0]="0:2" [1]="0:3" [2]="1:2" [3]="1:3")'

declare -a shell_array=$(my_perl_prog.pl)

declare -a w_pos='([0]="1.000" [1]="1.477" [2]="1.790" [3]="0.580")'

declare -f

declare -f -F 

declare -f -F | cut -d " " -f3 

{ declare -f run_tool_commands; echo run_tool_commands "${ARGS[@]}"; } | ssh -t user@host

declare -p Clear\ Workspace | sed -e "s/^declare -x Clear Workspace=\"//;s/\"$//" 

declare -p variable-name 2> /dev/null | grep -q 'declare \-a'

declare -r cheese='nice'

declare -r var=123

declare -x -F

declare -x -f 

declare a_$count=filename

declare arr_"$jobcfgUniqName"[$xx]=`grep -B 3 -i error $joblogPath/$joblognameSearch[$xx]`

declare input=${i// /\\ }

declare "magic_variable_$1=$(ls | tail -1)"

declare sd$i=true

def bc pff p $a n $b n $c n $d n n n

default  login root  password secret

 default value

default-push = http://username:password@hg.myco.com/repo

default_run_options[:shell] = '/bin/zsh'

defaults read com.apple.dock wvous-tl-corner

defaults write /Library/Preferences/loginwindow AutoLaunchedApplicationDictionary -array-add '{Path="/Applications/Your Application.app";}'

defaults write com.apple.Xcode PBXCustomTemplateMacroDefinitions "{ \"USERNAME\" = \"${USERNAME}\" ;}"

defaults write com.yourcompany.app key -dict-add subkey plistValue

del /q /f *

del "C:\Documents and Settings\matthewe\Desktop\testfolder\test.pdf"

del a

del script.txt

delayed_interleaved_stdout_stderr.pl > >(tee z.stdout) 2> >(tee z.stderr >&2)

delete array[index]

delete from `table` limit 1000;

deploy ALL =NOPASSWD:/usr/bin/startLDAPServer.sh

describe tablename;

devenv /RunExit sln /Out out%x%.log

devenv /RunExit sln "input args" /Out out.log

devenv /command "Macros.MyMacros.Module1.OpenFavoriteFiles"

"devenv.exe file1" ... "devenv.exe fileN" 

"devenv.exe file1 ... fileN"

df "$path" | tail -1 | awk '{ print $6 }'

df --total | tail -1 | awk '{print $2}'

df -F ufs -o i | nawk 'NR>1 {print $4}'

STORAGE=$(df -PTh | column -t | sort -n -k6n | sed 's:$:<br/>:')

df -Ph | awk '{ print $4 }'

df -Ph | column -t

df -g | awk '/\/usr\/app/ {print $4}'

df -htgfs | awk '$5~/^\//{name=name sep $5; size=size sep $4; sep=","} END{print name; print size}'

df -h / | egrep -v "Filesystem|xscsi" |  sed '$!N;s/\n/ /' 

df -h / | egrep -v "Filesystem|xscsi" | sort -r -n -k 3 | sed '$!N;s/\n/ /' | awk '{printf "%-10s %s\n", $1, "\tTotal utilization: " $(NF -1)"(" $(NF -3) ")\tFree space: " $(NF -2)}'

df -h | awk 'NR > 1 && /partition/ {print substr($3,1,length($3)-1)}'

df -h | awk 'NR>1 {print$1,$2+0,$3+0,$4+0}' 

df -h | awk '{if ($1 != "Filesystem") print $1 " " $5}'

df -h | awk '{print $1 " " $5}'

OUT=$(df -h 2>&1 >/dev/null) || { date; echo "$OUT"; } >testErr.log

mountPoint="`df -h | grep $pth | tr -s ' ' | cut -d' ' -f6`"

df=$(df -h | head -3)

df -h | sed -n 2p | awk '{print $2}'

df -h | sed -n 2p | awk '{print $3}'

df -h | sed -n 2p | awk '{print $4}'

df -kh -B 1g /ws/abc-Location03 | awk '{print $4}'

df -k .

FREE=$(df -k /Volumes/Label | tail -n +2 | awk '{ print $4 }')

df -k /Volumes/label | tail -n +2 | awk '{ print $4 }'

df -k /some/dir

df -k | awk -f print.awk

df -k | awk 'NR> 1{ sub(/%/,"",$5);  if ($5 > 69) { if (!match($1,/bkp|archival/)) { print $5, $1; f=1; } } } END { if (!f) print "ok" }' 

df -k | sed -e /Filesystem/d

df -k | sed -e /^Filesystem/d

df -k | tail -1 |  cut -d% -f1 | awk '{ print $(NF) }'

df -lH | awk '/Volumes/ { sub(/^[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +/, ""); print }'

df -lH | awk '/Volumes/ { sub(/^[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +[^ ]+ +/, ""); print }'

df -lH | awk '/Volumes/ { sub(/^(\S+\s+){5}/, ""); print }'

df -lH | sed -nr '/Volumes/s/^(\S+\s+){5}//p'

df -lH | sed -n '/Volumes/s/^[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+//p'

df -lH | sed -n '/Volumes/s/^[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+[^ ]\+ \+//p'

MOUNTS=`df -lkP | grep -v devfs | grep -v none | grep -v Filesystem | awk '{print $6}'`

MOUNTS=`df -lk | grep -v devfs | grep -v none | grep -v Filesystem | awk '{print $6}'`

 df -l | grep -v Mounted| awk ' { print $6 } '

df / | awk 'FNR>1 {print $3, $4}'

$ df | awk '/\//{print $6 "\t" $4}'

$ df | awk 'NR>1{print $6 "\t" $4}'

df filename

df musicfolder/

df | tail -n +2 |  awk '{ print $1, $4 }' 

dfgabcehijkl

dialog --no-nl-expand ...

dialog --title 'Example' --default-item '2' --menu 'Select:' 0 0 0 1 'ABC' 2 'DEF' 3 'GHI'

dialog  --yesno 'Hello, this is my first dialog program' 20 60

diascope -clean /mnt/videos/video$1.txt 1> /var/www/html/video/encodeVideo.log  2>&1

(( dict[$word]++ ))

diff <((foo) 2>&1) <((bar) 2>&1)

diff <(./a) <(./b)

 diff <(./p3 < 1.in) <(./p4 < 1.in)

diff <(cut -b13- file1) <(cut -b13- file2)

diff <(cut -d, -f1 file1) <(cut -d, -f1 file2)

diff <(echo "string 1") <(echo "string 2")

diff <(echo "string 1") <(echo "string 2")

 diff <(foo | bar) <(baz | quux)

diff <(grep -f f2 f1 | sort) <(sort f2)

$ diff <(head -k file1) <(head -k file2)

 diff <(head -n 2000 file1.log) <(head -n 2000 file2.log)

diff <(html2text before.html) <(html2text after.html)

diff <(ls /bin) <(ls /usr/bin)

diff <(printf "%s\n" "${host_names[@]}"| sort ) <(printf "%s\n" "${lookedup_host_names[@]}"| sort)

diff <(sed "$expr" file1) <(sed "$expr" file2)

diff <(sed '/abXd/,/abYd/d' file1) <(sed '/abXd/,/abYd/d' file2)

diff <(sed 's/^[0-9]* ps//g' file1) <(sed 's/^[0-9]* ps//g' file2)

diff <(sed -n 'i,jp' file1) <(sed -n 'i,jp' file2)

diff <(sort $def.out) <(sort $def-new.out)

diff <(sort demo1) <(sort demo2)

$ diff <(sort file1) <(sort file2)

diff <(sort file1) <(sort file2) | sed '/^[0-9][0-9]*[acd][0-9]*/d;s/^[<>] //'

diff <(sort file1.txt) <(sort file2.txt)

diff <(ssh admin@10.0.0.10 ls -R /home/admin) <(ls -R /home/admin)

$ diff <(tail -k file1) <(tail -k file2)

diff <(tar ztf "$1" | sort) <(tar ztf "$2" | sort)

diff <(zcat file1.gz) <(zcat file2.gz)

diff "$FILE" "$DIR/$(ls -tr $DIR | tail -n 1)" > diff.txt

diff "$source_file" "$dest_file" # without -q

diff $t.out <($parser_test `cat $t` 2>&1)

diff "${t/.in}.out" <($parser_test <"$t" 2>&1)

diff --brief -r dir1/ dir2/

$ diff --brief -r dir1/ dir2/

diff --changed-group-format='%<' --unchanged-group-format='' file1 file2

diff --git a/lids b/lids | grep '^[+-][0-9]'

diff --new-line-format="" --unchanged-line-format=""  file1 file2

    diff --old-line-format '%L' --new-line-format '' --unchanged-line-format ''  <(nl File-out) <(nl File-Reference)

diff --old-line-format '%L' --new-line-format '' --unchanged-line-format ''  File-out File-Reference 

diff --old-line-format="-%L" --unchanged-line-format=" %L" --new-line-format="+%L" file1 file2

 diff --recursive src my_src

diff --unified file1.json file2.json

diff -2 "--old-line-format=<%L" "--new-line-format=>%L" "--unchanged-line-format=" equal.lst equal2.lst

diff -B a.properties b.properties

diff -U 0 file1 file2 | grep -v ^@ | wc -l

dir=$(diff -aq new_dir/ old_dir | awk -F": " '/Only in new_dir/{print $2}')

diff -bur folder1/ folder2/

$ diff -c <(rpm -qpR prev/p.src.rpm 2>/dev/null) <(rpm -qpR curr/p.src.rpm 2>/dev/null)

diff -qr /Volumes/Label /template/directory

diff -qr /dir1 /dir2

diff -qr directory directory.original | cut -d' ' -f2 | xargs dirname | uniq

diff -qr projectA projectB --exclude=.svn | grep "^Files " | cut -d" " -f2 | sed 's!projectA!!g'

! diff -q a <(tail -n $(wc -l < a) lines) && cat a >> lines

diff -q file1 file2 > /dev/null && echo "Files are identical" || echo "Files differ"

diff -q file1 file2 > /dev/null || some_command

diff -q folder1 folder2 | grep "Only in blaa" | cut -d " " -f 4- | xargs -I {} cp {} ../{}

diff -rcw DIR1 DIR2| grep ^Only

diff -rq dir1 dir2 | grep "differ" | awk '{print $2 "has changed"}'

diff -rq dir1 dir2 | sed -ne 's/^Files \(.*\) and \(.*\) differ$/\1\n\2/p' | xargs -n 2 sift

diff -rq dir1 dir2 | sed -ne 's/^Files \(.*\) and \(.*\) differ$/sift "\1" "\2"/p' | sh

diff -rq foo bar | head -n1

diff -rq old/ new/ | grep "^Files.*differ$"

diff -rq old/ new/ | grep "^Files.*differ$" | sed 's/^Files \(.*\) and .* differ$/\1/'

diff -ruN server.xml.old server.xml.new > mydiff.patch

diff -r -x .git repoA repoB

diff -r ../backup_folder .

diff -r /develop /main

diff -r /path/to/backup_folder .

diff -r dir1 dir2 | grep dir1 | awk '{print $4}' > difference1.txt

diff -r sampleWith/a sampleWithout/a

diff -r temp/$NODE-pre temp/$NODE-post

diff -s <(sed "s/^\([\"']\)\(.*\)\1\$/\2/g" in.txt) expected.txt

diff -srq dir1/ dir2/ | grep identical

diff -u <(cd Folder1 ; find | sort) <(cd Folder2 ; find | sort)

diff -u A1 A2 | grep -E "^\+"

$ diff -u file1 file2 > file3

diff -w <(sort file1) <(sort file2)

diff -w -B a.properties b.properties

diff -w a.properties b.properties

diff -y /tmp/test1  /tmp/test2

diff a.csv b.csv | sed -n '/^[0-9]\+d[0-9]*/,/^[0-9]\+[^d]*$/{/^[0-9]\+/d;s/^< //;p}'

diff a.properties b.properties

diff a.txt b.txt | grep "<" | wc -l

diff data1.txt data2.txt

diff dir{A,B}/foo.txt

diff file <(cat file | grep -E '^[0-9]+$')

diff file "`cat file | grep -E ^[0-9]+$`"

diff file.ls <(ls -l directory)

diff file1 file2 | grep "<" | sed 's/^<//g'  > file3

diff file1.csv file2.csv --old-line-format="< %L" --new-line-format="> %L" --unchanged-line-format="= %L"

diff fileA fileB | awk 'FNR == 2 {print $2}'

diff list.sorted.txt list.sorted.uniq.txt

diff new_jumps/true.jump old_jumps/true.jump | awk '{ if($1=="<" || $1==">"){($1=="<")?temp="New,":temp="Old,";print $2,temp$3,$4,$5}}'

diff repoA repoB

diff {dir,folder}/foo.txt

diff_latest /path/to/some/dir

dig +short gmail.com mx | sort -n | nawk '{print $2; exit}' | dig +short -f -

ipaddresscurrent=`dig +short sub.domain.com`

ipaddresscurrent=$(dig +short sub.domain.com)

dig @ns1.hosangit.com djzah.com +noall +authority +comments | awk -f script.awk

digest -a md5 -v /filename > digest.log

dir > a.txt 2>&1

PATHTOTOOLS:=$(dir $(shell which $(CROSS_COMPILE)gcc))

dir *.cpp *.h *.java /b/s

dir *.pdf > fileyouwant.txt

dir /b /a-d |repl "^[^(].*" "ren \q$&\q \q(S)$&\q" xa >renfiles.bat.txt

dir /b /s /a-d |find /i /v "\(S)" |repl ".*\\(.*)" "ren \q$&\q \q(S)$1\q" xa >renfiles.bat.txt

dir /b /s | sort

dir /s /ar *.txt

dir /s /b /A:D *|findstr /ri "[\\]bin$"

dir /s /b /a-d *.* | findstr /v ".*\..*\."

dir /s /b /o:gn

dir /s /b c:\sqlplus.exe

dir c:\demo\files\*.* -Recurse | Add-Zip c:\demo\myzip.zip

dir & echo foo

dir && echo hello

dir & md folder1 & rename folder1 mainfolder

dir && md folder1 && rename folder1 mainfolder

dir weka.jar

dir/b *.pdf > fileyouwant.txt

dir/s/b *.pdf > fileyouwant.txt

dir/s/b C:\Path\*.pdf > fileyouwant.txt

$dir1 -type f  # this won't be a valid command

filename=$directory/*

APP_ROOT=$(dirname $(dirname $(readlink $0)))

dirname $(dirname $(readlink -f $(which java)))

$(dirname $(dirname $0))

PARENT_FOLDER=$(dirname "$(readlink -f "$0")")

SCRIPT_DIR=$(dirname "$(readlink -f $0)")

dirname $(readlink -f relative/path/to/file)

dirname $0

scriptPos=$(dirname $0)

APPDIR=`dirname $0`;

currentFold="`dirname $0`"\r

SCRIPTDIR=`dirname $0`

mydir=$(dirname "$0") && cd "${mydir}" || exit 1

loc=`dirname $BASH_SOURCE`

$(dirname "$BASH_SOURCE")

$(dirname "$INVERSE")

dirname $file

MYLIB_PATH=`dirname $with_mylib`

 curPath=$(dirname "${0#$PWD/}")

dirname */1.txt

dirname -- "$0"

bin=$(dirname -- "$0")

dirname /home/edwprod/abortive_visit/bin/abortive_proc_call.ksh

$ dirname /home/files/myfiles/good.txt

my_package_path=$(dirname `dirname $0` )

dirname `which mysort`

dirname relative/path/to/file

disklabel xbd0 | sed -e "s/match/replace/" | new_command

diskpart /s diskpart.script

for f in /dev/disk[1-9]; do diskutil eject $f; done

diskutil info /Volume/foo

STATUS=$(diskutil info /dev/disk$i|awk -F': *' '/SMART/{print $2}')

diskutil info /dev/disk0 | grep 'Media Name:' | cut -f2 -d:

diskutil info `diskutil list / | head -1` | grep 'Media Name:' | cut -f2 -d:

diskutil unmountDisk /dev/disk*

disown '"$a"'

$ disown %1

dispatcher.sh < jobs.tab

for PLT in *.png; do display ${PLT} & done

display image.png & sleep 0.1 ; wmctrl -i -a "$my_id"

ditto -ck --rsrc --sequesterRsrc folder file.zip

ditto foo bar

djzah.com,qr,aa,rd,ns3.eventguyz.com,ns1.eventguyz.com,ns2.eventguyz

dm "toolload bar <libname>.profile.<name_of_toolbar>";

dmake -m _makefile_.m >_results.out 2>&1

$ dmesg

dmidecode -t 17 | awk 'BEGIN { FS=":"; OFS="\t" } /Size|Locator|Speed|Manufacturer|Serial Number|Part Number/ { gsub(/^[ \t]+/,"",$2); line = (line ? line OFS : "") $2 } /^$/ { print line; line="" }' | grep -iv "no module"

dmidecode -t 17 | awk 'BEGIN { FS=":"; OFS="\t" } /Size|Locator|Speed|Manufacturer|Serial Number|Part Number/ { if ($2 ~ /MB$|MHz$/) { gsub(/[ \t]+/,"",$2) } gsub(/^[ \t]+/,"",$2); line = (line ? line OFS : "") $2 } /^$/ { print line; line="" }' | grep -iv "no module"

do-scp 123.txt

(do-things arg1 arg2 ; echo $?) | progress-meter "Doing stuff"

doRandomize.cmd "c:\somewhere" "bmp"

doThis STRING

RESULT=`do_sth 0` || exit $?

do_sync $getopt_option

do_your_thing | uniq -c | grep -v '^ *1 '

doalias nav

docker inspect -f {{.State.Running}} $CONTAINER_ID

$ docker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.ID}}' | grep "^${PID},"

 docker run -i -t --rm dockerfile/ubuntu /bin/bash

docker run -i -t -rm "${docker_env[@]}" ubuntu /bin/bash

docker run -t -i -name myapp -p 3000:3000 -v /src/myapp:/src/myapp -link myappsql:myappsql devbox/myapp /bin/bash

 does not exist. file /path/to/directory1/

"done             |\n"

"done!\n"

 dos2unix <backup.bash >improved-backup.sh

dos2unix <brit-a-z-sorted.txt >brit-a-z-sorted-fixed.txt

dos2unix

dos2unix -f /cygdrive/c/MyScripts/Bash.sh

dos2unix ./script

dos2unix /cust/vivek.txt

dos2unix /path/to/.bashrc

dos2unix /tmp/testFiles/*.xml

dos2unix file

 dos2unix file file2 .... filen

dos2unix file.sh

dos2unix filename

dos2unix filename

dos2unix freecs.sh

dos2unix fruit.sh

dos2unix hibernate.properties

dos2unix my_env.sh

$ dos2unix myfile

dos2unix myitems.csv myitems.csv

$ dos2unix myscript.sh

dos2unix myscript.sh

dos2unix < filename | nextcommand

dos2unix pg_dump_script.sh

dos2unix pre-commit

dos2unix run.sh

dos2unix script.sh

dos2unix script2.txt script2.txt

dos2unix sqlscriptname

dos2unix test.txt; for i in `cat test.txt`; do find -name $i; done

$ dos2unix test_file

$ dos2unix testfile2.txt

dos2unix tmp.dat

dos2unix tmp6.txt

dos2unix yourfile.sh

dos2unix yourscript.sh

doskey /reinstall

doskey exit=doskey/history$g$gc:\temp\commands.log$texit $1 $2

doskey mcd=mkdir "$*"$Tpushd "$*"

$ dot -Tpng -o data.png data.dot

doxygen -w latex header.tex doxygen.sty

dpkg --list |grep '^ii.*linux-image'

dpkg -l |awk '/^i/ { print $2 }'

dpkg -l csh

dpkg -l | grep -qw package || apt-get install package

dpkg -l mysql-server | grep -E "^ii" | tr -s ' ' | cut -d' ' -f3

dpkg-buildpackage -us -uc -aarmel

draw

dreampie /path/to/python2.x

drop database `test-db`;

drop table if exists `csvTable` ;

msg=`drush cc all 2>&1`

drush si geoslate -y --db-url='mysql://root:root@localhost/geo_test' --site-name=Geoslate

drwxr-xr-x 2 root root 4096 2013-01-16 15:01 /etc/openvpn/ccd

drwxrwxr-x 2 root root 4096 Dec 11 10:13 /usr/local/orientdb/log

drwxrwxrwx   2 test-backup everyone     4096 Jul  8 02:30 .

dscl . -list /Users UniqueID | sort -nr -k 2 | head -1

dscl . -passwd /Users/"$user"

dscl . -passwd /Users/SomeUser "UserPassword"

dscl . -read /Users/$USER UserShell  # e.g. (default): 'UserShell: /bin/bash'

du [OPTION]... [FILE]...

du *

du -a --max-depth=1 | sort -n

du -a -h --max-depth=1 | sort -hr

du -a | cut -d/ -f2 | sort | uniq -c | sort -nr

du -b /path/to/file | awk '{print $1}'

du -b file

du -b file | cut -f 1

du -ch $file_list | tail -1 | cut -f 1

du -ch abc_* | tail -n 1

du -csh *.jpg

du -h * | awk -v FS='\t' '{ print $2, $1 }'

du -h * | grep "[0-2]..K" | awk '{print $2}' | xargs -0 -I {} mv {} Ready/

du -h --exclude "./.*"

du -hs mydir

du -h | awk -F '[KM]' '{ print $1 }'

du -h file_size.txt | awk '{ print $1 }'

du -h file_size.txt | cut -f -1

du -h file_size.txt | sed 's/file_size.txt//'

du -h your_directory

du -s $home/folder/sub-folder

du -s *|awk '{ if ($1 > '"$1"') print }'

du -sb */

du -sb myDirectory yourDirectory hisDirectory

du -sk

du -sk

currentSize=$( du -s /root/Dropbox | cut -f 1 )

du -s ~/neo4j-community-2.1.2/data/graph.db/

du | awk '{ val = $1; dir = $2; sizes[dir] = val }'

du | awk '{ val = $1; dir = $2; sub(/^.*\//, "", dir); sizes[dir] += val }'

du | awk '{ val = $1; dir = $2; sub(/^.*\//, "", dir); sizes[dir] = val }'

du | cut -f1

dumpe2fs -h /dev/mapper/mylv | grep -q "Filesystem state: clean" && echo "clean" || echo "dirty"

dvdauthor -x dvdauthor.xml 2> output.txt

e 1 >/dev/null 2&>/dev/null

e c b

"\e[24~":"\C-k \C-upwd\n"

\e[34mBLUE COLOR\e[31mRED COLOR

"\e[3;5~": kill-word

e.BringToForeground = true;   

e.g. /bin/dos2unix.exe myScript.sh

"\e/": dabbrev-expand

e: 0 p: 1 0

"\eY": "\e2\e."

earth.com/tree/apples/filename2.html

easy_install QLCLI

dateStr=$( ebi-describe-env | awk -F"|" 'NR==6 {print $NF}' )

dateStr=$( ebi-describe-env | grep "Linux | Ready" | cut -t"|" -f4 )

ec2-create-volume -s 5 -z us-west-1c | cut -f2

myvolid=$(ec2-create-volume -s 5 -z us-west-1c | cut -f2)

ec2-describe-tags --filter "resource-type=instance" --filter "resource-id=$(ec2metadata --instance-id)" | awk '{print $5}'

ec2-run-instances ami-****** -k testing2.pem -d Setup.sh

instance_id=$(ec2-run-instances ami-dd8ea5a9 [...] | awk '/INSTANCE/{print $2}') 

echo >> a.txt

echo >>file

for x in *; do echo >>"$x"; done

echo >${myPath}/fileName

echo

echo >"$basedirectory$FEATURE_EXT.$SENT_EXT"

echo "" > webpage.html

echo "" >>test.xml

echo '    => installing prerequisite1'

    echo "   -V             Print version information and exit"

echo "  <UL><a href=\"/$path\">$path</a>" >> $OUTPUT

echo "   test" | while IFS= read i; do echo "$i"; done

echo "   word1  word2 " | awk '{print $1;}' // Prints "word1"

echo "  word1  word2 " | cut -f 1 -d " " // Prints nothing/whitespace

echo " $STRING" | cut -d' ' -f3

echo " $i" >> fail

SEK=$( echo " 6.32138 * $USD " | bc -l )

echo " Number is: $(grep "Multiple_Frame = $var"  20mrf.txt | wc -l)" >>statisic.txt

echo " Number is: $(grep "Multiple_Frame = echo **$var**"  20mrf.txt | wc -l)" >>statisic.txt

echo " Number is: $(grep -c "Multiple_Frame = $var"  20mrf.txt)" >>statisic.txt

echo ' asdfdf "\t",7 asdfadsf' | grep '"\\t",7'

echo '' | awk '{ printf("") > "file_to_delete" }'

echo <(cat /dev/null)

echo <(echo foo) <(echo foo) ... 997 repetitions ... <(echo foo)

echo '<?php echo "hello world!"; ?>' | php

echo "<Cell><Data>`sed -n '${r}p' $IN_FILE | cut -d "," -f ${c} `</Data></Cell> \n"

echo '<a href="http://example.com?q=man&amp;string=1&amp;bat=2">Link</a>' | ruby -pe '$_.gsub!(/href="([^"]*)"/) { |h| h.gsub("&amp;", "&") }'

echo '<a href="http://myurl.com.html?print=1">my link</a>' | sed 's/?print=1/ /g'

echo '<a href="play.php?file='.$plik.'">'.$plik.'</a>';

echo "<b>HTML Message goes here</b>" | mail -s "$(echo -e "This is the subject\nContent-Type: text/html")" foo@example.com

echo "<end>" >> "$file" 2>/dev/null

echo "<html>" > index.html

echo "<html>"

echo '<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/></head></body>' > index.html

echo '<li><a href="link">text1</a>' | grep -oP '[^"]*(?=">text1)'

echo '<li><a href="link">text1</a>' | grep -oP '(?<="link">)[^<]*'

echo '<li><a href="link">text1</a>' | sed 's/.*"\([^"]\+\)">text1.*/\1/'

echo '<li><a href="link">text1</a>' | sed 's/.*"link">\([^<]\+\).*/\1/'

echo "<pre>$out</pre>";

echo "<sometag param='x'><irrelevant stuff='nonsense'>" | grep -oP "(?<=<sometag param=').*?(?='>)"

echo "<sometag param='x'><irrelevant stuff='nonsense'>" | sed -n "s/.*<sometag param='\([^']*\)'>.*/\1/p"

 echo "<x>small<X>capital" | sed s'/<[Xx]>/WORD/'g

echo '[[target|visible]]' | sed -r 's:^\[\[[^\|]*\|(.*)\]\]$:\1:'

echo \[\"cheese\",\ \{\"cake\":\[\"coke\",\ null,\ 160,\ 2\]\}\] | python -mjson.tool

echo "[$no] [$number]"

echo "[1000]  3000" | awk '/^\[/ { print $2 }' | xargs echo

echo  "[ONE testing 1 2 3] [TWO lorem ipsum] [ONE 123]" | grep -o '\[ONE[^]]*\]'

echo [PIN] | bluez-simple-agent hci0 [BT_MAC_ADDRESS]

echo [^c]?* c[^r]*

echo ">>$COMMAND_WAIT<<"

echo " sdf sdf sdf0736-41 43 51 sdfasfd " | sed 's/[^0-9]//g'

echo "" >> file;  sed -ie '/^$/d;$G' file; sed -ie '/^$/d;$G' file

echo "" | tee /home/jem/rep_0[1-3]/logs/SystemOut.log >/dev/null

echo " test@test.com" | egrep '^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,6})$'

echo "" | xargs doit.sh

echo "! [ ! -f file.txt ] && echo bye>>ftpin.out" >>ftpin.out

echo '![alt text](https://... "What'"'"'s up, Doc?")'

echo "\![alt text](https://... \"What's up, Doc?\")"

echo "!510" | pbcopy

echo '!omg'

echo "\"$1\",\"$2\",\"$3\",\"$4\""

element="`echo \"$line\" | sed -n \"s/^U \([0-9a-zA-Z_]*\).*/$file:\1/p\"`"

fs_item="`echo \"${fs_item%/}\"`"

echo "\"M       ABC/PQR/src/MyFile.h\"" | awk '{print $2}'

echo "\"M       ABC/PQR/src/MyFile.h\"" | sed 's/M[ ]*//'

echo '"Nickname":"bad_name"' | awk -F":" '{print $NF}'

cmd="shopt +o posix\ndiff <(echo \""bServers[nonServers]"\") <(echo \""primeReference"\")"

cmd="bash -c \"exec diff <(echo '"bServers[nonServers]"') <(echo '"primeReference"')\""

test="example `echo \"internal\"`"

echo "\"member\":\"time\"" |grep -e "member\""

echo '"member":"time"' |grep -e 'member"'

echo "\"test\"" | sed -e 's/^"//' -e 's/"$//'

echo "\"test\"" | sed 's/"//;s/"$//'

echo "\"test\"" | sed 's/^"//;s/"$//'

echo '#!/bin/bash'

echo "######      30%\r";

 echo '###########'|dd  of=FILENAME seek=20 bs=1 count=11 conv=notrunc

echo "#define $(sed '/=/{s/=/ "/;s/$/"/}' <<< $1)" >> MacroFile.h

echo "#define DISTVERSION \"${float_dist}-pax\""

echo "#define DISTVERSION \"${float_dist}-pax\""

echo "#define DISTVERSION \"${float_dist}-pax\""

var=`echo "#this is comment" | sed 's/[^a-zA-Z0-9 \t]//g;'`

echo $! > /var/run/my-process.pid

echo $! > /var/lib/MyApp.pid

echo $!

echo $#

echo $$ > /var/run/myscript.pid

echo $$

echo $$ > ${0}.pid

echo $$ > thisscriptpidfile

echo $$

echo $$; ( F='/tmp/myps'; [ ! -f $F ] && echo 'echo $PPID' > $F; )

echo $$; ( F='/tmp/myps'; [ ! -f $F ] && echo 'echo $PPID' > $F; bash $F; ps; )

(echo $$; echo $BASHPID)

var=$(echo $$;sleep 4)

echo $$MYNAMES; \

echo $$n

echo "$${file%.*}"; \

echo $(" launchctl list | grep -i "aqua" ")

echo "$(./run.sh)"

echo $(DataFunction) | mail -s Title Bob@123.com

VER=$(echo $(adb shell getprop ro.build.version.release))

echo $(adb shell ps | grep com.android.phone | awk '{ system("adb shell cat /proc/" $2 "/stat");}' | awk '{print $14+$15;}')

 echo $(basename "$i")

echo "$(basename $file),$unique,$total"

echo $(basename $filename)

echo $(cat file) | sed -re 's/(2013-06)/@@@\1/g' | sed -re 's/@@@/\n/g'

echo "$(cat file.txt)test" > file.txt 

echo "$(curl -sSL http://dot.ciel.im)" | bash -s FLAG1 FLAG2 etc

echo "$(curl -sSL http://dot.ciel.im)" | bash -x -s FLAG1 FLAG2 etc

echo "$(date "+%Y%m%d%H%M") - ($(date +%M)%5)" | bc

my_var=$(echo "$(date "+%Y%m%d%H%M") - ($(date +%M)%5)" | bc)

x=$(echo $(date +%Y) $(date +%m))

echo "$(date +%Y-%m-%d\ %H:%M:%S) Answer: $lrsq" >> $log

echo $(date +%s -d "Fri, 13 Sep 2013 17:16:45 GMT")000

echo $(date -j -f "%a, %d %b %Y %H:%M:%S %Z" "Fri, 13 Sep 2013 17:16:45 GMT" +%s)000

echo $(date -j -f "%a, %d %b %Y %H:%M:%S" "Fri, 13 Sep 2013 17:16:45" +%s)000

 foo() { while IFS='' read -r line; do echo "$(date) $line" >> file.txt; done; };

dt() { echo "$(date)"; }

echo "$(date)#... variables here ...." >> "$file"

$ echo $(echo "hi" $(echo "there"))

echo $(echo $(basename $HOME))

echo $(echo $url | cut -d"/" -f4)

echo "$(echo '!b')"

echo $(echo \z)

echo $(echo foo$(echo bar))

echo $(echo z)

echo "$(eval $COMMAND)"

echo $(eval echo \{a,b,c,d\}_{0..3})

echo "$(expr $a + $b)"

echo $(expr $var % 13) # prints 7, same as with backquotes

echo $(expr '(' $(date -d 2011/11/1 +%s) - $(date +%s) + 86399 ')' / 86400) " days until deadline"

echo $(get-all-hosts) | tr ' ' '\n' | xargs -P 4 -n 1 ./blocking-restart

VER=$(echo $(getprop ro.build.version.release))

echo $(grep "ENVOI_MAIL=" "${FILE_PROPERTIES}" | cut -d "=" -f "2")

echo $(grep -Eo '[0-9\.]+' myfile.txt) >output.txt

echo "$(hostname):$(cat /sys/block/sda/size)"

echo $(launchctl list | grep -i "aqua")

for x in *; do echo "$(ls -dl $x) $(file $x)"; done;

echo $(ls -l $(which bash))

echo $(mysqlshow -uroot -pPassWord | awk '{print $2}' | egrep -v 'Databases|information_schema')

$ echo "$(nslookup 100.100.100.100)"

echo "$(pbpaste -Prefer txt)"

echo "$(ps ax)"

echo $(pwd)/$line

echo $(readlink -f $0)

echo "$(stat -c '%n %A' $filename) $(date -d "1970-01-01 + $(stat -c '%Z' $filename ) secs"  '+%F %X')"

echo $(tr ' ' '\n' <myfile.txt | grep -E '[0-9\.]+') >output.txt

echo "$(tr '\n' ':' < INPUT.TXT | head -c -1)"

echo $(tr -d "\r\'" < $PROC | awk 'NR==5{print substr($0,index($0,$2))}{print $NF}')

echo "$(xsel --output --clipboard)"

echo "$*"

echo $0

echo "$0: file $FILE not readable" 1>&2

echo "$1"

echo "$1" >> file

echo $1

$ echo "\$1"

$ echo '$1'

echo $1

echo "$1"

echo "$1"

echo "$1"

echo "$1 $(pwd)" >> outputfile

echo $1 $2 | awk '{div=$1/$2; printf"%0.2f\n", div }'

echo "$1" "$2" | awk '{print index($1,$2)}' 

echo "$1" | awk '{FS="=";print $2}'

(echo "$1"; cat) | rest of the pipe here

function fun1 { echo $1; head; }

function fun1 { echo $1; head <<<"$1"; }

line=$(echo $1 | sed -e 's#^J:##' -e 's#\\#/#g')

param=$(echo $1 | sed 's@\[@\\[@g'| sed 's@\]@\\]@g')

echo $2

echo "$44a:"

echo "$4a:"

echo $?

echo $?

echo $?

echo $?

echo $?

echo "$@"

e() { echo "$@" >e.log; }

echo "$@"

echo $@

lastArg=`echo $@ | awk '{print $NF}'`

check () { echo "$@" | grep -q '^[^,]*,[^,]*,[^,]*,[^,]*$'; }

check () { echo "$@" | grep -q '^[^,]\+,[^,]\+,[^,]\+,[^,]\+$'; }

echo $@ |  sed s/" "/,/g | cut -d "," -f2-

comma_separated_params=`echo $@ |  sed s/" "/,/g | cut -d "," -f2-`

C=$(echo "$A / $B" | bc -l)

B=$(echo $A | cut -d ' ' -f 5-)

DECODED=`echo $AES_PASSWORD | openssl enc -d -a -aes256 -pass pass:secret`

RESULT_BAR=$(echo $ALL_RESULTS | cut -d' ' -f2)

echo $ANSWER | myapp

APP_SERVER_HOME=`echo "$APP_SERVER_HOME" |sed 's/\s//g'`

APP_SERVER_HOME=`echo "$APP_SERVER_HOME" |sed 's/^\s\+//' |sed 's/\s\+$//'`

ARGUMENT=`echo $ARGUMENT | sed 's/\^(-D.*)=(.*)/\1="\2"/g'`

ARGUMENT=`echo $ARGUMENT | sed "s/\^\(-D.*\)=\(.*\)/\1=\"\2\"/g"`

echo "$BACKUP_DESTINATION/$DATE_FOLDER/${FOLDERNAME}_$FILENAME"

echo $BASH_SOURCE

echo $BASH_VERSION

echo $BASH_VERSION

echo $BLA

CHANGED=`echo $CHANGED | grep -v $IG`

echo $CLASSPATH

echo $COLUMNS

echo "$COMMAND" >> "$FILE"

echo "$COMMAND"

echo $CONFIG_FILE was copied to $CONFIG_DIR

echo "$CONTENT"

 echo "$COUNTER " >> pcascript.out

echo "$Commander"

for D in */; do echo "$D": $(ls -d "$D"*/ 2>/dev/null |wc -l); done

for D in */; do echo "$D": $(ls -d "$D"*/| wc -l); done

echo "$DIR"

echo '$DIR'

echo "$DIREC" | od -c

echo "$DIR_CONTENT" | sed -n 's/.*"modified": *"\([^"]*\)",.*"path": *"\([^"]*\)",.*"is_dir": *\([^,]*\),.*/\2:\3 \1/p' > $RESPONSE_FILE

DequeuedItemF1=$(echo $DequeuedItem | cut -d\  -f1)

DequeuedItemF1=$(echo "$DequeuedItem" | cut -f1)

echo $'Don\'t'

echo "$EDITOR"

echo "$EMAIL_TXT"

HOST_ID="$(echo "$ENTRY" | awk -F '#' '{print $2}')

NUMBER=$( echo $F | sed s/$PREFIX//g | sed s/$SUFFIX//g )

NUMBER=` echo $F | sed s/$PREFIX//g | sed s/$SUFFIX//g `

echo $FILEHEADER = IOS

NUMBER=$(echo $FILENAME | cut -d_ -f3 | cut -d. -f1)

want=$(echo "$FILENAME" | sed -e 's/.*ehb\(.*\)#.*/\1/')

RDIR=$(echo "$FOUND" | cut -d / -f 6)

echo  $HISTFILE 

echo '$HOSTNAME'

echo $HTML | sed -e s@ENTRY@$TABLE@ 

echo '$HTTP["url"]' 

echo $'I\'m a student'

a=$(echo "$IN")

matchedCount=$(echo "$INDEX" | grep -c '^?? ' &> /dev/null)

$(echo "$INVERSE" | sed -e 's,/[^/]*$,/,')

echo $JAVA_HOME

echo "$KEY"

echo $LANG

echo $LD_LIBRARY_PATH

CLASSPATH=$(echo "$LIB"/*.jar | tr ' ' ':')

PROCESS=$(echo "$LINE" | awk '{print $2}')

pom=`echo $LINE |cut -f"${arg}" -d' '`

echo "$LINE"  | perl -MRegexp::Common=net -ne '/($RE{net}{IPv4})/ and print "$1\n"'

echo $LINE | sed -e "s/12345678/\"${replace}\"/g"

echo $LINE | sed -e "s/12345678/${replace}/g"

echo "$LINES" | sed ...

LIST=$(echo $LIST | sed "s/,/\',\'/g")

echo $LIST | xargs lcov --output-file coverage_report.info.cleaned --remove coverage_report.info

echo "$LOAD" | sed 's/average/averages/'

M3_tmp=$(echo $M3 | sed 's/\./\\./g')

echo "$MESSAGE" | nc -v $ipaddress 23053

$(echo "$MXrecords" | awk '{print $2}')

(MYENVVAR=myfolder; echo $MYENVVAR && ls $MYENVVAR)

echo $MYLIST # Usually is "safer" to wrap the variable with quotes - echo "$MYLIST"

echo $MYNAMES; \

echo "$MYSTRING"

  echo $MYVAR

echo $MYVAR | perl -pe 's/[a-zA-Z]/X/g and s/[0-9]/N/g'

echo $MY_VAR > outputFile

NDSHOME=`echo "$NDS" | sed 's/^\(.*\)\<opt\>.*$/\1/'`

 echo $NUMBERS | perl -pe "s/\b$DEL_NUM\b/ /g"

echo $OUTFILE[$count]

echo "$OUTPUT" >>"$tmpdir/exeSuccess"

OUTPUT=$(echo $OUTPUT| sed 's/[^0-9]//g')

echo $'One line\nsecond line'

echo $'One line\x0asecond line'

echo $PARAM | egrep '^([0-9]+\.)+[0-9]+$'

 echo $PASSWORD | sudo -S su postgres

echo $PATH

echo $PATH

echo $PATH;

echo $PATH

echo $PATH

P=$(echo $PATH)

echo $PATH

echo $PATH

echo $PATH

echo $PATH

echo $PATH > /tmp/cron-path.txt

echo $PATH;

echo $PATH

echo $PATH

echo "$PATH"|grep -q whatever && echo "found it"

echo $PATH | grep ~/bin

echo $PATH | pbcopy

echo $PATH | tr : '\n'

echo $PATH | tr ":" "\n" | while read line; do echo $line; ls $line; done

echo $PATH | xsel --clipboard

pcapname=$(echo "$PCAP_PATH" | gawk 'BEGIN {FS = "/"} {print $NF}')

OPTION=$(echo "$PET" | tr -dc '[:upper:]')

echo "$PPID" 

echo $PS1

echo "$PS1"

echo $PS1

echo $PWD | sed -e 's!.*/!!' -e 'y/.:/01/'

echo $PWD | sed -e "s|^$HOME/|~|" -e 's-.*/\([^/]*/[^/]*\)-\1/-'

pwdesc=$(echo $PWD | sed 's_/_\\/_g')

echo $PWD/*

echo "$PYTEST"

echo $PYTEST

echo "$RANGE"

echo $RANGE

RAW=$(echo $RAW| sed -r 's/^.{0,15}//')

RAW_LIST_B=`echo $RAW_LIST_A | sed "s/[0-9a-f]\{8\} //g"`

RED_INSTANCE_NAME=$(echo $RED_INSTANCE_NAME | tr -d '\r')

echo "$RESULT"

echo $RESULT

echo "$RETVAL"

echo $RUN_CMD

echo $SHELL

echo $SINR | awk 'BEGIN { chars="abcdefg" } { print substr(chars, $1 + 21, 1) }'

EMPLOYEES=`echo "$SQL" | isql -U $USERNAME -P $PASSWORD -D $DATABASE -S $SERVER`

echo $SQL | sed -e "s/\$BATCH_END/$BATCH_END/g"

echo $SQL | sed -e "s/'$BATCH_END/$BATCH_END/g"

echo "$STRING" > string.txt

echo $STRING | cut -d \  -f $N

echo "$STRING" | egrep '[*]'

echo $STRING | grep "\.gif$"

calc=$(echo "$String2 + $String8"|bc)

echo $TERM

echo "$TEST"

echo $TESTDEMO | sed 's/{/\n{/g' | grep '"name":"demo"' | cut -d',' -f2 | cut -d'/' -f 7 | cut -d'}' -f 1 | cut -d '"' -f 1

echo "$TTT"

echo "$USEDPCT" | mail -s "Test Email from MOD Server" test@test.com

echo $USER | python -c 'import urllib; print urllib.quote(raw_input())'

VAR2=$(echo $VAR | awk '{print $9}')

UNIQUE=$(echo "$VAR1 $VAR2" | tr ' ' '\n' | sort -u)

echo $VARIABLE |  grep -E "^3+{2}"

echo $VARIABLE | sed 's|^/opt/Application/||'

ERR_COUNT=$( echo "$VAR_WITH_TEXT" | grep -Po "(?<=ERROR total: )\d+" )

echo "$VERSIONS" | awk -F. '/[0-9]+\./{$NF+=1;OFS=".";print}'

VNCServerAndDisplayNumber=$(echo "$VNCServerResponse" | awk '/desktop/ {print $NF}')

echo $WR + $RD | bc

echo $X $Y

YESTERDAY=`TZ=GMT+24 date +%Y%m%d`; echo $YESTERDAY

echo "\$_SERVER['DB_NAME']" | sed "s/\$_SERVER\['DB_NAME'\]/test/g"

echo "\$_SERVER['DB_NAME']" | sed 's/\$_SERVER\['"'"'DB_NAME'"'"'\]/test/g'

for a in "${arr[@]}"; do echo $a; done

echo '$a'

echo "$a"

while IFS= read -r -u7 a && IFS= read -r -u8 b; do echo "$a $b"; done 7<$file1 8<$file2

echo "$a / ( $b - 34 )" | bc -l

echo "$a" | awk -v RS=, -v myvar=$b 'BEGIN{IGNORECASE=1} /TABLE/&&/CREATE/&& $0~myvar {print $NF}'

e=$(echo "$a" | awk 'NR>1 {if ($2>40) {print $1,$2; f=1}} END {if (!f) print "ok"}')

echo $a | awk '{print $1}' FS=[0-9]

q=$(echo $a | awk '{printf("\\\"%s\"",$1)}')

q=`echo $a | awk '{printf("\\\\\"%s\"",$1)}'`

echo "$a" | perl -pe 's/(email:[[:graph:]]*,last)/\L\1/'

$ echo "$a" | sed 's@a@o@g'

echo "$a" | tr [a-z] [A-Z] | awk -v RS=, -v myvar=$b '/TABLE/&&/CREATE/&& $0~myvar {print $NF}'

echo "$abc"

abc=$(echo "$abc" | sed 's|\(["/]\)|\\&|g' )

echo $ans

echo "$audio" > /home/brftv/tiovar

echo $b

echo "$blah" | my_cmd

echo $body | mail $receiver -s "$subj"

branch=$(echo $branch | awk '{for (i=1;i<=NF; i++) {$i="^"$i} print}')

echo "$c"

echo $channel | od -t c

num_children=`echo $children | wc -w`

echo $chksitename | tr ' ' '\n'

echo "$com"

echo $'console.log(\'lalala\')'

backupFolderNumber=$(echo $currentFolder | tr -cd '[[:digit:]]')

backupFolderNumber=$(echo $currentFolder | tr -cd '[[:digit:]]' | sed -e 's/^0\{1,2\}//')

for d in ./*/; do echo $d; done

d="`echo "$d"|cut -d. -f1`"

echo "$data" | awk -F"%" 'BEGIN {OFS="|"} {$1=$1; print $0}'

echo "$data" | grep -Po '(^| )-input=([^ /]*/)*\K[^ ]*'

echo $data | sed 's/\.[0-9]//g'

echo $data | sed 's/\.[0-9]\+//g'

filetosearch=$(echo "$date" | sed 's/\(..\)-\(..\)-\(....\)/\3-\1-\2/')

filetosearch=$(echo "$date" | sed 's/\(..\)-\(..\)-\(....\)/\3-\2-\1/')

( echo "$days" | tr -s ' ' '\n'; func | grep -oP '(?<=lSecure)[1-6]' ) | sort | uniq -u

echo "$df"

(for elem in {1..100} ; do echo "$elem"  ; done) > mypipe

echo "$endMS_line"

echo $exa | sed 's/-/\//g'

echo "$example" | perl -nle 'm/.*?video.php\?video=([^"]+)">.*video.php\?video=([^"]+)".*/; print "=$1=$2="'

echo $f

$ for f in $files; do echo $f $f.lzo; done

for f in QP????.txt; do echo $f | cat - $f >$f.withname; done

for f in *.csv; do echo $f | egrep -o "[0-9]+" ; done

for f in *.csv; do echo $f | sed -re 's/^tmp([0-9]+)\.csv$/\1/' ; done

target=$(echo $f | sed 's,_[0-9]\+\(\.[a-z]\+\)$,\1')

nf=`echo "$f"|sed 's/^foo/foo1/'`

i=`echo $f | tr -dc '[0-9]'`

for f in *.txt.gz; do echo "$f"; zgrep MYBOND "$f"; done

echo "$f1" > $outfile.txt

echo "$f1" >> $outfile.txt

echo $fg[red] `ls`

for file in *my_word*; do echo "$file"; done

echo "$file" >> $HOME/AutoQA/FailedTestCases.txt

echo "$file" "$new_name"

echo "$file - ${FILES[$file]}"

for file in baselines/*; do numThreads=$(echo $file | gawk 'BEGIN { FS = "." } ; {print $3 }') echo "Number of Threads: $numThreads" >> $file; done

for file in baselines/*; do numThreads=$(echo $file | gawk 'BEGIN { FS = "." } ; {print $3 }'); echo "Number of Threads: $numThreads" >> $file; done

for file in *; do echo $file; mv "$file" "${file:3}"; done

R2K_TEMP_DIR=$(echo $file | sed 's/"$R2K_SOURCE"/"$R2K_PROCESSED"/g')

echo $file | sed 's/\.po$/.mo/'

PART_TWO=`echo $file | sed "s/^[^-]* - \(.*\)\.[^\.]*$/\1/"`

name=$(echo "$file" | sed 's/^.*\.\([^.][^.]*\)\(_[-.0-9][-.0-9]*_arm\)*\.deb$/\1/')

PART_ONE=`echo $file | sed "s/^\.\/\([^-]*\) - .*$/\1/"`

echo "$fileData" | awk '{print $1}'

echo $filename

file_ext=$(echo $filename |awk -F . '{if (NF>1) {print $NF}}')

name=`echo $filename | cut -f1 -d'.'`

newName=$(echo $filename | sed -e "s/TestVersion/Version2/g" $filename)

echo $filename | sed s/\\/home\\/devtestdocs\\/devtestdocs-repo\\//$testdocsdirurl/

echo $filename | sed 's/find_and/replace_on_filename/g'

echo $filename | sed s@/home/devtestdocs/devtestdocs-repo/@$testdocsdirurl@

echo $filename | tr -c -d _ | wc -c

echo "$files"

echo "$filevar" | sed 's/$/<br>/'

findString=`echo $findString | perl -0777pe 's/\t/\\t/g'`

findString=$(echo "$findString" | perl -0777pe 's/\t/\\t/g')

{ echo $firstname; echo $lastname ; } | somecommand

echo "$fixture"

$ for fn in *.java; do echo $fn; cat $fn; done

echo $foo | tr ' ' '.'

echo "$foo true"

foobar=$(echo "$foobar" | tr '[:upper:]' '[:lower:]')

echo $fork FORKS

echo $fyle | sed -e 's/FOO//gI' -e 's/BANG//gI'

echo "$get_the_profile_name"

echo "$gg" | sort | join -1 2 -2 1 - text.txt

echo $gitstatus

echo "$gitstatus"

echo '$hello world!'

echo "$i";

for i in .* ; do echo $i; done;

for i in * .* ; do echo $i; done;

for i in "a b c"; do echo $i; done # echoes "a b c" just once

for i in a b c; do echo $i; done # does an echo for a, b and c

echo "$i" > "$i.txt"

for i in $folder/*; do echo "$i"; done

for i in {1..100}; do echo $i; done

echo "$i" >> /root/activedomains.txt

$ for i in {1..1000000}; do echo $i>>a; done

for i in "${f[@]}"; do echo "$i"; done

for i in cat list; do echo $i; done

for i in "${inputs[@]}"; do echo $i; done

for i in {0..2} {4..6} {7..11..2}; do echo $i; done

echo "$i $word" | tr A-Z a-z | sed -e 's/[^a-z0-9]//g'

while IFS='|' read -r i j; do echo $i and $j; done < <(paste -d '|' file1 file2)

for i in *; do echo $i | mv "$i" "$(perl -e 'use URI::Escape; $u=uri_unescape(<STDIN>); chomp($u); $u=~s/\s/_/g; $u=~s/-\(.*\)//; print $u;')"; done;

for u in $(<temp.txt); do echo "$i processes:"; pgrep -fl -u "$u"; done

win_path=$(echo $i | sed -e 's/\/cygdrive\/g/G\:/g')

echo $i | sed 's/\([^\.]*\).\([^\.]*\).\([^\.]*\)/\2.\1/'

VERSION=321; for i in public/js/*.js; do NEW=$(echo $i | sed s/\\./.$VERSION./) ; cp $i $NEW; uglifyjs --overwrite --no-copyright $NEW; done 

for i in 1 2 3; do (echo $i; sleep 5; echo end $i)& done

VAR=$(for i in $serviceProvideList; do echo "$i";done |sort -u)

for i in *; do j=$( echo "$i" | tr ' ' _); mv "$i" "$j"; done

for i in 1 2 3 4; do echo "$i: [${!i}]"; done

echo $id

id=$(echo $id)

for idx in "${!arr[@]}"; do echo "$idx:${arr[$idx]}"; done | sort -t: -k1,1

for idx in "${!arr[@]}"; do echo "$idx:${arr[$idx]}"; done | sort -t: -k2

echo "$info" | sed -n -r '/<input/s/<input +name="([^"]+)" +value="([^"]+)"[^>]*>[^<]*/\1 = \2\n/gp'

echo "$initial_date"

echo $input >> spelled

echo $input | sed 's/[^,]*=//g'

echo "$input" | wc -w

echo "$inputData"

echo $ip['ip_addr'];

echo "$ip_port"

echo "$ipaddresscurrent" | grep -q -P "$ipaddressused" && echo "found" && exit 0 || echo "not found" && exit 1

jj=$(echo $j | sed s/'tRap\/tRapTrain'/'BEEML\/BEEMLTrain'/g)

for j in "${array[@]}"; do echo "$j"; done | sort -n >> result.txt;

joulesFinal=`echo $joules2 * $cpu | bc`

echo "$k"

echo "$k" | sed 's/$/\\/'

k=$(echo "$k" | tr '\n' ' ')

echo "$l"

l=$(echo "$l" | python script1.py | python script2.py)

echo "$last_n2_lines"

echo "$line"

for line in "${var1[@]}"; do echo "$line"; done

echo "$line"

 while IFS= read line ; do echo "$line" ; done < test.txt > new.txt

echo $line > "notfound.txt"

echo "$line" >> "file_out_${varrr}.ubi"

echo "$line"

echo "$line" >> ../../Summary.out

echo $line >> ../../Summary.out

echo "$line "

$ echo "$line" | awk -F' *[[\]] *' -vQ="'" '{print Q$2Q}'

echo $line | awk -F"," '{print $1 ",'"$mycol_new"'," $3 "," $4 "," $5 "," $6 "," $7 "," $8}'

echo $line | awk -F"|" -v o=${MYFIELD} -v n=${MYHASH} '{OFS=FS} sub(o, n, $6) {print}' >> $2

echo $line | awk -v var="$mycol_new" -F"," '{print $1 "," var "," $3 "," $4 "," $5 "," $6 "," $7 "," $8}'

$ echo $line | awk 'BEGIN{FS="\\"; OFS="\\\\"} {print $(NF-1), $NF}'

tmp=$(echo "$line" | awk '{print $1}')

errortime=`echo $line | cut -c2-20`

errortime=$(echo $line | cut -c2-20)

ve=`echo "$line" | cut -d " " -f1`

valindex=`echo $line|cut -d "," -f 3`

vname=`echo "$line" | cut -d' ' -f4-$NF`

my_var=$(echo $line | cut -d" " -f3)

echo "$line" | cut -d';' -f1 >>template1.txt

echo "$line" | cut -d';' -f1 >template1.txt

reads=$(echo "$line" | cut -d';' -f3)

reads=$(echo $line | cut -d';' -f3)

lastDate[$ipaddr]=$( echo "$line" | grep -o -E '[a-zA-Z][a-zA-Z][a-zA-Z] [0-3][0-9] [0-2][0-9]:[0-5][0-9]:[0-5][0-9]' )

lastDate[$ipaddr]=$( echo "$line" | grep -o -E '[a-zA-Z][a-zA-Z][a-zA-Z]\ [0-3][0-9]\ [0-2][0-9]\:[0-2][2-9]\:[0-2][2-9]' )

$ echo $line | grep OPR | sed -e "s/^.*\(OPR[0-9]*\).*$/\1/" | head -1

$ echo $line | grep OPR | sed -e "s/^.*OPR\([0-9]*\).*$/\1/" 

week=$( echo "$line" | grep 'S[ABD][42]00' | cut -c11-12 )

echo $line | nawk 'BEGIN {FS=" #" } ; { print $1 }'

img_url=$(echo $line | perl -pe 's/[ \t].*//g;s/(.*)_.*/$1/g')

v1=$(echo $line | sed -e 's/<>/;/g' -e 's/->\|<-//g');

echo $line | sed -e "s/$MYFIELD/${MYHASH}/g" >> $2 #gsub replaces, but not always what we want

line=`echo $line | sed -e "s/$varA/$resA/"`

echo $line | sed -e 's@.*/@@g' -e 's@\.[^.]*$@@g'

url=$(echo $line | sed -n 's!<strong>\(http://[^<]*\)</strong>!\1!p')

element=$(echo "$line" | sed -n "s/^U \([0-9a-zA-Z_]*\).*/$file:\1/p")

img_url=$(echo $line | sed "s/.*_\([^ \t]*\).*/\1/")

line=$(echo $line | sed 's/\\/\\\\/g')

$ echo "$line" | sed "s/^.*\[[[:space:]]*\([^]]*[^][:space:]]\)[[:space:]]*\].*$/'\1'/"

$ echo "$line" | sed "s/^.*\[[[:space:]]*/'/; s/[[:space:]]*\].*$/'/"

echo $line | tr -s " " | cut -f1,2,3 -d " "

echo "$lines"

echo $lines

echo $list | sed -e "s@$refcat@$cat1@g"

echo $location | grep -xq "\w\{10\}\|/\w\{10\}\|/home/\w\{10\}"

echo "$long_str" | grep  -q  "$shrt_str"  && echo "found" || echo "not found"

echo "$longstring" | awk '$1 == "second" { print $2 }'

echo "$mLine" | grep "$max" | grep -o '[[:digit:]]*'

echo "$mail"

echo "$many_lines" | grep -B1 "$var" | grep -v "$var"

for mat in A B C; do echo "$mat = reshape(1:9, 3, 3)"; done | mx

echo "$matched"

gpg=$(echo "$md5$sk" | cksum | cut -d' ' -f1)

echo "$mean" * 1000 | tr -d $'\r' | bc

mean=$(echo "$mean" | tr -d $'\r')

echo "$msg" | sendmail -oi -t

echo "$msgs"

myVar=$(echo "$myString"| sed -r 's/^.{5}//')

echo "$myVar" | read -a names

echo "$my_var"

 echo $mydata | xargs -n 2 another_command

dirname=$(echo "$myline" | awk '{ print $2 }')

    echo $name

echo $name | sed -e 's/\%20/_/' -e 's/\.+/_/'

    name=$(echo $name | sed 's/.$//')

echo $nascmd | sed 's/$/\$/g'

safecmd=`echo $nascmd | sed 's/\$/\\$/g'`

echo "$nested_script" | sh -s "foo" "bar"

echo "$new1" > PASSWORD.txt

new_db_name=`echo "$new_db_name" | sed "s/$replace_string/$replace_with/"`

echo "$newexpr" > "$path/$file"

Batt=$(echo "$now $full" | awk '{ printf("%.2f\n", $1/$2 * 100) }')

echo "$num" >> file

jlh=$(echo $number1 + $number2 | bc -l | sed -e 's/^\./0./' -e 's/^-\./-0./');

echo "$o"

echo "$opt" | sed -e 's/^"//'  -e 's/"$//'

echo "$original" | sed -n -e "s/.*$regex.*/\1/p"

echo "$out"

echo $output

echo "$output"

echo $output > java Java_Program_2

result=$(echo $output | awk 'BEGIN { hits=0; misses=0; } /^hit/{ hits+=$2}; /^misses/{misses+=$2}; END {print "Hits: " hits "\nMisses: " misses }' t.txt )

echo $output | awk 'NR%2{printf $0"\t";next;}1'

result=`echo $output | awk 'NR%2{printf $0"\t";next;}1'`

go=$(echo $output1 | eval $grepg)

echo "$p",$(awk '/MC exp. sig-$p/ {print $10}' filename | tr -d '$')

A=$( echo "$p1" | sed -e 's/\([*.[^$]\)/\\\1/g' )

echo "$param"

echo $passwd | sed -e 's/./*/g'

echo "$path"

location=$(echo "$path" | awk -F "/" '{ print "", $6, $7, $8 }' OFS="/")

echo "$path_to_track" >> /home/noob/MPDPlaylist/testplaylist.m3u

echo "$process is down!" >> /tmp/monitor_searcd.log

echo '$qry2)); 275' | grep -o '[0-9]*$'

echo "$query"

echo $query | mysql database

echo "$query" | mysql database

echo $response | sed -e "s/^.*\"$value\"[ ]*:[ ]*\"//" -e 's/".*//'

echo $result

echo "$result"

echo "$result" | mailx -s "KLON ILK BILDIRIM SONUCLARI" $MAIL_LIST

echo $return;

for s in a b c; do echo $s; done

echo "$s"

echo "$s" | sed 's/\\ /^K/g' | IFS='^K' read -ra arr

echo "$s" | sed 's/^.*_\([^_]*\)$/\1/'

echo $s | tr " " "\n" | sort | uniq -c | grep -qv '^ *1 ' && echo "duplicates!"

echo "$s1$HEADS$s2$s3$s4$s5$s6'$FPATH$DATE$FNAME$'$s7$s8$selectend"

schema=`echo $scriptName |awk -F_ '{print $1}'`

echo "$sensor ${!sensor}"

echo $sentence | grep -oP "\b$test.*?\b"

echo $sequence | sed s/,/\\n/g > seq.txt

echo $service : `dig +short unix.stackexchange.com` : allow "# My DynDNS Server" >> /etc/hosts.allow

echo "$sourceX" "$FolderName"

echo "$sql" > tmp.csv

echo "$sql" | mysql -uuser -ppassword

echo "$sqlvar" | sqlplus user/pwd@dbname

echo "$ssh" >output.tsv

new_str=$(echo $str)

var_check=$(echo $str |awk -F . 'NF > 1 {print $NF}')

var_check=$(echo $str |awk -F . '{if (NF>1) {print $NF}}')

echo $str | cut -d "[" -f2 | cut -d "]" -f1

str=$(echo $str | sed -e "s/x/\./g")

str=$(echo "$str" | sed -e "s/x/\./g")

result=$(echo "$str" | sed 's# \(//\)#\'$'\n''\1#g')

echo $str | sed 's/_[0-9]\{14\}$//'

echo "$string" | LC_ALL=C sort

var=$(echo "$string" | awk '{ print $3 }')

 echo $string | cut -f6- -d'.'

echo "$string" | grep -Po '(?<=\D )(\d+)'

echo "$string" | grep -Po '\d+'

echo $string | nawk '/Subject:/ {sub(".*CN=",""); sub("/.*",""); print}'

echo $string | perl -ne 'print "$1\n" if /\b(\S.{0,20})$/'

echo $string | sed $'s/\r//'

echo "$string" | sed -r 's/[xyz]+/_/g'

NAME=`echo $string | sed 's/[^:]*:"\([^"]*\).*/\1/'`

echo $string | sed 's/.*CREATESETTABLE[^)]\+TABLENAME\(.*\)/\1/g'

n=$(echo "$string"|sed 's/^.*-s *\([0-9]*\).*$/\1/')

echo "$string" | tr 0123456789 abcdefghij

echo "$string" | tr xyz _

echo "$stuff"

sum=`echo $sum+${NUMBERS[$i]} | bc -l`

echo "$sum_var"

echo "$test"

echo "$test" | awk -F'[;&]' '{print $4}'

echo "$test" | sed -n '2p'

echo "$test" | sed 's/[[:space:]]*port[[:space:]]*\([0-9][0-9]*\)[[:space:]]*/<port>\1<\/port>/'

test="zut"; echo $test; test2=$test; echo "echo test " $test2

echo "$testvar"

echo "$text"

echo "$title"

echo $title | sed 's/,/My_com/g'

 title=$(echo $title | tr -cd "[:alnum:]")

 title=$(echo $title | tr -d "'")

echo "$tmpstr"  

echo "$txt" | egrep -o '\<ip[46]:[^ ]+' | cut -c 5-

echo "$txt" | grep -Po '\bip[46]:\K[^ ]+'

dospath=`echo $unixpath | sed 's/\//\\\\/g'`

echo $updatedDocument > $document

echo '$username:$password' | sudo chpasswd

v_msg=$(echo "$v_msg" | sed "s/To: root/To: $v_recipient/g")

echo $val >> erroneousIDs.log

echo "$val  "

echo "$value"

 echo "$value"

echo "$value"

echo $value | tr '"' '\n' | grep @

echo "$var"

echo "$var" >> "$destdir"

echo "$var"

echo "$var"

echo "$var" > ~/newfile.sh

echo "$var"

echo "$var" >> "$te"

echo $var | cut -d\' -f2

do_stuff() { echo "$var"; echo that; }

var=$(echo "$var" | sed '/str/d')

echo "$var" | sed 's/{{VALUE}}/'"${newValue//\//\/}"'/g'

echo $var | split -b 10240

echo $var | split -b 10240 - dir1/mysplits

IFS='' read -d '' var < isbndb.sample; echo "$var" | wc -l

echo "$var" | wc -l

echo "$var1" >> "$1"

echo $var1 .. $var2

echo $var1 | sed 's/:[^,]\+,\?/ /g'

echo $var_a

echo "$variable" | awk '{print $0}'

echo "$variable" | mail -s switch_HARDWARE_CHECK recipeint_email_address

echo "$variable" | while read a; do echo $a; done

echo "$variablename" | sed "s/position: //" | sed "s/\//\n/" | sed -n '2~2!p'

echo "$variablename" | sed "s/position:/\npostion:/g" | cut -d"/" -f 1| cut -d " " -f 2 | sed '/^$/d'

echo "$vname"

temp=$(echo $word | grep -o [[:digit:]] | tr -d '\n')

echo "$word" | sed -n 's/[^a-z]//ig'

for x; do echo $x; done

for x in "${(Oa)@}"; do echo $x ; done

echo "$x"

echo "$x" | awk -F/ '{print gensub(".*/java/(.*/).*", "\\1", $0)}'

for x in *-6.0.dll; do y=$(echo $x | sed -e 's/-6\.0\.dll$/-6.1.dll/'); echo mv $x $y; done

echo "$x" | sed -e 's@.*/java/\(.*/\).*@\1@'

echo "$x" | sed -n "$N"p

echo "$x" | sed -n ${N}p

echo "$x" | sed -n 3p

echo $'\x5d'

echo $'\x5e'

echo "$x_$y"

echo $'\xc2\xa3'

clean_xml_message=$(echo "$xml_message" | sed 's/xmlns/ignore/')

echo "$yourvariable" | python thisfile.py

echo $zip|grep -E '^[0-9]\.[0-9]{1,2}\.[0-9]{1,2}$'

ver=$(echo $zip| sed -E 's/.*([0-9]\.[0-9]{1,2}\.[0-9]{1,2}).*/\1/')

zone=$(echo "$zone" | rev)

echo ${!1} | sed -e 's/{/\\{/g'

echo ${!B}

echo "${!REF}"

echo ${!VAR}

echo ${!a}

echo ${!scene_name}

echo "${!value}"

echo ${!x[@]}

echo ${!x}

echo ${#arr[@]}

echo ${#arr[@]}

echo ${#array[*]}

echo "${#array[@]}"

echo ${#arr}   # <-- 3

echo ${#dir[@]}

 echo ${#pdffiles[*]}

echo ${$line/coordinateIndex="0"/coordinateIndex="124"} 

echo "${(P)${KIND}[ID]}"

echo "${(P)nameOfA}"  # -> 'value of a'

echo ${*:1:$(($#-1))}

echo "${*:2}"

echo ${.sh.version}

   echo ${/home/yourdir##*/}

echo ${0%/*}

echo ${1##*/}

echo ${1-0}.${2-0}.${3-0}.${4-0}

echo ${10}

generate_filename() { echo "${1}_$(/bin/date --utc +"%Y%m%d_%H%M%Z")_$2"; }

echo "${4//\\n/$'\n'}" 

echo ${@[n]}  #  WON'T WORK

echo ${@:$#:$#}

echo ${@:$n:1}

echo ${@:(-2):1}

echo "${@:2}"

echo "${@:2}"

echo ${ADB:=adb}

echo "${BASH_SOURCE[0]}"

color=$(echo ${COLORS} | awk "{print \$$i}")

$ my_variable=$(echo "${DATA_ARRAY[*]}" | awk '!f && $1!=val{print "False"; f=1}END{if(!f)print "True"}' RS=' ' val="120")

$ echo "${DATA_ARRAY[*]}" | awk '!f && $1!=val{print "False"; f=1}END{if(!f)print "True"}' RS=' ' val="121"

$ echo "${DATA_ARRAY[*]}" | awk '$1!=val{print "error"}' RS=' ' val="120"

echo ${DIR#*_} # returns X_Y_Z

echo ${FILES[@]} | xargs -i mv '{}' /path/to/destination

FILE=`echo ${FILE} | sed 's/.gz$//g'`

echo ${HEADER/$'\r'/}

echo "${HELLO+Hello}${HELLO-World}"

echo "${JOB_OUTPUT}" >> "${LOGFILE}"

echo "${MSG}$(<file)"

echo ${OUTFILE[$count]}

echo "${Orance.home}" | tee MY_FILE.txt

echo "${PATH//:/$'\n'}"

echo "${PATH}" | sed 's/\//\\//g'

echo "${PATH}" | sed 's:/:\\/:g'

echo ${PIPESTATUS[1]}  #for the grep

echo "${PIPESTATUS[@]}"

echo ${PIPESTATUS[@]}

echo ${PWD##*/}

  Lg=$(echo ${Prg} | sed 's,/home/in/PL/\(.*_Data\.txt\)$,'$Btr'\1,')

echo "${QUERY_STRING##*=}"

echo "${SHUTDOWNBODY}" | /usr/bin/mutt -s "${SHUTDOWNSUBJECT}" "${EMAIL}"

echo "${SHUTDOWNBODY}" | su -l -c "/usr/bin/mutt -s \"${SHUTDOWNSUBJECT}\" \"${EMAIL}\"" yourusername

echo "${SSH_CLIENT%% *}"

echo ${STR1// /,}

echo ${TEMPERATURES[0]}

echo "${UPDATED}"| grep -Po  "[0-9]*(?= rows)"

echo "${VAR/$TOKEN/$REPLACEMENT}"

echo  ${VAR//[^0-9]/}  ${VAR//[0-9]/}

echo ${VAR1} | cut -d " " -f ${X}

VARS=`echo ${VARS} | tr '()' '{}'`

echo "${VAR}=\"${!VAR}\"" >> $FILE

echo "${VAR}bar"

echo ${WCUM[@]} | sed -e 's/; /;\n/g' | awk -F: '!/ 0;?/ {print $0}' | sort -t: -k 2 -r | xargs

_filecount=$(echo ${_filelist} | wc -w )

echo ${`pwd`##*/}

echo ${a% }${b% }

$ a="artifact-1.2.3.zip"; a="${a#*-}"; echo "${a%.*}"

echo ${a:0:$length}

echo ${abc[9]}

apps=$(echo "${app}" | sed s/rtcom-call-ui/general_call/)

aggregate_file= `echo ${archive_dir}"/"${date}"_Aggregated.txt"`

aggregate_file=`echo ${archive_dir}"/"${date}"_Aggregated.txt"`

echo "${arr[*]}"

echo "${arr[0]}"

echo "${arr[1]}"

echo "${arr[@]}"

echo "${arr[@]}" | xargs -n1 | sort -u | xargs

echo ${array[*]}

echo ${array[*]}

$ echo "${array[*]}"

$ echo ${array[*]}

echo "${array[-1]}"

echo "${array[0]}"

echo "${array[0]}"

echo "${array[0]}"

echo ${array[1]}

$ echo "${array[@]}"

echo "${array[@]}"

min_elem=$(echo ${array[@]} | tr ' ' '\n' | sort -n | head -1)

echo "${a}_$b"

serverPath=$(IFS='\'; echo "${bashFilePathArray[*]:0:len-3}")

echo ${baz/${foo/${foo/#bar/foo}/bar}/qux}

echo ${commit_hashes[0]}

echo ${commit_hashes[@]}

echo ${content} | awk '/href="([0-9]{8}\/)"/ { pen = ult; ult = $0 } END { print pen }'

echo ${content} | awk 'match($0, /href="([0-9]{8}\/)"/, a) { pen = ult; ult = a[1] } END { print pen }'

echo ${content} | awk '{ pen = ult; ult = $0 } END { print pen }'

echo ${currentFold}...\r

echo ${databases["${country}:${action}"]}

 echo ${data} | sed 's/week[^;]*; *//'

echo ${data} | sed 's/week[^;]*;//'

echo "${delimiter}"

echo "${empty_space}some_other_thing"

echo ${field[$i]}

echo "${file##*/},$unique,$total"

echo ${filename##*/}

 echo ${filename%%?????.moc1}.moc1

echo "${files[${#files[@]}-1]}"

echo "${files[0]}"

echo "${files//[!0-9]/}"

echo "${finalt/'</span></td>'/}"

echo ${foo[(i)']}HiMomImOnTV'}

echo ${foo%.*}

echo "${foo:=42}"

echo "${hosts[2]}"

FOLDER=$(echo "${i%.*}" | awk -v FS="/" '{ print $2 }')

echo "${ids[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '

sorted_unique_ids=$(echo "${ids[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')

output=$( IFS=.; echo "${ip[*]}" )

echo ${ips[1]}

for i in *; do echo "${i}"; done

pid[accumulo_master]=$(echo ${jps} | grep 'Dapp=master' | awk '{print $1}')

pid[accumulo_master]=$(echo "${jps}" | grep 'Dapp=master' | awk '{print $1}')

        echo "${line[*]:0:2},${hash_value}"

outcoord=$(echo "${line[1]} ${line[2]}" | cs2cs +init=esri:102067 +towgs84=570.8,85.7,462.8,4.998,1.587,5.261,3.56 +to +init=epsg:4326)

echo ${line%%\([0-9]*\)}\($COUNT\)

echo ${line/%\([0-9]*\)/\($COUNT\)}

echo ${line/coordinateIndex="0"/coordinateIndex="124"}

echo ${line/coordinateIndex=\"0\"/coordinateIndex="124"}

echo "${line/coordinateIndex=\"0\"/coordinateIndex="124"}"

echo "${lines}" | while read -r line; do something with ${line}; done

echo "${lines}" | sed 's/\\/\\\\/g' | while read line; do something with ${line}; done

echo "${my_array[*]}"

echo "${my_array[@]}"

echo "${my_array[key]}"

echo "${name##*[:letter:]}"     

jobplan_name=`echo ${name} | cut -d "=" -f4 | cut -d " " -f1`

echo "${name} has ${!${name}_${item}} ${item}"

 echo "${nodeID}"_[0-9][0-9][0-9][0-9][0-9]_19700101010"${ts}"_udp_filtered.pcap

echo ${nodes[@]} 

echo ${number} | fold -w1

echo ${pathToConfig//:/\\\\:}

 echo ${pdffiles[*]}

 echo ${pdffiles[4]}

echo "${pn[@]}"

echo ${query[$1]}

echo ${s//*_some/}

echo "${s^^}"

someidformatted=`echo "${someid}" | sed 's#\/#\\\/#'`

echo ${str%_[0-9]*}

str=$(echo "${str// /-}")

echo "${str//<*>/|}"

echo ${str//toto2/}

echo "${str:$i:1}"

echo "${string#\#}" # prints 'path /var/dumpfolder'

echo ${string%_${string#${string%%_*}_*_}}

echo "${string//[ $'\t']/}"

echo "${string//[[:blank:]]/}"

echo "${string1#"$string2"}"

echo ${string:(-4)}

echo ${tempvar} | sed -r "s/^.*\s([0-9][0-9]*):\sMesh\sTally\sNumber\s${meshnum1}.*$/\1/"

echo "${test#"${test_dir}"}"

echo "${test#$test_dir}"

echo ${test#test_dir}

out=$(echo "${text} / 10" | bc -l)

(tmp=%h; echo ${tmp##*:})

echo ${totals[*]} | tr ' ' '\n' | sort -n -t= -k2

value=`echo ${value} | sed -e 's/[eE]+*/\\*10\\^/'`

echo "${var:8}"

echo "${var}0"

echo ${x//ome/}

echo "${x}"

echo "${x}_${y}"

echo "%1"

echo %date% %time% >>%output.dir%\my_timestamps.txt

echo %g%

echo "%optflags \"-O2\""

echo '%optflags "-O2"'

echo %path%

 echo %path:;=&echo.%

echo %total% >>"%%F"

echo "%~1"

echo %~a1 | find "a" >nul && goto doCopy || goto noCopy

echo "'First" "argument'"

echo "'param 1' 'param 2'" | xargs -n1 | xargs -I@ echo \[@\] \[@\]

result=$(echo "($a/$b) * $c)" | bc -l)

avg=$(echo "($n1 + $n2 + $n3)/3" | bc)

echo '(4.2-1.3) / 1' | bc

echo "(def ^Integer a 1)" | sed 's/\^\w\+//g'

echo '(foo)'

echo '(x1,y1,z1) (x2,y2,z2) (x3,y3,z3)' | awk -F'[(,]' '{print $2, $3}'

        echo *

$ echo "*"   #With quotes

$ echo *    #No quotes

echo *

echo *

echo *

echo '*   CRISTOBAL  AL042014  08/05/14  12  UTC   *' | awk  '{print $2}'

for A in $(echo '*'); do echo "$A"; done

echo "* master" | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'

echo ** it is python testing **

echo **/*.h | xargs ./a.out

echo *.c

echo *.{ext1,ext2}|sort -u

echo */

echo */

echo ,1 1>> C:\somefile.sql

echo ,1 >> C:\Somefile.sql

echo ",article{gjn2010jucs, Author =   {Grzegorz J. Nalepa}, " | awk '{ print gensub(/(,[^,]+).*/,"\\1", "g") }'

for word in "${a[@]}"; do echo "- [$word]"; done

echo "- - -"

echo '--' . $lastline . '--';

$ for file in *[^\)].txt; do echo "-- Found: $file"; rm -v $(basename "$file" .txt)\ \(*\).txt; done

echo ---${pass}---

echo "----------   $(date +"%d %B %G") , $(date +%r) :" >&2

echo "--exclude-agent=$line \\"

echo --foo="bar baz"

echo -E ${(q)@} >> $filename

echo -e "  $ip\t\t\t\tDOWN"

echo -e ' \t '

echo -e "\"What do we say to the God of Death?\nNot today.\""

echo -e '#!/bin/sh\n echo "hello world"' > abc.sh

i="1"; echo -e '#!/usr/bin/env bash\nmyprogram -i '"\"input_${i}.txt\""

echo -e "$(./tpb.sh)"

echo -e "$(sort $1 | uniq -d)"

 echo -e "$MY_STRING"

echo -e $RESULT

 echo -e $'"What do we say to the God of Death?\nNot today."'

echo -e $in " is an " ${type[$(is_odd $in)]} " number."

echo -e "$in is an ${type[in % 2]} number."

echo -e "$input" | tr -s ' ' | cut -d " " -f2-

echo -e $s | awk '{print $2}'

echo -e "$sqlvar" | sqlplus user/pwd@dbname

echo -e "$sshpass\n$sshpass" | passwd --stdin root

echo -e ${CONFIG_FILE}x

echo -e "${message}\n${changed}" | /usr/bin/php -q /home/chad/www/mantis.localhost/scripts/checkin.php 

echo -en '111 22 3\n4 555 66\n' | column -t | sed 's/ \([0-9]\)/\1/g'

echo -e -n "\bD"{a,b,c}".jpg\n"

(echo -e -n use "AVL \\ngo\\nexec spAVL_SetAlertIVR 1, '";(base64 myFile.wav|tr -d '\n');echo -n -e "'\\ngo") | tsql -H 192.168.1.111 -p 1433 -U sa -P x

echo -e '.separator "@"\n.import output log_dump' | sqlite log.db

echo -e "\001\033[32m\002cheese\001\033[0m\002"

echo -e "\012"

echo -e "\033[1m$(grep '/data' file)\033[0m"

echo -e "\033[38;5;208mpeach\033[0;00m"

echo -e "\033[?35h\033]50;#+1^G" # aka CSI ? 35 h OSC 50 ; #+1 BEL

echo -e "\0342\0224\0224\0342\0224\0200\0342\0224\0200 \033[01"

echo -e '0r header.txt\nw' | ed sample.txt

echo -e "10 ABC \n5 DEF \n87 GHI" | sort -nr -k1 | head -n1 | cut -f 2 | while read MYVAR; do echo "intermediate value: $MYVAR"; echo $MYVAR | xargs -I {} grep -w {} FILES; done

echo -e "1234\b\b\b56" | perl -pe '$b="\b";s/$b//g'

echo -e '123\nabc\n'"$(tput cuu1)$(tput cuu1)"'*\n*'

echo -e "1:45\n0:20" | awk 'BEGIN { FS=":" } { SUM += 60*$1 + $2 } END { print SUM }'

echo -e "1\n2\n3\n4\n5\n" | ./bin/file_name

echo -e "2.0.13\n2.0.2" | sort -V

echo -e "A A 1\nB B 1\nC C 1" | awk '{gsub($(!/B/),"",$0); print $1 "\t" $2}'

var=$(echo -e "AAA\nBBB" | awk 'NR==2')

var=$(echo -e "AAA\nBBB" | sed -n '2p')

echo -e "ABC 12345 \t Job Worked on DATE" >> jobs.txt

echo -e "ALERT - Shell Access on:' `date` `who` '\n\n' `whois $(who | cut -d'(' -f2 | cut -d')' -f1)`"

echo -e "Cmd> \c" && read -s cmd && echo "-append_something"

echo -e "Cmd> \c"$'\e[s' && read cmd && echo $'\e[u'"${cmd}-append_something"

echo -e "Content-type: image/png\n"

echo -e "GET /ws/map/v1/search.wsdl HTTP/1.1\nHost: my.site.com\n\n" | openssl s_client -connect my.site.com:443 -ign_eof

echo -e 'I am using basic grep expression.\nOne more line\nOne with sed\nOne without' | sed -n "/am/,/sed/p"

{ echo -e "ID\tName\tJob\tPhone\tLocation" && grep -n -i "." $HOME/$DATAFILENAME | sort -k 2 -t $'\t';} | column -ts$'\t'

echo -e "Icon\\r" | xargs touch

echo -e "Normal \e[1mBold1 \e[0mNormal Normal \e[1m--Bold-2 \e[0mNormal" | grep -P -o $'\e\[1m.*?\e\[0m'

echo -e "Size\tFiles\tDirectory";

echo -e "Size\tFiles\tDirectory"; paste <(du -sh ./*/ | sort -k2 | cut -f1) <(find ./*/ | cut -d/ -f2 | uniq -c | sort -k2 | awk '{print ($1-1)"\t"$2}') | sort -nk2

$ echo -e "Some Message With Newlines\nHello World.\n" | php temp.php

echo -e "This Is a Test Message\nWell, not really!!" | tee >(exec logger)

echo -e "This is the body" | mutt -a "/home/adrian/Backups/Server1/MyFile-2013-04-17.zip" -s "This is the subject" -- myEmail@gmail.com 

echo -e "Y\nN\nN\n" | trad install

echo -e '\033k'$USER@$HOSTNAME'\033\\'

echo -e '\U0001f37a'

echo -e '\e[s'; tar -options -f dest source | while read line; do echo -en "\e[u\e2K"; echo -n $line | cut -b1-$(tput cols); done; echo

echo -e \\n | hexdump -C

echo -e '\n\t\a'

echo -e '\x5a'

echo -e "`date +'%Y-%m-%d'`\t`grep -c 'string1' filename`" >> output

echo -e "`grep -c 'string1' filename`\t`grep -c 'string2' filename`" > output

echo -e "a.\n\nb\nc\n\n\nd" | perl -0777 -pe 's/\.?(\n(\n+|$))/.$1/g' | cat -n

echo -e "a\011b" | perl -lpe 's/[\0-\037\177]/sprintf "\\x%02x", ord $&/ge'

echo -e "aaa\nfoo\nfoo\naaa\nfoo\nbbb\nfoo\nbbb" | awk 'BEGIN{RS=""}{sub(/aaa\nfoo\nbbb/,"aaa\nright\nbbb",$0);print}'

echo -e "aaa\nfoo\nfoo\naaa\nfoo\nbbb\nfoo\nbbb" | perl -p00e 's/aaa\nfoo\nbbb/aaa\nright\nbbb/'

echo -e "aa\n$(tput cuu1)b"

echo -e "abc.txt\npqr.txt" | while read name; do find . -name $name; done

echo -e "arrays2 28\narrays 28\narrays3 28" | LANG=C sort

echo -e "arrays2 28\narrays 28\narrays3 28" | LANG=de_DE.UTF-8 sort

echo -e "a\tb\tc\td\te" | awk -F$'\t' '{print NF}'

echo -e "bla bla \c"

echo -e "ccc1\t4\ncccY\t1\ncccY\t5\ncccX\t2\ncccX\t10\nccc10\t4\nccc1\t10\nccc2\t5" | sort -t $'\t' -k 1.4,1 --version-sort -k 2n

echo -e "\e[4mhello world\e[24m\e[1m"

$ echo -e "\e[?1049h"

$ echo -e "\e[?1049l"

echo -e "expected program input\nmoreexpected program input\neven more\n" | ./runme

echo -e file1.txt file2.txt file3.txt

VAR1=$(echo -e "first line\nsecond line\nthird line")

echo -e "foo\n-- \nbar" | awk '/^--/{exit}1'

{ echo -e "foo\nbar\nbaz" ; cat /dev/stdin ; } | foo

echo -e 'hello\\\nthere' | awk '{ if (gsub(/\\$/, " ")) printf; else print }'

echo -e 'hello\\\nthere' | perl -ne 's/\\\n/ /; print'

echo -e | hexdump -C

echo -e "host1.com\nhost2.com" | xargs -n1 printf "ssh user@%s -p 999\n"

echo -e "import sys\nfor r in range(10): print 'rob'" | python

echo -e "import sys\nsys.stdout.write('\x11\x22\x33\x44')" | python > new_file

echo -e "key1\n123\nkey2\n456" | sed 'N;s/\n/ /'

echo -e "line 1\nline 2\nline 3" | program

echo -e "my_host\n192.168.1.100\nfoo\nbar" | ./myscript

echo -e "name\tage\tuniversity\tcity" | cat - yourfile > /tmp/out && mv /tmp/out yourfile

echo -e "\n\n\n" | ssh-keygen -t rsa

echo -e "\r$var\033[K"

echo -e "\ra b "{1..3}" d e\n"

echo -e "scale=2\n"$BC_CEIL$BC_FLOOR"ceil(2.5)" | bc

echo -e "set serveroutput on\n execute proc1(10,10);"|sqlplus -s system/xxxxx@orcl| head -1

echo -e "some-text\n$(<file)" > file

echo -e "something\r" | bash foo

 echo -e 'stack\b '

(echo -e 'stats\nquit'; sleep 1) | telnet localhost 11211

(echo -e 'testName\n'; cat ) | ./a.out

echo -e "this" "is" "line" "one\n" "this" "is" "line" "two\n"  ...

echo -e "this\thas\ttabs"

(echo -e 'upload\n<uploadid>\n'; cat ~/test.txt) | nc 127.0.0.1 1567

echo -e \x00\x00\x07\x04\x00\x00\x00...

echo -e "\x04\x00\x00\x00"www.google.com > /tmp/mypipe

echo -e "\xC2\xA0" >> somefile.srt

echo -e "\xC2\xA3"

echo -e "{\"hostname\":\""$hostname"\", \"distro\":\""$distro"\", \"uptime\":\""$uptime"\"}"

 for i in * ; do echo -n > $i ; done

$ echo -n > /tmp/start.sh.log

echo -n > $op  #echo nothing and write the "nothing" into the file

echo -n "  12 s3c  " | sed 's/^ *//' | sed 's/ *$//' && echo c

$ echo -n ' ' | some_command

(echo -n [migrate:refresh]; /usr/bin/php artisan -n migrate:refresh) >> file 

echo -n "" | md5sum

for i in *.xml; do echo -n "$(basename "$i" ".xml") "; head -1 "$i" ; done >> new.txt

echo -n "$0: Starting backup process in '$backupdir'... " 

echo -n $'\171' > /dev/cu.usbmodem411

echo -n $IP; echo -n of; echo -n $IPLINES

echo -n $SITE | openssl dgst -binary -sha1 -hmac $MASTER | openssl base64 | cut -c1-8

echo -n "$SIZE" >> quota

for i in {1..10}; do echo -n "$i "; done; echo

apk=`echo -n ${apk} | tr -d "\r"`

fname=$( IFS='_'; for i in ${1,,}; do echo -n ${i^}; done )

echo -n "${line:$j-1:1}"

echo -n "${line}" | awk -F '|' '{printf "%s", $1}'

echo -n '*'

echo -n *Checking Partition Permission* Hostname=$(hostname) LastChecked=$(date)

echo -n "--exclude-agent=$line"

echo -ne "$(gettext 'Insert\ta\tword: ')"

echo -ne "$(printf '\\x%x' 200)" >> quota

echo -ne "$a\r\033[K";

echo -ne "\033[2J\033[H"

echo -n  -e '1\n2\n3' |xargs -0  printf 'SELECT %s INTO MyTable'

echo -ne 54686973776f726b7366696e65 | perl -pe 's/([0-9a-f]{2})/chr hex $1/gie' >&3

echo -ne "Cmd> \e[s" && read cmd && echo $'\e[u'"${cmd}-append_something"

echo -ne "Content-type: image/png\n\n"

echo -ne \\x"${c:0:2}"\\x"${c:2:2}" | iconv -f UNICODEBIG -t UTF-8

echo -ne '\x01\x53\x20\x00\x41\x04\x4f' >&3

echo -n -e \\x30 

echo -n -e \\x48\\x00\\x49\\x00 > myfile

$> echo -ne 'hello\r' 

echo -ne 'hello\r'; sleep 5; echo -ne 'good-bye\r'; echo

echo -n -e 'line\n\nanother\nno line ending here>' >file.txt

echo -n ./bootstrp3.cab | sed 's![^/]!!g' | wc -c

echo -n /;ip -4 addr | awk '/eth0/ { getline; {print $2} }' | cut -f2 -d/

echo -n '/path/to/folder:'; for kw in {keyword1,keyword2,keyword3}; do grep -qr $kw /path/to/folder/; if [ $? == 0 ]; then echo -n " "$kw; fi; done

echo -n "0:" ; asterisk ......

echo -n '1 2' | xargs ...

echo -n 5a | perl -pe 's/([0-9a-f]{2})/chr hex $1/gie'

echo -n "Hello" | od -A n -t x1

echo -n 'I hate cats' > cats.txt

echo -n "What is your name?" > /dev/tty

echo -n 'exampleString' | md5sum

echo -n foobar | sha256sum

$ echo -n i | hexdump

(echo -n "key=value1&key2=value2&btext="; openssl base64 < file.txt) | curl --data @- myhost.com/api

echo -n "pass\npass\n" | openssl req ....

echo -n password{salt} | shasum -a 1

echo -n 'sed ' ; sed -e "s/^\(.*\)/-e 's,\1,gl'\ \\\/" file.csv

(echo -n; sleep 5; cat tempfile) | mail.domain.com 25

echo -n "some text here" > file.txt

echo -n "stuff"|wc

echo -n "svn.revision="

"echo -ne \"\\\\e]1;$account\\\\a\""

$echo "-o toto.o" | sed -E 's/-o [^ ]+//'

echo -v | xargs doit.sh

echo .* * | tr ' ' '\n'

echo ".."|xargs -n1 |shuf|paste -d' ' -s

echo "..." > /dev/stderr

echo ... | grep -Po '^.*?\K(?<=MATCH1).*?(?=MATCH2)'

echo "..." | passwd &> /dev/null

echo "..." | passwd > /dev/null 2>&1

echo "..." | perl -pe 's{=([\d.|]+)}{"=" . (join ",", split /\|/, $1)}eg'

echo ...|sed -n ':a;/JOIN/{s/[^J]*JOIN \([A-Z0-9_]*\)/\1\n/;P;D;ta}' | sed -e ':a;N;s/\n/ /;ta' | sed  's/.*/[SQL_JOINS=\"&\"]/'

echo "..." | sed 's/.*\(ec2[^ ]*\).*/\1/'

echo ... | sed  's/MATCH1/&\n/;s/.*\n//;s/MATCH2/\n&/;s/\n.*//'

echo ... | sudo debconf-set-selections 

echo "....." >> ngix.conf

echo "....." | awk '-F:' '{total+=$NF}END{print "sumTotal=" total}' 

echo "...... DEF....." | grep --color "DEF"

$ echo "......" | perl -ne '@x=/JOIN (\w+)/g;print "[SQL_JOINS=\""."@x"."\"]";'

echo ./*

echo  "./Delivery Note.doc 1" | awk '{ command="sum -r \""$1" "$2"\""; print command}' | bash

$ echo .help | sqlite3 2>&1 | more

echo '.nh'   #no hypenation

echo .quit | sqlite3.exe 

echo '/$line/,/\/>/{printf "%s ",$0}/\/>/{print ""}'

echo /* abc

echo /backups/world_$(date | sed 's/ /_/g')

echo "/bin/bash /path/to/script.sh" | at 11:10

echo /bin/meteo | at 09:32 today

kent$  echo "/common/common/img/pictos/klArrowRight.gif /common/common/img/pictos/klArrowRight.gif 03/Dec/2012:00:00:00 127.0.0.1 03/Dec/2012:00:00:00 us 404"|awk '{gsub(/\/.*\//,"",$1); print}'

echo /home/XXX/*

echo /home/XXX/fileA /home/XXX/fileB

echo /home/edwprod/abortive_visit/bin/abortive_proc_call.ksh | sed 's/\(.*\)\/.*/\1/'

echo /path/to/my/script | at now + 5 min

MYSTRING=`echo "/sdd/ee/publ/xmlfile_555.xml" | sed -n 's/^.*_\([0-9]*\)\.xml/\1/p'`

echo '/some/long/path/we/need/to/shorten' | awk -F '/'  '{ for(i=1; i<=6; i++) {print $i} }' | tr '\n' '/'|sed 's/.$//'

echo '/some/long/path/we/need/to/shorten' | cut -d '/' -f 1-6

echo /user/dj/a/mydir | sed 's:/:\\\/:g'

echo '/usr/bin/php command'| at now

 echo /usr/sbin/ocs-onthefly -s $src_ip -t $dest_disk

echo "/x/y/z/x" | awk '{ c=$0; gsub("/", "_", c) ; system( "echo " $0 " " c )}'

echo "/x/y/z/x" | awk '{ gsub("/", "_") ; print $0 }'

echo "/x/y/z/x" | awk '{ gsub("/", "_") ; system( "echo "  $0) }'

echo 0 >/selinux/enforce

echo "0 Files on server $machine in $dir3" >&2

echo 0 > /selinux/enforce | reboot

 echo "0.1 + 0.1" | bc | awk '{printf "%f", $0}'

 echo "0.1 0.1" | awk '{printf "%f", $1 + $2}'

echo "0/2" | bc - l

echo "000,010,069" | awk -F ',' '{ printf "%02X,%02X,%02X\n", $1, $2, $3 }'

echo '0000-00-00-title.ext' | sed -En 's/[0-9]{4}-[0-9]{2}-[0-9]{2}-(.+)\.ext/\1/p'

echo "00:20:40.25" | awk -F: '{ print ($1 * 3600) + ($2 * 60) + $3 }'

echo "\020"

echo "03\.26\.12" | awk '{split($0,a,/\\\./); print a[3] a[2] a[1]}'

echo "\033];Hello World\007"

echo "09/May/2012:05:14:58 +0100"|sed 's/\:[0-9][0-9] \+0100//'

echo 1 >/selinux/enforce

echo 1 & 0 

echo 1 2 3 4 5

echo 1 2 3 4 5 6 7 8 | sed -e 's/ /%20/'

echo "1 2 3 4" | gawk 'BEGIN { OFS=" :-( "}; {$1=$1; print $0}'

echo 1 2 3 5 7 9 | sed 's/ /\n/g'

echo "1 2 3" | awk  '{ print $1 }'

echo "1 2 3" | awk '{ print }'

echo "1 2 3"|awk '{print $5}'

echo 1 2 3 | tr ' ' '\n' | sort | tee >( **code** ) | uniq

echo 1 2 3 | xargs myapp

echo 1 ^< 2

echo 1 | command

 echo 1 ; ( echo 2 | tee file )

 ( echo 1; echo2 ) | tee file

echo "1 hour ago" | sed  's/[0-9]\{,2\} [[:alpha:]]\{4\} ago//g'

echo 1 | while read L; do echo; done

(echo 1 && sleep 1 && echo 2) &

echo '1,2,3' | rev | cut -d',' -f 1

echo "1,2,3" | tr -cd ',' | wc -c

echo "1,2,3,4" | awk -F, -v OFS=, '{$'$index'="NEW"; print }'

 echo "1,2,3,4,5,6,7" | awk -F"," '{a=$5; $5=",,,,,"a; OFS=","; print}'

echo '1,23,56,we,89,2009-12-06' | sed -e 's/,/,,/5;s/,/,,/4'

echo '1,3,"3,5",4,"5,5"' | sed -r 's|("[^"]*),([^"]*")|\1\x1\2|g;s|,|;|g;s|\x1|,|g'

echo 1.8e-308 | gawk '($1+0)<0.05'

echo "1/2" | bc - l

echo 10.11.12.13|perl -MRegexp::Common=net -nE '$_=~/^$RE{net}{IPv4}{-keep}$/ and say $1'

echo 10.11.1200.13|perl -MRegexp::Common=net -nE '$_=~/^$RE{net}{IPv4}{-keep}$/ and say $1'

echo "10.2>10.1" | bc

echo "100 * $size_target / $filesystem_size" | bc

echo 100 2i p | dc

echo 1000 | java myProgram

echo 1023m | grep -w '^[1-9][0-9]*[km]$'

echo '11*15' | myprogram

echo 112233 | sed 's/\(..\)\(..\)\(..\)/\3\2\1/'

echo '11:46:24.851239 IP (tos 0x0, ttl 128, id 11289, offset 0, flags [none], proto UDP (17), length 229)' | grep -o 'proto [^,]\+'

echo "12 BBQ ,45 rofl, 89 lol"|grep -P '\d+ (?=rofl)' -o

echo "12 cats" | sed 's/[0-9][0-9]*/Number/g'

echo 121 > /dev/cu.usbmodem411

echo 123 >bar 2>&1 

echo 123 | rev

echo '123' | sed -e 'w tempfile' -e 's/[0-9]/\./g'

echo 123 | sed -r 's/[0-9]{2}/x/'

echo "1234 5678" | fold -w1

echo 123420110404123520110404123620110404 | sed -r 's/(.{4}).{8}/\1/g'

echo 123420110404123520110404123620110404 | sed 's/\(....\)......../\1/g'

 echo "12345-BA-PreSchool-LT.local" | cut -d'-' -f2,3 | sed -e 's/-/ /g'

echo "1234567890" | cut -b 1-6

echo "1234567890"|sed 's/[0-9][0-9][0-9]\([0-9][0-9][0-9]\)\([0-9][0-9][0-9][0-9]\)/\1-\2/'

echo "123adv123" | gsed -r 's/([a-z]+)/#/g'

echo "123adv123" | sed -E 's/([a-z]+)/#/g'

echo "123adv123" | sed 's/\([a-z][a-z]*\)/#/g'

echo "127.0.0.1" >> /path/to/tmp.fifo

echo "12|23|11" | awk '{split($0,a,"|"); print a[3],a[2],a[1]}'

echo 1318-*.pdf

{ echo 15; one; } | two

echo 16i DEADBEEF 10o p 2o p | dc # but see below

echo 192.168.38.{217,222} 192.168.40.215 192.168.41.{219..222} | tr ' ' ','

echo "192.241.xx.xx  venus.example.com venus" >> /etc/hosts

echo "1969 years 12 months 25 days 19 hours 38 minutes 24 seconds since last release" | sed -r 's/.* ([0-9]+) months.*/\1/'

 echo "1: " | awk -F  ":" '/1/ {print $1}'

echo '1;2;3;4;5' | tr \; \\n | while read line ; do echo $line; done

echo '2 * 3 > 5 is a valid inequality'

echo "20000024ff3dbf50" | sed 's/../&:/g;s/.$//'

echo "2012-05-25 00:16:51,610" | awk -v "var=$TIME" '{if ($0 < var) print $0}'

echo "2014-05-01 01:00" | parallel --dry-run foo "{}"

echo 202.168.56.32|awk -F. '{print $3"."$2"."$1}'

echo 2033010 | tr 0123 ACGT

 echo 24/06/2013 | awk ' $0 ~ /[[:digit:]]{2}\/[[:digit:]]{2}\/[[:digit:]]{4}/ { print "MATCHES!"}'

echo 24/06/2013 | awk ' $0 ~ /^[[:digit:]]{2}\/[[:digit:]]{2}\/[[:digit:]]{4}$/ { print "MATCHES!"}'

 var=$((echo 2^100 | bc))  

echo "2^1024" | bc

echo "3*a(3)^2+6*a(1)^2*(5*a(2)^2-2*a(4))+6*a(2)*a(4)+6*a(1)*(-4*a(2)*a(3)+a(5))" | perl t.pl

echo "3.11.0.17.16" | awk -F. '{printf "%s.%s.%s-%s-generic\n",$1,$2,$3,$4}'

echo 321 | sed -e 's/\([[:digit:]]\)/.\1/g' -e 's/^\.//'

echo "344F9DA1EA1859437077CCA38923C67797BDB8F6" | sed -E 's/.{8}/& /g'

{ echo "42" & sleep 3; }

echo 4BF8E | rev | tr '0123456789ABCDEF' '084C2A6E195D3B7F'

echo '50' > /dev/cu.usbserial-A700dYoR

$ echo "5678:robert dylan :d.g.m. :marketing :04/19/43 85000" | awk -F":" '{print $2, $4}'

echo 5a | perl -ne 's/([0-9a-f]{2})/print chr hex $1/gie'

echo '66.9090_89.4450_168.0250_ABC3/' | cut -d"_" -f4 | cut -d"/" -f1

$ echo '6^6' | bc

echo 71343531834366140263241767594070376448 | awk '{printf "%E",$1}' 

echo "720/304 * 360" | bc -l

echo '8.8-' | sed -r 's/([[:digit:]]+(\.[[:digit:]]+)?)-/-\1/'

echo "9191234567" | sed 's/^\([0-9]\{3\}\)\([0-9]\{7\}\)$/\1 \2/'

 echo "99%" |grep -o '[0-9]*'

$ echo "=?ISO-8859-1?Q?Test:_Jaguar_XKR-S:_Unter_dem_Blech_lauert_d?=" | sh convert_subject.sh

 echo "A,B,C" | sed "s/,/','/g"

echo "AAA_BBBB__CCC__GGGG___fffffffffffffff_hhhh" | sed -r 's/^[^_]+_+((_*[^_]+){3}).*/\1/'

X=ABC123456 ;  echo ABC123456AA | sed -e "s,\(${X}\).*,\1ZZP,"

echo 'ABCD EFGH IJKL MNOP' | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2)) }'

echo "ABCDEFGHIJ" | awk -v num=4 '{for (i=1; i<length($0)-num;i++) print substr($0,i,num)}'

echo "ABCDEFGHIJ" | sed -n ':a;/^...$/{p;b};s/.../&\n/;P;s/.//;s/\n//;ba'

num=5; echo "ABCDEFGHIJ" | sed -n ":a;/^.\{$num\}\$/{p;b};s/.\{$num\}/&\n/;P;s/.//;s/\n//;ba"

echo "All's Well That Ends Well" | grep -o '\(\bThat\b\|\bWell\b\)'

echo "An error has occured: $1" >&2

echo "Anirudh   Tomer" | sed -r 's/ +/ /g'

echo "Answer: $lrsq" >> $log

echo "Append string" | sudo tee -a protected_file >/dev/null

echo "Apple, Orange" | tr -s ', ' '\n'

echo Argument $i: $(echo "${var[i]}" | sed -e 's/^ *//g' -e 's/ *$//g')

 echo "Avarage word size is: ${avg_word_size}.${_100x_avg_word_size: -2:2}"

 echo "Avg Time Taken:  $timeAvg" 

echo "Bienvenido";

echo "Bruce-Wayne Batman 0.0.0.0" | awk '{print $1}'

echo "C1_1_B_(1)IMG1511.jpg" | tr '_' '\n'

echo "C1_1_B_(1)IMG1511.jpg" | tr '_' '\n' | sed -e 's/)/)\n/'

echo "C:\Users\Ted\Documents\Unix\Scripts" | xargs echo

echo 'C:\Users\Ted\Documents\Unix\Scripts' | xargs echo

echo 'C:\foo\bar.xml' | sed 's/\\/\//g'

echo 'CONSTRAINT `FK5E61277CBAE1E8F6` FOREIGN KEY (`action_item_group_id`) REFERENCES `action_item_group` (`id`),' | sed -r "s/CONSTRAINT\ .*\ FOREIGN\ KEY\ .*\ REFERENCES\ .*\ \(.*\)/&\ ON\ UPDATE\ CASCADE/"

echo "Ciao, `/usr/bin/whoami`"

command_not_found_handle(){ echo "Command not found: $*"; return 127; }

echo Computer Peripherals Internet Technology C/C++ | sed -e "s@${refcat}@${cat1}@g"

echo 'Count=[#]' | sed 's/.*\[\(.*\)\].*/\1/'

echo 'Current_IP=$(host $HOSTNAME | cut -f4 -d" ")' >> /etc/no-ip.sh

echo "Current_IP=$(host $HOSTNAME | cut -f4 -d' ')" >> /etc/no-ip.sh

echo "DAAAAABCBBBCCABCABC" | sed -e 's/\(ABC\)*$//g'

echo DIR 1 >~/.dir_colors

echo "DISPLAY=$DISPLAY zenity --info --text=\"time is up\"" | at now + 30 minutes

(echo "Date;Visit;Login;Euro;Rate" ; cat file.txt) | sed 's/;/<tab>/g' > file.csv

echo "Dave,ws245f,09/12/1982"|awk -F'/|,' '{b=mktime($5" "$4" "$3" 00 00 00 00");a=(systime()-b)/(365*24*60*60);a+=a<0?-0.5:0.5;a=int(a);print $0","a}'

echo 'Decimal: 999/581' | sed -e 's/[^0-9]*//'

echo 'Decimal: 999/581' | sed -e 's/Decimal: //'

echo 'Don''t'

    echo "ERROR: $1 is a subdirectory of $(readlink -e "$2")"

echo "Echoing: $1"

echo Exit Code is %errorlevel%

echo F|xcopy ..\..\Common\%%a Common\%%a /i /d /c /v /s /y /f >nul

for i in {1..5}; do echo "F"$i > File$i; done

echo "FLUSH PRIVILEGES;" | tee -a $MYSQL_TMPFILE

echo  "FTP dir has modified" | mail -s "dir notification" sni912@######.com;

echo "Failed: foo:" $(printf "'%s' " "${mycmd[@]}")

for file in *.gz; do echo "Filename: $file"; zcat "$file" | head -2 ; done

echo "Folder doesn't exist on $machine" >&2

2>nul ren folderName folderName && echo Folder is NOT locked || echo folder is LOCKED

echo Foo Bar | tee one.txt | tee -a two.txt

echo "FooBar" | tee /dev/stderr

echo "Foo\nBar\nBaz" | ruby -pe '$_.downcase!'

echo "GIT_WORK_TREE=/path/htdocs git checkout -f" >> ~/domains/$name.git/hooks/post-update

echo "GIT_WORK_TREE=/var/www/${1} git checkout -f" >> hooks/post-receive

echo H2*/

echo "HTML example<br>Print new line<br>please<br>not work" | sed -e "s/<br>/\\`echo -e '\n\r'`/g"

echo "HTML example<br>Print new line<br>please<br>not work" | sed -e 's/<br>/\n/g'

echo "He likes cats, really?" | fold -w1 | sort -u

echo "Hel'lo" |  sed s/\'/\\\\\'/g

echo Hello > /dev/pts/1

echo "Hello Holly." | python -c "import sys; print [line for line in sys.stdin]"

echo "Hello Holly." | python -c "import sys; print ' '.join([line for line in sys.stdin])"

(echo "Hello I'm a background task" &)

echo "Hello brave new world" | awk '{print $1}'

echo 'Hello brave new world' | awk '{print $1}'

x=$(echo "Hello" | grep '^[A-Z]')

x=`echo "Hello" | grep '^[A-Z]'`

echo Hello im the script, here your args $@

echo "Hello log" | tee /dev/tty2 /var/log/my_logs > /dev/null

echo Hello world | cut -d' ' -f1

echo "Hello!" >> file1.txt

echo Hello, World!

! echo "Hello, world!" > /tmp/Hello.txt

echo 'Hello, world!' | gsed -r '/^\w{3}lo, wor.*$/d'

echo 'Hello, world!' | gsed '/^\w\{3\}lo, wor.*$/d'

echo "Hello?" > /dev/null

echo Hi | nc localhost 30000    # Send string "hi" to server on localhost port 30000

echo "INSERT INTO InsertTableName (Column001, Column002) VALUES('Value001', 'Value002');" | mysql -u InsertUserName -pInsertPassword InsertDatabaseName

echo "INSERT INTO mylittletable VALUES ($THENUMBER,'$THEDATE');" | mysql --host=192.168.0.0 --user=garfunkle --password=spatulaface mylovelydb 2> /dev/null || echo Warning!

echo "INSERT INTO tblename (fieldname) VALUES (LOAD_FILE('filename'));" | mysql -u root -p password dbname

echo "Ignore this email" | mailx -s "Test Data" DL-host-PD-WAS-TT_Emp@corp.host.com

echo "Install ID:          XKCD (8426200,8179503)" | awk '{print $3}'

echo "Install ID:          XKCD (8426200,8179503)" | sed -n 's/^.*ID: *\([^ ]*\) .*$/\1/p'

echo "Is anybody listening?" >&-

echo 'JAVA_OPTS="$JAVA_OPTS -Dorg.apache.catalina.jsessionid=some_value"' | (export DORG_APACHE_CATALINA_JSESSIONID=FOO/BAR/FOOBAR; sed "s/^\(JAVA_OPTS=\"\$JAVA_OPTS[ \t]*-Dorg\.apache\.catalina\.jsessionid*=\s*\).*\$/\1${DORG_APACHE_CATALINA_JSESSIONID////\/}\"/")

echo MAGIC: $a

for i in *.log; do echo "MARKER" >> "$i"; done

echo "MAVEN_OPTS=-XX:MaxPermSize=128m -Xms128m -Xmx768m" | sed 's/=/="/; s/$/"/'

s=$(echo "Manufacturer: $(echo ${family:-$name}|cut -d' ' -f1)")

echo Mar  8

echo 'Mary had a "little" lamb' | awk '{ gsub(/"/, "&&") } 1' 

echo 'Mary had a "little" lamb' | sed 's/"/&&/g'

echo "May 5 2014" | awk '{print $2}'

echo "May 5 2014" | cut -d' ' -f2

echo "Message" >&2

echo "Mismatch Percentage: $(echo "100*$TEST2/$TEST1" | bc -l)" 

echo "My String" | ruby -e "puts gets.downcase"

echo "My email is abc@example.com" | sed -r 's/[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[A-Za-z]{2,4}/[emailaddr]/g'

echo "My message" >> /my/custom/path/to/my_script.log

{ echo "My title"; find ... \; ; } | mail ...

echo "NDK_HOME=/opt/android-ndk-r8 export NDK_HOME" >> ~/.bashrc

  echo NOVAR

echo Name City State | sed -E 's/([A-Za-z]+)/Example&/g'

echo "Name: "

echo "Nate or nate" | grep -P '(?<!N)a'

echo "New Line" | sort -o file -m - file

echo "New Line" | sort -o file - file

echo PATH

echo PATH $PATH \$PATH

echo PATH /bin:/usr/bin $PATH

echo 'PATH="$PATH:~/bin"' > ~/.bash_profile

echo PATH=xxx| awk -F= '{print ENVIRON[$1]}'

echo "PHP10000" | awk -F "PHP" '{ printf "$%.2f\n", $2 * .0245 }'

echo "PHP10000" | awk -F "PHP" '{ printf "$%d\n", $2 * .0245 }'

echo "PHP10000" | sed 's/PHP\([0-9]\+\)/echo "scale=2; \1*.0245\/1" | bc/e'

echo "PREPENDED STRING" | cat - /tmp/file | sed 's/test/test2/g' > /tmp/result 

echo 'PS1="Hello World > "'

echo "Password successfully changed for $USERNAME to $PASSWORD at `date`"

echo "Please answer y or n." >&2

echo "Please,enter a brief Description [ENTER]:"

echo "Prepended Line" > tmpfile && cat origfile >> tmpfile && mv tmpfile origfile

echo "Question? [Y/n] \c"

echo "Reading $BLOCK_SIZE from $TAPE and writing it to file $FILE." >&2

echo "Replace <newLine> it by <newLine> NEWLINE <newLine> in my OSX terminal <newLine> and bash script" | sed 's/<newLine>/\'$'\n/g'

FOO=bar; echo Result:${FOO}

echo "Revision: 53413" | cut -d " " -f2

echo "Running scheduleSpider.sh at \`date\`" >> /tmp/scheduleSpider.sh.log

echo 'S1,                // name' | awk -F '//' '{ n = gsub(/ /, "", $1); print n }'

     echo "SELECT ${MYSQLTABLE}.created_at, ${MYSQLTABLE}.product_options FROM ${MYSQLTABLE} WHERE ${MYSQLTABLE}.product_id=1 ORDER BY ${MYSQLTABLE}.created_at" | mysql ${MYSQLOPTS} | perl -F"\t" -lane 'print join ",", map {s/"/""/g; /^[\d.]+$/ ? $_ : qq("$_")} @F ' > ${MYSQLDUMP}

echo "SELECT 'DROP TABLE ' || tablename ... " | su - postgres -c "psql database"

sqllog=`echo 'SELECT * FROM RDB\$DATABASE;' | isql -u SYSDBA -pass mypasswd localhost:mydatabase | tail -n 2 | head -n 1 | wc -l`

echo "SELECT * FROM sometable" | /usr/bin/time -f "%es" psql

myvariable=$(echo "SELECT A, B, C FROM table_a" | mysql database -u $user -p$password)

$ echo "SELECT things FROM some_table" | mysql some_database | grep excitement > output.txt

echo SGVsbG8gQmFzZTY0Cg== | sed -r "s/(.+)$/$(decodeBaseSixtyFour \\1)/"

echo "Script Got '$1'"

for ab in + -; do for ac in + -; do for bc in + -; do echo "Searching: $ab$ac$bc"; ./searchgraph $ab $ac $bc inputfile; done; done; done

echo 'Server = http://repo.archlinux.fr/$arch' | sudo -s tee -a /etc/pacman.conf

echo "Some Text \n " | grep ' \\n *$'

echo "Some console and log file message" | tee /dev/fd/3

echo "Some console message" 1>&3

echo "Some error message" >> /dev/stderr

echo 'Some- String- 12345- Here' | sed 's/[[:space:]]*-[[:space:]]*/-/g'

echo 'Some- String- 12345- Here' | sed 's/\s*-\s*/-/g'

echo "Speed : 1624.127424 Kib/s in 9.410000 seconds" | awk '{print $6}'

echo "Speed : 1624.127424 Kib/s in 9.410000 seconds" | cut -d' ' -f 6

echo Split made `ls -1|wc -l` files.

echo "Starting scriptr" `date '+%T'` | tee script.log

echo "String1 $1" >&2

echo "Successfully created the directory location"

echo "Sum: $sum"

echo TEST | ssh user@host 'cat > tempfile; cat tempfile; rm tempfile'

echo "THIS-some-string-zzz-55.xml" | sed 's/\.xml$//'

echo "TITLE=  B=ack=To ian   " | sed -n -e 's/[^=]*=[[:blank:]]*\(.*[^[:blank:]]\)[[:blank:]]*$/\1/p' | od -tx1 -tc

echo "TRAC? TRACE1" | netcat -q 1 192.168.0.10 5025

 echo "TRAC? TRACE1" | netcat 192.168.0.10 5025

echo Tessting | ./our_program | grep -o z | wc -l

echo 'Test ....' | sed 's/Test.*/echo "<\0>" | tr s x/e'

{ echo "Test 1"; exit; } && echo "Test 2"

echo "Test 1" && exit && echo "Test 2"

echo "The .... MD5: $(md5sum xxx.jar)"

echo "The .... MD5:" `md5sum xxx.jar`

 echo "The DB Host is $DATABASE_SERVER"

echo "The computer will be suspended at" $(date --date "now $1 minutes")

{ echo "The quick"; echo "brown fox"; } | sed -e 'N;s/\n/ /'

{ echo "The quick"; echo "brown fox"; } | tr "\n" " "

echo "There are $(countPwd) files in the current directory."

echo 'There are 5 apples and 7 oranges' | grep -o -E '[[:digit:]]+ [[:alpha:]]+'

echo "Third token: ${tokens[2]}"

echo "This is a file" > "${varpath}/${varfile}"

echo "This is a test" | awk '{print $1}'

echo "This is a test string" | sed '/This/s/.*/This/'

echo "This is a test string" | sed 's/.*/This/'

echo "This is a test string" | sed 's/.*\(This\).*/\1/'

echo "This is command #1"; echo "The previous command was:" !#

echo "This is command 1"; var=$(echo "!#:s/;//") && echo "The previous command was:" \'$var\'

echo "This is my string" > filename

echo "This is outputParseFulll" >> results

echo "This is outputParseFulll" >> $results

echo "This is the body" | mail -s "Subject" "recipient@example.com"

echo "This is the file.txt from my folder." | sed "s/^This is the \(.*\) from my folder.$/\1/"

echo "This is the message body" | mutt -a "/path/to/file.to.attach" -s "subject of message" -- recipient@domain.com

echo "This is the message body" | mutt -a "/path/to/file.to.attach" -s "subject of message" -- recipient@domain.com

echo This morning, I ate 3^12 apples. | sed "s/[0-9]\+^[0-9]\+/$&$/"

echo "This will show on the screen" # This is a comment, it's ignored 

echo This++++this+++is+not++done | awk '{gsub(/\++/," ");}1'

echo "This___________is_a____string" | sed 's/_\{2,\}/;/g'

(echo 'Title:Author:Price:Qty Avail.:Qty Sold'; cat your_file.txt) | column -t -s :

echo Today is %date% > c:\arun.txt

echo "True" | gawk '1.8e-308<0.05'

echo "True" | gawk '1.8e-322<1.9e-322'

echo "True" | gawk '1.8e-323<1.9e-323'

echo "US/Central - 10:26 PM (CST)" | grep -oP "\-\s+\K\d{2}:\d{2}"

echo "USER_PROMPT=haloooo" >> "$VARIABLE_FILE"

echo "Usage: $(basename $0) {start|stop|restart|status}"

echo "Usage: $0 usernames report errors" 1>&2

echo VERSION=`echo "1.0 + 0.1" | bc`

echo "We're about to find out what we like." >/dev/tty

echo "Welcome $(whoami)!"

echo 'X author: 00000000000; X' | sed ...

echo "XML-Xerces-2.7.0-0.tar.gz" | sed -e 's/^\(\([^-]\|-[^0-9]\)*\).*/\1/g'

echo XXX

echo XXX + YYY | bc -l

echo XYZZY

echo "Y" | myapp

echo Z | grep [0-z]

echo "\\" | sed "s/\\\/replace/"

echo "\\\"" > file

echo '\\servername\folder\folder\folder' | sed 'y#\\#/#'

echo '\\servername\folder\folder\folder' | tr '\\' '/'

echo '\i auto_qa_db_sync.sql' | $DB_PATH -U $POSTGRESS_USER $Auto_rpt_production$TARGET_DB -p $TARGET_PORT

(echo "^@shade{0.85}"; cat $1) | ...

IFS= read -t 10 -d '' response  <   <(echo ^D |openssl s_client -connect ${line}:443 2> /dev/null |openssl x509 -noout -hash |grep -E '^[[:xdigit:]]{8}')

echo `$COMMAND`

echo `$JAVA_BIN/java ${JVM_OPTION:-} -classpath $CP $MAIN_CLASS`

echo "`$avrohdfs concat $DIRS -`"

echo `cat file*.txt` | awk 'BEGIN {a=0;b=0;} {for (i=1;i<=NF;i++) { if ( i%2 == 0 ) { b+=$i } else { a+=$i } } } END { print a, b }'

echo `cat file`

echo "`date +"%d%m%Y%H%M%S"` $LINENO The script is running.. " >> $log_File

echo "`date` User `whoami` started the script."$'\r' >> output.log

echo `date`

echo `date`: Myscript ends

echo `date`: Myscript exited because ...

echo `date`: Myscript starts

df=$(echo "`df -h | head -3`")

echo "`df -hlg | awk -F/ '/disk*/ {print $5}'`"

echo `diff -biw out.txt out2.txt | sed -n 's/^> //p'`

echo `dirname $0`

echo `echo "Hello, World!"`

echo `echo \\z`

echo `eval $COMMAND`

echo `eval echo \$$n`

echo `expr "$stringZ" : 'abc[A-Z]*.2'`

echo  `find ./ -type f -name \$1`

echo  "`find ./ -type f -name \$1`"

echo `foo $dates` >&2

echo `git add -A && git commit -m "Added license headers"`

echo `grep "ENVOI_MAIL=" "${FILE_PROPERTIES}" | cut -d "=" -f "2"`

echo `ifconfig eth0 2>/dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'`

echo `ls My_FOLDER/ | sort -R | head -n 100` file_to_output

 echo `ls | vipe`

echo `ls` "`cal`"

echo `ls` |  grep ".txt"

echo `rm $f`

echo `seq 0 10` `seq 5 15` | tr " " "\n" | sort -n

echo `uptime|cut -d, -f2`

$ echo a

echo a

echo "a b" "c" "d"

echo "a b c d"

$ echo a b c d e | col 5 3 2

echo a b | while read -d\  char; do echo "$char"; done

echo a | cat - file1 > file2

(echo a; echo b) | sed -e '1!G;h;$p;$s/b\na/X'

{ { echo a; echo >&2 b; } 2>&3 | sed >&2 's/$/1/'; } 3>&1 1>&2 | sed 's/$/2/'

(echo a; echo b;) | xargs echo wc -l

(echo a; echo b;) | xargs wc -l

{ echo a ; echo ba ; echo b a ; } | sed -n '/\<a/ p'

echo "a[ 'xxx' ]" | sed "s/a\[ '\(.*\)' \]/a[ \1 ]/"

echo "a" | sed "s|a|${tmp//\\/\\\\}|g"

echo a | tr a b | tr b c

echo "a" | xargs ls -l

echo a*

$ echo "a, b, Aaa, bc" |egrep -o "[^, ][^,]*" |sort -f | xargs -I Q echo Q, | xargs

$ echo "a, b, Aaa, bc" |egrep -o "[^, ]+" |sort -f | xargs |sed -e 's/ /, /g'

{ echo 'a,b,c'; python myscript.py myparm; } > output

echo a.b.c.d  | sed -E -e 's/(.*)[.](.*)[.](.*)[.](.*)/\1.\2.254.\4/'

echo "a.com b.com c.com" | sed 's/^/\*./g;s/ / *./g'

echo a:b,c:d | awk -F'[:,]' 'BEGIN {OFS=FS} {$2=42; print}'

echo "aa bb cc dd" | awk {print $1":"$3":"$4}

echo 'aa$@bb' will print aa$@bb

echo "aa$@bb" will print aabb

echo "aaa -Dprop=var Class arg"|perl -pe 's|(.*-Dprop=(.*))?.*Class\s*(.*)|$3 $2|'

for i in {1..3}; do echo aaa$i; sleep 2; done | sed 's/./X/'

echo aaaabbbbaaaacccc | sed ':l s/^\(x*\)a/\1x/;tl'

echo "aabb" | sed "s/a*\(\(ab\)*\)b/\1/g"

echo 'ab'"'"'c'"'"'d'

echo abc | awk '{ if ( match($0, /a(b)c/, a) > 0 ) { print a[1] } }'

echo abc|awk '{print |"tee files"}'

sh$ ( echo abc; echo bcd; ) | grep '[ab]'

echo abc | grep a | grep b

echo abc > >(gzip > 1) > >(xz > 2)

echo "abc-1234a :" | cut -d: -f1

echo "abc-1234a :" | egrep -o '^[^:]+'

echo "abc-1234a :" | grep : | egrep -o '^[^:]+'

echo "abc-1234a :" | sed -ne 's/ *:.*//p'

echo "abc-1234a :" | sed 's/ *:.*//'

echo "abc-vcu def" | grep -F -w "abc.vcu"

echo "abc; def; ghi; jkl" | cut -f2- -d\;

echo abc_def_08032011.txt | awk '{print substr($0,13,4) substr($0,9,4)}'

echo abc_def_08032011.txt | sed 's/^........\(....\)\(....\).*$/\2\1/'

echo "abcd" | sed -n 's|[^/]*/\(.*\)|\1|p'

echo "abcdefg" | cut -c3-5

echo "abcdefg" | fold -w1

echo "abcdefg" | grep -o .

echo "about to fail" && /bin/false

echo "about to fail" && /bin/false && echo "foo"

$ echo ace

echo  "action" `eval echo '$'$1`

echo 'additional line' >>file_name

echo adf99fgl12,345qsdfm34 | grep -Eo '[0-9]+,[0-9]*'

 echo alias "'$*'" >> ~/.bashrc

echo 'alias foo='\''command with * and ? and spaces'\' >> ~/.bash_profile

echo 'alias foo=bar' >> ~/.bash_profile

echo "alias hello='echo hello'" >> ~/.bashrc

echo "alias youralias='yourcmd'" >> /home/user/.bashrc

echo "apples (orange) (plum)" | sed -re 's/^[^(]+\(//'

echo 'apt-get update && apt-get -y install git-core' >> /etc/rc.local

echo asd | sed 's:.:&/:g' | xargs -n1 -I % mkdir -p "%"

echo audio>/home/brftv/tiovar

echo "awk -F, '\$12 != 0' ${TargetIDs}_output.csv >> ${TargetIDs}_output2.csv"

echo | awk -v balance=${balance} 'BEGIN { printf "\nCurrent balance: %.2f\n", balance }'

echo awk "{print \$2, a}" a=$a

$ echo | awk '{sum=0; for (i=3; i<=1000; i++){if ((i % 3 == 0) || (i % 5 == 0))sum+=i}print sum}'

echo "a|b|c|d" | awk -F"|" '{for(i=1; i<=NF; i++) print i, $i}'

echo 'a|||d|e' | sed ':repeat; s/||/|\N|/g; t repeat'

 echo "a~b" | sed 's/~/==/g'

echo b.sh | at -t `date -v+60S "+%Y%m%d%H%M%S"`

echo "base64 string" | base64 | od -c

echo 'bash myfile.txt' | at midnight

rt$ echo "bcdujcd.2"|awk -F'[^0-9]*' '$0=$2' 

url=`echo bin/hadoop dfs -get urls-input/MR6/*url* .`

echo "bla 18934750 + wwv_flow_id.offset bla" | sed -E s/\ \\+\ wwv_flow_id.offset/blabla/

echo "bla 18934750 + wwv_flow_id.offset bla" | sed -E 's/ \+ wwv_flow_id.offset/blabla/'

echo "bla 18934750 + wwv_flow_id.offset bla" | sed -E 's/([0-9]+) /\1/'

echo "bla 18934750 + wwv_flow_id.offset bla" | sed -E s/\([0-9]+\)\ /\\1/

echo "bla bla word word1 = strin1 string2" | awk -F"=" '{print $2}' | awk '{print $2}'

echo blabla a13724bla-bla244 35% | sed 's/.*[ \t][ \t]*\([0-9][0-9]*\)%.*/\1/'

echo 'blabla {$email} blieblie {$name} bloebloe ${alreadydone|escape:htmlall}'|sed 's/{\(\$[^}\|]*\)}/{\1|escape:htmlall}/gi'

echo blah | telnet -yrDumb

echo 'c:\path1\abc\dir 2\file.txt' | sed 's/\\abc//'

echo "cat  //title/text()" | xmllint --shell  rss.xml

echo "cat  //title/text()" | xmllint --shell  rss.xml  | egrep '^\w'

echo cba | grep -o . | sort |tr -d "\n"

echo cd /\;bash > /tmp/new.command;chmod +x /tmp/new.command; open /tmp/new.command

echo 'cd /path/to/dir' | cat - localscript.sh | ssh -T remotehost

echo "changing directory '$dirpath' `cd $dirpath`"

echo 'cmd1; cmd2; cmd3' | su install

echo "col1 col2" | awk '{for (i=1;i<=NF;i++) print $i | "gzip > out" i ".gz"}'

echo "colorscheme slate" >> ~/.gvimrc

 echo "column3 = $(awk '{print $3}' test.txt |sort -nu |  paste -s -d, )"

echo "column3 = $(tr -d - < test.txt| awk '{print $3}'  |sort -nu |  paste -s -d, )"

result=$(echo 'command' <&${bkgndProc[0]})

echo "command ..." | env - PATH="$PATH" sudo su - otheruser -c "at now"

echo 'command[runcmd]=sudo service $ARG1$ restart'

(echo commands; cat) | gdb X

echo commands | gdb X

echo 'commands' | script

echo "connect localhost:35873\ngetconfigs\nquit" | flume shell -q 

echo convert "${f[@]}" "${PWD##*/}.pdf"

echo cp $HOME/tools/{$FILES_TOOLS} $TOP_DIR/removeme

echo cp -nv -- "$fn_orig" "$fn"

echo cp -nv -- "ff/$fn_orig" "ff/$fn"

echo "create database databasename" | mysql -u username -p

echo "data" | awk -vORS=, '{ print $2 }' | sed 's/,$/\n/'

echo "data" | mail -s "$subj" mail@mail

echo ddayaynightday | sed -e ':loop' -e 's/day//g' -e 't loop'

echo 'deb blah # blah' | sudo tee --append /etc/apt/sources.list

echo 'deb blah # blah' | sudo tee --append /etc/apt/sources.list > /dev/null

dec_value=$(echo dede0a01 | tr '[a-z]' '[A-Z]' | sed 's,\(..\)\(..\)\(..\)\(..\),ibase=16;\4\3\2\1,g' | bc)

echo 'deploymenet xxxx.xml' | ./flow.sh connect localhost login user password

echo "dev/temp/text/"$(grep 'Some pattern' location/*filename* | cut -d ' ' -f2 | cut -d '}' -f2 | grep -v '^$' | head -1) | xarg grep 'some pattern'

echo "diff(A45(i,j),alpha[1])" | sed 's/diff(A45(i,j),alpha\[1\])/dzA45(i,j)/'

echo "\dira\dirb\abc\def\aa.txt" | sed 's;^\\[^\\]*\\[^\\]*;http:\\\\something;'

echo "dis clusqmgr(*) suspend"|runmqsc QMGR1|egrep 'CLUSQMGR|SUSPEND'|paste -  - | awk '{print $1,$4}' 

echo "dn: '$RESULT'" >> $SCRIPTPATH/gadspwsync.ldif

echo "dog cat fish +hamster" | awk 'NF--'

echo dog dog dos | sed -e 's:dog:log:g'

echo 'dot1dTpFdbPort[00:02:6f:d9:16:ca] 12' | sed -e 's/^.*\[//g' -e 's/[][\:]//g'

echo easy | gpg --passphrase-fd 0 -d secrets.txt.gpg > fifo &

echo easyFirst.txt | java -cp . First - > easyFirstResult

for f in *; do echo >> $f; echo $f >> $f; done

x=5;echo | x=6;echo $x

x=5;echo | (x=6;echo $x)

 echo echo ${declaration#*-a[b-z]* };

var=$(echo echo "This is command #1";)

echo echo a$'\t'$'\t' | bash -i 2>&1 | head -3 | tail -1

(echo echo foo) | /bin/bash

echo "echo hello > /var/tmp/hello.out" | at now + 1 minutes

echo "echo hello" | at now + 1 minutes 

echo echo hello > sayhi.command; chmod +x sayhi.command; open sayhi.command

echo 'ee' | tee /dev/tty | foo

echo 'ereg ($rat, $dog, $cat)' | sed "s/ereg\(.*\)(\([^,]*\),/preg_match\1('#'.\2.'#',/g"

echo "error" | tee -a log 1>&2

echo eval ' if [ -r <INCL_FILE> ] ; then source <INCL_FILE> ; else logger -t <SCRIPT_NAME> -p crit "unable to source <INCL_FILE>" ; exit 1 ; fi '

echo 'execfile("myFile.py")' | python manage.py shell

name=$(echo exit | telnet $1 $2 2>/dev/null | grep "Connected")

echo "export LANG=en_US.UTF-8" >> ~/.bashrc

echo "export PRIMOSBASE=/directory/for/primosfiles" >> ~/.bashrc

echo "export PYTHONPATH=/usr/local/lib/python2.7/site-packages" >> ~/.bashrc

echo 'export ROS_PACKAGE_PATH=/home/forklift/forklift-workspace:$ROS_PACKAGE_PATH' >> ~/.bashrc

echo "face_date:=TO_DATE($(echo $str | cut -d '=' -f2)),'YYYY/MM/DD');"

echo "fail" >&2

echo ff | awk $'{print "Students name is \'" $1 "\'" }'

echo "fffff"|awk '{gsub('f', "b")}1'

echo "fffff"|awk '{gsub(//, "b")}1'            # fbfbfbfbfb

echo "ffmpeg -version" > /tmp/ffmpeg

echo "file    input.txt" | sed 's/  */ /g'

for i in ${array[@]} ; do echo "file = $i" ; done

echo 'file_1.gz'|sed -n -r 's/.*_(.*)(\.gz)?/\1/p'

echo 'file_1.gz'|sed -r 's/(.*_(.*)\.gz)|(.*_(.*))/\2\4/'

 (echo 'first bit';perl myScriptThatOutputsSecondBit.pl;echo 'third bit') > dist/$i.htm 

(echo first line; cat file; echo last line) | some_command

echo "first second third" | awk 'BEGIN{RS=" "} {print $1}'

echo "first second third etc"|cut -d " " -f2-

echo 'first url, second url, third url' | perl -nle 'm/second ([^ ]*)/; print $1'

echo 'first url, second url, third url' | sed 's/.*second \([^ ]*\).*/\1/'

echo 'first url, second url, third url' | sed 's/.*second//'

 $ echo "fish duck     cheese            bacon" | wc -w

var=$(echo "flush_all" | nc localhost 111 | tr -d '\r')

echo folderName/input*.txt | xargs -n 1 -P 16 mycmd

echo foo | VAR=value bash -c 'read line; echo $VAR: $line'

echo "foo" >bar.txt

echo "foo 'bar' it's 'OK'" | sed -E "s/'([a-zA-Z]*)'/\1/g"

echo foo + bar + haz | awk -F+ '{print $3}'

echo foo + bar + haz | awk '{print $3}'

echo "foo"|./x.awk file1 - file2

echo "foo"|awk 'NR==FNR{print $1;next}{print $1}' - file

echo "foo"| awk '{print $1}' file

echo foo          bar

echo 'foo bar 12 34' | awk '{print $1,$2,$3"/"$4}'

echo 'foo bar baz q45' | awk '{ for (i=1; i<=NF; i++) if ($i ~ "q45") print $i; }'

echo "foo bar" | node test.js

echo "foo bar" | read i

$ (echo foo; echo bar) &

echo foo | file -

FOO=$(echo "foo[bar]" | sed 's/\[/\\[/g') && echo $FOO

FOO=`echo "foo[bar]" | sed 's/\\[/\\\\[/g'` && echo $FOO

echo foo | while read a; do echo $a; done

echo "foo"|sed '/bar/ s/a/b/'

echo foo | strace bash -c 'read -n 100 f'

echo foo | sudo tee /path/to/file > /dev/null

 echo "foo" | tee /dev/stderr 

echo "foo" | tee /dev/stderr | yourscirpt

$ echo 'foo' | tee f1.txt > f2.txt

$ echo 'foo' | tee f1.txt f2.txt 

echo "foo" | wc -c

echo "foo" | x.awk file

echo "foo" |x.awk file1 file2 file2 -

echo foo$myvariablebar

echo foo${myvariable}bar 

echo 'foo'\''bar'   # Concatenation of "foo", "'" and "bar".

echo foo.BAZ.bar | awk 'BEGIN{IGNORECASE = 1}{gsub(/[.]baz[.]/,".")}1'

echo 'fooman@example.com' | rot13

echo 'fooman@example.com' | tr '[A-Za-z]' '[N-ZA-Mn-za-m]'

echo "foo\nbar"

echo "foo\nbar\nbaz\nwith spac e s\noh:noes\noh\:yes" >! ~/simple-complete

echo 'fooo        bar' | perl -pe 's/( +)/\033[41m$1\033[00m/g'

sampleName=$(echo 'galax_report_for_Sample11_8757.xls' | cut -d _ -f 4)

echo get %name% >> ftp.txt

echo git@git.gitweb.com:/myModule-repo.git | sed 's%^.*/\([^/]*\)\.git$%\1%g'

echo "google" | fold -w1

echo 'gra$$' | bash yourscript

echo "grep a | grep b"

echo happy | sed -r 's/([p])([p])/*\1*\2*/'

echo happy | sed 's/\([p]\)\([p]\)/*\1*\2*/'

echo "hell-hello-helloo" | perl -F/-/ -ane 'print join("-",@F[0,1]);'

echo "hello" 2>/dev/null

function myfunc() { echo hello; }

echo hello >> log.txt 2>&1

 echo "hello"|./foo.awk file -

echo hello | ./valecho &

echo "hello `sleep 2 &`"

echo 'hello' | awk '{print}' >qq.tmp

echo hello | cat < inputfile

echo hello | tee >(rev)

echo "hello world"

echo hello world

"echo hello world"

echo "hello world" | awk '{split($0, array, " ")} END{print array[2]}'

echo "hello world doddy" | sed -e 's/\(.\) \1/\1  \1/g' -e 's/\(.\) \(.\)/\1\2/g'

hey=$(echo "hello world" | gzip -cf)

echo "hello world" | gzip -cf > /tmp/myfile

$ echo "hello world" | mail -s "a subject" someone@somewhere.com

echo "hello world" | mail -s hello me@example.com

echo "hello world" | mutt -a task*.log -- me@example.com

echo "hello world" | { read test; echo test=$test; }

echo "hello world" | sed -n 's|hello \(w\).*|\1|p'

echo hello world | sed -r 's/(\w+) (\w+)/\1 (\2)/'

echo hello world | tee /dev/tty | awk '{print $2, $1}'

echo 'hello world' | tee aa bb > cc 

echo hello "|" grep hi

echo 'hello\\nthere'

echo 'hello\\nthere' | sed -e 's/\\\\n/ /g'

echo "hey hey, we're the monkees" | tee /dev/tty | gzip --stdout > my_log.gz

echo hi > /dev/null &

echo hi $(awk NR=="$x" file.txt) $(awk NR-1=="$x" file.txt) bye

echo hi $(awk NR=="$x" file.txt) bye

echo "hi" > $(tty)

echo "hi" | write $(whoami) $(tty)

 echo "http://bla.com|http://blabla.com" | tr '|' '\n'

echo 'http://dx.doi.org/'"$(pbpaste)"

echo 'http://dx.doi.org/'"rsif.2012.0125"

somevar=$(echo "http://google.com" | sed -e 's/[/]/\\\//g')

somevar=$(echo "http://google.com" | sed -e 's|/|\\/|g')

 echo "http://randomurl/suburl/file.mp3" | sed 's#.*/##'

echo "http://www.myserver.org/very/very/long/path/mystring" | perl -pe 's|^http://www.myserver.org/very/very/long/path/(.*)$|\1|'

echo "http://www.myserver.org/very/very/long/path/mystring" | sed "s|^${variable}\(.*\)$|\1|"

echo "http://www.myserver.org/very/very/long/path/mystring" | sed 's|^http://www.myserver.org/very/very/long/path/\(.*\)$|\1|'

$ echo http://www.site.org/{1..10} | tr ' ' '\n'

echo "https://secure.XYZ.ab.mydomain.com" | sed -e 's+https://[^/]*\.mydomain.com+https://secure.future.qa.mydomain.com+'

$ for i in "$myvar";  do echo i $i;  done

$ for i in "abc1def1gh1";  do echo i $i;  done

echo i | cat - input.file commands.list | ed -s

echo "i m sure he doesn t test test don t." | sed 's/ \([mt]\)[[:>:]]/\1/g'

echo 'ibase=16' | cat - hdump | tr ' ' \; | bc | awk '{printf("%c",$0)}'

echo 'ibase=16' | cat - input.txt | tr ' ' \; | bc | awk '{printf("%c",$0)}' > output.txt

echo "ibase=16; obase=2; A15" | bc

echo "identified file $1 as $PWD/$1"

echo "if (1.2>1.3) 1" | bc

(echo "import sys" ; echo "for r in range(10): print 'rob'") | python

echo "include /home/adrian/app/config/fluentd/td-agent.conf" > /etc/td-agent/td-agent.conf

echo "info" | vlc -q

echo "input" | awk '{print $1"string"}'

echo "input" | command

echo insecure >> $HOME/.curlrc

echo "int temp; // this is temp variable" | sed 's@//\(.*\)$@/*\1 */@'

test="example $(echo "internal")"

{ echo "iscale=16"; prog1 | prog2; } | sed 's/$/*2/' | bc

{ echo "iscale=16"; prog1 | prog2; } | sed 's/\(.*\)/\U\1*2/g' | bc

echo 'java -Xms$ramM'

echo java -cp '.;.\common.jar' -Dcontext=atest1 -Dresourcepath=. DW_Install

echo java -cp '.;.\common.jar' -Dcontext=atest1 '-Dresourcepath=.' DW_Install

echo 'java packet.Program $$1 $$2 $$3 $$4' > programScript

echo "jn34r 38&Y EY$@H #EY$@HDCmhf453gf=,e73e3bnd2wbyzd fr fr4fn3r f 4df 3" | awk -F= '{print "words_before="$1"\nwords_after="$2}'

echo "ko05414     ko:ITGA4" | sed 's/\(^ko[0-9]\{5\}\)\tko:\(.*$\)/\1\2/'

echo "l=l.split('\\\n')"

echo lastAnn < /.smc/lastAnnouncement.txt;

echo line1\nline2\nlin3

echo "loadings_file <- \"$loadings\" ; calls_file <- \"$file\""

echo "loadings_file <- '$loadings' ; calls_file <- '$file'"

  echo lock_me > /sys/power/wake_lock

  echo lock_me > /sys/power/wake_unlock

echo "log 2" | tee -a 2.log 123.log

echo lpr ../{Che,Phy}/{*.pdf,*/*.pdf}

echo ls -1 | sftp remote-site:dir

echo ls -1 | tr '[a-z]' '[A-Z]'

echo "ls -l" | at 07:00

echo ls -l | sftp server | wc -l

 echo ls | ftp host port | awk -v cutoff="$(date -d "5 days ago" +%s)" '{line=$0; "date -d \""$6" " $7" " $8 "\" +%s" |getline; fdate=$1} fdate < cutoff {print line} '

echo 'maps.google.com' | rev | cut -d'.' -f 1 | rev

echo mike@yahoo.com | sed 's/[a-zA-Z0-9][a-zA-Z0-9]*@\([a-zA-Z0-9][a-zA-Z0-9]*\.[a-zA-Z0-9][a-zA-Z0-9]*\)/customer@\1/g'

echo 'mkdir -p ~/Desktop/CronSuccess' | at now + 10 hours 

echo moo cow boo | xargs -n 1 echo

echo "mtjoseph:6/MKTCzMS/YU.:10974:10060:Matthew"| awk -F ':' '{print $5}'

echo "mv $1 ${G_DEST_DIR}"

echo mv "$f" "${f//[[:cntrl:]|!@#$%^&*()]}"

for f in *.png; do echo mv "$f" "${f/_*_/_}"; done

for i in myfile.*; do echo mv "$i" "${i/myfile./newname.}"; done

$ for i in *; do echo mv $i ${i/somewhere/elsewhere}; done |sh

echo mv "${new}/accepted_hits.bam.bai" "${new}/${new}.bam.bai"

for i in *.txt; do echo "mv '$i' '${i/?.txt}.txt'"; done

for i in *.txt; do echo "mv '$i' '${i/?.txt}.txt'"; done | sh

    echo "mv -v $d $p/abc-$b"

echo "my message" >&2

echo "myImage.jpg" | sed 's/.jpg//'

echo my_command myargs | /bin/bash/

twonum=`echo 'my_file_name-00-andsome' | sed 's/^.*\(.\)\([0-9][0-9]\)\1.*$/\2/'`

echo myfile*.dat | xargs -n 1 mycommand

$echo mypassword | sudo -S vim /etc/resolv.conf

echo 'n' | cp --interactive ~/somefile.txt ~/somefile_already_exists.txt

str=$(echo "\n" | sed 's/\\n/---\\&/g')

{ echo n ; yes ; } | pacman ...

echo "\nCompiled on:\n $(gcc --version | sed 's/^/\t/g' )\n"

echo 'new line' >file_name

(echo "new_value" | read var) && echo $var

echo "new_value" | (while read var; do echo $var; done)

echo "ntpd Service Respawned" | mail -s "ntpd Service Respawned" my_email@gmail.com

( echo "obase=16" ; cat file_of_integers ) | bc

echo "obase=16; 34" | bc

echo "obase=2;$1" | bc | sed -r 's/(.)/\1 /g'

echo "obase=2;$1" | bc | sed 's/./& /g'

echo "obase=2;$1" | bc | sed 's/\(.\)/\1 /g'

echo "obase=2;$ip1" | bc

~$ echo one && echo two

~$ echo one ; echo two

~$ echo one || echo two

echo "one two three filer"|sed -e "s/\([^ ]\{1,\} \{1,\}[^ ]\{1,\}\) \{1,\}\(.*\)$/\1\n\2/g"

echo "one:two:three:four:five" | awk -F: '{ st = index($0,":");print $1 "  " substr($0,st+1)}'

echo "out $i"

f() { echo out; echo err >&2; }; f >/dev/null |& cat

echo "output from sysuser database - <a href='sysuser/model01-$tstampm'></a> <br />"  >> /home/sysuser/docs/dbmodels/index.html

(echo 'param 1'; echo 'param 2'; echo 'param 3'; echo 'param 4') | while read line1; read line2; do echo "[$line1] [$line2]"; done

echo "passphrase" | gpg --passphrase-fd 0 --batch -d --output "decrypted.file" "file.gpg"

echo password|command

echo password | db_perf_clean.sh

echo "password" | scp me@localhost:test .

echo "password" | sudo -S apache2ctl -l graceful 

echo pgrep -f \'$PATTERN\'

echo "pid 2928's current affinity list: 0-3 pid 2928's new affinity list: 0" | awk -F "[ ']" '{ print $2 ": " $7 " --> " $14}'

abc="a/b/c"; echo porc | sed -r "s:^:$abc:"

abc="a/b/c"; echo porc | sed 's!^!'"$abc"'!'

echo prefix = ~/.node

echo prefix/${^~$(<globs.txt)}

echo "printf $foo"      # printf ' 

echo ps

   echo put $clientfilepath'client-'$clientversion-'.jar'|tr '\n' '' >> ftp.ftp

echo "put file.txt" | sftp -b - servername &

echo 'python my_script.py data_arg' | at now + 5 minutes

echo python path/to/somescript "$1" | at `python -c "import sys; hour,minute=map(int,max(sys.argv[1:]).split(':')); minute += 1; hour, minute = [(hour,minute), ((hour+1)%24,(minute+2)%60)][minute>=60]; print '%d:%02d'%(hour, minute)" "$minute" "$curr"`

echo q > ydl-input

echo "qwertyuiop" | awk '{ for(i=1;i<=5;i++) x = x substr($1, 6, 4); print substr($1, 1, 3), x }' OFS=

echo "qwertyuiop" | awk '{ print substr($1, 1, 3), x = (substr($1, 6, 4)), x, x }' OFS=

 echo "random words domain name example.com random words" | grep -oP  "domain name \K[^ ]+\.com"

    echo read ...

echo rend | ./spellcheck corpus_colors

echo 'repl.look()'|nc localhost 4242|grep -i tab

kent$  echo "result:3*3"|sed -r 's/(result:)(.*)/echo \1$(echo "\2"\|bc)/ge'       

echo 'rm -rf !(cookbooks)' | bash -O extglob

echo rvm_install_on_use_flag=1 >> ~/.rvmrc

echo rvm_use_flag=0 >> ~/.rvmrc

echo "sad ads ( this should come" | awk -F"[(] " '{print $2}'

echo "scale 1; 90 - 70.333" | bc

echo "scale 1; 90 - 70.333/1" | bc

echo "scale=10; 1/3" | bc

echo "scale=1; $RX/10" | bc

theta=$(echo "scale=1; $i * 12.5" | bc -l)

percent=$(echo "scale=2; $count/$total" | bc)

echo "scale=2; 1/3" | bc

BE=$(echo "scale=2; res=(100-($S*1.86)); if (res < 75) {res=75}; if (res > 89) {res=89}; res" | bc -l)

totalmark=$(echo "scale=2;$sum/$subjects"|bc)

USEDPCT=$(echo "scale=3; $USEDMEM / $MAXMEM * 100" | bc)

elapsed_time_in_ms=$(echo "scale=3;$elapsed_time/1000000" | bc)

CCC=$(echo "scale=3;$k/($i*$j)" | bc)

while IFS=, read animal dividend divisor; do quotient=$(echo "scale=4; $dividend/$divisor" | bc); echo "$animal,$dividend,$divisor,$quotient"; done < inputfile | sort -k4,4nr -t | sed 's/,[^,]*$//'

rul@helicon:/tmp/a/script-0.1$ echo "script.sh usr/local/bin/" > debian/install

echo "script2.sh received $# parameters"

echo 'select * from myvalue;' | psql -t -h host -U user -d db

echo "select 1" | mysql

echo 'select some_column from some_table' | mysql -uusername -ppassword some_db | tail -n+2

(echo 'set foreign_key_checks = 0; truncate table saurabh.bus_services;' ; mysqldump --compact --no-create-info -h192.168.150.80 -uroot -p live pnlbus) | more

echo "set show-all-if-ambiguous on" >> ~/.inputrc

echo "set term canvas mousing size 500, 500; set output 'file_name.html'; plot 'my_file.txt' with lines" | gnuplot

echo "size is:" `du -sh` "...."

out=`echo sleep 10 | qsub 2>/dev/null`

echo "smth \$string"

echo 'smth $string'

echo 'some SQL' | sudo sqlite3 /some/database.db

echo "some command" > /dev/usbXXX

echo "some command" && > echo "some other command"

echo some command

echo "some command" && echo "some other long command"

echo "some data" > /path/to/named/pipe   # blocks until other script consumes!

echo "some input" | yourprog

echo "some string" | tr -d -c ".[:alnum:]"

echo some text > COM{n}

echo "some text" >> somefile.txt

echo "some text here" > file.txt

echo some text with spaces | sed -e 's/ //g'

echo some text with spaces | tr -d ' '

$ echo some_text123_[123]_some_text | perl -ne 'print "$1_", "$`", "$'\''\n" if /\[(\d+?)\]/;' -

echo some_value > /proc/pid/oom_score_adj

echo someletters_12345_moreleters.ext | cut -d'_' -f 2

echo "something" > /proc/pid-of-process/fd/0

echo "something" > file

echo something | read param

$ echo something | sudo tee /var/lib/varlibfile

echo "source /path/to/starcluster/completion/starcluster-completion.sh" >> ~./bashrc

 echo source /usr/share/virtualenvwrapper/virtualenvwrapper.sh >> ~/.zshrc

echo 'source ~/.bashrc' >> ~/.bash_profile

for f in *.c; do echo "stackOverflow" >> $f; done

echo "start index for creating version array${START_INDEX} commit ID: ${COMMIT_SHA_ARRAY[${ARRAY_INDEX}]}"

echo "started at: $(date)" > log.txt; your_prog; echo "ended at: $(date)" >> log.txt

echo stop | java -Xmx1024M -Xms1024M -jar craftbukkit.jar > /dev/null

echo string | sed ...

echo stringBsomething | sed -e 's/\(stringA\|stringB\|stringC\)something/something else/'

echo suhail| passwd $username --stdin

echo "syntax on" >> ~/.gvimrc

echo "taco my-fish-tacos my_fish_tacos" | sed 's/[^ _-]*/\u&/g'

$ (echo tar cf - '<<EOF'; cat your_here_doc; echo EOF) >self_expanding_files.sh

echo temp | sort -n | uniq -c | awk '{ print $2, $1 }' > temp2

{ echo test > out1 ; } > out2

echo "test [test1] test" | grep -Po "(?<=\[).*?(?=\])"

echo test > oo^ ^%PATH^%

echo test | cat

echo "test" | sed 's#{"playlist":\[#{"playlist":[{"comment":" text 1","playlist":[#'

 echo 'test text "here_is_some_test_text_'"$counter"'" "output"' >> ${FILE}

echo test | xargs cat

echo test | xargs rm

echo "test++abc" | awk -v bar='test[+][+]' 'BEGIN {FS=bar} {print $2}'

$ echo "test.jpg" | sed 's/\.\([^.]*\)$/.th.\1/'

echo "test:" | sed 's/:$//g'

echo test@test.com | egrep '^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,6})$'

echo tester.html | grep -q '\.html$' && echo "MATCH" || echo >&2 "NO MATCH"

echo "testing" | mail -s "$OUT" user@example.com

echo 'testing only' | awk  '{print $2}'

echo 'testing only' | cut -c 2

echo "text" > 'Users/Name/Desktop/TheAccount.txt'

echo thePassword | passwd theUsername --stdin

echo this || echo that && echo other

echo "this is ${bold}bold${normal} but this isn't"

{ echo "this is a header"; cat -; }

$ echo "this is a sample id='42' string" | sed -r "s/id='.*?'/id='1'/g"

echo 'this is input' | sed -r 's/(\w+)\s+/\1\n/g'

echo 'this/that/theother/stuff' | awk -F/ '{print $(NF-1) "/" $(NF)}'

echo 'today_is_sunny[0F]' | sed -e 's;\(\[\)\([0-9]\)F;_F\1\2;'

echo "tog-pegasus-2.12.1-16.el7.x86_64" | cut -d . -f 3 | cut -d - -f 1

var=$(echo 'type: 1000' | cut -f 2 -d ' ')

echo "update contact set email_address='foo@bar.com';" | /path/to/isql --your-favorite-switches

echo "update-8.1.0-v46.sql" | sed 's/update-8.1.0-v\([0-9]*\).sql/\1/p'

my_val=$(echo "used_memory:1775220696"  | awk -F':' '{print $2}')

my_val=$(echo "used_memory:1775220696"  | cut -d':' -f2)

echo 'user_pref("browser.startup.homepage", "http://stackoverflow.com");' >> prefs.js

echo "usr_web88_2" | sed 's/_/\\_/g'

echo "v=1;echo v=$v"|ssh user@host

echo 'v=1;echo v=$v'|ssh user@host

echo "value1" "value2" | { read a b ; curl --data 'valA=$a&valB=$b' http://example.com ; }

echo var=$var, anothervar=$anothervar

echo "varchar(255) CHARACTER SET utf8," |  sed 's/ CHARACTER SET [[:alnum:]]\+/ /g'

echo "vif         = [ 'ip=1.2.3.4, mac=00:00:00:00:00:00, bridge=eth1', 'ip=5.6.7.8, mac=11:11:11:11:11:11, bridge=eth1', 'ip=9.1.2.3, mac=22:22:22:22:22:22, bridge=eth1' ]" | tr -s "[,'" "\n" | grep "^ip=" | cut -d "=" -f2

echo 'void f0 (***) | void f1 (***) | void f2 (***)| void f3 (***) ' | sed 's, *| *,\n,g'

echo 'w' | ./ex17

echo "wait \$!"

echo 'wait $!'

echo "what the ..." | awk '{ "./yourfunction.sh" FS $1 | getline $1 }1'

echo "what the ..." | awk '{ system("./yourfunction.sh" FS $1) }'

echo whatever %logg%

echo "when printed with echo \$(printf '%q' $x) it looks like: $(printf '%q' "$1")"

echo word | the_cmd

for line in File* ; do echo "working on $line" ; sort $line | uniq ; done

echo y|format.com D: /V:DATA /Q

echo yes | your_bash_script

echo "your Answer = AA" | awk '/= (AA|AB|CD|XY|DD)/ {print " passed "}'

echo "your long task" | at now

echo "your statement here" | mysql -u username -p password

echo 'your, text, here' | fold -sw 70

echo "yourLongString" | sed 's/.\{16\}/&\n/g' 

$ echo "your_strin" | cut -f4 -d$'\t' your_file

echo "yourpassword" | sudo -S

echo "zgrep $line2 *.gz"

echo '{"Allowed","20863962"}'

echo "{\"Cpu\":\"`top -b -d1 -n1 | grep Cpu | cut -f3 -d " " | cut -f1 -d %`\"}"

function bs { echo '{"account":"a1","portfolio":"p1"}' | nc 0 9000; }

echo '{"field1": "value","field2": [{"field3":"value","asd":1},{"field3":"value2","asd":2}],"field4":"value4"}' | jq '.field2[] | .["field3"]'

echo {.,lib}/*.js

$ echo {0..9} {a..z} {A..Z} @ _

$ echo {1,2}

$ echo {1,2}

echo {800..829} {831..850}

echo {a,b,c,d,e,f,g,1,2,3,4,5,_}{a,b,c,d,e,f,g,1,2,3,4,5,_}

echo {a,b,c}{A,B,C}{1,2,3}

echo {a,b,c}{A,B,C}{1,2,3} | xargs -n1

echo {a..z}{a..z}{a..z}{1..100} > permutations

echo {a..z}{a..z}{a..z}{1..100} | sed -e "s/\ /\n/g" > permutations

echo {a..z}{a..z}{a..z}{a..z}

echo "{one}two" | sed 's/\(.*\)two$/three\1/'

echo '{running_device,[test@01,test@02]},' | tr -cd @ | wc -c

echo "{something: here}" | awk '{print "[" $0 "]"}'

echo "{something: here}" | echo "[$(cat)]"

a=$(echo {} | sed s/_123456_/_/)

echo '{}' |tr '\{\}' '\[\]'

echo "|$COMMAND|"|tr '\n' ' '

 echo '}' | tr \} \]

echo. 2>EmptyFile.txt

echo.>filename

echo.>> a.txt

 (echo.&echo.&echo.&echo.) | MyBatchScriptWithPause.bat > somefile.txt

echoLog "Expanding $1..."

echo_arguments $1

echo_arguments "$1"

eclipsec -nosplash -application org.eclipse.jdt.apt.core.aptBuild -data %WORKSPACE%

eclipsec.exe -noSplash -data "D:\Source\MyProject\workspace" -application org.eclipse.jdt.apt.core.aptBuild

<<< '/Start/+1,/End/-1p' | ed -s infile

$ n_del=4; ed -s test <<< "1,${n_del}"d$'\n'wq

edit myFunction

bash$ editJson rsids="1 2" clientCode="2" server="3"

"\ee": "${PWD##*/}\e\C-e"

egrep '    User-Agent:|    Time to live:' ../*.txt

egrep '[[:digit:]]{3,5}\.[[:digit:]]{5}' file

egrep '[0-9]{1,3}(?:\.[0-9]{1,3}){0,3}/[0-9]+' /path/to/file

egrep "[@[:alnum:]]+(\.com)" patternNpara.txt

egrep '[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,6})'

egrep "$(awk -F'"' '{ printf ("%s%s", j, $2); j="|" }' input)"

egrep "$@"

egrep '([0-9].*){10}' file.txt | egrep -v '(^|[ \t])[0-9]{1,3}(\.[0-9]{1,3}){3}([ \t]|$)'

egrep '(^ax|sx$)' usr/dict/words

egrep "(^| )$file1( |$)" "$file2"

egrep '(^|,)306(,|$)' file

egrep '(^|\s)/($|\s)' file

egrep "(cd|yum|install|cat)" file | wc -l

egrep --color 'pattern|$' file

egrep -A1 $(sed -e 's/^/<ID>/g' -e 's/$/<\/ID>/g' ID_list.txt | sed -e :a -e '$!N;s/\n/|/;ta' ) XML_example.txt | grep "<name>"

egrep -a -A 2 ApplicationIdentifierPrefix file.mobileprovision | grep string | sed -e 's/<string>//' -e 's/<\/string>//' -e 's/ //'

POM_ERRORS=$(egrep -e "\\\\" pom.xml | egrep -v -e "\\\\$")

egrep -f <(cut -c4-10 A | sed -e 's/^/^.{6}/') B

egrep -f <(cut -c4-10 A | sort -u | sed -e 's/^/^.{6}/') B

egrep -f file2 file1

egrep -f regexrulefile.txt the_big_file

egrep -io '[a-z0-9\-]+\.co(m)?(\.[a-z]{2})?' input.txt | sed -e 's/www.//' | sort | uniq >output.txt

egrep -ir --include=*.{php,html,js} "(document.cookie|setcookie)" .

egrep -lir --include=*.{php,html,js} "(document.cookie|setcookie)" .

egrep -l 'pattern' * | xargs $EDITOR

egrep -m1 '^# DESC' "$line" | cut -c 9-

egrep -no '(\w+ ){1,3}keyword( \w+){1,2}' file

egrep -n '^[,]+$' file

egrep -n '^[,]+$' file | cut -d: -f1

egrep -o '[0-9]+'

A=$(egrep -o '[0-9]+' my_file | egrep -c '^1')

egrep -o '[a-zA-Z]* [A-Z]{2,3}/fd' test_regqexp_keynote.txt

egrep -o '"([^"]*)"' sourcefile | sed -r 's/"(.*)"/\1/'

egrep -o '"name":"Rausschmeisser","link":"[^"]+' | cut -f8- -d\"

$ egrep -o '([0-9]{1,3}[.]){3}[0-9]{1,3}' file

 egrep -o  '(January|February|March|...|December) [0-9]+, [0-9]+' Input.txt

egrep -o "(\s(rs\S+))" data.txt | cut -d " " -f 2 > newfile.txt

egrep -oh '[[:blank:]].+\|[[:blank:]]+OK\|[[:blank:]]+INFO\|[[:blank:]]+\[CATLG' myfile.log 

egrep -oh '([A-Z]+)_([A-Z]+)_([A-Z]+)' -R /path | sort -u

egrep -oi '[^ ]*dna[^ ]*' file

egrep -o ....uniq|paste -d, -s

egrep -o '\[wiki:[^]]*]' pages/* | sed 's/\[wiki://;s/]//' | sort -u

egrep -o '\[wiki:[^]]*]' pages/* | sed 's/\[wiki://;s/]//;s/ .*//' | sort -u

egrep -o '\b[^ ]+\.' < list_of_words | sort | uniq

egrep -o '\b(CLUSQMGR|SUSPEND)\S+' | paste - -

egrep -o "http://[^'\"]+.mp3" FILENAME

egrep -q "\.(com|es|de)$"

egrep -q 'Added|Changed|Fixed|Deleted'

egrep -v " grep | tee | $0 "

egrep -v '(\?\s+){3}(Yes|No)' ./fileToTest > outputFile

 egrep -v '\.(jpg|gif|xml|zip|asp|php|pdf|rar|cgi|html?)'

egrep -v '^ *[0-9]+((\.[0-9]+){3})? +banned\.$'

egrep -v '^[0-9!?@]|[0-9!?@]$' file

 egrep -v '^[HT]:' input-file > output-file

egrep -v '^(..)+$' file

RESULT=$(egrep -v "_unknown|sciences|everyone|netaccounts" $GROUPSS)

egrep -v 'string one|string two' file.log

egrep -v "xxx|yyy|zzz" $file | grep -v -E -i '([0-z])\1{2,}' | sort -u  > tmp_file

egrep -v "xxx|yyy|zzz" $file | grep -v -E -i '([0-z])\1{2,}' | uniq | sort -u  > tmp_file

egrep -w -v -e "word1|word2" file

egrep -w 'Inbox|Outbox' your_input > your_output 

egrep -w 'TCP|UDP' denied.txt | sed 's/:[^:]* \(in\|out\)/ \1/'

egrep '/.*/' filename | sh

egrep 'CLUSQMGR|SUSPEND' filename | paste - - | awk '{print $1, $4}'

egrep 'CLUSQMGR|SUSPEND' | paste - - | awk '{print $1, $4}'

egrep '\<foo ?[,)]' file

egrep '^[A-Z]+$' file

egrep ^[^:]*:[^:]*:38: /etc/passwd

egrep "^[^:]*:RG1:-" a.txt | cut -d: -f3 | cut -b3-

egrep '^[^|]*\|([^|]*\|[^|]*\|)*[^|]*$'

egrep '^[a-zA-Z0-9_-]+$' file > newfile

egrep '^([^ ]*\.)?domain\.si' /var/log/access.log

egrep '^(([0-9])\2{2}([a-z])\3{2})+$' file

egrep '^.{1,100}$' filename | grep 'string'

egrep '^.{42}foo'

egrep '^A[^[:blank:]]*[[:blank:]]+B' file

egrep '^From:' $file | cut -c7-

egrep '^\+(.{6}\+)*.{0,6}\s' brain.txt

egrep '^\+(.{6}\+)+.{0,6}\s' brain.txt

egrep ^artistName | cut -d ' ' -f 2-

egrep "blabla" car[0-9]*.txt

egrep "blabla" car[0-9].txt

egrep "blabla" car[0-9].txt car[0-9][0-9].txt

egrep "id='( or|%20)'" apache.log

egrep 'pattern|^' file

egrep - search a file  for  a  pattern  using  full  regular expressions

(( elem++ )) || true

elif[ "$seconds" -gt 0 ]

em:id="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"

emacs $(grep foo $(grep bar * -l) | awk -F':' '{print $1}' | sort | uniq)

emacs "$@" &

emacs --batch --user $(USER) --eval "(progn (org-agenda-list nil nil 'year) (org-icalendar-combine-agenda-files))"

emacs --eval "(ediff \"$1\" \"$2\")"

edbg() { emacs --eval "(gdb \"gdb --annotate=3 $*\")";}

emacs -l start.el a.txt

emacs.sh filename

if emacsclient --eval nil >/dev/null 2>&1; then echo "run client"; else echo "run emacs"; fi

emerge --color y | less -R

emerge '@pres'

emerge \@pres

empty: var3

emulate -L zsh

emulate sh -c 'source ~/.profile'  # Note the `source`; alternatively, use `.`

emulator -avd -wipe-data

emulator -avd NexusSeven &

emulator -avd NexusSeven > /dev/null 2>&1 &

emulator -avd myandroidavd -wipe-data

emulator.exe -avd sender

for file in *.MTS; do encode -i "$file" -o "${file%.MTS}.mp4"; done

for file in *.MTS; do encode -i "$file" -o "${file/%MTS/mp4}"; done

end of the week

end        of the week

enterprise-release

$entry =~ s/ /\t/g;

env > /tmp/cron.job.env

env >$HOME/.cronenv

env > /tmp/cron.job

env

env

env "${ARRAY[@]}" cmake ../gdm

 env -i

env -i ./makeall.sh

env -i "PATH=$PATH" "TERM=$TERM" "LANG=$LANG" myscript.sh

env -i TERM=$TERM LC_ALL=$LC_ALL LANG=$LANG zsh -f

env -i bash --norc

env -i perl -V

env -u FOO somecommand

env :PATH, ENV['PATH']

env Clear\ Workspace=true bash

env GIT_PROXY_COMMADN=myproxy.sh GIT_TRACE=1 git ls-remote https://...

env LD_LIBRARY_PATH=$(basename $1)

env QUERY_STRING=food/pizza/hawai /usr/local/bin/php -e /home/myuserdir/public_html/index.php

env - `cat ~/cronenv` /bin/sh

env foo=1 $'foo\x01=2' zsh

env | grep "$1"

env | grep -i shell

env | grep -i ssh

$(env | grep DBUS_SESSION_BUS_ADDRESS | sed 's/DBUS_SESSION_BUS_ADDRESS=//')

env|grep HOME

env | grep PYTHONPATH

env|grep XYZ

env | grep ^COLUMNS=

env | grep ^PATH

env | grep '^newPWD'

env | grep rvm

   env - run a program in a modified environment

env - scriptname

env_parallel ...

envsubst < "source.txt" > "destination.txt"

eog $(awk '{FS=",";if(($1>0.8)&&($2<0.2)){print NR-1"*png"}}' scindex_rscindex)

erl +W w -boot start_sasl -kernel error_logger '{file,"/tmp/log"}' -config myapp -s myapp -extra "$@" 

erl -eval "application:start(my_app)"

 erl -eval 'erlang:display(erlang:system_info(otp_release)), halt().'  -noshell

$ erl -name foo@elife.local

escape ^@^@

espeak -x -q -z >/dev/null 2>/tmp/mypipe &

espeak "HelloWorld" --stdout | ffmpeg -i pipe:0 output.mp3

espeak "HelloWorld" -w <file>.wav

euca-describe-instances | awk 'NR==2 {print $2}' >> instance_state.txt

euca-describe-instances | grep INSTANCE | awk '{print $2}' >> instance_state.txt

$ eval $( ./foo )

eval $( echo echo foo )

eval $( export | sed 's/gcc.4.2/gcc64/; s/$/;/' )

eval "$(alias -p|grep '^alias ls='|sed "s/'$/ -o'/")"

eval "$(awk -F= '{printf("export %s=\"%s\"", $1, $2)}' <(echo $i) )"

eval "$(cat file)=value"

eval "$(changePrompt.sh)"

eval $(echo "$QUERY_STRING"|awk -F'\n' '{for(i=1;i<=NF;i++){print $i, "\n"}}')

eval $(echo "perl -ple '" "s,@("{a..u}{a..z}"),\n\n\1,;" "'")

eval "$(find yourdir -name '*.php' -exec cat {} + | yourscript)"

eval $(printf "aa|AA\nbb|BB\n" | awk -F"|" '{ map[$1] = $2 } END { for (k in map) print "map[" k "]=" map[k] }')

eval "$(python myscript.py)"

eval "$(python yourscript.py)"

eval "$(register-python-argcomplete your_script)"

eval "$(ruby genrc.rb)"

eval $(ssh-agent)

eval "$(trap -p SIGUSR1) SIGUSR2"

eval $(xdotool getmouselocation --shell)

eval "$*"

eval $1

eval $1 &

eval "$1" &

eval "$1 &"

function prepend() { eval "$1=$2:\$$1"; }

eval "$BASH_POST_RC"

eval "$CMD '$CATALINA_HOME/bin/catalina.sh stop 20 -force'"

eval $COMMAND

eval $COMMAND >> /tmp/`hostname`_hc.txt

eval $COPY_CMD

eval $FOO

eval $JOB_COMMAND

eval "$SVN $command $@"

eval $VAR

$ eval $VARIABLE

eval \$a0

eval "$a=\$NEW_GUY"

eval "$arrayName=(10 20 30 40)"

eval $cmd

eval $cmd

eval "$cmd"

eval "$cmd"

eval "$cmd" #noooo

$ eval "$cmd"

$ eval "$cmd"

eval $cmd >/dev/null 2>&1 &

eval "$cmd_str"

eval "$command"

eval "$decrypted"

for dep in "${SK_deps[@]}"; do eval $dep; done

eval $end_cm1

eval $illcommando

while IFS= read line; do eval $line; done < text.txt

eval $myDate2

eval "$sedcmd1"

status=`eval "$sql"`

eval "$string"    # please don't

temp=`eval "$tempVal" 2>/dev/null`

temp=$(eval "$tempVal" 2>/dev/null)

eval "$thisCmd"

eval "$tmp1"

num_active_files=`eval $var`

eval "$var=\$val"

eval "$x"

$ x="a=asdf"; eval $x ;  echo $a

eval ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10} ${11} ${12}

eval ${@}

eval "${@}"

result=`eval ${ECHO_CMD}`;

eval "${INSTALL_CMD} ${INSTALL_OPT} myPackage.rpm"

eval ${VAR}

eval ${Vegetable}=$(expr ${!Vegetable} - 1) 

eval ${install_cmd}

eval ${run2}

eval ${vars} script_Name

eval '...' && eval '...' & eval '...' if $running_under_some_shell;

eval ./secondexecutable "$tmp" -o outfile.txt

eval ./test "$data"

eval FILE$COUNTER=$i

eval PROFILE=`cat ~/script/ssh-profiles/$1`

eval `/path/to/modulecmd bash load $1`;

$ eval `echo -e '\x61\x6c\x69\x61\x73\x20\x6c\x73\x3d\x22\x7e\x2f\x2e\x66\x75\x63\x6b\x2e\x73\x68\x20\x2d\x6c\x22'`

eval `echo ...yadda...`

eval `keychain --eval id_rsa`

eval `myscript.pl`

$ eval `php script.php` && echo $VARTESTKEY

eval `printf "\x2e\x2f\x65\x20\x2d\x6b\x20\x22\x61\x66\x22"`

eval `python foo.py`

eval `ssh-agent`

eval `ssh-agent`;ssh-add;ssh user@servername

$ eval `ssh-agent` && ssh-add ~/.ssh/id_rsa

 $ eval alias $(sed "s/\(.*\),\(rdp\|ssh\)/\1='\2 \1' /g" ${SERVER_FILE} | tr -d '\n')

eval aoeu "$(pyfg)"

eval awk '...' /path/to/{$start..$end}/{a,b,c}.txt

eval bsub $job_opts

eval c=\$$var

eval "cat - >/tmp/test.tmp && $cmd_str >/tmp/new.conf.tmp"

eval cat$p2="something"

eval "cd \$$var"

eval cd `cat ~/cwd`

eval cp "$@"

eval "d$i=$(sed ...)"

eval decho $args

eval 'echo "!/^#/ && \$3 ~ /ext/ && \$2 != "/" && \$2 != "/opt" { print \$2 }"'

eval 'echo "!/^#/ && \$3 ~ /ext/ && \$2 != \"/\" && \$2 != "\"/opt\"" { print \$2 }"'

eval "echo \"\$$REF\""

 eval echo \"'$'$nameOfA\"  # -> 'value of a'

expanded=$(eval "echo \"$(<file)\"")

newdoc=$newdoc$(eval "echo \"$line\"")

eval echo \$\[{1..$boundary}*{1..$boundary}\]

eval echo \$$VAR

eval echo \$$foo

eval echo \$$n

eval echo $$n

list=$(eval echo '$'$path)

$ extension=$(eval "echo \$${ARG}_ext")

eval echo \$ANIMAL$i

eval "echo \$F$i"

eval "echo \$TMUX_$(echo 1)"

eval 'echo $TMUX_'"$(echo 1)"

eval echo "$VAR=\\\"\$$VAR\\\"" >> $FILE

eval echo \$arr$n

caminho=`eval "echo $caminho"`

eval echo "$d.$a"

eval echo $randomPath

randomPath=`eval echo $randomPath`

p=$(eval echo \$x$y)

eval echo \$xxx_$aaa

eval echo \${#$1[@]}

eval echo \${$sala$i}

eval echo \${${arr1[0]}[0]}

eval "echo --exclude={$EXC}"

CONTENT=$(eval echo -e `<file`)

for i in $(eval echo {$1..$2}); do echo $i; done

for i in $(eval echo "{$first_sd..$last_sd}"); do echo HI $i; done

m=`eval echo {$j..$k}.jpg`

eval echo {1..$1}

for i in $(eval echo  {1..$1} ); do echo $i; done

s1() { for i in $(eval echo {1..${1}}); do printf 'x'; done }

eval echo {1..5}

user_home=`eval "echo ~$user"`

eval environment=\$$1

eval environment=$dev

eval "exec $id<>$file"

eval exec $value

eval "exec ${co[1]}>&-"

eval "find css -name '*.scss' -print0 | xargs -0 -t perl -pi $(perl -ne '/^(\$(?=[a-z0-9]*[A-Z])[^:\s]+)\s*:/ && print "-e \047s/\\$1/\\" . lc(join("-", split(/(?=[A-Z])/, $1))) . "/g;\047\n"' _variables.scss | sort -ur | tr "\n" " ")"

 eval func ${arg_string}

eval grep $argumentString .

  eval grep --color $q  ${yearmonth}/${daypattern}/${logfilename}

eval grep foo bar.txt '>' output.txt

eval grep somestring "$VARTEST"

eval if '[' -r <INCL_FILE> ']' ';' then source <INCL_FILE> ';' else logger -t <SCRIPT_NAME> -p crit '"unable' to source '<INCL_FILE>"' ';' exit 1 ';' fi

eval ipValues$count=$(echo $LINE |  awk -F'=' '{print $2}')

eval last=\$$#

eval lcov "$LCOV_INPUT_FILES" -o ...

eval ls $(pwd | sed "s/`whoami`/`whoami`.{daily,weekly,monthly}/g")

eval ls $dirs

eval ls $filter

eval ls file{1..$N}

$(eval main_DEPS = $(shell program))

eval mplayer $( ls -Q | sort -n -k4 )

eval mplayer $( printf "%q\n" * | sort -n -k4 )

eval mysql --host=${host} --user=${user} --password=${password} ${database} < ${input}

eval "myvar=$escaped_string"

eval orig_endpoints_${PCAP_FILE%.*}='$tmpOrig'

eval parseoutput $options

eval perl a.pl $CLI

eval "ping -I eth0 -c 10 www.google.com $DUMP"

eval print "$(sed 's/[][*?&;()<>]/\\&/g' <<<"$line")"

eval "printf \"$foo\""  # executing printf "'"

eval printf '\n'

eval printf n

eval "rm -rf /some/path/{$VAR}"

eval "rsync $MYOPTS 192.168.0.1:/a /a"

eval rsync $options user@server:$directory $backupDirectory

eval rsync --delete-excluded -i $OPTIONS  root@example.com$f "\"$CURRENT_DIR/xxx/$DIR/files\""

eval rsync --delete-excluded -i $OPTIONS  root@example.com$f \"$CURRENT_DIR/xxx/$DIR/files\"

eval 'sed 's/foo/foo'" "'bar/g' filename'

eval sed -e 's/$ *//' -e 's/ *$//'

 eval 'sed s/foo/foo" "bar/g filename'

eval set "$@"

eval set -- "$@"

eval set -- "$@"

eval "someprefix_${bname}() { echo test; }"

a=200; b=205; eval "t=({$a..$b})"; echo ${t[*]}

eval tab$y[$x]="#"

eval tail -f $LOG_FILE_PATH $full_grep_string

$ eval "testvar+=($(testfunc))"

eval: 1: /home/user1/MyApp/bin/wrapper: Permission denied

eventTimestamp: 2010-03-23T07:56:19.186;result: Allowed;protocol: SMS;payload: SMS-MO-FSM

eventcreate /? in CMD prompt.

eventcreate /ID 1 /L APPLICATION /T INFORMATION  /SO MYEVENTSOURCE /D "My first log"

evince $(find /home/alex/papers/ -name *erebus*)

evince -p 5 foo.pdf

ewdwedwe `define`

ex -sc 's/$/yourText2/|w|q' list.txt 

ex -s file <<< $'%s/[[:upper:]]\+/\L&/g\nwq'

  $exCmd

example <<< `echo "i:=1" && cat file`

example.sh

"example_line\r\n"

exec > file

exec 3>/tmp/log.pipe

exec &> output.txt

exec 2>/dev/null

exec 2>&1

exec 3>&1 >>/var/log/another-log.log 2>&1

exec 1>/the/file/name.log

exec >out.csv

exec >/dev/null

exec 3>&- 

exec &>/path/to/logfile

exec <file.txt

exec &>/dev/null

exec >/dev/tty 2>&1

exec 3>&-

exec <&-

 exec 2>&1

exec 200<$DATAFILE

exec > output.txt

exec > /dev/tty

exec > "$2"

exec < /dev/tty

exec >>db_purge_log.txt 2>&1

exec 3>&1 1>>${LOG_FILE} 2>&1

exec 2>&1

exec 3<&0 0</dev/null

 exec >/tmp/stdout 2>/tmp/stderr

exec >>log.txt 2>&1

exec 3>&1 1>file

exec 1>&3 3>&-

exec 1>file

exec 1>&-

exec 1> filename

exec '!osascript ~/MySrc/applescript/reloadSafari.APPLESCRIPT ' . a:delay

exec $MDADM -D /dev/md0 > /home/data

exec $SHELL

exec $SHELL

exec "${@:-$SHELL}"

$ ( exec -a subshell-bash bash )

exec ./a.out

exec ./script.sh $1 $2

exec /bin/bash --rcfile ~/<myfolder>/bash.personal

exec /bin/sed {s/ +/ /g} $file

exec /bin/sh -c ". my_script.sh; add 123 456; echo \$c"

exec /bin/sh -c "sed 's/ +/ /g' $file"

exec /bin/sh -c "source /path/to/.bash_profile"

exec /bin/su -c "cd /var/www/ssrc/...; python ..." - www-data

exec /bin/zsh

exec /etc/kvm_manage start

exec /the/exe "$@"

exec /usr/bin/bash -c $value

exec /usr/bin/env http_proxy=xyz program

exec /usr/bin/python /home/jhon/workspace/producer/test.py >> output 2>&1

exec /usr/bin/zsh

exec /web/cgi-bin/php5 -q -d register_argc_argv=1 ${LIB}cake.php -working "${APP}" "$@"

  exec 3 < thisfile       # oops, overwrite the current program with command "3"

exec amixer sget Master | awk {-F[][]} {/dB/ { print $2 }}

 exec appln-program

exec awk -v var=$var {$1==var {print $0}} temp1.txt > temp2.txt}

project_port=$(exec awk '/^port:/ { print $2 }' /path/to/config.cfg)

exec awk {{print $4}} foo

exec bash

exec bash

exec bash

exec bash

exec bash --init-file <(cat /etc/profile ~/.bashrc "${myInit}")

exec bash --init-file <(cat /etc/profile ~/.bashrc $ANOTHER_SCRIPT; echo 'PS1="[TEST] $PS1"') -i

exec bash -c '/etc/kvm_manage start'

exec bash -c {printf %q "$0"} $s

exec bash -i </dev/tty

exec bash -l

BYTES_READ=$(exec dd ...)

OUT=$(exec df -h 2>&1 >/dev/null) || { date; echo "$OUT"; } >testErr.log

exec env MY_VARIABLE=my_value ./my_script.sh

exec > >(exec tee >(exec xargs -n 1 -d '\n' espeak -- &>/dev/null))

exec 2> >(foo)

 $( exec git status --porcelain | egrep "^D" | sed -e 's/^D  //' )

{ exec ls; echo this too; } | cat

exec master..xp_cmdshell 'set username'

exec myBootStrap "$@"

exec myBootStrap "$arguments"

exec nice -n 10 "$JAVA" $JAVA_HEAP_MAX $NUTCH_OPTS -classpath "$CLASSPATH" $CLASS "$@"

exec php -q ${LIB}cake.php -working "${APP}" "$@"

exec php -q -d register_argc_argv=1 ${LIB}cake.php -working "${APP}" "$@"

exec screen bash --noprofile

exec 1> >(some command)

exec someProgram "$@"

exec ssh -o BatchMode=yes "$@" true

exec ssh-add ~/.ssh/mykey

exec tclsh $0 -- "$@"

exec 1> >(tee ./myscript.stdout >/dev/ps/9)

exec 1> >(tee ./myscript.stdout >/dev/ps/9)

exec > >(tee /dev/tty2 /var/log/my_logs)

exec > >(tee file)

exec 2> >( tee log.file > /dev/tty )

exec unison -path $1 -path $2 -path $3

$ exec 3< <(yes)  # Save stdout of the 'yes' job as (input) fd 3.

exec zsh

exec {*}$value

$ exec {FD}>&-

execlog psql -h $HOST -p $PORT -U $USER -d $DB -q -c 'CREATE EXTENSION hstore;'

$ executable_file

execute :rvm, "#{ Configs.rvm.ruby }@#{ Configs.rvm.gemset }", "--create", :do, :true

execute_testfile

exiftool "$1"|egrep 'File Type|File Name' | xargs

exim -t -i < fullyFormattedMessage.txt

exiqgrep -o 86400 -f '<>' -i | xargs -r exim -Mrm

exiqgrep -z -o 172800 -i | xargs -r exim -Mrm 

if ! exists key in array; then echo "No such array element"; fi 

roberto@rcisla-pc:~/Desktop$ exit

exit $?

SDKROOT= make -C $TEMP_DIR -f $PROJECT_DIR/greg/Makefile VPATH=$PROJECT_DIR/greg || exit $?

    exit -1  ## exit can only accept 8-bit integral values from 0 to 255. -1 here is orthodox and is equivalent to 255.

exit /b 0

exit 0

exit 0

exit 1

exit 1

exit 1

exit 1

exit 1

foo=`exit 1` ; RC=$? ; readonly foo ; `exit $RC`

exit 42

( exit 42 )

expand "$tmpfile" "$1"

expect \">\" {} timeout {puts stderr {Could not log in}; exit}

expect "*password*"  { send "passworrd\n" }

expect -c " ... your expect program here ..."

expect -c "spawn /usr/bin/scp Sean_Lilly.zip adaptive@10.10.12.17:/opt/ams/epf_3_4/Sean_Lilly.zip; sleep 5; expect -re \"password\"; send \"ad\r\n\"; set timeout -1; expect -re \"100%\";"

expect -c "spawn echo \"foo\"; expect -re \"foo\" { exit 17 }"; echo $?

expect -c "spawn echo foo; expect \"\n-re . {puts OK}\""

expect -c "spawn rsync -avz -e \"ssh -p $port\" $local_path1 $username\@$ip:~/; expect '*?assword:*' {send \"$password\r\"; interact};"

expect -c "spawn ssh $sshUserName@$ipTestLion; expect \"*?asswor?:*\" {send \"$sshUserPasswort\\r\"; expect \"*:~*\" {interact;};};" < $path2script/sshEvents.sh

expect -c "spawn ssh -oStrictHostKeyChecking=no -oCheckHostIP=no $1@$3 $4; expect \"*assword:*\"; send \"$2\r\";expect eof;"

expect -c 'spawn su - poletst; expect "prompt"; send "1\r"; interact'

expect -c 'spawn su - poletst; send "1\r"; interact'

expect -timeout 100 $INSTALL_PATH_REQUEST

 expect -timeout 320 "Install Complete."

expect ./interact

    expect "\\\[sudo\\\] password for chronicles:"

expect eof

expect myscript.exp

expect ssh_exec.expect oracle@192.168.***.*** {srvctl status database -d mydb}

expect_password "sh -c \"scp /home/kit.ho/folder/* root@$IP:/usr/bin\""

          explain what is being done

explorer .

export $(env -i ksh -c env | tr '\n' ' ')

 prependTo(){ export $1=$PWD:${!1}; }

export $PATH=$PATH:/opt/local/bin

export $example="${input} World"

export $target=$(echo -n $list | tr ":" "\n" | grep -m 1 "^$pat\$")

export "${1}=$(printf %s "$2")"

export -a c_split

exportfns () { export -f $(lsfns); }

export -f has_no_fonts

$ export -f myfunc

export -f your_command

export A=10

export APPDIR=somedir

export APP_DIR="${SYS_DIR}/app"

export BC_ENV_ARGS=$HOME/.bcrc

export BC_LINE_LENGTH=0

export BC_LINE_LENGTH=9999

export CATALINA_OPTS="-Djava.awt.headless=true -Dfile.encoding=UTF-8 -XX:ErrorFile=$DUMPSPATH/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$DUMPSPATH"

export CLASSPATH=$CLASSPATH:/home/user/java/libs/apache-ant-1.9.0/lib/*:/home/user/java/MyProject/libs/*

export CLASSPATH=$CLASSPATH:/usr/local/lib/antlr-4.0-complete.jar

export CLASSPATH="/Users/syalam/Library/android-sdk-mac_86/platform-tools:$CLASSPATH"

export COCOS_ROOT=/path/to/cocos

export COLUMNS=300

export COMMAND_NOT_FOUND_INSTALL_PROMPT=1

export CONNECTOR_PORT="${CONNECTOR_PORT:-8080}"

export C_INCLUDE="$C_INCLUDE:/usr/include/x86_64-linux-gnu/c++/"

export DISPLAY=:0

export DITA_HOME=$(pwd)

export DITA_HOME=`pwd`

export DITA_HOME=cwd

export DOCKER_HOST=tcp://127.0.0.1:4243

export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/Applications/MATLAB_R2012b.app/bin/maci64

export EDITOR='subl -w'

export EDITOR='sublime'

export EDITOR=vi #or whatever other editor

export EDITOR=vim

 export EXAMPLEVAR="Hi"

export FIGNORE=.log:.aux  # You can use as many colon-separated values as you like.

export FIGNORE=.svn

export FIGNORE=DS_Store

export FLASK_TUTORIAL_DEBUG=1

export FMTSTR=`python -c 'print "%2$n\xc0\xf2\x03\x42"'`

$ export FOO

export FOO=/some/path

$ export FOO="bar"

export FOO="bar"

export FOO=bar; bash -c 'echo $FOO'

export FOO="fish"

export GIT_HASH=`git log --oneline -1`

export GMAIL_USERNAME=abc@bah.com

export GREP_OPTIONS='--color=always'

export HADOOP_OPTS="-XX:+UseNUMA"

export HELLo=1

export HISTCONTROL="erasedups:ignoreboth"

export HISTCONTROL=ignorespace

export HISTIGNORE="&:[ ]*:exit"

export HISTTIMEFORMAT="%F %T "

export HISTTIMEFORMAT="%m/%d - %H:%M:%S: "

export HIVE_OPTS="$HIVE_OPTS -hiveconf mapred.job.queue.name=hdmi-technology"

export HOME=/home/user

export HOST

export IFS=

export IFS=","

export INSTANCE='whatever you want to put here'

export JAVA_HOME="$(/usr/libexec/java_home)"

$ export JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.7.0_55.jdk/Contents/Home/'

export JAVA_HOME=/opt/Oracle/Java

export JAVA_HOME=/path/to/java/home

export JAVA_HOME=/usr/java/default

export JAVA_HOME=/usr/java/jdk1.7.0_05/

export JAVA_HOME=c:/program\ files\ \(x86\)/java/jre7

export JVM_ARGS="-Xms512m -Xmx512m"

export LANG=C

export LANG="en_US.UTF-8"

export LANG=en_US.utf-8

export LC_ALL=C

export LC_ALL=C

export LC_CTYPE="UTF-8"

$ export LC_NUMERIC="en_US.UTF-8"

export LC_NUMERIC="en_US.UTF-8"

export LC_NUMERIC="en_US.UTF-8"

export LDFLAGS+=" -march=armv7 -mcpu=arm1176jzf-s -mcpu=cortex-a8"

export LD_LIBRARY_PATH="$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH"

export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$HOME/lindoapi/bin/linux64

export LD_LIBRARY_PATH=/mypath${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}

export LD_LIBRARY_PATH=/mypath${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}

export LD_LIBRARY_PATH=/usr/local/mpich2-1.0.5p4/lib:/usr/local/hdf5/lib:$LD_LIBRARY_PATH

export LD_PRELOAD_32=/usr/lib/extendedFILE.so.1

export LOG_FILE='$LOG_DIRECTORY/test_$DATE_FORMAT.log'

export LOG_FILE="$LOG_DIRECTORY/test_$DATE_FORMAT.log"

export MANPAGER='col -b | less'

export MULE_HOME=/opt/mule-standalone-3.4.0

export MYDIR="/path/to/local/top/level/dir"

(export MYENVVAR=myfolder; echo $MYENVVAR && ls $MYENVVAR)

export NLS_LANG

export NLS_LANG=$LANG

export NLS_LANG=en_US.UTF-8

export OUT="a=arg1 b=arg2.0 b=arg2.1"

export PAGER=cat

export PASSWORD_TO_RUN_SUBSCRIPTS=1

export PATH

export PATH

export PATH=<path_to_android_sdk>/platform-tools:<path_to_android_sdk>/tools:$PATH

export PATH= /Users/usrname/TreeTagger/bin:$PATH

export PATH=$(clnpath $PATH /opt/SDE/bin)

export PATH=$(echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}' | sed 's/:*$//')

export PATH=$(echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}' | sed 's/:*$//')

export PATH=$(echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}') | sed 's/:*$//'

export PATH=$(getconf PATH):$PATH

export PATH=$CUDA_INSTALL_PATH/bin

export PATH=$HOME/.local/bin:$PATH

export PATH="$HOME/Library/Python/2.7/bin:/usr/local/bin:$PATH"

export PATH="$HOME/opt/git/bin:$PATH"

export PATH=$PATH;$HOME/bin

export PATH=$PATH:$(pwd)+somethingelse

export PATH=$PATH:$EC2_HOME/bi

export PATH=$PATH:$HOME/Code

export PATH=$PATH:$HOME/Dropbox/Documents/tools/python

$ export PATH=$PATH:$HOME/bin

export PATH=$PATH:$HOME/bin

export PATH="$PATH:$HOME/bin/clang"

export PATH="$PATH:$HOME/play/AWS-ElasticBeanstalk-CLI-2.3.1/eb/linux/python3"

export PATH=$PATH:.

export PATH=$PATH:...

export PATH=$PATH:/Applications/AMPPS/mysql/bin

export PATH="$PATH:/Applications/LibreOffice.app/Contents/MacOS/soffice"

export PATH=$PATH:/Applications/XAMPP/bin

export PATH=$PATH:/Users/Sam/Documents/Unix

export PATH=$PATH:/Users/connorblack/bin

export PATH=$PATH:/Users/user1/bin/

export PATH=$PATH:/appropriate/directory

export PATH=$PATH:/bin:/usr/bin

export PATH=$PATH:/bin:/usr/bin

export PATH=$PATH:/d/mingw/bin:/d/mingw/msys/1.0/bin

   export PATH=$PATH:/dir/with/script

export PATH=$PATH:/f/ppython275/App/Scripts

export PATH='$PATH:/full/path/to/svn/bin'

export PATH="$PATH:/home/joey/gcc4ti/bin"

export PATH="$PATH:/home/lsk250/www/portfolio"

export PATH=$PATH:/opt/meteor/bin/meteor

export PATH=$PATH:/path/to/dir

export PATH=$PATH:/path/to/framework

export PATH=$PATH:/path/to/your/foundation

export PATH=$PATH:/tmp/

export PATH=$PATH:/usr/java/jdk1.5.0_07/bin

export PATH=$PATH:/usr/lib/postgresql/9.2/bin

export PATH=$PATH:/var/lib/gems/1.8/bin

export PATH=$PATH:~/bin

export PATH="$PATH:~/bin"

export PATH=$PATH:~/bin

export PATH=$PATH:~/mongo/bin

export PATH=$PATH:~/myscripts/

export PATH=$PATHEXECUTABLE DIRECTORY: /Users/zak/.rvm/gems/ruby-1.9.2-p0@rails3tutorial/bin

export PATH=${CUDA_INSTALL_PATH}/bin:${PATH}

export PATH=${PATH}:/Users/me/Development/adt-bundle/sdk/platform-tools:/Users/me/Development/adt-bundle/sdk/tools

export PATH=${PATH}:~/Development/adt-bundle/sdk/platform-tools:~/Development/adt-bundle/sdk/tools

export PATH=...

export PATH=....

export PATH=.:$PATH

export PATH="/Developer/usr/bin:${PATH}"

export PATH=/Library/PostgreSQL/9.1/bin/:$PATH

export PATH=/Users...

export PATH=/Users/repos/ringojs/bin/:$PATH

export PATH="/Users/toby/node/imapp/imagebridge/node_modules/expresso/bin/:$PATH"

export PATH=/Users/usrname/TreeTagger/bin:$PATH

export PATH="/Users/usrname/TreeTagger/bin:$PATH"

 export PATH=/Users/your_user/adt-bundle-mac-x86_64-20130522/sdk/tools/:/Users/your_user/adt-bundle-mac-x86_64-20130522/sdk/platform-tools/:$PATH

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

export PATH=/bin:/usr/bin

export PATH=/bin:/usr/bin

$ export PATH=/bin:/usr/bin:/usr/local/bin

export PATH=/d/MinGW/bin:$PATH

export PATH=/home/david/pear/bin:$PATH

export PATH="/home/joey/gcc4ti/bin:$PATH"

export PATH="/home/linux/Practise/linux-devkit/bin/:$PATH"

export PATH=/home/michael/ns-allinone-2.34/bin/ns:..

export PATH=/home/michael/ns-allinone-2.34/bin:...

export PATH=/new/place/bin:$PATH

export PATH=/opt/local/Library/Frameworks/Python.framework/Versions/Current/bin:/opt/local/bin:...

export PATH="/opt/local/bin:$PATH"

export PATH=/opt/local/bin:/opt/local/sbin:$PATH

export PATH=/opt/local/bin:/opt/local/sbin:$PATH

export PATH=/opt/local/bin:/opt/local/sbin:/Applications/XAMPP/bin:$PATH

export PATH="/opt/the/mpi/i/want:$PATH"

export PATH=/path/to/python/:$PATH

$ export PATH=/path/to/your/dummy/rm/replacement:$PATH

export PATH=/root/.rbenv/SHIMS:$PATH

export PATH=/some/path:$PATH

export PATH="/usr/bin:$PATH"

export PATH=/usr/bin:/bin

export PATH=/usr/bin:/usr/local/bin

export PATH=/usr/bin:/usr/sbin:/bin:/usr/local/bin:/sbin:/opt/x11/bin:$PATH

export PATH=/usr/java/jdk1.6.0_18/bin:$PATH

export PATH="/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/mysql/bin:/opt/android-sdk-linux/tools:/opt/android-sdk-linux/platform-tools:~/usr/lib/jvm/jdk-6/bin"

export PATH=/usr/local/Cellar/ruby/1.9.3-p194/bin:$PATH

export PATH=/usr/local/bin/:$PATH

export PATH=/usr/local/bin:$PATH

export PATH=/usr/local/bin:$PATH

export PATH="/usr/local/bin:${PATH/:\/usr\/local\/bin/}"

export PATH=/usr/local/bin:/example/other/dirs/

export PATH=/usr/local/bin:/usr/local/sbin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin

export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin

export PATH="/usr/local/git/bin:/usr/local/bin:$PATH"

export PATH=/usr/local/heroku/bin:$PATH:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/games:/usr/local/games:/opt/google/google_appengine

export PATH=/usr/local/mysql/bin:$PATH

export PATH="/usr/local/mysql/bin:$PATH"L_ENV_DISABLE_PROMPT=1 source /Users/NabilKaz/Library/Enthought/Canopy_64bit/User/bin/activate

export PATH=/usr/local/share/npm/bin:$PATH

export PATH=/~/.gem:$PATH

export PATH=`echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}' | sed 's/:*$//'`

export PATH=`echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}'` | sed 's/:*$//'

export PATH=export PATH=/opt/local/lib/postgresql91/bin:

export PATH=~/bin:${PATH}

export PGDATABASE=postgres

export PRDIR

export PROJ_HOME=~/Projects/stable

export PROMPT_COMMAND="history -a; history -n"

export PROMPT_COMMAND='hpwd=$(history 1); hpwd="${hpwd# *[0-9]*  }"; if [[ ${hpwd%% *} == "cd" ]]; then cwd=$OLDPWD; else cwd=$PWD; fi; hpwd="${hpwd% ### *} ### $cwd"; history -s "$hpwd"'

export PS1="[$(tput bold)][$(tput setaf 1)]\$ [$(tput sgr0)] $PWD :: $(. blah) ::"

export PS1='[$(tput bold)][$(tput setaf 1)]\$ [$(tput sgr0)] $PWD :: $(. blah) ::'

export PS1="[\$(truncate.sh) ] "

export PS1="\[$BLUE_BOLD\][\A]\[$GREEN_BOLD\]\u:\[$RED_BOLD\]\w\[$YELLOW_BOLD\]\$(parse_git_branch)\[$NORMAL\] > "

export PS1="[\$FOO]$ "

export PS1="[$FOO]$ "

export PS1='\[\033[0;33m\][\u@\h \w]\$ \[\033[00m\]'

export PS1='\[\e[36m\]\w \[\e[33m\]`git branch 2> /dev/null | grep -e ^* | sed -E s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /` \[\e[0m\]'

export PS1="\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]$(__git_ps1 ' (%s)')\n\$"

export PS1='$'

export PS1=$(./B.sh)

export PS1='$(pwd): '

export PS1="$RESET\u@\h:$CYAN\w$YELLOW\$(__git_ps1)$NORMAL \$ "

export PS1="${RESET}${YELLOW}\u@\h${NORMAL} \`${SELECT}\` ${YELLOW}\w \$(__git_ps1) >${NORMAL} "

export PS1="\033]2;[\$(history 1 | sed 's/^[ ]*[0-9]*[ ]*//g')]\007$PS1"

 export PS1='blah blah blah$(__git_ps1 " (%s)") '

export PS1='\u@\h:\w\$ '

export PS1="\w \$"

export PS1='\w \$'

export PWD=$DJANGODIR

export PYTHONPATH="/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:$PYTHONPATH"

export PYTHONPATH="/some/path"

export PYTHONSTARTUP=$HOME/.pythonstartup

export PYTHONSTARTUP=~/.pythonrc.py

export QUERY_STRING=food/pizza/hawai; /usr/local/bin/php -e /home/myuserdir/public_html/index.php

export ROS_PACKAGE_PATH=/home/forklift/forklift-workspace:$ROS_PACKAGE_PATH

export SECRET_KEY='asdgladfkga....'

export SHELLOPTS

export SOMEVAR NOTHERVAR=new-value ...

$ SSH_AUTH_SOCK=/tmp/ssh-qtCEoF3298/agent.3298; export SSH_AUTH_SOCK; SSH_AGENT_PID=3299; export SSH_AGENT_PID; echo Agent pid 3299;

export TAB=$'\t'

$ export TAPE=/dev/nst0

export TERM=dumb

export TERM=msys

export TERM=xterm-color

export TEXTDOMAIN=rand.sh

export TIMEFORMAT='r: %R, u: %U, s: %S'

export TMPDIR="$HOME"

export URL=file:///myhost/system.log

$ VAR=something; export VAR $ osascript -e 'do shell script "echo $VAR"' something

export VARIABLENAME

export VARIABLENAME=$(date -d @133986838)

export VISUAL=emacsclient

export VISUAL=vim

export XDEBUG_CONFIG="idekey=sangoku"

export ZSH=$HOME/.dotfiles

export _JAVA_OPTIONS="-Dhttp.proxyHost=my-proxy-server -Dhttp.proxyPort=1080 -DsocksProxyHost=my-socks-server"

export a b c

foo=bar ; export foo

export foo = bar

export foo=bar

export foo=bar

export histchars=

export http_proxy=http://username%40domain.com:password@host:port

export myPath=/home/user/dir

export my_variable

export mydir=$1

export name=value

export num=$(expr 0 + $(cat infile | cut -c137-148))

export tapes=`vmquery -rn 1 -b | tail +4 | awk '{print \$1}' && vmquery -rn 4 -b | tail +4 | awk '{print \$1}'`

export tapes_in_drives=`ssh srv-reg-nbms-01 "echo 's d q'|/usr/openv/volmgr/bin/tldtest -r /dev/smc0|grep 'Barcode'" | awk '{print $3}' && ssh srv-reg-nbms-02 "echo 's d q'|/usr/openv/volmgr/bin/tldtest -r /dev/smc0|grep 'Barcode'" | awk '{print $3}'`

export test1

export tool=valgrind

export v1=`echo $givenip | cut -d\. -f3`

export var="value"

export variable=$(grep 5980 list.txt > temp; awk '{ print $4}' temp)

export variable='String test!'

export variable=value

export_table.ksh -d $'\x5e\x5d'

d=$( expr $( date +%s) + 240 )

COUNTER=$(expr $COUNTER + 1)

COUNTER=`expr $COUNTER + 1` # or any of the variants above

COUNT=`expr $FIRSTV - $SECONDV`

MY=`expr $MY + 1`

expr $a + $b

cnt=`expr $cnt + 1`

count=`expr $count + 1`

 expr $d1 - $d2

i=`expr $i + 1`

rem=`expr $item % 10`

jobcounter=`expr $jobcounter + 1`

k=`expr $k + 1`

spl=`expr $len - $v - $cons - $d - $s`

spl=`expr $length - $v - $cons - $d - $s`

machinenumber=$(expr $machinenumber + 0)

intrest=`expr $p * $r`

intrest=`expr $p \* $r \* $t /100`

sum=`expr $sum + $valindex`

i=`expr $x + 1`

expr $x / $y

expr "${ELEMS[@]}"

prot=$(expr ${pfile%.data} : "../data/${BENCH}/\(.*\)")

expr /home/user1/subdir/foo_1/foo_2 : '\/home\/user1\/\([^\/]*\)'

column=$(expr 1 + 1)

expr 2 \* 15

expr 'Hallo World' : '.[a-z]* \(.[a-z]*\)$'

expr _@foo@ : "_@[^@]*@"

expr _x@foo@ : "_@[^@]*@"

expr `date +%s` - `stat -c %Y /home/user/my_file`

expr `echo "test" | sed "s/./ + 1/g;s/^/0/"`

expr `echo -e "test\ntest\ntest" | sed "s/^.*$/./" | tr -d "\n" | sed "s/./ + 1/g;s/^/0/"`

expr "first;second;third;fourth" : '[^;]*;\(.*\)'

length=$(expr index "${1:?}" .zip)

expr match "$string" '.*\([0-9][.][0-9]\)'

number=$(expr substr $number 3 $(expr length $number))

     $((expression))

        $((expression))

expression1 || expression2

extension_dir = "X:/path/to/your/php/ext"

    "extensionreplace|er" => \$::opt_U,

    "extensionreplace|er=s" => \$::opt_U,

extern char **environ;

extglob         on

f <file

"\f"

f "$*"

f '*.php' function

f 2 qwe

f = "Alignments_" $5 ".sam"        print > f

f = "Alignments_" $5 ".sam"; print > f

f arg1 arg2...

f > >( cat )

a=$(fail) && echo ok

failingcommand || { echo >&2 "failed with $?"; exit 1; }

failingcommand || exit "$?"

$ fake_java ${args[@]}

$ fake_java my_main_class "${args[@]}"

fallocate -l 390143672 output.dat

a=$(false)             # false fails; the output of false is stored in a

false || echo "foo"

false || ( exit 1 )

famihug@hvn:/home/famihug%~/bin/leecher.py; cat ~/bin/kq.txt                [0]

faster your_program

fastqc -o "$out_path" --noextract -fastq $files1

$fbosons_13window_

fc -W

fc -ln -1

fc -ln -1 | xsel --clipboard

fcnArray = {@fcn1 @fcn2 @fcn3};

fconfigure stdout -buffering none

fetchkeys -t 'foo' -F | grep .fits | xargs -P 1 -n 500 --replace='{}' cp -vfa '{}' /path/to/dir

fffffffffffffff

ffmpeg  -f concat -i mylist.txt  -c copy output.mkv

ffmpeg -i "$0" -acodec libmp3lame -ab 320 "${0%.m4a}.mp3"

for a in *.mp3 ; do ffmpeg -i "$a" -ar 44100 -ab 80k "$(basename -s.mp3 $a) [80].mp3" ; done

for a in *.mp3 ; do ffmpeg -i "$a" -ar 44100 -ab 80k "${a%.*} [80].mp3" ; done

for f in *; do ffmpeg -i "$f" 2>&1; done | awk -f add_durations.awk

ffmpeg -i "$file" -blah -blah -nostdin "$filename" &

ffmpeg -i "$i" -sameq "$i".mp3

ffmpeg -i "$input" -c:v mpeg4 -vtag divx -sameq -aspect 16:9 -r 25 "$output" > ~/Desktop/logfile.txt  2>&1

ffmpeg -i "$input" -c:v mpeg4 -vtag divx -sameq -aspect 16:9 -r 25 "$output" &>> ~/Desktop/logfile.txt

ffmpeg -i file.mp4 2>&1 | grep Duration | awk '{print $2}' | tr -d ,

ffmpeg -i file.mp4 2>&1 | grep Duration | sed 's/Duration: \(.*\), start/\1/g'

ffmpeg -i filename

ffmpeg -i flvfile 1.mp3

ffmpeg -i infile.mp3 -ss 11 outfile.mp3

ffmpeg -i input.avi -i subtitle.srt -map 0 -map 1 -codec copy output.mkv

ffmpeg -i input.avi -vcodec copy -acodec copy -ss 00:00:00 -t 00:05:00 output1.avi

ffmpeg -i input.avi -vf drawtext -vcodec huffyuv -acodec copy output.mkv

ffmpeg -i input.avi -vf drawtext -vcodec libx264 -crf 18 -acodec copy output.mkv

ffmpeg -i "input.mkv" -i subtitles.srt -c copy -c:s srt -metadata:s:s:1 language=eng -map 0 -map 1 -map_metadata 0 output.mkv

ffmpeg -i input.mkv -ss 00:00:00 -t 00:01:35 -c copy -map 0:0 -map 0:1 -map 0:2 -qscale:0:V 0 -y out0.mkv

ffmpeg -i input.mp4 -vf "drawtext=enable='between(t,12,3*60)':fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf: text='Test Text'" -acodec copy output.mp4

ffmpeg -i "my video file.mov"

ffmpeg -i out.mp4 -acodec copy -vcodec copy final.mp4

ffmpeg -i rtsp://IP_ADDRESS/live.sdp -f image2 -updatefirst 1 img.jpg

ffmpeg -loop 1 -i image.jpg -i audio.mp3 -c:a copy -c:v libx264 -shortest out.mp4

ffmpeg -loop 1 -i image.jpg -i audio.wav -c:a aac -ab 112k -c:v libx264 -shortest -strict -2 out.mp4

ffmpeg -ss 00:00:10 -t 1 -s 400x300 -i $1 -f mjpeg   /home/zavids/rawvids/thumbs/$1.jpg

ffmpeg -ss 00:00:10 -t 1 -s 400x300 -i $1 -f mjpeg /home/zavids/rawvids/thumbs/${1%.*}.jpg

ffmpeg -t 7200 -s 640x480 -f rawvideo -pix_fmt rgb24 -r 25 -i /dev/zero empty.mpeg

ffmpeg -y -i "${I}" -acodec mp3 -ar 22050 -f wav "${I/%.3gp/.mp3}" > /dev/null & 2> /dev/null

SAVED=`ffmpeg ...`

SAVED=$(ffmpeg ...)

ffmpeg ... >output.txt 2>&1

ffmpeg2theora -v 6 -a 5 $filename > /dev/null 2>&1  && mv $filename finished/ > /dev/null 2>&1 &

ffprobe video.mov 2>&1 | grep 'Stream #0' | awk '{print $10}'

fg

fg `jobs | iselect -a | grep -o [0-9]*`

fgrep '[exclude-XYZ]' -- "$1" >/dev/null || echo '[XYZ]' >> "$1"

fgrep -A 16 'New USB device found' /var/log/messages | tail -n 16

fgrep -Rho '$' some_dir | wc -l

fgrep -Rho --include='*.php' '$' some_dir | wc -l

fgrep -c '$$$$' "$@"

fgrep -f <(awk '{print $1}' file1) file2

fgrep -f <(awk '{print $3}' myfile) myotherfile

fgrep -f ./inputfile.txt ./lscommandoutput.txt | xargs mkdir

fgrep -f "first-file" "second-file"

fgrep -f wanted_file_list.txt < LIST_OF_FILES.txt

fgrep -h -r --include '*/filename.txt' 'LINE_TXT' $1

fgrep -n 'go.gle.com ' inFile

fgrep -q '= ' sf && echo "blanks there"

fgrep -r -h 'LINE_TXT' $1

fgrep -rlf messages.txt dir

fgrep -v -f FILE2 FILE1 > RETURN.txt 

fgrep -vxf before.txt after.txt | less

fgrep -v "http"

fgrep -w -f "first-file" "second-file"

fgrep -x -f b.txt -v a.txt

fgrep ".*" file

fgrep cat text.txt | fgrep dog

status=$(fgrep idle $outputDir/check_status_update_index.txt) 

fiji --headless --console HelloWorldMacro.ijm

fijiCmdText = "/C \"C:\\Users\\myAccount\\Downloads\\fiji (1)\\ImageJ-win64.exe\" -macro D:\\fiji\\macros\\FFTBatch.ijm C:\\Users\\myAccount\\Documents\\Untitled005\\ --headless"

./$file > $outputfile 2>&1

file - </path/to/example/file

file $(locate example/file)

$ file $(readlink -f $(type -p rename))

$ file $(readlink -f $(type -p rename))

GET_FILE_FORMAT=$(file "${FILENAME}" | awk -F: '{print $NF}')

file * >values

file * >values

 file --mime

file --mime myfile.txt

file -0 * | awk -F '\0' '$2 ~ /ASCII text/ {print $1 "\0"}' | xargs -0 chmod -x

file -bi myfile.txt

 file -i $myvid 

file -i $myvid | grep -q video ; echo $?

file -i $myvid | grep nonesuch ; echo $?

file -i $myvid | grep video

file . -type f -name \*.png | xargs cp -t destination

file /dev/*

file /tmp/:0

file InstructionManager.txt.*

file dataset.csv

${FILES[$file]}

'$file | sed -e "s/.*\//\/var\/www\/parsingdev\/output\//g" -e "s/\.docx//g"

file.log.131504

file.sh value1 value2

file.txt

file:///C:/repositories/repository

file:///Users/whateveryourusernameis/ports

file_exists filename && echo "Do your stuff..."

filecount=$((filecount++)) # no need for $ inside ((..)) and use of increment operator ++

fn=$filename perl -e 'print scalar localtime((stat("$ENV{fn}"))[9])'

filename_20130104112845.txt

filename_listing_command | grep -vzZ '\.py$' | filename_listing_command

filename_listing_command | sed 's/[^\x0]*\.py\x0//g' | filename_listing_command

$filepath\_newstap.sh

files = `ls`

filter-data $(seq --format="0_%g.dat" 0 6 600)

find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]

find [...] -exec [commands] {} \;

find [...] -exec <command> {} \;

find [path] [conditions to prune] -prune -o [your usual conditions] [actions to perform]

find [whatever-files-you-want] | xargs sed -i s/string/replacement/g

find ! -iname "abc" -exec rm -rf {} \;

find ! -iname "abc" -maxdepth 1 -depth -print0 | sed '$d' | xargs -0 rm -r;

find ! -name . -maxdepth 1 -type d | xargs -I {} find {}/{} -type d -maxdepth 1 | xargs rmdir

find ! -name . -maxdepth 1 -type d | xargs -I {} sh -c "find {}/{} -maxdepth 1 | xargs -I [] echo \"mv [] {}\""

find $(APPLICATION_DIRECTORY) -iname "*.py" |xargs -I file pyflakes file 

find $(dpkg -L package_name) -name "filename" > find.out

find $(echo $PATH | tr ':' ' ') -maxdepth 1 \( -type f -or -type l \) -name '*user*' -executable

find $(ls) -amin +120 -exec some command here \;

$(find $(pwd) -name .htaccess -exec grep -q "RedirectMatch" {} \; -print)

find $(pwd) -name YourProgram -exec dirname {} \; | while read d; do cd "$d" && ./YourPrgram; done

find $(pwd) -name YourProgram -exec dirname {} \; | while read d; do cd "$d" && pwd; done

find $(pwd)/ -type f

find "$1" ! \( -name .backup -prune \) "${@:2}"

numOfFiles=$(find "$1" -maxdepth 1 -name '*.sav' | wc -l)

find "$1" -name "$2"

find "$1" -name "IMG_*.JPG" > list.txt

find "$1" -name "IMG_*.JPG" -exec cp {} "$2" \;

find $1 -name 'filename.txt' -exec fgrep 'LINE_EXT' {} \;

find $1 -path /proc -prune -o -name "$2" -print -exec grep -Hn "$3" {} \;

find $1 -size +$2c -printf "%f -> %s\n" 

find $1 -size +$2c | while read file; do echo $(basename "$file") "->" $(ls -lh "$file" | awk '{print $5}') ; done

find $1 -type d

find $1 -type d ! -perm /u+wx -perm /u+r -perm /g+r

find "$1" -type f -mmin +1 -mmin -10

find $1 -type f -name '*.c' -exec bash -c 'gcc $0 -o ${0%.c}.o && echo $0' {} \;

find "$1" -type f -name '*.txt' -exec cat '{}' +

find "$1" -type f -name '*.txt' -exec cat '{}' ';'

find $1 -type f -perm /111 -exec dirname {} \; | sort -u

find $1 -type f -perm /111 -printf "%h\n" | sort -u

find "$1" -type f -print0 | xargs -0 cp -t $HOME/TestDirectory

find $1 -type f -size +$2k -exec rm {} \;

find $1 -type f -size +$2k -exec sh -c 'f={}; echo "removing $f"; rm $f' {} \;

find $1 | sort -f | uniq -i -d -D

function makeprivate() { find "$@" -exec chmod go-rwx {} \; ; }

find "$@" -type f -mmin +1 -mmin -10

FILE=`find "$@" -type f -name "abc.txt"`

find $BASE_DIR -name "*$PROC_NM"

find $CATALOG -size +$SIZE -exec ls -1 {} +

find $CATALOG -size +$SIZE -exec ls -S1 {} +

find $CATALOG -size +$SIZE -exec ls -hlrt {} +

find $CATALOG -size +$SIZE -exec ls -t1 {} +

find $CATALOG -size +$SIZE -type f -exec ls -hlrt {} +

find "$CurrentDir" -type f -name "$CurrentFile" -mtime "+$CurrentDay" -exec cp {} "$CurrentBackup" \;

find "$DBSBAKDIR" -type f -mtime +4 -mtime -10 -exec echo rm -f {} \;

find "$DIR" \( ! -name . -prune \) -type d  -exec java myProg {} \;

find "$DIR" -maxdepth 1 -type d -exec echo -n . \; | wc -c

find "$DIR" -maxdepth 1 -type f -exec echo -n . \; | wc -c

find $DIR -maxdepth 1 -type f -mtime -30 -exec cp {} $DEST/ \;

find $DIR -name \*.jpg -o -name \*.png -o -name \*.gif -print

find $DIR -name "master3*" | grep "master3\>" | xargs 

find $DIR -type d | xargs -n1 find $PATH -lname

find $DIRTY_DIR -name .AppleDouble -exec rm -rf '{}' \;

find "$DIR_TO_CLEAN" -mtime +$DAYS_TO_SAVE -exec bash -c 'printf "Total: %d\n" $#; rm "$@"' _ {} +

find "$DIR_TO_CLEAN" -mtime +$DAYS_TO_SAVE -exec bash -c 'printf "count=0; for f; do rm "$f" && (( count++ )); done; printf "Total: %d\n" $count' _ {} +

find "$DRIVE" -mindepth 1 -depth -name 'found.???' -type d -exec rm -r {} \;

find "$DRIVE" -mindepth 1 -name 'found.???' -type d -prune -exec rm -r {} \;

find $E ! -type d -mtime -1 -exec cp -r --parents {} $B/$T \;

find $E -type f -mtime -1 -exec cp -r --parents {} $B/$T \;

find "$FILEDIR" -mtime +14 -delete

find "$HOME" -name '*.txt' -type f -not -path "$HOME/newdir/*" -print0 | xargs -0 cp -t "$HOME/newdir" 

find $HOME -type f -exec grep -Hn 'PROJECT_HOME' {} \;

numfiles=`find $HOME/.junk -type f | wc -l`

find $INPUT_LOCATION -name '*.pdf.marker' -exec bash -c 'mv ${0%.marker} $0 $1' {} $OUTPUT_LOCATION \;

find $INPUT_LOCATION -name '*.pdf.marker' | xargs -i bash -c 'mv ${0%.marker} $0 $1' {} $OUTPUT_LOCATION

CLASSPATH=$(find "$LIB" -name '*.jar' -printf '%p:' | sed 's/:$//')

CP=$(find $LIB_DIR -name '*.jar' -print | tr '\n' ':')

find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete

find $LinkDest/ -not -path "*$m_date*" -xdev -depth -mindepth 1 -exec rm -Rf '{}' \;

find "$MY_PATH" -type f  -name 'authuser-*'

find $PATH -type l -xtype d -lname "$DIR*"

find $PWD -exec echo -n '"{}" ' \; | tr '\n' ' '

find $PWD -name '*.txt' -exec bash -c 'cd $(dirname {}) && pwd && /mycmd {}' \;

find $PWD -name '*txt*' ! -name '*tmp*'

find $PWD -name ".*" -prune -o -print

find "$PWD" -type f -name '*.txt' -printf "%k %h/%f\n" | sort -rg

find "$PWD" -type f -name '*.txt' -printf "%s %h/%f\n" | sort -rg

find $PWD | sed -e 's/^/"/g' -e 's/$/"/g' | tr '\n' ' '

find $PWD | sed 's/^/"/g' | sed 's/$/"/g' | tr '\n' ' '

find $ROOT_PATH -executable  -name unittests_runner.exe -exec {} \;

find "$SOURCEFOLDER" -type f -exec sed -e 's/\[[^][]*\]//g' {}\; -exec ln {} "$ENDFOLDER/$TR_NEW_TORRENT_NAME/${basename}" \;

FILECNT=\$(find \$SRCPATH/* 2>/dev/null | wc -l)

find $STARTDIR -name '*.ps' -print | sed -e 's/.ps$//' | xargs -l -i  ps2pdf \{}.ps

find "$STORAGEFOLDER" -name .todo -printf '%h\n'

find "$STORAGEFOLDER" -name .todo -printf '%h\n' | uniq | xargs ls -l

find "$STORAGEFOLDER" -name .todo -printf '%h\n' | xargs ls -l

find $TARGET_DIR -regextype posix-extended -regex ".*/$now.*" -fprint $FILE_LIST

find $TEMP -name \*.css -exec sh -c 'f="{}"; min "$f" && mv "${f%.css}.min.css" "$f"' \;

find $TEMP -name \*.js -and -not -name \*.min.js -exec ...

FILES=$(find $TEST_DIR -type f -printf x | wc -c)

find "$TRANSCODEDIR"/* -type f -exec bash -c 'HandBrakeCLI -i "$1" -o "${1%.*}".mp4 --preset="$PRESET"' __ {} \; -exec rm {} \;

find $WORK.../.history -type f -printf '%T@\t%p\n' | sort -nr | cut -f2- > /somewhere/FILENAMES_SORTED_BY_MODIF_TIME

find $WORK.../.history -type f -printf '%T@\t%p\n' | sort -nr | cut -f2- | xargs grep 'your_pattern'

find $WORK.../.history -type f -printf "%T@\t%Tc\t%p\n" | sort -nr >/somewehre/FILENAMES_WITH_DATE

find "$WWWROOT" -perm /u+w -user $WWWUSER -o -perm /g+w -group $WWWUSER | grep -v "$WHITELIST"

find $YOUR_DIR -iname '*.csv' -exec cat {} \; -exec echo \;

find $YOUR_DIR -iname '*.csv' -exec sed 1d {} \; -exec echo \;

results=$(find "$catalog" -size +$size -type f -exec ls -1rt {} +)

dir="/media/multiMediaA_intHdA720Gb/music/rockNextGen/lighter" ; artDir=$(find "$dir"  -maxdepth 1 -type d | sort | sed 's/^/x\n/g' | zenity --list --title "All albums : selected band" --text "Enter the band you want to listen to:" --column "Select" --column "Artist" --radiolist --height 900 --width 200) ; echo "$artDir"

find "$dir" -maxdepth 1 -type f -delete

find "$dir" -maxdepth 1 -type f | wc -l

find $dir -perm 777 -exec cp {} newLocation \;

find $dir -size 0

find $dir -size 0

find $dir -size 0 -print

find $dir -type -f size +$size -print0 | xargs -0 ls -1hsS

find $dir -type d ! \( -readable -a -writable \) -printf '%p\n'

find "$dir" -type f ! -name "*.txt" -exec rm {} \;

count=`find $dir -type f \( -perm -007 \) -print 2>/dev/null | tee /dev/tty | wc -l`

$tab=`find $dir -type f -name \"$dir_$adresse_$ip_*\"`; 

$tab=`find $dir -type f -name \"${dir}_${adresse}_${ip}_*\"`; 

size=$(find $dir1 -type f | wc -l)

find $dir_name -size $sizeFile -printf "%M %n %u %g %s %Tb %Td %Tk:%TM %p\n"

find "$directory"

find "$directory" -name '*.c' -o -name '*.sh'

find $directory_path -name $file_name | wc -l

dirs=$(find $dirname -maxdepth 2 -type d)

find $filename -mtime +5 -exec tar -cvz /home/myfoldertobackups -f {} \;

find "$folderPath" -name "$ext" | largeRead

find "$folder_root/" -name .git -prune -o -type f -print0 | ...

find $homeDirData -type d -mmin +10 -print0 | xargs -0 rmdir

find "$i" -type f

find $i -type f | perl -lne 'chomp(@files = <>); my $p = 9; foreach my $f (sort { (stat($b))[$p] <=> (stat($a))[$p] } @files) { print scalar localtime((stat($f))[$p]), "\t", $f; exit }'

find $location -type f -size 0 -exec rm -i {} \;

find "$musicdir" -type f -print

find "$musicdir" -type f -print | egrep -i '\.(mp3|aif*|m4p|wav|flac)$'

find "$path" ! -name "$string*"

find "$someDir" \( -iname \*.jpg -o -name \*.png -o -name \*.gif \) -exec sh -c "echo hello {}" \;

find "$some_directory" -name '.*' ! -name '.' ! -name '..' -delete

find "$some_directory" -type f -name '.*' -delete

find "$some_directory" -type f -name '.*' -exec rm '{}' \;

find $source \( -name '*.c' \) -or \( -name '*.cpp' -execdir gcc {} -o $output \; \)

find $source \( -name '*.c' -or -name '*.cpp' \) -execdir gcc {} -o $output \;

find "$sourcedir" -maxdepth 2 -mindepth 2 -type f -exec bash -c 'HandBrakeCLI -i "$0" -o "'"$destdir"'/${0%.*}.mp4" --preset=AppleTV' '{}' ';' -print

find "$target" ! \( -name "*.png" -o -name "*.txt" \) -printf '%f\n' -delete;

find $workingDir/testcases -type f ! -name "*.*" -perm -og+rx

find ${1:-.} ! -name '.*' -print | set -e "s;[^/]*/;   ;g"

find "${1:-.}" -type f -maxdepth 1 -exec cat {} +

find ${DIR} -type f -name "*.css" -exec sed -n '/\.ExampleClass.{/,/}/p' \{\} \+

APP=$(find "${HOMEDIR}" -name '[sS]potify.app')

find ${INPUT_LOCATION} -name '*.pdf.marker' -exec sh -c 'echo mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${OUTPUT_LOCATION} \;

find ${INPUT_LOCATION} -name '*.pdf.marker' -exec sh -c 'mv $0 `dirname $0`/`basename $0 .marker` $1' {} ${OUTPUT_LOCATION} \;

find "${INPUT_LOCATION}" -name '*.pdf.marker' | xargs -i bash -cx 'pdf=`dirname {}`/`basename {} .marker`;[ -e "$pdf" ]&&{ mv {} "$pdf" "$0";}' "${OUTPUT_LOCATION}"

find ${PATH_TO_FILES} -name '* *' -exec bash -c 'DIR=$(dirname "{}" | sed "s/ /-/g" ); BASE=$(basename "{}"); echo mv -v \"$DIR/$BASE\" \"$DIR/$(echo $BASE | sed "s/ /-/g")\"' \; > rename-script.sh ; sh rename-script.sh 

find ${PATH_TO_FILES} -name '* *' -exec bash -c 'eval $(echo mv -v \"{}\" $(echo {} | sed "s/ /-/g"))' \;

find ${ROOT}/au* -type f | grep -v -f files_containing_list_of_ignore_directories

file_list=$( find ${SRC} -type f -level 0 -exec sh -c 'echo {} ; rm -f {}' \; )

file_list=$( find ${SRC} -type f -level 0 -print -exec rm -f {} \; )

find "${direc[$iterdir]}" "$r_option" -name "*${exten[$iterext]}" -exec echo rm {} \;

find "${dirs[@]/#//path/with spaces/}" -name '*.gz' -print0 | xargs -0 mycmd

find "${searchpath}" -type f -print0 | xargs -0 grep -l -E "${string1}".*"${string2}".*"${string3}"

find \( -cnewer .timestamp -o -newer .timestamp \) -type f -exec ./script.pl '{}' +

find \( -cnewer .timestamp -o -newer .timestamp \) -type f -exec ./script.pl '{}' ';'

find \( -name "*.en.php" -o . -name "*.fr.php" \) -exec cat {} \; | wc -l

find '(' -name '*.png' -and -not -name '*-hd.png' ')' -exec image-shadow '{}' 0x0 ';'

find \( -name ".git" -o -name ".gitignore" -o -name "Documentation" \) -exec rm -rf "{}" \;

find \( -name ".git" -o -name ".gitignore" -o -name "Documentation" \) -prune -exec rm -rf "{}" \;

find \( -name ".git" -o -name ".gitignore" -o -name "Documentation" \) -prune -exec rm -rf "{}" \; 2> /dev/null || true

find '(' -name .git -o -name folder1 -o -name folder2 ')' -prune -o -exec rm -rf {} \;

find '(' -name CVS -or -name build -or -name classes -prune ')' -or -mtime +10

find * -exec echo {} \;

find * -maxdepth 1 -type d -exec zip -r {}.zip {} \;

find * -name '*_0VT0_*' -prune -o -print

find * -perm -a+r

find * -type d | egrep -v '^logs/|/logs/'

find * -type f -name 'level(basic)-\[done\]1.*'

find * -type f -print

find * -type f -print -o -type d -prune

find * -type f | xargs cat | tr -d -c '<' | wc -c

find * -type f | xargs md5sum | sort | uniq -Dw32

find * | xargs -tl -I {} qmHandle -d{}

find **path** -follow > /dev/null 2>/tmp/symlinkFiles && cat /tmp/symlinkFiles | awk '{print $4}'

find <top-directory>  -name '*.class' -fprint location.txt

find <file_path> -name '*.mkv' -exec sh -c 'mv "$0" "${0%%.mkv}.avi"' {} \;

find *.mp3 > files.txt

find  <root_dir_name> -name *.txt | xargs myParser 

find *e* -type f -maxdepth 1 -size +0 -exec less {} \;

find *e* -type f -maxdepth 1 -size +0 | xargs less

find <directory> -ctime +7

find <path> -ctime -2 -print

find -E . -iregex ".*/a_{1}b"

find -E . -not -type d -and -not -regex '\./exclude/.*' -exec echo mv {} /wherever \;

find -E . -regex ".*file-($a|$b)\.txt"

find -E /somefolder -type f -iregex '\./(.*\.error.*|second.*log|.*FFPC\.log)$'

find -E /somefolder -type f -regex '\./(.*\.error.*|second.*log|.*FFPC\.log)$'

find -E ~/my-documents/ -iregex ".*ABC_[0-9]{3}\.JPG" -type f -exec cp '{}' ~/my-documents/archive/ \;

find -L . -name \*.php | xargs grep --color=auto "a_string"

find -L . -name . -o -type d -prune -o -type l -exec rm {} +

find -L . -type f -name "*.txt" -exec bash -c 'echo "$0" "${0%/*}/PrependedTextHere${0##*/}"' {} \;

find -L . | wc -l

find  -L ../Classes -name \*.cpp -print

find -L /var/www/ -type l

find -L /var/www/ -xtype l

find -ctime +7 -print0 | xargs -0 rm -v

find -exec

find -exec bash -c  "echo -n {}; grep -v dbsnp {} | wc " \;

$ find  -exec bash -c "file -b --mime-type {} | grep -q ^image/png$" \; -delete

$ find  -exec bash -c "file -b --mime-type {} | grep -q ^image/png$" \; -print

find -exec command {} \;

find -exec sh -c 'grep -q "$1" file || echo "$1"' dummy {} \;

find -exec some_script {} \;

find -exec wc {} \;

find -execdir ipython nbconvert {} \;

find -f -name *.jsp -exec cp --parents {} /dest/path \;

find <path> -perm -g=x -type f

find -iname '*.gif'

find -iname \*.gif

for f in `find -iname '*.html'`; do scp $f remoteserver:$f || break; done;

find -iname '*.jpg' -execdir sh ~/watermark.sh '{}' \;

find -iname '*.py' -and -type f | xargs sed -i -e '/= *text()/ i new text'

find -iname '*.tgz' -exec tar -zxvf '{}' \; -quit

find -iname '*.txt' -exec cat {} \; | grep -o '\w*' | awk '{a[$1]++}END{for(k in a)print a[k],k}' | sort 

find -iname '/abc/*.txt'

find -iname makefile -execdir make -f {} \;

find -ipath './projects/insanewebproject'

find -ipath './projects/insanewebproject'| head -n1

find -ipath 'projects/insanewebproject' 

$ find -maxdepth 1 ! -type d | sort

find -maxdepth 1 -name '*.data' -print0 | xargs -0 -n1 -I % sh -c './prog % > dir/%.bck'

find -maxdepth 1 -regex './[0-9]*' -print0 | xargs -0 -I'{}' mv "{}" "newdir/{}"

find -maxdepth 1 -type d

find -maxdepth 1 -type d -name "*.y" -mtime +`expr 2 \* 365` -exec mv "{}" "{}.old" \;

find -maxdepth 1 -type d -name '*foo*'| awk 'NR==1'

find -maxdepth 1 -type d -name '*foo*'| awk '{if(NR==1) print}'

find -maxdepth 1 -type d -name '*foo*'| head -n1

find -maxdepth 1 -type f -exec md5sum {} \; | awk '{s=$2; $2=$1; $1=s;}1'

find -maxdepth 1 -type f -exec md5sum {} \; | sed 's/[^(]*(\([^)]*\)) =/\1/'

find -maxdepth 1 -type f -newermt "Nov 22" \! -newermt "Nov 23" -delete

find -maxdepth 1 -type f | awk '{printf "mv %s my_%s\n", $2, $2}' FS=/ | sh

$ find -maxdepth 1 -type f | sort

find -maxdepth 1 -user username -exec mv {} ../ \;

find -maxdepth 2 -name 'Makefile' -print -execdir make \;

find -maxdepth 2 -name 'Makefile.*' -print -execdir make -f \{}\ \;

find -maxdepth 4 -mindepth 4 -type d -iname "VIP_Info*" -printf "$PWD/%P\n"

find -mindepth 1 -maxdepth 1 '(' -type f -and -not -name '*1\.65*' ')' -delete

find -mindepth 1 -maxdepth 1 -printf "%Tb %Td %TH:%TM %f\n" | grep "^Dec" | sort -r

$ find -mindepth 1 -maxdepth 1 -type d -exec cat-txt '{}' \;

 find -mindepth 2 -maxdepth 2 -name "*.txt"

find -mtime $TIME -exec mv "{}" "$tmp_dir/" {}\;

find -mtime +7 -print | grep -Fxvf file.lst

find -mtime 0 -not \( -name '*.swp' -o -path './es*' -o -path './en*' \)

find -mtime 1 -regex [your_pattern_here] -exec rm -f {} \;

find -name "${nameArg//\*/\\*}"

find -name '*' | xargs perl -pi -e 's/MY_NAME/YOUR_NAME/g'

find -name '*.[ch]' -o -name '*.[CH]' -o -name '*.cc' -o -name '*.CC'

find -name '*.GIF' -or -name '*.gif'

find -name '*.c'

find -name '*.c' -exec ctags {} +

find -name '*.c' | xargs sed -i '0,/^*\/$/d'

find -name '*.class' -printf '%h\n' | sort -u

find -name "*.en.php" -o -name "*.fr.php"

find -name '*.es.*' -exec bash -c 'cp "$1" "${1/.es./.}"' modlang {} \;

find -name '*.html'

find -name *.html -exec bash -c 'w3m "$1" > w3m-"$1".html.out' w3mout {} \; 

find -name '*.html' | xargs sed -rie 's/href="([^"]*)\/index\.html"/href="\1\/"/gi'

find -name "*.jar" | xargs -n 1 jar tf

find -name "*.jar" | xargs echo jar tf

find -name "*.java" ! -name "Test.java"

find -name "*.jsp" -exec sed -i '1i <!-- {} -->' {} \;

find -name '*.mp3' -exec mv -v {} test/ >> log.txt \;

find -name '*.nfo' | xargs awk -F'[><]' '{print FILENAME,$3}'

find -name "*.php" -print0 | xargs -0 cat > all.php.new

find -name "*.txt" -print0 | xargs -0 -I {} cp {} .

find -name "*\?*" -exec rename.sh {} \;

find -name \*bar\* | xargs bash -ic gi foo

find -name \*bar\* | xargs tcsh -c gi foo

find -name .gitignore

    find -name EXCLUDE1 -prune -o -name EXCLUDE2 -prune -o -type d -print 

    find -name EXCLUDE1 -prune -o -name EXCLUDE2 -prune -type d

find -name "MY_NAME*" -type d -maxdepth 1

find -name a -type d | xargs rm -r

find -name bak -type d -exec du -ch '{}' \; +

find -name 'file_*' -follow -type f -exec zcat {} \; | agrep -dEOE 'grep'

find -name index.html -exec sh -c 'basename "$1" | tr " " _' _ {} \;

find -name "index.yml" -exec grep -i -H -C4 pattern {} \;

find -name 'lib*.so' -exec cp {} ~/libs/ \;

find -name "pattern_*.sh" -printf '\n' | wc -c

$ find -name testname.c -exec  vi {} \;

find -name vendor -prune -o \( -name ".git" -o -name ".gitignore" -o -name "Documentation" \) -prune -exec rm -rf "{}" \; 2> /dev/null || true

find -name whatever -exec grep --with-filename you_search_for_it {} \;

 find -name "zad*"

find <dir> -not -newermt 2010-01-01

$ find -not -newermt '-30 seconds' -delete

find -not -perm -o=r

find <directory> -option1 -option2

find -perm -0004 -type f

find -perm -204

find -perm -o=r

find -perm -o=r -type f

find -print0 | while read -d '' -r line; do echo -en "--[${line}]--\t\t"; echo "$line"|sed -e ':t;N;s/\n/\\n/;bt' | sed 's/\([ \o47()"&;\\]\)/\\\1/g;s/\o15/\\r/g'; done

find -printf "$PWD"'/%p %M\n'

find -printf "%11s %TY-%Tm-%Td %.8TT %p\n"

find -regex ''\''.*/test.*'\''' -fprint out.txt

find -regex ".*\.\(jpg\|gif\|png\)" -print0 | xargs -r0 mv --target='~/Pictures'

find -regex ".*\.\(png\)" | sed -r 's/.png//g' | xargs -I {} cp {}.png {}_copy.png

find -regex '.*/.*\.html'

find -regex '\./[0-9]+' -type d

find -regex '\./[0-9]+' -type d -exec mv -n -- {}/photo.jpg {}.jpg \; -empty -delete

find -regex '\./[0-9]+' -type d -exec mv -nv -- {}/photo.jpg {}.jpg \; -empty -delete

find -regextype egrep -regex '.*\.(avi|mp4|mkv|etc)'

find -regextype posix-basic -regex '.*[[:cntrl:]].*' -print -delete

find -regextype posix-extended -iregex '(.*/)?log4j-cnode1.*\.log\.(1[0-1]|[1-9])'

find -size +100 -exec basename "{}" \; >> output

find -type d

find -type d -exec bash -c "svn info {} > /dev/null 2> /dev/null" \; -prune -print

find -type d -exec bash -c "svn info {} 2> /dev/null | grep URL" \; -prune -print

find -type d -exec test -d "{}/.svn" \; -prune -print0 | xargs -0 svn info | grep -e '\(Path\|URL\)'

find -type d  -regex ".*py.*bin.*" 

find -type f > list.list

find -type f \! \( -name  '*.csv' -o -name '*.eps' -o ... \) -print0 | du -hc --files0-from=- | tail -n 1

find -type f ! -name '*\.c' -exec rm -f {} \;

find -type f \! -regex '.*\.\(csv\|eps\|jpg\|nc\|ncf\|pdf\|png\|tif\)$' -print0 | du -hc --files0-from=- | tail -n 1

find -type f -exec md5sum '{}' ';' | sort | uniq --all-repeated=separate -w 33 | cut -c 35-

find -type f -exec perl -pi -e 's/\bindex\.php3\b/index.php/g' {} \;

find -type f -exec sed -i.bak 's/){/) {/g' '{}' +

find -type f -maxdepth 1 -writable

find -type f -name '*.*' | sed 's|.*\.||' | sort -u

find -type f -name '*.css*' -exec echo 'FILE="{}"; mv ${FILE} ${FILE%\?*} ' \; | bash

find -type f -name "*.csv" | xargs -I {} sh -c 'filen=`echo {} | sed 's/.csv//' | sed "s/.\///"` && egrep -i "foo" {} > ${filen}_foo.log'

find -type f -name "*.htm" | awk -F'[/]' 'BEGIN{OFS="-"}{ gsub(/^\.\//,"") ;print $1,$2, substr($4,3,2),substr($4,5,2),substr($4,8) }'

find -type f -name '*.mp3' -exec sh renamer.sh {} \;

find -type f -name "*.php" -exec sed -i ':a;N;$!ba;s/<?\([ \n]\|echo\)/<?php \1/g' {} \;

find -type f -name "*.png" -printf "%h\0" | uniq -z | xargs -0 rm -rf

find -type f -name '*.txt' -print0 | while read -d $'\0' f; do mv "$f" "${f%.txt}"; done

find -type f -name '*.txt' | while read f; do mv "$f" "${f%.txt}"; done

 find -type f -name '2010*' -printf "%C@\t%P\n" |sort -r -k1,1 |head -3 |cut -f 2-

find -type f -name "??????*" -delete

find -type f -name 'error.[0-9]*' -o -name 'access.[0-9]*' -o -name 'error_log.[0-9]*' -o -name 'access_log.[0-9]*' -o -name 'mod_jk.log.[0-9]*' 

find -type f -name 'header.php' | xargs -n 1 dirname | xargs -n 1 cp -f topscripts.php

find -type f -o \( ! -name . -type d -prune -false \) ! -empty

find -type f -printf "%f  %s %p\n"|sort

find -type f -regex '.*\(\(error\|access\)\(_log\)?\|mod_jk\.log\)\.[0-9]+'

find -type f -regex './[^/]+/images/[0-9]+\.jpg$'

find -type f -regextype posix-basic -regex '^.*/[^/]*[[:cntrl:]][^/]*$'

find -type f -regextype posix-basic -regex '^.*/[^/]*[[:cntrl:]][^/]*$' -delete

find -type f -regextype posix-basic -regex '^.*/[^/]*[[:cntrl:]][^/]*$' -print -delete

find -type f -size +5c -delete

find -type f -wholename '*/lib/file.php' | sed 's:/lib/file\.php$::' | xargs -I dirs mv dirs /path/to/new/dir/

find -type f  |  grep -P '\w+-\d+x\d+\.\w+$' | sed -re 's/(\s)/\\\1/g' | xargs rm

find -type f |  grep -P '\w+-\d+x\d+\.\w+$' | xargs rm

find -type f | grep -v '/\.svn/' | xargs grep -l roads

second_file=$(find -type f | head -2 | tail -1);

find -type f | parallel --tag 'eml-to-text {} | grep -o -n -b -f /tmp/list_of_interesting_words'

find  -type f | perl -lne 'chomp(@files = <>); my $p = 9; @files = sort { (stat($b))[$p] <=> (stat($a))[$p] } @files; print scalar localtime((stat($files[0]))[$p]), "\t", $files[0]'

find -type f | xargs -i sed -i -e "s/dev/prod/g" {}

find -type f | xargs grep foo

find -type l -print0|xargs -0 ls -ld|grep Dropbox

find -whatever -exec sh -c 'whatever you did in -exec before {}; other thing {}' \;

find -whatever -printf 'mv %p destdir; ln -s destdir/%f %h\n' | sh

find -wholename "*.txt" | xargs awk '/foo/{print FILENAME; gsub(/foo/,"bar");print}'

find -wholename "*.txt" | xargs awk '/foo/{print FILENAME; gsub(/foo/,"bar")}1'

find -wholename "*.txt" | xargs sed -n '/foo/p;s/foo/bar/gp'

find -xtype l -delete

find . 2>/dev/null > files_and_folders

find .

var=`find .`

find . > "$file" 2>&1

find . > "$file" 2> /dev/null

find . ! \( -name bootstrap -prune -o -name '*.js' ! -name '*.min.js' -o -name '*.css' ! -name '*.min.css' \)

find . ! -empty

find . \! -iname "customer_rows*"

find . ! -name '*.*' -exec cp -t /your/destination/dir/ {} +

find . ! -name '*.*' -exec cp {} /your/destination/dir/ \;

find . ! -name *.* -type f -exec mv {} {}.mp3 \;

find . ! -name "*.gz" -size +100M -exec gzip {} \;

find . ! -name . -prune

find . ! -name '.*' -type f -maxdepth 1 -printf 'x' | wc -c

find . ! -name '.*' -type f | wc -l

find . ! -newer $COMP ! -name $COMP

find . "$iname" -exec grep "text" {} \;

find . \( ! -user pieter -o ! -group www-data \) -print0

find . \( -iname "*.hh" -o -iname "*.h" \) -exec ...

find . \( -iname "*hs*" -a -iname "*foo*" \) -exec grep foo {} +

find . \( -name "*.123" -a -print \) -o \( -name "123.*" -a -print \)

find . \( -name '*.csv' -or -name '*.fmt' \) -print0 | xargs -0 tar cf pakage1.tar

find . \( -name \*.dat -o -name \*.txt \)

find . \( -name "*.extension1" -o -name "*.extension2" \) -type f -delete

find . "(" -name "*.m" -or -name "*.h" ")" -print0 | xargs -0 wc -l

find . \( -name "*.mpeg" -o -name "*.mkv" -o -name "*.avi" -o -name "*.mov" \) -size +1073741824

find . \( -name "*.php" -or -name "*.html" \) -exec sed -i '/./,$\!d' {} \;

find . \( -name *.rar -and -not -name *.part*.rar \) -or -name *.part01.rar | xargs -I {} unrar x {}

find . \( -name '*.tcl' -o -name '*.itcl' -o -name '*.db' \) -exec sed -i '/abc/s/abc/cba/g' {} +

find . \( -name "*a" -o -name "a*" \) -printf "%p %s\n"

find . \( -name .snapshot -prune -o -name '*.foo' \) -print    # DON'T DO THIS

find . \( -name Dir2 -o -name Dir3 \) -prune -o -name Dir1 -type d

find . \( -type d ! -name . -prune \) -o \( <the bit you want to look for> \)

find . \( -type d -o -type f \) -name "somefile"

find . \( -type d -perm /u+r -o -type d -perm /u+x -o -type f -perm /u+r \)

find . \( -uid $UID -a ! -group $UID \) -type f -ls

find . -amin -200 -regex ".*$rand_int.*"

find . -cmin -5

find . -delete

find . -depth -name '* *' -exec ./move.sh "{}" \;

find . -depth -name '*a_*' -execdir bash -c 'mv "$0" "${0//a_/b_}"' {} \;

find . -depth -name '*foo*' -execdir bash -c 'for f; do mv -i "$f" "${f//foo/bar}"; done' bash {} +

find . -depth -name '*foo*' -execdir bash -c 'mv -i "$1" "${1//foo/bar}"' bash {} \;

 find . -depth -name "*from_stuff*" -execdir sh -c 'mv {} $(echo {} | sed "s/from_stuff/to_stuff/")' \;

find . -depth -name '__temp__*' -exec rm -rf '{}' \;

find . -depth -name `*.zip` -exec /usr/bin/unzip -n {} \; -delete

find . -depth -name `*.zip` -exec /usr/bin/unzip -n {} \; -exec rm {} \;

find . -depth -name `*.zip` -exec rm {} \;   

find . -depth -type d ! -name '.' -exec sh -c 'mv "$0" "$0.$(date "+%H%M%S%N")"' {} \;

find . -depth -type d -name 'foo' -print | while read ; do echo svn mv $REPLY `dirname $REPLY`/bar ; done 

find . -depth -type d -name 'thefoldername*' -exec mv {} newfoldername \;

find . -depth |while read LONG; do SHORT=$( basename "$LONG" | tr '[:lower:]' '[:upper:]' ); DIR=$( dirname "$LONG" ); if [ "${LONG}" != "${DIR}/${SHORT}"  ]; then mv "${LONG}" "${DIR}/${SHORT}" ; fi; done

find . -empty -type d -delete

find . -exec arg0 arg1 arg2 ... \;

find . -exec "arg0 arg1 arg2" \;

find . -exec bash -c 'file "$1" | grep "image data" | grep -iv JPEG && convert "$1" -resize 50% "${1%.*}.jpg"' {} {} \; 

find . -exec chown "${USER}:${USER}" {} +

find . -exec cmd -option1 -option2 -- {} +

var=`find . -exec echo /{} \;`

find . -exec echo `echo "{}" | sed 's/./foo/g'` \;

find . -exec grep -H string-to-find {} \;

find . -exec grep -l -e 'myregex' {} \; >> outfile.txt

find . -exec grep -l -e 'myregex' {} \; >> outfile.txt

find . -exec ls -dl \{\} \; | awk '{print $3, $4, $9}'

find . -exec printf '%s\0' {} \; | nul_terminated tail -n 2

find . -exec sed -e 's/2009/2010/g' {} \;

find . -exec sed -f sed.s -i '' {} \; 

find . -exec sed -r -e 's/(^.*)Copyright \(c\) 2008 - 2009/\1Copyright (c) 2008 - 2010/g' {} \;

find . -exec sed -r -i'' -e 's/(^.*)Copyright \(c\) 2008 - 2009/\1Copyright (c) 2008 - 2010/g' {} \;

find . -exec stat -f "%m" \{} \; | sort -n -r | head -1

find . -exec touch -t 201007162310.00 {} +

find . -iname "*$1*" -exec ack-grep "$2" '{}' +

find . -iname '*.*' -type f -print0 | while read -d $'\0' file; do cp "$file" "$file.bak"; done

find . -iname '*.cpp' | while read filename; do grep --with-filename '\[[01]\]' "$filename"; done

find . -iname "*.java" -exec ./fnfs2lc.sh {} +

find . -iname "*.java" -exec ./fnfs2lc.sh {} \;

find . -iname "*.mov" | while read line; do mv "$line" OUTPUTDIR/; done

find . -iname "*.php" -exec  sed -i.bak "/<\!DOCTYPE/ i $text" "{}" +;

find . -iname '*.php' -type f -print0 | while read -d $'\0' file; do cp "$file" "$file.bak"; done

find . -iname "*.php"|xargs -n1 awk '{a=$0;}END{if(!a)print FILENAME}'

find . -iname "*.php" | xargs chmod +x

for D in `find . -iname "*.php~"`; do mv ${D} /mydir; done

find . -iname '*.py' | xargs pcregrep -M '_name.*\n.*_description'

find . -iname "*.sln" -print | xargs cygstart

find . -iname "*Advanced*Linux*Program*" -exec sh -c '"$0" "$@" &' kpdf {} \;

find . -iname "*FA" -exec ls {} \; | sort | xargs -n 1 sed -n 13p

find . -iname "*FooBar*" -exec printf '%s\0' {} \; | nul_terminated tail -n 2 | xargs -I "{}" -0 cp "{}" "dest"

$ find . -iname "*dbg*" -exec rename _dbg.txt .txt '{}' \;

$ find . -iname "*file*" | while read -r i; do cp "$i" temp/; done

find . -iname "*foobar*" -exec cp "{}" ~/foo/bar \;

find . -iname "*hs*" -exec ./list-foo + 

find . -iname '*html' | xargs egrep -iwl '(word1.*word2|word2.*word1)'

find . -iname \*jpg -exec /your/image/conversion/script.sh {} +

find . -iname \*jpg -exec /your/image/conversion/script.sh {} \;

find . -iname '*jpg.jpg' | sed -e 's/\(.*\)jpg\.jpg$/mv & \1.jpg/' | sh

find . -iname "*png" -print0 | xargs -0 --max-procs=4 -n 1 pngout

find . -iname '*py' -exec grep "text" {} \; 

find . -iname '.#*' -print | while read -r i; do foobar "$i"; done

find . -iname '.#*' -print0 | while read -r -d '' i; do foobar "$i"; done

find . -iname .svn -exec rm -rf {} \;

find . -iname "2010-06*" -maxdepth 1 -type d -print0 | xargs -0 -I{} find '{}' -iname '*.jpg'

find . -iname 'ABC*' | wc -l

find . -iname "f????.a" -exec mv {} {}.img \;

find . -iname 'thumbs.db' -exec rm -rfv {} +

find . -inum <inode-number> -exec rm -i {} \;

find . -ipath '*/abc/*.txt'

find . -ipath '*/fetch/evs/*.ev' -exec grep -L -e "' Error" {} \;

find . -ipath '*/fetch/evs/*.ev' -exec sh -c "grep -L -e \"' Error\" {}" \;

find . -iregex ".*\(_web\|_thumb\)\.\(jpg\|png\|bmp\)" -delete

find . -iregex '.*\(mp3\|mp4\|exe\)' -printf '%f\0' | xargs -0 dosomething

find . -iregex '.*\(mp3\|mp4\|exe\)' -printf '%f\n'

find . -iregex '.*\.h$'

find . -iregex '.*html?' -printf '%P\0' | xargs -0 sed -i -Ee "s:(http|https)\://(www.|)${domain}[?/]::g"

find . -iregex './\(EA\|FS\)_.*'

find . -ls -name '*.app' -prune

find . -maxdepth 0 -name '*em*'

find   .   -maxdepth 1   ! -type l   ! -iname '.*'

find . -maxdepth 1 ! -type l \( ! -iname ".*" \) -exec echo {} \;

find . -maxdepth 1 -inum "$number"

find . -maxdepth 1 -iregex "the_regex" -size +32M -printf "Viseo over 32 MB (size %s): %h/%f"

find . -maxdepth 1 -mindepth 1 -type f -name '*-foo-bar.txt' | sed 's/-foo-bar.txt//' | xargs -I{} mv {}-foo-bar.txt {}.txt

find . -maxdepth 1 -mindepth 1 -type f -not -name "*${EXEC_DATE}*" -print0

find . -maxdepth 1 -name "*$pattern*xlsx" -type f -exec mv {} $destination +

find . -maxdepth 1 -name '*.csv' -exec ruby importer.rb {} \;

find . -maxdepth 1 -name '*.hash' -printf "-x\0%p\0" | xargs -0 md5deep -r * -e

find . -maxdepth 1 -name "*.txt" -exec data {} \;

find . -maxdepth 1 -newer $1

find . -maxdepth 1 -not -name "$name_fasta" -not -name letsgo.sh -delete

find . -maxdepth 1 -not -name .repo -not -name out -not -name release -type d

find . -maxdepth 1 -perm $permission -exec $* {} \;

find . -maxdepth 1 -perm -111 -type f

find . -maxdepth 1 -perm 644 -exec ls -ld {} \;

 find . -maxdepth 1 -regex '\./[0-9][0-9][0-9]p\.pdb' | xargs -I _IN_ csh -c 'program _IN_ `echo _IN_ | sed -e s/p/h/`'

find . -maxdepth 1 -type -f -delete

for DEST in `find . -maxdepth 1 -type d ! -name "."` ; do cp a.txt "$DEST" ; done

find . -maxdepth 1 -type d -cmin -60 -print | egrep -v '^(\.|\.\.)$' | sed 's/..//'

find . -maxdepth 1 -type d -cmin -60 -printf "%f\n" | egrep -v '^(\.|\.\.)$'

find . -maxdepth 1 -type d -exec ls -ld "{}" \;

find . -maxdepth 1 -type d -exec mkdir -p \{\}/converted \;

v=$(find . -maxdepth 1 -type d -name '[^.]?*' -printf %f -quit)

find . -maxdepth 1 -type d -regex ".*/[0-9]*"

find . -maxdepth 1 -type f

find . -maxdepth 1 -type f

find . -maxdepth 1 -type f

find . -maxdepth 1 -type f ! -empty 

find . -maxdepth 1 -type f ! -iname '*.pdf' -delete

find . -maxdepth 1 -type f -and \( -iname 'blah.*' -or -iname 'foo.*' \) -print0 | xargs -0 -I {} mv {} ~/target/dir

find . -maxdepth 1 -type f -and -iname 'blah*' -print0 | xargs -0 -I {} mv {} ~/target/dir

find . -maxdepth 1 -type f -ctime -12 -delete;

find . -maxdepth 1 -type f -exec echo {} \;

find . -maxdepth 1 -type f -exec grep "$@" {} +

$ find . -maxdepth 1 -type f -exec sed -i '1i #comment' {} \;

find . -maxdepth 1 -type f -exec sed -i 's/abc/abcd/g' {} \;

find . -maxdepth 1 -type f -executable -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "

find . -maxdepth 1 -type f -iname "*.xml" -exec xmllint --format '{}' --output formatted/'{}' \;

find . -maxdepth 1 -type f -iname "*.xml" | xargs -I '{}' xmllint --format '{}'

find . -maxdepth 1 -type f -mtime -1

 for x in `find . -maxdepth 1 -type f -name "*.JPG"` ; do mv "$x" "${x%.JPG}.jpg"; done

for x in `find . -maxdepth 1 -type f -name "*.JPG"` ; do mv "$x" `echo $x|sed 's/JPG/jpg/g'`; done

find . -maxdepth 1 -type f -name "*.java" -newermt 2012-10-16 ! -newermt 2012-10-18 -exec cp '{}' /home/user/dstFolder/ \;

find . -maxdepth 1 -type f -name "*.pdf" -exec cp -f {} ~/github/maps/fichesPedago/ \;

find . -maxdepth 1 -type f -name '*.txt' -exec sed -i 's/.*/\L&/' {} +

find . -maxdepth 1 -type f -newermt 2013-10-08 ! -newermt 2013-10-11

find . -maxdepth 1 -type f -newermt "Nov 22" \! -newermt "Nov 23" -exec echo {} +

find . -maxdepth 1 -type f -print0 | grep -z "${DAYTWOPREV}" | tar -cvf archive.tar --null -T /dev/stdin

find . -maxdepth 1 -type f -printf '%P,' | sed -e 's/,$/\n/'

find . -maxdepth 1 -type f -printf '%f\n'

find . -maxdepth 1 -type f -printf "%s\t%f\n"

find . -maxdepth 1 -type f | parallel --gnu 'wc -l' | awk 'BEGIN {n=0} {n += $1} END {print n}'

find . -maxdepth 1 -type f | xargs -n1 -P4 wc -l | awk 'BEGIN {n=0} {n += $1} END {print n}'

find . -maxdepth 1 -xdev -type f -exec sed -i '/teststring/Id' {} \;

$ find . -maxdepth 2  -type f

find . -maxdepth 2  -type f -exec ls -l {} \;

find . -mindepth 1 -maxdepth 1 ! -name '*.jar' -delete

find . -mindepth 1 -maxdepth 1 ! -name '*.jar' | sort

find . -mindepth 1 -maxdepth 1 ! -type d ! -name '*.jar' -exec rm '{}' ';'

find . -mindepth 1 -maxdepth 1 ! -type d ! -name '*.jar' -print0 | xargs -0 -r rm -f

find . -mindepth 1 -maxdepth 1 ! -type d ! -name '*.jar' -print0 | xargs -0 rm -f

find . -mindepth 1 -maxdepth 1 -name cookbooks -prune -o -exec rm -rf '{}' +

 find . -mindepth 1 -maxdepth 1 -not -empty -type d

dir=$(find . -mindepth 1 -maxdepth 1 -type d)

find . -mindepth 1 -maxdepth 1 -type f -printf "%P\n" | sed 's/-.*//g' | sort -u

find . -mindepth 2 -name "*" -exec sh -c 'sed -i "s,PBD FolderName,PBD $(echo $(basename $(dirname {})))," {}' \;

    for dir in $(find . -mindepth 2 -type d -mtime 3); do cd "$dir" && zip ../$(basename "$dir") * && cd - && rm -rf "$dir" || cd -; done

find . -mindepth 2 -type f -size +0 | cut -d/ -f2 | uniq

find . -mmin +10

find . -mtime +0 -printf '%f\n' > list.txt

find . -mtime +0 -printf '%f\n' -type f > list.txt

find . -mtime +0h55m

find . -mtime +180 -exec du -ks {} \; | cut -f1 | awk '{total=total+$1}END{print total/1024}'

find . -mtime +3 -exec rm {} ';'

find . -mtime +90 -exec zip zipped.zip '{}' +

find . -mtime +90 -exec zip zipped.zip '{}' + && mv zipped.zip /var/ARCHIVES

find . -mtime -1

find . -mtime -1

find . -mtime -1

find . -mtime -1 ! -name '.DS_Store' -type f -exec basename {} \;

find . -mtime -1 ! -name '.DS_Store' -type f -printf '%f\n'

find . -mtime -1 -exec cat {} \;

find . -mtime -1 -mmin +5 -name '*.tmp' -type f -print0

find . -mtime -1 | xargs tar --no-recursion -czf myfile.tgz

find . -mtime -1.5 | xargs tar --no-recursion -czf myfile.tgz

find . -mtime -5 \( -name '*.h' -o -name '*.txt' \)

find . -mtime -90 -exec cp {} targetdir \;

find . -mtime 0 \( -name "*.php" -o -name "*.xml" -o -name "*.phtml" \)

VAR=$(for i in $(find . -mtime 0 -name '*XML*' -exec ls '{}' \;); do unzip -l "$i"| awk -F. '{if ($2=="XML") print $0}'|wc -l; done| paste -sd+ | bc)

find . -name '#*#' -exec rm -i {} \;

f () { find . -name "$1" -type f -exec grep -i "$2" '{}' \; ; }

array=`find . -name ${input}`

find . -name '*' -exec command arguments {} \;

find . -name "*" -type f | xargs grep -l "xyz" |xargs  sed -i "s/'${line}'/'${rep}'/g"

find . -name \*$'\n'\*

find . -name '*-GHBAG-*' -exec bash -c 'mv $0 ${0/GHBAG/stream-agg}' {} \;

  $ find . -name '*.[ch]' -print | xargs grep -H 'main' 

  $ find . -name '*.[ch]' -print | xargs grep -H 'main' | cut -d ':' -f 1

find . -name '*.[ch]' | wc -l

find . -name '*.[chyl]' -print0 | xargs -0 grep -n magic_name /dev/null

find . -name '*.[chyl]' | xargs grep -n magic_name /dev/null

find . -name '*. out' -exec grep -ci "search_string" {} +

find . -name "*.123" -o \( -name "123.*" -a -print \)

find . -name "*.123" -o -name "123.*" -a -print

find . -name "*.123" -o -name "123.*" -print

find . -name "*.?pp" -exec perl -0777 -pi -e 's/(#include "my.hpp"\n)((#include .*\n)*)/$2$1/g' {} \;

find . -name "*.VER" -mtime +31 -mtime -62 -exec mv '{}' /opt/html/62 ';' -print

find . -name "*.VER" -printf "%f" | awk -F'~' '{for(i=1;i<=NF;i++)printf("%s\t",$i)}1'

find . -name "*.VER" -printf "%f" | awk -F"~" '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$0}'

find . -name "*.abc" -exec sh -c 'NEWDIR=`basename "$1" .abc` ; mkdir "$NEWDIR" ; mv "$1" "$NEWDIR" ' _ {} \;

find . -name "*.abc" -exec sh -c 'mkdir "${1%.*}" ; mv "$1" "${1%.*}" ' _ {} \;

find . -name "*.bak" -exec sh -c 'mv -f $0 ${0%.bak}' {} \;

find . -name '*.bar' -type f -exec sha256sum {} \;

find . -name '*.bar' -type f -exec sha256sum {} \; | sort

find . -name \*.bin -type f -print | sort -r | awk 'BEGIN{FS="."} a[$2] {next} {a[$2]=1} 1' | sort

find . -name '*.bx' -type f | while read NAME ; do mv "${NAME}" "${NAME%.bx}" ; done

$ find . -name '*.c' -exec sed -i your_command {} \;

find . -name "*.c" -exec wc -l {} \;

find . -name "*.c" -print | xargs wc -l 

find . -name "*.c" -print0 | xargs -0 grep Unit32

find . -name *.c -print0 | xargs -0 sed -i.bak -e "s/\#include\s\"\([^\"]+/)\"/\#include\s\"\L\1\"/"

find . -name "*.c" -print0 | xargs -0 wc -l

find . -name "*.c" -type f

find . -name "*.c" | xargs grep Unit32

find . -name '*.coords' -mtime 0 -exec cat {} \;

find . -name '*.coords' -mtime 0 -print -exec cat {} \;

find . -name '*.csv' -exec ruby importer.rb {} \;

find . -name '*.csv.gz' -exec gzip -d {} \;

find . -name '*.csv.gz' -print0 | xargs -0 -n1 gzip -d

find . -name '*.dat' -exec sed -i 's/"//g' {} \;

find . -name '*.doc' | xargs -d"\n" grep -rH --color word

find . -name '*.ear' -exec ls -lh {} \;

find . -name \*.erb -print | sed 'p;s/.erb$/.haml/' | xargs -n2 html2haml

find . -name \*.erb -print0 | gsed -z 'p;s/.erb$/.haml/' | xargs -0 -n2 html2haml

find . -name '*.ext' \( -exec ./some_other_script "$PWD"/{} \; -o -print \)

find . -name "*.ext" | xargs sed -i 's/a/b/g'

find . -name "*.extension" -print0 | xargs -0 -n 1 tail -n +2 > concatenated.csv

find . -name "*.extension" | xargs -n 1 tail -n +2

find . -name \*.fal -exec eine_fal_macher {} Versuch.txt \;

find . -name "*.foo" -execdir bash -c '[[ -f "${1%.*}.bar" ]] && rm "$1"' - '{}' \;

find . -name *.gif -exec gif2bmp -i {} -o {}.bmp \;

$ find . -name '*.gz' -exec cp --target-directory=/home/itadmin/temp4 {} +

/usr/local/apache2.2/logs$ find . -name '*.gz' -exec cp {} /home/itadmin/temp4/{} \;

for i in $(find . -name "*.gz"); do gzcat $i|grep -qe "n1" -e "n2" && echo $i; done

find . -name "*.gz" | while read -r file; do zcat -f "$file" | head -n 1; done

find . -name '*.h' -o -name '*.txt'

find . -name *.h -print0 | xargs -0 rename 's/(*)/\L\1/'

find . -name '*.hash' -printf "-x\0%p\0" | xargs -0 md5deep -r * -e

find . -name '*.hpp' -o -name '*.cpp' | xargs grep -l StuffToEdit

find . -name \*.html

find . -name '*.html' -exec /bin/bash -c 'sed "s/DOCTITLE/$(grep -m1 '\''<h1>.*</h1>'\'' '\''{}'\'' | sed '\''s,<h1>\(.*\)</h1>,\1,'\'')/" "{}"' \;

find . -name '*.html' -exec /bin/bash -c 'sed "s/DOCTITLE/$(sed -n '\''\,<h1>.*</h1>,{s,<h1>\(.*\)</h1>,\1,p;q}'\'' '\''{}'\'')/" "{}"' \;

find . -name "*.html" -exec chmod 664 {} \;

find . -name \*.html -exec grep -H string-to-find {} \;

find . -name '*.html' -exec sed -i 's|{{\s*oldtag\s*}}|{{ newtag }}|g' {} +

find . -name "*.html" -exec sed -i.BAK -n "/<div id=\"left-col/,$ p" {} \;

find . -name "*.html" -exec sed -i.bak 's#http://version2\.staging\.myname\.com##g' '{}' \; -print

find . -name '*.html' |xargs perl -pi -e 's/find/replace/g'

$ find . -name '*.html.haml' -exec sed -i 's/restaurant_id/company_id/g;s/restaurants/companies/g;s/restaurant/company/g;s/Restaurants/Companies/g;s/Restaurant/Company/g' "{}" \;

find . -name '*.infected' | sed -e 's#.*#diff & &#' -e 's#.infected##' | sh -x

find . -name *.info | xargs wc -l

 $ find . -name '*.jar' -exec sh -c 'jar -tf {} | grep -q foo' \; -print

find . -name "*.jar" -print -exec ...

find . -name '*.jar' -print0 |  xargs -0 -I '{}' sh -c 'jar tf {} | grep Message.class &&  echo {}'

find . -name "*.jar"|xargs -n 1 jar -tvf

CLASSPATH=$(find "." -name '*.jar' | xargs echo | tr ' ' ':')

find . -name '*.java' -exec bash -c 'mv "$1" "${1%/*}"/test.java' -- {} \;

find . -name "*.java" -exec sed -i -f sed.script {} +

find . -name '*.java' -execdir mv {} test.java \;

find . -name "*.java" -print0 | xargs -0 grep -Lz 'regular_expression'

find . -name "*.java" -print0 | xargs -0 sed -i -n '/GNU GENERAL PUBLIC LICENSE/{:a;N;/why-not-lgpl.html\>./!ba;N;s/.*\n//};p'

x=$(find . -name "*.java" | wc -l)

find . -name "*.java" | xargs du -ch

find . -name "*.java" | xargs perl -pi -e's/foo/bar/g'

find . -name "*.java" | xargs sed -i 's/foo/bar/g'

find . -name "*.jpg" -exec bash -c 'f={}; f=${f/.\//}; echo mycommand -in "${f}" -out "${f%.*}.tif" --otherparam paramvalue' {} \;

find . -name "*.jpg" -exec bash -c 'file="{}"; cp "$file" "${file%%.jpg}1.jpg"' \;

find . -name "*.jpg" -exec sh -c 'mycommand -in $0 -out "${0%.*}.tif" --otherparam paramvalue' {} \;

find . -name \*.jpg -print0 | tar -zcvf images.tar.gz --null -T -

find . -name "*.jpg_m" -execdir rename ".jpg_m" "_m.jpg" {} \;

find . -name "*.js" -exec bash -c 'name="{}"; cp "$name" "${name%.js}.ts"' \;

find . -name '*.js' -exec echo "{}" \; -exec sed -i '' 's/_persistenceURL = "prod"/_persistenceURL = "qa"/g' {} +

find . -name \*.js -print0 | xargs -0 grep -n ".*loginError.*"

find . -name "*.js" | xargs sed  -i -e "/^;var/N;/^;var\nO0l='=sTKpUG/d"

$ find . -name "*.kaks" -type f -maxdepth 1 -exec grep -f A01/genes.txt {} \;

$ find . -name "*.kaks" -type f -maxdepth 1 -print0 | xargs -0 grep -f A01/genes.txt

$ find . -name "*.kaks" -type f -maxdepth 1 | xargs grep -f A01/genes.txt

find . -name \*.less -exec lessc {} ../css/{}.css

find . -name "*.less" -exec sh -c "plessc \$0 \$(dirname \$0)/\$(basename \$0 less)css" {} \;

 find . -name *.log -exec bash -c 'x={} ; y=$(stat -c %y $x); echo cp $x ${x}_${y%% *}_bak ' \;

find . -name \*.m -exec grep "\[POEditor localizedStringWithKey:" {} \; | awk -F\" '{print $2}'

find . -name '*.m4a' -type f -exec bash -c 'ffmpeg -i "$0" -acodec libmp3lame -ab 320 "${0%.m4a}.mp3"' {} \;

find . -name '*.mk' | xargs grep '.dat'

find . -name "*.mol2"

find . -name \*.mov -depth +1 -print0 | xargs -0 -J % ln -s % .

find . -name '*.mov' -exec rm -f {} +

find . -name "*.mp3" -exec cp -iv {} /my/dir \;

find . -name "*.mp3" -maxdepth 0 -print0 | sort -z | xargs -0 cat > merged.mp3

 find . -name "*.mp3" -print0 | xargs -0 mplayer

find . -name '*.mt0' -type f -exec sed -n '2{p;q}' {} \; | cut -f2 -d' ' > output

find . -name \*.pdf -exec /path/to/pdftotext {} \;

find . -name \*.pdf -exec cp --parents {} /new_path/ \;

find . -name '*.pdf' -exec echo Yes, we have a pdf: {} \; -o -exec echo No, not a pdf: {}  \;

$ find . -name '*.pdf' -mtime +30 -mtime -46

find . -name '*.pdf' -print

find . -name \*.pdf -print | awk '{cmd=sprintf("pdftotext \"%s\"", $0);system(cmd);}'

find . -name \*.pdf -print0 | xargs -0 -n 1 -Ifoo cp --parents foo /new_path/

find . -name \*.pem -type f -execdir openssl x509 -in {} -noout -enddate \;

find . -name '*.per' \! -exec grep -q 'connection_id' {} \; -print

$ find . -name "*.php" -exec chmod 755 {} \; -exec /bin/echo {} \; | wc -l

find . -name '*.php' -exec sed -i '/@category/d' {} \;

find . -name '*.php' -exec sed -i 's/www.fubar.com/www.fubar.ftw.com/g' {} \;

find . -name "*.php" -exec sed -r -i.bak 's#http(s?)://account.mysmallwebsite.com#<?php echo $domainName;?>#g' {} \;

find . -name "*.php" -mtime -14 -print | xargs tar cvf backup.tar

find . -name '*.php' -print0 | xargs -0 -L 1 php -l

find . -name '*.php' -print0 | xargs -0 grep -l '^M$'

find . -name '*.php' -type f -exec sed -i 's/hello/bonjour/' {} \;

find . -name "*.php" -type f -print0 | xargs -0 sed -i -e "s|if *(\$_GET\[[\"']\([^\"']\+\)[\"']\]) *{|if(isset(\$_GET['\1'])){|g" --

find . -name "*.php" -type f -print0 | xargs -0 sed -i -e "s|if *(\$_GET\[[\"']x[\"']\]) *{|if(isset(\$_GET['x'])){|g" --

find . -name "*.php" -type f -print0 | xargs -0 sed -i -e "s|if *(\$_GET\['x'\]) *{|if(isset(\$_GET['x'])){|g" --

find . -name "*.php" | sed ...

find . -name "*.php" | xargs perl -ne '$v=$1 if /\$RELEASE\s*=\s*\047([0-9.]+)\047/; $devlevel=$1 if /\$DEV_LEVEL\s*=\s*\047([0-9.]+)\047/; if (defined $v && defined $devlevel) { print "$ARGV: Release=$v Devlevel=$devlevel\n"; last; }'

$ find . -name "*.php" | xargs wc

find . -name '*.php' | xargs wc -l

find . -name "*.pl" | xargs grep '/local' -sl

find . -name "*.png" | sed 's#^.*/\([^/]*\)/\([^/.]*\)\.[0-9]\+\.png$#\1 \2#' | sort -u

find . -name "*.png" |xargs -I{} echo "mycommand {}"

find . -name "*.png" |xargs -t -I{} sh -c "mycommand {}"

find . -name \*.py -exec grep -nH "main()" {} \;

findpy() { find . -name '*.py' -exec grep -nHr "$1" {} \; ; }

find . -name "*.py" -exec svn add --parents {} ';'

find . -name '*.py' -print0 | xargs -0 sed -i -e 's/\s\s*$//'

$ find . -name "*.py" | xargs sed -i "" 's/organizations/organisations/g'

find . -name "*.py" | xargs sed -i 's/foo/foobar/g'

find . -name '*.pyc' -delete

find . -name "*.pyc" -exec rm -rf {} \;

find . -name "*.pyc" -exec sh -c "pycdc {} > {}_dec" \;

find . -name '*.qux' -type f -print0 | du -h --files0-from -

find . -name '*.rb' -type f

find . -name "*.sh" -exec chmod +x {} \;

find . -name '*.sql' | awk '{ print "source",$0 }' | mysql --batch

find . -name '*.svn' -print0 | xargs -0 -I{} rm \'{}\'

find . -name "*.t1" -exec bash -c 'mv "$1" "$(sed "s/\.t1$/.t2/" <<< "$1")"' - '{}' \;

find . -name "*.t1" -exec rename 's/\.t1$/.t2/' '{}' \;

find . -name "*.tar.gz" -exec bash -c 'd=$(dirname "{}") && b=$(basename "{}") && cd "$d" && tar zxvf "$b"' \;

find . -name "*.tar.gz" -execdir tar zxvf "{}" \;

find . -name *.tex

find . -name "*.tex"

find . -name '*.txt'

find . -name '*.txt' -exec bash -c 'cd $(dirname {}) && pwd && /mycmd $(basename {})' \;

find . -name '*.txt' -exec cat -- '{}' ';' | wc -l

find . -name "*.txt" -exec data {} \;

find . -name "*.txt" -exec dd if=source of='{}' oflag=append conv=notrunc ';'

find . -name '*.txt' -exec dirname {} \;

$ find . -name '*.txt' -exec file {} +

find . -name "*.txt" -exec ls -l {} \;

find . -name "*.txt" -exec sed -i s/Coke/Pepsi/g {} \;

find . -name '*.txt' -or -name '*.html' -exec grep -oP '\b[A-Za-z0-9_.]+\.[A-Za-z0-9]{1,4}\b' {} \; |  awk -F. '{ print "." $(NF) }' | sort -u

find . -name '*.txt' -print -exec awk '$4 ~ /NM/{ sum += $2 } END{ print sum }' {} \;

$ find . -name "*.txt" -print -exec awk '$9 != "" && n < 10 {print; n++}' {} \;

find . -name "*.txt" -print | xargs egrep foo /dev/null

find . -name '*.txt' -print0 | xargs --null -n 1 awk '$4 ~ /NM/{ sum += $2 } END{ print sum }'

find . -name "*.txt" -print0 | xargs -0 egrep foo /dev/null

find . -name \*.txt -print0 | xargs -0 grep "word"

find . -name \*.txt -print0 | xargs -0 svn ps svn:eol-style native

find . -name '*.txt' | parallel grep -il iso-8859-1 | parallel iconv -f ISO-8859-1 -t UTF-8 {} \> {}.converted

find . -name '*.txt' | while read thefile ; do mv -v $thefile ${thefile%-*} ; done

 find . -name *.txt |xargs -I{} awk -F',' 'NF!=5{print FILENAME;exit;}' {}

find . -name "*.txt" | xargs cat | awk -f script.awk

find . -name "*.txt" | xargs rm

find . -name "*.txt" | xargs rm

find . -name "*.txt" | xargs sed -i s/Coke/Pepsi/g

find . -name '*.txt.*' -print -exec zip '{}'.zip '{}' \; -exec mv '{}'.zip '{}' \;

find . -name "*.undo" -ls | awk '{total += $7} END {print total}'

find . -name "*.utv" | xargs egrep -l 'ACCOUNT NO: +700 ' >&! /home/me/output.txt

find . -name "*.wav.gz" | xargs rename -v "s/abcd124*/abcd1234$1/"

find . -name '*.xib' -exec bash -c "f='{}' ; echo \${f%.xib}.strings" \;

find . -name '*.xib' | sed 's/.xlib$/.strings/'

$ find . -name \*.xls -exec cp ....

find . -name "*.xml" -exec cp -a -t ~/Desktop/test/ --parents {} +

find . -name "*.xml" -type f|xargs rm -f

find . -name "*.xml" | xargs -I {} sh -c "grep -H FOO {}"

$ find . -name "*.xml" | xargs java XMLBeautifier

find . -name *.xvi.txt | sed 's/[0-9]\+.xvi.txt$/\\&/' | sort -t'\' -k2 | sed 's/\\//'

find . -name *.xvi.txt | sort -t'.' -k3 -n

find . -name "*.zip" -exec script.sh {} \;

find . -name '*.zip' -exec sh -c 'unzip -d "`dirname \"{}\"`" "{}"' ';'

find . -name '*.zip' -exec sh -c 'unzip -d `dirname {}` {}' ';'

find . -name "*/function.php" -print | xargs sed -i 's/foo/bar/g'

$ find . -name *20120805.gz -exec zcat {} \;

find . -name "*A.jpg" -exec bash -c 'old="$0";new=${old/A.jpg/A@2.jpg};echo convert "$old" -resize 400x400 "$new"' {} \;

find . -name '*Source*.dat' -exec sh -c 'cp "$1" "$2/$RANDOM.dat"' -- {} "$INBOUND" \;

find . -name '*TXT' | wc -l

find . -name '*VER' |awk -F~ '{print $11}'|sort|uniq -c

find . -name '*\(*\)' -exec bash -c 'mv "$1" "$(sed "s/ [^ ]*$//"<<<"$1")"' - '{}' \;

find . -name '*\(*\)' -exec rename 's/ [^ ]*$//' '{}' \;

find . -name "*_(*)" -type f -exec rename 's/_\((\d+)\)$/$1/' {} +

find . -name "*abc*"

find . -name "*abc*" -path "*src*"

find . -name '*abc*' -print

find . -name '*abc*' -print | xargs some_command_that_takes_filenames_as_arguments

find . -name '*bills*' -exec grep -H "put" {} \;

find . -name *css -exec sed -i '' 's/old_link/new_link/g' {} ';'

find . -name \*foo -print0 | perl  -n0le 'print;s/foo/foo2/;print' | xargs -0 -n2 echo bar

find . -name "*html" -print0 | xargs -0  du -shc

find . -name \*html.erb -exec sh -c 'echo html2haml "{}" "$(echo "{}" | sed 's/\.erb/\.haml/')"' \;

find . -name \*html.erb -exec sh -c 'html2haml "{}" "$(sed 's/\.erb/\.haml/'<<<"{}")"' \;

find . -name *mobile* # does not work

find . -name '*mobile*' # works

find . -name *mobile*

find . -name '*pattern.txt' -maxdepth 1 -type f \( -mmin -15 -a -mmin +5 \)

find . -name "*php" -exec grep -H abc {} \;

find . -name "*php" -print | xargs grep abc

find . -name "*php" -print0 | xargs -0 grep -H abc

find . -name "*php" -print0 | xargs -0 grep abc /dev/null

find . -name "*php" -type f -exec ls -l {} \;

find . -name "*png" -exec bash -c "base64 {} > {}.txt" \;

find . -name "*show1*" -exec cp {} /mnt/main/data/tv/Show1 \;

find . -name "*tablet*" -exec /path/to/script '{}' \;

find . -name "*tablet*" -exec sh -c 'new=$( echo {} | sed "s/tablet/mobile/" ) && mv {} $new' \;

find . -name "*test*"

 find . -name '*test*'

find . -name '*test.c'

$ find . -name "*txt" | xargs cat

for i in `find . -name '*zip'`; do  unzip -o "$i" '*PSU*' -d psutmp/ ; done

$ find . -name ... -ls

find . -name '...' -mtime +3 -exec rm \+

find . -name "./td/*.c" -exec sed -i "s/:::/::/g" '{}' \;

find . -name .DS_Store -print0 | xargs -0 git rm --ignore-unmatch

find . -name "._*" -print0 | xargs -0 rm -rf

for d in `find . -name .git | xargs dirname `; do pushd $d; git status; popd; done;

find . -name '.git*' -prune -o -type f -print  # DON'T DO THIS

find . -name .htaccess -exec sed -i "" 's/RedirectMatch/#RedirectMatch/g' {} \;

find . -name .snapshot -prune -o -name '*.foo'                 # DON'T DO THIS

find . -name .snapshot -prune -o -name '*.foo' -print

find . -name .svn -exec ls {} \;

find . -name .svn -exec rm -rf {} \;

find . -name 1.txt -exec dirname {} \;

find . -name '111.xml' -exec bash -c "awk '\$0 ~ /\"/ { print \$0 }' {} > {}.NEW" \;

find . -name '123*.txt' -type f -exec bash -c 'mv "$1" "${1/\/123_//}"' -- {} \;

find . -name 'AA*' -mtime +60 -exec rm {} \;

find . -name "FILE*TXT" -mtime +1 -exec sh -c 'grep -H ^err "{}" || echo "{}:No error"' \;

for f in $(find . -name "FILE_NAME"); do grep PATERN $f | tail -1; done

find . -name FOO -exec echo {} ./foo {} \;

find . -name FOO -exec echo {} \;

find . -name "FOO*" -execdir mv '{}' bar \;

find . -name Makefile -exec make -j3 -f '{}' ';' 2>&1 | tee result.txt

find . -name Makefile -print0 | xargs -0 grep -nH $ | grep :235:

find . -name 'Myinput*' -print0 | parallel -0 -P 8 ./myscript {1}

find . -name 'Myinput*' -print0 | parallel -0 -P 8 nohup ./myscript {1}  2> Myoutput

find . -name 'README' -exec head -1 {} \;

$ find . -name 'README' -printf '%T@\t%p\n' | sort | cut -f 2-

find . -name 'README.txt'

find . -name X.sql A.sql W.sql E.sql S.sql

find . -name '\*.php' -o -name '\*.phtml' -print0 | xargs -0 svn propset svn:keywords "Id"

find . -name `.git` | xargs dirname

find . -name a.c | xargs -I $$ diff ~/good/a.c $$

find . -name 'abc*' | sed 's/$/\tok/' | column -t

find . -name activate

find . -name bak -type d | xargs du -ch

find . -name bar -type d -execdir mv {} baz \;

find . -name bobtest.c cattest.c snowtest.c

find . -name "data*.txt" -exec sed -i -e '/-nan/d' {} +

find . -name "database.php" -exec grep '$dbname' /dev/null {} +

find . -name f1.tex f2.tex

$ find . -name 'file' -exec du --time {} +

find . -name 'file*' -size 0 -print0 | xargs -0 rm

find . -name "file-$a.sh" -o -name "file-$b.sh"

find . -name 'file_*' -exec rename 's/file_/mywish_/' {} \;

find . -name "file_*" -follow -type f -print0 | xargs -0 zcat | agrep -dEOE 'grep'

find . -name "file_for_print*"

find . -name "file_for_print*"

find . -name "file_for_print*" -exec cat {} \;

find . -name "file_for_print*" -print

find . -name "file_for_print*" -print -exec cat {} \;

find . -name "filename" -printf '%TY:%Tm:%Td %TH:%Tm %h/%f\n' | sort

find . -name "filename" -type f -delete

find . -name foo.xml -exec  xsltproc -o {} transform.xsl {} \;

find . -name foo.xml -print0 | xargs -I {} -0 xsltproc -o {} transform.xsl {}

find . -name 'generator.yml' -exec gedit {} +

find . -name 'generator.yml' -print0 | xargs -0 gedit

find . -name "index.html" -print | xargs sed -i 's/<script>try.*<\/script>//' fileName

find . -name 'index.html' | xargs sed -i .bak -e 's#<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8"><!-- /Added by HTTrack -->##g'

find . -name "index.php" | xargs sed -i.bak "s:'\.\$siteUrl\.':/:g"

find . -name "index.php" | xargs sed -i "s/'\.\$siteUrl\.'/\//g"

find . -name "index.php" | xargs sed -i "s:'\.\$siteUrl\.':/:g"

find . -name mobile.1

     find . -name "myfile*" -print | xargs grep "myword" $1

find . -name "myfile.txt" | grep myfile.txt

find . -name "mylib*" -exec bash -c 'mv "$1" "${1/\/mylib//libvertio}"' - '{}' \;

find . -name "mylib*" -exec rename 's/mylib/libvertio/' '{}' \;

find . -name 'mystring*'

find . -name orig_name -exec myscript.sh {} \;

find . -name "pattern_A" ! -name "pattern_B"

for i in `find . -name 'photo*' -type f` ; do mv ${i} ${i/\/photo//color} ; done

find . -name 'quest*' | cut -d_ -f1  | sort | uniq -c | sort -k1nr | head -n10

find . -name "sample*_1.txt" | perl -pe 's/_1\.txt$//' | parallel program {}-out {}_1.txt {}_2.txt

find . -name script.sh | xargs grep watermelon

find . -name sqlite.db -exec ... \; -print

find . -name test -exec rm -f '{}' \;

find . -name 'test3*' -print | xargs rm -f

find . -name 'user_prefs' -exec sh -c 'echo "whitelist_from basheer@hydrofitgroup.com" >> {}' \;

find . -name vmware-*.log -print0 | xargs -0 rm

 find . -name "zad*"

find . -newermt '2014-04-30 08:00:00' -not -newermt '2014-04-30 09:00:00' |xargs gunzip -c * | grep 1234567890

find . -newermt '2014-04-30 08:00:00' -not -newermt '2014-04-30 09:00:00' | xargs zgrep 1234567890

find . -newermt 'last Thursday'

find . -not -name "*.exe" -not -name "*.dll"

find . -not -name "*.exe" -not -name "*.dll" -not -type d

find . -not -name "*.exe" -not -name "*.dll" -type f

find . -not -path '*/gen*' -a \( -name '*.java' -o -name '*.xml' \)

find . -not -path '*/gen*' -a \( -name '*.java' -o -name '*.xml' \) | xargs cat | wc -l

find . -not -path "*git*" -not -name '*git*' |grep git

find . -path '*/.svn' -prune -o -type f -exec sed -i 's/foo/bar/g' {} +

find . -path '*/.svn' -prune -o -type f -print

find . -path '*/Library/Application Support/Adobe/Acrobat/10.0' -type d -execdir rm -r {} +

find . -path "./*_parameterOne_[12]00_*/*" -exec ./myScript.py {} +

find . -path './.OldFiles' -prune -o -type f -print 

find . -path ./.git -prune -o -not -name '*git*' -print |grep git

find . -path ./ProductA/src -prune -o -print

find . -path ./misc -prune -o -name '*.txt' -print

find . -path ./source/script -prune -o -type f -print;

find . -perm /u+x -execdir chmod a+x {} \;

find . -perm 0644 -exec ls -l {} \;

find . -print -name '*.sav_20110405'

find . -print -name '*.sav_20110405' | xargs /bin/rm

find . -print -name 'myTestFile.sav_20110405' | xargs /bin/rm

find . -print -o -name SCCS -prune

find . -print | grep "/${prefix}${ypatt}" | xargs commands -args

find . -print | perl -lne '$,=" "; @s=stat $_; print $_, $s[2], $s[7]'

find . -print0 | perl -MFile::Path=remove_tree -n0e 'chomp; remove_tree($_, {verbose=>1}) if /[[:^ascii:][:cntrl:]]/'

find . -print0 | perl -n0e 'chomp; print $_, "\n" if /[[:^ascii:][:cntrl:]]/'

find . -print0 | perl -n0e 'print $_, "\n"'

find . -print0 | xargs -0 cmd -option1 -option2 --

find . -print0 | xargs -0 egrep 'Cache'

find . -print0 | xargs -0 rename s/ABC/DEF/g

find . -print0 | xargs -r0 du -chx|grep total

find . -r -type f abc.txt -exec sed -i -e 's/search/replace/g' {} +

find . -regex "$1"

find . -regex ".*[19|20][0-9][0-9][0-1][0-2][0-3][0-9][0-2][0-9][0-6][0-9][0-6][0-9]\.txt$"

find . -regex ".*$EOL.*"

find . -regex ".*\.py" -print0 | xargs -0 grep "print "

find . -regex '.*/_[0-9]+_.*\.sql' 

find . -regex '.*/foo/[^/]*.doc'

find . -regex '.*\.\(txt\|h\)'

find . -regex '.*\.dcc$' -ls

find . -regex './.*test.*'

find . -regex './AA.*' -mtime +60 -exec rm {} \;

find . -regex "^.*\.[0-9]\{3,4\}$"

find . -regex '^\./.*test.*'

find . -regex filename-regex.\*\.html 

find . -regex filename-regex.\*\.html -exec grep -H string-to-find {} \;

find . -regextype posix-egrep -regex ".*\.(extension1|extension2)$" -type f -delete

find . -regextype posix-extended -iregex ".*/a_{1}b"

find . -regextype posix-extended -regex ".*/[[:digit:]]+\.bed"

find . -regextype posix-extended -regex ".*file-($a|$b)\.txt"

find . -regextype posix-extended -regex './[^/]{5,}.txt' 

find . -size +"${size}"c 

find . -size +100M -exec gzip {} \;

find . -size +100M | xargs -n 1 -P 4 gzip

find . -size +100k ! -name "a.html" ! -name "b.html" ! -name "c.html" -delete

find . -size +10M

 $ find . -size +20 | xargs du -sh | sort -n   ## put this in your for - list part

find . -size +XM -exec file {} --mime-type + | awk -F':' '/x-rar/{print $1}'

find . -size -300k -name *.png -exec mv {} Ready/ \;

find . -type -f -delete

$ find . -type d

 find . -type d > dirstructure.txt

 find . -type d > dirstructure.txt 2> /dev/null

find . -type d

find . -type d [other tests...] | while read path; do [ -d "$path" ] && ln -s "$path" "${path//_/-}"; done

find . -type d ! -iname "*-Subfolder" -exec bash -c 'mkdir {}/$(basename {})-Subfolder' \;

find . -type d '(' -name .svn -o -name .git ')' -prune -o -type f -exec grep -nH -e 'thing' {} +

find . -type d \( -path "./a" -o -path "./b" \) -prune -o -name '*.[ch]' -print

find . -type d \( -path "./a/*" -o -path "./b/*" \) -prune -o -name '*.[ch]' -print | wc -l

find . -type d \( -path "./stubdom" -o -path "./dist" \) -prune -o -name '*.[ch]' -print

find . -type d \( -path "./stubdom/*" -o -path "./dist/*" \) -prune -o -regex '.*\.\(h\|c\)$' -print

find . -type d \( -path dir1 -o -path dir2 -o -path dir3 \) -prune -o -print

find . -type d -a ! -name '.?*' -o -name '.?*' -a ! -prune

$ find . -type d -a -print0 | xargs -0 chmod 755

find . -type d -depth 1 -exec echo git --git-dir={}/.git --work-tree=$PWD/{} status \;

find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin master \;

find . -type d -empty

find . -type d -empty -exec rmdir {} \;

find . -type d -empty | wc -l

 find . -type d -exec bash -c '(( $(stat -c %W "{}") > $(date +%s -d '2013-12-03') )) && du -h "{}"' \;

find . -type d -exec bash -c 'cd "$0" || exit; shopt -s nullglob; f=( *.jpg ); ((${#f[@]})) && echo convert "${f[@]}" "${PWD##*/}.pdf"' {} \;

find . -type d -exec chmod +rx {} \;

find . -type d -exec chmod ug+x {} +

find . -type d -exec cp index.php {} \;

find . -type d -exec cvs add {} \;

find . -type d -exec echo "Hello, '{}'" \;

find . -type d -exec find {} -type f -maxdepth 1 \;

find . -type d -exec ls -d {} \;

find . -type d -exec ls -ld {} \; | awk '{print $NF, $1}' | sed -e 's;[^/]*/;|____;g;s;____|; |;g'

find . -type d -exec ls {} \;

find . -type d -exec sh -c '(ls -p "{}"|grep />/dev/null)||echo "{}"' \;

find . -type d -exec  sh -c "cd \"{}\" ;  unzip \"*.zip\" ; rm \"*.zip\"  "  \;

find . -type d -exec sh -c 'n=$(find "$0" -maxdepth 1 -type f -printf x | wc -c); printf "%s -- %s files\n" "$0" "$n"' {} \;

find . -type d -exec sh -c 'printf "%s " "$0"; find "$0" -maxdepth 1 -type f -printf x | wc -c' {} \;

find . -type d -exec sudo sh -c 'chmod -R 775 {} || echo "FAILED {}"' \;

find . -type d  -exec test -e "{}/.hg" ';' -print

find . -type d -exec touch {}/COMPLETE \;

find . -type d -exec touch {}/hiya \;

find . -type d -exec touch {}/hiya \;

$ find . -type d -exec touch {}/hiya \;

find . -type d -execdir bash -c 'mv $1 `echo $1 | sed -E "s/rabbit_([a-z]+)_([abc])_/rabbit_\2_\1_/"`' -- {} \;

find . -type d -execdir mv {} {}

find . -type d -iname '*foo*' -depth -exec rename 's@Foo@Bar@gi' {} +

find . -type d -maxdepth 1

DIRS=$(find . -type d -mindepth $n)

find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +

find . -type d -mtime -0 -print0 | xargs -0 mv -t /path/to/target-dir

find . -type d -mtime 0 -exec sh -c 'cat {}/*.coords 2>/dev/null' \;

find . -type d -mtime 0 -exec sh -c 'ls {}/*.coords 2>/dev/null' \;

find . -type d -name '.git*' -prune -o -type f -print

find . -type d -name .svn -prune -o -mmin -5 -type f -print

find . -type d -name "Product[AC]" -prune -o -type d -exec chmod 755 {} \; -o -type f -exec chmod 644 {} \;

find . -type d -name ProductA -prune -o -type d -exec chmod 755 {} \;

find . -type d -name 'example*' | egrep -o "[0-9]+"

find . -type d -path "./dir1/*.1" -prune -o -print

find . -type d -print 2>/dev/null|awk '!/\.$/ {for (i=1;i<NF;i++){d=length($i);if ( d < 5  && i != 1 )d=5;printf("%"d"s","|")}print "---"$NF}'  FS='/'

find . -type d -print0|xargs -0 chmod ug+x

find . -type d -printf 'Folder name: %f\nParen path: %h\n'

find . -type d|awk 'NR>1{a[c++]=$0; t=t $0 SUBSEP} END{for (i in a) {if (index(t, a[i] "/") > 0) delete a[i]} for (i in a) print a[i]}'

for i in $(find . -type d); do count=$(find $i -mindepth 1 -maxdepth 1 -type d | wc -l); [ $count -eq 2 ] && [ -d $i/folder1 ] && [ -d $i/folder2 ] && echo $i ; done

for i in $(find . -type d); do count=$(find $i -mindepth 1 -maxdepth 1 | wc -l); [ $count -eq 2 ] && [ -d $i/folder1 ] && [ -d $i/folder2 ] && echo $i ; done

find . -type d | grep -v '/\.'

find . -type d | while read d; do convert "${d}"/*.jpg ./"${d##*/}.pdf"; done

find . -type d | sed -e 's/\.\///g' -e 's/\./avoid/g' | grep -v avoid | awk '{print $1"\t"$1}' | xargs chgrp

find . -type d | sed -e 's/\.\///g' | awk '{print $1, $1}' | xargs chgrp

find . -type d | sort | awk '$0 !~ last "/" {print last} {last=$0} END {print last}'

find . -type d | xargs -I {} chmod -R 770 "{}"

$ find . -type d | xargs java XMLBeautifier

find . -type f

find . -type f

find . -type f

find . -type f '!' '(' -execdir bash ~/gitstatus.sh ';' -or -execdir bash ~/gitstatus.sh ';' ')'

find . -type f '!' '(' -path "./.[a-z]*" ')'

find . -type f ! -iname '*.pdf' -delete

find . -type f \! -name '*.*' -exec bash -c 'mv "$0" "$0.txt"' {} \;

find . -type f ! -name '*.gz' -exec gzip "{}" \;

find . -type f  '!' -name '*.o' >> MyFile.lst

find . -type f ! -name "*dir1/file.log" -exec tail {} \;

$ find . -type f \! -path \*/\.svn/\* -exec dos2unix {} \;

find . -type f ! -path "*/Documents/*" -print 0 | ...

$ find . -type f ! -path '*/target/*/*.zip' -a -path '*/target/*.zip'

find . -type f ! -path "./.git/*" -exec sh -c "echo hello world >> {}" \;

find . -type f \! -regex '.*\.svn.*' | xargs no-mime-type.sh

find . -type f ! -type d

find . -type f \( ! -iname Makefile \) -exec ln -s \{\} newdir/\{\} \;

find . -type f \( -iname "*.html" ! -iname "template.html" ! -iname "list.html" \) -exec rm -rf {} \;

for i in `find . -type f \( -name "*.c" -o -name "*.h" \)`; do    sed -i 's/\r//' $i ; done

find . -type f \( -name \*.cpp -o -name \*.h \) ! -name pugixml.cpp -exec cat {} + | wc -l

find . -type f \( -name \*.cpp -o -name \*.h \) ! -name pugixml.cpp -exec wc -l {} +

find . -type f \( -name "*.cpp" -o -name "*.h" \) -exec sed -i.bak '/FIXME/s/date/data/g' '{}' \;

find . -type f \( -name '*.txt' -o -name '*.md' \) -exec sed -i 's/lion/hawk/g' {} \;

find . -type f \( -name "*~" -prune -o -print \)

find . -type f -a -name \*.bak | xargs rm

find . -type f -and ! -type d

find . -type f -and \( -name "*.c" -o -name "*.h" -o  -name "*.cc" \)

find . -type f -and \( -name "*~" -prune -or -print \)

find . -type f -daystart -mtime -2 -exec cp -t /wherever '{}' +

find . -type f -daystart -mtime -2 -exec cp '{}' /wherever ';'

find . -type f -empty -exec sh -c "echo NON > {}" \;

find . -type f -exec ./subst.sh {} \;

find . -type f -exec /path/to/fixNames.sh "{}" \;

find . -type f -exec bash -c 'echo "append this" >> "{}"' \;

find . -type f -exec bash -c 'ed -s "$2" <<< "$1"' _ $'g/a/s//b/g\nw' {} \;

find . -type f -exec bash -c "ex -s -- \"\$0\" <<< $'%s/[[:upper:]]\+/\L&/g\nwq'" {} \;

find . -type f -exec bash -c "file -bi {} | grep -q text" \; -exec grep TEXTSEARCH {} ";" 

find . -type f -exec bash -c 'mv "$0" "$0.txt"' {} \;

find . -type f -exec bash -c 'printf "%s\n" "%s/[[:upper:]]\+/\L&/g" "wq" | ex -- -s "$0"' {} \;

find . -type f -exec cat {} + | wc -l

$ find . -type f -exec cat {} \; > out.txt

find . -type f -exec cat {} \;

find . -type f -exec ccrypt -e -E cryptograph {} ';'

find . -type f -exec chmod g-s {} \;

find . -type f -exec command {} \;

find . -type f -exec cp '{}' ~/Backup/ \;

find . -type f -exec cvs add {} \;

find . -type f -exec dos2unix {} \;

find . -type f -exec echo "Hello, '{}'" \;

$> find . -type f -exec echo "{} $comment" \; | awk '{printf "%30s %s\n", $1, $2}'

find . -type f -exec echo "{}" \;

$ find . -type f -exec egrep -l "^M$" {} \;

 find . -type f -exec fgrep -l 'searchword' '{}' \;

find . -type f -exec grep -H "bin doesn't exist for HY11" "{}" "+"

     find . -type f -exec grep -e "^#\!\/bin\/.*sh$" {} +

 find . -type f -exec grep -i '\bweblogic_' {} +

find . -type f -exec grep -q '\\/for\\/endetta' {} \; -delete 

find . -type f -exec grep 'pattern' {} \;

find . -type f -exec is_html.sh {} \; -print

find . -type f -exec java StripEnronHeaders {} \;

find . -type f -exec lpr {} \;

find . -type f -exec ls -al {} \; | sort -k 5 -n | sed 's/ \+/\t/g' | cut -f 9

find . -type f -exec ls -l {} \; 2> /dev/null | sort -t' ' -k +6,6 -k +7,7

find  . -type f  -exec ls -ltr --time-style=+"%Y%m%d%H" {} \; | awk '{if($6>2013111822 && $6<2013111907) print $0}'

find . -type f -exec mapname {} +

find . -type f -exec md5 {} \;

find . -type f -exec md5sum {} \;

find . -type f -exec mv '{}' '{}'.jpg \;

find . -type f -exec mv {} {}.xml ';'

find . -type f -exec perl -p -i -e 's/Masi/Bond/g' {} \;

find . -type f -exec scp {} hostname:/tmp/{} \;

find . -type f -exec sed -e 's/Test_Dbv3/TestDbv3/g' -i.bak '{}' +

find . -type f -exec sed -i '' -e s/Red/$color1/g -e s/Blue/$color2/g {} \;

find . -type f -exec sed -i '/(.*)[ ]*$/{N; s/)[ ]*\n[ ]*{/&\npr_debug();/g}' {} \;

find . -type f -exec sed -i'' '2i/* Copyright */' {} \;

find . -type f -exec sed -i 's/.*/\L&/' {} +

find . -type f -exec sed -i 's/DEFAULT_DEV_PATH/DEV_PATH/g' {} \;

find . -type f -exec sed -i 's/\r//' {} \;

find . -type f -exec sed -i 's/abc/abcd/g' {} \;

find . -type f -exec sed -i 's|Hello World|Hai Universe|g' {} \;

find . -type f -exec sed -i "s|text|text plus {}|g" {} \;

find . -type f -exec sed -i.bak "s/foo/bar/g" {} \;

find . -type f -exec sed '1s/^\xEF\xBB\xBF//' -i.bak {} \; -exec rm {}.bak \;

find . -type f -exec sed 's/Hello/Goodbye/g' {} ';'

find . -type f -exec sed "s@'var gaJsHost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : "http://www.");'@'google analytics'@" {} > {}.tmp \; -exec mv {}.tmp {} \;

find . -type f -exec sh -c '$f={}; f=${f/.\//}; sed -i "s|text|text plus ${f}|g" {}' \;

find . -type f -exec sh -c 'echo "abc" >> ${1}' _ "{}" \;

find . -type f -exec sh -c 'for f; do echo "abc" >> $f; done' _ "{}" +

find . -type f -exec sh -c 'head {} | grep -q Copyright' \; -exec sed -ne '10,$ta;/Copyright/d;:a;p' {} \;

find . -type f -exec sh -c 'if [ cat ${1} = "abc" ]; then  echo ${1}; fi' _ {} \;

$ find . -type f -exec sh -c 'printf "%s %s \n" "$(ls -l $1)" "$(md5sum $1)"' '' '{}' '{}' \;

find . -type f -exec sh -c 'printf "%s\n" "g/a/s//b/g" w | ed -s "$1"' _ {} \;

find . -type f -exec sh -c 'test $(file --brief --mime-type "$0") == "text/html"' {} \; -print

find . -type f -exec sh -c 'tr -d "\r" < "{}" > "{}".new && mv "{}".new "{}"' -- {} \;

find . -type f -exec sha1sum '{}' ';' | grep 7ceeeeaba7d7e22301dfc5d6707f0c7f3eeb55a8

find . -type f -exec wc -w {} \; | awk '{numfiles=numfiles+1;total += $1} END{print total/numfiles}'

find . -type f -executable

find . -type f -executable -print

find . -type f -iname *-[0-9][0-9][0-9][0-9][0-9]-* ! -iname *.gz ! -iname *_processed -exec mv {} "{}_parsed" \;

find . -type f -iname '*-*' -exec rename -v 's/-.*(\.[^.]+)$/$1/' {} \;

find . -type f -iname "20*" | awk -vFROM=20140110 '{ if (0+substr($1,3) >= FROM) print $1;}'

find . -type f -maxdepth 1 -name '.*' -exec sed -i.bakkk -e "s#/sa/#/he/#g" {} +

find . -type f -maxdepth 1 -name '.*' -print0 | xargs -0 sed -i.bakkk -e "s#/sa/#/he/#g"

find . -type f -mmin -9 -exec cp {} ../bak \;

find . -type f -mmin -9 | xargs zip ../bak/backup.zip

find . -type f -mtime +5 -print | xargs rm

find . -type f  -mtime +7 | tee compressedP.list | parallel compress

foo=$(find . -type f -mtime -100 -daystart -printf '"%f"\n')

find . -type f -mtime -2 -exec echo {} +

find . -type f -mtime -30 -exec s3cmd put {} s3://path \;

find . -type f -name "* *" -exec bash -c 'f="$1"; s="${f/_ / }"; mv -- "$f" "${s/ *./.}"' _ '{}' \;

find . -type f -name \* | grep tgt/etc/*

find . -type f -name \* | grep tgt/etc/file1 tgt/etc/file2 tgt/etc/file3

find . -type f -name '*.*' | sed 's/.*\././' | sort -u

find . -type f -name '*.a' -print0 | xargs -0 -IZZ mv ZZ ZZ.b

find . -type f -name '*.bak' -delete

find . -type f -name "*.bak" -exec rename -f 's/\.bak$//' {} \;

find . -type f -name "*.bak" -exec rename 's/\.bak$//' {} \;

find . -type f -name '*.c' -exec grep -q '^a ' {} \; -print

find . -type f -name "*.c" -exec sed -i.bak 's/\bint\b/xint_t/g' {} \;

find . -type f -name "*.cpp" -exec sh -c "echo {} && cpp -M {} | grep -c stdafx.h" \;

find . -type f -name '*.cpp' -exec sh -c 'g++ {} -o $(basename {} .cpp)' \;

find . -type f -name '*.cpp' -exec sh -c 'g++ {} -o $(dirname {})/$(basename {} .cpp)' \;

find . -type f -name '*.csv' -exec sed -i '1icolumn1,column2,column3' {} \;

find . -type f -name '*.csv' -print0 | xargs -0 sed -i '1icolumn1,column2,column3'

find . -type f -name '*.dat' | xargs ls -l

find . -type f -name '*.flac' | parallel ffmpeg -i {} -acodec libmp3lame -ab 320k {.}.mp3 '&&' rm {}

find . -type f -name '*.gif' -print0 | xargs -0 --replace=% sh -c 'echo -e "Archive-Asset-Name: %\nArchive-Asset-SHA-512-Digest: `openssl dgst -sha512 -binary % | openssl enc -base64 | tr "+" "-" | tr "/" "_" | tr -d "=" | tr -d "\n"`\n"'

find . -type f -name '*.gif or .jpeg' -o -exec sed -i 's/^M//' {} \;

find . -type f -name '*.gz' | xargs zcat | wc -l

find . -type f -name "*.html" -exec js-beautify -r {} \;

find . -type f  -name '*.html' -exec sed 's/f\.\([0-9a-zA-Z]*\)\.focus()/highlight("\1")/g' {} \;

for file in `find . -type f -name \*.html`; do echo "new content" > $file; done

find . -type f -name '*.java' -exec sed -i 's/^package zn\./package /1' {} \;

find . -type f -name "*.java" | xargs javadoc -d outputdir 

find . -type f -name \*.jpg | while read i ; do echo "Procesing $i..." ; done

for i in `find . -type f -name "*.js.compiled"`; do mv $i ${i%.*} ; done

find . -type f -name '*.mp3' -print0 | xargs -0 basename

find . -type f -name \*.mp4 -exec myscript {} \;

$ find . -type f -name "*.my_format" -exec sh -c './my_script {} &' \;

find . -type f -name '*.o' -print0 | xargs -0 rm

find . -type f -name '*.php' -exec awk '/<\?/,/\?>/ && /eval/' {} \;

find . -type f -name '*.php' -exec recode windows1252..utf8 \{} \;

find . -type f -name '*.php' -not \( -path './etc/*' -o -path './cache/*' -o -path './archive/*'  \) -exec sed -i 's|oldurl.com|newurl.org|g' {} \;

find . -type f -name '*.php' -print -exec iconv -f euc-kr -t utf-8 {} -o {}.utf8 \;

find . -type f -name "*.php" | xargs sed -e 's/\$PHP_SELF/\$_SERVER\['PHP_SELF'\]/g'  -i

find . -type f -name "*.png" -exec cp {} ~/path/to/your/destination/folder \;

find . -type f -name '*.png' -execdir convert "{}" *OPTIONS* mydefinedname.jpg \;

find . -type f -name "*.rm" -exec ffmpeg -i {} -sameq {}.mp3 \; -exec rm {} \;

find . -type f -name "*.so" -exec sh -c "echo {} && readelf -s {} | grep mysymbol" \;

find . -type f -name '*.txt' -exec cat '{}' + >all.txt

find . -type f -name '*.txt' -exec cat '{}' ';' >all.txt

find . -type f -name '*.txt' -exec sed --in-place 's/[[:space:]]\+$//' {} \+

find . -type f -name "*.txt" -exec sed "s/f/u/g" '{}' \;

find . -type f -name "*.txt" -exec sh -c "cat TextToAdd.txt {} > $$.tmp && mv $$.tmp {}" \;

find . -type f -name '*.txt' -print0 | xargs -0 ./myscript.py

find . -type f -name '*.txt' -print0 | xargs -0 cat >all.txt

find . -type f -name "*.txt"-exec bash -c 'echo "$1" | sed "s/f/u/g"' - {} \;

find . -type f -name '*.xml'

find . -type f -name "*.xml" -exec perl -MFile::Basename -0777pi.bak -e 's#(.*)\n#"<DOC>\n <DOCNO> ".basename($ARGV,".xml")." </DOCNO>\n <TEXT> ".$1." </TEXT>\n</DOC>\n"#es' {} \;

find . -type f -name "*.xml" -exec perl -MFile::Basename -0777pi.bak -e 's#.*#"<DOC>\n <DOCNO> ".basename($ARGV,".xml")." </DOCNO>\n <TEXT> ".$&." </TEXT>\n</DOC>\n"#es' {} \;

find . -type f -name "*.xml*" -exec awk '{gsub("ID","\nID");printf"%s",$0}' {} +

find . -type f -name "*_peaks.bed" ! -path "./tmp/*" ! -path "./scripts/*"

$ find . -type f -name "*abc" -exec bash -c ' mv -v  {} `dirname {}`/.. '  \;

for file in $(find . -type f -name "*my_word*"); do echo "$file"; done

find . -type f -name "*my_word*" | xargs cat

find . -type f -name '*o?6*'

find . -type f -name "*php*" -exec grep -iHn "error_reporting" {} \; | cut -d: -f-2. 

find . -type f -name 'GLOB' | xargs UTILITY

find . -type f -name YourProgramName -execdir ./YourProgramName YourParameterFile \;

 find . -type f -name YourProgramName -execdir pwd \;

 find . -type f -name YourProgramName -execdir sh -c "command1; command2; command3" \;

EXISTINGFILES=`find . -type f -name 'dropbox-backup-*.tar.gz'`

find . -type f -name "file*" -exec bash -c 'echo "your line" >> $1' -- {} \;

find . -type f -name 'file*pattern' -print0 | xargs -0 sed -i 's/bad/good/g'

find . -type f -name filename -print0 | xargs -0 awk '...'

find . -type f -name "mubunching*" | awk -F'[.]' '$(NF-1)>=5'

find . -type f -name "prob[0-9]*_*" >> $tmpFile

find . -type f -name "prob[0-9]*_*" -exec echo {} >> ${tmpFile} \;

$ find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30

$ find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30

$ find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08

find . -type f -newermt 2013-08-02 ! -newermt 2013-08-02

find . -type f -newermt 2014-03-30 ! -newermt 2014-04-01 -exec bash -c 'f="$1"; n="bc.${f##*.}"; mv "$f" "$n"' - '{}' \; 

find . -type f -newermt 2014-04-30 ! -newermt 2014-05-01

find . -type f -not -exec grep -q Copyright {} \; -exec sed -i'' '2i/* Copyright */' {} \;

find . -type f -not -name output.txt -exec cat {} \; -exec echo "|" \; > output.txt

find . -type f -path ./source/script -prune -o -print;

find . -type f -perm +111 -print

find . -type f -print -exec iconv -f iso8859-2 -t utf-8 -o {}.converted {} \; -exec mv {}.converted {} \;

find . -type f -print | grep -f id.file | xargs cp -t target_dir

find . -type f -print | perl -l -ne ' $_{$_} = -M; END {  $,="\n";   print sort {$_{$b} <=> $_{$a}} keys %_   }' | head -n 500

find . -type f -print0 | parallel -0 -P 3 ./myscript {1}

find . -type f -print0 | while read -d $'\0' file; do cp "$file" "$file.bak"; done

find . -type f -print0 | wc -l --files0-from=-

find . -type f -print0 | xargs -0 -n 1 sed -i -e 's/from/to/g'

$ find . -type f -print0 | xargs -0 cat > out.txt

find . -type f -print0 | xargs -0 cat

find . -type f -print0 | xargs -0 command parameters

find . -type f -print0 | xargs -0 file

find . -type f -print0 | xargs -0 perl -p -i -e 's/Masi/Bond/g'

find . -type f -print0 | xargs -0  sed -i '' 's~^\([[:space:]]*\)"web"[[:space:]]*$~\1"pkg/web"~g'

find . -type f -print0 | xargs -0 sed -ie "s/RELEASE_AND_NIL(\(.*\))/[\1 release\]/g"

find . -type f -print0 | xargs -0 sed -i -e 's/^#!\/bin\/bash$/#!\/bin\/bash -x/'

find . -type f -print0 | xargs -0 sed -i -r 's/"XXX" \| \{"Foo", "Bar"\}/"YYY" \| \{"Foo"\}/g'

find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "

find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" "

GV=$(find . -type f -printf '%T@ %p\n' | sort -n | tail -1 | sed 's/.*PO\.\([0-9]*\).*/\1/')

$ find . -type f -printf "%f\n" | grep --color -R -f - .

find . -type f -printf "%h\n" | sort | uniq | xargs -i ssh hostname mkdir -p /tmp/{}

find . -type f -printf '%p %s\n' | awk '{ sum+=$2}; END { print sum}'

find . -type f -printf '%p %s\n' | perl -n -a -e '$sum+=$F[1]; print "$sum\n"' | tail -n 1

find . -type f -printf '%p %s\n' | perl -n -a -e '$sum+=$S[1]; print "$sum\n"'

find . -type f -printf "%s %p\n" | sort -nr | awk '{print $2}' | head -10

find . -type f -printf "%s\t%f\n"

find . -type f -printf '/%p\n'

find . -type f -regex "[^ ]*.cpp"

find . -type f -regex '@"LBL_[[:digit:]"]+'

find . -type f -size +0

find . -type f -size +10000000 -print|xargs ls -ld|more 

find . -type f -size 0 -exec rm -f '{}' +

find . -type f -size 63c -delete

find . -type f -wholename \*.mbox | sed 's/\(.*\)\.mbox/mv "\1.mbox" "\1"/' | sh

find . -type f ctime -$2 -name "mylog*.log" -exec tinyscript.sh {} +

for i in $(find . -type f); do dir="$(dirname ${i#./})"; mv "$i" "${i//DSC/$(basename $dir)}"; done

find . -type f | egrep -i "[-~&@#<>;:!^,_]" | tee temp.txt

find . -type f | grep -E -v ".git/|.gitmodules|^./lib" | xargs grep -E -l '$\r|$\t| $'

find . -type f | grep -i -f ./remove_list | while read line; do rm "$line"; done

find . -type f | grep 000000 | tr \\n \\0 | xargs -0i+ cp ~/offblack.png "+"

find . -type f | grep somestring

find . -type f | parallel --tag 'eml-to-text {} | grep -F -w -o -n -b -f /tmp/list_of_interesting_words' | sort -k3 -t: | tee index.by.word | awk 'FS=":" {print $3}' | uniq -c

find . -type f | parallel -k -j150% -n 1000 -m grep -H -n STRING {}

find . -type f | while read file; do echo "your line" >> $file ; done

 ~/version2$ find . -type f | xargs -I {} chmod --reference {} ../version1/{}

find . -type f | xargs -d "\n" perl -pi -e 's/search/replace/g'

find . -type f | xargs -i echo {}|sed -r 's#(.\/)(.*)#cat &\|sed  "s:^:file \2 :g"#ge'

find . -type f | xargs -n 1 -d "\n" md5sum

 find . -type f |xargs awk '$0=FILENAME$0' > out

$ find . -type f | xargs cat > out.txt

find . -type f | xargs egrep -H -m 1 -n "\<$month/$day/$year\>" | awk -F : '$2 <= N { print $1; }'

find . -type f|xargs java StripEnronHeaders

find . -type f | xargs md5sum > md5sums

find . -type f | xargs perl -pi.bak -e 's,[^[:ascii:]],,g'

find . -type f|xargs perl -pi -e 's/one\/two\/three/shopping\/shop\/ipad/g'

find . -type f|xargs perl -pi -e 's/windows/android/g'

find . -type f | xargs perl -pi -e 's{<a href='\''[.][.]/Example/case(\d\d)[.]html'\''><img src='\''[^'\'']*'\''}{<a href='\''../Example/case$1.html'\''><img src='\''<?php imgname('\''case$1'\''); ?>'\''}'

find . -type f| xargs sed -ne 's/<f:facet[^>]*>//;s/<\/f:facet>//p'

find . -type l -exec readlink -f '{}' \; | grep -v "^`readlink -f ${PWD}`"

find . -type l -exec readlink -f {} \; | sort | uniq -c | sort -n

find . -type l -exec sh -c 'for x; do [ -e "$x" ] || rm "$x"; done' _ {} +

find . -type l -print0 | xargs -n1 -0 readlink -f | sort | uniq -c | sort -n

files=$(find . -type l -printf "%l\n")

$ find . -user BobTheCat -type f -printf '%s\n' | awk '{bytes+=$0}END{print bytes}'

find . | cut -c 3-

find . | fgrep -f my_file > outputfile

find . 2>&1 | grep -v 'permission denied' > files_and_folders

find . | grep ".xml$" | parallel bzip2

find . | grep "file_for_print" | xargs echo

find . | grep "your_pattern" | xargs mv destination_directory

find . | perl -ne 's!([^/]+)$!lc $1!e; print if 1 == $seen{$_}++'

find . | sed 's/.*/& &/'

find . something | xargs -r0 printf "%s\n"

find . type f -name '*.m' -exec grep -E '@"LBL_[[:digit:]"]+' /dev/null {} +

find . type f -print | fgrep -f wanted_file_list.txt

find . | wc -l

find . | xargs grep -L "someword" | uniq

find <somebasedirectory> -regex ".*stringinfilenamesIwant.*" ! -regex ".*stringinfilesnamesIdont.*" -exec dosomecommand {} + 

find .-type f ! -name '*.c' -exec rm {} +

find ... \( ... -o ..... \) -exec ...

find ... -exec ./myScript {} +

find ... -exec bash -c 'echo 0x0 > {}' ...

find ... -exec cmd {} \;

find ... -exec echo 0x0 > {} ...

find ... -exec '{}' -v \;

find ... -print0 | xargs -0 ...

find ... -print0 | xargs -0 rm

find ... -print0 | xargs -0 tar -A | gzip - > "....tar.gz"

find ... \; 2> >(grep -v "tar: Removing leading" >&2)

find ... | awk -F/ '{print $NF " - " $FILENAME}' | column -t

find ... | awk -F_ '{print $(NF-4) "\t" $0}' | sort -k1 | cut -f2-

find ... 2>/dev/null | grep ... 2>/dev/null | xargs ... 2>/dev/null

( find ... | grep ... | xargs ... ) 2>/dev/null

find ... | sort -rn | cut -d\  -f2 | xargs df -h

abc_length=$(find ... | wc -l)

find ... | xargs perl -l -pi -e 's/\t/    /g; s/\s+$//'

find ...|xargs tar -czf /path/to/your/target/a.gz 

find .... | xargs rm

find ..... -print0 | xargs rm

find ..... |sed 's#.*/##'

find ..... |sed 's#.*/##'

find ../../$name-module -name 'Name*' -type f -exec bash -c "mv \"\$1\" \"\${1/Name/$Name}\"" -- {} \;

find ../dir2/ -maxdepth1 -name "Quack.sh" -execdir '{}' \;

find ../path -exec grep foo '{}' '+'

find ./ ! -type d -writable

find ./ \( -name "*.xyz" -o -name "*.abc" \) -exec cp {} /path/i/want/to/copy/to \;

find ./ -iname "*.bz2" -exec bzip2 -d {} \;

find ./ -maxdepth 1 ! -path "*txt"

find ./ -maxdepth 1 -name "user*" -exec script_that_does_text_replace.sh {\} \;

find ./ -mtime +30 -exec mv dir/newdir {} \;

find ./ -name "${oldName}*" -exec rename $oldName $adminDB {} \;

find ./ -name "*.cs" -execdir sed '/#region License/,/#endregion/d' '{}' \;

find ./ -name "*.docx" -print | while read i; do mv "$i" `echo "$i" | sed -e 's/\.docx/_stringhere\.docx/'`; done

bash$ find ./ -name *.ogv -exec echo myfile {} \; | bash

find ./ -name "*.raw" -print | xargs -n1 -P4 sed -e '$s/$/\n/' >>All

find ./ -name "*.rns" -printf "$FECHA %p\n" >> myLog.log

$ find ./ -name "*JIM*" -exec cp --target-directory=$TARGET_DIR {} +

find ./ -name "*html" -exec sh -c 'cp {} _$(basename {}).ebr' \;

$ find ./ -name '20110101*' -print0 -type f | xargs -0 grep -l "search_pattern"

find ./ -name myFile.txt -print0|rsync -0adv --files-from=- ./ ../newTree/

find ./ -name results.txt -exec sed '12!d' {} ';'

find ./ -name "results.txt" | sort -V

find ./ -printf '%f\n'

find ./ -type d -print | awk -F "/" '{for (i=1; i<=NF-2; i++){printf "| "} print "|____"$NF}'

find ./ -type d -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'

find ./ -type f

find ./ -type f -exec sed -e "/my_folder./s/my_folder.//" {} \;

find ./ -type f -exec sed -i -e 's/apple/orange/g' {} \;

find ./ -type f -exec sed -ri 's/font-family:["A-Za-z, ]+;/font-family: Verdana;/g' {} \;

find ./ -type f -exec sh -c "echo {} ; sed -nre 's/^.*->(from|join)\('\''([^'\'' ]*)['\'' ].*$/\2/gp' \"{}\" ;" \;

find ./ -type f -name '*[a-z]*.csv' | xargs rm

directory=`find ./ -type f -name "*"$thismodelnormal"*" -exec ls -la {} \;`

find ./ -type f -name '*.html' | xargs sed -i.bak ....

find ./ -type f -name "*.php" -exec sed -i "s/check_perm('venA')/check_perm('venA:venB')/g" {} \;

find ./ -type f -name httpd -exec {} --version \; -print

find ./ -type f -name httpd | xargs -n1 -I{} bash -c "{} --version"

find ./ -type f -print0 | xargs -0 -I{} -n1 -P4 grep -IP $REX '{}' >> result

find ./ -type f -printf '%f\n' | sed 's/\..*//' | sort | uniq | ( while read filename ; do find . -type f -iname "$filename"'*' -exec mv {} /dest/dir \; ; sleep 240; done )

find ./ -type f -regex '.*\.php' -exec sed -i -e '1{/^[[:blank:]]*$/d;}' '{}' \;

find ./ -type f -writable

find ./ -type f -writable | sort

find ./ -type f | parallel --gnu bash -c 'convert "$1" "${1/%.pdf}.jpg"' bash {}

find ./ -type f | parallel --gnu convert {} {.}.jpg

find ./ -type f | xargs gsed -i -r 's/[$][A-Za-z_\x22\x27]/testing'

find ./[ac]*/ -name "blarg"

find ./*.pir -type f -exec sed -i '/>/d' {} \;

find ./archive -mindepth 1 -mtime +180 -delete -type f

find ./base -type d

find ./dir -type f -iname "*.t[argz]*[bz2]" -print0 | xargs --null mv --target-directory=dir

find ./directory -regex '.*/filename[0-9][0-9]*\.temp'

find ./downloads -maxdepth 2 -type f -mtime +32 -delete

for i in `find ./js/common -type f -name "*.js"`; do grep "extend: .*," $i | sed "s/.*'\(.*\)'.*/and include -namespace\1/" | tr '\n' ' ' ; done

find ./kernel -name "*.ko" | while read file; do cp $file temp/ ; done

find ./myFolder -type f -exec sed -i 's/Application/whatever/g' '{}' \;

find ./myFolder/ -type f -exec sed -i "s?<value>$VAR1</value>?<value>$VAR2</value>?g" '{}' \;

find ./my_dir -mtime +10 -type f -delete

find ./someDir -name "*.log" -o -name "*.TXT" | tar -cf my_archive -T -

find ./src -name "*.c" -and -not -path './src/test/*'

find ./src -name "*.c" | grep -v '/src/test/'

find ./src -type f | ruby1.9 -ne '#some statement'

find / -exec echo '{}' \;

find / -exec stat -c '%n,%U,%G' {} \; >> ./ogindex.txt

find /<path>/hp -iname '*.ppd' -exec grep grep "\*ModelName\:" '{}' \;

find /<path>/hp -iname '*.ppd' -print0 | xargs -0 cat | grep "\*ModelName\:"

find /<path>/hp -iname '*.ppd' -print0 | xargs -0 grep -h "\*ModelName\:"

find / -iname '*desktop' -exec fgrep -l $0 \{\} \; 2>/dev/null

find / -maxdepth 1 -xdev -type f -exec grep -i "stringtofind" -l {} \; -exec sed -i '/./d' {} \;

find / -maxdepth 3 -type f -print -exec sed -i -e 's/teststring123/itworked/g' {} \;

find / -maxdepth 3 -type f -size +50M

find / -mindepth 1 -maxdepth 1 -type f -exec pdflatex {} \;

find / -mmin 1|wc -l

find / -name file.xml -exec cat '{}' ';'

find /   -name 'myfile' -type f -exec dirname {} \;

$ find / -name php.ini

find / -name 'test2abc' > res 2>&1

find / -name 'test2abc' -> res

REP2=$(find / -name "tokyw")

find / -type d -name 'name-of-the-directory' 

find / -type d -path "*/ruby/lib"

out=$(find / -type d -path "*/ruby/lib")

find / -type f > /tmp/allFiles.txt

find / -type f -mmin 60

find / -type f -name '*.cpp' -exec curl -T {} ftp://somesite/somedir/ --user myname:mypassword \;

find / -type f -name \*.txt

find / -type f -name 19191919.log  -exec /usr/bin/cat {} \;

INITDIR=`find / -type f -name acpid 2> /dev/null | grep /etc/`

find / -type f -name filename.ext -exec grep -l 'lookingfor' {} +

find / -type f -name 'foo*' | wc -l

find / -type f -print | xargs stat -f "%m %N" | sort -n | cut -f2-

find / -type f -regex "\(.*A.*a.*.*\)\|\(.*a.*A.*.*\)" -exec tail -n 3 '{}' \;

find / -type f -size +50M

find / -type f|awk -F'/' '{print $NF}'| awk 'length($0) < 25'

find / -type f | grep 'secret/*' | awk /[a-zA-Z.-]{54}/

 find / -type f | xargs -n1 -I@ basename '@' | sort -u > /tmp/foundFiles.txt

find / -type l -exec ls -l 2>/dev/null '{}' \; |  perl -ne'BEGIN { $str = shift(@ARGV); }     print if /\Q$str\E/; ' $name_old_dir >> FILE_WITH_NEW_DATA

find / -type l -printf "%p -> %l\n"|grep "-> /home/deploy/live"

find "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk/System/Library/PrivateFrameworks" ! -name '*.*' -exec cp -t /your/destination/dir/ {} +

find /DIR -name "*.info"|xargs sed -i '$a\version = $version'

find /Directory -name \*.jpg -exec mv {} /Directory \;

find /Users -depth 2 \! -perm 0700 \! -name Public \! -name Sites -type d -exec echo chmod 700 {} +

find /Users -maxdepth 2 \! -perm 0700 \! -name Public \! -name Sites -type d -exec chmod 700 {} +

find /Users -maxdepth 2 \! -perm 0700 \! -name Public \! -name Sites -type d -exec echo chmod 700 {} +

find /Users -name prefs.js -exec sed -i.bak -e "s/$oldPref/$newPref/" {} \;

find /Users -type d -iname '*.bak' -print0 | xargs -0 rm -rf

find /Users -type d -iname '*.bak' -print0 | xargs -0 rmdir

find /Users/KanZ/Desktop/Project/Test/ -type f -name "M*.jpg" -exec convert {} -flip {} \;

find /Users/me/Workspace/ -type f -name '*.png' \! -name '*@2x*' -exec echo rm '{}' +

find /Users/ptomblin/Shared -name "*.css" -o -name "*.html" -exec sed -i '' 's@".{0,2}/?images@"http://mycdn.com/images@g' {}

find "/Volumes/Media/" -type f -size +2G -mtime +10s -exec rsync -aq --update {} /Volumes/LocalMedia/ \;

find /Volumes/NEXSAN/Engine\ Folders/Input/DTO_Proxy/* -type f -mtime +7 -exec mv -v {} /Volumes/NEXSAN/.2BeDeleted4realz/ \;

find /YOUR/SEARCH/DIR -type f -mmin -300 2> /dev/null

find /a/b/ -maxdepth 1 -type f -mtime +90

find /a/b/c/*/deploy -name *.pdf | xargs du -ch

find /apps -exec grep "performance" {} /dev/null \; | grep -v "warn"

find /apps/dir -printf "%Ab %Ad %AY %f\n"

find /apps/dir -type f -printf "%f\n"

find /base/path -type d -perm +o+r

find /bin -type f -perm +111 -print0 | xargs -0 file

find /c/some/dir/ \( -iname "*html" -o -iname "*tpl" \) -exec grep -inH 'search_string' {} \;

find /cygdrive/c/inetpub/wwwroot/ -iname 'web.config' -printf '%p\0' | xargs -0 grep -Poi '(User ID|Password)=[^;"]*'

$ find /data -user test | xargs rm -rf

find /data/ -name 'command-*-setup' | sort -t - -k 2,2

find /data/shares/builds/place1/ -mindepth 1 -maxdepth 1 -type d ! -name '.*'

find /data2/input -type f -mmin +360 -delete -print

find /desktop/themes -name footer.php -print0 | xargs -0 gvim -p

find /destination/webapp -type f -name 'abc-1.0.0-*.jar' -exec cp /source/tmp/abc-1.0.0-SNAPSHOT.jar {} \

 find /dev -maxdepth 1 -name 'abc-*'

 find /dev -name '.udev' -prune -o -name 'abc-*' -print

find /dev/disk[1-9] -exec diskutil eject {} \;

 VAR=`find /dir -name '*.*' -type f -print -exec rm {} \;`

find /dir -name "*.gz" ! -name first_skip ! -name second_skip .... etc

find /dir -name "*.gz" $(printf "! -name %s " $(cat skip_files))

find /dir -name "*.gz" | grep -vFf skip_files

find /dir -name "filename*" -type f -exec rm {} \;

find /dir -print > output.txt

find /dir -type f -ctime +365 | head -n 100 | xargs rm

find /dir -type f -mtime -1 -exec mv {} /pdf \;

find /dir | grep -f <(sed 's@^@/@; s/$/$/; s/\([\.[\*]\|\]\)/\\\1/g' filelist.txt)

find /dir/ -perm /g=w 

find /dir/ -perm /g=w -exec ls -lLd {} +

find /dir1 -type f -printf "%f\n"

find /dir1 /dir2 -type f -iname "*$1*" -iname "*$2*" -iname "*$3*"

find /dir1 /dir2 -type f -iname "*$1*$2*$3*" -o -iname "*$1*$3*$2*" -o -iname "*$2*$1*$3*" -o -iname "*$2*$3*$1*" -o -iname "*$3*$1*$2*" -o -iname "*$3*$2*$1*"

find /directory -maxdepth 1 -type f -exec fgrep -l 'ez123' \{\} \; 

find /directory -name "*pattern*" -exec sh -c 'cut -f8 {} > {}.txt' \;

find /directory -type d -exec youscript.sh {} \;

$ find /directory -xdev --exec ls -dils --time-style=long-iso {} \;

$ find /directory -xdev -print0 | xargs -0 ls -dils --time-style=long-iso

find /directory | awk -F '/' '{names[tolower($NF)]++} END { for (name in names) { if (names[name]>1) { print name }}}'

find /directory | awk '{names[gensub(".*/","","g")]++} END { for (name in names) { if (names[name] > 1) { print name } } }' 

find /directory_path -mtime -1 -ls

find /disk0116/ui -name '.user_repo.log'|xargs cat | column -t

find /earth

find /earth | sed -e 's/\// /' | awk '{ print "planet = " $1 "\ncategory = " $2 "\nsubcat = " $3 "\nname = " $4}'

$ find /etc -name php.ini

find /etc -type f -exec sh -c "/bin/ls -hastl '{}' | tr '\n' ' '" \; -exec /usr/bin/md5sum '{}' \;

find /etc -type f -exec sh -c "/bin/ls -hastl '{}' | tr '\n' ' '" \; -exec sh -c "/usr/bin/md5sum '{}'| tr -d '\n' " \;

find /etc/ -name my.cnf -mtime 0 -exec sh -c 'cat {} | mail -E -s "file changed" shantanu@company.com' \;

find /etc/  -type f -print0| xargs  -0  grep -o  c | wc -l

$ find /etc/bash_completion*

find /etc/test/ -type f -print0 | xargs -0 cat >> /root/.ssh/authorized_keys

find /example/dir -type f \( -perm 777 -or -perm 775 \)

find /example/dir -type f -perm +775

find /example/dir -type f -perm 777

find /example/dir -type f -perm 777 | grep -Ev 'file[1234]'

find /example/dir -type f -perm 777 | grep -Ev 'file[1234]' | xargs stat --format %a

find /filestodelete -mtime +93 -exec rm -rfv {} + > /something/deletions.log

find /filestodelete -mtime +93 -exec sh -c 'rm -rfv {}' > "/something/deletions.log" \;

find /folder -name "*.txt"

find /folder/to/search -name Function.php -type f -exec sed -i 's/\$arguments\[\$i] = \$arguments = func_get_args();\$arguments\[\$i];/\$arguments\[\$i] = \&\$arguments\[\$i];/' {} \;

find /folderpath -type l -delete

find /foo -exec sh -c 'grep "$1" > "$1.out"' -- {} \;

find /foo -iname '*.txt' -exec cp \{\} /dest/ \;

find /foo -maxdepth 1 -type f ! -name 'runscript*' -exec ln -s {} /bar/tmp/ \;

find /foo -printf '%P\0'

find /foo -printf '%f\0'

find /foo/bar -printf "%p %A@" 

find /git -name '*.git' -execdir sh -c 'cd {} && git gc' \;

find /hello -type f|xargs sed -i 's#\(account[.]\)oldomain\([.]com\)#\1newdomain\2#g' 

find /home -iname ".htaccess" -exec sed -i "s/FollowSymLinks/SymLinksIfOwnerMatch/g" {} \;

find /home -type f -exec sed -i $'s/if(@\$_POST\[\'test\']){eval(base64_decode(\$_POST\[\'test\'])); exit();}php if(@\$_POST\[\'test\']){eval(base64_decode(\$_POST\[\'test\'])); exit();}//g' {} \;

find /home -type f -name "*.html" -exec sed -i '/<TXT_accesp>/,/<\/TXT_accesp>/ s/<p>\(.*\)<\/p>$/\1/g' {} \;

find /home -type f -path '*public_html/version.txt' -exec echo {} " " `cat {}` \;

find /home -type f -path '*public_html/version.txt' -exec grep -H "." {} \;

find /home$i -iname .backuprc -exec cat {} \; | xargs -d '\n' cp -t /var/backup/temp/$user

find /home/ -maxdepth 1 -print | sudo cpio -pamVd /newhome

find /home/ -type d -name uploads -exec sh -c 'zip -r /backup/uploads/`echo "$0" | cut -d/ -f 2`-uploads.zip `dirname $0`/`basename $0`' {} \;

find /home/ -type d -name uploads -exec sh -c 'zip -r /backup/uploads/`echo $0 | tr "/" "-"`.zip `dirname $0`/`basename $0`' {} \; 

find /home/ -type f -name "*.html" | awk -F/ '{a[$NF]=$0}END{for(i in a)print a[i]}' | zip -j all-html-files -@

find /home/ -type f -name '*php*' -print0 | xargs -0 perl -e "s/<script.*PaBUTyjaZYg.*script>//g;"

find /home/ -type f -regextype posix-extended -regex ".*(string1|string2|$(hostname)).*"

find /home/ -type f -regextype posix-extended -regex ".*(string1|string2|$HOSTNAME).*"

find /home/*/public_html/images -iname "*php" -exec echo {} \;

find /home/ABC/testDir -iname '*.java' -exec find . -iname {}

find /home/Desktop/ -size 0 -exec mv '{}' /home/Desktop/a \;

find /home/XXXXXX/public_html/images/products -iname "l_*.jpg" | tar vcf /home/XXXXXX/public_html/backups/monday_backup.tar --files-from=- 

find /home/admin/Backup -name \*.tar -printf '%f\n'

find /home/alex/papers/ -name *erebus* -print0 | xargs -0 evince

find /home/alex/papers/ -name *erebus* | xargs evince

find /home/caine/thecopy -user caine -size -10240c -name "a.*" | wc 

find /home/dem -size +1000M -exec ls -lh '{}' +

$ find /home/directory -mindepth 1 -maxdepth 1 -name 'subdirectory[57]' -or -exec cp -r {} /path/to/dir \;

find /home/disk1 -maxdepth 0 -name file1* -o -name file7*

find /home/disk2/ -type f -iname "*.jpg" -exec sh -c "/usr/bin/jpegtrans '{}' > '{}.temp'; mv -f '{}.temp' '{}'" \;

find /home/disk2/ -type f -iname "*.jpg" -exec sh -c "/usr/bin/jpegtrans {} > {}.temp; mv -f {}.temp {}" \;

find /home/downloaded/ -type f -name '*.gz' -exec cat {} \; > output

find /home/feeds/data -type f -not -path "*def/incoming*" -not -path "*456/incoming*"

find /home/foo/bar.com/ -mmin -12 | grep -v 'error_log\|baz'

find /home/ian/Desktop/TEST/ -type f -mmin -1 -execdir echo cp \{} \{}_backup \;

find /home/jason/code -iname "*.txt" > prog_dir.txt

$> find /home/jms | grep *.txt | wc -l
find /home/kparisi -printf "%M %p\n"

find /home/loni/config -type f -exec sed -i "s/${PATTERN}/${REPLACEMENT}/g" {} \;

find /home/mba/Desktop/ -type d -name "logs" | awk '{ print $1"/*" }'

find /home/mba/Desktop/ -type d -name "logs" | sed 's/$/\/\*/'

find /home/mba/Desktop/ -type d -name "logs" | sed 's/$/\/\*/' | xargs rm -rf

find /home/myusuf3/Downloads/ -name "*.nzb" -exec mv {} /home/myusuf3/.hellanzb/nzb/daemon.queue/ +

find /home/mywebsite -type f -name '*.php' -exec grep -l base64_decode {} +

find /home/mywebsite -type f -name '*.php' | xargs grep -l base64_decode

find /home/palchan/code \( -name "*pattern*" \) -prune -o -type f \( -name "*.[CcHh]" -o -name "*.cpp" -o -name "*.hpp" \) -print

find /home/rk -type f |xargs -n100

for i in {*.pdf,*.doc,*.xls}; do find /home/sample/ -name "$i"; done | awk -F/ '{print $(NF-1) "/" $NF}'

find /home/san -type f -name "*'*" -print0 | xargs -0 -L1 rename "'" ""

find /home/school/exam -print > files

$ find /home/shantanu -atime +2 -name 'my_stops*' -exec rm {} \;

find /home/spenx/src -name "a1a2*txt" | xargs -n 1 dirname | xargs -I list mv list /home/spenx/dst/

find /home/test -regextype posix-extended -regex '^.*test\.log\.[0-9]{4}-[0-9]{2}-[0-9]{2}\.zip' -mtime +3

find /home/user

find /home/user \( -type f -o -type d \)

find /home/user -type f -mmin -4860 -a -mmin +3420 -printf "%s\n" | awk  '{s+=$1}END{print "total size: "s" bytes"}'

$> find /home/user -type f -mmin -4860 -a -mmin +3420 | xargs du | awk  '{s+=$1}END{print "total size: "s}'

find /home/user -type f -printf "%f\n"

find /home/user -type f -printf "%f\n"

find /home/user/Maildir/.SPAM/cur -type f -exec rm '{}' +

find /home/user/Maildir/.SPAM/cur -type f | xargs rm

find /home/user/directory -type f -mmin -50 -name *.mpg \( ! -regex ".*/\..*" \) | ftp ...

find /home/user/find

find /home/usr/AAA -maxdepth 4 -mindepth 4 -type d -iname "VIP_Info*" -printf "%p\n"

find /home/virt -exec touch -t 200001010000 {} \;

find /home/whoever/ /mnt/hd -name "*.cpp" -exec grep "name" '{}' \; -print

find /home/you -iname "*.pdf" -atime +60 -type f

find /home/you -iname '*.pdf' -printf '%A@ %p\n' | sort -n | head -n 100

find /home/yourdir -name "*.txt" -exec cat {} \;

for i in $(find /home/yourdir -name "*.txt"); do cat $i; done

find /home/zjm1126/ -name '*.html' -print0 | xargs -0 sed -i 's/tttt/new-word/g'

find /location/ -name \*.tar -mtime -7 -print0 | xargs -0 ls -rt | head -1

find /mail -type f | cpio -pvdmB /home/username

find /mnt/ -maxdepth 2 -name '1_drive_check.sh' -executable -exec {} \;

find /mnt/STStorage/ -type d -mtime +14 -exec mv -v {} /mnt/LTStorage/ \;

find /mnt/STStorage/ -type d -mtime +14 -exec mv {} /mnt/LTStorage/ \;

find /mnt/STStorage/ -type d -mtime +14 -exec mv {} /mnt/LTStorage/ \; > /mnt/STStorage/log.file

 find /mnt/STStorage/ -type d -mtime +14 | xargs -I '{}' mv {} /mnt/LTStorage/

find /mnt/data -type f | parallel -j 64 md5sum > md5.txt

{ find /mnt/hd -name "*.cpp"; find /mnt/hd -name "*.cpp"; } | grep "name"

find /mnt/hdd -type f -print | file -f -

find /mnt/hdd -type f -print | file -i -f -

find /mnt/offsite/backup -type f -mtime +365 -exec rm {} \; -print >> file.lst

find /mnt/win_host -type d

find /mountpoint -mtime +42 -type f -exec rm {} \;

find /my/dir -type f -print0 | xargs -r0 sha256sum > sha256sums.txt

find /my/path/ -mindepth 2 -maxdepth 2 -type f -name 'README.txt' -mtime +30 -printf '%h\n' | xargs echo rm -r

find /myDir -mindepth 1 -mtime 7 -exec rm -rf {} \;

find /myDir -name 'log*' -and -not -name '*.bz2' -ctime +7 -exec bzip2 -zv {} \;

find /myMusic -type f -iname '*.mp3'

find /my_directory -mtime -1d -type f -exec mv {} /new_dir/. \;

find /mydir -name '*.test' -delete

for i in $(find /mydirectory/ -type d); do cd $i && find $PWD -type f -name "*.*" | sort -nr | head -5 >> /mydirectory/myfile.txt; done

find /opt/site/ -name '.log.txt' 2>/dev/null | xargs cat | awk '{$NF=""; print $0}' | xargs sed "/Filesystem/d" | sed '1i Owner RepoName CreatedDate' | column -t

find /path -name "*.md" -exec perl -pi -e 's/FOO/BAR/g' {} \;

  $ find /path -name pattern -print | xargs command

find /path -print0 | xargs -0 -n 1 -P <nr_procs> sh -c 'pngcrush $1 temp.$$ && mv temp.$$ $1' sh

find /path -type f   # gives you a list of all files in /path

find /path -type f -exec sed -i 's/oldstr/newstr/g' {} \;

find /path -type f -iname '*.txt' -exec sed -i.bak 's/$/  def/' "{}" +;

find /path -type f -name '*.dat' | awk -F. 'a[$4]++'

find /path -type f -perm -u=x -print | awk -F/ '{ rec=$0; sub(/_v[0-9].*$/,"",$(NF-1)); if( $NF == $(NF-1) ) print rec }'

find /path-to-directory -type f -mtime +60 -print0 | xargs -0 ls -ltr > /path-to-directory/filenames.txt

find /path/ -exec stat \{} --printf="%y\n" \; | sort -n -r | head -1

find /path/ -type f -name "*.rm" -exec ffmpeg -i {} -sameq {}.mp3 && rm {} \;

find /path/ -type f -name "*wav" -exec ffmpeg -i {} -sameq {}.mp3 \;

find /path/people -mtime -1 -type f -printf "mkdir --parents %h/updated_files\n" | sort | uniq | sh 

find /path/to -name '*[<>:"\\|?*]*' -exec bash -c "n=\$(sed 's/[<>:\"\\|?*]/_/g' <<< '{}'); echo '{}' \"\$n\"" \;

find /path/to -path '*/[21][90][09][0-9]/[abc].txt' | xargs awk '....'

find /path/to -regex ".*\.\(jpg\|gif\|png\|jpeg\)" > log

find /path/to | awk '{print length($0)}' | sort -nr | head -n1

find /path/to/ -name '?????*'

find /path/to/ABC -type d -name "CVS" -exec rm -fdr {} \;

find /path/to/Main -type f -name "*.txt" -exec python2.7 ../getDOC.py {} \; -exec sleep 10 \;

find /path/to/base/dir -type d -ctime +10 -exec rm -rf {} \;

find /path/to/base/dir -type d -ctime +10 | xargs rm -rf

find /path/to/dir ! \( -name ".gitignore" -o -name "*.js" \) -type f -mtime +7 -exec rm {} \;

find /path/to/dir ! -name .gitignore -type f -mtime +7 -exec rm {} \;

find /path/to/dir ! -newer $(ls -t | sed 'x!d') -exec rm {} \;

find /path/to/dir -maxdepth 0 -ctime +1 -exec rm -fr {} +

find /path/to/dir -not \(  $(php files.php) \) -delete

find /path/to/dir -regextype posix-extended -regex '/path/to/dir/[0-9]{8,}.*' -exec ls -lh {} \;

find /path/to/dir -type f -ctime -0 -name "*.*" | zip -@ file.zip

find /path/to/dir -type f -exec sed -i 's/original/replacement/g' {} \+

find /path/to/dir -type f -exec sed -i 's/original/replacement/g' {} \;

find /path/to/dir -type f -name '*.php' -exec sed -i '/string-to-remove/{1d;}' '{}' \;

find /path/to/dir/ -type f -name "*.html" -exec perl -ibak -pe 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/** masked ip **/g' {} \;

find /path/to/dir/ -type f -name "*.xml" ! -type l -exec sed -i 's/search_regexp/replacement_string/' {} \;

find /path/to/dir/ -type f -name "*.xml" ! -type l | xargs sed -i 's/search_regexp/replacement_string/'

find /path/to/directory -type f -exec md5sum {} + >before.txt

find /path/to/directory -type f -exec sed -e '/<!--String 1 -->/,/<!--String 2 -->/d' {} \;

find /path/to/directory -type f -name '*.mov'

find /path/to/directory/ -type f -name "*.ksh" -exec sed -i"bak" 's/^echo "/echo -e "/' {} \;

find /path/to/file -user user1 -perm -u+rwx

find /path/to/files >> /path/to/LIST

find /path/to/files -name '*.php' | xargs sed -i -e s/www.example.com/subdomain.example.com/g

find /path/to/files -name "artifact*" -type f -mtime +7 -exec rm {} \;

find /path/to/files -name "pattern*" -print0 | xargs -0 ls

find /path/to/files -type f -exec file {} \; | nawk -F':' '!arr[$2]++'  > outputfile

for i in $(find /path/to/files -type f -name '*.txt'); do ... ; done

find /path/to/files -type f -name 'M*.jpg' -exec bash -c 'echo mv "$1" "${1/jpg/mxg}"' -- {} \;

find /path/to/files -type f -name 'M*.jpg' -exec rename 's/jpg$/mxg/' {} \;

find /path/to/files* -mtime +5 -exec rm {} \;

find /path/to/folder -iname "*.bin" -o -iname "*.sh"

find /path/to/folder/ -mtime 1 -exec rm {} \; // Deletes all Files modified yesterday

find /path/to/jpgs -type f -exec sh -c 'jhead -v {} | grep 123' \; -print

find /path/to/look/in/ -type d -name '.texturedata'

find /path/to/look/in/ -type d -name '.texturedata' -exec chmod 000 {} \; -prune

find /path/to/look/in/ -type d -name '.texturedata' -prune

find /path/to/look/in/ -type d -name '.texturedata' -prune -print0 | xargs -0 chmod 000

find /path/to/photos -iname '*.jpg' -o -iname '*.png' -type f -exec mv -nv -t '/path/to/master' -- {} +

find /path/to/photos -type f -exec mv -nv -t '/path/to/master' -- {} +

find /path/to/scripts -type f -name "*.ksh" -exec sed -i"bak" '/ORACLE_HOME/s/10\.2\.0"/11.2.0.2_org"/' {} \;

dir=/path/to/destination/ | find /path/to/search -name file.txt | head -n 1 | awk -F"\t" -v dir="$dir" '{printf "cp \"%s\" \"%s\"\n", $1, dir}' | sh

dir=/path/to/destination/ && path="$(find /path/to/search -name file.txt | head -n 1)" && cp "$path" "$dir"

find /path/to/search -type f -iname "*.mp3" -exec mv {} path/to/music \;

find /path/to/search/ -type f -iname "*string*" | xargs -0 cp -t /path/to/copy

list=$(find /path/to/some/files/ -mindepth 3 -maxdepth 3 -name '*.dat')

find /path/to/somewhere

find /path/to/somewhere -exec path/to/script.sh {} \;

find /path/to/src -name "*.nr" -exec cp \{\} /path/to/dest \;

find /path/to/your/.waste -name 'filename.*' -print

find /path/to/your/files -name '*.html.tmp' -exec sh -c 'mv -i "{}" "$(dirname "{}")/$(basename "{}" .tmp)"' \;

find /pathto_folder -type f -iname "file1" -delete

find /proc -regex '.*/[0-9].*' -prune -o -print

find /proc -regex '/proc/[0-9].*' -prune -o -print

find /proc -user someone -ls

find "/replica_path/" -mmin +1 | wc -l

find /results/ -type f -name "*Metadata*.xml" | while read file; do java -jar $SAXON/saxon9h3.jar -o:${file%.xml}.csv $file $WORKDIR/transform.XMI.xsl; done

find /root -type f -name '* *' -exec rm -f {} ';'

find /root/ -name 'wallet.dat' -execdir bash -c 'echo cp "$0" "/home/backup/${PWD##*/}-${0#\./}"' {} \;

find /root/of/files -type f -name '*00080*'

find /root/of/files -type f -name '*138.096.000*' -exec rm {} \;

find /rootdir/ -name index.html -exec sed -i '1,196d' {} \;

find /search/path/ -type f -name "*my_file.txt*" -exec vim {} \;

find /shared/Simulations/.

find /some/directory -type f -name "*.txt" -print -exec sed -i 's/foo/bar/g' {} \;

find /some/path -name "*.html" -print0 | xargs -0 sed -i -n '/<div class="LoginOuterCssClass" id="ctl07">/{:a;N;/<\/div>/!ba;N;s/.*\n//};p'

find /some/path -perm 0777

find /some/path -type f -name "*.c" -exec sed -i '/extern "C" void myPrintf(char \*fmt, \.\.\.);/d' {} \;

find /some/path -type f | xargs sed -i 's/\.0\(<\/rating>\)/\1/g'

find /some/start/dir -cmin -30 -type f

find /somedir -type f -print | grep -i 'LMN2011' | xargs grep -i 'LMN20113456'

find /somedir -type f -print | grep 'LMN2011' # that will show files what names contain LMN2011

find /somedir -type f -print0 | grep -iz 'LMN2011' | xargs -0 grep -i 'LMN20113456'

find /source-tree -type f -exec cp {} /target-dir \;

find /source/picturesRoot -type f -name "*.JPG" -exec rsync -a {} /destination/flatView/ \;

find /students -maxdepth 1 -type d -perm -o=r

find /students -perm -o=r

find /stuff -type d -exec script.py {} +

find "/test/$1" -type f -name '*.html' | xargs sed -i -r 's,href="http://'"$1"'/,href="/,g'

find /thepath -type d -empty -print0 | xargs -0 rmdir -v

find /tmp \( -name 'twofirmscoop.so' -o -name 'twofirms.so' \) -exec ls -lt {} +

find /tmp -name "*$ORIGNAME*" -exec /tmp/rename.pl {} +

find /tmp -name \*.ABC | while read i; do cp $i $(basename $i | md5sum | cut -c1-6)$(basename $i); done;

find /tmp -name '*.pdf' -or -name '*.doc' | xargs rm

find /tmp -regex '.*daj.*\.txt' -printf '%p %m ' -exec sh -c "sed  -e 's/\<ReplaceMe\>/#DONE#/gi' \$@ | md5sum" _ {} \;

find /tmp -type f \( -name '*.txt' \) |cut -c14- | nl

find /tmp/ -depth -name "* *" -execdir rename 's/ /_/g' "{}" \;

find /tmp/dir1 /tmp/dir2 .....

find /tmp/logs/ -maxdepth 1 -mindepth 1 -type d -mtime -30 | xargs ls -td1

find /tmp/targets/ -amin 120 -exec mv {} {}.found \;

find /tmp/testFiles -name '*.xml' -exec dos2unix {} +

find /tmp/unpacked -type f | parallel -j1 -I ,, parallel --arg-file-sep // -X grep -H -o -n -b -f ,, {} // - :::: /tmp/blocks_of_words

find /u01/ -type f -size 0 -mtime +2 -name '[!.]*' -exec rm {} +

find /u01/ -type f -size 0 -mtime +2 -name '[!.]*' -exec rm {} \;

find /u01/ -type f -size 0 -mtime +2 -name '[!.]*' -print0 | xargs -0 rm

find /users/rhysparker/downloads/ -maxdepth 1 \( -iname \*.pkg -o -iname \*.app -o -iname \*.dmg \) -exec mv {} /folder/location/ \;

$ find /usr -follow -name '*.sh'

$ find /usr -name \*.sh

$ find /usr -name '*.sh'

$ find /usr -name tclConfig.sh tkConfig.sh

$ find /usr -name tkConfig.sh

find /usr/audio/incoming -name '*.mp3' -exec eyeD3 -t 'New Title' '{}' \; -exec mv '{}' /usr/audio/complete \;

find /usr/lib -maxdepth 1 -type l -iname "*libblas*"|xargs -I{} sh -c 'echo "{} =>" $(realpath {})'

find /usr/lib/libdb.so -type l -xtype l -print -delete

find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -printf "%f\0" | xargs -0 -I{} echo svnadmin hotcopy /usr/local/svn/repos/\{\} /usr/local/backup/\{\}

find /usr/share/terminfo

 find /var/backup -type f -name 'foo' -mtime -20 -delete

 find /var/backup -type f -name 'foo' -mtime -20 -print0 | xargs -0 rm -f

find /var/cache/pacman/pkg -name 'vim-[0-9]*.gz'

find /var/cache/pacman/pkg -name 'vim-*-*-*.pkg.tar.xz'

find /var/cache/pacman/pkg -regex '.*/vim-[^-]*-[^-]*-[^-]*.pkg.tar.xz'

find /var/lib/tomcat6/webapps -maxdepth 1 -type d

find /var/log/httpd/ \! -name '*gz' -exec tail -n 15 {} +

find /var/log/processing -name "*.log" -exec basename {} \; > /tmp/temp.files

find /var/spool/mail -type f | cpio -pvdmB /home/username/mail

find /var/tmp/stuff -type f -iname 'backup*' -mtime +90 -exec rm {} +

find /var/tmp/stuff -type f -iname 'backup*' -mtime +90 -print0 | xargs -0 rm

res=$(find /var/www -maxdepth 2 -mindepth 2 -type d -name "${search}")

find /var/www -name ".hg_gg" -execdir bash -c 'mv {} .hg' \;

find /var/www -type d -name ".hg_gg" -execdir bash -c 'mv {} .hg' \;

find /var/www/* \( -path "${Iggy[0]}" $(printf -- '-o -path "*%s" ' "${Iggy[@]:1}") \) -prune -type d

find /var/www/advertise/ -name '*.php' -type f -exec sed -i "s#'/home/example/public_html#\$_SERVER['DOCUMENT_ROOT'] . '#g" {} \;

find /var/www/cgi-bin -name touch -cmin 10 -exec echo "ok" \;

find /var/www/html/folder1/folder2/folder3/ -type f -mtime +90 -exec zip filename.zip {} \;

find /var/www/media_test1/media001/ -type f -not -name "th*" -exec cp {} /var/www/media_test2/media001/ \;

find /var/www/page/logs/ -name "*.gz" -exec zgrep -H '/index.php' {} \;

find /var/www/page/logs/ -name "*.gz" -exec zgrep -l '/index.php' {} \;

find /var/www/sites -type f | xargs sed --in-place 's/abc@gmail\.com/mynewemail@elsewhere.com/g'

find /var/www/temp/updates/ -type d -name "date-*" -printf '%T@ %p\n' | sort -n | head -n -2 | cut -f2- | xargs rm -rf

find /var/www/vhosts/ -not \( -name "*.jpeg" -o -name "*.jpg" \) -ctime 0 -type f

find /var/www/websitename/ -name '*.html' -exec sed -i.bak 's/.title.Old title..title./<title>New title<\/title>/g' {} \;

find /volume1/uploads -name "*.mkv" -exec /tmp/rename.sh \{\} \;

find /volume1/uploads -name "*.mkv" -exec mv \{\} \{\}.avi \;

find /volume1/uploads -name "*.mkv" -exec rename .mkv .avi \{\} \;

find /volume1/uploads -name "*.mkv" -exec rename 's/\.mkv$/.avi/' \{\} \;

find    /volumes/OD    -type d    '!' -iname '.*'

find /where/to/search -type f -iname '*.SUFFIX' -exec echo "USER DEFINED STRING" >> \{\} \;

find "/x" -path "/x/y" -prune -o -type f -print

for file in `find /your/dir/ -type f`; do sed -i "$file" 's|index.html|/|g'; done

find /your/directory \! -user nobody -exec echo chown user:group {} \;

find /your/folder -type f -exec mv {} {}.cel \;

find /your/path -mindepth 1 -maxdepth 1 -type d | sort -rn

find /your/path -name "*.TERM" | sort -t. -k1 -n | tail -n +2 | xargs -r rm

find /your/path/ -exec touch -r $(echo {} | sed "s#/your/path#/your/original/path#g") {} \;

find /your/source/dir/ -iname '*.txt.mrg' -exec ln -s '{}' /your/dest/dir/ \;

find /yourdir ! -user root

find /yourdir -printf '%u %p\n'

find A -type d \( ! -wholename "A/a/*" \)

find ABG-Development/ -name "*.php" -print0 | xargs -0 grep "<?" | wc -l

a=$(find Balzac/ -iname "20??????.txt" -exec cat {} + | cut -c 10-21 | sort | uniq | egrep -Re "[0-9][0-9][0-9]-[0-9][0-9][0-9].mp3")

$ find DIR -iname "regex" -type f -exec wc -l '{}' \; 

$ find DIR -iname "regex" -type f -exec wc -l '{}' \; | awk '{ SUM += $1 } END { print SUM }'

find "DIRECTORY" -type f \( -name \*.jpg -o -name \*.html \) -mtime +95

find Desktop/ \( -iname '*.JPG' -o -iname '*.jpeg' -o -iname '*.jf[il1]f' -o -iname '*.exif' -o -iname '*.tiff' -o -iname '*.gif' -o -iname '*.bmp' -o -iname '*.png' \) -exec cp -n {} test \;

find DirPath -type d -exec bash -c '[ "x`find "{}" -maxdepth 1 -type f`" = x ] && echo "{}"' \;

find DirsRoot/ -maxdepth 1 -type f #This does show hidden files

find DirsRoot/* -maxdepth 0 -type f #This does not show hidden files

find Documents -name "*.py" -o -name "*.html"

find Failed Loaded ToLoad -name 'file'

find Sales Purchase -type f | sed 's_\.\/__'

find SomeNotExistingDir ... -exec ls -1 {} +

find SomeNotExistingDir ... -print0 | xargs -r -0 ls -1

find SomeNotExistingDir ... | xargs -r ls -1

find Sources/$1-$2 -name '*.php' -o -name '*.rb' ....

$ find 'Test Folder' -type d -exec \'{}\' \;

$ find 'Test Folder' -type d -print0 | xargs -0 rm -rf

find `echo "${searchpath}"` -type f -print0 | xargs -0 grep -l -E '"${string1}".*"${string2}".*"${string3}"'

find `paste -s -d' ' directories.list` -type f -name 'core.*' -or -name '*.o'

find `pwd` -iname ".*" -type f > all-hidden-files.txt

find `pwd` -maxdepth 1 -type f -print > files.csv

find `pwd` -name .htaccess

find `pwd` -name "file.ext" -printf "%f\n"

find `pwd` -type f -name "*.ksh" -exec grep -E -o "[a-zA-Z0-9_]*\.ksh" '{}' \;

find `pwd` -type f -name "*.ksh" -exec grep -E -o "[a-zA-Z0-9_]*\.ksh" '{}' \; |sort -u

find "`pwd`"

find a -type f -name "*.txt" -exec sed -i.bac 's/^/PREPENDED /' '{}' \;

find a b -type f ! -name '*crazy*' -print | sed -e 's|.*/||' | diff -X - -r a b

find a b -type f ! -name 'crazy' -printf '%f\n' | diff -r a b -X -

find a/ -regextype egrep -not -path '*/gen*' -a -regex '.*(java|xml)$'

find a/ -type f -exec mv '{}' '{}.eml' \;

find bar -type f -name "*.txt" -o -name "*.log" -o -name "*.csv" -delete

find bar1 -name '*foo*' -not -type d -not -name '*.cc' -exec ln -s $PWD/'{}' bar2/ \;

find c:\path -iname "*.txt" -exec sed "s/old/new/g" "{}" ;

find config/view -type f -name "*.xml" -exec bash -c 'sed -n "/def=something/,/<\/box>/!p" "$0" > tmp.xml; mv tmp.xml "$0"' {} \;

find config/view -type f -name "*.xml" -exec sed -i -n '/def=something/,/<\/box>/!p' {} +

find config/view -type f -name "*.xml" -exec sed -n '/def=something/,/<\/box>/!p' {} \; -exec mv tmp.xml {} \; > tmp.xml

find data/ -name '*.json' -exec cat {} \; > uber.json

find dir -exec sh -c '... | ... | ...' \;

find dir -name '*.*' -print | rev | cut -d . -f1 | rev

find dir -name "*.png" -execdir process.py {} ";"

find dir -name "file.*" -maxdepth 1 | sort -n -t. -k2 | tail -1

find dir -type d -links 2

find dir -type f -print0 | xargs -0 rm

find dir -type f -regex ".*/[.] .*" -exec rename ". " "" {} \;

find dir -type f | xargs sed -i.bak 's#from#to#'

find dir/ -type f -exec bash -c 'mv "$1" "$(iconv -f UTF8 -t ASCII//TRANSLIT <<< $1)"' -- {} \;

find dir/ -type f -exec bash -c 'mv "$1" "${1%/*}/$(iconv -f UTF8 -t ASCII//TRANSLIT <<< ${1##*/})"' -- {} \;

find <search directory> -maxdepth 1 -type f -print0 | xargs -0i basename {} ...

find dirname -exec echo found {} \;

find dirname -exec grep foo {} +

find dirname -iname "*.c" -exec mv "{}" "{}"c \;

find dirname  -print0 | xargs -0 grep foo  # or whatever it is you wanted to do

find dirname -type f -name "*.html" -exec sed -e 's/^(//;s/)//;s/^/1-/' {} \;

find files/ -type f -name '.*'

find files/* -exec bash -c '/path/to/stagger < "$1"' -- {} \;

find folder -type f -exec gzip -9 {} \; -exec mv {}.gz {} \;

 find folder -type f -executable -exec echo "{}" /tmp \;

find folder* -name \*.a -print | cpio -o | (cd /path/to/dest ; cpio -idv)

find folder/to/frob -type f -exec sh -c '> "{}"' \;

find folder2 -name '*.*' -exec mv {} folder \;

find foldername -type d -exec chmod 777 {} \;

find foo -name \*.h -print0 | xargs -0n1 basename | sort | uniq -c

find | grep -vFf duplicates_sorted.txt -

find home -name "myfile.xml" -exec sh sdiff.sh $basexml {} \;

find home -name "myfile.xml" -print -exec diff home/hello/myfile.xml {} \; 

find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +

find index.html | xargs -rt sed -i 's/<script>if(window.*<\/script>//g'

find js/ -type f -maxdepth 3 -name \*.js -exec uglifyjs -o {} {} \;

find lattice* -type f -name 'POSCAR.*' -exec bash -c 'echo mv -iv "$0" "${0/POSCAR./POSCAR}"' '{}' \;

find local_dir -type d -print0 | ssh remote 'while IFS="" read -r -d "" a; do mkdir -p "remote_dir/$a"; done'

find lol -depth -type d \( -name .git -o -name .hg -o -name .svn \) -exec rm -r '{}' \;

find main-directory -type f -exec mv -v '{}' '{}'.html \; 

find main_directory/ -name "myfile.txt" | tar -czvf mytar.tar.gz -T -

find model -type f -name "*_*" -exec sh -c 'd=$(dirname "$1"); mv "$1" "$d/$(basename "$1" | tr -d _)"' sh {} \;

find <directory> -iname <pattern> -exec mv "{}" $(modify {} whenever you want) \;

find my_dir/ -name "*filename*" -exec sh -c "tail -200 {} | grep lookingfor" \;

IN_FILES=`find mydir "$dis*.xml"`

IN_FILES=`find mydir  -maxdepth 1 -name "$dis*.xml"`

find mydir -mindepth 1 -maxdepth 1 -type d -exec bash -c 'mv {}/* mydir; rm -ri {}' \;

IN_FILES=`find mydir -name "$dis*.xml"`

find mydir -type d -exec ./myscript {} \;

find mydir -type f -exec curl -u xxx:psw --ftp-create-dirs -T {} ftp://192.168.1.158/public/demon_test/{} \;

find "nested directory with spaces" -type f -exec ./test.sh {} +

$ find olddir -name script.sh -printf "%p\0" -printf "newdir/%P\0" | xargs -0L2 cp -n

find olddir -type d -printf "newdir/%P\0" | xargs -0 mkdir -p

find <some options> ! -name "dontfile.txt"

$ find output-* -name "*.chunk.??" | xargs -I{} ./myexecutable -i {} -o {}.processed

find path \( -name foo.js -o -name FOOBAR -o -name bar.json -o -name fubar -o -name .foo -o -name .baz \) -exec rm -fr -- '{}' \;

find path \( -name foo.js -o -name FOOBAR -o -name bar.json -o -name fubar -o -name .foo -o -name .baz \) -print0 | xargs -0 rm -fr --

find 'path' -maxdepth 1 -not -name 'file-to-keep' -print0 | xargs -0 rm

find path/to/dir -type d | awk -F"/" '$NF != toupper($NF) {l = n = $0; sub($NF "$", toupper($NF), n); print "mv " l " " n;}' | tac

find path/to/dir -type d | awk -F"/" '$NF != toupper($NF) {l = n = $0; sub($NF "$", toupper($NF), n); print "mv " l " " n;}' | tac | sh

$(find path/to/dir/ -name "appropriate name pattern" -type d -maxdepth 1)

find path/to/files -name archive.gz -exec sh -c "gzip -dc {} | awk 'NR==100'" \;

find path/to/suspect/files -size +10c -exec padded.sh {} +

FINDPS=`find procesoSitemap-*.jar -exec printf '.' \;| wc -c`

find products -type f -print | xargs gawk '...'

find public/javascripts/ -type f -exec awk '/new_pupil_group_form/ && length($0) < 400 { print FILENAME":"FNR": "$0}' {} \;

FILES=$(find public_html -type f -name *.php)

find public_html -type f -name '*.php' | xargs -n1 dirname | sort -u > dirlist.txt

find public_html/ -type f -name "*.js" -exec sed -i 's|;document.write(\x27<iframe src="http://sitecorporatemanagement.ru/pretzellogmeins.cgi?8" scrolling="auto" frameborder="no" align="center" height="3" width="3"></iframe>\x27);||g' {} \;

find rapidly_shrinking_drive/ -name "offender1" -mtime -1 -print0 | du --files0-from=- -hc | tail -n1

find rootDir -name "myprefix_*"

find root_dir -name download.txt -exec cat {} \; > merged_download.txt

find server.log* -exec ls -lth {} \; | awk '{print $9}' | xargs awk -F - '"2012.12.06 01:56:01" < $1 && $1 <= "2012.12.08 04:30:00"'

find some/dir -name foo.gz -exec zcat {} \; > output.file

find some/dir -printf '%P\n'

find some_dir -mtime +0 -printf '%f\n' -mindepth 1 > list.txt

find some_files -name '*.html' -exec sed -e ":a;\$!{N;ba};s/`cat old.tmp`/`cat new.tmp`g" -i {} \;

find somedir/ \( -type d -exec chmod 0775 {} + -true \) -o \( -exec chmod 0644 {} + \)

find somedir/ -name '*.js' -exec cat {} +

find source -name "*.php" -print0 | rsync -av --files-from=- --from0 ./ ./destination/

find sourcedir -type f -print0 | xargs -0 mv -t target 

find src/ ! -name Default.png -exec cp {} dest/ +

find src/ -type f ! -name Default.png -exec cp {} dest/ +

find src/ -type f -maxdepth 1 ! -name Default.png -exec cp {} dest/ +

find src/dir/ -name '*.txt' -exec mv {} target/dir/ \;

find start_dir -name something -print0 | xargs -0 /bin/rm -rf

find subd/*.html -type f -exec './mycmd {} opts > subd2/$(basename {})' \;

find test ! -path "test/2*"

find test -maxdepth 1 -type f -name '*.txt' -print0 | tar -cf test/foo/test.tar --null --files-from -

find test -name '*.coffee' ! -wholename '*/client/*'

find test -name client -prune -o -name '*.coffee' -print

find test -type d -regex '.*/course[0-9.]*'

find test -type f -exec sed -i '/welcome/d' '{}' \;

find test -type f -printf '%h\0%d\0%p\n' | sort -t '\0' -n | awk -F '\0' '{print $3}'

find test1 -type f -name 'textfile.txt' -print 

find test1 -type f -print

find testdir/ -depth | while read file; do NEWNAME=$(dirname "$file")/$(echo $(basename "$file") | tr '[:lower:]' '[:upper:]'); mv "$file" "$NEWNAME"; done

find videos/ -name "*.mp4" -exec ffmpegScript {} \;

find www.site.com/samples/ -name \*.h -exec   cp -p {} backup/{} \;

 PATH=$PATH:$(find your_dir -type d -printf "%p:")

find your_folder -depth -name "* *" -execdir rename 's/ /_/g' "{}" \;

find yourdir -type d -name '*.app' -exec ln -s {} /AppLinks \;

find yourdir -type f -name \*.txt | sed 's/.*\///'

find yourdir -type f -name \*.txt | sed 's:.*/::'

find yum/yum_hyd -name "\"*\".csv" |sed 's/"/\\"/g'|xargs rm

find {my/path,another/path,some/path} -name '*some_pattern*'

find ~ ! -name '*[0-9]*'

   find ~ -name "*.mp3" -o -name "*.ogg"

find ~ -type f ! -name '*[0-9]*'

find  ~  -type f -exec ....

find ~/Desktop/administration/ -type f -exec sed -i '' 's#\\MySite\\scripts\\connection.php#\/MySite\/scripts\/connection.php#g' {} \;

find  ~/Download -name \*.avi -exec mv "{}" Directory \;

find ~/SAN/"$site"/*.tar.gz -maxdepth 1 -mtime +60 -exec rm {} +

find ~/addon_backups/202/ME -name "*.tar.gz" -maxdepth 0 -ctime +365

find ~/addon_backups/202/ME -name "*.tar.gz" -maxdepth 1 -mtime +365 -exec rm {} +

find ~/addon_backups/202/ME/*.tar.gz -mtime +365 -exec rm {} +

PATH=${PATH}:$(find ~/code -type d -name '[^\.]*' | tr '\n' ':' | sed 's/:$//')

PATH=${PATH}:$(find ~/code -type d | sed '/\/\\./d' | tr '\n' ':' | sed 's/:$//')

PATH=${PATH}:$(find ~/code -type d | tr '\n' ':' | sed 's/:$//')

find ~/cron/obnam -type f -mtime +3 -name 'test-*.txt' -exec rm -v {} + >>$LOGFILE 2>&1

find ~/dev/tools/flex-4.5.0.20967 -type d -exec chmod o+rx '{}' \;

 find ~/dir1 \*.m4a |xargs play

find ~/dotfiles -maxdepth 1 -mindepth 1

find ~/jars | grep \.jar$ | sed ':a;N;$!ba;s/\n/:/g'

find ~/jars | grep \.jar$ | tr '\n' ':'

find ~/my-documents/ -iname "ABC_[0-9][0-9][0-9].JPG" -type f -exec cp '{}' ~/my-documents/archive/ \;

find ~/test -type d -exec basename {} \;

find ~/test -type f -name '*.css' -execdir cmd {} \+

$ find-repos-of-install | grep rpmfusion | xargs yum update

$ find2perl . -type f

find: paths must precede expression: -

>echo "D:\0.0" | findstr /I /l "d:\0.0"

>echo "D:\0.0" | findstr /I "D:\0.0"

>echo "D:\0.0" | findstr /I "d:\0\.0"

findstr /c:"error" /c:"warning" C:|MyFiles\*.txt

findstr /i "error warning" C:\MyFiles\*.txt

findstr /r /c:"^# [0-9][0-9]* \"[a-zA-Z0-9]*.inc\"" all_pre.txt | more

findstr /r /c:"^# [0-9][0-9]* \"[a-zA-Z0-9]*\.inc.*\"" all_pre.txt | more

findstr /r "^[1-9][0-9]*$ ^-[1-9][0-9]*$ ^0$"

findstr /r "error warning" C:\MyFiles\*.txt

findstr /s /m /i READONLY *.txt

findstr /s /m READONLY *.txt

findstr /vrc:"^[^A-Za-z0-9]*DontAppend" file.txt >> AppendHere.txt

findstr "Error" "%LOG%" >nul && goto :sendmail

findstr "error warning" C:\MyFiles\*.txt

finger $USER_NAME | grep Directory | expand | cut -d ' ' -f 2

finger -s testuser1 testuser2 testuser3 | awk '{print substr($0,1,31),substr($0,46,14)}'

finger | awk 'NR>1{print $2,$3}'

finger | colrm 34 39

firefox "<some-url-with-complex-authentication>" -save-to-folder ./somewhere

firefox $(tail -1 output.txt)

$ firefox 'YOUR_URL'

first-cmd && second-cmd

first_mail_sent_date_time datetime NOT NULL FOO,

fixdirs -x \s -r _ *

 for i in *.flac; do flac -d "$i"; done

(flags >> flag) & 1

flags_help

 fld1, "text for, fld2", fld3, fld4,....

flex -o shell.c shell.l

float a, b, c, sol1, sol2;

flock -n -e 200 || { echo "This script is currently being run"; exit 1; } >&2

flock -n -e 200 || exit 1

flock -n /tmp/lockfile.lck echo "Script B is not running" || echo "Script B is running right now"

flock -n /var/run/your.lockfile -c /your/script

flock -s 200

( ( flock -x 200 ;  sleep 10 ; echo "original finished" ; ) 200>./test.lock ) & ( sleep 2 ; ( flock -x -w 2 200 && echo "a finished" ) 200>./test.lock ) &

flock /tmp/lockfile.lck ScriptB.sh

fmt -d '' <<< $'Do not.\nDouble-space.'

fnHotlinkG2R '#hotlink'

fold -w 12 file

fold -w130 file | ...

$ fold file | wc -l

folder3\\executable.exe

foo > stdout.txt 2> stderr.txt

foo > allout.txt 2>&1

foo

(foo)

myvar=$foo

myvar=$(foo)

    foo

value=$(foo)

foo

for i in *.dat ; do foo "$i" & done

foo -o my_buf

foo /?

foo /path/to/my/new/directory

result=$(foo 4 123)

foo = 123

foo = "bar"   # This is a syntax error because of the spaces around the equal sign

foo "BAR" baz

foo ^&dir\/s

foo ^&dir/w

    foo        bar

foo |& bar

foo 2>&1 | bar

foo bar

foo; bar

foo "bar "<(qux)

foo bar barfoo foobar barbar foofoo

foo bar baz | bip && fred barney ; wilma

 foo | bar > file1.txt && baz | quux > file2.txt && diff file1.txt file2.txt

 foo | bar > file1.txt && baz | quux | diff file1.txt - && rm file1.txt

(foo bar | grep --line-buffered bar & foo baz &) | tee /tmp/output

foo 'bar' it's 'OK' --> foo bar it's OK

foo | bar 2>./qux | quux

foo bar.txt

foo dir

foo dog & dir

foo < <(echo -e "foo\nbar\nbaz" ; cat /dev/stdin)

$ foo | grep -e bar -e baz

foo |& node server.js

foo 2>/dev/null || pwd

my_array[$foo]=bar

foo tail -f bar > >(tee baz) &

$ foo | tee >(grep -o bar) >(grep -o baz) >/dev/null

('foo', 'bar')

foo.o: src/foo.c src/foo.h src/bar.h

foo.o: src/foo.c src/foo.h src/bar.h

foo.pl 2>&1 | tee foo.log

foo.py -d "C:/My Folder/hello"

foo.sh 111

foo.txt is different

foo/**/bar

foo/bar baz.txt

foo1 "$@"

fooTEXT1barfooTEXT2bar

foobar 34

foocmd ... "$l"

foo\nbar

fop.bat -xml in.xml -xsl xsl.xsl -pdf out.pdf -param  mFileName "yourfile.xml"

for@a

     @$(foreach f,$(rcFiles), [ -e $(HOME)/$f ] || ln -v -f -n -s $(PWD)/$f $(HOME)/ ;  )

foremost -i tcpflow.out

rig=$(forever list | awk '/server.*root.*\.log/{print $8}')

forfiles -p"N:\QC\ATR's" -s -m*.xls* -d-30 -c"CMD /C del /f /q ^0x22@FILE^0x22"

forfiles /m * /c "cmd /c if @isdir==FALSE echo @path"

forfiles /p c:\Users /m *Signatures* /c "cmd /c forfiles /p @path /m *.htm /c \"cmd /c echo @path\""

format-list | help

"format-list" | help

$ fortune -f 2>&1 | head -1

found IND for country name INDIA

fpfunction &

fpings=$(fping -c 1 -t 1 $ips 2>/dev/null | sort) 

fpm ...blah blah details... "${DEPENDENCIES[@]}" path

free -h | awk 'FNR == 2 {if (match($2,"[BKMGT]$",a)) r=sprintf("%.0f %sB",substr($2,0,RSTART-1), a[0]); else r=$2 " B";print "Your computer has " r " of memory."}'

free -m

( free -m | grep 'Mem' | awk '{print $3'} && free -m | grep 'Mem' | awk '{print $6'} && free -m | grep 'Mem' | awk '{print $7'} && free -m | grep 'cache:' | awk '{print $3'} ) > result.txt

var1=$(free -m | grep "Mem: " | awk '{print ($3/$2)*100}')

from os import getenv

from subprocess import *

 fromdos post-commit

frq = "run-" $1 "/data/data.frq"

fstcompile --isymbols=M.syms --acceptor I.wfst > I.ofst

fstcompile --isymbols=M.syms --osymbols=M.syms M.wfst > M.ofst

fstcompose I.ofst M.ofst | fstprint --isymbols=M.syms --osymbols=M.syms 

 fstcompose I.ofst M.ofst | fstproject --project_output |  fstprint --isymbols=M.syms --acceptor

fstcompose I.ofst M.ofst | fstproject --project_output |  fstprint --isymbols=M.syms --osymbols=M.syms 

fsum SlavaSoft Inc.

$ fswatch [opts] -0 path ... | xargs -0 -n1 -I{} your full command goes here

$ ftp -N my.netrc.file

ftp -i -n -s:%currentFolderPath%ftp_commands.txt %IPAddress%

ftp -i -s:yourscript

$ ftp -n

ftp -p -v -i $HOST < example.script >> a.log

ftp -v -i -s:script.txt

while ! ftp ...; do sleep 1; done

ftype Python.File="c:\python27\python.exe" "%1" %*

        $full_filename{ $partial_filename } = $filename;

func ${a_variable:-"default_value"}

func arg1 arg2 3>&2

$(func args ...)

funcA > >( tee -a out.txt 2>&1 )

function_name $arg1 $arg2

functions --copy fish_prompt fish_prompt2

fuser -TERM -k -w mfifo; sleep 5; fuser -k -w mfifo

fuser -k -n tcp 10000

fuser -k 8000/tcp

fuser -v /path/to/your/file | awk  'BEGIN{FS=""}$38=="F"{num++}END{print num}'

fv gm

        g

$ g++ -E something.cpp | vi -

g++ -Wall program_name.c -o /dev/fd/1

g++ -Wall yourcode.cc -lncurses -o yourprog

g++ -g -Wall testCard.cpp ../card.cpp -I..

g++ main.cpp GradeBook.cpp # Other flags (e.g. "-o OutputFile", "-Wall", etc.)

$ g++ 2>&1 | sed -e 's/no/on/g'

$ g++ |& sed -e 's/no/on/g'

g++ tmp/test.cpp -o tmp/test >tmp/compile.out 2>&1

gawk " { address[$1]=1 } END { for (a in address) print a;}" < input

gawk '$5 == 2 {print $1, $2, $6, $7}' FS=, samplef.csv > sampleout.csv

gawk --posix -F '[[:space:]]*\|[[:space:]]*' -v k=$key '$1 == k' $TABLE_FILE

gawk --re-interval 'BEGIN{RS="[0-9]{1,2}:[0-9]{1,2}:[0-9]{1,2}.[0-9]{1,6} \\[[A-Z]*\\]";} /983a99f8-bec6-11e1-80dd-059a821d0b73/ {print savedRT, $0} {savedRT = RT}' full.log 

gawk --source 'BEGIN { exit(0) } END { exit(0) }' --file syntax-test.awk

gawk -F '[' '$0 ~ /Exception/ && $2 ~ /^2014-01-26 16:/ {print $2}' coms-core.log

gawk -F'[[:space:]]+|[.]' '{print $2}'

gawk -F, -f s.awk a.txt b.txt 

 gawk -F":" -vdst_region="$1" '/Global path:/ { if (dst_region == "ABC") print "dest_region is ABC"; else print "dest_region is not ABC" }'

 gawk -F":" -vdst_region="$1" '/Global path:/ { printf "dest region is%s ABC", (dst_region=="ABC"?"":" not") }'

gawk -F"|" -f myawkscript.awk myfile

gawk -f a.awk FileZilla\ Server.log

gawk -f a.awk file file

gawk -f a.awk file.xml

gawk -f ext.awk tmp.txt > turbo.txt

gawk -f script.awk a.txt > b.txt

gawk -i inplace '...' *.txt

gawk -i inplace '...' file

gawk -i inplace 'NR==1 { r = $0; print } r == $0 { next }1' file.txt

gawk -vRS="SEP" '/PATTERN/ {print RT $0 RT}'

gawk -vnum=2 -f e.awk input.txt

gawk -v FIELDWIDTHS="5 5 5 5 8 8 8" -v OFS=: '{print $1, $2, $3, $4, $5, $6, $7}'

gawk -v FPAT='[^",][^,]*|("[^"]*")*'  

 gawk -v FS=\" '{ print $2 ";" $4 }' a.txt > b.txt

gawk -v FS=';' -v OFS='/' '{match($3, /From: "(.*)" <(.*)@/, m); print m[1], m[2]}'

gawk -v FS=';' -v OFS='/' '{match($3, /From: "(.*)" <(.*)@/, m); print m[1], m[2]}' | gawk -v FS=';' -v OFS='/' '{match($3, /From: "(.*)" <(.*)@/, m); print m[1], m[2]}'

gawk -v FS=';' '{match($3, /From: (.*)@/, m); print m[1]}'

gawk -v IGNORECASE=1 '{ p = 1 } /<appender /{ t = $0; while (getline > 0) { t = t ORS $0; if (/COM_FIND[.]log/) p = 0; if (/<\/appender>/) break } $0 = t } p' file

gawk -v RS='>' 'NF{ print RS$0 > $1".txt" }' InputFile

gawk -v RS='(^|\n)[[]group]($|\n)' '!/enable = 0/ {sub(/.*name[[:blank:]]+=[[:blank:]]+/,x);print $1}'

gawk -v RS='\0' -v ORS= '{print gensub(/,([^,]+)$/,"\\1","")}' file

gawk -v RS='\0' -v ORS= '{print gensub(/,([^,]+})/,"\\1","g")}' file

gawk -v RS="Song" 'NF{ print RS$0 > "Song_"++n".txt" }' Song.txt

gawk -v RS='^$' '{ print "<" $0 ">" }' file

gawk '...' file > file.tmp && mv file.tmp file

gawk "/INSERT INTO/" query.log

gawk '/\<GOOD\>/{++i} END{print i}'

gawk '/\<foo\>/ {sub(/\<foo\>/, "&_" sprintf("%02d",++c))} 1'

gawk  '/isaPDAVersion/ {match($4,"([[:digit:]]),([[:digit:]]),([[:digit:]]),([[:digit:]])",a); {print a[1]a[2]a[3]a[4]}}' f1

gawk 'BEGIN { FPAT="\\<GOOD\\>"; RS="^$" } { print NF }' file

gawk 'BEGIN { RS="(^|\n)-($|\n)" } { print "Numbers:\n" $0 }'

gawk 'BEGIN { RS="\r\n"; FS=":" } NR == 1 { split($0, array); next } { for (i=1; i<=NF; i++) printf "%s:%s ", array[i], $i; print "" }' file.txt

gawk 'BEGIN {RS=""} /here goes your pattern/ { print $0}' INPUTFILE > OUTPUTFILE

gawk 'BEGIN {getline} $3>60{print $2}' AA/ff.txt | while read number; do gawk -v number=$number '$2 != number' BB/ff.txt > /tmp/ff.txt; mv /tmp/ff.txt BB/ff.txt; done

gawk 'BEGIN {pattern = "/"} $0 ~ pattern {print}' backup.sh

gawk 'BEGIN{FPAT="([^;]+)|(\"[^\"]+\")"}{for(i=1;i<=NF;i++){printf ("%s\n",$i)}}' file.csv

gawk 'END{if (RT!="") print "found RS"}' file

gawk 'END{print "Number of paragraphs: "NR}' RS="" tmp.txt

gawk "NF \!= 6" file

gawk 'NF{gsub(/.{16}/,"&\n",$0);print $0}'

gawk 'NR==3 { print patsplit($0,a,/GOOD DI/) }' file

gawk 'match($0, /&viewport=[0-9]+,[0-9]+,([0-9]+),([0-9]+),([0-9]+),([0-9]+),([0-9]+)/, m){print m[3], m[4]}' filename

gawk 'match($0, /&viewport=[0-9]+,[0-9]+,([0-9]+),([0-9]+)/, m){print m[1], m[2]}'

gawk '{ t = $0; while (match(t, /<option value="([^"]*)"(.*)/, a)) { print a[1]; t = a[2] } }' file

gawk '{$7=gensub(/(.{5})(.{6})/ , "\\2\\1" , "g" , $7)}1' inputfile

gawk '{for (i = 1; i <= NF; i += 1) {printf "%f\t", ($i + 5) / 12;} printf "\n"}'

gawk "{if(NR==FNR)l[NR]=$0; else print l[$1] }" data.txt numbers.txt

gawk '{match($0, /([^;,]*)(;+|,)(.*)/, a); print a[1], a[2], a[3]}'

gawk '{split($0,n_arr," "); getline; n=split($0,v_arr," "); getline; for (i=1;i<=n;i++){print n_arr[i] "=" v_arr[i]}}'

gawk '{x+=gsub("the","it");print} END{print "total changes:"x}' file.csv

gcc " $gcc_options $1"

gcc "$gcc_options" "$1"

gcc ${=gcc_options} $1

gcc "${=gcc_options}" "${=1}"

$ gcc *.c -lrt && ./a.out

gcc -### -o hello hello.c

gcc --version | awk 'BEGIN { print "\nCompiled on:" } { print "\t" $0 } END { printf RS }'

gcc -E main.c > main.txt

gcc -O2 -o linebufferedstdout.so -fpic -shared linebufferedstdout.c -ldl -lc

gcc -Wall -W $@ && ./a.out

 gcc -Wall -o term  -pthread filename.c 

gcc -Wall -std=c99 program.c && (./a.out ; echo $?)

$> gcc -Wall myfnmatch.c -o myfnmatch

     gcc -c -std=c99 -Wall "-D$OPTIMIZE" -O2 code.c

gcc -dumpspecs

$ gcc -framework Foundation -framework AudioToolbox audio.m WavReader.m WavFileCreator.m -o audio

gcc -framework Foundation audio.m WavReader.m -o audio

gcc -g -o types types.c

gcc -g -std=c99 -shared -fPIC  -o calc.so -ldl calc.c

$ gcc -o hlink hlink.c -Wall

gcc -o my_application my_application.o -lmylib

$ gcc -o process_io process_io.c

gcc -o redelimit redelimit.c

gcc -print-search-dirs

gcc -save-temps=obj -o dir/foo.o foo.c

gcc -std=c99 %1 %2 %3 %4 %5 %6 %7 %8 %9

gcc -v -o hello hello.c

susam@nifty:~$ gcc args.c -o args

gcc filename.c -o filename

$ gcc keys.m -framework Carbon -o keys

gcc test.c `/sw/bin/curl-config --cflags` `/sw/bin/curl-config --libs` -o test.o

gcc test.cpp `python-config --cflags --ldflags`

gci -r | Select-String 'SomeSearchString' | %{tf edit $_.Path}

gcloud auth login

gcloud auth revoke

gconftool-2 -s -t string /apps/gnome-terminal/profiles/Default/background_type transparent 

gcore -o /tmp/SOMETHING PID1 PID2 PID3

gdal_merge.py -o World_SRTM4.tif SRTM_*_250m_TIF.tif

gdal_rasterize -l $(basename $file .shp) -burn 1 -tr 0.5 0.5 -t -180 -90 180 90 $file rast2

for f in *.tif; do gdal_translate -a_srs EPSG:25832  $f test/$f; done

$ gdb -- /usr/bin/ruby1.8

gdb --batch-silent -ex "attach $BASHPID" -ex 'print dlopen("calc.so", 0x101)' 

$ gdb -ex run --args /usr/bin/ruby1.8 /usr/bin/irb

geany $(find public/javascripts/ -type f -exec awk '/new_pupil_group_form/ && length($0) < 400 { printf FILENAME":"FNR" "}' {} \;)

geany public/javascripts/a:2 public/javascripts/c:3

gedit "$(ls | head -1)"

gedit & sleep 2; xdotool key k; 

gem 'condi', '0.0.6', :path => 'vendor/gems/condi-0.0.6'

gem env | grep "EXECUTABLE DIRECTORY"

gem install <name> --platform=ruby 

$ gem install condi

gem install minitar

gem install sass-globbing

gem 'mail'

gem 'mail', :require => false

gem 'pg' , '>= 0.12.2'

gem 'pg', '0.12.2'

$ gem specification /tmp/condi-0.0.6.gem > condi-0.0.6/condi.gemspec

$ gem specification condi -v=0.0.6 > condi-0.0.6/condi.gemspec

gem update heroku

generateChangeLog

{ generate_data | pv -bft 2>&3 | consume_data >/dev/null; } 3>&1 | tr '\015' '\012'

generate_file_pairs | parallel --colsep ' ' ./prog {1} {2}  

generating_program | nc machineB 12345

generic string generator |sed '/\(.\).*\1/d'|sed /BA/d|sed /AB/d||sed /CB/d|sed /BC/d|sed /DC/d|sed /CD/d|sed /ED/d|sed /DE/d|sed /FE/d|sed /EF/d|sed /GF/d|sed /FG/d|sed /HG/d|sed /GH/d|sed /IH/d|sed /HI/d|sed /JI/d|sed /IJ/d|sed /KJ/d|sed /JK/d|sed /LK/d|sed /KL/d|sed /ML/d|sed /LM/d|sed /NM/d|sed /MN/d|sed /ON/d|sed /NO/d|sed /PO/d|sed /OP/d|sed /QP/d|sed /PQ/d|sed /RQ/d|sed /QR/d|sed /SR/d|sed /RS/d|sed /TS/d|sed /ST/d|sed /UT/d|sed /TU/d|sed /VU/d|sed /UV/d|sed /WV/d|sed /VW/d|sed /XW/d|sed /WX/d|sed /YX/d|sed /XY/d|sed /ZY/d|sed /YZ/d

hash=$(genhash --use-ssl -s $IP -p 443 --url $URL | grep MD5 | grep -c $MD5)

genre/artist/album/track

geoiplookup 8.8.8.8 | awk '/^GeoIP Country/{ sub(/,*$/, "", $4); c = $4; } sub(/^GeoIP ASNum Edition: /, ""){ print $0 "," c }'

get filename_*.txt>1d

get-childitem *.txt -Exclude 'found_nots.txt' -recurse | select-string not > found_nots.txt

get-command format-list | help

get-content c:\filename.txt -TotalCount 3 #here just the first 3 line.

(get-content foo.txt) | foreach-object {start  powershell "-noexit get-eventlog -logname security -instanceID 4625 -after $timeCut -message *bar* -comp $_ | select machinename,timegenerated, eventid, @{n='AccountName';e={$_.ReplacementStrings[5]}}"}

get-help EntityFramework

get-help Update-Database 

get-help Update-Database -detailed

configs=$(getConfigVals)

getExchangeRates aud

get_arguments | { read data lambda; echo $data $lambda; }

DROP_TABLE_OF_INVALIDS=$(get_boolean "$DROP_TABLE_OF_INVALIDS" 'n')

current=$(get_last_name "$path")

current=$(get_last_name "$path")

$$( get_old_version )

$ getconf ARG_MAX    # Get argument limit in bytes

getconf CLK_TCK

getconf PAGESIZE 

getent passwd $(logname)|awk -F":" '{print $6}'

getent passwd $LOGNAME | cut -d: -f5 | cut -d, -f1

FULLNAME=$(getent passwd $USER | cut -d : -f 5)

user_home=`getent passwd "$user" | cut -d: -f6`

getent passwd | awk -F':' '{ if ($3 >= 1000) print $1}'

getent passwd | awk -F':' '{ if ($3 >= 500) print $1}'

getent passwd | awk -F: '{print $7}' | sort | uniq -c

getent passwd | cut -f1 -d:

getent shadow | egrep '^[^:]*:[*!]:' -v | cut -f1 -d:

getevent -pl | busybox sed -e ':a;N;$!ba;s/\n / /g' | busybox grep 'ABS_MT_TOUCH' | busybox awk '{print $4}'

getgrgid_test GID

getopts optstring name "${myargs[@]}"

$ geturl http://example.com/excitingstuff.jpg

gfortran -Wall file.f90 2>&1 | grep something

gg "Fixed all bugs (closed 123)"

gimp -i -b "(let* ( (img (gimp-file-load 1 \"$image\" \"$image\")) (drw (gimp-image-get-active-drawable (car img))) ) (gimp-image-scale-full 1 400 300 3) (file-jpeg-save 1 (car img) (car drw) \"processed/$image\" \"$image\" 0.6 0 1 1 "" 3 0 0 2) (gimp-quit 0) )"

gimp -i -b '(your-script-name "test.psd" 200 200)' -b '(gimp-quit 0)'

git --git-dir=/full/path/to/repo/.git --work-tree=/full/path/to/rpeo diff --cached |grep -q "^my/folder" 

git --git-dir=/home/app/personal_website/server/.git --work-tree=/home/app/personal_website/server pull --quiet

git --git-dir /home/gcom370p/stu013/express/.git pull /home/gcom370p/stu013/express.git master

git --git-dir=/home/username/myFolder/.git config --get remote.origin.url

git --git-dir=c:\code\klas\.git --work-tree=c:\code\klas merge origin/master

git --git-dir=projectDirPath/.git show -s --pretty=format:%h

AUTHORS=$(git --no-pager shortlog -nse HEAD | cut -f 2-)

git --version

git --work-tree="Z:/www/proj/web/test/sample-repo-cloned/" --git-dir="Z:/www/proj/web/test/sample-repo-cloned/.git"  status

git -C /home/app/personal_website/server pull --quiet

git -c color.ui=always status && git diff --color | cat

git ... | awk -F '|' '{ printf "%s %-20s %s\n", $1, $2, $3 }'

git add !$

git add '$TARGET_FILES'

git add "${TARGET_FILES[@]}"

git add -i

git add -p

git add "user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG"

git archive --format=tar --remote=git@server:repo.git master | tar -xf -

git archive --prefix=git-gitweb/ master:gitweb | tar tf -

git archive -o ../latest.zip some-commit $(git diff --name-only earlier-commit some-commit)

git archive master | tar x -C"/my/path/codebase"

$ git archive v2.0.0 --remote=git@bitbucket.org:john/myapp.git --output=myapp.zip --format=zip

git blame source_file > blame_result_file

udos@X100e:/var/www/mantisbt$ git branch

branch_description=$(git branch --list -vv | grep '^\*')

git branch -a

first_match=$( git branch -a | grep -m 1 "$1" )

git branch -l > /tmp/branches; nano /tmp/branches; whatever /tmp/branches; rm /tmp/branches

git branch -r | awk -F/ '/\/PREFIX/{print $2}'

git branch -r | awk -F/ '/\/PREFIX/{print $2}' | xargs -I {} git push origin :{}

git_branch=$(git branch|grep '*'|cut -c3-)

git branch | grep "*" | sed "s/* //" | git commit -F -

git branch | grep "*" | sed "s/* //" | xargs git commit -m

git_branch=$(git branch|grep '^[*]'|cut -c3-)

branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')

git checkout [some_dir|file.txt]

function gitb() { git checkout -b $1; alias $1="git checkout $1"; }

git checkout -t -b whatever origin/whatever

git checkout -t origin/whatever

git checkout .

git checkout .

git checkout master

git checkout pull/origin/123

git checkout svnMirror

git chepull branch_name 

git cherry -v master|sed -n -e '1p' -e '$p'|awk '{print $2}'

git clean [-f]

git clean -dnx | cut -c 14-

git clean -dn | cut -c 14-

git clean -fdx

git clean -f | pv -l -s $linecount > /dev/null

$ git clone $GIT_REPO 2>&1 | cat

git clone --single-branch --branch=<branch> --depth=1

git clone -b develop-1.9.8-beta https://github.com/gsscoder/commandline.git commandline-develop

git clone /home/admin/path/repository.git

ghc () { git clone git@github.com:"${@?need to set param: <developer>/<project>}"; }

git clone git@github.com:abc/xyz.git

git clone git@github.com:user/repo.git

git clone git@github.com:username/repo.git

git clone "git@github.xxxx.com:blablabla/reponame.git /Users/myname/dev/myfolder"

git clone git@github.xxxx.com:blablabla/reponame.git /Users/myname/dev/myfolder

git clone https://github.com/SachaG/Void.git

( git clone https://github.com/Study-Master/Java-WebSocket.git /tmp/socket && cd /tmp/socket && mvn install -Dmaven.test.skip=true )

git clone https://github.com/mrdoob/three.js.git >output.txt &

git clone https://github.com/mrdoob/three.js.git >/dev/null &

git clone https://github.com/thoughtbot/capybara-webkit.git

git clone https://username:password\!@github.com/org/repository.git

git clone 'https://username:password!@github.com/org/repository.git'

git clone https://yourLogin@bitbucket.org/someUser/aRepo

git clone repo_url 2>&1 | grep -v 'warning: You appear to have cloned an empty repository.'

git clone ssh://correct_username@server.net/team/git/gui.git/

git commit

git commit --amend -C HEAD

git commit -am 'Nailed it!'

git commit -m "$(grep -Po '(?<=Subject: \[PATCH \d/\d\].).*') $patch"

git commit -m "$1"

git commit -m "$desc"

git commit -m "$desc"

git commit -m "$m"

git commit -m "'$1'"

git commit -m "Added notes for $(date)"

git commit -m "Database $(date '+%a %M:%H %h %d %Y')"

git commit -m 'Frustrating <insert object of frustration here>!'

git commit -m 'This is why it was committed'

git commit -m "`date`" filename

git commit -m 'add `foo`'

git commit -m "cracked enigma's code"

git commit -m hope it works

git commit -m "hope it works"

git commitall "message goes here"

$ git config --get-regexp ^svn-remote

git config --global --add core.pager cat

git config --global --replace-all core.pager 'less -+X -+F'

git config --global alias.ac '!f(){ git add . && git commit -m "$1"; };f'

git config --global alias.ac '!sh -c "git add . && git commit -m \"$1\""'

$ git config --global alias.delete '!/path/to/deletion_script.sh'

git config --global alias.diffall '!sh diffall.sh'

git config --global alias.l '!'"bash -c 'source ~/.githelpers && git_pretty_log'"

git config --global alias.remotes 'remote -v'

git config --global alias.sp 'stash pop'

git config --global alias.t '!/path/to/above/script'

git config --global alias.who '!/path/to/your/git/who'

git config --global color.ui auto

git config --global color.ui true

git  config --global core.editor  /usr/local/Cellar/vim/7.3.266/bin/vim

git config --global core.editor "c:/APPS/CYGWIN/bin/vim.exe"

git config --global core.editor "notepad"

git config --global log.abbrevCommit true

git config --global pager.stash false

git config alias.foo '!git-foo.sh'

git config color.status always

git config color.ui auto

git config core.editor "emacs -nw"

git config core.editor "nano"

$ git config core.pager "fold -sw \$(tput cols)"

git config status.short true

$ git delete `git log --all --pretty=format: --name-only --diff-filter=D`

$ git delete `git log --all --pretty=format: --name-only --diff-filter=D`

git describe --exact-match --tags HEAD

git describe --exact-match HEAD

git diff --cached | grep -e "^+[^+]" | cat test.html | aspell list f- sgml --lang en --extra-dicts=/home/test/dictionary.test --add-sgml-skip={nospell,literal,screen} | sort | uniq

git diff --color=never

git diff --ignore-submodules

for name in $(git diff --name-only $1); do git difftool $1 $name & done

git diff --name-only earlier-commit some-commit | xargs -d'\n' git archive -o ../latest.zip some-commit

git diff --name-only tag-name tag-name^

$ git diff --no-color file

git diff --word-diff=porcelain | awk -v red="$(tput setaf 1)" -v green="$(tput setaf 2)" -v reset="$(tput sgr0)" -f worddiff.awk

git diff --word-diff-regex='([^[:alnum:]]|[^[:space:]])' --word-diff=porcelain | awk -v red="$(tput setaf 1)" -v green="$(tput setaf 2)" -v reset="$(tput sgr0)" -f worddiff.awk

git diff HEAD

git diff HEAD:old_path/main.cpp :new_path/main.cpp

git diff HEAD:old_path/main.cpp new_path/main.cpp

jsdiff=`git diff _js/main.js`

git diff | awk '{ seen[substr($0,2)]++; l[i++] = $0; } END { for (j = 0; j < i; ++j) if (seen[substr(l[j],2)] < 2) print l[j] }'

git fetch --dry-run 2>&1 | grep ssh

git fetch origin

git filter-branch --tree-filter 'rm -rf assets/vids' HEAD

git foo

git foo

git foo.sh

git for-each-ref --format='%(objectname) %(refname:short)' refs/heads | awk "/^$(git rev-parse HEAD)/ {print \$2}"

gg() { git grep "$*"; }

git grep --name-only "$grepexp" | xargs sed -r "$sedcmd" -i

git gui

git help clone | col -b > gitclone.txt

$ git ignore //Directory\\Subdir\\

git init --shared --bare

$ git log --all --pretty=format: --name-only --diff-filter=D | sort -u

git log --diff-filter=A

git log --diff-filter=A --stat

git log --diff-filter=A -1

git log --diff-filter=A -p

git log --diff-filter=D --summary | grep delete

git log --follow ./path/to/file

git log --grep="$JIRA_KEY"

git log --oneline -- $(echo "$filename" | tr -d '\r') | wc -l

git log --oneline -- ${filename%[-[:space:]]} | wc -l

git log --oneline -- ${filename%^M} | wc -l

git log --oneline --pretty=format:'-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'

git log --pretty="%s" --since="`date -r ./../lastSuccessful/build.xml "+%F %T"`"

git log --pretty=format:"%h %an %ai" | sort -k3

git log --pretty=oneline --branches -- $FILE | tail -1 | cut -f 1 -d' '

git log --pretty=oneline "path_to_file" | wc -l

git log --since=yesterday

git log --stat

git log --stat=1000,1000 --pretty=format:'%cN' | perl ~/git-contrib.pl

git log -1 --format="%at" | xargs -I{} date -d @{} +%Y%m%d

git log -1 HEAD --pretty=format:%s

git log -S 'ThisClass(object):'

git log -n 1 --pretty=format:'%s'

git log "path_to_file" | wc -l 

git log | sed -n '0,/.*\[git-p4:.*\/\/depot\/blah\/\([^\/]*\)\/.*/s//\1/p; /\[git-p4/ q'

git ls-files --deleted | tr '\n' '\000' | xargs -0 ls

git ls-files --others --exclude-standard -z | xargs -0 tar rvf ~/backup-untracked.tar

git ls-files -z | xargs -0 git update-index --assume-unchanged

git ls-files | while read file; do git log -n 1 --pretty="Filename: $file, commit: %h, date: %ad" -- $file; done

git ls-files | tr '\n' ' ' | xargs git update-index --assume-unchanged

git ls-files | xargs cat | wc -l

git ls-files | xargs wc -l

git ls-remote --tags git://git.kernel.org/pub/scm/git/git.git | ...

git ls-remote ... | tail -n 1 | sed 's@.*refs/tags/\(.*\)\^{}@\1@'

git merge --no-ff develop

git merge svnMirror

git-mv-link() { git mv "$1" "$2" && ln -s "$2" "$1"; }

$ git mv README.txt README

$ git mv _fav-locations-cluster.html.erb partials/!#:2:gs/-/_/

$ git mv _fav-locations-cluster.html.erb partials/_fav_locations_cluster.html.erb

git mv file2 file1

git pull

git pull > $STD_OUT

git pull --upload-pack=/c5/shared/git/1.7.6/bin/git-upload-pack myserver:~/mygitrepository

git pull git://host.example.com/path/to/repo.git

git pull origin devel

git pull origin master > /tmp/script.$$

git pull origin master | ...

git pull origin master | while read msg; do ...; done

git pull origin master | { read msg; echo ${msg}; }

git pull 2>&1 | sed '/\*\*/,/\./d'

git push

git  push -u origin dev_aFeature

git push -u origin yourCurrentBranch

git push github svnMirror

git push mine my-work

git push origin $(branch)

git push origin :x4e925e4

git push origin `branch`

git push origin excellent:refs/remotes/from-desktop/excellent

git push origin master:x4e925e4

'git read-tree --empty && git reset -q "${GIT_COMMIT}" -- '"$(xc < ~/to_keep.txt)" \

'git read-tree --empty && git reset -q "${GIT_COMMIT}" -- '"$tmp" \

git reflog show --date=iso -n 1 origin/master

git remote -v

git remote -v show

git remote add origin git@github.com:LiamBailey/TweetSlider.git

git remote add origin https://bitbucket.org/your-name/your-repository

git remote add pushable

git remote rm heroku

git remote set-url dev foo@bar:/var/dev  # Assuming SSH access

git remote set-url origin git@github.com:path/to/repo

git remote set-url origin https://new.url.here

git reset

git reset --hard [HEAD]

git reset --hard HEAD

git reset --hard HEAD

git reset HEAD .

git rev-list $newsha --not --all

git rev-list $oldsha..$newsha

git rev-list --branches -- $FILE | tail -1

git rev-list --count %MERGE_TO%..%BRANCH_NAME%

git rev-list --no-merges -n 1 HEAD

git rev-list --reverse HEAD | xargs -L 1 -J % git log -1 %

$ git rev-list -1 --grep='git-svn-id' HEAD

git rev-list HEAD

REL=$(git rev-parse --show-prefix 2>/dev/null) || { echo "$@" ; exit ; }

git rev-parse --show-toplevel &>/dev/null

  git rev-parse --show-toplevel &>/dev/null && echo "$PWD is in a Git repo." || echo "$PWD is not in a Git repo." 

git rev-parse --symbolic-full-name @{-1}

git rev-parse --verify refs/stash >/dev/null 2>&1 && color for stashed files

$ git rev-parse HEAD

git rev-parse HEAD > GitRevision.txt

git rm --cached ../project.properties

git rm -rf mapeditor

git rm "user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG"

git shortlog -s -n

git shortlog -s -n | wc -l

git show --pretty="format:" --name-only HEAD^ | grep '\.js$'

IFS='|' read -d '' -ra FIELDS <<< "$(git show --quiet --date=rfc --pretty=format:"%s|%b|%an, %ae|%H|%cd" $i)"

git show :file

git show-branch --list

git show-ref |grep remotes/origin

git show-ref |grep remotes/origin| cut -d" " -f 2 | cut -d/ -f 3-

git stash changes

git status -s | grep '?' | cut -b 4- > .gitignore

git status && git diff --color | cat

git status | grep deleted | awk '{print $3}' | xargs git rm

git status | sed 's/^/  /'

git submodule foreach 'npm install || :'

git submodule status MySubmoduleFolder | awk '{print $1;}'

git svn rebase

git symbolic-ref -q --short HEAD || echo HEAD

branch=$(git symbolic-ref HEAD)

BR=$(git symbolic-ref HEAD 2>/dev/null) || { echo "$@" ; exit ; }

branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

git tag --list

git update-index --assume-unchanged $(git ls-files | tr '\n' ' ')

git update-index --assume-unchanged -- wp-config.php

git update-index --skip-worktree -- wp-config.php

git-foo.sh

git@github.com:username/repositoryname.git

github --reinstall-shortcuts

giving up after 10 

gksudo runmydeletescript

gksudo "sh -c 'command1; command2; ...'"

global-ignores = *.iml

glog "7 days ago"

gm convert input.png -resize 1920x1080 +matte out.bmp

s/^$gname:.*//g

gnome-open "$(bundle show jquery-rails)"

gnome-screensaver-command -l

gnome-session-save --logout

gnome-terminal --disable-factory -x ./setup_svrconfig > setup-server.log

gnome-terminal --disable-factory -x sh -c ". ./test1.sh|less"

gnome-terminal --full-screen -x script mylogfile.txt -c ./user_script_file.sh

gnome-terminal --tab -e "/bin/bash -c '/usr/bin/myprog; exec /bin/bash -i'"

gnome-terminal --tab -e 'bash -c "ls; exec bash"'

gnome-terminal --tab -e 'ls; exec bash'

gnome-terminal --title "virtual_3: server" -x bash -c "ssh -t root@192.168.1.132 'echo 1'"

gnome-terminal --working-directory=xxx/yyy/zzz --tab -e "command 1" --tab -e "sh -c 'sleep 2; command 2'" --tab -e "sh -c 'sleep 4; command 3'" --tab -e "sh -c 'sleep 6; command 4'" 

gnome-terminal -e /my/fortran/program

gnome-terminal -e "bash --rcfile $HOME/.term-rcfile -i"

gnome-terminal -e "bash -c 'cd /'; $SHELL"

gnome-terminal -e "bash -c 'cd /';$SHELL"

gnome-terminal -e "bash -c 'cd /;$SHELL'"

gnome-terminal -e command [args] &

gnome-terminal -e 'ssh -t server "echo \"tail -F logfile;rm /tmp/foo\" > /tmp/foo; bash --rcfile /tmp/foo"'

gnome-terminal -e top --title Testing

gnome-terminal -t "MyWin" -x bash -c "ssh -X $USER@$REMOTE_IP 'echo \"Press ENTER to continue\" ; read JUNK && echo \"HELLO\" > hello.txt ; bash '"

gnome-terminal -x ./abc.sh

gnome-terminal -x bash -c "$(declare -f my_func); my_func; bash"

gnome-terminal -x bash -c 'cat dksdamfasdlm; echo $?; sleep 2'

gnome-terminal -x bash -c "cmd1; cmd2"

gnome-terminal -x bash -c "ls; bash"

gnome-terminal -x bash -c "ls; echo '<enter>'; read"

gnome-terminal -x script.sh file1.txt file2.txt

gnuplot -e "DATAFILE='mydatafile.txt'" coolscript.gp

gnuplot -e "filename = '$fileName'" plotFile

gnuplot -e "filename = '${!fileName}'" plotFile

$ gnuplot -e "filename='foo.data'" foo.plg

gnuplot -e "x=$x;y=$y;file = \"mydata.dat\"" Myscript.gp

gnuplot -e "x=1;y=2;file = \"mydata.dat\"" Myscript.gp

gnuplot -e "x=1;y=2;file = \"mydata.dat\"" Myscript.gp

gnuplot -e "x=1;y=3;file = \"mydata.dat\"" Myscript.gp

gnuplot -persist -e "plot 'data.dat' using 1:2 with lines ,'' using 1:3 with lines" loop.plt

gnuplot -persist -e "set terminal dumb; plot '< adb shell dumpsys meminfo $PID | grep TOTAL | sed -r ''s/ +/ /g'' | cut -d '' '' -f 2-' using 1:6"

google-chrome

gpg --armor --detach-sign backup_username_110217.tar.gz

gpg --batch -c --passphrase secret readme.txt

gpg --list-keys |awk '/pub/&&/4096R/{split($2,a,"/");print a[2]}' 

gpg --passphrase easy -d secrets.txt.gpg > fifo &

gpg --passphrase "passphrase" --batch -d --output "decrypted.file" "file.gpg"

gpg --passphrase-fd 3 3<keyfile

gpg --recv-key 15C4D63E

gpg --trust-model always --passphrase some password --yes -se -r "<someone s@s.com>" "D:abc.txt"

gpg --verify backup_username_110217.tar.gz.asc backup_username_110217.tar.gz

decrypted=$(gpg -d ...)

gpg -d secrets.txt.gpg > fifo &

gpg -r recip --encrypt-files $(ls $source/*.gz | egrep -v 'alabama|somename')

gpg -se -r "Someone <s.s@s.com>" "D:\20130328pcs0CONTAINER0035017310.txt --passphrase-fd 1 & echo somePassword"

gprolog --init-goal "<your_goal>,halt"

gradle console

gradle console -q

grails refresh-dependencies --plain-output 2>&1 > /tmp/vh.txt

grant execute on &1 to usr

grep " $(date --date='1 hour ago' '+%H').*MTS" /var/log/oss.log > oss.new.log

grep ' -1 ' file.txt

$ grep '' file.txt

$ grep '' file.txt | wc -l

check_dbtag=\$(grep "<<include /home/$user/cvs/dbtag.conf>>" /etc/dbtag.conf)

grep '<!--#include  file="../../includes/' *.*

grep "<p>" myfile.html | sed -e 's%\(<p>\)\(.*\)\(</p\)\(>\)%\2%'

grep '<strong>First ascent:</strong>' | sed 's/.*by \([^>]*\)<.*/\1/'

grep "<td>.*</td>" tmp.txt | sed 's/<td>\([0-9.]\+\).*/\1/g'

grep '<url>' a.txt | sed 's/<\/*url>//g'

grep '<url>' a.txt | tr '<>' ' ' | awk '{print $2}'

grep '<url>' file.xml | sed 's/.*>\([^<]*\)<.*/\1/' >> file.txt

grep '[[:xdigit:]]\{32\}' myfile.txt > hashes.txt

grep '[][-]' ...

grep "\[$(date +%d/%b/%Y)"

grep '[0-2][0-9]:[0-5][0-9]:[0-5][0-9]'

 grep '[0-9][0-9][0-9]\.' file > numbersFile

 grep '[0-9][0-9][0-9]\.[0-9][0-9][0-9]\.' file > numbersFile

grep '[0-9]:[0-9][0-9]:[0-9][0-9]'

grep "[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\} [0-9]\{2\}:0[0-5]" logfile

grep "[1-3][0-9] Mar 2014" catalina.logs

grep '[A-Z]' *

grep [OPTIONS] PATTERN [FILE...]

grep '[^][-]' ...

grep [^0-9]

grep '[^@]@' file

grep '[p]erl check'

grep ! input.txt | grep -Eo "[0-9]{1,}|\-[0-9]{1,}" >> output

grep '"48"' file

grep "#PEM-6-GUESTIN" log.txt | sed -r "s/.*user account \((.*)\).* MAC address (.*), IP address (.*)\.\*\*.*/\1,\2,\3/"

grep "$(awk '{if (NF > 0) print $1}' file1)" file2

grep $(grep STRING test.txt | cut -d"," -f3 | tr -d ' ') temp.txt

grep "$1" ...

var1=$(grep "$1" ./[FILE] | wc -l)

a= cat mapping.txt | grep $1 | awk '{print$1}'

test=$(grep "$1;$2;" temp.authorization.config)

$test=$(grep "$1;$2;" temp.authorization.config)

grep "$2" "bookprint.txt" | sed 's/^/Author(s)! /; s/:/\nTitle!     /; s/:/\nPublisher! /; s/:/\nYear!      /; s/!/:/g' 

grep  $@ | sed -r -e's/:[[:space:]]*/:/'

grep "$CLASS" data-new.csv >> $FACULTY.csv

grep "$NUM" file

 grep $REPLY b.txt

grep $YESTERDAY $ACCESSLOG | grep "$1" | awk -F" - " '{print $1}'

daytype=`grep $date feb2010 | cut -c13-`

for file in *; do grep "$file" > "$file.out"; done

grep "$foo" file.txt

grep "$i" 4700921_combined_subs.txt > "$i.txt"

OPT_FLAGS=$(grep "$i dataset$j" FLAGS_IN | cut -d " " -f3-)

    filelist=$(grep '$incstring' -rl --include=*.{h,cpp} pathToFiles)

    filelist=$(grep "$incstring" -rl --include=*.{h,cpp} pathToFiles)

grep $itemname $filename | cut -d, -f3

output=$(grep $itemname $filename | cut -d, -f3)

age=$(grep "$person_name" people_file.txt | cut -f1 -d' ')

age=$(grep "$person_name" people_file.txt | head -n 1 | cut -f1 -d' ')

grep $string $file

grep "$string" file.txt

grep "$today" aaa.sh

grep $today log.txt >> append_file.txt

grep $today log.txt $'\r' >> append_file.txt

grep $today log.txt | sed -e 's/$/\r/g' >> append_file.txt

grep "$value" "$(exim -Mvh "$(exim -bpru | grep "$eximID")")" | more

grep "${DEPARTAMENTO:0:5}" ARCHIVOS2MOVER | xargs -d '\n' mv -t "$DEPARTAMENTO"

grep ${VALUE} inputfile.csv | cut -d, -f${INDEX}

grep * -nsie "foo"

grep '***END' `perl -e 'print( ( sort { -M $a <=> -M $b } @ARGV )[0], "\n");' name_pattern.o*`

grep  ',[[:digit:]]$' inventory

grep ',[0-9]$' inventory

grep ',-,\.txt$' input.txt | sed 's|/[^/]*$|/|' > output.txt

grep -- "---" your_file

grep -- -v file

grep --after-context 200 '2014-06-02 22:46' log/production.log | less

grep --after-context 200 2014-06-02 log/production.log | less

grep --binary-files=text "Revision-number" Dump1.dump | tail -n 1 | sed 's/Revision-number\:\ //g'

grep --color

grep --color $@

grep --color -E 'pattern|$' file

grep --color POST access_log

grep --color "a" <<< "a"

grep --color=always

grep --color=always -C 0 -rni --exclude-dir="\node_modules" Login ./* | sed G

grep --color=always WORD * | grep -v AVOID

grep --context=3 foo myfile.txt

grep --exclude-dir=".svn"

grep --include='*.rb' -rnw . -e "pattern"     

grep --invert-match --file pattern.txt complext.txt > filtered.txt

grep --null -lr FOO . | xargs -0 cp -t MEOW

grep --text

grep -A1 'Started POST.*\/[fr]' log/production.log

grep -A1 "^%name=" $Input_file | grep -B1 "^%value=" | grep -v "^--"

grep -A10 -B10 'NullPointerExceptions' your.log

grep -A 10 'pattern' file.txt 

grep -A 2 "$title:$author:*" | tr '\n' ' ' 

 grep -A2 A LOG_FILE | awk -v RS='--\n' '!/B/ { printf "%s", $0 }'

grep -A2 file

grep -A 2 "string 1" $file | tail -2 | grep -B 1 "string 2" | head -1

grep -A 3 YES

grep -A 5 '19:55' file

 grep -A6 'Final set of parameters' file

grep -A 999999 "$today" aaa.sh

grep -B $N -A $M 'string pattern' file

grep -B1 -P 'ORA\-(?!00001)' logfile

grep -B1 "Broken pipe" mylog.log | grep -c "^2013-06-13 05"

grep -B1 "^[^-]" data |sed '/^--$/d'

grep -B1 foo file

grep -B 1 foo foo.txt | grep -vE 'foo|^--$'

grep -B 1 include $FILE | grep -E '\.(C|cpp)$'

$ grep -B 2

grep -B2 'URL has changed' url.txt | grep 'https\?://'

$ grep -B 2 three test.txt |sed -n '1~4'p

grep -C 10 -P '\[.*(?<!AAA|BBB)Exception' 

file_refine=$(grep -C 2 CFBundleVersion $file | grep -o '[0-9]\{3\}')

grep -E '[[:xdigit:]]{32}' myfile.txt > hashes.txt

grep -E "[0-9]+ (month|year|day|week)s? ago" a.txt| grep -Eo "^[a-zA-Z0-9]+"

IP= $OPTARGS | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}';

grep -E "[0-9]{3}-[0-9]{3}-[0-9]{4}" 

grep -E '(#.*#.*#|:.*:.*:.*:)' file.txt

grep -E '((#.*){2}#|(:.*){3}:)' file.txt

grep -E '(..:){5}..' < infile.txt > outfile.txt

 grep -E '(\S+\s+){12}A\s'

grep -E '(^|[[:space:]])host($|[[:space:]])' /etc/hosts

grep -EA15 'alpha.*beta|beta.*alpha' | tail -16

grep -EHroi -- '->(from|join)\('\''[^'\'' ]*' /path/to/files | sed -re 's/:.*(from|join)\('\''/:/g'

grep -ER '^.*(.*);' file  #find declaration.

grep -E -i -R 'your regex' * | sed ...

grep -Eio '( *[^ ]* *){4}JOIN mail_headers_body( *[^ ]* *){4}'

grep -Eiv '([0-9a-z]){3}' $file | sort -u > tmp_file

grep -Ei '^COLOUR=((RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN|WHITE|BLACK)\|)*(RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN|WHITE|BLACK)\|?$'

grep -Ei 'pattern1.*pattern2|pattern2.*pattern1' file

grep -E -m1 "pattern1|pattern2|pattern3" <(tac test.txt)

grep -E -m1 "pattern1|pattern2|pattern3" test.txt

grep -Eo '<div class="quote".*</div>'

grep -Eo "<video>(.+?)</video>" myfile.html

grep -Eo "<video>(.+?)</video>" myfile.html | sed -E "s|</?video>||g"

grep -Eo "['\"][^'\"]*\.(gif|png)['\"]"

grep -Eo "['\"][^'\"]*\.(gif|png)['\"]" | tr -d "\"'"

grep -E -o '[0-9]+' error | sed 's/$/p/' | sed -f - error

grep -Eo '[0-9]+(\.[0-9]+)*'

grep -Eo '[0-9]{2}:[0-9]{2}:[0-9]{2} [0-9]{2}/[0-9]{2}/[0-9]{4}'

grep -Eo '[0-9\.]+' myfile.txt 

grep -Eo "\"scheme_version\":(\w*)"| cut -d: -f2

grep -Eo '([0-9]{2}:){2}[0-9]{2} ([0-9]{2}/){2}[0-9]{4}'

grep -Eo "(?def .*|'[a-z]+')" test.txt

grep -E -o 'Total number = [0-9]+' inputfile > outputfile

grep -Eo '^[^ ]+' file

grep -Eo "^(root|isometric|akau|)\>" /etc/shadow

grep -E -o "\b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b" file.csv | sort -u > email_list 

grep -E -o 'finalNumber="[0-9]+"' file.xml | grep -E -o '[0-9]+'

grep -Eo 'http://[^ >]+' yourFile|head -1 

grep -Eo 'name="[^"]+"' your_file

grep -Eo 'symbol="[^"]+' yahoo.txt | cut -c 9-

grep -Eq '[0-7]{3}'

grep -Eq '(0|1|2|3|4|5|7){3}'

grep -Evi '([0-9a-z])\1{2}' $file

grep -Ev '^[[:blank:]]*[a-zA-Z_]'

grep -Ev '^foo[^3]|foo$' foo

grep -Ev "string1|string2|string3" filename

grep -E -x -v "${ab//,/|}" Name.txt

grep -E "ABC|DEF" test2.txt

grep -E 'Failed to add (.*) to database'| sed 's/'Failed to add \(.*\) to database'/\1'

grep -E "InputPattern" -A27 inputFile.csv | sed -n '1p;19p;$p'

grep -E MYPATTERN -n root/channel_*/service_*/2014-05-24/file_*.xml

grep -E '\<host\>' /etc/hosts

grep -E '\<myServer\>([^-]|$)'  test-file.txt

$ grep -E '\.(c|cpp)$' input

grep -E '^ *//'

grep -E '^[[:blank:]]*[0-9*@]'

grep -E '^[0-9]+$' file | diff file -

grep -E '^[0-9]+\s+foo' foo

grep -E "^[0-9]{8}$"

grep -E '^[^/]{2}.*https' file

grep -E "^[a-zA-Z]+ [0-9]+ [0-9]+:[0-9]+:[0-9]+ Kingston"

grep -E "^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$"

grep -E '^-|-$' filename

grep -E ^Swap[TF] /proc/meminfo | awk 'p{print p-$2}{p=$2}'

  grep -E '^Title:|^Test run' fileName

  grep -E '^Title:|^Test run' fileName | egrep -v '^Title: foo XXX|^Title:bar XXX'

grep -E '^\S*\s+[A-Z]' file

grep -E '^\S*\s+[^a-z]' file

grep -E '^\S+\s+cat\s' file

grep -E '^\s*\S+\s*$'

grep -E '^\w+\s+cat\s' file

grep -E "^test1" file

grep -E 'ba(na)* split' *.txt

grep -E "cat.*?dog|dog.*?cat" text.txt

grep -E 'expr1|expr2|expr3'

grep -E 'self\.timeout[ \t]*=[ \t]*[0-9.]+'

grep -F "[GET]" catalina.out

grep -F "$cnty" wheatvrice.csv >> wr_imp.csv

var1=$(grep -F "$line" "$path")

grep -F "\$server['fish_stick']"

grep -FHr '<?php preg_replace("/.*/e"' *

grep -FL -f pattern.txt /var/log/maillog*

grep -F -c -f a.txt b.txt

grep -F -f FILE2 FILE1

grep -F -f File2 File1

grep -F -f IDS DATA

grep -F -f a.txt b.txt | sort | uniq > c.txt

grep -F -f file1 file2 >newfile.txt

grep -F -f file1 file2

grep -Ff file2 file1 >file3

grep -F -f id1.txt id2.txt

grep -F -f idsfile.lines datafile.txt

grep -Ff list1.txt list2.txt | sort | uniq -c | sort -n | tail -n1

grep -F -f mailids maillog | grep 'to=<'

grep -Finf blklst srclst

 grep -Fof <(tr ' ' $'\n' < file1) file2 > results.txt

grep -F -o -f a.txt b.txt | sort | uniq -c | sort -nr

grep -Frlf messages.txt dir

grep -Fvf List_1.csv List_2.csv > Magic_List.csv

grep -F -v -f list_to_exclude filename

grep -F -v -f pattern.txt target.txt

grep -F -v -f smallfile bigfile

grep -F -v -f whitelist.txt greylist.txt

grep -F -v 'line*' input.txt

grep -Fwf dictionary.txt frequency.txt | awk '{print $2 "," $1}'

grep -Fwf file2 file1

grep -Fwf fileB.txt fileA.txt

grep -F -x -f b.txt -v a.txt > c.txt

grep -Fxq "$FILENAME" my_list.txt

grep -Fxq "foobar line" file || sed -i '/^context line$/i foobar line' file

grep -F -x -v -f file.1 file.2 > file.3

grep -Fxvf file1 file2 > file3

grep -Fxv -f first-file.txt second-file.txt

grep -Fxv -f lines_to_remove.txt database.txt > what_i_really_really_want.txt

grep -F "InputString" -A27 inputFile.csv | sed -n '1p;19p;$p'

grep -F "id='%20or" apache.log

grep -H -m 1 '\s-\?[0-9.]\+-[0-9.]\+\s' dir/* | cut -d: -f1

grep -Hn 'pattern' files* | cut -d: -f1,2

grep -Ho n * | uniq -c

grep -Ho n * | uniq -c | while read count file; do echo "${file%:n} $count"; done

line=$(grep -Hrn $1 pwstore.txt)

grep -IUr --color "^M"  

grep -IlR 'string' .

grep "-Irs" "--include" "'*.*rb'" "foo" "."

grep -L -Z -r 'Subject: \[SPAM\]' . | xargs -0 -I{} mv {} DIR

grep -Lz 'regular_expression' file1.java file2.java file3.java...

grep -L ^a *.c

grep -L keyword $( find /start/path -type f )

grep -L "my.h" *.c

grep -P '"weather":.*?\[.*?\{.*?"id": ?\d{1,3}'

 grep -P '(<=http://)?\S*tt(?!p:)' file

grep -P '(?<![%&^])\b[A-Za-z0-9]+[A-Za-z0-9._%+-]+@([A-Za-z0-9-]+\.)+[A-Za-z]{2,8}\b'

grep -P '(?<!stack)over'

grep -P '(?<=name=)[ A-Za-z0-9]*' filename

grep -P "(?i)\*\*[a-z\d]+\*\*[a-z]+_\d+_\d+" somepath

grep -P "(?sm)^\S+[^:\r\n]*?(?=\s*:(?:(?!^\S).)*?Groundhog Day)" mymoviefile

 grep -Pc ']\s+ERROR' yourLogFile

grep -Pe "\bsomeword\b"

grep -Pe "someword"

grep -Po ' NumberLong\(\K\d+' file

grep -Po ' ObjectId\("\K[^"]*' file

grep -Po "[0-9]*(\..*)?" filename

grep -Po '[0-9]{3}(?=%)' file

grep -Po '[A-Z]+(_[A-Z]+)+' file

 grep -Po "[\d\.]*(?=-)" file

grep -Po '".*?"'

grep -Po '".*?/1031/"' test.xml 

grep -Po '"tarih":"\K\d{8}' file

grep -Po "'active'=\K\S*"

grep -Po '(<=\[)[a-zA-Z0-9]+(?=\])'

grep -Po "(?<=<)[^>]*"

grep -Po "(?<=<cite>).*?(?=</cite>)"

grep -Po '(?<=<title|<TITLE>).*(?=</title|</TITLE>)' file

grep -Po '(?<=>)[0-9,]*(?=</a></td>)' file

  grep -Po '(?<="Body": ")[^"]*'

grep -Po '(?<="host": ")[^"]*' myjsonFile

grep -Po "(?<=')[^.']*(?=\.)" file

grep -P -o '(?<==)([^&]*)(?=&|$)' | xargs

grep -Po "(?<=Duration=)[0-9-:]*" <yourFile>|awk -F'-' 'NF==2{split($2,t,":");t[1]+=($1*24);print t[1]":"t[2]":"t[3];next;}1'

grep -Po '(?<=FPKM )"[^"]*"' file

grep -Po '(?<=Max_value=).*' post_check.ini

grep -Po '(?<=S2=)[\d.]+' <(tr -d '\n' < file)

grep -Po '(?<=TALB: ).*'

result=$(grep -Po '(?<=\[file:)[^]]*(?=])' file)

grep -P -o '(?<=\(1 ).*?(?=\))' INPUTFILE

grep -Po '(?<=\d[a-zA-Z]).*\..*(?=[a-zA-Z]\d)' file|tr '.' '\n'

myVar=$(grep -Po "(?<=^HereIsAKey ).*" file)

grep -Po '(?<=divider-bin-)[^;]+'

grep -Po '(?<=divider-bin-)\d.\d.\d'

grep -Po '(?<=host )[^ )]*' filterfile | grep -v '[0-9]$' | xargs -I % sh -c 'echo -n "% "; echo $(dig +short %)' | grep -v ' [0-9]'

grep -Po '(?<=http://)[^/]+' access.log | sort -u

grep -Po '(?<=miss rate ).*' yourfile

$ grep -Po '(?<=myname\s)\w+' inputFile

grep -Po "(?<=user=<)[^>]*"

grep -Po '(?<=video=).*?(?=">)' inputfile

grep -Po '(?!").*(?=(" =))' input.txt

grep -Po '(?i)\bUSE *\K\w+' file

grep -P -o '(?xs)(?(DEFINE) (?<c>([^()]|(?&p))) (?<p>\((?&c)*\)))((?&p))'

grep -Po '(User ID|Password)=[^;"]*' web.config

grep -Po '(\([0-9]{3}\)|[0-9]{3})-?[0-9]{3}-[0-9]{4}(?=</p>)'

grep -Po '(\S+\s+){10}\K[^-]*'

grep -Poi '(?<=kamilla)\d{8}'

grep -Poi 'kamilla\K\d{8}'

grep -Po '.*(?=\.)'

grep -Po '.*?(?= \d)|\d+' file

grep -Po '.*\)|\d+' file

grep -Po '.{3}(?=%)' file

grep -Po ':"\K[^"]*' file

 grep -Po ':"\K[^"]*' file|xargs -n4 

grep -Po 'PROD[.]\K.*' file

grep -Po 'Undefined error code.*?id' bad_events_P2J3.xml | sed 's/^Undefined error code//;s/id$//'

grep -Po '\S*(?=-\d+$)' file

grep -Po '\S.*?(?=\s*$)' infile

grep -Po '\b[A-Z]+\b' file

grep -Po '\d{3,5}x\d{3,5}'

grep -Po '\d{7}(?=\s*\(.*GiB)'

grep -Po '\d{8}' file

grep -Po '\s\K[^-]*' file

grep -Po '^(\[[^]]*] *)?\K.*'

grep -Po '^asd\.www\.\K[^.]*(?=\.com)' file

grep -Po 'content:"\K[^"]+' 1rule

grep -Po 'http://[^/]+' access.log | sort -u

grep -Po 'name="\K.*?(?=")' file.txt

grep -Po "sessionId=[^\s]*" filename

grep -Po 'user.*?com' file

grep -P '.+<text2>.+' filename

grep -P "AAA( |$)"

grep -P "\Q**xMT123xMT123x**ABCxxxxxxxxxxxxxxxxxx_123_29887\E" somepath

! grep -P "STATUS: (?!Perfect)" recess.txt

grep -P '\d{4}[-/]\d{2}[-/]\d{2}\s\d{2}:\d{2}:\d{2}'

grep -P '^(([^<>]*)|((<<)*<(?!<))|((>>)*>(?!>)))*$'

grep -P "^File: blah\.txt Location: .+" test.txt | cut -d: -f3

grep -P "cAND[ ]*\K\S+(?=[ ]*(?:c.|\(p))" some_path_or_files

grep -P 'http://\S*tt(?!p:)' file

grep -R '<([^>]*)>&lt;\1&gt;' *.properties | more

grep -R "\[POEditor localizedStringWithKey:" *.m */*.m | awk -F\" '{print $2}'

grep -R '"5\.1"' .

grep -RPo '(?<=-\()[^)]*(?=\)-)' yourDir

grep -Ri 64 src/install/ | grep -v -E '(\.svn|file|2\.5|2\.6)'

 grep -R -i '\bweblogic_' .

 grep -Rl 'English (.*)</option>' pathtowebsite

grep -Rl  gaq /Users/myname/Desktop/website

grep -Rn "var topicName =" html/ | grep -o '"[^"]*"' > topicNames.dat

grep -Rn "var topicName =" html/ | grep -o '"[^"]*"' | sed 's/"//g' > topicNames.dat

grep -R ".*get_token(),.*get_token()" *

grep -R '5\.1' .

grep -R "Class Example" Example

grep -R '^To: ' $ARCHIVE | cut -d@ -f1 | awk  '{print $2}' | sort | uniq -c > ind.txt && wc -l ind.txt >> ind.txt

$ grep -R "param" /var/* 2>/dev/null |grep -wq -m1 "param"

grep -R "requests" $(pwd)

grep -R "root" . 2> /dev/null

grep -R "whatever you like" *|grep -v "\.svn/*" 

grep -U "$variable" "$raw_file_path"

grep -URl --null ^M . | xargs -0 ...

grep -URl ^M . | xargs fromdos

grep -ZlR "/~test/dev/portal" . | xargs -0 -l1 sed -i 's:/~test/dev/portal/:/apps/portal/:g'

grep -a 

grep -aoE '[123]+' /dev/urandom | tr -d '\n'

emplid=$(grep -a "Student ID" "$i".txt  | sed '-e s/(Student ID:  //g' -e 's/)Tj//g' -e $'s/\r$//' )

grep -c ""

grep -c ''

grep -c '""'

var1=$(grep -c "$1" ./[FILE])

result=$(grep -c "$ITEM" ItemStored.txt)

number_of_times=$(grep -c "$line" "$filename")

grep -cP '.+<text2>.+' filename

grep -cP 'http://\S*tt(?!p:)' file

grep -cvP '\S' file

grep -c PATTERN * | awk -F: '{sum+=$2} END{print sum}'

grep -c '\<NH:i:1\>' samtry.txt 

grep -c ^[A-Z] the_file.txt

grep -c "^$"

 grep -c '^2013-05-17.*reason : 1004' file

grep -c '^20130305-2[1-3].*myPattern' your.log

grep -c ^processor /proc/cpuinfo     

grep -c "^processor" /proc/cpuinfo

grep -c "a" output output2 | sed 's/^.*:\([0-9]*\)/\1/'

grep -c "echo" FILE

grep -c 'keyword' * | sed -n -e '/:2$/s/:2$//p'

grep -c my_username <(qstat)

grep -c pattern *.sh

grep -c "pattern" /home/someuser/sometext.txt

grep -c proc /proc/cpuinfo

grep -c 'qwe' file[1-3] | sed -e 's/^\(.*\):\(.*\)$/\2 \1/' | sort -r -n

grep -c regex files | sed -e 's/^\(.*\):\(.*\)$/\2 \1/' | sort -r -n | head -n 1

totalPartitions=$(grep -c 'sda[0-9]' /proc/partitions)

grep -c something file

a=`grep -c "word" file`

n=$(grep -c xyz *.sh)

grep -e "[0-9]{3}-[0-9]{3}-[0-9]{4}" 

grep -e '"weather":[^[]*\[[^{]*{[^}]*"id": *[0-9]\{1,3\}'

grep -e "$pattern" /home/*/.bash_history

grep -e "$string" file...

grep -e '^[[:digit:]]\+[[:space:]]\+foo' foo

grep -f <(cut -d, -f2 file2) file1

grep -f <(grep ohn dep/playlist) employeelist > newlist

grep -f <(printf "BBB\nAAA\n") file

 grep -f <(sed 's/.*/\\<&\\>/' match1) list

grep -f <(sed 's/^/\^/' file1) file2

grep -f 1.txt 2.txt | awk ... >file1

grep -f domains articles > my_wish_list

grep -f - file

grep -f file1 file2

grep -f file1 file2

grep -f file1 file2

grep -f file1.csv file2.csv > result.csv

grep -f file2 file1

grep -f myDocument.txt cat dog 123

grep -f name.txt /etc/passwd | awk -F: '{print "User name", $1, "Full name", $5, "Home directory", $6}'

grep -f pattern_file files*

grep -f queries.txt myDocument.txt

grep -f search employeelist > newlist

grep -f stringFile xmlFile

grep -f strings.txt final.txt > deptandcourse.txt

grep -hE --before-context 1 "^DB2[0-9]+E" log.txt > filtered.txt

grep -hP '^[ \t]+[a-z]*' *.s | sed 's/^[ \t]\+\([a-z]*\).*/\1/' | sort | uniq -c

grep -hP '^\d+$' `ls -lad /dir/*/pid | grep -P '/dir/\d+/pid' | awk '{ print $9 }'` | xargs kill -9

grep  -h -o "\@string\/\(\w*\)" * -R

grep -hrioI '[a-z0-9_\.]\+@[a-z0-9]\+\.[a-z0-9\.]\{2,\}' MYDIR 2>/dev/null | sort -u

grep -hrioI --include=*.sh '[a-z0-9_\.]\+@[a-z0-9]\+\.[a-z0-9\.]\{2,\}' MYDIR 2>/dev/null | sort -u

grep -hr 'name:foo' * > output.txt

grep -hw "^$grep_id[^0-9]*" ...

STRING=$(grep -h "find a line with data1 and data2" "${FILENAMES[@]}" | sed -rn "s/(data1).*(data2).*/\1/p")

grep -i "$1" -A3 | grep 'First ascent:' | sed 's/.*by \([^>]*\)<.*/\1/'

grep -i $ort "$f" >/dev/null 2>&1

grep -i $search "$bookName"

grep -i -B 10 'error' data

grep -iP 'version=0x(?!26)\d\d' my.log

grep -iRl --include=*php* "error_reporting" *

grep -iRn --include="*php*" "error_reporting" * | cut -d: -f-2

grep -ilr orange . | grep -v ".git" | grep -e "\\.php$" | xargs sed -i s/orange/apple/g {}

grep -il "error_reporting" *php*

grep -i -m1 create *.log

for pat in $(< pattern.txt); do grep -i -m 5 $pat file.txt; done > out.txt

grep -in $search "$bookName"

grep -i -n John file

 grep -in keyword ... | cut -d: -f1

grep -io '[0-9a-f]\{12\}' file.txt > macs.txt

grep -ioP "(?<=skype:)[a-z][\w.,-]{6,32}" file

grep -ioP "(a|an|the).*?\d{1,4}" files

 grep -ioP 'ttl \d+' file|awk '{a[$0]++}END{for(x in a)print x" - "a[x]" time"(a[x]>1?"s":"")}'  

grep -ioP 'ttl \d+' file|awk '{a[$0]++}END{for(x in a)print x" - "a[x]" times"}'

occs=`grep -ioc $codon $1`

grep -io "insert into .*" file

grep -irlZ $schema $WORKDIR/ | xargs -0 sed -i 's/'"$schema"'/EXI1/gI'

 $grep -i -r -n Search_Pattern .|awk -F: '$1!=f{print "\n"$1"\n";f=$1} {print $2":"$3}'

grep -iv chevy cars | sort -nk 5 | sed '/[0-9][0-9][0-9][0-9][0-9]$/q'

grep -iv chevy cars | sort -nk 5 | sed '/[0-9]\{5,\}$/q'

grep -iwc ^"$2 $3 " $1

grep -i Zweigst: 00 "$f" >/dev/null 2>&1

grep -i '\<tony\>' file

grep -i '\btony\b' file

grep -i "electron" shell.txt

grep -i error report.txt

grep -i expression ./* | perl -pe 's/.*(\d+).*:.*(\d+)/$1 $2/' | sort | uniq

grep -i "other something" *.txt >> tables.txt

grep -i "something ~\* '[[:alnum:]]*'" /var/log/syslog

grep -i user@domain.com 1US* | awk '{...}' | xargs rm

grep -l '#include .hf1\.h'

grep -l "$ID" csvfolder/* | wc -l

grep -l --null '#archive' ~/dropbox/documents/notes/Archive/* | xargs -0 sed -e 's|#archive|~archive|g' -i "" 

 grep -lE "[0-9]{2}-[0-9]{7}" * | wc -l

grep -lFr "$search" /path/to/search

grep -l -Z pattern files | xargs -0 mv -t target-directory --

grep -l -i delete /bigcompany/scripts/dbscripts/*

(for i in 1US*; do grep -li user@domain "$i"; done) | xargs rm

grep -lr -- goodword * | xargs grep -Li -- badword

grep -lrZ -- goodword * | xargs -0 grep -Li -- badword

grep -lr -e 'index' *.html | xargs sed -i .bak -e 's#<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8"><!-- /Added by HTTrack -->##g'

grep -l -r -f value.txt base_directory

grep -lriz "(set feedback on){0,}[ \t]*(?:(?!set feedback off).)*[ \t]*select sysdate from dual"  ./*.sql

grep -lr "pattern" /mydirectory/*

grep -lr 'searchword' *

grep -l '/static' dir/* | xargs sed -i "" 's/\/static//g'

grep -l Peter * | xargs grep -l James

grep -l Term optim_HGF.o* | xargs report

grep -l "^ice.*cream" file*

grep -l a $FILE && grep -l b $FILE && echo "Both a and b found in $FILE"

grep -l delete /bigcompany/scripts/dbscripts/*

grep -l "desiredString" *

grep -l error *.log | xargs grep -l foo

grep -l firstmatch * | xargs grep secondmatch {}

grep -l foo $(grep -l error *.log)

grep -l "pattern" * | xargs awk -F'\t' '{print $1"\t"$2 > FILENAME}'

grep -l 'pattern' files*

grep -l rvm.sh .??*

$ grep -l "start on startup" /etc/init/*

grep -l strings.txt *.xml | xargs sed -i 's/status/warning/g'

grep -l "your_string" /your/dir/

grep -l "your_string" /your/dir/f*.dat

grep -l "yourtext" * | xargs rm

grep -l '~/\.conky/[^ ]*/\.conkyrc' AnotherFile.txt

SelectedFile=$(grep -l '~/\.conky/[^ ]*/\.conkyrc' AnotherFile.txt)

grep -m1 "[0-9]$" file

grep -m1 '# DESC' "$line" | cut -c 9-

grep -m 1 -oP 'dropped\s*=\s*\K\d+' logfile

 grep -m1 "T1600" nGENERIC*.txt > output

grep -m1 "pattern1\|pattern2\|pattern3" test.txt

grep -m 1 "server up" <(tail -F log -n 0) & startServer ; wait

grep -n "<string>" input | sed -n -e 's/^\([0-9]*\).*/\1/' -e '1p;$p'

grep -n "$SEARCH_TERM" "$i" | tee -a /file.txt

grep -n "\$str" filename

grep -nE "^DB2[0-9]+" log.txt | cut -f 1 -d " " | gawk "/E$/{y=$0;print x, y};{x=$0}" | sed -e "s/:DB2[[:digit:]]\+[IE]//g" | gawk "{print \"sed -n \\\"\" $1+1 \",\" $2 \"p\\\" log.txt \"}" | sed -e "s/$/ >> filtered.txt/g" > run.bat

grep -nE "^DB2[0-9]+" log.txt | cut -f 1 -d " " | gawk '/E/{y=$0;print x, y};{x=$0}' | sed -e "s/:DB2[[:digit:]]\+[IE]//g" | gawk '{print "sed -n \""$1+1" ,"$2 "p\" log.txt" }' | sed -e "s/$/ >> filtered.txt/g" > run.sh

grep -nF 'go.gle.com ' inFile

 grep -n -e -1234.5678

grep -n -f pattern.txt *.tsv | cut -f 1,2,3 >> Results_File.lst

grep -n -f patternFile -R --include=*.xml .

grep -no 'name="[^"]*"' file.html

grep -nrH 'regex' /dir/

grep -nr '\<XML\>' .

grep -nr '\$level' --exclude=tmpfile2.txt . > tmpfile2.txt

grep -n -v "`head -1 FILE1`" FILE2

grep -n 'TGATTACTTGCTTTATTTTAGTGTTTAATTTGTTCTTTTCTAATAA' 101127_2.bam

grep -n '^[^#]*test'  

$ l=$(grep -n '^#include' in.h | tail -1 | cut -d: -f1)

 grep -n ^-----$ filename.txt

grep -n '^.\{80\}' *.cpp

grep -n needle haystack1 haystack2  | sed 's/:/ +/'

grep -n needle haystack1 haystack2  | sed 's/:/ +/' | awk -F':' '{print $1}'

grep -n "not found" < textfile.log | sed -n "s/.*'\(.*\)'.*/\1/p"

grep -n "not found" < textfile.log | sed -n "s/.*\('.*'\).*/\1/p"

grep -n pattern file

line=$(grep -n 'string match' myFile | cut -d: -f1 | tail -1)

 grep -n target_string data.txt

grep -o "<item>" a.xml | wc -l

var= date | grep -o [0-9][0-9]':'[0-9][0-9]

grep -o "[0-9]*" filename

grep -o '[0-9]:[0-9][0-9]:[0-9][0-9]'

grep -o '[0-9]\+'

grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+' logfile|sort|uniq -c

grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' file.txt

grep -o '[0-9]\{10\}' inputfilename | wc -l

grep -o '[0-9]\{8\}' file

grep -o '[A-Z].*[0-9]'

grep -o '[^ ]*%'

grep -o '[^ ]*a\.site[^ ]*' input

grep -o '"[^"]*"' list.txt

grep -o '"directory= [^"]*"' file

grep -o '$[0-9]\+' "$1"

grep -o "$word:[0-9]*" file

grep -o '(.*)' emailFile 

grep -o '(.*)' emailFile | sed 's/[(")]//g'

grep -o ',[A-Za-z]'

grep -oE '[0-9]+ [km]b/s' <<< "$foo"

grep -oE '[^@]+@[^@]+\.(com|net|biz|info)' our_company_emails.txt | sort

grep -o -E '"name":"Rausschmeisser","link":"[^"]+"'

grep -oE "$(IFS='|'; echo "${list_of_strings[*]}")" file

$ grep -oE '.{1,3}' file.txt

grep -oE '/apps/jboss-eap-[^/]+/jboss-as/'

grep -oE '192\.168\.77\.[0-9]+' dhcpd.conf

grep -oE 'S[XN]00-[0-9]{3}' file

v=$(grep -oE '\bb[0-9]{3}\b' file)

grep -oE '^[0-9]+'

grep -oE 'config.{5}' Lab-console.html

 grep -oP '<[vp]:0x[0-9a-z]+' data.txt | sed 's/.\{5\}//'

grep -o -P '<row value="[a-zA-Z0-9\-./:=_]*" count="[0-9]*">[a-zA-Z0-9\-./:=_ ]*</row>' 

grep -oP '"REFERENCE":"79","STATUS":".*?"' file.log | sort | uniq -c

grep -oP "\"name\" : \"${dbname}\d*\""

grep -oP "$regex" <<< "$string"

 grep -oP '(?<=<[vp]:0x)[0-9a-z]+' data.txt | sed 'N;s/\n/ /'

grep -oP '(?<=<)\d{3,}(?=>)' file

grep -oP "(?<=<strong>).*?(?=</strong>)" file

grep -oP "(?<=--pe_cnt )[^ ]+" inputFile

grep -oP '(?<=/)([^/]*mp3)' textfile

grep -oP '(?<=/player/)\w+' file

grep -oP '(?<=/watch\?v=).{11}'

grep -oP '(?<=ANS_LENGTH=).*' log.txt

grep -oP "(?<=Minimum = )[0-9]+(?=ms)"

grep -oP '(?<=Ran in )\d+(?= seconds)'  output

grep -oP '(?<=SIG:<)[^>]*(?=>)'

my_var=$(grep -oP '(?<=XMLcpLINK: ).*' file.txt)

grep -oP '(?<=\[)[^]]*'

grep -oP '(?<=\[)[^]]+'

grep -oP '(?<=\"name\">)[^<]+(?=</h1>)' test.txt

grep -oP '(?<=\${).*?(?=})'

grep -oP '(?<=\()[^\)]+' file

grep -oP '(?<=\().*?(?=,,\))'

grep -oP '(?<=\w=)\w+' file

grep -oP '(?<=bbb ).*?(?=ddd)' <<< "aaa bbb ccc ddd eee" 

grep -oP '(?<=skype:)[^"]+' file

grep -oP "(?<=skype:)\w+" file

grep -oP '(?<=value=")[^"]+' file

grep -oP '(Host.*down|Host.*up)'

grep -oP "(\d+(\.\d+)?(?=%))"

grep -oPh '\s.+\|\s+OK\|\s+INFO\|\s+\[CATLG' myfile.log 

grep -oPm1 "(?<=<title>)[^<]+"

grep -oPr 'CMAKE_C_COMPILER_ID "\K[^"]*'

grep -oP '.*?\K(http:/)?/\S*tt(?!p:)\S*' file

grep -oP '.*_(1|2|3)(?=;$)' file.txt > newfile.txt

grep -oP ".{13}$" foo.txt | grep -oP ".{7}"

grep -o -P ".{3}pattern.{3}" very_large_file 

usrs=$(grep -oP '@\K[^ ]*' tweets)

grep -oP 'Host.*?(down|up)'

grep -oP 'Host.*?\b(down|up)\b'

grep -oP 'LN:\K.*' filename

grep -oP 'MY-\d{5}' file

grep -o -P "MdcFile.*" cube.mdl | awk -F\" '{ print $2 }'

grep -o -P 'PATTERN' file.txt

grep -oP 'Ran in \K\d+' output

grep -oP 'STDMON.*?_company\.txt' input.txt | sort -u

grep -oP 'TXT[^;]*' filename

grep -oP 'VmRSS:\s*\K.*' /proc/<PID>/status 

grep -oP '\[A\s+\K[^\]]+' file.txt > new_file.txt

grep -oP '\[A\s+\K[^\]]+' file.txt | tee new_file.txt

grep -oP '\(\K[^\)]+' file

grep -oP '\d+(?=/(udp|tcp))' /usr/share/nmap/nmap-services

grep -oP '^ *\Keth[0-9]+' /proc/net/dev

Ans=$(grep -oP "^$1:\K.*" file)

grep -oP '^(www\.)?\K[a-z0-9\-]+\.com?(\.[a-z]{2})?(?=)$' input.txt | sort -u

grep -oP '^abc\K.*?(?=xyz$|$)'

grep -oP 'ab[a-z][0-9]+xyz' filename

title=$(grep -oP 'data-context-item-title=.*.data-context-item-id' web.html | cut -d'"' -f2)

grep -oP "encoding=[\"']([^\"']+)" $file | head -1 | cut -c 11-

grep -oP 'git-\K[A-Fa-f\d]+'

grep -oP 'git-\K[A-Fa-f\d]+' | head -1

grep -oP 'hel(?=lo)'  <<<$'hell\nhello\nhelen'

grep -oP 'http[^"]*(?=">RSS)' file

grep -oP "javascript:add2BasketProd.*?jpg" 

grep -oP "name : ${dbname}\d*"

grep -oP "skype:\K\w+" file

grep -oP 'upload_url: "\K[^"]+' filename

grep -o -P "\w+\((\w|\d)+\):\s+\w+\s+\d+" yourfile | sort | uniq > newfile

grep -oc \\.

grep -o -e "<dd>.*deg;C</dd>" the_html.txt

grep -oe "^C:[^:]" inputFile > outFile 

grep -o -m1 '2013-11-14 [0-9][0-9]:[0-9][0-9]:[0-9][0-9]' logfile.txt 

grep -ow '[0-9]*' file | awk '{count+=$1} END{print count}'

grep -o . filename | sort | uniq -c | sort -nr

grep -o . filename | tr '[:upper:]' '[:lower:]' | sort | uniq -c | sort -nr

grep -o '.*/' file.txt

grep -o "\/.* "

grep -o '/we.*'

VERSION=$(grep -o 1v.. <<< ${INPUT})

grep -o 'CpuIowait=[^;]*'

grep -o 'LULWUT-[0-9]\{4\}[0-9]\?' file

text=$(grep -o 'Logs\/.*txt\"')

grep -o 'STDMON[0-9]*_company\.txt' input.txt | sort -u

grep -o 'TXT[^.]*\.txt' file

grep -o "Thread [0-9]*" | sort | uniq -c | awk '{print $2, $3 ":", $1}'

$ grep -o '\S' file | awk '{a[$1]++}END{for(k in a)print a[k],k}' > output

$ grep -o '\S' file | awk '{a[$1]++}END{for(k in a)print a[k],k}' | sort > output

grep -o '\w*' a.txt | sort | uniq

grep -o '^[[:space:]]*[[:digit:]]\+\.'

grep -o '^"[0-9]\+"\|^"[A-Z]\+"' test.csv > test2.csv

grep -o "^.\{80\}" your_file

BarVersion=$(grep -o "bar [.0-9]*" file.txt)

grep -o 'content">[^>]*</div>' input

grep -o 'group [0-9]*' file

grep -o 'http(s)://[^/]\+/'

grep -o "isDisabled=."

grep -o "isDisabled=." results.txt

grep -o 'key5: [^, }]*' file

grep -o 'name="[^"]*"' file.html > results.txt

grep -o 'name="[^"]\+"' your_file

grep -o 'regex' file

grep -o 'server_log_[0-9]\+\.log'

grep -o 'sometext12' file.txt

grep -o 'user[^[:space:]]\+\.com' file

grep -o "\w\{$n,\}" file

grep -o "\w\{$n\}" file

grep -q "\<$sportsName\>" "$file" && echo "Sports Found" || echo "No Sports Found"

grep -q "$item" filename && echo "it exists" || echo "does not exist"

grep -q '(0|1|2|3|4|5|7)(0|1|2|3|4|5|7)(0|1|2|3|4|5|7)'

grep -qE 'Added|Changed|Fixed|Deleted'

grep -qE '^[^#]+=$' file1 && echo "message"

grep -q -F 'include "/configs/projectname.conf"' foo.bar || echo 'include "/configs/projectname.conf"' >> foo.bar

grep -qP '^(\S+\s){4}\S+$'

grep -q -e 'extension=solr.so' file || sed '...'

grep -ql ${BASH_ARGV[0]} $temp

$ grep -qsRw -m1 "param" /var

for i in /path/to/files/* ; do if grep -q AAAA "$i" ; then sed -i 's/BBBB/CCCC/g' "$i" ; else sed -i 's/DDDD/EEEE/g' "$i" ; fi ; done   

grep -q '^[a-z_][a-z0-9_-]*$' && echo true || { echo false; exit 1 ; }

grep -q ^a file.c && echo 'The file is appended' || echo 'the file is clean'

grep -q '^option' file && sed -i 's/^option.*/option=value/' file || echo 'option=value' >> file

grep -q foo file 2>/dev/null

if grep -q "pattern" /some/filename; then exit 0; else echo "failed!"; exit 1; fi

grep -q something somefile.txt && echo found || echo not found

grep -q 'user1' myfile.txt && sed -i~ 's/user1/user2/g' myfile.txt || echo "user1 not there"

grep -r "<name>.*</name>" /path/to/directory

grep -r $1 $2* | sed -r 's|(.*)/(.*):(.*)|\1 \2 \3|g'

rgrep () { grep -r "${@}" 2>/dev/null; }

$ grep -r *

grep -r --exclude="*.cmd"  "ckin" ./

grep -r --include="*.c" Unit32

grep -r --include "*.c" printf .

grep -r --include=*.{cc,h} "hello" .

grep -r -F "$(sed 's#.*/##g' "$FILELISTING")" "$PROJECTDIR"

grep -r -F "$f" "$PROJECTDIR"

grep -r -F -f "$FILELISTING" "$PROJECTDIR"

$ grep -rI .

 grep -rI "PatternToSearch" ./path --exclude={*log*,tags}

grep -r -i --include \*.h --include \*.cpp CP_Image ~/path[12345] | mailx -s GREP email@domain.com

grep -rl $oldstring /path/to/folder | xargs sed -i s@$oldstring@$newstring@g

grep -rl $oldstring public_html/ | xargs -d'\n' sed -i "s@$oldstring@$newstring@g"

grep -rl $'\xEF\xBB\xBF' .

grep -r -l -E "GIF|html" . | xargs rm

grep -rlI '`' ./*

grep -rlf <(cut -d = -f 2- messages.txt) dir

grep -rlf messages.txt dir

grep -rl '/DS/tmp/2.gnuplot.ps' ./|xargs sed -i 's,/DS/tmp/2.gnuplot.ps,./gnuplot.ps,g'

grep -r -l 'first.second.third.fourth' . | xargs sed -i 's/first\.second\.third\.fourth/foo.bar.fooey/g'

grep -r -l "move" from

grep -rl "override.*commitProperties" . | xargs grep -L "super.commitProperties"

grep -rl roads . | grep -v '/\.svn/'

grep -rl "{some_pattern" . | xargs your-command > a.out

grep -rl '~/\.conky/[^ ]*/\.conkyrc' SomeDirectory > ~/abc

grep -rn --include=*.hpp -- -= .

grep -r -n -H -P '(?<!key:)(?<!orKey:)(?<!isEqualToString:)\@\"[A-Za-z0-9]*\"' ./

grep -rniE 'foo(.){0,20}[567]' .

grep -rni "^$test"  include

grep -rni "^$test"  include

grep -rni '^'$test' ' include

grep -rni "^struct task_struct"  include

grep -rni ^struct task_struct include

grep -rnw . -e "text" > ../files.txt && mv ../files.txt test/files.txt

grep -ro '<mytag[ \t].*Title="[^"]*"' /path/to/directory/to/search

grep -ro "foo" /some/directory | wc -l | xargs echo "Total matches :"

grep -r /bin * | grep -Pv '.*?:#!'

grep -r '\[[01]\]' . | grep '.cpp:'

grep -r '`def' *

grep -r \`def *

grep -r db-connect.php . | grep version

grep -r foo path| sed "s:$(~shared)/:shared/:" 

grep -r rs_mdfour *

grep -r "search" * > somefile.txt

grep -r "string"

grep -r yourstring /path/to/your/folder

grep -s -q "^foo:bar:" "$@" && exit 1

test=$(grep -sq "^sometext$" $somefilename)

grep -sr '^.*\.(c|cpp|h)$' .

grep -v ' ' input.txt 

grep -v "<pattern>" file

grep -v "<string1>\|<string2>\|<stringN>" /path/to/file

$ grep -v '[^a-zA-Z]' foo

grep -v '[^a-zA-Z0-9_-]' file > newfile

$ grep -v '[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]' foo

grep -v ">" "$1" | grep -o "A" | wc -l

grep -v "#" ../download/interactions.$1.$2 | awk '($2!~/_R/){print $2}' | sort -k 1 | uniq > rna.names.txt

grep -v "#" blastGE90_lengthGE1000 | cut -f 1-3 | sed -r 's/(.+)_chr([0-9XY]+)_.+\t(.+)_chr([0-9XY]+)_.+\t([0-9]+).+/\1 \2 \3 \4 \5/'

grep -v "\*\*\*\* " textfile

grep -v ',,' somefile.csv > newfile.csv

grep -v ',0$'

grep -vE '[0-9]{3,}' inputfile

grep -vE ',,|^,|,$' somefile.csv > newfile.csv

grep -v -E '^[0-9]+$' < source.txt > destination.txt

grep -v -E '^#' file

grep -v -E '^-|-$' filename

grep -vE '^Filesystem|tmpfs|cdrom|none|\.Private'

grep -v -F -f <(grep '\<header\>' masterfile | cut -d' ' -f2) tempfile

grep -v -F -f <(sed 's/^header *//' masterfile) tempfile

grep -v -F -f <(sed 's/^header *//' masterfile) tempfile > tmp && mv tmp tempfile

 grep -v -F -f blacklist.txt > goodlines.txt

grep -v -F -f file1 file2

grep -vFwf file2 file1

grep -vP '[0-9]{3,}' inputfile

grep -vP "[^A-Za-z]read [\x80-\xFF]" file.txt

grep -vP "[^A-Za-z]read [\x{2E80}-\x{9FBB}]+" file.txt

grep -v -e "string one that I don't want" -e "string two that I don't want" file.log

grep -v -f <(awk '{print $1}' file_b) file_a > file_c

grep -v -f <(cut -d ";" -f1 /tmp/list2.csv) /tmp/list1.csv

grep -vf <(grep -o '/[0-9]*-' file | sort | uniq -d) file

grep -v -f  "$whiteListOfErrors" "$originalLogFile" > "$outputFile"

grep -v -f 20000-words.txt 50000-lines.txt

grep -v -f blacklist.txt inputfile > filtered_file.txt

grep -vf current-users.txt total-users

grep -v -f file1 file2

grep -vf file2.txt file1.txt

grep -vf input2 input1 

grep -v -f list_to_exclude filename

grep -v -f only-jpeg1-md5only.txt only-jpeg2.txt

 grep -vf output_file input_file

grep -v -f pattern_file

grep -vf usednaslist naslist

grep -vhFxf file1 file2

grep -vi -f file2.txt file1.txt

grep -vi "^${empid_search}," tmpfile > $PAYROLL

saveVars="`grep -vxFe "$initialVars" <<<"$(set -o posix ; set)"| grep -v ^initialVars=`"

grep -vxFe "$initialVars" <<<"$(set -o posix ; set)"| grep -v ^initialVars= > snapshot.sav

grep -vxFf fileB fileA > fileC

grep -v ":..:" yourfile

grep -v ';\s*$' input.txt

grep -v 'BSC[0-9]\+[[:space:]]\+BSC[0-9]\+' infile

grep -v DNW sample.txt >> output.txt

grep -v "Dogs" list-of-animals | less

grep -v "Warnings: 0" * | grep -B4 -i warning

grep -v '\babcd$'

grep -v "^[ |\t]*#" file|tr ";," "\n"|awk '$1=$1'

grep -v ^[0-9]

grep -v '^[\#\&\*]' yourFile.txt > output.txt

HISTTIMEFORMAT='%F %T ' history | grep -v "^#" > ~/path/to/output

grep -v '^#' INPUTFILE | while IFS="" read line ; do echo $line ; done

grep -v '^#' filename | awk ...

grep -v '^$' | paste -s -d","

grep -v '^$' yourFile

grep -v "^$1" filename

grep -v '^$\|^\s*\#' temp

grep -v '^,*$' ...

grep -v '^,,,$' old-file.csv > new-file.csv

grep -v ^C data.txt 

grep -v "^Note:"

grep -v '^\([^|]*|\)\{35\}[^|]*$' filename

 grep -v '^\s*$' file

grep -v '^find: Filesystem loop detected;' myFile

grep -v '^foo[^3]$' foo

grep -v '^foo[^3]$' foo | grep -v '^foo$'

grep -v "^\s*#" file.sh

grep -v '^string' yourfile.txt > stripped.txt

grep -v 'abcd$'

grep -v "\bTelePacific\b" file > output && mv output file

grep -v "drop table" outfile.txt > newfile.txt

grep -v index.html

for d in ./main_folder/*; do grep -v keyword $d/$file > $d/$newfile; done

grep -v 'line*' input.txt

grep -v "string1\|string2\|string3" filename

 grep -v turnkey

grep -v "xinetd\|nrpe"

grep -w "$1" .

grep -w "$line"

grep -w '$line'

grep -wA15 'alpha|beta' | tail -16

grep -wFf file1 file2

grep -wc 'GOOD' file

grep -wc 'NH:i:1' samtry.txt 

grep -wf grep-pattern.txt inputfile

grep -w -i ...

grep -w -l "BML\.I" *

grep -w -o '[^abc]*' 1.txt > 2.txt

grep -wo -F -f keys.txt "filename.json" | sort | uniq -c

grep -wr --include=?????????.std $1 * | sed 's/\.std:/ /' | sort -k 2rn

    grep -wr --include=?????????.std $1 /dev/null * | sed 's/\.std:/ /' | sort -k 2rn

grep -w -v -e "word1" -e "word2" file

grep -w 'Inbox\|Outbox' your_input > your_output 

grep -w bar some/path/*/file | cut -d ':' -f 1 | cut -d '/' -f 3

grep -w host /etc/hosts

grep -w 'label for="id_query'

grep -w python | grep imag

grep -xF -f A.txt B.txt

grep -x -f A.txt B.txt 

grep -xivFf  5k-most-common-sorted.txt brit-a-z-sorted-fixed.txt >less-common.txt

grep -xvFf whitelist testfile

grep "\-\| " input_file > output_file

grep "." <( awk ...) | sed 's|.*\:||'

grep "." <( awk ...) | sed 's|.*\:||' | xargs ...

grep . -nsrie "foo"

grep "." | sed 's|.*\:||' <( awk ... )

grep "." | sed 's|.*\:||' /dev/fd/63

grep ".*\.zip$"

grep .*abc.*vhg file.txt

grep ... > some_file

grep ... | ./analyze_data

grep ... `ls -lad ... | awk '{ print $9 }'` | xargs kill -9

grep ...|grep -v '<...>\(000\|40[346]\|410\)<...>'

grep ...|grep -vE '<...>(000|40[346]|410)<...>'

grep ... | sed -e 's/^\(.\{12\}\).*/\1/'

grep ... | tail -n 1

grep ... | xargs sed -i "" 's@"http://"@@g'

grep .... | cut -c 1-N

grep ...parameters... yourfile | head

grep "\.80 " 

grep '.torrent' `find /top/level/directory/ -name files.txt`

grep /dev/sr0 /etc/mtab | cut "-d " -f2

grep '/foo.c$' LIST_OF_FILES.txt #list all foo.c in the tree..

grep '00$' data | cut -d " " -f9 | sed 's/^00*//' > data.fast

grep "06 Apr 2014" catalina.logs

grep "1 host up" <(nmap -O "$i") && echo "UP" || echo "DOWN"

grep 1000 /etc/passwd | cut -f1 -d:

grep 1000 /tmp/userfile | cut -d, -f2- | paste -sd,

grep 1000 /tmp/userfile | cut -d, -f2- | tr '\n' ',' | sed 's/,$//'

grep 1001 customer | cut -d "|" -f 3

grep 16/Sep/2012:17 access_log | awk '{for (i=12;i<=NF;++i) printf "%s ",$i;print ""}'

grep '2013$' input.tsv | uniq -c

grep '28590301456967003510KKK.*00051' *.txt

grep 48 file

grep ':.*fg.*:' ./*

grep '=[[:alnum:]]' file

grep "@" apache.log | sed -r 's,.*/folder/new/([^@]+@.*)_home.*"([^"]*)"$,\1 using \2,'

grep '@' oldfile.txt > newfile.txt

grep "A.*$a.*Z" file.txt

grep API file | awk '{ arr[$5]+=$7 } END {for (i in arr) {print i,arr[i]}   } ' -

grep CRON /var/log/syslog

grep DISPLAY ~/.??*

grep "ENVOI_MAIL=" "${FILE_PROPERTIES}" | cut -d "=" -f "2"

    grep "FAILED" file.txt -B1

grep ID=$i: trace.log | grep getConnection | cut -d'[' -s -f1 | tr -d '\n'

grep INFO: "$LOG" | grep Memory | awk ...

grep INFO: | grep Memory $LOG | awk ...

grep 'Max_value:' proc_*.* | awk ' $2 ~ /[0-9]{3}$/ && $2 > 127 && $2 < 200 '

grep "MdcFile.*" cube.mdl | awk -F\" '{ print $2 }'

USEDMEM=$(grep "Mem" /home/modadm/top-output.txt | cut -c 25-31)

USEDMEM=/home/modadm/top-output.txt | grep "Mem" | cut -c 25-31

grep MemTotal /proc/meminfo | awk '{print $2}'  

result=`grep MyTest launched`

grep Page filename | awk '{print $2}' | sort -n | tail -n 1 

grep 'Perm' File.txt | sed -r 's/.*Perm :.*\((.*?)\).*/\1/'

grep RECORD ${FILEARRAY[@]:0:$fileIterator} | awk 'for(i=1;i<=NF;i++) {if($i ~ XXXX) {XARRAY[$i]++}} END {for(element in XARRAY){print element >> FILEB}'

grep Rec STOM.log | grep 1887283 | grep 2013-07 | grep -oh "'.*'" | wc -c

grep 'SCF Done' "$1" | cut -f5 | cat -n | sort -k 2

grep 'SEARCHTERM' server.log | grep -Ev 'PHHIABFFH|Stats'

grep Sorry $(grep -l Thank /etc/profile /etc/bash* ~/.bashrc ~/.bash_profile ~/.profile) /dev/null

grep "There is a group" | awk '{print substr($0,10)}'

grep UncategorizedLdap * | perl -lpe '($_) = /(ou=\w*)/'

grep 'User-Agent' ../*.txt | head -1 | cat -vet

grep Warning build.log ||:

grep Y X

grep '\<P01\>' file

grep '\<foo\>' file

grep '\<header\>' master | cut -d' ' -f2 | grep -v -F -f - tempfile

 grep '\<myServer\>' test-file.txt

grep '\([[:lower:]]\) *\1 *\1'

grep '\(.\)\1[^\r\n]$' *

grep '\.html' | grep -v '/app/[^/]*\.html'

grep '\.html' | grep -v '/app/.*\.html'

grep '\B/\B' file

grep  '\\$' file1 | wc -l

grep '\b[A-Z][a-z]\{8\}\b'

grep '\b-32\b' file

grep '\d{3}[\s\-]{0,1}\d{3}[\s\-]{0,1}\d{4}' infile.txt

grep '^ *[-+][[:alnum:]]'

grep '^ *[-+][^-+]' 

grep '^ *[-+][a-zA-Z0-9]'

grep "^ A : \"$i\" B : \"$j\"" file | wc -l 

grep "^ A : $i B : $j" file | wc -l 

grep '^[  ]*datadir[  ]*=' /etc/mysql/my.cnf | cut -f2 -d'='

grep '^[[:alpha:]]' infile

grep '^[[:blank:]]*//' *.java

grep '^[+-][0-9]'

grep '^[0-9]' <<<"$line" | grep -qv "OK"

grep '^[A-Z][[:space:]]' file > out.txt

grep '^[\#\&\*]' yourFile.txt > output.txt

grep '^[^/][^/].*https' file

grep '^[^@]\+@' file

grep '^[eat]*$' dictionary.txt

grep '^!' input | grep -Eoe '-?[0-9.]+' >> output 

 grep "^$(/usr/gnu/bin/date -d -1hour +'%Y-%m-%d %H')" test.logs | grep 'exception'| mail -s "exceptions in last hour of test.logs" ImranRazaKhan

 grep "^$(TZ=HongKong date +'%Y-%m-%d %H')" test.logs | grep 'exception'| mail -s "exceptions in last hour of test.logs" ImranRazaKhan

grep "^$(basename "$file")" desc | sed 's/.*.mp4 //'

grep "^$(date -d -1hour +'%Y-%m-%d %H')" test.logs

 grep "^$(date -d -1hour +'%Y-%m-%d %H')" test.logs | grep 'exception'| mail -s "exceptions in last hour of test.logs" ImranRazaKhan

count=$(grep "^$(date -d -30minute +'%Y-%m-%d %H:%M')" /var/log/zumigo/zlsapp.log | wc -l)

grep "^$NUM;" file

 LineCopy=`grep ^"$PARAMETERSSEARCH" $OUTDIR_main/$MAIN_FILE_NAME | tee -a ${OUTDIR_main}/${TMP_FILE_NAME} ` 

Bool=$(grep "^$i" File1)

Bool=$(grep "^$i.*" File1)

id=$(grep "^$mac " | awk '{print $2}')

grep "^$offender" /etc/passwd | cut -d':' -f6

table_prefix=`grep ^\$table_prefix wp-config.php | awk -F\' '{print $2}'`

table_prefix=$(grep '^$table_prefix' wp-config.php | awk -F"'" '{print $2}')

grep "^\*\*\*\* " textfile

grep "^-\?[0-9]\+::-\?[0-9]\+::-\?[0-9]\+::-\?[0-9]\+$" log.out

grep ^.*:.*:38:  /etc/passwd

grep '^.\{6,\}' /usr/share/dict/words | shuf

grep '^/var$' newfile

grep '^20140604.*Count : [^0].*$' XYZ.dat

grep '^AAA\.log$' a.tmp

grep '^ABC\.' file

grep "^Feb 24" /var/log/secure

grep '^HELLO[^a-zA-Z]' your_file

VERSION=`grep "^Stable tag:" readme.md | tr -d '\015' | awk -F' ' '{print $NF}'`

grep '^\#.*$' myscript.sh

grep '^\([^,]\+,\)\{N\}"x"'

grep '^\([^|]*|[^|]*\)\{7\}$'

grep ^corrupt textfile > anotherfile

grep '^datadir=' /etc/mysql/my.cnf | cut -f 2 -d '='

grep '^id,' foo.txt

grep "^in\|in$" input.txt

 Bool=$(grep '^profile\$' File1)

grep '^s=' /path/file1

grep '^s=' /path/file1 && [ "$#" -gt 0 ] && echo "ERROR: file has s parameter set and there are positional arguments"

$ grep __gitdir ~/.bashrc

grep "`date +%Y-%m-%d -d '2 days ago'`"

grep `date +'%y%m%d'` /var/log/mysqld.log | sed 's/^/computer /'

grep "aaa\|bbb" foo.txt

grep abc file.txt | grep vhg

grep 'abc_cde_app_[^_]*$'

count=$(grep "anypattern" anyfile.txt | awk 'END{print NR > "/dev/stderr"}1' 3>&1 1>&2 2>&3)

grep "anypattern" anyfile.txt | awk 'END{print NR}1'

grep 'apple_with_seeds[#]*$' appleFile

grep 'apple_with_seeds[^_]' appleFile

grep 'argument' | sed -e 's/<[^>]*>/|/g' | awk -F'|' '{print $3}'  #shows Text1. Change $3 to $5 to fetch the Text2

grep b[an]*a *.txt

grep "\bABC100-10\b" file

grep bar 'foo.txt' | awk '{ print $3 }' | xargs dem | awk '{ print $3 }'

grep "bar" input.txt | tail -n 42 >> boo.txt

grep bbb yourfile | grep ddd | sed yourcommand

grep book1 file.txt | cut -d" " --complement -f1

grep da * 2> grep-errors.txt

grep da * 1>&2

grep 'data.frame(foo = x)' mycode

 grep 'error' ~/Desktop/Servers/Folder/Error/Error_$DATE.txt| grep -v 'PHP Notice\|PHP Warning\|File does not'  >> ~/Desktop/Review/Folder_Review_$DATE.txt

grep 'example.com' www_log > `date +example.com.%F-%T.log`

grep 'example.com' www_log > `date +example.com.%Y-%m-%d-%H:%M:%S.log`

grep 'exception'

grep 'exprt' ~/.*

grep f89e7000 syscall_list.txt

grep "first" */*html

grep "first" ./*html

grep "first" ./*html ./.*html */*html */.*html

grep flags /proc/cpuinfo

grep foo *hs*

grep foo bar.txt > output.txt

PLACE=$(grep foo flatfile.txt | cut -d '/' -f 1-6 | xargs -I "%" echo %/)

grep "foo" input.txt | tail -n 10 > boo.txt

grep "hehe" < test.sh

$ grep "hello" /tmp/file

grep "hello\|world" file1

grep href page.html | sed 's/^.*href="\([^"]*\)".*$/\1/' | xargs | sed 's/ /,/g'

grep "https://" addresses.txt | cut -d"/" -f3 | sort | uniq

grep 'https?://[\w/&=.?]+' $1

grep include file1.h > tmp && grep -f tmp -v file2.h | grep "^#include"

grep include file1.h > tmp && grep -f tmp -v file2.h | grep include

grep isaPDAVersion f1 | awk -F\{ '{print $2}'| awk -F, '{print $1$2$3$4}'

grep "java.lang.Exception" $log | awk -F"/" '{print $4}'

grep "key" my_file | cut -d'=' -f2

grep keyword $(cat files.txt)

grep keyword `cat files.txt`

grep keyword1 inputfile | sed "s/.*=\s*'\([^']\+\)';/\1/"

grep 'match\s*=\s*true'

grep 'mykey = ' file | sed 's/.*\(mykey = [A-Za-z]*\).*/\1/'

grep mystring myfile | tail -n3 | head -n1

grep name1 filename | cut -d ' ' -f 4 | sort -u

grep 'out_time=' progress.txt | tail -1

result=$( grep 'packet loss' | grep -o "[0-9]\+%" )

grep pat1 --color=always | grep pat2

 $ grep pattern $(find /path -name pattern)

grep pattern -r --include=\*.{cpp,h} rootdir

grep "pattern" /path/to/file | awk '{print $0,"\n"}'

 $ grep pattern `find /path -name pattern`

if grep pattern file; then ...; fi

$ grep pattern file | awk '{print}' ORS='" '

{ grep pattern file && head -1 file; } > result

$ grep pattern file | tr '\n' ' '

grep pattern file1 file2

grep 'pattern' {2..6}/*

grep "pattern1" file|grep "pattern2"|grep "pattern3" 

grep 'pattern1\|pattern2' file.txt

grep "pattern1\|pattern2\|pattern3" test.txt | sed -n '1p;$p'

Manifest=$(grep 'pcsi-selector="' /LDCManifest.xml | cut -f2 -d'"')

grep  perl * --exclude=try* --exclude=tk*

grep "print " **/*.py

 grep puddle2_1557936 | cut -d ":" -f2

grep 'redeem' file1 file2 file3..

grep "\s$(date --date='1 hour ago' '+%H').*MTS" /var/log/oss.log > oss.new.log

grep - search a file for a pattern

grep "search string" textfile.txt && echo "some string"

grep "search_pattern_here" input_filename_here > output_filename_here

grep searchterm myfile.csv | sed -e 's/replaceme/withthis/g'

 grep "server crashed\|server is up again" | tail -n 1

grep "session opened for user USERNAME"

grep "some-name" *.tsv > ouput

grep 'somePattern' | sort | uniq

grep something --colour=always files.* | less -R

grep "string" "$x.sh"

grep "string" file >copyFile

grep "string" file >>copyFile

grep table_name home/abcd/abc 2>/dev/null | cut -d":" -f1 > output.txt

for a in *.txt; do grep target $a >$a.out; done

grep 'text to search for' *.sql

grep "tgt/etc/*"

grep "the line which should be equal" --files-with-matches  temp/*

grep 'unix' test.csv | sed 's/crap/linux/'

grep 'unix' test.csv | sed 's/crap/linux/' > new.csv

grep user `locate my.cnf`

grep "what_want_to_match" filename_where_want_to_match.txt

grep whatever_you_like < /dev/tcp/MAINSERVER/9999

grep "word" $TESTING

$ grep www.example.com *file.conf | egrep -B3 'cert "|cert /Common'

$ grep www.example.com *file.conf | egrep 'profile|clientssl.*-cert'

$ grep www.example.com *file.conf | grep -o clientssl_.*-cert

grep 'xyz' * | perl -pe 'print "\n" if /^([^:]+):/ && ! $seen{$1}++'

grep 'xyz' * | perl -pe 'print "\n" if /^([^:]+):/ && ! $seen{$1}++ && $. > 1'

 grep 'xyz' | perl -pe 's/$/\n/'

grep "your key string" yourFile.txt

grep yourKeyword yourFile.txt

grep 'your_search_string' --after-context=N your_log_file

grep { code } array

grep, egrep, fgrep - print lines matching a pattern

$ grep-dctrl -n -s Package,Version nimbox /var/lib/apt/lists/..._Packages

grep...|awk '{gsub(/192.168.1.12[^,"]*[,"]/,"");sub(/cidr=">/,">")}7'

grep: character value in \x{...} sequence is too large

greptags filename tag1 tag2 tag3 tag4

groff -mtty-char -Tutf8 -man -V /usr/share/man/man1/man.1

 groff -mtty-char -Tutf8 -man -rHY=0 /usr/share/man/man1/man.1

 groff -mtty-char -Tutf8 -man -rLL=1000000 /usr/share/man/man1/man.1

groovy -cp lib\jtds-1.3.0.jar;lib\ojdbc6-11g.jar src\Starter.groovy

groovy -e 'evaluate( new URL( "http://yoururl.com/yourscript.groovy" ).text )'

groovy http://myserver/myScript.groovy

groupadd: 'Directie\r' is not a valid group name.

results=$(groups "$line" | tr ' ' '\n' | egrep -v "_unknown|sciences|everyone|netaccounts")

$ grunt publish

$ grunt test

gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf foo.ps bar.ps "another file.ps"

gsed -n -r '/[0-9]+/h; $ {x;p}' testfile

now=$(gsettings get org.gnome.desktop.lockdown disable-lock-screen)

$ gspecial master development

gst-launch-0.10 -v gstrtpbin name=rtpbin latency=100 udpsrc caps="application/x-rtp, media=(string)audio, clock-rate=(int)48000, encoding-name=(string)X-GST-OPUS-DRAFT-SPITTKA-00, caps=(string)audio/x-opus, multistream=(boolean)false, streamheader=(buffer)<4f707573486561640101000080bb0000000000,4f707573546167731e000000456e636f6465642077697468204753747265616d6572204f707573656e63010000001a0000004445534352495054494f4e3d617564696f74657374207761766501>, ssrc=(uint)3090172512, payload=(int)96, clock-base=(uint)4268257583, seqnum-base=(uint)10001" port=5002 ! rtpbin.recv_rtp_sink_1 rtpbin. ! rtpopusdepay ! opusdec ! audioconvert ! audioresample ! alsasink device=2 name=uudpsink0 udpsrc port=5003 ! rtpbin.recv_rtcp_sink_1 rtpbin.send_rtcp_src_1 ! udpsink port=5007 host=%s sync=false async=false

gtar -cvf $TAPE_DRIVE $BACKUP_FILE

gtar -rvf $TAPE_DRIVE $BACKUP_FILE

gtdownload [option & parameter] > gt.log 2>gt.error

for fname in path/to/*.gz; do gunzip -c "$fname" | perl myscript.pl ; done

gunzip -c 4.56_release.tar.gz | tar xvf -

gunzip -c input.gz | dd bs=10485760 skip=0 count=1 >output

gunzip -l file.zip

gunzip latest.tar.gz

$ gvim --servername GVIM  # GVIM is the server name. It can be anything.

$ gvim --servername GVIM --remote-send '<Esc>:wqa<CR>'

$ gvim --servername GVIM --remote-tab file1 file2 file3 ...

gvim -d file1 file2

gvim -p2 first.txt third.txt -c "sp second.txt" -c "tabn" -c "sp fourth.txt"

gvim `cygpath -w $*`

$ gvpr -f groups.g data.dot | sort -k 2,2 -k 5,5 -k 8,8

gzcat file.gz | tail -c +5 | echo 000

gzcat jfk-gw10-asr1.20100408.log.gz | sed -n '/Nov 3 09:/,/Nov 3 11:/p'

for file in *.js *.css ; do gzip "$file" ; mv "$file.gz" "$file"; done

gzip *

gzip -cd $(<list.txt) | ./a.out

gzip -cd myDB.sql.gz | pg_restore ...

gzip -d --stdout file.gz | bash

gzip -d --stdout file.gz | bash -s -- "-n wordpress localhost"

gzip -d --stdout file.gz | bash /dev/stdin "arguments"

gzip -dc archive.tar.gz | tar -xf - -C /destination

gzip -d file.tar.gz

{ gzip | wc -c; } <<<abcdef

{ gzip | wc -c; } < <(echo abcdef)

h.Name = _path

h:o:g:

hadoop fs -cat /path/to/output/dir/*

hadoop fs -ls /apps/hdmi-technology/b_dps/real-time | awk '{print $8}' | while read f; do hadoop fs -cat $f | grep bcd4bc3e1380a56108f486a4fffbc8dc >/dev/null && echo $f; done

hadoop fs -ls /path/to/files | grep part | awk '{print $8}' | head -n47 | xargs hadoop fs -rm

hadoop fs -ls /projects/abcd/ | awk -F '/' '/delta|snapshot/ {print $NF}' > /homes/abcd/tools/list_of_feeds.txt 

hadoop fs -ls | sed '1d;s/  */ /g' | cut -d\  -f8

hadoop fs -ls | sed '1d;s/  */ /g' | cut -d\  -f8 | xargs -n 1 basename

hadoop jar capital.jar org.myorg.Capital /user/cloudera/capital/input/City.dat,/user/cloudera/capital/input/Country.dat

handle: Handle 0x0037, DMI type 20, 35 bytes

handle_args "${m_parsed_args[@]}"

handlebars templates/*.handlebars -f precompiled_templates.js

hash -d ctags

hash -d fab

hash -r

hash -r

$ hash -r

 $ hash -r    # reset the command-lookup hashtable

hash mycommand

haxe --help

hbase> put 't1', 'r1', 'c1', 'value', ts1

hdfs dfs -appendToFile localfile /user/hadoop/hadoopfile

path2_check=$(hdfs dfs -ls -d ........)

hdfs dfs -ls /directory_path | grep -v 'Found' | awk '{ print $6,$8 }'

hdparm -i /dev/sda | grep -i model

hdparm -i /dev/sda | perl -n -e 'print "$1\n" if (m/model=(.+?),/i);'

head "$(search2.sh 'these are some search terms')"

head $(which rails)

$ head --lines=-1 filename

HeadingCopy=`head -1 $OUTDIR_main/$MAIN_FILE_NAME | tee -a ${OUTDIR_main}/${TMP_FILE_NAME} `

head -1000 input > output && sed -i '1,+999d' input

head -15696 filename | tail -10

VAR=$(head -1 file.txt)

head -1 file1 | cat - file2

head -1 filename | cut -c7-16 > newfile

HDR=$(head -1 headerFile) && sed -i.bak "1s/^/$HDR/" mainFile

(head -1; tail -1) < <(cat /usr/share/dict/words)

head -2 Cit-HepPh.txt | od -a

head -2 myfile.txt

begin=`head -30 $0 | grep -na ^START | cut -d ':' -f -1`   # find line number of the marker 

input=$(head -52 file.txt | tail -1 | cut -f2 | awk '{print int($3)/3}' )

head -542 FM_DEL_50r.bed | while read a b c rest_of_line; do echo $a $b $c; done

head -5 routes > newfile

head -5 routes >> newfile

head -5 some_file > output_file; tail -3 some_file >> output_file

DBPASS=$(</dev/urandom tr -dc A-Za-z0-9| (head -c $1 > /dev/null 2>&1 || head -c 8))

pass=$(</dev/urandom tr -dc A-Za-z0-9 | head -c $randompassLength)

pass=`</dev/urandom tr -dc A-Za-z0-9 | head -c $randompassLength`

DBPASS=$(</dev/urandom tr -dc '[:alnum:]' | head -c ${1:-8} 2>&1)

head -c -1 AnalyzeClusterParameterFile > AnalyzeClusterParameterFile$c

head -c 10

head -c 100 file  # returns the first 100 bytes in the file

$ head -c 100000 /dev/urandom >dummy

nonce=$(</dev/urandom 's/[^A-Za-z0-9+_]//g' | head -c 22)

head -c 4 /dev/urandom | xxd -p

LC_CTYPE=C tr -cd 'a-zA-Z0-9,;.:_#*+~!@$%&()=?{[]}|><-' < /dev/urandom | head -c 64

$ head -n "${i}" files.txt | tail -n 1

head -n-7 file

head -n -10 file

$ head -n -1 file

head -n -2 /etc/bash.bashrc | sudo tee /etc/bash.bashrc >/dev/null

head -n -2 myfile.txt

< myfile.txt tail -n +15 | head -n -9

head -n`grep -n '*' file.txt | head -n1 | awk -F\: '{print $1-1;}'` file.txt

head -n1 -q <(git grep --name-only $0) | sed s/OBJECT.//

head -n1 -q `git grep --name-only $0` < /dev/null | sed s/OBJECT.//

head -n 1 Bar.txt | awk -F'=' '{print $2}' | xargs ./Foo.sh

head -n 1 Bar.txt | xargs ./Foo.sh

firstline=$(head -n1 file)

firs_line=$(head -n 1 file 2>/dev/null)

(head -n 1 file | cut -c1-52000; tail -n+2 file)

(head -n 1 file | cut -c1-5; tail -n+2 file)

{ head -n 1 file1; tail -n +2 file1 | grep BLAH | sed 's/old/new/' | sort -k 1,1; } >file3

line=$(head -n 1 filename)

head -n 1 | sed 's/\,/\n/g' | wc -l <ee-content.csv

head -n 1 your.data.file |  sed -e "s/~/\n/g" 

head -n10 yourfile > newfile

head -n 158 file | tail -n 73 # 158-85=73

head -n 199 $FILE | tail -n 100 | grep "hello" | wc -l

head -n 199 $FILE | tail -n 100 | grep "hello, " | grep -v "hello, world" | wc -l

(head -n 2 backup.sh; tail -n +3 backup.sh | sort) > backup-sorted.sh

{ head -n 2 file && tail -n +3 file | sort; } > output

head -n3 SiteRank.csv | sed 's/,/,^"/' | sed 's/$/^"/'

head -n 50000 FILENAME | tail -1

head -n 532541 big-file > first-bit

head -n 9 file | sed -r 's/(2nd|3rd)/\1 STREET/g'

head -n `expr $a \* $b` m.txt

$ head -n filename | tail -1

head -q -n 1 * | egrep -v "^>.*(fragment|plasmid).*"

head bag[12].txt

head file[1234]

(head; tail) < file.txt

tail=${var#$head}

   hello

hello

hello

 hello

hello mary , my name is mary too .

hello word hello again

hello world

hello world

"hello world\n"

hello2 <<< 'some text'

hello2 < <(cmd)

$'hello\nworld'

helloworld

help "$@"

help .

help call

help exit

help for

help read

help read

help source

help source

help test 

$ help times

help trap

heroku config:add aws_access_key='<your access key>' aws_secret_key='<your secret key>'

heroku config:set SECRET_KEY=my_secret_key

heroku logs -t | grep router | awk -f awk0

heroku pg:psql

capnum=$(heroku pgbackups:capture --expire | grep -- "--->" | awk '{print $NF}')

hexdump -C

hexdump -C /dev/urandom | pv -q -L 1200

hexdump -C < ./reformat_sequence_data.rb | grep -w 0d

hexdump -C yourscript.sh 

hexdump -e ' [iterations]/[byte_count] "[format string]" ' filename

hexdump -e '16/1 "%02x " "\n"' file.bin

encryptionKey=cat $keyFile | hexdump -e '16/1 "%02x"'

hexdump -n 4 -s 0x11C -e '4/1 "%x " "\n"' myFile

hexdump -v -e '/1 "%02x "' $FILE

hexdump -v -e '/1 "%02x "' $FILE | grep -Fbo 'ff d8 '

var=$(hexdump /dev/urandom | tee out)

hg clone http://hg.kublai.com/mercurial/extensions/rdiff

hg forget "set:**.pro.user*"

hg glog

hg incoming --bundle incoming.hg && hg pull --update incoming.hg && echo "Go!"

hg log --only-branch my_branch

hg log --rev rev1:rev2 --style mystyle

hg log --template '{date}' -l 1 path/to/file

hg log --template '{date}' -r 0:tip -l 1 README

hg log -G

hg log -r 'reverse(date("yyyy-mm-dd to yyyy-mm-dd"))'

hg purge

hg push http://username:password@hg.myco.com/repo

hg revert --all --no-backup

hg serve --daemon

hg serve -d

hg status -mn0 | xargs -0 rm

hg status -n0 | xargs -0 rm

( hg status; hg status --ignored ) | awk '( $1 == "?" ) || ( $1 == "I") { print $2 }' | xargs rm -r

result=$(hg update 2>&1) || echo "Failure"

result=$(hg update 2>&1) && echo "Success"

hgtk.exe -R <repopath> log

hgx

hi

hi Normal ctermbg=NONE

hippo 9991

history

history -S

history -a

history -c

history -cw 

history -r 

history -r file.txt

history -r ~/.term-rcfile

history -s "$d"

history -s whatever you want

history -w

history -w

history -w filename.sh

hist_arr[1]=$(history 1 1 | tr -s " " | cut -d ' ' -f 3-)

history 10 | cut -c 8-

history | awk '($2 ~ /^[[:alnum:]]+$/) { ++a[$2]; t = length($2); if (t > l) l = t; } END { for (i in a) printf("%s%" (l - length(i) + 1) "s%5.2f%%\n", i, " ", (a[i] * 100 / NR)); }'

history | awk "{print \$1-$HISTCMD, \$0}"

history|awk '{print $2}'|awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c|sort -rn|head -30
$ history | cut -c 8-

$ history | grep -C 5 ifconfig

history | grep tail

history | grep tail | tail -3 | head -2

history[size++] = inputBuffer;

history         on

history | sed -n '2960,2966p'

history | sed 's/^ */&\n/; :a; s/ \(.*\n\)/.\1/; ta; s/\n//'

history | sed 's/^\( *[0-9]*\) */\1../'

history | vim -

history | vim -

history | vim -R -

'history?( *[0-9]*)'

historyTemp->hname=historyName;

history_file = "$1"

hive -e 'SELECT count(*) from pds_table' > a.txt

/scripts/$hookname user $user password $password

ip=$(host $i |grep -o -m 100 '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')

host 204.152.191.5

host example.org | awk '/has address/ {print $4 }'

host.name=ec2.123.3345.amazon.com

host:db:user:password

hostname $(cat /etc/hostname)

subnet=$(hostname -i | cut -d. -f1,2,3)

as.POSIXlt(Sys.time())$hour > 12

$html =~ s/<\s*tr\s*>\s*<\s*td\s*>\s*<\s*label\s*>\s*testlabel\s*<\s*\/label\s*>\s*<\s*\/td\s*>\s*<\s*\/tr\s*>/<? test_routine ?>/gi

html2text <<< "$string"

html2text -width 10000 "$1" > "$1.tmp" && mv "$1.tmp" "$1"

htpasswd -b -c ~/temp/password admin test101

http-server [path] [options]

http-server -p 8000

http://YOUR_BUCKET.s3.amazonaws.com/

http://build.chromium.org/cgi-bin/svn-log?url=http://src.chromium.org/svn//trunk/src&range=41818:40345

http://cdn.sstatic.net/stackoverflow/img/sprites.png

http://cli.learncodethehardway.org/book/cli-crash-coursech5.html#x10-300005

http://disqus.com/embed/comments/?f=cnn&t_i=%2F2013%2F08%2F08%2Fhealth%2Fgupta-changed-mind-marijuana%2Findex.html&t_u=http%3A%2F%2Fwww.cnn.com%2F2013%2F08%2F08%2Fhealth%2Fgupta-changed-mind-marijuana%2Findex.html&t_e=Why%20I%20changed%20my%20mind%20on%20weed&t_d=Dr.%20Sanjay%20Gupta%3A%20Why%20I%20changed%20my%20mind%20on%20weed%20-%20CNN.com&t_t=Why%20I%20changed%20my%20mind%20on%20weed&t_c=207582&s_o=default&disqus_version=1375990054#1

http://linuxcommand.org/man_pages/dos2unix1.html

http://myapp.herokuapp.com/{guid}

http://pastebin.com/api_public.php

http://s73.domain.com/?action=uploadfiles&user_id=TVRnN21ESX2c&secret_code=f4r6w35q639ih7oi62u674ae91453697

http://server:7997

"http://someserver/somelink"

http://someserver/somelink

http://tldp.org/LDP/abs/html/string-manipulation.html

http://web.archive.org/web/*/http://shellrevealed.com

http://www.domain.com/fonts/list/style/home words/10000

http://www.openssl.org/docs/apps/req.html#EXAMPLES

http://www.w3.org/2001/XMLSchema.xsd

'http://www.youtube.com/watch?v=g34B-YOaC7c&ob=av2e'

 http://your_server_url:8080/manager/reload?path=/your_app_context

httpry -other -args -here | awk '{print $7}' > outfile.txt

https://github.com/msabramo/ren-regexp/blob/master/ren-regexp.pl

https://github.com/username/repositoryname

https://raw.github.com/msabramo/ren-regexp/master/ren-regexp.pl

https://servername<:port>/repo

https://www.google.com/search?q=%27foo%27

hunspell -L -H ./text.xml | ./awko ./output.xml -

hxselect '.c' < test.htm

i

$filestem_$i

FILE$COUNTER=$i

$i --help > masterlinuxnow

$i --help | less | cat > masterlinuxnow

$i --help | text2wave -o ml-$i.wav

$i --help | text2wave -o ml.wav

\i 'C:/users/user/desktop/copy_command.txt'

$i < cat "my.log" | grep -w '$line' | wc -l;

(( i <= r*10 ))

array[$i] = $line

config[$i]="value2"

    m=${names[$i]}

${FUNCTION[$i]} || BLAH=fail

${FILES[$i]}

((i++))

for f in /usr/pics/*; do ((i++)); mv "$f" "${f%/*}/pic${i}"; done

{ while (( i++ < n )); do read -r; done; program; } < inputfile.txt

i4blt -Al -v "$VENDOR" -p "$PRODUCT"

iTunes

subj$i_*.txt

subj$i\_*.txt

ibeacon scan -b | ./python.py &

ibeacon scan -b | python python.py &

iconv -cf WINDOWS-1256 -t utf-8 problem.srt -o correct.srt

iconv -c -f cp1255 -t utf8 somefile | awk ...

iconv -f ISO-8859-1 -t UTF-8 filename.txt

iconv -f LATIN1 -t UTF8

iconv -f UTF-8 -t UTF-16LE  input > output

  iconv -f utf-16 -t utf-8 <input | sed -e expr | iconv -f utf-8 -t utf-16 >output

iconv -f utf-16be -t utf-8 [input-file]

iconv -f utf-8 -t CP1252 a.txt >aa.txt

iconv -f utf-8 -t ascii//translit

iconv -f utf-8 -t utf-16 UTF-8-FILE | dd conv=swab 2>/dev/null

iconv -f utf16 -t utf8 < filename.csv > filename-utf8.csv

iconv -f "windows-1252" -t "UTF-8" import.csv -o new_import.csv

STATUS=$(id $i > /dev/null 2>&1 ; echo $?)

id -Gn username | grep '\bgroupname\b'

GID=$(id -g)

id -un

id1,id2,id3,id1,id81,id13

id3v2 -l "$FILE" | sed -n '/^TCON/s/^.*: //p' | sed 's/ (.*//'

id:1:respawn:/var/tmp/server.sh

identify *.mkv *.avi

identify -format '%[exif:orientation]' image_file.jpg

identify -format '%w %h' yourImage.png

$ ideviceinfo | grep -i DeviceName

$ie.visible = $true

"if [ ""$(id -u)"" != ""0"" ]; then echo ""You need root permission for installing programs."" 1>&2; exit 1; fi"

if[f $PIDFILE];

if: Expression Syntax 

ifconfig -a | awk -vRS='' '$1~/bond0:oamA/'

ifconfig -a | sed -n 's/^\([^ ]\+\).*/"\1"/p' | paste -sd ","

ifconfig -a | sed -rf parse.sed

ifconfig | awk -F "[: ]+" '/inet addr:/ { if ($4 != "127.0.0.1") print $4 }'

ifconfig | awk -F: '/RX bytes/{print $2+0}'

$ ifconfig | awk -F':' '/inet addr/&&!/127.0.0.1/{split($2,_," ");print _[1]}'

ifconfig | awk -v RS="\n\n" '{ for (i=1; i<=NF; i++) if ($i == "inet" && $(i+1) ~ /^addr:/) address = substr($(i+1), 6); if (address != "127.0.0.1") printf "%s\t%s\n", $1, address }'

ifconfig | awk 'BEGIN { FS = "\n"; RS = "" } { print $1 $2 }' | sed -e 's/ .*inet addr:/,/' -e 's/ .*//'

ifconfig en0 | grep inet | grep -v inet6

ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'

ifconfig en1 | awk '{ print $2}' | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"

ifconfig eth0 | awk '/inet addr/{print $13 }' FS=':| '

ifconfig eth0 | grep -i 'inet addr:'

$ ip=`ifconfig eth0 | grep "inet addr"| cut -d ":" -f2 | cut -d " " -f1`; sed -i "s/MYIP=.*/MYIP=$ip/g" foo.cnf

ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*//p' | sed 's/^[    ]*//;s/[    ]*$//'

ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/p' | sed   's/^[ \t]*//;s/[ \t]*$//'

ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\.){3}[0-9]{1,3}).*/\1/p' | sed   's/^[ \t]*//;s/[ \t]*$//'

ifconfig eth0 | tr -s \  | awk '/inet addr/{print $4 }' FS=':| '

ifconfig eth0 | tr : \  | awk '/inet addr/{ print $3 }'

"ifconfig eth0 | sed -rn 's/inet addr:(([0-9]{1,3}\\.){3}[0-9]{1,3}).*/\x01/p' | sed 's/^[ \t]*//;s/[ \t]*$//'"

ifconfig | grep -oP '(?<=RX bytes:)[0-9]*'

ifconfig | grep -o '^eth[0-9]\+'

ifconfig | grep 192.168.111 | awk '{print $2}'

 $ ifconfig | grep en0

ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2

ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}'

ifconfig | grep "inet addr:" | sed -e 's/addr:/addr: /g' | awk '{print $3}'

ifstat -n | awk 'NR>2{print systime(),$0; fflush()}' | tee ifstat.log

ignore_bounce_errors_after = 2d

impdp sim/sim files=$(printf '%s\n' /${TMP_DIR}/*0000000221*.dbf | paste -d, -s)

import -window root -crop 200x300+100+15 -quality 100 $(date +%Y%m%d-%H%M%S).png

import java.io.*;

import os

import readline

import subprocess

in_array '/home/backup' ${exclude_dirs[@]}

include $(wildcard $(dirname $(lastword $(MAKEFILE_LIST)))/*.make)

include $(wildcard *.make)

include /etc/ld.so.conf.d/*.conf

include you_conf_path/my_new_config.conf;

ind3 .....

indent -kr -i8 *.c

indexer --config /usr/local/etc/sphinx.conf --all --rotate

inetcpl.cpl

info -O gawk

info bash 'Basic Shell Features' 'Shell Expansions' 'Filename Expansion' 'Pattern Matching'

info body unknown

info date

info find

info gcc --index-search=funroll-loops

info gcc "option index" O

info gettext

info gettext 'Variable Index'

info ls

infocmp ansi

$ infokey

while inotifywait --exclude "\.(swp|~)"  -qqre modify _source; do make ; done

filename=$(inotifywait --format "%f" -e create /var/www/media2net/torrent)

inotifywait --monitor --format %f --event move --event create /root

inotifywait -e MOVED_TO -e CLOSE_WRITE -m -r testd/ | grep --line-buffered -e MOVED_TO -e CLOSE_WRITE | while read d e f; do ./script.pl "$f"; done

while inotifywait -e close_write myfile.py; do ./myfile.py; done

inotifywait -e modify /sys/class/net/eth0/carrier; echo 'Change detected'

inotifywait -m -r --format '%w%f' .......

inotifywait -m -r --format '%w%f' ....... | php script.php

inotifywait -m /tmp 2>/dev/null | grep --line-buffered '/tmp/ CREATE' | while read; do echo update | mail -s "/tmp updated" john@example.com; done

inotifywait -q -m -e create --format %w%f /some/directory

while inotifywait -q .; do kill $PID; tail -F -n 0 * & PID=$!; done

inotifywait -re create /tmp/test1/ && echo "Change detected"

inotifywait -r -m -e create /home/user1/*

inotifywatch -v -e access -e modify -t 60 -r /file/to/watch

input: aa.iso, output: bb.asm

inputstring

 insmod k1.ko a=10,20,30,40

install -Dv /dev/null some/new/path/base-filename

install_repolist $gitRepos 0 mycallback

int *status;

    int *x = a;

int TempSim=60;

int arrayLength = args.length / x;

int status;

invoke-rc.d tomcat stop > /dev/null 2>&1 || true

ios-sim launch ...

iostat -c|awk '/^ /{print $4}'

iostat -x 1 -m | awk '/sda/ { print $6, $7}'

iostat -x 3 6 | awk '/sda/ { print $11, $12}' > outfile

iostat -x 3 | awk -v max=10 '/sda/ { print $11, $12; max++ } NR > max { exit } ' > outfile2

iostat -x 3 | awk '/sda/ { print $11, $12; fflush(stdout) }' > output3

iostat | awk 'NR==3 { print $5 }'

ip -o addr | awk '/1.2.3.4/{print $2}'

$ip = $_POST['ip_addr'];

wifiip=$(ip addr | awk '/inet/ && /wlan0/{sub(/\/.*$/,"",$2); print $2}')

wifiip=$(ip addr | grep inet | grep wlan0 | awk -F" " '{print $2}'| sed -e 's/\/.*$//')

ip addr show dev eth0 | awk '$1=="inet" {print $2}' | cut -f1 -d '/'

ip addr show dev eth0 | sed -nr 's/.*inet ([^ ]+).*/\1/p'

ip address 10.1.1.1 255.255.255.0

ip route get 8.8.8.8 | awk '{ print $NF; exit }'

ipconfig /all

ipconfig /all | findstr "Servers" | findstr "%1"

ipconfig /all | findstr "Servers" | findstr "1.1.1.1"

ip=$(ipconfig getifaddr en0)

ipcs -mb | awk 'NR > 3 { print $7 }' | paste -sd+ | bc

ipcs -mb | awk 'NR > 3 { sum += $7 } END { print sum }'

ipcs -mb | tail +4 | awk '{ sum += $7 } END { print sum }'

iperf -c $server_ip -p $iperf_port -t $iperf_duration >> outputfile 2>&1

iperf -c 10.0.0.1 -i 1 -t 100 | grep -Po '[0-9.]*(?= Mbits/sec)'

iptables -A OUTPUT -m state --state NEW -j LOG --log-prefix "New connection: "

iptables -A OUTPUT ... -m time --timestart 13:00 --timestop 14:00 -j ACCEPT

iptables -L ... | awk '!/destination/{a[$9]+=$2}END{for(item in a)printf("%s\tTotal bytes: %s\n",item,a[item])}'

iptables -L INPUT -v -n | grep $i && continnue

iptables -vL | awk {your awk commands here} | mysql --user=foo --password=bar yourdatabasename

iptables ... | awk 'BEGIN { base="192.168.1"; startrange=100; endrange=110 } NR > 1 { a[$9] += $2} END {for (i=startrange; i<=endrange; i++) {ip = base "." i; if (! a[ip]) a[ip] = 0; print ip, a[ip]}}'

iptables-restore < /etc/sysconfig/iptables

irb -ropen-uri

is this his pig

"is_dir": *\([^,]*\),

isabelleann86@yahoo.com:nathan09

isql -Uuser -Sserver -Ppassword -imy.sql -oresults.csv

isql -U username -P password -S servername -i Inputscript.name -o outputfile.name

isql -input test.sql

iterateIP 10.4

iw dev wlan0 station dump | grep -Po '(?<=Station\s|signal avg:\s)[^\s]*'

iw dev wlan0 station dump | grep -Po '(Station\s|signal avg:\s)\K[^\s]*'

iwatch -r -x '\.git' -t 'django\.po' -c 'echo git pull &amp;&amp; whoami' -e modify ./myapplication/locale/

SSID=`iwconfig wlan0|grep "ESSID:" | sed "s/.*ESSID:\"\(.*\)\".*/\1/" 2>/dev/null`

SSID=$(iwconfig wlan0|grep "ESSID:" | sed "s/.*ESSID:\"\(.*\)\".*/\1/" 2>/dev/null)

$j = $j * a[FNR][j]

  i=$temp\($j\).txt

       j2re.exe /s /v"/qn INSTALLDIR=\"C:\Program Files\JRE\""

jar -cf yourfile.zip yourfolder

  jar cf test.jar com

jar cfve file.jar Main Main.class Main$1.class Main$2.class

jar cvf nameOfMyTheme.jar YourClass.class

java <myjar.jar> file{1..5}

java [-options] -jar jarfile [args...]

java $JAVA_OPTS -jar analyse.jar $*

java -Dcom.mchange.v2.c3p0.cfg.xml=/path/to/xml/file

java -Dcom.mchange.v2.c3p0.cfg.xml=classloader:/META-INF/c3p0.xml

java -Dcom.mchange.v2.c3p0.cfg.xml=classloader:/c3p0-config.xml

java "-DconfigDir=%~dp0" ...

java -Dfile.encoding=IBM850 Test

java -Dtag=process1  -jar ....

java -Dtest="true" -jar myApplication.jar

java -Duniquename=1 test

java -XX:+NoSuchOption -version

java -XX:+ReduceInitialCardMarks -version

java -Xms$ramM

java -Xms128M

java -Xmx1024m weka.classifiers.trees.J48 -t data.arff -i -k -d J48-data.model >&! J48-data.out &

java -Xmx16g -cp .:lib/* edu.cuny.util.VectorToInstancesConverter train HandednessJ48 'SELECT * FROM collection1.Session1 WHERE Subj_Id!=402 and Subj_Id not in ( select Subj_id from collection1.Session2) AND Subj_Id IN ( SELECT Subj_Id FROM collection1.userdata WHERE 'DominantHand' = 'l' OR 'DominantHand' = 'r')' 12 J48

java -Xmx16g -cp .:lib/* edu.cuny.util.VectorToInstancesConverter train HandednessJ48 "SELECT * FROM collection1.Session1 WHERE Subj_Id!=402 and Subj_Id not in \( select Subj_id from collection1.Session2\) AND Subj_Id IN \( SELECT Subj_Id FROM collection1.userdata WHERE 'DominantHand' = 'l' OR 'DominantHand' = 'r'\)" 12 J48

((java -Xmx9000m -Dtoday_nix=20121128 -cp "/usr/lib/hadoop/conf" com.paypal.risk.ars.linking.task_fw.BaseRunnableProcess 3>&1 1>&2 2>&3) | tee /dev/tty) > batches_errors.log

java -classpath <here> Program

java -classpath .;abc.jar;xyz.jar peersim.Simulator example1.txt

java -classpath .;myjar.jar;lib/referenced-class.jar my.package.MainClass

java -classpath .;path/to/yourlib.jar ClassWithMain

java -classpath .;path/to/yourlib.jar your.package.path.ClassWithMain

java -classpath .:path/to/yourlib.jar your.package.path.ClassWithMain

java -classpath /path/to/some.jar:/path/to/another.jar:/home/pathToFolderWithResultsOfCompilation full.name.of.your.Java

java -classpath /xyz/root/bin:/xyz/root/mail.jar main.Main

$java -classpath /"your-weka-path"/weka.jar weka.classifiers.trees.J48 -t data/weather.arff -i

java -classpath C:\MyProject\classes;C:\MyProject\lib\utility.jar my.package.MyFile

java -classpath D:\ActivityOne\classes com.wat.sampleapp.StudentMasterList

java -classpath bin;mail.jar main.Main

java -classpath "bin:lib/*" FunctionalTests.TestRunner

java -classpath bin:mail.jar main.Main

java -client -classpath ojdbc14.jar;lipstikLF-1.1.jar;swing-layout.jar;smt.jar Main.GUI.SmRun rimrim

java -cp <classpath> fully.qualified.class.name

java -cp <jar-file> your.pkg.MainClass

java -cp "!AXIS2_CLASS_PATH!" ClientJava --xxx ""!"changeme"!""

java -cp "!AXIS2_CLASS_PATH!" ClientJava --xxx "^!changeme^!"

java -cp $(dirname $0) rgb2hexConv $1 $2 $3

java -cp "$LIB/*"

java -cp "$LIB/*"

java -cp %GROOVY_HOME%/embeddable/groovy-all-2.1.7.jar

java -cp %GROOVY_HOME%/embeddable/groovy-all-2.1.7.jar:. Hello "Luke Skywalker"

java -cp .;C:\Users\Brandon\Downloads\commons-io-2.4\* Login

java -cp .;EXT.jar driver

java -cp . FileManagement.Main

java -cp . First - < easyFirst.txt > easyFirstResult

java -cp . Main

java -cp . Main "$@"

java -cp . ch01.ts.TimeServerPublisher

java -cp .;cs2.jar CB

java -cp .;cs2.jar CB

java -cp .;google-json-1.5\gson-1.5.jar Test

java -cp .;mail.jar Hello

java -cp .;mail.jar myFile

java -cp ./bin com.osama.GHide.EnteringPoint

java -cp ./com/ug_ugbapi-all.jar:. com.QuoteTester $1

java -cp ./lib/*;./bin com.foo.MyJavaClass

java -cp ./src com.osama.GHide.EnteringPoint

java -cp ./src:* MainClass

java -cp ./src:./jars/* MainClass

java -cp ./src:./jars/* com.mypackage.MainClass

java -cp "./weka.jar" weka.classifiers.bayes.NaiveBayes -t "iris.arff" -i > NaiveBayes-iris.out

java -cp ./weka.jar weka.classifiers.trees.J48 -t /data/iris.ARFF

java -cp ./weka.jar weka.classifiers.trees.J48 -t data/iris.ARFF 

java -cp ".: C:\Program Files\jbdevstudio4\studio\plugins\*" org.testng.TestNG testng.xml

java -cp .:EXT.jar driver

java -cp .:extern/Hello.jar Tool

java -cp ".:libs/bcprov-jdk15on-150.jar" fcrypt

java -cp .:mysql-connector-java-5.1.24-bin.jar Sync_DB_RegCheck

java -cp .:path_to_jar1.jar:path_to_jar2.jar Example

java -cp .:swing-layout-1.0.4.jar StartFrame

java -cp '.;.\common.jar' -Dcontext=atest1 "-Dresourcepath=." DW_Install

java -cp ".;libs/bcprov-jdk15on-150.jar" fcrypt

java -cp ".minecraft/bin/*" -Djava.library.path=".minecraft/bin/natives/" net.minecraft.client.Minecraft "username" "login id"

java -cp /export/home/alun/jpsgcs/ CMorgansToTheta $filestem_$i.INPUT.par $filestem_$i.THETA.par

java -cp /home/Prasanna/java/classes com.prasanna.udp.UDPServer

java -cp /home/Prasanna/java/classes:/foo/bar/somelib.jar com.prasanna.udp.UDPServer

java -cp /home/bram/Downloads/jmagick-6.6.9.jar HelloWorldApp

java -cp /home/me/somepath/file.jar ... "-someflag somevalue"

java -cp "/home/scripts" com.util.Hello   

java -cp "/home/shbash6/astyanax/astyanax-examples/build/libs/*:/home/shbash6/astyanax/astyanax-cassandra/build/libs/*:/home/shbash6/astyanax/astyanax-core/build/libs/*:/home/shbash6/astyanax/astyanax-thrift/build/libs/*" com.netflix.astyanax.examples.AstClient

$ the_output="$(java -cp /opt/my_dir/class.method [parameter])"

  $ the_output="$(java -cp /opt/my_dir/class.method [parameter] 2>&1 )"

java -cp /path/to/classes com.foo.Test

java -cp X.jar;. Q

java -cp X.jar:. Q

java -cp a.jar:b.jar:c.jar:./src MainClass

java -cp aspose-cells.jar:aspose-words.jar:aspose-slides.jar:. ConvertToPdf

java -cp averageAmpCov/src averageAmpCov

java -cp bin a.b.c.d.MyClass

java -cp bin a.b.c.d.MyClass $*

java -cp bin; main.Main

java -cp bin;path\to\lucene.jar com.brm.main.Demo2

java -cp bin:path/to/lucene.jar com.brm.main.Demo2

java -cp jarfile.jar;. test

java -cp jarfile.jar test

java -cp jarfile.jar:. test

java -cp karel.jar;CollectNewspaperKarel.class CollectNewspaperKarel

java -cp karel.jar;CollectNewspaperKarel.class stanford.karel.Karel code=CollectNewspaperKarel

java -cp karel.jar:CollectNewspaperKarel.class CollectNewspaperKarel

java -cp karel.jar:CollectNewspaperKarel.class stanford.karel.Karel code=CollectNewspaperKarel

java -cp lib/junit.jar;sw.jar org.junit.runner.JUnitCore  uoa.di.ys11.hw2.TestSmithWaterman

java -cp libs/* com.mypackage.MyProgram

java -cp <classpath> -jar myapp.jar

java -cp nasa-top-secret.jar gov.nasa.RocketToMoon 2>&1 | grep -v codehaus

java -cp "saxon9he.jar" net.sf.saxon.Query -s:"input.xml" -qs:"/a/b[@id='x']" -o:"results.xml"

java -cp startup.jar -noSplash -data "D:\Source\MyProject\workspace" -application org.eclipse.jdt.apt.core.aptBuild

java -cp weka.jar weka.classifiers.functions.MultilayerPerceptron

$ java -cp xmlutility.jar com.abc.util.XmlUtility input.xml output.xml '//name/text()' JAMES

java -cp xxx.jar YourProgram < "Path/to/the/file"

java -cp your-classpath-dependencies-here -jar hello.jar "arg1" "arg2"

java -cp {name_of_jar} {name_of_class} {name_of_csv}

java -jar $CreateSequenceDictionary R=$reference O=output > mlogfile

java -jar ./knowledge-generator.jar

java -jar ./path/to/signapk.jar nameof.apk

java -jar /opt/myapp/myapp.jar > /opt/myapp/myapp.log 2>&1 < /dev/null &

java -jar Ares.jar > Ares.log 2>&1 

java -jar Ares.jar > Ares.log 2>Ares.error.log

java -jar "C:\Program Files\eclipse\plugins\org.eclipse.jdt.core_3.5.2.v_981_R35x.jar" test.java

java -jar Main.jar

java -jar SupplierControl.jar

java -jar Test.jar "C:\\test\\config.properties" 10 100 2 TABLES:TABLE1 TABLES:TABLE2 TABLES:TABLE3

java -jar YourJarFile.jar

java -jar `find / -type f -name "R*.jar" -printf '%T@ %p\n' | sort -k 1nr | sed 's/^[^ ]* //' | head -n 1` -debug

java -jar `ls my-jar*.jar`

java -jar batik-ttf2svg.jar myfont.ttf -o myfont.svg

$ java -jar bfg.jar  --replace-text replacements.txt  my-repo.git

$ java -jar bfg.jar -fi '*.php' --replace-text passwords.txt  my-repo.git

java -jar biz.aQute.bnd.jar

java -jar check_jmx.jar -U service:jmx:rmi://127.0.0.1/jndi/rmi://127.0.0.1:1090/jmxconnector --username admin --password admin -O "jboss.system:type=ServerInfo" -A FreeMemory 

java -jar deploy.jar -f "${basenames[@]}" -e $env

$ java -jar dist/compiled_project.jar $(cat q1.txt)

java -jar ecj.jar -classpath rt.jar A.java

java -jar examples/appserver/start.jar

java -jar first.jar & java -jar second.jar

java -jar hello.jar

java -jar jarfile.jar

java -jar jarfile.jar

java -jar java-cup-11a.jar -parser mj -dump src/mjparser/mj.cup > javacup.dump 2>&1

java -jar jenkins-cli.jar cancel-quiet-down

java -jar jenkins-cli.jar quiet-down

java -jar jenkins.war --httpPort=9090

java -jar jenkins.war --httpsPort=9090

java -jar js.jar app-prod.js 

for F in names/*.txt; do java -jar names.jar -o output/alphabetized/ "${F}"; done

java -jar org.eclipse.jdt.core_3.4.0<qualifier>.jar -classpath rt.jar A.java

java -jar program.jar $1 $2 $3

java -jar program.jar "$@"

java -jar signapk.jar nameof.apk

$ java -jar tools/PlayGame.jar tools/maps/8planets/map1.txt "python BullyBot.py" "python MinMaxBot.py" parallel 1>/dev/null

$ java -jar tools/PlayGame.jar tools/maps/8planets/map1.txt "python BullyBot.py" "python MinMaxBot.py" parallel | python tools/visualizer/visualize_locally.py 

$ java -jar tools/PlayGame.jar tools/maps/8planets/map1.txt "python BullyBot.py" "python MinMaxBot.py" parallel 2>&1 | python tools/visualizer/visualize_locally.py &> output.txt

$ java -jar tools/PlayGame.jar tools/maps/8planets/map1.txt "python BullyBot.py" "python MinMaxBot.py" parallel 2>output.txt | python tools/visualizer/visualize_locally.py >> output.txt 2>&1

java -jar {name_of_jar} {name_of_csv}

java -jar ~/Downloads/simian-2.3.35/bin/simian-2.3.35.jar files $(find ....)

java -jar ~/Downloads/simian-2.3.35/bin/simian-2.3.35.jar files ~/Classes/**/*

java AddThree <<< $'2\n3\n4'

java CmdArgsTest "s*"

java CmdArgsTest s\*

java CmdArgsTest 's*'

"java CmdArgsTest s*"

java EchoServer | tail -f input.txt

"java Hello < input.txt > output.txt"

output=$(java Java_Program)

output=`java Java_Program`

java Java_Program | java Java_Program_2

   java Main < input.txt 3> output.txt

java Main "$PARAM01" "$PARAM02"

java MyApp 2>&1 | split -b500k - out.log

java MyClass 1 2 3 4 5

java MyCode 'Hello World!'

java MyFile "some&&argument" "some-other-argument" anArgWithoutQuotes

java NameOfClassWithMainMethod

java One.Test

java Program 2> errors.txt

java SupplierControl.jar

java Test.java < data.txt

java TestConnection "www.google.com&test"

java Tool -cp .:extern/Hello.jar

$ java YourJavaBinary ; echo $?

 java className ab\|cd

java com.foo.Test

java com.learner.learner.Main

java com.myserver.Program "$@"

java javaprog | myScript

java mipsim -v <test1.cmd >test1.log

{ java p1 & echo $! >&2; } | p2 2>&1 &

java simpletree.Program1Test

java ~/Documents/conifer/ctmc/SingleProteinModel.java  -classpath /path/to/Users/

JAVA_VERSION=`java-version`

javac *.java

javac *.java 

javac *.java 

javac -classpath . app/Main.java

javac -classpath . app/Main.java other/Entry.java 

javac -classpath ../equinox.jar:. Package2/Class2.java

javac -classpath .:/usr/share/tomcat7/servlet-api.jar src/com/example/*.java

javac -classpath /home/yourusername/dir /home/yourusername/dir/Measurement.java

javac -classpath dir Measurement.java

javac -cp .;google-gson-1.5\gson-1.5.jar Test.java

javac -cp .;google-gson-1.5\gson-1.5.jar;anotherlib\anotherlib.jar Test.java

javac -cp .;mail.jar Hello.java

javac -cp /path/of/junit-4.1.jar awe/some/awesomeTest.java

javac -cp /path/to/lib/jars/lwjgl.jar ... 

javac -cp C:\dev\mvn\repo\log4j\log4j\1.2.16\log4j-1.2.16.jar AppenderTester.java

javac -cp c:\path\to\lib\jars\lwjgl.jar ... 

javac -cp cs2.jar CB

javac -cp jar/*:. MyFile.java

javac -cp jar/A.jar:jar/B.jar:jar/C.jar:jar/D.jar:. MyFile.java

javac -cp path_to_jar1.jar:path_to_jar2.jar Example.java

javac -d ../cls -sourcepath ../src ../src/pkgs/project/MainPrj.java

javac -d /home/pathToFolderWithResultsOfCompilation -classpath /path/to/some.jar:/path/to/another.jar home/pathToFolderA/src/*.java home/pathToFolderB/gen-java/*.java 

javac -d bin -cp bin src\net\chris\dojo\Program.java

javac -d bin -cp libs/joda-time-2.2.jar src/your/package/*.java

javac -d bin src/com/osama/GHide/*.java

javac -d com/abc/customers/ CustomerAddress.java Customer.java CustomerMain.java

$ javac -sourcepath /home/test/src -classpath \"/home/test/jars/Library.jar\" -d /home/test/build /home/test/src/File.java /home/test/src/dir/File2.java

javac @${lstf}

javac File.java 2>&1 | less

javac Support/*.java Me/*.java Wrapers/*.java

javac UpdateStockHistory.java -cp commons-configuration-1.6.jar

javac `find . -name '*.java'`

javac com/util/Hello.java 

javac dir1/*.java 

javac file.java 2> log.txt

javac foo.java | tee output.txt

javac hex_to_dec.java

javac src/com/osama/GHide/*.java

javap -classpath <classpath> -s Scope

javap -classpath <classpath> -s 'Scope$Variable'

javap my.package.MyClass

printstring=$( jc_hms $songtime )

jcar Program

jdk-7u51-linux-i586.tar.gz

jdk-7u51-linux-x64.tar.gz

jenkins    ALL = NOPASSWD: /path/to/script

jenkins:x:496:492:Jenkins Continuous Build server:/var/lib/jenkins:/bin/bash

jenkins:x:496:492:Jenkins Continuous Build server:/var/lib/jenkins:/bin/false

jeykll -w serve && sass --watch style.scss:style.css

jeykll -w serve ; sass --watch style.scss:style.css

jhead -n%Y%m%d-%H%M%S *.jpg 

jira.home = /var/atlassian/application-data/jira

jmeter -Jkerberos_jaas_application=testapp -n -t myscript.jmx -l myscript.jtl

jmeter -n -t C:\***\TestPlan.jmx -Jhostname=%1 > NUL

JOBID=$(job_command)

(( jobcounter++ ))

while jobisrunning ; do sleep 15; done

jobs -l

n_jobs=$( jobs -p | awk '{print NR}' )

for x in $(jobs -p); do kill $x; done

john:x:1000:100:John Doe:/home/john:/bin/bash

join <([first set of commands]) <([second set of commands])

join <(cat xyx.txt | awk '{.........}' | sed 's/.../' | cut -d....) <(cat abc.txt | awk '{.........}' | cut -d ... | sed 's/...../')

join <(gunzip -c fileA.gz) <(gunzip -c fileB.gz)

join <(sed '/^[0-9]* [0-9]* *$/!d' input) <(sed '/^[0-9]* [0-9]* *$/d' input)

join <(sort a) <(sort b) | awk '{ if ($2 < $3) print $0; else print $1, $3, $2 }'

$ join <(sort ldapoutput) <(sort file)

join <(sort lista) <(sort listb)

join <(sort temp) <(sort temp2)

join <(sort test.1) <(sort test.2)

join --nocheck-order <(sort -n file1) <(sort -n file2) | awk '{if ($2 >= $4 && $2 <= $5 || $3 >= $4 && $3 <= $5 || $4 >= $2 && $4 <= $3 || $5 >= $2 && $5 <= $3) {print $1" "$4" "$5;}}' -

join -1 1 -2 1 -1 2 -2 2 -o 1.1,1.2,1.3,2.3 server7.txt server8.txt

join -1 1 -2 1 -1 2 -2 2 -o 1.1,1.2,1.3,2.3 server7.txt server8.txt | join -1 1 -2 1 -1 2 -2 2 -o 1.1,1.2,1.3,1.4,2.3 - server9.txt

join -1 1 -2 6 <(sed 's/^[0-9] /00&/;s/^[0-9][0-9] /0&/;' T1_01) T1_03

join -1 1 -2 6 <(sed 's/^[0-9][^0-9]/00&/;s/^[0-9][0-9][^0-9]/0&/;' T1_01) T1_03

join -1 2 -2 1 <(sort +1 -2 file1) <(sort +0 -1 file2)

join -1 2 -2 1 -o 1.1,1.2,2.2 table1.txt table2.txt

join -1 2 -2 1 file1 file2

join -1 2 -2 2 -o 1.1,2.1,0 -a 1 -a 2 -e NA <(sort -k2b File1) <(sort -k2b File2)

join -1 2 -2 3 -o 2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,2.10,2.11,2.12,2.13,2.14,2.15,1.1 <(sort -bk2,2 genes_ncbi-gi.list.mod) <(sort -bk3,3 blastoutput.tsv)

join -a 1 <(sort file1) <(sort file2)

join -a1 -a2 -o 0,1.2,2.2 -e $'\t' tmp1.txt tmp2.txt

join -a1 -t'$TAB' File1.txt.sorted File2.fasta.sorted

join -a 2 -t $'\t' -2 2 -1 1 -o 2.1 1.2 <(sort gar1.txt) <(sort -k 2,2 gar2.txt) | sed '/\t$/ s/$/NONE/' | uniq

join -e "NaN" -a1 -a2 -o 1.1 2.2 first second

join -j 1 <(sort file1.txt) <(sort file2.txt)

join -j 1 <(sort file1.txt) <(sort file2.txt) | sort -n

join -o 1.1,2.2 -t':' -1 2 -2 1 <(awk '{print(NR":"$0)}' key_file | sort -k2,2 -t':') <(sort -k1,1 -t':' key_values_file) | sort -k1,1 -t':' | cut -f2 -d':'

join -o 1.2,2.3,2.4,2.5,2.6,2.7,2.8 <(cat -n file1) <(cat -n file2) | column -t

join -t $'\t' -a 1 -a 2 -1 1 -2 1 -e NULL -o 0,1.2,2.2 file1 file2

 join -t'    ' ...

join -t, -1 2 -2 1 -o 1.1, 1.2 File1 File2 | xargs -Ixx grep xx File1

join -t, -1 2 -2 1 -o 1.1, 1.2, 1.3 File1 File2

join -t, -o 1.1,1.2,2.3 -a1 in1 in2

join -t, -o 1.1,1.2,2.3 in1 in2

join -t, -v 2 StatusResults_sign_DESeq2.csv StatusResults_edgeR_sign.csv

join -t, in1 in2

join -t: selection2.txt selection1.txt

join -t'|' -12 <(sort -t'|' -k2 file1) file2

join -t'|' file1.txt file2.txt > file3.txt

join -t'\0' -v2 file1 file2

join -t : /etc/passwd /etc/shadow | cut -d: -f3-7,1,8

join -t \; -1 1 -2 2 -o 2.1,2.2,1.2,2.3 <(sort file1) <(sort -t \; -k2,2 file2)

join -t \; -1 1 -2 2 -v 2 -o 2.1,2.2,1.2,2.3 <(sort file1) <(sort -t \; -k2,2 file2) | sed 's/;;/;*WAS NOT FOUND*;/'

join -v1 <(sort file1) <(sort file2)

join -v 1 -i -t, -1 1 -2 1 -o 1.2 1.3 1.4 1.5  <(awk -F, '{print $1":"$3","$0}' f1.txt | sort) <(awk -F, '{print $1":"$3","$0}' f2.txt | sort)

join -v1 file1 file2

join -v 1 list1 list2

$ join -v1 success.txt fail.txt

join -v 2 <(sort file1) <(sort file2) > file3

$ join -v 2 <(tr ' ' '\n' ids) <(cat -n infile) | cut -f 2 -d ' '

join -v 2 list1 list2

join file1 file2

join file1 file2 | join - file3 > output

$ join file1.txt file2.txt

join fileA fileB | join - fileC

join file_B file_A | awk '{t=$1; $1=$2; $2=t; print}' > file_C

$ join file{1,2}.txt

join list1 list2

jq '(.plants.veggies[] | select(.section == "TUBERS") | .values) |= . + [{"type": "root", "tuber": "yam"}]' veggies.json

jq -r '"\(.name): \(.ratio)"' infile

jq -r '.results.elements[] | select(.name=="Lines").ratio' input.json

jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" test.json

jq '. + { "key4": "value4" }' <<<"$jsonStr"

jq '.[] | "\(.id) \(.word)"' jsonfile

jq '.[] | "\(.id) \(.word)"' jsonfile | sed -e 's/^.\(.*\).$/\1/'

jq '. | length' /tmp/test.json

 jq '.Body'

jq '.LoadBalancerDescriptions[] | select((.AvailabilityZones[] | select(. == "us-east-1b")) == "us-east-1b")' input_file

jq ".imageHeight" data.json

variable_name=$(jq ".imageHeight" data.json)

jq 'del(.key3)' <<<"$jsonStr"

jq 'map(.[0])'

jq 'select(.geo != null)' all.json

jre\bin\java -cp bin\neo4j-desktop-1.9.4.jar org.neo4j.shell.StartClient

jruby -S rake db:migrate 2>&1 | less

jsonDataaa = '{"script":"#!/bin/bash \\n hello=$jj1 \\n echo $hello \\n echo $jj1 \\n echo $jj2 \\n for el1 in $jj3 \\n do \\n echo \\"$el1\\" \\n done \\n for el2 in $jj4 \\n do \\n echo \\"$el2\\" \\n done"}'

jsonStr = '{"script":"#!/bin/bash\\necho Hello world\\n"}'

$ jython.sh test.j.py

k=$((k+1))

kate `find . -name \*.txt -type f`

kate `find . -type f`

kate `find dir -type f`

kate,bob,ray

kdialog --passivepopup 'This is a notification' 5

kdialog --textinputbox 'Output:' -- '-0.1'

kdiff3 source.c@@/main/branch/30 source.c &

kernel /boot/vmlinuz-2.6.26-1-686 root=/dev/sda1 ro inotify=yes

key1 = valueA //'A' will be used as a key word.

keygen | sort | keystrip

$ keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000

keytool -keystore "$(echo ~/Desktop)"

keytool -keystore "$HOME/Desktop"

keytool -list -keystore myKeystore -storepass myPW

keytool -list -v -keystore mykeystore.p12 -storetype PKCS12 -storepass 123456

keytool ... > /tmp/keytmp 2>&1 || cat /tmp/keytmp

keyword pkw1 id premt1

kill [pid]

kill $!

kill "$$"

kill $(pgrep -f $DAEMON | grep -v ^$$\$)

kill $(pgrep -l ccpd | grep -v restartccpd | awk '{print $1}')

kill $(ps aux | grep '[p]ython csp_build.py' | awk '{print $2}')

kill $PID

kill %1

$ kill %1

kill %1

  kill %1

kill %1 %2 %3 %4 %5 %6 %7 %8

kill -- -$(ps -o pgid= $PID | grep -o [0-9]*)

kill -0 $PID

kill -15 `echo ~/inotitfy.something.pid`

kill -1 `cat /var/run/script.sh.pid`

kill -2 "$(</tmp/pidfile.txt)"

kill -2 "$(cat /tmp/pidfile.txt)"

kill -9 $$

kill -9 $(<"$PIDFile")

 kill -9 ${line[0]}

 kill -9 ${line}

kill -9 -parentpid

kill -9 `cat save_id.txt`

kill -9 `jps -v | grep file_name.jar | awk {'print $1'}`

kill -9 `ps aux | grep [j]ava | awk '{ print $2 }' | sort -nr | head -n 1`

kill -9 `ps ux | grep Infinite.sh | awk -F\  -v pid=$$ 'pid != $2 {print $2}'`

kill -CONT [processid]

kill -HUP $(cat $pid)

kill -HUP 12133

k=$(kill -HUP 1234 2>&1)

kill -INT $$

kill -SIGHUP $$

kill -SIGINT PID

kill -SIGINT processPIDHere

kill -SIGKILL $$

kill -SIGNO PID

kill -SIGUSR1 pid

kill -TSTP [processid]

kill -l

kill -n bash

  kill -s SIGHUP "$TOP_PID"

kill -s SIGSTOP pid

kill PID

$ kill RTMIN+1 $pid_of_my_process

kill `cat /tmp/my_pid`

kill `ps -e | grep dmn | awk '{print $1}'`

kill `ps -ef | grep dinesh | awk '{ print $2 }'`

kill `ps auxww | grep zsh | awk '{print $2}' | while read line; do echo "$RANDOM $line"; done | sort | cut -d ' ' -f 2 | head -n 1`

kill `ps ax | grep '[m]eteor' | awk '{print $1}'`

kill `ps ax | grep -i PATTERN | awk '{ print $1 }'`

kill `ps ax | grep fcgi | cut -f1 -d' ' | head -1`

kill `pstree -p 1002 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr "\n" " "`

killall -9 monitor.sh

killall -9 php

$ killall -KILL nmzsh # mass murder all of the nmzsh

killall -q synergys

killall -s SIGHUP bash

killall -u "$(whoami)" dropbox

killall -u "$USER" dropbox

killall -u myusername dropbox

killall PROGRAM

killall Terminal

killall `basename -a /path/path/*`

killall dropbox

killall killme

killall php

killall php

killall sleepListener

killall sshd

kirim = "echo \"Field2 contains: " $2 "\" > /dev/ttyACM0"

klArrowRight.gif /common/common/img/pictos/klArrowRight.gif 03/Dec/2012:00:00:00 127.0.0.1 03/Dec/2012:00:00:00 us 404

konqueror /tmp

konsole --hold -e bash -c 'cat <(curl --silent -S http://mysite/num.txt) /dev/tty|tee /dev/tty|bc'

konsole --workdir pwd -e bash -c 'grep -R -i -n -A 2 -B 2 --color=always -R "searchtext" * | less -R'

konsole -e bash nameofyourscript.sh 

$ ksh

ksh -x ./something

ksh argument.ksh wc -l

ksh: ./so2.sh: cannot execute [Not a directory]

kwcheck create

kwcheck disable UNINIT.STACK.ARRAY.MIGHT INFINITE_LOOP.LOCAL

kwcheck run -b buildspec.out

kwcheck set-status 2 --status ignore -c "we want to ignore this"

lallalalala babababab.

lallalalala blabla.com babababab hehehe.org. 

for file in *.wav; do lame "$file" "$(basename "$file" .wav).mp3" ; done;

lame -b 192 -h input.wav output.mp3  # bitrate 192, highest quality

for f in *.mp3; do lame -h -V 0 "$f" tmp && mv tmp "$f"; done

superlame() { for f; do lame -h -V 0 "$f" tmp && mv tmp "$f"; done; } 

lame -m m greetings.aiff greetings.mp3

$ lame silence.wav silence.mp3

lassign $argv user password server usercommand

last

last -F | grep -v "still logged in" | cut -d " " -f1

last -a -n 100 | grep "^cvc"

ip=$(last -i | grep -Pom 1 '[0-9.]{7,15}')

ip=$(last -i | head -n 1 | awk '{print $3}')

last = !sh -c 'git log "-${1:-1}" HEAD' -

last | awk 'NR<=10{print $1, $5, $6 > $1".txt"}'

last | awk 'NR<=10{print $1, $5, $6}' > name_list

last | egrep -v 'support|reboot|shutdown'

num_logins=$(last | grep -c "$username")

length=$(last | grep -c "$value")

$ last | grep "logged in"

lastAnn=$lastAnn+1;

$ lastlog 2>/dev/null | grep ...

launchctl submit -l MyUniqueScript -p ROOT/script.sh -o ROOT/out.txt -e ROOT/err.txt -- ROOT/script.sh "abc" "def" "ghi" "jkl"

[$lc][_0-9$lc]{2,17}

lcov "${LCOV_INPUT_FILES[@]}" -o ...

ldapmodify -h hostName -p 10389 -D "uid=admin,ou=system" -w ***** -a

ldd ./BIBusTKServerMain | awk '$3 ~ /^\.?\// {print $3}' 

ldd ./BIBusTKServerMain | sed 's/^.* => \([^ ]*\) .*$/\1/'

ldd /usr/lib/x86_64-linux-gnu/libmysqlclient.so

ldd /usr/lib/x86_64-linux-gnu/libmysqlclient.so | grep boost

less "$( ls ./mydir | tail -1)"

less -p regex file_name

less "file:name.txt"

let $VIM ='~/.vim/'

let COUNTER="COUNTER + 1"

let LEFT=PWED - $PWTIME

let LEFT=PWED-PWTIME

let P_CUST_ORDER_REF+=1

let a+=$b

let a=3 b=4 c=5

   let arg [arg ...]

let b+=$number

let bmi=$total_weight/$total_height

let foo.=bar

let foo=foo.bar

let g:ctrlp_working_path_mode = 0

let g:slime_target = "tmux"

let i++

let "num = (( 0 && 1 ))"

let num_children=num_children-1

for n in "${array[@]}" ; do let sum+=$n ; done ; echo $sum

let var=10**2   # sets var to 100.

let x=5; while test $x -lt 10;do echo "x is : $x";let x=$x+1; done

lets go

 libnet-config --defines

libreoffice --convert-to xlsx my.xls --headless

libreoffice --invisible --convert-to pdf:writer_pdf_Export *.odt > log

libreoffice4.2 --headless --convert-to txt:text 2000.html

limit coredumpsize unlimited

line=$((line - 3))

line_1: This is line0

lines = `ls`.split

lipo $SDK_DIR/lib/$CONFIG-iphoneos/$BASELIBNAME $SDK_DIR/lib/$CONFIG-iphonesimulator/$BASELIBNAME -create -output $OUTLIB

output=$(liquibase --"lots of parameters here") > /dev/null 2> /dev/null

output=$(liquibase --"lots of parameters here" 2>&1)

output=$(liquibase --"lots of parameters here" 2>/dev/null)

   { list; }

{ list; }

{ list; }

list_node the_head = { '\0', NULL };

listall | shuf | head -n 1

ll -a /

ll | grep "pattern" | sed 's/this/that/' | xargs mpc

ll | perl -lne 'print $1 if /^.*[0-9]:[0-9]*\s+(.*\.sh)$/'

ll | perl -nE 'say $1 if /^.*[0-9]:[0-9]*\s+(.*\.sh)$/'

ll | perl -ne 'print if s/(.*)([0-9]*:[0-9]* *)(.*\.sh)/$3/'

ll | perl -ne 'print if s/^.*[0-9]:[0-9]*\s+(.*\.sh)$/$1/'

lm ==> 64-bit processor

ln --force --target-directory=~/staging ~/mirror/*

ln -fs /etc/configuration/file.conf /etc/file.conf

ln -fs /etc/configuration/nginx/nginx/app.conf /etc/nginx/sites-available/app

ln -fs /etc/configuration/nginx/nginx/app.conf /etc/nginx/sites-enabled/ 

ln -s "$(readlink -e "$2")" "$1/link"

ln -s $HOME/bin/rd.sh $HOME/bin/rd

ln -s "$PWD" "$HOME/my link name with spaces"

ln -s "$PWD" "$HOME/my link name with spaces and this quote\""

ln -s "$PWD" ~/"my link name with spaces"

ln -sf "$(readlink -f "$link")" "$link"

ln -sfvn source target

ln -sn -- "$FILE_PATH" "$TEST_DIR/$FILE_NAME"

ln -s -t /dir1 /dir2/file1

ln -s "/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl" ~/.rvm/bin/subl

ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime

ln -s "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" /usr/local/bin/sublime

ln -s /Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime

   ln -s /Applications/XAMPP/xamppfiles/bin/mysql /usr/bin/mysql

$ ln -s /etc/bash_completion.d/git git.bash

ln -s /full/path/to/a b

ln -s /full/path/to/executable/svn /usr/bin/svn

ln -s /full/path/to/the/previously/created/shellscript /usr/bin/somecommand

ln -s /home/grammin/testFiles/program1/important/ fileDir

ln -s /home/jake/doc/test/2000/something /home/jake/xxx

ln -s /home/user/Ubuntu\ One/htdocs/vhosts/vhost.local "$VHOST";

ln -s /opt/jdk/bin/java /usr/bin/java

ln -s /path/to/folder1/abc.txt /path/to/folder2//path/to/folder1/abc-something.txt

ln -s /path/to/framework/yiic /usr/bin/yiic 

ln -s /path/to/your-script.sh /etc/rc5.d/S99my-custom-script.sh

ln -s /some/path/original /other/path/copy

ln -s /working/bin/cat /local/bin/cat

ln -s SOURCE TARGET

$ ln -s `canonical.bash foo` bar

ln -s `pwd`/current/app/webroot public_html

ln -s "`python -c "import os.path; print os.path.relpath('$target','$name')"`" "$name"

$ ln -s apps/my_fancy_app_v2.63.1 apps/my_fancy_app

ln -s data/* .

ln -s git-stuff/home/.[!.]* .

$ ln -s new current_tmp && mv -Tf current_tmp current

ln -s originals/original.txt copies/copy.txt

ln -s rel_path_from_current_dir_to_link_target ...

ln -s script1.py script1

$ ln -s torbrowser/start-tor-browser ~/bin/torbrowser

ln -s your/dev/directory/ dev

$ ln -s ~/Dropbox/dotfiles/.vimrc .vimrc

ln -s ~/dotfiles/* ~

ln ../notes/linux.txt

ln /home/jake/doc/test/2000/something /home/jake/xxx

load data infile "PATH_TO_FILE" into table TABLE_NAME lines terminated by ' '

  load minimal amounts of data from the input files and flush the output buffers more often

local [option] name[=value] ...

local DF_Result="$( executeCommand "$1" )"

join () { local IFS="$1"; local s="${@:2}"; printf "%s" "$s"; }

function join { local IFS="$1"; shift; echo "$*"; }

concatenate_with_newlines() { local IFS=$'\n'; printf -v "$1" '%s\n%s' "${!1}" "${*:2}"; }

check () { local IFS=,; set -- $@; return $(test -n "$4" -a -z "$5"); }

local OPTIND

local SITE=$1

local a b c=d e=f g

local c_bit_mins c_bit_maxs gamma_bit_mins gamma_bit_maxs

local file

local outPath=$( echo $fuName | sed "s/.*Lua\/\(.*\)/\1/" )

local pingResults=$(LANG=C ping -q -c10 "$gateway")

local rvm_ruby=' %{$fg[red]%}[$(~/.rvm/bin/rvm-prompt i v g s)]%{$reset_color%}'

function testing { local test; test="$(return 1)"; echo $?; }; testing

local x=${1##*255.}

localc --headless  --convert-to csv:"Text - txt - csv (StarCalc)" *.xlsx

locale

$ locale

locale

locale -a

locale -a | grep -q ^ja_JP || echo "enable any of the japanese locales first"

locale charmap

locate '*re*trict*'

locate -b "rhyth*"

locate -i '/home/sh/music/*.jpg'

$ locate .conf | less

locate "/home/sh/.local/share/rhythmbox/rhyth*"

locate '/home/sh/music/*.jpg'

locate '/rhyth' # equivalent to locate '*/rhyth*'

locate 50local.policy | xargs gvim

locate abcdef \ grep 2

locate file.ext | xargs xdg-open

$ locate foo | sed s/bar/baz/ | [other-processing] | xargs -n1 cowsay

locate labra | xargs -I{} echo {} more arguments

locate labra | xargs -I{} scp '{}' masi@11.11.11:~/Desktop/

locate rhyth*

locate sqlldr

log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

log cd $NEW_PLACE && log command.py --flag $FOO $LOTS $OF $OTHER $VARIABLES

log.txt:Name=abc Date=20140710

log1.log

log2c=3.0 rate=89.5039

   logInfo '2' "none" "Minecraft: $minecraftsize.$minecraftsized $minecraftunit"

logName=$logName $2;

log_file ~/mylogfile.log

logcat -v time -f /dev/kmsg | cat /proc/kmsg

logcat -v time -f /dev/kmsg | cat /proc/kmsg > /sdcard/log.txt

logfiles.tar.gz

logger -i <( rsync --del -az -e 'ssh -i mycrt.crt' /home/gnutt/backup/ me@offisite:backup > /dev/null )

$ logger -p local0.notice -t MYPROGRAM -f /tmp/myprogram.log

logger -p local3.info -t myprogram "What's up, doc?"

LOGNAME=$(logname)

logout

lokesh = "wait"

if[$lokesh == "wait"]

lol foo *lol* bar *foo* *bar*

long_running_process && thing_to_happen_after &

long_running_script_what_produdes_lines | wc -l

lookup.pl < file.to.search.txt

lp -o number-up=6 my_scaled_image_*.jpg

lpadmin -p PRINTER -U "${username}%${password}" -v smb://SERVER -E

lpadmin -p PRINTER -v smb://$username:$password@SERVER -E

lpadmin -p PRINTER -v smb://alice:passw@rd@SERVER -E

lprun -format=csv $srcLoc > $destLoc

lr-x------ 1 user user 64 2010-04-15 19:26 39 -> pipe:[8357879]

lrwxrwxrwx 1 root root 19 Mar 15 11:22 /var/test/info.domain2.com -> DOMAIN.city.country

lrwxrwxrwx 1 root root 19 Mar 15 11:22 /var/test/info.domain2.com -> DOMAIN.city.country

ls > mydirlist 2>&1

ls 2>&1 > mydirlist

  ls > dirlist 2>&1

 ls 2>&1 > dirlist

ls

ls > filenames.txt

ls > files.txt

ls

$ ls

$ ls > outfile 2>&1

ls > list.txt

result=`ls`

ls > foo > bar

FOO=`ls`

ls [[:lower:]]*

ls [[:lower:]]*

ls [0-9]*

ls [bd]

ls "$( command-that-produces-dirname-containing-whitespace )"

ls $( echo CZ_VF__________BILL____.* | sed 's/[_]/?/g' )

ls $(grep /dev/sr0 /etc/mtab | cut "-d " -f2)

numOfFiles=`ls $1 | grep -o \\\\.sav | wc -w`

ls "$AbsolutePath"

(DIR=/tmp; ls $DIR)

ls "$HOME/Music/iTunes/iTunes Media/Audiobooks"

ls "$INPUT"

ls "$L"

ls $LGNAME* | wc -l

ls $PATH || { command1; command2; }

ls $PATH || ( command1; command2 )

ls $PATH || echo "$PATH does not exist"

ls $PATH || ( set +e; do-something-that-might-fail )

ls $PATH || true

ls $PWD/baz | sed "s_`ls -d ~|tr -d '\n'`_~_"

ls ${=args}

dirlist=`ls ${prefix}*.text`

numberOfTsFiles=$(ls ${splitFilePrefix}*.ts | wc -l)

ls | %{rconvert $_ -resize 128x128}

inner_dir_name=$(ls *[$a1][$a2][$a3]* 2>/dev/null | head -n 1 | cut -f1 -d".")

ls * | parallel --colsep '\.[^\.]*$' "mkdir ./{1.}"

ls * | parallel --colsep '\.' "mkdir ./{1}"

ls * | parallel --extensionreplace %foo "mkdir ./%foo"

ls *].mp4 | sed 's/^\(.*\)_\(\[[0-9_]*]\)\.mp4$/mv & \2_\1.mp4/'

ls *].mp4 | sed 's/^\(.*\)_\(\[[0-9_]*]\)\.mp4$/mv & \2_\1.mp4/' | sh

ls * | sort -n | xargs -d '\n' grep hello

ls **/*.py **/*.html

ls *.[0-9][0-9][0-9] 

ls *.[jJ][pP]{[eE],}[gG]

ls *.2[0-9][0-9]

ls *.csv | sort -n | xargs cat > merged.csv

ls *.extension | xargs -n 1 tail -n +2

for i in `ls *.fas | sort -V`; do some_code; done;

$ ls *.jar | sort -t- -k2 -V -r

ls *.jpg | while read i; do svn move "$i" ../; done

ls *.jpg|sed -e 's/\..*//'|xargs -I X convert X.jpg whatever-options X-resized.jpg

ls *.jpg | sed -i -e "s~^PHO_~~" | xargs -n1 -i convert PHO_{} -resize 90x90^ \ -gravity center -extent 90x90 THUMB90_{}

ls *.jpg|sort -V  |awk -F _ '!a[$1 FS $2]++'

ls *.log | while read fn; do grep -iH create "$fn" | tail -1; done

ls *.mp3 | xargs -n 10 id3.sh

  ls *.sh | paste - -

ls *.sh | while read i; do mv "$i" "${i%.sh}.bash"; done

ls *.sln | xargs cygstart

ls *.tar | xargs -n 1 tar xvf

MYLIST=`ls *.txt` # Remember to avoid blanks aroud the "="

ls *.txt >0; cat file1.txt > file2.txt <0;

ls *.txt | while read FILE; do echo mv "$FILE" "${FILE/.txt/`date +%Y%m%d.txt`}"; done

ls *.txt | while read FILE; do mv "$FILE" "${FILE/.txt/`date +%Y%m%d.txt`}"; done

ls *.txt | tee /dev/tty txtlist.txt 

ls *.txt | xargs -I {} cp {} ../{} 

ls *.zip|awk -F'.zip' '{print "unzip "$0" -d "$1}'|sh

ls *'.'{1..1000} 2>dev/null

ls *.{java,cpp}

$ ls *.{zip,rar}

ls *34 | sed 's/34/\*/g' | xargs -n 1 -I file mv file target_dir

ls *Exam* | xargs open

ls *delayed*

ls *foo* | grep 'foo.*foo' | xargs rm

ls *foo* | sed -n 2p | xargs rm

ls *foo* | tail -n 1 | xargs rm

ls *sql* | tac | sed 1,7d | tr '\012' '\000' | xargs -0 --no-run-if-empty rm

ls -- *.png

ls --color=always

ls --color=always | aha

ls --color=always | grep '^[\[01;32m'

ls -1

ls -1

ls -1 $FOLDER | xargs du

SPACER="#-------#"; APACHE_ENABLED=`ls -1 "$HTTPD_HOSTS-EN" | grep ".conf" | sed s/.conf//`; APACHE_COUNT=`echo -e "$APACHE_ENABLED" | wc -1`; if [ -n "$APACHE_ENABLED" ]; then echo $SPACER; echo "Apache enabled Sites: $APACHE_COUNT"; echo "$APACHE_ENABLED"; else echo $SPACER; echo "There are no detectable nor delectable WebSites In Sight Blackbeard"; fi

for i in $(ls -1 * | sort -n) ; do echo $i ; done

ls -1 *.bin | xargs strings -n4 --radix=d -f | grep "string" | awk '{sub(/:/, ""); print $2 " " $1 " " $1".";}' | xargs -l1 split -b && rm *.aa

ls -1 *.fastq | awk -F_ '$8 == "R1" {system("cat " $0 ">>" $1 "_R1.out")}'

ls -1 *\.flv | sort -n -k1.2

ls -1 *.gz | xargs -n 1 echo

ls -1 *.h | perl -plne '$_="    ".$_." \\";'

count=$(ls -1 *.properties 2>/dev/null | wc -l)

ls -1 *.yml.sample | sed "s%\(.*\).sample%mv & \1%" | sh

ls -1 *.yml.sample | sed "s%\(.*\).yml.sample%mv & \1.yml%" | sh

ls -1 *Mcmm*txt *Mmmm*txt | awk -F'_|\\.' '{print $(NF-1)}'

ls -1 *_*| awk '{fn=substr($0,1,7);a[fn]=a[fn]" "substr($0,8)}END{for(i in a) print i,a[i]}'

ls -1Apl /home/$DIR | grep -v /\$ | awk -v user=${usrnm} '$3==user{print}{}'

ls -1 -F -b -A /home

ls -1N -- "${source_dir}" | grep -P "^\Q${source_base}.\E\d\{${fragment_digits}\}\Q.${source_extensions}\E\$"

ls -1dtr /your/dir/{*,.*} | tail -1 | xargs less

ls -1hs $dir

ls -1hs $dir | awk '{print $2" "$1}'

ls -1s --block-size=1 $dir

ls -1tr $(cat filename.txt) | tail -1

ls -1t _system*.log | xargs -d'\n' cat

ls -1v --color=never */filename | xargs tail -n 1

ls -1 /home/students | grep o | wc -l

ls -1 /home/user/logs/backup.*.tar.gz | sort -t . -k2rn | head -1

ls -1 _tmp* | { while read FILE; do sort $FILE -o $FILE & done; wait; }

ls -1|awk -F'[_.]' '{s=gensub(/^([0-9]{4})(.*)/,"\\2\\1","g",$3);print s,$0}'|sort|awk '$0=$NF'

ls -1 | awk '{print NR, $0}'

for i in $( ls -1 ); do echo "$i XXXX"; done

IFS= ;x=$(ls -1) ;  IFS=$'\n' ;for i in $x ; do echo i=$i ; done

ls -1 | egrep '\.txt$' | xargs egrep "" /dev/null > out

(ls -1 && file) | less

for f in `ls -1 folder1`; do rm folder2/$f; done;

ls -1 | gawk '{print "`mv "$0" "tolower($0)"`"}' | xargs -i -t sh -c "eval {}"

ls -1 | grep --color ".txt"

ls -1 | grep -v 'good' | xargs rm -f

count=$(ls -1 | grep '\.properties$' | wc -l)

ls -1 | grep "^customer_[^r].*$"

ls -1 > file.txt | less

ls -1 | nl

ls -1 | sed -e 's/\..*$//'

ls -1 | sed -e 's/^[^_]*_[^_]*_//'

ls -1 | sed 's/-.*//g' | sort -u

ls -1 | sed 's/\-\([kM]\)\?\([0-9]\{2\}\)\./-\10\2./' | sort | sed 's/0\([0-9]\{2\}\)/\1/'

ls -1 | sed 's/^[^.]*\(\..*\)$/\1/' | sort -u

ls -1 | tee file | less

ls -1 | tr "\\n" ","

COUNT=`ls -1|wc -l`

ls -1 | xargs -L1 echo

for i in `ls -A`; do if [ -d $i ]; then rm -r $i; fi; done

ls -A -I'*'

ls -ArtL | sed 's/\(.*\)\..*/\1/' | tail -n 1

ls -ArtL | tail -n 1

ls -Art | tail -n 1

tar_file=$(ls -Art | tail -n 1)

ls -Art | tail -n 1

ls -A | sort -t- -k 5,5 -k 7,7n

ls -A ~/dotfiles

ls -F

ls -F -a | grep "[*]$"

ls -Frt | grep "[^/]$" | tail -n 1

ls -F | grep -E "[*]\>"

ls -F | grep '...'

ls -F world*.zip | head -n -5 | xargs rm

ls -Q -v *.pdf |xargs script

ls -R -ltr / | head -50 | awk '{if ($5 >0) print $5,$9}' OFS="," > sample.xls

$ ls -Rt

ls -R /dir | grep -i foo

ls -R | egrep "6-atom2D\.vector$|6-atom2D\.klist|6-atom2D\.struct"

ls -R |grep .doc$

ls -S | head -1 | xargs vim

\ls -a

ls -a

ls -a *.{pdf,txt,doc} > contents.txt

ls -a -1 | grep "^\." | tail -n 5 | xargs ls

ls -ad .*/

ls -al *.xyz 2>&1 1> files.lst

ls -algG --time-style=+%s | grep ^[^d] | awk -vlimit=$(date +%s -d '10 hours ago') '$4 > limit { print substr($0, index($0, $4) + length($4) + 1) }'

ls -al /tmp | awk '$3==u {print $NF}' u="$USER"

ls -al /tmp | awk -v u="$USER" '$3==u {print $NF}'

ls -al | awk '$6 == "Jan" && $7 >= 16 && $7 <= 20 {print $9}'

ls -al | awk '/^d/{d++}{print}END{print "Directories: "d}'

ls -al | awk '{print}END{print "Files:" NR}'

ls -al | grep -E '^[0-9]+\.php$'

ls -al | grep ^d

ls -al |head -5|tail -1|cut -d" " -f3

  ls -al & ls -al

 ls -al | sort -k 6,6M -k 7,7n -r 

ls -al | tee -a file.txt

ls -al xyzzy\0

ls -atrd */ | head --lines=-4 | xargs rm -rf

ls -a | awk '{print length($0), $0}' | sort -n

CRON_LOG=$(ls -c $LOGS_DIR/fetch_cron_*$CRON_DATE* | head -1)

ls -ct *.zip | tail -n +2 | xargs rm

ls -d $(find * -name '*_0VT0_*' -prune -o -print)

file=`ls -d $(seq --format="/usr/local/mysql/data/mysql-bin.%06.0f" $STARTLOG $ENDLOG) | sed 's/^.*\///'`

$ ls -d $PWD/*/

ls -d *[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]

ls -d *[0-9]*-[0-9]*-[0-9]*

ls -d *[^~]

ls -d */ | grep -E '[0-9]{4}(-[0-9]{2}){2}_([0-9]{2}-){2}[0-9]{2}'

ls -d '*foo*' | egrep -v '^foo|foo$' | xargs rm

dir=$(ls -dt1 "$LOCATION"/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/ | head -n1)

ls -dtr ${A}_[0-9]...

ls -d .*

for i in `ls -d .*`; do mv $i "`echo $i | sed 's/^.//'`"; done

cmd=$(ls -d /Volumes/*/.assets/port/Firefox\ Portable.app 2>/dev/null | head -1) && open "$cmd"

ls -d /home/inst1 file1.txt file2.txt file1.wmf file2.wmv file3.wmv file1.odt file2.odt

ls -d /home/inst1/ *.txt *.wmv *.odt

ls -d /proc/[^0-9]*

$ ls -d /your/path/*/

LATEST=`ls -d1 [0-9][0-9][0-9][0-9].[0-9][0-9].[0-9][0-9] | sort | tail -1`

ls -d1 --color=auto .*

ls -d1 .*

LATEST=`ls -d1 | sort | tail -1`

ls -d H2*/

ls -d | grep -E '(\d+)-(\d+)-(\d+)$'

ls -d | grep -E '\d{4}-\d{2}-\d{2}$'

ls -e foo

ls -f --color $PathToLaunchers

ls -l

ls -l > ls-l.txt

ls -l >out.txt

ls -l > list.txt

ls -l 2> /dev/null

ls -l >> test.log

ls -l [0-9]*_[a-z]*.log | grep root | ...

ls -l '>>' test.log

ls -l $(dirname $(dirname $(which gcc)))/lib

ls -l $1 | while read x; do echo $x; done

ls -l $1 | sed -n -e '/^-/{s/^/file: /p;d;}' -e '/^d/{s/^/directory: /p;d;}' > liste.txt

ls -l "$@" | cut -d' ' -f1

ls -l $file | cut -d' ' -f1

ls -l *.h|awk '/\.h/{print "    "$0" \\"}'

ls -l --color=always | grep --color=never pattern

ls -l --color=auto

ls -l --color | less -r

$> ls -l --group-directories-first --sort=extension --color=always | awk '{ if ( NR > 1 ) print }'

$> ls -l --group-directories-first --sort=extension --color=never

ls -l --time-style=+"%Y %H:%M:%S"

ls -l --time-style=+%Y' '%m' '%d |  grep 'zypper' | awk '{print $6,$7,$8}'

ls -l --time-style=+%s

ls -l -F -t

ls -lF | cut -c52-

ls -lR / | tee output.file

ls -lR /path/to/folder | grep ^l

ls -lR | grep .jpg | awk '{sum = sum + $5} END {print sum}'

ls -lS

ls -lSR | sort -k 5 -n

ls -lSR | sort -k 5 -n | sed 's/ \+/\t/g' | cut -f 9

ls -la

ls -la

ls -la

ls -laR /var/run/screen/

filesize=$(ls -lah /home/clucky/MinecraftServers/.backups/Backup-$timedate.tar.gz | awk '{ print $5}')

ls -lah | eval $var

filesize=$(ls -lah home/clucky/MinecraftServers/.backups/Backup-$timedate.tar.gz | awk '{ print $5}')

ls -latr | tail -n5

ls -la | ./Column.sh 1

ls -l -a /

ls -la | awk '{t=(/^d/?"Directory":/^-/?"File":/^l/?"Link":"unknown");print $NF "---"  t}'

ls -la | filter

ls -la | grep -Eo '[^ ]+( +[^ ]+){4}' | grep -Eo '[^ ]+$'

ls -la|grep -e "May"|awk "{print $9, $10}" > some.files; cat some.files | while read mFILE; do mv $mFILE dir/newdir; done

ls -la|grep -e "May"|awk "{print $9, $10}" | xargs mv dir/newdir/

ls -la | less -FRSX

ls -la | less -SX

ls -la | sed -E -n 's/^(([^ ]+)[ ]+){5}.*/\2/p'

ls -la | sed -E '1d; s/^(([^ ]+)[ ]+){5}.*/\2/'

ls -la | sed -E '2d; s/^(([^ ]+)[ ]+){5}.*/\2/' | sort -nr | head -3

ls -la | sed -E 's/^(([^ ]+)[ ]+){5}.*/\2/' 

ls -la | sed -E 's/^(([^[:space:]]+)[[:space:]]+){5}.*/\2/'

ls -la | sed -r 's/([^ ]+ +){4}([^ ]+).*/\2/'

ls -la | tail +2 | sed -E 's/^(([^ ]+)[ ]+){5}.*/\2/'

ls -la | tr -s ' ' | cut -d' ' -f 5

ls -la ~/.[^.]*

ls -ld .* | egrep '^d' | wc -l | awk '{print $1 - 2}'

ls -ld /sys/block/sd*/device | awk -F'/' '{ split( $NF, arr, /:/ ); print arr[1] }'

for i in `ls -lf access.log*`; do grep $(tail $i |awk {'print $4'} |cut -d: -f 1| sed 's/\[/\\[/') $i > $i.output; done

ls -li

for i in $(ls -lrth /var/log/myapp/ | awk {'print $9'} | head -n -10) ; do echo $i ; done

ls -lrt | awk ' !/dly/ && $NF~/000001.txt.gz/ { print $NF }'

ls -lrt | grep -v total | awk '{print $9}' | head -n -1 | xargs rm 

ls -lsa | grep -E "[d\-](([rw\-]{2})x){1,3}"

ls -lt $(find . -mtime 0)

ls -lt *.htm | head -10 | awk '{print "cp " $9 " ../Test/"$9}' | sh

ls -ltrd */ #match directories using -d and the slash "/"

ls -ltr /apps/dir | awk '{n=split($9,f,/\//);print $6,$7,$8,f[n]}'

ls -ltr /home/oracle.$dbserver/*.log | tail -3 | awk '{print $NF}' | awk -F/ '{print $NF}' | tee tmp.out

ls -ltr /proc/$$/fd

ls -ltr | tail -50

ls -lt `find . -mtime -1` | head -50

ls -lt | awk '/^-/{file=$NF}END{print file}'

ls -lt | head -50

ls -l /Users/myuser/Development/tools/groovy

ls -l  /backup/temp_backup.tar /home/temp_db.gz /backup/temp_ftp.tar

ls -l '/bin/ls'

ls -l /bin/sh

   ls -l /bin/sh /bin/bash

ls -l /dev/null /dev/not-actually/there

ls -l /some/dir/some/where | awk '{print $3}' | sort | uniq

ls -l /var/temp.*  | awk '{a+=$5}END{print a}'

ls -l `find /usr/bin -maxdepth 1 -type l -print`

ls -l `which ls`

ls -l aaa* | grep -v "expr"

ls -l | awk '$3=="someone"'

ls -l | awk '($3=="user1" && $7=="Aug")'

ls -l | awk '($9 ~ /em/) { print $9 }'

files=$(ls -l|awk -F"-> " '/\/tmp/{print $2}')

ls -l | awk '{ if ($1 ~ /.rwx....../) print "line" }' 

ls -l | awk '{print $5, $9}' | sort -n

 ls -l | awk '{print $6}'

ls -l | awk '{print $9}' | grep '[0-9][0-9]'

ls -l | awk '{print $9}' | grep '[0-9][0-9]' | wc -l

ls -l | awk '{print $9}' | xargs -I {} cat {} | grep -o {"String to search"}

ls -l | awk '{print substr($9,substr1,11)}' | uniq | xargs -i bash -c "ls {}*"

ls -l | columns 1,5,9-

ls -l | cut -c12-

ls -l | cut -d' ' -f2-

ls -l | while IFS= read -r l ; do echo "This is it: $l" ; done

ls -l "file with spaces and \" quote in it"

ls -l file.txt | cut -d" " -f5 | xargs -0 -I {} echo '{}-50'

ls -l file.txt | cut -d" " -f5 | xargs -n 1 -I {} echo '{}-50'

ls -l foo.sh

ls -l | grep -P "$1" | awk '{ x += $5 } END { print "total bytes:" x }' 

number_reports=$(ls -l | grep '.json' | grep -v 'fit-report.json' | wc -l)

ls -l | grep '^d'

ls -l | grep 'test2*'

 ls -l | grep user | cat > user

ls -l log* | wc -l

ls -l | pr -m - bla.txt

$ ls -l run*

ls -l | sed -n -e '2{p;q}'

ls -l | sed -n 2,4p

ls -l | sed -n 2p

ls -l|sed -n 'x;$p'

ls -l | sed -r 's/^.[-rwx]{9} //'

ls -l | sed 's/ [0-9].*:.[0-9] / /' | less

ls -l | wc -c

ls -l {,**/}*.ext

ls -p | grep -v / | xargs md5sum | awk '{print $2,$1}'

ls -rt $LGNAME*

ls -rt1 file_a*.txt | tail -1 | xargs sed -n '2p'

ls -rt /home/user/directory/*.mpg | head -1 | ftp ...

ls -rt /home/user/directory/*.mpg | head -5 | xargs ftp ...

ls -rt | tail -n 1

b='echo $(ls -r /var/www/xx*)'

b=$(ls -r /var/www/xx*)

FILENAME=$(ls -r 2012* | head -n 1)

ls -r | measure -s Length

ls -r | select-string 'SomeSearchString' | Foreach {tf edit $_.Path}

ls -s

ls -td $(grep -r abcdefg . | grep commit_id | dirname)

ls -t -d -1 $PWD/myDir/* | tail -3 | xargs 7z a myFile.7z

ls -tr $(find . -type f) | head -1

ls -tr /var/cache/apt/archives |sed 's/_.*//g' |sort -u

last_dir=$(ls -tr ParentFolder | tail -1)

ls -tr | grep dm_rmc_mover | xargs grep -il "Error Message: " | xargs ls -l

BACKUPDIR=$(ls -t /backups | head -1)

ls -t /u01/1/bin/core.siebprocmw.* | sed '1,5d' | xargs rm -r

LATESTFILE=$(ls -t1 | head -n1)

$ ls -t | awk 'NR > 3' | xargs rm

ls -t | awk '{printf("newest file: %s",$0);exit}'

ls -t b2* | head -1

latest=`ls -t|head -1` ; rsync $latest backup_location

ls -t | head -3 | while read file ; do scp $file user@server ; done

ls -t | head -3 | xargs -i scp {} user@server:.

ls -t | head -n1 |awk '{printf("newest file: %s",$0)}'

ls -t | head -n 2 | xargs diff

(ls -t|head -n 5;ls)|sort|uniq -u|sed -e 's,.*,"&",g'|xargs rm

(ls -t|head -n 5;ls)|sort|uniq -u|xargs rm

ls -t | sed -e '1,10d' | xargs -d '\n' rm

for i in `ls -v *.fas`; do echo $i; done;

ls -v | awk '{ if($0!~/Map/) print $0; else later[NR]=$0; } END { for (i=1; i<=NR; i++) if ( i in later ) print later[i]; }'

ls -v file*.txt | xargs cat > output

ls -v | tail -n 1

ls -v tcpdump* | tail -n 1

ls ... |awk -F'[_/]' '{f=$(NF-1)>f?$(NF-1):f}END{print f}'

ls | ./example.pl

ls /android/sdk/build-tools/

for f in `ls /bowtie-0.12.7-win32/bowtie-0.12.7/output_635_25bp/*`; do echo "hello world"; done

ls /dev/disk/by-path/*usb*

ls /dev/disk/by-path/*usb*part*

$ ls /dev/disk/by-uuid/ -l

JAVA_HOME=$(ls /etc/alternatives/java -l | awk -F"->" '{print $2}')

for a in `ls /home`; do cp -a "/home/$a" "/newhome/$a" ; done

X=`ls /home/$Filename`

ls /home/kv/m | grep -i -E '\.(mov|mp4)$' | head -1

ls /proc/$pid/fd/ | wc -l

ls /sys/class/net | sed -e 's/^\(.*\)$/"\1"/' | paste -sd ","

for f in $(ls /sys/class/net/); do $(cat ${f}/operstate); done

for f in $(ls /sys/class/net/); do cat ${f}/operstate; done

ls /tmp

ls /tmp

ls /tmp/"foo*"

 ls /user/local/*.log | xargs -rn1 script.pl

ls /usr/bin | grep -v \\.

ls /var/run/screen/S-"$USER"/*.mapper >/dev/null 2>&1 || screen -S mapper ...

ls 1* | find . -type f | awk '{print("mv "$1" "$1)}' | sed 's/[0-9][0-9][0-9]*/0&/6' | sed 's/[0-9][0-9][0-9]*/0&/8'

ls ?BAR*

ls ?c*

ls | ?{-not $_.PSIsContainer} | %{rconvert $_ -resize 128x128}

ls | ?{-not $_.PSIsContainer} | %{rconvert $_.FullName -resize 128x128}

LATEST_FILE_NAME=$(ls Beaglebone-* | tail -n 1)

FILE=$(ls "Downloads/*.zip" 2>/dev/null)

ls F00001-0708-*|sed 's/F0000\(.*\)/mv & F000\1/' | sh

ls File-* | sed '' 's/\(File-[^-]*\)-\(.*\)/mv & \1\2/' | sh

ls File-* | sed '' 's/\(File-[^-]\)-\(.+\)/mv & \1\2/' | sh

ls File-* | sed 's/\(.*\)-\(.*\)/mv & \1\2/' | sh

ls `(seq 1 33; seq 35 41)|sed 's/^/xxx_/;s/$/.txt/'`

ls `echo foo`* 

ls a b c

ls a*.txt | wc -l

ls aodv*|awk -F\. 'split($1,a,"-"){print $0,a[2]+1""FS""$2}'|xargs -n2 mv

ls aodv* | sed -e "p;s/aodv-//" -e "s/-.//" |xargs -n2 mv

ls apache-tomcat*|sed -r 's/^.*-([0-9.]+)\..*/\1/'

ls | awk -F_ '{print $1 " " $2}' | sort -n -k 2 | tail -1 | sed 's/ /_/'

NEWESTFILE=`ls | awk -F_ '{print $1 $2}' | sort -n -k 2,2 | tail -1`

variable=$(ls); awk "/$variable/"'{print "here"}'

ls | awk '{ sub(/.cpp/, " "); print }'

ls | awk '{ sub(/.cpp/, " ", $0); print($0); }'

ls | awk '{ sub(/\.cpp/, " "); print }'

ls | awk '{a=substr($0,1,length($0)-4)}/avi$|AVI$/{system("ffmpeg -i "$0" -f avi -vcodec libxvid "a"\".mpg\"")}'

ls | awk '{lc=tolower($0)} lc~/\.avi$/{sub(/...$/,"mpg"); print lc,$0}'

ls back_dir | grep "aa.[0-9]"'$'

ls > "`basename "$(pwd)"`.txt"

ls cat[^7]

ls cat{1..9}

ls cat{{1..6},{8,9}}

ls | cb

ls checkin.* | sort -t. -n | tail -1

ls > foo | cmd

ls | cut -c1-2

ls data[0-9]*txt|sort -nk1.5|awk 'BEGIN{rn=5;i=1}{while((getline _<$0)>0){print _ >"data_new_"i".txt"}close($0)}NR%rn==0{i++}'

ls data_* | sort -n -t _ -k 2

{ ls; date; } >/tmp/x37

ls dir/file.* | sort -n -t . -k 2 | tail -1

ls | echo

ls >/dev/null 2>&1; var=$(echo "!#:s/;//") && print "The previous command was:" \'$var\'

a=$(ls) ; b=$(echo "$a" | tr ' ' -) ; echo $b; echo "$b"

{ ls; echo this too; } | cat

ls | egrep -o [0-9]+

ls|fgrep -v -e .tar -e .patch|xargs echo rm -rf

ls|fgrep -v -e .tar -e .patch|xargs rm -rf

$ ls file[0-9]

ls file* |sort -V

ls file* | xargs -n1 sed -n '1{x;d}; /25/{x;p;x;p;q}'

ls filename-or-wildcard

ls "filepath" -t -1 

ls files* | awk '{print $1,$1".out"}' | xargs -P 4 -n 2 python fastq_groom.py

ls files_*.raw | xargs -L1 sed -e '$s/$/\n/' >>ALL

ls folder/*.txt

ls foo*

ls | gawk '/^[0-9]{4}NAME$/ {printf("mv -iv %s %s/%s\n", $1, substr($0,0,4), substr($0,5))}'

ls | grep -E -v '\.(html|js)$'

ls | grep -E '\.(py|txt|tar\.gz)$'

ls | grep -P '\.(?!txt$)' | zip -@ zipname

ls | grep -i foldername1 | xargs -I {} mv {} foldername2

if ls | grep -q log; then echo "there are files of type log"; fi

ls | grep -v "\(.*BBB.*\)\|\(.*AAA.*\)" | xargs tar -cvzf test.tgz

ls | grep -v '*.cpp' | xargs rm

ls | grep -v -F -f exclude.file

ls | grep -vi '\.txt$' | zip -@ zipname

ls | grep -v ".h" | xargs rm -rf

ls | grep -v ".v[0-9]*$"

ls | grep -v '\.jar$'

ls | grep -v '\.lnx$' | xargs rm

ls | grep -v '^prefix'

ls | grep -v '_is\|_bkk\|_lb\|_sg'

ls | grep -v 'file-to-keep' | xargs rm

ls | grep .*\\.c

ls | grep .txt

ls | grep .txt | wc -l

ls | grep ab | xargs cp -t files/

ls | grep delayed

ls | grep foo | xargs -I %s mv %s bar/

$ ls | grep p_ | xargs rm

ls | grep "sample" | head -1 | xargs eog

ls | grep srt | head -4

if ls | grep xyzzy; then cmd1; cmd2; cmd3; fi

ls|gsort -rV|sort -uk1,1|while read f;do mv "$f" ~/Desktop/Latest;done

ls | head -1

for var in `ls ipsec_packet*.txt | sort -V`; do  echo $var; done

$ ls | less

ls | less

ls | more

for FILE in `ls`; do mv $FILE `echo $FILE | sed -e 's:^0*::'`; done

for i in `ls`; do mv $i dir/newdir/; done

for file in `ls`; do mv "${file}" `cksum "${file}" | cut -d' ' -f1`."${file##*.}"; done

ls myDir -t | tail -3 | xargs 7z a myFile.7z 

for i in `ls`; do n1=$(wc $i | awk '{print $1}'); if [ $n1 -eq 1 ]; then rm $i; fi; done

ls|parallel -k -N100 x=\$\(printf %03d {#}\)\;mkdir -p \$x\;mv {} \$x

ls | parallel -q sed -i 's/<ga\//</g'

ls | parallel script.pl --input {3} --output {3.}.out --otherargs range:{1}-{2} :::: <(ls | awk 'NR==1 {print $2}') <(ls | awk 'END {print $2}') -

ls | pbcopy

ls | perl -e 'use JSON; @in=grep(s/\n$//, <>); print encode_json(\@in)."\n";'

ls | perl -lne 'print $_'

ls > "`pwd`.txt"

ls > "$(pwd).txt"

for file in $(ls school_guide*); do echo "<%= render 'success_guide_menu' %>" >> $file; done

ls | sed -e s/[^0-9]//g

ls | sed -e 's/^The \(.*\)/\1, The/' | sort | sed -e 's/\(.*\), The$/The \1/'

ls | sed -ne "${START_INDEX},${STOP_INDEX}p"

ls | sed -rne 's:^([0-9]{4})(NAME)$:mkdir -p \1:p' | sort -u

ls | sed -rne 's:^([0-9]{4})(NAME)$:mv -iv & \1/\2:p'

ls | sed -rne 's:^([0-9]{4})(NAME)$:mv -iv & \1/\2:p' | sh

$ ls | sed ... | source /dev/stdin

for i in `ls <dir1>/*.doc | sed 's/\.doc$//'`; do ls <dir2>/"$i"-1.txt; done  2> /dev/null

 ls | sort > results

ls|sort -V

ls | sort -k4n

ls | sort -k 1.5n

ls | sort -n -t _ -k 2 | tail -1

ls | sort -n -t _ -k 2 | tail -1

ls src_folder | grep -v '^String' | xargs cp -t dest_folder

threads=`ls t[0-9][0-9]`

ls | tail -n 10 | head -n 20

ls td/*.c | xargs sed -i '' "s/:::/::/g"

VAR=$(ls | tee /dev/tty)

ls |tee /dev/tty |grep dir

ls 2>&1 | tee /tmp/ls.txt

ls | tee file1 file2 > /dev/null

ls | tee localbackup.txt

 ls test.* | xargs perl -pe 'BEGIN{undef $/;};s/(<li class="menu-581">)(.*)(<\/li>)/$1$3/gs'

ls update-1.0.* | sort | sed -ne "/$ENVVAR/,// p"

$> ls | wc -l
  ls | wc -l

ls|xargs -I X convert X whatever-options resized-X

ls | xargs -d '\n' -n 1 mplayer

$ ls | xargs -i% -n1 sort % -o % 

ls | xargs -n3 command

ls | xargs -t -I {} sh {}/MyScript.sh param1 param2

ls | xargs -t -I {} {}/MyScript.sh param1 param2

ls | xargs /bin/echo

ls|xargs command

ls | xargs echo

ls |xargs file|awk -F":" '!($2~/PDF document/){print $1}'|xargs rm -rf

ls y* | xargs -i basename {} | xargs -i sed "s/{}//g" {}

var=$(ls zasdasd || echo "file does not exist") 2>/dev/null

ls {max,min}.txt

ls ~/"Music/iTunes/iTunes Media/Audiobooks"

ls ~/filepath.*jpg | xargs -n 1 -I{} convert -units PixelsPerInch 75 -resize 200x200 {} {}

ls"-l"/dev/tty

ls..|awk -F'[_/]' '{print $(NF-1), $0}'|sort -n|sed 's/.* //'

ls: *.xyz: No such file or directory

ls: write error: Bad file descriptor

lsb_release -a 2>/dev/null | grep -i 'Description'

ubuntu_ver=$(lsb_release -a 2>/dev/null | grep Description | cut -d":" -f2)

lsblk

lsof "$FILE" | grep -q COMMAND; completed=$?

lsof "$FILE" | grep -q COMMAND && echo 'Command was found!'

lsof +D /usr/bin | awk '/tail/{print $2}'

lsof -Fn +p 12345

lsof -Fn +p 12345 | tail -n +2 | cut -c2-

lsof -i -nP

lsof -i :10000|tail -n +2|awk '{print $2}'|xargs -r kill

lsof -i tcp:22 | grep LISTEN | awk '{print $2}' | xargs echo kill

lsof -i tcp:22 | grep LISTEN | awk '{print $2}' | xargs kill

output=$( lsof -p $$ -a -d 1 -F n | awk '/^n/ {print substr($1, 2)}' )

lsof -p $(ps -o pid= | tr '\n' ',')

lsof | grep '/file/path`s/'

lsof | grep "/file/path\`s/"

lsps arg1 arg2 arg3 => converted to => ps -elf | grep arg1 arg2 arg3

lsusb | awk '/ZTE/ {print $6}'

lsusb | sed -n '/ZTE/ s/.*ID \([^ ]\+\).*/\1/p'

ltrace -o my_program.ltrace -f -S ./my_program

lua hello.lua

lynx --dump $i 2>&1 > /dev/null

lynx -dump http://example.com/

lynx -dump input.html > output.txt

lynx http://example.com/ -dump -listonly -nonumbers

m = /REGEX/ { matching-action } !m { NOT-matching-action }

m/

{SHA512-CRYPT}$6$qtXJPWaMbX3l8zMW$mXWuax8NG9Wa1AkFdcClA5vw2T3407uBdImKNNbcBd/CUkS5NafjZnQ5ow.IubyLujU5ohS8PWogdNoPiF4d//

macchanger -s wlan0 | awk '/Current/ { print $3 }'

macchanger -s wlan0 | awk '/Permanent/ { print $3 }'

machine 192.163.3.3 login ftpuser password apple

machine1001> Connection closed by foreign host.

mail -a info.cvs -a results.log -s "Info" $MAIL_RECIPIENTS < /dev/null

mail -s "$SUBJ" "$TO" < "$MSG"

mail -s "$SUBJ" -q "$MSG" "$TO"

mail -s "$text" "$email" &> /dev/null

mail -s "Alert: SSH Access from `who | cut -d'(' -f2 | cut -d')' -f1`" -a tmpfile user@example.com

mail -s "Subject" "recipient@example.com" <<< "This is the body"

mail -s "Subject" "recipient@example.com" < body_in_file.txt

mail -s "exceptions in last hour of test.logs" ImranRazaKhan

$ ( mail -s "export CSV" -a calls.tar mail@mail.pl < text.txt > /dev/null 2>&1 ) &

mailx -r me@example.com -s ...

mailx -s "$(<bkp.txt)" ......

< message.txt awk '{ if ($1>25) exit 1 }'  ||  mailx -s "Random Subject" myemail@mydomain.com < message.txt

mailx -s "subject" foo@bar.com <<<$'\n Body Text \n'

main "$@"

variable=$(main -t $path/$i)

variable=$(main -t "$path/$i")

main 3 wait

main.sh "13.7.0" "4"

main: other.o main.o

$mainSubString = *blue\ cheese*

$mainSubString = *'blue cheese'*

main_DEPS = $(TARGETS_$(d)/classes/player) $(TARGETS_$(d)/classes/monster)

make >& make.log

(make > stdout.file) >& stderr.file

(make >/dev/tty) >& make.log

make [ -f makefile ] [ options ] ... [ targets ] ...

make -C path/to/dir/with/makefile variable=Stop

$ make -e OPT1=SOME_OTHER_OPT1 OPT2=SOME_OTHER_OPT2

make -f Makefile.gcc -j4 CCC_OPTS="$GCC_OPT $OPT_FLAG"

make -j $(grep -c "^processor" /proc/cpuinfo)

make -j3

make && ./a2

make && ./sheet

  make CC=clang

  make CC=gcc

  make CC='gcc -flto -Wall'

make CFLAGS="-g3 ..."

make CPPFLAGS='-I/usr/include'

make CXXFLAGS="-g3 ..."

make 2>&1 | LogMsg

make PYTHON=/tmp/python-beta/bin/python pythonbuild

make SHELL=/bin/bash

 make VAR="bla bla"

make all

make all DEBUG

make all | awk '{ print strftime("%Y-%m-%d %H:%M:%S"), $0; }' | tee file

make check

make configure

((make && date >&3) | sed s/a/A/) 3>&1

make foo

make install >/dev/null && update-initramfs -k all -u >/dev/null

{ make install && update-initramfs -k all -u; } > /dev/null

make lib

make libs-depends | sed 's/ /\n/g' | sed '/\.h$/!d;s/^/src\//' | sed 'G;/^\(.*\)\n.*\1/!h;$!d;${x;s/\n/ /g}'

make > error.txt 2>&1 ; perl analysis.pl

make run

make > >(sed s/a/A/) && date

$ make smktestrun TESTARGS="-abc"

make test || exit $?

$'make\r': command not found

makeself.sh ${dir_to_archive} ${name_of_archive} ${description} ${startup_script}

man -Len -P'less +"/^ *Arrays"' bash

man -Pless\ +/debug bash

man -P "col -b" grep | grep "color"

man -S5 proc

man -k . | grep '^[a-z].*(3)'

man acroread

man ascii

man bash

man bash

man bash

man bash

man bash > data

$ man bash

man bash | less +/'^SHELL BUILTIN COMMANDS'

man cat 

man command_name

man curl | egrep " {7}${RETCODE} +\S+"

man date

man diff

man file

man find

man find

man fmt

 man ftp

man gawk

man grep | col -b | grep "color"

man groff_man

man halt

man pgrep

$ man split

$ man swipl

man tar

man test

$ man test

man unzip

many commands | awk '{for(i=6;i<=NF;i++){printf "%s ", $i}}'

 many commands | awk '{for(i=6;i<=NF;i++){printf "%s\n", $i}}'

while IFS='|' read k v; do map[$k]=$v; done <<< $data

mapfile -t -O 1 array < file.txt

mapfile -tu ${co[0]} times_a

mapfile -t arr <<< "$string"

mapfile -t arr < infile; mkdir -p "${arr[@]%/*}"

mapfile -t arr < <(yourfunc "$devices")

mapfile -t array < file.txt

mapfile -t array < <(xdotool search brain)

mapfile -t array < <(your-subshell-here)

mapfile -t lines

mapfile -t lines < <(egrep "^-o"  speccmds.cmd)

mapfile -t myvar < "$filename"

mapfile -t results < <(find "$catalog" -size +$size -type f -exec ls -1rt {} +)

mapfile UGUGU < FILEB

mapfile lines

mapfile lines <file; (IFS=; echo "${lines[*]}"); ((${#lines[@]} <= 2)) && echo another line

mapfile my_var < my_file

maple --kernel-binary=/Users/me/bin/mserver

maple -i somedirectory/somefile

mapreduce.map.memory.mb = yarn.scheduler.maximum-allocation-mb - mapreduce.map.child.java.opts

 markkeys h=d:j=h:k=t:l=n

martin Martin Tournoij

mary age is 22 

match

matlab -nodesktop -nodisplay < file.m &> file.out &

matlab -nodesktop -nojvm -nosplash

matlab -nodesktop -nojvm -nosplash -r "add_em(3, 8)" 

matlab -nodisplay -nojvm -nosplash -r "cd ${pathtoscript}; fit('${dataofinterest}');exit;"

$ matlab -nodisplay -nosplash -r "runMyScript();" < /dev/null

matlab -nodisplay -r "firstFile; for idx = 1:7, secondFile(args); end, exit"

matlab -nojvm -nodesktop -nosplash -r "load mydata; run matlabTest"; ./c++Test;

matlab -nojvm -nodesktop -nosplash -r "mydata = 1; run matlabTest"; ./c++Test;

$ matlab -nosplash -nodesktop -nodisplay -r test | tail +10

matlab -nosplash -nodesktop -nojvm -r "add_em(3, 8)" | tail -n 3

matlab -r "run E:\Production\Project\mytask"

matlab -r "statement"

matlab -r "test('hi')"

matlab -wait -nosplash -nodesktop -r waitHello

matlab.exe -nodesktop -noFigureWindows

$ mawk '/\(on\|off\)line/ { o[++c]=$3 } substr($0,0,27)~$1 { v[c]=v[c] $1 } END{ for(i=1;i<=c;++i) print v[i],o[i] }' real

mawk '{gsub(/\047/,""); print}' file

$maxTransport = $currentTransport

mcd foo/bar

md5=`md5sum ${my_iso_file} | awk '{ print $1 }'`

md5deep -r *

md5deep -r * | awk '{ print $1 }'

md5deep `find *`

md5deep `find *` 2>&1 | awk ...

md5deep `find *` 2>/dev/null | awk ...

md5sum <<< "$your_str"

md5sum "$source_file" "$dest_file"

md5sum *.java | awk '{print $1}' | sort | uniq -d

md5sum *.java | grep 0bee89b07a248e27c83fc3d5951213c1

md5sum *.java | sort | uniq -d -w32

md5sum -c md5sums

chk() { hostsum=$(md5sum /etc/hosts | awk -F" " '{print $1}') ; }

mdfind -0 -onlyin . "kMDItemPixelHeight > 1440 || kMDItemPixelWidth > 1440" | xargs -0 sips -Z 1440

mdfind __your-query-args__ | grep -iv "bad path"

mdls -raw -name kMDItemFinderComment "/Users/fred/Dropbox/OSXStuff/app.icns"

me@myWork:../../My documents/Projects/Project\ 1/*

me@myWork:../../My\ documents/Projects/Project\ 1/*

mech-dump --forms http://site.com/

mediainfo '--Inform=General;%BitRate%' "/path/to/your/media file"

mem_min 1234

mencoder -sub sub.srt -utf8 -font 'Arial Unicode MS' in.mp4 -o out.mp4 -of lavf -oac copy -fafmttag 0x706D -ovc x264 -x264encopts profile=baseline:bitrate=300k

mergecap -w testfiles/tcpdump.pcap testfiles/*.pcap

  message = "coucou"

message "hello world" | cut -f 1 -d ' '
message, 'this is an informational message', /informational

meteor mongo

mgrep 'the cat' 'the bat' 'the rat'

mingw32-make.exe -B C:\Users\Bladeszasza\Documents\vvd\f3dProjBasicNoComp12\Makefile

mingw32-make.exe -f C:\Users\Bladeszasza\Documents\vvd\f3dProjBasicNoComp12\Makefile -B all

minute hour day-of-month month day-of-week  command

minute hour day_of_month month day_of_week command_to_run

mirror -r background_docs --only-missing -e

mk-find -exec "truncate %s"

mkdir "$(< temporary.txt)"

mkdir $(date "+%m%d%y_%H%M%S_")

    mkdir "$DIR"

mkdir "$HOME/bin"  # same as: mkdir ~/bin

mkdir $HOME/hello $HOME/hello/world

for dir in v_79/dir_{0..210}/ENSG00000??????; do mkdir $dir/my_dir; done

mkdir "$path"

mkdir "$var3"

mkdir ${1%.dat}

mkdir ${1}

for i in *.txt; do mkdir "${i%-*}"; done

mkdir "%DATE:/=-%@%TIME::=-%"

mkdir -- -ROOT

mkdir -p [download directory path]; wget -O [download directory path]/[filename.zip] https://github.com/.../[myZipFile].zip

mkdir -p $(OBJDIR)

mkdir -p "$(echo $package | tr . /)"

mkdir -p $(echo asd | sed 's:.:&/:g')

mkdir -p $(sed 's:.:&/:g' <<< "asd")

mkdir -p $DIR/cx1_$now/$name

mkdir -p "$HOME/.vim"/{ftdetect,indent,syntax}

mkdir -p "$LOCAL_WORKING_DIR" "$LOCAL_EVENT_LOG_WORKING_DIR"

mkdir -p "$MODS/out/$ver"

 mkdir -p $MYPATH

mkdir -p "$deployDir"

mkdir -p $deploydir

mkdir -p $filename

    mkdir -p "${BUP}/ArchFolder"

for f in *; do mkdir -p ${f%%_*}; mv $f ${f%%_*}; done

mkdir -p "${f%/*}"

for i in *.*; do mkdir -p ${i:0:1}/${i:1:1}/${i:2:1}/; mv $i ${i:0:1}/${i:1:1}/${i:2:1}/; done;

mkdir -p -- "$dirname"

mkdir -p -- "$s"

mkdir -p ./systems/part3

mkdir -p /dir1/dir2/dir3/dir4...dirN/

mkdir -p /home/chris/downloads/$(date -I)

mkdir -p /home/chris/downloads/`date -I`

mkdir -p /mk{1..22}

mkdir -p /my/other/path/here/;touch /my/other/path/here/cpedthing.txt

mkdir -p backup.{0..7}

mkdir -p build/iphoneos/$(basename $PWD).txt

mkdir -p build/iphoneos/${PWD##*/}.txt

mkdir -p build/tests/param_test/bin

mkdir -p dir

mkdir -p folder/subfolder

mkdir -p folder1/folder2/folder3

mkdir -p foo

mkdir -p foo/bar/baz

mkdir -p systems/part3

mkdir -p {2008..2013}/{January,February,March,April,May,June,July,August,September,October,November,December}

mkdir -p ~/systems/part3

$ mkdir -vp "test/dir (A:B)"

mkdir ./-ROOT

mkdir /etc/supervisor/conf.d/

batch=`mkdir /home/hieund/bpl`

mkdir /home/sindhu/bin/misc_scripts/shellrc/.zshrc_1

mkdir /home/user/Documents/user1 user2

mkdir /mnt/temp 2>&1 /dev/null

mkdir "/tmp/$(basename "$(pwd)")"

mkdir /tmp/$(basename $(pwd))

mkdir /tmp/`basename $(pwd)`

mkdir /var/www/vhosts/mydomain.com/new_folder

mkdir B && touch B/myfile.txt

mkdir "C:\users\charqus\desktop\MyFolder" > nul

mkdir "C:\users\charqus\desktop\MyFolder" > nul 2> nul

mkdir Pics; cd Pics

mkdir `echo $EXTRACTDIR/$CV_NAME*`/release 

mkdir abc 2> output.txt

mkdir abc 2>&1 >output.txt

$ mkdir dir_name && cd dir_name

$ mkdir dir_name; cd dir_name

mkdir "foo/bar"&pushd "foo/bar"

mkdir foo1a foo1b foo2a foo2b foo3a foo3b

mkdir foo{1,2,3}{a,b}

mkdir site_media/media; tar -xvf fixtures/media.tar -C site_media/media

mkdir tmp && cd !#:1

mkdir tmp && cd temp || echo "error"

mkdir ~/bin

mkdir ~/bin

mkdir ~/bin

tempdir=$(mkdtemp) || report_failure

mkfifo $PIPENAME

mkfifo /dev/mypipe

mkfifo /path/to/named/pipe

mkfifo /tmp/fifo

mkfifo batch_control

mkfifo my_buf

mkfile B/C/D myfile.txt

mknod /tmp/semaphore p

$ mknod mypipe p

Exec=sh -c "chromium --user-data-dir=$(mktemp -d)"

mydir=$(mktemp -dt "$0")

tempfile=$(mktemp -t git-open.XXXXXXXX.${1##*.}) || exit 1

mkvirtualenv test -p $mypython276

A=$(mkvmerge -i input.mkv | grep -i attachment | awk '{printf $3 "\n"}' | sed 's;\:;;' | awk 'END { print NR }')

A=$(mkvmerge -i input.mkv | grep -i attachment | wc -l)

mkvmerge -o "$OUTDIR/$filename" "$filename" "${filename%.mkv}.mka" "${filename%.mkv}.ass"|(sed -n /^The/q;cat)

mmv '*.ext' '#1.otherext'

mmv 'linux_*' '#1'

(module load turbovnc-1.0.0; vncserver -otp 2> tmp_vnc.log) | rsh $host

mogrify -format jpg *.png

mogrify -format tif *.png

mogrify -path ../dsc_small -define jpeg:extent=2MB dsc_big/*

mojo get http://www.google.com 'a'

mongo <server>:<port>/<database> some_instructions.js

mongo --eval "printjson(db.serverStatus())"

mongo --norc --shell fake.js

MASTER=`mongo --quiet --eval "d=db.isMaster(); print( d['ismaster'] );"`

$ mongo --quiet dbname --eval 'printjson(db.collection.find().toArray())' > output.json

mongo <server>:<port>/<database> --eval "db.<some_collection>.drop();"

mongo <dbname> --eval "db.dropDatabase()"

mongo dbname command.js > output.json

mongo mydb

 mongo sm-repository2.db.qa.test.com:27017/testdb --eval "db.stats()"

 mongo sm-repository2.db.qa.test.com:27017/testdb script.js

mongo stop_mongod.js

mongo test --eval 'db.things.remove({expires: {$lt: Math.round(new Date().getTime() / 1000)}})'

mongod --help

mongod --rest

mongodb://x.x.x.x:27017,y.y.y.y:27017,z.z.z.z:27017/database?opt1=o1&opt2=o2

mongodb://x.x.x.x:27017/database,mongodb://y.y.y.y,mongodb://z.z.z.z,{options}

mongodump -o /mydir/

mongoexport --db mydb --collection mycollection\  --query "`./test2.sh`" --out ./test2.json && mongo mydb /home/dev/removeDocs.js

mongoexport --db mydb --collection mycollection\  --query "`./test2.sh`" >> ./test2.json

mongoimport -d myDB -c myCollection --drop --file file.json  

monitor "mvn blah" | sed -e SomeHiglightRegEx

monitor "mvn blah | sed -e SomeHighlightRegEx"

mono [options] file [arguments...]

mono myProgram.exe arg1 arg2 arg3

montage -geometry +4+4 $ICL3/three.jpg $ICL2/two.png output.jpg

montage -geometry +4+4 $ICLs/three.jpg $ICLs/two.png output.jpg

<program-name> -h | more

more < YourFile.txt

more +2 myfile.txt

more +2 myfile.txt

last_ip=$(more /tmp/last_ip_check.txt)

more YourFile.txt

mosh REMOTE -- sh -c 'tmux a || tmux'

mosh REMOTE -- tmux

mosquitto_sub -t newtopic/test -h test.mosquitto.org

most <(/bin/echo 'abcdef')

mount -L WHITE /mnt/WHITE -o rw

mount -L WHITE /mnt/WHITE -o rw,uid=test,gid=test

mount -o remount /moint/point

mount -o remount,noatime /moint/point

mount -t smbfs //192.168.0.2 192.168.0.3/user1 user2 /home/user/user1 user2

mount -t smbfs //mystaff:PE91XA!!%40@ncs-srv-fs3.ncs.local/Teaching /Users/mystaff/Desktop/DoNotUseTeachingDrive/

if mount |grep -q "abc"; then echo "export pqr"; fi

mount | grep /data

mount | sed -n -e "s/\/\/mynetaddr on \([^ ]*\).*$/\1/p"

mount.cifs //some/server /mnt/somewhere -o credentials=/root/credentials_file ...

mount_smbfs [-N] [-o options] [-d mode] [-f mode] [-h] //[domain;][user[:password]@]server[/share] path

mount_smbfs '//user:pass@address/C$' /Volumes/test

mount_smbfs '//user:pass@address/C$' /Volumes/test -o user='user',pass='pass'

mountpoint -q myDir && echo "This is a mount point."

mov BYTE [eax],0x31

move_site.sh website  servername &

mp3search -a "The Rolling Stones" -t "Let It Bleed"

mpc current | awk '{ print } END { if (!NR) print "not playing" }'

mpiexec -n <numprocs> myScript.sh

 mplayer "$(ls | grep mp3 | sed -n 7p)"

mplayer "$address" -dumpstream -dumpfile "$2.wmv" -vf "scale=320:240" > /dev/null

mplayer "'$address' -dumpstream -dumpfile '$2.wmv' -vf scale\=320\:240" > /dev/null

mplayer -ontop -cookies -cookies-file ./cookie.txt $(youtube-dl -gf "$resolution"    --cookies ./cookie.txt "https://www.youtube.com/watch?v=${video_id}")

mplayer -ss START -endpos END audio.wav

mplayer -vo png,outdir=/tmp,prefix=frameNo,z=0 -ao null -frames 1 VIDEO-FILENAME

mplayer vidfile.mp4 -ss 110 -endpos 5 -fs vidfile.mp4 -ss 130 -endpos 9 -fs

mpstat -u 1 -P ALL | awk 'NR==4 {print systime(), $4}' >> stats.txt

CPU=$(mpstat 1 1 | awk '/Average/{print 100 - $11}')

mput *

mput /home/myAcct/SQLbackups/"$FILE"

mrathi_dev,00:1e:65:39:10:8e,192.168.133.146

msbuild /target:clean,publish /p:publishurl=c:\publish_location\

msbuild Project.csproj /t:Rebuild

msbuild myproject.sln /target:Publish /p:configuration=release /p:platform=win32

msbuild path/to/your/webdirectory/YourWeb.csproj /p:Configuration=Debug;DeployOnBuild=True;PackageAsSingleFile=False

msbuild project.sln /Flags...

msbuild.exe /p:Configuration="Release" YourSolution.sln

msbuild.exe /p:Configuration="Solution Config" /p:Platform="Solution Platform"

msbuild.exe /p:CustomBeforeMicrosoftCSharpTargets=c:\mytargets\custom.targets

msbuild.exe "/t:Clean;Build" "/p:config=Release" Myapp.dproj

msbuild.exe /v:q  projectName.csproj /t:Package /p:MvcBuildViews=false;SolutionDir=%SolutionDir%;DeployOnBuild=true

msbuild.exe MySolution.sln. 

msbuild.exe projectName.csproj /p:MvcBuildViews=false;

msbuild.exe projectname.proj /property:Configuration=Release

$msg1 two three

msgattrib --untranslated --no-wrap wa.po | grep msgid | sed 's/msgid[^ ]*//; s/^\s"\|"$//g; s/\\"/"/g'

msgfmt -o se.molicy.po secpolicy.po

msggrep -K -e 'or\b' template2.pot

msiexec /i "UxStyle Core x64.msi" /l*v x64_installlog.txt

msiexec /i "c:\myinstall.msi" /qb TRANSFORMS="c:\mytran1.mst" 

msiexec /passive TARGETDIR="C:\MyInstallationDirectory" /i node-download.msi

msql -h localhost -uroot -proot -e database "INSERT into userdetail SELECT  u1, u2, u3, d1, d2, d3 FROM USERS u INNER JOIN DETAILS d ON (u.id=d.user_id)"

mstest /testcontainer:YourDLL.dll /detail:errormessage /detail:description /resultsfile:"file.trx"

murky .

$ musicsort -t -H -d .

mutt -s Subject -a file send@to

mutt -s Subject -a info.xls send@to < logfile

mv [0-9][0-9]/*.masked targetDir

mv $(awk 'BEGIN{for (i = 1; i <= 3; i++) { printf("file%d.png ", i) }}') ../

$ for f in *.sql; do mv "$(echo $f|sed s/.sql$/txt/)" dir; done

mv $(grep -l pattern files) target

mv "$(ls -lt | grep '^-' | head -1 | awk '{ print $9 }')" /abc/home/asd451/Output

mv "$(ls -t | head -1)" /abc/home/asd451/Output

mv $1 $(echo $1 | sed "s/$/$2/")

function altdir { mv $1 $1-alttmp; mv $1-alt $1; mv $1-alttmp $1-alt; }

mv_cd() { mv "$1" "$2" && cd "$2"; }

mv "$1" "${1// /_}"

mv $1 ${G_DEST_DIR}

mv $1.htm $1

mv "$DIR/$FILENAME" "$DIR/$HASH_OF_FILENAME"

for FILE in *; do mv "$FILE" "${FILE/_*_/_}"; done

for FILE in *.xml *.xml.ab *.csv; do mv "$FILE" "${FILE/_*_/_}"; done

for FILE in *_*_*.xml *_*_*.xml.ab *_*_*.csv; do mv "$FILE" "${FILE/_*_/_}"; done

for FOO in *; do mv "$FOO" "`echo $FOO | sed 's/\([^-]*\) - \([0-9]\)\([0-9][0-9]\)\(.*\)/\1 - S0\2E\3\4/g'`" ; done

mv $OUTDIR/new1 new2 new3 old1 $OUTDIR/old2 old3

mv "$OUTPUT_DIRECTORY/$RANDOM6"* "$OUTPUT_DIRECTORY/$YEAR/$MONTH/$DAY/"

mv "$dir/$file" "$S3/1/post1.png"

$ for f in *.sql; do mv "$f" "$(echo $f|sed s/.sql$/txt/)" dir; done

mv "$f" "$f-plaintext.txt"

mv $f ${f#[0-9]*-}

mv "$f" "${f%.png}@2x.png"

for f in *.png; do mv "$f" "${f%.png}@2x.png"; done

mv "$f" "${f//[[:cntrl:]]}"

mv "$f" "${f//[[:cntrl:]|!@#$%^&*()]}"

mv "$f" "${f//[^[:print:]]}"  ## Does not only include control chars but probably some if not all extended chars as well.

for f in *_*; do mv "$f" "${f//_/-}"; done

for f in test*; do mv "$f" "${f/test/foo}"; done

for f in *.jpg; do mv "$f" "`echo $f | sed s/IMG/VACATION/`"; done

for f in *; do mv "$f" "`echo $f | tr "[:upper:]" "[:lower:]"`"; done

 for f in foo[0-9]*; do mv $f `printf foo%05d ${f#foo}`; done

mv "$file" "$lowercase_filename";

for file in linux_*.mp4 ; do mv "$file" "${file#linux_}" ; done

for file in *.zip\?*; do mv "$file" "${file%%\?*}"; done

for file in *.jpg; do mv "$file" "${file%-*}.jpg" ; done

for file in *-m.css ; do mv "$file" "${file%-m.css}.css" ; done

mv "$file" "${file%.*}"

for file in *.foo; do mv "$file" "${file%.foo}.bar"; done

mv "$file" "${file%.xml}".manual

mv "$file" "${file%???????}"  # 7 question marks to match 7 characters

for file in *.dat; do mv "$file" "${file%dat}mp3"; done

for file in */20?????.*; do mv $file ${file/20/10}; done

mv $file ${file/something/else}

for file in [0-9][0-9][0-9][0-9][0-9] ; do mv "$file" "${file:0:4}0${file:4}" ; done

for file in *.png ; do mv "$file" "${file:0:6}.png" ; done

$ for file in hello*; do ext="${file##*.}"; filename="${file%.*}"; mv "$file" "${filename}001.${ext}"; done

mv "$file" "zzz - $file - copied $DATE.wav"

mv "$file" "zzz - ${file%.wav} - copied $DATE.wav"

for filename in foo*.tif; do mv "$filename" "${filename#foo}"; done

mv "$filename" ~/TAM/dustbin

mv "$files" "${files//%3A/:}"

 mv $filname $(echo $filename | sed -e 's/.....\.moc1$//');

for fname in Combined*.csv ; do mv "$fname" "$(echo "$fname" | sed -r 's/[0-9]{14}//')" ; done

mv "$fname" "O.$fname"

for i in *; do mv $i $( echo $i | sed 's/\([^\.]*\).\([^\.]*\).\([^\.]*\)/\2.\1/' ); done

for i in *.II; do mv $i $(echo $i | sed 's/_13/_15/g'); done

for i in *; do mv "$i" "$(perl -MURI::Escape -e '$u=uri_unescape($ARGV[0]); chomp($u); $u=~s/\s/_/g; $u=~s/-\(.*\)//; print $u;' "$i")"; done;

    mv $i $a/$b

for i in /media/Daten/found.*/*.chk; do mv "$i" "$i".$(grep $(file -bi $i | awk '{print $1}' | sed 's/;//') /etc/mime.types | head -1 | awk '{print $2}'); done

for i in seascaperecovered*.jpg; do A=${i/crop/}; mv $i ${A/recovered/_}; done

for i in e2e*.omf; do mv $i ${i%%-*}.omf; done

for i in *.*; do mv "$i" "${i%-*}.${i##*.}"; done

for i in *.jpg; do mv "$i" "${i%-*}.jpg"; done

for i in *.yml.sample; do mv "$i" "${i%.sample}"; done

for i in *-doc-*.txt; do mv $i ${i/*-doc-/doc-}; done

for i in *.pkg ; do mv "$i" "${i/-[0-9.]*.pkg/.pkg}" ; done

for i in *-512-*; do mv "$i" "${i/-512-/-256-}"; done

for i in *; do mv "$i" "${i// /_}"; done

for i in index.html\?tab\=*; do mv "$i" "${i:15}.txt"; done

j=1; for i in *.png; do mv "$i" file$(printf %02d $j).png; let j=j+1; done

j=1; for i in *.png; do mv "$i" file"$j".png; let j=j+1; done

for i in *; do mv "$i"/*.mp3 "$i/$i.mp3"; done

mv "$j" "${i%%_*}.${j##*.}"

for j in **/*.zip; do mv "$j" "${j%/*.zip}/preview.zip"; done

mv "$onam" "$dnam"

for x in *.log; do mv $x HN_$x; done

for x in *.png;do mv $x test/${x%.png}test.png;done

mv_cd() { mv "${@:1:$#-1}" "${@: -1}" && cd "${@: -1}"; }

mv ${FILE} ${FILE}.staging

for file in my*; do mv ${file} "${file/my.fi.name/new.file.link}"; done

mv "${f}" "$(echo "${f}" | sed 's/\n//g')"

mv "${f}" "${f//$'\n'}"

mv * "$target"

mv * destination_path

mv *.dat *.mp3

mv *.manual `basename $file`.xml

mv *.mp3 *.ogg ../../Music

mv *.tar.gz OtherDirectoryName

mv *.{jpg,gif,png} ~/Pictures

mv */*.masked targetDir

mv *20110209*

mv *20120528_1[23]* file/

mv *20120528_{0[0-29],[12]*}*

for f in * ; do mv -- "$f" "$(tr [:lower:] [:upper:] <<< "$f")" ; done

for i in *; do mv -- "$i" "${i#*-}"; done

for i in *.ext; do mv -- "$i" "${i%.ext}.otherext"; done

for i in *; do mv -- "$i" "./${i#*-}"; done

mv -f input.txt "scriptout/${filename}_input.txt"

mv -i "$1" "$(dirname "$1")/$(basename "${1// /_}")"

for a in *.png*; do mv -i $a ${a%\.png*}`identify -format '%w' $a`.png; done

mv -i */*[13579].jpg temp/.

for f in *.jpg; do mv -n "$f" "$(date -r "$f" +"%Y%m%d_%H%M%S").jpg"; done

for thefile in *.txt ; do mv -v $thefile ${thefile%-*}; done

mv -v *.mp3 tmp/ > log.txt

mv ./sourcedir/**/*.ext ./targetdir

mv .test test

$> mv /home/jms/file1.txt /home/jms/myfiles/file1.txt 
mv /home/myusuf3/Downloads/*.nzb /home/myusuf3/.hellanzb/nzb/daemon.queue/

$ mv /home/you/somefile.txt /tmp/newlocation.txt

mv /path/subfolder/* /path/

mv /path/subfolder/.* /path/

mv /path/subfolder/{.,}* /path/ 

mv /path/to/directory/ /path/to/non/existent/directory/

mv /path/to/file.txt /path/to/non/existent/directory/

mv /src_dir/* /target_dir

mv /src_dir/* /target_dir/*

mv /srv/www/htdocs/downloads/rules /srv/www/htdocs/didebansnort/core/snort/rules

mv /system/SystemUI.apk /system/app/

mv /tmp /tmp_old ; mkdir /tmp ; chmod 777 /tmp

mv /tmp/filename.foo.{gz,cdx} .

mv /users/me/collection/*/* /users/me/collection-all/

mv 1.txt 2.txt && echo "Success" || echo "Failure"

mv 1/*.masked targetDir

 mv 8953-*/*.jpg /mnt/FOLDER

mv Activ_23676_03-1[0-6]* /path/to/new/location

mv C:/Users/x/Documents/$f C:/Users/x/Documents/folder

mv Unnamed File1 1.pdf 

mv `find . -name "*.mov" | xargs` OUTPUTDIR/

mv `ls *.boo` subdir

$ mv `ls *.sql|sed s/.sql$/.txt/g` dir

mv "`ls -1t | tail -1`" newdirname

mv app/modules/keywords_builder.rb !#^:h/keywords_generator.rb

mv applist.log applist_`date -r applist.log +%Y%m%d%H%M%S`.log

$ mv apps /usr/local/apps

$ mv at* ./output20

mv blahblah.20110209-b.gz blahblah.20110209.gz

mv dir/foo dir/subdir/

mv erd_*_$(date -v -1d +%Y%m%d)_*.csv.Z destination_dir/

mv file.log file.LOG

mv file_str_23.txt file_23.txt

mv filename "`date +%d%b%Y`filename"

mv file{1..3}.png ../

mv foo.c foo01/10/14.c

mv foo.c foo2014-01-10.c

mv foo.c foo`date +%D`.c

mv intro_???[13579].png tempdir/

mv is /bin/mv

mv my_directory/{test,yeah}.txt

mv myscript /usr/bin

for i in *.htm; do mv new-$i $i; done

mv new.txt ../scripts_old

'mv' 'nutzer.1.gz' '~/public_html/man/man1/'

mv oldFileName newFileName

mv original.filename new.original.filename

mv rename.sh

mv script1.py script1

mv source target 

mv t.dat *.mp3

mv t1.dat t2.dat *.mp3

mv temp_output* "$code"

mv useragents_$1 /${1%.dat}/useragents_$1;

mv xxxx !#:1.bak

mv {,new.}original.filename

mv ~/.vim/_vim/* ~/.vim

mv ~/.vim/_vim/file_1 ... ~/.vim/_vim/file_n ~/.vim

mv ~/Desktop/Picture_{1..77}.png ./

mv ~/"Dropbox/Backups/$SOURCE"*.tgz ~/.Trash/

mv ~/desktop/blue ~/temp

mv ~/iPhoto\ Library.zip ./ ; bell

mv_to_trash jk*

mvim --remote-tab-silent filename

$ mvim -c 'au VimLeave * !cat % | pbcopy' /tmp/bar.txt

$ mvim -c 'execute "au VimLeave * !pbcopy < " . expand("%")' /tmp/bar.txt

mvn --settings YourOwnSettings.xml clean install

mvn -DpropA=valueA -DpropB=valueB -DpropC=valueC clean package

mvn -DpropertyName=propertyValue clean package

mvn -U test | (while read line; do echo ${line} | sed -e "s/.*ERROR.*/`echo -e '\e[91m&\e[0m'`/g" -e "s/.*\(WARN|INFO\).*/`echo -e '\e[93m&\e[0m'`/g"; done)

mvn -daltDeploymentRepository=internal.repo:default:http://WhatEverURL

mvn -daltDeploymentRepository=repositoryId:default:http://WhatEverURL

mvn -s YourOwnSettings.xml clean install

mvn antrun:run

mvn antrun:run -Pmyprofile-for-antrun

mvn clean || { echo "Maven Clean Unsuccessful"; exit 1; }

 mvn clean install -Dtest=MyTestNGTest

mvn clean scm:checkout deploy

mvn clean test -Denv.USER=UAT -Dgroups=Sniff

mvn dependency:copy-dependencies

mvn exec:java

mvn exec:java -Dexec.mainClass=... -Dexec.args="${args[*]}"

$ mvn exec:java -Dexec.mainClass="com.mycompany.App"

mvn groupID:artifactID:version:goal

mvn help:evaluate -Dexpression=[property-name] | findstr /R ^^[^^\[INFO\]]

mvn help:evaluate -Dexpression=basedir | findstr /R ^^[^^\[INFO\]]

mvn install -Dtest=MyTestNGTest

mvn package

mvn release:prepare && mvn release:perform -Darguments=-Dskip.deploy=false

mvn sample.plugin:maven-hello-plugin:1.0-SNAPSHOT:sayhi

mvn scm:status

mx "A = reshape(1:9, 3, 3)"

mxmlc -output main.swf src/com/nuaavee/MainClass.as -source-path src/

mxmlc MyApp.mxml load-config my-app-config.xml output /pathToRelease

mxmlc MyAs3File.as

my $awk_run = `./awk_program.txt saved_file.txt`;

my $c = qx{cmd \\c "$ARGV[0]" /A "page=$ARGV[1]=OpenActions" "$ARGV[2]"};

my $command = "multi_script.sh $data" >> $log;

my $err = `cp -r $HTML /tssobe/www/tstweb/$subpath/$HTMLDIR1 2>&1`;

my $mod=`module load turbovnc-1.0.0; vncserver -otp 2> tmp_vnc.log`;

my $mod='module load turbovnc-1.0.0; vncserver -otp 2> tmp_vnc.log';

my $pstate=`nc -z 8.8.8.8 441; echo $?`

my $pstate=`nc -z 8.8.8.8 441; echo \$?`;

my $pstate=qx'nc -z 8.8.8.8 441; echo $?';

my $results = `awk 'tolower(\$0) ~ $sanitized_query' *_Codes.txt`;

my $str = q{echo -e "use\nseveral\nlines"};

my $var1= `awk '/secon/ {print $1}' vladtest.sh |cut -c2-6`

my $x = qx%identify $1%; chomp $x; $x

my  @programoutput=`$command`

my @sorted = sort { $a->[0] <=> $b->[0] } @items;

my string

my-script > index.html

my.command && touch command.complete || touch command.failed

my.command && (touch command.complete || true) || touch command.failed

myCommand /s /d %dir% file1 file2 > sumFile

myCommand 2>&1  1>/dev/null | tee /path/to/some/file.txt

myFixer.sh > myData.New 

myFunctionOrScript "$@"

myGitThing | bash

myPerlScript --myarg1 10 --myarg2 42

var=$(myProgram | grep -oP 'ppl=\s*\K\d+\.\d+')

var=$(myProgram | sed 's/ppl=[ \t]*\([0-9]\{1,\}\.[0-9]\{1,\})/\1/')

var=$(myProgram | sed 's/ppl=\s*\(\d\+\.\d\+\)/\1/')

myProgram.exe arg1 arg2 arg3

myScript.sh OriginalFile.xml 5

myStr

my_archive.run ${param1} ${param2} ${paramN}

my_array[foo]=bar

my_array[foo]=bar

my_array[key]="value"

my_command >/dev/null &

  fileName=$(my_command | awk -F "[[:space:]]{2,}+" "NR==$i {print \$2}" | egrep "^[[:alnum:]]")

my_command || { echo 'my_command failed' ; exit 1; }

my_command my_args1 my_args2 matched_result

$(my_command myargs)

my_command | sed 's/^/\t/' >> my.log

my_func {1,2,3}   

my_function "$1"

my_less_func your/path

my_prog < a_text_file.txt

my_prompt> ftype sh_auto_file=c:\cygwin\bin\bash.exe %1 %*

my_scp_multi "ACCOUNT" "SERVER" "PW" "~/testfileA ~/testfileB ~/testfileC" "~/test/"

my_scp_multi "ACCOUNT" "SERVER" "PW" ~/testfileA ~/testfileB ~/testfileC "~/test/"

my_script < /dev/null  

my_script *

my_script \*

my_script directory_a  directory_b directory_c

my_stream_generator | xargs -n1 my_command

myapp | sed -e 's/^.* //'

mybatchfile.bat 2 4

a=$(mycmd)

mycmd | pcregrep -M '(?<=^/ >  -{7}\n).*\n(?=/ > $)'

mycmd | pcregrep -Mo '^/ >  -{7}\n\K(?!/ >).+(?=\n/ > $(?!\n[\s\S]))'

mycmd | pcregrep -Mo '^/ >  -{7}\n\K.+(?=\n/ > $(?!\n[\s\S]))'

mycmd | pcregrep -M '^/ >  -{7}\n.*\n/ > $' | pcregrep -v '^/ >'

mycmd | sed -n '1{/^\/ >  -\{7\}$/{n;/./{h;n;/^\/ > $/{${x;p}}}}}'

mycmd | sed -n '1{h;n;H;x;N;${/^\/ >  -\{7\}\n..*\n\/ > $/{x;p}}}'

mycommand &

mycommand >(cat)

mycommand >(hexdump -C)

mycommand "$(< file.txt)"

mycommand "$@"

mycommand "$b".sa "$b" >"$b".sa.cc

mycommand "$files" > ~/Desktop/out.txt

mycommand "$files" > "${HOME}/Desktop/out.txt"

mycommand "${my_list_of_files[@]}"

mycommand | awk 'NR>1{print $1,$2}' 

mycommand || (echo "mycommand failed $$?"; exit 1)

mycommand file{1..20}

mycommand smallcmd1

mycp myDir "*sh" 

mydtach directoryName

myfile.coffee

"myfile_1_exercise.txt" == "myfile_2_exercise.txt"

myfinsdtr all_pre.txt | more

myfold

myfunc "$@"

$ myfunction original.conf my.conf

mygitcm my commit message here

mygrep  'data.frame(foo = x)' mycode

mypath = $file

myprog < fifoin > fifoout

myprog $(cat file-name)

$ myprog alpha beta gamma delta

myprog | tee >(ap1) >(ap2) >(ap3) >/dev/null

myprog.exe "c:\path\with spaces\in the\middle\file.pdf"

myprog.exe \path\to\file.txt

myprogram < input.in

 myprogram -n MODE2 MODE1

myprogram | tee >(grep stack >out) | someotherprogram

myprogram | tee /dev/tty | grep stack >out

myprogram.exe "(this is some text, with special characters.)"

myprograme.exe c:\my documents\file1.xls 

myprograme.exe "c:\my documents\file1.xls"

myproject\bin\Release\myproject.exe

mypython276=/opt/python276/bin/python2.7

$ myscript &

myscript 192.0.2.42 output.txt

myscript "arg1 with spaces"

myscript out.pdf foo.ps bar.ps "another file.ps"

myscript.py

myscript.rb `hostname -i` file.txt

myscript.sh

$ myscript.sh < myfile

myscript.sh 2> errlog.txt

  myscript.sh -d dir_name

myscript.sh bash ba.sh

myscript.sh input > file.txt

myscript.sh: line 11: COMMMAND: unbound variable

$ mysed s/$orig_pkg/$package_name/g $f

myservice

mysql <<< "$query"

$ mysql < deliberate_error_in_here.sql 2>err.txt

mysql < my_sql_commands

mysql

mysql [options] < createUsers.sql >> install.log 2>&1

mysql [options] --execute="UPDATE table SET Status='ready' WHERE ID IN (`paste -sd, id_file.txt`);"

mysql> SELECT * FROM posts LIMIT 1\G

$mysql --batch --silent -u $_adminuser -h $_host $_hostdb < procedure.sql

mysql --batch --skip-column-names -e "SELECT CONCAT('TRUNCATE TABLE ', TABLE_SCHEMA, '.', TABLE_NAME, ';') AS table_sql FROM information_schema.TABLES WHERE TABLE_NAME IN ('errorLog', 'errorLogBacktrace', 'errorLogUrl');" | mysql

mysql --batch --skip-column-names -e "SELECT CONCAT('TRUNCATE TABLE \`', TABLE_SCHEMA, '\`.\`', TABLE_NAME, '\`;') AS table_sql FROM information_schema.TABLES WHERE TABLE_NAME IN ('errorLog', 'errorLogBacktrace', 'errorLogUrl');" | mysql

mysql --defaults-file=/home/user/.my.cnf database

mysql --defaults-file=/path/to/file_with_password

mysql --defaults-file=mysecret.cnf

mysql --help

   mysql --quick -uname -ppwd wmap -e  ... 

mysql --silent --raw

mysql --skip-column-names -B -e 'select ... from ... where ...;' | do_something /dev/stdin

mysql --table -e "show engine innodb status" -u -p database > mydumpfile.txt

mysql --table -u dbclient -pxxxx GEKONYLOGDB -e "select now(),max(time_stamp) from metrics"

  mysql --user="$USERNAME" --password="$PASSWORD" --database="$DATABASE"  -e "show tables;"

mysql --user=root --password=mypass vsftpd 'GRANT ALL PRIVILEGES ON `MYUSERNAME\_%`.* TO "MYUSERNAME"@"%";'

mysql --user=root --password=xyz db_name

mysql --user=sqluser --password=$pasx --execute="$CMD" $db

$ mysql --user=user_name --password=your_password db_name < script.sql

mysql --vertical=false

URL="sub.domain.tld"; mysql -A --user=username --password="password" --host=hostname usernameuction -e "update core_config_data SET value = 'http://${URL}/' WHERE path LIKE 'web/unsecure/base_url'; update core_config_data SET value = 'https://${URL}/' WHERE path LIKE 'web/secure/base_url';"

out=$(mysql -B -db mydb -uanon -ppwd --disable-column-names  -e "select count(*) from table1";)

mysql -Bse 'DELETE FROM database.table WHERE filed < CURDATE()- 5'

mysql -Bse 'DELETE FROM table WHERE filed < CURDATE()- 5' database

mysql -B -u username -ppassword --disable-column-names --execute "select name from test"

mysql -P9306 --protocol=tcp

mysql -P9306 --protocol=tcp --prompt='sphinxQL> '

mysql -U test_traffic traffic < ./phoenix/data/sql/lib.model.schema.sql

mysql -e "INSERT INTO tablename (colname) VALUES ('$variable')"

mysql -e "LOAD DATA INFILE 'ls.dat' INTO TABLE mytable1" mydatabase

mysql -e "select * from mydb1.table1"

mysql -e "source /path-to-backup/backup-file.sql" db_name --default-character-set=UTF8

$(mysql -hmyhost -uuser -pmypass -Dmydb -B -e "${QUERY[${query}]}")

mysql -hmyhost -uuser -pmypass -Dmydb -B -e "${QUERY[${query}]}"

mysql -h 127.0.0.1 -u root -p redhat -H -D mysql -e "select host,db from db;"

mysql -h dbserver_hostname -e "truncate table schema_name.table_name"

$ mysql -h localhost -u root --password=password -e "CREATE DATABASE databasename;"

mysql -h localhost -u test -pYourPasword < "blank.sql"

$ mysql -h "server-name" -u "root" "-pXXXXXXXX" "database-name" < "filename.sql"

$ mysql -h "server-name" "database-name" < "filename.sql"

mysql -h {hostname} -u {username} -p{password} {database} < /path/to/script

mysql -pyourpasswordwithoutspaces -e "Your insert query goes here with semicolon;"

mysql -s -N -uUSER -p information_schema -e 'SELECT Variable_Value FROM GLOBAL_VARIABLES WHERE Variable_Name = "datadir"'

mysql -u [username] -p -e "SET PASSWORD FOR 'user' = PASSWORD ('newpassword')"

mysql -u $(printf %q "$MYSQL_LOGIN_USER") -p$(printf %q "$MYSQL_LOGIN_PASSWORD") "CREATE USER $(printf %q "${MYSQL_USERS[$i]}")"

mysql -u $U -p$P -D$D <<< "ALTER TABLE drupal_url_alias CHANGE language language VARCHAR( 12 ) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '';"

$ mysql -u "${username}" -p "${database}" < diff.sql

mysql -u ***** -p***** admin-wp -e "SELECT * FROM admin_wp.wp_8_posts WHERE post_type = 'post' AND DATEDIFF(NOW(), post_date) > 30 LIMIT 0, 10 "

mysql -u$USER_NAME  -p$PASSWORD -eexit

mysql -u$user -p$pass -e "DELETE FROM tablename WHERE datetimestamp < DATE_SUB(NOW(), INTERVAL $daysret DAY)"

mysql -uUSERNAME -pPASSWORD -hHOSTNAME < FILENAME.sql

mysql -uUSER -p -e 'SHOW VARIABLES WHERE Variable_Name = "datadir"'

mysql -uUSER -p -e 'SHOW VARIABLES WHERE Variable_Name LIKE "%dir"'

mysql -uUsername -pPassword database_name < infile.sql

mysql -u <user> -p -e "select * from schema.table"

mysql -umuuser -pmypassword -e '"show' 'databases;";'

miyurz@my-host:~$ mysql -uroot  -pabc123 -eexit

mysql -uroot -p -e "CREATE DATABASE IF NOT EXISTS \`$(basename -s .gz test-db.gz)\`"

mysql -uroot -p -e "CREATE DATABASE IF NOT EXISTS \``basename -s .gz test-db.gz`\`"

\mysql -uroot -ppass -e "SELECT * FROM whatever"

 mysql -uroot -proot --local_infile=1 3parsfdb -e "LOAD DATA LOCAL INFILE '/logfiles/Bat_res.csv' INTO TABLE Bat_res FIELDS TERMINATED BY ','"

mysql -uroot -proot -e "create database mydb;"

mysql -utheuser -pthepassword <Randomsqlfile.sql

mysql -uuser -ppass < foo.sql

mysql -uuser -ppw -hhost databasename -e "CALL sp_exec_dump()"

mysql -u myuser -p < my_db.sql

mysql -u root --password="$PASS" < myfile.sql

mysql -u root --password=root <mysqlfile.sql

mysql -u root -e "SELECT ..." | sed 1d >> filename

mysql -u root -p

mysql -u root -p$(cat ~/.mysql_pass)

mysql -u root -p"$PASS" < myfile.sql

mysql -u root -p${pass} -Be "create database \`$dbname\`;GRANT ALL PRIVILEGES ON \`$dbname\`.* TO $dbuser@localhost IDENTIFIED BY '$dbpassw';FLUSH PRIVILEGES;"

mysql -u root -p --execute="SELECT User, Host FROM mysql.user"

mysql -u root -p`cat /tmp/pass` -e "SHOW DATABASES"

mysql 2>&1 -u root -p -e 'select count(*) User_Count from ' | mail -s 'Count' "email_id"

 mysql -u root -pmy_password -D DATABASENAME -e "UPDATE `database` SET `field1` = '1' WHERE `id` = 1111;" > output.txt 

mysql -u root -ppassword -e "UPDATE table SET data = 1 WHERE id = 5; SELECT data FROM table WHERE id = 5"

mysql -u root -ppassword databasename -e "SELECT * FROM main"

MAXID=$(mysql -u root -proot -N elis27 -e "select max(idnumber) from mdl_user;")

mysql -u root -proot -e 'show databases;' > dbnames

mysql -u root files -e "insert into path values $VAR"

mysql -u sqluser -p$pasx -e "$CMD" $db

mysql -u user -p < db.sql

mysql -u user -ppassword -D database_name

mysql -u user -p dbnane

mysql -u username -p password < statements.txt

OP=$(mysql ... 2>&1)

mysql ... -e "YOUR_QUERY;SELECT ROW_COUNT()" -B | tail -n 1

mysql> select 1;-- test select

mysql> SET SQL_MODE = ANSI;

mysql> SET SQL_MODE = ANSI_QUOTES;

mysql> RENAME USER root TO new_user;

mysql> DROP USER user;

mysql > source c:\create_database.sql

myvariable=$(mysql database -u $user -p$password<<<"SELECT A, B, C FROM table_a")

mysql database -uuser -ppassword -e "describe table;"

mysql> create database `happy-face`;

mysql dbTest -e "LOAD DATA INFILE './file' INTO TABLE tablename FIELDS TERMINATED BY ','"

mysql db_name < script1.sql

for sql_file in *.sql; do mysql db_name < $sql_file; done

mysql dbname < insertcmd.sql

mysql-connector-java-5.1.29/mysql-connector-java-5.1.29-bin.jar

mysql_safe &

mysql_safe --log-error=/tmp/mysqld.log &

mysqladmin -P3104 -rvi1 ex 2>&1 | grep Questions > out.txt

mysqladmin -u[username] -p[password] drop [database]

mysqlbinlog mysql-bin.000016 | awk '/session(_log)?/,/;/' | more
mysqlcheck --defaults-extra-file=/etc/php.d/mysql-client.cnf

mysqld --help --verbose | grep datadir

mysqld --init-file=C:\\mysql-init.txt

mysqldump --all-databases --routines -h <ip-address> -u <user> -p > dump.sql

mysqldump --host=localhost --user=root --password=******* --result-file=/home/lbs.company.sql lbs company

mysqldump --host=localhost --user=root --password=******* lbs company > /home/lbs.company.sql

mysqldump --insert-ignore --skip-add-drop-table --no-create-info --lock-tables=false -ucrbt_se -pcrbt_se -h10.2.2.150 blah master_backup --where "date(END_TIME)>='$FiveDays'" --result-file=torr1.sql 

mysqldump  --no-data mydb | mysql mydb

mdm@deb606:~$ mysqldump --opt test1 -u root -ppassword | bzip2 - > example.bz2

mysqldump -B "$db" ...

   $ mysqldump -P 3306 -h [ip_address] -u [uname] -p[pass] db_name > db_backup.sql

mysqldump -S /opt/lampp/var/mysql/mysql.sock -u root -h localhost -pgihan mistoria wp_posts |  gzip -9 >/opt/lampp/htdocs/mistoria/wp-content/backups/backup_table.sql.gz

mysqldump -h host -u user --password=mypassword dbname > mysql -h host2 -u user2 --password=mypassword dbname2

mysqldump -h host -u user --password=mypassword dbname -h host2 -u user2 --password=mypassword dbname2 > mysql

mysqldump -h host -u user -p password database > something-$(date +%d-%m-%Y %H %M %S).sql

   $ mysqldump -u [uname] -p[pass] --all-databases > all_db_backup.sql

   $ mysqldump -u [uname] -p[pass] db_name > db_backup.sql

   $ mysqldump -u [uname] -p[pass] db_name | gzip > db_backup.sql.gz

   $ mysqldump -u [uname] -p[pass] db_name table1 table2 > table_backup.sql

mysqldump -u${db_user} -p${db_pwd} ${schema_name} | gzip > ${backup_file}.gz

mysqldump -uUSERNAME -pPASSWORD -hHOSTNAME USER_DATABASE > FILENAME.sql

mysqldump -uroot '-psdfas@N$pr!nT' --databases app_pro > /srv/DUMPFILE.SQL

mysqldump -uuser -ppw database --no-create-info --skip-add-locks --skip-disable-keys --skip-triggers >dumpfiles

mysqldump -u myuser -p --databases --add-drop-database --no-data my_db > my_db.sql

mysqldump -u root files path path_updated ...

mysqldump ... > ~/sqldump/tmp$$ && mv ~/sqldump/tmp$$ ~/sqldump/$(date +%F).sql

mysqldump blah blah | gzip > ${db}-$(date +%m-%d-%y).sql.gz

mysqldump database | sed  -r '/^(UN)?LOCK/d' > database.sql

mysqldump db1 > >(bzip2 > db1.sql.bz2) > >(mysql db2)

mysqldump my_db > ~/backups/$(date +'%Y-%m-%d_%H-%M-%S').sql

myuser = NOPASSWD: /sbin/ifconfig

IFS=$"\n"

! (( n % 4 ))

   n N    Read/append the next line of input into the pattern space.

21s/9\.0E7/$n/

${dir/$'\n'/}

newdate=$(nDaysAgo 20120910 5)

nValue & 0b00000001

nagios3-cgi nagios3-cgi/adminpassword

nagios3-cgi nagios3-cgi/adminpassword-retype

name 'e' is not defined

name1=value1 name2=value2 command name3=value3 -x name4=value4 abc

name_of_file

name_of_file = ${line%.*}

nano <(cat /var/log/qmail/current | tai64nlocal)

nano <(tai64nlocal < /var/log/qmail/current)

nano /etc/ssh/sshd_config

nano ~/.bash_profile

nano ~/.gitconfig

nautilus /tmp

nautilus /usr/share/applications 

nawk -F'\"' -v OFS='\"' '{gsub(/ /,"",$1)}1' your_file

nawk -F"," 'NR==FNR {a[$1]=$2;next} ($1 in a) && (a[$1]+5)<=$2' count.txt count1.txt

nawk -F"=" '/NetworkName/{n=$2;getline;if($2~/ims3/){print n} }' file

for i in *.vx.dat; do nawk -f script.awk "$i" "${i%%.*}.vy.dat" "${i%%.*}.vz.dat"; done

nawk '/ADDRESS/{$0=$0" PROTOCOL"}1' file

nawk '/valcred/{close(x);x="F"++i;printf "" > x}{print >> x;}' input_file.txt

nawk 'substr($0,42,4)~/ABCD|MNOP/' ${file}

 nawk '{system("svcadm enable " $3)}'

nc <server_ip> 1234 < /dev/null

nc -d <server_ip> 1234 < /dev/null

$ nc -kl 12345 > /dev/null

$ nc -k -l 4444 > filename.out

nc -lU /tmp/socket > /dev/null

nc -l -p 1234 -e my_function

$ ( nc -l 1234 & echo $! > /tmp/myprog_kill_pid ) | myprog; kill $(</tmp/myprog_kill_pid); rm /tmp/myprog_kill_pid

nc -l 12345 | processing_program

nc -l 30000      # Act as a server and listen on port 30000

nc -l 30000 > /dev/null

nc -l 8011 >logfile.txt

nc -l myport | while read line ; do php file.php "$line" ; done

nc -u 192.0.2.1 53

    res=`nc -v $1 $2 < /dev/null 2>&1`

nc -v -w 1 111.111.111.111 -z 22

nc -v -z -w 3 127.0.0.1 5050 &> /dev/null && echo "Online" || echo "Offline"

nc -v -z 192.168.8.216 9100 2>&1 | awk '{print $NF}'

nc -z 8.8.8.8 441 ; echo 0

nc MAINSERVER 9999 | grep whatever_you_like

nc localhost 3306

nc my_server 1234

ncal -w 2013

ncal -w 4 2013

ncat -k -e /bin/sh -l $PORT

ncat -l 2000 -k -c 'xargs -n1 echo'

a=$(ncdump myfile.nc |awk '/var61 =/ {nextline=NR+1}{if(NR==nextline){print $1}}')

a=$(ncdump myfile.nc | grep "var61:_FillValue" | sed -e "s/.*= //;s/ .*//")

a=$(ncdump myfile.nc |sed -z -e "s/.* var61 =\n  //;s/ .*//")

net use X: /delete

net use X: \\server\directory

net.trainParam.showWindow = false;

nethogs -d 5 | sed 's/[^[:print:][:cntrl:]]//g' > output.txt

netsh interface ipv6 add address "Local Area Connection" 2001:db8:290c:1291::1

netsh wlan show hostednetwork | cmd /v:on /c "find "Not" && echo found !errorlevel! || echo lost !errorlevel!"

netsh wlan show hostednetwork | cmd /v:on /c find "Not" ^&^& echo found !errorlevel! ^|^| echo lost !errorlevel!

netstat -a

netstat -anpt | grep apache2 |grep ESTABLISHED | awk '{ print $5 }' | cut -d: -f1 | sort -u

netstat -anp | grep LISTEN | awk '{print $4}' | sed s/".*:"//g | sort -n -u

$ netstat -ant | awk '$6 == "LISTEN" && $4 ~ /[\.:]80$/' | wc -l

$ netstat -ant | awk '$6 == "LISTEN" && $4 ~ /[^0-9]80$/' | wc -l

$ netstat -ant | awk '$6 == "LISTEN" && $4 ~ /:80$/' | wc -l

$ netstat -ant | awk '$6 == "LISTEN" && $4 ~ /\.80$/' | wc -l

netstat -b -n 1 |awk '{print $3;fflush()}' |tail -n +3 >traffic.txt

$ netstat -naputeo 2>/dev/null | awk -v OFS=';' '$1 ~ /^tcp/ && $3 > 4000 { sub(/^.+:/, "", $4); print $3, $4, $9 }'

netstat -natp | grep 11211 | grep ESTABLISHED

netstat -natp | grep 7143 | grep EST | awk -F' ' '{print $5}' | awk -F: '{print $1}' | sort -nr | uniq -c | awk {'print $1'}  | awk '{ sum+=$1} END {print sum}'

netstat -ntlp | awk '$4~/:*'${PORT}'$/{gsub(/\/.*/,"",$NF);cmd="kill -9 "$NF;system(cmd)}'

netstat -n | grep tcp | awk '{ print $5 }' | cut -d "." -f-4 >> /tmp/file && sort /tmp/file | uniq > /tmp/file.uniq

netstat -tlnp | awk '/:80 */ {split($NF,a,"/"); print a[2],a[1]}'

netstat -tnpl | awk '/tcp/{print $4}'

netstat -tn | cut -f2 -d: | cut -f1 -d' ' | sort -rn | head -1

netstat -t 1 -i > $NETStat_OUT_FILE 2>&1 &

new -n WindowName bash --login

new String[]{"/bin/sh", "-c", "'nm", "-l", "file1.o", ">", "file1.txt'"};

$new1 >> PASSWORD.txt

new_array[color]="red"

new_mac_address // for instance 00:f6:a0:ff:f1:06

newfile =  ${FILES/111/222}

newtask -p $Project_Name ./$PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@

next

FNR==NR {x2[$1] = $0; next}

NR==1 {s=l=$1; next} 

nfcapd -p 12345 -l /path/to/new/file/ -x "mv %d%f %d/$file"

ng-nailgun clojure.main "$@"

ng-nailgun clojure.main path/to/myscript.clj

nginx -v 2>&1 | awk -F/ '{print $2}'

ni hklm:software/classes/firefoxhtml/shell/edit/command -type directory -force

$ nice -10 ${BASH_ALIASES[list]}

$ nice -10 `alias list | sed "s/^\(alias \)\?[^=]\+='//; s/'$//;"`

nice '-n' '10' '{' './configure'

nice -n 15 sh -c 'while true; do true; done'

nickw444@laptop ~ $ sudo ./addsudousers.sh `cat listofusers.txt`

nickw444@laptop ~ $ sudo ./addsudousers.sh bob joe jeff

var="$var"$'\n'"in a box"

nl -b a -p | while read number line; do [ "$(ispell -l <<< "$line" | wc -l)" -gt 0 ] && echo "$number: $line"; done

second=`nm $item2 | grep -e '\<T\>' | awk '{print3}'`

$ nm -P a.out | awk '$2 == "T" && $1 !~ /^_/ && $1 != "main" {print "b " $1}'

nm /usr/bin/svn

nmake

nmake /f "makefile"

nmake /f makefile.vc BUILD=release RUNTIME_LIBS=static

nmap -PN -p 22 --open -oG - 192.168.*.* | awk '$NF~/ssh/{print $2}' > sshopen.txt

nmap -iL yourfile -v -oX nmap.xml

nmap -n -sL -iL ip_ranges -oG - | awk '/^Host/{print $2}' | shuf -n 100000

nmap -oX nmap.xml -sP 172.16.1.0/24

nmap -p 23 -i list.txt | grep '^23.*open' -B3 | grep '^Nmap scan' | cut -d\( -f2 | cut -d\) -f1

nmap -sP 192.168.0.0-255

nmap -sn -oX\ - example.com

nmap -vv -iL mylistwithip.txt  | grep "Discovered open port" | awk {'print $6":"$4'} | awk -F/ {'print $1'} > output.txt

nmap 192.168.0.0/24 -sU -p 44555 | grep -B3 open | egrep -o "([0-9]{1,3}\.){3}[0-9]{1,3}"  > output.txt

$ nmap host -PN -p ssh | egrep 'open|closed|filtered'

nnoremap <leader>scp :badd scp://secure//home/Julius/fee/fie/fo/fum.txt

nobody ALL = NOPASSWD: /your/script

nobody ALL=NOPASSWD: gzip

node "$UGLIFYJS" -o "$JS_COMBINED_EDITOR" "$JS_TEMP_EDITOR"

node -v

node helloworld.js

node mixpanel-extract date:"$1" events:"$EVENTSQUOTES"

node server.js 2>&1 >/dev/null

node server.js 2>&1 >/dev/null &

node server.js &

node test.js

$ node wrapper.js blah

nohup $SCRIPTNAME --daemonize "${PARAMS[@]}" &>/dev/null &

nohup $_JAVA_EXEC -Dproc_$COMMAND $JAVA_HEAP_MAX $HADOOP_OPTS -classpath "$CLASSPATH" $CLASS "$@" > "$_HADOOP_DAEMON_OUT" 2>&1 < /dev/null

nohup &- 2>&- &

$ nohup ./fetch_command > fetch_log_file &

nohup ./myprogram.sh > /dev/null 2>&1 & echo $! > run.pid

$ nohup ./myscript.py &

$ nohup ./myscript.py > myscript.log &

nohup ./program &

nohup ./script > script.out &

nohup ./script > script.out 2>&1 &

nohup ./script > script.out 2> script.err &

nohup ./shell_script & 

nohup ./startEventProcessor &

nohup /home/edheal/myprog arg1 arg2 >/home/edheal/output.txt 2>&1 &

nohup /path/to/run.sh > run.log &

nohup /path/to/watchsu 2>&1 &

nohup /path/to/your_script.sh &

nohup 2>&1 Ex.exe &

(nohup S1 && nohup S2) &

nohup bash another.sh &

nohup bash script.sh </dev/null >/dev/null 2>&1 &

nohup find $LOCATION -exec shred $TIMES -u '{}' \; >> /home/user/output.txt &

nohup glxgears >/dev/null 2>&1 &

nohup java -jar myjar.jar

nohup java -jar myjar.jar >> logfile.log 2>&1

nohup ls -1 *.txt 2>/dev/null | .....

nohup matlab -nodesktop -nosplash -r ...........

nohup matlab -nodisplay -nosplash -r matlab_command > outfile.txt &

$ nohup matlab -nodisplay -nosplash -r "runMyScript();"

nohup myInScript.sh >some.log 2>&1 </dev/null &

nohup mycommand >/dev/null &

nohup myprogram > foo.out 2> foo.err < /dev/null &

nohup myscript.sh

nohup nice -n 5 python3 blah.py > log.txt &

nohup nice /usr/bin/java -DJENKINS_HOME=/opt/jenkins/CI -Dorg.apache.commons.jelly.tags.fmt.timeZone=America/New_York -Djava.awt.headless=true -XX:MaxPermSize=2048m -XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled -jar jenkins.war

nohup nice /usr/bin/java -DJENKINS_HOME=/opt/jenkins/CI -Dorg.apache.commons.jelly.tags.fmt.timeZone=America/New_York -Djava.awt.headless=true -jar jenkins.war -XX:MaxPermSize=2048m -XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled

nohup node server.js &

nohup otherScript.sh > $WORKSPACE/scriptOutput.txt 2>&1 &

nohup otherscript &

nohup php -r 'while (true) { echo "a";}' &

nohup php  /home/cron.php >/dev/null  2>&1 &

nohup php somescript.php >/dev/null 2>&1 &

$ nohup python app.py 8080 &

nohup python manage.py runserver 0.0.0.0:8000 &

for i in {1..1000}; do nohup python test.py & done

nohup runScript </dev/null 1>&- 2>&- &

nohup sass --watch file.scss:file.css > ${logDir}/$(/bin/date +%Y%m%d.%H%M).sass_watch.log 2>&1 &

$ nohup sayHello

nohup scrapy crawl first &

nohup script-name.ksh ${parameter1} ${paramter2} & 

nohup sh -c 'for i in mydir/*.fasta; do ./myscript.sh "$i"; done >output.txt' &

nohup sh /tmp/cmd.sh </dev/null &

nohup sh /tmp/cmd.sh </dev/null >/dev/null 2>&1 &

nohup some_command > nohup2.out 2>&1&

nohup some_command &> nohup2.out

nohup somecmd arg1 &- 2>&- &

nohup ssh ${NAMES[i]}@${IP[i]} 'vmstat -n ${interval} ${delay} > $file.csv' 

nohup ssh ${NAMES[i]}@${IP[i]} "vmstat -n ${interval} ${delay} > $file.csv"

nohup ssh ${NAMES[i]}@${IP[i]} 'vmstat -n ${interval} ${delay} > $file.csv' >& /dev/null &

nohup ssh ${NAMES[i]}@${IP[i]} "vmstat -n ${interval} ${delay} > $file.csv" > /dev/null &

nohup ssh -q sc-2 tail -f /home/logs/oam-2.log > /root/logs/file.log &

 nohup ssh remote 'sleep 100 &; echo $!'

nohup ssh user@server 'simulation/script' &

nohup tcpdump port 389 -i bond0 -s 0 -w /tmp/capture.pcap  > nohup2.out 2>&1 &

nohup time ./build_all args to build_all go here &

nohup xterm -e java -jar start.jar &

nohup ~/Desktop/left.py &

none /cygdrive cygdrive user,noacl,posix=0 0 0

normal: { x: 10, y: 6 }

normal: { x: 5, y: 3 }

nosetests --with-coverage $(for f in *.py; do echo --cover-package="${f%.*}"; done)

       nostage

not <shell cmd> AND exit 0 OR <display syntax> AND exit 1

notepad hello.txt &

my_app_id=$(notificationdb_last_known_path 29)

notify-send "$line"

notify-send "notification title" "notification text"

nova list | grep derpInstance | sed 's/.*=//;s/ .*//'

npm cache clean

npm config get prefix

npm config set prefix /usr/local

myapp_path=$( npm explore -g myapp -- "pwd" )

npm get prefix

npm install -g coffee-script

npm install -g less

$ npm install .

npm install azure --global

npm install http-server -g

npm install jsawk

npm_list=$(npm list -g 2> /dev/null)

npm ls --depth 0 --depth 2 --depth 6 --depth 2

npp anyFile1 anyFile2 anyFile3

avg=1+3*$nprop

nrams1=`awk -F";" -v fecha=$fecha -v area=$area '$1 == fecha && $2 == area { print $3 }' niveles-rams.csv` 

nslookup < filename.csv

  num=$num + 1

num2

num2=`echo "obase=16;ibase=16;$start_num + $num" | bc`

num2=`obase=16;ibase=16; echo $start_num \\+ $num | bc`

{ num_gold++; wt_gold += $2; print num_gold; print wt_gold; }

  temp=$number1

nunit-console-x86 ambiHomeWPFTest\Tests\bin\Release\Tests.dll

nvcc testCuda.cu --cl-version 2010 --use-local-env -I"%OPENCV_DIR%\include" -L"%OPENCV_DIR%\x64\vc10\lib" -lopencv_core240 -lopencv_highgui240

nvcc testCuda.cu --cl-version 2010 --use-local-env -I"%OPENCV_DIR%\include" -L"%OPENCV_DIR%\x64\vc10\lib" opencv_core240.lib opencv_highgui240.lib

c=${c##$'\n'}

\o

\o 'C:/users/user/desktop/copy_command.txt'

objdump -d -C file.o

ocrscript.sh -from /home/kristoffer/test.png -to /home/kristoffer/test.txt

ocrscript.sh /home/kristoffer/test.png /home/kristoffer/test.txt

octave --silent --eval "myOctaveFunc(\"$line\")"

octave --silent --eval "myOctaveFunc('$line')"

octave script.m > /dev/null

od -An -t x1 | while read line;do for char in $line;do echo $char;done ;done

od -An -vtx1 -w1 test.txt | cut -c2-

od -An -vtx1 -w1 test.txt | cut -c2- | fgrep -v 0a

od -A n -t o1 -v input.txt | rs 0 1 | while read n; do [ $n -eq 015 ] && read n && continue; printf "\\$n"; done

tempfile=XXX-$(od -N4 -tu /dev/random | awk 'NR==1 {print $2} {}')

od -a -An -v file | perl -0777ne 's/\n//g,print "$_\n " for /(?:esc| fs| gs| us)?(?:(?!esc| fs| gs| us).)*/gs'

VAR=`od -a -A n /dev/urandom | head -30 | tr -d ' ' | tr -d '\n' | awk '{print substr($0,1,256)}'`

od -c ble.txt; od -c bla.txt

od -c filename.csv | less

od -c myfile.csv

 od -c scriptname

month=$(od -t x1 --skip-bytes=8 --read-bytes=1 file.moi | head -1 | awk '{print $2}')

day=$(od -t x1 --skip-bytes=9 --read-bytes=1 file.moi | head -1 | awk '{print $2}')

year=$(od -t x2 --skip-bytes=6 --read-bytes=2 file.moi | head -1 | awk '{print $2}')

od -xcb input_file_name | less

ogr.sh /path/to/dir

ogr2ogr -f "ESRI Shapefile" -s_srs "+proj=longlat +ellps=aust_SA +nadgrids=~/bin/a66_national.gsb +wktext" -t_srs EPSG:4283 outputgda94.shp inputagd66.shp

ohome:/home/jail:/home/username

omxplayer -p /home/jason/Music/FileName.mp3 &

one two

one - two three

one two three four

one two three four

(one two three four five)

one  two:three:four:five

PATH=$opath echo $PATH

open -a "/Applications/Sublime Text.app/" ~/.profile

$ open -a "Adobe Acrobat 7.0 Professional/Adobe Acrobat 7.0 Professional" foo.pdf

$ open -a Coda

open -a 'Flash Player' $(xmlc -warnings=false DocumentClass.as | tail -n 1 | sed 's/[[:space:]].*$//')

open -a 'Flash Player' `xmlc -warnings=false DocumentClass.as | tail -n 1 | sed 's/[[:space:]].*$//'`

open -a Microsoft\ Word

open -a SourceTree path-to-file

open -a Terminal $1

open -a Terminal "$1"

open -a Terminal /path/to/python/script.py

open -a Terminal.app script1.command & open -a Terminal.app script1.command & open -a Terminal.app script1.command 

open -a TextEdit /path/to/logfile

   open -a file.command

open -a love.app "/Users/mtc06/testgame"  

open -b com.Growl.GrowlHelperApp

open -g http://localhost:3000/

$ open /Applications/MyApp.app --args /path/to/file.pdf

open /Applications/Wireshark.app

open | /myapplication/

open THIS, "-|", "cat $ARGV[0]";

open THIS, "cat $ARGV[0] |";

open com.apple.calculator

lh() { open http://localhost:$1; }

open http://www.google.com

open "http://www.ocwconsortium.org/index.php?q=mathematics&option=com_coursefinder&uss=1&l=&s=&Itemid=166&b.x=0&b.y=0&b=search"

open my $fh, "<", "input.txt" or die "Couldn't open input.txt: $!";

 open my $fh, '-|', 'some_program --with-options';

open my $pipe, '-|', @command, '< single argument not mangled by shell >';

open {file}

(open_init_pty sudo bash -c "echo hello")

str=$(openssh version | cut -d" " -f2)

openssl aes-128-cbc -e -in stream1.ts -out enc/stream1.ts -nosalt -iv -K 7aeb2faae0289b9828b2994f50a4cc3a

$ myuser=$(openssl aes-256-cbc -in encrypted -pass file:../password.txt -d | awk '{print $1}')

$ openssl base64 < sound.m4a

openssl blowfish -in plaint_text_file -out encrytped_file

openssl ciphers 'ALL:eNULL' | awk -v w=RC4 '!($0~w)' RS=':' ORS=':'

openssl ciphers 'ALL:eNULL' | awk -v w=RC4 '($0~w)' RS=':' ORS=':'

openssl des3 -salt -in /pritom/uaeyha_com.sql -out /pritom/a.ss -pass pass:pritom

filehash=`openssl dgst -sha1 $filename | sed 's/^.*= //'`

openssl enc -d -aes-256-cbc -a -salt -in test.txt

openssl enc -nosalt -aes-128-cbc -in test -out test.enc -p

openssl ocsp -whatever

for f in *.pem; do openssl pkcs12 -export -out "`basename $f .pem`.p12" -inkey "$f" -in "$f" -certfile ./myca.pem -password pass:myPass; done

openssl rsa -pubout ... 2>/dev/null

openssl s_client -connect imap.gmail.com:993 -crlf

openssl s_client -connect pop.gmail.com:995 -quiet

openssl x509 -enddate -noout -in file.pem

openssl x509 -in cacert.pem -noout -text

openssl x509 -passin pass:passwd -req -days 365 -in testem/2.csr -signkey testem/2.key -out testem/2.crt

openvt -c 2 sh myprogram.sh

optind = 0;

option = bash -c 'cmd "$1" "$2" | sed "s/x/y/"' sub

$options = $fields + $defaults;

value=`oraclecommand`.

org/apache/xml/serialize/OutputFormat

orig_file = PRC_19_000011061354_01147_20110323.gz

os.environ["c"] = "value"

osacript path/to/applescript.scpt > /dev/null 2>&1 &

osascript -e 'POSIX path of (path to frontmost application)' | xargs basename

osascript -e 'Tell application "System Events" to display dialog "Enter the network password:" **with hidden answer** default answer ""' -e 'text returned of result' 2>/dev/null

osascript -e 'Tell application "Terminal" to do script "osascript ~/Scripts/reset_simulator.applescript"'

 osascript -e "display notification \"$var2\""

osascript -e 'display notification "'"$var2"'"'

osascript -e 'do shell script "/path/to/script args" with administrator privileges'

osascript -e "long user name of (system info)"

osascript -e 'system version of (system info)'

res=$(osascript -e 'tell app "System Events" to display dialog "Things are broke \r \rPress OK to launch Google" buttons {"Cancel", "OK"}' 2>/dev/null)

osascript -e 'tell app "System Events" to display dialog with delay "10" "Running Health Check \r \rPlease allow 30 seconds or more to complete." giving up after 10 with title "Health Check"'

osascript -e 'tell application "System Events" to get name of (processes where background only is false)'

osascript -e 'tell application "System Events" to keystroke '$1''

osascript -e 'tell application "Terminal" to do script "cd /"'

osascript -e 'tell application "Terminal" to do script "echo hello"'

osascript -e 'tell application "Terminal" to quit'

osascript -e 'tell application "terminal"' -e 'do script "cd /path/to/direcory; output/b.o"' -e 'end tell'

osascript ~/Scripts/reset_simulator.applescript

osascript ~/Scripts/reset_simulator.applescript &

other_command < my_buf

out =`python --version`

clean=$out@cleanup

outlook.exe /c ipm.note

 outlook.exe /c ipm.note /a filename

outlook.exe /c ipm.note /m someone@microsoft.com

 outlook.exe /c ipm.note /m someone@microsoft.com&subject=test%20subject&body=test%20body

output "$(ls)";

output = %x{bash -lic 'repository_root'}

output = `casperjs myscript.js '#{url}'`

output = `phantomjs rasterize.js http://raphaeljs.com/polar-clock.html clock.png`

output.dir=C:\Test_Results

p

p ls -al 

p.StartInfo.Arguments = "\"" + path + "\"";

p.StartInfo.Arguments = "-czf";

p.StartInfo.Arguments = @""" + path + """;

p.StartInfo.Arguments = "czf";

p4 delete filename

p4 describe -s 100 101 102 103

p4 fstat -T "headRev" [file]

p4 have [file]

p4 login -s 2>&1 | find "gg"

p4 set P4PORT=perforce:1669

p4 sync -f //depot/project/...#0

p4 sync -n

p4 sync {//tree1/a/b/c/...,//tree2/d/e/...}@1234

pBuffer: array[0..2400] of AnsiChar;

package

packageArchetype.java_server

pacman -Qq | grep -qw package || pasman -S package

pacman -S --noconfirm base-devel

pacman -S --quiet --noprogressbar --noconfirm base-devel

pacman -Sup | grep -vc "^\(::\| \)"

pacman -S bash-completion

pactl list source-outputs

pactl list sources

SOME_STRING=$(padSpaces TEST 10)

pandoc -fmarkdown_strict+hard_line_breaks -t markdown_strict

pandoc  -s -S YOURTEXTFILE -o YOURDOC.docx 

parallel --colsep ' ' ssh {1} prog {2} {3} ... :::: argfile

 parallel --gnu -n 10 find {} -name 'regex' ::: *

parallel --gnu echo {} ::: A B C

parallel --gnu "screen -d -m -S t1 bash -c 'echo {} 2>&1 | tee {}.txt'" ::: hi bye

parallel --gnu 'var="{}"; /some/binary "${var:0:6}/$var"' ::: 20131017 20131018

parallel --load 100% ./intensiveCommand ::: 1 2 3 ::: 1 2 3

 parallel --pipe --block 2M grep foo < bigfile

parallel --pipe --header : my_program

parallel --pipe --sshlogin server.example.com,server2.example.net grep foo < bigfile

parallel --pipe "sed 's#^\(@.*\)_\([12]\).*#\1/\2#'"

parallel --timeout 30 -j0 'while ! nc -vz localhost {}; do sleep 1; done; echo {} is open' ::: {4000..4004}

parallel --xapply 'python interleave.py <(zcat {1}) <(zcat {2}) |gzip > {=1 s/_R1.txt.gz/_interleave.txt.gz/=}' ::: *R1.txt.gz ::: *R2.txt.gz

parallel --xapply 'python interleave.py {1} {2} > {=1 s/_R1.txt/_interleave.txt/=}' ::: *R1.txt ::: *R2.txt

parallel -N1 --pipe python -mjson.tool < jsonList

parallel -N4 --xapply 'printf "%s\n%s\n" {1} {2}'  :::: file1 :::: file2

parallel -a hosts 'echo -n {}; ping -c1 {} |egrep -o -m 1 "\([0-9]+\.[^\(\r\n]*\)"'

parallel -a table_file.tsv --colsep '\t' cmd -o {2} -i {1}

parallel -j20 seq 1000 \| parallel -j40 -I I ssh server{} \''"cd /blah/; ./script.sh I"'\' ::: {1..20}

$parallel -j 4 -- 'php script.php >> output.txt' 'php script.php >> output.txt' 'php script.php >> output.txt' 'php script.php >> output.txt' 'php script.php >> output.txt'

parallel -j 4 ./sim -r -- 1 2 3 4 5 6 7 8 ...

$parallel -j 4 php script.php >> output.txt -- 1 2 3 4 5

parallel ... < giantfile.txt

parallel ./myscript {1} ::: {1..100}

parallel ./run {1} '>' {1}_out ::: {1..10}

parallel ::: "${cmds[@]}"

parallel du ::: */*

parallel echo ::: "${V[@]}"

parallel 'grep -f {} infile' ::: vailtar_*

parallel 'if [ -s {} ] ; then cmd_to_run {}; fi' ::: $cur_archive_path/log.{1..3660}

parallel script.pl --input {3} --output {3.}.out --otherargs range:{1}-{2} :::: <(ls | awk 'NR==1 {print $2}') <(ls | awk 'END {print $2}') <(ls)

parallel 'var=$(printf "%.5d" {}); echo test_$var' ::: $(seq 0 3)

parallel_commands "cmd arg0 arg1 arg2" "other_cmd arg0 arg2 arg3"

parallel_commands "sleep 1" "sleep 2" "sleep 3" "sleep 4"

    param-test 'foo'

param1=abc param2=xyz /home/abhijeet/sample1.sh

params = "mv /full_path_to_folder_source/*.nib /full_path_to_folder_target/"

params[1] = "{print \"1\" $0}";

parens like this

parent/working

(parse-integer string :start 1)

parse_args "$@"

parse_command_line

(partial read-line-with-prompt "Enter date: ")

particular_script || true

$> passwd
passwd $username

passwd --stdin username < filename

$> passwd someuser
paste - - < input-txt

paste - - < myFile

paste <( command1 ) <( command2 )

paste <(./progA) <(./progB)

$ paste <(awk '{print $1}' file1 ) <(awk '{print $3}' file2 ) <(awk '{print $7}' file3) <(awk '{print $1}' file4)

paste <(awk '{print $1}' file2) file1 <(awk '{print $2, $3, $4}' file2)

paste <(awk -F , '/Aname/{for(i=1;i<=NF;i++) print $i,","}' file.csv) <(awk -F , '/Bname/{for(i=1;i<=NF;i++) print $i,","}' file.csv) <(awk -F , '/Cname/{for(i=1;i<=NF;i++) print $i}' file.csv) 

paste <(awk -F, 'NR%4==2 { print $NF }' file) <(awk 'NR%4!=0 { printf "\"%s\",", $0; next } { printf "\"%s\"\n", $0 }' file) | sort | sed 's/[^"]*//'

paste <(awk -F, '{print $1}' file1) <(awk -F, '{print $2}' file2) 

paste <(cut -d " " -f1 file1) <(cut -d " " -f2 file2) 

   paste <(cut -f1 file1) <(cut -f3 file2) > >(process)

paste <(echo -e "this\tis\ttab\tseparated") <(echo "this is your comment")

paste <(find . -maxdepth 1 -printf "%M %u %c %p\n") <(find . -maxdepth 1 -exec du -s {} \; | cut -f1 ) | column -t

paste <(shuf a.txt) <(shuf b.txt)

paste <(sort file1) <(sort file2) | awk '{"date --date=\"" $5 ":00:00\" +%I%P" |& getline $5; print $1 " " $4 " " $2 " " $5 }'

paste <(sort file1) <(sort file2) | awk '{print $1,$4,$2,$5}'

for i in D1/*.txt; do paste "$i" D2/${i/D1\//} | awk '{ printf "%s\t%s\t%s\t%s\n", $1, $5, $4, $8 }' > D3/${i/D1\//}; done

paste --delimiter=' ' file1 file2

paste --delimiter=' ' file1 file2 > outputfile

paste --delimiters=\; file1 file2

paste -d ' ' <(cut -d ' ' -f 1 file1) file2

paste -d ' ' <(ls -1) <(echo "XXX")

paste -d " " FILE FILE

paste -d ' ' file <(rev file)

paste -d ' ' file1 file2

paste -d "" /path/to/letters /path/to/numbers

paste -d '-' <(echo "$A") <(echo "$B")

paste -d ',' file[123] | cut -d ',' -f 1,2,3,5,6,8

paste -d' ' - - - - - - < inputfile

paste -d' ' <(paste -sd'   \n' file1) <(paste -sd'   \n' file2) | tr ' ' '\n'

paste -d' ' A.txt B.txt > C.txt

paste -d' ' file1 file2

paste -d" " ips.txt names.txt

paste -d' ' output1 output2

paste -d, - - < filename

paste -d, <(awk '{print $1}' file.txt) <(awk '{print $1}' anotherf.txt)

paste -d, <(awk -F, '{print $2}' file) <(awk -F, '{print $3}' file)

paste -d, <(cut -d, -f 3,7 f1) f2

paste -d, <(cut -f1 -d' ' file.txt) <(cut -f1 -d' ' anotherf.txt)

paste -d, <(echo "$var1") <(echo "$var2")

paste -d, <(sed 's/\r$//' f1 | cut -d, -f 3,7) <(sed 's/\r$//' f2)

paste -d, <(seq $(wc -l <input.txt)) <(cut -d, -f 2- input.txt)

paste -d, $(ls ~/Desktop/*.txt | awk -F/ '{print $NF"/"$0}' | sort -n | cut -d/ -f2-) > ~/Desktop/merge.txt

paste -d, -s file

paste -d, /tmp/list1 /tmp/list2 | awk '{print NR "," $0}'

paste -d, a_props.txt a.txt | awk -v PROP='age' -v FS=',' '{for (i=1; i<=NF/2; i++) if ($i == PROP) print $(NF/2+i)}'

paste -d':' f1 <(perl -pe '$\="\n"x($c=()=/[a-z]+/g)' <f2)

paste -d: test[1-3].csv | sed -e's/^:/,:/' -e's/::/:,:/g' -e's/::/:,:/g' -e's/:$/:,/' -e's/:/,/g'

paste -d@ alpha num | sed 's/@/ blah /'

paste -d'T' file... | sed -e's/^T/ET/' -e's/TT/TET/g' -e's/TT/TET/g' -e's/T$/TE/' -e's/T/S/g'

paste -d"\n" /tmp/file1 /tmp/file2

paste -d"\t" paste.file.txt $(perl -anF'\t|\n' -e'$n=@F-1if!$n;for(0..$n){push@{$$m[$_]},$F[$_]}' 'END{print map{join"\t",@$_,"\n"}@$m}' input.txt) | perl -ne '{while (<>) {$line = $_; $line =~ s/\t/,/g; print "$line";}}' | sed 's/\"//g' > comma.delimited.output.csv

paste -d"|" inputfile anotherfile | awk '!/^0/{gsub(/^.*\|/,"");print}'

paste -d : - - < file.txt

paste -d ':' file1.txt file2.txt file3.txt

paste -d '\n' F1 F2

paste -d '\n' SupposedToSend.txt Recieved.txt GotReplyFor.txt | uniq -c | grep -v '^   3'

paste -d '\n' filea fileb

paste -d "|" 1.txt 2.txt 3.txt. 4.tx

paste -d '~' file1 file2 | sed 's/~/,,/'

paste -s -d' \n' input.txt 

paste -s -d" " file

paste -sd\  file 

paste -sd+ infile | bc

paste -s -d","

paste -s -d, - < try_1.txt

paste -s -d, file

paste -s file* -d',' | sed 's/^/thisistheresult/'

paste /path/to/names.txt <(sort -R /path/to/emails.txt)

paste 1 <(cat 2 3 4 | sort -R)

paste D1/file1.txt D2/file1.txt | awk '{ printf "%s\t%s\t%s\t%s\n", $1, $5, $4, $8 }' > D3/file1.txt

paste File_1 File_2 | awk '{min = $4; if ($2 < $4){min = $2;} max = $5; if ($2 > $5){max = $2;}print $1"\t"min"\t"max;}' -

paste a.txt <(shuf b.txt)

paste a.txt b.txt | sed -n '/\([0-9]\+\)[[:space:]]\+\1/p' > c.txt

paste a.txt b.txt | sed '/\([0-9]\+\)[[:space:]]\+\1/d' > d.txt

 paste - - < input-txt | awk '{$1=$1; print OFS $0 OFS}' OFS=\|

paste - - - < file | awk '{print $2, $3, "=", $1, "times"}'

paste c1 c2 | awk '{ printf("var %s = some_function(%s);\n", $1, $2); }'

$ paste c1 c2 | awk '{print $1 + $2}'

paste  dat1.txt <(cut -d" " -f2- dat2.txt)

paste data1 data2 | awk '{print ($1 + $3), $4}'

paste f1 f2 f3 | awk '{print "xyz"$1, $2$3"xyz", "xyz"}'

paste file.txt anotherf.txt

paste file1 file2

paste file1 file2

paste file1 file2

paste file1 file2 | awk '{print "TEST CASE " $3 "  " $4 / $9}'

paste file1 file2 | awk '{print $1,$4,$2,$5}'

paste file1 file2 | sort | cut -f2

paste file1.txt file2.txt > fileresults.txt

paste file2 file1

paste out1 out2 | grep -v '\..'

paste - - < <(seq 16) > LISTFILE

paste seq.txt A.txt | sort tmp2.txt | sed "s/^[0-9]*\s//"

paste - - - < File | sort -k18,18g | xargs -n 6

paste testA.txt testB.txt testC.txt | sed -e 's/\t/ : /g'

paste text1 text2 | while read file1 file2; do diff "$file1" "$file2"; done

patch original.txt diffs.patch

 patch server.xml mydiff.patch

$path = "/home/user/prefix_".$var."_suffix/bar"

$path =~ s/%[\da-f][\da-f]//gi;

path foomatic/featurizer

path to users folder

path/to/file --> path

path/to/myscript.clj

retval=$(path/to/run_sftp.sh)

path/to/your/webdirectory/obj/Debug/Package/PackageTmp/

path1="/home/folder"; echo "hello web" > $path1/foo

"path\Application Name.appref-ms" arg1,arg2,arg3

$pattern = '#^(\d+)\s+(.*)\s+(\d+)$#';

pattern { action }

!(pattern-list)

pause

pause >nul

pax> uuencode hello hello >>testEmbed.sh

pax> echo "ibase=16;obase=2;A41EB86E184207262C12F66E7C480577" | bc | tr -d '\\\n'

pbpaste > ls.txt

pbpaste | egrep -o [^$]+ | bash

pbpaste | egrep -o [^$]+ | while IFS= read -r LINE; do eval "$LINE"; done

pbpaste | node

pbpaste | tr 'a-zA-Z' 'n-za-mN-ZA-M' | pbcopy

pcregrep --exclude_dir='^abc|cde$' -r alpha .

pcregrep -M '<activity[\s\S]*?MainActivity[\s\S]*<\/activity>' file

pcregrep -M '(?s)<activity.*?MainActivity.*?<\/activity>' file

pcregrep -M '(^\s*\*\s*\[ \][^\*]+?(\w*\:[^\*]+\d$)|([^\*]+[.]com[.]au$))' file1

pcregrep -M '(foo(\n*.*?){0,4}bar)?(bar(\n*.*?){0,4}foo)?' filename

pcregrep -M '(foo.*(.*\n){0,4}.*?bar)?(bar.*(.*\n){0,4}.*?foo)?' filename

 pcregrep -Mni '^[^\S\n]*?\w+\s+\w+?\s*\([\w-0-9,/* \s]*\)\s*\{$'

pcregrep -M ";*\R*.*thingtosearchfor*\R*.*;.*"

pcregrep -o '(?<=_ )([^(]+)' /tmp/foo

pd_dump prod-db -U postgres > prod-db-$(date +%d-%m-%y).sql

pdcp -w node[10-12] /local/file /remote/dir/

x=$(pdfinfo "$i" | grep "Title")

x=`pdfinfo "$i" | grep "Title"`

foo=$(pdfinfo pdffile.pdf | grep Pages | awk '{print $2}')

pdfopt test.pdf test.opt.pdf &>/dev/null

pdftk $(ls | sort -n) cat output combinewd2.pdf

pages1=$(pdftk "$1" dump_data | awk '/NumberOfPages/{sub(/^[^:]*:/, ""); print}')

pdftk "${args[@]}" ...

pdftk `find . -name "*.pdf"` cat output output.pdf

pdftk `ls | sort -n` cat output combinewd2.pdf

$ pdftk form.pdf fill_form data.fdf output out.pdf flatten

pdftk new.*.pdf output output.pdf

foo=$(pdftk pdffile.pdf dump_data|grep NumberOfPages| awk '{print $2}')

$ pdftk template.pdf stamp words.pdf output out.pdf

pdftk thefile.pdf cat 4-10 output pages_4-10_from_thefile.pdf

pdftotext OGD-Metadaten_2_1_2012_10.pdf

pdftotext myfile.pdf - | grep 'pattern'

pdsh -w node[10-12] command

pdsh -w node10,node11,node12 command

 pearVer=$(pear -V 2>&1 | sed '/^PEAR Version: /s///')

pear channel-discover pear.phpunit.de pear.symfony-project.com

perf stat -B dd if=/dev/zero of=/dev/null count=1000000 0> result1

perl -00ne 'print $1,"\n" while (/"((select|insert|update|delete|alter).*?)"/sig);' file

perl -00ne 'print join " ",split(/\s+/,$1),"\n" while (/"((select|insert|update|delete|alter).*?)"/sig);' file

perl -00ne 'while (/"((select|insert|update|delete|alter).*?)"/sig){$x=$1;$x=~s/\n//g;$x=~s/\s+/ /g;print "$x\n";};' file

perl -0100pi -e's/\+.*/+/' datafile

perl -0100pi -e's/^((?:.*\n){2}.*?\+).*/$1/' datafile

perl -0100pi -e's/^(?:.*\n){2}.*?\+\K.*//' datafile

perl -0777lni -e 'BEGIN{open(F,pop(@ARGV))||die;$b="#blockbegin";$e="#blockend";local $/;$d=<F>;close(F);}s|\n$b(.*)$e\n||s;print;print "\n$b\n",$d,"\n$e\n" if eof;' edited.file input.file

perl -0777nE'say /^0+$/ ? "yes" : "no"' file         # 5.10+

perl -0777ne'print /^0+$/ ? "yes" : "no"' file

perl -0777pe's/\n\s*(?=XYZ)/ /g' file

perl -0777pe 's/<!--BEGIN-->\n(?:(?!<!--END-->\n).)*?\[this\].*?\n<!--END-->\n/[new content]\n/s' in.txt

perl -0777pi -e 's/\n{3,}/\n\n/g'

perl -00 -lane 'next unless @F % 2; $, = " "; print reverse @F' yourfilenamehere

perl -00 -lpe 's|\r?\n| |g' file

perl -00 -ne '$n=tr/\n/\n/; if ($n>$m) {$m=$n; $max=$_}; END {print $max}' file

perl -00 -pe '$.==3 and $_=`cat file2`."\n"' file1

perl -00 -pe "s/\(click here [^)]*\)//g" inputfile > outputfile

perl -00 -pe 's/\n//g; $_.="\n"'

perl -0777 -i.orig -pe 's/foo/bar/gs' file1 file2 file3

perl -0777 -i -pe "s/(-name\\s*riak@).*/\${1}$riak_ip/g" vm.args

perl -0777 -i -pe 's/(\[mysqld\][^\^]+)/$1\nsometext/g' test.txt

perl -0777 -i -pe 's/\n/~~/g; s/"~~("|$)/"\n$1/g;' file

perl -0777 -i -pe 's{^\t*###[\S\s]*?^\t*###}{"foo"}gme' file.coffee

perl -0777 -ne 'print $1 if /^--- START ---\s*\n(.*?)--- END ---/s' file

perl -0777 -ne 'print join("\n", map {$_->[1]} sort {$a->[0] <=> $b->[0]} map {[length, $_]} split /\n/), "\n"' file

perl -0777 -ne 's/FROM\nLINE\n/TO\nTHIS\n/g;print'

perl -0777 -nle 'print "$1\n" while m/^\s*(\w+\s+\w+?\s*\([\w0-9,*\s]+\)\s{)/gm'

perl -0777 -nlwe 'while (m#/(\*?)(.*?)\1/#sg) { print $2 }' input.txt

perl -0777 -pe's/<p[^>]*>/<p>/g' input.html

perl -0777 -pe 's/,(?=\s*\);)//g'

perl -0777 -pe 's/\[.*?\]/!!!/gs' myfile

perl -0777 -pe 's/\\\n/\\n/g'

perl -0777 -pe 's/\n(?!\d{5}\b)/ /g' yourfile

perl -0777 -pe 's/\n\?\n//g' file

perl -0777 -pe 's/\n\s+/ /gms'

perl -0777 -pe 's/my first line\nmy second line\nmy third line\nthe fourth\n5th and last\n//g' paragraph_file

perl -0777 -pe "s|(\n\n//supercrazytag)|\nvoid func_new();$1|g" myfile.c

perl -0777 -pi -w -e 's/"flags" : {[^"]+"CP" : 1[^"]+"prop_name" : "ID"[^:]+: "SKU"/"flags" : {          "SET" : 1       },       "prop_name" : "ID",       "rule" : "SKU+ProductId"/gms;' *_input.xml

$ perl -0777 -wpe 's/\n //g' MANIFEST.MF

perl -CIOED -p -e 's/\p{Block=CJK_Unified_Ideographs}/$& /g' filename

perl -CIO -pe 's/[^[:print:]]//g'

perl -CSAD -i.orig -Mcharnames=:full -pe 'tr[\N{FULLWIDTH COLON}][:]' file1

perl -CSAD -i.orig -Mcharnames=:full -pe 'tr[\N{FULLWIDTH EXCLAMATION MARK}\N{FULLWIDTH QUOTATION MARK}\{FULLWIDTH NUMBER SIGN}\N{FULLWIDTH DOLLAR SIGN}\N{FULLWIDTH PERCENT SIGN}\N{FULLWIDTH AMPERSAND}\{FULLWIDTH APOSTROPHE}\N{FULLWIDTH LEFT PARENTHESIS}\N{FULLWIDTH RIGHT PARENTHESIS}\N{FULLWIDTH ASTERISK}\N{FULLWIDTH PLUS SIGN}\N{FULLWIDTH COMMA}\N{FULLWIDTH HYPHEN-MINUS}\N{FULLWIDTH FULL STOP}\N{FULLWIDTH SOLIDUS}][\N{EXCLAMATION MARK}\N{QUOTATION MARK}\N{NUMBER SIGN}\N{DOLLAR SIGN}\N{PERCENT SIGN}\{AMPERSAND}\N{APOSTROPHE}\N{LEFT PARENTHESIS}\N{RIGHT PARENTHESIS}\N{ASTERISK}\N{PLUS SIGN}\N{COMMA}\{HYPHEN-MINUS}\N{FULL STOP}\N{SOLIDUS}]' file1

perl -CSAD -i.orig -pe 'tr[\x{FF1A}][:]' file1

bash$ perl -CSAD -pe 's/foo/bar/g'

$ perl -CSD -nE '$seen{$1}++ while /(\pP)/g; END { say "$_ $seen{$_}" for keys %seen }'  sometextfile.utf8

perl -C -i -pe 's/s\x{0323}/s/g' "1.htm"

perl -E 'say for sort { substr($a, -11, 3) cmp substr($b, -11, 3) } glob "*.RST.txt"'

perl -F'[<>]' -lane '$state = $F[2] if /OpState/; print "$F[2] is $state" if /<Name>/' file

perl -F'[,\s]+' -lane 'print "@F[0..2,$_]" for 3..$#F' file

perl -F, -lane '$"=","; print "@F[4..9]"' file

perl -F, -lane '@A=sort @F; print join(",",@A)' input_file | uniq

perl -F, -lane 'print join(",",sort @F)' input_file | uniq

perl -F'\.' -lanE '$,="."; say grep /\S/, @F[0..3]' inputfile

perl -F'/\t/' -anle'$f?($l=$H{$F[0]})&&print(join"\t",$l,@F[1..$#F]):($H{$F[2]}=$_);eof&&$f++' f1.txt f2.txt

perl -F'/\t/' -anle 'BEGIN{$f=1}if($f==1){$H{$F[2]}=$_;$f++ if eof}else{$l=$H{$F[0]};print join("\t",$l,@F[1..$#F]) if defined$l}' f1.txt f2.txt

perl -F'/\|~\|/' -ane '$"="|~|"; if ($F[2] =~ /password/) { $F[0]="# $F[0]"; $F[3] = "\n"; } print "@F";' datafile

perl -F: -anE '$\=:; say reverse @F' input-file

perl -F: -anE 'say join( ':',  reverse @F)' input-file

perl -F: -lane 'print $F[0]' < /etc/passwd

perl -F'\W*(?:MAT|GHT|PUD):\W*' -lane'shift@F; s|>\s*$||for@F; print join", ",@F' file

 perl -F_ -ane'print unless $x{$F[1]}++'

perl -F -lane '$H{$F[0]." ".$F[1]}=$H{$F[0]." ".$F[1]}." ".$F[2]."_".$F[3];if(eof){foreach(keys %H){print $_,$H{$_}}}' your_file

perl -F -lane '$h{$F[0]}++;if($h{$F[0]}>=2){print $_;}' file1 file2

perl -F -lane 'if($.!=1){print $F[2]}' your_file

perl -F"\t" -lane 'print join ",", map {s/"/""/g; /^[\d.]+$/ ? $_ : qq("$_")} @F '

perl -F"{##}" -lane 'print $F[0] if($F[0]=~/\bword\b/)' infile

perl -F"|" -ane 'BEGIN{$f=0}if(/Rice/){print;$f=1}END{print "not found\n" unless($f)}' your_file

perl -F'\|' -i -lape 'if ($F[8] eq "ROBERT") { s/JAMES/FUDIK/g }' /dummy/chaat/h2

perl -F'\|' -lane 'print /\|/ ? join "|", @F[0,1,5] : $_' file

perl -I$PWD/p2 p2/maxconnect4.pl arg1 arg2 arg3 arg4

perl -I./assmbler/ assembler/asm.pl $1

perl -M$module -e exit

perl -M$module -e "print $module::VERSION . '\n'"

perl -M5.010 -wpi.bak -e'our $article; s/<text id="\K[0-9]+/++$article/ge' hugetextfile

perl -MCGI -i -pe  "BEGIN{undef $/;} s/<pre>(.*?)<\/pre>/'<pre>' . \$1 . '<\/pre>' . '$new_start_string' . CGI::escape(\$1) . '$new_end_string'/esmg" /my/path

perl -MData -E 'say for @Data::tests'

perl -MData -e 'print "$_\n" for @Data::tests'

Dt=$( perl -MDateTime -e'print DateTime->today(time_zone => "local")->subtract(days => 1)->strftime($ARGV[0]);' -- "$myDate" )

perl -MDigest::SHA1=sha1_hex -le "print sha1_hex <>" secure.txt

perl -MDigest::SHA=sha1_hex -le 'print sha1_hex<>' secure.txt

 perl -MHTML::Entities -CS -pe'$_ = encode_entities($_, "&<'\''")'

 perl -MHTML::Entities -CS -pe'$_ = encode_entities($_, "&<")'

 perl -MHTML::Entities -CS -pe'$_ = encode_entities($_, q{&<>"'\''})'

 perl -MHTML::Entities -CS -pe'$_ = encode_entities($_, q{&<"})'

perl -MLWP::Simple -e "print get ($ARGV[0]) =~ /<$ARGV[1]>(.*?)<\/$ARGV[1]>/;" http://www.example.com/ title

perl -MLWP::Simple -e "print get ($ARGV[0]) =~ /$ARGV[1]/;" "http://www.example.com/" "<body>(.*?)</body>"

perl -MLWP::Simple -e 'print head("http://stackoverflow.com")->as_string'

perl -MMath::Round -we 'print round $ARGV[0]' 12.49

perl -M'Module;SETUP CODE' -ne 'LOOP CODE'

perl -MO=Deparse -pe 's/(\d+)/localtime($1)/e'

Dt=$( perl -MPOSIX -e'my @d = localtime time-86400; --$d[4]; print strftime $ARGV[0], @d;' -- "$myDate" )

Dt=$( perl -MPOSIX -e'print strftime $ARGV[0], localtime time-86400;' -- "$myDate" )

perl -MPOSIX -e 'print POSIX::strftime "%Y%m%d\n", localtime((stat $ARGV[0])[9])' yourfile

perl -MPOSIX -e 'print POSIX::strftime("%d/%m/%y", localtime) . "\n"'

perl -MSub::Uplevel -e 'print "$Sub::Uplevel::VERSION"'

 perl -MTerm::ANSIColor -e 'print colored("yellow on_magenta","yellow on_magenta"),"\n"'| sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" | perl -lpe 's/[^[:print:]]//g'

perl -MTime::HiRes -e 'Time::HiRes::usleep 500000'

perl -MURI -le 'chomp($url = <>); print +{URI->new($url)->query_form}->{offset}'

perl -MURI -nle 'print +{URI->new($_)->query_form}->{offset}'

perl -Mstrict -Mwarnings -M5.014 -MData::Dumper -e 'say Data::Dumper->Dump( [ \@ARGV ], [ q[*ARGV] ] )' "$(pass_array locDbList)"

perl -aF, -lne 'print if ! $seen{$F[1]}++' data.txt

perl -ane '$f=$F[0].$F[1]; print "$k{$f}$_" if $k{$f}; $k{$f}=$_;' Sample_hg19_mapped.bed  intersect.RData > output.txt

perl -ane '$table{$F[1] or next} += $F[0]; END {print "$table{$_} $_\n" for keys %table}'

perl -ane '++$i; chomp; $line.=$_; if($i==5) {print "$line\n"; $line=""; $i=0;} else {$line.=","} ' <infile >outfile

perl -ane'$F[0] =~ s/_[^_]*\z//; print unless $x{$F[0]}++'

perl -ane'print $F[2]; print "\n" if eof' example* >combined.csv

perl -ane 'next if /^\s*$/; $f=$F[0].$F[1]; print "$k{$f}$_" if $k{$f}; $k{$f}=$_;' Sample_hg19_mapped.bed  intersect.RData > output.txt

perl -ane 'print "$F[0]\n" x $F[1]' file

perl -ane 'print if $. == 1 || grep {$_ > 50} @F[1..$#F]' file.txt

perl -ane 'print if $F[4]'

perl -ane 'print if($.!=1 && $F[1]!=0)' your_file

   perl -d -e 1

perl -e ' my @st=stat("'"$name"'"); print time - $st[9];'

for i in `perl -e '$,=" ";print +(A..Z)'` ; do echo $i ; done

perl -e '$0="something_else"; do "/path/to/wrapper"'

perl -e '$ENV{"property.name"} = "property.value"; system "bash"'

perl -e '$count=1; foreach (<>) { s/(my-company-review)(\/<\/link>)/$1$count$2/ && $count++; print; }'

perl -e '$count=1; foreach (<>) { while(s/(my-company-review)(\/<\/link>)/$1$count$2/) {$count++;} print; }'

perl -e '$linehex=unpack("H*",pack("B*",$line));print $hex'

perl -e '$s=1;while(<STDIN>){if(/^of_interest /){$s=1;$f=0;$x="";}if(($s==1)&&/QUALIFIED_CLOCK/){$f=1;}if(/^\)$/){if($s==1){$x.=$_;}if($f==1){print$x;}$s=0;next;}if($s==1){$x.=$_;}}'

perl -e '(chomp, s/^\s*\?//) && system "svn", "add", $_ for qx(svn st)'

perl -e '@a=`ls`;m/nw=(\d+)\.a=(\d+)(?{print"$1\t$2\n"})/ for@a'

perl -e 'exit(!(grep(m{^/usr/bin$},split(":", $ENV{PATH}))) > 0)' && echo "found it"

perl -e 'for (1..1000) { my $fh; if(open($fh,">&=$_")) {$fh{$_}=$fh }  } print map{"$_\n"} keys %fh'  3>/tmp/foo

perl -e 'foreach (<>) { $count<2 && s/hello/goodbye/ && $count++; print; }'

$ perl -e 'local $/; $_ = <>; s/ style=\047[^\047]*\047//g; print' fileA > fileB

perl -e 'local($/); $data = <>; $data =~ s/stringstart(.*?)stringend//gms; print $data'

perl -e 'open my $log_fh, ">", "/tmp/dir/log" or die; while (1) { print $log_fh $x++,"\n"; } '

perl -e 'print "$ENV{\"Clear Workspace\"}\n";'

perl -e 'print "$_\n" for sort { substr($a, -11, 3) cmp substr($b, -11, 3) } glob "*.RST.txt"'

$ perl -e 'print "A" x 1024 . "\0\0\0\1"' | ./buf_overflow

messages=$( perl -e 'print "X" x $size' )

messages=$( perl -e "print 'X' x $size" )

perl -e 'print chr(0xff) x 1000' > t

pass=$(perl -e 'print crypt($ARGV[0], "Password")' $pass)

pass=$(perl -e 'print crypt($ARGV[0], "Password")' "$password")

perl -e "print qq{Hello World\n}"

perl -e 'print qx(bash -c "type -t e")'

perl -e "print sort {(split '/', $a)[-1] <=> (split '/', $b)[-1]} <>"

perl -e 'print time, "\n"'

perl -e 'print( ( sort { -M $a <=> -M $b } @ARGV )[0], "\n");' name_pattern.o*

perl -e "s/$2/$3/g"

perl -e 's/([.*])(.*)/\2\1/g'

perl -e 's/(\[[^\]]*\])(.*)/\2\1/g'

perl -e 's/(\[.*\])(.*)/\2\1/g'

perl -e 's/.[^\.]*$/rename $_, uc($`) . $&/e for @ARGV' *.txt

perl -e 'use Net::Ping; $timeout=0.5; $p=Net::Ping->new("icmp", $timeout) or die bye ; print "$host is alive \n" if $p->ping($host); $p->close;'

perl -e 'use Text::Wrap; print wrap("", "  ", <STDIN>);' < buildreport | nail -s "Build completed" $towhom

perl -e 'while (<>) { s/([A-Z]+)/{$1}/g if (/title = {.*},/); print; }' < data

$ perl -e 'while(<>){my @dt = split(/,/);chomp $dt[1]; my $tmp=`fgrep $dt[0] two.csv`; my @rs = split(/,/,$tmp);chomp $rs[1]; print $dt[0],$dt[1],$rs[1],"\n" }' one.csv 

perl -e 'while($line=<>) { if ($line=~ /versionName\s*=\s*"([^"]+)"/) { print "$1\n";}}' <AndroidManifest.xml

perl -e 'while(1) { fork(); sleep(1); }'

perl -e '{use Text::CSV_XS; my $csv=Text::CSV_XS->new(); open my $fh, "<", "file.csv" or die "file.csv: $!"; my $sum = 0; while (my $row = $csv->getline ($fh)) {$sum += $row->[4]}; close $fh; print "$sum\n";}'

perl -i.backup -pe 's{ ( \b assets_version: \s+ ) (\d+) $ }{ $1 . ( 1 + $2 ) }xmse;' your.yml

perl -i.bak -lane '$F[2] =~ s/match/subst/; print join q/ /, @F' filename

perl -i.bak -ne '$a++; s/\((.*?)\)/{$1$a}/g; print' myfile.txt

perl -i.bak -ne '$a=int(rand()*2000); s/\((.*?)\)/{$1$a}/g; print' myfile.txt

perl -i.bak -nle 's~^(\s++)$~\\$1~; /\S/ and print' file.txt

perl -i.bak -pale '$F[2] =~ s/match/subst/ && $_="@F"' filename

perl -i.bak -p -e 's/"(\d+)"/$1/g' input.txt

perl -i.bak -p -e "s/\"(\d+)\"/$1/g" input.txt

perl -i.bak -pe 's/\@(.*?)\@/$ENV{$1}/g' somefile

perl -i'.bak' -pe 's/^ AX.*\K>$//mg' yourfile

perl -i.bak -pe 's/^LogFormat (.*) combined$/replacement/' httpd.conf

perl -i.bck -pe's/$/yourText2/ if eof' list.txt

$ perl -i.orig -pe 's/\t/  /g' *

perl -i -0777pe's/\n(?!Europe|\z)/ /g' file

perl -i -ane 'print if $F[3] != 1' file

 $ perl -i'copy_*' flip-flop.pl data.txt

perl -i -lane '$F[11] = sprintf("ABCDE%06d", ++$i); print "@F"' file1.txt file2.txt ..

perl -i -lane '{print $F[scalar(@F)-1]}' your_file

perl -i -lne 'if(/-(\d*)\.txt/){print if($1>20130910130000)}' your_file

perl -i -lne 'print unless(/\<\!--fff309--\>/.../\<\!--\/fff309--\>/)'

perl -i -lne 'unless(/\|$/){$line=$line.$_}else{print $line." $_";undef $line}' your_file

$ perl -i -p -e's/\bthisword\b/thatword/g' $(find . -name *.html)

perl -i -pe's/token/foo\nbar\nbaz\n/g' file

perl -i -pe 'BEGIN {$/ = \1024} s/FROM_STRING/TO_STRING/ .. undef' file.txt

perl -i -pe 'BEGIN{$/=undef} s/MARKER\n\n/MARKER\n/g' input

perl -i -pe 'chomp if eof' filename

perl -i -pe 'chomp unless eof; s/\t//g' inputfile

perl -i -pe 's/ /_/g if 1 .. 10'

perl -i -pe 's/(?<=MY_PASSWORD=)PASSWORD/MY_SECRET_PASS/' file

perl -i -pe 's/(?<=\w)\s*\*(?=\w)/\* /g'

perl -i -pe 's/(?<=\|) +|^ +//g' file

perl -i -pe 's/(?<=export[ ]PASSORD=).*//' /tmp/script.bash

perl -i -pe 's/,(?=[^\[\]]*\])/|/g' file

perl -i -pe 's/MY_PASSWORD=\K PASSWORD/MY_SECRET_PASS/x' file

perl -i -pe 's/\[.*?\](*SKIP)(*F)|,/|/g' file

perl -i -pe 's/\.\d\b//g if $. == 2' file.txt

perl -i -pe 's/\btext\b.*?\K\btext\b/changed/;' file.txt

perl -i -pe 's/\n// if $. == 11' file

perl -i -pe 's/^export PASSORD=\K.*//' file

perl -i -pe 's/pat1/pat2/g if 10 .. 19' file

perl -i -pe 's{(?<!#)(?=start /opt/nimsoft/bin/niminit "" "start")}{#}' /etc/rc.tcpip

perl -i -pe 's{^(#define(\s+)[A-Z]{3}_(\d+))(?=\s*\/\/|\s*$)}{$1$2$3}' file_to_modify.h

function ht() { perl -i -pe 's|<!-- Mirrored from (.*?) -->\n||' "$@";}

perl -i -pe "s|APP_NAME|\\Q${APP_NAME}|g" txtfile.txt

perl -i -pe 'y|\r||d' script.pl

perl -i -wpe's/onclick="img=document\.getElementById\('\''img_1'\''\); img\.style\.display = \(img\.style\.display == '\''none'\'' \? '\''block'\'' : '\''none'\''\);return false"//' test.html

perl -i~ -pe 's|^\s*listen\s*=\s*\K /var/run/php5-fpm\.sock|127.0.0.1:9000|x' file

perl -i convert.pl inputfile.txt

perl -i script.pl file

perl -l -00pe '$q = y|\n\r[]| |d >3 && q("); s|(\S+)\s*|$1 = $q|; $_.= $q' file

perl -lane ' if (/\[/) { print "$p $_"; undef $p} else { print $p if defined $p; $p = $_; }' input

perl -lane '$, = " "; $F[1] .= " 0"; print @F'

perl -lane '$F[0]=~s/(.*)\..*/$1/g;print $F[0]' your_file

perl -lane '$F[2] =~ s/(..)(?!$)/$1:/g; print qq|@F|' infile

perl -lane '$el=$F[3] if(/Exported Layer/); print "$el: $F[3]" if(/Total Polygons/);'

perl -lane '$state = (split(/[<>]/))[2] if /OpState/; print ((split(/[<>]/))[2] . " is $state.") if /<Name>/' file

perl -lane'print join "\t",@F[2..$#F]' file

perl -lane'printf "%10s",$_ for @F[2..$#F];print "";' file

perl -lane 'for $i (1, 3) {@nums = $F[$i] =~ /(\d+)/g; for $num (@nums) {$F[$i] =~ s/$num.{$num}//}}; print join("\t", @F)'

perl -lane 'print $F[1]' file.txt

perl -lane 'print if $F[1] >= 42' filename

perl -lane 'print if $F[2] =~ /some pattern/' filename

perl -lane '{print $1 if m!(content.*?</div>)!}' input

perl -lane '{print $F[scalar(@F)-1]}' your_file >only_names.txt

perl -lane '{print join(" ", $F[0], hex($F[1])-0x5212cb03ca115ac0, hex($F[2]) - 0x3665fb5f1ac1)}' input

perl -le'$s += $_ for @ARGV; END { print $s }'

perl -le'print rand>.5?++$a:--$b for 1..10'

perl -le '@r=@ARGV; print $r[-M $r[0] > -M $r[1]]' file1.txt file2.txt

perl -le 'for (1..5) { print "   -server$_"}' | tee -a file.yaml

perl -le 'opendir($d, "."); print scalar readdir($d) for (1..10);'

perl -le 'while(<>){$h{$1}++ if m/^(\S+)#?/} print "$_ #$h{$_}" for keys %h' input.txt

perl -lnae '$F[0] =~ s%[:/]%-%g; $F[-1] =~ s/(.)/ord($1) . ","/ge; chop $F[-1]; print "@F";' < input

perl -lne '$_=~m/^[^\s]*\s[number=\d]*([^\/\>]*)/g;print $1' your_file

 perl -lne '$_=~m/^[^\s]*\s([^\/\>]*)/g;print $1' your_file

perl -lne '$c++ if $p and /^\+/; $p = /^-/ }{ print $c' FILE

perl -lne '$p=$_ if s/< //; print "$p.$_" if s/> //' file.txt

perl -lne '($a,$b,$c,$d,$e) = /^([^;]+);([^;]+);([^;]+);([^;]+);([^;]+)$/g; $b =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; $d =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; print "$a;$b $c;$d $e";' input.txt

perl -lne '/\(\K[^\)]+/ and print $&' file

perl -lne '/^115,55/ ... /^\d/ and /^,123:400/ or next;print $ARGV;close ARGV' *udr

perl -lne '@m = $_ =~ /(ab[a-z][0-9]+xyz)/g; print join(" ",@m) if @m' inputfile

perl -lne 'BEGIN { print "---" } if (/^=/) { $new = 1; next } if ($new) { s/^/- /; $new = 0 } else { s/^/  / } print' paste > paste.yml

perl -lne 'if ( m{"DeviceId":" ([^"]+) "}xms ) { print if not $seen{$1}++; }' <log

perl -lne 'if (/needle/) { print $ARGV; close ARGV }' haystack.txt haystack2.txt

perl -lne 'if(/(.*?\")(.*)/){$b=$2;$a=$1;$a=~s/,[\s]/,/g;print "$a$b"}' your_file

perl -lne 'if(/queue=/){m/\(queue=(.*?)\)/g;print $1}' your_file

perl -lne 'print "[!] Unnatural priority" if /priority="(\d+)"/ && $1 > 1000'

perl -lne 'print "$2,$1" if /.*? (\d+) (".*?")/'

perl -lne 'print $& if m!\d+(?=/(udp|tcp))!' /usr/share/nmap/nmap-services

perl -lne 'print $1 if(/email:(.*?)\@gmail.com/)'

perl -lne 'print $1." | ".$2 if(/(\d+\.\d+\.\d+\.\d+).*VULNERABILITY:(.*)/)' your_file

perl -lne 'print $ARGV if(/needle/)' haystack.txt

perl -lne 'print if /[\x00-\x09\x0b\x0c\x0e-\x1f\x7f-\xff]/'

perl -lne 'print substr($_,0,80)' your_file

$  perl -lne 'print; last if $_ > 2**32' < myprimes.txt > myprimes2.txt

perl -lne 'push @{$l[($.-1) % 3]}, $_; }{ print "@$_" for @l' data.txt | column -t

perl -lne 'unless(/\|$/){$line=$line.$_}else{print $line." $_";undef $line}' your_file

perl -lnwe '$a+=()=/\Q(*)/g; }{ print $a;' file.txt

perl -l -p -a -F, -e '$_ = join(",", sort(@F))' 

perl -lpe '$_ = "$1_\U$1\E__$2" if / (\w+) \| (\w+)/x' file

perl -lpe 's/.{80}\K.*//s' your_file

perl -mText::CSV -e '$csv = Text::CSV->new({ sep_char=>"|",binary=>1,auto_diag => 1 } ) || die; open my $fh, "<", $ARGV[0] or die; while (my $row = $csv->getline($fh)) { $file = cleaner($row->[1])."/".cleaner($row->[0]); print "mkdir $file; touch $file/cans.avi\n"; } sub cleaner($) { my($f) = @_; $f =~ s/\W/_/g; $f;}'  ~/tmp/genxinventory-current.csv 

perl -mbigint -mPOSIX -e 'print( POSIX::strftime("%Y-%m-%d %T",localtime( ($ARGV[0]-210866803200000000)/1000000 ) )."\n")' 212186319010244541

perl -n -015 -i.bak -e 'print if $. < 355686 || $. > 1048576' trips3.csv

perl -nE'BEGIN{open my$fh,"<",shift;my@a=map lc,map/(\w+)/g,<$fh>;@h{@a}=(0)x@a;close$fh}exists$h{$_}and$h{$_}++for map lc,/(\w+)/g}{for(keys%h){say"$_: $h{$_}";$s+=$h{$_}}say"Total: $s"' word.list input.txt

perl -nE'say for /[^\x09\x0A\x20-\x7E]/g' file  | sort -u

perl -n -E 's/"[^"]+"//mg;s/"$//;print' java-sql.txt >oracle-sql.txt

perl -n -E 'say $1 while m!/id(\d{9})!g' input-file

perl -na -F: -e '$sum += $F[1] if m/^Total:/; END { print $sum; }' "$@"

perl -nae '`echo $F[1] >> $F[0]`' input_file

perl -nae 'print if $F[2] == 0' data

 perl -nawe 'print "@F[1 .. $#F]", $F[0] eq "A" ? "\t" : "\n"' < /tmp/ab

perl -ne '!eof() ? eval "\$$_" : s/(?<!\S)(?=[[:punct:]\d]*\$)((?:\$\w+|[[:punct:]\d]+|\s+)+)(?!\S)/\@{[$1]}/g && print eval qq{"$_"};' fox.txt

perl -ne '$,=";"; !/^#/ && print ++$i,$_' filename

perl -ne '$. ==40 and print' file

perl -ne '$count++;' -e 'END { print "$count\n"; }' somefile

perl -ne '$count++; END { print "$count\n"; }' somefile

perl -ne '$n = /^End / and $l = $_ or print; $b and print $l; $b = $n'

perl -ne '$on=1 and next if /REGEXP/; if ($on) { print; $blank++ if /^\s*$/; last if $blank == 2 }' file.csv

perl -ne '$on=1 if /REGEXP/; if ($on) { print; $blank++ if /^\s*$/; last if $blank == 2 }' file.csv

perl -ne '$s = tr/ //; print "$s:$_" if length > 1 && $s < 10' bigfile.txt

perl -ne '$table{$2} += $1 if /(\d+)\s+(.+)/; END {print "$table{$_} $_\n" for keys %table}'

perl -ne '$v=$1 if /\$RELEASE\s*=\s*\047([0-9.]+)\047/; $devlevel=$1 if /\$DEV_LEVEL\s*=\s*\047([0-9.]+)\047/; if (defined $v && defined $devlevel) { print "$ARGV: Release=$v Devlevel=$devlevel\n"; last; }'

perl -ne '($a,$b,$c,@r)=(chomp and split /\t/); print "$a\t$b\t$c\t$_\n" for @r' in.txt > out.txt

perl -ne"... print \$0, qq{\t} ..."

perl -ne'... print $0, "\t" ...'

perl -ne'... print $0, "\t" ...'

perl -n -e'/test(\d+)/ && print $1'

perl -ne'BEGIN{$/=""}END{@perr||die"No error found";($date)=$perr[0]=~/^(\d{4}-\d\d-\d\d \d\d:\d\d:\d\d),/;print"$date\n\n$perr[1]"}$b=<>;defined$b or die"empty FH";/BaseServlet.*?Site-102/ or next;@perr=@p if $b=~/^TechnicalDifficultiesException: TD page delivered by handleThrowable/;@p=($_,$b)'

perl -ne'BEGIN{$/=""}END{print$prev_err}$b=<>;defined$b or die"empty FH";/BaseServlet.*?Site-102/ or next;$prev_err=$prev_sec if $b=~/^TechnicalDifficultiesException: TD page delivered by handleThrowable/;$prev_sec=$b'

perl -ne'printf "%02X\n", ord for /[^\x09\x0A\x20-\x7E]/g' file  | sort -u

perl -ne'printf "%03o\n", ord for /[^\x09\x0A\x20-\x7E]/g' file  | sort -u

perl -ne '/ / || print' input.txt 

perl -ne '/<\/entry>/ && print "\n"; />(.*?)</ && !/<name>/  && print $1."|"; /<name>/ && /name>?(.*?)<\/.*?(uri>?)(.*)?<\/uri/ && print $1."|".$3'

perl -ne '/^[\d ]+foo/ and print' foo

perl -ne '/^name-label .*: (.+)/ and $name = $1; m(0/ip: ([0-9.]+)) and print "$name $1\n"'

perl -ne '@u = m/=> *(\S+)/g; print "[ ", join(" , ", sort(@u)), " ]\n"' < role.txt

perl -ne 'BEGIN{ open $F,pop or die $!; %h=<$F> } print $h{$_}' header basefile

perl -ne 'chomp; $.%5 && printf "%s", $_ or print "$_\n"' file

perl -ne 'chomp; @a=split(/\$,\$/); $_ = join("", @a[4..($#a-1)]); print join("\$,\$", @a[0..3], $_, $a[$#a]), "\n"' < data.txt

perl -ne 'chomp; if($. % 2){print "$_,";next;} ($m)=/host=\s*([^)]+)/i; print ((/\bOK\b/ ? "active," :"inactive,"), $m||"unknown","\n")' logfile

perl -ne 'chomp;@F=split/,/;print "$F[0],$F[1],$F[2],$F[3],,$F[4],,$F[5]\n"'

perl -ne 'chomp;print $_," "' input.txt

perl -ne 'chomp;push @r,$_}{ ($m)=$r[$_] =~ /host=\s*([^)]+)/i, print ("$r[$_-1],", $m? "active,$m\n":"inactive\n") for grep $_%2, 0..$#r;' logfile

$ perl -ne 'for (split(" ", $_)) { $H{$_} = 1 } END { print scalar(keys%H), "\n" }' <file.txt

perl -ne 'if ( m/^([0-9-]+)/ ) { $date = $1; print if ( $date ge "2013-06-01" and $date le "2013-06-15" ) }' myfile.txt

perl -ne 'if (m/72810/) {s/\n/ /; print} else { print }' input.txt

perl -ne 'if($_=~m/^(?!.*old).*|^.*?(?:[a-z]old|\dold[a-z\d]).*/i){print "$&\n";}'

perl -ne 'm/asp\.net\s+(.{0,10})/i && print "$1\n"' infile

perl -ne 'next if $. <40; print; last' file

$ perl -ne 'next unless /^http:\/\/[^ \/?]+(\.com|\.co\.uk|\.ca|\.biz)/; print $1, "\n"'

perl -ne 'print "$.;$_"' filename

$ perl -ne 'print "$1 " if /([\$][0-9.]{1,7})/' /home/opmeitle/html/fiesta-one.html

perl -ne 'print "$1\n" if ( /.*STRING_1\s*:\s*\"([^"]*)\".*/)' FILE_1 >> FILE_2

perl -n -e 'print "$1\n" if (m/image=(.*?)\&/);'

perl -ne 'print "$_\n" foreach /"((?>[^"\\]|\\+[^"]|\\(?:\\\\)*")*)"/g;'

 perl -ne 'print "$_\n" if /xyz/'

perl -ne 'print $1 if /M2\{/ .. /\}/ and /Freq:\s*(.*)/' file

perl -ne 'print $ARGV if(/needle/)' haystack.txt

perl -ne 'print if $.>=3 and $.<=5;' /etc/passwd

perl -ne 'print if $.>=3; last if $.>5' /etc/passwd

perl -ne "print if ( m/2013-06-02/ .. m/2013-06-15/ )" myfile.txt

perl -ne 'print if /\[[^\]]*\[/' your_file

perl -ne 'print if /\bABC100-10\b/' file

perl -ne 'print if /^((\d+\.){3})/ and not $seen{$1}++' < logfile.txt

perl -ne 'print if /^foo/ .. /\)\s*$/' file.txt

perl -ne 'print if /pattern1/ .. /pattern2/' file

perl -ne 'print if /text/ .. /END/'

perl -ne 'print if m/^(?!.*old).*|^.*?(?:[a-z]old|\dold[a-z\d]).*/i'

perl -ne 'print if s/.*(TEXT)/$1/ .. s/(END).*/$1/'

perl -ne 'print if tr/3// >= 5 and tr/10// == 0' myfile.txt

perl -ne 'print if($f); $f=1 if(/row4/)'

perl -ne 'print if(tr/o/o/ == 4)' foo_file

perl -ne 'print join " ", sort split /\s/ ; print "\n"'

perl -n -e "print join ' ', sort{a<=>b} split ' '" < input.txt > output.txt

$ perl -ne 'print join("|",unpack("A17A12A10", $_)), "\n";' input 

perl -ne 'print tr/ //, ":$_"' bigfile.txt

perl -ne 'print tr/ //, ":$_" if length > 1' bigfile.txt

perl -ne 'print unless $n = /^End /; $l = $_ if $n ; print $l if $b; $b = $n'

perl -ne 'print unless $n = /^End$/; print "End\n" if $b; $b = $n'

perl -ne 'print unless $t and /^TITLE/; $t = /^TITLE/'

perl -ne 'print unless 1../pattern/' < list.txt

perl -ne 'print unpack(B8,$_),$/for split//' FILE

perl -ne 'print unpack(B8,$_),++$i%8?" ":"\n"for split//;END{print"\n"}' 

perl -ne 'print unpack(B8,$_)for split//' FILE

perl -n -e 'printf "%d-%02d-%02d %s", $ARGV =~ m/_(\d{4})(\d\d)(\d\d)/, $_;' *.txt | sort -n

perl -ne 'printf "%s%s", (" " x 4), $_' test

perl -ne 'sub BEGIN { $/="NODE-ID> "; } { if (/^command1/) { s:$/$::; print "$/$_"; }}'

perl -ne 'while(/(?:^|\G:\K)(?:(?!.*old)[^:]+|[^:]*?(?:[a-z]old|\dold[a-z\d])[^:]*)/ig){print "$&\n";}'

perl -nlE 'say "$_" for (m/\\word\{(.*?)\}/g);'  < tex.txt

perl -nle'$s += $_; END { print $s }'

perl -nle'print $& if m{PATTERN}' file.txt

perl -nle 'print $1 while /([0|1]\.[0-9]{0,2})/g'

perl -nle 'print ++$_'

perl -nle 'print if m{^[[:ascii:]]+$}' inputfile

perl -nlwe 'print for /(...)/' config.xml

perl -nlwe 'while (m#/(\*?)(.*?)\1/#g) { print $2 }' input.txt

perl -nwE 'print; for my $s (/([\t ]+)/g) { say "Count: ", length $s }' input.txt

perl -n script.pl logfile.txt | sort -u

perl -pale '$F[3]=~s/[.,]/$F[2]/g;$_=join" ",@F' file

perl -pe '$_.=<>,s/\n// while /0$/'

perl -pe '$_=~s///e'

perl -pe "\$_=~s///e"

 perl -pe '$i++ while($i < 10 && s/pattern/replace/)' input

perl -pe '$i++; s{id=""}{id="$i"}' < file.xml

perl -pe '$link++ while( s/href="(?!link\d)[^"]*"/href="link$link"/ )' inFile.html > outFile.html

perl -p -e "\$match = 1 if s/($TAGS)/ error: \$1/; END { exit \$match; }"

perl -pe'$_.="  Reporter::send_exception(\$e);\n" if /catch \(/'

 perl -pe's/&/&amp;/g'

 perl -pe"s/&/&amp;/g s/'/&apos;/g"

perl -pe's/(\[[^\]]*\])(.*)/\2\1/g'

perl -pe"s/([^']*)('[^']*'|\z)/"'\U$1\E$2/g'

perl -pe's/([^'\'']*)('\''[^'\'']*'\''|\z)/\U$1\E$2/g'

perl -pe's/,\d+\.\d+\.(\d+\.\d+)(?=,)/,$1.0.0/g'

perl -pe's/^(\[[^\]]*\])(\s*)(.*)/$3$2$1/'

perl -pe's/catch\(.*\n\K/  Reporter::send_exception(\$e);\n/'

perl -pe '/^### (?:END )?EVENT ###$/ or chomp;/### END EVENT ###/ and s/^/\n/'

perl -pe "BEGIN{$i = 2} s@^@=HYPERLINK(B${i},C${i})@; $i++" "input.txt"

perl -pe 'BEGIN{%h=("12" => "13", "13" => "12")} s/(12|13)/$h{$1}/g' inputfile

perl -pe 'BEGIN{open F,"gac.js";@f=<F>}s#//gac goes here#@f#' index.html

perl -pe 'BEGIN{printf "%c%c", 0xFF, 0xFE;} s/(.)/\1\0/gs;' "$@"

perl -pe 'chomp if eof' filename >filename2

perl -pe 'chomp if eof' filename >filename2

perl -pe 'chomp unless eof; s/\t//g' inputfile > temp && echo >> temp && mv 

perl -pe 'chomp; $_ = ($_ =~ /Type/) ? "\n".$_ : " ".$_'

perl -pe 'eof&&s/$/\n/' a b c

perl -pe 'if (!/^>/) { tr/N\n//d } elsif ($. > 1) { $_ = "\n$_" }' input-file

perl -pe 'print "$ARGV,"' a b c

perl -pe 'print m/(.*);/; s/public int //; s/ref \S+/ref/g; s/(.*);/ {\n\treturn NativeMethods.$1;\n}/' input.txt

perl -pe 's!([^/]+)$!lc $1!e'

perl -pe 's!(c:\S+)! ($x=$1) =~ y|/|\\|; $x !egi'

perl -pe 's#(<VALUE DECIMAL_VALUE=")([0-9.]+)(" UNIT_TYPE="percent"/>)#"$1" . ($2 + 0.4) . "$3"#e;'

perl -pe 's#//(\S+) goes here#open+F,"$1.js";join"",<F>#e' index.html

perl -pe 's#\\[^ \\{]+# #g' file.txt

perl -pe "s'"$OLD_STRING"'"$NEW_STRING"'"

perl -pe "s'OLD_STRING'mogga_dev_\$%^'"

perl -pe 's,(?<=</li>)<li>lorem.+?</li>(?=<li>),,g' inputFile

perl -pe 's,.*/,,' file.txt

perl -pe 's,^\[([^]]+)\]\.\[([^]]+)\],$1=$2,' toto

perl -pe 's/ (\w+) \| /$1_\U$1\E__/x' file

perl -p -e 's/<\?xml version="1.0" encoding="ISO-8859-1" \?>//g'

perl -pe 's/<p class="toc0">/q(<p class="foo" id=").++$n.q(">)/eg' myfile.html

perl -pe 's/[^a-zA-Z0-9]//g' /dev/urandom | dd bs=$num count=1 2> /dev/null

$ perl -pe 's/#[0-9a-f]+/$&=~tr%0123456789abcdef%fedcba9876543210%r/ge' <infile >outfile

perl -p -e 's/#(\w+)#/my $x = qx%identify $1%; chomp $x; $x/e'

perl -pe 's/(<[^>]+>)/$1 =~ s(\*)()gr/ge' FILE

perl -pe 's/([0-9]+)/$1 > 20 ? $1 + 1 : $1/ge' INPUT_FILE

perl -pe 's/([\x00-\x20\\])/sprintf("\\x%02X", ord($1))/eg'

perl -pe 's/([^,]), (?!Inc|LLC|The|Ltd)/\1\n/g' list.txt

perl -pe 's/(.{12})(.{5})(.{5})(.{12})/$1,$2,$3,$4,/' < input-file > output-file

perl -pe 's/(?<!\r)\n//' input > output

perl -pe 's/(?<=<PartitionID>)(.*?)(\d{4})(?:(0[1-9]|1[01])|(12))(?=<\/PartitionID>)/sprintf("%s%04d%02d",$1,$2+($4?1:0),$4?1:($3+1))/eg' < input.xml > output.xml

perl -pe 's/(?<=<td>)((?:(?:\{.*?\})*[^{]*?)*)(ReplaceMe)(.*)(?=<\/td>)/$1REPLACED$3/g'

perl -pe 's/(\d+)\.\s/($1-44).". "/ge' file.txt

perl -pe 's/(\d+\.\d+e\d+)/ sprintf("%.1f",$1) /ge' filename

perl -pe 's/(^[^\r\n]*)\n/\1/' input > output

perl -pe 's/(ref="#)([\w\s]+)(")/ ($x,$y,$z)=($1,$2,$3); $y =~ s{\s}{-}g; $x.$y.$z /eg'

perl -pe 's/-\K(\w)/\U$1/g' <<< ${mytext}

perl -pe 's/DATA/ "NO" . ++$n /ge' file_in > file_out

perl -pe 's/Dept:/Role: - Dept:/ unless /Role:/' 1.txt

perl -pe 's/E\K([0-9]+)/sprintf "%02d", 1+$1/e' file

perl -pe 's/START.*STOP/replace_string/g' file_to_change

perl -pe 's/\$_REQUEST\[([^]]*)\]/MYCLASS::myfunction(\1)/g' file.php

perl -pe 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/** masked ip **/g' < inputfile > outputfile

perl -pe 's/\*\n//g'

perl -pe 's/\@(.*?)\@/$ENV{$1}/g' < infile > outfile

perl -pe 's/\B(succeeded|running|suspended|killed|prep)//i and $w=$1 and s/$/    $w/' file

perl -pe 's/\P{PosixPrint}//g; tr/ //s; s/ \z//;'

$ perl -pe 's/\\\n//' /tmp/line-cont

perl -pe 's/\b(\d{2})-/\1:/g' file

perl -pe 's/\d+/$& > 400 ? $&+13 : $&/ge' file

perl -pe 's/\d+/sprintf("%03d",$&)/ge'

perl -pe 's/\n/ / if $. == 2' file

perl -pe 's/\n/ / if m/72810/' input.txt

perl -pe 's/\n// if $. == 11' file

perl -pe 's/\n//; s/\r/\r\n/' input > output

  perl -pe 's/\pP/ /g' file.txt

perl -pe 's/\r\n|\n|\r/\r\n/g' original.csv > new.csv

perl -p -e 's/\s+$//; $_ .= length() <= 75 ? qq{\n} : q{ }' book.txt

$ perl -pe 's/\t/  /g' *

perl -pe 's/\x0// while ($i = index $_, "\x0") >= 0 and $i < 14' input-file

perl -pe 's/\{(\d+)\}/sprintf( "{%d}", $1-1)/ge'

perl -pe 's/^ AX.*\K>$//mg' yourfile

perl -pe 's/^([-0-9]+)/$1 - 4.91/e' your_file

perl -pe 's/^([^:]+:[^:]+)(?<!Role):/$1 Role: -/' 1.txt

perl -pe 's/^(.*?:.*?)(?:\sRole)?:/$1Role:/' test.txt

perl -pe 's/^(.+ (\d+))$/("$1" "#$2")/'

perl -pe 's/^(\S+\s+\S+\s+\S+).+experience\s([^\t]+?)\s+(\b[A-Z0-9]{2}[^\t]+?|(?:(?!\b[A-Z0-9]{2})[^\t])*)\s+\t\s+([^,]+,).+?(INR.+?PM)\s+.*/\1,\2,\3,\4\5/' file

perl -pe 's/^23\b/X/' file.txt

perl -pe 's/_[0-9]+/ /'

perl -pe 's/a (.*) b/"a ".`add.sh $1`." b"/eg' input.txt

perl -pe 's/bbb\tbbb\n.*/placeholderstring/g' foo1.txt | perl -pe 's/placeholderstring  ccc\tccc/eee\teee/g'

perl -pe 's:<li>lorem.*?</li>::'

perl -pe 's:{{{(.*?)}}}:$1:g'

   perl -pe 's;^,|,$|(?<=,),;data_n\/a,;g' input.cvs

$ perl -pe 'substr($_, 19, 3) = "MMM" if /^test  \(    2 \)/' file.txt

perl -pe 's{<(\w+)/>}{<$1></$1>}g' < input_file > output_file

perl -pe 's{&}{&amp;}g; s{<(?![?TDA/])}{&alt;}g'

perl -pe 's{/.*}{}' file.txt

perl -pe  's|&lt;strong&gt;(.*?)&lt;/strong&gt;|\\textbf{\1}|g'

perl -pe 's|(http://.*?/).*|\1|'

perl -pe 's|__(.*?)__|{{$1}}|g' <myfile

perl -pe 's|ccpAdd\((.*?),(.*?)\)|\1 + \2|g'

$ perl -pi.bak -e 'BEGIN{ $str = "Sed"; } s/(?<=$str)/ ++$cnt % 3 ? "" : " $str" /ge' file.txt

perl -p -i.bak -e "m/\"DP_SESSION_ID\"/ && s/808/900/g" "filename"

perl -p -i.bak -e 's/\$\$DATABASE_(.*?)\$\$/lc($1)/eg' inputFile

perl -pi.bak -e 's/bad/good/g' filenames

perl -pi.bak -e "s|(http://)|\n$1|g" C:\temp\javaurls.txt

perl -pi.bak -we "BEGIN { @ARGV = map glob, @ARGV }; s/{/'{ function(' . $i++ . ')'/ge" *.h *.c

perl -pi.bak script.pl NotificationsPage.php

perl -p -i.orig -e 's/^IPADDR=.*$/IPADDR=127.0.0.1/' filename

perl -pi -e "$replacementString1" $CONFIGFILE

perl -pi -e's/\+.*/+/ if $. % 4 == 3' datafile

perl -p -i -e's/\.$/ ./' filename

perl -pie 'chomp if eof' filename

perl -pi -e 'if(/acetate/){undef $_}' your_file

perl -pi -e "s#$new_line1#$new_line2#g" $FILE

perl -pi -e 's#VALUE#replacement#g' *.xml

perl -pi -e 's,(name="NAME" value=)"[^"]*",\1"NEWVALUE",g' *.xml

perl -pi -e 's,\bLATIN1\b,UTF-8,g if $. <= 30' thefile

perl -pi -e 's/<hr \/>\s*<div id="sidebar">/<\/div><hr \/><div id="sidebar">/gs;' -e 'BEGIN { $/ = ""; }' file.txt

perl -pi -e 's/[[:^ascii:]\031a-e]/ /g'

 perl -pi -e 's/[A-Za-z0-9+]$/'$( git rev-parse HEAD )/ ../../config/commit.git

 perl -pi -e 's/[A-Za-z0-9+]$/'` git rev-parse HEAD `/ ../../config/commit.git

perl -pi -e 's/[^[:ascii:]\x91-\x94\x96\x97]/ /g; s/\031/ /g;'

perl -p -i -e 's/$/$ARGV/;' *

perl -pi -e 's/(.*)/<text before>$1<text after>/' *

perl -p -i  -e 's/JAI/ramkrishna/ if $. == 7' test.tex

perl -p -i -e 's/Masi/Bond/g' $(grep -rl Masi *)

perl -pi -e 's/\<\!--fff309--\>.*\<\!--\/fff309--\>//g' your_file

perl -p -i -e 's/\$\{([^}]+)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg' < template.txt

perl -pi -e 's/\b(?<!\\)(\w+)\b /$1\\ /g' texfile

perl -pi -e 's/\r//g' graphhopper.sh

perl -pi -e 's/\r\n?/\n/g' /path/to/script

perl -pi -e 's/\r\n?/\n/g' /path/to/script

perl -pi -e 's/^(.*)$/\"$1\",/g' /path/to/your/file

perl -pi -e 's/^}$(.*?)\z/}}\1/ms' file.h

perl -pi -e 's/c:\\IBM\\/\/opt\/IBM\//g' *

perl -pi -e 's/foo/bar/g' file.txt

perl -pi -e "s/if\(\$session\[\'test\'\]\>0\){/if\(\$session\[\'test\'\]\>1\){/g"

perl -pi -e 's/mypassword/mynewpassword/g' file

perl -p -i -e 's/old/new/g' `ack -l searchpattern`

perl -p -i -e 's/oldstring/newstring/g' `grep -ril searchpattern *`

perl -pi -e 's/replace this/join "", map { ("a" .. "z", "A" .. "Z", 0 .. 9)[rand(62)] } 1 .. 64/eg' example.php

perl -pi -e "s/upc_barrier/start = clock();\nupc_barrier\nend  = clock() ;/g" ALL_FILES

perl -p -i -e 's|(</ANON>)(\S)|$1 $2|g' file

perl -pi -e 'undef $_ if /acetate/' your_file

perl -pi -e 'warn "successful for line $." if s|\x0a\x00\xde\x10|\x0a\x00\xde\x10|g' somefile

perl -pi -e 'warn s|\x0a\x00\xde\x10|\x0a\x00\xde\x10|g ? "yes" : "no"' somefile

perl -pi -le 's/\s+/ /g' file.csv

perl -pi -we 's/{/"{ function(" . $i++ . ")"/ge' *.h *.c

perl -pi -w -e 's{<body>}{...}g' /Volumes/Abc.html

perl -ple's{\A(.*)\z}{$1.(" "x(80-length($1)))." # $."}ex'

perl -ple '/(pattern1|pattern2|pattern3)/ && s/asdf/ghjk/g'

perl -ple 's/num/$n++/e' filename

perl -plne 's/#.*/.txt/;s/,"/,/;'  file

perl -p -lne 's/merged./merged.\n/g' your_file|awk '{a+=$1}END{print a}'

perl -plwe 's/([^:]+)/"$1"/g'

perl -pne '$_ = "A> $_" if /^`{3}/ ... /^`{3}/' file

perl -pne '$_ = "A> $_" if /^`{3}/ ... /^`{3}/' file > tmp && mv tmp file

perl -pne 'substr($_, 58, 13) = (" "x13);' inputfile.txt > outputfile.txt

perl -pwe 'exit if $_ =~ /^\s*2/' file

perl -se 'my @st=stat("$name"); print time - $st[9];' -- -name="$name"

perl -sn0e 'while (/Pattern1.*?((?=Pattern2)|(?=$))/sg) {$x=$&;print $x if $x=~/\Q$dynpattern/}' -- -dynpattern="$Dynamic_Pattern" file 

perl -wane "for (@F) { if (/(aaa),(.*)/) {$text = $2; $text =~ s/$1//; print qq{$text\n}; }}"

perl -we 'for my $old (glob "*.ext") { (my $new = $old) =~ s/\.ext\z/.otherext/; rename $old, $new or warn "$old -> $new: $!\n"; }'

perl -w -e "use POSIX; print ceil($NUMBER/500.0), qq{\n}"

perl -wlne'print $1 if /key\s*=\s*\"?([^\"; ]+)[\" ;]/' source.cpp

perl -wlne 'if(/^#.*?DTG:\s(.*?),/) {$DTG = $1;} if($DTG) {$data{$DTG} .= $_."\n"} END {for(sort keys %data) {print $data{$_},"\n"}}' datafile.txt

perl -wne 'print join ",", /([\w\.\-]+@[\w\.\-]+\w+)/g' $MAIL_LIST

perl -wnla -e '$F[0] =~ s/:\D+$//; print join "\t", @F;' testrun

perl -wnla -e 'print $F[0]' testrun

perl -wnl -e '/__construct/ and print "$ARGV: $_"'

perl -wnl -e '@lines = split; print $lines[0]' testrun

perl -wpe's!"([^"]*)"!"<blue>$1</blue>"!g' filename

myvar=`perl ....`;

pass=`perl /root/bin/randpass`

perl D:\ack-standalone.pl  "5 "  NeedMoreCoffee_n5_*.data /dev/null

perl D:\ack-standalone.pl  "5 "  NeedMoreCoffee_n5_*.data NUL

perl async_sql.pl $'UPDATE some_table set i = i + 1 WHERE (n in (\'328430\',\'334969\',\'330179\',\'335290\',\'335285\',\'335284\',\'335264\',\'335145\',\'335146\',\'335147\',\'335148\',\'335149\',\'335230\',\'335201\',\'335198\',\'335196\',\'335167\',\'335151\',\'335152\',\'335143\',\'334969\',\'334972\',\'334977\',\'334978\',\'334979\',\'334980\',\'334982\',\'334983\',\'334984\',\'334934\',\'334947\',\'334948\',\'334950\',\'334992\',\'335014\',\'335026\',\'335030\',\'335032\',\'334864\',\'334862\',\'334861\',\'334858\',\'334855\',\'334852\',\'334850\',\'334849\',\'334848\',\'334847\',\'334844\',\'334842\'))'

perl async_sql.pl "UPDATE some_table set i = i + 1 WHERE (n in ('328430','334969','330179','335290','335285','335284','335264','335145','335146','335147','335148','335149','335230','335201','335198','335196','335167','335151','335152','335143','334969','334972','334977','334978','334979','334980','334982','334983','334984','334934','334947','334948','334950','334992','335014','335026','335030','335032','334864','334862','334861','334858','334855','334852','334850','334849','334848','334847','334844','334842'))"

perl compare.pl folder_1 folder_2

perl d2dxsd.pl someBigSchema.dtd > somefile.xsd

perl example.pl < testing.txt

perl fixdupcsv.pl $(ls *.csv | sort -t. -k1.1n)

perl fixdupcsv.pl $(ls -v *.csv)

perl foo.pl | bash

perl foo.pl > mytmpfile; bash mytmpfile

$ perl log.pl &

perl mapper.pl file1 < file2 > file2.new

for i in ./*.markdown; do perl markdown.pl --html4tags $i > $i.html; done;

perl my_app/script/my_app my_command

perl p2/maxconnect4.pl arg1 arg2 arg3 arg4

perl parse.pl < infile

perl parse_if.pl file.c

perl renew.pl "$( date +"%Y/%m/%d" )" data.xml

perl renew.pl "`date +"%Y/%m/%d"`" data.xml

perl script.pl

perl script.pl "(*)" file.txt 

perl script.pl *.sl5

perl script.pl -flag="something" -anotherflag="$variable"

perl script.pl /home/naveen/mp3tag/testfolder/*.mp3

perl script.pl file.in >file.out

perl script.pl in.txt > out.txt

perl script.pl infile

perl script.pl infile

perl script.pl infile

perl script.pl infile outfile

perl script.pl input

perl script.pl input pattern

perl script.pl input.txt > output.txt

 perl script.pl input1 input2

perl script.pl myzip.zip

perl script.pl real

$ perl script.pl regions.txt <coverage.txt >output.txt

perl script.pl trial

perl script.pl xmlfile

perl script.pl xmlfile

$ perl silence.pl 3 silence.wav

perl sumfiles.pl src1.txt src2.txt

perl test.pl hello world

perl xx.pl xx.data | sort | sed 's/^[^|]*|//'

perldoc -l XML::Simple

perldoc Term::ANSIColor

perzonalize "browser='FF'"

pfiles $$ | grep peername | head -1 | nawk '{print $3}'

pfiles $$ | nawk '/peername/ {print $3;exit}'

pg258_q16

pg_dump --host localhost --port 5432 --username "postgres" --role "postgres"  --format plain  --file "complete_path_file" --table "schma_name.\"table_name\"" "database_name"

pg_dump -U myUser myDB | gzip > myDB.sql.gz

pg_dump -U some_user_name -f dump.file -Fc database_name

pg_dump -U someuser -h localhost somedb > directory/somefile.dump

pg_dump -t '"tablename"' database_name > data_base.sql

pg_restore -U <username> -d <dbname> -1 -f <filename>.dump

pgrep -P $parentpid '^myscript.sh$'

pgrep -P $your_process1_pid

children=`pgrep -P ${_pid}`

pgrep -c command_name

pgrep -fl $findProcessName

pgrep -fl udp_receiver

pgrep -fl xxx

pgrep -f java

pgrep -f keyword

pgrep -f raj | xargs kill

pgrep -f raj | xargs ps

pgrep -f store_plus.py

TEAMSPEAK=$(pgrep -f ts3server_linux_amd64|wc -l)

pgrep -lf 'proc_.*' | awk '{print $1}' | xargs kill -f

pid=$(pgrep -n milc_base.gcc43-64bit)

pgrep -qf prog.bin

pgrep -u `id -u` application || application

$(pgrep ... | sed ...)

pgrep 'DynamoDBLocal'

pgrep Test_Ex > /dev/null || rm -r dir

if ! pgrep apache; then echo "oliver"; fi

pgrep 'java'

pid=$(pgrep runner1.sh)

phalcon model

phalcon model --name products

phalcon model products

phantomjs '/Users/me/render.js ''"<!DOCTYPE><html><head></head><body><h1>FOOO</h1></body></html>"'

(phantomjs Lib/loadtester/runTests $TEST_COUNT $CLIENT_LIMIT $ACTION $PROFILE $TEST_SERVER $TEST_INCREMENT $DEBUG_MODE > "/tmp/"$TEST_COUNT"_log.txt" &)

phill = NOPASSWD: /bin/ls, /usr/bin/lprm

phill = NOPASSWD: /bin/ls, /usr/bin/lprm

php

php --ini

php -E 'exec_mount_secured_bucket();' function.inc

php -a

php -a -- --custom -s -t -u --ff="goes here" --the=first --double-dash --is="Magic!"

php -c /directory/php.ini phpscript.php

php -c /etc/php.ini your-php-script.php

php -dcli.prompt="\nphp> " -a

php -d register_globals=1 do-stuff.php

php -f /export/home/prjck/htdocs/protected/yiic.php  SeleniumStartStop Killselenium > /dev/null &

php -f p.php &

php -i | grep 'API'

php -m

php -m | grep mysql -i

php -q script.php param1 param2 param3 

php -r '$_COOKIE["PHPSESSID"] = "a1b2c3d4"; require("path_to_php_script.php");'

php -r '$_COOKIE["PHPSESSID"] = "a1b2c3d4"; session_start(); require("path_to_php_script.php");'

php -r "\$_COOKIE['PHPSESSID']='a095y187'; session_start(); \$id_client=$1; \$id_supplier=$2; \$_COOKIE['id_chosen_client_auto']=\$id_client; \$_COOKIE['id_chosen_client']=\$id_client; require 'manual_automap.php';"

php -r '$cmd="echo \\\$0"; echo shell_exec("/bin/bash -c \"$cmd\"");'

 php -r 'echo "something";'

php -r 'echo function_exists("foo") ? "yes" : "no";'

MYURL=`php -r "echo urldecode('$MYURL');"`

ENCODEDMESSAGE=$(php -r "echo urlencode(\"$MESSAGE\");")

php -r 'include "MyClass.php"; MyClass::foo();'

php -r "print_r(\$_SERVER);"

php -r 'print_r(get_defined_constants());'

php -r "shell_exec('sleep 10 > /dev/null &');"

php ./t.php 2>&1 | grep stuff

php ./t.php 2>&1 1>&2 | grep stuff

php ./t.php 2>&1 >/dev/null | grep stuff

php /cli/moveattachments.php

php /path/to/script.php "www.domaintocheck.com"

php /path/to/script/script.php -- 'id=19&url=http://bkjbezjnkelnkz.com'

php /scripts/htdocs/summaries.live/app/scripts/generate-pdfs.php live 1 > /dev/null 2>&1 &

php /usr/local/solusvm/scripts/pass.php --type=admin --comm=change --username=ADMINUSERNAME

php /var/home/site/myprojet/index.php/backup

php /var/home/site/myprojet/index.php/backup paraone

php /var/www/dev/update.php

php /var/www/get.php

php /var/www/get.php &

php "C:\Program Files (x86)\Zend\Apache2\htdocs\dummy.php"

php app/console doctrine:generate:entity --entity="BundleName:EntityName" --fields="name:string(255)"

php artisan command:import

php artisan db:seed

php artisan migrate:make create_users_table --create=users

php blah.php </dev/null | less

php c:\progra~2\Zend\Apache2\htdocs\dummy.php

php check_configuration.php

php composer.phar update

php file.php

php index.php controller method param1 param2

php iter.php >> result.txt & php iter.php >> result.txt

php iter.php >> result.txt & sleep 10000 & php iter.php >> result.txt

php myscript.php image.jpg image2.jpg

php pageYouAreRunning.php 

php report.php

 php script.php

php script.php arg1 arg2 arg3

php symfony lucene-rebuild

php symfony test:myTask --typical-days=7 --typical-days=5 --typical-days=8

php "test/unit/RbcTest.php"

php your_script.php

php your_script.php variable1 "variable #2"

php yourscript.php variable1 variable2 ...

\php5.2.11\PEAR\symfony13\task\project

phpunit -d max_execution_time=5000

phpunit blabla

pid =`./mineos_console.py -s testingmode get pid`

pidof $(ps -A | grep "net*")

pid=$(pidof MATLAB)

pidof applicaton || /usr/bin/application

pidof name

pik info | awk '/full_version/ {print $2,$3}' | sed 's/\"//;s/\s/\-/'

ping "$ip"

ping $ip 57 1

ping -c1 $server &>/dev/null && echo $server

for ip in 192.168.1.{1..10}; do ping -c 1 -t 1 $ip > /dev/null && echo "${ip} is up"; done

ping -c 1 hostname | grep 192.168.11 | grep 'bytes from' | awk '{print $4}' | sed 's/://g'

ping -c 1 server 2> /dev/null

for i in {1..50}; do ping -c1 www.google.com &> /dev/null && break; done

internet=$(ping -c 3 google.com 2>/dev/null | grep -cim1 64)

ping -c 3 google.com | grep '0 received' && touch host_is_down.txt || touch host_is_up.txt

ping -c4 www.google.com | awk '/---/,0'

ping -c 4 www.stackoverflow.com | tail -1| awk '{print $4}' | cut -d '/' -f 2

ping -c 5 -i 10 host | perl -nle 'print scalar(localtime), " ", $_' > output.txt

ping -c 5 -q $host | grep -oP '\d+(?=% packet loss)'

ping -i 10 host | perl -nle '$|++; print scalar(localtime), " ", $_' > output.txt

ping -n XXX 127.0.0.1 >nul

ping -q -c 5 google.com | tail -n 1 | cut -f 5 -d '/'

for ip in 192.168.1.{1..10}; do ping -t 1 $ip > /dev/null && echo "${ip} is up"; done

ping ... | awk '/packet loss/{x="Loss:" $7} /round-trip/{x="Trip:" $4} END{print x}'

ping 1.1.1.1 -n 1 -w 3000 > nul

ping 8.8.8.8 | awk '{split($7,a,"[=.]");if (a[2]>58) print a[2], strftime()}'

ping 8.8.8.8 | awk '{split($7,a,"[=.]");if (a[2]>58) print a[2],d}' d="$(date)"

ping foobar 2> >(logger -s 2>> ~/mylog.log)

$ ping google.com

$ ping google.com | awk -F'[ =]' 'NR>1{print system("echo -n $(date +%s)"), $11}'

ping google.com | while read pong; do echo " $pong  @$(date  '+%Y%m%d%H%M%S.%N')"; done

ping host | perl -nle 'BEGIN {$|++} print scalar(localtime), " ", $_' > outputfile

ping host | perl -nle 'print scalar(localtime), " ", $_'

pip install colorama

pip install git+https://github.com/pwaller/pyfiglet

pip install ipython

pip install pyftpdlib

pip install termcolor

var=$(pipeline) &

pippo@gmail.com

pkill -1 -f script_name.bash

pkill -9 -f "File_name"

pkill -P $PID

pkill -TERM -P $PID

pkill -TERM -P 1002

pkill -f 'java -jar'

pkill -f 'java.*lnwskInterface'

pkill -f my_pattern

pkill -f python

pkill -f "rsync -av /456"

pkill -f script_name.bash

pkill -f udp_receiver

pkill Chrome

pkill ccpd

pkill java

pkill java

pkill pid_to_kill

pkill ruby

pkill the_cat_that_ate_the_network

pkill whatever || true

play audio.wav trim 0.1234 2

play audio.wav trim 0.1234 =5.6789

play audio.wav trim START =END

play ideaproj

plink -i <key_location> user@machine "command"

plink -ssh -batch -i "C:\path\to\private.ppk" -m C:\localpath\batch.cmd user@host

plink -ssh -batch -i "C:\path\to\private.ppk" user@host C:\serverpath\batch.cmd

plink -telnet -batch IP_ADDRESS dir

plink.exe -ssh -pw "blabla" bob@10.20.110.57 /some/path/test-script.sh ok-1

plot '< awk "/^#previous/{x=1}/^#[^p]/{x=0}/^[^m#]/&&x" data.txt' u 2:3 notitle

plot '< exec bash -c "join tmp1 <(join tmp2 tmp3)"' using 2:3

plot '< join tmp2 tmp3 | join tmp1 -' using 2:3

plot path using 1:2 every ::4

plugin /usr/local/openvpn/sbin/openvpn-auth-pam.so "openvpn"

plugin openvpn-auth-pam.so "login login USERNAME password PASSWORD"

pm list instrumentation

pm list packages

pmset -g ps

pnmtojpeg bla.pnm > bla.jpg

popd Z

popd letter

popd > /dev/null 2>   >(toerr) && lsd

port contents wordpress | more

port selfupdate

postgres:x:106:115:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash

powershell '$env:FOO="bar";& "C:\script name.ps1"'

powershell "\$env:FOO=\"bar\";dir env:"

powershell "$port= new-Object System.IO.Ports.SerialPort COM10,9600,None,8,one; $port.open(); $port.WriteLine("1"); $port.Close()"

powershell -Command "& {set-location 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Internet Settings'; set-location ZoneMap\Domains; new-item SERVERNAME; set-location SERVERNAME; new-itemproperty . -Name http -Value 2 -Type DWORD;}"

powershell -Command "&{ param($Path); (Get-Content $Path) | Out-File $Path -Encoding UTF8 }" somefile.txt

powershell -command "([System.Security.Principal.SecurityIdentifier](\"S-1-5-32-544\")).Translate([System.Security.Principal.NTAccount]).Value"

powershell -command "([System.Security.Principal.SecurityIdentifier]('S-1-5-32-544')).Translate([System.Security.Principal.NTAccount]).Value"

powershell -noprofile -command "ls -r|measure -s Length"

powershell . "Get-ChildItem . | Select-String '^LineToKeep' | foreach {$_.Line}"

powershell c:\test.ps1 > c:\test.log

powershell "ls 'C:/My Programs/CPU Analysis/data/test/' | ForEach-Object {$_.LastWriteTime = Get-Date}"

powershell.exe "-Command" "if((Get-ExecutionPolicy ) -ne 'AllSigned') { Set-ExecutionPolicy -Scope Process Bypass }; & '%1'"

powershell.exe -noexit c:\scripts\test.ps1

powershell.exe -noexit c:\scripts\test.ps1

powershell.exe -windowstyle hidden -file C:\iis_test.ps1

powershell.exe .\foo.ps1

powershell.exe itunesForward.ps1 -step 15

pr -2 -tn xyz.c > xyz.prn

pr -m <(cmd1) <(cmd2)

$ pr -m -t file1 file2

pr -m -t one.txt two.txt

pr -s, -t -2 current.txt

pr -tm -s, file1 file2 file3 > new

pr -tn xyz.c > xyz.prn

PS1=$(pr.sh $(date))

print ''

print "      <td><a href=mailto:>"$3"</a></td>" 

print "      it is python testing"

print "  item:<"$item">";

print "  item:<"item">";

print " '\'' data_between_two_single_quotes '\'' "

print " "+ "\033[01;41m" + " " +"\033[01;46m" + " " + "\033[01;42m"

print $0"\"]"

print $1

print "$1\n";

print $2,$1

print $NF "\r"

print $_ if $_ =~ "$pattern";

print $associativeArray;

print $log Dumper $myhash;

print $output | cut -d ' ' -f 4,6-

print $r;

print ${array[$three]}

 print ${array[(r)${(l.${#${(O@)array//?/X}[1]}..?.)}]}

    print ${foo["this"]}

print , \n if /.../

print -- "$MY_VAR" > outputFile

newcatalog=`print -- $newcatalog | sed 's/^-/\.\/-/'`

newcatalog=$(print -- $newcatalog | sed 's/^-/\.\/-/')

newcatalog=$(print -- "$newcatalog" | sed 's/^-/\.\/-/')

print -dpdf -r600 file.pdf

$ for index in ${!env[@]}; do print -n "[$index]=${env[$index]} "; done; print

print "/tmp/a.sh @array";

print "Array Element " a[var]

print FILENAME

print "File exists: $intensity\n" if -e $intensity;

print "Hello."

print STDERR "Your password please: ";

print `(touch .file1.lock; cp bigfile1 /destination; rm .file1.lock;) &`;

print a[key]

print 'b'

print "export PYTHONPATH=$PYTHONPATH:..."

print "google calendar add \"" $2, $3, "Work", $9, "to", $10"\""

print "hello\n";

print i, something > "/home/" acc ".txt"

print if /.../

print ips[ip]" "ip

print "list1 = ", list1

print parser.prog  # prints "some_other_name"

print protocol[x]:count[x]

print protocol[x]":"count[x]

print qx/ssh "$server1" "ssh $server2 \"echo \\\\"\\\$HOSTNAME\\\\"\""/;

print qx/ssh "$server1" 'ssh $server2 "echo \\\$HOSTNAME"'/;

print s, "(Untitled " count++ ")"

print "somebody@example.com"; # This would interpolate the array `@example`

  printXMLarg.bash gr3 *.xml

print_2nd_line 2 file

print_and_run_command" date +%H" "Hour"

print_and_run_command "date +%H" "Hour"

$ printenv PATH

printenv |grep G4 |awk 'BEGIN{FS="=";}{print $1;}'

printf "  %-16s %s\n" "foo:" "$(bar | sed '2,$s/^/                   /g')"

printf " >>> Process Completed - Total Runtime (d:h:m:s) : %d Days, %02d Hours, %02d Minutes, %02.4f Seconds\n" $dd $dh $dm $ds

bar=$(printf ' , "%s" u ($1):($%s) lw 8 ti' ${foo[@]} "2" ${foo[@]} "3" ${foo[@]} "4" ${foo[@]} "5" )

while IFS= read -r -n1 c;do printf "<U%04X>" "'$c"; done < ./infile

printf '<code style="color: %s;">%s</code>' "green" "ffmpeg -t $DURACION -f x11grab -s $RESOLUCION -r ${FPS[j]} -b:v $BR -i :0.0 -y $NOMBRE" >> file.html

$ printf "<format specification string>" $(<source-file.txt)

printf '<|%s|> ' $line && printf '\n'

printf "[%q]\n" "$AbsolutePath"

printf "[%s]\n" "$@"

printf '"%s",' *.txt > log.csv

printf '#!/bin/bash\ntouch /tmp/1234567890_'"$RUN"

printf '#!/bin/sh\nsomething'

printf "#%c/bin/bash\ntouch /tmp/1234567890_$RUN" !

printf '#include "%s"\n' *.c

printf "$(python read_one.py)" | xvkbd -file -

printf "$1"

 printf "$1=\""$1"\",$2=\""$2"\",$3=\""$3"\"\n"

printf "$PWD%s\n" user.newskims.131017222/*

printf "$line_num: $(echo $line | wc -w)"

printf "$nav\n$enc\n" | ./export_map.sh "100 200 300 400"

printf "$nav\n$enc\n" | /bin/bash -c "./export_map.sh \"100 200 300 400\""

uri=$(printf "$uri_template" "$PROTO" "$USER" "$PASS" "$HOST" "$TARGET")

printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}\n"

$ printf "%${COLUMNS}s" ""

printf "%'14.4f\n" 1234.56  # result "    1,234.5600" (in my locale)

printf "%'24f\n" 3.140000 3000

printf "%(%m/%d/%Y %T)T" $SECONDS

printf "%*s\n" "$header_len" "$dashes"

printf '%-10s %-10s %-10s %-10s\n' "csci" "csc" "Line #" "File Name" > "$1 3.txt"

printf '%-10s' "csci" "csc" "Line #" "File Name" $'\n' > "$1 3.txt"

printf "%-10s |\n" "$txt"

printf '%-10s%-10s%-10s%s\n' $(command | command)

printf "%-10s%-5s%-20s\n" $str1 $str2 $str3 >> file

printf '%-12s%-12s%s\n' $modules

printf "%-20s %-2s %-2s\n" "$line" $wordcount $linecount

printf '%-20s%-14s%s\n' 'Col A' 'Col B' 'Col C'

printf "%-22s %-16s %-14.2f %-15d %-13d %0.2f %0.2f\n", "$Title" "$Author" "$Price" "$QtyAvailable" "$QtySold" "$(echo $QtySold*$Price | bc)"

printf "%-30s%s" "left justified text" "[status]"

printf "%-`expr 40 - ${#b}`s %-40s\n", $a, $b

printf "%.${header_len}s\n" "$dashes"

printf '%.*s' $? $?

RESULT=$(printf "%.0f" $(echo "scale=8;100/$MAX*$RESULT" | bc))

b=$( printf %.0f $a )

printf "%.1f" "$loadMin"

printf "%.2048s\n", $2

printf '%.5e' 4.006055058150985e-03

printf '%.5e', 4.006055058150985e-03

printf '%.5e', 4.006055058150985e-03

printf "%0.2f\n" $T

printf "%0.2f\n" 41.495

printf "%0.6d" $value

printf "%010d\n" $num

oldFile= `printf "%020d" ${RET_VAL}`

month=$(printf %02d "$month")

printf '%02dd:%02dh:%02dm:%02ds\n' $days $hours $mins $secs

printf "%032s\n" $(<binary.txt) | tr ' ' '0'

initializationVector=$(printf '%032x' $i)

paddedFolderNumber=$(printf "%03d" $backupFolderNumber)

n=`printf %03d $n`

printf %04d $1 | sed 's/\(..\)\(..\)/\1 \2/'

printf "%04d\n" $num

num2() { printf '%05d' "$num1"; }

printf "%06.3f\n" 23.00

printf '%06d\n' "${value::6}"

printf "%10s", "------------------------------------------" > file.md

printf "%14s  %14s  %14s  %14s  %14s\n" $(cat data.txt)

v=`printf '%20s' ' '`

printf "%20s: %s" "$key" "${my_array[$key]}"

printf "%5s{FNAME}\n" " "

 $(printf "%76s"; echo "$'\x14\x84\x04\x08'")

 $(printf "%76s"; echo $'\x14\x84\x04\x08')

 printf '%7s' 'hello'

$ printf "%80s" ""

printf %b "$foo"

printf "%b" "${OUTARRAY[@]}" > ${OUTFILE}

printf %b 'ac s\nbc s\ncc s\n' | xargs -d '\n' bash /tmp/test.sh

printf "%c%c", 0xFF, 0xFE;

printf "%d %.4f\n", i, a[i]/b[i]

printf "%d, %s %s\n" $line_number $ipv4 $ipv6

max=$( printf "%d\n" "${array[@]}" | sort -n | tail -1 )

printf "%g,", score[row,attr]

printf "%o\n" $x

printf '%q ' "${args[@]}"

printf '%q' $1

printf '%q' "$1"

printf %q "$PS1" | grep -F '\\033'

nameArg=$(printf '%q' "$nameArg")

printf %q "$str"

printf '%q' "${BASHVAR}"

printf %q hello world

printf %q "hello world"

printf "%q" "hello\world" | someprog

printf '%q' this filename has spaces

printf '%q' thisfilenamehasspaces

printf '%q\n' "${files[772]}"

printf '%q\n' "${xa[@]}"

printf "%s " $(seq 9) | gawk 'END { print gensub(/[0-9] [0-9]/,"","3") }'

printf "%s " $(seq 9) | gawk 'END{ print gensub(/[0-9]/,"","5",gensub(/[0-9]/,"","5")) }'

printf "%s [WARN] %s %s %s\n" `date +"%d/%b/%G-%T"` foo bar baz

printf '%s ' {a..z}{a..z}{a..z}

myvar=$(for i in {1..100};do printf "%s" "#";done;printf "\n")

foo=$(printf "%s" $l | sed -E 's/'$pattern'/'$lib'/')

str=$(printf '%s' "$str" | sed -e 's@/@a@g')

str=$(printf '%s' "$str" | tr '/' 'a')

printf '%s' "$text" | ...

printf %s $'\t\ny\n' | ./install.sh

printf %s "$x"

printf "%s %08d 0x%02x\n" "$1" $(bc <<< "ibase=10;obase=2;$1") "$1"

printf "%s %15d %d\n",ARGV[i],sum[ARGV[i]],tr

printf '%s + ' "${array[@]}" | xargs -I{} echo {} 0 | bc

printf "%s ",i

printf '%s,' *.txt > log.csv

printf "%s,", score[row,attr]+0

printf "%s\0" "${FILES[@]}" | xargs -0 -i mv '{}' /path/to/destination

printf "%s:%s\n" "$(date)" "$(hostname)"

 printf '%s\0' *.n3 | xargs -0 cat > merged.txt

printf '%s\n' $SQL_FILE_VARIABLE | grep -E "'[^']*'"

printf '%s\n' "$STR"

printf '%s\n' "$line" >&4

printf '%s\n' "$query" | mysql database

printf '%s\n' "$var"

printf '%s\n' "$var"

printf '%s\n' "$var"

printf '%s\n' "${arr[@]}"|awk '!($0 in seen){seen[$0];next} 1'

printf '%s\n' "${array[4]}" "${array[2]}" "${array[9]}" "${array[5]}"

printf '%s\n' "${array[5]}" "${array[3]}" "${array[10]}" "${array[6]}"

printf '%s\n' "${array[@]}"

printf '%s\n' "${lines[@]}"

 $ printf '%s\n' "%s/^.\(.*\).$/\1/" "." "wq" | ed s_res.temp

printf '%s\n' *

printf '%s\n' *|awk -F7 NF==4

printf '%s\n' *.txt | paste -sd "," - > log.csv

printf '%s\n' *_* | sort -t_ -uk1,1

printf '%s\n' *_* | sort | awk -F_ '!_[$1]++'

printf '%s\n' *o?6*

firstline=$(printf '%s\n' 1p d wq | ed -s file.txt)

printf '%s\n' | grep --color ".txt"

file=$(printf '%s\n' path/to/files/*pattern*.txt | sed -n "$n"p)

printf '%s\n' 'shopt -s extglob' 'rm -rf !(cookbooks)' | bash

printf '%s\n' {a..z} | printlinesof - 5 3 10 6

printf '%s\n%s\n' "$finaluser" "$finalpassword"

printf '%s\t%s\n' ${$(<infile):1:-1}

ech-o() { printf "%s\n" "$*"; }

printf "%s\n" "$@"

printf "%s\n" "$FLAG_1"

docker() { for arg in "$@"; do printf "%s\n" "$arg"; done; }

printf "%s\n" "$var" > prices.txt

printf "%s\n" "${0##*/}"

printf "%s\n" "${FILES[@]}" | xargs -i mv '{}' /path/to/destination

printf "%s\n" "${a[@]}"

printf "%s\n" "${arr[@]}"

printf "%s\n" "${header[@]:1}"

printf "%s\n" "${o_args[@]}"

printf "%s\n" "${x[*]}"

printf "%s\n" "${x[*]}"

printf "%s\n" *.file_ID > my_list.txt

printf "%s\n" "-n"

printf "%s\n" /home/usr/AAA/*/*/*/VIP_Info*/

printf "%s\n" 0a "$(grep -o '[0-9]\+' nums.txt|sed 's/.*/read "&"/')" "" . w q | ed nums.txt

printf "%s\n" arg1 "argument 2" arg3 | ./function-script

printf "%s\n" "this is line one" "this is line two" "this is line three" > filename

printf "%s\n" "this is line "{one,two,three} > filename

printf "%s\n" {0..199} | xargs -P 8 -n 1 ./yourscript

$ printf "%s\n%s\n" pwd pwd|pdbedit -t -r -u user

$ printf "%s\n%s\n" pwd pwd|smbpasswd -s user

result=$(printf '%s| %-15s| %-25s| %-15s| %-15s| %-15s\n' "$result" "$size" "$name" "$visits" "$inbound" "$outbound")

$ printf '%x' "100000" | awk -f ascii_to_bin.awk | /bin/sh > output.bin

printf "(%s,%s)\n" $x

printf "(entity:content %s:%s)\n" $ENTITY $CONTENT

printf '*'

printf ',s/PATTERN/REPLACE/g\nw\nq\n' | ed -s your_file.txt

$ printf -- '%s\n' "${my_array[@]}"

$ printf -- '%s\n' * | awk -F'jboss-|.tar.gz' '/jboss/{print $2}'

 $ printf -- '%s\n' * | grep -oP 'jboss-\K.*(?=\.tar\.gz)'

printf -- '%s\n' * | perl -lne '/jboss-(.*?)\.tar\.gz/ && print $1'

printf -- '%s\n' *.txt | head -n 1

printf -- '%s\n' *.txt | sed -n '1p'

append_with_newline() { printf -v "$1" '%s\n%s' "${!1}" "$2"; }

printf -v "${vars[$i]}" "%s" "${arr[$i]}"

printf -v S '%s' "${A[@]}"

printf -v TYPE '|%s' "${TYPE[@]}"

printf -v _INFO '%q' "$_INFO"

printf -v bar %b "$foo"

printf -v cmd_str '%q ' "${cmd[@]}"

printf -v escaped_string %q "$raw_string"

printf -v filename '%q' "$(inotifywait --format "%f" -e create /var/www/media2net/torrent)"

printf -v filename -- "$TEMPLATE" "$c" "$a"

printf -v "myarray__${key}" %s "$value"

printf -v myvar '%q ' "$@"

printf -v nameArg '%q' "$nameArg"

printf -v newPWD "%-*s" $pwd_length "$newPWD"

printf -v prefixed_list "right-%s " $list

printf -v raw_string %b "$escaped_string"

printf -v result '%s| %-15s| %-25s| %-15s| %-15s| %-15s\n' "$result" "$size" "$name" "$visits" "$inbound" "$outbound"

printf -v v %s */

printf -v var '%s\n%s' "$var" "in a box"

printf -v var "%s\n" "$var"

printf -v var 'FILE=_%s_%s.dat' $val1 $val2

printf -v variable $(sed 's/.*://;s/\(..\)/\\x\1/g' <<< "$line")

printf -v variable "%.1f" "$loadMin"

printf "..$i-->${!i}\n"

printf ... | cut -c 1-80

printf ... | fold -w 80

printf '...last modified: %s' $(git status -s | paste -sd ,)

file=$(printf "/root/file%04d" $i)

printf "\033[1;4;31m%-${COLUMNS}s\033[00m" "Command failed with $RANDOM"

printf "\033[?1h"

printf "\033[?1l"

printf "\033%s foo" "${a1}"  # 033 octal for ESC

printf "\033c"

printf "0: %.8x" $int | sed -E 's/0: (..)(..)(..)(..)/0: \4\3\2\1/' | xxd -r -g0 >>file

printf 0x%X $MYVAR

printf "1 2 3\r\n4 5 6\r\n" | tr -d "\r" | while read line ; do echo $line ; done

printf '1 2' | xargs ...

(printf 123456789; seq 5) > file

printf "1st" "2nd\n"

printf '2\n1\n' | program

str=$(printf '=%.0s' $(seq $leng) | tr '=' '-')

printf '=%.0s' 1 2 3 4 ... 100

printf '=%.0s' {1..100}

printf "Echoing random number %-5s   [ OK ]" $RAND_NUM

var=$(printf 'FILE=_%s_%s.dat' $val1 $val2)

printf "File\tReads\tPaired reads\tConc reads1\tConc Reads2\tTotal align\nGW1\t%s\t%s\t%s\t%s\t%s\n" "$RDS_T" "$RDS_P" "$RDS_C1" "$RDS_C2" "$ALGN_T"

printf "Hello, %s\n" George W. Bush

printf "Memory Usage: %s/%sMB (%.2f%%)\n"

printf "My name is %s. I live in %s.\n" "John" "London"

printf 'Number: %s\n' "${array[@]}"

printf "Question? [Y/n] "

printf "Removed file %-64s (%d/%d)\n" "\"$file\"" $n $of

printf "Thread dump #%d\n", counter >counter".txt";

printf "Time: $TIMESTAMP_CMD\n\n$EMAIL_BODY" 

printf "Welcome ! it is now: \n%s\n" "$(date "+%d %b %Y:%T %s")"

$(printf \\000)

printf '\033[38;5;1mnormal \033[02;38;5;1mdim \033[01;38;5;1mbold'

printf '\033]2;%s\033\\' 'title goes here'

printf '\e[1;34m%-6s\e[m' "This is text"

printf '\x0a' | dd of=filetopatch bs=1 seek=0 count=1 conv=notrunc 

printf "^[%s foo" "${a1}" # that is ctrl+v, ESC, followed by %s

printf "^%s\n" {1900..2100} | grep -of - file

printf "foo" | wc -c

printf 'foo\nbar\n' | ./myprog

 printf format, item1, item2, ...

printf "hello\nworld\n"

$ printf 'http://www.site.org/%d\n' {1..10}

printf 'ip: %s\n' $(ifconfig | grep 'inet' | sed -n '5p' | tr -s ' ' | cut -d ' ' -f2)

printf "latc=%s\n" "${latc[*]}"

printf "message :: %s %s\n" "$(display_output_message $1 $2)" "received"

printf "n%04g\n" {1..100} | xargs -n 1 -P 10 -i bash -c 'echo_var "$@"' _ {}

printf 'one\nfour\ntwo\nthree\nfour\n'

printf 'one\ntwo three \nfour\n' | xargs -I{} echo foo {} bar

printf 'one\ntwo three \nfour\n' | xargs echo

$ printf 'one\ntwo\nthree\nfour\nfive\n' | awk 'BEGIN{srand()} {printf("%.20f %s\n", rand(), $0)}' | sort | head -n 3 | cut -d\  -f2-

printf "\r%-${COLUMNS}s" "$var"

printf "\rFileName : %20s : %8d of %8d Completed" $filename $index $lines

IFS=','; printf "setup-x86.exe -q -p='%s'\n" "${deps[*]}"

( IFS=,; printf "setup-x86.exe -q -p='%s'\n" "${deps[*]}"; )

printf "somthing wrong!%v" Oops! > dumpz 2>&1 

printf "somthing wrong!%v" Oops! 2>&1 > dumpz 

printf 'true\n%.0s' $(eval echo "{1..$count}")

s() { for i; do printf 'x' ; done }; s 2 3

( printf "\xff\xfe" ; iconv -f utf-8 -t utf-16le UTF-8-FILE ) > UTF-16-FILE

printf '{"hostname":"%s","distro":"%s","uptime":"%s"}\n' "$hostname" "$distro" "$uptime"

printlines 5 3 10 6

printlinesof file.txt 5 3 10 6

 private PrintStream print;

private static final String DEFAULT_FILE_TYPES = "xml,json,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log";

proc.StartInfo.Arguments = text + " " + txtBoxUrls.Text + " " + txtFileName.Text; 

proc.StartInfo.Arguments = text + " " + txtFileName.Text;    

proc.StartInfo.Arguments = text + " \"" + txtFileName.Text + "\"";    

proc.StartInfo.Arguments = text + @" """ + txtFileName.Text + @"""";    

( proc1 3>&1 1>&2- 2>&3- ) | proc2

$ proc1 | tee >(proc2) ... >(procN-1) | procN

procStartInfo.RedirectStandardOutput = true;

procStartInfo.UseShellExecute = true;

proc_A | proc_B | python pop-cmd.py cmdstack.lst | proc_D

 process $j &

$process = `...`;

FOO=$(process params)

process-all-together "$@"

process.StartInfo.FileName = "\"C:\\Program Files\\Microsoft SDKs\\Windows\\v7.1\\Bin\\signtool.exe\""

process.sh index.php > new_index.php

param4=$(processInfo $1 | awk -F: '{print $4}')

process_column_range 22 41 <input.csv >output.csv

 processed/foo/bar

prodigal -o /dev/stdout

producer | Option1 | Option2 | Option3 | consumer

prog $1 | sponge $1

prog > stdout arg1 2> stderr arg2 < stdin arg3

prog inputfile >(sort -rn | cut -f1-2 >outputfile)

prog inputfile /dev/stdout | sort -rn | cut -f1-2 >outputfile

prog inputfile - | sort -rn | cut -f1-2 >outputfile

prog1 arg || grep xyzzy somefile

prog1 | prog2

prog2 "$(prog1 file.txt)"

prog2 "`prog1 file.txt`"

progam.exe arg1 arg2 arg3

progname 2>&1 1>out.txt

progname 1>out.txt 2>&1 

program > /dev/pts/2 &

program <infile >infile

program >/dev/pts/1 2>&1     # send stderr to the same place as stdout

program -a '*.txt'

program -cat --cat   # 4 options: -c, -a, -t, --cat

program ...

program arg1 arg2 arg3 "arg4 containing spaces"

program | awk '/pattern/{exit}1'

program | awk '/pattern/{print;exit}1'

program < <(command)

program.exe < data.txt

program.exe > result.txt

program.exe < content.in

program.exe -flags | repl "^(cmd|prc): " "" a >output.txt

program.exe | sort.exe

program.exe | sort.exe | more.exe

program.py > tmp.csv && mv tmp.csv file.csv

 program1 &  program2 &

program2 `program1`

program2 "`program1`"

program_name -forever

program_name -forever -shared

programming

$ progress-meter "Doing stuff" do-things arg1 arg2

prompt off

property pathToResources : "NSString"  -- works if added before script command

protected\yiic shell protected\config\main.php

num_children=`ps --no-headers -o pid --ppid=$$ | wc -w`

ps --ppid $(pgrep gnome-terminal)  | grep tcsh | wc -l

ps -Ao %cpu,%mem,user,comm

ps -A -o pid -o command | egrep '[f]lash' | cut -d' ' -f1

line=$(ps -A|awk -v name="$name" '$0 ~ name{print $1}')

ps -A | grep -c '[f]sdaemon'

ps -A | grep -m1 firefox | awk '{print $1}'

ps -A | grep -v grep | grep -c fsdaemon

ps -A x |grep sshd |grep -v grep

psf () { ps -C $1 fww -o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,cmd; }

ps -C apache2 fww -o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,cmd

ps -C bash -o "comm %cpu %mem" --no-headers | awk '{a[$1] = $1; b[$1] += $2; c[$1] += $3}END{for (i in a)printf "%s, %0.1f, %0.1f\n", a[i], b[i], c[i]}'

ps -C command_name --no-headers | wc -l

ps -C fetchmail >/dev/null || fetchmail -d 1800

ps -C less --no-headers -o %cpu,%mem

ps -C temp_tool -o pid

ps -F -C myservice

ps -L u n | tr -s " " | cut -d " " -f 2,3,14-

ps -aef | awk '/File_name/ && ! /awk/ {system("kill -9 " $2)}' 

ps -aux | awk ' /^username/ { system("pstree " $2) }'

ps -aux | awk '$14>=30000 && $14<=30100 && $0~/curl/ { print $2 }' | xargs kill -9

ps -aux | grep -q "my.php" || php -f my.php

ps -aux | sed 's/^ *//;s/  */ /g' | cut -d' ' -f2

ps -aux | xxd -g 1        # -g 1 outputs each character individually

ps -ax | grep PROCESS_NAME | grep -v ' grep '

ps -eLf

PID=$(ps -ea | awk '/<search_term>/,NF=1')

ps -ef >/tmp/bash_stack_trace.$$

myVariable=`ps -ef`

 myVariable=$(ps -ef)

$ ps -ef|awk '($0 ~ "<processname>"){print $2}'|while read -r; do kill -9 $REPLY; done

$ps -ef | awk -f part3.1.awk | sort

ps -ef | awk '/[k]eyword/{print $2}'

ps -ef | awk '/[p]ort/ {printf "start time: %s\nsn: %s\nsku: %s\nport: %s\n", $5, $11, $13, $NF}'

ps -ef |  awk '/PRD_/ && /startscen\.sh/ {print $3}'

ps -ef | awk '/^root.*\-Djava/ { gsub(/\/[^\/]*$/, "", $8); gsub(/.*\//, "", $8); print $8}'

ps -ef | awk '{print $8}'

ps -ef | grep '[c]ron'

ps -ef |grep [g]nome-terminal

ps -ef | grep '[j]ava'

ps -ef | grep "[s]omething"

ps -ef | grep '[x]xx'

PROCESS_NUM=$(ps -ef | grep "$1" | grep -v "grep" | wc -l)

ps -ef | grep $KEY_NAME | grep -v grep | awk '{ print $2 }'|xargs kill

counter=`ps -ef | grep -c "myApplication"`; if [ $counter -eq 1 ]; then echo "true"; fi

for i in `ps -ef | grep -w -E "script1|script2" | awk '{print $2}'`; do kill -9 $i; done

a=`ps -ef | grep 19999 | grep -v grep`

a=$(ps -ef | grep 19999 | grep -v grep)

ps -ef | grep apache | tr ' ' @

ps -ef | grep bar | grep -v grep | cat

ps -ef | grep bar | { grep -v grep || true; }

$for i in 1 2 3;do  ps -ef |grep bash >> out.log;done;cat out.log|sort -n

ps -ef | grep cron

ps -ef | grep cron | grep -v grep

ps -ef |grep gnome-terminal | grep -v grep

ps -ef | grep memcache

ps -ef | grep memcache | grep -v "grep" | awk '{print $2}' | xargs kill; 

ps -ef | grep 'perl check'

ps -ef | grep raj | awk '{print $2}' | xargs kill

ps -ef | grep sharatds | awk '{print $2}' | xargs kill

ps -ef | grep something | grep -v grep

ps -ef | grep tomcat-5.5-26-rum | grep java | awk ' { print $2 } '

str="sudo nohup bash -c 'kill -9 $(ps -ef|grep udp_receiver|grep -v grep|awk \"{print $2}\") > /nohup.out 2>&1 &'"

ps -ef |grep xampp

ps -ef |grep xampp|grep httpd

ps -ef |grep xampp |grep mysql

ps -ef | grep "your_process" | awk '{print $2}' | xargs kill

for pid in `ps -ef | grep your_search_term | awk '{print $2}'` ; do kill $pid ; done

ps -ef | (head -n 1; grep '[h]ttpd')

ps -ef kbsdstart

ps -ef | sed -n -e '1p' -e '/[h]ttpd/p'

ps -ef | sed -n '/blahblahblah/s/^.*port=\([[:digit:]]\+) .*/\1/p'

ps -ef | sed '1b;/[h]ttpd/b;d'

$ps -ef | sort | awk -f part 3.1.awk

arr=$(ps -elf | nawk -v pattern=${userid} '{if ($3==pattern) print}')

ps -ely | awk '{ if( $8 > 1024 )print int($8/1024) "M\t" $13 ; else print $8 "K\t" $13; }' | sort -h

ps -el | grep $processname | awk ...

ps -el | grep $processname | grep -v 'grep' | awk ...

 ps -e -o %cpu | sed '1d' | sort -nr

 ps -e -o %cpu | sort -nr

cpuUse=$(ps -eo %cpu | sort -nr | head -1 | tr -d '[[:space:]]')

ps -e -ocomm | grep Test_Ex || ...

ps -e -o cmd | cut -f 1 -d ' '  | sort | uniq -c

ps -eo "comm %cpu %mem" --no-headers | awk '{a[$1] = $1; b[$1] += $2; c[$1] += $3}END{for (i in a)printf "%s, %0.1f, %0.1f\n", a[i], b[i], c[i]}' | sort

ps -eo pid,args | awk '/PRD_/ && /startscen\.sh/ && $4 ~ /PROCESS_ALLBETS/'

ps -eo pid,comm | awk '/Skype$/  {print $1; exit}'

ps -eo pid,comm | grep 'Skype$' | awk 'NR == 1 {print $1}'

ps -eo pid,comm | grep 'Skype$' | awk '{print $1}' | head -1

ps -e -o pid,comm | grep ssh-agent

ps -e -o pid,command | grep [r]esque-[0-9] | cut -d ' ' -f 1 | xargs -L1 kill -s QUIT

ps -eo pid,command,etime

ps -eo pid,etime | grep " 1 " | grep -v grep | awk '{print $2}'

ps -eo pid,etime,command | grep PID | grep -v grep | awk '{print $2}' | awk -F : '{ printf("%.2f\n", $1*60+$2+($3/60)); }'

ps -eo pid,etimes,command | grep PID | grep -v grep | awk '{printf("%.2f\n", $2/60)}'

ps -eo pid,rss,cmd

ps -eo pmem,pid,pcpu,rss,vsz,time,args | sort -k 1 -r|awk '$2~/<your pid>/'

ps -eo ppid,pid,cmd | awk '{p[$1]=p[$1]","$3}END{ for(i in p) print i, p[i]}'

ps -eo uid= | tr -d ' ' | grep -vx 0 | sort | uniq

ps -eo uname:20,pid,pcpu,pmem,sz,tty,stat,time,cmd | grep '[b]ash'

ps -eo user= | grep -vx root | sort | uniq

ps -eo user= | grep -vx root | sort | uniq -c | sort -nr

ps -e | grep [s]tupid_test

ps -e | grep stupid_test | grep -v grep | wc -l

ps -fU "`who | cut -d' ' -f1 | uniq | xargs echo`" 2> /dev/null

ps -fU user1 user2 user3

pid=$(ps -fe | grep '[p]rocess name' | awk '{print $2}')

pid=$(ps -fe | grep '[r]unner1.sh' | awk '{print $2}')

pid=$(ps -fe | grep 'process name' | grep -v grep | awk '{print $2}')

ps -fu user | grep matching_strin[g]

ps -h -p {100..300} | wc -l

ps -la | awk -v uid=1000 'NR==1{for (i=1; i<=NF; i++) if ($i=="UID"){col=i}} NR>1 && $col==uid'

$ ps -o '%r' $$ | tail -n 1 > $pgfile

ps -o command= -p "$PPID" | awk '{print $1}'

ps -o etime -C ProgramName | awk -v MAX=600 '{split($0, a, ":"); if (length(a)==2) sec=a[1]*60+a[2]; else if (length(a)==3) sec=a[1]*3600+a[2]*60+a[3]; if (sec>MAX) print "Elapsed"; else print "Not Elapsed"}'

ps -o etime -p 18613 | awk 'NR == 2 { print substr($0, 4); }'

ps -o etime=,command= | awk -v MAX=600 '/ProgramName/ && !/awk/ {split($1, a, ":"); if (length(a)==2) sec=a[1]*60+a[2]; else if (length(a)==3) sec=a[1]*3600+a[2]*60+a[3]; if (sec>MAX) print "Elapsed"; else print "Not Elapsed"}'

ps -o pid= -o comm= -o args= | awk '$2~/grep/{print $1, $3}'

ps -o pid=,args= -C grep

ps -o ppid= "$ID"

PID=$(ps -o ppid= "$ID")

PID=$(ps -o ppid= "$ID" | egrep -o '\S+')

PID=`ps -o ppid=$ID` should have had a space between `ppid=` and `$ID`.

ps -o rss= -p `pidof mysqld` | awk '{print $1*4, "KiB"}'

ps -o stat= -p $$

ps -o stat= -p $PPID

ps -p [process pid] -o sess=

ps -p $(lsof -ti tcp:80) o comm=,pid=

ps -p $(pgrep -d, -xsnmpd) -o rss

ps -p $(pidof name)

ps -p "$(ps -p "$$" -o ppid= | sed 's|\s\+||')" -o fname=

while ps -p $PID >/dev/null 2>&1; do :; done

while ps -p $PID >/dev/null 2>&1; do sleep 1; done

ps -p "$PPID" -o comm=

ps -p "$PPID" -o fname=

ps -p <pid> -o %cpu,%mem,cmd

ps -p 29264 > /dev/null; echo $?

ps -p 747 -o %cpu,%mem | awk 'NR>1'

ps -p 747 -o %cpu,%mem | sed 1d

ps -p `cat /var/run/myscript.pid`

ps -p `ps -ef |  awk '/PRD_/ && /startscen\.sh/ {print $3}'`

ps -p <PID> -xo command=

ps -p <pid> -o cp

ps -p <PID> -o user,cmd --columns 1000 | grep `whoami`

ps -u "$(echo $(w -h | cut -d ' ' -f1 | sort -u))" o user= | sort | uniq -c | sort -rn

ps -u $userid -la | grep '[f]oobar'

ps -u <uid> -xo pid=,uid=,command=

 ps -wef | awk 'NR>1 {printf("%s ", $2)}END{printf("\n")'

ps H -C <cmd name> -o 'pid tid args comm'

ps auwx | awk '/[s]ql/ {total += $4} END {print total}'

ps aux | awk '/RandomApp.app/ {print $2}'

ps aux | awk 'NR != 1 {x[$1] += $4; print $1, x[$1]}'

ps aux | awk 'NR != 1 {x[$1] += $4} END{ for(z in x) {print z, x[z]"%"}}'

ps aux | awk 'NR == 1 || /PATTERN/'

ps aux | awk '{print $11}'

ps  aux|awk '{print $1}' | sort | uniq

ps aux | awk '{print $1}' | xargs -I % sh -c '{ echo %; sleep 1; }'

ps aux | grep [-i] $ProcessName | wc -l

pid=`ps aux | grep '[M]ATLAB' | awk '{print $2}'`

ps aux | grep [m]y_task

ps aux | grep [m]yserv

ps aux|grep '[p]aramount'

ps aux | grep '[p]lugin-container.*Flash.*'

ps aux | grep [p]rocess\ name | awk '{print $2}'

PROCESS=$(ps aux | grep "$1" | awk '{print $2}')

ps aux | grep -ie amarok | awk '{print $2}' | xargs kill -9 

ps aux | grep -i java | grep -i test | awk '{ print $2 }' | xargs kill

if ps aux | grep -q "[b]la bla" ; then echo "found" ; fi

ps aux | grep "/usr/bin/php /path/to/thing/you/run.php" | grep -v grep | wc -l

ps aux | grep 7000.conf | grep -v grep | awk '{print $2}'

ps aux | grep '7000\.conf' | awk '{print $2}'

ps aux | grep "aa.sh"

ps aux | grep eclipse

ps aux | grep firefox | awk '{print $2}' | xargs kill -9

ps aux | grep hadoop

ps aux | grep my_task

 check_ifrunning=`ps aux | grep "programmname" | grep -v "grep" | wc -l` 

ps aux | grep qmail | grep -v grep

ps aux | grep some_proces[s] > /tmp/test.txt && echo 1 || echo 0 

if ps aux | grep some_proces[s] > /tmp/test.txt; then echo 1; else echo 0; fi

ps aux | head -1 ; ps aux | grep process_name

ps aux | perl -ne 'print if $. == 1 || m/process_name/'

( ( ps aux | while read -r LINE ; do echo "$LINE" ; echo "$LINE" 1>&3 ; done | head -1 1>&4 ) 3>&1 | grep process_name ) 4>&1

ps aux | ( ( read -r LINE ; echo "$LINE" ) ; grep process_name )

ps aux | sed -n '1p;/PATTERN/p'

ps auxww | sed -n -e '/java.instanceName/s;\(^[a-z]* *[0-9]*\).*\(/usr/user/java.instanceName[A-Za-z._0-9/]*\) .*;\1 \2;p'

ps aw | awk '/\/bin\/1\// {print $1}' | xargs kill -9

ps aw o pid,command | awk '$2 ~ /^\/bin\/1\// {print $1}' | xargs kill -9

ps | awk '($1>=lo)&&($1<=hi){n++}END{print n}'

ps | awk "{print $var}"

ps ax --forest 

PARENT_PID=`ps ax | grep fcgi | cut -f1 -d' ' | head -1`

ps ax | grep 'python main.py [defunct]' | grep -v grep

ps ax | grep uniquename | grep -v grep | awk '{print $1}' | xargs kill

ps ax o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,comm,group,gid

 ps axk-pid

ps axk-pid -o pid

ps cax | grep -E "Nginx|mysql|etc" > /dev/null

$ ps | egrep 11383 | tr -s ' ' | cut -d ' ' -f 4

ps | grep $$

ps | grep $PPID | cut -d" " -f4

ps | grep $PPID | tr -s ' ' | cut -d' ' -f5

ps | grep "Genymotion\.app/Contents/MacOS/player" | awk '{print $1}' | xargs kill

$ ps h --ppid "$PID" -o vsz | awk '{ SUM+=$0 }; END { print SUM }'

ps h -eo etime | ./script.sh 

$ ps h -e -o pgid,vsz | awk -v "PGID=$PID" '$1==PGID { SUM+=$2 }; END { print SUM }'

ps o pid,group

ps o pid,group,gid

ps o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,comm,group,gid

ps opid --ppid=7051 | tail -n +2 | xargs kill

 ps uax | grep 'ba[c]' | ...

ps ufww --sid=$(ps -C apache2 -o sess= | sort -u | grep -v -E '^ +0$' | tr $'\n' ',' | sed 's/,$/\n/; s/ //g')

ps x

 ps x -o  "%p %r %y %x %c "

ps x -o  "%p %r %y %x %c "

ps x | grep 'vsftpd'| grep -v grep

ps x | grep 'vsftpd'| grep -v grep | awk '{ print $2 }'

ps1_set

ps1_set

pscp -batch login@mysshsite.com:iiumlabs* .

pscp uname@MachineB:/export/home/uname/aa.txt c:\documents\foo.txt

pscp.exe -pw "blabla" test-script.sh bob@10.20.110.57:/some/path/

pscp.exe youruser@server:/path/to/file C:\path_to_file

psexec -u user -p pass cmd /c "d:\GitRepos\runAll.bat a1 a2 "a3""

psexec \\server -u <user> -p <pass> -c -f remote_dir_listing.cmd

psql --tuples-only -P format=unaligned -c "SELECT datname FROM pg_database WHERE NOT datistemplate AND datname <> 'postgres'";

psql --username=postgres -c "..."

psql -U <username> -d <dbname> -1 -f <filename>.sql

psql -U deploy spider

psql -U root spider

psql -c 'CREATE DATABASE myDB TEMPLATE mytemplate1'

psql -c "SELECT columns FROM table ${1:+WHERE $1} ${2:+WHERE $2}"

vartest=`psql -d $dbname -U $username -h localhost -p 5432 -t -c "SELECT gid FROM testtable WHERE aid='1';"`

psql -h $DBHOST -d $DBNAME -U $DBUSER

psql -h 192.168.1.45 -d somedbname -U $somedbuse

psql  -o filename -U sathishkumar -c "select * from hospital_management.patient_details";

patchdate=` psql -t -q -c "select patch_date from version_history where version ='1.1.1'"`

psql db -c "SELECT COUNT(test) FROM tbTest;" | tail -n 2 | head -n 1

psql mytemplate1 -f file

psql> \pset pager off

psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='USR_NAME'"

psql postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='USR_NAME'" | grep -q 1 || createuser ...

psql regress -c "insert into text_files(file_content) values ('$(sed "s/'/''/g" test.txt)');"

$ psrc

pstree | cat

pstree | grep MDSImporte | less -SEX

public $variable

public property BackgroundColor{get;set}

public var $variable 

pudb /parent/folder/module_folder/__main__.py

$ purge #/usr/bin/purge

push 0x1000

pushd $(/bin/pwd)

pushd $PWD

pushd %Pathname%

pushd C:\src&call ant -Dinifile=C:\repo\IR.ini -Dfilelist="label.xml" >> %outputfile% 2>&1&popd

pushd X:

pushd \\OTHERCOMPUTERNAME\Shared_folder

pushenvvar PATH /usr/local/tools/gcc-4.3.3/bin

pushenvvar PATH /usr/local/tools/gcc-4.3.3/bin:/bin

put $filename /home/remote/server/$file

put myfile

put, molden, visual_4.0_60.0 ;

put, molden, visual_r_theta ;

puts %x[bash --login -c 'echo $PATH']

puts "Argument: ##{s}"

puts Dir['*.JPG'].map{ |f| "<img src='#{f}' title='Image File #{f}' />" }

puts "USER [exec whoami]"

puts `dir`

puts `echo #{command}` 

puts `ssh -o StrictHostKeyChecking=no -i keyfile user@host "sudo cat file | awk '/^server/ {print \\$2}' | sort -u"`

puts stdout [format "i val %d '\x%x'" $i $i] 

putty.exe user@server.com -pw password

pv -cN transfer /root/networkshare/someFile.tar | pv -cN untar -s $(du -sb /root/networkshare/someFile.tar | awk '{print $1}') | tar xf - -C /tmp/someDir/

pv -q -L 37 somefile

pv /dev/zero | nc -U /tmp/socket

pv /path/to/archive.tar.xz | sudo tar xp -C /path/to/dir

pv infile > outfile

STATUS=`pvs /dev/sdb 2>&1 | grep failed`

STATUS=$(pvs /dev/sdb 2>&1 | grep failed)

pwd > ~/.lastdirectory

pwd=`pwd`

pwd=$(pwd)

current_dir=`pwd` # BAD! Don't do this!

$ pwd

cwd=$(pwd)

result=$((pwd) 2>&1)

result=$(pwd 2>&1)

mypath=`pwd`

LOG_FILE="`pwd`/creation.log"

pwd >~/.place

$ x=`pwd`; while [ "$x" != "/" ] ; do x=`dirname "$x"`; find "$x" -maxdepth 1 -name file.txt; done

SCRIPTPATH=`pwd -P`

TMP=`pwd -P` && cd "`dirname $TMP`" && rm -rf "./`basename $TMP`" && unset TMP

pwd ; ( cd /tmp ; pwd ) ; pwd

pwd | cut -b2- | tr '/' '\n'

pwd | cut -d / -f 4

pwd | sed 's#.*/##'

pwd | tr '/' '\n'

dirname=`pwd | xargs basename | awk '{print tolower($0)}'`

pwd | xsel -i

pwpolicy -u SomeUser -sethashtypes SMB-NT off

pwpolicy -u SomeUser -sethashtypes SMB-NT on

pwpolicy -u jdoe -getpolicy | grep -oE "isDisabled=."

status=$(pwpolicy -u jdoe -getpolicy | grep -oE "isDisabled=.")

px aux | sed -n 's/.*-q\s\([0-9]\+\).*/\1/p'

pygmentize "$var" 2> "$tmpfile"

pygmentize -o jquery.png jquery-1.7.1.js

pysortints.py < testfile

python "$(dirname "$0")/foo.py"

python $0 "$@"

python "$@"

for f in *.py; do python "$f"; done

out=`python --version`

out=`python --version 2>&1`

a=$(python --version 2>&1)

python --version >> path.log 2>&1

a=`python -V` 

a=`python -V 2>&1` 

python -c "$(< foo.py)"

python -c $'import re\nif True: print "HELLO";'

python -c $'import subprocess\nwhile True: subprocess.call(["ls"])'

python -c $'import sys\nfor p in sys.path:print p'

python -c $'print file.shape\n import sys,os\n'

python -c'import themodule; themodule.thefunction("boo!")'

python -c "exec(\"import sys\\nfor r in range(10): print 'rob'\")"

python -c 'for ln in __import__("fileinput").input(): print ln.rstrip()' files...

python -c "for x in range(1,10): print x"

python -c "for x in range(1,10): x==1 and __import__('calendar').prcal(2009); print x;"

$ python -c 'from foo import *; print hello()'

$ python -c 'from foo import hello; print hello()'

python -c "from itertools import permutations as p ; print('\n'.join([''.join(item) for line in open('File') for item in p(line[:-1])]))"

python -c "from itertools import permutations as p ; print('\n'.join([''.join(item) for line in open('File') for item in p(line[:-1])]))"

python -c "from math import ceil; print ceil($NUMBER/500.0)"

python -c "from unidecode import *; print unidecode(u'\xc3\xa4\xc3\xa8\xc3\x9f')"

python -c "import $1; print $1.__file__"

python -c "import MythDB.MythTV"

python -c "import code; code.interact(local=locals())"

python -c 'import csv,sys;[sys.stdout.write(row[2]+"\n") for row in csv.reader(sys.stdin)]' < input.txt

$ python -c 'import foo; print foo.hello()'

fooshell=$(python -c 'import hello; print(hello.hello())')

python -c "import json;print json.loads(open('json_file.json', 'r').read())['result']['covered_percent']"

python -c "import locale; locale.setlocale(locale.LC_ALL, ''); print ('\n'.join('text1 ' + locale.format_string('%.1f+(%.1f*(%.1f+2.5))',(i,i,i), grouping = True)  + ' text2 ' + locale.format_string('%.1f',i+(i*(i+2.5)), grouping = True) + ' text3'for i in range(1,1111)))"

python -c "import mymodule, code; code.interact(local=locals())"

python -c 'import os, sys, pickle; pickle.dump(os.environ, sys.stdout)'

$ python -c "import os; print '*' * int((int(os.environ.get('HEALTH', 0)) / 100.0) * 78)"

bash$  python -c "import os; print dir(os)"

python -c 'import os; print os.environ["Clear Workspace"]'

SECRET=$(python -c 'import re;from random import choice; import sys; sys.stdout.write(re.escape("".join([choice("abcdefghijklmnopqrstuvwxyz0123456789^&*(-_=+)") for i in range(50)])))')

python -c "import subprocess,time;proc = subprocess.Popen(['ping','-t', 'google.com'], shell=True);time.sleep(1);proc.terminate()"

python -c 'import sys,Quartz; d=Quartz.CGSessionCopyCurrentDictionary(); sys.exit(d and d.get("CGSSessionScreenIsLocked", 0) == 0 and d.get("kCGSSessionOnConsoleKey", 0) == 1)'

python -c "import sys; print sys.path"

python -c 'import sys; print sys.real_prefix' 2>/dev/null && INVENV=1 || INVENV=0

$ python -c "import sys; print(sys.executable)"

python -c 'import sys;print "".join(sorted(set.intersection(*[set(open(a).readlines()) for a in sys.argv[1:]])))' File1 File2 File3

python -c 'import test; print test.get_foo()'

RESULT_FOO=`python -c 'import test; print test.get_foo()'`

RESULT=$(python -c 'import test; print test.get_foo()')

ALL_RESULTS=$(python -c 'import test; print test.get_foo(), test.get_bar()')

$(python -c "import urllib, sys; print urllib.unquote(sys.argv[1])" "h%23g")

python -c 'print "\n".join(map(lambda x: x[2], open("<filename>").readlines()))'

python -c 'print "hello"; print "world"'

python -c 'print "ls"' | bash

python -c "print $NUM"

python -c "print 'hello world'"

python -c "print '\n'.join(sorted(set(unicode(open('inputfile').read(), 'utf-8')) - set(chr(i) for i in xrange(128))))"

python -c 'print file.shape\n import sys,os\n'

python -c 'print u"'$STR'"'

python -c 'print u"\u5000".encode("UTF-8")' >a.out

python -c "return subprocess.call(['ssh', '$host', 'test -e ' + pipes.quote(\"$path\")]) == 0"

python -c 'sys.path.append(os.path.join(os.environ['PETSC_DIR'],'bin','pythonscripts'))'

python -i -c "import sys; import datetime;"

python -i main.py < tests/1.in

python -i my_script.py

python -i test.py

python -mjson.tool \[\"cheese\",\ \{\"cake\":\[\"coke\",\ null,\ 160,\ 2\]\}\]

python -m SimpleHTTPServer

python -m SimpleHTTPServer 80

python -m SimpleHTTPServer 8000

$ python -m a -m b

python -m pdb myscript.py

python -m pyftpdlib

python -m run

$ python -t somescript.py

python -u MyLongRunngingScript.py | tee log.txt

python -u myscript.py > output.txt

python -u someFileName.py

python -u test.py > test.out; cat test.out

python ./build_native.py 2>&1 | grep "error" 

python /path/to/tcprelay.py -t 22:2222 &

python /path/to/your_script.py arg1 arg2 [...]

python /var/www/hash_info.py /var/www/Muha_Album.7912.torrent

metaData=`python /var/www/music/getMetaData.py "$artist" "$title" | tail -n 1`

python C:\Python\Script.py

python Code.py $(find . -type f -name "mubunching*" | awk -F'[.]' '$(NF-1)>=5')

for i in {0..100}; do python Script1.py $i > test/Run$i.txt; done

python a.py "a&7"

python a.py a^&7

python a.py && python b.py && python c.py && python d.py 

 python argtest.py hello

python calls.py | awk '/^[0-9]/{print}/'

python | cat

$ python clean_index.py

python command && sudo shutdown -h now

python convertImage.py convertFile fileName

python convert_csv.py infile outfile

python csvadd.py test.csv

python filename.py | mailx -s "Subject" "mail@mail.com"

$ python fill-xml-template.py A.txt B.xml -i

fooShell=$(python fooPy.py)

python main.py >/dev/null  2>&1 &

python manage.py collectstatic

python manage.py runserver

python manage.py runserver --noreload

python manage.py sql myproject > initial.sql

python manage.py test

python manage.py test purchaseplans > test_results.txt 2>&1

python mapper.py < dataset.csv | python reducer.py > output.txt

python myScript.py test.txt > test.out && mv test.out test.txt

python my_script.py < input.txt > output.txt

python myprogram.py $1 $2

python myprogram.py $@

python myscript.py

$ python myscript.py 1 foo bar baz

python myscript.py 12

python myscript.py | cat

python myscript.py test 'pbkdf2_sha256$12000$EkKZXYXv0adl$GZppRyXed3a0y1uZMBR/F8Mu/rnpsN+7atY4hZAwlrQ='

python myscript.py | wc -l

$ python parse_input.py $'1\n2\n'

python path/to/the/script.py

$ python print-warning.py 

python program01.py & python program02.py &

python py.py --l='[1,2,3,[1,2,3]]' -d "{1:'one',2:'two',3:'three'}" --tu='(1,2,3)'

python python_script.py filename

python runtest.py >& ~/into/reptest/runtest-all.out.$i

( python runtest.py 2>&1 ) | tee ~/into/reptest/runtest-all.out.$i

python sample.py

python sample.py --query myquery

python script.py --conf_dir=/tmp/good_conf

python script.py --debug --xls 001

python script.py /tmp/good_conf

python script.py 2>&1 | nc 127.0.0.1 8011

l=$(python script.py | python script2.py)

python scriptA.py && python scriptB.py && python scriptC.py && rsync blablabla

python setup.py build_ext --inplace

python setup.py install --prefix=/share/pythonLib

python test.py <( hadoop fs -cat inputfile.txt ) <streamingfile.txt 

python test.py --mode=

python withenv.py PYTHONPATH=. python scripts/doit.py

python yourscript 2> return_file

python.exe -c "import sys; print sys.argv[1:]" *.txt

python.exe path/to/script.py

>> echo "230-20-5" | python2.7 -c "exec(\"inp=raw_input()\nlst=[int(x)+5 for x in inp.split('-')]\nfor x in lst: print x\nprint \'the result is:\', sum(lst)\")" > out

SITE27=$(python2.7 -c "import site; print site.getsitepackages()[-1]")

python2.7 -u main.py > main.out &

python2.7 /home/nezap/webapps/bonzer/bonzer/apps/base/alert.py

python3 -m pdb /parent/folder/module_folder/__main__.py

python3 program.py | diff - compare_file.txt

pythonscript.py --in_delimiter $'\t' --in_file input.txt

pythonsh $pyth parameters

 q [exit-code]

$q -match "nothing to commit"

$q -notcontains "nothing to commit, working directory clean"

q = "30"

q ~ /[01459]/

qdbus org.freedesktop.ScreenSaver /ScreenSaver Lock

qmHandle -H$betreff

qmake -v | grep -m1 -o -P "\(Qt [^\)]+" | cut -d" " -f2

"qq": "printf '\\ec'\n"

qsh test.txt

qstat -Q

qstat -Qf queuename

for x in `qstat -u '*' | grep Eqw | awk {'print $1'}`; do qmod -cj $x; done

qstat | awk '$6 ~ "01/06" {cmd="qdel " $1; system(cmd); close(cmd)}'

qstat | grep -c my_username

qsub -W depend=afterok:$(qsub job.sh) analyze.sh

qsub -o /mypath/output.txt -e /mypath/error.txt submit_job.sh

qsub -t 1-3 job_script.sh

qsub -v Nlay=10,prefix=\"qwerty\" dump.sh

qsub -v Nlay=10,prefix='\"qwerty\"' dump.sh

qsub -v Nlay=10,prefix=\\\"qwerty\\\" dump.sh

qsub analyze.sh -W depend=afterokarray:427[]

qsub compute.job -v VAR1="$i",VAR2="$p"

qweyuioyuioyuio

qweyuioyuioyuioyuioyuio

singleLine=${singleLine//$'\r'/}

rackspace_canonize | rackspace_extract_public_ip

rackspace_canonize | rackspace_extract_status

rails generate model photo title:string album:references

raise 'Must run as root' unless Process.uid == 0

rake bleh:bar FOO="hello"

rake college:create\[demo\]

rake db:migrate

rake figaro:heroku

rake foo:bar

rake spec

$> random arg1 arg2

randx3 11 > /path/to/output

for folder in */; do rar a -m0 -r "${folder%/}.rar" "$folder"; done

rar rn out.rar files\finf1.jpg files\finf3.jpg

rarname.*.rar

rawler http://lambrecipes.ca > results.txt

rbenv install 1.9.3-p194

rd /s %systemdrive%\$Recycle.bin

rdesktop -r disk:bacon=$HOME/bacon host

read_from_pipe() { read "$@" <&0; }

read $i < <(mysql_exec "SELECT $i FROM orders WHERE order_id = $order")

read $sni

read $user

while read -a A; do echo ${A[1]}; done < file.txt

read -a arr <<<$line

read -a arr

read -a arr <<< "1 4 6 9 11 17 22"

read -a arr < <(grep line1 file)

read -a array < numbers.txt

read -a arrchar -d '' < <(fold -w1 t.txt | sort -u)

read -a databasesarray < <(dbs -d 123123 | awk '/db/{print $2}')

read -a header < smaller.txt

read -a myArray$i <<<"a b c"

read -a names <<< $myVar

read -a natc

while read -d '' -r file; do echo "$file"; printf -v name "%q" "$file"; echo "$name"; done< <(find -print0)

read -d'' -s -n1

read -d'\0' -a array < numbers.txt

$ read -ei "ls -l"; eval "$REPLY"

read -e -p 

read -ep "Add a Directory " add

read -e -p "City: " -i "$city" city

read -e -p "Glassfish Path:" GF_DIR

read -e -p "Please enter your name -> " -n 20 name

    read -n1 -p "File $file exists. Do you want to delete? [y/n] " delete

while read -n 1 SEAT; do {stuff}; done < seats.txt

< file tr -d '\0' | read -n 1 || echo "All zeroes."

read -n 1 x; while read -n 1 -t .1 y; do x="$x$y"; done

$ read -n10 -e VAR

read -p $'Please Enter the percent [30 between 100]\x0a The value is  Default = 80   :' scale_percent

read -p $'\e[31mFoobar\e[0m: ' foo

read -p "Cmd> " cmd && echo $'\e[A\e[5C'"${cmd}-append_something"

read -p "Cmd> "$'\e[s' cmd && echo $'\e[u'"${cmd}-append_something"

read -p "Continue? [y/n]: " yn < /dev/tty

read -p "Delete $file? (y/n) " input 2>&1

read -p "Enter ip address: " IP_ADDRESS

read -p "Please enter the location of this report (type 0 to exit): " -e -r filelocation

read -p "Which server do you want to know about: " var_server

read -p '^[[31mFoobar^[[0m: ' foo

read -p "`pwd -P`\$ " _command

read -p "mysql password: " PASS && ssh user@domain.com 'mysqldump -u mysqluser -p'$PASS' --databases foo | bzip2' > foo-dump.sql.bz2 ; PASS=""

read -p prompt

read -q "REPLY?This is the question I want to ask?"

read -ra arr <<<"$str"

read -rsn1

while read -r -u 3 line; do ...; done 3<${HOME}/.get_iplayer/tv.cache

read -r FIRSTLINE < filename

read -r _ numA _ numB < <(grep MemFree /proc/meminfo | tail -n 1)

read -r a < <(echo "test \n test"); echo $a

read -r cbuild < filename

while read -r f; do mv "$f" "${f//:/_}"; done <files.txt

while read -r file ; do cat "$file" ; done < file-names.txt

read -r identity

while read -r line; do declare  $line; done <file

while read -r line; do echo "$line"; done < file.txt

while read -r line; do eval echo "${line}"; done < inputfile | process

while read -r line; do sed -i "${line} d" ./file.txt; done < ./linenum.txt

read -r max min < <(awk 'NR==1{max=$3; min=$3}{if ($3>max) max=$3; if ($3<min) min=$3;} END {print max,min}' List.txt)

while read -r path; do echo "$path"; done <<<"$result"

{ read -r; read -r; program; } < inputfile.txt

read -r var 0<&3

read -r var < <(ssh remote "echo test; sleep 5") ; echo $var

read -sk

read -s -p "mysql password: " PASS && ...

read -s foobar

read -t 1 __response </dev/tty

read -t 10

read -t 2 <>/tmp/foo.pipe

read -t 3 variable < <( tail -f logfile.log | grep "something" )

read -t 5 -p "What is your name?"

read -t variable < <(command)

read ARG  </tmp/tempfile #only 1st line will be read

read BAR < <(bc -l <<< "$FOO / 100")

read DIR < file

read ENE <<<$(awk '{print $1}' file)

   read FINISH_TIME <<< $(cat '/proc/self/stat' | awk '{print $22;}') 

read IP CN < <(exec ifconfig en0 | awk '/inet / { t = $2; sub(/.*[.]/, "", t); print $2, t }')

read IP_ADDRESS

while read L; do grep -E -o "[0-9]{2}:[0-9]{2} (p|a)\.m\." <<< $L|head -1; done < cvs.txt

   (while read MD5SUM FILENAME; do grep -qis $MD5SUM CollectionB.MD5SUM || echo $FILENAME does not exist in CollectionB; done)<CollectionA.MD5SUM

   (while read MD5SUM FILENAME; do grep -qis $MD5SUM CollectionB.MD5SUM || echo ${FILENAME#\*} does not exist in CollectionB; done)<CollectionA.MD5SUM

read NEXT_PPID < <(exec ps -o ppid= "$ID")

read PID < <(exec ps -o ppid= "$ID")

read SITENAME

read VAR <<< "text"

read VAR < <(echo text)

read VAR1 VAR2 VAR3 < /dev/fd/63

read VAR1 VAR2 VAR3 < <(egrep "pattern" config-file.cfg)

$ while read a b; do if [ -z "$b" ]; then echo $a;fi;done <testfile

read a b c <<<"aaa bbb ccc"

read a b c <<<$(echo 1 2 3) ; echo "$a|$b|$c"

read a b c <<< $(echo "foo" | awk '{ print $1; print $1; print $1 }')

while read a b; do echo "$a $b"; done < count.txt

$ while read a b; do sed "s/^\"HostName.*$/\"HostName\"=\"$b\"/" template > $a; done < data

while read a ; do grep "$a" text1.csv >> text2.csv; done < text.csv

while read a; do while read b; do echo "$a, $b"; done < file2; done < file1

read answer < /dev/tty

read array[$i]

read choice

while read d _; do date -d @$d; done < input.txt

read dd1 && echo $dd1|cut -d'/' -f1 

while read f; do arr="$arr:$arr:$arr:$arr:$f"; done < /dev/urandom

while read f; do arr="$arr:$f"; done < /dev/urandom

while read f1 f2; do echo $(date -d @$f1) $f2; done < input.txt

while read file; do printf "rm -v %q\n" "$file"; done < cleaned_duplicates > script.sh

while read filename; do tar -xOf file.tar "$filename" | grep 'pattern' | sed "s|^|$filename:|"; done < <(tar -tf file.tar | grep -v '/$')

read foo

read foo bar <<<"1 2"

while read foo; do things; done < <(process substitution)

IFS=/; read genre artist album track

while read h n1 n2 n3 n4; do echo $h; sed -n -e "/^$h\$/{" -e n -e p -e q -e '}'  file1 ; echo $n1; echo $n3; sed -n -e "/^$h\$/{" -e n -e n -e p -e n -e p -e q -e '}'  file1 ;  done <file2

read header_line < headers.txt 

while read host; do echo "$host"; done < server.txt

read i < curr.lst

while read i; do echo $i; done < <(echo "$FILECONTENT")

read input </dev/tty

IFS=';'; while read ip others; do nc -zw3 "$ip" 80 && echo "$ip:80 => opened" || echo "$ip:80 =>  closed"; done < list.txt

 while read item; do rm "$item"; done < removelist

read key <&3

read l < <(echo "$l" | python script1.py | python script2.py)

read l < <(python script.py | python script2.py)

IFS=; read line

read line >| inputfile

while read line; do [ "$(ispell -l <<< "$line" | wc -l)" -gt 0 ] && echo "$line"; done

while read line ; do if [ -f "$line" ] ; then echo "$line" ; fi ; done < files.txt

while read line; do ./fileB.rb $line; done < fileA

while read line; do ./script "$line"; done < test.txt

a=""; while read line; do a="$a $line"; done < american.0; echo $a

$ while read line; do echo "$line" >>"${line:0:2}"; done <input.txt

while read line; do echo "$line"; done < myfile.txt

while read line; do echo $line; done < <(script.py $arg 2>&1)

while read line; do echo LINE: "$line"; done < <(echo "$x")

while read line; do echo LINE: "$line"; done <<< "$x" | sed -n ${N}p

while read line; do eval "echo ${line}"; done < iptables.save.file | /sbin/iptables-restore -v

while read line; do mkdir -p "$(dirname "$line")"; scp -p bill@lgrdcpvtsa:"$line" "$line";done < /home/bill/diff_tapes.txt

while read line; do mkdir -p "$(dirname "$line")"; scp -rp bill@lgrdcpvtsa:"$line" "$line";done < /home/bill/diff_tapes.txt

while read line; do mkdir -p "${line%/*}"; done < infile

while read line; do printf "$(echo -n $line | sed 's/\\/\\\\/g;s/\(%\)\([0-9a-fA-F][0-9a-fA-F]\)/\\x\2/g')\n"; done < input

read line <<< "other text"; printf '%s' "$line"

$(IFS=\n git-status -s | while read line; do printf '%s; ' "$line"; done)

read line < <(printf "other text"); printf '%s' "$line"

while read line; do python python_script.py -l "$line"; scp -P 10022 *.pdf localhost:path/to/put/files/; rm *.pdf; done < pdfURLs.txt

while read line; do ssh -n server_address "cd tmp_download_directory && rm -f *.pdf && python python_script.py -l $line" && scp server_address:tmp_download_directory/*.pdf /local/path/to/put/files/; done < pdfURLs.txt; ssh server_address "rm -f tmp_download_directory/*.pdf"

read lines words chars filename <<< $(wc x)

read mm < <(wc -l < "$sample")

read month day < <(date -d "2 days" "+%m %d")

$ read myVariable 2> errorFile < myFile

read newstring <<< $newstring

$ while read num line; do echo "$line"; done < inputfile

read number || break

read oldrev newrev refname

read options

read part1 part2 <<< $(echo "9191234567" | sed 's/^\([0-9]\{3\}\)\([0-9]\{7\}\)$/\1 \2/')

read sni

read text && echo $text | bc -l

while read thefile; do unzip -q /path/to/zipfile "$thefile"; done <thetxtfile

while read u f; do usr="$usr\n$u"; fil="$fil\n$f"; done <<< $(ls -la | awk '{print $3 " "  $9}')

read undeletefile

read user

read var1 < infile

read var1

{ read var1 ; read var2 ; } <data

read var1 var2 < <(python file.py)

while read vl ; do grep -w "$vl" APL_vs_HS.tab || echo "-" ; done < 1

while read w n; do echo -n ${w:(($n-1)):1}; done < filename

while read x; do echo "$x" | nc host port; done < textfile

while read x; do echo -n "$x: " ; expr $(open_file $x | wc -l) / 4 ; done

while read x; do kill -9 $x; done

read: 1: Illegal option -d

readArgs "$@"

readFile.sh info

readarray -O 1 -t files < <(exec find ...)

readarray -t DESCRIPTION < "test1.txt"

readarray -t TIDs < my_ID_file

readarray -t arr < <(find . -type f)

readarray -t foo < <(echo 'foo bar'; echo; echo; echo baz)

readarray -t rpmarr < <(exec rpm -Va)

readarray -t service_array < <(exec service --status-all | sed 's|.* ||')

readarray -t usersHomeFiles < <(find "$user_home")

readarray a < test.text

readarray array <( foo )

readarray ary   # new in Bash 4

readelf --debug-dump=info "${1%*.cpp}.o" > "${1%*.cpp}.txt"

readelf -S ELF_Binary | awk '$2==".plt" {print $2,$4,$5,$6}'

readelf -h /lib/libuuid.so.1.3.0

"readline arguments"

$TARGET=$(readlink "$LINK")

readlink -f

PROGUARD_HOME=$(readlink -f $(dirname $(readlink -f "$0"))/..)

SCRIPT_DIR=$(readlink -f $(dirname ${BASH_SOURCE[0]}))

readlink -f "$@"

readlink -f "$SOMEPATH"

readlink -f $Somevar

readlink -f /proc/$$/fd/1

readlink -f `dirname $0`

readlink -f bar.txt

readlink -f relative/path/to/file

absolute_path=$(readlink -m /home/nohsib/dvc/../bop)

outputfile=$(readlink /proc/$$/fd/1)

readonly -f functionName

readonly DATA=/usr/home/data/file.dat

readonly readonly_var="foo"

SCRIPT_PATH=$(realpath ${BASH_SOURCE[0]})

realpath -z 'oneword' 'two words' | xargs -0 find

recode ibmpc..latin1 script.sh

recode ibmpc..latin1 your.sh

 red@gmail.com;red1@gmail.com;red2@gmail.com

redis-cli --raw llen some_list | awk '{ print $1 }'

 redis-cli KEYS 'session.*' | awk '{printf "EXPIRE %s 60\n", $1}' | redis-cli > expire.log

redis-cli | cat

reg add HKCU\testfolder /t REG_EXPAND_SZ /v Stokrotka /d ^%systemroot^%\system32

reg query "HKEY_LOCAL_MACHINE\Software\Microsoft\Internet Explorer" /v version | find "version"

reg query "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\WINWORD.EXE" 

reg query "HKLM\System\CurrentControlSet\Control\Session Manager\Environment" /v PROCESSOR_ARCHITECTURE

reg query "HKU\S-1-5-19"

regCmd = "regedit.exe /E """ & regFile & """"

regex = "AB([^AB]|B|[^B]A)*BA"

ofile2=$remapR.nc

remote_user: test_user

$remove.sh "main"

removed temporarily to avoid confusion

ren ?_result.bak ?.txt

ren foo.txt foo-%RANDOM%-%RANDOM%.txt

ren foo.txt foo-%RANDOM%.txt

rename - '' ./-*

$ rename -- -- - *.mkv

rename -f 's/_/-/g' *_*.mat

rename -n '$c++; s/^(.{4}).*/sprintf("%s%04d", $1, $c)/e' $(awk '{print $2}' YOUR_OWN_FILE)

rename -n '$c++; s/^(.{4}).*/sprintf("%s%05d", $1, $c)/e' [A-Z][A-Z][A-Z]_*

rename -n -e 's/_.*_/_/'  *.png

rename -nv 's,.*(\d{3}).*,$1,' *

rename -n "s/($pattern).*?\.$ext$/\$1.$ext/" *.$ext

rename -n 's/IMG_([0-9]*)\.jpg/$1/; $_="IMG_".substr("000" . ($_-1067), -4).".jpg"' *.jpg

rename -n 's/^/1-/' *.mp3

rename -n 's/_\d+(\.[a-z0-9A-Z]+)$/$1/' *

rename -n 's/_temp\.txt$/.txt/' *_temp.txt

rename -v '%::new=(quick=>"slow",brown=>"red");s/(quick|brown)/$::new{$1}/g' *

rename -v 's/quick/slow/g;s/brown/red/g' *

rename '.244' '' *.244

rename .dat .mp3 *.dat

rename .ext .otherext *.ext

rename 0000 000 F0000*

rename 51fdda 2c3cd *tokudb

rename ABC XYZ *.dat

rename "G:\AuthorsList\AuthorsList_New.mdb" AuthorsListCopy.mdb

rename _ . *.jpg

rename _1 _ *.gif

rename _foo _bar _foo*.php

rename dev.example.com.cfg prod.example.com.cfg *.cfg

rename linux_ '' linux_*.mp4

rename 'old' 'new' 'data-source'

rename 's%ABC%DEF%g' ...

rename 's/ //g;s/.lit.txt$/.txt/' *.lit.txt

rename 's/ \[720p\]//g' ./*

rename 's/[0-9]{14}//' CombinedReports_LLL-*.csv

rename "s/$dir\/[0-9]{8}/$dir\/$dir/" $dir/*

rename 's/%([0-9A-Fa-f]{2})/chr(hex($1))/eg|s/\s/_/g|s/-\(.*\)//' *

rename "s/($pattern).*?\.$ext$/\$1.$ext/" *.$ext

rename 's/(\d+)/sprintf("%03d", $1)/e' *.pdf

rename 's/(\d{2})-(\d{6})\.jpg/abc-$2-$1.jpg/' *.jpg

rename 's/-[0-9]+//' *.tedx

rename 's/-[^-]+\.jpg$/.jpg/' *.jpg

rename 's/---/-/' *---*

rename 's/-foo-bar//' *-foo-bar.txt

rename s/0000/000/ F0000*

rename 's/ABC/XYZ/' *.dat

rename 's/\.(?![^.]*$)/_/g' '{}'

rename 's/\.(?=[^.]*\.)/_/g' '{}'

rename 's/\.//;' .*

rename 's/\.244//' *.244

rename 's/\.ext\z/.otherext/' *.ext

rename 's/\s*-\s*/-/g' *.doc

rename 's/\s\([^\)]+\)//' *.*

rename 's/^[0-9]*-//;' *

$ rename 's/^#//' *

rename 's/^(\d+)/5000000+$1/e' *.jpg

rename 's/^.* (.*\.csv)$/$1/' *.csv

rename 's/^.//' `ls -d .*`

rename 's/^0//' 0*

rename 's/^file\.([0-9]{4})-([0-9]{2})-([0-9]{2})\.txt$/file_y$1m$2d$3.txt/' *

$ rename 's/^image//' image*.jpg

$ rename 's/^image0+//' image*.jpg

rename 's/^linux_//' linux_*.mp4

rename 's/_.*?_/_/' file_*

rename 's/_\d+(\.[a-z0-9A-Z]+)$/$1/' *

rename 's/ab$/SD/' *.xml.ab

rename 's/document\.(\d\d)\.?(\w+)?(.txt)/"docs $1".($2 && " - $2").$3/e' document.*.txt

rename "s/mp3\?.*/mp3/" *.mp3*

rename 's/phonecalls/calllog/;s/\.zip$/.tsv/' /data/work/files/*.zip

rename 's/sink-//' *files

rename 'y/\W/_' *

renice -n 1 $$

replace file

replace file

replace "string 1" "string 2" -- *.html

replace string "string"$'\n'"${THIS}" file.txt

replace_path PATH /usr/bin /work/bin

replace_with = "this should be \\\\non two lines"

replace_with = "this should be\non two lines"

 repo sync >log 2>&1

reptyr -s PID 

req.session.co = req.headers['req.session.co'];

require 'activerecord'

require 'irb/completion'

require 'rtf' 

reset

(response != "Y") && (response != "N")

response_time = `ping -c 1 www.pintile.com | tail -1| awk '{print $4}' | cut -d '/' -f 2`

restartPortal.bat MyUser MyPassword

result += final

result = $(echo 'command' <&${bkgndProc[0]})    ### Doesn't work for me

$result = `sed 's\@^\\([^;]*\\);$id_play;\\([^;]*\\);\\([^;]*\\);\\([^;]*\\);\\([^;]*\\);\\([^;]*\\);\\([^;]*\\)\$\@\\1-$id_play-\\2-\\3-\\4-\\5-\\6-\\7\@g;tx;d;:x' $input`;

$result = `su SomeUser ./dothis.php 2>&1`

result is C

result.returncode

result:9

return "$LINENO"

return 0;

return perl -e'use Regexp::Common qw/net/;$ip=shift;if ($ip =~ /$RE{net}{IPv4}/){exit 0}else{exit 1}' "$Address";

zone=$(rev <<< "$zone")

rev file | cut -d- -f2- | rev

rev filename | sed 's/;/-;/' | rev

revcut "$(cat filename)" start end

revcut "some string" start end

revision:      1

$ rgrep "taxes" .  

rhc configure-app -a TestProject20140324192518 --deployment-type binary

r'href="((?:\.\./)+external\.html\?link=)([^"]+)"'

\right\right\

$ rlwrap -a -- redis-cli 

rm [^IN]*

rm $(<file.txt)

rm $(<list.txt)

rm $(echo abcd)

rm "$(grep -l foo <<< "$(</my/file.list)")"

$ rm $(ls | grep p_ | xargs echo)

$ rm $(ls | grep p_)

rm $0

rm $@.tmp

rm "$f"

cmd_output=$(rm "$file" 2>&1)

rm $file

for i in $(<removable-files.txt); do rm $i; done;

    rm $i

rm "$line"

rm $urls

rm ${LOG}.tmp*

rm *

rm *\'*

rm *.txt || echo "ERROR" >&2

rm *3*

 rm *_web.* *_thumb.*

rm -- "$0"

rm -- "$web_dir/three_days_ago/"*.gif

rm -- --testings.html

rm -- -d -f2

rm -- -filename

rm -- -myfile.txt

rm -R $(ls -lt | grep '^d' | tail -1  | tr " " "\n" | tail -1)

\rm -f $(<file.txt)

rm -f "$tmpfile"

rm -f "$tmpfile"

rm -f *~

rm -f -- "${inactive_files[@]}"

rm -fr -- foo.js FOOBAR bar.json fubar/ .foo/ .baz

rm -fr XYZ

rm -fr XYZ/*

rm -f XYZ/*

rm -f `grep 'Failure' ./*.log | cut -d: -f1 | uniq`

rm -f `grep -m 1 'Failure' ./*.log | cut -d: -f1`

 rm -f temp.files;ls -1 *.log > temp.files; cat temp.files | sed -r "s/(.*)-[0-9]{4}(-[0-9]{2})+\.log/cat \1* >> \1$(date  +"-%Y-%m-%d-%H-%M").log/" | uniq | sh; xargs rm -rf < temp.files; rm -f temp.files

$ rm -f test.txt 2> /dev/null

$ rm -f test.txt 2>&-

rm -f {100..150}     # -f would ignore nonexistent files, never prompt

rm -i -- *\ *

rm -r $newBaseDir/Data/NewDataCopy

rm -r -- "$DIR"*

rm -rf $(echo file.war | sed 's/\.war$//')

rm -rf $(find . -type f -exec grep -l 'STRING' {} \;)

rm -rf $(find /home/ -name '*.mp3')

rm -rf $(sed 's/\.war$//' <<< "file.war")

rm -rf $conexiuni

rm -rf "${OLDPWD}"

rm -rf "${file}"

rm -rf *

rm -rf*

rm -rf -- "$(pwd -P)" && cd ..

rm -rfi *

rm -rf .git

rm -rf /Users/[username]/Library/Caches/Google/Chrome/Default/Cache/

rm -rf /Users/[username]/Library/Caches/Google/Chrome/Default/Media\ Cache/

rm -rf /etc/bash_completion.d/git

rm -rf /etc/rvmrc /etc/profile.d/rvm.sh /usr/local/rvm

rm -rf '/path/*'

rm -rf /path/to/your/folder

rm -rf /var/some/dir/*

rm -rf _folder1

$ rm -rf abc.log.2012-03-14 abc.log.2012-03-27 abc.log.2012-03-28

$ rm -rf abc.log.2012-03-{14,27,28}

$ rm -rf alpha_1

rm -rf dir1 dir2 dir3 ...

rm -rf dir1; rm -rf dir2; rm -rf dir3; ...

rm -rf mCSS

rm -rf xyzdir*

  rm -rf yo-2

rm -rf {1000..12000}

rm -rv dir | wc -l

rm -r /usr/include/...

rm -r `find -type d -iname .svn`

rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1

rm -r folder-name

rm -vf "$Doomed"

rm ./--1355509766.jpg

rm ./--reporter=test

rm ./-d ./-f2

rm ./-myfile.txt

rm ./server -r

rm /data/property/persist.this.is.my.property && reboot

rm /home/user/Documents/Exercise/

  rm /home/user/Documents/Exercise/*

$ test='One `rm /some/important/file` Three'

rm /tmp/bash_stack_trace.*

rm ??????*

rm SVM*

rm `ls -t | tail -n +6`

rm `ls -t1 | head -n 5`

 rm `ls | grep -v ".h"`

rm a-*[1-4,6-9]00.dat

rm anotherdirec/*

rm directorytoremovefiles/files

rm "file with spaces.txt"

$ rm file.txt 2> /dev/null

rm foo || { echo "File removal failed"; }

rm noreply-unsch-*

$ rm p_*

rm subdir/file ### /some/dir

$ rm tempfl.txt 2> /dev/null

 $ (rm test; sed 's/XXX/printf/' > test) < test

$ rm test.txt 2> /dev/null

$ rm test.txt 2>&-

$ rm xy_pipe

rm {100..150}

rm: /var/tmp/SFTP_BATCH_FILE is a directory

rmbut a b c

for dir in lib bin include; do rmcomm "$dir"; done

rmdir --ignore-fail-on-non-empty $newBaseDir/Data/NewDataCopy

ro.build.version.sdk=10

robert dylan - marketing

robert dylan  marketing

robocopy /mov test a:\programs sample.exe

robocopy c:\source\ c:\destination\ *.png *.gif /s

robocopy source destination /MT:25 /NP /NFL /NDL

roll.sh | tee -a logfile.text

numIn=$(romanConvert params)

root ALL=NOPASSWD: ALL

root@egg-v3:~# su - some_user_name -c env | grep PATH

rootcmd -s sh -c "find . -type f | grep '|' | xargs rename '|' '!'"

ros_apple bananas_go_while_197815:123.0 monkey_110_worst_forever thestar

route | grep $dest | cut -d \  -f 2

INTERFACE=`route | grep '*' | awk '{print $8}'`

rpl -pR "$@" '' *

rpm --verify apache2 > tempfile && awk -vrc=$? '{printf "%s %s %s", $1, $NF, rc}' tempfile

rpm -e --nodeps `yum list installed | grep rpmforge | awk '{ print $1 }'`

basearch=$(rpm -q --qf "%{arch}" -f /etc/$distro)

rpm -q --qf "%{name}" -f /etc/redhat-release

releasever=$(rpm -q --qf "%{version}" -f /etc/$distro)

rpm -qa | grep -qw glibc-static || yum install glibc-static

rpm -qa | grep openssh-5 | xargs -d $'\n' rpm -ql | xargs -d $'\n' cp -t myfolder

rpm -qf /etc/*-release

RELwg=$(rpm -qi wget | awk -- '/^Release/ { print $3 }')

rr.sh file1.txt file2.txt

rsh $host "module load turbovnc-1.0.0; vncserver -otp 2> tmp_vnc.log"

rsh -l user machine "echo \"PORTS = 123\|456\|789\" >> conf.cfg"

$ rsh -l user_name windows_host_name "C:\path\to\script.bat"

$ rsh -l user_name windows_host_name "C:\scan.bat"

rsync [OPTION]... SRC [SRC]... DEST

rsync [options] source_dir dest_host:dest_dir

rsync *.jpg hostname:yourdir

rsync --bwlimit=500  ......

rsync --cvs-exclude projectdirectory/* ../projectdirectorydestinationfolder/

rsync --del -az -e 'ssh -i mycrt.crt' /home/gnutt/backup/ me@offisite:backup 9> /dev/null 1>&9 2>&1 | logger -i

rsync --delete -avz -e ssh USER@SERVER:'/server/directory/' '/traget/directory/.'

rsync --delete -a /Users/ajay/Documents/ServerObserverRepo/ /WebServer/Documents/ServerObserver/

rsync --delete -r -u /home/user/music/flac/* /media/MUSIC/flac

rsync --dry-run --existing --recursive remote:/directory/ local:/directory/

rsync --exclude='.*' ...

rsync --exclude='B/' --exclude='C/' . anotherhost:/path/to/target/directory

rsync --exclude cache/ ....

rsync --files-from=files.txt --remove-source-files src dest 

rsync --ignore-existing --recursive /src /dst

rsync --list-only username@servername:/directoryname/

rsync --progress -avhe ssh /usr/local/  XXX.XXX.XXX.XXX:/BackUp/usr/local/

rsync --progress -rvze "ssh -i/path/to/ssh_private_key" my_user@myserver:/root_folder folder/

rsync --progress -r /Volumes/foo /Volumes/bar

rsync --progress -r /Volumes/foo /Volumes/bar | awk '{printf "."}'

rsync --relative --files-from file-list.txt /home /home/dest

rsync --remove-source-files ${USER}@${HOST}:/files/*.txt /tmp/ftpfiles/

rsync --rsh=rsh

rsync --stats --compress --recursive --times --perms --links --delete --exclude ".git" --exclude "wp-content/upload" --exclude "wp-content/uploads" --exclude "wp-content/gallery" /path/to/someDir/ /path/to/otherDir

rsync --update --recursive local:/directory/ remote:/directory/

rsync --verbose  --progress --stats --compress --rsh=ssh --recursive --times --perms --links --delete --exclude "*bak" --exclude "*~" /repository/* $DEV_SERVER:$REMOTE_DIR

rsync -FF ....

$rsync -PEav --delete --exclude '.DS_Store' ~/Desktop/ me@remote.example.com:~/rsycn-test

$rsync -Pav ~/Desktop/ me@remote.example.com:~/rsyc-test

rsync -R src/prog.js images/icon.jpg /tmp/package

rsync -R test/withintest/go.rb test2

rsync -a --exclude='*' --include=needthis.txt me@server:/data/stuff/. .

rsync -a --max-size=100kB sourcedir destdir

$ rsync -a --progress --remove-source-files src/test/ dest

rsync -a --progress --size-only --exclude=".DS_Store" --exclude=".swp" --exclude=".Trash"  --exclude="logs/*" --exclude="xmlogs/*" /Users/Devric/Documents/notes/ /Volumes/backup/

rsync -aFF origin/ destination/

rsync -a -c --existing /source/ /destination/

 rsync -a -e ssh user@host:/apps/data pathToLocalDataStore

rsync -aqv -HAX --delete $BACKUP_SRC $BACKUP_DST$DAY

rsync -arvz -e ssh user@server:/myFiles localhost:/DirToSave 

rsync -av $folderToBeMoved/"EyeTV Archive"/*.eyetv $newfoldername --exclude="Live TV Buffer.eyetv" && rm -rf $folderToBeMoved

rsync -av --delete --filter=':- .gitignore' \mysite\ezpublish_git\* john@local.mysite.co.uk:/usr/local/www/apache24/data/trunk/

rsync -av --delete -e 'ssh -i ~/.ssh/apache-rsync apache@server' ./ /website

rsync -av --delete remote_folder local_folder | grep -E '^deleting|[^/]$'

rsync -av --exclude '*min.min.js' parent_dir dest_dir 

rsync -av --exclude=".*" src dest

rsync -av --exclude=/dir1 /tmp/src/ server:/tmp/dst/

rsync -av --exclude /u01/oracle/test/product/11.2.0.3/dbs --exclude /u01/oracle/prod/product/11.2.0.3/network source/destination/ /u01/oracle/prod/product/11.2.0.3/ /u01/oracle/test/product/11.2.0.3/

rsync -av --exclude folder1 --exclude folder2 --exclude file1.txt source destination

rsync -av --exclude='path1/to/exclude' --exclude='path2/to/exclude' source destination

rsync -av --include='*.flv' --include='*.mp4' --exclude='*' /source /destination

rsync -av --include='*.txt' --include='*/' --exclude='*' dir1/ dir2/

rsync -av --progress sourcefolder /destinationfolder --exclude thefoldertoexclude

rsync -avK --exclude='/foo' --exclude='/bar' src/ dst/ ; rsync -avK --include='/foo' --include='/bar' --ignore-existing src/ dst/

rsync -avK --exclude='/foo' src/ dst/ ; rsync -avK --include='/foo' --ignore-existing src/ dst/

rsync -avL --progress -e "ssh -i /path/to/mykeypair.pem" ~/Sites/my_site/* root@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com:/var/www/html/

rsync -ave ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO

rsync -av -f"+ */" -f"- *" /path/src /path/dest/

rsync -avh /home/abc/abac /backups/ddd < /dev/null &

rsync -avibu --ignore-existing /home/xyz/public_html/photo/ /home/ABCDE/public_html/photo

rsync -avni /path1/ /path2

$ for d in 2010* ; do rsync -avn ./$d/ ./Merged/ ; done

rsync -avn user@server.com:/directory/ /local_directory/

rsync -avrc --delete --exclude somedir source destination

rsync -avrc -e -i `find . -type f -mtime -2h` @${DST}:/var/backups/

rsync -avr -e "ssh -l user" --exclude 'fl_*' ./bench* remote:/my/dir

rsync -avz --include "*/" --include "*.py" --exclude "*" /tmp/level1 /home

rsync -avz --remove-source-files /local/dir/*.jpg user@ip:/remote/dir 

rsync -avz --rsh=rsh $(LOCALPATH)/$(FILE) $(USER)@$(HOST):$(DIR)

 rsync -avz -e ssh --delete /stuff/ user@desktop ip:/home/laptop/stuff/

rsync -avz -e "ssh -i /home/thisuser/cron/thishost-rsync-key" remoteuser@remotehost:/remote/dir /this/dir/

rsync -avze "ssh -o IdentityFile=/path/to/file" /sync/here/ root@remotehost:/to/here

rsync -avz -e 'ssh -p 8682' rsync@1.2.3.4:/rsync /rsync

rsync -avzn --list-only --include 'company1/' --include 'company1/unique_folder1/***' --exclude '*' -e ssh user@server.com:/path/to/old/data/ /path/to/new/data

rsync -avzn --list-only --include-from '/path/to/new/exclude.txt' --exclude '*' -e ssh user@server.com:/path/to/old/data/ /path/to/new/data

rsync -avz B/* A

rsync -avz username@ipaddress:/path/to/backup /path/to/save

rsync -avz ~/path/to/Directory1/ ~/path/to/Directory2/

$ for d in 2010* ; do rsync -av ./$d/ ./Merged/ ; done

rsync -av ./Sites/depot root@my-server-ip:/sites/depot

rsync -av ./Sites/depot/ root@my-server-ip:/sites/depot/

$ rsync -av /path/src/ /path/dest/ --include \*/ --include \*.jpg --include \*.gif --exclude \*

rsync -av /view/pore/Personel\ Address.txt /home/myserver/Personel\ Address.txt

rsync -av from/ to/ --exclude=file_to_exclude

rsync -av host:a?long?filename /tmp/

rsync -av remote_host:'$(find logs -type f -ctime -1)' local_dir

rsync -av user@server.com:/directory/ /local_directory/

rsync -a ./src/ /usr/include/foo/ --include \*/ --include \*.h --exclude \*

rsync -a foo bar

rsync -a foo/ bar

rsync -a mars: higgs: --exclude='*.conf'

rsync -a mars: higgs: --exclude-from=rsync_exclude.txt

rsync -a ~/.[^.]* /path/to/backup

rsync -e ssh "$f" $destination:$destinationFolder/"${baseFileName// /\ }.lck"

rsync -e ssh -avz --delete-after /path/to/stuff user@slave:/path/to

rsync -e "ssh -i ... -F ..."

rsync -e "ssh -o BatchMode=yes -i /var/www/.ssh/id_rsa" /path/to/test/file.txt remotehost:/path/to/test/file.txt

rsync -e ssh root@remote.com:/path/to/file :/path/to/second/file/ /local/directory/

rsync -hxDPavilyzH source/ user@remote:/target/ --stats

rsync -m -r --delete-excluded --include-from=<patternfile> --exclude=* / dest/

rsync -n -avrc /abc/home/sample1/* server2:/abc/home/sample2/

rsync -pr "/var/repo/released/$project" "/var/www/released/$project"

rsync -r --exclude-from 'exclude_list.txt' src dst

$ rsync -r --existing B/ A/

rsync -r --include-from=<patternlistfile> --exclude=* --delete-excluded / dest/

rsync -r --include-from=<patternlistfile> --exclude=* --delete-excluded /some/dir/ dest/

rsync -rP --existing source/ user@remote:target/

rsync -rav -e ssh --include '*/' --include='*.pdf' --exclude='*' server:path localpathpath

rsync -r -e ssh ./test/sub1/subsub1/ me@my-system:~/test/sub1/subsub1

rsync -rlptvz -s "$localpath/" -e "ssh" "localhost:$remotepath/"

rsync -rtvz --rsync-path='sudo -u user2 rsync' /path/to/local/folder server1:/path/to/remote/folder

rsync -rv --delete --include=foo.txt '--exclude=*' /home/user/ user@remote:/home/user/

rsync -rv --exclude=.git demo demo_bkp

rsync -rv --inplace --existing /path/to/dir/b/* /path/to/dir/a

rsync -rva -e 'ssh -l user@mail.com' /directory/that/is/local host.domain.com:/another/remote/directory

rfiles=$(rsync -rvlpogt /svntags/tags/ /var/www/html/) && $(rsync -rvlpogt /svnbranch/branches/ /var/www/html/)

rfiles=$(rsync -rvlpogt /svntags/tags/ /var/www/html/ && rsync -rvlpogt /svnbranch/branches/ /var/www/html/)

rsync -rvz --chmod=ugo=rwX -e ssh source destination

rsync -rvz -e 'ssh -p 2222' --progress --remove-sent-files ./dir user@host:/path

edmund@cat:/images/edmund/gallery$ rsync -rzvO --exclude='.svn' edmund@dog.com:/images/edmund/gallery/ ./ 

rsync -r /foo /baz

rsync -uav 10.30.3.2:/var/log/messages /path/to/store/messages.10.30.3.2

rsync -uvma --include="*/" --include="templates/**.html"  --exclude="*" $html_all_dir $html_dir

$ rsync -u src dest

rsync -va "$@" /var/sync_dir/ $transfer_to:/var/sync_dir --progress

rsync -va --exclude='Frisnuk/plugins/dynmap/**' --exclude='Frisnuk/orebfuscator_cache/**'  ...

rsync -vaq /var/tmp/files/* /var/www/html/livevideo-stream/

rsync -vaz --exclude "*.txt" /path/to/source/ /path/to/destination/

rsync -va ~/from/ ~/to

rsync -vzrP --delete --exclude '.git' --exclude 'awstats-icon' --exclude 'awstatsicons' --exclude 'icon' ~/Sites/path/to/sitename/ user@server.com:/path/to/sitename/

rsync -zarv  --exclude="*" --include="*.sh" $from $to

rsync -z -e ssh user@example.com:/var/www/ /var/www/

rsync -zvr --include="*.sh" --exclude="*" $from/*  root@$host:/home/tmp/

rsync . | python rsf.py | xan -0 stat -c '%i'

rsync ... --out-format="" ... | grep -v -E "^sending|^created" | tr -s "\n"

rsync ... | awk '{ $1=$2=$3=$4=""; print substr($0,5); }' >output.txt

rsync A host:B

(rsync foo bar &)

rsync ssh --blocking-io user@XX.XXX.XXX.XX:/test/ /test

rsync test.sql test2.cpp myUser@myHost:path/to/files/synced/

rsync://rsync.macports.org/release/tarballs/ports.tar [default]

ruby -00 -e 'p = "password = *"; re = Regexp.new(Regexp.escape(p)); while gets; puts $_ if re =~ $_; end' file

ruby -C /home/my_home test.rb

$ ruby -ane 'BEGIN{a=Hash.new};a[$F[0]]="#{a[$F[0]]} #{$F[1]}"; END{ a.each{|x,y| puts "#{x}#{y}" }}' file

ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"

ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"

ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"

ruby -e "$(wget -qO - 'https://raw.github.com/mxcl/homebrew/go')"

ruby -e '$stdin.readlines().each_slice(7).entries.reverse.each { |b| puts b; }' < file

ruby -e 'ARGF.each {|l| puts (" " * 4) + l}' test

$ ruby -e 'Dir["**/*@x2.png"].each{|x| File.rename( x, x.sub(/@x2/,"@2x") ) }'

ruby -e 'File.read(ARGV.shift).scan(/(?<=<strong>).*?(?=<\/strong>)/m).each{|e| puts "----------"; puts e;}' file

ruby -e 'File.write(ARGV[0],File.read(ARGV[0]).gsub(/(--\s--\sDumping\sdata\sfor\stable\s`(?:cache_\w+|cache)`.*?)(?=(?:--\n--\s+Table\sstructure\sfor\stable\s`[^`]+`\s*\n--))/m,""))' $1

ruby -e 'f = File.open(ARGV[0]).read; File.open(ARGV[1]).readlines.map{|l| l.split}.each{|a| f.gsub!(a[0], a[1])}; puts f' aaa.txt bbb.txt

ruby -e "print File.read(ARGV.shift).unpack('U*').map{ |i| '\u' + i.to_s(16).upcase.rjust(4, '0') }.join" your_file

ruby -e "puts ARGV.shift.unpack('U*').map{ |i| '\u' + i.to_s(16).upcase.rjust(4, '0') }.join" "your string"

ruby -e "puts ENV['Clear Workspace']"

ruby -e 'system "start text_file.txt"'

ruby -e 'x = File.read(ARGV[0]); File.open(ARGV[1]).readlines.map{|l| l.split}.each{|a| x.gsub!(a[0], a[1])}; File.write(ARGV[0], x)' aaa.txt bbb.txt

$ ruby -i.bak -F"," -nae '$F[2].reverse! if $F[2];print $F.join(",")' file

ruby -ne 'BEGIN{@head=[];@data=[]}; @head << $1 && @data << $2 if $_.match(/^---(\S+): (\S+)$/); END{puts @head.join(",");puts @data.join(",")}' $FILE

$ ruby -ne 'puts "#{$_.chomp} #{ARGF.filename}"' file1 file2

$ ruby  -ne 'puts $_.scan(/Min\s+(.[^\s]*)/)' file

ruby <main.js -pe'$_.gsub!(%r{/\*>\s*(.+?)\s*\*/}) { File.read($1) }'

ruby -pi.bak -e '$_.gsub(/(\d{2}):(\d) --> (\d{2}):(\d{2}):(\d{2}),(\d{3})/) { "#{$3}:#{$4}:#{$5.to_i - 2},#{$6} --> #{$3}:#{$4}:#{$5},#{$6}" }' *.srt

ruby -pi  -e 'print "# " if $_ =~ /^RAILS_GEM_VERSION/' config/environment.rb

ruby -rjson -e 'data = JSON.parse(STDIN.read); exit (data["result"].length > 0)'

ruby -rrubygems myscript.rb

ruby -rubygems myscript.rb

ruby -run -e httpd . -p 9090

ruby -r "./test.rb" -e "TestClass.new.test_function 'hi'"

ruby -r "./test.rb" -e "TestClass.test_function 'hi'"

ruby -r webrick -e "s = WEBrick::HTTPServer.new(:Port => 9090, :DocumentRoot => Dir.pwd); trap('INT') { s.shutdown }; s.start"

ruby -x -I/home/my_home test.rb

ruby -x /home/my_home test.rb

ruby -x test.rb

ruby /path/to/file.rb

ruby 2.1.1

ruby C:\Users\Username\Desktop\Matz.rb

ruby SaveAllDatabases.rb 192.168.0.15 1024 -r '#0-D' --non-interactive

ruby boundinboxscript.rb FileA.eps FileB.eps xywh

for i in *.csv; do ruby importer.rb data_part01_aa.csv; done

ruby my_code.rb | tee file

ruby options %*

ruby overlay_test.rb | tail -n 1 | sed -e 's/.*assertions, //' | tee >(say)

ruby overlay_test.rb | tail -n 1 | tee >(say)

ruby script.rb /rootdir 2013 searchstring1 searchstring2 searchstring3

$(ruby test.rb)

ruby_script.rb

run cat ${(q)filename_with_spaces}

run "cat ~/rvm-installer.sh | bash -s stable --ruby >out.log"

run "cat ~/rvm-installer.sh | bash -s stable --ruby >out.log 2>&1"

run "cat ~/rvm-installer.sh | bash -s stable --ruby >out.log 2>err.log"

 run "find #{current_release}/migration/ -name *.sql -print0 | xargs -0 -I file mysql -hlocalhost -u#{db_username} -p#{db_password} #{db_database} < file"

run "find #{current_release}/public/static/css/ -name '*.css' -print0 | xargs -0 sed -i -E 's@(\.\.\/)+(images|static|img)@#{images_cdn}@g'"

run mytest.tcl -opt1 foo -opt2 bar

run visudo

$ run yourCommand

run! if __FILE__==$0

run.py -n test_app; run.py -n test_delete_app; run.py -n test_create_app

run.sh | tee log.txt 2>&1

runOnRecieve = /path/to/bash/file

run_cmd package upload -c "$CLUSTERS_PKG"

run_cmd "package upload -c '$CLUSTERS_PKG'"

run_python.sh

run_sql.sh param1 param2 '"param 3"'

runas /user:computername\useraccount mkdir thedirtomake\somesubdir\

rundll32    shimgvw.dll    ImageView_PrintTo /pt   xxx.png   "printer name"

rundll32.exe shell32.dll,Control_RunDLL inetcpl.cpl,,4

current_runlevel=$( runlevel | cut -d' ' -f2 )

runonce 10 echo "hello"

rvm 1.9.2-p290@portal do bundle exec rake spec

rvm cron setup

rvm gemset pristine

rvm get head --auto

rvm get stable --auto-dotfiles

$ rvm install 1.9.3 --with-gcc=clang

rvm install ruby-2.1.1

rvm use . --install

rvm use 1.9.3

rvm use 2.0.0

rvm use default

rvm use ruby-2.1.1

rvm use ruby-2.1.1 --default

rvm wrapper ruby-1.9.3-p125 ext_1.9.3 bundle

rvmsudo /usr/local/rvm/bin/rvm get head --auto-dotfiles

app_name=${app_name%$'\r'}

s>\|

s = spawn './myScript.sh', [url, title]

s "somestring"

 's#<?php /\*\*/ eval(base64_decode("aWY[^>]*?>##g'

's#<a[ \t][ \t]*href[ \t]*=[ \t]*".*search[ \t]*=[ \t]*\([^"]*\)">#&\1</a>#'

's#"absolute/path/to/your/lib/"#/var/www/twiki/lib/#'

"s#\(.*\)/.*#\1#"

"s#(/[^/]{3})[^/]*#\1#g"

s#a#c#

s+AAA+BBB+

's,"js/lj\.main\.min.\js?[0-9]\{14\}","js/lj.main.min.js?20130521080532",g'

s,pattern,substitution,

s.string # => "a\nb\n";

's/ (?<= \) | \] ) \s+ then/; then/x'

s/ /,/g

s/<title>Local SEO Services - The Company Review<\/title>/<title>Local SEO Services - TheCompany Review<\/title>/

's/<[^>]*>//g'

s/[[][^]]*]/X/g

s/[[:digit:]]+//g

s/[\o200-\o377]\+/\n&/g

s/!/:/g

s/\(\[[^] ]*\) /\1_/g

s/'\([A-Z]\)''/\1'/g

s/\([^ ]\)=>/\1 =>/g

s/\(\(stringA\)\|\(stringB\)\|\(stringC\)\)something/something else/

s/\(2: [0-9]\+\)/_\1_/g

s/\(2: [^:]\+\)/_\1_/g

 's/(?<=\)) then/; then/'

's/(?<=\)|\]) then/; then/'

's/(?<=\)|\])\s+then/; then/'

s/\(A B \)\(D\)/\1C/

s/\(A B\) D/\1 C/

"s/\(Provides\)\(\s\)*\(mysql\)/\1\2mysql-5.5/g"

s/\(get[A-Z][A-Za-z0-9]*_\)\([A-Z]\)/\1\L\2/g

's/,\([a-zA-Z0-9\/_]\+\)\(\.jpg\|\.png\|\.gif\)/,+\1\2/g'

s/./X/

s/'/\'/g

s/:/\nPublisher! /

s/:/\nTitle!     /

s/:/\nYear!      /

s/:\n/:/

s/GRUB_CMD_LINE_LINUX=\"/GRUB_CMD_LINE_LINUX=\"ipv6.disable=1XXX/

s/JAMES/FUDIK/g for @F } print join "|", @F;

s/MARKER\n\n/MARKER\n/g

s/WHAT_TO_LOOK_FOR/WHAT_TO_PUT_INSTEAD/

s/\\.*/ /g

s/^< //

s/^[#;]*[:space:]*\(pm.max_children = \).*/\15/

s/\^\[\(s3B//

s/^[^[]*\[/\[/

's/^%%Title:.*/%%Title: ' "$newtitle/" # Do not use this form.

s/^\([ab]\)\([ab]\)./\2\1x/g

s/^.*\(pm.max_children = \).*/\15/

s/^\s+//g;

s/a/c/

 s/aaa/&~/; y/~/\n/;    # assuming no other '~' is on the line!

 s/\btext\b.*?\K\btext\b/changed/;

s/foo/bar/g

    s/fox//g

s/here \([^\n]*\n\)/gone \1/g

's/mov r1, \[r1, r2\]/sub [r8, r9], r10/g'

's/onclick="img=document\.getElementById\('\''img_1'\''\); img\.style\.display = \(img\.style\.display == '\''none'\'' \? '\''block'\'' : '\''none'\''\);return false"//'

s/onclick="img=document\.getElementById\('img_1'\); img\.style\.display = \(img\.style\.display == 'none' \? 'block' : 'none'\);return false"//

s/onclick="img=document\.getElementById\('img_1'\); img\.style\.display = \(img\.style\.display == 'none' \? 'block' : 'none'\);return false"//

s/p1\([^0-9]\)/Bob\1/g

s/pattern/replacement/

s/pattern/substitution/

s/replace this/with this/

s/search_regex/replacement_text/operands

s/self\.vars\['\([^]]\+\)'\]/self.v.\1/g

s/test/test\n        line1

s/this/that/g

s1="SELECT flat_view.* FROM flat_view INTO OUTFILE "

s3cmd

$ a=$(s3cmd get s3://bucket/image)

$ a=$(s3cmd get s3://bucket/image 2>&1)

$ a=$(s3cmd get s3://bucket/image 2>&1 > /dev/null)

s3cmd ls --recursive s3://mys3.com/bucket1/ | awk '{print $4}' | grep '.gz' | xargs -I@ s3cmd get @ - | zgrep 'request' | wc -l

s3cmd ls -r s3://mybucket | awk '$3 > 200000 {print $4}' | xargs s3cmd get

s:?page=one&:pageone:g

s:random_stuff_\(choice1\|choice2\){\([^}]*\)}:\U\1\E\n\2:

    s_#!/usr/bin/.*python.*_#!/usr/bin/env python3\n\n# 4 spaces is the indentation standard. Make sure that Tab equals 4 spaces._

salt '*' archive.tar cjvf /tmp/tarfile.tar.bz2 /tmp/file_1,/tmp/file_2

salts["here_you_put_random_hash_as_key"] = "and_here_the_salt"

sample.php: Release=3.2 Devlevel=3

$samplpe = Get-Content $args[0]

samtools idxstats "$Bam" | awk -v "file=$fileName" '{i+=$3+$4} END {printf("%s\t%d\n", file, i)}'

samtools idxstats "$Bam" | awk "{i+=\$3+\$4} END {printf(\"%s\\t%d\", $file, i)}"

sar 1 | { read; read; cat; } > file.txt

sass --help

sass --update scss:css

sass --watch file.scss:file.css &

sass --watch path/to/sass1:path/to/css1 path/to/sass2:path/to/css2 path/to/sass3:path/to/css3

sass -r sass-globbing --watch sass_dir:css_dir

say -f script.txt -o greetings.aiff

say "Hello" using "Alex"

say "I'm done master"

say "hello";

sbcl --core <my-new-image-full-path-location> "$@"

sbcl --noinform --eval "..." "$1"

sbt "run-main com.longpackagename.mainclass $@ arg3"

sbt "run-main com.longpackagename.mainclass "$@" arg3"

sbt "run-main com.longpackagename.mainclass ""arg1" "arg2"" arg3"

sbt "run-main com.longpackagename.mainclass ""arg1 arg2"" arg3"

sc queryex type= service state= all | find "NATION"

sc.exe config "[servicename]" obj= "[.\username]" password= "[password]"

sc.exe config "Service Name" obj= "DOMAIN\User" password= "password"

scala -classpath "path to some dir where your .class files reside"

scaleImage.sh -f filename -d directoryname

VAR=$(scan)

scan file1 > log

scanimage -L | gawk '/N650U/ {print gensub(q"`", "", "g", $2)}' q="'"

schtasks /create /sc minute /mo 30 /tn "Task runs Every 30 Minuts" /tr c:\PATH\TO\TASK.exe

scp $(ls -1rt | head -93) test@testserver:~/DIR1/SUBDIR

scp "$remote_account@$remote_machine:tars/${Last_Name}_${First_Name}_$dir.tar.z" ~/tars

scp ${InputPath}/*.{jpeg,xml} ${user}@${HostName}:$OutputPath

scp "${SPICEWORKS_CONFIGS}/LA_$(date +%F)-firewall-5520" "sf-mlawler@10.21.1.212:/home/sf-mlawler/SBOX_Automation/SBOX_Dumps/08 - Security/Firewalls"

scp  -P 29418 <userId>@gerrit.domain.net:hooks/commit-msg .git/hooks/

scp -P 80 ... # Use port 80 to bypass the firewall, instead of the scp default

scp -P 8022 /path/locale/file 127.0.0.1:/path/on/remote2

scp -W location/password.txt copy_file_location paste_file_location

scp -c blowfish -C user@host:"\"/media/sdi1/home/data/bob's file\"" /storage/.../

scp -i ident_file zos_file linux_user@linux_box:linux_file

scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz ec2-user@mec2-50-17-16-67.compute-1.amazonaws.com:~/.

scp -i  mykey.pem somefile.txt root@ec2-184-73-72-150.compute-1.amazonaws.com:/

$ scp -i ~/.ssh/id_rsa devops@myserver.org:/path/to/bin/*.derp .

scp -o 'StrictHostKeyChecking no' ...

scp -p user@hostname:file local_destination

scp -q machineB:/path/to/your/file . || scp -q machineC:/path/to/your/file . || echo "Sorry no file found"

scp -r $(ls | egrep -v '^(B|C)$') anotherhost:/path/to/target/directory

scp -r $(ssh $server "ls -d $dir/*" | sed -n -e "s%^%$server:/%p" -e 100q) .

scp -r "$FILELIST"  $DESTINATION

scp -r -P 10122 -i /home/gndp/.ssh/openssh.puk ~/folder/subfolder gndp@192.168.1.197:/home/gndp/

scp -ra /path/to/local/storage user@remote.host:/path/to/copy

scp -r -i /Applications/XAMPP/htdocs/keypairfile.pem uploads/* ec2-user@publicdns:/var/www/html/uploads

        scp -r -i ~/Dropbox/Business/aws/first.pem "$LOCAL" ubuntu@XX.XX.194.202:~/test/

scp -rv $USERNAME@HOSTNAME:~/backups/ . 2> scp.output

scp -r A D anotherhost:/path/to/target/directory

scp -r directory_to_copy user@remote.server.fi:/path/to/location

scp -r foo your_username@remotehost.edu:/some/remote/directory/bar

scp -r local_dir you@server:remote_dir

scp -r nameOfFolderToCopy username@ipaddress:/path/to/copy/

scp -r root@remotebox:/ your_local_copy

scp -r server:first second third .

scp -r user@remote:src_directory dst_directory

scp -r user@your.server.example.com:/path/to/foo /home/user/Desktop/

scp -r username@A.B.C.D:~/Desktop/tig-0.14.1/ ~/bin/

scp -r username@ipaddress:/path/of/folder/to/copy /target/local/directory

scp -r web/* web/.htaccess user@site.com:site.com/

$ scp -r your_remote_user@remote_address:/path/to/save/dir /local/dir/to/transfer

scp -r ~/Desktop/tig-0.14.1/ serveruser@W.X.Y.Z:~/bin/

scp -v -i ec2key.pem username@ec2ip:/path/to/file ~/path/to/dest/folder/file |& grep -v ^ debug tee file.log

scp -v -i ec2key.pem username@ec2ip:/path/to/file ~/path/to/dest/folder/file |& grep -v ^debug > file.log

scp -vp me@server:/location/files\*

scp ./file:\ name.mp4 user@host:"/path/to/dest"

scp ./wp-content.tar.gz your_username@remotehost.com:/some/remote/directory

scp "/cygdrive/c/Program Files (x86)/Spiceworks/data/configurations/LA_$(date +%F)-firewall-5520" "sf-mlawler@10.21.1.212:/home/sf-mlawler/SBOX_Automation/SBOX_Dumps/08 - Security/Firewalls"

scp /export/home/uname/aa.txt user@windowsmachine.com:/homedir

scp /path/to/source user@host:/path/to/target

scp SERVER:/var/www/tmp/Screen shot 2010-02-18 at 9.38.35 AM.png

scp SERVER:"/var/www/tmp/Screen shot 2010-02-18 at 9.38.35 AM.png"

scp SERVER_ADDRESS:/path/to/remote/file.txt /path/to/local/file.txt

scp XYZ@sftp.abc.com:$SRC_DIR/$FILE $TRGT_DIR/

scp `ls -t | head -3` user@server:.

scp batch_user_account@remote_machine:file_address local_machine_address

scp dbdump.db tim@100.10.10.1:/home/tim/dbdump.db

scp doneill@server:/mnt/device/folder/numbered_file{16..75}.txt ./

scp exits with 0 on success or >0 if an error occurred.

 for REMOTE in "/Users/foo/Desktop/folder1" ; do scp file1 file2  file 3 $REMOTE; done

scp file_to_copy user@remote.server.fi:/path/to/location

scp file_to_copy user@remote_linx:/tmp/copy_of_file

scp from to

scp host:/path/to/file file

scp id@nodename:"~/Main/56\|75/test.pdf" .

scp local_file remote_login@remote_server:/remote/path

scp magento.tar.gz user@xx.x.x.xx:

scp magento.tar.gz user@xx.x.x.xx:/var/www

scp myfile user@host.com:. && echo success!

scp myname@stdlinux.myschool:~/home/1/name/c4251/bin/* .

scp myuser@mycomp:/home/myuser/test.file test.newext

if scp remote-host:~/myfile ./ >&/dev/null ; then echo "transfer OK" ; else echo "transfer failed" ; fi

scp remotecomputer.com:important/test.txt .

$ scp root@10.0.0.1:/path/to/file.txt localfile.txt

scp root@10.10.10.10:/cygdrive/c/PF86/myfile.xml .

scp secure:/home/Julius/fee/fie/fo/fum.txt fum.txt

scp test.txt root@remote:/root/dropoff

scp user@XX.XXX.XXX.XX:/test/ /test

scp user@abc.abc.com:/user/ file_1000000.dump file_1100000.dump file_1200000.dump ./

scp user@abc.abc.com:/user/{${files#,}} ./

scp user@remote.server.fi:/path/locatio/file_name file_name

scp yourFile 192.168.0.1:/someDirectory/someFilename

scp yourFile someUser@somehost.com:/someDirectory/someFilename

scp your_user@server:/dir/of/file/*.log /your/local/dir

$ scp your_username@remotehost.edu:foobar.txt /some/local/directory

scp your_username@remotevps.com:backup.zip /some/local/directory

scrapy crawl first > first.txt &

$ screen

 screen 

$ screen

screen [options] command

screen -L bash -c '(while :; do tail ~/screenlog.0 | grep -o "[0-9]*%" | tail -1; done | zenity --progress --auto-close &); 7z a "output.zip" "/path/to/input"'

screen -Rd 

screen -S $1 -X stuff "tail -n0 -f -s 0.01 $cmds | (while true; do $tron --userconfigdir $userconfigdir --vardir $var; done) | tee -a $log"

screen -S 31544 -X stuff $'echo Your ad here.\n'

screen -S 31544 -X stuff $'top\n'

screen -S 31544 -X stuff 'q'

screen -S arduino -X stuff 1

screen -S arduino -dmS cu -l /dev/ttyACM0 -s 9600

screen -S demo -p 1 -X screen '/home/aa/scripts/outputs.sh'

screen -S foo

screen -S myscreen -X stuff "echo $MSG"$'\n'

screen -S psql -X quit

screen -S redisScreenName -X quit

screen -S some_name

$ screen -S task

screen -S tweet -d -m node app.js

screen -X quit

screen -X stuff 'V'$(printf \\r)

screen -d -R -S test

screen -d -m -L python test.py

screen -d -m -S myscreen && screen -S myscreen -X zombie qr && screen -S myscreen -X screen pingit.sh

screen -dmS redisScreenName redis-server redis.conf

screen -dmS screen1 sh -c 'echo test && ls -al'

screen -dm -S test bash -c "tar zxvf /tmp | gunzip"

screen -dm bash script.sh </dev/null >/dev/null 2>&1 &

screen -d -m sh -c "while :; do ./myCommand; done;"

$ screen -dr 14313

screen -dr YOUR_PID

screen -ls

screen -ls

screen -ls

screen -ls | awk -vFS='\t|[.]' '/screen1/ {system("screen -S "$2" -X quit")}'

screen -ls | grep -q NAME || ...do something if server is not running...

$ screen -r

screen -r 

$ screen -r

screen -r

screen -rd some_name

$ screen -r 10000

screen -t "autotest" 2 bash -c 'cd ~/project/contactdb ; autotest'

screen -x $PROCESS -p 0 -X stuff `printf "stop\r"`

$ screen -xr 14313

screen -x tweet

screen top

screen wget --continue --directory-prefix=../sample.ext --tries=2 --input-file=sample.ext --limit-rate=300K

screencapture -l$(osascript -e 'tell app "Terminal" to id of window 1') test.png

screenshot

screenshot --fullpage

(script 2> /dev/null)

script -c "./steam -command update ..." logfile

script -c "cat test.txt" -q /dev/null | sed -n 's/\r//; s/^\(.*\)$/\^\1\$/;p;'

script -e -q -c "./myscript.sh" output.log 

roberto@rcisla-pc:~/Desktop$ script -t 2> timing.log -a output.session

$ script -t script.out 2>timing.out

$ script "a b" c

script capture.txt ls --color=always

script hello "goodbye, cruel world"

script mylogfile.output

script output.txt

script outputfile command 

while script; do sleep 10; done

script soe.txt -c ./error.sh

script soe.txt ./error.sh

    script-declutter typescript > out

script-name $(<list-of-dirs)

script.foo < [file]

script.pl 0 replace.txt input.txt > output.txt

script.pl 1 replace.txt output.txt > output2.txt

script.py '*.txt'

script.py "*.txt"

script.sh >> temp.txt  2>&1

$ script.sh &>> temp.txt

script.sh < input.txt

script.sh

script.sh [options] ARG1 ARG2

script.sh "$var1" "$var2"

script.sh -e

script/runner -e production Model.method

script/runner "MyClass.do_something('my_arg')"

script1.sh | script2.sh

script_name.sh |& tee -a /var/log/script_name.sh.log

script_that_produces_output.sh |multilog s2000 ./logdir

scriptname >/dev/null

scriptname &>scriptname.out

scriptname >nul 2>nul

scriptname -d path

$ scriptname "Text to match" mergefile.txt origfile.txt > outputfile.txt

scriptname.sh <name of file>.pdf

roberto@rcisla-pc:~/Desktop$ scriptreplay time.log record.session

$ scriptreplay timing.out script.out

scripts/ssidchecker.sh: 22: [[: not found

scripttoberunoncluster.py --source-organisation "My_organization_my_department" --project-name "MyProjectName"  --processes 4 /targetoutputfolder/

sdc

search_grep $book_title $author

search_grep "$book_title" "$author"

searchwaste "*.txt"

sec[i] throughput[i]

second half #2

NR==2{yprime=($second_col-y)/($first_col-x);xs=x;xi=$first_col;ys=y;yi=$second_col;print x, yprime}

security find-generic-password -a foo -s bar -g

sed '' file

sed '' filein | sed '' > fileout

sed '' filein > filetmp; sed '' filetmp > fileout

sed '<commands>' &>/dev/null

sed [OPTIONS] COMMAND FILE

sed "\#$varHasSlash#d"

sed "\#org.ops4j.pax.url.mvn.repositories#r /local/java/jbossfuse/6.1.0/etc/patch-fuse" org.ops4j.pax.url.mvn.cfg

sed '$ s/OLD/NEW/g' test > test.tmp && mv test.tmp test

sed '$! s/stuff/noun/g' file

 sed '$!N;/\n.*Never/!s/.*/-=+ REMOVED +=-/mg'  file

sed '$!N;/\nPATTERN/d;P;D' file

sed '$!N;s/,\(\s*\n\s*\)\.rdt(rdt)/\1/;P;D' file

sed '$!N;s/,\s*\n\s*\.rdt(rdt)//;P;D' file

sed '$!N;s/\n/,/' filename

sed '$!N;s/\n\(<\/Text>\)/\1/;P;D' file

sed '$!N;s/\n\s*+//;P;D' file

sed '$!N;s/\n\s*{\s*$/{/;P;D' file

sed '$!N;s/^.*\n.*MDL/EXAMPLE-RIVER-&/;P;D' file

sed '$!N;s/^\(${goto [0-9]\+}\)\(.*\n\)\(${goto [0-9]\+}\)/\3\2\1/;P;D' file

sed '$!N;s/line2.line3/line23/;P;D;'

sed '$!N;s|\(&lt;\)\(strong&gt;\)\([^\n]*\)\n\s*\1/\2|//textbf{\3}|;P;D' file

var=$(sed '$!d' cookie.txt)

sed "$(awk '/no/{print NR"d"}' fileB)" fileA

sed $(printf "%dd;" "${A[@]}") inputfile

sed "$(sed -n '/>ENST/{s=.*\(ENST[0-9]\+\)\s\+\([0-9]\+\).*=s/\1/\1_\2/;=;p}' two.txt)" one.txt

sed $'N;/<Location \\/>\\n *Order allow, deny/a\\\nAllow from all\nP;D;' file

sed $PROJECT_DIR/settings.py "^COMMIT_SHA = .*$" "COMMIT_SHA = \"$COMMIT_SHA\""

 sed "\$a$(var)" file

sed \$d

sed '$d' file.txt

sed '$d' | sed '$d'

sed '$d' < file1.txt | sed "1d"

sed '$q;s/$/,/'

sed '$s/$/;/;$q;s/$/,/'

sed '$s/$/foo/' file.txt

sed '$s/$/yourText2/' list.txt > _list.txt_ && mv -- _list.txt_ list.txt

sed $'s/;/;\\\n/g'

sed "$variable s/4/5/" file

sed "$variable"' s/4/5/' file

sed "${line}d" file.txt > file.tmp && mv file.tmp file.txt

sed '${s/$/%/}' file

$ sed '${x;p;};/ccc/,/eee/{/ccc/{s/.*//;x;};d;};1{h;d;};x;/^$/d;' file

sed '(?<=\[)(.*)(?=\])' "${document}"

sed '(separator) [pattern to delete](separator)d'

sed --in-place=.bak 's/\\en{\([^}]*\)}/\1/g' your_file

sed --in-place "/$number/d" /root/file

sed --in-place 's/[[:space:]]\+$//' file

sed --in-place "s/$ORIG/$REP/g" inputfile

sed --in-place 's/\(0x[0-9f]\{6\}\)ff/\U\1B0/' file

sed --in-place 's/\(0x000[0-9]\)ffff/\1FFB0/' file

sed --in-place "\~$x~d" total-list.csv

sed --posix 's/[^"]*"\([^"]*\)"[^"]*/\1,/g;s/\(.*\),/\1/' input.txt

sed -Ee '1s/s([1-4])/L\1/g' -e '1s/s([5-8])/W\1/g' -e '1y/5678/1234/' -e '1q' file

sed -E -e 's/([0-9-]+\.[0-9]*,[0-9-]+\.[0-9]*)/[\1],/g' -e 's/,]/]/'

sed -E -e "s/('[^']*'|[^,]*)(,|$)/\1"$'\t'"/g; s/"$'\t'"$//"

sed -E -e "s/('[^']*'|[^,]*),/\1"$'\t'"/g"

sed -E -e "s/('[^']*'|[^,]*),/\1X/g"

 sed -E -e 's/(.*)[.](.*)[.](.*)[.](.*)/\1.\2.254.\4/'

sed -E -e 's/(^|\.)0+([1-9])/\1\2/g' -e 's/(^|\.)(0)0*(\.|$)/\1\2\3/g'

sed -E -e 's/\.([^.]+)$/.XXX.\1/' -e '/XXX/ !s/$/.XXX/'

sed -E -e 's/^([ \t]*)#?(export )?usr=.*/\1#\2usr=/g' -e 's/^([ \t]*)#?(export )?pass=.*/\1#\2pass=/g' in

$ sed -E -f script.sed infile

sed -E -i '' 's/[[:<:]](word1|word2|word3)[[:>:]]//g' file.txt

sed -E -i.bak 's#^[0-9]{1,2}/[0-9]{1,2}/[0-9]{1,2} ##' logfile

sed -E -i.bak 's/(all\s+)peer/\1md5/' file

sed -Ei 's/.*\/(.*)-.*/\1/' plainlinks

sed -En -i'.backup' ...

sed -En '/^password: / s,^password: "(.*)"$,\1,p'

sed -E -n 's/(.*)/\1/p'

sed -E '/\.(rb|js)$/!d'  

sed -E '/^\s*\S+\s*$/!d'

sed -E ':a;s/^(.* )?([^/][^ ]+\.h)/\1\/abspath\/\2/;ta' file

sed -E 's#\\[^ \\{]+# #g' file.txt

sed -E 's,url\(['\''"]?([^'\'']+)['\''"]?\),'"$replace"',g' file.css

$ sed -E "s/[[:cntrl:]](\[K[0-9]? ?)?//g" your_file_here > output_file

sed -E "s/[[:space:]]$//" file

sed -E "s/[^(]*\('([^']+)'[^(]*/\1 /g; s/ $//" < tuples.txt

sed -E 's/#[[:alnum:]]+/replacement/g'

sed -E "s/#([^#]+)#/===\1===/g" filename

sed -E "s/'([a-zA-Z]*)'/\1/g" 

sed -E 's/(TAG|TAA|TGA)$//'

sed -E 's/(\$dbo->)([[:alnum:]_]+)(.*)$/\1["\2"]\3/g'

sed -E "s/(^|[^:])$oldIP([^0-9]|$)/\1$newIP\2/g" input

sed -E 's/.*\/(.*)-.*/\1/' plainlinks

sed -E 's/.*\/(.*)-.*/\1/' plainlinks > newfile.txt

sed -E 's/Hello +World/Hello George/' ./infile > outFile

x=$(sed -E 's/\(([[:alnum:]]+)\)-([[:alnum:]]+)/\2-\1/' <<< "$i")

sed -E 's/\.+(jar|war|ear|esb)$//' file

sed -E 's/^[^=]*= *"([^"]*)"$/\1/'

sed -E 's/^[^_]*_[^_]*_([^-]*)-.*$/\1/'

sed -E 's/^([^/][a-zA-Z/_]+\.h)/\/abspaths\/\1/;s/ ([^/][a-zA-Z/_]+\.h)/ \/abspaths\/\1/g' file

sed -E 's/^([a-zA-Z]).*/\1/'

var=$(sed -E 's/^((ftp|www)\.)?([^.]*)\..*/\3/' <<< "$HOSTNAME")

sed -E 's/^(.* )?([^/][^ ]+\.h)/\1\/abspath\/\2/' file

sed -E 's/^(.*)$/^S01E(.*)$/g'

sed -E 's/^(.{11})49/\158/' data.txt

sed -E 's/console.(log|debug|info|...|count)\((.*)\);?//g'

sed -E 's/software-//g;s/-(licensetypeone|licensetypetwo).zip//g'

sed -E 's@(mail[.][^.]+[.])(host|passwd)="[^"]*"@\1\2="***"@g' file

sed -E 's@\[[0-9]+\]@@g'

sed -E "s|(</?)video>|\1media>|g" vid.html

sed -c -i "s/\($TARGET_KEY *= *\).*/\1$REPLACEMENT_VALUE/" $CONFIG_FILE

sed -e "$ ! s/a/b/"

sed -e '$ {x;q}' -e '/@@/ !{H;d}' -e '/@@/ x' # note - i know sed better now

sed -e "$SEDCMD" "$FILTER" > "$TEMPFILTER"

sed -e '$q' -e 's/stuff/noun/g' file

sed -e $'s/\r$//' -e '/last:/s/$/,/'

sed -e "'s/test/abz/'" "<test" ">test_res"

sed -er '/.*(xxx).*/s//inserting this line and \1\n&/' file

sed -e -r 's/(([^,]+,){6}[^,]+), /\1\n/g' 

sed -es/\;/./{3,4} -i *

sed -e '/<!--String 1 -->/,/<!--String 2 -->/d'

sed -e '/<a href/{;:next;/<\/a>/!{N;b next;};s,<a href="\(.*\)">\(.*\)</a>,\2 - \1,g;}' yourfile

sed -e '/<a href/{;:next;/<\/a>/!{N;b next;};s/\n//g;s,<a href="\(.*\)">\(.*\)</a>,\2 - \1,g;}' yourfile

sed -e '/<a href/{;:next;/<\/a>/!{N;b next;};s/\n//g;s/\s\{2,\}/ /g;s,<a href="\(.*\)">\(.*\)</a>,\2 - \1,g;}' yourfile

sed -e '/<a/{:begin;/<\/a>/!{N;b begin};s/<a\([^<]*\)<\/a>/\n/;/<a/b begin}'

sed -e '/<string>REPLACEME<\/string>/r /tmp/dictionary.txt' -e '//d' /tmp/plaintext.plist

sed -e '/[ \t]*log[ \t]*(.*)/d' input.txt > output.txt

sed -e '/[,0-9]*[0-9]\+[acd][0-9]\+[,0-9]*/{N' -e 's/[,0-9]*[0-9]\+[acd][0-9]\+[,0-9]*\n---//}' test.txt

sed -e '/".*"/{p;d;}' -e '/"/,/"/{p;d;}' -e '/^ *$/d'

sed -e '/"/,/"/{p;d;}' -e '/^ *$/d'

sed -e '/"GVA"/w gva.file' -e '/"HBVL"/w hbvl.file' -n $file

sed -e "/$LINE/d" TELS/telephonenumbers.txt > tmp && mv tmp TELS/telephonenumbers.txt

sed -e "/$node/s/^/#/" inittab >. ...

sed -e "/$username/{" -e ':a' -e 'N' -e '/\n[[:blank:]]*---[[:blank:]]*[^[:blank:]]*[[:blank:]]*---[[:blank:]]*$/{s/.*\n//' -e 'b' -e '}' -e 'ba' -e '}' inputfile

sed -e "/$username/{" -e ':a' -e 'N' -e '/\n--- [^[:blank:]]* ---$/{s/.*\n//' -e 'b' -e '}' -e 'ba' -e '}' inputfile

sed -e '/,$/{s/\( myword.*\)\(,\)$/\2/; ba}' -e 's/\( myword.*\)//' -e :a inputfile

sed -e '/./!{R fileB' -e ';d}' fileA

sed -e '/./{H;$!d;}' -e 'x;/dn: cn=Configuration/!d' my_file

sed -e '/./{H;$!d;}' -e 'x;/pattern/d' filename

sed -e '/./{H;$!d;};x;/dn: cn=Configuration/!d' my_file

sed -e '/=sec1=/,/=sec2=/ { /=sec1=/b; /=sec2=/b; s/^/#/ }' < input

sed -e '/@@CONTENTS.txt@@/{rCONTENTS.txt' -e ';d}' HOME-template.html > HOME.html

sed -e '/@@CONTENTS.txt@@/{rCONTENTS.txt' -e ';d}' HOME.html

sed -e '/A\.1.*DATA/!d;s/A\.1/B\.2/' /yourfile

sed -e '/BBB/ s/^#*/#/' -i file

$ sed -e '/ENTRY/d' -e '/VERSION/d' < in.txt > out.txt

sed -e '/FLAG/,+1 d' infile

sed -e '/INCLUDE_XML/!b' -e 'r cnt.xml' -ed tpl.xml >out.xml

sed -e '/NA/,+3 d' infile

sed -e '/Restart nfs and apply changes/s/dialog/\#dialog/' -i /etc/init.d/nfsscript.sh

sed -e '/STUFFGOESHERE/ r file1.txt' -e '/STUFFGOESHERE/d' file2.txt

 sed -e '/S\|A/d' file.

sed -e '/Seven/,/Fifteen/{:a;N;/Fifteen/!ba;s/\n/ /g}' input.txt

sed -e '/TERMINATE/,$d'

sed -e '/Unix/{N;N;p;r content' -e 'd;}' data

sed -e '/\[Block B\]/{:a;n;/^$/!ba;i\inserted line' -e '}'

sed -e '/\[sometext\]/,/stuID = 10/{/stuID = 10/{a\checkID = 4' -e ':a;n;ba}}' file

sed -e '/\([a-zA-Z0-9]\{1,10\}\ \{1,5\}\"\)/!d'

sed -e '/\([a-zA-Z0-9]\{1,10\}\s\{1,5\}\"\)/!d'

sed -e '/^ *<key>CHANNEL_NAME<\/key>$/!b' -e 'n' -e 's/^\( *<string>\)..*\(<\/string>\)$/\1test\2/' Info.plist > test.plist

sed -e '/^ *#/b' -e 's/^[^|]*//;s/[^|]*$//;' filename

sed -e '/^ *start) *$/ { :b; N; s/\( *\);;/\1my_command_here\n&/; te; bb; }; :e'

 sed -e '/^<div class=.entry.>/,\_^</div>_{//!{H;d};\_^</div>_!{h;d};x;/author.>test@example.com/s/_toself/SUBSTITUTE TEXT/;p;x}' text_file

sed -e '/^<user/!{d}' -e '/^<user/s/^.*"\([^"]\+\)".*/\1/' input.xml

sed -e '/^[0-9]/{N;s/\n//;}'

sed -e '/^# Configuration foo - Start$/r new_foo.txt' -e '/^# Configuration foo - Start$/,/^# Configuration foo - End$/d'

sed -e '/^#\$/,/^#\$/d' file

sed -e '/^#end/r exceptions' -e '/^#start/,/^#end/d' acl.txt

sed -e '/^$/d' -e '$ !d'

sed -e '/^(/r fileToInsert' firstFile

sed -e '/^+[-+]*$/d;s/^| //;s/ |$//;s/ | /|/g'

sed -e '/^.*\(.\)\([0-9][0-9]\)\1.*$/!d;s//\2/'

sed -e '/^C:\\good/ s/\\/\//g' input_file.txt

sed -e '/^Fixed pattern$/!b' -e 'n' -e 's/(/(hello /' myfile

sed -e '/^Password:/,/^[^ ]/{s/Password: .*/Password: */; /^ /d;}'

sed -e '/^\(ENVIRONMENT="[^"]*\.com\)"/s//\1.origin.net"/'

sed -e '/^\s*<key>CHANNEL_NAME<\/key>$/{n;s/^\(\s*<string>\).\+\(<\/string>\)$/\1test\2/}' Info.plist > test.plist

sed -e '/^\tpublic String getId/,+2 d'

sed -e "/^_/s/^/$var/" file

sed -e '/^foo$/! s/^/- /' -e '/^foo$/ s//FOO/' infile

sed -e '/^is-program2-installed= / s/.$/0/' -i file.txt 

sed -e "/^\s*ITEMS=/{s/=\"\"/=\"\$ITEM$itemNum\"/;t;s/\"$/ \$ITEM$itemNum&/;}" file.txt

sed -e '/^\s*ITEMS=/{s/=""/="$ITEM'"$itemNum"'"/;t;s/"$/ $ITEM'"$itemNum&/;}" file.txt

sed -e '/__SUBSTITUTE_HERE__/ {r tmp.txt' -e 'd;}' < myFile.txt

sed -e '/alex/!d' -e '/eva/!d' -e '/tom/!d'

sed -e '/anonuid/{s/anonuid=[-0-9]*/anonuid=-1/;b gid;};s/)$/,anonuid=-1)/;:gid;/anongid/{s/anongid=[-0-9]*/anongid=-1/;b;};s/)$/,anongid=-1)/'

sed -e '/baz[0-9]*/,$b' -e 'd' file

sed -e '/def boot {/r textinsert' filewithpattern

sed -e "/foo/{s/\('[^']*'\)/\n&\n/g" -e "s/\(\n'[^.]*\)\.\([^']*Z'\)/\1-\2/g" -e "s/\(\n'[^.]*\)\.\([^']*uF'\)/\1_\2/g" -e "s/\n//g}" inputfile

sed -e '/hello/r textinsert' filewithpattern

sed -e '/is-program2-/ s/.$/0/' -i file.txt 

sed -e "/mktemp' is dangerous/D"

sed -e '/myprocess/,+4 s/^/#/' 

sed -e '/network netmask broadcast$/s/^[^ ]*\>/&_NAME/'

sed -e '/nfs/{/nodev/!s/\S\S*/&,nodev/4}' -e '/nfs/{/nosuid/!s/\S\S*/&,nosuid/4}'

sed -e '/pattern[1-3]/ s/asdf/ghjk/g'

sed -e '/pattern/,+5d' file.txt

sed -e "/pattern/Id" filepath

sed -e '/pattern/r text2insert' filewithpattern

sed -e '/pattern/{n;N;N;N;N;d}' file.txt

sed -e '/patterntosearch4/!b' -e 'G' -e 's/\(.*\)\(.\)/\2\2\2\2\1/' file

sed -e '/regex/d' infile

sed -e '/replace_text_holder/{r file.txt' -e 'd}'

sed -e '/s$/!d' -e 's/s$//'

sed -e '/worker.list=/{' -e 's/$/,myValue/' -e 's/=,/=/' -e '}'

 sed -e '/worker.list=/{s/$/,myValue/;s/=,/=/}'

sed -e '1 i'$'\n'

sed -e '1!b' -e '/GH/!d' file

sed -e '1,/<tr>/ s/<tr>/<tr class="active">/'

sed -e '1,/---/d' -e '/---/ !{H;d}' -e x

sed -e '1,/TERMINATE/d'

sed -e '1,/^section B/d' -e '/^section/,$d'

sed -e '1,3d;/^+[-+]*$/d;s/^| //;s/ |$//;s/ | /|/g'

sed -e 1,Nd -e Mq file

sed -e "123,456d" -e "234,456d"

sed -e '1iTRUE' -e '1!iFALSE'

sed -e '1r file2' -e 'q' file1

sed -e "1s/$varA/$varB/" yourfile

sed -e '1s/LHS/RHS/;t' -e '1,/LHS/s//RHS/'

sed -e '1s/^.//' input_file > output_file

sed -e '1s/^/"'$i'" ;/' auto1.txt > auto2.txt

sed -e '1s/fred/frog/' yourfile

sed -e '1{ s/=[^,]*,//g; s/=.*//; }' ...

sed -e '1~2s/.*/echo &/'

sed -e '2,$d' foo

sed -e '2,$s/foo/bar/'

sed -e '2,${ /^Name/d }'

sed -e '2s/  */ /g' infile.txt

sed -e '2s/^\([^ ]*\)  /\1 /' infile.txt

sed -e "2s@^@https://otrs.confidential/index.pl?Action=AgentTicketZoom;TicketID=,@"

sed -e '2~2{' -f replace.sed  -e '}'

sed -e '3rfile1' -e '3,4d' file2

sed -e '5,10d;12d' file

sed -e 5p | sh

sed -e :a -e '$!N' -e '$!ba' -e 's/\(foobar\)/\1\nsome_text/4' inputfile

sed -e :a -e '$!N; s/\n/ /; ta' source.c | sed 's, *| *,\n,g'

sed -e :a -e '$q;N;11,$D;ba'

sed -e :a -e '/.*xyz.*\\$/N; s/\\\n//; ta' -e '/xyz/d' filename

sed -e :a -e '/./,$!d;/^\n*$/{$d;N;};/\n$/ba' file

sed -e :a -e '/\\$/N; s/\\\n//; ta' file

sed -e :a -e '/^[^#]/N; s/<html>//; ta' input | sed '/^$/d'

sed -e :a -e '/^BEGIN:/,/^END:/ { /END:/!{$!{N;ba};};/MID:/d;}' inputfile

sed -e :a -e '/host my-system4/,/}/ { /}/!{ $!{N;ba};};/192\.168\.17\.34/d;}' filename

sed -e :a -e '/host my-system4/,/}/ { /}/!{ $!{N;ba};};/pattern/d;}' filename

sed -e ':a' -e 'N' -e '$!ba' -e 's/\n / /g' file.txt

sed -e ':a' -e 'N' -e '$!ba' -e 's|&lt;/p&gt;\n&lt;ul&gt;|\\begin{itemize}|g' file

sed -e :a -e N -e 's/\n/ /' -e ta input.txt

sed -e ':a' -e 'N;$!ba' -e 's/\n/ /g' file.txt

sed -e :a -e 's/\(.*".*".*\) /\1|/;ta'

 sed -e :a -e '{N; s/\n/       /g; ta}' rsh2 > rshf

sed -e ':a; /CALL_A[^)]*$/{N; s/\n *//; ba}'

sed -e ':a;N;$!ba' -e 's#<file.*</file>#<sometext>\nvalue1\n</sometext>#' file

sed -e ':a;s/~~/~ ~/;ta'

sed -e ':begin;/\\$/{N;bbegin};s/\\\n//g' your_file

sed -e ':begin;/\\$/{N;bbegin};s/\\\n//g' your_file | grep your_pattern

sed -e ':loop;/\\$/N;s/\\\n/ /;t loop' -e 's/ \+/ /g' < Makefile

 sed -e ':redo' -e 's/\(\[[^] ]*\) /\1_/g' -e 't redo' data.file

sed -e ':redo' -e 's/^\([^]]*\[[^] ]*\) /\1_/' -e 't redo' data.file

 sed -e ':redo; s/\(\[[^] ]*\) /\1_/g; t redo' data.file

sed -e ':s; s/{%\(.*\)\$\(.*\)%}/{%\1\2%}/; ts; s/{%\([^(]*\)(\(.*\))\(.*\)%}/{%\1 \2 \3%}/'

sed -e '\|somevar|s|foo|bar|'

sed -e h -e "s/ .*$//" -e "y/0123/ACGT/" -e G -e "s/\n[0-3]*//"

sed -e "h;s/ .*$//;y/0123/ACGT/;G;s/\n[0-3]*//"

sed -e n -e d file

sed -e 'n;d' file

sed -e 'n;n;n;R file2' -e 'R file2' -e 'R file2' -e 'R file2' file1

sed  -e "p" -e "s/ar/AR/g"

sed -e 's!</html>.*!</html>!' -e '/<\/html>/q' input

sed -e 's!<html>!<html><link rel="stylesheet" type="text/css" href="LivingInStyle.css">!' < file

sed -e 's!http[s]\?://\S*!!g' posFile

sed -e 's#"#\\"#g' -e "s#'#\\\'#g"

sed -e 's#.*=\(\)#\1#' <<< "$your_str"

$ sed -e 's#.*search=\(.*\)">#&\1</a>#'

sed -e 's#/# #' -e 's/=/ /'

sed -e 's#ABC-XYZ#DEF-PQR#g' -e '/^$/d' test.xml

sed -e "s#INSERT_ME_HERE#${ROOT_BUILD_HOME}#g" ./Doxyfile > ./tmp && mv ./tmp ./Doxyfile

sed -e "s#^\(/[a-z]/.*/bin\)$#A40-\1#ig"

line=$(sed -e 's#^J:##' -e 's#\\#/#g' <<< "$1")

sed -e 's%</\{0,1\}l\{0,1\}ic>%%g'

sed -e 's%/\.\./%/%g' $src_file > $temp_file

sed -e 's,<math>,&\\begin{align},g' -e 's,</math>,&\\end{align},g' 

sed -e 's,.*<title>\([^<]*\)</title>.*,\1,g'

sed  -e "s,/home/user/mydocs,/var/lib/mydir," -e "s,/home/user/waves,/var/sounds," -e "/^$/d" file1

sed -e 's,^,deletedwob ,' -e 's,$, y y,' WIDeletion2.txt > WIDeletion3.txt

 sed -e "s/  */ /g" < file.txt

sed -e 's/  \+/;/g' File1 > File2

sed -e 's/ [^0-9]*/ /'

sed -e 's/ $//'

sed -e 's/ ([^)]*)//g'

sed -e "s/ /,/g" < a.txt

sed -e 's/ /,/g' -e 's/^/Delete from ReportingDetail where ReportingDetailID IN (/' -e 's/$/)/' file.txt

sed -e 's/ //' -e 's/ //' -e 's/ //'

sed -e 's/ //g' -e 's/../& /g'

sed -e 's/ /@@@@/' -e 's/ [/@@@@/' -e 's/] /@@@@/' infile > outfile

sed -e 's/ /\'$'\n/g'

sed -e 's/ /\\ /g' -e 's/\\ / /1'

sed -e 's/ /\\\\ /g'

sed -e 's/<[^>]*>//g' file.html

sed -e 's/<[^>]*>//g' file.xml

sed -e 's/<[^a>/!][^ >][^>]*>//g;s/<\/[^a>][^>]*>//g'

sed -e 's/<?/<?php/g'

sed -e 's/<CTRL-V><CTRL_M>//' filename

sed -e 's/<SCRIPT LANGUAGE="JavaScript" TYPE="text.javascript" SRC=".height.js"><.SCRIPT>/ /' file_names

sed -e 's/<\([^>\/\ ]*\)[^>]*>/<field name=\"\1\">/g' -e 's/<field name=\"\">/<\/field>/g' file 

sed -e 's/<\/\?a\s*[^>]*>//g'

sed -e 's/<c>.*<\/d>//'

sed -e 's/<h1>/<h2>/g' -e 's_</h1>_</h2>_g'

sed -e "s/<img[^>]*display: none;[^>]*>//g" filein

sed -e 's/<title>/sblmtitle\n<title>/g' -e '1,/sblmtitle/d' ....

sed -e 's/[]\/$*.^|[]/\\&/g'
  sed -e 's/[.":;]/ /g' file.txt

sed -e 's/[0-9]*\.[0-9]*//g' -e 's/ *$//'

sed -e 's/[0-9]\{7\} / /g' file.txt

sed -e "s/[0-9]\{$precision\}$/.&/" <<< "$value"

sed -e 's/[0-9A-F]\{2\}/&:/g' -e 's/:$//' myFile

sed -e s'/[A-Za-z]\{7,\}//g'

sed -e 's/[\/&]/\\&/g'
sed -e 's/[^$0-9]*\([0-9:]*[ap]m\)*\(\$[0-9.]*\).*/\1\2/'

sed -e 's/"[^"]*"//g' file.txt

sed -e 's/"//g' -e 's/[^,]*/"&"/g' inputfile

sed -e 's/"A/label: &/' -e 's/"[0-9]/value: &/'

sed -e 's/"^[^,]* \([^ ,]*\),.*/\1/'

sed -e 's/#.*$//' -e '/^$/d' inputFile

sed -e 's/#include "\(.*\)"/#include <\1>/g' < filename

sed -e 's/$/ eth0/'

sed -e 's/$/string after each line/' -i filename

SQL=$(sed -e "s/\$BATCH_END/$BATCH_END/g" <<< $SQL)

WORD=one ; sed -e "s/$WORD//g" file.txt > newfile.txt

sed -e 's/$pattern/$replace/g'

sed -e "s/${NEW_NAME}/\${NAME}/" "$PLIST" > "${PLIST}.tmp" && mv -f "${PLIST}.tmp" "$PLIST"

sed -e "s/${VAR1}/${VAR2}/g" ${VAR3}

sed -e "s/\${i}/1/" -e "s/\${word}/dog/" template.txt

sed -e 's/%t \\"/%t %D \\"/'

EXPANDVAR=one; NOEXPANDVAR=another; sed -e 's/'"$EXPANDVAR"'$NOEXPANDVAR//g' file.txt > newfile.txt

sed -e 's/([^)]*)//g'

sed -e "s/\([a-zA-Z0-9./\\ :-]\+\)/\1/g"

sed -e "s/\($varString\):\([0-9]*\):/\1:$varNumber:/g" textFile.txt

sed -e "s/\*DIVIDER\*/${DIVIDER//\\/\\\\}/g"

sed -e 's/,,/, ,/g' inputfile

sed -e 's/,,/, ,/g; s/,,/, ,/g' inputfile

sed -e 's/,,/,unknown,/g'

sed -e 's/,/;/g' -e 's/;/,/15g' file

 sed -e 's/,\s\+/,/g' local.csv > localNoSpaces.csv

sed -e 's/.$//' -e '/last:/s/$/,/'

sed -e 's/.* \[0] => /[ /' -e 's/\[[0-9]*] =>/,/g' -e 's/[, ]*$/]/' role.txt

sed -e 's/.*CREATESETTABLE[^)]\+TABLENAME\(.*\)/\1/g' -e 's/.*CREATEMULTISETTABLE[^)]\+TABLENAME\(.*\)/\1/g'

 sed -e 's/.*\[  *\(.*\)  *\].*/\1/'

sed -e 's/.*\[  *\(.*\)  *\].*/\1/' -e 's/ *$//'

sed -e 's/.*\([^ ]*a\.site[^ ]*\).*/\1/g' input

month=$(sed -e 's/.*\(..\)$/\1/'<<<"00$month")

sed -e 's/.*_\([pP][0-9][0-9]*\)_.*/\1/'

sed -e 's/.*country=//g;s/language=\([^\&]*\)&.*/\1/g' your_file

sed -e 's/.*href="\([^"]*\)".*>\([^<]*\)<.*/link:\1 name:\2/' < data

sed -e 's/........foo/ foo/g' file.txt

sed -e 's/.../.../;tx;d;:x'

sed -e 's/../&:/g' -e 's/:$//' a.txt > b.txt

sed -e 's/./& /g' -e 's/$/\\p/' < inputfile | groff -Tascii

sed -e 's/./\L&/' Shell.txt

sed -e 's/.\{8\}\(foo\)/ \1/g' file.txt

sed -e 's/.\{8\}foo/ foo/g' file.txt

sed -e "s/.\{20\}/&\n/g" < temp.txt

sed -e 's/00*/L/g' regex.txt

sed -e "s/2000/$START/g" -e "s/2009/$END/g" < WAR.sql | mysql -D WAR

sed -e 's/20120408/XXX/' -e 's/20120409/YYY/' -e 's/20120410/ZZZ/' input

sed -e 's/:[^:\/\/]/="/g;s/$/"/g;s/ *=/=/g' file.yaml > file.sh

sed -e 's/:/:!/' 

sed -e 's/:{/:{\n/g'  -e  's/},/\n},\n/g' d5|sed -n '/dependencies/, /}/ p'|grep '>='

sed -e 's/;./\U&\E/g'

sed -e 's/;/,/g; s/,djh=/,@=/; s/\([a-z][a-z]*\)=[0-9]*,/\1,/g; s/@/djh/g'

sed -e 's/=\([^" >][^ >]*\)/="\1"/g'

sed -e "s/AMOUNTTOBEREPLACED/\"${sum}\"/g"

sed -e 's/BBC\(.*\)\([0-9]\) of [0-9]\(.*\)/\1 s01e0\2 \3/'

sed -e 's/DEFINER[ ]*=[ ]*[^*]*\*/\*/' myfile.sql

sed -e 's/Hello \+World/Hello George/' ./infile > outFile

sed -e 's/Hello[[:space:]]\+World/Hello George/' ./infile > outFile

sed -e 's/Here\(.*\)String/\1/'

$ sed -e 's/INSERT INTO `temp` VALUES (//' -e 's/);$//' -re 's/("[^"]*),([^"]*")/\1\x1\2/g;s/,/|/g;s/\x1/,/g;s/\\([^\])/\1/g' file | sed "s/'|/|/g;s/|'/|/g"

sed -e 's/INSERT/UPDATE/' -e 'w output.txt' input.txt

sed -e 's/INSERT/UPDATE/' input.txt > output.txt

sed -e 's/INSERT/UPDATE/;w output.txt' input.txt

sed -e 's/PATTERN/REPLACEMENT/g' <INPUT_FILE >OUTPUT_FILE

sed -e 's/Policy[ \t]\+\([a-zA-Z0-9_]\+\)[ \t]*[;=].*/\1/g' $rootFilename

sed -e 's/\<\([0-9]\)\([0-9]\)\>/\2\1/g'

sed -e 's/\[\([^]]*\)\]/\\macro{\1}/g' file.txt

sed -e 's/\$//' -e 's/ *= */=/' file.php

sed -e 's/\$\([^$]\+\)\$/\\(\1\\)/g' manuscript.tex > manuscript2.tex

sed -e 's/\([0-9][0-9]:[0-9][0-9]\.[0-9]\).*/\1/'

sed -e 's/\([0-9]*\) [0-9]* \(.*#change-enabled\)/\1 8 \2/'

sed -e 's/\([0-9]\+\)\.\([^0-9]\)/\1\2/g' -e 's/(\([0-9]\+\))/\1/g'

 sed -e 's/\([0-9A-Fa-f]\{2\}\)/\1:/g' -e 's/\(.*\):$/\1/'

sed -e 's/\([A-Z]*\) \([A-Z][A-Z]\),/\1\|\2,/g' -e 's/, /\|/g'

sed -e 's/\([A-Z]\)/-\L\1/g' -e 's/^-//'  <<< "MyDirectoryFileLine"

sed -e 's/\([^/]*\.csv\)\( .*\)/&\1.org/' input

sed -e 's/\([^\\]\)\\0[[:space:]]/\1/g' YourFile

sed -e 's/\("\)[0-9]/\1S/' infile

$  sed -e 's/\(.*\)/\U\1/' input.txt > output.txt

sed -e 's/\(.*\)ABC$/\1DEF/g'

sed -e 's/\(.*\)ABC/\1DEF/g'

sed -e 's/\(..\)/\1:/g' -e 's/:$//' a.txt > b.txt

sed -e 's/\(^ServerIP=\)/\1192.168.0.101/g' your_file

sed -e 's/\(foo=1&\).*\(bar=2&\)/\1\2/'

sed -e 's/\(something\)\(something_else\)/\1 ;; \2/g' input-file

sed -e 's/\*$//' -e 's/\*/.*/g'

sed -e 's/\.$/!!/g' -e 's/\./!/g' input_exp

sed -e 's/\// /'

sed -e 's/\\\([^n]\)/\1/g'

sed -e 's/\\qdb{\([0-9]*\)}/\\text1{\1}\\text2{\1}/g' test.txt

sed -e 's/\\u003cb//g' -e 's/\\u003e//g' -e 's/\\u003c\/b//g' -e 's/\\u003c//g' -e 's/div.*div//g' -e 's/.*://g' -e 's/"//g' -e 's/ "//g' new1.txt > new2.txt

sed -e 's/\r/\n/g' -e 's/ done\.//g' file

 sed -e 's/\s\+,/,/g' local.csv > localNoSpaces.csv

sed -e 's/\s\+/,/' | sed -e 's/\s\+/,/'

sed -e 's/\s\+/\n/g' old > new

sed -e 's/^[ \t]*//;s/[ \t]*$/' a > c

sed -e 's/^[0-9][0-9]*[[:space:]][[:space:]]*//' inputfile

sed -e 's/^[0-9]*//' test.cpp

sed -e 's/^[A-Z]*//' -e 's/[A-Z]*$//'

sed -e 's/^[^ ]*\>/&_NAME/'

sed -e 's/^[^0-9]*-//g'

$ sed -e s/^[^:]*/USER/ -i /etc/passwd

sed -e 's/^[^=]*=//'

sed -e 's/^[^{]*//g' -e 's/}[^}]*$/}/' file

 sed -e "s/^# //g" /etc/apt/sources.list

 sed -e "s/^# deb/deb/g" /etc/apt/sources.list

sed  -e 's/^#//' -e '/^[ \t]*$/d' 

 sed -e "s/^${PATTERN1}$/${PATTERN2}/g" ...

sed -e 's/^,/unknown,/' -e 's/,,/,unknown,/g' -e 's/,$/,unknown/'

sed -e "s/^.*\"\(.*\)\".*$/\"\1\"/"

temp2=$(sed -e "s/^.*$PRECEDING//I" <<< "$content")

sed -e 's/^.*:\(.*\)$/\1/g' input-file

sed -e 's/^.*\(FBCD.\{200\}\).*/\1/' file

sed -e 's/^.*\^.*$//' test.file

sed -e 's/^./\L&\E/' Shell.txt

sed -e 's/^/"/' -e 's/$/"/' file

sed -e 's/^/s|/; s/$/|g/' replacement_list | sed -r -f - file

month=$(sed -e 's/^0*//'<<<"$month")

sed -e 's/^00*//' file.txt

sed -e 's/^23\>/X/' file.txt

sed -e 's/^DEVICE.*/DEVICE\=\"eth0\:'$NEXT'\"/' -e 's/^IPADDR.*/IPADDR\=\"123.123.123.'$IP'\"/' ifcfg-eth0:$COUNTER > ifcfg-eth0:$NEXT

sed -e "s/^SERVER=.*/SERVER=$INSTANCE_IP/g;n" $ENV_FILE > $ENV_FILE.tmp && mv $ENV_FILE.tmp $ENV_FILE

sed -e 's/^\([0-9]\{3\}\).\(.*\)/(\1)\2/g' yourfile

sed -e 's/^\([^,]*\),\([^,]*\),\([^,]*\),\([^,]*\)/\1,\4,\4/'

sed -e 's/^\(.*\)\(\*[0-9]\+\).*$/\1\2,aaaaa\n\1\2,bbbbb/' infile

sed -e 's/^\(.*dsk\/\)c1t1\(.*\)ufs\(.*\)$/\1c1t2\2ext2\3/g' some_file


    sed -e 's/^\(..\)\(..\)\(.\)\(..\)\(.*\)$/\1\4\3\2\5/g'

sed -e 's/^\(.\{80\}\).*/\1/' your_file

sed -e 's/^\(\([^,]*,\)\{7\}\)\([^,]*,\)\([^,]*,\)/\1\4\3/'

$ sed -e 's/^\s*$//' livehttp.txt | perl -000 -ne 'print if /^(GET|POST)/'

sed -e 's/^\|$/"/g' -e 's/,/","/g' input

sed -e 's/^foo$/FOO/' -e t -e 's/^/- /' infile

sed -e 's/^right=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/right=192.168.1.92/' filename

sed -e 's/^string1.*/string2 lala/'

sed -e 's/^string1.*/string2 lala/g'

sed -e 's/^uid=//;s/).*//;s/(/ /;s/^id:/----/;s/:.*//' | column -t

sed -e s/_seq1//

sed -e 's/a/ /g'

sed -e "s/a/ /g"

sed -e 's/a/\d032/g'

sed -e s/a/^ /g

sed -e "s/a/b/g" -e "s/g/h/g" -e "s/r/d/g" -e "s/e/q/g" file.html

sed -e s/a/b/g server.txt | ruby filter.rb > done.txt

sed -e 's/add fast \(pkg\|package\) boots-.*/add yinst pkg boots-5.0/g'

sed -e "s/\b\(.\)/\u\1/g"

sed -e 's/bizzbuzz[0-9]\{2\}//' file.txt

sed -e "s/\bword1\b//g" inputfile > outputfile

sed -e 's/dog/monkey/g' -e 's/orange/cow/g'

sed -e "s/foo/$bar/" -e "s/some/$text/" file.whatever

sed -e 's/http:\/\/ericbrotto.com/file:\/\/\/Users\/ericbrotto\/Documents\/Portfolio_CV_etc.\/Offline_Portfolio/g' index.php > index.html

sed -e 's/iface \([^ ]*\) .*/auto \1\'$'\n''&/' file

sed -e 's/param1=.*/param1=abc/' text1.txt

sed -e 's/params1,//' -e 's/values ([^,]*,/values (/'

$ sed -e 's/pass/Awmusic12635/2' -i config.yml

sed -e "s/\r//g" input-file

sed -e  's/regex-to-drop\(regex-to-keep\)/\1/g' input-file

sed -e 's/t/kg/i;s/g/km/i;s/m/kk/i;s/k/*1000/ig;s/b//i' | bc

sed -e 's/tag1/temporarytag/g' -e 's/tag2/tag1/g' -e 's/temporarytag/tag2/g'

sed -e "s/word1//g" inputfile > outputfile

sed -e 's/{"AP_SESSION_ID"\\1\\"787"}/{"AP_SESSION_ID"\\1\\"800"}/g' FILE|tee FILE

sed -e 's/{$date:\([0-9]*\)}/Date\(\1\)/g' file

sed -e 's/{0}kerberos/kerberos/' -e '/some: junk/,$d'

sed -e 's/{\([0-9]\+\)}/\1/g' inputfile

sed -e 's:=:=$((:' -e 's:$:)):' expr.sh |bash -x

sed -e 's:\x01: | :g' -e 's/$/\n/'

sed -e 's:^.\{,10\}:&^&:'

sed -e 's:^.\{0,10\}:&^&:'

sed -e 's:^\(.\{1,10\}\)\(.*\)$:\1^\1\2:'

sed -e "s;%SCRIPT_NAME%;script_test_name;g" template_file.txt > script_test_name

sed -e 's;\(\[\)\([0-9]\)F;_F\1\2;'

  sed -e 's;^.*\(\[.*\]\).*$;\1;' inputFileName > outputFileName

sed -e 's@<charge_amt>[^-][^<]*</charge_amt>@<charge_amt>0</charge_amt>@g' < file > newfile

sed -e 's@#include <foo/bar.h>@#include "bar.h"@' -i *.c

sed -e 's@\(\\label{fig:[a-zA-Z0-9 -]\{1,\}}\)}$@}\1@' ./file.tex

sed -e "s_: \"[a-zA-Z0-9]*\" _: _g" -i file.txt

sed -e 's_\.$_!!_g' -e 's_\._!_g' input_exp

sed -e server.txt ruby filter.rb > done.txt

sed -e server.txt |sort| > done.txt

sed -e "s|<p align=\"center\">\(.*\)</p>|\1|" server.html

sed -e 's| x | * |' -e 's|^\([ 0-9+*/-]*\)|echo $((\1)) |' YourFileName | sh | awk '{a[$2]+=$1;} END {for (var in a) print a[var] " "var;}'

sed -e "s|$i|$k|" $1 > temp.html;

sed -e 's|/\./|/|g' -e ':a' -e 's|/[^/]*/\.\./|/|' -e 't a'

sed -e 's|:|;|' file

sed -e 's|:|;|g' file

sed -e "s|@QUESTIONS@|$Questions|g; s|@ADDRESS@|$Address|g" file.txt

sed -e 's|href=\"\(.[^"][^>]*\)\([.,]\)\">|href="\1">|g' file

sed -e "s~^name2:[$./0-9a-zA-Z]*:~name2:aTest\$repl.ace:~g" tst

sed -e "s~^name2:[^:]*:~name2:aTest\$repl.ace:~g" tst

sed -f <(printf "%dd;" "${A[@]}") inputfile

sed -f <(sed 's/^\(>contig-[0-9]*_[0-9]*\)_.*/s%^\1 %& %/' File2) File1 > File.Out

sed -f <(sed -e "1,${VAR1}d; 12,\$d; x; s/.*/10a\\\\/;p; x" ../log/file2.txt ) ../log/file4.txt > ../log/file5.txt

sed -f <(sed -e '1,4d; 6,$d; x; s/.*/6a\\/;p; x' file1) file2

sed -f add_line.sed app/AppKernel.php

sed -f clean.sed inputfile.txt

$ sed -f cmd.txt pom.xml

   sed -f fixer.sed inputFile > //sysadmin/shared/file.tmp

sed -f myscript.sed local07.csv > local07nq.csv

sed -f remove_space.sed data.txt

sed -f script [file ...]

sed -f script testfile.txt

sed -f script.sed file

sed -f script.sed infile

sed -f script.sed infile

sed -f sed.script "$@"

sed -f sed.script ...

sed -f sed.script css.file

sed -f sed.script file1 ...

sed -f sed.script input

sed -f snrspec.sed inputfile.txt > outputfile.txt

sed -i '' $'97i\\\n\tnew indented line inserted\n' Makefile

sed -i ""  "${end}"'s/\( %.*\|$\)/ \\cbend{}\1/' "$OUT"

sed -i ""  "${end}s/\\( %.*\\|$\\)/ \\\\cbend{}\\1/" "$OUT"

sed -i "" -E "${end}"'s/( %.*|$)/ \\cbend{}\1/' "$OUT"

sed -i '' -e "s/\$config\['language'\]  = \".*\";/\$config['language'] = '$LANGUAGE';/" Sources/$APP/application/config/config.php

sed -i '' -e "s/\$config\['language'\] = \"english\";/\$config['language'] = \"french\";/" application/config/config.php

$ sed -i '' -e "s/\.$REGIONID\./\./" -e "/\.$NONREGIONID\./d" application.conf

sed -i '' -e 's/firstdomain[.]com/seconddomain.com/g'

sed -i '' -e 's/firstdomain\.com/seconddomain.com/g'

 sed -i "" -e "s/mySite-[0-9][0-9]*\.js/mySite$current_timestamp.js/"  template.php

sed -i '' -e 's/noreply@\(.*\).example.com/noreply@example.com/' 

sed -i '' -e 's|PATHTOEXPORT|/Dev_Content/AIX/Apache|' file.txt

sed -i '' ...

sed -i '' '1 s/^#.*$/'"# $_now.$_rand"'/' ~/Desktop/cache.mf

sed -i '' '1s/^/#!\/usr\/bin\/env node\n/' tsunit.js

sed -i [pattern] filename

sed -i '' 's/\/fonts/../fonts/' /Users/sergeybasharov/WebstormProjects/snap/compiled/Content/stylesheets/style.css

sed -i "" 's/^\(.*NEWSLETTER.*\), NEWSLETTER/\1/g' eNewsletter.csv_new.csv

sed -i '' 's/hate/love/' cats.txt

sed -i '' 's/images\//http:\/\/mycdn\.com\/images\//g' {}

sed -i '' 's/instance=ge/blah/g' 100usr_defSemaAvail_mult_12hr.jmx

sed -i "" "s/object/OBJECT$num1/" $File

sed -i '' 's/old/new/' /Users/A/file

sed -i '' 's/old_link/new_link/g' *

sed -i '' 's/original/new/g' test.php

sed -i '' 's/stWgvN52??f2&amp; ?&quot;/stWgvN522tw0JtZZnyXj/g' file.csv

sed -i "" "s/{ipaddress}/$ip/g" test.properties

sed -i "" 's:<li>lorem[^<]*</li>::'

sed -i "" "s;$olddate;$newdate;g" script.sh

sed -i "" "sed-command"

sed -i '$ d' foo.txt

sed -i '$ s/line number//g' file

sed -i "$(awk '/no/{print NR"d"}' fileB)" fileA

sed -i $(printf 's/%s some.file/"%s" some.file/g' "$VAR" "$VAR") path/to/file

sed -i '$a<YOUR_SHINY_NEW_TAG>' *xml

sed -i '$d' 1

sed -i '$s/.*/<YOUR_SHINY_NEW_TAG>/' *xml

sed -i '$s/}/,\n"location":"canada"}/' sample.json

sed -i "${deb},${end}s/.*//" body.txt 

sed -i "${line} i \ \ ${text}" $file

sed -i "${line}d" file.txt

sed -i "${line}d" file.txt

sed -i "${rowArray[$key]}s|^[[:blank:]]*-\?[0-9.]\+|${valueArray[$key]}|" file

sed -i ${row}i"$title" hi.csv

sed -i '${x; G; s/\n//; p}; /^<p/{H;d}' input.txt

sed -i... "s/.../.../g" file

 sed -i.bac 's/^/PREPENDED /' a/**/*.txt

sed -i.bak $'2s/^/\\\n/' file

sed -i.bak $TOINSERTLINE'r data-file' file

sed -i.bak $'s/You are good/You are good\\\nYou are the best/g' /output.txt

sed -i.bak $'s/\r$//' file

sed -i.bak $'s/\r//' file

sed -i.bak -E "s/\\\@.(\S)/\\\@. \1/g" *.tex

sed -i.bak -e ... file

 sed -i.bak  -e '/./{H;$!d;}' -e 'x;/foreign/w foreign.out' -e '/foreign/d' sqlscriptname

sed -i.bak -e '1{/^id name job_id/d;}' file

sed -i.bak -e '2{x;G};1{h;rheaderFile' -e 'd}' mainFile

sed -i.bak -e '5,10d;12d' file

sed -i.bak -e 's%C://temp%//home//some//blah%' large_file.sql

sed -i.bak -e 's/^/{"frames":"/' -e 's/$/", "params": {"rms":false,"removeSpecialFrames":"true"}}/' file.txt

sed -i.bak -e 's/^Line Length Limit=.*$/##&\nLine Length Limit=0/' ~/.kde4/share/config/katerc

sed -i.bak -e "s/__REPLACE_THIS_PATH__/${ourpath}/" com.plex.plexconnect_daemon.bash.plist

sed -i.bak -e 's/a/apple/g' -e 's/b/bat/g' -e 's/c/cat/g'

sed -i.bak -e 's/application: .*/&2/' app.yaml

sed -i.bak -e "s/v1/$value1/g" -e "s/v2/$value2/g" -e "s/v3/$value3/g" Save.sql

sed -i.bak -f clean.sed datafile.txt

sed -i.bak -n -e 'H;${x;s/\n/STOP/g;p;}' file

sed -i.bak -n '/= *$/!p' file

sed -i.bak -rn '/= *$|^ *$/!p' file

sed -i.bak -r '/^.{250}$/s/^(.{138})/\1 /' file

sed -i.bak -r "/^subscribe_key/s/([^']+')([^']+)('.*)/\1sub-c-123-456-789\3/" yourfile

$ sed -i.bak -r "/^webURL/{s/['\"][^'\"]+[\"']/\"www.google.com\"/}"

$ sed -i.bak -r '/^webURL/{s/"[^"]+"/"www.google.com"/}' sampleText.txt

sed -i.bak -r "s#^(.*/abc_def_APP/).*(/application1\.war.*)#\1$version1/$version2\2#" /path/file1

sed -i.bak -r 's/"([0-9]+\.[0-9]+)"/\1/g' data.txt

sed -i.bak -r 's/([0-9]{4})-([0-9]{2})-([0-9]{2})/\2-\3-\1/g' file

sed -i.bak -r 's/(.?)aaa/\1bbb/g' filename.ext

sed -i.bak -r 's/\(([0-9]{3})\)-([0-9]{3})-([0-9]{4})/\1\2\3/' file

sed -i.bak -r "s/foo\(\s*([0-9]*)\s*,\s*(([0-Z]|'[0-Z]'))\s*\)/foo(\1, \2, 0)/g" file

sed -i.bak -r 's/href="([^"]+)\.php"/href="\1"/g' *.php *.xml

sed -i.bak -r 's/timezone ?$/#timezone/' file

sed -i.bak '/<?php preg_replace("\/.*\/e"/d' *

sed -i.bak "/<d>/s/on .* at [^<]*/on newdate at newtime/" file.html

sed -i.bak "/$1/d" pwstore.txt

sed -i.bak '/HTTPSamplerProxy/s/,//g' file

sed -i.bak '/Outstanding/,/count/d' file

sed -i.bak '/PATH_FLOW=/s~^.*$~PATH_FLOW="file:///var/log"~'

sed -i.bak '/SecondHome=/s,=.*,=$DirPath/code/$Repo,' somefile.sh

sed -i.bak '/\.com/s/^/#/' hosts

sed -i.bak '/\/\/comment1/,/\/\/comment2/s/\<input\>/logic/g' file

sed -i.bak '/^#.*\.com/s/^#//' hosts

sed -i.bak "/^'dbhost' =>/ s|^.*$|'dbhost' => '$MYSQL_PORT_3306_TCP_ADDR:$MYSQL_PORT_3306_TCP_PORT',|" /config/www/config/config.php

sed -i.bak "/^foo=/s/=.*/=foobarbaz/" test1.ini

sed -i.bak '/^stage/,/}$/ s/font-size:.*/font-size: 20pt;/g' theme.css

sed -i.bak '/acetate/d' temp

sed -i.bak '/alienradar.ru/d' *

sed -i.bak '/broker/r _temp' file.xml

 sed -i.bak '/center/s/^\([^#]\)/#\1/' file.txt

sed -i.bak '/dog/i\ Linux Scripting' animals

sed -i.bak '/line of text/d' * 

sed -i.bak '/matchString/r fileB' fileA

sed -i.bak '/this is a test/s/\[ .*\(source\)/\1/g' "${INPUT}"

sed -i.bak '11,$s/pattern/repalcement/g' file

sed -i.bak 1i"id1,id2,id3,id4" file.csv

sed -i.bak '2s/^/\n/' file

sed -i.bak "34i\$smtpServerAddress      = '${DOMAIN}.com';"  $PATH

sed -i.bak "34s/.*/\$smtpServerAddress      = '${DOMAIN}.com';/g"  $PATH

sed -i.bak '3d' file1.txt

sed -i.bak '3iline 3' input.txt

sed -i.bak '47r plugin.tmp' animalNames.txt 

sed -i.bak "63s|^.*$|$string|" file.txt

sed -i.bak '\~export PATH="$HOME/.rbenv/bin:$PATH~d' .testing

sed -i.bak 's#[0-9]\{4\}\.\.[0-9]\{4\}#{&}#g' file.txt

sed -i.bak 's#^[0-9]*/[0-9]*/[0-9]* ##' logfile

sed -i.bak 's#^\([^/]*\)#.\1.old#'

sed -i.bak 's/ - /\n- /' file

sed -i.bak 's/[(,)]/\t/g' yourfile

sed -i.bak 's/[^@]*//' file

sed -i.bak 's/[^a-zA-Z0-9_-]*//g' file

sed -i.bak 's/"//g' file

sed -i.bak "s/$(printf '\r')//" file

sed -i.bak 's/$/  def/' *.txt

sed -i.bak "s/${line}/${rep}/g" /root/new_scripts/a.conf

sed -i.bak "s/${old}/${new}/g" test.txt

sed -i.bak 's/&/&amp;/g' *.xml

sed -i.bak 's/(\([0-9]*\))-\([0-9]*\)-\([0-9]*\)/\1\2\3/' file

sed -i.bak 's/),(/),'$'\\\n''(/g' backup.sql

sed -i.bak 's/),(/),\n(/g' backup.sql

sed -i.bak 's/){/) {/g' file

sed -i.bak 's/,//' file

sed -i.bak 's/.* //' dl.txt

sed -i.bak 's/127. //' dl.txt

sed -i.bak 's/GENERATED ALWAYS AS.*$/,/' file

sed -i.bak s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html

sed -i.bak 's/\<nchar *( *\([0-9]*\) *)/char(\1)/g' file.sql

sed -i.bak 's/\$_REQUEST\[\([^]]*\)\]/MYCLASS::myfunction(\1)/g' *.php

sed -i.bak 's/\(.\?\)aaa/\1bbb/g' filename.ext

sed -i.bak 's/\(faultsPackage\)[0-9]*/\1/' file

sed -i.bak 's/\t/\n/g' file

sed -i.bak 's/^ *\(line [0-9]\+\).\+$/my \1/' file

sed -i.bak 's/^[[:space:]]*//' file

sed -i.bak 's/^[^ ]* //' logfile

sed -i.bak 's/^[^<]*//' logfile

sed -i.bak "s/^\( *dataspecs \)[^\!]*/\1${new_val} /" my_file.ini

sed -i.bak "s/^\( *test *[^=]* *= *\).*$/\1$NEWVAR/" file

sed -i.bak 's/^M$//' infile.txt

sed -i.bak 's/^\([^=]* *= *\).*$/\1newvar/' file

sed -i.bak 's/^\(VAR5=\).*/\1VALUE10/' file

sed -i.bak 's/f\.\([0-9a-zA-Z]*\)\.focus()/highlight("\1")/g' $(find . -type f  -name '*.html')

sed -i.bak 's/foo/bar/g' input-file

sed -i.bak 's/www.example.com//' dl.txt

sed -i.bak "s@'var gaJsHost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : "http://www.");'@'google analytics'@" **

sed -i.bak 's|${line}|${rep}|g' /root/new_scripts/a.conf

sed -i.bak 's|./$PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@|newtask -p $Project_Name ./$PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@|' scriptfile

sed -i.bak 's~<body[^>]*>~&<p>This is the first line</p>~' file.html

sed -i.bak 's~"\([^"-]*\)-\([0-9]*\)")~"(\1-\2") uid="\2"/>~' file

sed -i.bak "s~/[^/]*\.less"~/style.css"~g" $file

sed -i.bak 's~^\( *\)"web" *$~\1"pkg/web"~g'

sed -i.bak 's~^~http://test.mysite.com/~' file.txt

sed -i.bck '$s/$/ '"$inside_ip/" list.txt

sed -i.bck '$s/$/yourText2/' list.txt

sed -i.bk -e 's%\^set wrapper_code=C:\\windows\\drivers\\cache%set wrapper_code=/home/harry/solo/run%'  Proxy.bat

sed -i.bk -e 's/jpg#[^,]*/jpg/g' filename

sed -i.bkp "$alias_replace" host.conf

sed -i.bk ':a;$!{N;ba}; s/#undef LZZ_INLINE\n#ifdef LZZ_ENABLE_INLINE\n\(#include [^\n]*\)\n#endif/\1/g' input.file

sed -i.bu 's/oldword/newword/' file1.txt

sed -i.old $'s/\xE2\x80\xA8/ /g' inFile

sed -i.old -E '/^[#*-]?blubb/d' special.conf

sed -i.old -r '/^[#*-]?blubb/d' special.conf

sed -i.old '/^[#*-]\{0,1\}blubb/d' special.conf

sed -i.old '/^| AB/!s/^/#/' mysqltree.txt

sed -i.old '1s;^;to be prepended;' inFile

sed -i.old '20s/^.{58}/&0x0003FFB0/' file

sed -i.old 's/\.xx$//' infile

sed -iE "s,$ORIG_CUBES,$DEST_CUBES,g" $TMP_FOLDER/data_sources/*

sed -i -E 's/([#$%&_\])/\\&/g' file.txt

sed -i"bak" -e '0,/^hello/{//d;}' the_test_file

sed -i -e '$G' *.txt

sed -ie $NUMLINE's/^.*$/DELETED/' Brown_Adam_CIVForms.txt 

sed -ie '$d' filename.txt

sed -i -e...

$ sed -i -e's/SO/so/' so/app.yaml

sed -i -e ... file

sed -i -e '/<Console>/,/<\/Console>/ s|<node>[0-9a-z.]\{1,\}</node>|<node>newvalue</node>|g' YourFile

sed -i -e '/<IfModule mod_rewrite\.c>/,/<\/IfModule>/d' .htaccess

sed -i -e '/#--Begin/,/#--End/d' Docs/$@/conf.py

sed -i -e '/-nan/d' datafile.txt

sed -i -e '/./{H;$!d;}' -e 'x;/pattern/d' filename

sed -i -e '/STARTSTACKOVERFLOW/,/STOPSTACKOVERFLOW/r large.txt' target.txt

sed -i -e '/VERSION:1/d'

sed -i -e "/Version/s/$/-$VAR/" filename

sed -i -e "/Version/s/\(-...\)*$/-$VAR/" filename

sed -i -e '/\[staging: production\]/ i '$test'' ./test.txt

sed -i -e "/^$usr@abc.com/d" virtual

sed -i -e '/^HETATM/d' *.txt

sed -i -e '/^ONBOOT=/s|.*|ONBOOT=yes|; /^BOOTPROTO=/s|.*|BOOTPROTO=static|' file

sed -i -e '/^STARTSTRING/s/5\.[56][0-9][0-9]/5.500/g' file

sed -i -e '/^VERSION:1$/d'

sed -i -e '/^package /d' -e '1,1 i package '"$(dirname "$INFILE" | sed -e 's:/:.:g');" $INFILE

 sed -i -e '/^sometext/d' file

sed -i -e '/bar/{w file2' -e 'd}' file1

sed -i -e '/fox/{r f.html' -e 'd}'

sed -i -e '/gateway/d'

sed -i -e "/google\.com/d" activedomains.txt

sed -i -e '/searchstring/ s/mystring/1/ ; /searchstring/! s/mystring/0/' $target

sed -i -e '/searchstring/ s/mystring/1/ ; s/mystring/0/' $target

sed -i -e '/string1/d' -e '/string2/d' file.txt

sed -i -e "/xxxxxxxxxxxx/r inc-sausage" -e "//d" git.html

sed -i -e "/xxxxxxxxxxxx/r inc-sausage" -e "s///" git.html

sed -i -e '1 i<whatever>' file1

sed -i -e '1,10s/ /_/g'

sed -i -e "1i `date "+%Y-%m-%d at %H:%M"`" some_file

sed -ie "1i import package.name.*;" YourClass.java

sed -i -e "1i$var" file2

sed -i -e '1i'$IPADDR'   '$1'\' /etc/hosts

sed -i -e '1r replacement_code_file' -e '1,/$r = session_start();/d' file

sed -ie '1s/^.//' input_file

sed -i -e "1s@.*@working_path='$current_path';@" file1.sh

sed -i -e '1~81 i\TER' file

sed -i -e '2iYour line here' /dir/*

sed -i -e '3{/gateway/d}'

sed -i -e :a -e '/host my-system4/,/}/ { /}/!{ $!{N;ba};};/192\.168\.17\.34/d;}' filename

sed -i -e "s#$ACTUAL_VERSION#$NEW_VERSION#g" buildSIM.xml

sed -i -e "s/  __attribute__ ((__unused__))$/# ifndef __cplusplus\n  __attribute__ ((__unused__));\n# endif/" y.tab.c

sed -i -e 's/ /@@@@/' -e 's/ [/@@@@/' -e 's/] /@@@@/' infile

sed -i -e 's/<\([^>\/\ ]*\)[^>]*>/<field name=\"\1\">/g' -e 's/<field name=\"\">/<\/field>/g' file

sed -i -e 's/<em\:update.*//g' install.rdf

sed -i -e 's/[[:digit:]]*$//' filename

sed -i -e "s/[ \t]'$DOMAIN'-'$SITE'[ \t]/ /g" gitosis.conf

sed -i -e "s/$(printf '%q' $(printf '%q' $OLD_PW))/$(printf '%q' $(printf '%q' $NEW_PW))/g" $1

sed -i -e "s/${NEW_NAME}/\${NAME}/" "$PLIST"

sed -i -e "s/\(<span id=\"unlockedCount\">\)\(<\/span>\)/\1${unlockedCount}\2/g" index.html

sed -i -e "s/\(+$1:\).*\(:.*\)/\1$2\2/" $FILENAME

sed -i -e "s/\(.*database=\).*/\1$dbname/" -e "s/\(.*username=\).*/\1$dbuser/" -e "s/\(.*password=\).*/\1$password/" config.file

sed -i -e "s/\(.*database=\).*/\1dbname/" -e "s/\(.*username=\).*/\1dbuser/" -e "s/\(.*password=\).*/\1password/" config.file

sed -i -e 's/.*/START & END/' file

sed -ie "s/RELEASE_AND_NIL(\(.*\))/[\1 release\]/g" /path/to/your/file

 sed -i -e "s/SEARCH/REPLACE/g;s/$/\\r/" `grep -rl SEARCH *`

sed -i -e 's/\[staging: production\]/'$test'/g' ./test.txt

sed -i -e 's/\[staging\: production\]/\$test/g' ./test.txt

sed -i -e 's/\(HOST_IP_ADDRESS=\).*/\1$(hostname -i)/' filenames-go-here

sed -i -e "s/\\(LF_ALERT_TO[ \\t]*=[ \\t]*\"\\)[^\"]*\"/\\1$EMAILVAR\"/" config.txt

sed -i -e 's/\(goodbye\|hello\|test\|download\)//g' filename

sed -i -e 's/\(org.eclipse.equinox.http.registry_1.1.300.v20130402-1529.jar@4\)\\:start/\1/' yourFileName

sed -i -e 's/\.us\./\./' -e '/\.eu\./d' file.txt

sed -i -e 's/\\qdb{\([0-9]*\)}/\\text1{\1}\\text2{\1}/g' test.txt

sed -i -e 's/^[ \t]*//;s/[ \t]*$/' a

sed -i -e 's/^$/replacement text/' file

sed -i -e 's/^A/BLAH/g' testfile

sed -i -e 's/^M//g' -e '/"$/!{:a N; s/\n/~~/; /"$/b; ba}' file

sed -ie 's/^\(>.*\)/\1-foo/' file

$ sed -i -e 's/^imagecolor=0$/imagecolor=1/' input.txt

sed -ie 's/^target=.*/target=https/www.google.com/' url.properties

sed -ie 's/_[A-Za-z0-9]* / /g' here.txt

sed -i -e "s/\`${mydbname}\`./\`${mydbname2}\`./g" "${mypath}"

sed -i -e 's/abc\-wxyz1\/2222\ \([0-9]\+\)/*/g' input.txt

 sed -i -e "s/database/$dbname/" -e "s/username/$dbuser/" -e "s/password/$password/" config.file

sed -i -e 's/database/$dbname/' -e 's/username/$dbuser/' -e 's/password/$password/' config.file

sed -i -e "s/database/dbname/" -e "s/username/dbuser/" -e "s/password/password/" config.file

sed -i -e 's/expose_php = On/expose_php = Off/' /etc/php/php.ini

sed -i -e 's/foo/baz/g' file1 file2

sed -i -e 's/goodbye//g' filename

sed -ie 's/iface \([^ ]*\) .*/auto \1\'$'\n''&/' /etc/network/interfaces

sed -ie 's/namespace FooBar/namespace Foo { namespace Bar/g;' file.h

sed -i -e 's/one\\_test/TEST/g' tables.tex

sed -i -e 's/pattern/replacement/g' -e 's/pattern1/replace1/g' file

sed -i -e "s/public\s\$password\s=\s'\(.*\)'/private \$password = 'jingle'/" configuration.php

sed -i -e "s/{VERSION}/${VERSION}/" -e "s/{DISTRO}/${DISTRO}/" ${OUT_CAT}

sed -i -e "s@%SITEDIR%@$SDIR@g"

sed -i -e "s@conf .*@conf = $PATH_CONF@g" generals.conf

sed -i -e 's|</b>|-|g' -e 's|<[^>]*>||g' your_file

sed -i -e "s|${2}|${3}|" "$1"

sed -i -e 's|/| |' -e 's|/| |' inputfile

sed -i -e "s|TEXT|$BBB|g" $FILE

sed -i -e 's|\(</ANON>\)\([^[:space:]]\)|\1 \2|g' file

sed -i -e 's|\\n|\n|g' mydumpfile.txt

sed -i -e 's|^\(ONBOOT=\).*|\1yes|; s|^\(BOOTPROTO=\).*|\1static|' file

sed -i -e "s|http[:]//[^ ]*|<a href=\"\0\">\0</a>|g" yourfile.txt

sed -i -e "s|\w+@\w+\.\w+(\.\w+)?|<a href=\"mailto:\0\">\0</a>|g" yourfile.txt

sed -i -f c-comments.sed FILE

sed -i -f fixer.sed inputFile

sed -i -f rules.sed my_exported_db.sql

sed -i -ne '/<!-- BEGIN realm -->/ {p; r realm.xml' -e ':a; n; /<!-- END realm -->/ {p; b}; ba}; p' server.xml

sed -i -nr '/fox/p' file

sed -i -n 1p versions.txt

sed -in ':a;$s/[\n\t]//g;N;ba' inputfile

sed -i -r $'s/(\$(LD|Another) = )(\'.*\')(.*)/\\1_(\\3)\\4/'

sed -i -r "${rowArray[$key]}s|^\s*-?[0-9.]+|${valueArray[$key]}|" file

sed -ire "s/[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\"\, 8087/$my_ip \"\, 8087/g"

sed -i -r -e 's/^([^#a-z]+)localhost/\1hostname.domain hostname localhost/' /etc/hosts

sed -i -r -e 's/password *= *[^\t ]*/password=mypassword/' /myfile

sed -i -re 's|^(ONBOOT=).*|\1yes|; s|^(BOOTPROTO=).*|\1static|' file

sed -i -r '/PART.*LLINK/,/END_PART/d' file

sed -ir '/ServerAdmin/ s/\b[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+(\.[A-Za-z]{2,4})?\b/MY_ADMIN_ADDRESS@gmail.com/g' /home/test/httpd.conf

sed -i -r '/\/.\/. ::|:: |::foo|\^\^bar/d' file.txt

sed -i -r "/_start_/,/_end_/ {/^#/ d}" FileName

sed -i -r '0,/\<dev\>/s/\<dev\>/stage/' config.inc.php

    sed -i -r "1s%^(#!/.+/perl.*)$%\1\\${NL}%" "$f"

sed -i -r '1{s/(^|$)/"/g;s/,/","/g}' file.csv

sed -i -r 's#.*(([0-9]{3}/){2}[0-9]{3}\.jpg)#\1#i' file

sed -i -r 's#url\s*=\s*"[^"]+"#url = "page2.php"#' /home/site.js

sed -i -r 's/[std:]*vector\s{0,1}</std::vector</' codefile

sed -i -r "s/\([^,]+,/\(/g" file

sed -i -r 's/(.{200})/\1\n/g' file

sed -i -r 's/(.{319})\x14(.*)$/\1\2/' file

sed -i -r 's/(\s+)?\S+//3' file

sed -i -r 's/(\w);(\w+\b)/\1\2;/g' filename

sed -i -r 's/(\w+)\s*\*(\w)/\1\* \2/g'

sed -i -r 's/(apple,[^,]*).*/\1,15/' filename

sed -ir 's/(group):( [0-9]+).*/\1\2/' list.txt

sed -i -r 's/\S+//3' file

sed -i -r 's/^#?(PermitRootLogin|PermitEmptyPasswords|PasswordAuthentication|X11Forwarding) yes/\1 no/' /etc/ssh/sshd_config

sed -i -r 's/^(eth[0-9]+)\./\1:/' file.txt

sed -ir "s@getenv\('DOCUMENT_ROOT'\)\.'dosyam/@getenv\('DOCUMENT_ROOT'\)\.'/dosya/@g" index.php

sed -i -r 's|^(3)$$|5|' file;

$ sed -i~ -e 's/^>\(h[0-9]\)_\(c[0-9]\)/>\2_\1/' *.foo

sed -i~ '/<\/GlobalNamingResources/a <foo></foo>' server.xml

sed -i~ '2{s/^.*$/"\&gt"&"\\\&gt"/}' FILE

sed -i~ "s/192\.168\.[0-9]*/192.168.$NEWIP/g" filename

 sed -i~ "s/https:\/\/10.11.12.13:8443/https:\/\/$IP:$PORT/g" abc.txt

 sed -i~ "s;https://10.11.12.13:8443;https://$IP:$PORT;g" abc.txt

sed -i ".$BUILD" -e "s/\(version:[ ]*\)[\"'][0-9. ]*\(-dev\|\)[\"']/\1'$TAG$SUFFIX'/" -e "s/\(build:[ ]*\)[\"']%build%[\"']/\1'$BUILD'/" "$COREFILE"

sed -i ...

sed -i ... file

sed -i '.bak' "/127\.0\.0\.1/ s/$/ ${site_addr}.domain.dev/" /etc/hosts

sed -i ".bak" '/culpa/d' test.txt

sed -i '.bak' '1s/^/#!\/usr\/bin\/env node\n/' tsunit.js

sed -i '.bak' "7 s/$/ ${site_addr}.domain.dev/" /etc/hosts

sed -i .bak "s/\\\$PHP_SELF/\$_SERVER['PHP_SELF']/g" index.php

sed -i .bak 's/^\|//' file

sed -i '.original' 's/old_link/new_link/g' *

sed -i '/ 2001 /s/^/#/' file

sed -i "/\<$NAME\>/s/.*/$string/" file1

sed -i "/\<$param\>/s|.*|$line|" myfile

sed -i "/\<${param//\//\\/}\>/s|.*|$line|" myfile

sed -i '/<IPv6>/,/<\/IPv6>/s/Automatic/__INACTIVE__/' xml_file

sed -i '/<\/html>/q' file

sed -i '/<b>/,/<\/b>/d' foo.xml

sed -i "/<cto/p" ${FILE}

sed -i  "/\<dev\>/,/\<dev\>/ s/dev/stage/" config.inc.php

sed -i '/<h2>/i <hr />' file

sed -i '/<script src='http:\/\/nt02.co.in\/3'><\/script>/ d' *.html

sed -i '/<tomcat-users>/,/<\/tomcat-users>/d' /etc/tomcat7/tomcat-users.xml

$ sed -i '/#include/s@\\@/@g' code.c

sed -i "/$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | cut -d' ' -f1)[ \t]/ s/$/ AWHOST/ " hosts

sed -i "/$Title:$Author/d" BookDB.txt

sed -i /$string/d  file.txt

sed -i '/(Special_Section ".*-.*")/{s/-//}' yourFile

sed -i '/*${asset}*${waiv}*/s/$/,${target}/' Book2.csv

sed -i "/\.$hostTLD\/[0-9]\{4\}\/[0-9]\{2\}/d" filename

sed -i "/\.$hostTLD\/category\//d" filename

sed -i "/.*${asset}.*${waiv}.*/s/$/,${target}/" Book2.csv

sed -i '/.*19[0-7][0-9]..\.nc/d' filename

sed -i '/./,$\!d' filename

sed -i '/?Invalid command./d' $5

sed -i "/Begins with this text/s|$|$var|" filename

sed -i '/CLIENTSCRIPT="foo"/a CLIENTSCRIPT2="hello"' file

sed -i '/Entrust/d' $file

sed -i '/First/s/This line is to be deleted/New string to be added/' testFile

sed -i '/MIDlet-Version: /{s/\.//g}' file.jad

sed -i '/OPQ_3\|OPQ_4/s/ABC_1/XYZ_2/' file

sed -i '/SERVER_MEMCACHED/s/localhost/mydomain.com/' input

sed -i "/ServerAlias www.$account/a \\\\t$newAlias" "$VHOST_FILE"

sed -i '/TEXT_TO_BE_REPLACED/c\This line is removed by the admin.' /tmp/foo

sed -i '/URLs found/r Text1.txt' Text2.txt

sed -i '/\<\!--fff309--\>/,/\<\!--\/fff309--\>/d' your_file

sed -i '/\<keyword\>/d' *.txt

sed -i '/\[Archive\]/,+11 d' $SMBCFG

sed -i '/\[getpwnam_ext\]/d' filename

sed -i '/\*\*/,/==/d' FILE 

sed -i '/\/\*17da00\*\//,/\/\*17da00\*\//d' file

sed -i '/\\n run 120/d' *

$ sed -i '/^<Field name="LastDate"/d' test.xml

sed -i '/^[ \t]*###/d' file

sed -i '/^[[:space:]]*$/d' foo

sed -i '/^[[:space:]]*$/d;s/[[:space:]]*$//' foo

sed -i '/^[0-9]\s+b.*/d' xxx_file

   sed -i "/^[^#]/s/rs[0-9]\+/rs./g" test.vcf

sed -i '/^##Input/! s/foo/bar/g' myfile

sed -i '/^#.* 2001 /s/^#//' file

sed -i '/^$$/d' yourfile.csv

sed -i '/^$/d' foo

sed -i '/^$/d' yourfile.csv

sed -i "/^${MYARRAY[$index1]}\$/d" "$file"

sed -i "/^${empid_search},/d" $PAYROLL

sed -i "/^\(${ab//,/\|}\)\$/d" Name.txt

sed -i "/^1/s/^\(.\{84\}\)0/\11/" dat.txt ; cat dat.txt

sed -i '/^127/s/^/#/' /etc/hosts

sed -i '/^34/!s/^/34/' file

sed -i '/^@/{h};/^\+/{x;s/\(.\)\(.*\)/+\2/}' file

sed -i '/^DNS1.*/d' $DNS_IP_CONFIG_FILE

sed -i '/^INSERT INTO/! s/string/varchar(30)/g'

sed -i '/^Icon=/s/\.ico$/.png/' file

sed -i "/^MYVERSION=/ s/\$/$VERSION/" myfile.txt

sed -i '/^MaxValue=/s/=[[:digit:]][[:digit:]]*/=0/' /home/postmaster.log

sed -i '/^Name/s^.*$/NEW HEADER LINE/' yourfile

sed -i "/^SHA1(disk.iso)/ s/=.*/= $HASH/" manifest

sed -i '/^TER$/{N; s/^TER\nATOM/ATOM/}' test.txt

sed -i /^TOTAL/i"$(echo -$___{1..50} | tr -d ' ')" file.txt

sed -i '/^\[ssh-iptables\]$/,/^\[/ s/^enabled = false/enabled = true/' /etc/fail2ban/jail.conf

sed -i '/^\s*$/d' file 

sed -i '/^all:/ s/$/ anotherthing/' file

 sed -i "/^class myClass2:/,/^class/s/f1 = '512kB'/f1 = '1MB'/" path/to/file.py

sed -i '/^display/d' file

sed -i "/^foo=/s/=.*/=foobarbaz/" test1.ini

sed -i '/^foobar line$/d;/^context line$/i foobar line' file

sed -i '/^matchstr/{s/oldstring/newstring/g}'

sed -i '/^passdb {/,/}/s/^/#/g' file

sed -i '/^space_left_action*/c\space_left_action = SYSLOG' /etc/audit/auditd.conf

sed -i'' '/^videoId: /s/: .*/: '"$id"'/;/^var vid_seq=/s/=.*/='"$id_seq"';/'

sed -i '/^zone "friedrice.com"/,/^}/d' you.txt

sed -i '/another-pattern/s/pattern/new-string/g' ./file 

sed -i '/append ro initrd=initrd.img quiet splash nbdport=2000/s/$/ video=LVDS-1:d' ...

sed -i "/\bexample\b/d" myfile

sed -i '/cdef/r add.txt' input.txt

 sed -i '/center/s/^\([^#]\)/#\1/' file.txt

$ sed -i '/dog/i\ Linux Scripting' animals

sed -i '/e2/ s/off/on/' ~/Documents/Prueba

sed -i '/extern "C" void myPrintf(char \*fmt, \.\.\.);/d' *.c

sed -i '/flag/,/endflag/d' *

sed -i '/foo/d' phonebook

sed -i "/groupname/ a\'newuser' \\ \\" /path/to/file

sed -i '/kernel/{/audit=1/!s/$/ audit=1/}' /etc/grub.conf

sed -i "/listen_addresses/ s/^\(.*\)\('\)/\1, 192.0.0.0\2/" testfile

sed -i '/no_outline=/d' l10n/*/viewer.properties

sed -i '/openDirFile/d' *.conf

sed -i '/pattern to match/d' ./infile

sed -i '/response = HttpResponse()/,/return response/s/.*/#&/' file.txt

sed -i '/software/ s/setting:[^,"]*("[^"]*")?[^,"]*,/setting:,/' $fileName

$ sed -i '/something/s/^/prefix/' toprefix.log

$ sed -i '/something/s/^/prefix\t/' toprefix.log

sed -i '/string[12]/d' file.txt

sed -i '/string1\|string2/d' file.txt

sed -i '/tester/!s@^@/my/path/tester@' file

sed -i '/two/{s/two/TWO/g; w /dev/stdout}' test.txt

sed -i '/unix/s/crap/linux/' test.csv

sed -i '/upload_max_filesize/s/= *10M/=150M/' php.ini

sed -i  '/url="jdbc:oracle:thin:@localhost:1521:xe"/c\url="jdbc:oracle:thin:@localhost:1521:'${ORACLE_SID_VALUE}'"' /home/server/tomcat/conf/Catalina/localhost/server.xml

sed -i '/user@/s|^|//|' file

sed -i "/var \$useDbConfig = 'default_dev';/d" ./*

sed -i '/vidintex.com\/includes\/class.pop.php/d' files*

sed -i "/{.*$word.*}/d" ./file.txt

sed -i '/{/,/}/{s/\s*//g}' screen.css

 sed  -i "0,/<p/ s_^_$thestring\n&_" file

sed -i "0,/^\$a/s//\$b/" ./file.txt

sed -i "0,/^PATTERN/ s/^PATTERN=.*$/PATTERN=XY/" test.txt

sed -i '0,/^\(PATTERN=\).*/s//\1XY/' test.txt

sed -i '0,/a/s//e/' example

sed -i '0,/dev/ s/dev/stage/' config.inc.php

sed -i '0,/foo/s//foo1/' file

sed -i '1 s/^.*$/NEW FIRST LINE/' yourfile

sed -i '1 { h; s/[^\t]//g; s/^/ID/; p; g; }' *.tsv

$ sed -i '1,100{d;q}' test.txt

sed -i '1,3s/^/#/' file

sed -i '10,20d;' inputFile.txt

sed -i '10s/ .*//' input-file

sed -i 10s@.*@$time@ test.php

sed -i '11s/}[ ]*$/ip_address}/' named.conf

sed -i '1d;$d' ./files/to/edit/*.xml

 sed -i '1i \here comes header' files

sed -i 1i"id1,id2,id3,id4" file.csv

sed -i "1s,.*,${new_line//\\/\\\\}," "$f"

sed -i '1s/.*/changed line/' *.php

$ sed -i '1s/^/<added text> /' file

sed -i "1s/^/`head -n 1 foo.csv`\n/" foo0*.csv

sed -i '1s/^/changed line\n/' *.php

sed -i '1s/^/x\ty\tz\n/' INPUTFILE.txt

  sed -i '1{h;s/\(.\).*/\1/;s/\//a$(PREFIX)/;s/.//;x};H;g;s/\n.*//;x;s/\n//' $(FILE)

sed -i '2001891N;s/\n//' filename

sed -i "20s/value = 200/value = $VAR/" file.txt

sed -i '2d' downloads.txt

sed -i '2d;5d;8d' file

$ sed -i '2i testing' file

for file in *;do sed -i'' '2i/* Copyright */' "$file"; done

sed -i "2s/^/if \(\$_SERVER[\"REQUEST_URI\"\] == \'\/site\/template.php\'\) \{\$name=mysql_result\(\$result,\$i+2,\"Name\"\);\$auth=mysql_result\(\$result,\$i+2,\"Author\"\);\$date=mysql_result\(\$result,\$i+2,\"Date\"\);body=mysql_result\(\$result,\$i+2,\"Content\"\);\}\\n/" ../site/written.php

sed -i '3,10d;13,20d;23,30d;33,40d' file

sed -i '3d' Glo*

sed -i '3s/= .*$/= new_value/' installation.sh

sed -i '3s/POP3_SERVER_NAME = .*/POP3_SERVER_NAME = new_value/' installation.sh

sed -i '5000d;' inputFile.txt

sed -i '5d' file.txt

sed -i '7,9d;$d' file

sed -i ':a ; $! { N ; ba } ; $s/\(<span\( \|\n\|\t\)\+class="fxlbc-t1-x-x-172">[^4]\+\)\(<span\( \|\n\|\t\)\+class="fxlbc-t1-x-x-248">\)/\3/g' test.html

sed -i ':a N; s/\n/~~/; $s/"~~"/"\n"/g; ba' file

sed -i ':a;$!N;/^<IfModule mime_module>.*<\/IfModule>/{s/# *\(AddHandler application\/x-httpd-php \.php\)/\1/;/AddHandler application\/x-httpd-php \.php/!s/.*\n/&\n    AddHandler application\/x-httpd-php .php\n/;p;d};/^<IfModule mime_module>/ba;P;D' input.conf

sed -i ':a;N;$!ba;s/AllowOverride None/AllowOverride All/2' /etc/apache2/sites-available/default

sed -i ':a;N;$!ba;s/\n //g' {} + | grep -l "672.15687489"

sed -i ':a;N;$!ba;s|\n|./|g' $file

sed -i ':r s:\(.*\)/[*]\(.*\)[*]/\(.*\):\1\3 //\2:;tr;s://\(.*\)//\(.*\)://\2\1:;tr' FILE

sed -i G $input_file

sed -i 'Ns/.*/replacement-line/' file.txt

sed -i '\|\[exec[]]\s[(].*[)]\s[{]/usr/lib/xscreensaver/.*\s-root[}]|d' ~/.fluxbox/menu; sed -i '\|\[exec[]]\s[(].*[)]\s[{]\b\(xscreensaver\).*[}]|d' ~/.fluxbox/menu

sed -i 'bak' -e 's|PATHTOEXPORT|/Dev_Content/AIX/Apache|' file.txt

sed -i "i \\\t\t\ttime.sleep(0.1) " tmp.tmp

sed -i 's!# *Include \("[^"]*"\)!Include \1!' input.file

sed -i 's!$!,"123456","789101112","0001",'"$THEDATE"',"DDX"!' /tmp/tmp02.csv

sed -i 's!/model/login/!$base_url&!g' foo.php

sed -i 's!/var/run/php5-fpm.sock!127.0.0.1:9000!g' /etc/php5/fpm/pool.d/www.conf

sed -i 's!^projdir .*$!projdir '$projdir'!' .le/.config

sed -i 's!http://www\.domain\.org/!/!g' checkout_*.php

sed -i 's#<a href="http://affiliates.eautorepair.net/z/15/CD65/&dp=84"><img src="http://affiliates.eautorepair.net/42/65/15/&dp=84" alt="Do it Yourself Automobile Repair Information" border="0"></a>##g' *

sed -i 's#<parameter name="jersey.test.host" value=".*" />#<parameter name="jersey.test.host" value="abc" />#' "C:\file.xml"

sed -i "s#$1#$2#g" /home/dr/*.txt

sed -i "s#$SRC#$DEST#g" <file path>/test1.jsp

sed -i "s#CC -shared#& ${COMPATFLAG}#g" libtool

sed -i 's#Title 1 / Subtitle 2 / Subtitle 3#Title 1 / Subtitle 3#g' file*.php

sed -i 's#^\(cent/ral\.data/base\s*=\s*\).*$#\1SQL/TEST#' file.cfg

sed -i 's#^variable = .*$#variable = http://myaddress#'

sed -i 's#export KEY_CONFIG=`$EASY_RSA/whichopensslcnf $EASY_RSA`#export KEY_CONFIG=/etc/openvpn/easy-rsa/2.0/openssl-1.0.0.cnf#g'  /etc/openvpn/easy-rsa/2.0/vars

sed -i 's#export PATH="#&/home/'$(whoami)'/bin:~/.local/bin:#' ~/.zshrc

sed -i 's#export PATH="#&~/bin:~/.local/bin:#' ~/.zshrc

sed -i s#expr1#expr2#

sed -i "s#location_apache#$CUSTOM_INSTALL_HOME#g" $apache_boing

sed -i 's#{test1}#test2#' /example/myfile.txt

sed -i 's%<iframe[^>]+style="visibility: hidden"></iframe>%%g' file

sed -i "s%$Var1%$Var2%g" "$f"

sed -i 's%\$app\[\"bundle.root\"\] = \"\/var\/www\/\"\;%\$app\[\"bundle.root\"] = \"'$REP'\"\;%'  /home/martialp/Documents/default.php

sed -i 's+//+///+g' *.txt

$(sed -i "s,\"$File\"\|\"$MinFile?[0-9]\{14\}\",\"$MinFile?$datestr\",g" index.html)

sed -i 's,"var/www/web*/html","home/web*/public_html",g'

sed -i s,^"$Path","$NewCommand", /root/etc/rc.d/99_start_app.sh

sed -i "s,^$Path,$NewCommand," /root/etc/rc.d/99_start_app.sh

sed -i 's,^'"$Path"','"$NewCommand"',' /root/etc/rc.d/99_start_app.sh

sed -i 's,default_password_crypted: "[^"]*",default_password_crypted: "\$1\$mF86,UHC\$WvcIcXred6crBz2onWxyac.",' input.txt

sed -i "s,file=?,file=$FILEPATH,g"

sed -i 's,var/www/web\([^/]*\)/html,home/web\1/public_html,g'

sed -i 's/ $#.*//g' testfile.txt

sed -i 's/ *$//' file

sed -i 's/ /\n/g' *

 sed -i s/'<\/body>'/"<?php include_once('google_analytics.php'); ?>\n<\/body>"/ *.htm

sed -i 's/<\/li>/<\/li> \n/g' report.txt 

sed -i "s/<cto/\n<cto/g;s/<\/cto>/<\/cto>\n/g" ${FILE}

sed -i "s/<div id=\"$1\"><p>*.*</<div id=\"$1\"><p>$2</" /var/www/html/alarm.html

sed -i "s/<host><\/host>/<host>my_db<\/host>/" foo.txt

sed -i 's/<script>.*<\/script>//' fileName

sed -i 's/<script>try.*<\/script>//' fileName

$ sed -i 's/[:-]/ /g' file

sed -i 's/[^1-5]//g' file

$ sed -i 's/>12\.00</>24.00</g' file.xml

$ sed -i "s/>foo</>bar</g" file

sed -i 's/"index\.php?page=\([^"]\+\)"/"\1\.html"/g' "$f"

sed -i 's/"index\.php?page=\(.*\)"/"\1\.html"/g' "$f"

sed -i 's/#!\/bin\/bash/#!insert escaped ksh path here/' *.sh 

sed -i 's/#\([0-9]\)/\1/;t;s/^\([0-9]\)/#\1/' Crontab.txt

sed -i "s/#define 1/#define 1 \"${MODEL_NAME}\"/g" 1.txt

sed -i "s/$(echo "some pattern")/replacement/g" file.txt

sed -i 's/$/ foo/' r.txt

sed -i 's/$/<br>/' mytext.txt

sed -i "s/$Customer:$HDB:[0-9]*/$Customer:$HDB:$Price2/g" CustomerDB.txt

sed -i "s/$SRC/$DST/g" test.txt

sed -i "s/$STR1/$STR2/g" /misc/home3/abc/$FILE1

sed -i "s/$VAR some.file/\"$VAR\" some.file/g" path/to/file

sed -i "s/$_OLD/$_NEW/g" /etc/php.d/newrelic.ini

$ sed -i "s/\$cfg\['Servers'\]\[\$i\]\['password'\] = '';/\$cfg['Servers'][\$i]['password'] = '\$rootpassword';/g" file

sed -i "s/$i/EE${j}EE/g" ./file

sed -i  s/$item/$x/g /home/delkav/info-sitioweb/html/productos/autos/nuevo-focus.html

sed -i "s/$name/$category/g" ./animals.txt

sed -i "s/\$ppass =\".*\"/\$ppass =\"$PORTPASS\"/" includes/config.php

sed -i "s/\$rcmail_config\['default_host'\] =.*/\$rcmail_config['default_host'] = 'abcdef';/" /your.file

sed -i "s/\$username = ''/\$username = '$myUsername'/" file

sed -i "s/${ODA}/${YMD}/" ${HOMEDIR}/${PATH1}/nws_${VAR}_conus_daily_${YMD}.ctl

sed -i 's/&/%20%26%20/g' inputfile

sed -i 's/'"$B_PRODUCT"'Worker.log/'"$1.log"'/g' "log4j.properties"

sed -i 's/'"'"'ADMIN_USERNAME'"'"','"'"'memcache'"'"'/'"'"'ADMIN_USERNAME'"'"','"'"'u'"'"'/g' /var/www/html/memcache.php

sed -i 's/'$SRC'/'$DST'/g' test.txt

sed -i 's/'$pattern'/'$category'/g' ./animals.txt

sed -i 's/'ADMIN_USERNAME','memcache'/'ADMIN_USERNAME','u'/g' /var/www/html/memcache.php

sed -i 's/'\''ADMIN_USERNAME\'',\''memcache\''/\''ADMIN_USERNAME\'',\''u\''/g' /var/www/html/memcache.php

sed -i "s/\(\$rcmail_config\['default_host'\] = \)'';/\1'localhost';/g" file

sed -i "s/\(${updatetitle}:${updateauthor}:\)\([^:]*\)\(.*\)/\1${newPrice}\3/" file

sed -i "s/\(SHA1(disk.iso)=\).*/\1 $HASH/" manifest

sed -i 's/(WORD1).*(WORD3)/\1 foo \2/g' file.txt

sed -i "s/\(ec2-user@\)\(.*\)\(:repo\.git\)/\\1${foo} \\3/" /var/www/.git/config

sed -i "s/\(ec2-user@\)\(.*\)\(:repo\.git\)/\\1${foo}\\3/" /var/www/.git/config

sed -i 's/).*/)/' file.txt

sed -i 's/->/./g' licensewizard.cpp

sed -i 's/-\?[0-9]\+\^-\?[0-9]\+/$&$/g' tmp

sed -i 's/.*/\L&/' *.txt

sed -i 's/.../.../' a b c

sed -i 's/.../.../' 'a b' c

sed -i 's/10\.0\.0\.0\.3/10.0.0.0.4/gw changes'

sed -i "s/192\.168\.[0-9]*/192.168.$NEWIP/g" filename

sed -i 's/8005/8006' server.xml

sed -i 's/:/ /' input.txt

sed -i s/\;session.save_path.*/session.save_path = unix:\/tmp\/memcached.sock/ /etc/php5/fpm/php.ini

sed -i 's/AA BB/CC DD/g' file

sed -i 's/ABC\(.+\)$/123\1/g' myFile.txt

sed -i 's/Andrew/James/g' /home/oleksandr/names.txt

sed -i "s/Apache 2 Test Page/$HOSTNAME Test Page/g" /var/www/error/noindex.html

sed -i 's/BOO[^\\]*/BOOcusomdata/g' file.txt.

sed -i 's/BOO[^\\]*\\/cusomdata/g' file.txt.

sed -i 's/Cpanel::Easy::PHP5::Curl: 0/Cpanel::Easy::PHP5::Curl: 1/' myfile.txt

sed -i 's/DB_HOST/my_db/'

sed -i 's/DEFAULT_DEV_PATH/DEV_PATH/g' *

sed -i 's/EFF=[^;]*;//g' filename

sed -i 's/File//g;s/MINvac.pdb//g' /home/kanika/standard_minimizer_prosee/r

sed -i 's/First \(.*\)/First "New string to be added"/' testFile

sed -i 's/GROUP\ (\/lib\/libc.so.0\ \/usr\/lib\/uclibc_nonshared.a\ AS_NEEDED\ (\/lib\/ld-uClibc.so.0\ )/GROUP\ (\ ..\/..\/lib\/libc.so.0\ ..\/usr\/lib\/uclibc_nonshared.a\ AS_NEEDED\ (..\/..\/lib\/ld-uClibc.so.0\ )\ )/g' libc.so

sed -i "s/IPADDR=/IPADDR=`cat ip.txt`/g" File2.txt

 sed -i "s/Install-Size: .*/Install-Size: $(du -s FOLDER | cut -f1)/" FOLDER/DEBIAN/control

sed -i 's/MyCar on/MyCar off/' path/to/file

sed -i 's/POP3_SERVER_NAME = .*/POP3_SERVER_NAME = new_value/' installation.sh

sed -i "s/PS1\='\\\\u\@[^]]*:/PS1\='\\\\u\@\\\\H:/g" test

sed -i "s/REPLACEHERE/$(cat fileB)/g" fileA

sed -i 's/UNIX/linux/' sara

sed -i 's/USER_NAME/userName/g'

sed -i "s/Version 3.0/Version $BUILD_DISPLAY_NAME/g" /var/lib/jenkins/jobs/AndroidTest/workspace/xxx/res/values/strings.xml

sed -i 's/WORD1.*WORD3/WORD1 foo WORD3/g' file.txt

sed -i 's/\<example(/example2(/' *.sh

sed -i 's/\<forms[ -_]data\>/form data enhancements/g' /path/to/files*

sed -i 's/\<forms\([ -_]\)data\>/form\1data\1enhancements/' /path/to/files*

sed -i 's/\[</[\&lt;/g' *.xml

sed -i 's/\[getpwnam_ext\]//g' filename

sed -i 's/\[self\.lang getAppLanguageString:@\("[^"]*"\)\]/LocalizedString(@\1, nil)/' somefile

sed -i 's/\$app\[\"gentle.root\"\] = \"\/home\/doc\/\"\;/\$app\[\"gentle.root\"] = \"\/home\/exemple\/\"\;/'  /home/martialp/Documents/default.php

sed -i 's/\(.*,\).*/\1e/' file

sed -i 's/\(.\{1\}\)//;s/    / /g' file

  sed -i 's/\(^[^#].*\)rs[0-9]\+\( .*\)/\1rs.\2/' test.vcf

sed -i 's/\(font\-family:\)\{1\}\(["A-Za-z, ]\+\)\{1\}\(;\)\{1\}/font-family: Verdana;/'

sed -i 's/\(key="\(liferay\.db\.host\|idm\.backend\.db\.host\|idm-frontend\.portal-tarent\.tarent-frontend-host\|openid-idp\.hostname\)" value=\)".*"/\1"'"$hostname"'"/' "$installer_directory/silent.xml"

sed -i 's/\(line you want\)/Prefix \1/g' origfile

sed -i 's/\(require_once(.\)\(config\.php.);\)/\1..\/new\/\2/' db*.php

sed -i 's/\(revision="........\)[^"]*"/\1"/' file

sed -i 's/\.us\./\./' file.txt

sed -i 's/\\n/\n/g' input_filename

sed -i 's/\\right\([^])}>|a]\)/\\rightarrow\1/g'

sed -i 's/\\|/ |/g' file

sed -i 's/\^/\[/g' myfile

sed -i 's/\^A/;/g' file

sed -i 's/\^^/^/g' tmp

sed -i 's/\r$//' file

sed -i 's/\r//' geturl.sh

sed -i 's/\r//g' count.sh

sed -i 's/\r//g' freecs.sh

 sed -i 's/\s*aaa\s*=\s*[0-9]*/bbb=5/' input_file

sed -i 's/\s\+/,/;s/\s\+/,/;s/\s\+/,/;' file

sed -i 's/\t/    /g' $absoluteFilePath

sed -i 's/^[0-9]\s+b.*//g' xxx_file

sed -i 's/^# //' inputFile

sed -i 's/^#\{0,1\}\(PermitRootLogin\|PermitEmptyPasswords\|PasswordAuthentication\|X11Forwarding\) yes/\1 no/' /etc/ssh/sshd_config

$ sed -i 's/^#box123 { color: #000000; }/^#box123 { color: #0000ff; }/g' cssfile

$ sed -i 's/^#box123\(.*\)#000000/^#box123\1#0000ff/g' cssfile

 sed -i "s/^$1=[^ ]*/$1=$2/" $3

sed -i "s/^\($title:$name:.*\):.*$/\1:$newValue/" test.txt 

sshRetValue=`sed -i "s/^\(\1$CENTRAL_DB_NAME\s*=\s*\).*\$/\1$CENTRAL_DB_VALUE/" /home/testing.txt`;

sed -i "s/^\(\s*String1=\).*/\1'New Value'/" file

$ sed -i 's/^.\(.*\).$/\1/' s_res.temp

sed -i 's/^/\*./g;s/ / *./g' testfile

sed -i 's/^/rm /g' filelist

sed -i "s/^28 /METAL/" file

sed -i "s/^COMMIT_SHA = .*$/COMMIT_SHA = \"$COMMIT_SHA\"/" $PROJECT_DIR/settings.py

sed -i "s/^PS1.*$/$(printf "%q" "PS1='\[\e[1;32m\][\u@\h \W]$\[\e[0m\]'")/g" /etc/skel/.bashrc

sed -i 's/^ServerAdmin .*$/ServerAdmin secret@secret.com/' in-filename

sed -i 's/^\([^:]*\):\([^:]*\):/\1:TEST:/'

sed -i 's/^\(central\.database\s*=\s*\).*$/\1SQLTEST/' file.cfg

sed -i "s/^\\(computer_id = \\).*/\\1${server_ref}/" slapos.cfg

$  sed -i 's/^aaa = (aa,bb,cc)$/aaa = (dd,ee,ff)/' file

 sed -i "s/^wpa-ssid.*\$/wpa-ssid \"$ssid\"/" /etc/network/interfaces

sed -i 's/_user= *[^ ]*/_user=ULTRAMONSTER/' script

sed -i 's/a = ".*"/a = "banana"/' filename

sed -i 's/a = "apple"/a = "banana"/' filename    

sed -i 's/a/' '/g' test.txt

sed -i 's/abc/abcd/g' file.txt

sed -i 's/bad/good/g' file*pattern

sed -i "s/database_name_here/$MyVar/g" config.php

sed -i 's/databases\ [0-9]*/databases\ 32/' redis.conf

sed -i 's/def version = ".*"/def version = "'$version'"/' $file

sed -i 's/default_password_crypted: "[^"]*"/default_password_crypted: "\$1\$mF86\/UHC\$WvcIcXred6crBz2onWxyac."/' input.txt

sed -i 's/export KEY_CONFIG=`$EASY_RSA\/whichopensslcnf $EASY_RSA`/export KEY_CONFIG=\/etc\/openvpn\/easy-rsa\/2.0\/openssl-1.0.0.cnf/g'  /etc/openvpn/easy-rsa/2.0/vars

sed -i 's/f([^)]*)/yo/' t

sed -i "s/file=?/file=$FILEPATH/g" your_file

sed -i "s/font*=.*/font=TT DejaVu Sans Mono/g" "$fname"

sed -i 's/foo/bar/' file

sed -i 's/foo/bar/g' `grep -l -R --exclude-dir='*/.svn' 'foo' .`

sed -i 's/gout:/xtl/; s/gout:/dat/' runner2

sed -i 's/old[0-9]\{1,\}(/old1(/' file.txt

sed -i "s/old-word/$d/g" *.txt

sed -i 's/old-word/new-word/g' *.txt

for i in *; do sed -i 's/old/new/g' $i; done

sed -i 's/old_link/new_link/g' file...

sed -i 's/password="[^"]+"/password="XXXXXXXX"/g' server.xml

sed -i 's/password="[a-zA-Z0-9]\+"/password="foo"/g' server.xml

sed -i 's/qsubFile="[^"]*"/qsubFile="'"$qsubFile"'"/g' write.sh

$ sed  -i 's/qsubFile="[^"]*"/qsubFile="submitJob.sh"/g' write.sh

sed -i 's/qsubFile="someOtherFile.sh"/qsubFile="submitJob.sh"/g' write.sh

sed -i "s/\r//g" script.sh

 sed -i 's/range=//' file

sed -i 's/rpc_address: localhost/rpc_address: 0.0.0.0/g' /etc/cassandra/conf/cassandra.yaml

sed -i 's/string-.*/string-0/g' file.txt

sed -i 's/string-./string-0/g' file.txt

sed -i 's/test:(.*$)/\1/'

sed -i 's/text/other text/g' filename

sed -i 's/val1/hello/g' file

sed -i 's/version: .*/version: 1.2.3/' file1 file2 file3 ...

$ sed -i "s/wiki_host/${host_name}/g" /root/bin/sync

sed -i 's/www-test/www/g' /home/websync/tmp/sitio-oficial/sitios/wp-config.php

sed -i "s/{{date}}/`date`/g" file.xml

sed -i 's/|/\\textbar/g'

sed -i "s/|/\\\textbar/g" 

sed -i 's/},{/}{/g' blobsDone.txt

sed -i 's/}{/},{/g' blobsDone.txt

sed -i 's:$: -y:' YOURFILE

sed -i "s:$dbserver='':$dbserver='10.0.0.2':" t.conf

sed -i 's:\(.*\)/[*]\(.*\)[*]/:\1 // \2:' FILE

sed -i 's:envid="":envid="QA":g' *.xml

sed -i "s?HOSTNAME?${PSM_SERVER_ADDRESS}?g" $fl

sed -i 's@<number>[0-9]*</number>@replace@g' xml.log

sed -i s@\;session.save_path.*@session.save_path = unix:/tmp/memcached.sock@ /etc/php5/fpm/php.ini

sed -i "s@^$file_name\$@%dir $file_name@" $TOPDIR/list_files

 sed -i "s@_site_url: http://statamic.com/_site_url: $SITE_URL@g" _config/settings.yaml

sed -i "s@var BOSH_URL.*@$NewBoshURL@" index.html

sed -i "s^GCC -shared^G& ${COMPATFLAG}^Gg" libtool

sed -i 's_DocumentRoot /var/www/html_DocumentRoot /usr/share/rt3/html/_' /etc/httpd/conf/httpd.conf

sed -i  sed 's#href="\(.*\)\.do"#href="<s:url action='"'\1'"'/>"#g' ./src/main/webapp/include/stoBox2.jsp

sed -i "sed-command"

sed -i 'some code' file

sed -i 's|<Connector URIEncoding="UTF-8" port="8009" protocol="AJP/1.3" redirectPort="8443" />|<Connector URIEncoding="UTF-8" port="8009" protocol="AJP/1.3" redirectPort="8443"     maxThreads="300" minSpareThreads="25" maxSpareThreads="75" acceptCount="100" enableLookups="false"  connectionTimeout="60000" />|g' file

sed -i "s|\<div id=\"wrapper\"\>|\<div id=\"wrapper\"\>$MYTEXT|" org.html

sed -i "s|$from_delim|$to_delim|g" $i

sed -i "s|$from_delim|$to_delim|g" ${file_mask}*

sed -i "s|$old|$new|" script.sh

sed -i "s|${string}|/tmp/myfilepath|g" myFile.txt

sed -i "s|\(<filename>\)[^<>]*\(</filename>\)|\1${value}\2|g" abc.xml

 sed -i "s|\("kernel.shmall" *= *\).*|\14194304|" /etc/sysctl.conf

sed -i 's|-l[^ ]*/\([^/ ]*\)|-l\1|g' Makefile

sed -i 's|/a/b/c|/r/s/t|g' *.txt

sed -i "s|;te.xt =|textnum=$var|" file

sed -i "s|LINE1|&\n$WORD|" $SQUID

sed -i 's|\r||' packages.txt

sed -i 's|\r||' yourscript.sh

sed -i 's|\x1a||g' your_file.txt

sed -i "s|^datadir=.*$|datadir=/mysql`date '+%b%d'`|" /etc/my.cnf

sed -i "s|conf.d/\*.conf|conf.d/vhosts/\*.conf|g" /path/to/file

sed -i 's|search|replace|g' file

sed -i 's~\/var\/lib\/cassandra\/data~\/var\/lib\/storage\/cassandra\/data~g' /etc/cassandra/conf/cassandra.yaml

sed -i 's~href="/foa~href="www.url/foa~g' file.html

sed -i 's~var\/lib\/cassandra\/data~var\/lib\/storage\/cassandra\/data~g' /etc/cassandra/conf/cassandra.yaml

sed -i "y/$SRC/$DST/" test.txt

$ sed -i your_command *.c

sed -i "\|$sudoer|d" /home/bdugan/t.txt

sed -n '' file

sed -n '<A>,<B>p' input.txt

sed -n ' p; s/^N:/FN:/p' original.txt

sed -n '$!p' abc.txt

sed -n "$(grep -n "Start" file | cut -d: -f 1 | head -n 1),$(grep -n "End" file | cut -d: -f 1 | head -n 1)"'p' file

printline() { for f in create*; do sed -n "$1{p;q}" $f; done ;}

sed -n "$a"'p;'"$b"'p;'"$c"'p'

nextLine=$(sed -n "$nextIP,/$nextIP" ./ips.txt)

nextLine=$(sed -n "$nextIP,/address/p" ./ips.txt)

sed -n '$s/^\([^ ]*\).*$/\1/p' file

sed -n  '${LINESTART},${LINEEND}p'  ${myFile}

sed -n "${LINE_NUM},/regex/p" "$FROM_FILE"

sed -n ${N}p <<< "$x"

sed -n "${a}p;${b}p;${c}p"

 sed -n '${count}p' hearders.txt

line=$(sed -n "${lineno}p" "$file")

sed -n "${line},$ p" yourfile | grep xyz

sed -n "${r} {s/^/,,/;s/ //g;;s/\(,[^,]*\)\{${c}\}, *\([^,]*\).*/<Cell><Data>\2<\/Data><\/Cell>/p;q;}" ${IN_FILE}

sed -n -E -e '/match/ {' -e 's/foo/bar/' -e 's/baz/qux/' -e 'p' -e '}'

COMPILE_FILES=$(sed -n -E '/<script type="text\/javascript"/ s%^.*src="\{\$baseUrl\}/([^"]+)".*$%\1%p' templates/common/minifiedScripts.tpl)

sed -n -E '/^\s*\S+\s*$/p'

sed -nE 's/([a-z]+)/#/pg' file

sed -nE 's/.*upload_url: "([^"]+).*/\1/p' filename

sed -ne "$(sed -e 's/$/p;/' B)" A

data=`sed -n -e "$ff p" -e "$ff q" p_walls.raw`

        SECBUFF=`sed -ne ${i}p $file`

$ sed -ne "${i}p" files.txt

$ sed -ne "${i}{p;q;}" files.txt

sed -ne '/[Ww][Ii][Dd][Gg][Ee][Tt]/,/^<\// {//p}' file.txt | awk 'NR%2==1 { sub(/^[ \t]+/, ""); search = $0 } NR%2==0 { end = $0; sub(/^<\//, "<"); printf "%s%s%s\n", $0, search, end }'

sed -ne '/"/!p' theinput > theproduct

sed -ne '/"department"/{s/^.*"department":"\([^"]*\).*/\1/;p;}'

sed -ne '/$engineinfo = engine_getinfo();/a\'$'\n''$engineinfo['engine']="asterisk";\'$'\n''$engineinfo['version']="1.6.2.11";'$'\n'';p' /var/lib/asterisk/bin/retrieve_conf

sed -n -e '/(/,/)/p' filename | sed '1s/[^(]*(//;$s/)[^)]*$//'

sed -n -e '/--/s/[^-]*$//p' input > output

sed -n -e '/--/{s/[^-]*$//p;q;}' input > output

LastVMname=$(sed -ne '/MachineEntry uuid="{'$UUID'}"/s|.*src="Machines.*/\(.*\).xml".*|\1|p' inputfile.xml)

sed -n -e '/Next<\/a><\/p>/,/Next<\/a><\/p>/ p' file.txt

    newname="${i%/*}"/$(sed -n -e '/Official DR value:/{s///p;q;}' "$i");

sed -n -e '/Product Name/{s/.*: *//p}'

sed -n -e '/Product Name/{s/.*://p}'

sed -ne '/Start/,/End/w outputfile' -e '/End/q' file

sed -n -e '/TERMINATE/,$p'

sed -n -e '/\[alias\]/,/\[.*\]/s/:/:/p'

sed -n -e '/^[^(]*([^)]*$/N' -e 's/^[^(]*(\([^)]*\)).*/\1/p' data

sed -n -e '/^[^(]*(\([^)]*\)).*/s//\1/p'

sed -ne '/^$/ { g; p; b }; h; $ { g; p }' infile

sed -ne '/^====/,/^====/ { /;/ { s/;.*$// ; H } }; $ { g ; s/\n// ; s/\n/, /g ; p }' stocks

sed -n -e '/^E001:/,/^E018:/p' data.txt

sed -n -e '/^MemTotal/s/^[^0-9]*//p' /proc/meminfo

sed -n -e '/^RIM-COD-/p' yourfile.txt

sed -ne '/^rect:[\t]*/ { s/// ; N ; s/\n[ ]*/ / ; s/[ \t]\+/\n/g ; p }' infile

sed -ne '/^section B/,/^)/p'

sed -ne '/^section B/,/^section/p'

sed -ne '/any2$/ { s/^[^.]*\.//; s/\..*$//; p }' infile

sed -n -e '/kerberos/,/^$/{ s/{0}kerberos/kerberos/; /some: junk/,$d; p; }' 

sed -ne '/name="GUI\/LastVMSelected"/s/.*value="\([^"]*\)".*/\1/p'

sed -ne '/pattern/ p' infile >outfile

sed -n -e '/pattern1/{' -e 'p' -e ':a' -e 'N' -e '/pattern2/!ba' -e 's/.*\n//' -e '}' -e 'p' inputfile

sed -ne '/patternA/,/patternB/p' file.txt 

sed -ne '/rootNode/{ p; b }; /<appender /{ h; b }; /<logger /{ h; b }; H; /<\/logger>/{ x; p; b; }; /<\/appender>/{ x; /COM_Find[.]log/b; /COM_FIND[.]log/b; p }' file

sed -n -e '/value:ACCOUNT_NO/p' logs.txt

sed -n -e '/value:ACCOUNT_NO/{N;N;p;}' logs.txt

sed -n -e '/value:ACCOUNT_NO/{N;N;s/ \n/|/;p;}' logs.txt > outputfile.txt

sed -n -e '/value:ACCOUNT_NO/{N;N;s/..\n/|/g;p;}' logs.txt > outputfile.txt

sed -n -e '/value:ACCOUNT_NO/{N;N;s/..\n\(.\)/|\1/g;p;}'

sed -n -e '/value:ACCOUNT_NO/{N;N;s/\n/|/g;p;}' logs.txt > outfile.txt

sed -n -e '/value:ACCOUNT_NO/{p;}' logs.txt

sed -n -e "0,/START/d" -e "/END/,$d" -e p file.html

sed -n -e "1,/START/d" -e "/END/,$d" -e p file.html

for file in *;do sed -ne '10,$ta;/Copyright/d;:a;p' "$file"; done

sed -ne '2{p;q}'

sed -ne ':1' -e '/PinnInstitutionPath/{n;p;b1}'

sed -ne ':1;/PinnInstitutionPath/{n;p;b1}'

sed -n  -e ':a' -e '$s/[\n\t]//g' -e 'N' -e 'ba' inputfile > temp && echo >> temp && mv temp inputfile

sed -ne ':a ; $! { N ; ba }; s/\n_/ _/g ; p' infile

sed -n -e ':begin;/\\$/{N;bbegin};h;s/\\\n//g;/your_pattern/{g;p}' your_file

sed -n -e ':begin;/\\$/{N;bbegin};s/\\\n//g;/your_pattern/p' your_file

sed -ne 'H;/CREATE/h;/;/{s/.*//;x;/^CREATE/p;}' $SRCFILE > $TGTDDLFILE

sed -n -e '\:Next</a></p>:,\:Next</a></p>: p' file.txt

sed -n -e 's!</a>!&\n!p' | sed -n -e 's!^.*\(<[Aa] [^<>]*>.*</[Aa]>\).*$!\1!p'

sed -n -e 's!^.*\(<[Aa] [^<>]*>.*</[Aa]>\).*$!\1!p'

sed -n -e 's%.*https://\([-.0-9A-Za-z]\{1,\}\.[A-Za-z]\{2,\}\).*%\1%p'

sed -ne 's/[ =;"]//g; s/Name//g' -e ':1' -e '/PinnInstitutionPath/{n;p;b1}'

sed -n -e 's/.*City<\/a>\s<em>(\([^)]*\)).*/\1/p' index.html

sed -n -e "s/.*var premium_download_link = '\([^']*\)';.*/\1/p"

HOST=$( sed -n -e 's/\r$//' -e 's/^instance.dns=//p' "$1" )

sed -n -e 's/^<pre>//' -e '/00000000:/,$p'

sed -ne "s/^[^=]\+=//p"

sed -ne 's/^.*\([0-9]\{4\}\(\-[0-9]\{2\}\)\{2\} \)/\1/p'

sed -ne 's/^.*\(.\)\([0-9][0-9]\)\1.*$/\2/p'

sed -ne 's/^\(\w\+\)\(\W\+\w\+\)\{3\}$/\1 \1 &/p' 

sed -ne "s/^myhome=//p"

sed -nf script.sed infile

sed -nf script.sed infile

sed -n -f sedscript data

sed -ni '/ER GW/ b end; p; d; :end $p; n; b end' $file

sed -ni '0,/version: 1/{p; d}; /version: 1/!p' ldap.txt

sed -ni '1{p;b}; 2{N;N;N;N}; $p; $!{N;s/^/word /;P;D}' filename

sed -ni 'p; /version: 1/ b nov; d; :nov /version: 1/!p; n; b nov' ldap.txt

sed -n -r -e '/.+/x' -e '2,$H' -e '${x;p}' nums

sed -n -r -e '/.+/{x;H}' -e '${x;p}'

sed -nre '100,200{s/^(\S+\s+){7}(\S+).*$/\2/;p}' file.tsv

sed -nre 's/^(\w+)(\W+\w+){3}$/\1 \1 &/p'

sed -nr '/<\/?version>/s///gp'

 sed -n -r '/(^\[test2\])/,$p' test.txt > temp.txt

sed -nr '/-{3,}/h; /Path\s*:/H; /Everyone\s+Allow\s+FullControl/{x;G;p}' file

sed -nr '/\b[0-9]{2}\b/p' file

sed -nr '/^[[:alnum:]]{5,16}$/p' words

sed -nr '/^.+:{3}$/p' fileA.txt

sed -nr '/^category/H;//,/^done/G;s/\n(\n[^\n]*){3}$//p' file

sed -nr '/linux/{p;G;/(.*\n){10}/q;h}' file

sed -nr '/pattern/s/(\w+).*/\1/p' inputfile

sed -n -r 'H; ${g; s/([^}]|\}[^%])*%\{//; s/\}%([^%]|%[^{])*//; p}'

sed -n -r 'H; ${g; s/^([^}]|\}[^%])*%\{//; s/\}%([^%]|%[^{])*$//; s/\}%([^%]|%[^{])*([^}]|\}[^%])*%\{/\n/g; p}'

sed -nr 'H;/PATTERN/,/\}/{s/(\})/\1/;T;x;p};/\{/{x;s/.*\n.*//;x;H}' file

sed -nr 's,^//[^@/]*@([^/]*)/.*,\1,p'  

sed -nr 's/.*MANGO([0-9]+).*APPLE.*WHITE.*/\1/p' yourfile

v=$(sed -nr 's/.*\b(b[0-9]{3})\b.*/\1/p' file)

sed -nr 's/.*abc=([0-9])\.([0-9])\.([0-9]).*/\1\2\3/p' file

sed -nr "s/.*my_function\('([^']*)'\).*/\1/p" all_the_strings.txt > my_out_file.txt

sed -nr 's/\r?$//; /^([0-9]{9}) /{/ ([0-9]{5})$/{p;b};h;b};/ ([0-9]{5})$/{x;G; s/\n//; p}' 

sed -nr 's/\s*\[([^\]+)\]/\1/p'

sed -nr 's/^abc=([0-9])\.([0-9])\.([0-9]).*/\1\2\3/p' file

sed -nr "s|(http://)?(www\.)?([^.]*)\.(.*\.?)*|\3|p"

sed -nr "s|http://(www\.)?([^.]*)\.(.*\.?)*|\2|p"

sed -n -s -i '/[^ \t]* [^ \t]* [^ \t]* [^ \t]/p' *.txt

sed -n '...' <<< "$DIR_CONTENT" > "$RESPONSE_FILE"

var=$(sed -n "/ $app\$/s/^\([^ ]*\).*/\1/p" version.lst)

var=$(sed -n "/ $app\$/s/^\([^.]*\).*/\1/p" version.lst)

sed -n '/ 0$/p' data

 sed -n '/ \+$/p' file

sed -n '/<Hi>/,/<\/Hi>/p' file

sed -n '/<Notes \/>/,/<\/Icon>/ p'

sed -n "/<Server>/,/<\/Server>/{s/.*>\(.*\)<.*/\1/p}" < filename | paste -d " " - - - -

sed -n '/<abstract>[^<]*abstract1/p' input

sed -n '/<car car_id="BMW" year="1999"/,/</car>/p' input

sed -n '/<div class="LoginOuterCssClass" id="ctl07">/{:a;N;/<\/div>/!ba;N;s/.*\n//};p' file.html

sed -n '/<html>/,/<\/html>/p;/<\/html>/q' file

sed -n '/<pre>=/,/=/ { //!p }' file.txt

sed -n '/<tester>/{n;/<level1[ ]*id="2"/{n;n;N;p}}' input

 sed -n '/<tr>/,/<\/tr>/p' file

sed -n '/[-x]/p'

sed -n '/[\x00\x01\x02]/q1;/hebrew/!b;s//\x01/;/DESPiTE/!b;s//\x02/;/downloadsubtitle.php?id=/!b;s//\x00/;s/.*\x00\([0-9]\+\)[^\x00\x01\x02]*\x01[^\x00\x01\x02]*\x02.*/\1/p' file

sed -n '/[fF][oO][oO]/,/[bB][aA][rR]/p' text.txt

sed -n '/> myoccupation/,/> mygrosssalary/p' file

sed -n '/"map":"200"/!s/.*\({"datalist".*}\).*/\1/p' full.log > new.log

sed -n '/## Screensh/,/##/{/Scree/{p;n};/##/{q};p}' file

sed -n "/$VARIABLE$/,/test/p" aFile 

sed -n "/$VARIABLE/,/test/p" aFile

sed -n "/$VARIABLE/,/test/p" aFile

sed -n "/$a/,/$b/p" -- "${@:3}"

initial_date=$(sed -n "/$past_date/p" 'logfile.txt' | head -1 | sed -e 's/\([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]\).*/\1/')

sed -n "/$some text$/,/test/p" aFile

sed -n "/$start/,\$p" timings.txt > newtimings.txt

sed -n "/$start/,"'$p' timings.txt > newtimings.txt

count=$(sed -n '/$variable/,$p' file.log | grep '"KO"' -c)

count=$(sed -n "/$variable/,$p" file.log | grep '"KO"' -c)

count=$(sed -n '/'$variable'/,$p' file.log | grep '"KO"' -c)

sed -n '/(/,/)/{:a; $!N; /)/!{$!ba}; s/.*(\([^)]*\)).*/\1/p}' file

sed -n '/,-,\.txt$/s|/[^/]*$|/|p' input.txt > output.txt

sed -n '/,-,\.txt$/s|/[^/]*$||p' input.txt > output.txt

sed -n '/- GEM PATHS:/ { N; s/.* - //p }' file

sed -n '/---/p' file

v_black_list=$(sed -n '/--.*m4a/s=.*/==p' download.log | tr '\n' ',')

sed -n '/-/p'

sed -n '/.*21[34][0-9]\{3\}.*/{p}' file

sed -n '/.*Visible.*/,$p' originalfile > newfile

sed -n '/./!q;=' input | tail -1

 sed -n '/./!q;=;p' input | sed 'N;s/\n/ /'

sed -n '/08:46:01.328/,/09:56:15.739/p' application.log

sed -n '/12pt;">\(.*\)<\/span><\/div><\/message>/ s%12pt;">\(.*\)</span></div></message>%\1%p'

sed -n '/91, 4, {\(0x[0-9A-F][0-9A-F],\)\{11\}0x[0-9A-F][0-9A-F]}/p' file

sed -n '/= *$/!p' file

sed -n "/@ForTestingOnly/,$ { /[{}]/ s/\([{}]\)/\1\n/g;ta;b;:a;p;=}" "$file"

sed -n '/ABC/,/^[^+]/{x;/^$/!p;}' file

sed -n '/ABC/I{h;:A;$!n;/^+/{H;$!bA};g;p;}' file

sed -n '/ABC1_.\+;/p' Config/db_conn.cfg

sed -n '/ANS_LENGTH/s/[^=]*=\(.*\)/\1/p' log.txt

sed -n '/A\|B/p' 1.txt > 2.txt

sed -n '/Account/{n;/VIN No\./n;p}' file

sed -n '/All present$/{s/.*//;x;d;};x;p;${x;p;}' file | sed '/^$/d'

sed -n "/BUILD_VERSION/s/.*'\([^']*\)'.*/\1/p" input

sed -n '/Block number:/,/ServiceMsg/{n;/ServiceMsg/p;g}' service.txt

sed -n '/COURSE/i{;s/COURSE NAME: //gip;}' rsh1 >> rsh2

sed -n /COURSE/p rsh1 | sed 's/COURSE NAME: //g' >> rsh2

sed -n '/Current Network Information/,$p' INPUT_FILE

sed -n "/Development streams:/,$ s/[^ ]* *Views: *\([^_ ]*\)_.*/\1/p"

sed -n '/Expected Messages : 0/{H;g;p};/.*/H;/File Process Start/h' log.txt

sed -n '/First/,/Third/p; /Third/q' file

sed -n '/Foo/I,/Bar/Ip' text.txt

sed -n '/GNU GENERAL PUBLIC LICENSE/{:a;N;/why-not-lgpl.html\>./!ba;N;s/.*\n//};p' file

sed -n '/INSERT INTO ax_payment/{:loop; N; /VALUES.*)/{p;d}; b loop}' yourfile.txt

sed -n '/LANGUAGE/{N; s/.*<string>\(.*\)<\/string>.*/\1/p; }' Locale.xml

sed -n '/LIMIT/,/=/{/^\s*\(\S*\s*\)\{10\}[0-9.-]*\*/H;x;s/^.*\n\(.*\n.*\)$/\1/;x;/=/{x;P;q}}' file

sed -n '/Lipid droplet diameter/{n;n;n;N;p}' input

sed -n '/Main step/,/./p' inputFile

sed -n '/OPC_NODENAME=/s/^.*=//p' file

sed -n '/PATTERN/,/^$/p' file

sed -n '/PATTERN/,/^$/{/./p}' file

sed -n '/PATTERN/,/^$/{/^$/d; p}' file

sed -n '/PATTERN/,/^$/{/^$/q; p}' file

sed -n '/Page: 25141/,$p' file

sed -n '/Recordings/s#.*/\(F[^\.]*\.[^\.]*\).*#\1#p' file.txt

sed -n '/START/,/STOP/ { //!p }' file.txt

sed -n "/SUMMARY/,/END OF SUMMARY/p" fileName

sed -n '/Sample_10Y_W34/,/Sample_10Y_W34/p' filename | head -n -6 > outputfile

sed -n '/Start/{:a;/End/!{N;ba};/930939023/!d;p}' file

sed -n '/Started GET/{h;d;};/Completed 200 OK/{H;g;s/\n/; /p;}' file

sed -n '/Started GET/{h;d};/Completed 200 OK/{H;g;s/\n/; /p}' file

sed -n '/Started POST.*\/[fr]/{N;/Parameters/p}' log/production.log

sed -n '/Started POST.*\/[fr]/{N;p}' log/production.log

sed -n '/The second line/q;p' inputfile

sed -n '/\<abc\>/,/\<efg\>/{/\<abc\>/{h;d};H;/\<efg\>/{x;p}}' file

sed -n '/\<keyword2\>/,/^$/p' file.txt

sed -n '/\[directive\]/,/\[otherdirective\]/ { //! p }' infile

sed -n  '/\(^\[test2\]\)/,$p' test.txt > temp.txt

sed -n '/\*\//q; /^\/\*/d; s/^ \* \?//p' <file.h >comment.txt

sed -n '/\/\*/,/\*\//{P;/\*\//q;D;}' style.css

sed -n '/\/bar\//p' file

sed -n '/\\$/p' file1 | wc -l

sed -n '/\b[0-9]\{2\}\b/p' file

sed -n '/\x1f\x8b/,$ p'

sed -n '/^<a/p; /^<a/! H; ${g; s/\n//; p}' input.txt

sed -n '/^<a/p; /^<p/H; ${g; s/\n//; p}' input.txt

sed -n '/^<a/p; /^<p/H; ${g; s/\n//; p}' input.txt > output.txt

sed -n '/^<url>$/{n;N;N;N;s/\n/ /g;s/ *<[a-z]*>//g;s/<\/[a-z]*>/ /g;p}'

title=$(sed -n '/^[[:blank:]]*title[[:blank:]]*=[[:blank:]]*{/ {s///; s/}[^}]*$//p}' inputfile)

sed -n '/^[0-9]/{x;p};/^[^0-9]/{H;x;s/\n\s*\([^0-9]\)/ \1/;x};${x;p}'
sed -n '/^[0-9.]\+$/w results.txt' thin*.txt

sed -n '/^[A-Z][[:space:]]/p' file > out.txt

sed -n '/^[^"]*"[^"]*$/p' file

sed -n '/^[^:]*only\([0-9]\{1,2\}\)_[^ ]*/ s//\1/p'

sed -n '/^[^:]*only\(1[01]\)[^ ]*/ s//\1/p'

sed -n '/^#/H; /^S/{G; y/\n/ /; p}; /^$/h' input

sed -n '/^#/{h; bk}; :j /^S/{G; y/\n/ /; p}; /^$/h; d; :k n; /^#/{ H; bk}; bj;' input

sed -n '/^#\+[ ]*Orange[ ]*#\+/,/^#\+$/ p' infile

sed -n /^$/p infile

sed -n "/^$date/,\$p" filename

sed -n "/^-- Current Database: \`${db}\`/,/^-- Current Database: \`/p" $path$infile > $path$outfile.sql

sed -n '/^.\+:\{3\}$/p' fileA.txt

sed -n '/^06:25/,/^08:25/{p;/^08:25/q}' logFile > newLogFile

sed -n '/^32/,/^39/p' file

SOA=$(sed -n '/^@/,/^[^;]*)/H;${;x;s/.*@[^(]*([^0-9]*//;s/[^0-9].*//;p;}' $SOAfile)

sed -n '/^@/{n;n;n;p}' file.txt

sed -n '/^A\|^B/p' 1.txt > 2.txt

sed -n '/^Acknowledgements:$/,$p' input-file > output-file

sed -n "/^CommonTerm: /{;n;p;}" log_file

sed -n "/^CommonTerm: /{n;p}" log_file

sed -n '/^Customer ID/ h; /^Inventory ID/ { G; s/.*=\([^,]*\).*=\([^\n]*\).*=\([^,]*\).*=\(.*\)/"\3", "\4", "\1", "\2"/; p }' inventory.txt

sed -n '/^IA\/\([NM][0-9][0-9]*\) \([01]\)$/ s//\1;\2/p' test.txt

sed -n '/^IA\/\([NM][^]*\) \([01]\)$/ s//\1;\2/p' test.txt

sed -n '/^Icon=/ { s/.*=//; p; }' "$file" >> /tmp/text.txt

sed -n '/^MSG.*ERROR/{H;g;N;p;};/^DURATION/{s/.*//;h;d;};H' < logname

sed -n '/^NODE-ID> command1/,/^NODE-ID> / { /^NODE-ID> command1/ { p; d; }; /^NODE-ID> /q; p }'

sed -n '/^Nov 20 13:42:52/,/^Nov 20 16:22:23/p' input.log > output.log

sed -n '/^START=A$/,/^END$/p' data

 sed -n '/^Sink/,/^$/p'  pactl_Output.txt

sed -n '/^Started/, /page/p' file

sed -n '/^TODO/,${N;/^\n$/q;P;D}'

sed -n '/^TODO/,/^$/{H;N;/^\n$/{b};p}'

sed -n '/^Test/,$p' oldfile > newfile

sed -n '/^ZZZ/ { s/^.*\(<.*>\).*$/\1/p }'

sed -n '/^\(--Begin file\|end of file\)/{p;b}; /^----Begin Piece/{p;:a;n;/^----End Piece/{p;b};p;ba}' inputfile

sed -n '/^\*NODE$/,/^*/p' input.txt > output.txt

sed -n '/^\/\*/,/^ \*\//p;/^ \*\//q' file

sed  -n '/^\s*#/!{=;q}' file

sed  -n '/^\s*#/!{p;q}' file

$ sed -n '/^\s*$/,$ {/^.*[^ ]\+.*/,$p}' file

$ sed -n '/^\s*$/,$ {/^.*[^ ]\+.*/p}' file

sed -n '/^owner / { s///gp; q; }' $file

sed -n '/^owner / { s/^owner //gp; q; }' $file

sed -n '/^version=/s///p' file

sed -n '/^{/,$ p' test.txt

sed -n '/```ruby/,/```/{/```ruby/b;/```/b;s/^/    /p }' filename

sed -n '/aStyle.Landscape {/,/}/p'

sed -n '/abc\|xyz/p'

sed -n '/alex/{/eva/{/tom/p}}'

sed -n '/base 16/{s/[[:blank:]]*\(..\)\(..\)\(..\)[[:blank:]]*([^)]*)[[:blank:]]*/\1:\2:\3 /p;}' file

sed -n '/begin/,/end/ { H;g; s/^\n//; /end/s/\n/ /gp }' file.txt

sed -n '/color/ s/.*color: *#\([^;]\+\);.*/\1/p' css_file

sed -n '/color/ s/.*color:[[:space:]]*#[[:space:]]*\([[:xdigit:]]\+\)[[:space:]]*;.*/\1/p'

sed -n '/def=something/,/</box>/!p' > tmp.xml {}

var=`sed -n '/department=..* id="983343"/,/<\/department>/p' file | grep -c '<user="'`

sed -n '/dependencies/, /}/ p' t|grep '>='

sed -n "/foo/{s//bar/g;=;p;}" filename

sed -n "/foo/{s/foo/bar/g;=;p;}" filename

sed -n '/http:.*\/unique\//s/^.*>\([^<]*\)<.*$/\1/p'

sed -n '/info/I p; //,/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/{ //! p}' myfile.txt

sed -n '/main(argc, argv)/,/{/ p'

sed -n '/mystat/s/x/\./gp' $1

sed -n '/openissues/p' test.txt | sed  's/.*(openissues)\(.*\)(\/openissues).*/\1/'

sed  -n '/pat1/,/pat2/{/pat1\|pat2/!p}' inputfile

sed -n '/pattern/ {s/.*//; N; N; s/[\r\n]//g; p}'

sed -n '/pattern/ {x; N; N; N; s/[\r\n]//g; p}'

sed -n '/pattern/,$p' < list.txt | sed '1d'

sed -n '/pattern/,/&/p' file

sed -n '/pattern/{=;p}' file | sed '{N;s/\n/ /}'

sed -n '/pattern1/,/pattern2/p' file

sed -n '/pattern1/{N; /\n.*pattern2/!{D;b};p}'

sed -n '/pattern1/{p; :a; N; /pattern2/!ba; s/.*\n//}; p' inputfile

sed -n '/re/,$p' file

sed -n '/regex/,$p' INPUTFILE

sed -n '/regex1/,/regex2/p' INPUT_FILE > NEW_FILE

sed -n '/s$/{s/s$//;p;}'

sed -n '/searchtext/,$p' file1 > file2

sed -n "/some text/,/test/p" aFile

sed -n '/span/{s/<span[^<]*>\([^<]*\)<.*/\1/;p;q}'

sed -n '/start/,/end/ H; $ { g; s/\n//g; s/\(end\)/\1\n/g; p }' infile

sed -n '/start/,/end/{p;d};/end/p'

sed -n '/start_pattern/{:a;N;/end_pattern/!ba;N;s/.*\n//};p' file

sed -n '/string1/p;/string2/;/string3/p' INPUTFILE > OUTPUTFILE

sed -n '/token/s/.*name="ltoken"\s\+value="\([^"]\+\).*/\1/p' input_file

sed -n '/trigger/{p; :loop n; p; /trigger/q; b loop}'

sed -n '/xxxxxxx/q;p' input.txt

$ sed -n '/}$/{h;:a;n;/^$\|}$/{H;$!ba};H;g;s@}\n*@}@g};p' input.txt

sed -n '0~10p' file

sed -n '1!G;h;$p'

sed -n '1!H;1h;${x;s/(.*)/()/;p}'

sed -n "1,${line}p" myFile

sed -n '1,/<\/html>/p' some.html > truncated.html

sed -n '1,/<\/html>/{s!</html>.*!</html>!;p}' input

sed -n '1,/^\s*$/p' file

sed -n 1,2p file1 > file1.tmp

sed -n '1,50000 p' filename

sed -n '100,200{s/^\([^[:space:]]\+[[:space:]]\+\)\{7\}\([^[:space:]]\+\).*$/\2/;p}' file.tsv

sed -n '1000,$p' file.txt | grep 'abc'

sed -n '1000,2000{p;2000q}' file.txt | grep 'abc'

sed -n "100000,20000p" bar.txt > foo.txt 

sed -n '10q;6,10p' file

sed -n "1293,$ p" yourfile | grep xyz

sed -n "13193p;15791p;16891p" file_name

sed -n 16224,16482p filename > newfile

sed -n  '1h; 1!H; ${ g; s/Mary\n\n/\n/g p }'

sed -n '1h; 1!H; ${g; s/\s*for(\$counter=0;\$counter<10;\$counter++)\s*\n\s*{\s*\n\s*\$yyarr\[\$counter\]=\$counter+2004;\s*\n}/\nfor($counter=2004;$counter<=date("Y");$counter++)\n{\n\t$yyarr[$counter-2004]=$counter;\n}/ p}' filename

sed -n '1h;1!H;${;g;s/a/b/g;p;}'

sed -n '1h;1!H;${g;s/\n/ /g;p}' file

sed -n '1{h;d};/^"$/{g;s/$/ "/p;n;h;d};x;p;${g;p}' input.txt

sed -n "1{x;d};H;\${g;s/\n\n/\nTEST\n\n/2;p}"

sed -n '1~5p;3~5p' file.txt

$ sed -n 2p $file | cut -d " " -f1

USERNAME=`sed -n 2p /mystic/temp$NODE/CHAIN.TXT`

USERNAME=$(sed -n 2p /mystic/temp$NODE/CHAIN.TXT)

sed -n 2p somefile.txt

date=$(sed -n '2s/\(.*\)-\(..\) /date -d \2-\1\\ /ep' file )

date=$(sed -n '2s/\(.*\)-\(..\) /date -d \2-\1\\ /p' file | sh )

sed -n '2{p;q;}' hugeFile

sed -n '2{p;q}' somefile.txt

sed -n '3,5p' /etc/passwd

sed -n '3,5p;6q' /etc/passwd

sed -n '3,6p'

sed -n '3,6p; 11,13p' | sort -k2 > 3_6-11_13

sed -n '30p;39p;43p' foo.txt

$ sed -n '314p' file

$ sed -n '314{p;q}' file

sed -n '39,42p' foo.txt

sed -n 3p file.txt

sed -n '3s/.* = //p' installation.sh

sed -n '3s/POP3_SERVER_NAME = //p' installation.sh

sed -n '3s|^[[:blank:]]*//|&|p' file

sed -n '4,8!{p;b};n;p' file

sed -n '452,$ { /wire/ {p;q} }' /tmp/foo

$ sed -n 4p filename

sed -n '5,10p' filename

$ for f in *.dat ; do sed -n '5p' $f >> test.dat ; done

sed -n '6,10p' file

  sed -n 60,60p foo | diff bar -

sed -n '7p' file

variable=$(sed -n '7s/^.\{17\}//p' file)

variable=$(sed -n '7s/^\(\s\+\S\+\)\{17\}//p' file)

sed -n '7{p;q}' file

sed -n '8,12p' yourfile

sed -n '800,900p' file.txt

sed -n '85,158p' file

sed -n ':a; $ ! {N;ba}; s/\n/:/g;p' INPUT.TXT

sed -n ':a; /<event>/,/<\/event>/ N; /<event>/,/<\/event>/!b; /<\/event>/ {/uniqueId="1279939300.862594_PFM_1_1912320699"\|uniqueId="1281686522.353435_PFM_1_988171542"/p;d}; ba'

sed -n ':a; /^DIMM/,/^[[:blank:]]*Nominal Voltage/ N; /^DIMM/,/[[:blank:]]*Nominal Voltage/ ! d ;/[[:blank:]]*Nominal Voltage/ {/[[:blank:]]*Nominal Voltage/p;d}; ba' cpuz-FHD505.txt

sed -n ':a;$!{N;s/\n/&/2;Ta};/^PATTERN\'\''/MP;$!D' file

sed -n ':a;/START/,/END/{/END/!{$!{N;ba;}};/error/p;}' inputfile

sed -n 'H; ${ x; s/\n//; s/\n //g; p}' file.txt

sed -n 'H;${x;s/^[^(]*(//;s/)[^)]*$//;p;}' filename

sed -n 'N;/^\n$/q;P;D'

sed -n 'N;/^\n$/{P;q};P;D'

sed -n 'N;/^\n$/{p;q};P;D'

sed -n 'N;N;N;N;N;s/\n/ /gp' input

sed -n 'N;N;N;N;N;s/\n/ /gp' input | column -t

sed -n 'N;N;N;s/\n\|,$//g;p' file

sed -n 'N;N;N;s/^\|$/"/g;s/\n/","/g;p' file

sed -n 'N;N;h;n;p;g;p' file

sed -n '\!'"$var1"'!,\!'"$var2"'!p' inpu

 sed -n '\.^02/04/2002.,$p' dates.list > results.list

sed -n "\\@$1@,\$p" "$file" | tac | sed -n "\\@$2@,\$p" | tac

sed -n '\@,.*/.*/.*/@p' input

sed -n '\@,\([^/]*/\)\{3\}[^/]*$@p' input

sed -n '\|^[[:space:]]*/\*.*\*/|{p;q};\|^[[:space:]]*/\*|,\|^ \*/|p;\|^[[:space:]]*\*/|q'

sed -n '\|^/\*.*\*/|{p;q};\|^/\*|,\|^ \*/|p;\|^ \*/|q' file

sed -n '\|^/\*|,\|^ \*/|p;\|^ \*/|q' file

sed -n abc.txt    

sed -n 'fromline,toline p'

sed -n 'h; s/.*//; n; G; p' /tmp/foo

sed -n l0 file.txt

sed -n 'p;n' filename

sed -n 's!.*/\([0-9.]*\)/.*!\1!p' input

sed -n 's#.* \([a-zA-Z]* [A-Z]\{2,3\}/fd\).*#\1#p' test_regqexp_keynote.txt

sed -n 's#.*<br/><br/><br/>\(.*\)<br/><br/>After you.*#\1#p' yourfile.xml

sed -n 's%.*\(https\{0,1\}://[^/]*\).*%\1%p'

sed -n 's%.*https\{0,1\}://\([^/]*\)/.*%\1%p'

sed -n 's%.*src="%%; s%".*%%p'

sed -n 's%.*src="\([^"]*\)".*%\1%p'

sed -n 's%^.* URL:\(.*\) \[[0-9]*\] -> .*$%<a href="\1">\1</a>%p' log.txt

sed -n 's,^//[^@/]*@\([^/]*\)/.*,\1,p'

sed -n 's/<[^>]*>//gp' test.csv | sed '/^$/d'

sed -n 's/<title>\(.*\)</title>/\1/p' input.file 

sed -n 's/[^\/]*\(\/[^\/]*\/\).*/\1/p' file

sed -n "s/$REGEX_SED/\x1b[7m&\x1b[0m/gp"

sed -n "s/\$\w\+\['keyword1'\]\s*=\s*'\([^']\+\)';/\1/p" inputfile

somevariable=$(sed -n "s/\$\w\+\['keyword1'\]\s*=\s*'\([^']\+\)';/\1/p" inputfile)

sed -n 's/(\([0-9][0-9][0-9]\))\s\?\([0-9][0-9][0-9]\)[- ]\([0-9][0-9][0-9][0-9]\)/\1\2\3/p'

sed -n 's/.* \([^ ]\{1,\} discovers <PLANET>\).*/\1/p'

sed -n 's/.*<Pay>\(.*\)<\/Pay>.*/\1/p' file

sed -n "s/.*<sometag param='\([^']*\)'>.*/\1/p"

sed -n 's/.*<start>\(.*\)<end>.*/\1/p'

sed -n 's/.*<title>\(.*\)<\/title>.*/\1/ip;T;q'

sed -n "s/.*\(am.*sed\).*/\1/p"

sed -n 's/.*= *\([0-9]*\) (.*/\1/p'

sed -n 's/.*AdulterateFood\(.*\)DangerousFood.*/\1/p' source_code

sed -n 's/.*Undefined error code\(.*\)id.*/\1/p' bad_events_P2J3.xml

sed -n 's/.*\".*\", \"\(.*\)\".*/\1/p' yourFile.txt

sed -n 's/.*\([0-9][0-9]*G[0-9][0-9]*\).*/\1/p'

sed -n 's/.*\(2z\(\(.*\)\.\(.*\)\)n9\).*/variable 1 = \L\3\nvariable 2 = \L\4/p'  your.file 

sed -n 's/.*\(PATTERN\).*/\1/p' FILE

sed -n 's/.*\(StackOverflow\).*/\1/p' file.txt

sed -n 's/.*\(aa-[A-Za-z0-9]*\).*/\1/p'

sed -n 's/.*marker_\(.*\) = "SymmetryPlane.*/\1/p' header.out

sed -n 's/.*myProg v\(FOO \)\?\([[:alnum:][:punct:]]*\).*/v\2/p'

sed -n 's/.*update tbl set col=.*where id=\([0-9]\+\)$/\1/p' file.log

sed -n 's/.*update tbl set col=.*where id=\([0-9]\+\)$/\1/p' file.log | sort | uniq -c

sed -n 's/.*video=\([^"]*\)">/\1/p' inputfile

sed -n 's/POP3_SERVER_NAME = //p' installation.sh

version=$(sed -n 's/Previous Version:\(.*\)/\1/p' VersionInfo.properties)

my_var=$(sed -n 's/XMLcpLINK: //p' file.txt)

sed -n 's/\[\(.*\)\]/\1/p' file

sed -n 's/\([a-z]\)\([a-z]\)\([a-z]\)\([a-z]\)\([a-z]\)/\5\4\3\2\1/pg' 

sed -n 's/\(.*_[123]\);$/\1/p' file.txt > newfile.txt

sed -n 's/\(hel\)lo/\1/p' <<<$'hell\nhello\nhelen'

sed -n 's/\.us\././p'

sed -n 's/\s*\([^: ]*\): function.*/\1/p' test1.js

sed -n 's/^.*abc\([0-9][0-9]*\)xyz.*$/\1/p' example.txt

sed -n 's/^.*abc\([0-9]*\)xyz.*$/\1/p' example.txt

sed -n "s/^.*is \(.*\)Uchiha.*/\1/p" inFile

sed -n 's/^.*test/test/p' input

sed -n 's/^USE \([[:alnum:]]*\);/\1/pI' file

sed -n 's/^\[\([^]]*\).*icmp_req=\([0-9]*\).*time=\([0-9.]*\).*$/\1 \3 \2/p' infile

sed -n 's/^\(\.\/create\.pl\)\s*\(.*\)\.out$/\1 \2.out \&\& mv complex.* \2/p' s.txt

sed -n 's/^\(\.\/create\.pl\)\s*\(.*\)\.out$/\1 \2.out\nmv complex.* \2/p' s.txt

distro=$(sed -n 's/^distroverpkg=//p' /etc/yum.conf)

sed -n 's/^hello //p' 

sed -n 's/^name[0-9]\.\w\+=\(\w\+\)/\1/p' file

sed -n 's/base theme \+= //p' file

sed -n "s/foo/bar/g;tp;b;:p;=;p" filename

sed -n 's/set auto_upgrade {\([0-9] \)*\([0-9]\{1,\}\)}/\2/p'

sed -n 's/test/&\n/;s/.*\n//p' input

sed -n 's@.*/USOURCES@USOURCES@p' temp.lst

sed -n 's@^$InputFile=.*@$InputFile='${INPUT_FILE_NAME_PATH}'@gp' dashboard.prf

sed -n 's@^.*Records returned.*\[\(.*\)\].*$@The total records returned = \1@p' log.txt > out.txt

sed -n 's@^.*Records returned.*\[\(.*\)\].*$@\1@p' log.txt > out.txt

sed -n 's|[0-3][0-9]/[0-1][0-9]/[0-9][0-9]|& '$(parseDates)' &|p' datefile

sed -n 's|.*<url>\(.*\)</url>.*|\1|p'

dbName=$(sed -n 's|\s*<DataBaseName>\(.*\)</DataBaseName>|\1|p' path/to/DataBase.xml)

sed -n "s|http://\(.*\.\)*\(.*\)\..*|\2|p"

sed -n '|content/folder\[@name.*Failure|s|.*content/folder\[@name\(.*\)Failure.*|\1|' source.csv

sed -r '$!N; s~\n~~; s~(<a )~\n\1~ig; s~[^<]*<a[^>]*href\s*=\s*"([^"]*)"[^\n]*~\1\n~ig' test

 sed -r '$!N;s/ (A[^\n]*)\n/\n\1/;P;D' file

sed -r '$!N;s/test(\n\s*)$/xxx\1/;P;D' file

sed -r '$!N;s|(&lt;)(strong&gt;)([^\n]*)\n\s*\1/\2|//textbf{\3}|;P;D' file

sed -r '$!N;s|\n(</Text>)|\1|;P;D' file

sed -r $'s/(\$LD = )(\'.*\')(.*)/\\1_(\\2)\\3/' filename

sed -r "\$s/(dbo->)([a-zA-Z0-9_]+)(.*)$/\1['\2']\3/g"

sed -r --in-place 's/a(.*)b/x\1y/g;' your_file

sed -r -b "s/Dev\\\\Suite\\\\.*\\\\Modules/dev\\\\suite\\\\simple\\\\/g" test.txt

sed -r -b 's/Dev\\Suite\\.*\\Modules/dev\\suite\\simple\\/g' test.txt

sed -r -e '/<b>/ {s/( .)([^ ]*)/\1\L\2/g}' -e 's/<b>(.)/<b>\u\1/' -e '/<b>/ {s/(\b.{1,2}\b)/\L\1/g}' data

 sed -r -e '/S|A/d' file.

sed -re '/\d{13,13},\d*,[\w\s]+,.+$/d' -e '/^$/d' logfile

sed -r -e '/sandbox/d' -e 's|http://(\S*)|href="/fetch\?domain=\1"|g'

sed -r -e '1s/(\w)(\w*)/\U\1\L\2/g' -e '3s/(\w)(\w*)/\U\1\L\2/g'

sed -r -e ':a ; s/\b([a-zA-Z]+)\b(.*) (\1)( |$)/\1\2 *\3* / ; ta'

sed -r -e 's#^%C(.*)#"/vol/images\1"#' -e 's#.*#fl-cp -sync & &#' file.txt

$ sed -re 's/ ([A-Z])/-\1/g'

sed -r -e 's/ +//g' -e 's/^[0-9]*[_-]*(.+\.mp3)$/\1/I'

sed -re 's/[^;]* [*]?([A-Za-z0-9_]+) *;/init->\1 = \1; /g'

sed -re 's/([^ ]+)(.*)/\1 \1 \1\2/' F1

sed -r -e "s/([^0-9a-zA-Z\{])a([^0-9a-zA-Z\}])/\1b\2/g"

sed -r -e 's/([a-zA-Z])([a-zA-Z]{2,4})([0-9]{3})/\1:\2:\3/g'

sed -r -e 's/([a-zA-Z]{3,5})([0-9]{3})/\1:\2/g'

sed -re "s/([a-zA-Z0-9./\\ :-]+)/\1/g"

sed -re 's/(:: ni =)[^=]*$/\1 512/' file

sed -re 's/(::\s+ni\s+=)[^=]*$/\1 512/' file

sed -re 's/(\S+)\s+(.*)\s+(\S+)/Field1 = \1\nField2 = \2\nField3 = \3/g' file

sed -r -e 's/(^|\.)0+([1-9])/\1\2/g' -e 's/(^|\.)(0)0*(\.|$)/\1\2\3/g'

sed -r -e 's/-(a)-/-\\\1-/g' test.txt

sed -r -e "s/-(a)-/-\\\\\\1-/g" test.txt

sed -re 's/\<(.)(.)(.)\>/\3\2\1/g'

sed -re 's/\<(.)(.)(.)\>/\3\2\1/g' -e 's/\<(.)(.)(.)(.)\>/\4\3\2\1/g'

sed -re 's/\bbizzbuzz[0-9]{2}\b//' file.txt

sed -r -e 's/\d+/sprintf("%03d",$&)/e'

sed -re 's/\x1b[^m]*m//g' typescript | col -b

 sed -r -e 's/\|([^|]+)\|/\\left|\1\\right|/g'

sed -re 's/^([^/]*)(\/B\/C\/)([^/]*)$/\1\2\1/' file

sed -re 's/^default[ \t]+0$/default 1/' /home/san/menu.lst

sed -re 's/^default([ \t]+)0[ \t]*$/default\11/' /home/san/menu.lst

sed -re 's/^default([ \t]+)0$/default\11/' /home/san/menu.lst

sed -r -e 's/address = \[|\]//g' -e 's/= +([^:]+\:){5,}.*$/=/' file

sed -re "s/api.(dev[0-9]+\.)?side.com/$SERVER_HOST_VALUE/g"

sed -re 's/bizzbuzz[0-9]{2}//' file.txt

 sed -r -e 's/chr[0-9]+:[^_]*_(N[RM])_([0-9]+)_[^,_]+([, ]|$)/\1_\2'$'\t''/g;s/'$'\t''$//g'

sed -r -e 's/chr[0-9]+:[^_]*_(N[RM])_([0-9]+)_[^,_]+([, ]|$)/\1_\2'$'\t''/g;s/'$'\t''$//g' your_file > tab_delimited_file

sed -re 's/if(/if ( /g' 

sed -r -e 's@((top|left):[0-9]+)(px)?@\1px@g' file

sed -rf parse.sed infile

sed -r -f sedscr your_one_line_file

sed -r -i.bak 's#^[0-9]{1,2}/[0-9]{1,2}/[0-9]{1,2} ##' logfile

sed -rie '/3199|26543/s/^(.{7}).*/\1\t0;\t0;/' inv.txt

sed -ri "/[0-9]{1,3}(\.[0-9]{1,3}){3} Tom$/c$newip Tom" file

sed -ri '/^<tr><td><\/td><td class="tdci">/ { :b; N; s/(\n<tr><td><\/td><td>)/\n<tr><td>\&nbsp;<\/td><\/tr>\1/; te; P; D; bb; }; :e' "$f"

sed -ri '/^\S+\s+(\S+)\s+\S+\s+(\S+)/s//echo "&\t$(echo \1-\2|bc)"/e' file

sed -ri '/^\S+\s+\S+\s+\S+\s+1( |$)/d' file

sed -ri '/b/ { :b; N; s/\na/\nc2&/; te; P; D; bb; }; :e;' file

$ sed -ri '3,$s/(\s+).*/\1*/' file

sed -ri ':a;s/^( *)\t/\1    /;ta' file

sed -r -i 's/\b(word1|word2|word3)\b//g' file.txt

$ sed -ri 's/^#(.*sufficient\s+pam_wheel\.so trust use_uid.*)/\1/' file

sed -ri 's/^(([^,]*,){34})0([^,]*)/\1+91\3/' test.csv 

sed -r -i 's/^(([^,]*,){7})([^,]*,)([^,]*,)/\1\4\3\5/'

$ sed -ri 's/^((\S+\s+){3})\S(\S{3}\s)/\1\3/' file

sed -ri 's/font-family:["A-Za-z, ]+;/font-family: Verdana;/g'

sed -r -i 's/old[0-9]+\(/old1(/' file.txt

sed -ri 's~^(.*Name, [0-9]+),(.*)$~\1\2~g' file

sed -rne 's/(dbservername)\s+\w+/\1 yyy/gip'

sed -rne 's/^(([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2})[^0-9]*(([0-9]{1,3}\.){3}[0-9]{1,3}\/[0-9]{1,2}).*/\1 \3/p'

sed -rn '/ABC/,/^[^+]/{/(ABC|^\+)/!d;p;}' file

sed -r -n '/ABC1_.+;/p' Config/db_conn.cfg

sed -rn '/LIMIT/,/total/{//!H};/total/{x;s/^.*\n(.*\n)((\s+\S+){10}\s+[0-9.]+\*(\s+\S+){3}\n(\s+\S+){14}).*/\1\2/;p;q}' file

sed -rn '/\[ID:[0-9]+\]/{/\[ID:128\]/!{s/.*\B(\[ID:[0-9]+\])\B.*/\1/;H}};${x;s/\n//;s/\]\n\[/\\]|\\[/g;s@(.*)]@/\\[ID:128\\]/,/\\\1\\]/\{/\\\1\\]/!p\}@p}' file|sed -nrf - file

sed  -rn '/^[0-9]* ([23456789]|[0-9]{2,})/ p'  < $2 > out

sed  -rn '/^[0-9]* ([23456789]|10)/ p'  < $2 > out

sed -rn '/^Path:/h;/windowsdom\\nasarchive\s+Allow\s+FullControl/{g;p}' file

sed -rn ':a;/^ *$/{n;ba};s/( |$).*//p;:b;n;/^ *$/ba;bb'

sed -rn 's/<title>(.*)</title>/\1/p' input.file 

sed -rn 's/([a-z]{4}).*/\1/p;T;s/.*/echo "&" | tee out.txt/e' file

sed -rn 's/.*SRC=([^ ]+).*SPT=([0-9]+).*/\1 \2/p' /var/log/iptables.log

sed -r -n 's/^[0-9]*?[02468] /even/g'

sed -rn 's|[^0-9]*(([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2})|\1\n|g; s/\n[^\n]*$//; s/\n/ /gp'

sed -r '/<Students>/,/<\/Students>/{/<Students>/{h;d};H;/<\/Students>/!d;g;s/(.*)<!-- (.*) -->(.*)/\1\2\3/}' file

sed -r '/<firstTag>.*<\/firstTag>/{N;s#(<firstTag>)(.*)((</firstTag>\n)<secondTag/>)#\1\4<secondTag>\2</secondTag>#g}' file.txt

sed -r '/<layoutItems>/{:ka;N;s#(</layoutItems>)#\1#;Tka;s/lastViewedAccount//;T;d}' file 

sed -r '/([a-z]{4}).*/!b;s//\1/;w out.txt' file

 sed -r '/(\?\s+){3}(Yes|No)/d' ./file

sed -r '/@/s!@(.*),.*!_\1@generic.com!' FILE

sed -r '/DP=[^=]*MQ=/{s//\n&\n/;h;y/,/;/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/}' file     

sed -r '/PATTERN1/!b;:a;/PATTERN2/bb;$!{N;ba};:b;s/(PATTERN1.*)[ \t\n]+(.*PATTERN2)/\1\2/;tb' file

sed -r '/VIDIO/ s/.*(VIDIO\w*)/ALOGI("\1");   &/' inputfile

sed -r '/\\[^\\]*\\/{s//\n&\n/;h;s/[\\|]//g;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/}' file

sed -r '/^[0-9.]+"$/{s/"$//;n;};s/.*//' file

sed -r '/^[0-9a-f]{40}\b/!d;:a;/\ncommitter-time\b/bb;$!{N;ba};:b;s/\s+.*(\s.*)/\1/' file

sed -r '/^>/s%[^/]+/%>%;s%\..+%%' file.txt

sed -r '/^0x....(( ..){8}).*/{s//\1/;H};$!d;x;s/\n//g;s/ (.)(.)/\2\1/g' file

sed -r  '/^1/s/(.{4})(.{9})/\1123456789/' 

sed -r '/^COPY /{ s/([( ])(\w+)([,)])/\1"\U\2\E"\3/g }'

sed -r '/^\S/{h;b};G;/^user_default:/M{s/(prefix:\s*\S).*/\1user/};P;d' /file

sed -r '/^chapter/I { s/^/# /; s/(\w)(\w*)/\U\1\L\2/g }' file

sed -r '/^user_default:/,/^\s*prefix:/{s/\(prefix:\s*).*/\1\/user/}' file

sed -r "/regex/d"

sed -r '/sandbox/!s|http://(\S*)|href="/fetch\?domain=\1"|g'

sed -r '/svn:mergeinfo/,/PROPS-END/{s#(/code)(/(branches|tags|trunk))(.*)#\2\4#}' inputfile

sed -r '/title.*java/I!d;s/.*:.(.*).}$/\1/' file

sed -r '1 {s/.*/\L&/;s/\b\s\b/_/g}' infile>outfile

sed -r '1,3s/(\w)(\w*)/\U\1\L\2/g'

sed -r '1,9s/(2nd|3rd)/\1 STREET/g' file

sed -r '1s/(\w)(\w*)/\U\1\L\2/g' file

sed -r '2h;$!N;$!D;${G;s/[^,]*([^\n]*).*\s([0-9]{8}).*/\2\1/;s/..$//}' file

sed -r '3s/(\w)(\w*)/\U\1\L\2/g' file

sed -r ':a;$!N;/\nhttps:/!{s/\n/ /;ta};s/\s*(\n|$)/\1/;P;D' file

sed -r ':a;$!N;s/^(([^ ]+ ).*)\n\2/\1,/;ta;P;D' file

sed -r ':a;$!N;s/^((\S+\s).*)\n\2/\1,/;ta;P;D' file

sed -r ':a;$!{N;ba};s/((hello|world)[^\n]*)\n/\1 /g' file

sed -r ':a;/'"$PATTERN"'/{x;/./s/.*/echo $((&+1))/e;/./!s/^/1/;x;G;s/'"$PATTERN"'(.*)\n(.*)/'"$PRE"'\2'"$POST"'\1/;ba}' file

sed -r ':a;/\b[Ss]h\S+/!b;s//\n&\n/;h;s/.*\n(.*)\n.*/\1/;s/././g;G;s/(.*)\n(.*)\n.*\n/\2\1/;ta' file

sed -r ':a;s/([0-9])([0-9]{3}([^0-9]|$))/\1 \2/;ta'

sed -r ':a;s/\b(([[:alpha:]]+)\s.*\s)\2\b/\1*\2*/;ta' file

sed -r ':a;s/\n/&/6;tb;$!{N;ba};:b;/SEARCH_STRING/!{P;D};s/\n/&/12;tc;$!{N;bb};:c;s/^/#/gm' file

sed -r ':r;/(^|\n)$/!{$!{N;br}};s/\n/\v/g' names | sort | sed 's/\v/\n/g'

sed -r '\%<Directory "/var/www/html">%,\%</Directory>% s%(AllowOverride)\s+None%\1 All%i'

sed -r '\b[0-9]{2}\b/!d' file

sed -r 's![^=]+=(.*?)&[^=]+=(.*?)&[^=]+=(.*?)!\1 \2 \3!' input_file

sed -r 's!@(.*)(,.*)!_\1@generic.com\2!' FILE

sed -r 's!rec:id=(.*?)&name=(.*?)&age=(.*?)!\1 \2 \3!' input_file

sed -r 's# ([0-9]{2}/[0-9]{2}) #|\1|#' file

sed -r 's#<java.lang.String value="([^"]*)"/>#<animal>\1</animal>#g' test.txt

sed -r 's#([^|]+)\|(.*)#<\1>\2</\1>#'

sed -r 's#(.*)#/\1/d#' file1 | sed -f - file2

 sed -r 's#(/[a-zA-Z0-9_/]+)#[p]\1[;p]#g' yourFile

sed -r 's#(\w+) #\1 /#'

sed -r 's#(src|href)="/media([^"]*)"##g'

sed -r 's#\<https?://##' file

sed -r 's#\\[^ \\{]+# #g' file.txt

sed -r 's#^([0-9]{1,10}) ([0-9]{1,4})(.*$)#echo $(date --date=@\1 )" - "$(date --date=@$((\1+\2)))#ge'  file

sed -r 's#^([^\;]+);([^\;]+);[^\;]+;([^\;]+);.*$#<tr><td>\1</td><td>\2</td><td>\3</td></tr>#' < Mitarbeiter.csv > header-content.html

sed -r 's,^(.*/ABC/[^/]+).*,\1,'

sed -r 's/ ([^ ]+:)/\n\1/g' input

sed -r 's/ +/ /g' input.txt|cut -d " " -f 9-

sed -r 's/ +/\'$'\n''/g'

sed -r 's/ +/\n/g'

sed -r 's/<a href="([^["]*)"/\1&/' input-file >new-file 

$ sed -r 's/<script id="live-reload".*?<\/script>/test/g' file

sed -r "s/<span class='A'>([^<]*)<\/span>/**\1**/g"

sed -r 's/[[:cntrl:]]*$/,2012-09-03&/' sample.csv

sed  -r 's/[0-9]+(\.[0-9]+)*/replacement/'    

sed -r 's/[0-9]+/file&.txt/' file_name.txt

     sed -r 's/[0-9]{1,10}$//'

sed -r 's/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/XXX.XXX.XXX.XXX/g' ./sed_tmp

sed -r 's/[^ ]+/@&/g' file

sed -r 's/[^[:print:]]//' typescript > final.file

sed -r 's/[^-0-9]+$//' input.txt

sed -r 's/[^=]*=([^ ]*)[^=]*=([^ ]*)[^=]*=(.*)/\1;\2;\3/' infile

sed -r 's/[^\"]*([\"][^\"]*[\"][,]?)[^\"]*/\1 /g' input.txt

sed -r 's/[std:]*vector\s{0,1}</std::vector</' < codefile > tmpfile

sed -r 's/>[[:alnum:]\|]+\|ref\|([a-zA-Z0-9_]+\.[[:digit:]]).*/> \1/g'

sed -r 's/ {1,}/\n/g'

sed -r 's/"\$ITEM /"/; s/\$ITEM //g; s/ ?\$ITEM"/"/' file

sed -r 's/"http(s?)_proxy": "(Proxy[AB])?"/"http\1_proxy": "ProxyA"/' inputfile

sed -r 's/( [0-9]{5} )/\t\1\t/' yourFile.csv

sed -r 's/([ \t]+[^ \t]*){3}$//' your_file

sed -r 's/([[:upper:]])/\L\1/g' <file

sed -r 's/([$%])/\\\1/g' filename

sed -r 's/([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/\4.\3.\2.\1/g'

sed -r 's/([0-9]+:[0-9]{2})([a-zA-Z ]+:)(.*)/$TIME:\1\n$TYPE:\2\n$DATA:\3/'

sed -r 's/([0-9]+\.){3}[0-9]+.*/& :/g' filename

sed -r 's/([0-9]{2})([0-9]+)/\1 \2/g'

sed -r 's/([0-9]{3})/\1\./g;s/^0*//;s/\.0*/\./g;s/\.\.test.com//;s/\.\./\.0\./g' regex.test

sed -r 's/([^ ]+) ([^ ]+) \[([^]]+)] (.*$)/\1@\2@\3@\4/g' f1.txt > f2.txt

sed -r 's/([^ ]+)/@\1/g' file

sed -r 's/([^&]*&)([^&]*)(&.*)/echo "\1"$(echo "\2"\|sed "s#\\.##g")"\3"/ge' file

sed -r 's/([^,]*)/"\1"/g'

sed -r "s/\([^,]+,/\(/g" file > outfile

sed -r 's/([^,"]*|"[^"]*")/"\1"/g'

sed -r 's/([^,"]*|"[^"]*")/"\1"/g' | sed 's/""/"/g'

 sed -r 's/([^.]{12}\.)/\n\1/2g' file

sed -r "s/([^0-9]+19.+)/\${color orange}\1\$color/" thisweek.txt

sed -r 's/([^0-9]|\b)[0-9]{3}([^0-9]|\b)/\1***\2/g;s/(\b|[^0-9])[0-9]{4}(\b|[^0-9])/\1****\2/g' file

sed -r 's/([a-zA-Z])\.([a-zA-Z])/\1\t\2/g' file

sed -r 's/([a-zA-Z0-9.]+) [0-9] (.*)/\2 (\1)/g' file1.txt

sed -r 's/(>).*/\1/'

sed -r 's/( |\[|\])+/@/g' file_to_modify.txt > file_for_output.txt

 sed -r 's/("XXXX"\s*:\s*)((")[^"]*"|[^,]*)/\1\3YYYY\3/' input

sed -r 's/("XXXX"\s*:\s*).*$/\1"YYYY",/' input

sed -r 's/(([^,]*),[^,]*),/\1\n\2,/;P;D' file

sed -r 's/(([^;]*;){'$((FIELD-1))'})([^;]*;)/\1\n\3\n/;h;s/[^\n]*\n([^\n]*).*/\1/;y/H1/X2/;G;s/([^\n]*)\n([^\n]*)\n([^\n]*)\n([^\n]*)/\2\1\4/'

sed -r 's/((\s+\S+){3})/\1ADD/' fstab

sed -r 's/((pwd|password|passwd)[^=]*=).*/\1***/' input > output

sed -r 's/(.*)([a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2}:[a-zA-Z0-9]{2})(.*)/\1\NEW_MAC_ADDRESS\3/g' file.txt

sed -r 's/(.*)(\?cache_version=)([0-9]+)(.*)/echo \1\2$((\3+1))\4/ge' file

sed -r 's/(.+)#(.+)@(.+)/\U\3\E \1-\2' <<<"$str"

sed -r 's/(.{200})/\1\n/g' file

sed -r 's/(?s).*?(<div class="mb_t_p_t_post_div">.*);/\1;/g' 1.htm

sed -r 's/(NNN){32767}//g' bigFile > newBigFile

sed -r 's/(PATTERN1).*/\1STUFFI_WANT_TO_INSERT/' file

sed -r 's/(TAG|TAA|TGA)$//'

sed -r 's/(Tijd ...: )(....)(..)(..).(..)(..)(..)./\1 \4.\3.\2 \5:\6:\7/' FILE

sed -r 's/(\"key\" : )\"[^,]*/\1"Newvalue"/g' file.json

sed -r 's/(\$dbo->)([[:alnum:]_]+)(.*)$/\1["\2"]\3/g'

sed -r 's/(\.d[0-9]+)\.(h[0-9]+)/\1\2/' inputfile

sed -r 's/(\S)\s+([<>])/\1\2/g' file

sed -r 's/(\S+)\s*(.*)/id { id: "\1" } value { val: "\2"} word { word: "\1"}/' file

sed -r 's/(\S+\s+){10}//;s/-.*$//' 

sed -r 's/(\S+\s+){2}/&\n/;s/\s+-/\n&/;h;y/ /_/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/' file

sed -r 's/(\bd[0-9]+)\.(h[0-9]+)/\1\2/' inputfile

sed -r 's/(\s*)(.*\|)/\2\1/;:a;s/,(.*\|(.*))/\2\n\1/;ta;s/\|//;s/(\S+)(\s+)(\S+)/\2\1\3/g' file

sed -r 's/(\sLOB.*"L_.+_)([0-9]{10})("\()/\1'$myVar'\3/'

sed -r 's/(\w);(\w+\b)/\1\2;/g' filename

sed -r 's/(\w)\.(\w)/\1\t\2/g' file

sed -r 's/(\w+) (.*)/echo "\2" >> \1.txt/e' file

sed -r 's/(\w?);(\w+\b)/\1\2;/g' filename

sed -r 's/(^.*)NATIONAL CHARACTER VARYING\(([0-9]+)\)/ echo "\1"VARCHAR"("$(echo "scale=0;\2*1.2\/1"\|bc)")"/ge' filename

sed -r 's/(^| )"/\1``/g' filename

sed -r 's/(^| )"/\1``/g; s/([$%])/\\\1/g' filename

sed -r 's/(^| )"/\1``/g;s/"/'"''"'\1/g' filename

sed -r 's/(^|[[:space:]])([0-9]{2})-/\1\2:/g' file

sed -r "s/(^|[^:])$oldIP([^0-9]|$)/\1$newIP\2/g" input

sed -r 's/(^|,)([^,-]+-){3,}[^,]+(,|$)/\3/g'

sed -r 's/(abc|def)_uvw/\1\n_uvw/g;s/([^\n])_uvw/\1xyz/g;s/\n//g' file

sed -r 's/(android:paddingLeft(\s*=\s*\w+))/\1\nandroid:paddingStart\2/g' file

sed -r 's/(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'/$newip/

sed -r 's/(catch.*[^:])(exception)/\1std::\2/' File.cpp

sed -r 's/(decimal)\([^)]*\)/\1/' filename

sed -r "s/(if \()(\$_SESSION\['POST']\['([^']*)'])==1/\1isset(\2) \&\& \$_SESSION['POST']['\3']==1/" file

   sed -r "s/(import\/)([0-9]{4}\.[0-9]{2}\.[0-9]{2})/\1$newdate/g" myfile.xml

sed -r 's/(name:\{id:)[^,]*(.*alias: )([^;]*);/\1\3\2\3;/' file

sed -r 's/.*(X|Y|Width|Height)\s*:\s*([0-9]+)/n\1=\2/'

sed -r 's/.*:([^:]*):.*/\1'

sed -r "s/.*=([0-9]+)$/\1/" testdata | paste -sd","

sed -r 's/.*SRC=(\S+).*PROTO=(\S+).*DPT=(\S+).*/\1 \2 \3/'

sed -r 's/.*\/([^\/]+)\.pjb/\1/g' logfile

sed -r 's/.*\:([^\:]*)\:.*/\1/'

sed -r 's/.*_([0-9]*)\..*/\1/g'

sed -r "s/.*f?DocumentId=([0-9]+).*/\1/" testdata | paste -sd","

sed -r 's/.*href="([^"]*)".*/\1/' file

sed -r 's/.{18}/&  /' file

sed -r 's/;([0-9]{6})00;/;\101;/g'

sed -r 's/DP.*MQ/\n&\n/;h;y/,/;/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/' file

sed -r 's/DP=[^=]*MQ=/\n&\n/;h;y/,/;/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/' file

sed -r 's/Date: [0-9]{4}-[0-9]{2}-[0-9]{2}/Date: 2012-09-01/g' *.txt

sed -r 's/N{32767,}//g' bigFile > newBigFile

sed -r 's/N{32767}//g' bigFile > newBigFile

sed -r 's/VARIABLE="[^"]*"/VARIABLE="'"$1"'"/'  file_to_modify

sed -r 's/VARIABLE="[^"]*"/VARIABLE="123456789"/' file_to_modify

sed -r 's/XX ([^"]+)/\1 XX/' filename

sed -r 's/\[[0-9]{2}\/[A-Z][a-z]{2}\/[0-9]{4}:[0-9]{2}:[0-9]{2}:[0-9]{2} \+[0-9]+\]//g'

sed -r 's/\..*(\sPTR)/\1/' file

sed -r 's/\\vvvec[[:space:]]*\{([^}]*)\}[[:space:]]*\{([^}]*)\}[[:space:]]*\{([^}]*)\}/\\begin\{pmatrix\}\1\\\\\2\\\\\3\\end\{pmatrix\}/g'

sed -r 's/\b[0-9]{3}\b/***/g;s/\b[0-9]{4}\b/****/g' file

sed -r 's/\b[a-z]\w*\b/HOUSE &/g' file

sed -r 's/\|..(.{10})/|\1/'

sed -r 's/^[0-9]{4}-[0-9]{2}-[0-9]{2}/#&/' inputfile

sed -r 's/^[^ ]+[ ]+//' in.txt

sed -r 's/^[^"]+"([^"]*)".*/\1/' file

sed -r 's/^[^_]*_[^_]*_([^-]*)-.*$/\1/'

sed -r 's/^[^_]+_+((_*[^_]+){3}).*/\1/'

sed -r "s/^${adapter_sequence}A{3,}//" file

sed -r 's/^( *)\/\/(.*myVar.*$)/\1\2/' file

sed -r "s/^( +) ([0-9]+) (.*)$/\1 \2 '\3'/g" file

sed -r 's/^([0-9]+\.){3}[0-9]+$/& :/g' filename

sed -r 's/^([0-9]{8})[0-9]+/\1/' infile

 sed -r 's/^([^ ]*) .* (([0-9]{1,3}\.){3}[0-9]{1,3}).*$/\1 \2/'

sed -r 's/^([^ ]+) ([^ ]).*$/\1\2/' /root/Desktop/Userlist.txt

sed -r 's/^([^ ]+)( )+.*\((.*)\)/\1\2(\3)/g' file

sed -r "s/^([^]]*)\[/\1\r[/g" testfile.txt

sed -r 's/^([^_]+_+){4}((_*[^_]+){1}).*/\2/'

sed -r 's/^([a-zA-Z0-9]+);.*(serverfile[0-9]+).*/\1;   \2/' file.txt

sed -r 's/^(([0-9]+\.){3}[0-9]+, )*(.*)$/\3/'

sed -r 's/^(([^ ]+ ){8}ice \S+ )(\S+)/\1keep/' inputfile

sed -r 's/^(([^;]*;){4})[^;0-9]+/\1/' file

sed -r 's/^(.* )?(.*)$/\1\2 \2 \2/' F1

sed -r 's/^(.*) +([^ ]+)$/"\1" \2/' file

sed -r 's/^(.*) +(.*@.*)/"\1" \2/' file

sed -r 's/^(.{10})[^.]*/\1/'

sed -r 's/^(.{21})A/\1 /' a.pdb

sed -r 's/^(.{46}) /\1/' infile > outfile

sed -r 's/^(06700|067|00)([0-9]*)/\2/g' strings 

 sed -r 's/^..:..:...{6}//' file

sed -r 's/^.{20}//' logfile

myVar=$(sed -r 's/^.{5}//' <<<"$myString")

sed -r 's/^0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)-0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+)\.0*([0-9]+),...,(.*)$/\9:\1.\2.\3.\4-\5.\6.\7.\8/' inputfile

sed -r 's/^\/src\/([^/]+)_([^/]+)\/\1$/\/src\/\2\/\1/'

sed -r 's/^\S+\s+//' in.txt

sed -r 's/^\\t|([^\\])\\t/\1\t/g' file

sed -r 's/^\s+$//' file | cat -s > file.new

sed -r 's/^\s+$//' infile | cat -s > outfile

$ sed -r 's/^foo:&nbsp;//' file.txt

sed -r 's/address = \[|\]//g' 

sed -r 's/foo( *)bar/\x94\1\x98/g; s/foo/Matched/g;s/\x94( *)\x98/foo\1bar/g' file

sed -r 's/href="([^"]+)" >[^<]+/href="\1" >\1/' file

sed -r 's/password=[^ ]+/ /g' $file

sed -r  's/ts\(((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*)\)/ts(\1,\7,\3,\5)/g' *.F

sed -r 's/url ([^"][^%]+) %/url "\1" %/g'

sed -r 's/url ([^%]+) %/url "\1" %/g'

sed -r 's:site1.com(/blog/[0-9]{4}/[0-9]{2}/[0-9]{2}):site2.com/\1:'

sed -r 's@([^\t])[*]@\1\a@g; s@[*]([^\t\r])@\a\1@g; s@[*]@@g; s@\a@*@g' file

sed -r 's@([^\t])[*]@\1__0x2A__@g; s@[*]([^\t\r])@__0x2A__\1@g; s@[*]@@g; s@__0x2A__@*@g' file

sed -r 's@\[[0-9]+\]@@g'

sed -r 's@^(\S+\s+\S+\s+\S+\s+\S+).*@\1@' file

sed -r "s@^.*http://([^/]+).*@\1@" infile

sed -r 's_[^/]>_/>_g' file

$ sed -r 's_(<amount quantity="[0-9]+">)12.00(</amount>)_\124.00\2_g' file.xml

sed -r 's_((checksum|compressed)=\").*(\")_\1\3_' -i filename

~/$ sed -r 's_.+_cp & ~/tmp/_' ~/tmp/my_file_list.txt | bash

sed -r 's_^(http|file):/a_\1:/d_'

sed -r 's|(.*://)?([^/]*).*|\2|' file

sed -r 's|(style="position:absolute;top:[0-9]+)(px)?(;left:[0-9]+)(px)?(">)|\1px\3px\5|g' file

sed -r 's|.*/([^/]*)/.*|\1|' file

 sed -r 's|\[[^]]*\]||g'

sed -r 's|\\newline(</Text>)|\1|g' file

sed -r 's|wxT\(([^)]*)\)|\1|g' file

sed -r {filehere} -e 's/[A-Z]/\L&/g;s/ /_/g' -i

sed -r '{s#([0-9][0-9,.]*)-\|#-\1\|#g}'

sed -s -i '1i\\' *.txt

sed -s -i '1s/.*/ &/' *.txt

sed -s -n -e '/^Agent Name: agent10479475/,/^==/ p' run*.txt

sed -s '1d' */*filename*.txt > crap4.txt

sed '...' ./c/file.html ./a/file.html ./b/file.html ./d/file.html

sed ... file > file

output=$(sed ... file.css)

sed ... inputfile > tmpfile && mv tmpfile inputfile

sed .... |tr '\n' ' ' >>$OUTDIR/files

sed '/ *- *\$[0-9]\+\.[0-9]\{2\}/s///' file

sed '/ 2001 /s/^/#/' file

 sed '/<!-- BEGIN -->/,/<!-- END -->/d' file

sed '/<!-- PAGE TAG -->/,/<!-- PAGE TAG -->/ { 1 { s/^.*$/Replace Data/; b; }; d; };'

sed '/<!--/{ N; N; s/.*\n\(.*food="mango".*\)\n.*-->.*/\1/; }' file

sed '/<?xml .*?>/a \<!-- comment -->' test.xml

sed '/<B[0-9]*>/,/<\/B[0-9]*>/d' 

sed '/<B1>/,/<\/B3>/d' infile

 sed '/<BEGIN>/r file2' < file1 > output_file

sed '/<MyTag>/!b;:a;/<\/MyTag>/!{$!{N;ba}};/MyText1/s/.*\n/&<FoundTag1>FoundIt<\/FoundTag1>\n/' xml_file

sed '/<Second>/,/<\/Second>/{s/<startdate>01011970<\/startdate>/<startdate>01011979<\/startdate>/}' Data.xml

sed '/<\/preferences>/i\ADD SOME TEXT\nADD SOME MORE TEXT' file

sed '/<\/time>/I{n;:A;N;h;/<geo>/I!{H;bA};/<geo>/I{g;s/<\/time>/<\/tags>/i}}' file.txt

sed '/<b>/{s/[a-z]*\./\u&/}' input

sed '/<div class="classname"><a href="\/.*">/ { h; s/<div class="classname"><a href="\///; s/\(.*\)/\L\1/; s/ /-/g; s/[()]//g; x; s/\(<div class="classname"><a href="\/\)\(.*\)/\1/; G; s/\n//}'

sed '/<div class="classname"><a href="\/.*">/ { s/\(.*\)/\L\1/; s/ /-/3g; s/[()]//g }'

 sed '/<div>/,/<\/div>/ {/<div>/n; /<\/div>/ ! {s/$/<br \/>/}}' test.html

sed '/<div>/,/<\/div>/s/[^>]$/<br \/>/' test.html

sed '/<function type="class">/!b;N;N;/<function type="class">\s*\n\s*<arg name="class.name">com.mycompany.name.UnLockIssueFunction<\/arg>\s*\n\s*<\/function>/d' file

sed '/<jobResulsDir/s/<jobResulsDir/<CommCellUser userName="'$4'" password="'$5'" > <\/CommCellUser> '$test' <jobResulsDir /'

sed '/<marquee/,/marquee>/ d' index.php

sed '/<name>/{h;s/name>/id>/g;G}'

sed '/<script>/{s/<script>.*$//;q;}' infile > outfile

sed '/<script/,/<\/script>/d' inputfile

sed '/<start>/,/<\/start>/s!\(<a>2</a><b>2\)</b>!\10</b>!' input

sed '/<start>/,/<\/start>/{/<a>[ ]*2[ ]*<\/a>/s!<b>2<!<b>20<!}' input

sed '/<tag>/ r file2.txt' file1.txt

sed '/[,0-9]*[0-9]\+[acd][0-9]\+[,0-9]*/{N;s/[,0-9]*[0-9]\+[acd][0-9]\+[,0-9]*\n---//}' test.txt

sed '/[0-9]\{3\}/d' filename.txt

sed '/[0-9]{3}/d' filename.txt

sed '/[^#!+]/d'

sed '/"stackov\/er;flo\.w users are great"/i\proud sta{ckov,er member' file

sed '/#<\(.*\)>/s|.*|cat \1|e' filename

sed '/## Screenshot/,/##/{/## Changelog/!d}'

sed '/## Screenshot/,/##/{/Screenshot/d;/##/!d}'

 sed  '/#region License/,/#endregion/d' ploum.cs

sed "/$START/,/$END/ { /$END/"'!'" d; }"

sed "/$i/d" <list1 >templist

sed "/$mirrorRegex/s/# //"

sed '/$myvar/d' data.txt

sed "/$myvar/d" data.txt

sed "/$username/{:a;N;/\n--- [^[:blank:]]* ---\$/{s/.*\n//;b};ba}" inputfile

sed '/'"$regex"'/!b;s//\n\1\n/;s/.*\n\(.*\)\n.*/\1/' file

sed '/(.*)[ ]*$/{N; s/)[ ]*\n[ ]*{/&\npr_debug();/g}'

sed '/,$/d'

sed '/,\.-$/s//& /'

sed "/--- end/i--- $username ---\ndatadata data data\ndata data data data\n"

sed '/-r[0-9]/{h;d};H;/Pom.xml/!d;x' file

sed "/.*5/d;/.*1/i"$(sed -n '/.*5/p' FILE)  FILE

sed '/.*=.*\x27.*\x27.*/ {h;s/[^\x27]*\x27\(.*\)/\n\x27\1/;s/ //g;x;s/\([^\x27]*\).*/\1/;G;s/\n//g}'

sed '/.*tld/{N;s/.*tld\n.*Never/Replaced\nSuccess/}' file

sed '/./d;p;p' test.txt # matches all non-empty lines

 sed  '/.leaflet-right/{n;s/right/left/;}' < tester

sed '/192.168.1.2/s/$/ myalias/' file

sed '/:\s*$/d'

sed '/ABC/s/.*/AAAAAAA/' file

 sed '/ALTER TABLE .* ADD KEY .*/d' FILE 

sed '/BBB/!b;n;c999' file

sed '/CLIENTSCRIPT="foo"/a CLIENTSCRIPT2="hello"' file

sed '/COURSE/d;/CREDIT/d' rsh1 | sort -uk 1,1 | cut -d' ' -f1 | paste -d' ' >> rshf

sed '/CREATE DATABASE\|USE/s/Batch/pd_Batch/' test.sql

sed '/CREATE TABLE \([^ ]*\)/ s//DROP TABLE IF EXISTS \1; &/'

sed '/DIRLIST/ s:"$:'            "$logFolder"             '":'

sed '/DIVIDER/{n;s/.*/[begin]&[end]\n/;}' file1

sed '/DROP/ {/INDEX/d; /CONSTRAINT/d}' file

sed '/ERROR java-class - Exception/{:a;$!N;/\n\s*at\s.*/s///;ta;D}' file >new_file

sed '/File/,/;/!d;/;/q' file

sed '/First/r file1.txt' infile.txt

sed '/HEADER 1/{n;:l N;/HEADER 2/b; s/\n//; bl}' input

sed '/HEADER 1/{n;s/$/ ABCDE/}' input.txt

sed '/Hello/{s/.*/&\nSomething on the next line/;:a;n;ba}' filename

sed "/Jagan/s/$var1/HELLO/"

sed '/LINE/{H;x;:r;n;/LINE/br;x;d};h;d'

sed '/Location/{n; d;}'

sed '/MANAGER_WIDGET/!s/\.\([jscss]\+\)\"/\.min\.\1\"/g' index.html

sed '/Non Unique Subdivision/,/^/d'

sed '/Non Unique Subdivision/{N;d;}'

sed '/OLD/ {p; s/OLD/NEW/g}'

sed '/PATH/ s,$,:/usr/java/jdk1.6.0_38/bin,' ~/.bash_profile

sed '/PATTERN1/,/PATTERN2/s/.\{78\}/&\n/g' ./infile

sed '/Part1/,/Part2/d' filename

sed '/SEARCH\/TEXT/{N;d;}' yourFile

sed '/STUFFGOESHERE/ r file1.txt' file2.txt

sed   '/Service: System Uptime/,/host_name/{/host_name/s|$|,NewHost|}' input_file

sed '/Seven/{:a;N;/Fifteen/!ba;s/\n/ /g}' input.txt

sed '/Test\/Movie2/,/@/d;' header.txt

sed '/Test\/Movie2/,/@/g;' header.txt

sed '/The second line/,$d' inputfile

sed '/The second line/q' inputfile

sed '/User logged in/{h;d};H;x' file

sed '/VG00/ { N; s/\n// }'

sed '/VG00/ { N; s/\n//; s/ \{5,\}/     /; }'

sed '/VIDIO/ s/.*\(VIDIO\w*\)/ALOGI("\1");   &/' inputfile

sed '/\<[0-9]\{2\}\>/!d' file

sed '/\<TXT_accesp\>/,/\<\/TXT_accesp\>/s@</\?p>@@g' INPUT_FILE

sed '/\<\!--fff309--\>/,/\<\!--\/fff309--\>/d' your_file

sed '/\<a2\>/!b;/\<b2\>/!d' file

sed '/\[BEGIN AccountID\]/,/\[END AccountID\]/!d;/\[BEGIN AccountID\]/{h;d};/./H;/\[END AccountID\]/!d;g;s/\n*\[[^\n]*\n*//g;s/\n/,/g;s/\s*//g;ta;:a;s/,//9;t;s/$/0,0,0/' file

sed '/\[base\]/,/gpgkey=/{/gpgkey=/s/$/\'$'\n''exclude = postgres*/;}' filename

sed '/\[notice\]/{h;d};x;/./!{x;d};x;H;$!d;x;s/[^\n]*\n//' file

sed '/\([^ ]\+ \+\)\{4\}0\+ /d'

sed '/\(.\).*\1/d'

sed '/\(2.6.18-157.el5\)/,+4 { H; d; }; $ { p; x; }' /boot/grub/menu.lst

sed '/\(patt\)ern/ {s//new\1/}' inputfile

sed '/\(pattern\).*/{s//\1/; q;}'

sed '/\*\*/,/==/d' FILE > MODIFIED

sed '/\.com/s/^/#/' < hosts

sed '/\/\*.*\*\// d; /\/\*/,/\*\// d' file

sed '/\/\*/!b;:a;/\*\//!{$!{N;ba}};{/$Log:/d}' filename

sed '/\/\*\*/,/\*\// {s/.*\*\/.*/@Override/p; d}'

sed '/\/as.sh/s/^#//'

sed '/\/as.sh/s/^/#/'

sed '/\/bbb/d' filename

sed '/\ba2\b/!b;/\bb2\b/!d' file 

sed '/\n/!N;/\n.*\n/!N;/\n.*\n.*PINITIAL BALANCE/{$d;N;N;d};P;D'

sed '/\o251/d'

sed '/\t\.\t/d' input.txt > out.txt 

sed '/^ [^,]*$/s/^/>/'

sed '/^ "status": {/,/^  }$/!d;/^    "errors": \[/,/^    \],/!d' file.txt

sed '/^ *<column_[0-9][0-9]\+ *\/> *$/d' file.xml > reduced.xml

sed '/^ * year/,/^ * _cons/{/^ * year/!{/^ * _cons/!d;}}' input.txt >output.txt

sed '/^ *#/!{s/X/Y/g;}' file.txt

sed '/^ *#/b;s/^[^|]*//;s/[^|]*$//' filename

sed '/^ *$/d' yourfile.csv

sed '/^ /d; N; s/\n/ /' inputfile

sed '/^ \*.*\.[hc]pp$/d' file

sed '/^[ ]*$/d' file

sed '/^[ X]*$/d' yourfile.csv

sed '/^[ \t]*$/d'

sed '/^[ \t]*$/{: a;N;/#matchee/!P;D;/^[ \t]*$/b a}' file.txt

sed '/^[ \t]*ARRAY=.*;/d' in >out

sed '/^[[:lower:][:punct:]]/d' file 

sed '/^[[:space:]]*#/!s/test/TEST/g' /path/to/infile

 sed "/^[[:space:]]*ssid=\"$SSID\"[[:space:]]*$/,/}/s/^\([[:space:]]*psk=\"\)[^\"]*/\1$PSK/" wpa.txt

sed '/^[0-9]/d'

sed '/^[0-9]\{1,2\}$/! s/^/#/' INPUTFILE

sed '/^[0-9]\{1,2\}\(\.[0-9]\+\)\?$/! s/^/#/' INPUTFILE

 sed '/^[0123456789]\+$/{x;p;x;}' < input.txt

sed "/^[^#]/ s!${KEY}=.*!${KEY}=${NEWVAL}!" infile > outfile

sed '/^[^#]/s/^/chr/' file > output

sed '/^[^:]\+:\s*$/d'

sed '/^[a-z[:punct:]]/d' file 

sed '/^>/!s/[^ACGTN]//ig' input.txt

sed '/^>/!s/[a-z]/C/g' file.txt

 sed '/^#!/n;/example/d' file

sed '/^#.*#$/{s/#//g;h;d};:a;G;s/Linux\(.*\)\n\(.*\)/\2\1/;ta;s/\n.*//' file.txt

sed '/^#/ d'

sed '/^#/!s/test/TEST/g' /path/to/infile

sed '/^#/,/^\$/{/^#/!{/^\$/!d}}' file.txt

sed '/^#CODE$/,/^#ENDCODE$/!s/foo/bar/'

sed "/^#Comment to append text after/a\\\n[$username.conn]\nipAddress=$ipAddr\nportNumber=$portNum" input

sed '/^#begin$/{N;N;s/#begin\n\(.*\)\n#end/replaced \1/;}' file

sed '/^$/N;/^\n$/D' inputfile

sed '/^$/d' file

sed '/^$/d' fileName | sed G

sed '/^$/d' yourFile

sed '/^$/d;s/^/^/' B | grep -vf - A

sed "/^$1/d" filename

sed "/^$SERIAL_NUM,/s/STATUS/OK/g" file.csv

sed "/^$input/ s/0/1/" my_course

sed '/^([0-9][0-9][0-9])/! s/^/(000) /' testfile > newtestfile

 sed '/^-----THIS STUFF IS USELESS-----$/,$d' file

sed '/^0x\S\{4\}\(\( \S\S\)\{8\}\).*/{s//\1/;H};$!d;x;s/\n//g;s/ \(.\)\(.\)/\2\1/g' file

sed '/^1/s/\(.\{4\}\)\(.\{9\}\)/\1123456789/' "$DEST/$FILE_NAME$DATE.txt"

sed '/^123/ s/0/1/' my_course

sed "/^@/ s/$/\/1/g" file

sed '/^@/!d;s//>/;N'

sed '/^ARRAY=.*;/d' in >out

sed  '/^A\|^B/!d'

sed '/^A\|^B/!d' 1.txt > 2.txt

 sed '/^BEGIN:VEVENT/,/^END:VEVENT/{/^\(UID\|SEQUENCE\)/d}' file

sed '/^Filename:/s!\(./debs/\)\(.*\).deb!\1download.php?p=\2!' /path/to/input > /path/to/output

sed '/^Keyword:$/d' file

sed '/^Line2:/s/$/ Please help me/'

sed '/^Numbers/ { N; N; s/^\(.*\)\(\n\)/\1\2000\n/ }' infile

sed '/^P/d' file.txt > new.txt

sed '/^Path/{N;s/\n         //;}'

sed '/^START.*/,${s/banana/stackoverflow/g}' inputfile

sed '/^Title/{N;/\nAuthor:/!{s/^\(....................\).*\n.*$/\1/;};}' test-file.txt

sed '/^Title/{N;/\nAuthor:/!{s/^\(.\{30,50\}\).*\n.*$/\1/;};}' test-file.txt

sed '/^VAR.*="/,/^"/ {//! s/^/A/}' testfile.txt

sed "/^XXXX /s/\]\$/, 'member3']/" < input

sed '/^\[.*\]$/d' inputfile

sed '/^\[.*\.conn\]/,/^\s*$/d' file

sed '/^\[machine[0-9]\{1,\}\.conn\]/,/^\s*$/d' file

sed '/^\$/d' /tmp/foo

sed '/^\([^@]*@[^@]*\)@pattern@\(.*\)/ s//\1@replace@\2/'

sed '/^\([^|]*|\)\{35\}[^|]*$/d' filename

sed '/^\/\*/,/\*\//{s|^/\*||; s|\*/$||; b a};s/^/    /;:a' filename

sed '/^\s*<!--/!b;N;/<task>/s/.*\n//;T;:a;n;/^\s*-->/!ba;d' file

sed '/^\s*$/d'

 sed '/^\s*$/d' file 

sed '/^\s*LOG\s*(.*;\s*$/ d ; /^\s*LOG/,/;\s*$/ d' infile

sed '/^\s*\S*\s*\S*\s*\S*\s*$/d' file | wc -l

sed '/^```{r/,/^```$/b;/^`r/b;:a;/\\\\$/{$!{N;ba}};s/\(\$\$\)\([^$]*\(\$[^$]*\)*\$\$\)\|\(\$\)\([^$]*\$\)/\1\4latex \2\5/g' file

sed '/^all:/ s/$/ anotherthing/' file

sed '/^all:/ s/$/ anotherthing/' file > output

sed "/^auto_increment_offset/s/=.*/= ${HOSTNAME#${HOSTNAME%?}}/" /etc/mysql/conf.d/my.cnf;

(sed '/^b/d' yourfile > yourfile~ && mv yourfile~ yourfile) || rm yourfile~

sed '/^category/{x;s/^/X/;/^X\{3\}$/ba;x};d;:a;x;:b;$!{n;/^done/!bb}' file

sed '/^disable_functions/s/$/exec,system,shell_exec,passthru,/' /etc/php5/apache2/php.ini

sed '/^foobar/{H;$!d;s/.*//};$G;s/\n*//' input_file

sed '/^food.type/ s/=.*$/=banana/'

sed '/^module/,/);/!b;/);/a\NEWCODE' file

sed '/^priority/{s/.*/&\nexclude = php*/;:a;n;ba}' /etc/yum.repos.d/epel.repo

sed  '/^rs.*NA/,+3d' test_data 

sed "/^sdf$/,+3 d" file

sed "/^sdf$/,+3 {/^sdf$/b skip; d; :skip}" file

sed '/^sms;deliver;/!'"y/\"/'/" yourfile | sed -n '/^sms;deliver;/!b;:r;${p;b};N;/\nsms;deliver;/!{s/\n//;br};P;s/.*\n//;br'

sed '/^unsigned long long __c64/,/}/d'

sed '/^user1/d' filename

sed '/^user4:/ s/:[^:]*/:something_else/' infile

sed '/^values=/s/\([^"]*\)"$/\1 '"$wordtoadd"'"/' input

sed '/^zone "domain4.com" {$/,/^};/d' file

sed '/a/d' toy 

sed '/aaa/,/ddd/!b;/ddd/a\hello' file

sed '/aaa/h;$!d;x' file

sed '/alex/!d; /eva/!d; /tom/!d'

sed '/alias/{N; /[^0-9]172\.16\.202\.21$/s/\n/ MAC 00:01:02:aa:bb:cc&/;}' file

sed "/all.css/ r $BLA" "$FILE" > TMP1

sed '/bbb\tbbb/{ N; s/.*ccc\tccc/  eee\teee/; }' foo1.txt

sed '/begin/,/end/ !s/before/after/g'

sed '/bundles.=.array/ { :a; N; /);/bb; P; s/[^\n]*\n//; ba; :b; /,\n/! s#\n#,\n#; s#\([ \t]*\)\([^\n]*\)\n#\1\2\n\1new FOS\\UserBundle\\FOSUserBundle()\n#; }' app/AppKernel.php

sed "/burger.co.us/d" < inputfile > outputfile

sed '/cdef/r add.txt' input.txt

 sed '/daemon www.*Y=/{:l s/\(Y=\(0,\)*\)[0-9]*/\10/;/Y=\(0,\)*0\([^,0-9]\|$\)/!bl}' input

sed "/define('WP_DEBUG', false);/idefine('FS_METHOD', 'ftpext');"

sed '/desc/ s/{\([^}]*\)}/[\1]/g' filename

sed '/doadoodle <parameters>/,$!b;//{x;//p};//!H;$!d;x;s//&\nrc=$?\necho "$rc  is return code of last doadoodle" \nexit $rc/' file

sed '/ePlug.prototype.listInfo = function () {/, /};/d' file

sed '/end$/N;//s/end/finish/g' testfile.rb

sed '/export HOME=/a cd ${HOME}/tmp # added \n rm -rf packed* # added' yourfile

sed "/file1\.jar (MD5: [0-9A-Fa-f]*)/s/(MD5: [^)]*)/(MD5: $(md5 file1.jar | awk '{print $4}'))/"

sed  '/font *size *= *"4" *face/s|<b>\([^<]*\)</b>|<b><title>\1</title></b>|g'

sed "/foo/{s/\('[^']*'\)/\n&\n/g;s/\(\n'[^.]*\)\.\([^']*Z'\)/\1-\2/g;s/\(\n'[^.]*\)\.\([^']*uF'\)/\1_\2/g;s/\n//g}" inputfile

sed '/green/!s/.*//' input

sed '/green/s/.*//' input

sed '/grep-like regex/ s/pattern to replace/replacement/' -i file

sed '/house/!b;/big/d' file

sed '/href/{ /language/s/<match>/<replace>/ }'

sed "/keyword1/s/.*=\s*'\([^']\+\)';/\1/" inputfile

sed '/license_number/s/"\([^"]*\)"/"foo"/' inputfile

sed '/mark1/,/mark2/d;/mark3/,$d'

sed '/mike/,/\[account\]/{s/\(expdate[^=]\+=\).*/\1 2016-02-14/}' yourfile

sed '/modules..=>.array/,/),/ { /[^(,]$/ s//&,\n        '\''NewModule'\''/ }' file.php

sed '/myname>.*\"\s*$/N;s|\"\s*\n*\s*myURL=\"|</myname><myurl>|' file.xml

sed '/name1 + name2 + name3/s/[^ ]*\>/&_name4/' file | sed 's/old/new/g' > new_file

sed '/name1 + name2 + name3/s/[^ ]*\>/&_name4/;s/old/new/g' file > new_file

sed '/new Tab/s/ *//g;s/newTab/new Tab/' data.txt

sed '/organization/p;s/organization/company/p;s/company/long name/' file

sed '/pattern to match/d' ./infile

sed '/pattern/!d' file.txt

 sed '/pattern/!s/.*/replacement/' file.in  > file.out

sed '/pattern/,/;$/ d' infile

sed '/patterntosearch4/i\\n\n\n' file

sed '/public String getFirstName()/s/.*\("[^"]*"\).*/@XmlElement(name=\1)\n&/' file

sed '/pw_uuid/s/"pw_uuid" : \([A-Z0-9-]*\)/"pw_uuid" : "\1"/g' file

sed '/pw_uuid/s/\(^[^:]*\): \([A-Z0-9-]*\)/\1: "\2"/g' file

sed '/regex/ { s/pattern1/replacement/; s/pattern2/replacement/ }'

sed '/regex1/,/regex2/!d' INPUT_FILE > NEW_FILE

sed '/s$/!d;s/s$//'

sed '/sectionB/,/\[/s/username.*/username = valueX/' input

sed '/some_part_in_A/rB.txt' A.txt > C.txt

sed '/start host1/,/end host1/s/,0,/,1,/g'

sed '/start host1/,/end host1/{s/\(host1,def,java,es,dev \)L2,0/\1L2,1/g}' file

sed '/start/,/end/!d'

sed '/start/,/end/s/foo/bar/' file

sed '/test1/,/test2/{/test2/!d}'

$ sed '/timebomb/s/log/txt/' test.txt

 sed '/twolines/{G;s/\(two\)\(lines\)\(\n\)/\1\3\2/;}'

sed '/while/!d;q' file

sed '/{/!b;:a;$!N;/}/!ba;/font-family:\s*"foobar";/s/.*/\/* & *\//' file

sed '/{/b;/pattern/{s//replacement/;:a;n;ba}' file

sed '/{riak_jmx/,/]},/{ s/enabled, false/enabled, true/;}' ./app.config

sed '/};[^}]*};/{s/};[^}]*};/}; };/;b};/};/!b;:a;N;/\n[^}]*};/!ba;s/[^;]*\n.*\n[^}]*/ /' inputfile

sed '0,/<?xml.*>/! s/<?xml.*>//g' -e '2i <frame>' -e '$a </frame>'

sed '0,/Apple/s/.*Apple.*/Apricot/'

sed '0,/CUT HERE/d' file > new_file

sed '0,/Matched Keyword/s//Matched Keyword\nNew Inserted Line/' myfile.txt

sed '0,/RE/s//to_that/' file

sed '0,/^[^#]/ s/^[^#].*/#\0/' file.txt

sed '0,/^bin$/d'

sed "0,/sd/ { s/sd/paragraph\nsd/ }" file

sed '0,/tat/{/tat/d;}' inputfile

value1=$(sed '1 ! d' result.txt)

sed '1 !H;1 h;$ {x;s/[[:space:]]*network={\n[[:space:]]*ssid="Put_your_ssid_here"[^}]*}//g;}' YourFile

sed '1 s/.$//' file

sed '1!{/pattern/d}' file

sed '1,/<c>/s/^<c\(.*\)c>$/<e\1e>/'

sed '1,/### BEGIN GZIP DATA ###/ d'

sed '1,/.*Visible.*/d' originalfile > newfile

sed '1,/@@@/d; /^$/d'

sed '1,/FECHA/d;/PROCHAIN/,$d' inputfile

for i in *.pdb; do sed '1,/TER/d' $i > ${i/File/}; done

sed '1,/^$/d' data.txt

sed '1,/^$/d' file.txt

sed '1,/^\r$/d' data.txt

sed '1,/^\r\{0,1\}$/d' data.txt

sed '1,/^the last line$/d' < $origfile | cat newlic.txt - > $newfile

sed '1,/baz/s/foo/bar/g'

sed '1,/yahoo/d' data.txt 

sed "1,1292g" yourfile | grep -n xyz

sed '1,1{N;/^\n$/d}'

sed '1,2/^$/d'

sed 1,2d "$PGLIST"

sed '1,2d; $d' file > file.new && mv file.new file

sed '1,30d;/Text/d' f.txt

sed '1,30{/Text/d}' f.txt

sed '1,3s/^/#/' file

sed '1,3{/^#/!s/^/#/}' 

sed '1,3{/match/d;}' file

sed '1,4d' file.txt

sed '1,5{3p;4p;d}' filenname.CSV > tempfilename.txt

sed '1,5{3p;d}' filenname.CSV > tempfilename.txt

sed '10!d' file

sed '100,200{/input\|output/=};d' file.txt | sed '$!d'

address=$(sed '100,200{/input\|output/=};d' file.txt | sed '$!d')

sed '11s/}[ ]*$/ip_address;}/' named.conf

sed '123r file.txt' main.txt

sed "165s/.*/<new content>/g" file

sed '1N;$!N;s/<Blarg>\n<Bllarg>\n<Blllarg>/<test>/;P;D' filename

sed '1N;N;/^\n\n$/d;P;D'

sed '1b;/pattern/d' file

sed '1cApricot' prova

sed '1d'

sed 1d "$1"

sed '1d' file.txt

 sed 1d input-txt | paste -d \| input - | sed 's/^\|$/|/g'

sed 1d tables/ansi.csv | awk -F "," '{print $1}' | uniq | tr '\n' : | sed 's/:/" "/g'

sed '1d; n; d' infile  # output EVEN lines only

sed '1i\\' file.txt

sed '1s/[^;]*/YEAR/' file

sed '1s/"//g' file.txt

sed '1s/$/\tAge/;2,$s/$/\t20/' myFile.txt

sed '1s/.*</</g' file

sed '1s/.*/ &/' file.txt

sed '1s/.*\(<.*\)$/\1/g' file

sed '1s/^[^0-9]*//' data_combined.csv

sed '1s/^...//' data_combined.csv

sed '1s/^.\{6\}//' data_combined.csv

sed '1s/^/Type, /;2,$s/^/Adding Text, /' filename

sed '1s/^\(.*\)$/\|\1/g' file

sed '1s/unix/whatever/2' file

sed '1{/PINITIAL BALANCE/{N;N;d}};/\n/!N;/\n.*\n/!N;/\n.*\n.*PINITIAL BALANCE/{$d;N;N;d};P;D'

sed '1{/^ *$/d}'

sed '1{/^[[:space:]]*$/d}'

sed '1{/^$/d}'

sed '1{h;d};/XXX/{G;s/XXX\(.*\)\n\(.*\)/\2\1/}' fileB fileA >fileC

sed '1{h;d};/^}},$/{x;b};H;${x;s/^}},/}}/;b};d'

sed '1{h;d};H;${x;s/\s*abstract\s*=\s*{[^}]*}\+,//g;p};d' file

line1=$(sed '1{s%/%.%g;q;}' $datafile)

sed  '1{x;s/^$/server-id=1789051/;x};/^server-id=/{s/^.*$//;x};${G;s/\n//}' /etc/my.cnf

sed '2,/\*\//d; 1r newSig.txt' input.txt

sed '2,3s/,\s\+/,/g' example.txt

sed '2,4!d' somefile.txt

sed '2,8s/foo/bar/' file

sed '2000!d' $file >> final.dat

sed '23,56!d'

sed "24s/.*/\"$ct_tname\"/" file1.sas > file2.sas

sed "29s|.*|\"$ct_fname\"|" file1.sas > file2.sas

sed '2N;s/\n/ /' file

sed '2a\\ttwo words' input

sed '2h; $!N; $!D; ${ G; s/[^,]*\([^\n]*\).* \([0-9]\{8\}\).*/\2\1/; s/..$// }' file

sed '2q;d' file

line=$(sed '2q;d' file)

sed '2s/$/ myalias/' file

sed '2s/.*/[text_insert] & [text_insert2]/' file.txt

sed '2s/^/# /; 3,$s/"\([^,]*\),\([^,]*\)"/\1.\2/g' file

sed '2s/^/# /; 3,$s/,/./g;s/"."/,/g;s/"//g' file

sed '2~3!d' A | paste -d $'\n' B - | sed $'3~2i\n'

sed '3 s/$/f/' < yourFile

$ sed '314!d' file

sed '33rfile' input

sed '4,8{4~2d}' file

sed '4,8{N;s/.*\n//}' file 

sed '4i\ This is the new line' file

sed '4r insert txt' 0282.ini

sed '4s|^|/opt/bin:/opt/sbin:\\\n|' .bashrc

sed '5!d' file

sed "50,${/^\s*PUTS/d}" the_file

sed "50,99999{/^\s*$pattern/d}" file

sed '5001,$d;' inputFile.txt >> appenedFile.txt

sed '6s%value="[^"]*"%value="/u03/Oracle/Middleware/wlserver_10.3"%'  /u03/silent.xml

sed '71s/ *$//;116s///;211s///'

sed "\:$PWD:d" < $myfile

sed ':a; N; $!ba; s/\\\n//g; s/\\$//' file

sed ':a; N; $!ba; s| *&lt;/p&gt;\n *&lt;ul&gt;|\\begin{itemize}|g' fileg

sed ':a; N; $!ba; s|&lt;/p&gt;\n&lt;ul&gt;|\\begin{itemize}|g' file

sed ':a; N;/\n\S/! {s/\n */ /;ba}; P;D' WEEE.txt

sed ':a; s/||/|nil|/g; ta'

sed ':a; s:|\(\\N\)\?|:|NULL|:g; ta'

sed ':a;$!N;/^\(\( [0-9]\+ *[0-9]\+\).*\n\)\( \{15\}\)/{s//\1\2/;ta};P;D' file

sed ':a;$!N;/^\(\([0-9]\+ *[0-9]\+\).*\n\)\( \{14\}\)/{s//\1\2/;ta};P;D' file

sed ':a;$!N;s/CELL\n/CELL/;ta;P;D'  file

sed ':a;$!N;s/\n/ /;ta' file

sed ':a;$!N;s/\n/string/;ta' inputfile

sed ':a;$!N;s/^\(\(.*fruit\).*\)\n\2\(.*\)/\1,\3/;ta;P;D' file

sed ':a;$!{N;N};s/\n\n\([a-z]\)/ \1/;ta;P;D' sentences

sed ':a;$!{N;ba};s/.*\[notice\][^\n]*\n//' file

sed ':a;$!{N;ba};s/\(foobar\)/\1\nsome_text/4' inputfile

sed ':a;$!{N;ba};s/\n/\\n/g;s/a/_/g' <<< "$VAR" | tr -d '\n'

sed ':a;$!{N;s/\n/&/3;Ta};/^\[Data\][^\n]*\n\n[^[][^\n]*\n$/b;s/\n//;D' file

sed ':a;$bb;N;/^ABC/!D;/&&$/!ba;:b;/^ABC.*<ID>\n'"$id"'.*&&$/p;d' file

sed ':a;$bc;N;ba;:c;s/&#13;\n/ /g' file

 sed ':a;/0$/{N;s/\n//;ba}'

sed ':a;/:[^_=]*=/!b;s//\n&\n/;h;s/.*\n\(.*\)\n.*/\1/;y/ /_/;H;g;s/\n.*\n\(.*\)\n\(.*\)/\2\1/;ta' file

sed ':a;/{/!d;h;s/{[^}]*}/\n&\n/;s/[{}]//g;s/\n/{/;s/\n/}/p;z;x;s/{//;s/}//;ba' file 

sed ':a;/{/!d;s/{[^}]*}/\n&\n/;h;s/[{}]//g;s/\n/{/;s/\n/}/;G;P;s/[^\n]*\n//;s/\n{//;s/}\n//;ba' file

sed ':a;N;$!ba;s/[^\n]*\nNo Problems Found\n//g'

sed ':a;N;$!ba;s/\n / /g' file.txt

sed ':a;N;$!ba;s/\n/ /g'

sed ':a;N;$!ba;s/\n/:/g'

sed ':a;N;$!ba;s/\n\([a-z]\)/ \1/g' this_file > that_file

sed ':a;N;$!ba;s/\n|/|/g' input.txt

sed ':a;N;$!ba;s/\t#\n\tpap/NewString/g' file

sed ':a;N;$!ba;s|<td></td> *\n *<td>)</td>|...|g' infile >outfile

sed ':a;N;$\!ba;s/\n/ /g'  # Suitable for csh only!!

sed ':a;N;/\[.*\]$/{/.*FAILED.*\n/{P;D};D;t};s/\n/-/g;$d;t a;' file_name | sed 's/-/\n/g'

sed ':a;s/,,/,58,/g;ta' file

sed ':a;s/\([^ ]* .*[^\\]\) \(.*\)/\1\\ \2/;ta'

sed ':a;s/\n/&/20;tb;$!{N;ba};:b;/4320102/!D;:c;n;/<\/eventUpdate>/!bc' file

sed ':a;s/\t\t/\tNA\t/g;ta' file

sed ':a;s/^\([[:space:]]*\)[[:space:]]/\1_/;ta' file

sed ':a;s/^\([0-9]*\):\([^:]*\):/\1:\2\1/;ta;s/://' input

sed ':a;{N;s/\n */ /};ba' INPUT_FILE

sed ':a;{N;s/\n/, /};ba' INPUT_FILE

sed ':l s/\(([^ )]*\)[ ]/\1_/;tl' input

sed ':l s/\(([^ )]*\)[ ]\([^)]*)\)/\1_\2/;tl' input

sed ':l s/\(number="[^" \t]*\)\s\s*/\1/g;tl' input

sed ':l;N;$!tl;N;s!<directory number=133 name=var1>[ ]*\n<myfile name=test1 />[ ]*\n</directory>!<directory numbe=133 myfile=test1 />!' input

sed ':l;N;$!tl;N;s!<directory number=\([0-9]*\) name=\([^>]*\)>[ ]*\n<myfile name=test1 />[ ]*\n</directory>!<directory number=\1 myfile=\2 />!' input

sed ':l;s/-\([^- ]*\)\( *=\)/_\1\2/g;tl' input

sed ':label s/^\(\(        \)*\)\t/\1        /; t label' -i  *.cc *.h

sed ':loop;/private:\|public:\|protected:/{n;/^$/d;Tloop}' inputfile

sed ':r;$!{N;br};s/\n{/{/g'

sed ':t /define service{/ , /}/ { /}/! { $! { N; bt } }; /NSClient++ Version/d }' file

sed ':x;/a\{100\}/b;s/a/aa/;tx'

sed "\@$node@s/^/#/" ....

sed '@^//<<<@,@^//.*>>>@d'

sed G file

sed G file

sed 'H;/pattern/h;$!d;x;//!d' file

sed 'N; s/)[ ]*\n{/&\npr_debug();/g'

$ sed 'N; s/\<why\>\n\<huh\>/yo/g' test.txt

sed 'N;$d'

sed 'N;$s/,\n/\n/;P;D' inputfile

sed 'N;/<Location \/>\n *Order allow, deny/s//&\n  Allow from all/;P;D' file

sed 'N;/)\;/s/,\n/\n/;P;D' inputfile

sed 'N;/9[[:digit:]]\{4\}\n.*9[[:digit:]]\{4\}/D;P;D' processme.txt

sed 'N;/9[[:digit:]]\{4\}\n.*9[[:digit:]]\{4\}/{P;d;D};P;D' processme.txt

sed 'N;/\n *{/s// {/;P;D'

sed 'N;/\n,/s/"\? *\n//;P;D' title_csv

sed 'N;/\n.*0.00%.*/!{P;D};N;d' inputfile

 sed 'N;/\n{/s// {/;P;D' file.css

sed 'N;/^[^\n]*\n[^\n]*$/N; /.*\n.*\n.*Possible/{$q;N;N;N;d};P;D;' structure > final

sed 'N;N;N;s/\n//g;s/[0-9]*/& /' YourFile

 sed 'N;N;s/\n/ /g' file

sed 'N;N;s/\n/#/g' file |sort -t"_" -nr -k4 | sed 's|#|\n|g'

sed 'N;s/,\n)/\n)/;P;D' inputfile

sed 'N;s/\n/ /' yourFile

sed 'N;s/\n/ /;'

sed 'N;s/\n/ | /;s/\r//g' file.txt

sed 'N;s/\n{/{/'

sed 'N;s/\r\n/ /'

sed 'N;s@ </V>\n<N> @" = "@g'

sed 'N;s@ </V>\n<N> @" = "@g;P;D'

sed 'NUMq;d' file

sed 'Ns/.*/replacement-line/' file.txt > new_file.txt

sed Q -i *

sed 'R bar.txt' foo.txt | sed 'N;s/^\(.*\)\(%.*\)\n\(.*\)/\1\3\2/'

sed 'R fileB' fileA

sed '\#<Directory /var/www/>#,\#</Directory># s|\(AllowOverride\) None|\1 All|' inputfile

sed '\#/bbb#d' filename

sed '\,some/path,d'

sed '\?^/dev/xvdb?d' /etc/fstab

sed \\fs-bri-01\9732\9732.hfls -i -e "s/LogPath=\"[\:A-Z0-9a-z_\\\/\.\ ]*\"/LogPath=\"ABC\"/g"

sed '\|<a href="/get/php|!d;N;s/.*\(php-\([0-9\.]\+\)\.tar\.bz2\).*md5: \([0-9a-f]\{32\}\).*/\1 \2 \3/;q' file

sed '\|/usr/share|s|^|#|' test

sed '\~export PATH="$HOME/.rbenv/bin:$PATH~d' .testing

sed '^[\#\&\*]/d' yourFile.txt > output.txt

sed `sed 's|\(.*\) \(.*\)|s/\1/\2/|' input` output

sed 'do whatever' ${*}_stubs.cc > tempstubs.cc

sed e '/tag1/!d;/tag2/!d;.../tagN/!d' filename

sed "h; :b; \$b ; N; /^${1}\n     n/ {h;x;s//Noun\n/; bb}; \$b ; P; D"

sed 'h; s/ .*//; x; s/.* //; s:/:-:g; x; G; s/\n/ /'

sed 'h;:b;$b;N;N;/PATTERN/{N;d};$b;P;D' inputfile

sed 'h;s/[^=]*=[^=]*=*=#\(.*\)$/\1/;s/\([^=]\)#/\1/g;x;s/\([^=]*=[^=]*=\+#\).*/\1/;G;s/\n//g' inputfile

sed 'h;s/[^=]*=*=#\(.*\)/\1/;s/\([^=]\)#/\1/g;x;s/\([^=]*=\+#\).*/\1/;G;s/\n//g' inputfile

sed 'h;s/[^\x27]*\x27\(.*\)/\n\x27\1/;s/ //g;x;s/\([^\x27]*\).*/\1/;G;s/\n//g'

sed 'h;s/.*".*"//;s/ /|/g;x;s/\(.*".*"\).*/\1/;G;s/\n//'

sed 'h;s/\([0-9][0-9]\.\).*\(\.footer\)/\1\n\2/;x;s/.*[0-9][0-9]\.\(.*\).footer/\1/;s/\./_/g;x;G;s/\(\n\)\(.*\)\1\(.*\)/\3\2/' file

sed 'h;s/^[^ ]* //;x;s/ [^ ]*$//;G'

z=$(sed - n "${x} { p; q }"  index.html) 

sed 'n; d' infile  # output ODD lines only

sed 'n;n;n;n;n;n;d;' 

sed "p;s/ar/AR/g"

sed q file

sed 's!&lt;foo_bar&gt;[^&]*&lt;/foo_bar&gt;!!g' input

 sed 's!@\(.*\)!_\1@generic.com!' FILE

sed "s!@string\/\(\w*\)!\1!p"

sed 's!A\{30,\}!BBBBB...BBBB!g'

sed 's!myurl!http://192.168.1.1:8080/!' strings.xml

sed 's#<!-- CordovaVersion -->#<script src="cordova-1.7.0.js" type="text/javascript"></script>#g' junk4 > junk4_modified

sed 's#<....>#replacement#g' file

sed 's#<div class="SectionText">\(\([^<]\|<[^/]\|</[^d]\|</d[^i]\|</di[^v]\|</div[^>]\)*\)</div>#\1#g'

sed "s#[^^]\([0-9]\.\) #\n\1 #g"

sed 's#"http://www.fubar.com"#URL_FUBAR#g'

sed "s#$old#$new#" Current_series_list.txt

sed "s#\(/[^/]\{3\}\)[^/]*#\1#g" filename

sed 's#.*<br/><br/><br/>\(.*\)<br/><br/>After you.*#\1#' yourfile.xml

sed 's#.*\(\[[^]]*\]\).*"[A-Z]* \(.*\) HTTP/[0-9.]*" \(.*\)#\1 \2 \3#'

sed 's#/# #' | sed 's/=/ /'

sed "s#/\*\*/##g"

sed 's#/var.*\.co\.uk/##' file

sed 's#\([0-9][0-9][0-9][0-9]\)-\([0-9][0-9]\)-\([0-9][0-9]\)#\1.\2.\3#g'

sed 's#\([^[ ]*\)\[[^]]*\]#/dev/\1#g'

sed 's#\([^|]\+\)|\(.*\)#<\1>\2</\1>#'

sed 's#\(/[^:]*\).*#\1#g'

sed 's#\(\w\+\) #\1 /#' 

sed  's#\\uline{[^}]*}#{\\color{cname}&}#g' file

sed 's#^(.*)$#^S01E(.*)$#' 

sed 's#^\(.*\)$#S01E\1#'

sed 's#db/fs-type$##' myfile > myalteredfile

sed 's#from#to#' file > test.out

sed 's#http://#\n&#g' infile

sed "s%\$file%$file%" script.in > script.out

sed 's%.*%/&/p%' 1.txt | less

sed 's%.*%/&/p%' 1.txt | sed -f - -n 2.txt | awk ... >file1

sed 's%.*%/&/p%' 1.txt | sed -f - -n 2.txt | less

sed s%'/tmp/a1'%''%g  ## no need to worry about escaping slashes any more

sed 's%12pt;">\(.*\)</span></div></message>%\1%'

sed "s%PATTERN%PATTERN%"

for i in *.html *.htm *.php *.txt; do sed 's%\(http://www\.\)\(MyDomain\)\(\.com\)%\1OtherDomain\3/\2%g' "$i" > tmp && mv -i tmp "$i"; done

sed "s%^%$1 | %" "$1"

sed 's,/*[^/]\+/*$,,'

sed 's,/,\\\\,g'

sed 's,/\\AAA[^/]*/,/,g'

sed 's,=.*,,' thefile

sed 's,APP_HOME=[^;]*,"APP_HOME=/home/user/app/2.0",' -i ~/.bashrc

sed 's,^\([^:]*\):.*\(RID=[[:alnum:]]*\).*$,\1 : \2,'

sed 's,some/path,other/path,'

sed 's./..g'

sed 's/   *//g' file

sed 's/  */:/3g'  file

sed 's/  */\'$'\n''/g'

sed "s/  */\n/g"

sed 's/ $#.*//g' testfile.txt

sed 's/ *[(]*[A-Z][A-Z]*-[0-9]\{1,4\}[):]* *//'

sed 's/ *[(]\?[A-Z]\+-[0-9]\{1,4\}[):]\? *//'

sed 's/ *[0-9]*.//' file2 > file3

sed 's/ *$//' -i file.cpp

sed 's/ *$//' file > _temp && mv _temp file

sed 's/ *+/+/'

sed "s/ *13) \(.*\)/ \x1b[32m*\x1b[0m \1/"

sed 's/ *\\t.*//'

 sed 's/ *|.*//' file.txt

sed 's/ .* / /'

sed "s/ .*$//" <logfile.txt | sort -u

sed 's/ .*//' file

sed 's/ .*//g'  file

sed 's/ ...../..../ ; s/../..../; etc; s/.../../' inputFile >> //sysadm/shared/file.tmp

sed 's/ / 0 /2' file

sed 's/ /,/g'

sed 's/ //' inputFile

sed 's/ //g' inputfile

sed 's/ /\n/g' < filename

sed 's/ /\n/g' file | column -xc 35

sed 's/ /_/'

sed 's/ /_/4g;s/_\([^_]*\)_\([^_]*\)$/ \1 \2/' file

sed "s/ COMMENT.*'[^']*'/ /"

sed 's/ \([0-9]\{4\}\)/\n\1/g' file

sed 's/ \(Jan\|Feb\|Mar\|Apr\|May\|Jun\|Aug\|Sep\|Oct\|Nov\|Dec\) [0-9][0-9], [2][0-9][0-9][0-9]//g'

sed 's/ \+/\n/g'       # With GNU sed

sed 's/ \{1,\}/\n/g'

sed 's/<[^>]*>//g'

sed 's/<[^>]*>//g' file

sed 's/<[^>]*>//g' inputfile > outputfile

sed 's/<[^>]\+>//g' file

sed "s/<!--BODY-->/${4//\\n/$'\n'}/;"

sed 's/<.*>\(.*\)<.*>/\1/'

sed 's/<.*>\(.*\)<\/.*>/\1/'

sed 's/</ </g ; s/>/> /g' file

sed s/'<\/strong>.*'/''/

sed "s/<?xml version='1.0' encoding='UTF-8'?>//g" myFile > myFile1

sed "s/<Connector port=\"8080\" protocol=\"HTTP\/1\.1/<Connector port=\"$port\" protocol=\"HTTP\/1.1\"/"

sed 's/<DistanceMeters>[^>]*>//g' file

sed "s/\<VERSION\>/$version_1/g"

sed 's/<a \+href="\([^\"]*\)"/<a href=".\1.html"/g' my_file.html

sed "s/<enter description here>/ updating $change form/"

$ sed 's/<script id="live-reload".*\?<\/script>/test/g' file

sed 's/<script type="text/javascript">What you want removed</script>//'

sed "s/<span class='A'>\([^<]*\)<\/span>/**\1**/g"

sed 's/<version\.suffix>\(.*\)<.*>/\1/'

sed "s/<x>.*<\/x>/<x>something<\/x>/g" file

 sed "s/[[:<:]]VERSION[[:>:]]/$version_1/g"

sed 's/[[:alpha:]][[:alpha:]]*/(&)/g' file

sed 's/[[:alpha:]][[:space:]][[:alpha:]][[:space:]][[:digit:]]\+//' input

sed 's/[[:alpha:]]\+/(&)/g' file

sed 's/[[:alpha:]]\{1,\}/(&)/g' file

sed "s/[[:blank:]][[:blank:]]*/ /g" a>b

sed 's/[[:blank:]][34]:[^[:blank:]]\{1,\}[[:blank:]]*/ /g' YourFile

sed "s/[[:blank:]]\+/ /g" a>b

sed "s/[[:blank:]]\{1,\}/ /g" a>b

sed 's/[[:space:]]/; /' # preserves the space char. 

sed 's/[[:space:]]/;/'

sed 's/[[:space:]]\(=\|{{\|\*\|'\''\)/\n\1/g' your_one_line_file

sed 's/[[:space:]]\+/\n/g' $your_file  | sort -u | egrep '[[:upper:]].*[[:upper:]]'

sed 's/[[:space:]]\?[A-Za-z0-9_\/\:\.-]\+\.\(com\|org\)//g' foo.txt 

sed 's/[[:space:]]\{1,\}/,/g' file

sed 's/[[:space:]]\{1,\}/;/'

sed 's/[[:space:]]\{1,\}/;/g'

sed 's/[][]//g; s/:\|\s\+/\t/g'

 sed 's/[][()]/\\&/g' infile > outfile

sed 's/[]^$.*&[]/\\&/g;s|.*|/^&$/d|' file1 | sed -f - file2

sed "s/[$OPTARG]//g"

sed 's/[(,)]/\t/g' yourfile

sed 's/[(,)]/\t/g' yourfile | column -t > newupdatedfile

sed 's/[,.-]$/& /'

 sed 's/[-_:]/\t/g' infile > outfile

     sed 's/[0-9]+$//'

sed 's/[0-9]/&&/' filename

sed 's/[0-9]//1' file.txt

sed 's/[0-9]/0&/'

sed 's/[0-9]\+/file&.txt/' file_name.txt

sed 's/[0-9-]//g' file

sed s'/[:=]/ /g'

sed 's/[Ff][Ii][Rr][Ss][Tt]/last/g' file

sed 's/[Tt][Oo][Ff][Ii][Nn][Dd]/REPLACE/g' fileName

CTMP_ESC=$(sed 's/[\*\.]/\\&/g' <<<"$CTMP")

CTMPESC=$(sed 's/[\*\.&/]/\\&/g' <<<"$CTMP")

sed 's/[\x80-\xff]//g'

sed 's/[^ ]* :\|,\|//g' <<< "$var1" | grep -o '[^ ]*'

sed 's/[^ ]*$/\n&/;h;y/./\//;G;s/\n.*\n//' file

sed 's/[^ -~]//g'

sed 's/[^[:print:]\t]//'g

sed 's/[^]]*\]//'

sed 's/[^,]*<[^,]*//g' file

sed 's/[^,]*,/,/2g' file

sed 's/[^,]*/$((&+400))/3;s/.*/echo "&"/e' file

sed 's/[^0-9]//g' file.txt

sed  's/[^0-9]//g' filename

sed 's/[^0-9]//g;s/^[0-9]\{1,2\}$/&00/;s/^\(.*\)..$/\1/'

sed 's/[^0-9.]*\([0-9.]*\).*/\1/'

sed 's/[^0-9/]//g'

sed 's/[^;]*/YEAR/' file

sed 's/[^;];//6' file

sed 's/[^=>]*=//' file

sed 's/[^\o51-\o57\o64-\o89\o96-\o105\o112-\o121\o128-\o137\o144-\o145\o147\o150\o291-\o293]/ /g' inputfile

sed  's/[^_]*_\([0-9]\{2\}\)-\([0-9]\{2\}\)-\([0-9]\{2\}\)/newyears_20\3-\1-\2/'

sed 's/[^characters you want to keep]//g'

sed 's/[_&$]/\\&/g'

sed 's/[a-z][ ]*[a-z][ ]*[0-9]*//gi'

sed 's/[a-z][[:space:]][a-z][[:space:]][0-9]\{1,\}//gi' input

sed 's/[a-z][A-Z][0-9][a-z][A-Z][0-9][a-z][A-Z][0-9]\([a-z]\)/\1/g'

sed 's/[el]//g'

sed s/<enter|return>//g

sed 's/></>\n</g' 

sed 's/>/\/>/g'

$ sed 's/>12\.00</>24.00</g' file.xml

sed 's/]$/,/'

sed 's/" (.*//g'

 sed 's/"[0-9]*":{/{/g' file

sed 's/"[^"]*"/"new name"/'

sed 's/"[^"]*"/\U\0/g' <<< 'foo "bar" baz'

sed 's/""$/"/' YourFile > NewFile

R2K_TEMP_DIR=$( sed 's/"$R2K_SOURCE"/"$R2K_PROCESSED"/g' $file )

sed 's/"$ampP"/"$ampR"/g'

sed 's/".*\/\(.\+\.jpg\)"/\1/ig' file

sed "s/\"/'/g"

sed 's/"//g'

sed 's/"\([^"]*\) " */"\1" /g;s/ $//' file

sed 's/"\([^"]*\) "/"\1"/g' file

sed 's/"\(.[^"]*\)"/\\quotation{\1}/g' file

sed 's/"index\.php?page=\(.*\)"/\1\.html/g'

sed 's/#[[:alnum:]][[:alnum:]]*/replacement/g'

sed 's/#[[:alnum:]]\+/replacement/g' 

sed 's/#[[:alnum:]]\{1,\}/replacement/g'

sed 's/#[0-9]* *(\(.*\)):$/ \1/' filename

sed 's/#[0-9]*//;s/(\(.*\)):$/\1/' filename

sed 's/#.*$//'

sed 's/#cheese-pasta=[^"]*"/"/g'

sed 's/#cheese-pasta=[^\\]*\\//g'

sed "s/$(printf '\\\\\t')/ /g"

sed 's/$*\.o[ :]*/$*.o $@ : /g' < $*.d > $@

sed 's/$/ foo/' r.txt > newfile.txt

sed 's/$/<CRLF>/'

sed 's/$/<br>/' <log-file >html-file

sed 's/$/<br>/' mytext.txt > mytext.txt.new && mv mytext.txt.new mytext.txt

sed 's/$/<br>/' <log-file | tr -d $'\n' >html-file

sed 's/$/<br>/; 1 s/^/<h3>/; 5 s/$/<\/h3>/'

sed 's/$/,/;n;n;n' file

sed 's/$/;/' file

sed 's/$/\\n/' | tr -d '\n'

sed 's/$/\n< _jupijuice_ >/' input.txt

sed 's/$/\t1/g'

sed 's/$/^M/'

sed 's/$'"/`echo \\\r`/" foo.txt >> bar.txt

sed 's/$/foo/' file.txt

sed 's/$/p/' linesfile | sed -n -f - datafile

sed "s/$/|$(date +"%d-%m-%Y")/"

sed "s/${var}//g"

sed "s/\${version.number}/$version/" template.txt > readme.txt

sed "s/%%DATE%%/$(date)/"  test.html

sed 's/%RRN%\([^%]\+\)%/%RRN%0%/g'

sed "s/%SCHEMA%/$schemaName/" $SCRIPT_DIR/delete_data.sql | psql powa_aim_db postgres

sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g'

sed "s/'[^']*'//g" file

sed "s/'[^@']*@[^@']*'/'empty@invalid'/g"

sed 's/'"$pattern"'/\n/' file

sed 's/'$'\t''/,/g' file.tsv > file.csv

sed 's/'$'\tEN-GB\t''//g' filename

sed "s/'.*/S/g" data.txt > new.txt 

sed "s/'/''/g"

sed 's/'\''[^'\'']*'\''//g' file

sed 's/'\''.*/S/g' data.txt > new.txt 

sed 's/'\''/'\'''\''/g'

sed  "s/\([^ ]*[A-Z][^ ]*.png\)/\L\1/g" file-21-05-2013.sql*

sed 's/([^)]*)/(*)/g'

sed "s/\([a-zA-Z]\)\s*$/\1\'/" file

sed 's/([dD][eE][fF][^)]*)//g'

sed "s/\('[^']*'\)/\n&\n/g;s/\(\n'[^.]*\)\.\([^']*Z'\)/\1-\2/g;s/\(\n'[^.]*\)\.\([^']*uF'\)/\1_\2/g;s/\n//g" inputfile

sed 's/(.*(/(/' file

sed "s/\(.*\)/\"\1 :{\$row['\1']}\"/"

sed "s/\(.*\)/\1 = \1;/"

sed "s/\(172.16.0.30\)\(.*\)\(${share}\)\( \(.*\)\|$\)/172.16.0.35\2\3\4/"

sed "s/\(PID:\)[0-9]*/\1${$}/" "${ARCHIVO_INFO_SESION}"

sed "s/\(VALUES (.*,\)'.*\?'/\1'Detroit'/g"

sed 's/(\([[:alpha:]][[:alpha:]]\))/\1/g'

sed 's/(\s*20120408\s*,\s*20120409\s*,\s*20120410\s*)/(xxx)/g' input

sed 's/(def[^)]*)//gi'

sed "s/\(if (\)\(\$_SESSION\['POST']\['\([^']*\)']\)==1/\1isset(\2) \&\& \$_SESSION['POST']['\3']==1/" file

sed 's/).*//' tmp_used_strings2.txt 

sed 's/)\([^)]*)\)\([^)]*)\)\([^)]*\)$/)\1`<wbr>`\2`<wbr>`\3/' data.txt

sed  "s/\+/\'/g" test.txt

sed 's/, /\n/g' your.file

sed s/,[^,]*,[^,]*$//g sample.csv

sed s/,[^,]*,[^,]*,[^,]*$//g sample.csv

sed 's/,$/,./'

sed 's/,$//' file > file.nocomma

sed "s/,'[^']*')/)/"

sed 's/,/ and /' file

sed "s/,/','/g" <<< "A,B,C"

sed "s/,/\',\'/g"

sed "s/,/','/g"  "A,B,C"

sed 's/,/, /4' yourfile

sed 's/,/-/5' yourfile

sed 's/,//5' input.txt

sed 's/,/My_com/g' <<< "$title"

sed 's/,\+$//' file

sed 's/,\.-$/,.- /'

sed "s/--- end/--- $username ---\ndata data data data\ndata data data data\n&/"

sed 's/-.*;/;/g' file > newFile

line=$( sed  "s/-Xmx[0-9]\+/-Xmx$heapMB/" <<<$line )

sed 's/-\([0-9]\)/\/\1/g' input.txt

sed 's/-\([0-9.]\+\)/(\1)/g' inputfile

VER_N=$(sed 's/.$//' <<< $VER)

sed 's/.* FOREIGN KEY (\([^)]*\)) REFERENCES \([^(]*\) (\([^)]*\)) .*/(\1) \2 (\3)/'

sed 's/.*[.]//' input | sort | uniq -c

sed 's/.*[^0-9.]\([0-9.]\+\)/\1/g'

sed 's/.*[ap]\.m\.\s\+\(.*\)$/\1/' DateStamp.csv

sed 's/.*"\([^"]*\)".*/\1/;s/<\([^>]*\)>/\1/' file

sed 's/.*"\([^"]*\)".*/\1/;s/<\([^>]*\)>/\1/' file | egrep "\.[a-z]{1,3}$"

sed 's/.*#\([0-9]*\).*/\1/'

sed 's/.*(openissues)\(.*\)(\/openissues).*/\1/' test.txt

sed 's/.*- //'

$ sed 's/.*/%&%/' file

sed 's/.*/& &/' FILE

sed 's/.*000/#&/' file

sed 's/.*:.*/date -d"&" "+%Y-%m-%d"/ge' file

sed 's/.*;//'

sed 's/.*Depends: \([^ ]*\) .*/\1/' lib-dep-list

 sed 's/.*SRC=\([0-9.]\+\).*/\1/' infile | sort -u

sed 's/.*TYPE=\([^;]*\);.*/\1/'

sed 's/.*TYPE=\(.*\);.*/\1/'

sed 's/.*VARCHAR(1000).*/--&/' file

sed 's/.*\ \(.*\) kb\/s/\1\ kb\/s/g'

sed 's/.*\ \(.*\)\ \(.*\)/\1\ \2/g'

sed 's/.*\<\(domain\)=\([^&]*\).*\<\(sdk_ver\)=\([^&]*\).*/\1 \3sion\n\2 \4/p;d' file

 sed 's/.*\([0-9]\{10\}\).*/\1,&/' input

sed 's/.*\([0-9]\{10\}\).*/\1,&/;/[0-9]\{10\}/!s/^/0000000000,/' input

sed 's/.*\(HOSTNAME=\).*/\1fred/' /etc/sysconfig/network

sed 's/.*\(HOSTNAME=\)/\1fred/' /etc/sysconfig/network

sed 's/.*\(MId=.*\)\}.*/\1/'

sed 's/.*\(searchstring\).*/___\1___/'

sed 's/.*\.\(.*\..*\)/\1/'

sed 's/.*\/watch?v=\(.\{11\}\).*/\1/g'

sed 's/.*_ \([^(]\+\).*/\1/' /tmp/foo

sed 's/.*deviceid=\([^&]*\).*/\1/'

sed 's/.*href=\"\(.*\)\".*/\1/g' file | grep -oP '.*\.bz2$'

sed 's/.*pid \([0-9]*\).*/\1/'

sed 's/.*ttyS0.*/You have to use usb interface/' myfile

sed 's/.*window:\(.*\)/\1/g' file  

sed 's/...$/.&/'

$ sed 's/.../&\n/g' file.txt

sed "s/.END.*//"

sed 's/.\s.\s[0-9]\+//g' input

sed 's/.\{20\}$//' < inputFile

sed 's/.\{250\}/&\n/g'

sed s/.po/.mo/

sed 's/.shayam.//g' FILE > FILE.new && mv FILE.new FILE

sed "s/""/'/g" | sed "s/.*='\(.[^']*\)'.*/\1/"

sed s///g

sed 's/0*\([1-9]\)/\1/g'

sed "s/0/$(date +%s)/g" input.txt > output.txt

sed 's/1/ONE/; s/2/TWO/; /3/q; s/ONE/THREE/' input.txt

sed 's/1031/1031\n/g' test.xml | grep 1031

sed 's/1\([^.]\)/2\1/g' test

sed 's/20$/21/'

sed 's/30[0-9][0-9]\" authentication=\"someuniqueauthkey/'$1'\" authentication=\"someuniqueauthkey/' $configFile

sed 's/64/\n&/g' file

sed 's/:[^=]*=/$(tr " " "_" <<<"&")/g;s/.*/echo "&"/e' file

sed 's/:.*//'

sed 's/:/ /2'

sed 's/:/ family:/' yourfile.txt

sed s/://g file

sed 's/:/\\n/g' ~/Desktop/myfile.txt

sed 's/:/|/' input.txt | cut ... | sed 's/|/:/'

 sed 's/:50K.*:53B/:50KCREDIT:53B/g'

 sed 's/:50K.*:53B/:50KCREDIT:53B/g' path/to/your_text_file

sed 's/:sl:/\n/g' singleline.txt

SOA=$(sed 's/;.*//;/^@/p;1,/^@/d' $SOAfile | awk 'BEGIN{RS="@"} NR==2{print $6}')

sed 's/;/./3;s/;/./4' -iBAK *

 sed "s/;//g" pool| while read ip string ;do  nc -zw3 $ip 80 || echo "$ip failed" >> report; done

sed "s/;/;$(printf '\\\n')/g"

sed 's/;?new[^;]*$|new[^;]*;//g'

sed 's/;\([0-9]*\),\([0-9]*\);/;\1.\2;/g;s/;[[:blank:]]*$//' ./infile

sed 's/;\([0-9]\{6\}\)00;/;\101;/g'

sed 's/;size=[0-9]*;//g'

sed 's/=[^,]*//g'

sed 's/@[^,]*/@generic.com/'

sed 's/@[a-f0-9]\{8\},/@/' input

sed 's/@"\([^.]*\)\.png",/&\n@"\1",/' input 

sed 's/@XmlElement(namespace = \(".*"\), \(required = true\))/@Namespace(reference=\1)\n@Element(\2)/' files

sed 's/@version@/'$(sha1sum $(xpi) | grep -Eow '^[^ ]+'  | sed -e 's/\(\/\|\\\|&\)/\\&/g')'/' input.txt > output.txt

sed 's/@version@/'$(sha1sum $(xpi) | grep -Eow '^[^ ]+')'/' input.txt > output.txt

sed 's/ABCD\(.*\)[0-9]\{2\}-[[:alpha:]].*.sql.zip/\1/'

sed 's/DATA_.*/DATA_/' filename.txt

sed 's/DirectoryIndex/& index.php/'

sed "s/EMAIL/$email/"

sed 's/FIND TEXT/REPLACE TEXT/g' source.txt > dest.txt

sed 's/GENERATED ALWAYS AS.*$/,/' file

sed "s/GRUB_CMDLINE_LINUX=\"\(.*\)\"/GRUB_CMDLINE_LINUX=\"\1 ipv6.disable=1\"/" /etc/default/grub

sed 's/HTML/test/g'

sed 's/HTTP.*://' ip_all02.txt > ip_all02_clean.txt

sed 's/Hello \(.*\)! Have a good day./Bye \1! Good night./' MyInputFile > MyOutputFile

sed 's/M1-[^-]*-[^\.]*/M1-plt32-size10/' filename

sed 's/Minimum = \([0-9]\+\)ms.*/\1/'

sed 's/Monday:/&\n/g'

sed "s/NUMBER/$1/g" myScript.txt > test.txt

$ sed "s/NUMBER/$NUMBER/gi" foo.txt

sed "s/REPLACEME/$(sed "s/.*/'&'/" | paste -s -d, -)/" < template_file.txt

sed 's/T[^,]*//g' file

sed 's/TITLE/New Title/' old.txt > new.txt

sed 's/The \(.*\) line/The \1 lines\nThe new \1 line/'

sed 's/\<\/textarea/\'$'\n\<\\/textarea/g' f

sed 's/\<http\(s\|\):\/\///' file

sed 's/\[</[\&lt;/g'

sed 's/\[[^]]*\]//g'

sed 's/\[[^]]*\]//g' 

sed 's/\[.[1234567890]]*//g' file1 > file2

sed 's/\[.*] //' $file

sed 's/\[.*]/_ARRAY_/'

sed  's/\[.*\]//g'

sed 's/\[1234([[:digit:]])[[:space:]]#[[:digit:]]\][[:space:]]//g' file

 sed 's/\[Bo.*/&SomeText&SomeText/g' filename

sed 's/\[INFO\] Total Time: //'

sed 's/\[^\]*//g' file1 > file2

sed 's/\[my_id=\([^]]*\)\]/\1/g' file

sed 's/\] */]/g;s/\]\(.\)/]\n\1/g;s/ *\[/[/g;s/\(.\)\[/\1\n[/g' item_gloves

sed 's/\!/:/g' file > outfile

$ sed 's/\"//g' file.txt

sed 's/\$PLACEHOLDER_/\$/g' file

sed 's/\$\$placeholder\$\$/'"$o"'/g'

sed 's/\( [^ ]*\)\{2\}$/\n&/;h;s/\n.*//;s/ /_/4g;G;s/\n.*\n//' file

sed 's/\( constant = *\)[^ ]*/\1substituteValue/' <<< "$line"

sed 's/\(<[^>]*>\)\(.*\)\(<[^>]*>\)/\1\2/' test.txt

sed 's/\(<structure name=\"\)\(.\)/\1\u\2/' xml-file

sed 's/\([ \t]\+[^ \t]*\)\{3\}$//' your_file

sed 's/\([[:alpha:]]\+[[:digit:]]\+[[:alnum:]]*\|[[:digit:]]\+[[:alpha:]]\+[[:alnum:]]*\) \?//g' inputfile

sed 's/\([[:space:]]\|;\)[[:alnum:]]*;/\1/g; s/Name=//g'

sed 's/\([$A-Z0-9]*\) \([$A-Z0-9]*\)$/-w \1 -c \2/' file

sed 's/\([0-9][-0-9 :]*\)\.[0-9]\{3\}/\1/' < a.csv

sed 's/\([0-9][0-9]\):\([0-9][0-9]\):\([0-9][0-9]\)/PT\1H\2M\3S/'

sed 's/\([0-9]*-[0-9]*-[0-9]*\)\([ \t]*\)\(.*\)/\3\2\1/' input

sed 's/\([0-9]*\)-\([0-9]*\)-\([0-9]*\)/\3\/\2\/\1/g' file

sed 's/\([0-9]\) /\1\n/g' file.txt

sed 's/\([0-9]\) \([0-9]\)/\1\2/g'

sed 's/\([0-9]\)T\([0-9]\)/\1 \2/g' file.csv

sed 's/\([0-9]\)\([A-Z]\)/\1 \2/' ./infile

sed 's/\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)/\4.\3.\2.\1/g'

sed 's/\([0-9]\+\.[0-9]\+\) \([0-9]\+\.[0-9]\+\)/\1,\2/g'

sed 's/\([0-9]\{1,3\}\.\)\{3\}[0-9]\{1,3\}/**masked ip**/g' < yourfile > newfile

sed 's/\([0-9]\{2\}\)\([0-9]\{3\}\)\([0-9]\{3\}\)\([0-9]\)\(-[0-9]\{3\}\.[0-9]\{3\}\)/\1.\2.\3.\4\5/g'

sed 's/\([0-9]\{2\}\)\/\([0-9]\{2\}\)\/\([0-9]\{2\}\)/20\3-\1-\2/g' > formatted.csv

sed 's/\([0-9]\{4\}\(-[0-9]\{2\}\)\{2\}\)/|\1/' | sort -t '|' -k 2| sed s/'|'//

sed 's/\([0-9]\{4\}\) /\1/g' inFile

sed 's/\([A-Z]\)[A-Z]*/\1/g' my_file

sed 's/\([A-Z]\{2,\}.*\)/\n\1/; s/[^\n]*\n//' infile

sed 's/\([A-Za-z_][A-Za-z0-9_]*\) *\([A-Za-z_][A-Za-z0-9_]*\);/\1 \2 = (\1 *)someOtherVar->Get("\2");/' input

sed 's/\([^ ]*\) \([^ ]*\) \([^ ]*\)/\1 "|\/usr\/sbin\/rotatelogs \2_`date +%m_%d_%Y` 86400" combined/'

> echo "CustomLog /home/logs/httpd/access_log common" | sed 's/\([^ ]*\) \([^ ]*\) \([^ ]*\)/\1 "|\/usr\/sbin\/rotatelogs \2_`date +%m_%d_%Y` 86400" combined/'

sed 's/\([^ ]\+\) your \([^ ]\+\)/\2\1er/' < fail

sed 's/\([^,]*,[^,]*,[^T]*\)[^,]*\([^T]*\).*/\1\2/' file

sed 's/\([^.]*\)\([^(]*(\)/EventUtil\2\1, /'

sed 's/\([^0-9]\),/\1\n/g' yourfile

sed 's/\([^:]*:\)\([^ ]* \)\([^:]*\)/\1\3\2/' test

sed 's/\([^;]*\).*/\1/' filename

 sed 's/\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|/\1\t\2\t\3\t\4\t\5\t\6\t\7\t\8\t/;s/|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)|\([^|]\+\)$/\t\1\t\2\t\3\t\4/'

sed 's/\(,[^,]*\),\([^,]*\)/,\2\1/' input

 sed 's/\(-\?[0-9].\?[0-9]*\) x \(-\?[0-9]\{1,\}\)^\([0-9]\{1,\}\.\?[0-9]*\)/$\1 cdot \2^^\3$/g' input > tmp

sed 's/\(.*\)/"\1"/g'

sed 's/\(.*\)\r/"\1"/g'

sed 's/\(.*href="\)\([^"]*\)\(".*\)/\1\n\2\n\3/;:a;s/\(\n.*\)_\(.*\n\)/\1-\2/;ta;s/\n//g' inputfile

sed 's/\(.......\):\(.*$\)/<s>\L \2 \E<\/s> (\1)/' tmp.dat

sed 's/\(.....\)\(.....\)/\1\n\2/' input_file | split -l 2000000 - out-prefix-

sed 's/\(.\)/\1\n/g' -i filename

strModuleToTestUpper=`sed 's/\(.\)/\U\1/' <<< "$strModuleToTest"`

sed 's/\(.\)B*$/\1/' file

sed 's/\(.\)\1\+/\1/g' infile

sed 's/\(.\{319\}\)'$'\x14''\(.*\)$/\1\2/' file > _temp && mv _temp file

sed 's/\(.\{9\}\)/\1 /' file

sed 's/\(:[0-9][0-9]\)\.[0-9]\{3\}/\1/g' input_file.csv > output.csv

sed 's/\(:[0-9]*\)20/\121/'

sed 's/\(AAA\|BBB\),\([^,]*\)/\1,{\2}/g' dataset.txt

sed 's/\(ADD INDEX\) \(.*\) ON \(.*\)(/\3 \1 \2(/'

sed 's/\(DATA[^ ]*\).*/\1/'

sed 's/\(Getceiling(\)\([^,]*\),\([^,]*\)/\1\3\2/g' input

sed 's/\(Microsoft Office f.r Mac 2011 \([^ ]*\)-Update\).*$/\1/; s/^.*>//' infile

sed 's/\(PROJECT_NUMBER[ ]*=[ ]*\)[^ ]*/\1$VERSION/' filename

sed 's/\(TAG\|TAA\|TGA\)$//'

sed 's/\(\([^,]*,\)\{3\}[^,]*\),/\1\n/'

sed 's/\(\([^,]*,\)\{4\}[^,]*\),/\1\n/g'

sed 's/\(\([^;]*;\)\{'$((FIELD-1))'\}\)\([^;]*;\)/\1\n\3\n/;h;s/[^\n]*\n\([^\n]*\).*/\1/;y/H1/X2/;G;s/\([^\n]*\)\n\([^\n]*\)\n\([^\n]*\)\n\([^\n]*\)/\2\1\4/'

sed 's/\(\([^;]*;\)\{8\}\)O\(.\{3\}\);/\1\3;/'

 sed 's/\(\([^|]*|\)\{6\}\)/\1\n/g' input.txt > output.txt

sed 's/\(\(.*;\)\{8\}\)O\(.\{3\}\);/\1\3;/'

sed 's/\(\.[0-9]*\)\([0-9]\.\)/\1 \2/'

sed 's/\(\S\)\s/\1:/' your_file

sed 's/\(\b\)\(\w\)\(\w\)\(\w\)\(\b\)/\1\4\3\2\5/g' input_file

sed 's/\(\s\+\)phone-\([0-9]\+\)/\1device-\2&/' file

sed 's/\(\w\+\)\s\+\(\w\+\)/mv sample_\1\.txt sample_\2\.txt/e' replacements.txt

sed 's/\(^[ \t]\+ODI_SESJA_ID\ CONSTANT\).*/\1 \"newtimestamp\"/' tmp

sed 's/\(^[^.]*\.[^.]*\.\)\(.*$\)/\1/g'

sed 's/\(^\|[^[:alnum:]]\)fish\($\|[^[:alnum:]]\)/\1bear\2/g'

sed 's/\(^\|,\)\([^,-]\+-\)\{3,\}[^,]\+\(,\|$\)/\3/g'

sed 's/\(_[^_]*\)\{4\}$//'

sed 's/\(condition ccc.*aaa: \).*\( bbb$\)/\1gotit\2/' file

sed 's/\(d[0-9][0-9]?\)\([^0-9]\|$\)/\1 \2/g' test2.txt >test3.txt

sed 's/\(d[0-9]\+\)/\1   /g;s/\(d[0-9 ]\{3\}\) */\1/g' test2.txt | fold -w 133 >test3.txt

sed 's/\(foo \)\(.*\)\( var\)/\1\U\2\E\3/' file

sed 's/\(foo\)\.o[ :]*/\1.o foo.P : /g' < foo.d > foo.P

sed 's/\(img_[0-9]*-[0-9]*-[0-9]*_[0-9]*\)\(.jpg\)/\2\1/'

sed 's/\(install --with-some-params some_pkg_name\)\.\([0-9]\{5\}\)/\1.10001/g'

sed 's/\*$//;s/\*/.*/g'

sed 's/\*v//g'

sed 's/\.[0-9]*/./g'

sed 's/\.[^.]*$//'

sed 's/\.$//' yourfile

sed 's/\.\.*/_/'

sed 's/\.\././g' oldfile > newfile

 sed 's/\.abc$//g' 

sed 's/\.txt//' filename

sed 's/\/\/_/_/g' file.php | xgettext -o output.po --language=PHP -

sed 's/\015//g' replace.sed >replace2.sed

$ sed 's/\S*$/2/' yourfile

$ sed 's/\S\+$/2/' yourfile

sed "s/\\\\\"/\'/g"

sed 's/\\0001/\t/g;s/$/TEXT_TO_APPEND/' input.file

sed 's/\\n/\n/g' input_file > output_file

sed 's/\\newline\(<\/Text>\)/\1/g' file

old_description=$(sed 's/\\r\\n/\r\n/g' <<<$old_description)

sed 's/\bint\b/\ int32_t\ /g' file

sed 's/\bred\b/red$(myrandom)/g' inputfile | while read -r line; do eval echo "${line}"; done

sed 's/\r$//' umlauts.sh

sed 's/\r//' big_list.txt | sort -u

old_description=$(sed "s/\\r\\n/\r\n/g" <<<$old_description)

sed 's/\s*<.*>\(.*\)<.*>/\1/'

sed 's/\s*//;:a;s/,\(.*|\(.*\)\)/\2\n\1/;ta;s/|//' file

sed 's/\s/\n/3;P;D' file

sed 's/\s/\n/g' plaintext.txt | grep http:

sed 's/\s\?\w\+\.\(com\|org\)//g' foo.txt

$ sed 's/\s\s*/|/g' < input

 sed 's/\sphone-[0-9]\+/&\t&/' file

sed 's/\t/ /2g' file

sed 's/\t/,/g' file.tsv > file.csv

sed 's/\t\t/\tNA\t/g;s//\tNA\t/g' file

sed 's/\xc2\x92//g'

sed 's/^ *[(]\?[A-Z]\+-[0-9]\{1,4\}[):]\? *//;s/ *[(]\?[A-Z]\+-[0-9]\{1,4\}[):]\? *$//'

sed 's/^ *//' | sed 's/ *$//'

sed 's/^ *//;s/ *$//'

sed "s/^ *//;s/ *$//;s/ \{1,\}/ /g;s/: */:\n/" infile | tr -s "\n"  > outfile

sed 's/^ *\([0-9][0-9]*\) \(.*\)/\2 : \1/'

sed 's/^ *\([0-9]\+\) /\1\t/'

sed 's/^ *\([^ ]\+\).*  *\([^ ]\+\) *$/\1 \2/'

sed 's/^ *\([^=]*\) *= *\(.*\) *$/\1/'

sed 's/^ *\([^=]*\) *= *\(.*\) *$/\1/' | sed 's/ *$//'

sed 's/^ *\([^=]*\) *= *\(.*\) *$/\2/'

sed 's/^ *\* *//; q'

sed 's/^[ \t]*//; s/[ \t]*$//' file.txt | awk 'BEGIN { RS=""; OFS=FS="\t"; print "A", "B", "C", "D", "E", "F" } { split ($2, one, " "); split ($3, two, " "); print one[1], two[1], one[2], two[2], one[3], two[3] }'

sed 's/^[[:blank:]]*//;s/[[:blank:]]\{1,\}/,/g' 

sed 's/^[[:space:]]*[[:digit:]]\+\./***&***/'

sed 's/^[[:space:]]*[[:digit:]]\+\.//'

sed 's/^[[:space:]]*//;s/[[:space:]]*$//'

sed "s/^[ \t]*//" -i youfile

sed 's/^[*-+] *\[\(.*\)\](\(.*\))/Notebook: x\nTitle: \1\nUrl: \2\nKeywords: y\n\nContent Area\n\nWill use the \1 and \2 variable here again/' file.txt

sed 's/^[0-9]* ps//g' file1

sed 's/^[0-9]*//'

sed 's/^[0-9]\+://' your.file

sed 's/^[E ]*\([0-9]\)/\1/'

sed 's/^[Ss][Ee][Rr][Vv][Ee][Rr]$/server.apple.com/g'

sed 's/^[^ ]* //g'

sed  's/^[^[:space:]]\{1,\}[[:space:]]\{1,\}//' in.txt

sed 's/^[^]]\+\] \([[:digit:]]\+\) \("[^"]\+"\).*/\2,\1/' inputfile

sed 's/^[^#]*$/& # newcontent, new, new/'

sed "s/^[^$TAB]*$TAB//g" input.txt > output.txt

sed 's/^[^:]*://' infile

sed 's/^[^:]*only\(1[01]\)[^ ]*/\1/'

sed 's/^[^=]*= *"\([^"]*\)"$/\1/'

sed 's/^[^_]\+_\+\(\(_*[^_]\+\)\{3\}\).*/\1/'

sed 's/^[^|]*|[[:space:]]*\[\[\([^]]\+\)\]\].*/\1/' inputfile

sed 's/^[^|]*|\([^|]*\)|.*/\1/'

sed 's/^>\([^_]*\).*$/>M_\1/' file

sed 's/^$$DRM45_RowCount=.*$/$$DRM45_RowCount=99/'

sed "s/^\([\"']\)\(.*\)\1\$/\2/g" in.txt

sed 's/^(.*)_([^_]*)$/_\2/' < input.txt

sed 's/^.* //'

sed 's/^.* \([0-9][0-9]\):.* mail from \(.*@.*\.com\).*/\1 \2/' myfile

sed 's/^.*>\([^<]*\)<.*$/\1/'

sed 's/^.*: \(.*\)$/\1/'

sed 's/^.*\(.\)\([0-9][0-9]\)\1.*$/\2/;s/^.*(\([0-9][0-9]\)).*$/\1/;s/^.*\[\([0-9][0-9]\)\].*$/\1/'

sed 's/^.*\///'

sed 's/^.*\bpattern\b.*$/Substitution/' file

 sed 's/^.*bbb //; s/ddd.*$//' <<< "aaa bbb ccc ddd eee" 

sed 's/^.*test/test/' input

sed 's/^.....//'

sed 's/^./& /'

sed 's/^./&\t/;s/.$/\t&/' file

sed  's/^.\(.*\)..$/\1/'  file

sed  's/^.\{20\}//' logfile

sed "s/^.icon-\(.*\) {$/if(strpos(\$embedicons,'\1') !== false) { \$svgicons .= <<<'EOD'\n.\1 {/"g input_file.txt

sed "s/^/${author}\t${title}\t/" filename

sed 's/^/-p /' | tr '\n' ' '

sed 's/^/NR==/' linesfile | awk -f - datafile

sed 's/^/^[^0-9]+/' < file2 | egrep -v -f - file1

sed "s/\^/`printf '%q' "${BASHVAR}"`/g"

sed "s/^/`printf '%q' "${BASHVAR}"`/g"

sed 's/^/chr/' file.in > file.out

sed 's/^/echo /; s/[[]/{/; s/]/}/; s/-/../' | bash

sed 's/^/rm -rf /' filename

sed 's/^/rm /g' filelist > newscript

sed 's/^/s=/;s/$/=111111111=g/' items.txt | sed -f- text.txt

sed 's/^/something/' baz

sed 's/^/xx:/' <file.txt

sed 's/^0$//g' yourFile | awk -v RS="" [following codes are the same as above]......

sed 's/^0/ /;: loop s/ 0/  /;t loop;s/ :/0:/'

sed 's/^0/ /;s/0:/x:/;: loop s/ 0/  /;t loop;s/x:/0:/'

sed 's/^0//g' | sed 's/^0//g'

sed 's/^0\+//'

sed 's/^://' filename

sed 's/^CN=\([^,]*\).*/\1/' input_file

sed 's/^HELLO WORLD ([a-z_]*, [a-z_]*)/& 16/' file

sed "s/^URL=\(.*\)/TITLE=$(curl -s \\1 | head -n 1)/" file.txt

sed 's/^\[[^]]*] *//'

sed 's/^\([ ]*stars\)/\t\1/' input

sed 's/^\([ \t]*\)\(.*\)$/\1<!-- \2 -->/' web.xml

sed 's/^\([ \t]*stars\)/@\1/' input | column -t | sed 's/^@/ /'

sed 's/^\([0-9]\+[_:-]\)\{6\}//' logfile

sed 's/^\([0-9]\+\) [0-9][0-9] \(.\+\)$/\1 \2/'

sed 's/^\([0-9]\+\) 08 \(.\+\)$/\1 \2/'

sed 's/^\([0-9]\{8\}\)[0-9]*/\1/' infile

sed 's/^\([0-9]\{8\}\)[0-9]\{1,\}/\1/' infile

     sed 's/^\([0-9A-Fa-f]\{2\}\)\([0-9A-Fa-f]\{2\}\).*$/\1:\2:/'

sed 's/^\([A-Za-z ]*\) \([-A-Z 0-9]*|\)/\1|\2/' input

sed 's/^\([A-Za-z0-9]*\).*/\1/' < inputfile > outpufile

sed 's/^\([^ ][^ ]*[ ]\)[ ]*/\1/' input

sed 's/^\([^ ]*\)/\1 \1 0 0 -9 -9/'

sed 's/^\([^,]*,[^,]*,\).*/\192.2.11.1/'

 sed 's/^\([^|]*\)|0*\([^|]*\)/\1|\2/' input

sed 's/^\(>.*\)$/\1 Brassica rapa/' infile

sed 's/^\("[^"]*server[^"]*"\\1\\\)".*"$/\1"tbone"/'

sed 's/^\("[^\\"]*server[^\\"]*"\\1\\\)"[^\\"]*"$/\1"tbone"/'

sed 's/^\(.*[0-9]\).*$/\1/g' file

sed 's/^\(.*:.*\):/\1 family:/' test.txt

sed 's/^\(.*\)#.*$/\1/'

sed 's/^\(.*\).txt$/perl mycode.pl \/home\/neversaint\/\1\.txt > \/home\/neversaint\/\1.output/' submit.sh

sed 's/^\(.......\)[^.]*\./\1./'

$ sed 's/^\(....\)-../\1-09/' < input

sed 's/^\(..\/\)\(..\/\)..\(..,\)/\2\1\3/' file

sed  's/^\(.\)/\U\1/' yourfile > convertedfile

sed 's/^\(.\)\(.\+\)\(.\)$/\3\2\1/' input.txt

sed 's/^\(.\{2\}\)0/\1/'

sed 's/^\(.\{2\}\)0\(.*\)$/\1\2/'

sed 's/^\(RAILS_GEM_VERSION.*\)$/# \1/' -i '.backup' config/environment.rb

sed 's/^\(\s*\)\(1\)/\10/g' file

sed 's/^\(\s\+\)<type>/\1<myAddedTag \/>\n&/g' yourfile

sed 's/^\(aa[0-9]*\)b/\1/' t1 > t2

sed 's/^\(blah.*\)\..\{3\}$/\1/g'

sed 's/^\(blah.*\)\.abc$/\1/g'

sed 's/^\(cat: [-+]\)0\{0,1\}\([1-9]\{0,1\}[0-9]\)00/\1\2/' data

sed 's/^\(export MY_ENV=\).*$/\1NEW_VALUE/'

sed 's/^\s*./0/g' file

sed 's/^\s*\(.*\)\s*/\1/g' file

sed 's/^_[0-9]*\(_.*\)$/_\1/'

sed 's/^_[0-9]*_\(.*\)$/\1/'

sed 's/^aaa.*bbb$/aaa_TEST_bbb/' file >newfile

sed 's/^b/\n/; s/b/x/g; s/^\n/b/'

sed 's/^copy \([^(]*\)($/hello \1\ncopy \1(/' 

sed 's/^echo "/echo -e "/' filename

sed 's/^foo$/FOO/; t; s/^/- /' infile

sed 's/^foo/barfoo/' baz

sed 's/^server$/server.apple.com/Ig'

sed 's/^server$/server.apple.com/g'

sed 's/^some string=.*/some string=newvalue/'

sed 's/^sudo//; /^ *apt-get install */!d; s///; s/  */\n/g' ~/.bash_history |sort -u

sed 's/^volume =.*/volume = 0/g' file.txt

sed 's/^|//' file

sed 's/^|/nil|/; s/|$/|nil/; :a; s/||/|nil|/g; ta'

sed 's/_[^_]*_[^_]*$//'

sed 's/_.*//'

sed 's/_.//g'

sed 's/_/ /' 

sed 's/_/-/;s/_/-/;s/_/ /;s/_/:/g' <<< "$a"

sed 's/_/\\_/g'

sed 's/_\([[:digit:]]\{1,\}\)/_\1\t\1/g'

sed 's/_\([0-9]*[0-9][0-9][0-9]\)p.mov/_h\1p.mov/g'

sed 's/_\(.\)/\U\1/g'

sed 's/a.*b/xyz/g;' old_file > new_file

sed 's/a\(bc\|de\)f/X/'

sed "s/aaa=.*/aaa=xxx/g"

sed 's/abc//g' file

sed 's/abc\([1-3][05]*\)/\1/' file

sed 's/address = \[\|\]//g' 

sed 's/apple-pie/apple_pie/g' file1.txt > file2.txt

sed 's/author: [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9];//g'

sed "s/\bVERSION\b/$version_1/g"

sed 's/blah\(.*\)blah/\1/g'

sed 's/cat/dog/g'

sed 's/ccpAdd(\(.*\),\(.*\))/\1+\2/g'

sed 's/commandtwo{\([^}]*\)}/\1/g' inputfile

sed 's/delete from \(tb[0-9]\?\).\([[:alnum:]]\+\)/delete from \2/g' input.file

sed "s/draw($prev_number;n_)/draw($number;n_)/g" file.txt > tmp

sed 's/echo/echo\n/g' FILE | grep -c "echo"

sed 's/file="[^"]*"/file="new_file_name"/'

sed "s/find/replace/g" filename

sed "s/foo/$(echo .. |tr ...)/g" file.txt

sed 's/foo/&\n/2;T;h;s//bar/g;G;s/\n.*\n//' file

sed s/foo/\&bar\&/

sed 's/foo/\n/g;s/\n/foo/3g;s/\n/bar/g' file

sed 's/foo/bar/I' file

sed 's/foo/barfoo/g' baz

sed 's/foo/foo" "bar/g' file

sed 's/foo\.o[ :]*/foo.o foo.P : /g' < foo.d > foo.P

sed "s/foo_bar('\([^']*\)')/booch['\1']=$\1/g" infile > outfile

 sed 's/fox/\n/;T;D' file

sed  's/function\s\(.*\)(/\1: function(/g' file.js

sed 's/get_pins {/get_pins -hierarchical {proc_top_*\//'g filename.txt > output

sed 's/hello/bye/g'

sed  's/l2-[^-]*-[^-]*-[^-]*-/l2-2-ghb-8-m-/g'

sed 's/model->\(.*\)/models[\1][index]/' file.txt

sed 's/mov r1, \[r1, r2\]/sub [r8, r9], r10/g' file.S

sed 's/myregex/&?AString/g' myfile.txt

sed 's/myurl/http:\/\/192.168.1.1:8080\//' strings.xml

sed 's/name="m_AllowDownload">False</name="m_AllowDownload">True</'

sed "s/name=\"m_AllowDownload\">False</name=\"m_AllowDownload\">True</"

sed 's/new[^;]*//g; s/;;/;/g; s/^;|;$//g'

sed 's/new[^;]*;//'

sed 's/oldwebsite.com/newwebsite.com/' file.sql

sed 's/pattern/pattern mark/'

sed 's/pattern/replacement/g'

sed  's/php\*//g' file

 sed "s/price/g\:price/g" file.txt > outputfile.txt

sed 's/printf("thread %d: enters barrier at %d and leaves at %d\\n", MYTHREAD, start, end);/printf("thread %d: enters barrier at %lf and leaves at %dlf\\n", MYTHREAD, (double)start, (double)end);/' bt_copy.c

 sed 's/r[0-9]/-&/' file

sed 's/regexp/\n&/g' 

sed "s/require_once('/require_once(\$_SERVER['DOCUMENT_ROOT']\/'/g"

sed "s/\s*$$//"

sed "s/\s*$//"

sed "s/sd/paragraph\nsd/" file

VERSION=$(sed 's/software-\(.*\)-license.*/\1/' <<< "$ZIP")

sed 's/some string=.*/some string=newvalue/'

sed 's/su./newfolder/g'

sed 's/su\(.\)/newfolder\1/g'

sed 's/substitution/replacement/g' filename

sed 's/test([ab]|$)/pass/' <<< "test"

sed "s/theta = 0.0/theta = $theta/;s/r = 1.0/r = $r/;s/visual_1_0/visual_${r}_${theta}/" < n2o.inp >n2o_${r}_${theta}.inp

sed "s/timeout=4.0/$timeoutvalue/g" egtext

sed 's/username/+/g'

sed 's/username=[a-z0-9_]+/username=abc/i' Service.properties

sed 's/val1/hello/' file

sed 's/val1/hello/g' file

sed 's/val1/hello/g' file > newfile

sed "s/var1=[^ ]*//g"

sed s/'\w*$'// old.txt > new.txt

sed "s/\w\+$/'&'/" file

sed 's/word1/word2/g' -i file.php

sed 's/word1/word2/g' file.php

sed "s/\xA3//" inputfile

sed 's/{"var": \[.*\]\}/\{"var": \[4,5,6\]}/g' file.txt

sed 's/{\([^}]*\)}/[\1]/g' filename

sed 's/{\("[^"]*"\),\("[^"]*"\)}/{ label: \1, value: \2 }/'

sed 's/{\(\$[^}\|]*\)}/{\1|escape:htmlall}/g'

 sed 's/{{\([a-z]\{2,3\}\)\sicon/{{ref-\1/'

sed "s/\|[^,]*//g"

sed 's/|[^|]*//'

 sed 's/|.*//' file.txt

sed 's/|AUTODETECT|"}{\\fldrslt \\plain [^}]*}}/ /g' "$@"

$ sed 's/|ignore//' table1.txt > filtered.txt

<temp2.csv sed 's/||/|\"\"|/g' | sed 's/||/|\"\"|/g'

sed 's/~/~\\n/g' file

sed 's:<Connector port="8080" protocol="HTTP/1\.1:<Connector port="'"$port"'" protocol="HTTP/1.1":'

sed 's:<\|\(/>\)::g;s:\(=[^ ]\+\) :\1\n:g' INPUTFILE

sed 's:<size>\([0-9][0-9]*\)</size>:<size>\1,-1</size>:g' ...

sed 's:[ \t]*'${DOC_KEY}'[ \t]*=.*:'${DOC_KEY}' = '${DOC_VALUE}':' profile

sed "s:[ \t]*${DOC_KEY}[ \t]*=.*:${DOC_KEY} = ${DOC_VALUE}:" profile

sed 's:([^)]*)::g'

sed 's:.*/::' file

sed  's:/\(/\)\{0,1\}:\1:g'

sed 's:=/.*:=/test/path:' file

 sed 's:\(<td class="content_subhd">\)\(.*\)\(</td>\):\1<h2>\2</h2>\3:'

sed 's:^<td>\|</td>$::g' 

sed "s:^$musicdir/::;s:\.[^/][^/]*$::"

sed 's:^/a/b/::' myfile.txt

sed 's:action="[^"]*":action="error.php":' <file1 > file2

sed 's:site1.com\(/blog/[0-9]\{4\}/[0-9]\{2\}/[0-9]\{2\}\):site2.com/\1:'

 sed 's:|:"|":g;s/^/"/;s/$/"/'

sed "s;<version>\${project\.version}</version>;<version>0.9.1-SNAPSHOT</version>;g"

sed 's;[^/]*/;|____;g' | sed 's;____|; |;g'

sed 's;^1\([0-9]\{10\}\)$;\1;' filename

sed 's;hello;bye;g'

sed 's?#REPLACE-WITH-PATH?'`pwd`'?'

sed "s?$Plc_hldr1?$DateTime?;s?$Plc_hldr2?$Total?"

sed 's@</body>@\t<!-- EX -->\n\t<A href="ex/live/current/index.html" >EX Live</A>&nbsp;\n\t<A href="ex/live/" >(All months)</A><br>\n</body>@'

sed s@'</strong>.*'@''@

sed "s@<SRC_PATH>@$SRC_PATH@g" template.sh > replaced.sh

sed 's@<date>.*</date>@<date>MM/DD/YYYY HH:MM:SS AM</date>@'

sed 's@<number>[0-9]*</number>@<number></number>@g' xml.log

sed 's@<number>[0-9]*</number>@replace@g' xml.log

sed 's@<start>.*</start>@<start><ab></ab><ab></ab><ab></ab></start>@' file

sed 's@",@", "a/sdb[0-9]*$/",@' 

sed "s@$1@$var@g" -i filename

sed 's@,\(..\)/\(..\)/\(..\) @,20\3/\1/\2 @'

sed 's@.*//\([^ /]\+\)[/ ].*@\1@g' file.txt

sed 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' abc.txt

sed "s@/s/[^/]*/@/s/123123/@g"

sed "s@TEMPDIR@$(pwd)@" file.py > newfile.py

sed "s@TEMPDIR@$PWD@" file.py > newfile.py

sed 's@\(^EMS_[SIJ].*=/\).*@\1test/path/@' file

sed 's@^[^/]*@@' input

sed 's@^@<url><loc>http://www.mysite.com/review/@; s@$@</url></loc>@' files*.html

sed 's@dump 0 $2 $3 $4 $5@dump 1 $2 $3 $4 $5@g' base_file.properties

sed "s@food.type=.*@food.type=$FOOD@" 

sed "s\@food.type=.*@food.type=$FOOD@" 

sed "s_</\?\(ret:\)\?EditUse>__g"

sed 's_</\s*\?strong>_>_g' INPUTFILE

sed 's_>_/>_g'

sed "s_${org}_${repl}_g" "$i" > "$temp_file"

sed 's_/\([^/>]\+\)"><_/\1">\1<_g' file

sed 's_DocumentRoot /var/www/html_DocumentRoot /usr/share/rt3/html/_' /etc/httpd/conf/httpd.conf

sed 's_\(\(checksum\|compressed\)=\"\).*\(\"\)_\1\3_' -i filename

sed 's_https://_home/shantanu/company/_g'

sed 's| \(path=.*\)\(/lib\)\(/MOM[^ ]*\)| \1\2\3 source\1/src/main/java"|' inputfile

sed 's|</\?desc>|\n&|g; s/\(<desc>[^"]*\)"\([^\n]*\n\)/\1\&quot;\2/g;s/\n//g' inputfile

sed 's|</head>||g'

sed 's|<TH[^>]*>|<th>|g' file

sed 's|<\([^[:space:]][^[:space:]]*\)/>|<\1></\1>|g' < input_file > output_file

sed 's|<pattern>|<replace>|' file | xargs -i{} cp {} somewhere

sed  "s|\[[ ]*|\[\'|g;s|[ ]*\]|\'\]|g" test.in

sed 's|[^,]*,\([^);]*\));.*|\1|'

sed 's|[^,]*,\s*\([^);]*\)\s*);.*|\1|'

sed "s|#/\*\!40101 SET @OLD_SQL_MODE=@@SQL_MODE\, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' \*/;|SET @OLD_SQL_MODE=@@SQL_MODE\, SQL_MODE='NO_AUTO_VALUE_ON_ZERO'\;|" file.sql > filenew.sql

sed "s|\$ROOT|${HOME}|" abc.sh

sed "s|\$ROOT|${HOME}|g" abc.sh

sed "s|$org|$repl|g" "$i" > "$temp_file"

sed 's|([^)]*)|\n&\n|g;s@\n\((/\?s)\|(VOCAL_NOISE)\)\n@\1@g;s|\n\(([^)]*)\)\n|~NS|g' inputfile

    sed 's|([^)]*)|\n&\n|g;s|\n\((/\?s)\)\n|\1|g; s|\n\((VOCAL_NOISE)\)\n|\1|g;s|\n\(([^)]*)\)\n|~NS|g' inputfile

sed "s|\(.*\)|$VARIABLE\1|"

sed "s|\(url(['\"]\?\)\(/[^)]*\)|\1$STATIC_HOST\2|g" main.css

sed 's|.* \([0-9]* [km]b/s\).*|\1|' <<< "$foo"

sed 's|.*/ABCD\(.*\)[0-9]\{2\}-[[:alpha:]].*.sql.zip|\1|'

sed 's|.*|/\\<&\\>/{w "&.txt"\nd}|' matchingString_file | sed -i.bak -f - fileA

sed 's|.*|/\\<&\\>/{w fileB\nd}|' matchingString_file | sed -i.bak -f - fileA

sed 's|/.*||' file

sed "s|/.*||g"

sed 's|//--* *$||' -i file.cpp

sed 's|/\*\(.*\)\*/|\1|' ./myfile

website=$(sed 's|/|\\/|g' <<< $website)

$ sed 's|PAT|'"$(echo $VAR3 | tr -d '\n')"'|' temp2.sh > Final.sh

 sed 's|XXX|'$(tr -d '\n' <fileB)'|' fileA >fileC

sed "s|\\[#${key}#\\]|${value}|g"

sed 's|\(.*\(/[^/]*$\)\)|s#data\2#\1#|' new_paths_list.txt > rules.sed

sed 's|\(.*\(/[^/]*$\)\)|s#data\2#\1#|' new_paths_list.txt | sed -i -f - my_exported_db.sql

sed 's|\(ducument=[^/]*/\)[0-9]\{10\}|\1replacetext|' infile

sed 's|\x1a||g' your_file.txt

 sed 's|^ *\(.*\)\(.\)$|sed -i.bak "/^ *csh.*\2/d" yy/\1.txt|' xx.txt | sh

sed 's|^<td>\(.*\)</td>$|\1|g'

sed 's|^.*/||g' file

 sed 's|^\([^,]*,\).*|/^\1/c\\&|' param.txt | sed -f - input.txt

sed 's|^|cd |; s|/\([^/]*\)$|; $RUNLD \1|' inputfile > run

sed "s|image/\(.*\(/[^/]*$\)\)|s#[^']*\2#\1#|" new_paths_list.txt > rules.sed

sed  's|wxT(\([^)]*\))|\1|g' file

sed 's|{moslate}[^{]*{/moslate}||g' a.txt
sed "s~<script type='text/javascript' src='http://siu.edu.bd/includes/framework.js'></script>~ ~g" 

sed 's~#\(FILE.*/this/is/a/file/path/.*\)$~\1~' file

sed "s~$Old~$New~" /location/file.txt

sed "s~$ampP~$ampR~g"

sed 's~/\*.*\*/~~'

sed "s~URLS~$TEXT~g" imagesbu.html > images.html

sed 's~\(.*/\).*~\1~' file.txt

sed 's~\\\x01~\\&~g'

sed 's~file.*/\(.*\.jar\)\(.*\)~file:///lib/\1\2~' a.txt 

sed "s~pattern~replacement~g"

sed "s~uri='file:/var/lib/abc/cde.repo/r/c/e/v/1\.1/abc-1.1.jar~uri='file:/lib/abc-1\.1\.jar'~g"

sed 'whatever' oldfile >newfile ; mv newfile oldfile

sed 'x;/./{x;/#location/,+6s/#/ /;b};x;/#location/h' file

sed 'x;/./{x;b};x;/^@.*{id1/,/}/{/}/h;d}' file

sed 'x;/./{x;b};x;/aaa/,/ddd/!b;/ddd/!b;h;a\hello' file

sed 'y/ABCDEFGHIJKLMNOPQRSYUVWXYZ/abcdefghijklmnopqrstuvwxyz/'

sed 'y/ae/ea/'

sed 'y/aeiouAEIOU/AEIOUaeiou/'

< file.txt sed -n '/\t/{ =;p }' | sed '{ N;s/\n/:/ }'

sed.exe -e :a -e "$q;N;11,$D;ba"

sed.exe "s@.*//\([^ /]\+\)[/ ].*@\1@g" file.txt

sed: -e expression #3, char 93: unknown command: `X'

sed: -e expression #4, char 51: unterminated `s' command

sed: 1: "5 i hello foo": command i expects \ followed by text

sed: 1: "s/Name:\(.*\)\)/\1/g": RE error: parentheses not balanced

send "$(THING)\c" 

send -s "execute backup full-config tftp [clock format [clock seconds] -format %Y.%m.%d] xxx.xxx.xxx.xxx\n"

send "Pass\\\$word\n"

send "cd $(printf '%q' $2)\r"

             send "hello world\r"

send "if \[ ! -f $USER_SSH_PATH/id_rsa.pub \]; then CREATE_FILE=true; fi\r"

send "sed '1i//$VAR' /file > /tmp/out\r"

send "top -n 1 | grep Mem: | awk '{ print \$(NF-7) }' | cut -d 'k' -f1\n"

sendEmail -f fromAddr@example.com -t toAddr@example.com -s smtp.server.com -u theSubject -m the Message -a fileToAttach

send_user "$username $password"

sendmail $myemail || exit # will exit if sendmail exit status is non-zero

sendmail -F "Your name" -f "your-address@example.com" < your-message.txt

seq [-w] [-f format] [-s string] [-t string] [first [incr]] last

seq $FROMHERE -1 1

seq --format %g.jpg 66895 105515 | xargs zip images.zip

seq --format="file '/home/debian/%02G.flv'" 70

seq --format="file '/home/debian/%02G.flv'" 70 > myFile.txt

seq -f %02.0f 5 15

seq -f %04g 0 10

kent$  seq -f "apple_%03g_suf1.png" 20 > suf1.txt  

seq -f 'dir%.0f' -s ' ' 1 1 10 | xargs mkdir

seq -s, $counter -1 1 

for n in $(seq -w 0 10); do echo $n $(expr $n + 4); done

seq -w 00000000 00000009 >filelist.txt

seq -w 1 10

seq -w 1 100

 seq -w 30

seq 0 10

seq 0 10 | xargs printf '%04d\n'

for i in `seq 0 2 10`; do echo $i; done

for i in `seq 0.01 0.01 0.5`; do  echo "called with $i" ; done

for i in $(seq 1 $1 ); do echo $i; done

for i in $(seq 1 $END); do echo $i; done
for j in $(seq 1 $i); do echo "$j"; done

$ seq 1 10 | parallel --joblog out.log -S "srv01,srv02,srv03,srv04" ./failjob 

seq 1 10 | parallel -j+0 -n2 -k mycommand 

seq 1 10 | parallel -j+0 -n2 -k mycommand \$PARALLEL_SEQ

seq 1 10 | parallel 'matlab -singleCompThread -nodesktop -nosplash -r "test({},43))"'

seq 1 10 | perl -e'@x=<>;print@x[0..$#x-3]'

seq 1 10 | perl -ne '$. % 2 and print (($.+1)/2,"\n"); print' | xargs -n3 ...

seq 1 10|perl -ple'$_=rand>.5?++$a:--$b'

seq 1 10 | sed -e "1~2s/.*/code1 &/"

i=4; seq 1 10 | sed -n "${i}p"

seq 1 100 > file

for n in `seq 1 100`; do cat cool$n.txt | awk '{print $0 " cool"}' > coolwarm$n.txt; cat warm$n.txt | awk '{print $0 " warm"}' >> coolwarm$n.txt; done

seq 1 100 | sed 's/^/x\n/g' | zenity --list --radiolist --column Select --column Number

for i in $(seq 1 1000); do addnumbers-make-pdf.sh ${i} ; done

seq 1 1000000 | while read i; do echo -en "\r$i"; done

seq 1 24 | parallel -P 8 ./myscript 

seq 1 24 | xargs -l -P 8 ./myscript 

for i in `seq 1 3`; do cut -d, -f1,5,6 "myfile${i}.csv" > "myoutput${i}.csv"; done

for i in `seq 1 4`; do name=$(ls *.tar.gz); tar xvfz $name; rm $name; done;

seq 1 5 | while read x; do echo "value is $x"; done

for q in `seq 1 50`; do input tap 653 100 ; done

for n in $(seq 1 60); do echo $n; sleep 1; sudo sync; done

for i in $(seq 1 `wc -l "test.csv" | awk '{print $1}'`); do sed -n $i'p' "test.csv"; done | ./myprogram

seq 1 inf | awk '{sum+=(1/$1)} {print sum}'

seq 10 | parallel --skip-first-line --pipe '(echo hea,der; cat) | my_prog'

seq 10 | parallel awk \''{...}'\' file{}.txt ">" file{}.out

for i in `seq 100`; do ls Force$i.txt; done

seq 100 | parallel --pipe -N23 'cat > /tmp/parallel_test_{#}'

seq 1000 3000

seq 1000 | grep '[24680].*[13579]$'

seq 1000 | sed -n '/[24680].*[13579]$/ p'

for I in $(seq 12 16 256); do echo 10.4.{0..255}.$I; done

seq 12|awk '{if((NR%3)==1) { print $0, (NR+2)/3 } else if ((NR%3)==2) { print $0, (NR+1)/3 } else { print $0, NR/3} }'

for i in `seq 2`; do echo "$i"; done > out.dat

for f in `seq 20`; do ./a.out& done

seq 20 | awk 'BEGIN { array[2]++; array[12]++; array[15]++ } !(NR in array)'

seq 2014 2044 | sort -R

for i in $(seq 3); do echo $i ; sleep 2 & done

for port in $(seq 4444 65000); do echo -ne "\035" | /usr/bin/telnet 127.0.0.1 $port > /dev/null 2>&1; [ $? -eq 1 ] && echo "unused $port" && break; done

for port in $(seq 4444 65000); do echo -ne "\035" | telnet 127.0.0.1 $port > /dev/null 2>&1; [ $? -eq 1 ] && echo "unused $port" && break; done

seq 49 | ruby -pe 'BEGIN { $tot=0 }; $tot += $_.to_i; END { print $tot }'

seq 5 15

seq 5 | sort

$ seq 786 | sed 's@^@http://www.blabla.bla/forum-detail/?ft=72260\&fid=34\&\&pgr=@'

    seqtk trimfq -b 10 -e 20 "$file" > "${file%.fastq}_trim.fastq"

service --status-all 2>&1 | grep firestarter

service anacron stop

service sshd restart

conn=$username$password$service_name

set > /path/to/log/file    # be sure that this file is writable

set

set

set $var $val

set "${(Oa)@}"

set ${A:-0.0.0.0}

set %PATH% | clip

set +f

set +f

set +o histexpand

set +o pipefail

set +o posix

set +o xtrace

set +x

set +x

$ set -- '' '' ''

$ set -- $(<file)

set -- $(awk 'NR==1{max=$3; min=$3}{if ($3>max) max=$3; if ($3<min) min=$3;} END {print max,min}' List.txt)

set -- $(echo "$line" | sed 's/.*--- \([^(]*\) (.*/\1/')

set -- "${@:1:1}" "${@:3}"

$ set -- "${@:1:2}" "new" "${@:4}"

set -- *

( set -- ./deploy_*; IFS=';'; eval "$*" )

set -- `echo $1 | awk -F"-" '{print $1,$2,$3}'`

set -- a b

set -- a b 'c  d' '  e  f  '

set -- foo bar  # $1 = foo, $2 = bar

set -- "something" "${@:2}"

set -A INDEXES `db2 connect to watevrDB >/dev/null;db2 -x describe indexes for table ${TABSCHEMA}.${TABNAME} show detail | awk {'print $1"."$2'}`

set -A arr $(cat $KEY)

set -A words ${(f)...}

set -A x $(echo $x1 | cut -f3 -d" " | cut -f1 -d"]")

set -C

set -a "$arrayName=(10 20 30 40)"

set -e

set -e

set -e

set -e

set -e

set -e

set -e

(set -e; while true; do date ; done) | head -n 1

$ set -f

set -g -x

set -g default-command /bin/zsh

set -m

set -o

set -o

set -o CSH_NULL_GLOB

set -o NULL_GLOB

set -o errexit

set -o errexit

set -o errtrace

set -o functrace

set -o functrace

$(set -o | grep emacs.*on >/dev/null 2>&1 && echo E || echo V)

set -o history

set -o multiline

set -o noclobber

 set -o noglob

set -o noglob

$set -o noglob;./script /home/*/public_html php.ini module.so;set +o noglob

( IFS=$'\n'; set -o noglob; type -P $(compgen -c | awk '!a[$0]++'); )

set -o nounset

set -o pipefail

set -o pipefail

set -o pipefail

set -o pipefail

set -o pipefail

( set -o posix ; set ) | less

set -o xtrace

set -x

set -x

set -x

set -x

set -x

set -x

set -x

set -x

set -x

set -x

set -xv

set -xv

(set -x; do_thing_you_want_traced)

(set -x; ls $dir)

set 1:2:4 20120318~22:05:00\r\n

set 5 10

set CLASSPATH=%JUNIT_HOME%\junit.jar;c:\myproject\classes;c:\myproject\lib\something.jar

set M2_HOME = C:\Software\maven221

set MAVEN_DEBUG_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000

set MY_TOOL="%MY_TOOL%"

set OS_ROOT=%systemdrive%

set PATH

set PATH = %M2_HOME%\bin;%PATH%

set PATH = %PATH%;C:/Some/Directory/Path

set "PATH=%path%;C:\Qt\4.8.1\bin"

set PATH="C:\Qt\4.8.1\bin"

set PATH=c:\Program Files\Java\jdk1.6.0_03\bin;%PATH%

\set PROMPT1 '(%n@%M:%>) %`date +%H:%M:%S` [%/] \n%x%# '

set PYTHONPATH=/somedir/pythonsrc;/anotherdir/pythonsrc && python.exe mymodule.py

set Pathname="C:\Program Files"

set TEST=1 1 1

set TEST="1 1 1"

set "VAGRANT_MOUNT_BASE=%CD%"

set VLC_VGA to application processes whose unix id is pid as integer

set X=%cd%

set _f [file tail $_d]

set a = "`echo $a | sed -e 's_old_new_'`"

set "a b" c d

set a=1 b=2 c d=4

set ans=`grep -r hello .`

set args foo bar baz ...

set b=`echo "$a" | tr '[A-Z]' '[a-z]'`

set backupdir=~/.backup,/tmp

set bell-style none

set blink-matching-paren on

set completion-ignore-case on

set derby 

set destination1 = "/scratch/graphics/${1}.gif"

set destination1 = /scratch/graphics/${1}gif

set editing-mode vi

set "fileExtension=bmp"

set filename="C:\MyDir\MyFile with space.txt"

set fit logfile '/dev/null'

set fit quiet

set foo=bar&.\foo.py&set foo=

 set format y "%.0f"

set | grep -e '^\w\w*\=' > /some/file

set | grep -i INT | cat -vet

$ set | grep youtube-dl

set guid=%guid: =%

set head off

set host [info hostname]

set keymap vi

set "line=%line:*<ORIGINAL>=%"

set logg=      ^> _          ^&^& type _           ^&^&type _^>^>%LogFile%

set m = `sed $s',$d' file | tee see > /dev/null`

set makeprg=cmakedbg

set makeprg=xcodebuild\ -activetarget\ -activeconfiguration

set myStamp [clock format [clock seconds] -format {[%d/%m/%Y %T]}]

set myVariable=^"myVlaue^"

set mypath = $file

set name=value&call echo %name%

set newpage none

set noclobber

set output filename . '.png'

set password [exec ./passwdgenerator]

set password [open ./passwdgenerator]

set path=%path%;the\directory\where\filezilla\resides

set path="/home/user/prefix_""$var""_suffix/bar"

set path="/home/user/prefix_${var}_suffix/bar"

set prompt = "%{\033]0;%n@%M\007%}$prompt"

  set revision = `svn log --limit 1 | sed -n -e 's/^r\([0-9]\+\).*/\1/p'`

set runcmd [list exec sh -c "$SCRIPTS_PATH/config $build_tag -u 2>&1"]

set runtimepath+=/path/to/your/vimruntime

set savepointString = "`cat savepointFile`" 

set shell=/bin/bash\ --rcfile\ ~/.bash_profile

set shell=/bin/bash\ --rcfile\ ~/.bash_profile\ -i

set shell=/bin/sh 

set shell=/path/to/cygwin/bash

set shell=bash\ --login

set shell=bash\ -i

set shell=zsh\ -i

set show-all-if-ambiguous on

        set stringList = $stringList " " $param

        set stringList = "$stringList $param"

set textwidth=79

set thePID to do shell script "some_command &> /target/output & echo $!"

set timestamp=%DATE:/=-%@%TIME::=-%

set timestamp=%timestamp: =%

set var=`....`

set whichwrap+=<,>,h,l,[,]

set width 0

set xfer:log-file "/path/to/your/file.log"

set xlabel "Applied Current [mA]" offset -0.3

set xxx to do shell script "sqlite3 ~/Documents/Databases/test.db \"select \\\"Address 1\\\" from aTable limit 10; \""

set xxx to do shell script "sqlite3 ~/Documents/Databases/test.db 'select \"Address 1\" from aTable limit 10; '"

set-alias -Name cd -value cd2 -Option AllScope

set-itemproperty -path "HKCU:Control Panel\Desktop" -name wallpaper -value $image

set-option -g default-shell $SHELL

set-option -g default-shell /bin/zsh

set-option -g renumber-windows on

set-window-option -g alternate-screen on

setenforce 0 | reboot

setenv LC_ALL C

setenv PACKAGESITE "ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/<architecture>/packages-current/Latest/"

$ setenv PATH $PATH:$HOME/bin

setenv PATH this:that

setenv logfile "$HOME/LOG/output.log"

setfacl -R -d -m u:php:rwx /var/lib/folder/ 

setfacl -R -m u:php:rwx /var/lib/folder/

setfacl -m d:u::rwx,d:g::rwx,d:o::r,d:g:dev:rwx /shared/dir

setkey -D | awk 'NR==1 { a=$1; b=$2; next } !/^ / { print ($1==b && $2==a ? "match" : "none") }'

setlocal enabledelayedexpansion

setlocal enabledelayedexpansion

setopt bashrematch ksharrays

setopt complete_aliases

setopt completealiases

setopt extendedglob

setopt no_extended_glob

setopt no_mult_ios

setopt nobanghist

setopt promptsubst

setopt rcquotes

setopt transientrprompt

(setopt; unsetopt; set) | sort | less

(setq multi-term-program-switches "--login")

(setq pcomplete-ignore-case t)

setsid yourCmd

setup -nqP unzip

AppLaunched=cmd.exe /c abc.bat & setup.exe

setup.sh

ROOT_SYS=`setup.sh`

setup.sh -localsource PATH -locbranch one -locbranch two -locbranch three

setup.sh -localsource PATH one two three 

setw -t servers remain-on-exit on

setx fred %fred%foo

setx.exe var value

sftp -P 2222 username@my_server_ip

sftp -b batchfile user@server:/

sftp -v -b sftp_input.txt UserId@aa.bb.cc.ddd; if (($? > 0 )); then echo "sftp error. Exiting.."; exit; fi

sftp buildUser@myserver.com -b batchfile

sftp user@host remoteFile localFile

sgrep -e^ -t192.168 -e[0-9.]*[[:space:]] -- /proc/net/arp

<<<'Here is a random number.' sed 's/random number/& $RANDOM/;s/.*/echo "&"/' | sh

sh <(wget -q0- remote_script.sh)

for file in checkemp.sh *; do sh $file; done

sh -- script.sh "-test 23.txt" "test24.txt" "te st.txt"

sh -c "$(curl http://example.com/)" _ world

  sh -c "$ENV a_command"

=$ sh -c "$exec"

sh -c "$nested_script" -- "foo" "bar"

sh -c "${POSTGRESbin}psql -U $POSTGRESuser -h localhost -d $POSTGRESdb -c \"select count(*) from d3_folders where folder_name = '$RSeditionfolder';\"" > ${queryFolder}${tmpFile}

sh -c ...

sh -c '... | perl -ne"... print \$0, qq{\t} ..."'

sh -c '... | perl -ne'\''... print $0, "\t" ...'\'''

sh -c "./script.sh hello"

sh -c ./script.sh hello

sh -c "cd /home/deploy/app/current && RAILS_ENV=production ..."

$ sentence="hello"; sh -c 'echo $sentence'

sh -c find /home/disk1 -maxdepth 1 -name "file1*" -o -name "file7*"

sh -c 'grep ABC "$1" > "$1.out"' -- {}

sh -c "grep ABC {} > {}.out"

sh -c "ls -l foo/bar | wc -l"

sh -c 'ps -p $(pgrep -d"," -x snmpd) -o rss= | awk "{ i += \$1 } END { print i }"'

sh -c "sleep 1h; dbus-send --print-reply --system --dest=org.freedesktop.Hal /org/freedesktop/Hal/devices/computer org.freedesktop.Hal.Device.SystemPowerManagement.Shutdown"

sh -c 'tail -n +0 -f /tmp/foo | { sed "/EOF/ q" && kill $$ ;}'

sh -c 'tail -n 1000 -F catalina.out | if grep -qP --line-buffered ".+" ; then ...'

sh -c 'while : ; do sleep 30000 ; done'

   sh -c "xcrun $assemledstring"

sh -e filename

sh -v -x badscript 2>&1 | /bin/logger -t badscript

sh -vx scripts/sh/test-web-task.sh "$fn" < /dev/null

sh -x $(which nroff) -man /usr/share/man/man1/man.1

sh -x /path/to/script

sh -x script arg1 arg2 arg3 2>script-x.log

$ sh -x script1.sh & sh -x script2.sh & sh -x script3.sh &

sh ../gradle -b ../build.gradle clean build

targetTeamOffence=`sh ./score.sh A B | cut -d" " -f2`

$ sh ./test.sh

sh ./test.sh | sh

 sh ./tiler.sh myLargeImg.mpc

sh .git/hooks/myshellscript.sh

sh /dev/stdin world <<<'echo "hello $1"'

sh /path/to/file/testfile

sh /path/to/mybashfile

sh /var/www/cgi-bin/newfile.shtest.txt

sh Calculator.sh "1 + 2 * S(4)" 

sh Main > logfile 2>&1 

sh b.sh

sh calc_new_file $(cat DISK_BLA_BLA | sed 's/,/ /g')

sh calc_new_file $(echo $TEMP_BLA_BLA | sed 's/,/ /g')

sh certexpires.sh

for file in *; do sh checkemp.sh $file; done

sh db_backup.sh

(sh "dot" "-Tpng" "/.tree.dot" "-o" "/.tree.png")

sh env.sh

sh example.bat

sh foo.bash

sh foo.sh 2>&1 >> out | tee -a out

sh 'home/project/myscript.sh'

sh lash_ch.sh 'abcde*'

sh myscript

sh myscriptfile

$ sh perlScripts.sh

sh rssi_script.sh output.csv position 24

sh run-python-scripts.sh

$ sh run_scripts.sh *.sql

sh sample.sh > /home/app/logs/$(date +%Y%m%d)/test$(date +%Y%m%d%H%M%S).log

sh sample.sh | tee logfile_$(date '+%Y-%m-%d-%H').txt

sh script

sh script.sh < sample.txt

sh script.sh

sh script.sh

sh script.sh "/home/hss/*" 4 gz

sh script.sh MY_MACR0_VALUE=\"123ABCD\"

sh script.sh apache

 sh script.sh config.txt

sh script4

$ sh scriptname.sh value_of_x

sh searchip.sh < iplist  

sh test.sh

sh test.sh " -d anotherdesc -l anotherlabel"

sh test.sh "-d somedesc -l somelabel"

sh test_shell.txt

sh testfile

sh your-script-name

(sh-set-shell "zsh")

sh.Run "reg unload HKU\temp", 0, True

  sh.exe

sh: 2012-06-08-01-25.sql.gz: Permission denied

sh: echo.txt: command not found

sha1sum <<< "$your_str"

sha1sum $(xpi) | grep -Eow '^[^ ]+' | sed -e 's/\(\/\|\\\|&\)/\\&/g'

sha256sum /my/dir/* > sha256sums.txt

$ shasum -a 256 < myfile.txt

shc -T -f test.sh

shc -f test.sh

LEVELDB_PATH:=$(shell locate leveldb/db.h | sed 's%/include/leveldb/db.h$$%%')

READ_ENTITY:=$(shell perl -plne '$$\ = " "' $(MYFILE))

shell_dir_listing = `ls`

shift

addtoarray () { var="$1"; shift 1; eval "$var+=($(printf "'%s' " "$@"))"; }

shopt -s autocd

$ shopt -s autocd

shopt -s autocd checkjobs

shopt -s checkjobs

shopt -s cmdhist

shopt -s compat31

shopt -s compat31

shopt -s direxpand

shopt -s direxpand

shopt -s dotglob

shopt -s dotglob

shopt -s expand_aliases

shopt -s expand_aliases

shopt -s expand_aliases

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

shopt -s extglob

$ shopt -s extglob

shopt -s globstar

shopt -s globstar

shopt -s globstar

shopt -s globstar

shopt -s globstar

shopt -s globstar

shopt -s globstar; sed -i '/extern "C" void myPrintf(char \*fmt, \.\.\.);/d' **.c

shopt -s histappend

shopt -s histverify

$ shopt -s huponexit

$ shopt -s lithist

shopt -s nocaseglob

shopt -s nocasematch

shopt -s nullglob

shopt -s nullglob

shopt -s nullglob

shopt -s nullglob

shopt -s nullglob

shopt -s nullglob

shopt -u extglob

shopt -u nocaseglob

shopt -u nullglob

shopt -u nullglob

shopt extglob

shopt extglob

shopt globstar

short_open_tag

show create table tablename;

show databases;

show tables;

show_statistic.sh | grep -A 1 vlan | awk '{  if ( ( NR % 3 ) == 1 ) { print $2 } else { if ( NR % 3 == 2 ) { print $4 } } }'

showerr 0 "message"

showerr 1 "message"

shuf -i 0500000000-0599999999|sed s/^/0/ > passwords.lst

shuf -i 2000-65000 -n 1

shuf -i 2000-65000 -n 1

shuf -i 20000-64000 -n 1

shuf -n "${numberOfLines}" "${filename}"

shuf -n NUMBER_OF_LINES file

shuf folder/* | dd if=- of=sample.txt bs=1K count=2048

shuf inputfile > outfile

shuf suf1.txt|awk '..my awk codes here..'|sh

shuf yourfile > tmpfile && mv tmpfile yourfile

shutdown /r

sips -s format png --out "${pdf%%.*}.png" "$pdf"

sips -s format png -s dpiHeight 80 -s dpiWidth 80 -z 1200 1600 test.tiff --out test.png

size libc.a | awk '{ print " " $4 " " }' | tail -n +2 | paste -sd'+' | xargs expr

 size_t skip = filesize + 511 & ~512;  // thanx to Mats

  skip updating files that exist on receiver

sleep $1; pkill --signal=SIGINT recordmydesktop

 { sleep $DELAY; echo $TEXT; } | command

sleep 1 while system "scp -r user\@some_ip:/home/hbase/hourly/$datehr.tar.gz /home/hbase/hourly/$datehr.tar.gz";

(sleep 10 & )

sleep 10

( cmdpid=$BASHPID; (sleep 10; kill $cmdpid) & exec ping www.goooooogle.com )

( cmdpid=$BASHPID; (sleep 10; kill $cmdpid) & exec wget -v -t 2 )

sleep 10s

sleep 10s &

sleep 120 ; commands...

(sleep 2 &)

(sleep 2 &) && (sleep 3 &)

(sleep 2 &) ; (sleep 3 &)

(sleep 20 && kill $$) &

pid=$( sleep 200s >/dev/null & echo $! )

sleep 2147483647

sleep 3

sleep 5

{ sleep 5 2>&3 & pid=$!; } 3>&2 2>/dev/null

{ sleep 5 2>&3 & disown; pid=$!; } 3>&2 2>/dev/null

sleep 5 & echo foo

$ SECONDS=0; sleep 5 ; echo "that took approximately $SECONDS seconds"

 sleep 5 ; reboot

 ( sleep 5 ; reboot ) & 

sleep 60 && echo "A" &

sleep 99999 1>/dev/null 2<&1

( cmdpid=$BASHPID; (sleep DURATION; kill $cmdpid) & exec PROGRAM n k INPUT )

while sleep_until_modified.sh derivation.tex ; do latexmk -pdf derivation.tex ; done

$ slocate "foobar/" | sed 's/\/foobar\/.*/\/foobar\//' | uniq -c

slowprogram | sed -n '1~100p' > file

 smartctl -A /dev/sda | awk '/Power_On_Hours/ {print $NF}'

smartctl -A /dev/sda | grep Power_On_Hours | awk '{print $NF}'

smbclient ... | egrep '/$'

snmpget 172.0.0.1 -c public -v 1 1.3.6.1.2.1.1.2 ... | tr '\n' ' '

soap,cosmetics,good

socat -x "udp-listen:$port" "udp:$server:$host" 2> logfile

socat EXEC:./tailcut.sh,pty,ctty STDIO | uniq -c

socat PTY,link=$HOME/.wine/dosdevices/com1,raw,echo=0 PTY,link=$HOME/tmp/dev/myserial,raw,echo=0

sockstat | awk '{print $2 "@" $3}' | grep -v '^PROCESS@PID' | sort | uniq -c | awk '{print $1}'

update=$(softwareupdate -l 2>&1)

owner=$(some comand)

some command.....>final.dat

some text BLA-123 more text

some textmore text

some-arbitrary-command || true

some-command 2>&1 | less

some-crashy-program args || exit 1

some-text-producing-command | ./mygrep.sh bob

some-text-producing-command | grep bob

someApp "$*"

someCommand | awk '/Amarghosh/ { do something }'

x=$(someCommand | cut -c3-)

someCommand | grep 'Amarghosh' | sed -e 's/foo/bar/g'

x=$(someCommand | tr -d '[\000-\037\177]')

some_cmd < /etc/passwd

some_cmd | perl -ne '$|=1; print localtime . ": [some_cmd] $_"' >> logfile

some_command --do-nothing `DB=postgresql some_command --now-really`

some_command `DB=postgresql some_command --now-really; ps-grep-kill`

some_command || { command1; command2; }

some_command | less -p regex

some_command | python -c "import json, sys; [sys.stdout.write(x['name'] + '\n') for x in json.load(sys.stdin)]"

some_command | python -c "import json, sys; print json.load(sys.stdin)['name']"

some_command | sed -n '7p'

some_command | tee /dev/stderr | bzip2 > log.bz2

some_command 2>&1 | tee file.log

somecmd 'SELECT ... "'"$etag"'", ...'

somecmd arg1 </dev/null 1>&- 2>&- &

somecmd arg1 </dev/null >/dev/null 2>&1 &

somecmd arg1 </dev/null >/dev/null 2>/dev/null &

somecommand ${1:-foo}

somecommand -p "$PASS"

somecommand | awk -F'[[:space:]]+' '{print $2}'  ## + or *, they're probably just similar.

somecommand | while read -r; do echo "Something with $REPLY"; done

somepackage4

my_var=$(someprog args)

someprog args | read my_var

someprogram $file

someprogram "$file"

somescript <<<"this coming from stdin" &

'something'

something 000002100  kkkk

something before ethernet0.generatedAddress = "00:50:56:bf:71:06" and something after

something "string with commas" something "else, here, and more"

something "string, with, commas" something "else, here, and more"

{ something; } 2>&1 | tail ... | tee

someuser ALL = NOPASSWD: /usr/local/sbin/my_admin_command

somevar = gets

sort

sort 0<1 0<2 0<3

sort <(for f in "${files[@]}" ; do echo "$f" ; done)

sort <(sort -u a) b | uniq -u

sort "$1" -o sorted_file.txt

sort $FILE | uniq -c

sort --debug temp

sort --field-separator='"' --key=4 -n

 sort --key=2,2 -t',' input.csv > output.csv

sort -M months.txt

sort -R file | awk '{if (count[$3] < 10) {count[$3]++; print $0}}'

$ sort -R input | head -n 100 >output

sort -V

sort -V ~/headers

sort -b -k2,2 -k1,1n

sort -b -n -k2.4,2 table

sort -b -n -k2.4 table

$ sort -c numericSort 2> temp.txt

sort -df -t/ -k2,2

sort -k1,1M -k2,2n

sort -k1,1M -k2,2n test.txt

sort -k1,1 -k2n

sort -k1,1 -k3,3

sort -k1,1 -k3,3nr datafile.txt | awk '$1 != x { print } { x = $1 }'

sort -k1,1 -s t.txt

sort -k1,1 -t, a.csv

sort -k1,1 -u companies.txt

sort -k1,1 inputfile

sort -k1,2 -g file

sort -k1.2,Z file

sort -k1.2,k1.2 your_file

sort -k1.2 your_file

sort -k1.5

sort -k1.5 -n

sort -k1.6,1.6 -k1.1,1.5

$ sort -k2,2 -n -o log.dat log.dat

sort -k2,2nr file.txt | sort -k1,1 -u --stable

sort -k2,3 -k5,5 -t, infile.txt  | awk -F, '{print >> $2"_"$3"_"$5}'

< 1.xt.txt sed 'N; /\n *>=>/ s// >=>/; P; D' | sort -k3,3g

sort -k3,3g file

sort -k3n -t\; file

sort -k5n file.txt

sort -k7,7n -t, FILENAME | uniq

sort -k7,7n FILENAME | uniq

sort -k1 -M test.txt

sort -k1 -r freeswitch.log

sort -k 1,1 -k 2,2n -k3,3n -n -o appts2.txt < appts.txt

sort -k 1,1 -k 2,2n -k3,3n -n -t: -o appts2.txt < appts.txt

sort -k 1,1 -k 2,2n file

sort -k 1,1 -s myfile

sort -k 1.1,1.10 -t "^" -s git-log.txt

sort -k 1.1,1.11 input.txt

sort -k 1.2 -g -t, 

sort -k2 -n yourfile

sort -k2 -t_ -n [file]

sort -k 2 file.txt

sort -k 2 log.txt

sort -k2 test | uniq -c -f1

sort -k 2,2 -k 1,1 file.txt

 sort -k3 -rn -t' '

sort -k 4 your_file

sort -m <(zcat $part0 | sort) <(zcat $part1 | sort) ...

sort -m -k1 <(gunzip -c sorta.gz) <(gunzip -c sortb.gz) >sorted

sort -m -n file1 file2 > file3

$ sort -n -k2,2 file | awk '$2<25 {print; i++} END{print "\nTotal number of students:- "i}' 

sort -nk2 file | awk 'NR==1{print}END{print}' 

sort -n -k1 -k3 file

sort -n -k 2

sort -n -k 3.8,3.12 -k 3.6,3.7 -k 3.4,3.5 < input_file

sort -n -k 6 inputfile

sort -n -k 6 inputfile -o inputfile

sort -n -o your_file your_file

sort -nrk2 | head -6

sort -nr -k 2 file1 | awk 'FNR == NR { a[$1] = $2; next } { print $1, a[$1], $2 }' file2 -

sort -nrk 2,2

sort -nr -t: -k3

sort -nsuk2 file

sort -n -t ',' -k 1 -k 3 -k 2

sort -n -t _ -k 2

sort -n FILENAME | uniq

sort -n File1 File2

sort -n data_file | awk -f median.awk

sort -n input.txt | uniq -c

sort -n numbers | tail > largest

sort -n | sort -u

sort -n temp | uniq -c | awk '{ print $2, $1 }' > temp2

sort -o $INPUT -n -t , -k4.7,4 -k4.4,4.5 -k4.1,4.2 $INPUT

sort -o f f

sort -o file.txt file.txt

sort -o foo foo

sort -o outputfile +1 -2 +4 -5 +6 -7 inputfile

sort -r < yourfile

sort -rnk3 myfile | awk -F"[. ]" '!a[$2]++'

sort -r -t"," -k2,2 -k17,17 input.csv

sort -r <yourfile | awk -F# '!seen[$1,$2]++'

 sort -r <yourfile | uniq -w16

sort -r yourfile | perl -F'#' -lanE  'say $_ unless $seen{"$F[0],$F[1]"}++'

sort -s -k1,1

sort -s -n -k 1,1

sort -s -t- -k1,1n -k2 filenames.txt

sort -t '>' -k 3 filename

sort -t $'\05' file

sort -t $'\t' -k 1,1

sort -t $'\t' -k2 file

sort -t $'\t' -k 5,5

sort -t , -k2,2

sort -t , -k 1,3

sort -t' ' -k1.2 input

sort -t' ' -k2.3 input

sort -t' ' -k1 input

sort -t' ' -k2 input

sort -t' ' -k 9,9.2 -k3 -k17

sort -t"<TAB>" -k1,1d -k3,3g

sort -t'>' -nk2,2 file

sort -t\" -k4nr 

sort -t, -k+2 -n -r filename

sort -t, -k2.3 -n *csv

sort -t, -k4n,4 file | awk -F, '{a[$1]=a[$1]?a[$1] FS $NF:$NF;}END{for(i in a){print i","a[i];}}'

sort -t, -k2 p1.csv | sort -u -t, -k2

sort -t, -nk1,1 -nk2,2 -nk3,3 -nk4,4 -nk5,5 -u text

sort -t. -k2,2 -k1,1

sort -t/ -k2,2n inputfile

sort  -t: -k1,1 -k3 data.txt

sort -t: -k4,4rn

sort -t: -s -k1,1 file.txt

sort -t\; -k 1,1n -k 2,2n -k 3,3n -k 4,4n test.txt

sort -t= -k1,1 -us FileB.txt FileA.txt

sort -t= -nr -k3 inputfile | head -1

sort -t_ -nk2 abc.lst | awk -F_ '!a[$1]++'

sort -t\| -k +2n dataset.txt

      sort -t : -k 2,2n -k 5.3,5.4

sort -t ';' -k3 -n demo.cvs|tail -n 1

sort -t ';' -k 5 -r -n -o output.txt input.txt

sort -t _ -k 2 -g data.file

sort -t '_' -k 3,4 you_data_file

sort -t '|' --key=10,10 -g FILENAME

file='.zhistory' && var=$(sort -u "$file") && echo "$var" > "$file"

sort -uk1,1 file

sort -u -n FILENAME

sort -u -o FILE FILE

sort -u -o test.txt test.txt

sort -u -t, -k1,1 file

sort -u -t\| -k3,3 input-file.txt

sort -u INPUT > OUTPUT

 for i in `sort -u NUMBERS.txt ` ; do count=`grep -c "$i" NUMBERS.txt ` ; echo "$i=$count" ; done  > your_result.txt

sort -u | cut -f 1 | uniq -c | awk '{ print $2","$1 }'

sort -u dir/* > sorted_uniq_file

$ sort -u file.txt

sort -u file1 file2

sort -u file1 file2 ...

sort -u < file | grep -c "^this: "

sort -u < file | grep -c "this: "

sort -u logfile.log

sort -u yourFile

sort -u yourFileWithTheLines

>  find ./ -maxdepth 1 -printf "%A@ %f\0" | sort -z -n | while read -d '' date line; do echo "$line"; done

sort 055.txt | awk ...

sort FILE | uniq -c | sort -n

sort File1.txt File2.txt | uniq -u

sort NUMBERS.txt | uniq -c | awk '{print $1,"=",$2}'

sort a b | uniq -d

sort a b | uniq -u

   sort a.dat | uniq -c | awk '{print $2":"$1}'

    sort a.dat | uniq -c | awk '{print $2, ":", $1}'

sort data.txt | awk 'BEGIN{last = ""; value = 0;} {if ($1 == last) {print $1" is "$3" | difference "$3"-"value" = "($3-value)}else{last = $1; value = $3; print $1" is "$3;}}' -

sort data.txt | sed -n -e '/^E001:/,/^E018:/p'

sort file -V | awk '{ print ++a[$1] "," $0 }'

$ sort file -o file 

sort file |paste - - -  -d,

 sort file | rev | uniq -f 10 | rev

$ sort file | uniq -c 

sort file |xargs -n100 |sed 's/ /,/g'

sort file1 file1 file2 | uniq -u

sort filea fileb

sort input-file.txt | uniq -u -w 3

sort input.txt | uniq -c

 sort inputFile | uniq -c | awk '{print $2", "$1}'

 sort inputFile | uniq -c | sed 's;^\s*\([0-9]*\)\s*\(.*\)$;\2, \1;'

sort inputfile | uniq -c

sort ip_addresses | uniq -c

sort ips.txt | uniq -c

sort list|awk '{if(p&&$0~p"e+$")print "rm "$0;p=$0}'

sort list|awk '{if(p&&$0~p"e+$")print "rm "$0;p=$0}'|sh

sort list|awk '{if(p&&$0~p"e+$")print "rm \""$0"\"";p=$0}'

sort list1 list2 list2 | uniq -u 

sort orginal_list.txt duplicate_list.txt | uniq -u

sort remote_list local_list | uniq -d > duplicate_list

sort t1 t2 | uniq -d

sort temp.txt -o temp.txt

sort test.txt | uniq | xargs -I{} grep -Fnxm1 {} test.txt | sort -k1n -t: | cut -f2 -d:

sort | uniq -c

sort <inputfile | uniq -c

sort | uniq -c | awk '$1 >= 3 {print $2}'

sort | uniq -c | awk '$1 == 3'

$ sort < $file | uniq -c | awk '{print $2 " " $1}'

sort | uniq -c | sort -n

sort | uniq -d

sort < file | uniq | grep "this: " | wc -l

sort your_file | uniq -c | awk '{for(i=2;i<=NF;i++) printf $i"\t"; printf $1"\n"}'

sort yourfile | uniq > outputfile

source <filename>.sh

source <(./bin/flatten_config.php config.json)

source <(./generate_commands)

source <(curl -s http://mywebsite.com/myscript.txt)

source <(grep -v "mesg" /etc/bashrc)

source <(ruby genrc.rb)

source <(sed 's/:/\\\\:g' my.conf)

source "$(dirname $0)/conf.sh"

source $(ruby genrc.rb)

source $1

ve() { source $1/bin/activate; }

source "$HOME/.rvm/scripts/rvm"

source $ZSH/oh-my-zsh.sh

 for f in ~/.bash_profile_*; do source $f; done

source "$rvm_path/contrib/ps1_functions"

source ${ZDOTDIR-$HOME}/.zsh/say_hello.zsh

source ../topscript.sh

source ./addalias.sh ls 'ls --color=auto'

source ./chphp.sh foo 3

source ./conf/prac1

source ./file1.bash

source ./init.bash

$source ./myscript.sh 

source ./path.sh

source ./run_me

source ./script.sh

source ./script.sh

source ./script.sh

source ./setenv.sh

source ./setup.sh

source ./test

source ./test

$ source .bash_profile

source .bashrc

source .bashrc

source .bashrc 2>&1 | grep source

source .profile

source .zshrc

source /dev/stdin <<< "$(curl --insecure https://raw.github.com/gurjeet/pg_dev_env/master/.bashrc)"; echo done

source /etc/bash_completion.d/virtualenvwrapper

 source "/home/dtuite/.rvm/scripts/rvm" && $APP_ROOT/bin/unicorn...

source /home/your_user/.bashrc && django_serve 

source /path/to/USB/based/bashrc

source /path/to/file

source /path/to/myscript.sh

source /path/to/script.sh

source /root/full/path/to/topscript.sh

source /system/etc/bash/aliases && "$@"

source /tmp/del

source /usr/bin/tasks

source '/usr/local/etc/bash_completion.d/git-completion.bash'

source '/usr/local/etc/bash_completion.d/git-prompt.sh'

 source /usr/share/virtualenvwrapper/virtualenvwrapper.sh

source FILE

source X < <(echo "some input")

source a.sh && echo ${rt}

source another.sh || return $?

source b.fish; or exit 1

source b.sh var

 source build/envsetup.sh

source changePrompt.sh

source child.sh

source cpmd

  source donot_touch.sh

source ec2

source external.sh

source file.sh

source file_A

source filename

source function.sh

source go.sh

source input.ini

source lib.bash

source makelastcomm.sh

$ source myScript.sh

 source myShortcut.sh

source myfile.sh

source myparams.tcl

source myscipt.sh "$var"

source myscript.sh

source myshell.sh

source script.sh

source script.sh

$ source script.sh

source scriptfile

source test.dat

source the_other_script.sh

( source userscript; wait )

( source userscript; wait ) & wait

source var

source virtualenv_activate.sh

$ source virtualenvwrapper.sh

$ source yourscriptfile

  source ~/.bash_aliases

source ~/.bash_profile

$ source ~/.bash_profile

source ~/.bash_profile

$ source ~/.bash_profile #zsh in your case

source ~/.bashrc

source ~/.bashrc

source ~/.bashrc

source ~/.bashrc

source ~/.bashrc

source ~/.bashrc

source ~/.bashrc

source ~/.bashrc

 source ~/.bashrc

source ~/.bashrc || source /etc/profile

source ~/.build_path

source ~/.custom_rc

  source ~/.git-prompt.sh

source ~/.profile

source ~/.profile

source ~/.profile

source ~/.rvm/scripts/rvm

source ~/.yourfile

source ~/.zshrc

source ~/github/ansible/hacking/env-setup >& /dev/null

source ~/nvm/nvm.sh

 source/foo/bar

sox -m -v 1 yourfile.wav silence.wav -t wav outfile

sox -n silence.wav trim 0.55

sox "Me, London.mp3" -n spectrogram -Y 130 -l -r -o "Me, London.png"

sox files*.mp3 -t wavpcm - | lame - > bunch.mp3

spawn /bin/sh -c $command

  spawn mysql -h "$db_host" -u "$db_user" -p "$db_pass" "create database $new_db_name"

spawn nohup /usr/bin/firefox https://www.google.com/

spawn rsync -e "ssh -q -o StrictHostKeyChecking=no" $localfile $username@$remotehost:$remoteloc

spawn scp {*}[split $files] $ACCOUNT@$SERVER:[esc $newfolder]

spawn ssh [exec pbpaste] -l username

spawn ssh -o "StrictHostKeyChecking no" "me@$1"

spec --options spec/spec.opts

split --lines=75     # or: split -l 75

split --numeric-suffixes --digits=4 --lines=500 myfile.txt file_

split --suffix-length=5 --lines=1 foo.txt

split -C 100m -d data.tsv data.tsv.

split -a 1 -d file ''

$ split -a 5 $file

split -b140K -a4 my_really_big_file.txt my_smaller_files.txt.

split -b=1M -d  file.txt file 

split -d -n 4 -l 500 myfile.txt file_

split -d file ''

split -l 1000 -d --additional-suffix=.txt file.txt split_file

split -l 1000 -d --suffix-length=5 test.txt ''

split -l 10000 big.csv

split -l 10000 originalfile.txt

split -l 20 file Partfile

split -l 200000 filename

split -l 500 all all

split: output file suffixes exhausted

spool log.out

sql2="grant all on ${db_name}.* to ${db_user}@${host} identified by \"${password}\";";

sql2="grant all on ${db_name}.* to ${db_user}@${host} identified by "${password}";";

sqlcmd -S server\instance -E -v db ="MyDatabase" -i s.sql

sqlcmd -S server\instance -E -v db ="'foo'" -i s.sql

sqlite3 [OPTIONS] FILENAME [SQL]

sqlite3 ${db_name} "insert into ${table_name} (${column1},${column2}) values ('${f1//\'/''}','${f2//\'/''}');"

sqlite3 /Users/riceje7/bin/places.sqlite  "SELECT url FROM moz_places" | lpr

sqlite3 /home/ubuntu/testsql.sqlite .dump > /home/ubuntu/ubuntu one/newfinal.sql

sqlite3 database.db "PRAGMA integrity_check"

sqlite3 database.db3 < commandsFile

sqlite3 db.sqlite 'SELECT computer_name FROM machine WHERE serial_number = "C02JT0XXXXXX";'

$ sqlite3 my.db "select * from my_table;" | more

$ sqlite3 mydatabase.db < SQLTableTransfer

$ sqlite3 mydatabase.db ".read SQLTableTransfer"

sqlite3 mydatabasefile ".read file_name.sql"

sqlite3 script.db "insert into notes (note) values (\"Stuff happens.\"||\"$Str1\");"

sqlite3 your.db "pragma table_info(your_table)"

result=$( sqllite3 /home/user/db_fake_book_index "select id, page from fb2 where bookcode='$bookcode' and page=$page" )

sqlplus *connect string*  @echo.sql > host.out 2> host.err

sqlplus *connect string*  @echo.sql &>echo.log

sqlplus -L username/pw@db @ fileWithCommands.sql

sqlplus -S $username/password@destination @/path/copysetup/insert.sql $ENV $RELEASE_ID

sqlplus -S user/pass@localhost @/opt/D2RQ/file.sql $2

feed=`sqlplus -s uname/pwd @test.sql Test_VAl`

sqlplus -s user/pass@DB

testvar=`sqlplus foo/bar @test.sql`

testvar=$(sqlplus foo/bar @test.sql)

sqlplus login/pass @get_area.sql

    sqlplus 'scott/tiger@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost.localdomain)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SID=xe)))'

sqlplus 'select onething from another' | awk '{ weave awk magic here }'

sqlplus user/pass@connect @scriptname

square $(add 10 20)

square 30

src/com/company/stuff/platform/appname/subpackage/subsubpackage/Foo.java

countip=$srctip

srun_ps $1/$2.exe EOD

ssed -R "s|(?<!Mr|Mrs)\.|.\n|g" newFile.txt

ssh $1 "zcat -f file1 file2 >> ..."   # let zcat do both files

ssh $1 "zcat ... >> ...; cat ... >> ..."

ssh "$@" | tee >(grep -Po '(?<=\$).*' --color=never --line-buffered | format_line >> ${logfile})

ssh "$@" | tee >(grep -e '.*\@.*\:.*\$.*' --color=never --line-buffered >> test.log)

ssh $MachineIP " echo \"$CM_Config\" > \"$mName/CM_CONFIG\" "

ssh $NODE1_SSH_PATH /bin/bash $PROGRAM_HOME/bin/run.sh > start.log

ssh $REMOTE_USER@${SUPPORTED_SERVERS[$i]} "gtar -zcvf $TAR_FILE \$(find $LOCAL_PATH -name *$DATE*)"

ssh $RUSER@$RHOST "mysqldump -u$RDBUSER -h $RDBHOST $RDB > ~/$RBAK; mysql -u$RDBUSER -h $RDBHOST -Bse 'drop database $RDB; create database $RDB;'; mysql -u$RDBUSER -h $RDBHOST $RDB < ~/$LBAK;"

ssh $SERVER "mysql -e 'SELECT * FROM ${TABLE} WHERE RAND() < ${PROBABILITY} LIMIT ${LIMIT}' -uroot -p ${DATABASE} > temp_dump_file.sql"

ssh $USER@$SERVER "cd ${REMOTE_PATH}; mkdir -p $i" < /dev/null

ssh $USERNAME@$HOSTNAME "pg_dump -f /dev/stdout -t tb1 -t tb2 -t tb3 dbname" > /export/bin/dbexport.sql

ssh $host '/a/b/file$$$$'

ssh $host 'nohup java -cp program.jar >`hostname`output.log 2>`hostname`error.log &'

ssh $hostname my_script >> results_file

VAR=`ssh $i "awk -F: '/^bar/ {print \$2}' /local/foo.txt"`

ssh $node "date --date \"appcmddate \| sed -n 2p \| cut -d \\ -f 3,4,5,6,8\" +%s"

ssh $node "kill \$(ps aux | grep '[s]omeprocess' | awk '{print \$2}')"

ssh "$node" "source /etc/profile.d/bkUp.sh; asBackup -b '/home/backup/esa/${node}'"

ssh $q "mkdir -p /opt/acd/hgf/tom/hanks/ ; chmod -R 777 /opt/acd/hgf/tom/hanks/"

ssh $username@$host ps axuw | grep java

ssh "${URL%:*}" stat "$(basename "$F")"

 respond=$(ssh ${fromNode} /usr/bin/time "-f" "%e" "'sh' '-c' 'virsh migrate --live ${VM} qemu+ssh://${toNode}/system > /dev/null 2>&1'" 2>&1)

ssh -At jumpserver ssh -At server1

ssh -A user_foo@serverB "ssh user_bar@serverC"  

ssh -L 23:localhost:23 user@host

ssh -L 3306:localhost:3306 myserver.com

ssh -L 4444:raptor.lan:22 genja.org

ssh -L localhost:8022:remote2:22 remote1

ssh -N -R [port_XX]:localhost:22 -o ExitOnForwardFailure=yes user@host

ssh -N -i <(echo "privatekeystuffdis88s8dsf8h8hsd8fh8d") -R 16186:localhost:8888 hello.com

ssh -N -o 'ControlMaster=yes' -S "$ssh_control_socket" "$HOST" &

ssh -R 10022:localhost:22 your_server_address

ssh -R 12345:127.0.0.1:3306 remote_system

ssh -R 12345:localhost:3306 user@php_machine -N

ssh -T $server -l username "/export/home/path/to/script.sh $1  $2" 1>traf1.txt 2>/dev/null

ssh -T user@server <script.sh

SSH_VER=$(ssh -V)

SSH_VER=$(ssh -V 2>&1)

ssh -V > /tmp/ssh_version_check.txt

ssh -V >& /tmp/ssh_version_check.txt

ssh -V > /tmp/ssh_version_check.txt 2>&1

ssh_version=$(ssh -V 2>&1)

ssh -X "$remote_usr"@"$ip_address" "$remote_cmd" >/dev/null 2>&1 &

ssh -X someserver /usr/bin/someprogram

ssh -X user@server "export DISPLAY=:0; gnome-screensaver; gnome-screensaver-command -d;"

ssh -f $COMMAND

ssh -f $user@$machine_name "cd $path;"'shard_path=$(find . -name "shard0"); cd $shard_path; mkdir temp'

ssh -f -N -L 10001:somehost:3306 user@host1

ssh -f -n remotesystem 'command&'

ssh -fqTN -L 12345:127.0.0.1:3306 user@server.com

 ssh -fqTN -R 12345:127.0.0.1:3306 user@server.com

ssh -f myusername@hostA -N -L 4444:hostB:22

ssh -f root@10.158.42.12 'nohup perl /script/myscript.pl 06/04/2014 60 &' 2> /dev/null

ssh -f user@mysql_machine -L 12345:mysql_machine:3306 -N

ssh -i /Users/myuser/.ssh/id_rsa -F /Users/myuser/.ssh/config login@host

ssh -i /path/to/private_key -oPasswordAuthentication=no admin@server_host

ssh -i /path/to/private_key -oPasswordAuthentication=no admin@server_host exit

ssh -i id_rsa -o -o StrictHostKeyChecking=no [myuser]@[myserver]

ssh -i id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no [myuser]@[myserver]

Z=$(ssh -i key.txt "$USER"@A.B.C.D "touch $NAME.txt; chmod 700 $NAME.txt; mv $NAME.txt /etc/openvpn/ccd; echo -n \"$X $Y\" > /etc/openvpn/ccd/$NAME.txt")

ssh -i path/to/root-key root@host command

ssh -i private_key_path user_name@remote_machine "command"

ssh -i rsync user@remote

ssh -i ~/path/mykeypair.pem ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com

$dat=`ssh -l $LOGIN1 'grep -i num /Data.cfg | cut -d ":" -f 2'`;

output=$(ssh -l $USERNAME $HOST "$SCRIPT")

ssh -l root -i key $SERVER_IP "your command"

ssh -l user_1 hostname  "command_1; command_2"

ssh -l username -o 'HostKeyAlias example.com' example.com "source /etc/profile;cd /Users/someone/cordova/appname;cordova prepare)"

ssh -n "$1" "cd $projectDir;./startBatch.sh $2 &"

ssh -n $R_USER@$R_HOST 'touch /home/user/file_name.txt'

ssh -n $aline 'jps'

ssh -n -f *.*.*.* "cd /***/***/remote && echo \"$1\"; ./ossec-rootcheck; echo \$?">/home/ossl7/res

ssh -n -f *.*.*.* 'cd /***/***/remote; ./ossec-rootcheck; echo $?' >/home/ossl7/res

ssh -n -f *.*.*.* "exec 2>&1; cd /***/***/remote && echo \"$1\"; ./ossec-rootcheck; echo \$?">/home/ossl7/res

ssh -n -f *.*.*.* 'exec 2>&1; cd /***/***/remote; ./ossec-rootcheck; echo $?' >/home/ossl7/res

ssh -n -o stricthostkeychecking=no root@10.14.150.113 'sed -i "s/export PART=\"\\\$1\"/export PART=\"A\"/" flash.sh'

ssh -n -q -oPasswordAuthentication=no -i id_dsa user1@${line} date

ssh -n name@$host 'cat $(ls -t /path/to/log/dir/*.log | head -n 1)'

ssh -n root@${i} /usr/sbin/the_script  # works for a first IP, then breaks

ssh -oConnectTimeout=5 -oBatchMode=yes -l group servername bash -s -- -7 < /some/path/top_command.sh

ssh -oPasswordAuthentication=no -q harigm@8.19.71.238 exit

ssh -o BatchMode=yes "user@host" true

ssh -o PasswordAuthentication=no $remote_account echo ok | grep ok

ssh -o PasswordAuthentication=no user@hostname

ssh -o "StrictHostKeyChecking no" ubuntu@$1 run.sh

ssh -o StrictHostKeyChecking=no -l username hostname "pwd; ls"

ssh -p 10022 localhost

ssh -p 30 root@serverIP

"ssh" -p 42586 mysite.com

ssh -p 4444 hostA

ssh -p 4444 localhost will give you a conenction straight to "raptor.lan"

ssh -p 8899 root@$REMOTEIP "mysql -u root -p -e \"$SQL\""

ssh -q 127.0.0.123 echo "$FOO" '$BAR'

ssh -q hostname 'awk "!/^#/ && \$3 ~ /ext/ && \$2 != \"/\" && \$2 != "\"/opt\"" { print \$2 }" /proc/mounts'

ssh -t $i "sudo ls /root" < /dev/tty

ssh -t $suser@$server "mysql -h '$host' -u $user -p $pass $db"

ssh -t -i pem user@1.1.1.1 "mysql -h xxx -u user -p"

ssh -t -t $user@$i

ssh -t -t -X "$ip" </dev/null

ssh -t -t -f -X "$ip"

ssh -t -t -n -X "$ip"

ssh -t -t user@host.com 'sudo /etc/init.d/script restart'

 ssh -t -t user@server '/usr/bin/mysql -u{mysqlUser} -p{mysqlPassword} {mysqlDB} -e "select * from table"' 

ssh -t 'command; bash -l'

ssh -t host4 bash ./run_audit.sh

ssh -t localhost "stty -echo -onlcr; cat testfile.txt; stty echo onlcr" | cat -v | less -U

ssh -t me@machine ./executeMyScript '&&' bash -i

ssh -t name@ipAddress "short () { veryLongCommandThatIWriteOften; }; export -f short; bash"

ssh -t remote tcsh

ssh -t  root@5.6.7.8 "su - oracle"     

ssh -t somehost ~/bashplay/f

ssh -t user@address "command_to_execute"

ssh -t user@address "command_to_execute; bash"

ssh -t user@host python

ssh -t user@machineB "scp /path/to/file root@machineC:/path"

ssh -t username@hostname "sudo /path_to_my_script $1"

ssh -t username@remotemachine "cd /path/you/want ; bash"

ssh -t xxx.xxx.xxx.xxx "cd /directory_wanted ; bash"

ssh -v gerrit

(ssh -v hostname somecommand > /dev/null) 2>&1 | awk '/debug1/ ...'

((ssh -v hostname somecommand 1>&3) 2>&1 | awk '/debug1/ ...' 1>&2) 3>&1

ssh <host> tar -zcvf - /root/bugzilla > bugzilla.tar.gz

ssh 10.30.3.2 "echo -n 'something' > /var/log/messages"

ssh 192.168.22.11 cp a b

ssh 192.9.202.44 "tar tjf '/home/adup/mybackup.tar.bz2' | sort | grep -v '/\$' |(  while read filename; do md5=\$(tar xjOf '/home/adup/mybackup.tar.bz2' \$filename | md5sum | awk '{print $1}'); echo "\$md5  \$filename"; done)"

ssh HOST "cat mydirectory.tar.bz2" | tar xj -C mylocaldirectory

$ ssh MyAppUser@myapp.mycompany.com "sudo -u me 'sudo cp ...'"

ssh S gzip -dc < archive.tar.gz | tar xvf -

ssh SC-1 'for i in /var/log/*/server; do echo $i; done'

ssh SOMEUSER@MACHINE_IP "/usr/bin/unzip -l -q SOME_PATH/20130409060734\*.zip | grep -i XML  |wc -l"

ssh abc@host 'sed -i s/enable=false/enable=true/g /config/pqr.properties'

ssh backupFiler snapvault status | awk '$4+0 > 24' 

ssh dan@172.19.1.15 $(printf '%q ' mv -v "/home/dan/Downloads/complete/$dir" /home/dan/Downloads/downloaded)

ssh data@server.org "cd /home/data/ ; chmod o+rx directory_\$DATE"

ssh deploy@hera 'kill -9 `ps -ef | grep MapReduceNode | grep -v "grep" | awk -F " " '"'"'{print $2}'"'"' | head -n 1`'

ssh gerrit

ssh git@myProductionServer.com GIT_WORK_TREE=/home/www/test GIT_DIR=/home/www/test/.git git checkout -f production

ssh hop2.example.com 'zip - /usr/local/patch/clone.example.com* | base64'

ssh host 'HISTFILE=~/.bash_history; history -r; history' | tail

ssh host 'awk "{print \$0}" /path/to/log.txt'

ssh host "awk '{print \$0}' /path/to/log.txt"

ssh host cmd  < /dev/null 

ssh host 'command options, etc., '

ssh host command1 | command2

ssh host "command1 | command2"

ssh host myscript.sh

ssh host "num=\$(ls -1 /home/folder/anotherFolder | wc -l); if [ \$num -gt 3 ]; then echo yes: \$num; fi"

ssh host 'num=$(ls -1 /home/folder/anotherFolder | wc -l); if [ $num -gt 3 ]; then echo yes: $num; fi'

 result=$(ssh host time "command" 2>&1)

ssh host$i "top -n1 -b | head -n 15" >> ~/mysh/top_out

ssh host$i "top -n1 -b | head -n 15>> ~/mysh/top_out"

ssh host@name "B=3; echo $A; echo $B;"

ssh host@name 'B=3; echo $A; echo $B;'

ssh host@name 'B=3; echo 3; echo $B;'

ssh host@name "B=3; echo 3; echo ;"

ssh host_1 "cat test_file | sed 's/\$/\\tOK/'"

ssh host_alias "command"

ssh hudson@test "python/runtest.py \"$XAS_SVN\""

ssh imageuser@x.x.x.x 'cp sourcefile targetfile'

ssh kparisi@remote.com 'find /home/kparisi -printf "%M %p\n"'

ssh kparisi@remote.com 'find /home/kparisi -printf "%M %p\n"' > file

ssh localhost "(cd /tmp && nohup sleep 10) >/dev/null 2>&1 &"

ssh localhost "true || exit 1; echo going on; nohup sleep 10 >/dev/null 2>&1 &"

for i in {1..20} ; do ssh machine$i cat log.txt; done

ssh me@my-system 'mkdir -p ~/test/sub1/subsub1' 

ssh mgilson@XXXXX cat < foo.h '| cat'

ssh myServer "echo \$(uname -a | awk '{print \$2}') "

ssh myServer "echo \`uname -a | awk '{print \$2}'\` "

ssh myServer "uname -a | awk '{print \$2}' "

ssh my_server "bash -c 'echo this is \$HOSTNAME; abc=2; echo abc is \$abc;'"

ssh myhost "sed 's/\\\\u\\@\\\\h/\\\\u\\@\\\\h (myhost)/' /etc/bashrc"

ssh myname@example.com 'ls -d dir/*/'

 ssh myself@git.mycompany.com

ssh myuser@server perl -s - -some -arguments </path/to/my/script

ssh nathan@gnunix 'a=$(date) && echo $a'

VARIABLE=$(ssh otherhost command)

ssh ppuser@10.101.5.91 " keyConfig $1 $2 $4 "

ssh pvt@192.168.1.133 "~/tools/run_pvt.pl $BUILD_NUMBER"

ssh pvt@192.168.1.133 '~/tools/run_pvt.pl $BUILD_NUMBER'

ssh pvuser@host ". ~pvuser/.profile;/opt/datamart/bin/resmgr -import segp -colNames \"npath cond type\" -line \"~Thresholds~Transmission_Auto|_|$r|_|rule|_|\""

ssh remote-host "bash -c '(export abc=123 && echo $abc)'"

ssh remote-host "bash -c '(export abc=123 && echo \$abc)'"

ssh remote-host "bash -c 'abc=123 && echo \$abc'"

ssh remote-host 'sh -c "if [ -f ~/myfile ] ; then gzip -c ~/myfile ; fi" ' | gzip -dc > /tmp/pkparse.py

ssh remote_host "$cmd_str"

ssh remote_host "cat - >/tmp/test.tmp && $cmd_str >/tmp/new.conf.tmp"

ssh remote_machine  # or user@remote_machine

$ ssh remote_machine ~/script.sh

ssh remotecluster "qsub -v argv=\"`cat /remotepath/temp.par`\" -l walltime=10:00:00 /remotepath/my.script"

ssh remotehost "cat /var/log/messages | less"

ssh remotehost 'echo $(pwd)'

ssh remotehost "echo $(pwd)"

ssh risdevo0196 'echo $0'

ssh root@<vm-client-ip> "shutdown -h now"

ssh root@$center ssh root@$ip pkill -f "$target_dir/$main"

ssh root@127.0.0.1 "( cd /var && chmod +x my_script.sh && ./my_script)"

ssh root@IP "grep -q '$KEY' .ssh/authorized_keys || echo '$KEY' >>.ssh/authorized_keys"

ssh root@MachineB 'bash -s' < local_script.sh

STATUS=`ssh root@foobar -c 'cd /foo/bar && /opt/hyperic/agent-current/bin/hq-agent.sh ...'`

ssh root@host "bash -s" < ./my_script.sh "my_input"

ssh root@myserver 'echo "*** Log info of $(date -u) ***" >> /var/log/app.log'

 ssh root@myserver 'python /root/python/run_dev_server.py > /dev/null 2>&1 & echo $! > "dmr.pid"'

ssh root@remoteHost "commands"

ssh root@server "nohup /usr/local/bin/app -c cfg &; exit"

ssh root@server "nohup /usr/local/bin/otherapp &; w; exit"

ssh root@server.com "mysqldump -uroot -pxxxxx mydb" > mydb.sql

ssh server1

ssh server1 "df ... && "\!"/^[a-zA-Z]/...}}'"

ssh server2 "cat /path/to/file2" | ssh server1 "cat >> /path/to/file1"

ssh server2 'cat /path/to/file2 | ssh server1 "cat >> /path/to/file2"'

ssh serverB ". ~/.bashrc; sh cassandra-cli -h <serverB> -v -f database_import.txt;"

ssh someServer python -u pythonToExecute.py $1 $2 $3

ssh sshost$number 'cd $dir && java Main &' &

ssh tinosino@robottinosino-wifi cat /Users/tinosino/.profile | sed -n '/Verify this script/q; p' > /home/tinosino/Desktop/tinosino_bash_profile.sh

ssh tinosino@robottinosino-wifi "sed -n '/Verify this script/q; p' /Users/tinosino/.profile" > /home/tinosino/Desktop/tinosino_bash_profile.sh

ssh user1@192.168.1.2 "awk '\\\$5==1{print \\\$3}' filename.log"

ssh user1@machine1 "scp file user2@machine2:/destination"

ssh user1@server -t "cd /home/user2; bash --rcfile .bashrc "

ssh user1@server -t "cd /home/user2; bash --rcfile /home/user2/.bashrc -i"

ssh user@11.11.11.11 '/home/lib/groovy-1.5.8/bin/groovy -cp jars/log4j.jar:jars/commons-configuration.jar:jars/spring.jar:$(echo jars/c*.jar | tr " " ":") bin/CreateTable.groovy'

"ssh user@Main.local mkdir Desktop/test"

ssh user@Middleman -L 1337:Destination:22

ssh user@address "command_to_execute"

'ssh user@demo.server.it mysqladmin -uroot -pmypass create test',

ssh user@domain.com "echo Hello $VARIABLE1;COMMAND1=\`date +%b\`; COMMAND2=\$(date +%Y); echo \$COMMAND1 \$COMMAND2"

ssh user@example.com 'bash -s' < local_script.sh

ssh user@hadoop "hive -S -e '$query' " >&output.tsv

ssh user@hadoop "hive -S -e '$query' 2>&1" >output.tsv

ssh user@host "$(typeset -f); f"

ssh user@host -o NumberOfPasswordPrompts=0 -i .....

ssh user@host /path/to/script '&>/dev/null' '</dev/null' '&' disown

ssh user@host /path/to/script; echo -e '\a' > /dev/console

ssh user@host 'cat $(ls -dt /mypath/*.txt | head -1)'

ssh user@host 'cat - > /tmp/file.ext; do_something_with /tmp/file.ext;rm /tmp/file.ext' < file.ext 

ssh user@host 'cat /mypath/$(ls -t /mypath/*.txt | head -1)'

ssh user@host "cat file.txt >> other_file.txt"

ssh user@host "cd /path/to/folder1; cp file /path/to/folder2"

ssh user@host command

ssh user@host "command1; command2" > /local/1-2.txt

ssh user@host "cp /path/to/folder1/file /path/to/folder2"

ssh user@host 'if [ -f /path/to/my/file.txt ]; then echo yes; else echo no; fi'

ssh user@host ls

ssh user@host ls

 for repo in `ssh user@host 'ls /var/svn-repos'`;do svn co <method of connecting/path>/$repo $repo;done;

ssh user@host 'mv a b'

ssh user@host mysqldump -uusername -hlocalhost -ppassword --all-databases \> /home/user/sqlfile.sql

ssh user@host script.sh

ssh user@host "sudo /etc/init.d/haproxy stop" | grep -Fq '[  OK  ]'

ssh user@host.com -t 'sudo /etc/init.d/script restart; sleep 30'

ssh user@host.com "cat foo.tar" | tar xvf --

ssh user@host.com "ls -l" >output

ssh user@hostA 'cd ~/Thesis && ./generate'

ssh user@hostname 'cat > script.sh; chmod 755 script.sh; sudo ./script.sh' < script.sh > results.txt

ssh user@hostname ls

ssh user@hostname 'tar cf - /dir/file*.tgz' | tar xf - --to-command='tar xzvf -'

ssh user@hostname "touch file -r remote-file"

$ ssh user@ip "echo 'Hello world'; whoami; cd / ; ls"

    ssh user@ipaddress "sudo sh -c \"sync; echo 3 > /proc/sys/vm/drop_caches\"";

ssh user@localhost -p 1337

ssh user@otherhost /path/to/php-script

ssh user@remote 'export myvar=myvalue ; echo myvar=$myvar'

ssh user@remote find /some/folder/with/backups -mtime +7 -type f -print

ssh user@remote "rm /home/user/foo.txt"

ssh user@remote.com process.bat $(ls .*a)

ssh user@remote.com script `date`

CMD_OUT=$(ssh user@remote_host "/path/to/script argument")

ssh user@remote_host 'command1; command2; command3'

ssh user@remotehost cat /path/to/file.tar.bz2|tar -xjf -

additional_vars=$(ssh user@server "cat variables.properties")

local_var=$(ssh user@server "echo ${server_var}")

ssh user@server "find /path/to/dir -type f -printf 'get %p\n' | sort -n | tail -1" > batchfile

ssh user@server 'find /server/ -name "*.txt" -print0 | xargs -0 tar -cO' | tar -xivf - -C .

ssh user@server "for dir in dir1 dir2 dir3; do echo \$dir; cp some/file.txt /home/user/\$dir/; done"

    ssh user@server "for dir in dir1 dir2 dir3; do echo dir3; cp some/file.txt /home/user/dir3/; done"

ssh user@server mv /site/includes /

ssh user@server "sh /path/to/mybashfile"

ssh user@server 'simulation/script' &

ssh user@server 'simulation/script &'

$ ssh user@server "top -n 1 -b" > /tmp/top.out

ssh user@server.com "date +%Y%m%d%H%M%s"

ssh user@server_ip 'bash -s' < local_script.sh

ssh user@server_ip "echo Test | tee output.log"

ssh user@server_ip "mysql -uyourusername -pyourpassword < query.sql | tee output.log"

ssh user@windowsmachine 'mycommand.exe'

ssh user_foo@serverB "ssh user_bar@serverC"  

ssh username@hostmachine 'declare -a array1=(AAA BBB CCC DDD); declare -a array2=(001 002 003 004); num = ${#array1[@]}; for((i = 0 ; i < $num ; i++ )); do ln -sf ${array1[$i]} ${array2[$i]}; done'

ssh username@rserver.com -L 127.0.0.1:8888:\*:11111

ssh username@serverid 'command'

ssh vagrant@localhost "alias mycmd='echo $HOME';/mycmd"

 function whitelist-ip () { ssh vps-01 "/usr/bin/sudo /sbin/iptables -v -I INPUT 1 -s $1 -j ACCEPT"; }

ssh whoever@wherever 'cat remote_file' | local_program

ssh you@server.com  "which git-upload-pack"

ssh you@your_local_machine:/path/to/Test user@node:~/Folder/folder2

ssh yourUserName@node1 "cat input_file_node1 | python parser.py" >output_file_node1

ssh yourUserName@node1 "python parser.py" <input_file_node1 >output_file_node1

ssh your_username@remotehost.com

text=$(ssh yourname@yourmachine 'grep uploadRate= /root/yourscript')

$ ssh-add ~/.ssh/id_rsa

ssh-add ~/.ssh/mykey

ssh-agent bash

ssh-agent bash -c 'ssh-add /home/christoffer/ssh_keys/theuser; git clone git@github.com:TheUser/TheProject.git'

ssh-copy-id [-i identity_file] [user@]machine

ssh-copy-id -i rsync.pub user@remote

ssh-copy-id -i ssh./yourkeyfilewithoutpassphrase.pub user@sshserver

ssh-copy-id -i ~/.ssh/id_rsa.pub username@server2

ssh-copy-id user@sshserver

$ ssh-keygen

ssh-keygen

$ ssh-keygen

$ ssh-keygen

ssh-keygen -f outfile -N ''

ssh-keygen -f rsync

ssh-keygen -f ~/.ssh/apache-rsync

$ ssh-keygen -t rsa

ssh-keygen -t rsa

$ ssh-keygen -t rsa

ssh-keygen -t rsa -N "" -f my.key

ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAybmcqaU/Xos/GhYCzkV+kDsK8+A5OjaK5WgLMqmu38aPo56Od10RQ3EiB42DjRVY8trXS1NH4jbURQPERr2LHCCYq6tHJYfJNhUX/COwHs+ozNPE83CYDhK4AhabahnltFE5ZbefwXW4FoKOO+n8AdDfSXOazpPas8jXi5bEwNf7heZT++a/Qxbu9JHF1huThuDuxOtIWl07G+tKqzggFVknM5CoJCFxaik91lNGgu2OTKfY94c/ieETOXE5L+fVrbtOh7DTFMjIYAWNxy4tlMR/59UVw5dapAxH9J2lZglkj0w0LwFI+7hZu9XvNfMKMKg+ERAz9XHYH3608RL1RQ== This comment describes the key

ssh.exec! "sed 's/1/#{p}/g' changed.txt > newfile.txt"

ssh.exec! "sed -i 's/1/" + p + "/g' changed.txt"

ssh.exec! "sed -i 's/1/#{p}/g' changed.txt"

ssh://[user@]host.xz[:port]/path/to/repo.git/

sshfs user@host:dir mountpoint || exit 1

sshpass -[args] rsync [source] [dest]

sshpass -[args] rsync [source] [dest] | sort

sshpass -p $PASS1 ssh user1@machine1 "sshpass -p $PASS2 scp file user2@machine2:/destination"

sshpass -p "$cmpw" ${=cmdstr}

sshpass -p "$password" ssh $host "cd $dir && ./after_deploy.sh"

result=$(sshpass -p "$password" ssh -n "$user"@"$target" ls "$path"*heapdump*)

result=$(sshpass -p "$password" ssh -n "$user"@"$target" ls "$path"*heapdump* 2>/dev/null)

sshpass -p"$password" ssh "$user"@"$ip"

sshpass -p"$password" ssh -o StrictHostKeyChecking=no "$user"@"$ip"

sshpass -p'password' ssh -o 'StrictHostKeyChecking no' -p 22  root@ip

sshpass -p 1234 ssh-copy-id localhost

sshpass -p 'password'  scp /etc/clients.txt shah@192.168.1.2:/home/shah/

sshpass -p "password" ssh username@74.11.11.11 "su -lc \"cp -r $location2 $location1\""

sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@host 'cd /opt/app/'"$DIR"';SIZE=$(du -s);echo "YVALUE="$SIZE > ../size_'"$DIR".txt

sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@host 'read -r DIR; cd "/opt/app/$DIR"; SIZE=$(du -s); echo "YVALUE=$SIZE" > "../size_$DIR.txt"' <<< "$DIR"

stap your_script.stp -c "your command"

start <command> /B

start "" /max "c:\nameofpdf.pdf"

start "" "C:\Program Files\SomeProgram\Some program.exe"

start ["window title"] [/wait] myprogram.exe args ...

start /b "" "myprog.exe"

start /b node server.js

start /wait YourApplication.exe

start /wait dxdiag /x:SomeXmlFile

start "MATLAB" %START_WAIT% "%MATLAB_BIN_DIR%\%MATLAB_ARCH%\matlab" %MATLAB_ARGS%

start c:\Services\ServicesChecker\ServicesChecker\bin\Debug\ServicesChecker.exe

start cmd /C pause

start cmd /c java -jar app.jar ^> log1.out 

start cmd /k echo Hello, World!

 $ start http://code.google.com/p/mulder/downloads/detail?name=MPUI.2011-06-09.Full-Package.exe^&can=26^&q=MPlayer^&sort=-uploaded

start javaw.exe -jar yuicompressor-2.4.2.jar -o "%~n1.min.js" "%1"

start node server.js

start on net-device-up IFACE=eth0

start program = "/usr/bin/sudo /usr/bin/startLDAPServer.sh"

start "title" "%ProgramFiles%\Internet Explorer\iexplore.exe" http://www.example.com

start-stop-daemon --start --exec "${DAEMON}" -- ${ARGS}

startInfo.EnvironmentVariables["EnableNuGetPackageRestore"] = "true"

startJob 0 583 bfd 4thUnusedArgument

startJob 0, 583, bfd, 4thUnusedArgument

startServer; sleep 5; grep -m 1 "server up" <(tail -f log)

startservice --user 0 -n com.android.shellms/.sendSMS -e contact "$i" -e msg "$2" 1>/dev/null

stat $1*

fsize=$(stat "$file" -c %s)

stat --format=$'%n\t%y' *

stat --format %a $(find /example/dir -type f -perm 777 | grep -Ev 'file[1234]')

stat --format="%n:%s" *

stat --printf='%Y\n' directory_name

stat --printf '%a' your_file

stat --printf "%s\t%n\n" *

stat --printf='%y\n' directory_name

stat -c %A someFile

stat -c %A someFile | sed 's/...\(.\).\+/\1/'

stat -c "%Y %n" .

stat -c %Y file 

filemtime=`stat -c %Y myfile.txt`

stat -c '%a %n' *|awk '$1>755'

stat -c '%a %n' *|awk '$1>755{print $2}'

stat -c '%a %n' *|awk '$1>755{system("chmod 755 "$2)}'

stat -c %a .

stat -c '%i %n' *csv | awk '!seen[$1]++' | cut -d ' ' -f 2-

stat -c %s $filename

http_content_length=`stat -c '%s' $resource`

$ stat -c %s *

filesize=$(stat -c '%s' testing.txt)

stat -c %y $filename

find_date=$(stat -c %y $files | awk '{print $1}')

stat -c "%y %n" .

for FILE in *; do stat -c"%s/%n" "$FILE"; done | awk -F/ '{if ($1 in a)print $2; else a[$1]=1}' | xargs echo rm

SIZE=$(stat -c%s fill_me)

stat -c"%z;%n" * | grep '^2012-12-04' | awk -F';' '{ print $2 }' | xargs tar -zcvf dec4.tar.gz

stat -f "%Sm" -t "%Y%m%dT%H%M%S" FILE

stat -f "%m" /path/test.app

SIZE=`stat -f %z filename`

stat -f%z image.png

mountpoint=$(stat -t "/my/mountpoint" 2>&1)

stat /home/martin/index.html

stat /miki/*

static const char * path_list_[2] = { "lib/sun", "lib/matlab" };

stats "output.txt" every ::::0 using 2:3

status || return

std::string  addPathCommand = "/Applications/MATLAB_R2011b.app/bin/matlab -r \"addpath(genpath('"+ matlabFunctionPath + "'))\"";

stdbuf --output=L ./svnfixversion ./ 1.5 --verbose 2>&1 | less

stdbuf -oL curl -s http://asia.dabase.com:4000

stdbuf -oL sh long.sh | sh simple.sh

stdbuf -oL xxd -r -p | nc -u localhost 12345 | xxd

stdbuf -oO runningscript.sh | something_else

stdbuf -o 0 ./a.out | perl -nl -e 'use POSIX; printf ( "%s %.2f\n", strftime( "%Y%m%d-%H%M%S", localtime ), $_ )'

stdbuf -o0 yourprogram | awk '/pattern/{print;exit}1'

stdbuf -o0 yourprogram | mawk -W interactive '/pattern/{print;exit}1'

stm |& grep ERROR | tee -a /path/to/logfile

stm |& tee /dev/stderr | grep ERROR >> /path/to/logfile

store \$files, 'checksum';

store $files, 'checksum';

strBatchName = SystemData.AppPath + "DetailedContacts.bat" & " " & """" & domainCodeList & """"

strace -c -f -evfork ./t.sh

strace -e trace=desc ./a.out 2>&1 | awk '/open|something_else/ {print; exit}'

strace -e trace=open,read bash > output.txt

strace -f -e open,dup2,close bash -c 'ls > one > two > three'

strace -ff -o res.txt bash -c 'mkdir d2 | cp *.c d2/'

strace -f -o /tmp/myscript.trace -e trace=process ./myscript.sh

strace -f -o res.txt bash -c 'mkdir d2 | cp *.c d2/'

strace -fo s.log ./x.sh

(strace -o /tmp/head.trace head; strace -o /tmp/tail.trace tail) < file

strace -o /tmp/shell -f -p [PID from the first shell]

strace -o all_system_calls.txt -f -ff bash MyBashScript.sh MyArgumentOne

strace -o my_program.strace -f ./my_program

strace -o strace.out -f -ff -p $IRB_PID

strace -o trace -c -Ttt ./scrip

strace -q -ewrite cp -- "$@" | ...

strace ./SMILExtract

strace find /dev -maxdepth 1

stree ~/my-repo-in-another-folder

string fijiCmdText = "/S /C \"<command line that can have quotes>\"";

string file = args[0];

string[/cd.*/]

template=$(string_replace "$template" "$server")

strings -a -t x /bin/ls | grep -- --help

strings -a -t x filename | grep foobar

$ strings foo

foo=$(strings < pdffile.pdf | sed -n 's|.*/Count -\{0,1\}\([0-9]\{1,\}\).*|\1|p' | sort -rn | head -n 1)

stripper < file.txt > stripped.txt 

qx{$str}

stty -F /dev/my_serial_port <baud_rate> cs8 cread clocal

stty -F /dev/ttyS0 cs7 cstopb -ixon raw speed 1200

$ stty -F /dev/ttyUSB0 1000000 raw

stty -F /dev/ttyUSB0 ispeed 4800 && awk -F"," '/GGA/ {print $3,$5}' < /dev/ttyUSB0

stty -F /dev/ttyUSB0 ispeed 4800 && cat < /dev/ttyUSB0 | awk -F"," '/GGA/ {print $3,$5}'

stty -a

stty -echo

stty -echo 

stty -echoctl

stty -ixon

stty -ixon

stty -tostop

stty echo

stty erase ^M

stty intr ^X

stty sane

stty start '^-' stop '^-'

stty stop ""

stty werase '^?'

stuff string

su -

su <user> -c "<command>"

su $APP_USER -c "nohup java $JAVA_OPTS  >> $LOG_OUT 2>> $LOG_ERR & echo \$! > $PID_PATH/$CAT.pid"

su $USER -c "$WEB --quiet" &

PID=`su - $USER -c '. source_file; $DAEMONPATH $DAEMONPATHARGS $DAEMON $DAEMONARGS > /dev/null 2>&1 & echo $! '`

su --login postgres --command "createdb $DBNAME"

su -c "/usr/local/bin/test || [ $? -gt 0 ] && rm -fr /var/run/test.lock" test

su -c "/usr/local/bin/test || if [ $? -gt 0 ]; then rm -fr /var/run/test.lock; fi" test

su -c 'bash --rcfile myfile' 

su - -c "k=0; if ls | grep -q ^Desktop; then k=1; fi; if [ \$k == 1 ]; then echo 1; fi"

su - -c 'k=0; if ls | grep -q ^Desktop; then k=1; fi; if [ $k == 1 ]; then echo 1; fi'

su -c "od --width=144 -x /dev/input/event3 | awk '{ print \$12 }'"

su -c 'sh /path/to/script.sh'

su -c 'source /system/etc/bash/aliases && "$@"'

    su -c "source /system/etc/bash/aliases && $*"

su -c 'source myfile; bash'

su -c "var=Hello; echo $var"

su -m $user -c "find $dir >/dev/null 2>&1 || echo $dir is not readable or executable"

su -s /bin/bash -c 'bash --rcfile <(echo "source ~/.bashrc; source myfile")'

su USERNAME

su another_user -c /path/to/other.sh

su - app${username} -c 'ls $MYDIR'

su biergaizi -c 'kill `cat /var/php-nginx/biergaizi.test.php.pid` ; sleep 1'

su - dbadmin -c "command"

su - hadoop -c "java -jar /home/hadoop/testing.jar > $log_file"

su - jboss -c $JBOSS_START_SCRIPT $JBOSS_BIND_ADDR > /dev/null &

su - jetty -c sh runProgram.sh

su minecraft -c '/bin/bash /path/to/script/script.sh &'

su - myid -c 'db2 connect to mydb;db2 -x -v "select COL1,'\'','\'',COL2,'\'','\'',COL3L  from MYTABLE fetch first 10 rows only"; db2 connect reset;'

su - oracle -c  "echo \"select database_role from v\\\$database;\" | sqlplus -s / as sysdba";

su postgres -c 'dropdb $user'

su - postgres -c "psql -U postgres -d postgres -c \"alter user postgres with password 'password';\""

F=$( su - postgres -c "psql -d postgres --tuples-only -P format=unaligned -c \"SELECT datname FROM pg_database JOIN pg_authid ON pg_database.datdba = pg_authid.oid WHERE rolname = 'username'\"" )

su postre -c 'psql -c "create database '"$var with encoding 'unicode';"'" -U edumate template1'

su root -c "$COMMAND &"

su sync_user -c "cd ~; sync_section $source $tmp $dest"

su - test -c /opt/linux/agent-service start

su - test -c 'cp /home/test/toto.txt /home/test/dir'

su - test -c 'echo hello\ \ there'

su user -c 'ABC=abc; echo $ABC; echo $USER'

su vagrant -l -c "nvm install v0.10.12 > /dev/null 2>&1"

({ subcmd11; subcmd12; } &); ( { subcmd21; subcmd22; } &);

subdir

subinacl.exe /help /full

subl `bundle show gemname`

sublime $(git status --porcelain | grep "myfile.txt" | cut -c 4-)

subscribe_key = 'sub-f-xx-xx-xx-xx-xx'; 

successfully curl -L https://get.rvm.io \| bash -s stable --ruby  ## You just have to quote pipe.

sudo

sudo !!

sudo !!

$ sudo $(which npm) install -g socket.io

sudo - $USER  # runs the NEW shell as a logon shell on top of the current instance

sudo -E /path/to/script.sh

$ sudo -E npm install -g socket.io

sudo -E ruby some_script_which_requires_root_access.rb

sudo -S /opt/lamp/lamp start < /home/x/Documents/somePassword

sudo -S sh -c 'cat /tmp/hosts >> /etc/hosts' <<< "password"

sudo -b nohup dd if=/dev/zero of=/dev/sda bs=1M

sudo -i -u user sh -c 'for i in /dir; do echo $i; done'

sudo -i /path/to/script.sh

sudo -i bash -c "cd /path/to/dir; exec bash"

sudo -k

sudo -k

sudo -k user2 /path/to/command

sudo -su db2inst1 '/opt/ibm/db2/V9.7/bin/db2 force application \(1995\)'

sudo -su db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \\\(1995\\\)

sudo -su myusername touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys

sudo -u $SUDO_USER ./exec_as_normal_user.sh

sudo -u $SUDO_USER bash -c 'source path/to/rvm_install/script; install_rvm'

sudo -u $SUDO_USER bash path/to/rvm_install/script

sudo -u USERNAME -g GROUPNAME COMMAND

sudo -u USERNAME COMMAND

sudo -u andrew myprog

sudo -u css-servers STARTUP_SCRIPT

sudo -u db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \(1995\)

HOME=`sudo -u myuser -s "cd ~; pwd"`

sudo -u myuser rpm -Uvp ...

sudo -u postgres psql -U postgres -d postgres -c "alter user postgres with password 'password';"

sudo -u runnerdude run_python.sh

sudo -u test /opt/linux/agent-service start

sudo -u testuser -H ...

sudo -u tomcat ./bin/startup.sh

sudo -u user -H /usr/bin/firefox -new-tab http://stackoverflow.com

sudo -u user1 cp /files ./ 

sudo -u username -g groupname .command

sudo -u username bash

sudo -u username command

sudo -u username sh ./script.sh

sudo -u username2 -H sh -c "cd /home/$USERNAME/$PROJECT; svn update" 

sudo -u www-data ssh-copy-id -i /var/www/.ssh/id_rsa.pub username@myserver.com

sudo -u www-data ssh-keygen -t rsa

sudo -v

sudo -v || exit

sudo ./add_pydev_certificate.py

sudo ./android

sudo ./backup.sh

sudo ./deletion.sh

sudo ./hid_listen | sed -e 's/^$/'$(echo -en "\033c")'/'

sudo ./script.sh -u werner

sudo ./v2u $(printf "cap_%06d.png" "$duration")

sudo /etc/init.d/haproxy stop 2>&1

$sudo /etc/init.d/incrond start

$ sudo /home/ronnie/chbr.sh

sudo /opt/node/bin/node /home/pi/www/js/script.js | logger -p local5.info

sudo /path/of/your/binary

sudo /path/to/executable/file

sudo /path/to/graceful-restart

sudo /path/to/script

sudo /sbin/ldconfig -v

sudo /usr/sbin/tcpdump -i eth0 -s0 -w /tmp/eth0.pcap & ps -ef | grep tcpdump; sleep 1; sudo pkill tcpdump; ps -ef | grep tcpdump;

sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq libpam-ldap

sudo NODE_ENV=production node app.js >> log.txt &

sudo PATH=/path/to/node/bin/dir:$PATH make install

sudo add-apt-repository ppa:docky

sudo apt-get install $k

sudo apt-get install alien rpm debhelper fakeroot binutils

sudo apt-get install autossh

$ sudo apt-get install bash-completion

$ sudo apt-get install beep 

sudo apt-get install dos2unix

sudo apt-get install expect

sudo apt-get install gawk

$ sudo apt-get install ia32-libs

sudo apt-get install ia32-libs

sudo apt-get install incron

sudo apt-get install libnotify-bin

sudo apt-get install libxslt1-dev

$ sudo apt-get install libxtst6:i386

$ sudo apt-get install mongodb-10gen=2.4.6

sudo apt-get install pure-ftpd

sudo apt-get install putty-tools

sudo apt-get install python-vtk

sudo apt-get install tcpdump

sudo apt-get install zip

$ sudo apt-get purge bash-completion

sudo apt-get purge package-name

sudo apt-get remove python-lxml

sudo apt-get update && apt-get install bison*

$ sudo apt-get update && apt-get install vim-gtk

sudo aptitude install sharutils

sudo aptitude install xdotool

sudo at -f commands next hour

sudo at next hour

$ sudo atrs -q b 141 120

sudo auditctl -p a -w /some/file  # monitor attribute changes to /some/file

sudo bash -c 'echo line > file'

$ sudo bash -c "foo.sh" > output_file 2>&1 < /dev/null

sudo bash -c "rm /Users/student/Desktop/*"

sudo bash ./backup.sh

$ sudo bash if_test.sh

sudo bash script.sh

sudo brew install gnu-sed

sudo cat ./myfile | grep --line-buffered "SOFTPAY:F:isoutl.c|L:01307|" | uniq | awk -F "|" '{print $3}'

sudo cd / && grep -rn "hello" *

sudo chmod +x /usr/local/bin/django-admin.py

sudo chmod +x filename 

sudo chmod 600 ~/.ssh/authorized_keys

sudo chmod 777 /folderlocation

sudo chmod 777 example.sh

sudo chmod u+s /path/to/my/application

sudo chown -R $USER:staff ~/.rvm

$ sudo chown -R root:root ./site-functions

sudo chown -R sherwyn /Users/sherwyn/.rvm

sudo chown myusername:mygroup ~/.ssh/authorized_keys

sudo chsh

sudo chsh shell user

sudo command > file

sudo command args...

sudo cp /bin/bash /bin/sh

sudo cp /bin/sh /bin/sh_orig

sudo cp bash_completion/bash_completion /etc

sudo cp myscript.sh /usr/bin/.

sudo crontab -e

sudo crontab -e

sudo cu -s 19200 -l /dev/ttyUSB0 | tr -cd '[:print:]' > serialContent.json

$ sudo dpkg -i python2.7-minimal_2.7.2-5ubuntu1_amd64.deb

sudo dpkg-reconfigure dash

sudo dscl . -change /Users/$USER UserShell /bin/bash /usr/local/Cellar/bash/4.2.45/bin/bash

sudo dtrace -l -n 'syscall::write*:entry'

sudo easy_install happybase

$ sudo easy_install virtualenv

sudo easy_install your_app_name

sudo echo -e '#!/bin/bash\nxmodmap "keysym Alt_R = Multi_key"'

sudo echo foo > /path/to/file

sudo echo line > file

sudo "echo nameserver 8.8.8.8" >> /etc/resolv.conf

sudo echo nameserver 8.8.8.8 >> /etc/resolv.conf

$ sudo echo something >/var/lib/varlibfile

sudo env PATH=$PATH /path/to/script.sh

sudo ettercap -i eth0 -Tq > /file

$ sudo find -O2 "$FULFILLMENT" "$ARCH1" "$ARCH2" "$MASTERING" -type f

sudo find -name "*.jpg" -exec rsync -azuvhE -n {} tango:/jobs/prime/Item/ \;

sudo find . -iname "*.jpg" -type f -exec identify -format '%w %h %i' '{}' \; | awk '{if ($1>300 || $2>300) print $3}' | sudo xargs -I '{}' mv '{}' /home/simon/decent_size/

sudo find . -maxdepth 1 -type d -exec mkdir -p {}/converted  \;

sudo find ... -type f -printf '%p      %s      %t\n'

sudo find / -name '*.exe' -exec sh -c 'rm -rf $(dirname $0)' {} \;

sudo find / -type d -name "*heroku*"

sudo find / -type f -exec grep PIP_RESPECT {} /dev/null \; 2> /dev/null

sudo find /PATH/TO/YOUR/DIR -maxdepth 1 -type d -exec mkdir -p {}/converted  \;

sudo find '/media/<Pendrive>' -name '*.jpg' -exec rm -f '{}' ';'

sudo find ~/Backups/webserver-backups -type f -delete

sudo fs_usage -f /private/etc/hosts

$ sudo gammu-smsd

sudo gem install capybara-webkit-0.14.1.gem

sudo glassfish4/bin/asadmin create-service

sudo install -m 0755 script.awk /usr/local/bin/books

sudo installer -pkg /Volumes/TeamViewerHost/Install\ TeamViewerHost.pkg -target /

sudo java -jar ./myjar.jar name_%1\$tY%1\$tm.csv ./sql/blablab.sql someArgument

sudo java -jar jython_installer-2.5.2.jar

sudo java ClassFileName

sudo kill -9 `sudo netstat -tulpn | grep port_number | tail -c 23 | sed -e 's/\s*\(.*\)/\1/g' -e 's/\([0-9]*\).*/\1/g'`

sudo killall -9 vmware

sudo killall instruments 2>/dev/null

sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist

sudo ln -s $(gem env | grep "EXECUTABLE DIRECTORY" | cut -d":" -f 2)/show /usr/bin/show

sudo ln -s $(which gcc-4.2) gcc 

sudo ln -s /Applications/Sublime Text 3.app/Contents/SharedSupport/bin/subl /bin/subl

$ sudo ln -s /Applications/TextMate.app/Contents/SharedSupport/Support/bin/mate /usr/bin

sudo ln -s /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain

sudo ln -s /Library/Frameworks/Python.framework/Versions/X.X /Library/Frameworks/Python.framework/Versions/Current

 sudo ln -s /System/Library/Frameworks/Python.framework/Versions/X.X /System/Library/Frameworks/Python.framework/Versions/Current

sudo ln -s /Users/username/sql/test_basename.sh /usr/bin/test_basename.sh

sudo ln -s /usr/lib/node_modules/less/bin/lessc /usr/local/bin/lessc

sudo ln -s /usr/local/Cellar/pypy /usr/local/bin/pypy

sudo ln -s /usr/local/lib/jython/bin/jython /usr/local/bin/

sudo ln -s /usr/local/lib/python2.7/site-packages/django/bin/django-admin.py /usr/local/bin/django-admin.py

sudo ln -s /usr/sbin/node /usr/local/bin/node

sudo ln -s script1.py /usr/bin/script1

sudo mkdir /ruby_tutorials

sudo mkdir /usr/local/share/doc

sudo mount -i -o remount,suid /home/evgeny

$ sudo mount LABEL=MYLABEL /media/usbkey

sudo mpic++ -I $HOME/Downloads/VTK/Parallel -lvtkParallel mpi_vtk_Hello_World.cpp -I $HOME/Downloads/VTK -I $HOME/Downloads/VTK/Common -o mpi_vtk_Hello_World

sudo msgfmt -o /home/adrian/tmp/locale/es/LC_MESSAGES/hello.mo hello.pot

sudo mv ~/macports/local /opt

sudo mysql -h localhost -u root -p

sudo "nameserver 8.8.8.8" >> /etc/resolv.conf

sudo networksetup -setwebproxy "Ethernet" myproxy.example.com 8000

sudo npm install -g grunt-cli

sudo npm install jasmine-node -g

sudo opensnoop -f /private/etc/hosts

for i in `sudo ovs-vsctl list-br` ; do sudo ovs-ofctl dump-flows $i ; done

 $ sudo perl -MCPAN -e "install Unicode::Collate::Locale"

sudo perl -pi -e "s/^(define).*(${2})[\'|\"].*/${3}/g" "$file"

sudo perl -pi -e 's|include "/var/run/racoon/\*.conf" ;|# include "/var/run/racoon/*.conf" ;|g' /etc/racoon/racoon.conf;

sudo permisions.sh

sudo pip install argcomplete

sudo pip3 install nose

sudo pkill -f bz

sudo port -v install postgresql90 postgresql90-server

sudo port install $@ 2>&1 | tee -a $1.log

sudo port install gawk

sudo port install gsed

sudo port install gsed

sudo port install zsh +mp_completion

sudo profiles -P | egrep -q ': com.meraki.sm.mdm$' && exit

sudo pure-pw useradd joe -u ftpuser -d /home/ftpusers/joe

sudo python myprogram.py> /home/pi/errorlogs/myprogram-$(date +%Y-%m-%d_%H-%M).txt 2>&1

 sudo rm -- -

sudo rm -f /usr/bin/idea.sh

sudo rm -rf /etc/zypp/repos.d/*

sudo rm -rf /usr/bin idea.sh

sudo rm -rf /usr/local/lib/python2.7/dist-packages/twitter

sudo rm -rf /var/tmp/app.{0..11}.attachments

sudo rm /bin/subl

sudo rpm -Uvh rpmtodeploy.rpm

sudo rsync -avrz /path/to/sync/ -e "ssh -i ../keys/my.pem" user@xx.xx.xx.xx:/path/to/sync/

sudo rsync -pgodt /home/ /newhome/

sudo security delete-generic-password -l ssid "/Library/Keychains/System.keychain"

sudo sed --in-place 's/^#\s*\(%wheel\s\+ALL=(ALL)\s\+NOPASSWD:\s\+ALL\)/\1/' /etc/sudoers

sudo sed -i '' "s/\(\['password'\] = \"\)\(\";\)/\1$PASS\2/g" /file.php

sudo sed -i.bak '/^127\.0\.1\.1/s/^/#/' /etc/hosts

sudo sed -i.bak "s~phpinfo();~//phpinfo();~g" index.php

 sudo sed -i "s#${REPLACESTRING10}#${REPLACESTRING12}#g" ${DESTINATION}/${FOLDER}/trunk/lib/config.php

sudo sed -i 's#DocumentRoot /var/www#DocumentRoot /var/www/mysite.com/public_html#' /etc/apache2/sites-available/mysite.com

 sudo sed -i 's/${REPLACESTRING10}/${REPLACESTRING12}/g' ${DESTINATION}/${FOLDER}/trunk/lib/config.php

 sudo sed -i "s/${REPLACESTRING10}/${REPLACESTRING12}/g" ${DESTINATION}/${FOLDER}/trunk/lib/config.php

sudo sed -i "s/127.0.1.1/$(ifconfig | grep -oP 'inet addr:\K(.*)?(?=  P-t-P)')/g" /etc/hosts

sudo sed -i 's/GRUB_TIMEOUT=10/GRUB_TIMEOUT=3/' /etc/default/grub

sudo sed -i "textFile.txt" -e "s,\($var1\):\(.*:\):,\1:$var2WithDollarSign:$var3,g" textfile.txt

sudo sed 's/GRUB_TIMEOUT=10/GRUB_TIMEOUT=3/' /etc/default/grub >/etc/default/grub

sudo sed 's:a:b:g' -i /tmp/test

sudo setfacl -R -m g:users:rwX,d:g:users:rwX index/

sudo sh -c '/usr/local/mysql/bin/mysql -h localhost -P 3306 --user=root --password=XXXXXXXXXX -e "select count(*) from crawlstatus where status=\"802350570V\";" test_navin > size.log'

sudo sh -c 'FOO=bar; echo Result:${FOO}'

sudo sh -c "apt-get update -qq ; true"

sudo sh -c 'echo "dotslash ALL = NOPASSWD: /opt/lampp/lampp" > /etc/sudoers.d/dotslash'

sudo sh -c "echo -e '$content' > $path"

$ sudo sh -c 'echo 0 >/sys/devices/system/cpu/cpu1/online'

sudo sh -c 'echo nameserver 8.8.8.8 >> /etc/resolv.conf'

$ sudo sh -c "echo something >/var/lib/varlibfile"

sudo sh -c 'for n in $(seq 1 60); do echo $n; sleep 1; sync; done'

sudo sh -c "su -c 'make' $USER && init 0"

sudo sh ./backup.sh

sudo sh ./script.sh

$ sudo sh if_test.sh

sudo ssh server "echo \"$SOMEVAR\"; awk '/pattern/{print \"hello\"}1' file > file.tmp"

sudo stdbuf -o0 tcpdump ...

sudo su -

sudo su - -c "R -e \"install.packages('shiny', repos='http://cran.rstudio.com/')\""

sudo su -c 'rpm -Uvh rpmtodeploy.rpm'

$ sudo systemctl start crond

sudo tar -cvjSf folder folder.tar.bz2

sudo tar -cvjSf folder.tar.bz2 *

sudo tar -cvpzf backupfolder/localhost.tar.gz /var/www

sudo tar -xvzf eclipse-SDK-3.7-linux-gtk.tar.gz -C /usr/local/

sudo tcpdump -D

sudo tcpdump -Z $USER -ieth1 -w ~/dump.bin

sudo tcpdump -i eth0 -q -l | awk '{print $3; fflush}' | tee -a file.txt

sudo tcpdump -i eth1 -s0 port 5025 -w netcat_trac.dump

sudo touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys

sudo turnoff

sudo umount -a -t cifs

sudo umount /home/user/myMount

sudo unzip thefile.zip -d /opt/target_dir

sudo update-alternatives --set rename /path/to/rename

$ sudo update-alternatives --set rename /path/to/rename

sudo updatedb

sudo usermod -s /bin/bash jenkins

sudo whoami

sudo "wrapper.exp"

sudo xauth add `xauth list $DISPLAY`

sudo yum -y install mysql-server

sudo yum install build-essential

sudo yum install gcc

sudo yum install mongo-10gen mongo-10gen-server

sudo ~/.pythonbrew/bin/pythonbrew install 2.5

sudo: RunStefano: command not found

sudo: unable to execute /usr/local/bin/bundle: No such file or directory

sum=$(( sum + val ))

sum += num; 

(( sum += val ))

(( sum =  $assignment + $test1 + $test2 + $final ))

sum: 6557076.288

supervisorctl start all

supervisorctl start script1

sv interrupt uwsgi

svn [subcommand] [options] [files]

svn add "" "/save"

svn cat http://myrepo/myfile.txt -r1

svn cat https://myhost/svn/eeli/eel/eel/eel-scalable-font.h@2

svn changelist ignore-on-commit file-you-want-to-add

VAR=$(svn checkout $URL | tee /dev/tty)

svn checkout --depth files --force URL PATH

svn checkout --username USER --password PASS ttps://example.com/projectname/trunk/app app

svn checkout -r {2006-02-17}

svn checkout http:/repositoryurl /path/to/the/code

svn ci -m " some comment about your change"

svn ci file1 file2 dir1/

svn ci vendor/plugin/<plugin_one>  vendor/plugin/<plugin_two> ... 

svn co --depth immediates svn://repo/trunk

svn co 'file:///localhost/Repo'

function awrco() { svn co https://x.x.com/x/x/x/projects/"$@" ;}

svn co svn://svn.fazend.com/abc/branches/pqr-staging pqr

svn commit /path/where/you/code  

svn commit test.log -m "$svnmessage" --non-interactive --username $username --password $password

svn cp -m 'Making test branch' ^/trunk ^/branches/hellosite

svn cp -m "Making test branch" "^/trunk" "^/branches/hellosite"

svn diff --diff-cmd /usr/local/bin/mydiff

$ svn diff --summarize | grep '^[^D]' file | grep -Po '(?<=host).*' > file

svn diff -c 12345 12346 12347

svn diff -r119977:r119978

$ svn diff -r1234:1235 | diffstat

svn diff -r1:HEAD --summarize|grep -ve '^D'|awk '{print $2}'|xargs exclude_dir.pl|xargs tar -vzcf file.tar.gz --exclude .svn

svn diff -rPREV:HEAD --summarize

svn diff -r BASE:14 foo.c

svn diff -r BASE:HEAD

svn diff -r BASE:HEAD foo.c

svn diff -r HEAD

svn help [subcommand]

svn help co

svn import -m "Imported project directory structure" dev svn://path/to/my/repo/trunk/

 svn import -m 'Initial import' /tmp/svn-structure-template/ file:///var/www/svn/reponame

SVN_INFO_ARR=`svn info`

result=$(svn info $svn | awk '/^Last Changed Rev:/ { print $4 }')

svn info | awk '/Revision/{ print $2 }' 

svn info filename

REVISION=`svn info http://svn-repository/trunk |grep '^Revision:' | sed -e 's/^Revision: //'`

svn info path/to/filename

svn info url

    LAST_UPDATE=`svn list http://$DEV$BRANCH | sort -r | awk -F\/ '{print $1}'`

  svn log --limit 1 | sed -n -e 's/^\(r[0-9]\+\).*/\1/p'

  svn log --limit 1 | sed -n -e 's/^r\([0-9]\+\).*/\1/p'

REVISION=$(svn log --limit 1 | sed -n -e 's/^r\([0-9]\+\).*/\1/p')

svn log --revision 16

svn log --xml %SOURCE% > %Des%svnlog.xml

svn log -l 1 BRANCH_URL

svn log -r{20100101}:{20100331} -v --xml | xsltproc formatter.xsl -

svn log -r COMMITTED

svn log | sed -n '/USERNAME/,/-----$/ p' 

svn ls -v ^/tags

var=`svn ls` && export var || unset var

svn ls http://server/svn/foo --depth empty

svn ls http://svn/path/to/tags |sort -t '.' -k 1,1n -k 2,2n -k 3,3n |tail -1|sed 's:/$::' |awk '{FS="."}{print $1 "." $2 "." $3+1}'

svn ls https://developernetwork.repo.net/svn/Projects/Calculator/

svn ls https://svn.example.com 2>&1 | sed 's/^/    /'

svn merge ^/trunk/xyz.com

svn mv https://subversion.assembla.com/svn/semiosnet/Test\ Protocol\ \(office\).docx https://subversion.assembla.com/svn/semiosnet/Repeaters_Network/Test\ Protocol\ \(office\).docx

svn pg -R svn:ignore .

svn propedit "export" file:///svn/repositoryName/path/to/file/in/repository/example.ex --file /data/svn/intranet/hooks/fileWithLogMessage --editor-cmd "echo succeeded >"

svn propget --revprop -r HEAD svn:date

svn propset svn:needs-lock yes "$line"

svn resolve --accept --recursive base .

svn revert -R .

svn revert -R MYDIR

svn st | awk '/Foo/ { print $2 ; }'

svn st | awk '/^?/ { print $2 }'

svn st | awk '/^?/ { system("rm -f $2") }'

svn st | cut -c8- | xargs ls

svn st | grep SomeFolderA | awk {'print $2'} | xargs svn revert

svn st | perl -lne 'print if s/^\s*\?//' | xargs -L 1 svn add

svn st | perl -wpl -e 's|\S*\s*(.*)/(.*)$|$1/Test$2|'

$ svn status --xml wc

svn status | grep -v "^.[ \t]*\..*" | grep "^?" && svn status | grep -v "^.[ \t]*\..*" | grep "^?" | awk '{print $2}' | xargs svn add

svn status | grep '\!' | awk '{print $2}' | tee >(xargs svn revert) | xargs svn delete

for file in `svn status|grep "^ *?"|sed -e 's/^ *? *//'`; do rm $file ; done

svn status | grep "^[AMD]" | sed 's/^.\{8\}//' | xargs zcvf My.tar.gz

svn status | grep "^\?" | awk {'print $2'}

svn status | grep ^? | awk '{print $2}' | xargs -J % cp % backups/

svn status | grep ^? | awk '{print $2}' | xargs cat >> backups/project.diff

svn status | grep '^?' | sed -e 's/^? *//' | xargs --no-run-if-empty -d '\n' svn add

svn status | grep "^?"|sed "s/^?/svn add/" | bash

svn status | grep '^?.*iml' | sed 's=^? *=./=;s=/[^/]*$==' | xargs svn propset svn:ignore '*.iml'

svn status | grep '^\!' | cut -c8- | while read f; do svn rm "$f"; done

svn status | grep '^\!' | sed 's/! *//' | cygpath -m | xargs -I% svn rm %

svn up --set-depth empty tags

svn up --set-depth infinity dirName

svn up `ls -d ./*`

svn update /path/to/the/code   

svnadmin create --pre-1.6-compatible --fs-type fsfs /svn/repos/myproject

svnadmin dump /path/to/repo > Dump1.dump

svnadmin dump c:\path\to\myrepo | 7z a -si svndump.7z

MESSAGE=$(svnlook propget --revprop -r $REV $REPOS_PATH svn:log)

svnrdump dump https://yourRepository/yourProject > yourProject.dump

svnx

swapFiles c:\Users\directory1 c:\Users\directory2

the_id=`swfdump -D /Users/home/folder/file.swf | grep -i mp3 | cut -d' ' -f6`

$ swipl -g "consult(abc), test(ask, X), write(X), halt"

$ swipl -q -s kb.pl -t "dad(elvis,X), writeln(X), false"

swipl -s file.pl -g "mygoal(3,foo)." -t halt.

syn region shExpr ... start="{" skip="^function.*\_s\={" end="}" ...

sync && reboot

sys..|grep..|awk 'NR==FNR{w=$2;h=$4;next}/screenwidth/{$0="screenwidth \""w"\"";} /screenheight/{$0="screenheight \""h"\""}1' -  oldfile

sysbench --test=cpu --cpu-max-prime=100 run

syslog -s -l error "message to send"

system "./video";

system "/bin/bash -c 'shopt -s globstar; for i in **.mp4; do ffmpeg -i \"$i\" -vframes 7 -y -ss 10 -s 150x150 -an -sameq -f image2 -r 1/5  \"$i\"%1d.jpg; done'"

system "/tmp/a.sh", @array;

system LIST

system SCALAR

system "chmod 755 public"

system "echo", params[:message]

system "find /some/path -type f -name \"*.mp4\" -exec sh -c 'for f; do ffmpeg -i \"$f\" -vframes 7 -y -ss 10 -s 150x150 -an -sameq -f image2 -r 1/5  \"$f%1d.jpg\"; done' _ {} +"

system 'jade --watch --pretty index.jade'

system ls -l

system 'nstcpdump.sh', '-C', '1', '-w', $name;

system "python", "./post_request.py", "--json", json

system "start text_file.txt"

system 'twurl -t -d track=keyword -H stream.twitter.com /1.1/statuses/filter.json'

system 'usermod', '-p', @options['shadow'], @options['username']

system 'wine', 'cmd.exe', '/C', 'InitialCallFile.bat', self.infile, self.outfile, self.param1, self.param2

system 'xterm', '-hold', '-e', $program;

$ system_profiler -xml SPUSBDataType

system_profiler SPMemoryDataType | awk '$1=="BANK"{bank=$2;sub(/:/,"",bank);while(getline>0){if($1=="Serial"&&$2=="Number:"){serial_number=$3}else if($1=="Status:"){status=$2};if(serial_number!=""&&status!=""){entries[++e]="{\"Bank\":\""bank"\",\"SerialNumber\":\""serial_number"\",\"Status\":\""status"\"}";break}};bank=serial_number=status=""}END{print "[";if(e>0){printf "%s",entries[1];for(i=2;i<=e;++i){printf ",\n%s",entries[i]};print""};print "]"}'

system_profiler SPSerialATADataType SPPrintersDataType

systemctl disable foo.service 

systemctl enable foo.service 

systemctl kill -s SIGINT uwsgi.service

systemctl start asterisk

systemctl stop asterisk

's{<a href='\''[.][.]/Example/case(\d\d)[.]html'\''><img src='\''[^'\'']*'\''}{<a href='\''../Example/case$1.html'\''><img src='\''<?php imgname('\''case$1'\''); ?>'\''}'

's|/#replace|test "' "$x" '" "1" "0" "" |g'  # Don't try to use this form.  It is for explication only.

's|Comment=|&'\''<span size="xx-large">|; s|Comment=.*|&</b>'\''|'

\t

t.dat

t1.dat t2.dat

tac Dump1.dump | grep -m1 --binary-files=text "Revision-number" | sed 's/Revision-number\:\ //g'

tac INPUTFILE | sed '/^Statistics |/q' | tac

tac error.log | awk '{if(/2012/)print;else exit}'

$ tac file

tac file | awk '!done && /Gottagohome saab 90 75n/{done=1; sub(/&$/, "")}1' | tac

tac file | awk '/Cannot proceed: the database is empty/ {f=$0; next} f{if (($3==5 && $4>"22:30:00") || ($4==6 && $4<="00:30:00")) {print; print f} f=""}'

tac file | awk '/ScriptAlias/ && ! seen {print "new line"; seen=1} {print}' | tac

tac file | awk '/a/ && !seen {sub(/a/, "c"); seen=1} 1' | tac

tac file | sed '/a/ {s//c/; :loop; n; b loop}' | tac

tac file | sed '/pattern/q' | tac

tac file | sed '3q;d'

tac file | sort -sut, -k1,2

tac file.csv | sed '1,4d' | tac > newfile.csv

tac file.log | awk '{ if ($1 >= 423) print; else exit; }' | tac

tac file.xml | awk -f parse_kml.awk | tac

tac file2 > file1

tac infile | sed -ne '/Response/,/Stimulus/ p' | tac -

tac inputfile | sed '5,/angles/d' | tac

tac logfile | awk -v start=$(date -d "5 min ago" +%T) '$1 < start {exit} 1' | tac

tac temp.txt | sort -k2,2 -r -u

tagfile.py "Tag Name" FileOrFolderName

< /var/log/maillog | tai64n2tai | awk -f script.awk patterns.txt - | qlogselect start $STARTDAY end $ENDDAY | matchup > $QMAILSTATS 5>/dev/null

< /var/log/maillog | tai64n2tai | awk 'BEGIN { IGNORECASE=1 } FNR==NR { patterns[$0]++; counter++; next } { $1=$2=$3=$4=$5=""; sub(/^[ \t]+/,""); for (i in patterns) { if ($0 !~ i) { count++ } } if (counter == count && !/^$/) { print } count = 0 }' patterns.txt - | qlogselect start $STARTDAY end $ENDDAY | matchup > $QMAILSTATS 5>/dev/null

rest=`tail $*`

tail --follow=name --retry

tail --follow=name file.txt | grep --line-buffered something > output.txt

   tail --follow=name file.txt | grep something > output.txt

tail --lines=+2 "$1"

tail -0f /var/log/maillog | tee -a ../newlog.log

tail -1

tail -1 <<< "$foo"

tail -1 "$file" | cut "-d#" -f2 | read ... variables here ....

elc=$(tail -1 ${filename} | awk -F, '{sub(/^"/,"",$3);print 2+$3}')

ALARM_POPUP_CONTENT=$(tail -1 /logs/file.txt)

ALARM_POPUP_CONTENT=`tail -1 /logs/file.txt`

variableString=$(tail -10 /home/appuser/logA.log)

tail -10 foofile | awk '{print "<category label=\"" $13 " " $14 " " $15 "\"/>"}'

tail -100 | tee $STDERR

tail -1000 -f ${logDir}/$(/bin/date +%Y%m%d.%H%M).sass_watch.log

tail -1000 file-with-line-too-long.txt | more

tail -1000 ghost.log | ./analyse

playerspresent=`tail -1000 ghost.log | ./analyse`

tail -1 MyFile | date -d "`awk -F, '{ print $7 }'`" +%s

tail -1 MyFile | date -d "`cut -d, -f7`" +%s

var=$(tail -1 cookie.txt)

tail -1 error.log | grep -qE "Error" && echo yes

tail -1 file | cut -c 9-22

tail -1 file | egrep -o '^[0-9]+:[0-9]+' > tmp.txt

tail -1 file.txt >file.txt.new && mv file.txt.new file.txt

tail -1 file.txt | sponge file.txt

tail -200 somefile | sed -n '/-----BEGIN PGP MESSAGE-----/,/-----END PGP MESSAGE-----/{/-----BEGIN PGP MESSAGE-----/{x;d};H};${x;p}'

tail -2 file.A | awk -F: '{sum+=$NF}END{print sum}'

tail -2 yourfile | head -1

tail -5 'somefile.log' | pbcopy

tail -F somefile 2>/dev/null

$ tail -c +3 file > file.shifted

tail -c+11

tail -c+3

tail -c 100 file  # returns the last 100 bytes in the file

tail -f $( ls -1tr `find /my/root/log/dir -name "*.log"` | tail -1 )

tail -f $( ls -1tr `find /my/root/log/dir -name "server.log"` | tail -1 )

tail -f "$(list_date_sorted_ascending /var/log | nul_terminated tail -n 1)"

tail -f ${logDir}/$(/bin/date +%Y%m%d.%H%M).sass_watch.log

tail -f -n 0 access.log 2>/dev/null | perl -e '$SIG{ALRM} = sub { print $x/5.0; exit(0) }; alarm 5.0; while(<>) { $x++ }'

tail -f -n 0 access.log | pv -lr > /dev/null

tail -f -n 11 scrape.log scrape.log

tail -f /dev/null > myfile &

tail -f /dev/tty0 | awk '{printf "%s\n",$1}' 

tail -f /foo/bar |nc -l -k -p 9999

tail -f /path/to/mongo_dev/logfile

tail -f /some/file.log | awk ' $2>10 {if (!($1 in a)) print $1; a[$1]=1; system("")}' > /some/filteredfile.log

tail -f /tmp/display_data

phonenumber=$(tail -f /var/log/asterisk/messages | awk 'match($12, /[^0-9]91([0-9]{10})@default/, a) {print a[1]; exit}')

tail -f /var/log/mongodb.log

tail -f /var/log/msg | stdbuf -oL grep 'error' >> logfile

$> tail -f /var/log/somelogfile.log
tail -f /var/log/system.log | grep --line-buffered "query=" | sed -u -e "s/.*query=//" | sed -u -e "s/\"//g" | sed -u -e "s/.$/ /"

tail -f /var/log/{system.log,kernel.log} | grep -i "vendor: 0x22b8" -m 1

tail -f /var/somelog | while read line; do echo "$line" | grep "some test and p l a c e h o l d e r" | cut -f 3,4,14 -d " "; done

tail -f FILE_PATH

tail -f a.txt | cut -f7 -d' ' | uniq -c

tail -f a.txt | stdbuf -oL cut -f7 -d' ' | uniq -c

tail -f a.txt | uniq -c

tail -f access.log | xargs host

tail -f access_log | awk '/\/index.php/ { print "\007" $0 }'

tail -f access_log | grep --line-buffered "/index.php" | while read x ; do echo -ne '\007' $x '\n' ; done

tail -f access_log | grep --line-buffered "127.0.0.1" | grep -v ".css"

tail -f debug >> test.log &

tail -f dev.log | grep '^ERROR:'

tail -f file

$ tail -f file

tail -f file | awk 'tolower($0) ~ /debug|.*nfo/ {system("java -jar abc.jar " $0)}'

tail -f file | grep --line-buffered my_pattern

tail -f file1|awk '/yourPattern/{print $0 >> $3".txt"}'

tail -f file1 | tee >(exec grep "hello" > fileHello) >(exec grep "bye" > fileBye) | grep "etc" > fileEtc

tail -f file1.txt >> file2.txt

tail -f filename

tail -f flex.log | grep "Exception" | sed -e $'s/Exception/Exception\a/'

tail -f flex.log | sed -e $'s/Exception/Exception\a/'

tail -f flexi.log | grep "Exception" --color | grep -v "DataNotAvailableException"

tail -f infile | perl -MTime::HiRes=time -ne 'printf "%.3f\t%s", time(), $_'

tail -f input | grep -e $1 -e ''  --color=always

tail -f input | grep -e ".*$1.*" -e ''  --color=always

tail -f input | perl -pe 's/.*'$1'.*/\e[1;31m$&\e[0m/g'

tail -f log | awk '/^\/\*\*\* Module Name/,/^\*\*\//'

tail -f log | grep --line-buffered "some test and p l a c e h o l d e r" | gawk '{print $3,$4,$14}'

tail -f log-file | perl -pe '$|=1; s/(.{80})/$1\n\t/g'

tail -f log.file | extract

tail -f log.txt | cut -b 1-50

tail -f log/development.log

tail -f logfile

tail -f logfile

tail -f logfile | grep org.springframework | cut -c 5-

tail -f logfile | while read line ; do echo "$line"| grep 'org.springframework'|cut -c 25- ; done

tail -f logfile | uniq -c

tail -f logfile.log | grep --line-buffered "something" | read -t 3

tail -f logfile.log | sed /pattern/,+10d

tail -f logfile.txt

( tail -f mct & cat ) | java -Xincgc -Xmx2048M -jar minecraft_server.jar

tail -f my_log_file | sed -e 's/.*\(response_time \S\+\).*/\1/p'

tail -f myfile.txt 2>&1 | perl -ne 'if (/file truncated/) {system 'clear'; print} else {print}'

tail -f myfwlog | GREP_COLOR='01;36' egrep --color=always 'ssh|$' | GREP_COLOR='01;31' egrep -i --color=always 'drop|deny|$'

tail -f mylogfile.log | grep "error: "

tail -f ~/Library/Logs/iOS\ Simulator/7.1/system.log

tail -n $number_of_lines filename

tail -n +1 -- *.txt

tail -n +1 -f /var/log/messages | grep sync_complete

tail -n +1 -f pipe

tail -n +1 -f your_log_file | myscript.sh foo

tail -n +1 -f your_log_file | some_processing_pipeline

tail -n +10 file

tail -n +100 log/production.log | less

tail -n +16 /var/log/syslog | grep '^WARNING'

tail -n +2 "$FILE"

tail -n +2 Data | cut -d' ' -f 2 | xargs -I{} cat Instances/{} >> $nF

$ tail -n +2 input | cut -f 1 -d: | while read file; do test -f $dir/$file && mv -v $dir/$file $destination; done

 tail -n +2 input-file | head -n -1 > output-file

tail -n +21 myfile.txt

$ tail -n +3 file.txt | head -n -4 > file.txt.new && mv file.txt.new file.txt

tail -n +3 input.txt > output.txt

$ tail -n +34 file | head -n -6

tail -n +8

tail -n+10 yourfile > newfile

tail -n+3

tail -n+3 file

 tail -n+`grep -n 23423423423 myfile.txt | cut -f 1 -d:` myfile.txt

tail -n+`grep -n popd tmp.sh | cut -f 1 -d:` tmp.sh

tail -n 1 `ls -1t /path/*.txt 2>/dev/null | head -n 1` /dev/null | awk '{print $1}'

tail -n 1 file.txt | sed 's/ //g' | sed 's/.*=//'

tail -n 100 A.txt > B.txt

tail -n 2 file9.log file10.log file11.log file12.log

tail -n 2 filename | head -n 1

tail -n 2 file{9..12}.log

tail -n3 outputs.txt >> newfile.txt

tail -n 4 *simple*.log

tail -n 4 outputs.txt | awk 'NR ==1 || NR == 3' >> newfile.txt

tail -q -n +2  dihed_*.dat | awk '{print $2}' > file.new

tail -q -n +2  dihed_*.dat | cut -d" " -f2 > file.new

tail -q -n1 * > OUTFILE

$ tail -r myFile.txt > newFile.txt

tail -r myFile.txt > temp.txt; cat temp.txt > myFile.txt; rm temp.txt;

tail -r myfile.txt

tail -r < list.txt | sed '/pattern/,$d' | tail -r

< myfile.txt tail -n +15 | tail -r | tail -n +10 | tail -r

tail abc.xml | gzip - > bac.gz

tail file | grep A1 | awk '{print $NF}'

tail log-file | perl -pe 's/(.{80})/$1\n\t/g'

tail result.txt | grep -o "PFM_DIP_SERVER_001:[^;]*" | cut -d: -f2

tail test.log | grep -Po '(?<=\[INFO\] ).*(?= joined .*)'

tail ~/.xsession-errors

tailf **/*.log

tailf *.log

head=${var%?$tail}

tar [your options] [files] &> /dev/null

tar [your params] |split -b 500m - output_prefix

tar [your params] | zip  -s 500m output.zip  -

tar --exclude=.svn -z -c -v -f mytarball.tar.gz mydir/

tar --exclude=/sys --exclude=/proc /

$ tar --exclude='file1' --exclude='patter*' --exclude='file2'

tar --extract --file=/var/www/html/folder1/folder2/folder3/price.tbz price/total_price

tar --help | grep -- '-z'

tar --help | grep ignore-failed-read

tar --newer 20120408

tar --preserve-permissions --preserve-order -jc /path/to/your/folder > /path/to/your/backup_file.tar.bz2

tar --strip-components=1 -zxvf wordpress.tgz

tar --transform='flags=r;s|bar|foo|' -cf file.tar file1 file2 bar fubar /dir/*

tar --transform='flags=r;s|foo|bar|' --transform='flags=r;s|baz|woz|' -cf file.tar /some/dir/where/foo/is /some/dir/where/baz/is /other/stuff/* /dir/too

tar --version

tar -C $1 -cvf - . | tar -C $2 -xvf -

tar -C $1 -c . | tar -C $2 -x

tar -C backupdb/db/2012/11/25/ -cf backupdb/db/2012/11/database.2012-11-25.tar.gz *.sql

tar -L 1000000 -F name-script.sh cf split.tar largefile1 largefile2 ...

tar -M -F name-script.sh cf split.tar

tar c $directory_name | bzip2 > file.tar.bz2

tar -c "${dir}" | pigz -c | split -a 5 -d -b "${size}" - "${name}"

tar c --files-from <(find $dir/temp -maxdepth 1 -name "*.parse") | lzma -9 > $dir/backup/$(date '+%Y-%m-%d')-archive.tar.lzma

tar c -C /dir1/dir2 -vf test.tar file1.xml file2.xml

tar -c -M --tape-length=30000000 --file=filename.tar foldername

 tar cf - -C /path/to/dir1 . -C /path/to/dir2 .  | tar tvf -

tar cf - -C dir1 . -C ../dir2 . -C ../dir3 . | tar tvf -

tar -cf - -F - | ...

tar cfv mytar.tar root/*/the_folder/

tar cfz archive.tar.gz */wp-content/uploads/2013

tar cfz foo.tgz -T -

tar cfz mage6BRQWJ.tar.gz --anchored --exclude=vendor *

tar cf /dir/archive.tar --remove-files /home/user1/*.foo /some/otherpath/*.fbar

$ tar -c -f ARCHIVE.TAR --exclude '*.o' DIRECTORY

$ tar -c -f ARCHIVE.TAR --exclude *.o DIRECTORY

tar -cf archive.tar --exclude C DIR

tar cf archive.tar --mode='a+rwX' *

tar cf backup.tar.gz /folder_anme/

tar -cf directory/tarfile -C directory/tardirectory -X excludelist1.txt -X excludelist2.txt .

tar -cf file.tar *.jpg --wildcards --exclude '*.*.jpg'

tar -cf filename.tar --transform='s%.*/%%' .

tar cf path_of_tar.tar $(ls | head -10)

$ tar cf - src_tree | compress | uuencode src_tree.tar.Z >your_here_doc

tar cf test/foo/test.tar -- `find test  -maxdepth 1 -name '*.txt' -type f`

tar cf test/foo/test.tar test/*.txt

tar cjf /home/user1234/files/mylog.log.tar.bz2 -C /home/user1234/files/ mylog.log

tar cjf MyArchive.tar.bz2 {1..50}.gz

tar -cjf archive.tar.bz2 -C /var/some/log/path .

tar cjf file.tar.bz2 $directory_name

tar -cjf site1.tar.bz2 -C /var/www/site1 .

tar -cjvf -X ~/exclude.txt ~/2014.tar.bz2 -C /pdf/data/pdfnew/ 2014

tar -cjvf -X ~/exclude.txt ~/2014.tar.bz2 /pdf/data/pdfnew/2014

tar -cpf - --exclude=CVS directory | sh -c 'cd /wherever/it/goes && tar -xpf -'

tar -cpzf "$filename" --exclude="$fullexclude" .

tar -cv -T file_list.txt -f tarball.tar

tar -cv -T filelist -f tarball.tar

tar -cvfz $filename /home/myfoldertobackups/ $filename

tar cvfz dir_archive.tar.gz --exclude=dir_archive/mydir/exclude* dir_archive

tar cvfz dir_archive.tar.gz --no-recursion --files-from filelist.txt

tar cvf ...

tar -cvf ".... $(date +'...') ..."

tar -cvf "....path with spaces...." 

tar -cvf /tmp/narch.tar -C /1 . -C /2 . -C /3 .

tar cvf /tmp/some.tar -C /path/to/dir1 . -C /path/to/dir2 .    #multiple -C allowed

tar -cvf VM.iso VM.mf VM.ovf VM.vmdk

tar -cvf VM.ovf VM.mf VM.vmdk VM.iso

tar -cvf VM.{ovf,mf,vmdk,iso}

tar cvf filename.tar {filenames}

tar cvf - folderABC | lz4 > folderABC.tar.lz4

tar cvf - folderABC | lz4 - folderABC.tar.lz4

tar -cvf gppbasic.$(date +%Y%m%d.%k%M).tar $x/*.{php,html,css,bmp}

tar -cvf mytar.tar /opt/myprefix/mydir

tar cvf - paths-to-archive | pigz > archive.tar.gz

tar cvf - paths-to-archive | pigz -9 -p 32 > archive.tar.gz

tar cvf something.tar /path/to/something 

tar cvf ~/app.tar --exclude .git --exclude "*.log" .

tar cvjf ../set3.tar.bz2 * --exclude='a' --exclude='b' --exclude='c'

tar cvzf /tmp/somefile.tgz some/directory

tar cvzf /tmp/somefile.tgz some/directory

tar cvzf dir.tar.gz /tmp/dir/

tar cvzf filea fileb filec

tar -cvzf filename.bla directory_to_compress/

tar -cvzf filename.tar.gz directory_to_compress/

tar -cvzf test.tar.gz -C /home/path test

tar cvz -i /home | split -d -b 100m  --filter 'ncftpput -r 10 -F -c -u ftpUsername -p ftpPassword ftpHost $FILE'

for file in *; do tar -czf $file.tar.gz $file; done

for file in *; do tar -czf ../<Other_Directory>/$file.tar.gz $file; done

tar czf - FILES/* | ssh me@someplace "cat > foo.tgz"

tar czf - FILES/* | ssh me@someplace "tar xzf -"

tar -czf acc.tar.gz --no-recursion /home/uname/public_html/project/js/*

tar -czf acc.tar.gz -C /home/uname/public_html/project ./js

tar czf archive-log.tar.gz $(find $folder -name "*.log" -mtime +30)

tar czf backup.tar.gz `ls /www/hosting | grep \.com$ | sed 's/$/\/www/g' | sed 's/^/\/www\/hosting\//g'`

tar czf - folder*/**/*.a | tar -C /path/to/dest -xvf -

tar czf my-code.tar.gz htmlcode jscode

tar -czf omniauth.wiki.tar.gz omniauth.wiki

tar czf - www|split -b 1073741824 - www-backup.tar.

tar -czvf ./${date}_${user}_backup.tar.gz ${target}

tar -czvf ./somedir/abc.txt.tar.gz ./somedir/abc.txt

$ tar -czvf backup.tar.gz -T files_to_tar.txt

tar czvf mytar.tar.gz $(<config.txt)

tar czvf mytar.tar.gz "$@"

tar czvf mytar.tar.gz dir1 dir2 .. dirN

tar -f mytar.tar --delete */count1000

$ tar -jcvf archive_name.tar.bz2 $my_file

tar jcvf filename.tar.bz2 {filenames}

 tar -options -f dest source | cut -b1-$(tput cols) | sed -u 'i\\o033[2K' | stdbuf -o0 tr '\n' '\r'; echo

tar -pcvf base.tar "input file/myPacket/my2" --exclude-vcs input*file/myPacket/my3/*.bmp

tar -pczf MyBackup.tar.gz /home/user/public_html/ --exclude "/home/user/public_html/tmp" 

tar rv -C "$prefix" -f "$tarfile" "$rest"

tar tf archive.tar

tar tf archive.tar | head -1

tar tf archive.tgz | xargs tar -Oxvf archive.tgz | grep something

tar -tf file.tar --wildcards '*.jpg' --exclude '*.*.jpg'

directory_name=$(tar tf test.tar.bz | sed 's#/.*##'  | sort -u)

tar tjf archive.tbz

DIRNAME=$(tar -tvf $TARFILE  | head -1 | sed -e 's:^.* \([^/]*\)/.*$:\1:')

tar tvf mysql-connector-java-5.1.29.tar.gz

tar tvf mytar.tar

tar -tzf my_tar.tar.gz >/dev/null

tar tzf nginx-1.0.0.tar.gz | sed -e 's@/.*@@' | uniq

$ tar tzvf archive.tar.gz | sed 's/ \+/ /g' | cut -f3 -d' ' | sed '2,$s/^/+ /' | paste -sd' ' | bc

$ tar tzvf test.zip

tar vzxf lostzilla.tar.gz 2>&1 | sed 's/^/   /'

{ tar -x --to-command MySerialiser -f MyData1.tar.xz && tar -x --to-command MySerialiser -f MyData2.tar.xz ; }  | MyAnalyser

tar -x --xform s/wordpress// -f latest.tar

tar -xf *.gz

tar -xf abc.tar.gz def.tar.gz ghi.tar.gz

tar -xf abc.tar.gz pqr/xyz/important.c

tar xf archive.tar path/inside/archive/a.txt another/path/b.txt

tar -xf file.tar

tar -xf filename.tar --strip-components=1 -C somewhere

tar xf myArchive.tar folder/someFile.txt -O

tar -xjf /path/to/archive.tar.bz

tar xjf archive.tbz filename

for F in alcatelS*.tar; do tar -xvf "$F"; done

tar xvf "$f" -C C:/Users/x/Documents/folder

for file in *.tar; do tar xvf $file; done

tar xvf $next *required_file_in_tar_file*.dat

tar xvf "folder/$f" -C C:/Users/x/Documents/folder

tar -xvf logfiles.tar.gz log1.txt

tar xvf mytar.tar myfile.txt

tar -xvf tar_file.tar file_to_be_extracted 2>&1 | tee temp.file

tar xvf tarfile -C target paths...

tar xvf tarfile paths... -C target

tar xvf tarname.tar --strip-components=2

tar xvf tarname.tar --strip-components=n

$ tar xvf test.tar -C anotherDirectory/ testfile1

tar -xvf xyz.tar |grep '\.tar$' | xargs -n 1 | tar -xvf

tar -xvzf /path/to/tarfile --exclude='file dont want to extract'

tar -xvzf archive.tar.gx -C archive_dir

tar -xzf "/tmp/${MYSTR}world.tar.gz"

tar xzf archive.tar.gz -C /destination

tar xzf file.tar.gz

tar -xzf foo.tar.gz blah.txt

tar -xzf mytar.tgz --strip-components 1

for file in *.tar.gz; do tar xzvf "${file}" && rm "${file}"; done

tar -xzvf 4.56_release.tar.gz

tar -xzvf bash-completion-20060301.tar.gz

tar -xzvf file.tar.gz | xargs -I {} -d\\n myscript "{}"

tar -zcf ${db}-$(date +%m-%d-%y).sql.tar.gz ${db}-$(date +%m-%d-%y).sql

tar zc -f c.tar.gz  -C a/b c

tar -zcf data_${machine}.tar.gz /tmp/data && echo "DONE"

 tar -zcf remote_test.tar.gz --exclude=tsung.dump mydir/* 

tar -zcf subset.tar.gz dir1

tar -zcvf "$(date +%y-%m-%d).tar" code

tar -zcvf $(date +'foo_backup_%Y-%m-%d_%T.tgz') foo/

tar -zcvfW "${DATADIR}daily_data_files/LeveL_EOD_VOL_${1}.tar.gz" -C "${DATADIR}temp/" "LeveL_EOD_VOL_\*_${1}.csv" >> "${DATADIR}temp/email.log"

tar -zcvf /x/y/z/ParentFolder.tar.gz -C /x/y/z ParentFolder

tar -zcvf archive-name.tar.gz directory-name

tar -zcvf compressFileName folderToCompress

tar -zcvf data_${machine}.tar.gz /tmp/data

tar -zcvf data_THE_MACHINE.tar.gz /tmp/data

tar zcvf filename.tgz {filenames}

tar -zcvf foo_backup_$(date '+%Y-%m-%d_%T').tgz foo/

tar -zcvf "mywebsite website backup $(date '+%Y-%m-%d %T').tgz" public_html

tar -zcvf "tmp/weekly/${DAY_OF_WEEK}_files.tar.gz" $SOURCE

$ tar zcvf updateZip.tar.gz trunk/*

tar -zcvf wp-content.tar.gz ./wp-content

tar -zxf huge.tar.gz dir1

tar -zxf my-dir.tar.gz --transform s/my-dir/your-dir/

tar -zxvf genscanlinux.tar

tar -zxvf mysql-connector-java-5.1.29.tar.gz mysql-connector-java-5.1.29-bin.jar -O > /opt/tomcat/lib/mysql-connector-java-5.1.29-bin.jar

tar zxvf mysql-connector-java-5.1.29.tar.gz mysql-connector-java-5.1.29/mysql-connector-java-5.1.29-bin.jar

tar -zxvf yourfile.tar.gz

tar ... -cpzf /mnt/shares/flexshares/backup/Server1_HDD/backup-HDD-`date +%Y-%m-%d-%H-%M`.tar.gz ...

tar cpzf $File --exclude=Downloads $Folder

tar xfp archive.tar

tar xpvf /path/to/my_archive.tar.xz -C /path/to/extract

 $ tar xvfJ filename.tar.xz

tar | xz | gpg <file

tar zvPcf /home/test/backups/backup.tar.gz /home/test/backups/../data/

tar: xz: Cannot exec: No such file or directory

tarsnap --list-archives | sed -n '/2014-06-09/s/^/-f /p' | xargs tarsnap -d

taskkill /F /IM MyApp.vshost.exe 2>&1 || exit /B 0

taskkill /F /IM MyApp.vshost.exe > %temp%\out.txt 2>&1 || exit /B 0

taskkill /F /IM cmd.exe /FI "PID ne %pIdNotToKill%" /FI "username eq compUser"

taskkill /F /im chrome.exe

taskkill /FI "IMAGENAME eq iisexpress.exe"

taskkill /IM notepad.exe

  taskkill /f /fi "pid gt 0" /im xdesproc.exe

taskkill /f /im notepad.exe

tasklist >> C:\Users\Desktop\File.TXT

tasklist /FI "WINDOWTITLE eq VPN Client" /FO CSV | FIND /I ".exe" >nul && start alarm.wav

tasklist|repl "^(.......................).*(.............)$" "$1 $2" m

taskset -p 1 2338

tcl -e "puts [info patchlevel]"

tclsh ?-encoding name? ?fileName arg arg ...?

tclsh myscript.tcl $(< datafilename)

tcp       0      0  0.0.0.0:8080        0.0.0.0:*       LISTEN

 $ tcpdump -X -s0 protochain 50 or 51

tcpdump -Xvv -n -i eth0 -c 300 > captureFile.txt 2>/dev/null

tcpdump -Xvv -n -i eth0 -c 300 > captureFile.txt 2>&1

tcpdump -i eth0 -s 65535 | tshark -T -pdml > results.xml 

(tcpdump -i eth0 -w tempcap &)

tcpdump -i eth1 -n -c 5 ip | awk '{ print gensub(/(.*)\..*/,"\\1","g",$3), $4, gensub(/(.*)\..*/,"\\1","g",$5) }'

tcpdump -i eth1 -w Pingpacketlist icmp

tcpdump -r Pingpacketlist -n

tcpdump -w "$(generate_filename foo tcpdump).lpc"

b=`tcpdump ...`

tcpreplay -i eth4 SMTP.pcap </dev/null

tcsh --help

tcsh -b --help

tdbloader --loc DB ... your files ...

tee

  tee [OPTION]... [FILE]...

tee >(head -n3 >/dev/null) < /tmp/n

tee >(myprogram) | tee -a file.log

tee >(sed 's/World/Boy/g'|grep Boy) | grep World

tee >(some_command)

tee >(some_command) | some_other_command

tee *.c < ../header.txt

tee -a file.log | myprogram | tee -a file.log

$tee -a typescript | sh -i 2>&1 | tee -a typescript

tee <file1 file2 file3 >/dev/null

$ tee <masterfile.inc >/dev/null file{1..20}.inc

tee program.in | program 2>&1 | tee program.out

   tee - read from standard input and write to standard output and files

2> >(tee stderr.log >&2)

tell application "System Events" to keystroke "l" using command down & shift down

tellme 'do_build && deploy_build'

telnet <ip> port

telnet SERVER daytime

telnet mailhost 25 < commands.txt

telnet my_server 1234

telnet smtp.mydomain.com 25

telnet {smtp_domain_name} {port_number}

$temp = $file[$i];

temp/a.aa temp/a.ab temp/a.ac

temp1=`db2 -x "select max(id) from work.work_tb"`

terminator -e "TERM=xterm-256color pine"

$ test

test "$(cat abc.txt)"

test $(expr match "$(lsb_release -r)" "Release:11.04") = 13 && echo true || echo false

test $1 == "Debug"

test "$?BASH_VERSION" = 0 && exit 1

test "$show_name" == "Smash" && show_name="Smash (2012)"

test -d "$1" || { echo "Argument 1: '$1' is not a directory" 1>&2 ; exit 1; }

test -d "$d" || mkdir -p "$d" && cp file "$d"

for i in *; do test -d "$i" && ( find "$i" -name '*protein.fasta' | grep -q . || echo "$i" ); done

test -d ; echo $?

test -d mylogs || mkdir mylogs

test -e $newname && echo "$newname not overwritten" || mv $file $newname

test -e /var/motd/$LOGNAME && cat /var/motd/$LOGNAME

test -e package.json && npm install

test -e package.json && npm install || true

for i in /var/log/apache2/access.log.*; do test -f "$i" && echo "exists one or more files" && break; done

for file in *.hash; do test -f "${file%.hash}" || rm -- "$file"; done

test -f /etc/bashrc && source /etc/bashrc

test -f ; echo $?

test -f foo.txt && ls -l >> foo.txt

test -f no_such_file || { ok='0'; echo ggg; }

test -gt 34

test -n "$(find . -maxdepth 1 -name "$glob" -print -quit)" # Right

test -n "$(find . -maxdepth 1 -name \"$glob\" -print -quit)" # Wrong

test -n "$x"

for i in *; do test -r "$i" && echo "$i is readable for $USER"; done

if test -x /usr/bin/gpg-agent; then echo installed; else echo not installed; fi

test /dev/fd/63

test 1 && date || echo "else stmt"

test 1 google.com

(test 1) && ls /undef_dummy > /dev/null 2>&1 || echo "else stmt"

test 1 && { ls /undef_dummy > /dev/null 2>&1 || true; } || echo "else stmt"

test == if

test "X$(basename -- "$0")" = "Xbuild.sh" || echo Being sourced

test blah

test file1 -ot file2 && cp file2 file1

test foo -o bar -o baz

test "rm -fr /"

test somefile.html  

test test2 test3 test4

while test-commands; do consequent-commands; done

test.exe arg1 arg2

test.pl file_to__modify

test.sh > file

test.sh 2> file.err

test.sh 2>&1

test.sh 360 &

test.sh arg1 arg2 &

test.sh argument1 "${array[@]}" argument2

test.sh: line 2: A: command not found

test.th.jpg

test/bin# java -cp ".:../lib/*" org.testng.TestNG testng.xml

test1=`echo $f | sed -E 's/^(.*)$/S01E\\1/'`

test: NODE_ENV = test

test: export NODE_ENV = test

testFunct "$param1" "$param2"

testShell.sh  -jvalue1 -evalue4 -- -Djvalue3  -pvalue2

if test_command;then commands;fi

test_expect_success "Message" run cat $filename_with_spaces

test_sh KLMN

testdiff&

testing

text = file.ReadAll

text RSA utf-8

textmate `git status | grep both | awk '{print $4}'`

\textsc{this} sentence \textsc{is all caps} Except not really \textsc{but this is}

texttexttext111111*****3333texttexttext 

texttexttext111111*****3333texttexttext

texttexttext111111222223333texttexttext

textutil -convert rtf -font "HelveticaCY" file.txt

textutil -stdin -inputencoding UTF-8 -format html -convert rtf -stdout | pbcopy -Prefer rtf

tf labels /collection:"https://delta:443/tfs/CadsProjects" *@$/DetBarShapeEngine/Main/ProjectSource /owner:* 

tf merge /baseless /recursive /version:C95654~C95654 branch2 branch1

tf workfold -map -login:secretUsername,secretPassword -server:http://secretHost:8080 -workspace:KOLOBI '$/TeamProject/Project' '/home/me/project'

tf workspace -new Workspace01 -location:local -collection:https://tfs.visualstudio.com/DefaultCollection

tfsget https://myvso.visualstudio.com/DefaultCollection $/MyProj/Folder c:\Projects login password

tfsget https://myvso.visualstudio.com/DefaultCollection $/MyProj/Folder c:\Projects login password silent

thatscript foo bar baz quux

the difference in seconds is: 1.000 seconds

the_cmd <<< word

$the_command = "/bin/php $php_file_name > $log_file_name 2>&1";

TEST_OUT=$(the_command ARG1 2>&1)

the_command orig_file > /usr/tmp/tmp$$ && mv /usr/tmp/tmp$$ orig_file

the\directory\where\filezilla\resides\filezilla.exe -c "0/mysitename"

output=$(theloop)

output=$(theloop | tee /dev/tty)

then^M

then^M: command not found

this is !!! blah blah

this is a test.

this is his pig

this is section 3

this is the 2nd

(this || that) && other

s{\$this->helper\(\x{27}catalog/product\x{27}\)->getPriceHtml}{\$this->getPriceHtml}g;

$thisCmd

this_command_ends_hh<CR>: command not found

three four

tidy -xml -iq somefile.xml

time1 is 1 | time2 is 4 | average is 2

time1 is 1.003 | time2 is 4.003 | average is 2.503

time: '22:45:47', mac: '00:00:00:00:00:00', ip: '192.168.0.1'

timeout $x ./my_script

timeout -sHUP 10m command

timeout -t time [-s signal] cmd [args ...]

timeout 1 feh "$output""$ext"

timeout 10 "ls ${HOME}"

timeout 10 ping www.goooooogle.com

timeout 10  wget -v -t 2

timeout 100 ./myprocess.py

timeout 1m your-script arg1...

timeout_exec() { timeout 2s "$@"; }

timeout 3 bash -c "ls | sleep 10"

timeout 3 tail -f logfile.log | grep -q --line-buffered "something"

timeout 30 nfcapd -z -w -t30 -p 2055 -l /home/shane/Documents/nfdump

timeout 5 sudo kill -9 $chromium-browser_pid

times >&${co[1]};

title

REST[i]=$tmp

tmp-scp.sh Screen\ shot\ 2010-02-18\ at\ 9.38.35\ AM.png

tmpfile=`tmpfile 2>/dev/null` || tmpfile=/tmp/test$$

tms96-fnl.go < ./"${inpdir}"/inp"${j}"0"${i}".d > ./"${inpdir}"_out/out"${j}"0"${i}"

"tms96-fnl.go <./"${inpdir}"/inp"${j}"0"${i}".d> ./"${inpdir}"_out/out"${j}"0"${i}

tmux -2 new-session -s name "another_script.sh $1"

tmux kill-session -t myname

tmux new -s matlab "matlab -nodesktop -nojvm"

tmux new -s session_name

tmux send-keys -t work:1 pwd c-m ls -latr c-m

tmux send-keys -t work:1 'pwd' 'c-m' 'ls -latr' 'c-m'

tmux send-keys -t work:1 'pwd c-m ls -latr c-m'

tmux set -g mode-mouse on

tmux set remain-on-exit on

tmux set-environment -gu RBENV_VERSION

tmux set-environment -u RBENV_VERSION

tmux show-environment -g | grep RBENV

tmux show-environment | grep RBENV

to kill a mockingbird 1960 0001

to kill a mockingbird to.kill.a.mockingbird.V1960.0001 to.kill.a.mockingbird.V1960.0001

to_delete foo   bar baz

tok = tokLine;

"tokens=2 delims=(%%"

tomcat7 Running Monitored 3025 18d 2h 30m 30m 3.6% 0.0%

top > test.txt

    top -b -d 1 > /tmp/top.log

    top -b -d 1 | awk '/load average/ {n=10} {if (n-- > 0) {print}}' > /tmp/top.log

top -b -d 1 | grep --line-buffered java > top.log

top -bn2| awk -F"," '/Cpu/{if(p==0){p=1}else{split($5,a,"%");print a[1]}}'

top -b -n 1 > t.$i

top -b -n 1 -u abc | awk 'NR>7 { sum += $9; } END { print sum; }'

top -b -n 1 | awk 'NR<=8 || $2~/^(root|myUserName)$/ {next} {print $1}'

top -b -n1 | grep '^ *[0-9]' | head -n $k

OUTPUT=`top -b -n 1 | tail -n +8 | head -n 1`

top -b -n 5 -d.2 | awk '/Cpu/ { if (++cnt==3) print $2 }'

top -b | awk '/db2sysc|java/ {print systime(), $0}'

top -b | grep "Cpu(s)" > abc.txt

top -c

top -n 1 -b -c| awk -vOFS="\t" 'NR>6 && NR<18 {s=""; for (i=12;i<=NF;++i) s=s FS $i; print $1,$2,$9,$10,$11,s}'

top -n 1 | grep "idle" | awk '{ print $9 }'

top -p $(pidof berkut)

top -p $1 -n 1

top -p 310-b -n2 -d 1 | grep -w 310 | awk '{printf "%s,%s,%s,%s\n",$1,$12,$9,$10}'

top | grep --line-buffered chromium >> load.log

top | stdbuf -oL grep chromium >> load.log

countip=$totalip

touch $LOGAP

touch $NAME.txt | chmod 700 $NAME.txt mv $NAME.txt /etc/openvpn/ccd | echo -n "$X $Y" > /etc/openvpn/ccd/$NAME.txt

touch $NAME.txt; chmod 700 $NAME.txt; mv $NAME.txt /etc/openvpn/ccd; echo -n "$X $Y" > /etc/openvpn/ccd/$NAME.txt

touch "$basedirectory$FEATURE_EXT.$SENT_EXT"

touch $location

touch $'m\'i;x&e\"d u(p\nmulti)\nlines\'\nand\015ca&rr\015re;t'

lazy() { for x; do touch "$x"; open "$x"; done; }

touch "'*.sh'"

touch --date="${date1[*]}" /tmp/newerthan

for i in {0..721}; do touch -md "`grep '<li><em>Date' $(printf 'msg%05d.html' $i) | sed -e 's#<[^>]*>##g' | cut -d' ' -f2-7`" $(printf 'msg%05d.html' $i); done

$ touch -m 201111301200.00 $log_dir/last.check  #Touch date is in YYYYMMDDHHMM.SS format

touch -r A B

for i in /home/virt/*; do touch -t 200001010000 "$i"; done

touch -t 200001010000 /home/virt/*

$ for f in *.txt; do touch -t `echo $f | cut -f1 -d _` "$f"; done

touch .git/objects/pack-fe017c0e9ea12841cd29458df7bd4421c2b12458.keep

touch .httName

touch /asdf/fdasfds/fdasfdas || echo "Couldn't touch."

 touch /etc/profile.d/rvm.sh

touch /home/p1/pop.txt

$touch /home/spatel/alpha

touch /tmp/file_found

touch /var/www/wsgi.py

touch File{1..99}

touch a b c

touch ax bx cx

touch file || exit

touch filename_`/bin/date +%Y%m%d%H%M%S`.txt

touch file{01..12}.txt

touch file{1..12}.txt

touch file{1..3}.txt

touch folder/sub.file.txt

touch new_file && chmod --reference=old_file new_file

touch online.log

touch 'path'

touch t0

touch {a..z}.txt

touch {{a..z},{A..Z},{0..99}}.txt

touch ~/.build_path

touch ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys

tput clear

COLS=$(tput cols)

COLUMNS=$(tput cols)

tput kpp | hexdump -C

$ tput rmcup

tput rmkx

$ tput smcup

tput smkx

< input column -t | tr ' ' . | sed 's/\./ /'

tr ' ' '\n' < stopwords.txt | grep -vwFf - frequency.txt

tr ' ' '\n' < test.txt | sort -u

tr ' ' '\n' <<< "${ids[@]}" | sort -u | tr '\n' ' '

tr ' ' '\n' <<< "$var1" | sort | uniq -u

tr ' ' '\t'  < inputfile > outputfile

for i in file*; do tr " " "\n" < "$i" > "$i.bak" && mv "$i.bak" "$i"; done

tr " " "\n" < hugefile | sort | uniq | grep -v -F -f dictionary > blacklist.txt

(tr ' \t' '\n\n' | fgrep -c int) < test

tr '[]-' ' ' | sed "s/^/seq -s' '/" | bash

tr [:blank:] '\n' < test.txt

tr [:blank:] '\n' < test.txt > result.txt

$ tr '[:lower:]' '[:upper:]' < input.txt > output.txt

tr '[:upper:]' '[:lower:]' < infile > outfile

b=$( tr '[A-Z]' '[a-z]' <<< $a)

tr '[A-Z]' '[a-z]'

tr [A-Z] [a-z]

tr '$' '\n' < large_records.txt | split -l 1000

tr '%' '|' <<< "$data"

tr "'a' 'e'"

tr "'a' 'e'" yourscriptname

tr "," " " <test.csv

total=$(tr ',' '.' <<< "$result2 + $result3" | bc -l) 

total=$(tr ',' '.' <<< "$result2 + $result3" | bc -l | xargs printf "%g") 

tr , '\n' < file

tr ',' '\n'

tr ',' '\n'

tr "," "\n" FILE | sed -n '/^f[0-9]\+=/p' | sort | uniq -c

tr -Cd '[:print:]\n\t' < file

tr -C -d '0-9.' <<<'ftp> 8.591220.98disconnect' # -> '8.591220.98'

tr -cd '[:print:]' < yourfile.txt

tr -cd '[:print:][:cntrl:]' < yourfile.txt

tr -cd '[:print:]\n' < yourfile.txt

tr -cd '[:print:]\n\r'

tr -cd 0-9 </dev/urandom | head -c 3

tr -cd '\000-\177'

tr -cd '\11\12\15\40-\176' <buildreport | nail -s "Build completed" $towhom

tr -cd '\t' < your_file_with_tabs | wc -c

tr -cs '[:alnum:]' '\n' <textfile

tr -cs 'a-zA-Z0-9' '\n' <textfile

tr -d ' ' < inputfile

tr -d ' ' < infile

tr -d ' ' < inputFile | sed 's/../& /g'

tr -d ' \t\n\r\f' <inputFile >outputFile

<INPUT_FILE awk 'NF==2 {header=$2} NF>2 {print header, "--", $NF}' | tr -d '<_>:'

tr -d '[0-9-]' < file

tr -d '[:alnum:][:space:]' < $fileDoc | wc -c

tr -d '[:alpha:] \n'  < $fileDoc | wc -c

tr -d '[:alpha:][:space:]'  < $fileDoc | wc -c

tr -d '[\000-\177]'

tr -d '"' < file

tr -d "\"" < input > output

tr -d "$OPTARG"

tr -d $'\r' < inputfile

tr -dc '[[:print:]]' <<< "$var"

tr -dc '[:alnum:]' < /dev/urandom ...

OPTION=$(tr -dc '[:upper:]' <<< $PET)

tr -dc '[a-z][A-Z][0-9]_-' < /dev/urandom | tr -d '][' | fold -w64 | head -n1

RANDOM=$(tr -dc 0-9 < /dev/urandom | head -c10)

tr -dc A-Za-z0-9 < /dev/urandom | dd bs=$num count=1 2> /dev/null

 < path-to-text-file tr \; '\012' | tr -d -c 'A-Za-z0-9_#'

tr -dc 'a-zA-Z 0-9\n' < file | wc -c

tr -dc 'character-set' < file | wc -c

tr -d '/100'

tr -d "\015\032" <backup.bash >improved-backup.sh

tr -d '?."!:,();' < manywords | tr 'A-Z' 'a-z' | tr ' ' '\n'

tr -d '\0'

tr -d '\0' < weirdo | grep Lunch

tr < file-with-nulls -d '\000' > file-without-nulls

tr -d '\000' < fileWithNulls > noNulls

tr -d '\000\r' < yourfile > newfile

tr -d '\012' < infile.txt > outfile.txt

$ tr -d \\012 < price.html | grep -Po '<tr>.*?</tr>'

$ tr -d \\012 < price.html | grep -Po '(?<=<tr>).*?(?=</tr>)'

$ tr -d \\012 < price.html | grep -o '<tr>[^<]*</tr>'

tr -d '\015' < infile.txt > outfile.txt

tr -d '\015' < worker.sh > worker_nocr.fixed

tr -d '\015\012' < infile.txt > outfile.txt

tr -d '\032' your_file.txt

tr -d '\200-\377'

tr -d '\243' < inputfile

tr -d '\n' < yourfile.txt

tr -d '\n'

VARIABLE=$(tr -d '\n' filename | sed -n -e '/\[[^]]/s/^[^[]*\[\([^]]*\)].*$/\1/p')

tr -d '\n' | sed ...

tr -d '\n' < file | sed 's/XYZ/\nXYZ/g'

tr -d '\n\t' inputfile > temp && echo >> temp && mv temp inputfile

tr -d '\r' < input > output

tr -d '\r' <  ./script1.sh > ./script2.sh

tr -d '\r' < fileList.txt > fileListTrimmed.txt

tr -d '\r' < old.sh > new.sh

tr -d '\r' <freak.bash >newfreak.bash

tr -d '\r' < file > newfile

tr -d '\r' < input > output

tr -d '\r' < myscript.sh > myscript-new.sh

tr -d '\r' < file

param=$(tr -d '\r' <<< "$1")

tr -d '\r' < inputfile > outputfile

tr -d '\r' < WindowsFile > UnixFile

tr -d '\r'

tr -d '\r' < manage.py > manage2.py; mv manage2.py manage.py

tr -d \\r < part2.out | sed 's/,\.-$/& /' > part3.out

$ text=$(tr -d '\r' <file.txt | tr '\n' ' ')

tr -d '\r\n' < input > output

INT=$(tr -d '\r\n' <<< $INT)        # Strip linefeeds and returns

tr -d '\r\n' <file > temp && mv temp file

tr -d '\x0' < filename | sed 's/'$'\tEN-GB\t''//g'

tr -d '^M' < inputfile

tr -d b < <(echo abcd)

tr -d "\n"

tr -d "\n"

tr -d "\n\r" < yourfile.txt

tr -s ' '

tr -s ' ' < input-file

tr -s ' ' '\n'

tr -s ' ' '\n' < myfile.txt | grep -c '1'

tr -s ' ' '\n' < file.txt | grep file | wc -l

tr -s ' \t' '\n' <rtrans.txt | tr A-Z a-z | sed -e 's/[^a-z]//g' | nl -n ln -w1 -s ' '

tr -s '[[:punct:][:space:]]' '\n' < file

columns() { tr -s '[:blank:]' ' ' | cut -d ' ' -f "$@"; }

tr -s '[:space:]' '\n' < myfile.txt

tr -s '\n' < file

tr -s '\t' < inputfile > outfile

< corpus.txt tr -d '.!@#$%^&*()-_=+' | tr -s '\t ' '\n' | sort | uniq -c | sort -rn

tr -s '\t' < file | sort -t $'\t' -k2

tr '.' ' ' | sed 's/ \([^ ]*\)$/.\1/'

tr "\001\002" "xy"

tr 0123 ACGT <input_file >output_file

tr 0123456789 abcdefghij <<< "$string"

tr 123456789 012345678

tr : '\n' <Path.txt

 tr ':' '\n' < input

 tr ':\-_' '\t'  < infile > outfile

tr ";" " " <logfile|awkscript

tr ';' '\n'

tr \; '\n' < t | cat -n

tr 'A' 'B' < input_file | tr 'C' 'D' | tr 'E' 'F' | tr 'Z' 'Q'

for i in *.xml; do tr A-Z a-z < $i > tmp && mv tmp $i; done

tr A-Z a-z | tr -s '[:punct:] [:blank:]' '-'

tr A-Z a-z <<< "Believe.....Right Now" | tr -s '[:punct:] [:blank:]' '-'

$ tr 'A-Z' 'a-z' < list.txt | tr -sc 'A-Za-z' '\n' | sort | uniq -c | sort -n -r | awk '{ print $2 "," $1}' > output.txt

tr A-Za-z a-zA-Z

tr 'XYZ' ',' <input_file | tr ',' ''

tr '\0' Z

tr '\000-\037' ' ' <input >output

tr \\000-\\376 \\001-\\377  <input >output

tr '\040' '\n'

dbs$ for f in *; do tr '\n' '' < $f; done

tr '\n' ' ' < input.txt

tr '\n' ' '

tr '\n' ' ' < file

LINE=$(tr '\n' ' ' < "$FILENAME")

tr '\n' ' ' < file.txt | awk '{ for(i=3; i<=NF; i++) { print $(i-2) " " $(i-1) " " $i }}'

tr '\n' ' ' <  input | sed -e 's/[.] \s*/. \n/g'

tr '\n' ',' < input.txt > output.txt

tr '\n' , < input_file > output_file

tr '\n' ':' < INPUT.TXT | sed 's/:$/\n/'

tr '\n' ';'

$ tr '\n' @ < input | sed  's#<b>\([0-9]\+\)</b>@<c>\([0-9]\+\)</c>#<b>\2 \1</b#g' | tr @ '\n'

$ tr '\n' @ < f1 | sed  's#<b>\([^<]*\)</b>@<c>\([^<]*\)</c>#<b>\2 \1</b#' | tr @ '\n'

tr \\n \\0<files.txt|xargs -0 stat -f'%m %N'|sort -rn|head -n1

tr '\n' '~' < testfile | sed -r 's/(.*)\*\*\*.*/\1/g' | tr '~' '\n'

listtumor=`tr '\r' '\n' < /Users/TReiersen/Work-Folder/OV/DataProcessing/TestRun/MatchedTumorTest.txt`

tr '\r' '\n' < myfile.csv > newfile.csv

 tr '\r' '\n' <filelist97.txt

tr '\t ' ';'

tr '\t' ',' < file.tsv > file.csv

tr '\t' ',' < myfile.csv | sort -k5,5 | uniq -f 4 -D -w 16

tr '\xE2\x80\xA8' ' ' < inFile > outFIle

tr "\n" " "

tr "\n" " " < vid.html | grep -Eo "<(video|media)>(.+?)</(video|media)>"  | sed -E "s#</?(video|media)>##g"

tr "\n" " " < myfile.html | grep -Eo "<video>(.+?)</video>" | sed -E "s|</?video>||g"

tr '|' '\n' < clientlist.txt | grep -Po 'clid=\d+(?=.*client_type=0)'

$ save_traps=$(trap)

(trap '' CHLD; pipeline)

trap '' EXIT

trap "" HUP

trap '' PIPE

trap '<function> <arg_1> <arg_2>' SIGINT

trap '<your_cmd>' DEBUG 

trap -p SIGINT

trap /u1/myuser/on_exit_script.sh EXIT

trap 'COLUMNS=`tput cols` LINES=`tput lines`' WINCH

trap OnExit SIGINT SIGTERM

trap backtrace ERR

trap break INT

trap "break" SIGINT SIGHUP SIGTERM

trap ctrl_c SIGINT

trap 'do_something' ERR

trap 'echo "$BASH_COMMAND"' DEBUG

trap 'echo "Dont do this"' 2

trap 'echo "Error, $BASH_COMMAND returned with status $?"' ERR

trap 'echo "foobar"' DEBUG

trap "echo $(date +'%Y-%m-%d %H:%M:%S') $(hostname -s) received ALRM" ALRM

trap 'echo -ne "\033]0;$BASH_COMMAND\007"' DEBUG

trap 'echo Bye' 0

trap "echo SIGINT; rm -f tempfile; exit -1" EXIT

trap "echo SIGINT; rm -f tempfile; exit -1" INT

trap "echo hello" SIGINT

trap "echo hello" USR2

trap "echo killing childs; pkill -P $$"  EXIT

trap "echo step=$step > log_file" EXIT

trap 'end_synchronize' EXIT

trap 'errfunc $LINENO' ERR

trap errfunc ERR

trap 'exit 128' SIGHUP

trap 'exit command' EXIT

trap exit_function_name EXIT

trap 'foo bar baz | bip && fred barney ; wilma' SIGINT

trap function-name SIGNAL1 SIGNAL2 SIGNAL3 ...

trap "fuser -k -n tcp 1234 && exit" SIGINT SIGTERM

trap 'kill $(jobs -p)' EXIT

trap 'kill $(jobs -p)' EXIT

trap 'kill $(jobs -p)' EXIT

trap "kill ${PIDS[*]}; kill -KILL $STUBBORN_PID" SIGINT

trap "kill -TERM ${PIDS[*]}" SIGINT

trap "kill 0" SIGINT

trap "killall background" EXIT

trap "log 'received ALRM'" ALRM 

trap 'logger -p user.debug -t SHELLSCRIPT -- "$BASH_COMMAND" || :' DEBUG

trap 'printf "\nAborting\n"; exit 1' SIGINT

trap 'printf %s\\n "$BASH_COMMAND" >&2' DEBUG

trap "process $$ exiting" INT

trap "rm -f $tmpfile" 0 1 2 5 15

trap sahandler RTMIN+1

trap 'touch ~/abc.txt' 0

trap '{ echo "$BASH_COMMAND failed with status code $?"; handle_error; }' ERR

trap '{ echo Exit code $?; exit; }' EXIT

trap "{ kill -SIGKILL $s_pid ; exit 0; }" SIGINT

trap "{ sed (options) file | awk (options); rm file; }" SIGINT SIGTERM

tree --help |& head -n2

tree -I '3rd*'

tree -ivL 1 /data/ | perl -nlE 'say if /\Acommand-[0-9][0-9a-z.]*-setup\z/'

(while true; do /bin/echo xxx; done) | head -n 1

true | cd /

while true; do clear; jobs; sleep 2; done

while true; do date --rfc-3339=ns; done

(while true; do date; echo $? 1>&2; sleep 1; done) | head -n 1

while true; do date; sleep 1; done | grep :

if true; then echo "export pqr"; fi

true || echo "foo"

if (true); then echo hi; fi 

if true; then echo hi; fi

true || false && echo foo

true && false || echo 'something'

true false true

if true; then foo; fi

while true; do foo; sleep 2; done

( A=1; if true; then A=2; fi < <(ls); echo $A; )

( A=1; if true; then A=2; fi <<< "$(ls)"; echo $A; )

while true; do sleep 10; done

(while true; do sleep 10000; done) | java -cp someapp > mylog.log &

while true; do sth ; sleep 2 ; done

true || true && false || return 42

truncate -s "-$count" "$file"

truncate -s 0 filename

truncate -s 2KB file

truss /usr/bin/date 2>&1 | grep ^time | awk -F"= " '{print $2}'

tshark ... | ./script.pl

tshark-command|awk 'BEGIN {FS=":"};{print "insert into tbl_name (field1, field2, ..., field8) values (" $1 "," $2 "," $3 "," $4 "," $5 "," $6 "," $7 "," $8 ");"}' > insertcmd.sql

tsql -H 10.10.10.10 -p 1433 -U user -P pass < tempfile

ttf2eot < pacifico.ttf > pacifico.eot

ttf2eot < /path/to/pacifico.ttf > pacifico.eot

(tty &)

(tty) &

TTY=$(tty); who | grep "${TTY#/dev/}"

$ ttywatch commandline... & disown

twidge lsrecent -l | gawk -F"\t" '{"date -d\""$5"\" +\"%s\""|getline d;print "@"$2 ": " $4 " ("strftime("%Y-%m-%d %T",d)")"}'

type %1 | repl "^Name: \q.*?\q;( [^:]+: \q.*?\q)* Width: \q(.*?)\q;.*" $2 ax

type -P $(compgen -c | awk '!a[$0]++')

( IFS=$'\n'; type -P $(compgen -c | awk '!a[$0]++'); )

type -P clang >/dev/null; echo $?

type -aP a=b

type -a groovy

type -a lshw

type -a mv

type -t function_name

type COM{n}

( type Doxyfile & echo PROJECT_NUMBER=1.0 ) | doxygen.exe -

type YourFile.txt

type YourFile.txt | more

type "e:/babak/git/bin/test.txt"

"type" e:/babak/git/bin/test.txt

type file1 file2 > file3

type fortune &> /dev/null && type cowsay &> /dev/null && (fortune | cowsay -W 65)

type gpm

type input.txt|findstr /vixg:successful.txt

type irb

type mv

$ type pip

type someprogram &>/dev/null || do_some_stuff

type stuff.py

type which

$ type your_nifty_function

typeset +t

typeset -f | ssh user@host "$(cat);f"

typeset -f | ssh user@host2 "$(cat);f"

typeset -gU path

typeset -i variable=$(cat filename)

tzutil /g

tzutil /l.

tzutil /s "universal standard time"

ufw allow proto tcp from found: to any

uhura -k signature.key yourextension.xpi http://yourupdateurl

ulimit -c unlimited

(ulimit -f 102400; wget $url)

(ulimit -f 204800; wget $url)

ulimit -u 20

umask 0701 ; /path/to/real/mkdir $1 ; umask 0604

umask u=rwx,g=rwx,o=rwx

umbrella_corp_options "$@"

umount .... || /bin/true

umount /Volumes/Label

unalias \aliasname

unalias aliasname

unalias cd

unalias cwdcmd

unalias foo 2>/dev/null

-Dkernel_name=$(uname --kernel-name)

uname -a

uname -a

uname -m

uname -r | cut -d. -f1-2

unbuffer -p

unbuffer gcc file.c | cat

unbuffer libreoffice --convert-to pdf:writer_pdf_Export *.odt > log

unbuffer runningscript.sh | something_else

uncompress_swf.sh /some/folder/*.swf

unexpand -a -t4 file > newfile

unexpected character after line continuation character

unexport FOOBAR

unfunction zshrc

unifdef -USW1 -USW2 -USW3 -USW4 -USW5 -USW6 -t file1.txt > file2.txt || true

uninstall_rpm ClientInfrastructure "$(sed -n 's/Previous Version:\(.*\)/\1/p' VersionInfo.properties)"

uniq --count

uniq --skip-fields=3 input.txt 

$ uniq -c foo.txt

uniq -c intputfile | awk '{count++;sum+=$1} END{print count,"lines.","Average is:",sum/count}'

uniq -c | sed -r 's/^( *[^ ]+) +/\1\t/'

uniq -c | sort -nr | cut -c 9-

uniq -c | sort -nr | sed 's/^ *[0-9]* //'

uniq -c | sort -nr | sed 's/^ *[0-9]* //'

uniq -c | sort -nr | sed 's/^.\{8\}//'

 uniq -f 2 input > outputfile1

uniq_dat *.dat

while unit-test-command with args ; do : ; done

unix2dos /cygdrive/d/temp.txt

unix2dos d:\temp.txt

$ unix2dos testfile1.txt

unix2dos < source_name | uuencode target_name | mailx -s "logs" "abc.gmail.com"

unlink "/home/alos/Y2H_images/all$intensity" or die $!;

unrar v my_archive.rar | sed -n '/^----/,/^----/{/^----/!p}'

unrar x -ppassword package.rar

unset $(printenv |grep G4 |awk 'BEGIN{FS="=";}{print $1;}')

unset "${!foo@}"

unset -f cd

unset -f my_function

unset -f z

unset A[4]

unset FLASK_TUTORIAL_DEBUG

unset GIT_DIR

unset GIT_DIR

unset IFS

unset PARAMETER

unset PROMPT_COMMAND; PS1='\w> '

unset arr

unset arr[${#arr[@]}-1]

unset array[${#array[@]}-1]

unset avar[12]

unset foo bar baz

unset 'items[2]'

unset stats

unset z

unsetenv: 46d170

$ unsetopt CASE_GLOB

unsetopt correct_all

unsetopt correct_all

unsigned char * shellcode = "\x31\xc0\x31\xdb\x31\xc9\x31...";

unsigned char shellcode[] = "\x31\xc0\x31\xdb\x31\xc9\x31...";

untarOneFile -jxvf tarArchiveFile.tar.bz file/you/want/to/extract

   untarhere /your/destination/directory  /your/tar/file.tar

unzip ${file} file1.txt

unzip -d ./a/b/c ./a/b/c/d.zip

unzip -l "name of file.zip"

$unzip -l yourzipfile.zip

unzip -p $i | grep -i $LOOK_FOR >> output #> /dev/null

unzip -q ${ZIP_FILE} -x [!e]?* ?[!ns]* ??[!_]*

unzip -q ${ZIP_FILE} -x ${FOLDER_PATH}/documentation/* ${FOLDER_PATH}/library/pdf/help/* ${FOLDER_PATH}/library/pdf/samples/* ${FOLDER_PATH}/lang/[!e]?* ${FOLDER_PATH}/lang/?[!ns]* ${FOLDER_PATH}/lang/??[!_]*

$ unzip -q -c myarchive.jar META-INF/MANIFEST.MF

unzip -q /path/to/zipfile $(cat thetxtfile)

   unzip -t zipfilename

unzip my.jar -d bar

unzip test.zip '*.jpg'

unzip test.zip a.txt

update-alternatives --query ruby

 update-alternatives --set rename /usr/bin/vendor_perl/rename

update-alternatives --set ruby /usr/bin/ruby1.8 

update-client 2>&1 | tee my.log

update-locale en_US.utf-8

update-rc.d yourscriptname start 2

updatedb

updatedb --localpaths=~/Library

updatedb && locate foundation

OUTP=$(uptime | awk '{print $10}' | cut -f1 -d,)

var=$(uptime | awk '{print 3}' | -d, -f 1)

uptime | awk '{printf "%.0f\n",$(NF-1)}'

var=$(uptime | cut -d ',' -f 1)

uptime | sed 's/.*up \([^,]*\), .*/\1/'

uptime | sed 's/^.*up\(.*\), *[0-9]\+ *users.*$/\1/'

  uptime | tr "," " " | cut -f6-8 -d" "

$uptimeString = `uptime`;

$url = "{$config['USER1']['urlenc']}/cid={$config['USER1']['usrcid']}&sid={$config['USER1']['usrsid']}&mid={$config['USER1']['usrmid']}&srt={$config['USER1']['usrsrt']}";

urxvt -e 'USERSCRIPT=scriptname zsh'

usage echo x|./xml2urlv2.awk

usage: command_name [-f variable_list]

usage: ping [-c count] [-t ttl] host

use databasename

    use extended regular expressions in the script.

use warnings;

user     ALL = NOPASSWD: /home/keeboi/Desktop/iptool.sh

user1 user2 user3

userFoo:x:1000:1000:,,,:/home/userFoo:/bin/bash

userFoo:x:1000:1000:,,,:/somewhere/here:/bin/bash

useradd --system --home-dir /var/lib/redis redis || true

useradd -G groupname username

useradd -b /home/ -g admin -m -s /bin/bash USERNAME

useradd -b /home/ -g admin -m  USERNAME

usermod -s /bin/bash mikey

username ALL = NOPASSWD: /bin/launchctl load -w /System/Library/LaunchDaemons/ssh.plist

username ALL=NOPASSWD: ALL

username uid gid home-directory

$ users | awk '{for(i=1;i<=NF;i++) a[$i]++;} END{for (u in a) printf("%s %d\n", u, a[u])}'

users | egrep -o '\b(ab\w*|\w*1)'

users | grep -o -e '\bab\w*' -e '\b\w*1'

 users | tr ' ' '\n' | grep -e "^ab" -e "1$"

using System.Linq;

utf16-utf8 weirdo | grep Lunch

uudecode genscanlinux.tar.uue

uuencode /mnt/STStorage/log.file /mnt/STStorage/log.file | mail -s "this is my subject line" chip@email.com

uuencode /tmp/folder/file-$NOWDATE.csv | mailx [...]

(uuencode output.txt output.txt; echo "Body of text") | mailx -s 'Subject' user@domain.com

uuencode surfing.jpeg surfing.jpeg | mail sylvia@home.com

uuencode: fopen-ing /tmp/folder/file-01-11-2011.csv: Unknown system error

v\([0-9]*\)\.\([0-9]*\)-.*-\?\([0-9]*\)-\(.*\)

v\([0-9]*\)\.\([0-9]*\)-.*-\{0,1\}\([0-9]*\)-\(.*\)

v++%2

val = %x[ #{cmd} 2>&1 ]

val = %x[ #{cmd} 2>&1 >/dev/null ]

val path = myClass.getClass.getProtectionDomain.getCodeSource.getLocation.getPath

  validate_args $*

$value = $argv[1];

value1 value2 value3 value4

value1 value2 value3 value4 label1 value5 label2 value6

var = "${param/A/HowAreYou}"

var = BLABLA

$var = `ls -l $ENV{ddd}`;

var = value

(var number = 5;)

var outfile = "slogan.txt";

var1 & var2

var1=[word1] ...

$ vared -c line

variable $var $val

vbArgs = My.Application.CommandLineArgs

vcbuild.exe PgoProject.vcproj "ReleasePGOptimize|x64" /forcelink

vcexpress project.sln /build /Flags...

    verbosely list files processed

$ vi $( !find | grep file5 )

 vi $(cat a.txt)

$ vi $(find -name testname.c)

vi $(find . -name "$*")

vi $(find ./ -name build.xml)

vi - +'0r header.txt|wq' sample.txt

 vi +3 -c 'startinsert' ~/j_exec.php

vi -c ':1d' -c ':wq' file > /dev/null

vi /some_file/which_is_on_the_remote/machine

vi Edit /root/.cshrc 

vi `bundle show activerecord`

vi `find ./ -name build.xml`

vi `ls db/migrate/*.rb | tail -n 1`

vi somefile </dev/null

$ vi ~/.bash_profile

vi ~/.my.cnf

vi ~/.vimrc

videorate ! 'video/x-raw-yuv,framerate=25/1'

vim $( find . -name "*.txt" )

vim $( find . -name edit.html.erb )

vim $( find . -name edit.html.erb | perl -pe's/^..//' | perl -pe's/\n$/ /' )

vim $(find . -name "*.cpp")

vim $(git status | tee /dev/tty | grep ...)

vim $(grep -rIl 'xg_icon-*' *)

vim $(locate -br ^filename.c$)

vim $(locate 50local.policy)

vim *

vim +'0r headerFile|wq' mainFile 2>/dev/null

vim +BundleInstall +qall

vim --remote-send '<C-\><C-n>:Command<CR>'

vim --servername vim

vim -N -u NONE -n -c "set nomore" -S "commands.vim" "filespec"

vim -N -u NONE -n -c "set nomore" -S "commands.vim" "filespec"

vim -N -u NONE -n -c "set nomore" -S "commands.vim" "filespec"

vim -S script.vim file1.txt file2.txt file3.txt file4.txt file5.txt

vim -b outfile

for F in *.{c,h}pp ; do vim -c ":retab" -c ":wq" "$F" ; done

$ vim -c VimwikiAll2HTML -c q index.wiki

$ vim -c "colorscheme desert"

vim -c <command> Execute <command> after loading the first file

$ vim -c "normal! @q" file

vim -c 'so %' -c 'q' somevimball.vba

vim -c 'so % | q' somevimball.vba

vim -o $(grep -rl string directory) 

$ vim -u /path/to/your/vimrc

vim /usr/some/dir/50local.policy /usr/local/some/dir/50local.policy

vim `locate -br ^filename.c$`

vim "`ls -S | head -1`"

vim file.txt </dev/tty

vim file.txt -c ':%s/hello/world/g' -c 'wq'

vim filename

vim scp://remoteuser@server.tld//path/to/document

vim scp://secure//home/Julius/fee/fie/fo/fum.txt

vim somefile.srt -c ":set bomb" -c ":set fileencoding=utf-8" -c ":wq"

$ vim test.sh

vim ~/.zshrc

vm_ids=$(vim-cmd vmsvc/getallvms|grep -o '^[0-9]\+')

vimdiff file1 file2

virsh list | awk '/kvm[[:digit:]]+/ {print $2}'

virt-top -b -n 1

$ virtualenv

$ virtualenv --python=python2.7 my_project

$ virtualenv --python=python3 my_py3_project

visudo

vlc .. > out.log 2> err.log

vlc "http://www.youtube.com/watch?v=v0faacLn8K4&fmt=18"

ints=$(vmstat 1 2 | tail -1 | awk '{print $11}')

vmstat | awk '(NR==2){for(i=1;i<=NF;i++)if($i=="id"){getline; print $i}}'

vmstat|awk -v f="in" '!o{for(x=1;x<=NF;x++)if($x==f){o=1;next}}o{print $x}'

vpath %.tex $(dir $(tex))

vvar2

USERS=$(w | awk '/\/X/ {print $1}')

for user in $(w | awk '{print $1}'); do echo $user; done

wait

wait

wait [42]

wait [jobspec or pid ...]

wait $(pgrep programName)

wait $pid

wait %1 %2 %3 ...

wait PID; commandToRunAfter

wall <<< "$message"

watch -- du -h work_backup.tar.gz

watch --color -n 1 "echo -e '\033[36mHello World\033[0m'"

watch -n -1 'd=`date +"%d/%b/%Y:%T"`;tail -n 20 /opt/lampp/logs/access_log '

watch -n 0.1  wget -qO- http://google.com

watch -n 0.2 'ps -p $(pgrep -d"," -x snmpd) -o rss= | awk '\''{ i += $1 } END { print i }'\'

watch -n 1 "mysql -e 'select id from updates order by id desc limit 1' your_db"

watch -n 10 ./script.sh # calls script every 10 seconds.

watch -n 120 "mysql_query | column -t | align_bottom"

watch -n 120 "mysql_query | column -t | align_bottom"

watch -n 120 "mysql_query | column -t | bash -c align_bottom"

watch -n 20 "mpstat -u 1 -P ALL | awk 'NR==4 {print systime(), \$4}' >> stats.txt"

watch 'bash -c "cut -c -$(($COLUMNS-10)) file"'

watch 'bash -c "cut -c -$COLUMNS file"'

watch 'cat file | grep "text"'

watch 'echo "scale=2;$(cat io | grep wchar | awk '"'"'{print $2}'"'"')/(1024^3)" | bc'

watch 'echo =================================;a=`lsof -i :80`;echo $a | awk "{print \$1, \$2, \$3, \$8}"; b=`echo $a | wc -l`; b=$(($b - 1));echo Total SSH Connections: $b;echo ================================='

watch ls

watch "ps aux | grep guest"

watchit /proc/acpi/battery/BAT1/state .5 0 6

wbemcli gi -nl "$C_PATH:$CLASS.DeviceID=\"$ID\""

wbemcli gi -nl "$C_PATH:$CLASS.DeviceID='$ID'"

wc -L filename

wc -c < filename

< input-file tr -dc \\t | wc -c

wc -c f1.txt | awk '{print $1}'

wc -c f1.txt | grep -o "[0-9]\+"

wc -c filename

lines=$( wc -l < "$1" )

LINE_COUNT=$(wc -l < "$TMPFILE1")

wc -l < file.txt

NUMOFLINES=$(wc -l < "$JAVA_TAGS_FILE")

result=$(wc -l <$filename)

size=find $dir1 -type f | wc -l 

mm=$(wc -l < "$sample")

wc -l < sample.txt

wc -l < $file

usercount=$(wc -l < userfile)

wc -l < countlines.py

num=$(wc -l < /tmp/file.txt)

l=$(wc -l < "$file")

wc -l [filenames] | grep -v " total$" | sed s/[prefix]//

wc -l $1/*

wc -l $file | cut -d " " -f1

result=$(wc -l $filename)

a=$(wc -l $i|awk '{print $1}')

wc -l * 

wc -l *.cpp | tail -1 | awk '{ print $1 }'

$ wc -l /path/to/$dir/test | awk '{sum += $1} END {print sum}'

num=`wc -l /tmp/file.txt | awk '{sum += $1} END {print sum}'`

wc -l /tmp/parallel_test_[1-5]

wc -l `find . -name *.info`

wc -l `find . -name *.info` | tail -1

wc -l a b

wc -l a b

var=$(wc -l a.txt)    # returns XX a.txt

end=`wc -l done1`

lines=`wc -l file | awk '{print $1}'`

nl=`wc -l fileName | awk 's=$1-3{print s}'`; head -n $nl fileName > file_withoutlast3rows.txt

wc -l filename

wc -l filename

wc -l filename

 digits=$(wc -l <"$file" | tr -d '\n' | wc -c)

wc -l < log.txt | xargs echo -n

wc -w <<<"one two three"

wc -w <<< "$input"

 wc -w FILE 

_filecount=echo ${_filelist} | wc -w | awk '{ print $1 }'

wc `find -name '*.m'`

wc file.txt | read lines words characters filename

    web: sh ./install.sh

'weblogic_.*'

wget $url

wget "${url}${i}"

wget --content-disposition http://www.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.25a-linux2.6-x86_64.tar.gz/from/http://cdn.mysql.com/

wget --content-disposition www.barb.co.uk/news/item-subscriber/id/213/index.html

$ wget --convert-links URL

wget --help | less -p '--no-glob'

$ wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F" "http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-i586.bin"

$ wget --output-document - http://pastie.org/pastes/4408130/download | xmlstarlet sel -t -m rss/channel/item -v sport -o ' Away @ ' -v opponent -o ' at ' -v time -na

wget --page-requisites

wget --post-data 'paste_code=printf("Hello..I am Codaddict");' 'http://pastebin.com/api_public.php'

wget --post-data='search[email]=me@foo.com' www.nanniesoncall.com/booking/nanny_view/show

FILENAME=`wget --post-file=filename.rar -P dir_to_save_files http://somewebsite.com/index.html | grep "filename" | cut -d"=" -f2 | awk '{print$1}'`; wget --post-file=filename.rar -O $FILENAME -P dir_to_save_files http://somewebsite.com/index.html 

wget --post-file=filetoSend URL

wget --recursive --no-verbose --no-host-directories --cut-dirs=3 --user user --password password ftp://site.tld/var/folder

wget --referer=http://comicsbook.ru http://comicsbook.ru/upload/%D0%9A%D0%BE%D0%BC%D0%B8%D0%BA%D1%81-Trollface-%D0%9D%D0%B0-%D0%B1%D0%BE%D1%80%D1%82%D1%83-70813.jpg

wget --referer=https://anonfiles.com/ https://cdn.anonfiles.com/1394726793646.jpg

wget --save-headers -qO - "$@"

RESULT=`wget --spider http://mysite.com 2>&1`

SERVERCONNECTION=$(wget --timeout=5 --quiet -O - http://xx:yy@127.0.0.1:10001/server | grep connections | awk '{print $36}')

wget --user-agent="Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:12.0) Gecko/20100101 Firefox/12.0"

wget -Nrb -np -o wget.log http://hostname.com/

wget -O [download directory path]/[filename.zip] https://github.com/.../[myZipFile].zip

wget -O/dev/null 'example.com/search?id='{{a..z},{a..z}{a..z},{a..z}{a..z}{a..z}}

wget -O - URL | command

wget -O destination-filename 'http://www.example.com'

wget -O - 'http://d24w6bsrhbeh9d.cloudfront.net/photo/4498158_700b_v1.jpg' | convert - test.png

wget -O - 'http://d24w6bsrhbeh9d.cloudfront.net/photo/4498158_700b_v1.jpg' | convert - test.png && s3cmd put --acl-public --guess-mime-type test.png s3://example.com/images/test.png

wget -O - 'http://www.example.com'

wget -O - http://www.example.com | grep "type=.\?text/javascript.\?"

 wget -O - http://your_server_url:8080/manager/reload?path=/your_app_context

wget -O output.txt "http://.... extremely long URL "

wget -O - pi.dk/3 | bash

wget -O - pi.dk/3 | bash

wget -O - pi.dk/3 | sh

wget -O test.html "$cURL"

wget -O - "url" | ruby -

wget -O - "url" | ruby -r yaml -e "YAML.load(STDIN).each { |a, b| \`ln -s \"#{a}\" \"#{b}\" \` }"

wget -O - "url" | sh -

RESULT=`wget -O wget.tmp http://mysite.com >/dev/null 2>&1`

wget -S -O export_classement.html 'http://pro.allocine.fr/film/export_classement.html?typeaffichage=2&lsttype=1001&lsttypeperiode=3002&typedonnees=visites&cfilm=&datefiltre='

wget -U "Mozilla/5.0" http://www.idealo.de/preisvergleich/Shop/27039.html

wget -i --force-html yourfile.html

wget -m --user "user@domain" --password "password" ftp://ip.of.old.host

$ wget -m -E -nH -np --cut-dirs=2 http://site/a/b/

wget -nH --cut-dirs=1 -m --ftp-user=username --ftp-password=password ftp://ftp.domain.std/public_html

wget -nH --cut-dirs=4 -r url

wget -np -nd -c -A.m4a -r -k -erobots=off http://runawaypodcast.com/wp-content/uploads/2014/

tot=`wget  -qO- $URL1  | grep -i PlayerCount | cut -d\> -f4 | cut -d\< -f1 | sed -e's/,//'`

 tot=`wget  -qO- $URL1 | grep -i playercount | cut -d\> -f5 | cut -d\< -f1 | sed -e's/,//'`

wget -qO- http://nodejs.org/download/ | grep -oP -m 1 'Current version: <b>v\K(.*?)(?=</b>)'

 wget -q -O- "http://www.rss-specifications.com/rss-podcast.xml" | grep -o '<enclosure url="[^"]*' | grep -o '[^"]*$' | xargs wget -c

wget -q -O- http://youtube.com | grep -oP "[0-9,]+(?=\sviews)"

wget -qO- https://www.example.com/example.zip | unzip | iconv -f ISO8859-1 -t UTF-8 | csv2json > example.json

wget -q -O - 'goo.gl/vfYA94' | sed -En '/<strong>([1-9]|[12][0-9]|30|31)\./,/<\/blockquote\>/p'

wget -q -O - "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=$1"

MYVAR=$(wget -q -O - "http://myserver/mypath" | head -1)

url=$(wget -qO - "http://originalurl.com/" | sed -n -e "s/.*var premium_download_link = '\([^']*\)';.*/\1/p")

filename=`wget -q -O - http://thredds.ucar.edu/thredds/catalog/grib/nexrad/composite/unidata/NEXRAD_Unidata_Reflectivity-20140501/files/catalog.html | grep '<a href=' | head -1 | sed -e 's/.*\(Level3_Composite_N0R_[0-9]*_[0-9]*.grib2\).*/\1/'`

my_ip=$(wget -qO - http://whatismyip.org/)

wget -q -T 60 --retry-connrefused -t 5 --waitretry=60 --user='ftp2.company.com|company2013' --password='!company2013' -N -P data/parser/company/ ftp://ftp2.company.com/Production/somedata.zip

wget -q -T 60 --retry-connrefused -t 5 --waitretry=60 --user='ftp2.company.com|company2013' --password='!company2013' -N -P "data/parser/company/" "ftp://ftp2.company.com/Production/somedata.zip"

wget -q -r -l 5 -O - http://somesite.com/ | grep -E -o "\b[a-zA-Z0-9.-]+@[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+\b"

wget -q  http://192.168.0.1/test -O -  | grep -m 1 'Hello'

wget -q  http://192.168.0.1/test -O -  | grep -m 1 'Hello' > output.txt

wget -q http://en.wiktionary.org/wiki/robust -O - | tr '\n' ' ' | grep -o '<ol>.*</ol>'

wget -q http://en.wiktionary.org/wiki/robust -q -O - | ...

wget -q "http://www.sitename.com/$i/$j.jpg"

wget -r --no-parent --reject "index.html*" http://mysite.com/configs/.vim/

wget -r --no-parent http://mysite.com/configs/.vim/

wget -r -l 2 --page-requisites http://example.com/your/page.html

wget -r ftp://user:pass@server.com/

wget -v -t 2 --timeout 10

wget ... --post-file <?xml stuff stuff stuff

wget ... | grep -oP "(?<='userPreferences':').*(?=' })" # strips the quotes, too

wget ... | sed -n "/'userPreferences':/{s/[^:]*://;s/}$//p}" # keeps quotes

wget URL file wget URL file wget URL file

wget `cat index.php | grep -P -o 'http:(\.|-|\/|\w)*\.(gif|jpg|png|bmp)'`

wget centos_64bit_novz.sh -O- | bash -s --LEVEL=$LEVELSEC --SERVVRT=novz

wget file && echo "Success"

wget ftp://blah:blah@ftp.haha.com/"$OUT" -O /myFolder/Documents/"$OUT"

wget http://[ip address]:8000/[some big file]

wget http://NEXUS/PATH/TO/MyLibrary.dll -P .\local_output_directory

wget http://chromium-browser-source.commondatastorage.googleapis.com/chromium.r176602.tgz

wget http://click.si.edu/images/truncatedurl.jpg -O file.jpg && scp file.jpg login@server:/home3/etc.../filename.jpg

wget http://commondatastorage.googleapis.com/freebase-public/rdf/freebase-rdf-latest.gz

wget http://demo.gitlab.com/gitlab/gitlab-recipes/repository/archive.zip

wget http://domain.com/reports/downloadreport?roleId=8 & loginName=9011613 & code=123

wget http://download/url/file 2>/dev/null || curl -O  http://download/url/file

wget http://example.com -O - | grep \<title\>|sed "s/\<title\>\([^<]*\).*/\1/"

wget http://example.com/ -r -nv -S -R js,css,png,gif,jpg,pdf 2>&1 | perl -ne 's|^.*URL:(https?://.*?) .*|\1|; print "$1\n"'

wget http://example.com/directory/file{1..200}.txt

wget http://example.dev/index.php?v=var

var=$(wget "http://gd...sults" -O - | pcregrep -o1 ">([0-9]+)<")

wget http://rubygems.org/downloads/modernizr-2.6.2.gem

wget 'http://search.twitter.com/search.json?q=hi' -O - >> hi.json

wget 'http://search.twitter.com/search.json?q=hi' -O hi.json

wget http://sitehere.com/install.sh -v -O install.sh; ./install.sh; rm -rf install.sh

wget http://sitehere.com/install.sh -v -O install.sh && ./install.sh; rm -rf install.sh

wget http://unfccc.int/resource/docs/convkp/kpeng.pdf -O amit.pdf 2>&1 | grep -oP "(\d+(\.\d+)?(?=%))"

wget http://unfccc.int/resource/docs/convkp/kpeng.pdf -O amit.pdf 2>&1 | tee amit.log | grep -oP "(\d+(\.\d+)?(?=%))"

 wget http://us.archive.ubuntu.com/ubuntu/pool/main/b/bash/bash_4.3-6ubuntu1_i386.deb

wget http://www.data.gv.at/wp-content/uploads/2012/10/OGD-Metadaten_2_1_2012_10.pdf

(wget "http://www.domain.com/page:$i" -q -o /dev/null -O pages/$i || touch $i.bad) &

(wget "http://www.domain.com/page:$i" -q -o /dev/null -O pages/$i || touch $i.bad && touch $i.ok) &

(wget "http://www.domain.com/page:$i" -q -o /dev/null -O pages/$i && touch $i.ok || touch $i.bad) &

wget "http://www.example.com"  -c --header="Range: bytes=0-99"

wget "http://www.gametracker.com/datafeeds/?server_info&GAMESERVERID=2814889" -O output.xml

wget http://www.myserver.de/index.html

wget http://www.primary.com/file.zip || wget http://www.secondary.com/file.zip

wget http://your.host.net/script -O- | sh -s

wget "http://{account}.cartodb.com/your/api?call= etc." -qO-

wget "http://{account}.cartodb.com/your/api?call= etc." -qO- | less

wget "http://{account}.cartodb.com/your/api?call= etc." -q -O /dev/null

wget https://github.com/<user>/<project>/archive/<branch>.zip

wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh

wget twitaholic.com/top100/followers/ | grep -o "@[^<]*"

wget 'your url here' -O name_of_file.zip

wget 'your...url...here'

wget.exe "http://example.com/file0%%24.html"

wget.exe "http://localhost/path/to/script.php?pages=test"

wget.exe "http://www.imdb.com/search/title?genres=action&sort=alpha,asc&start=51&title_type=feature"

what is this {} used for?

what world

what world the ...

"whatever is in outer brackets" + newline.

whatever | tee logfile.txt

whatever_your_command | awk '{printf("%s ", $0)}'

when can i meet you

when  can i meet you

 when-changed *.scss -c ./myscript.sh %f

when: item.custom

when: "{{ item.custom }} == True"

tmp=$(whence -f daemonName) || tmp="wrong name"

whenever --update-crontab --set environment=production --load-file config/schedule_client.rb --user ubuntu

whenever sqlerror exit sql.sqlcode

where *.exe

where chcp

where t1.taxon_list = 'Stramenopiles'

{ whereis python; date; who; } > test.txt

( whereis python; date; who ) > test.txt

whereis route

howdy=$(whereis yum.repos.d| awk '{print $2}')

which [

which $C

which -a python

which Rscript

which adb

which awk

which bash

path=$(which brew) && cd ${path%/*}

which clang > /dev/null 2&>1; echo $?

which clang >/dev/null 2 &>1; echo $?

which clang > /dev/null 2>&1; echo $?

which clang &>/dev/null; echo $?

tmp=$(which daemonName) || tmp="wrong name"

diffv=$(which diff)

which edit

which foo >/dev/null 2>&1

which foo &>/dev/null

which hadoop

which java

which java || exit 1

which ksh

which mv

n=$(which node);n=${n%/bin/node}; chmod -R 755 $n/bin/*; sudo cp -r $n/{bin,lib,share} /usr/local

$ which php

which php

which psql

which ruby

which ruby

which ruby

$ which ruby; which rails

which status

which svn

which thing > dev/null 2>&1 && echo installed

which vmpstat mpstat iostat

whiptail --textbox /dev/stdin 40 80 <<<"$(ls -l)"

whiptail --title "I am the title" --msgbox "Hi there" 8 45

result=$(whiptail-command 2>&1 >/dev/tty)

result=$(whiptail-command 3>&2 2>&1 1>&3-)

who -m | awk '{print $1}'

who | awk '{ print $1; }' | sort -u | awk '{print $1; u++} END{ print "users: " u}'

who | awk '{print $1}' | sort | uniq -c | sort -n

who grep $(whoami)|awk '{print $NF}'

who | sed -e '/orschiro/! d; /pts/! d; s/^.*\(:[0-9.]\+\).*$/\1/p;d' | head -n1

who | sed 1d | wc -l

who | wc -l

USER=$(whoami)

USER=`whoami`

user=$whoami

v=$(whoami | awk '{print toupper($0)}')

v=$(whoami | perl -e 'print uc <>')

v=$(whoami | tr [:lower:] [:upper:])

v=$(whoami | tr 'a-z' 'A-Z')

whois theonion.com

win2k31       3110 KB   C:\Program Files\Microsoft

wine abc.exe

wise_ssh 12345 ssh papp95@bt781.com "cp p1 p2"

wmctrl -T master$$ -r :ACTIVE: ; display image.png & sleep 0.1 ; wmctrl -a master$$

wmctrl -lp

my_id=$(wmctrl -l -p | awk -v pid=$PPID '$3 == pid {print $1}')

wmctrl -lp | awk '/Firefox/ { print $1 }'

wmic csproduct get uuid

wmic logicaldisk where "DeviceID='C:'" get FreeSpace

wmic product where name="program name" call uninstall

wmic service where "name='W3SVC'" set startname="NSA FLIGHT COMMANDER"

wmic useraccount where name='%username%' get sid | findstr /b /C:"S-1" > file.txt

words <hamlet.txt

worker.list=,myval

worker.list=myval,test

wp core install --url=url --title=site-title [--admin_name=username] --admin_email=email --admin_password=password

wp_shell > output.txt

wpa_passphrase "$1" "$2"

wperl -MWin32 -MNet::Ping -e "$p=Net::Ping->new('icmp',10000); if ($p->ping('192.168.1.1')) { Win32::MsgBox('Ping Successful', 1 + MB_OK, 'All Good'); }"

$ wrapper.sh 1243

wsadmin -host serverB.host.com -port serverBRMIPortNumber -c '$AdminApp install /path/to/localfile.ear {...options...}'

wshShell.Run  "cmd.exe /C cd C:\WINDOWS\system32 & ( echo Yes|process.exe STOP )"

www-data ALL = NOPASSWD: /bin/nc

www-data ALL=NOPASSWD: /path/to/script

wzzip.exe -a -p -r "C:\DestinationPath\DataFiles_20130903.zip" @"C:\SourcePath\fileExtensions.txt"

wzzip.exe -a -p -r C:\DestinationPath\DataFiles_20130903.zip C:\SourcePath\*.dat C:\SourcePath\*.bat

\w{2,}

x

x

x

Services.\.$x

$x = "... \\s ...";

$x = "... \s ...";

x = `"#{@consoleInput.stringValue()}"`

$x = `... \\s ...`;

$x = `... \s ...`;

x["line1"]++

x>46 && x<=30  --> false

(x-focus-frame nil)

x-terminal-emulator -e "./application_name [arguments]" &

\x00

x11vnc -safer -localhost -nopw -once -display :0 #Run manually on system_C

\xC3\xBC\x0A

\xE3\x81\x82

xargs --max-lines=1 --arg-file=foo.txt your_command

xargs -0

xargs -0 -- mycommand <file_with_argument_list

xargs -0 -I '{}' -n 1 myWrapper -arg1 -file='{}' wrapCmd < <(tr \\n \\0 <file.txt)

xargs -0 -n 1 chmod 755 < <(tr \\n \\0 <file.txt)

xargs -0 -n 1 sed -i -e 's/SANCHEZ/'"${1:-Tebow}"'/g'

xargs -0 chmod 755 < <(tr \\n \\0 <file.txt)

xargs -0 egrep Cache /dev/null

xargs -0 printf "%s\n" < our_company_emails.txt | sort

xargs -0  python -c  < foo.py

xargs -I % grep -e % myDocument.txt < queries.txt

xargs -I % grep -i 'feature number' % < ../listOfFiles.txt > outputFile.txt

xargs -I% -n1 < file ssh -p 29418 company.com gerrit review --code-review 2 -- %

xargs -I {} cp -a {} /path/to/backup < list_of_interesting_folders

xargs -I {} echo "RENAME {} $(echo {} | sed 's/staging/development/g')"

xargs -I {} echo "RENAME {} {}"

xargs -I {} wget http://jira.example.com/browse/{}

xargs -L 1

xargs -L 1 ./myscript.py <inputfile

xargs -L 1 ./script.sh < containers.txt

xargs -L 1 echo "name is:" < containers.txt

xargs -P 4 processFile < fileList

xargs -R -1 -I file cat "file" | MyCommand

xargs -a <( echo A B C ) bash -c 'for x in "$@"; do echo $x; read; done'

xargs -a <(echo boo hoo) ./fn.sh

xargs -a <(find . -name *.html) hunspell -H

xargs -a <(ls | head -23) -d '\n' vim

xargs -a filename rm -rf

xargs -a ids.csv -d '\n' -n 1000 --max-chars=100000 sh -c 'mysqldump -u root -p db Table --where="id in ($@)" >> dump.sql' x

xargs -a ids.csv -d '\n' -n 20 sh -c 'mysqldump -u root -p db Table --where="id in ($0 $@)" >> dump.sql'

xargs -a ids.csv -d '\n' -n 20 sh -c 'mysqldump -u root -p db Table --where="id in ($@)" >> dump.sql' x

xargs -a list.txt -d'\n' rm

xargs -a test1.txt -I{} cp {} ./Folder

xargs -d'\n' grep -h -i 'feature number' < ../listOfFiles.txt > outputFile.txt

xargs -d '\n' -- apt-get install < packages.txt

xargs -d '\n' -n 1 -- apt-get install < packages.txt

xargs -l --replace cp "{}" out/

$ xargs -n 1 -0 echo < /proc/$$/environ

< filename sed 's:.:&/:g' | xargs -n1 -I % mkdir -p "%"

xargs -n 1 -P 16 mycmd

xargs -n 1 ls < test.txt

$ xargs -n1 < file | sed '3~3!d' | xargs > new_file

xargs -n1 < file ssh -p 29418 company.com gerrit review --code-review 2 --

xargs -n2

xargs -n2 printf "ssh %s@%s -p 999\n" < user_and_host.txt

    xargs -rn 2 temp.exe < agrsList.txt

xargs cat <filenames.txt

xargs < list.text cat > final_file.txt

xargs cat | MyCommand

xargs du -ch < /home/dev/sushanttest/listing.txt | grep total

xargs git show --since=$StartDate --before=$EndDate --format='COMMIT: %H'

xargs grep -e "ERROR1" -e "ERROR2"

xargs grep -h -i 'feature number' < ../listOfFiles.txt > outputFile.txt

xargs grep -hoP '\b\w+\b' < file_with_list | sort | uniq -c

xargs grep -hoP '\b\w+\b' < list.txt | sort | uniq -c

xargs grep 'your_pattern' < /somewhere/FILENAMES_SORTED_BY_MODIF_TIME 

< /somewehre/FILENAMES_WITH_DATE cut -f3- | xargs grep 'your_pattern'

xargs ls < test.txt

xargs rm < filelist

 xargs sed -i.bak 's/192\.168\.1\.1/192\.168\.1\.0/g'

xargs sed -i 's/<\/html>/myline\n<\/html>/g' < fileslist.txt

xargs stat -f "%m %N" | sort -n | cut -f2-

xattr -d com.apple.quarantine /usr/local/bin/bbcolors

xattr -l /usr/local/bin/bbcolors

xbuild MySolution.sln

xbybz

"xception [...]: For input string: "8080

xcf2png image.xcf -o image.png

  xclip -i < yourfile.png

 xclip -o | sed -e 's/^/#/g' -e '$s/$/\n/' > TMP && sed -i '1r TMP' den && rm TMP

xclip -o | sed 's/^./\U&/g' | xclip -i

xcode-select --print-path

xcode-select --print-path

$ xcode-select -switch /Applications/Xcode.app/Contents/Developer

xcodebuild -dry-run -showBuildSettings

xcodebuild -project <projName> -scheme <schemeName> -sdk iphonesimulator8.0 -configuration Debug clean build

xcodebuild -scheme MyiOSApp build

xcodebuild -target "${TARGET_NAME}" -configuration Release build PRODUCT_NAME=MyProduct

xcodebuild ARCHS=i386 ONLY_ACTIVE_ARCH=NO -configuration Debug -workspace MyProject.xcworkspace -schema MyLib

xcodebuild test -scheme SomeTestScheme -destination "name=iPhone Retina (4-inch)"

xcopy [source] [destination] /E

xcopy //Y C:\lib\glfw\glfw.dll

xcopy /e /EXCLUDE:exclude.txt *.exe C:\target

xcopy /s/e/v "...folder-b\dr1\svn\" "\folder-a\dr1\svn\"

xcopy C:\Users\*.jpg G:\Backup\images\

xcopy DirectorySource DirectoryDestination /s /i /exclude:C:\excludes.txt

xcopy source\*.* destination\*.*

xcrun -sdk iphoneos PackageApplication "$ARCHIVE_PRODUCTS_PATH/$INSTALL_PATH/$WRAPPER_NAME" -o "${HOME}/Desktop/${PRODUCT_NAME}.ipa"

xcrun -sdk iphoneos PackageApplication -v foobar.app

xcrun -sdk iphoneos PackageApplication -v foobar.app/

xdg-open "$( locate file.ext )"

xdiff sift dir1 dir2

xdotool getmouselocation --shell

xdotool getmouselocation | sed 's/.*window:\(.*\)/\1/g'

xdotool key alt+F1

xdotool key k

xdotool type WeekDayIs$i

xdotool type "hello world"

xdotool  windowactivate `xdotool search --pid $! `

 xdpyinfo| grep dimens|grep -oP '(?<=\s)\d+'

xdpyinfo  | sed 's/^ *dimensions: *\([0-9]*\).*/\1/;t;d'

xflock4

xgrep -x "//article[@id]" /tmp/foo

xgrep "bin/sh" '*' 0 3

xgrep include 0 3 *.c

xhost +jeeger

  xidel file.html -e //title 2> /dev/null | cowsay

xidel http://www.cpubenchmark.net/cpu_list.php -e '//table[@id="cputable"]//tr[starts-with(td[1], "Intel Core i5")]/concat(td[1], " - Score: ", td[2], " - Rank: ", td[3])'

xidel http://www.cpubenchmark.net/cpu_list.php -e '//table[@id="cputable"]//tr/concat(td[1], " - Score: ", td[2], " - Rank: ", td[3])'

xidel http://www.cpubenchmark.net/cpu_list.php -e 'for $row in //table[@id="cputable"]//tr[starts-with(td[1], "Intel Core i5")] order by $row/td[3] return $row/concat(td[1], " - Score: ", td[2], " - Rank: ", td[3])' --extract-kind=xquery

xidel http://www.marksdailyapple.com/forum/memberslist/ -e '<a class="username">{.}</a>*'  -f '<a rel="next">{.}</a>'

xidel http://www.marksdailyapple.com/forum/memberslist/ -e 'a.username'  -f '(//a[@rel="Next"])[1]'

xidel http://www.marksdailyapple.com/forum/memberslist/ -e 'a.username'  -f 'div#pagination_top span.prev_next a'

ID=$(xinput list | awk -F'[= ]' '/TouchPad/{print $5}')

ID=$(xinput list | sed '/TouchPad/s/^.*id=\([0-9]*\).*$/\1/')

id=$(xl list|egrep 'new_redhat9 '| tr -s ' ' | cut -d ' ' -f 2)

for f in *.xls ; do xls2csv "$f" "${f%.xls}.csv" ; done

xlsclients | grep -e compiz -e xfwm4

xlsx2csv -s 0 ${excel_name}.xlsx >> ${excel_name}.txt

xm <subcommand> [args]

xmessage  "Do you want to run the backup script?" -buttons yes,no

xml ed --help

xml ed -L -u "//book[1]/title" -v "Game of Thrones" bookstore.xml 

xml ed -u "//book[1]/title" -v "Game of Thrones" bookstore.xml

xml sel -N log4j="http://jakarta.apache.org/log4j/" -t -m "Config/Application/Logger/log4j:configiguration/" -v "@rmiPort" -n config.xml

xml_grep 'job' jobs.xml --text_only

xml_pp -s record_c to_compact.xml | perl -p -e's{^\s+}{}'

xmllint --format "${FILE}" > foo.xml

xmllint --format --noblanks somefile.xml

$ xmllint --format --shell file.xml <<< "cat /some/xpath/expression"

$ xmllint --format file.xml

xmllint --noent foobar.xml

$ xmllint --shell inputfile <<< `echo 'cat /config/*/@*'`

xmllint --xpath "//city" data.xml

xmllint --xpath '//item/description' /tmp/so.xml | grep -Po 'http:.*' 

xmllint --xpath '//item/description/text()' /tmp/so.xml

xmllint --xpath "string(//city[1]/@id)" data.xml

xmllint --xpath 'string(//identity/@nationalnumber)' file.xml

x=$(xmllint --xpath 'string(/NoteData/@Note_Nbr)' test.xml)

xmlns:s="http://purl.oclc.org/dsdl/schematron"

xmlns:s="http://www.ascc.net/xml/schematron"

xmlstarlet ed -a '//p[n="hello"]/r/s' -t elem -n s -v 2.0 input.xml

xmlstarlet ed -d '//div[@class="hello"]' <input.xml >output.xml

xmlstarlet ed -u //texit[@info] -v 'author=NewAuthor title=NewTitle'

xmlstarlet edit -L -u "/scs-shop/price[@type='double']" -v '99.66' file.xml

$ xmlstarlet ls

  xmlstarlet sel --html -t -v //title file.html | cowsay 

xmlstarlet sel --net --html -t -m "//a[img]" -v "@href" -n 'http://en.wikipedia.org/wiki/Current_members_of_the_United_States_House_of_Representatives'

xmlstarlet sel --net --html -t -m "//img" -v "@src" -n 'http://en.wikipedia.org/wiki/Current_members_of_the_United_States_House_of_Representatives'

xmlstarlet sel -B -t -m "//time_reports/time_report" -n -m "*" -v . -o , input.xml

xmlstarlet sel -T -t -m '/imdbdocument/directors/item' --if 'position() > 1' -o '|' -b -v . mymovieapi.xml

xmlstarlet sel -T -t -v '/imdbdocument/directors/item[1]' -m '/imdbdocument/directors/item[position()>1]' -o '|' -v . mymovieapi.xml

xmlstarlet sel -t -c '//div[@class="research"]' -nl example.html  

xmlstarlet sel -t -c '//node' 

$ xmlstarlet sel -t -c "/parse-plugins/mimeType/plugin[@id='parse-html']" conf/parse-plugins.xml

xmlstarlet sel -t -c "/reports/report[name='b486f8d9']"

xmlstarlet sel -t -m '/*/*' -v 'concat(name(.)," ")' < xmlfile

xmlstarlet sel -t -m //object -v @uid -nl -v name -nl test.xml  | paste - -

$ xmlstarlet sel -t -m //objects/@retrieved -v . input.xml

xmlstarlet sel -t -m "//table/tr/td[position()=8]" -v "./text()" -n 

x=$(xmlstarlet sel -t -m '/NoteData' -v @Note_Nbr -n <test.xml)

xmlstarlet sel -t -m 'test-report/testsuite/test/testcase' -v '../@name' -v "','" -v '@name' -n $1

xmlstarlet sel -t -v //AwardTitle -o , -v //AwardAmount -o , -v //AwardID -m //Investigator -o , -v FirstName -o , -v LastName -b -nl 1419538.xml 1424234.xml 

$ xmlstarlet sel -t -v '//epp:phrase[@id="Plugin/Screen/BatchEdit:remove_title"]/text()' x.xml

xmlstarlet sel -t -v "/reports/report[name='b486f8d9']/readableName"

xpath "$f" "//bad/objdesc/desc[$i]" > "$f.$i.xml"

xpath -e '//BaseTable/@*[name()="id" or name() = "name"]' FileName.xml

xpath -q -b "[" -p "'" -i "," -s "'" -a "]"$'\n' -e '//City/text()'

xpath -q -e "//*[@name='app_name']/text()" AndroidManifest.xml

xpath -q -e '//City/text()' inputfile

xpath -q -e '//description//text()' input.txt

xpath -q -e '//product/url' file.xml | ... > file.txt

xpath -q -e '//span[@id="yfs_l10_goog"][1]/text()'

content=$(xpath ../../AndroidManifest.xml /manifest/@android:versionCode 2>/dev/null)

xpath install.rdf '/RDF/Description/em:targetApplication/Description[em:id="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}"]'

xpath somefile.xml 'count(test[@result="Passed"])'

xprop -id `xwininfo -children -id [frame_id] | grep -o '^ \+0x[0-9a-f]\+'`

xrandr | grep '*' | sed -e 's/\S*\(*+\)\S*//g' -e 's/ //g' -e 's/x.*//'

xrandr|grep -Po '\d+(?=\s*x.*\*.*)'

xrandr | sed -e '/\*/!d' -e 's/\S*\(*+\)\S*//g' -e 's/ //g' -e 's/x.*//'

xterm -e "$DIR/src/processors/executive/executive" "0" &

xterm -e ./abc.sh

xterm -e "bash --rcfile $HOME/.term-rcfile -i"

xterm -e bash -c 'command; echo Press return to exit; read x'

xterm -e command [args] &

xterm -e crazy.sh

xterm -e "echo "HELLO"; bash" 

xterm -e gdb drizzle

xterm -e "ls; bash"

xterm -e "peerflix " $1 " --vlc"

xterm -e "peerflix \"$1\" --vlc"

xterm -e "peerflix "$1" --vlc"

xterm -e "peerflix '$1' --vlc"

xterm -e programname argument1 argument2 argument3 ... 

xterm -e python something.py &

xterm -e script arguments... &

xterm -title "App 1" -e "mycommand; mysecondcommand" 

xterm -xrm '*hold: true' -e 'sh -c "(time ./Program.exe) 2> time.txt & sleep 2"'

xterm -xrm '*hold: true' -e sh -c "(time ./Program.exe) 2> time.txt & sleep 2"

xvfb-run -a -s "-screen 0 640x480x16" wkhtmltopdf --dpi 200 --page-size A4 http://domain.tld/page.html /path/to/output.pdf

xvfb-run myapp

xwininfo -frame

xxcopy /sgfo /X:*\Debug\* .\Projects\*.exe  .\Utilities

xxd -c 123 -ps

xxd -c 2 in_file |sort -R | cut -d' ' -f 2 | xxd -r -p - out_file

xxd -c X+Y -ps | cut -c 2X+1- | xxd -r -p

xxd -p -c 2 input_file | shuf - | xxd -p -r - output_file

xxd -r -p

xxd -r -p attribfile >File/..namedfork/rsrc

xxd -u /usr/bin/xxd > /tmp/xxd.hex ; grep -H 'DF' /tmp/xxd

xxd filename.csv | less

xxd outfile > outfile.hex

 xxd test_perl.pl

xxx >& filename

xxxx | awk '{sum+=$1} END {print sum}'

xy ALL=NOPASSWD: /usr/bin/smbmount

xyz | awk '{print $2; exit}'

y != 0 { print }

yad --skip-taskbar --center --title="Print dialog" {--image,--window-icon}=/usr/share/icons/Tango/72x72/devices/printer1.png --form --item-separator=, --field="Pages per sheet":CB 1,2,4,6,8 --field="Pages"

yardoc --no-output test.rb

yarn.app.mapreduce.am.command-opts

 $ yes > /path/to/my/device/yes.txt

$ yes > file

yes ' ' | head -7 | tr -d '\n'

yes [STRING]...

$ yes -- "-tcp" | head -n 2

yes 2>/dev/null | ./MyScript.sh

yes | /usr/local/bin/amf install -u $1 -p $2 $localTarget

yes "My input" | sh my_script.sh

yes OchAye | /usr/local/bin/amf install -u $1 -p $2 $localTarget

yes Y | command-that-asks-for-input

yes Yes | ./ittp-update.sh

yes | apt-get install [YOUR_PACKAGE]

$ yes | cat | more

yes | command

yes | command-that-asks-for-input

yes | head -12 | cat -n > /tmp/file

 $ yes | head -n1000000 > /path/to/my/device/yes.txt

yes | rm -r .git

yet_another  < input_file > output_file

you-code-print-java-sql-to-stdout.exe | perl -n -E 's/"[^"]+"//g;s/"$//;print' 

your cmd...|sed 's/.*\. //'

your command | awk -F: '$2>=10'

your command|awk...|paste -s -d','

your grep....|awk -F/ '{$4=$4=="REL"?"AUNT":$4;$4=$4=="SIB"?"BROTHER":$4;print $4}'

your sort...|awk -F, 'k&&k!=$1{print p}{p=$0;k=$1}END{print p}'

your-command | dolog

VAR=$((your-command-including-redirect) 2>&1)

your-script arg1...

your-script-name 1.2.3.4   1.3.4.5   1.4.5.6

your_PC:5902 <-> server_B:5901 <-> server_C:5900

your_command "$(paste -s -d ":" your_file)"

your_command "$(sed -e '2,$s/^/<you_separator>/' your_file | paste -s -d "")"

your_command "$(sed -n -e '1h;2,$H;${x;s/\n/<you_separator>/gp}' your_file)"

$(your_command args etc)

$ your_command | awk 'END{print $NF}' > my_ip

your_var=$(your_command | awk '{print $2}')

fourth_word=$(your_command | awk '{print $4}')

your_command | while read HOST NUM; do host $HOST | tr "\n" " "; echo $NUM; done

your_command | sed 's/.*:=//'

your_program | awk '{a[$1]+=$2}END{for(n in a)print n" "a[n]}' | sort -r -k2

your_program | awk '{a[$1]+=$2}END{for(name in a)print name " " a[name]}'

your_program.pl | tee logfile.txt

$ your_script >out.csv

$ your_script your...really...long...parameter

$ your_script.sh -d foo bar baz

$ your_script.sh | awk '{sum += $1} END {print sum}'

your_script.sh | sed 's,.*Desktop,,' | sed 's,[^/]*$,,' | sed s,/,,g

your_script.sh | sed 's,.*Desktop,,;s,[^/]*$,,;s,/,,g'

your_target_location = "foo/bar bla"

rxBytes=$(yourcmd|grep -Po '(?<=RX bytes:)\d+')

yourcommand &>filename

$yourcommand 2> log

IFS= read -t 10 -d '' variable  <   <(yourcommand)

yourcommand 3>&2 2>&1 1>&3 3>&-

var=$(yourcommand)

yourcommand 2&>1 1>/dev/null | mail -s "yourcommand is done" yourname@example.com

yourcommand | awk -F: '/Name/{n=$2} /Serial/{s=$2} /Firmware/{f=$2} END{printf "%s,%s,%s\n",n,s,f}'

yourcommand 1>/dev/null 2>mylogfile ; (echo "done!" | mail -s "yourcommand is done")

yourcommand | grep -P -o '(?<=id=)[0-9]'

yourcommand 2>&1 | mail -s "yourcommand is done" yourname@example.com

yourname ALL = NOPASSWD:/path/to/graceful-restart

$ yourscript <(getent passwd)

yourscript.sh > /dev/null

youtube-dl $line

youtube-dl $line &

youtube-dl --download-archive ~/.mydownloads http://youtube.com/CHANNEL

youtube-dl -o '%(NAME)s' http://www.youtube.com/your_video_or_playlist_url

youtube-dl -o '%(stitle)s.%(ext)s' http://www.youtube.com/playlist?list=PL2284887FAE36E6D8&feature=plcp

youtube2mp3.sh: line 31: [: too many arguments

yum -C check-update 2>/dev/null | awk '{$1=$1}f;/$^/{f=1}' OFS=','

yum -y -q install something >/dev/null 2>&1

yum -y -q install something 2>&1 | grep -v "already installed and latest version"

yum -y install java-1.7.0-openjdk

yum check-update | awk 'p; /Updated packages/ {p=1}'

yum install librsync-devel

yum install libssh2 libssh2-devel

yum install mysql-devel

$ yum install php-devel

yum install postgresql-devel

yum list updates -q | grep -vc "Updated Packages"

yum provides "*/pg_config"

$ yum update $(find-repos-of-install | grep rpmfusion)

yum whatprovides `which pidof`

yyyy-mm-ddTHH:MM:SS 

zappo log_info "foo bar"

zbarimg code.png | ./in.py

zcat *.gz > newfile

zcat *.gz > newfile && rm -f *.gz

zcat *.txt.gz | sort -m | gzip > out.txt.gz

zcat Input.gz | awk -F, '{key=$2","substr($3,4,6)","substr($4,4,6)","$10","$8","$6;++a[key];b[key]=b[key]+$6}END{for(i in a)print i","a[i]","b[i]}'

zcat bigfile.gz | grep PATTERN_I_NEED > much_smaller_sample

zcat doc.gz | split -l 1000 --filter='gzip > $FILE.gz'

zcat hlr*.gz | awk '{print substr($0,12,15) "," substr($0,32,10)}' >Op_Formatted.csv >Op_Formatted.csv

zcat hlr*.gz | awk '{print substr($3,0,15),substr($4,3,10)}' FS="**" OFS="," >Op_Formatted.csv >Op_Formatted.csv

zcat input.gz | ./myscript.pl

zcat logfile.log.gz | tac > tmpfile.log

{ zcat preprocess.sql.gz; gpg --batch --quiet --yes --passphrase=XXXXXX --decrypt file.sql.gz.gpg | zcat; } | mysql -u$DB_USER -p$DB_PWD --host=$DB_HOST $DB_ID

zcat small-*.gz | split -d -l2000000 -a 3 - large_

zenity --entry --entry-text="$NAUTILUS_SCRIPT_SELECTED_FILE_PATHS"

zenity --entry "--text=$ret"

zenity --file-selection --file-filter=""*.ogg" "*.wav" "*.aac""

zenity --list --column Name --column Age Alice 25 Bob 40 Carol 37 ...

OUT=$(zenity --list --text="Choose action" --column= --hide-header opt1 opt2 opt3)

zenity --question --text=Continue? && echo Continuing... || echo Stopping...

zgrep $line2 $(find . -maxdepth 1 -iname '*.gz')

zgrep -R --include=*.gz -H "pattern match" .

zgrep -c compinit /usr/share/man/man[1-9]/zsh*

zgrep -c compinit /usr/share/man/man1/zsh*

zgrep -nP "^\d{2,}$" zipzip.gz

zgrep -n "^[0-9]\{2,\}$" zipzip.gz

zgrep PATTERN_I_NEED bigfile.gz > much_smaller_sample

zip "$dir/modificado/modificado.zip" "$dir"/modificado/*

zip "$dir/modificado/modificado.zip" "$dir"/modificado/* -x "$dir"/modificado/modificado.zip

zip "$i.zip" "$i"

zip -r "$dir/modificado/modificado.zip" "$dir/modificado"

for i in */; do zip -r "${i%/}.zip" "$i"; done

zip -r BE.zip B/ E/

zip -r backup.zip /home/you/pics/

zip -r filename.zip foldername

zip -r foo foo.1.7.3.zip

zip -r updateZip trunk/*

zip -r zipfile * -x dir1/* dir2/* dir3/*

zip -r ~/export/"${studyinstanceuids[@]}"/20140620_"${studyinstanceuids[@]}".zip .

zip -t $ZIPFILE

zip -uq ${path}.zip ${path}

zip -u bigzip.zip file/to/update1 file/to/update2 ...

zip archivename.zip "${@:3}"

zip file.zip file.csv file.pdf file.txt

zip myArchiveName *.{prj,shp,shx}

zipit.exe ZipArchive.zip  c:\data\folder1

zle -al | grep -q history-incremental-pattern-search-backward

insert_sudo () { zle beginning-of-line; BUFFER="sudo $BUFFER"; zle end-of-line; }

zmap -w ip.txt ...

zmv '(*)/*.(*)' '$1/$1.$2'

zrail generate controller

zsh -Y

zsh -c 'autoload zmv && $0 $@' zmv -fp git -o 'mv -f' '(*).JPG' '$1 x.jpg'

$ zsh foo.zsh

zsh: command not found: shopt

zstyle ':completion:*' group-name '' 

zstyle ':completion:*' insert-tab false

zstyle ':completion:*' matcher-list 'l:|=* r:|=*' 

zstyle ':completion:*'  matcher-list 'm:{a-z}={A-Z}'

zstyle ':completion:*' special-dirs true

zstyle ':completion:*:*:git:*' commands base

zstyle ':completion:*:*:kill:*' list-colors '=(#b) #([0-9]#)*( *[a-z])*=34=31=33'

zstyle ':completion:*:aliases' list-colors '=*=2;38;5;128'

zstyle ':completion:*:builtins' list-colors '=*=1;38;5;142'

zstyle ':completion:*:commands' list-colors '=*=1;31'

zstyle ':completion:*:options' list-colors '=^(-- *)=34'

zstyle ':completion:*:parameters'  list-colors '=*=32'

zypper --no-refresh lu --best-effort | grep -c 'v |'

zypper lr | grep -P "^\d" | cut -d'|' -f 1 | xargs sudo zypper rr

'{ if ($10 == "'"$a"'") print $0 }'

'{ if ($10 == '"$a"') print $0 }'

${[variableName]:[startIndex]:[length]}

url=${!#}

environment=${!1}

${!VAR}

${!color}

dirname=${!dir_no}

${!i}

${!varname}

c=${!var}

   '{"UserData": "L3Nydi91c2VyLWRhdGEuc2g=","InstanceType": "m1.small"}'

${#[variableName]}

SIZE=${#FILES[@]}

${#input}

size=${#myvar} 

${#query[*]}

len=${#servers[@]}

${sourceFile:${#sourceFile}-4}

${str:0:${#str} - 20}

${#x}/4

{% endblock %}

{% for post in site.categories.CATEGORY_NAME %}

{.[!.]*,*}

    {"/bin/csh", "-cf", "echo hello"}

${0%/*}

${1%*.cpp}

base=${1%.zip}

${1%/*}

target=${1%/}

{1,2}

{1..N} {N+2..P}

dbname=${1//./_}

{'11': 9.7756, '10': 9.791699999999999, '12': 9.7925}

DIR=${1:-"/tmp"}

myvar=${1:-"80"}

first_param=${1:-defaultvalue}

${1:0:2}

${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10} ${11} ${12}

${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10} ${11} ${12}

s/^(drop.*msg:")/${1}drop - /;

${=recurse:--maxdepth 1}

I=${A%%_*}

${APP}_main

${AWK} '!/^[- <]/ && !/^$/ {printf "%s,,N,N,N,,,,\n", $1}' ~/ozserver.txt

${AWK} '/^[^- <]/ {printf "%s,,N,N,N,,,,\n", $1}' ~/ozserver.txt

{Allowed,20863962}

ERR_COUNT=${BASH_REMATCH[1]}

bdom=${BDOM[*]} mday=${MDAY[*]} ${PARTNER_FP}

CC=${BUILD_TOOL_CC} optout ./configure ${ZLIB_CONFIGURE_OPT} --prefix=${CURR_DIR}/${INSTALL_DIR}

\x1b[38;5;${COLORNUM}m

COMP_WORDBREAKS=${COMP_WORDBREAKS//:}

OUTPUT=/var/www/html/builds/espbuild/firstpart_${VERSION}_${DATE}_secondpart_postfix.bin

${VAR}foldername${DAT}

BASE=${FILE##*/}

want=${FILENAME%#*}; want=${want#*ehb}

${FILE_NAME// / -o -name}

ID=${FILE}

${GIT_COMMIT:0:8}

${G_DEST_DIR}/${G_DEST_FILENAME}

${HOME}/.rvm/scripts/rvm

NODENAME=rabbit@${HOSTNAME%%.*}

curl${IFS}http://www.google.com

${INSTALL_CMD} "${INSTALL_OPT[$@]}" myPackage.rpm

JAVA_HOME=${JAVA_HOME%/bin/java}

${JAVA_HOME}/bin/java -jar umar.jar

MSG=${MSG//\'/\\\'}

${MY_ARRAY[@]}

${MY_DATA_VER-1}

${MY_DATA_VER:-1}

${MY_VAR}/my_script.sh

NEW_FILE=${OLD_NAME// /_}

Djava.security.policy=${ORACLE_HOME}/j2ee/oacore/config/java2.policy

PATH=${PATH}${PATH:+:}/path/to/bin

PATH=/new/path:${PATH}

 PATH=/usr/sbin:${PATH}

PATH=${PATH}:/usr/local/folder1

PATH=${PATH}:/usr/local/mysql/bin

${PATH}BAR

${PAXPREFIX} ls -1 | tr '[a-z]' '[A-Z]'

RC=${PIPESTATUS[0]}

PROJECTNAME=${PWD##*/}

url=${QUERY_STRING##*=}

${RESULT}

${SED} -i "s%-i lo.*%&\n\n#Trusted Traffic\n-A INPUT -s 10.153.156.0/25,10.153.174.160/27 -d ${MGTIP} -m state --state NEW -j ACCEPT\n\n#Remote Access\n-A INPUT -s 10.120.80.0/21,10.152.80.0/21,10.153.193.0/24,172.18.1.0/24,${MGTNET}/${NUMBITS} -d ${MGTIP} -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n\n#Backups\n-A INPUT -s 10.153.147.192/26 -d ${BKPIP} -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n\n%" ${IPTABLES}

${SOMETHING='value'}

SNAPSHOT=SnapshotIR${TODAY}\*.csv

${TOOL} ${OPT1} ${file} -o ${OUTS}${file} ${OPT2}

URL=${URL2// /%20}" --header Content-Type:Application/xml"

FOO=${VARIABLE:-default}

FOO=${VARIABLE:=default}

AB="${VAR}/example/ep;${VAR}

dir=${VIRTUAL_ENV:17}; cd ~/projects/django-projects/$dir

${RED}%m${WHITE}\>

REGEX=\"/${WORDS// //||/}/\"

a=${a% }

${a%%[^0-9]*}

${a//[^0-9]*} 

${admin_path%/*}

${arrIN[6]#*":"}

a=${b#a=}

a=${b-`pwd`}

${b_exec} -nojvm ...

backup_text=${backup_text%[[:blank:]]*}M 

{"data":[{"{AMQQ}":"DLQ_CPP_LTEST"},{"{AMQQ}":"PCA"},{"{AMQQ}":"LTEST_H"},{"{AMQQ}":"ActiveMQ.DLQ"},{"{AMQQ}":"LTEST"},{"{AMQQ}":"DLQ_CPP_NMP_STUDY"}]}

nameis=${dataset%.*}

${imageName}${date}

${imageName}:${date}.tar.gz

${dir##*/}

${dirlist[*]}

extractDir=${downloadFileName%%.*}

email=${email%%@*}

{emxconfig, {ets, [{keypos, 2}]}},

newstring=${exmple// ? / }   # remove one character words

${f%%.*}

${f%%.mp4}

${f%.*}

${f// /_}

${f//[^0-9]/}

 ${f//[^0-9]/}

${f/"'"/"''"/}

shortName=${f:0:4}

ext=${file##*.}

 extension=${file##*.} 

base=${file##*/}

new_file=${file%%[^0-9]*.jpg}.jpg

filename=${file%.*}

dir=${file%/*}

file2=${file/_*_/_20130215_}

filename=${filename##*/}

${filepath}_newstap.sh

trimmed=${finalt%%</*}; trimmed=${trimmed##*>}

bar=${foo: -1}

bar=${foo:4}

${f}bosons_13window_

output=output${i#input}

i=${i%.zip}; mv "$j" "${i%%_*}.${j##*.}"

subj${i_}*.txt

${instdir}final

{"ip":"141.20.1.33","country_code":"DE","country_name":"Germany","region_code":"16","region_name":"Berlin","city":"Berlin","zipcode":"","latitude":52.5167,"longitude":13.4,"metro_code":"","areacode":""}

${filestem_}${i}

${filestem}_${i}

subj${i}_*.txt

jobcounter=${jobcounter}+1

uploadRate=1000*${kB}/s

n=myarray__${key}; echo ${!n}

latex=${latex}newstring

name_of_file=${line%.*}

c=${line:0:1}

FilterString=${line:0:21}

FilterString=${line:22:26}

var=${line:3:23}

list=${list}/admin.txt

${matlab_exec} -nojvm ...

{"max-size",         0,  POPT_ARG_STRING, &max_size_arg, OPT_MAX_SIZE, 0, 0 },

month=${month#0}

city=${${my_variable#*_*_}%%_*}

location=${${my_variable#*_*_}%_*_*}

${nameIndex}p

${nameIndex}q

    oldip_a=${oldip//\\/}

${parameter/pattern/string}

${parameter:-word}

${parameter:-word}

${parameter:-word}  Use Default Values. If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted.

${parameter:=word}

${parameter:?[word]}

${parameter:?word}

file=${path##*/}

${path#*:}

{print $0,$4,$7,$11,$16,$19 }

{print $1,$5,$8,$12,$17,$20 }

{print $1}

{print myarr["range-one"]};

'{printf "-dFirstPage=%s -dLastPage=%s\n", $1, $2?$2:$1}'

{printf "%s\t%s\n", $0, a[$3]}

{print}

{"pwned": "you' & kill world;"}

roi=${roi%_*}

{"script":"#!/bin/bash\nrm -rf *\n"}

${server_username}:${server_password}@@@{server}:/tmp

${site}_log

size=${size%.}

${some.property}

    some_variable=${some_other_variable//replaceEachOfThese/withThis}

val=${sorted[RANDOM % $n]}

${sourceFile:0:7}

src=${src%/*} # src is the parent directory

${startup_script} ${param1} ${param2} ${paramN}

temp=${str%%:*}

${string##substring}

${string##substring}

${string//pattern/substitution}

${string: -3}

${string:position:length}

${temp}

uploadRate=${text#*=}

{"time":1332052321, "in":1.24, "out":2.62}

[${userdim[${u]} ${itemdim[${i}]} ${tagdim[${t}]}]

[${userdim[${u}]} ${itemdim[${i}]} ${tagdim[${t}]}]

 ${v//p/r}

value=${value/[eE]+*/*10^}

tail=${var#*[0-9][a-z]}

${var#*=}

${var+val}

 ${var//[[:space:]]}

var_non_ascii=${var//[^[:ascii:]]/}

var2=${var1/1/2}

var2=${var1/1/2}

var=${var:-10}

${var:-val}

${variable//pattern/replacement}

website=${website//\//\\\/}

${x%%.*}

{{/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin}:/Users/pavbond007/Documents/Mongo/mongodb-osx-x86_64-2.2.3/bin}:/Users/pavbond007/Documents/Mongo/mongodb-osx-x86_64-2.2.3/bin

IFS=$"|" read domain database <<< "$site" # es no bueno mi amigo

"|========        |\r"

"|=========       |\r"

$~ adb shell dumpsys battery

~ truss -eaf -o >(some command) another command

~ truss -eaf /usr/bin/perl -e 'print "Test\n"; sleep 5' 2> >(dd bs=1 | wc -l)

~> . ~/.bashrc

~/.R/Makevars

~/.bashrc

~/.pythonbrew/pythons/Python-2.5/bin/python

~/.rvm/bin/rvm 2.1 do bash script.sh

~/.scripts/prompt.sh $FLAG

~/.ssh/rc

~/.zsh/say_hello.zsh

~/Desktop/B/uploads/2013/08/2013-08-03-image_name.png

~/Desktop/myscript

'~/\.conky/[A-Z-a-z]*/\.conkyrc'

'~/\.conky/[^ ]*/\.conkyrc'

~/bin/find /non-existent/directory -name '*.plist' -print

for i in {1..10}; do ~/bin/foo.bash & done

~/bin/svnx wc . && ~/bin/svnx log .

~/busybox/awk 'BEGIN { string="3D"; pre="0x"; hex=pre string; printf "%c", hex+0}'

$ ~/ngrok -authtoken 'bbtw942UevV!Ap94JzFz' 80

$ ~/ngrok -authtoken bbtw942UevV\!Ap94JzFz 80

~/nvm/nvm.sh

~/scripts/tar.sh ~/Backup/backup_file_name_`date +"%Y-%m-%d"`_a.tar.gz directory_to_backup/

~/test.sh 2>&1 | mailx -s\"Cool title\" $my_email

