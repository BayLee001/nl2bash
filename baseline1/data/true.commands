    Limit(POST, *, .*, 1000, PER_MINUTE),
  rightanglebrc  /dev/null 2 rightanglebrc /dev/null &
 & rightanglebrc  /dev/null &
 ... if ($4=="") ...
 ... if ($4=="'$full'") ...
 ... if ($4=='$full') ...
 ... if ($4==wc) ...
 NR rightanglebrc 1{printf "=HYPERLINK(B%d, C%d) t https://otrs.city.pittsburgh.pa.us/index.pl?Action=AgentTicketZoom;TicketID=%sn", NR-1, NR-1, $0}
 leftanglebrc ( some-command ) some-command
 leftanglebrc (du -sh ./*/ | sort -k2 | cut -f1) du -s -h ./*/ sort -k 2 cut -f 1
 leftanglebrc (echo '&&&&&') echo &&&&&
 leftanglebrc (find "/Volumes/foo/imagesequence/" -name "*.*" -print0) find /Volumes/foo/imagesequence/ -name *.* -print0
 leftanglebrc (find ./*/ | cut -d/ -f2 | uniq -c | sort -k2 | awk '{print ($1-1)"\t"$2}') find ./*/ cut -d -/ -f 2 uniq -c sort -k 2 awk {print ($1-1)"\t"$2}
 leftanglebrc (sort -k 2,2 gar2.txt | grep -v 'n/a$') sort -k 2,2 gar2.txt grep -v n/a$
 leftanglebrc , !sh
 leftanglebrc a leftsquarebrc ^ rightanglebrc  rightsquarebrc \+href leftsquarebrc   rightsquarebrc *= leftsquarebrc  \t rightsquarebrc *"\(ht\|f\)tps\?: leftsquarebrc ^" rightsquarebrc \+"
 leftanglebrc delete_target target_id="$variable"/ rightanglebrc 
 leftanglebrc string rightanglebrc 
 leftsquarebrc   rightsquarebrc *
 leftsquarebrc  ! $BASH_VERSION -a -x /bin/bash  rightsquarebrc 
 leftsquarebrc  ! -d $FOLDER  rightsquarebrc  cd .. pwd
 leftsquarebrc  ! -d ${MYDIR}  rightsquarebrc  DO_SOMETHING DO_SOMETHING_ELSE
 leftsquarebrc  ! -d /path/to/the/folder  rightsquarebrc 
 leftsquarebrc  ! -d xxx/tmp/pids  rightsquarebrc  mkdir -p xxx/tmp/pids chmod 0777 xxx/tmp/pids
 leftsquarebrc  ! -d xxx/tmp/pids  rightsquarebrc  mkdir xxx/tmp/pids chmod 0777 xxx/tmp/pids
 leftsquarebrc  ! -e $HSQLDB_JAR  rightsquarebrc  echo Jar not found! exit 1
 leftsquarebrc  ! -e /dev/sdd1  rightsquarebrc  sleep 1
 leftsquarebrc  ! -f $filename  rightsquarebrc  continue
 leftsquarebrc  ! -f *.DONE.pgp  rightsquarebrc  sleep 1 mv ${f%%.*}.XML.pgp destination-directory rm ${f%%.*}.DONE.pgp
 leftsquarebrc  ! -f index.html -o $? -n -e 0  rightsquarebrc  echo error echo success
 leftsquarebrc  ! -n $res  rightsquarebrc 
 leftsquarebrc  ! -z $(grep "$STRING" "$FILE")  rightsquarebrc  grep $STRING $FILE echo FOUND
 leftsquarebrc  $#  rightsquarebrc 
 leftsquarebrc  $# -g -e 1  rightsquarebrc 
 leftsquarebrc  $# -g -t 0  rightsquarebrc 
 leftsquarebrc  $# -g -t 0  rightsquarebrc 
 leftsquarebrc  $# -n -e 1  rightsquarebrc   leftsquarebrc  $# -n -e 2  rightsquarebrc 
 leftsquarebrc  $# -n -e 1 -a $# -n -e 2  rightsquarebrc 
 leftsquarebrc  $(cat top.txt) = $a  rightsquarebrc  cat top.txt
 leftsquarebrc  $(cat top.txt; printf x) = $ax  rightsquarebrc  cat top.txt printf x
 leftsquarebrc  $(date +%Y) = 1969  rightsquarebrc  date +%Y date 010112002014
 leftsquarebrc  $(echo "$pdb" | cut -c22-23) == ${chain leftsquarebrc $c rightsquarebrc }  rightsquarebrc  echo $pdb cut -c -2 -2 -- -2 -3
 leftsquarebrc  $(echo "$string" | grep -E "^ leftsquarebrc 0-9 rightsquarebrc {8}$")  rightsquarebrc  echo $string grep -E ^ leftsquarebrc 0-9 rightsquarebrc {8}$ echo yes
 leftsquarebrc  $(expr $count / 4) = 0  rightsquarebrc  expr $count / 4 echo yes echo no
 leftsquarebrc  $(id -u) != 0  rightsquarebrc  id -u echo You need root permission for installing programs. exit 1
 leftsquarebrc  $(pgrep -c "myApplication") -e -q 1  rightsquarebrc  pgrep -c myApplication echo true
 leftsquarebrc  $(pgrep mongo | wc -l) -g -t 2  rightsquarebrc  pgrep mongo wc -l
 leftsquarebrc  $(ps -ef | grep -c "myApplication") -e -q 1  rightsquarebrc  ps -e -f grep -c myApplication echo true
 leftsquarebrc  $(readlink $HOME/.slate.js) = $target_path  rightsquarebrc  readlink $HOME/.slate.js
 leftsquarebrc  $(tail -n 1 a) == pass  rightsquarebrc  tail -n 1 a echo pass echo fail
 leftsquarebrc  $(which which) = /usr/bin/which  rightsquarebrc  which which alias which whichever
 leftsquarebrc  $1  rightsquarebrc 
 leftsquarebrc  $1 -g -t 1  rightsquarebrc  shift $1 shift
 leftsquarebrc  $1 = -u  rightsquarebrc 
 leftsquarebrc  $? != 0  rightsquarebrc  return 1
 leftsquarebrc  $? -e -q 0  rightsquarebrc   leftsquarebrc  $? -e -q 1  rightsquarebrc 
 leftsquarebrc  $? -e -q 0 -o $? -e -q 1  rightsquarebrc 
 leftsquarebrc  $? -n -e 0  rightsquarebrc   leftsquarebrc  ! -f index.html  rightsquarebrc  echo error echo success
 leftsquarebrc  $? -n -e 0  rightsquarebrc  echo Problems Creating Backup File exit 1
 leftsquarebrc  $? -n -e 0  rightsquarebrc  echo failed! exit 1 exit 0
 leftsquarebrc  $INDEX + 1  rightsquarebrc 
 leftsquarebrc  $LOCALE == DE -o $LOCALE == FR  rightsquarebrc  ...
 leftsquarebrc  $PROCEED = y  rightsquarebrc 
 leftsquarebrc  $STRING = dog  rightsquarebrc 
 leftsquarebrc  $a == $b  rightsquarebrc 
 leftsquarebrc  $a == $b  rightsquarebrc 
 leftsquarebrc  $a1 = $b1  rightsquarebrc 
 leftsquarebrc  $a1 == $b1  rightsquarebrc 
 leftsquarebrc  $arg1 = $arg2 -a $arg1 != $arg3  rightsquarebrc 
 leftsquarebrc  $c  rightsquarebrc  echo -n $c echo ls -l --color
 leftsquarebrc  $car  rightsquarebrc  echo -n $car echo
 leftsquarebrc  $check -g -t 10000  rightsquarebrc 
 leftsquarebrc  $check = Running  rightsquarebrc 
 leftsquarebrc  $code -n -e 0  rightsquarebrc  echo command  leftsquarebrc $* rightsquarebrc  failed with error code $code
 leftsquarebrc  $db = $i  rightsquarebrc  :
 leftsquarebrc  $db == $i  rightsquarebrc  :
 leftsquarebrc  $f = $i  rightsquarebrc  grep ...
 leftsquarebrc  $i -l -t 1011  rightsquarebrc  rm -f -r $i
 leftsquarebrc  $i = ls.sh  rightsquarebrc 
 leftsquarebrc  $i == ls.sh  rightsquarebrc 
 leftsquarebrc  $j -g -t 20  rightsquarebrc  break
 leftsquarebrc  $limit  rightsquarebrc   leftsquarebrc  $count -g -t $limit  rightsquarebrc 
 leftsquarebrc  $maxline == #SystemMaxUse=  rightsquarebrc  sed s/\#SystemMaxUse=/SystemMaxUse=50M/g journald.conf mv journald.conf2 journald.conf echo This file has been edited. You'll need to do it manually.
 leftsquarebrc  $old_stash != $new_stash  rightsquarebrc  git stash pop
 leftsquarebrc  $old_stash = $new_stash  rightsquarebrc  ... ...
 leftsquarebrc  $response = y  rightsquarebrc  exit
 leftsquarebrc  $s -l -t 10  rightsquarebrc  echo $s+1 bc echo $s
 leftsquarebrc  $totaltracks -g -e 0  rightsquarebrc  echo -N -  -$ -t -o -t -a -l -t -r -a -c -k -s echo elsetext
 leftsquarebrc  $true  rightsquarebrc 
 leftsquarebrc  $word == t -o $word == T  rightsquarebrc 
 leftsquarebrc  $wtf  rightsquarebrc 
 leftsquarebrc  $x =   rightsquarebrc 
 leftsquarebrc  $x =   rightsquarebrc 
 leftsquarebrc  $x =   rightsquarebrc  echo x is empty
 leftsquarebrc  $x =   rightsquarebrc  echo x is empty
 leftsquarebrc  $x = 5  rightsquarebrc  echo it is 5
 leftsquarebrc  ${-#*i} != $-  rightsquarebrc 
 leftsquarebrc  ${@:1:${#@}-1}  rightsquarebrc   leftsquarebrc  leftsquarebrc  -a -o -a -o -a  rightsquarebrc  rightsquarebrc  echo lulz
 leftsquarebrc  ${LOG_FILE:=}HELLO_MY_NAME_IS_BLABLA != HELLO_MY_NAME_IS_BLABLA  rightsquarebrc 
 leftsquarebrc  ${LOG_FILE:=}x != x  rightsquarebrc 
 leftsquarebrc  ${LOG_FILE:=}x != x  rightsquarebrc 
 leftsquarebrc  ${MODE} == top10gainers  rightsquarebrc   leftsquarebrc  ${MODE} == top10losers  rightsquarebrc 
 leftsquarebrc  ${MODE} == top10gainers -o ${MODE} == top10losers  rightsquarebrc 
 leftsquarebrc  ${VAR/#\//} != $VAR  rightsquarebrc 
 leftsquarebrc  ${VAR/#\//} != $VAR  rightsquarebrc 
 leftsquarebrc  ${array leftsquarebrc key rightsquarebrc +abc}  rightsquarebrc  echo exists
 leftsquarebrc  ${filename: -1} == *  rightsquarebrc  echo yes
 leftsquarebrc  ${filename:$length:1} == *  rightsquarebrc  echo yes
 leftsquarebrc  ${like:0:1} == E  rightsquarebrc 
 leftsquarebrc  ${like:0:1}==E  rightsquarebrc 
 leftsquarebrc  ${mycdar leftsquarebrc $1 rightsquarebrc }  rightsquarebrc  cd ${mycdar leftsquarebrc $1 rightsquarebrc } cd $1
 leftsquarebrc  ${myhash leftsquarebrc $key rightsquarebrc +abc}  rightsquarebrc 
 leftsquarebrc  -L $your_file  rightsquarebrc  echo this is a link
 leftsquarebrc  -X   rightsquarebrc  echo Checked -X
 leftsquarebrc  -X  rightsquarebrc  echo Checked -X
 leftsquarebrc  -c /dev/ttyACM0  rightsquarebrc 
 leftsquarebrc  -d
 leftsquarebrc  -d $1  rightsquarebrc  printf %s is not a directory $1 exit 2
 leftsquarebrc  -d $HOME/Desktop  rightsquarebrc  echo exists
 leftsquarebrc  -d $i  rightsquarebrc  echo $i find $i -xdev -maxdepth 100 -type f wc -l
 leftsquarebrc  -d $i  rightsquarebrc  rm -r -f $i
 leftsquarebrc  -d $i  rightsquarebrc  rm -r -f -v $i
 leftsquarebrc  -d $path  rightsquarebrc  ln -s $path ${path//_/-}
 leftsquarebrc  -d .git  rightsquarebrc  git rev-parse --git-dir
 leftsquarebrc  -d .git/svn  rightsquarebrc   leftsquarebrc  x != x$(ls -A .git/svn/)  rightsquarebrc  ls -A .git/svn/ echo Looks like git-svn
 leftsquarebrc  -d /home/acharya/Desktop/xx/parser/r2/evil$2  rightsquarebrc  mkdir /home/acharya/Desktop/xx/parser/r2/evil$2
 leftsquarebrc  -d /path/to/the/folder  rightsquarebrc 
 leftsquarebrc  -d Desktop  rightsquarebrc 
 leftsquarebrc  -d foo  rightsquarebrc  mkdir foo
 leftsquarebrc  -e /home/File.txt  rightsquarebrc  exit
 leftsquarebrc  -e /proc/15435  rightsquarebrc  sleep 0.1
 leftsquarebrc  -e ~/.app/config  rightsquarebrc  source ~/.app/config
 leftsquarebrc  -f $DAEMON  rightsquarebrc  echo File $DAEMON not found exit 0
 leftsquarebrc  -f $FILE1  rightsquarebrc   leftsquarebrc  -f $FILE2  rightsquarebrc  echo NOT FOUND exit 1
 leftsquarebrc  -f $FileName  rightsquarebrc  tr \n  
 leftsquarebrc  -f $HOME/bin/zsh  rightsquarebrc  exec $HOME/bin/zsh -l
 leftsquarebrc  -f $dir/*.part  rightsquarebrc  trash $dir
 leftsquarebrc  -f $file  rightsquarebrc  continue
 leftsquarebrc  -f $file  rightsquarebrc  echo  leftanglebrc end rightanglebrc 
 leftsquarebrc  -f $i  rightsquarebrc  echo $i
 leftsquarebrc  -f /tmp/filename.pid  rightsquarebrc  python daemon.py restart
 leftsquarebrc  -f /tmp/myfile.txt  rightsquarebrc  echo foo echo bar
 leftsquarebrc  -f =   rightsquarebrc 
 leftsquarebrc  -f doesnotexist  rightsquarebrc  diff doesnotexist exists
 leftsquarebrc  -f foo -o x =   rightsquarebrc 
 leftsquarebrc  -f foo -o x =   rightsquarebrc  echo x is empty
 leftsquarebrc  -f ~/.bashrc  rightsquarebrc  . ~/.bashrc
 leftsquarebrc  -n   rightsquarebrc 
 leftsquarebrc  -n   rightsquarebrc 
 leftsquarebrc  -n  rightsquarebrc 
 leftsquarebrc  -n  rightsquarebrc 
 leftsquarebrc  -n $(ps -Af | awk '$11 == "HomeDir"')  rightsquarebrc  ps -A -f awk $11 == "HomeDir" echo running
 leftsquarebrc  -n $(tail -c 1  leftanglebrc "$x")  rightsquarebrc  tail -c 1 echo
 leftsquarebrc  -n $BASH_ENV  rightsquarebrc  . $BASH_ENV
 leftsquarebrc  -n $val  rightsquarebrc 
 leftsquarebrc  -n $var  rightsquarebrc 
 leftsquarebrc  -n $var  rightsquarebrc 
 leftsquarebrc  -n $var  rightsquarebrc  die result is empty
 leftsquarebrc  -n ${0%/*}  rightsquarebrc  cd ${0%/*}
 leftsquarebrc  -n ${DISPLAY}  rightsquarebrc  export EDITOR=gedit export EDITOR=emacs
 leftsquarebrc  -p notify  rightsquarebrc  read -t 0.1
 leftsquarebrc  -r $i  rightsquarebrc  echo $i is readable for $USER
 leftsquarebrc  -s $f  rightsquarebrc  mail me@example.com -s $f contents
 leftsquarebrc  -s test  rightsquarebrc  cat test xargs echo content:
 leftsquarebrc  -s ~/.lastdirectory  rightsquarebrc  cd `cat ~/.lastdirectory` cat ~/.lastdirectory
 leftsquarebrc  -t 1  rightsquarebrc 
 leftsquarebrc  -t 1  rightsquarebrc  echo terminal
 leftsquarebrc  -t 1  rightsquarebrc  echo terminal cat
 leftsquarebrc  -v ONE_COMMAND_SHELL  rightsquarebrc  bind "\C-m":" & \n"
 leftsquarebrc  -w .  rightsquarebrc  echo writeable parent directory
 leftsquarebrc  -x $(type -p "$mysql_exec")  rightsquarebrc  type -p $mysql_exec
 leftsquarebrc  -x -a /sbin/ifconfig  rightsquarebrc  exit 1
 leftsquarebrc  -x /usr/bin/gpg-agent  rightsquarebrc  echo insatlled echo not installed
 leftsquarebrc  -x =   rightsquarebrc  echo x is empty
 leftsquarebrc  -z $(file "$1" | grep '256')  rightsquarebrc  file $1 grep 256 echo 256
 leftsquarebrc  -z $1  rightsquarebrc 
 leftsquarebrc  -z $1  rightsquarebrc 
 leftsquarebrc  -z $OO_EXE  rightsquarebrc 
 leftsquarebrc  -z $PID rightsquarebrc 
 leftsquarebrc  -z $PS1  rightsquarebrc  return
 leftsquarebrc  -z $STY  rightsquarebrc  screen -R -d work
 leftsquarebrc  -z $VAR -a ${VAR+xxx} = xxx  rightsquarebrc  echo VAR is set but empty
 leftsquarebrc  -z $__var1 -a -z $__var2  rightsquarebrc  echo Both missing!
 leftsquarebrc  -z $a  rightsquarebrc   leftsquarebrc  -z $b  rightsquarebrc  usage
 leftsquarebrc  -z $dbuser rightsquarebrc 
 leftsquarebrc  -z $line  rightsquarebrc 
 leftsquarebrc  -z $line  rightsquarebrc  continue
 leftsquarebrc  -z $res  rightsquarebrc 
 leftsquarebrc  -z ${1:+X}  rightsquarebrc  echo echo
 leftsquarebrc  -z ${VAR+xxx}  rightsquarebrc  echo VAR is not set at all
 leftsquarebrc  -z ${VAR}  rightsquarebrc  echo VAR is not set at all
 leftsquarebrc  -z ${month##0*}  rightsquarebrc 
 leftsquarebrc  -z `/sbin/service $SERVICE_NAME status | grep \"$SERVICE_RUNNING_STR\"`  rightsquarebrc  /sbin/service $SERVICE_NAME status grep "$SERVICE_RUNNING_STR"
 leftsquarebrc  -z `ps aux | grep "fetchmail" | grep -v "grep"`  rightsquarebrc  ps aux grep fetchmail grep -v grep fetchmail -d 1800
 leftsquarebrc  -z keytool -l -i -s -t -a -l -i -a -s cert  rightsquarebrc  keytool -g -e -n -k -e -y -a -l -i -a -s cert -k -e -y -a -l -g RSA -s -t -o -r -e -p -a -s -s ${KEYSTORE_PASS} -k -e -y -p -a -s -s
 leftsquarebrc  ...  rightsquarebrc 
 leftsquarebrc  ...  rightsquarebrc  ... ...
 leftsquarebrc  08:45 jon@host ~  rightsquarebrc $ source ~/.bashrc
 leftsquarebrc  1  rightsquarebrc  clear echo -e \033 leftsquarebrc 36mHello World\033 leftsquarebrc 0m sleep 1
 leftsquarebrc  1 = 1  rightsquarebrc   leftsquarebrc  $cont = 1  rightsquarebrc  echo ha
 leftsquarebrc  = foo  rightsquarebrc 
 leftsquarebrc  FILE_TESTx != x  rightsquarebrc 
 leftsquarebrc  Release != $2 -a Debug != {$2}  rightsquarebrc 
 leftsquarebrc  STR1 -a STR2  rightsquarebrc 
 leftsquarebrc  `ls | wc -l` -e -q 1  rightsquarebrc  ls wc -l
 leftsquarebrc  `which binary`  rightsquarebrc  which binary echo it's ok to continue..
 leftsquarebrc  expr  rightsquarebrc  command
 leftsquarebrc  foo  rightsquarebrc   leftsquarebrc  bar  rightsquarebrc   leftsquarebrc  baz  rightsquarebrc 
 leftsquarebrc  foo -o bar -o baz  rightsquarebrc 
 leftsquarebrc  foo bar = hw.machine: iPhone3,1  rightsquarebrc 
 leftsquarebrc  git-rev-list ...  rightsquarebrc 
 leftsquarebrc  grep ^ leftsquarebrc 0-9 rightsquarebrc  grep -q -v OK  rightsquarebrc 
 leftsquarebrc  leftsquarebrc :^ascii: rightsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc 
 leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc _- rightsquarebrc 
 leftsquarebrc  leftsquarebrc :space: rightsquarebrc  :, rightsquarebrc 
 leftsquarebrc  leftsquarebrc NSWorkspace sharedWorkspace rightsquarebrc  openFile:@file.txt rightsquarebrc 
 leftsquarebrc  this = this  rightsquarebrc   leftsquarebrc  that = that  rightsquarebrc 
 leftsquarebrc  true  rightsquarebrc  inotifywait -e modify test echo Do something echo $!
 leftsquarebrc  x != x  rightsquarebrc 
 leftsquarebrc  x != x$(git log -n 1 --grep='^\s*git-svn-id' --oneline)  rightsquarebrc  git log -n 1 --grep ^s*git-svn-id --oneline echo git-svn!
 leftsquarebrc  x = x  rightsquarebrc 
 leftsquarebrc  x = x$HOSTNAME  rightsquarebrc 
 leftsquarebrc  x = x$HOSTNAME  rightsquarebrc  env hostname
 leftsquarebrc  x = xfoo  rightsquarebrc 
 leftsquarebrc  x grep xyzzy somefile
 leftsquarebrc  z = z  rightsquarebrc 
 leftsquarebrc  z$x = z  rightsquarebrc 
 leftsquarebrc  z$x = z  rightsquarebrc 
 leftsquarebrc  z$x = z  rightsquarebrc  echo x is empty
 leftsquarebrc  z$x = z  rightsquarebrc  echo x is empty
 leftsquarebrc  z-f = z  rightsquarebrc 
 leftsquarebrc  z-f foo -o x = z  rightsquarebrc 
 leftsquarebrc *.txt rightsquarebrc 
 leftsquarebrc , /usr/lib64/python27.zip, /usr/lib64/python2.7, /usr/lib64/python2.7/plat-linux2, /usr/lib64/python2.7/lib-tk, /usr/lib64/python2.7/lib-old, /usr/lib64/python2.7/lib-dynload, /usr/lib64/python2.7/site-packages, /usr/lib64/python2.7/site-packages/PIL, /usr/lib64/python2.7/site-packages/gst-0.10, /usr/lib64/python2.7/site-packages/gtk-2.0, /usr/lib64/python2.7/site-packages/webkit-1.0, /usr/lib64/python2.7/site-packages/wx-2.8-gtk2-unicode, /usr/lib/python2.7/site-packages, /usr/lib/python2.7/site-packages/setuptools-0.6c11-py2.7.egg-info rightsquarebrc 
 leftsquarebrc -+ rightsquarebrc {0,1} leftsquarebrc 0-9 rightsquarebrc {1,}
 leftsquarebrc -c, find /home/user/directory ( -name *.mp4 -o -name *.zip ) ! ( -name tokeep.mp4 -o -name tokeep2.mp4 ) -ls -delete rightsquarebrc 
 leftsquarebrc -d
 leftsquarebrc 0-9 rightsquarebrc 
 leftsquarebrc 1 rightsquarebrc  10
 leftsquarebrc 1 rightsquarebrc  1830
 leftsquarebrc 1 rightsquarebrc + Stopped cat
 leftsquarebrc 1 value_@0 rightsquarebrc   leftsquarebrc 2 value_@1 rightsquarebrc   leftsquarebrc 3 value_@2 rightsquarebrc   leftsquarebrc 4 value_@3 rightsquarebrc 
 leftsquarebrc 2-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc {5} rightanglebrc 
 leftsquarebrc 21/Aug/2012:00:31:27 -0 -7 -0 -0 - rightsquarebrc  1345534287 /redir/abc.html
 leftsquarebrc 2addr rightsquarebrc s/regular expression/replacement/flags
 leftsquarebrc 2addr rightsquarebrc t  leftsquarebrc label rightsquarebrc 
 leftsquarebrc 98937.147950 rightsquarebrc  sd 15:0:0:0:  leftsquarebrc sdb rightsquarebrc  Attached SCSI removable disk
 leftsquarebrc :47 rightsquarebrc 
 leftsquarebrc A-Za-z rightsquarebrc  leftsquarebrc A-Za-z0-9 rightsquarebrc *
 leftsquarebrc CON rightsquarebrc  leftsquarebrc EE:AA:BB:A2:FE:FF rightsquarebrc  leftsquarebrc LE rightsquarebrc  0x0013 780060
 leftsquarebrc CT rightsquarebrc .{5,10} leftsquarebrc 
 leftsquarebrc Lyon,Marseille,Paris rightsquarebrc 
 leftsquarebrc NSTask launchedTaskWithLaunchPath:@/usr/bin/purge arguments: leftsquarebrc NSArray array rightsquarebrc  rightsquarebrc 
 leftsquarebrc ^
 leftsquarebrc ^* rightsquarebrc **
 leftsquarebrc ^, rightsquarebrc +
 leftsquarebrc ^0-9 rightsquarebrc 
 leftsquarebrc ^0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc {4}.{1} leftsquarebrc 0-9 rightsquarebrc {2}.{1} leftsquarebrc 0-9 rightsquarebrc {2} leftsquarebrc ^0-9 rightsquarebrc 
 leftsquarebrc ^? rightsquarebrc ?
 leftsquarebrc ^x rightsquarebrc 
 leftsquarebrc ^x rightsquarebrc *x
 leftsquarebrc a-z0-9 rightsquarebrc {2}: leftsquarebrc a-z0-9 rightsquarebrc {2}: leftsquarebrc a-z0-9 rightsquarebrc {2}: leftsquarebrc a-z0-9 rightsquarebrc {2}: leftsquarebrc a-z0-9 rightsquarebrc {2}: leftsquarebrc a-z0-9 rightsquarebrc {2}
 leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}
 leftsquarebrc a-zA-Z_ rightsquarebrc  leftsquarebrc a-zA-Z_0-9 rightsquarebrc *
 leftsquarebrc console rightsquarebrc  -- -- --
 leftsquarebrc console rightsquarebrc  -- -- -- --
 leftsquarebrc date rightsquarebrc t leftsquarebrc time rightsquarebrc t leftsquarebrc post-entry rightsquarebrc t leftsquarebrc user-tobenotified rightsquarebrc t leftsquarebrc someotherinfo rightsquarebrc 
 leftsquarebrc e rightsquarebrc 0 u@h: wa rightsquarebrc 
 leftsquarebrc echo rightsquarebrc  Hello MerryPrankster
 leftsquarebrc echo rightsquarebrc  property: git version 1.7.5.4
 leftsquarebrc f,o,o rightsquarebrc  =
 leftsquarebrc firstName = John, lastName = Doe rightsquarebrc 
 leftsquarebrc i386-linux-gnu_xorg_extra_modules, nvctrl_include, template-dkms-mkdsc, run, 1, conf.d, conf.d rightsquarebrc 
 leftsquarebrc jsmith@regan ~ rightsquarebrc $ mvn -v -e -r -s -i -o -n
 leftsquarebrc managedObjectContext performBlock: rightsquarebrc 
 leftsquarebrc min rightsquarebrc   leftsquarebrc hour rightsquarebrc   leftsquarebrc day_of_month rightsquarebrc   leftsquarebrc month rightsquarebrc   leftsquarebrc day_of_week rightsquarebrc   leftsquarebrc command rightsquarebrc 
 leftsquarebrc mp3 @ 0xf33100 rightsquarebrc  Estimating duration from bitrate, this may be inaccurate
 leftsquarebrc mv, at0_l0_l0, at0_l1_l-1, ./output20 rightsquarebrc 
 leftsquarebrc myscript.py, 1, foo, bar, baz rightsquarebrc 
 leftsquarebrc n rightsquarebrc 
 leftsquarebrc out :: apple.mango@machine-6.mysite.com rightsquarebrc 
 leftsquarebrc p+1 rightsquarebrc 
 leftsquarebrc param1 rightsquarebrc   leftsquarebrc param2 rightsquarebrc 
 leftsquarebrc pfisher ~ rightsquarebrc $ php run-me.php
 leftsquarebrc ping command here rightsquarebrc  awk /^---/ {printf("%s ", $2)} /%/ { print $7} {next}
 leftsquarebrc root@host2 rightsquarebrc  etc /opt/pcre/lib/
 leftsquarebrc root@quackwall ~ rightsquarebrc 
 leftsquarebrc s rightsquarebrc tring
 leftsquarebrc sed, -e -, s/^ leftsquarebrc   rightsquarebrc *//g, -e -, s/( leftsquarebrc 0-9a-zA-Z. rightsquarebrc *)*/1;/g, LogFile.txt rightsquarebrc 
 leftsquarebrc sh, -c -, ps -eo pid,comm,cmd,start,etime | grep -i +s2 rightsquarebrc 
 leftsquarebrc task setArguments:  leftsquarebrc NSArray arrayWithObjects: @~/connect.sh, nil rightsquarebrc  rightsquarebrc 
 leftsquarebrc task setLaunchPath: @/sbin/ping rightsquarebrc 
 leftsquarebrc task setLaunchPath: @/usr/bin/ping rightsquarebrc 
 leftsquarebrc task setLaunchPath:@/bin/sh rightsquarebrc 
 leftsquarebrc task setStandardInput:  leftsquarebrc NSPipe pipe rightsquarebrc  rightsquarebrc 
 leftsquarebrc task setStandardInput: leftsquarebrc NSPipe pipe rightsquarebrc  rightsquarebrc 
 leftsquarebrc test19.txt, test20.txt, test21.txt rightsquarebrc 
 leftsquarebrc uThe First Artist, uThe Second Artist rightsquarebrc 
 leftsquarebrc username@hostname ~ rightsquarebrc  mysqldump -u root -p -m -y -s -q -l -_ -r -o -o -t -_ -p -a -s -s -w -o -r -d --no-data database_name
 leftsquarebrc {field30:value6,field6:value6},{field30:value6,field6:value6} rightsquarebrc 
 rightanglebrc  /dev/null 2 rightanglebrc /dev/null &
 rightanglebrc /dev/null false
!!:gs/1/2
!!:gs/1/2/
!!:gs/9241/9243/
!!:gs/foo/bar/
!!:gs/oldstring/newstring/
!!:s/oldstring/newstring/
!!sh
!-2
!-n
!/ leftsquarebrc 1-2 rightsquarebrc  leftsquarebrc 1-9 rightsquarebrc / {print}
!/^#/ $3 ~ /ext/ $2 != / $2 != /opt { print $2 }
!/^#/ $3 ~ /ext/ $2 != / $2 != /opt { print $2 }
!/pat3/
!/pattern 1 pattern 2 pattern/{default action}
!78:p
!:gs/jpg/png
!?git s
!?grep
!N
!bla!
!cd {x leftsquarebrc -1 rightsquarebrc }
!date
!git push -u origin ${$(git symbolic-ref HEAD)##refs/heads/}
!git push -u origin `git symbolic-ref HEAD | sed -e "s#^refs/heads/##"` git symbolic-ref HEAD sed -e s#^refs/heads/##
!ls -l awk {print $$1}
!mysql
!n:s/previous/replacement/
!sh -c git checkout -b "$1"
!sh -c git checkout -b "$1"
!tl N
"
"a \\"$b\\" c"
# chmod 4777 strace
# chown root strace
$#
$(date '+%s%N') / 1000000 date +%s%N
$(find . -name "*.pdf" | wc -l) == 0 find . -name *.pdf wc -l echo Empty
$(find ... | wc -l) 1 find ... wc -l
$(grep -c "$1" ./ leftsquarebrc FILE rightsquarebrc ) == 1 grep -c $1 ./ leftsquarebrc FILE rightsquarebrc  echo it worked
$(grep -c BSS /tmp/ScannedAPs.txt) 1 grep -c BSS /tmp/ScannedAPs.txt
$(grep -q -F -x $CURR_LINE_IP $IGNORE_IP_LIST) grep -q -F -x $CURR_LINE_IP $IGNORE_IP_LIST continue
$(true) true ps -e -a -f nc -l 1234
$(wc -c  leftanglebrc  "$FILE") 1 wc -c
$(which ls) -l which ls
$1 $?
$? == 0 return 0
$? echo failed! exit 1 exit 0
$? echo failed! exit 1 exit 0
$@
$EDITOR  leftanglebrc (sed -e "s/\x1B\ leftsquarebrc  leftsquarebrc 0-9; rightsquarebrc * leftsquarebrc JKmsu rightsquarebrc //g"  leftanglebrc  "$1") sed -e s/x1B leftsquarebrc  leftsquarebrc 0-9; rightsquarebrc * leftsquarebrc JKmsu rightsquarebrc //g edit
$INDEX + 1
$ON.gpg
$a echo smaller
$command
$count / 4 == 0 echo yes echo no
$file
$myVar ...
$num + 1
$test ./server ${test/test/validate}
$tomatch / 100 * $treshold
$weight * 703
${chars} / ${words}
${dict leftsquarebrc $word rightsquarebrc } + 1
${proc leftsquarebrc $i rightsquarebrc } 20 sum += ${proc leftsquarebrc $i rightsquarebrc }
${time#0} % 15
%  leftsquarebrc  leftsquarebrc  1  rightsquarebrc  rightsquarebrc  echo hooray for angle brackets!
% *.p?
% *.ps
% ./youtube-dl -a batch.txt -c
% alias doit ls -l | grep $USER | somescript `awk -F'"'"' '"'"' '"'"'{print $1}'"'"'`
% awk /^#/ {printf "%04d.%02d.%02d.%02d.%02d.%02d\n", $2, $3, $4, $5, $6, $7} ~/stuff
% echo * * * * * /Users/paul/Desktop/1.sh crontab
% echo SELECT * FROM table mysql -B -u -x -x -x -p -y -y -y database
% echo http://www.youtube.com/watch?v=j9SgDoypXcI
% eval program $(helper) helper
% files=$(hadoop fs -ls /user/foo/bar | awk  '!/^d|nolzo/ {print $8}' ) hadoop fs -l -s /user/foo/bar awk !/^d|nolzo/ {print $8}
% find . -t -y -p -e f -a ! -l -i -n -k -s 1
% find . -t -y -p -e f -l -i -n -k -s +1
% find . -t -y -p -e l
% find / -p -r -i -n -t -0 access_test xargs -0 -n 1 do_cmd
% find /share1/test -n -a -m -e *.dat -e -x -e -c ./test.sh /staging/data/project/ {} projectZ ;
% info bash
% install_app.sh ~/Downloads/MyApp.dmg
% lua hello.lua
% matlab -n -o -s -p -l -a -s -h -n -o -d -i -s -p -l -a -y -r test($$) -l -o -g -f -i -l -e matlab-log-$$.tmp
% mv /path2/$SRC/$OLD_DIR/$OLD_FILE /same/path_w/$NEW_DIR/$NEW_FILE 000
% perl -0 777 -i -. -o -r -i -g -n -e s/\R+/\n/ file1 file2 file3
% perl -C -S -D -i -. -o -r -i -g -n -e print unless /^\s*$/ file1 file2 file3
% perl -M -O -= -D -e -p -a -r -s -e -n -l -e $sum += $_ } END { print $sum
% perl -d -w -e 0
% perl -i -. -o -r -i -g -0 0 -p -l -e s/\s*\n\s*/ /g file1 file2 file3
% perl -i -. -o -r -i -g -n -e print unless /^$/ file1 file2 file3
% perl -i -. -o -r -i -g -n -e print unless /^\s*$/ file1 file2 file3
% perl -n -l -e $sum += $_ } END { print $sum
% screen -d -m okular *.ps
% sed -i -. -o -r -i -g -e /pattern/s/^/#/ inittab
% sed -n -E s/.*(href|src)="( leftsquarebrc ^" rightsquarebrc *).*/\2/p input.html
% sudo python /path/to/test.py
% xxd -r -p in.txt out.bin
%!sed s/#.+$/end/
%%BTAD_InstallDir%%
%-80s
%0 %0
%ANDROID_HOME%
%ANDROID_HOME%tools %ANDROID_HOME%platform-tools
%FF_CMD% /c cmd /c if @isdir==TRUE echoxml.bat @fname
%b expand backslash escape sequences in the corresponding argument
%filename%
%post -p /bin/bash
%run my_script.py
%s/.*,s*//
%s/\ / /g
%sor r /S+$/
%x leftsquarebrc /bin/bash -c echo -n foobar pbcopy rightsquarebrc 
%x{ zip -r -j
%{\e rightsquarebrc 0;%d\a%}\n%F{green}%n@%m %F{yellow}%d%f\n%# 
%~dp0myrename.cmd
%~fI
''something''
( leftsquarebrc ^  rightsquarebrc  leftsquarebrc ^  rightsquarebrc * leftsquarebrc   rightsquarebrc )
( leftsquarebrc a-z rightsquarebrc *- leftsquarebrc a-z rightsquarebrc *-)( leftsquarebrc 0-9 rightsquarebrc *-)( leftsquarebrc a-z rightsquarebrc *-)( leftsquarebrc . rightsquarebrc *SNAPSHOT.jar)
(, -n -a -m -e -, *.mp4, -o -, -n -a -m -e -, *.zip, ), !, (
(-r -R --recursive)'{-r,-R,--recursive}' leftsquarebrc remove directories and their contents recursively rightsquarebrc 
(.*)
(.*)/.*
(.*jpg)
(^ leftsquarebrc a-z,0-9 rightsquarebrc *)(.*)(  leftsquarebrc a-z,0-9 rightsquarebrc *$)
(^| ) leftsquarebrc a-zA-Z rightsquarebrc  leftsquarebrc a-zA-Z0-9 rightsquarebrc *( |$)
(something)(something_else)
)/! s/s*$/. /
)/1~3/
)syntax error: invalid arithmetic operator (error token is 
* $@ $# $? $- $$ $! $0 $_
* $input
* * * * * . /home/you/.bashrc curl -L --maxredirs 5 ...
* * * * * /bin/bash scriptname
* * * * * /bin/ps -C named service named start
* * * * * /bin/sh /path/to/script.sh
* * * * * /data/backups/scripts/server_log_check.sh
* * * * * /home/ahmed/Desktop/run.sh
* * * * * /home/myscript.sh
* * * * * /home/user/mycronscript.sh
* * * * * /home/user/public_html/mailer.php
* * * * * /home/user/simple.sh
* * * * * /home/x.x.x/testing/s3 -f x.x.x.log
* * * * * /path/to/the/ruby/you/want /usr/local/src/hello/hello.rb
* * * * * /root/mysql.sh
* * * * * /some/path/test.sh date +/home/oompah/logs/%Y%m%d.test.log
* * * * * /usr/bin/env
* * * * * /usr/bin/flock -x -n /var/lock/script.lock -c /bin/bash /root/Dropbox/1.sh
* * * * * /usr/bin/flock -x -n /var/lock/script.lock -c /bin/bash ~/1.sh
* * * * * /usr/bin/php -f /path/to/your/php/file
* * * * * /usr/bin/php /path/to/loader.php
* * * * * /usr/bin/php /path/to/script --cron
* * * * * /usr/testjob.sh
* * * * * bash -c NUMBER=$ leftsquarebrc  ( $RANDOM \% 500 )  + 1  rightsquarebrc ; echo $NUMBER  rightanglebrc  /tmp/out
* * * * * cd /path/to/json /var/www/highcharts.com/exporting-server/phantomjs/test/createGraphs.sh
* * * * * cp -f /customTemplates/login.tpl /www/img/templates/adm/login.tpl
* * * * * echo $(date +\%F) date +%F
* * * * * echo `date +\%F` date +%F
* * * * * env
* * * * * env
* * * * * env DISPLAY=:0.0 /home/x/Documents/MyScripts/Cron/BeepAlarm Wake Up
* * * * * export DISPLAY=:0 gnome-terminal -e bash -c "echo password | sudo -S cat /etc/shadow  rightanglebrc  /tmp/shadow 2 rightanglebrc &1"
* * * * * export PATH=/some/path:/some/other/path /usr/bin/php /path/to/script.php
* * * * * michael /home/michael/Documents/CS288/homework7/usatoday_runner.sh
* * * * * php /home/user/public_html/mailer.php
* * * * * php cron.cli $(date +\%R) date +%R
* * * * * printenv
* * * * * root curl /etc/notify.sh
* * * * * script
* * * * cd /Users/user/Documents/foo bar -l doSomething -v
* */3 * * * /usr/local/bin/dowatch
* 0 * * * /usr/bin/mysqldump -u -U -s -e -r -p -P -a -s -s Db_name date +%Y%m%d%H%M
* 21 * * * bash -x /var/spool/asterisk/monitorDONE/MP3/recording_script.sh
* ?  leftsquarebrc 
* leftsquarebrc  leftsquarebrc :upper: rightsquarebrc  rightsquarebrc *
* leftsquarebrc A-Z rightsquarebrc *
* users/15217: Src/Zle/zle_main.c: use top-level status when redrawing prompt.
*.cpp
*.emerg *
*.emerg /var/log/emerg.log
*.sh
*.{jpeg,xml}
*/*.php
*/1 * * * * /bin/bash /path/to/script.sh
*/1 * * * * /home/David_Legassick/test.sh
*/1 * * * * /path/to/script.sh
*/1 * * * * TEMP=$(digitemp_DS9097 -a | grep -i sensor | awk '{print $7}') digitemp_DS9097 -a grep -i sensor awk {print $7} sed -i -r 14s, rightanglebrc  leftsquarebrc ^ leftanglebrc  rightsquarebrc * leftanglebrc /, rightanglebrc ${TEMP} leftanglebrc /, /www/index.html
*/1 * * * * TEMP=$(digitemp_DS9097 -a |grep -i sensor | awk '{print $7}') digitemp_DS9097 -a grep -i sensor awk {print $7} sed -i -. -b -a -k s,\(66cc00.*" rightanglebrc \) leftsquarebrc ^ leftanglebrc  rightsquarebrc * leftanglebrc /,\1$TEMP leftanglebrc /, /www/index.html
*/1 * * * * TEMP=$(digitemp_DS9097 -q -t 0 -O"%.2C") digitemp_DS9097 -q -t 0 -O -% -. -2 -C sed -i -. -b -a -k s,\(66cc00.*" rightanglebrc \) leftsquarebrc ^ leftanglebrc  rightsquarebrc * leftanglebrc /,\1$TEMP leftanglebrc /, /www/index.html
*/1 * * * * cd /home/meric/Documents ./crontest.py
*/1 * * * * echo job every minute
*/1 * * * * find /tmp/ -m -a -x -d -e -p -t -h 1 -t -y -p -e f -n -a -m -e #sql_*.MYD -e -m -p -t -y -d -e -l -e -t -e
*/1 * * * * php -q /var/www/html/includes/cron/cron.inc.a.php
*/10 * * * * /bin/ps -e -o pcpu,pid,user,args /bin/sort -k 1 -r /bin/mail youremail@where.com
*/10 * * * * /home/ismetb/glassfishv3.0.1/glassfish/bin/asadmin start-domain
*/10 * * * * /path_to_script
*/10 * * * * bash -l /home/usr/MeetCal-bot/run-bot.sh
*/10 * * * * root rsync -a -v -z --delete /home/laptop/stuff /Maildir/
*/15 * * * * bash -c source /home/username/.rvm/scripts/rvm && /usr/bin/env ruby /home/username/twitter/twitter.rb friends
*/2 * * * * /home/XXXXXX/private_scripts/backup-script
*/2 * * * * cd /home/nezap/webapps/bonzer/bonzer /usr/local/bin/python2.7 ./apps/base/alert.py
*/2 * * * * cd /home/nezap/webapps/bonzer/bonzer/apps/base /usr/local/bin/python2.7 ./alert.py
*/2 * * * * root rsync -a -v -z -e ssh --delete /stuff/ user@desktop ip:/home/laptop/stuff/
*/20 * * * * xbacklight -s -e -t 0% sleep 20 xbacklight -s -e -t 100%
*/30 * * * * /path/to/php -q /path/to/file.php
*/30 * * * 2,4 /path.to.script.to.be.run/scriptname
*/30 9-18 * * * root  leftsquarebrc  $(date +%H%M) = 1830  rightsquarebrc  date +%H%M your_command
*/5 * * * * /home/user/loadcheck.sh
*/5 * * * * /var/www/update.sh mail -s Cron job execution youremail@wherever.com
*/5 * * * * cd /full/path/to/script/ ./cpu_monitor.sh
*/5 * * * * cd /var/www/website git pull origin master
*/5 * * * * date
*/6 * * * * myscript.sh
*CLI originate
*RECORD $DATE-n++  leftsquarebrc some_serial_# rightsquarebrc 
*argv
*argv leftsquarebrc i rightsquarebrc 
*love*
+  leftsquarebrc  -e /home/somebody/...  rightsquarebrc 
+  leftsquarebrc  -e /home/somebody/...  rightsquarebrc 
+  leftsquarebrc  -e ~/...  rightsquarebrc 
+ YYY bc -l
++ sed s/~/~\\n/g file
++DRIVE_SIZES leftsquarebrc DRIVE_SIZE rightsquarebrc 
++a
++cnt
++k
+0 23:00:00
+47177372141 +41753459833
+program --pass decrypted-password-here
,CHADWICK R GORE,C00538975,2012,10000.00,,10000.00,,,5000.00,,,15000.00,,,,,,,,,,,,,15000.00,15000.00,,,,
,article{gjn2010jucs
.
.  leftanglebrc (./generate_commands) ./generate_commands
.  leftanglebrc (awk -F '\"' '/ leftanglebrc Parameter Name/,//{ print "export " $(NF-3) "=" $(NF-1) }' aa.xml) awk -F \" / leftanglebrc Parameter Name/,//{ print "export " $(NF-3) "=" $(NF-1) } aa.xml
.  leftanglebrc (wget -O- http://a.com/bootstrap-scrit.sh) wget -O -- http://a.com/bootstrap-scrit.sh
. $(dirname "$0")/setup_buildroot.sh $BUILDROOT dirname $0
. $HOME/.bashrc
. $HOME/.cronenv
. $INST_DATADIR/$PKG/install/aosbootcommon.sh
. $USERSCRIPT
. ./addalias.sh ls ls --color=auto
. ./b.sh
. ./bash2.sh
. ./cd.sh
. ./child.sh
. ./conf/prac1
. ./file1.bash
. ./foo2.sh
. ./import.properties
. ./init.bash
. ./my_script.sh
. ./path.sh
. ./project/bash/env.vars.sh
. ./properties.conf
. ./run_me
. ./script.sh
. ./script.sh
. ./script.sh
. ./script.sh
. ./script1.sh ./script2.sh
. ./setenv.sh
. ./setup.bash
. ./setup.sh
. ./test.sh
. ./two.sh
. ./your_file
. /complete/path/to/properties.conf
. /etc/profile
. /etc/profile
. /etc/yourdaemon.env
. /home/db2inst1/sqllib/db2profile db2 connect to MYDB db2 select * from table(myFoo())
. /home/myuser/.bashrc /home/myuser/bin/runreport
. /home/myusername/.setenv
. /home/tuxapp/.profile script.pl
. /path/to/bgx.sh
. /path/to/file
. /path/to/function_file
. /path/to/myscript.sh
. /path/to/script.sh
. /path/to/script.sh
. /path/to/settings
. /path/to/temp/file
. /usr/Mytest/Log_Deleter.prop
. /usr/bin/tasks
. C:/twitter4j-3.0.5/lib/*
. C:/twitter4j-3.0.5/lib/twitter4j-core-3.0.5.jar C:/twitter4j-3.0.5/lib/twitter4j-stream-3.0.5.jar
. FILE
. Hello Luke Skywalker
. changePrompt.sh
. cmd
. cookies.txt
. create_replica_set.sh
. ec2
. external.sh
. file
. file
. file.sh
. input.ini
. myScript.sh 1 0 1 1
. my_script
. myfile.sh
. myscript.sh
. myscript.sh
. myshell.sh
. myshell.sh
. parameters.txt
. parentScript
. script env
. script-two.sh
. script.sh
. script.sh
. script.sh
. scriptfile
. scriptname ...
. scriptname arg1 arg2
. setdir.bsh
. show_parms.sh foo
. somefile
. test.dat
. test.sh
. the_other_script.sh
. var
. virtualenv_activate.sh
. your_script.sh
. ~/.bashrc
. ~/.bashrc
. ~/.bashrc
. ~/.bashrc.local
. ~/.profile
. ~/.profile
. ~/.profile
. ~/.profile
. ~/.profile
. ~/.profile /sw/bin/perl /path/to/tv_grab_oztivo ...
. ~/.yourfile
. ~/bin/dirstack.ksh
. ~/nvm/nvm.sh
. ~db2inst1/sqllib/db2profile db2 -t -v -f myfile.sql
.*
.*
.*?x
..
.. awk -F - leftsquarebrc  - rightsquarebrc  - leftsquarebrc  - rightsquarebrc  {print $0  rightanglebrc  ("out."$2)}
.. awk BEGIN { RS = "---" } /Error/ { print; fflush(); } ..
.. stdbuf -o 0 any_other_command ..
...
...
...
...
...
...
...
... -F -  $1 == "namespace" && !_ {$0=$0 RS "foo";_=1}1 file
... -F -  $1 == "namespace" && !a {$0=$0 RS "foo";a=1}1 file
... -F -  BEGINFILE {a=0} $1 == "namespace" && !a {$0=$0 RS "foo";a=1}1 *
... -F -  FNR==1 {a=0} $1 == "namespace" && !a {$0=$0 RS "foo";a=1}1 *
... -c -l -a -s -s -p -a -t -h `ls Classes/jars/* | tr '\n' :` ... ls Classes/jars/* tr \n :
... ...
... ...
... /dir/{$ff..$tt}
... /p:customOutputDir=%1
... E F G master
... Findstr /i /L /c:User name /c:Full Name
... Runs after every change of working directory. ...
... \;
... awk $0=$NF
... awk -- $0~/ leftsquarebrc 0-9 rightsquarebrc +(. leftsquarebrc 0-9 rightsquarebrc +)*\/?$/{t=$0;sub(/\/$/,"",t);sub(/.*\//,"",t);c=split(t,a,/\./);l=0;for(i=1;i leftanglebrc =c||i leftanglebrc =z;++i){if(a leftsquarebrc i rightsquarebrc  rightanglebrc x leftsquarebrc i rightsquarebrc ){l=1;break}else if(x leftsquarebrc i rightsquarebrc  rightanglebrc a leftsquarebrc i rightsquarebrc )break}if(l){s=$0;z=split(t,x,/\./)}}END{if(z)print s}
... awk -F " BEGIN{print "Date     Time        source Format Specific data"}{print $2 " " $3} sed s/^\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)\/\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)\//\2.\3./
... awk -F - leftsquarebrc  - rightanglebrc  - leftanglebrc  - rightsquarebrc  / leftanglebrc user rightanglebrc /{print FILENAME,$3} file
... awk -F -" /^value:/{sum+=$2}END{print sum}
... awk -F -, { split( $6, f, " " )} 0+substr( f leftsquarebrc 2 rightsquarebrc , 8 )  rightanglebrc  min min=100
... awk -F -, {split( $6, f, "M" )} f leftsquarebrc 2 rightsquarebrc   rightanglebrc  min min=100
... awk -F -. a leftsquarebrc $(NF-1) rightsquarebrc ++
... awk -F -. a leftsquarebrc $4 rightsquarebrc ++
... awk -F -. a leftsquarebrc $4 rightsquarebrc ++  rightanglebrc  1 {print}
... awk -F -. {{if(a leftsquarebrc $4 rightsquarebrc ++  rightanglebrc  1){print}}
... awk -F -= {printf "%s",$2}
... awk -F t !a leftsquarebrc $1,$2 rightsquarebrc ++ && !a leftsquarebrc $2,$1 rightsquarebrc ++
... awk -v awkvar=$email {do something with awkvar} ...
... awk /frmweb/ && !/PID/ && $2+0 rightanglebrc 0 && $4!~"00:00:"
... awk /frmweb/ && !/PID/ && $2+0 rightanglebrc 0 && substr($4,4,2)+0 rightanglebrc 1
... awk { print $NF }
... awk { print NR "." $2 } xargs mkdir -p
... awk {print "dm" NR "," $0}
... awk {print $5"\t\t" $3"\t"$4} column -t
... awk {printf $2; for (i=3; i leftanglebrc =17; ++i) printf " " $i; print ""}
... awk {sub(/\r$/,x); print rightanglebrc  rightanglebrc f; close(f)} f=log.out
... column -t
... cut -d & -f 1
... gawk 1;{fflush()} RS=rn
... grep --label {} -o -H -P \\HF= leftsquarebrc - rightsquarebrc ?d+(.d{1,4})?
... grep -B 3 Mail last read awk /Login:/ {name=$2} /Mail last read/ {print name, $0}
... grep -i congratz|we found ...
... grep -o -P (? leftanglebrc = leftanglebrc sometag param=').*?(?=' rightanglebrc )
... grep Link sed s/\/100//g tr =   awk {printf "{\"link\":"$3",\"signal\":"$6",\"noise\":"$9"}"}
... grep _ leftsquarebrc 0-9 rightsquarebrc *_ leftsquarebrc a-z. rightsquarebrc \+/combined
... grep asdf sed -e s:.*-ProcessName=\( leftsquarebrc ^  rightsquarebrc \+\).*:Process \1:
... grep value: awk {sum+=$2}END{print sum}
... mail -s Test Data address1@company.com address2@company.com
... myfile.txt
... myfile.txtrn
... nawk -F -; -v now=$now -v commentValue=$commentValue
... paste -d -, -s
... paste -d -, -s sed s/,/, /g
... perl -M -P -O -S -I -X -n -e -s -/ -d -/ -/ -; -  -p -r -i -n -t -  -s -t -r -f -t -i -m -e -( -% -T -  -, -  -l -o -c -a -l -t -i -m -e -) -, -  -$ -_
... perl -n -e print scalar split(/\$,\$/), "\n" sort -u
... print_2nd_line 2
... printf %sn ${line%$'\r'}
... read -n 1 -p do stuff?  leftsquarebrc y/n rightsquarebrc  :  -u 3 resp
... read line cd $line git pull
... sed -E s|(:// leftsquarebrc ^/ rightsquarebrc +/).*(- leftsquarebrc 0-9 rightsquarebrc +)\.html/.*|\1\2|
... sed -e s/#MYDATE#/$(date +'%A %d %B %Y')/ date +%A %d %B %Y ...
... sed -e s/% rightsquarebrc //g ...
... sed -e s/%% rightsquarebrc //g ...
... sed -e s/CST//g
... sed -e s/PST//g
... sed -n -e 2p
... sed -n /$col1/{s/$col1/$col2,$col1/i; p}
... sed -n s/.* leftanglebrc sometag param='\''\( leftsquarebrc ^'\'' rightsquarebrc *\)'\'' rightanglebrc .*/\1/p
... sed -r s/( leftsquarebrc ^; rightsquarebrc *;){4}/&\n/g
... sed -r s/(domainid=).*( leftsquarebrc 0-9a-f rightsquarebrc {8}(- leftsquarebrc 0-9a-f rightsquarebrc {4}){3}- leftsquarebrc 0-9a-f rightsquarebrc {12}).*/1'2'/i
... sed /^#include/s&\\&/&g
... sed s/.*Rev\.\( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/
... sed s|\(:// leftsquarebrc ^/ rightsquarebrc */\).*\(- leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\)\.html/.*|\1\2|
... sort -k 1  rightanglebrc  file } ...
... sort -k 1 } ...
... sort -k 4 -t -:
... sort -k 4 -t -: tee index.by.word awk FS=":" {print $4} uniq -c
... split -l 1000000 --filter gzip  rightanglebrc  $FILE.gz
... split -l 999 -d --filter  rightanglebrc  ${FILE}.list files_xselect.
... tar -c -f -F ...
... tdbloader --loc DB --
... tr -d \r
... working  leftsquarebrc hh:mm:ss rightsquarebrc  00:07:58
... xargs -I {} xmllint --format {} --output formatted/{}
... xargs -r kill -9
....
.... -k 1,1nr -k 2,2nr -k 3,3nr -k 4,4nr -k 5,5nr ....
.... -m -t -i -m -e +1 -p -r -u -n -e -e -x -e -c ...
.... GREP_COLOR=01;31 egrep -i --color always ^.*drop.*$|^.*deny.*$|$
.... awk /^value:/{sum+=$2}END{print sum}
.... awk { a+=1; print} END { print "total match number: " a}
.... grep -o  leftsquarebrc ^  rightsquarebrc *$
.... sed -n /my_pattern/,$p
..... User-Agent ....
..... tail -1 cut -f 1 xargs -i sed -n {},$p your_file
....... awk BEGIN {res="Down"} /^445.*smbd\s*$/ {res=$3} END {print res}
....... sed s@\\@@g
....... sed s@\\@@g
.....^IUser-Agent .....
.....bogus -c -p targetdependency* srcmainjavaBogus.java
....pv -c -N untar -s $(du -sb /root/networkshare/someFile.tar | awk '{print $1}') du -s -b /root/networkshare/someFile.tar awk {print $1}
.../rename: Perl script, ASCII text executable
.../rename: Perl script, ASCII text executable
...047%%Y%%m%%d %%H%%i%%s047...
...: binary operator expected
...app/ MyShell
...app/ MyShell
...things...
../d/script.sh
../lib/Cake/Console/cake Hello
../otherstuff/code.py
../programming/ctest/arg $i
../rsyncsnapshot.sh daily 10
..unzip -o ..%1
./*
./A arguments
./After.sh 123 for f in *; do echo $f; done
./B.sh
./Compile myprogram.c -o myprogram -l -l -i -b -r -a -r -y
./FOO ./foo ./FOO
./Foo.sh
./Foo.sh my/path/goes/here
./MyCocoaApp -a -r -g -1 42 -a -r -g -2 Hello, world! -a -r -g -3 /path/to/file.txt
./MyCocoaApp -a -r -g -u -m -e -n -t /path/to/file.txt
./MyProg ./MyProg2
./MyProg cat inputdata.txt ./MyProg2
./ShellFile.sh
./ShellFile.sh pathToLogFile.log
./YourJarFile.jar
./a.bat "a&b"
./a.bat "a&b"
./a.out
./a.out
./a.out
./a.out
./a.out $23
./a.out *
./a.out ./b.out
./a.out 1 * 2
./a.out source
./a.out source
./a.out tee  rightanglebrc (grep foo  rightanglebrc  foo.txt)  rightanglebrc (grep bar  rightanglebrc  bar.txt)  leftsquarebrc etc rightsquarebrc  grep foo grep bar
./a.out tee  rightanglebrc (grep foo  rightanglebrc  out.txt) grep foo grep baz
./a.out tee output
./a.out tee output
./abc.py -c ./abc.py -p ''a!s!d!f'' -c 'ifconfig'
./abc.py -c ./abcy.py -p 'a!s!d!f' -c 'ifconfig'
./abc.sh
./abc.sh
./android update sdk --no-ui
./anotherScript ${@:2}
./app $file $text
./app --help
./as-cmd
./assests.sh ver1
./atompot
./audit.sh myotherfile.csv MyOtherAudit.txt
./b.sh
./bash2: line 3: if leftsquarebrc  =0  rightsquarebrc : command not found
./bashor.sh path/to/input.txt
./behead.sh inputfile outputfile
./bin/behat
./bin/elasticsearch
./build.sh grep `pwd` pwd xargs -I % cp % target_folder
./build.sh xargs -I % cp % target_folder
./cake bake
./caller.sh -f -  -- -h -e -l -l -o -  -- -q -  -" -b -l -a -h -"
./caller.sh -f -h -e -l -l -o -q "blah"
./caspser.pl
./check_apache2.sh -H localhost -P 8443 -S
./child tee file
./clean.sh
./cmd
./code perl -e " use q leftanglebrc  rightanglebrc  or qq++ here "
./command
./command1 grep ^\ leftsquarebrc  awk { print $2 }  xargs ./command2
./commands.txt
./commandthatputsstuffonstdout tail -c +1025 ...
./configure --prefix $HOME/eco
./configure --prefix /home/ubuntu/mystuff
./configure --with-sed gsed
./configure CC=gcc -arch i386 CXX=g++ -arch i386
./configure CPPFLAGS=-I/usr/include
./configure make make install echo All good!
./configure make make install echo All good! echo Something's awry
./configure make make install rm -r -f /install/path
./correlate user*
./cpi
./cppapplication.exe  0 1 1 0
./crclient -l u09me215
./dat2dot data.dat
./daterange.awk inputfile
./dbbkup.sh prefix
./deleteme no mp3
./dir.sh 2
./do_something.sh
./doit tee -a log
./download.sh
./env.rb
./ex17
./ex17
./example 5 hello how are you
./example.pl
./example.sh
./example.sh
./execSudoScript.sh --sudoUser root --sudoPwd pass ls /opt
./expect.sh $SERVER1_PASS ssh root@$SERVER1
./export.sh EXPORT_FLT_2
./extractimages terms.txt http://system.com
./factorial.awk
./fakeswap.sh
./file1.bash
./filename
./fileparts file1 file2 anotherfile somemorefiles*.txt
./findfiles.sh /var/log/ *.txt
./follow.sh ./main.sh
./foo
./foo --option bar file1.txt file2.txt file3.txt
./foo -n / bar
./foo -o /dev/stdout less
./foo -p / bar
./foo ./bar ./baz
./foo echo y ./bar ./baz
./foo.sh
./foo.sh a a b b c c
./foo: line 9:  leftsquarebrc 1: command not found
./function-script arg1 argument 2 arg3
./generateReport -i `find . -name "file*" -mtime -1` -o output.html find . -name file* -mtime -1
./generateReport -i file? -o output.html
./generate_commands bash
./getdata.v7 $1 $2
./getopt.sh arg1 -s opt1
./grammer facts.pl queries.pl
./grandparentScript CD_TO_USER_NAME_OPTION
./grep-result.sh
./hello
./hello
./hello-world
./hello.bash
./hello.sh
./hhhqst
./hiefe.txt
./ind apple banana cantaloupe dates
./initVars.sh
./install.sh
./interact
./java_ee_sdk-7-jdk7-macosx-x64-ml.sh
./jmeter.sh -t Block1Thread-1000.jmx
./jsonValueExtracter.pl -s exampleId curl http://brsitv01:8080/exampleId/$i
./jvmtop.sh --once grep $process
./keychain_access -p password_for_exported_private_key Name of private key
./killMyPorts 5000
./load.php $filexml
./load_data.sh TCOMPASS/Protocol
./lol.py $(if  leftsquarebrc  -n "$URL"  rightsquarebrc ; then echo -u "$URL"; fi)  leftsquarebrc  -n $URL  rightsquarebrc  echo -u $URL
./loop.sh stdbuf -o 0 cut -d -  -f 3
./m4 `python -c 'print "\x66\x66\x'${hex_offset}'\xed\xff\xbf\x'${hex_base}'\xed\xff\xbf%49135c%88$hn%14153c%89$hn"'` python -c print "\x66\x66\x'${hex_offset}'\xed\xff\xbf\x'${hex_base}'\xed\xff\xbf%49135c%88$hn%14153c%89$hn"
./make.o
./make.o output$ctr.txt
./manage.py dbshell
./manage.py runserver
./manage.py shell --plain
./matlab_batcher.sh myfunction myinput
./mc.sh
./memcached -v -v
./mipsim test1
./mkiso aa.iso bb.asm
./mm.sh  -o -n /home/lukas/xyz
./mongo localhost:27017/dbname
./my-script -a file1,file2,file3 -d file4,file5,file6 -r file7,file8
./myPlotter.R $fileWithSpeeds $titleOfGraph $lowestHP $highestHP
./myProgram.exe arg1 arg2 arg3
./myScript
./myScript first argument has spaces
./myScript rootDirectoryWhereSearchForFiles
./myScript.sh -d target_folder file1 file2 file3... fileN
./myShellScript.sh
./my_program $*
./my_program `ls My_FOLDER/ | sort -R | head -n 100` file_to_output ls My_FOLDER/ sort -R head -n 100
./my_script input_file output_file
./my_script.sh
./my_script.sh /home/user/file1.txt /home/user/file2.txt
./my_script.sh lp -d  leftsquarebrc PRINTER rightsquarebrc 
./my_script.sh param1 param2
./my_secured_process some parameters
./myawk.awk inputfile
./mycode somefile sed -f sedfile
./mycode somefile sedfile
./mycommand smallcmd1
./myprogram 11*15
./myprogram echo failure
./myprogram echo success
./myprogram tee $g-$number-results.txt
./myrage.sh insert into Processing values(1,2,3,'huge bear');
./myscript
./myscript
./myscript
./myscript ./otherscript
./myscript Text1 Text2
./myscript bash -c echo "$myvar"
./myscript echo 
./myscript echo "${myvar}"
./myscript echo ${myvar}
./myscript file 1.gpx file 2.gpx
./myscript foo bar ick poo
./myscript foo bar ick poo
./myscript http://www.example.com my other filename with spaces
./myscript my_host 192.168.1.100 foo
./myscript.pl
./myscript.pl runabnormal --help /sbin/proc -f filename --config set.config --log me.log
./myscript.py
./myscript.py $( leftanglebrc  pids.txt) -a something here -b something else
./myscript.py $(cat pids.txt) -a something here -b something else cat pids.txt
./myscript.py ./foo.txt ./biz/foobar.txt ./baz/yougettheidea.txt
./myscript.sh
./myscript.sh
./myscript.sh
./myscript.sh
./myscript.sh
./myscript.sh $( leftanglebrc  mycmds.txt)
./myscript.sh $@
./myscript.sh -m 1 -i $I -t 2142
./myscript.sh 20120705
./myscript.sh 5 3 89 12
./myscript.sh arg1 arg2 arg3
./myscript.sh dir1 dir2 .. dirN
./myscript.sh example.asm
./myscript.sh example.o
./myscript.sh foo
./myscript.sh localhost?x=1&y=2&z=3
./myscript.sh tee output.log
./myscript1.sh $(./myscript2.sh my_string) ./myscript2.sh my_string
./mysql -u root -p
./new.sh 2013-03-20 201
./node_modules/.bin/tsc -v
./optAlg.exe $inputFile 500
./our_program
./our_program hello.txt
./out_program hello.txt output.txt
./package
./parse.awk input.txt
./parser xargs ./adder
./passwrd.sh sohan$23
./pax.sh: line 7: bye: No such file or directory
./plot.plt
./plot_file_in_terminal Mset
./plot_file_in_terminal sine
./prgm_bin_file mydata
./prime.sh $rem
./print_args *
./print_args *
./print_args a b
./printer_script $(sort -nrk4 $file) sort -n -r -k -4 $file
./prog $( leftanglebrc file1.txt) $( leftanglebrc file2.txt)
./prog `cat file1.txt` `cat file2.txt` cat file1.txt cat file2.txt
./prog tee  rightanglebrc (grep -i 'grep1'  rightanglebrc  file1)  rightanglebrc (grep -i 'grep2'  rightanglebrc  file2) grep -i grep1 grep -i grep2
./prog_name -d -o direct_io test_directory
./program
./program
./program
./program
./program
./program  leftanglebrc (sed "/^number=/s/=.*/=5/" baseinput.ini) sed /^number=/s/=.*/=5/ baseinput.ini
./program --bash
./program ...
./program grep Total Events Processed\|Total Remote (shared mem) Events Processed
./program tests/*
./r_script.R arg1 arg2
./random: line 14: 86: No such file or directory
./record_table_load_stats.sh MODEL $dtMODEL
./redelimit
./redelimit
./rename.sh *gif
./renumber {A,B,C}/run.txt
./reset_db.sh
./resizemany.sh allfiles\(.*\).jpg 30 newnames\1.jpg
./restart-apps app1 app2 app3 ...
./rtest 2
./run
./run
./run
./run -r ,.?!:;() leftsquarebrc  rightsquarebrc {} text1.txt
./run -r ,.?!:;() leftsquarebrc  rightsquarebrc {}" text1.txt
./run tee output.txt
./run text.txt ./check
./run.sh 465
./run.sh list.txt
./runArguments.sh
./runArguments.sh $(grep foo bar.txt  rightanglebrc  output.txt) grep foo bar.txt
./runArguments.sh eval grep foo bar.txt  rightanglebrc  output.txt
./run_prog grep READ
./run_some_process tail -1 0
./runall fold -w 80 tee ${log_file}
./runtest :
./s2 $1
./s3cmd
./samtools view mybamfile.bam awk -F -t { print $2 }
./script
./script -a
./script -i some text
./script ./other-script
./script /home/*/public_html php.ini module.so
./script /home/*/public_html php.ini module.so
./script A B C D
./script less +Gg
./script less x rm x
./script test\42
./script test\42
./script tgt ver this is the description rev-1.1.1 -d apt-transport-https  rightanglebrc  0.8.16~exp12ubuntu10.15 -d mongodb  rightanglebrc  1:2.0.4-1ubuntu2 -d ntp  rightanglebrc  1:4.2.6.p3+dfsg-1ubuntu3.1
./script tr \n  
./script-name
./script-two.sh
./script.awk data2.txt data1.txt
./script.awk file1 file2
./script.awk regex logfile
./script.awk regex outputfile1 outputfile2 inputfile
./script.bash *.sql
./script.bash sql_dir/*.sql
./script.bin sed s/$/ IP=$IP/ tee -a file.log
./script.pl -t 2010/11/29 09:39:57
./script.pl in.txt
./script.py --aligner aligner1 param=12 --aligner aligner2 param=30 other_param=28
./script.py 1 2 3 4.0 5.0
./script.py `cat args-file` cat args-file
./script.r
./script.sh
./script.sh
./script.sh
./script.sh
./script.sh $@
./script.sh -n 4 -g AAA TGC sequence.fasta
./script.sh /tmp *~
./script.sh arg1 arg2
./script.sh check1.txt
./script.sh check1.txt 123
./script.sh domain email from_email rcpt_email
./script.sh file.c
./script.sh file2.txt file1.txt
./script.sh file24.txt
./script.sh file_name_test.txt 5
./script.sh filename.txt 30
./script.sh folder/*
./script.sh foo *.txt
./script.sh oldfile newfile
./script.sh root /bin/echo apple pie
./script.sh tee /dev/fd/2
./script.sh tee script.out
./script.sh tee script.out awk /^Password/ {print;}
./script.sh test1$test2
./script.txt tee -a example.txt
./script1.sh ./script2.sh
./script1.sh ./script2.sh
./script2.sh $@
./scriptTwo.sh ${array leftsquarebrc @ rightsquarebrc }
./script_name
./script_name.py
./scriptfile.sh
./scriptname G_P_map.txt G_S_map.txt S_P_map.txt
./scriptname arg1 arg2
./scriptname file  rightanglebrc  newfile
./scriptname file newfile
./scriptname inputfile
./scriptname sendcommand command with spaces
./scriptname.sh -t desktop -n
./scriptname.sh -t minimal -n
./search.sh 3.175399 21.913555
./search.sh echo
./search_replace
./search_text.sh string_to_search *
./search_text.sh string_to_search file1 file2
./second $@
./second -t $(./first -t) -s $(./first -s) -o output.txt ./first -t ./first -s
./sedS.sh
./sendsms.php -u your_username -p your_password -k your_api_key 447771234567 Hello from CLI
./sendxms +$var1 $string -p -S -M -P -P -O -t -e -s -t
./sendxms +$var1 $string -p -S -M -P -P -O -t -e -s -t
./setenv.sh
./shellcode `echo "something"` echo something
./show_parms.sh foo
./sign cat
./simple.sh *
./solar_sim $i $j
./solar_sim i j
./someScript.sh foo bar
./some_script.sh*
./somefile
./somefile
./someprog $@
./someprogram tee /dev/tty sed -u s/^.\{2\}//
./spellcheck corpus_colors
./sqlitestudio-2.0.22.bin
./sshlogin.exp password 192.168.1.11 who
./start.sh -d -a -y -o -f -f -s -e -t 1 -p -r -o -c -e -s -s -M -o -d -e true
./start.sh 1 true
./start_parallel.sh
./startup.sh
./stats.sh
./stopWithZip.sh
./stream_generator egrep --line-buffered TICK ./topic_processor
./strptime Mon Feb 27 16:21:34 WET 2012 %a %b %e %H:%M:%S %Z %Y
./sub.sh sed -n s/^MAGIC: //p
./sumcell.awk table*
./sumcell.awk table1 table2 table3
./svnfixversion ./ 1.5 --verbose
./svnfixversion ./ 1.5 --verbose less
./test /home/stack over flow/location
./test 3 2 *
./test 3 2 *
./test abc "def ghi"
./test.csh
./test.exp -d user1 pass1
./test.pl awk { print strftime("%Y-%m-%d %H:%M:%S"), $0; }
./test.py http://example.com
./test.rb
./test.rb test1 test2
./test.sh
./test.sh
./test.sh *.cpp
./test.sh /media/2C44138344134F48/RB1
./test.sh 1 2 3 4
./test.sh FILENAME LINE_NUMBER FIELD_NUMBER
./test.sh awk {if(!match($0, /^\+ echo/)){print $0}}
./test.sh grep -v ^\+ echo
./test.sh rc_file bashrc_snippet
./test.sh this is "some test"
./test.sh.x sleep 0.2 kill -S -I -G -S -E -G -V $!
./test1.sh
./test2 server1:nginx,mysqld server2:sshd,apache2
./testX.sh Hello World Foo Bar
./test_shell.txt
./testarg.sh -A -R -G -1 $ARG1 ${ARG2:+-ARG2 $ARG2} -$ -A -R -G -3
./testess.sh test1 test2 test3
./testess.sh test1 test2 test3 test4 test5
./testscript.sh -p somestring -i /home/android/test/abc.xml -o /home/android/outputfolder
./thatScript.pl inputFile.html
./the-script.sh fulltext 5k_list_*
./the-script.sh fulltext 5k_list_1 5k_list_2  leftsquarebrc ... rightsquarebrc 
./this-script.sh
./thunderProfileBU.sh: line 23: cd: //media/My: No such file or directory
./thunderProfileBU.sh: line 23: cd: /mcp/.thunderbird/lOdhn9gd.default: No such file or directory
./tinymce_compressor.sh
./tmp.sh tee  rightanglebrc (cat  rightanglebrc &2) cat
./train.sh -f testf test1 test2 test3 test4
./translate.pl CharMap.txt sample.txt
./twice.sh 15
./two.sh
./update configfile key2 test
./upload_to_github minor change
./useless.sh sed s/Output/Useless/
./userspecifiedcmd.exp root $password $server $usrcmd
./valecho
./verify-export-realtime.sh sh -x lca_query.sh sh -x liv_query.sh sh -x lqu_query.sh
./version.sh -x foo -c
./webbmaster_bellarose_joomla_12-29-2009.sql.gz
./webbmaster_bellarose_joomla_2009-12-29.sql.gz
./wget_by_link_text http://www.ofsted.gov.uk/filedownloading/?id=1295389&type=1&refer=1 Please download the requested file here
./wget_by_link_text url link_text  leftsquarebrc save_as rightsquarebrc 
./workers.sh
./wput/wput.exe -N deploy ftp://****:****@address.co.uk/public_html/java/desktop/
./wrap.sh ./tool --formula "Foo bar baz"
./wrapper -q --params somefile1 somefile2
./wrapper input.txt myprog possible command line arguments
./xml-translator.bash en fr ./input.xml
./xmlparse.sh $your_one_line_xml
./your_file_name.rb
./your_program true read tmp echo $tmp
./your_script.sh
./your_script.sh sh -x
./yourprog uniq
./yourscript -f -. -/ -f -i -l -e -n -a -m -e -  -w -i -t -h -  -s -p -a -c -e -s
./yourscript ./read1000.sh
./yourscript Buildings.csv sort -u
./yourscript file1 file2 ...
./yourscript parameters
./yourscript.sh
.09197621484831000000
.DS_Store
.EXE .BAT .CMD .VBS .VBE .JS .JSE .WSF .WSH .RB .RBW
.FindDocs.ps1
.PHONY: all
.PHONY: clean
.PHONY: test
.command1 awk /^\ leftsquarebrc / { print $2 } xargs ./command2
.cshrc
.dotnetTestRunner -f -o -r -m -a -t xml -r -e -s -u -l -t -s results.xml localhost 8080 FrontPage.MemoryMustPass
.git/refs/remotes/remotename/branchname
.help
.my.ps1 Tee-Object -f -i -l -e stdout.txt
.profile
.tables
.type e:/babak/git/bin/test.txt
/
/
/
/
/
/
/
/
/
/ * class=item_title
/ , NR~/^8$/
/ /
/ /
/ leftsquarebrc 
/ leftsquarebrc  leftsquarebrc .a. rightsquarebrc / rightsquarebrc /
/ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc / rightsquarebrc /
/ leftsquarebrc  rightsquarebrc / rightsquarebrc /
/ leftsquarebrc . rightsquarebrc /
/ leftsquarebrc / leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc /
/ leftsquarebrc 0-9 rightsquarebrc +. leftsquarebrc 0-9 rightsquarebrc +. leftsquarebrc 0-9 rightsquarebrc /
/ leftsquarebrc 0-9A-F rightsquarebrc {8} leftsquarebrc ^_ rightsquarebrc +_/
/ leftsquarebrc ^ -~ - rightsquarebrc 
/ leftsquarebrc a-zA-Z0-9_ rightsquarebrc +. leftsquarebrc 12 rightsquarebrc  leftsquarebrc 90 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 01 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc /
/ valign=top v++%2
/ { print $0 }
/ { print $0 }
/ {print $1n
/#/ {print $1}
/(A B) D/ s//1 C/
/* This will go away */This will stay
/**/
/,2/
/.*21 leftsquarebrc 34 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc {3}.*/ {p}
/./
//a leftsquarebrc @id=infgHeader rightsquarebrc /@text
//a leftsquarebrc img rightsquarebrc 
//depot/... //my-client/...
//depot/main/my-project/... //my-client/main/my-project/...
//div leftsquarebrc @class=fullImageLink rightsquarebrc /a
//g
//ns:Style leftsquarebrc .//ns:color leftsquarebrc contains(text(), "ccff00ff") rightsquarebrc  rightsquarebrc 
//ns:Style leftsquarebrc .//ns:color leftsquarebrc contains(text(), 'ccff00ff') rightsquarebrc  rightsquarebrc 
//row leftsquarebrc field leftsquarebrc 1 rightsquarebrc =Charterish rightsquarebrc /field leftsquarebrc 4 rightsquarebrc 
/1
/1/
/2/
/6\.0\.0\.0\. leftsquarebrc 0-9 rightsquarebrc {3}/!s/6\.0\.0\.0/6.0.0.0.001/g
/6\.0\.0\.0\.\d{3}/!s/6\.0\.0\.0/6.0.0.0.001/g
/6\.0\.0\.0\.\d{3}/b; s/6\.0\.0\.0/6.0.0.0.001/g
/A B / s/D/C/
/Applications/DiffMerge.app/Contents/MacOS:/usr/bin:...etc
/Applications/Emacs.app/Contents/MacOS/Emacs
/Applications/Genymotion.app/Contents/MacOS/player --vm-name xxxx
/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to pdf thefile.odt
/Applications/MAMP/Library/bin
/Applications/MAMP/Library/bin/mysql -u -U -s -e -r -n -a -m -e -p -P -a -s -s -w -o -r -d
/Applications/MAMP/Library/bin/mysql -u root -p
/Applications/MAMP/bin/php5.3/bin
/Applications/MAMP/bin/php5.3/bin/php
/Applications/MATLAB_R2008a/bin/matlab -n -o -d -e -s -k -t -o -p -r run Documents/MATLAB/BLS/BLS; exit;
/Applications/Mathematica.app/Contents/MacOS/MathKernel -n -o -p -r -o -m -p -t -r -u -n  leftanglebrc  leftanglebrc $1
/Applications/Mathematica.app/Contents/MacOS/MathKernel -n -o -p -r -o -m -p -t -r -u -n  leftanglebrc  leftanglebrc test.m
/Applications/MonoDevelop.app/Contents/MacOS/mdtool build MySolution.sln
/Applications/PackageMaker.app/Contents/MacOS/PackageMaker
/Applications/Utilities/Automator.app
/Applications/path/to/subl
/BEGIN_FOO_END/b; s/BEGIN_\(.*\)_END/(\1)/g
/DVERDOT=8.0.0.0
/Eth|Net/{if ($2 ~ /^Eth|^Net/) print}
/Library/Frameworks/Python.framework/Versions/X.X/bin/python
/N
/StartServers/ s/ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc */$ifmodfork_StartServers/
/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -k -i -l -l -s -e -e -d
/System/Library/Frameworks/Python.framework/Versions/X.X/bin/python
/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I
/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I awk / SSID/ {print substr($0, index($0, $2))}
/TR C:Documents and SettingsAll UsersDesktopABC.exe
/Users/ leftsquarebrc username rightsquarebrc /Application Support/Google/Chrome/
/Users/ leftsquarebrc username rightsquarebrc /Library/Caches/Google/Chrome/Default/
/Users/Robert/Desktop/Untitled.sh /Users/Robert/Desktop/file.txt 6
/Users/justinz/.rvm/scripts/rvm
/Users/simont/bin/batcharge.py
/Users/userme/.rbenv/versions/1.9.3-p194/gemsets/global
/Users/username/Library/Enthought/Canopy_64bit/User/bin/
/Volumes/backMeUp/main/Comics/Bleach/Volume 004/bleach_031.zip
/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * class=item_title
/^ leftsquarebrc  t rightsquarebrc *COMMAND/ s/OLD/NEW/g
/^ leftsquarebrc 0-9 rightsquarebrc + leftsquarebrc ^0-9 rightsquarebrc + leftsquarebrc 0-9 rightsquarebrc *,/p
/^ leftsquarebrc 0-9 rightsquarebrc +/d
/^ var/N
/^# leftsquarebrc ^! rightsquarebrc /d
/^#/!{s/a/b/ s/c/d/}
/^#/d
/^-/
/^....../
/^.{6}/
/^INSERT/, /.* / {print}
/^hits/{ hits+=$NF} /^misses/{misses=$NF}
/a/b/c/foo.txt
/a/b/c/x/a/b/foo.txt
/address/
/b/,/d/s/./X/
/backups/world_Mon_Feb__3_21:56:33_PST_2014
/bin/bash --login
/bin/bash --rcfile ~/.pycharmrc
/bin/bash -c $(printf "%q " "$@") printf %q  $@
/bin/bash -c $cmd
/bin/bash -c Command1 && Command2....
/bin/bash -c FUEL_ENV=development; /usr/local/bin/php /home/net/###DIR###/oil refine TaskName 2 rightanglebrc &1
/bin/bash -c TERM=something; eval "$1" -- SomeUserInput
/bin/bash -c echo cat output{1,2}
/bin/bash -c ps -eo pid,command | grep -v bash | grep syslogd | awk '{print $1}'
/bin/bash -c test -e failurefile && retrycommand -someflag -etc
/bin/bash -c while true; do echo `date`; sleep 1; done
/bin/bash -l -c The entire command line that you want to execute
/bin/bash a.sh 1 2 3
/bin/bash my_script input_file output_file
/bin/bash myscript arg1 arg2  arg4
/bin/bash myscript.sh arg1 arg2 arg3
/bin/command.out
/bin/cp .....
/bin/date +%V
/bin/date -d 20100215
/bin/date -d 20100215 +%V
/bin/echo $elem
/bin/echo Timestamp: `/bin/date +"%m-%d-%y %T"` Files: `/usr/sbin/lsof | /bin/grep app | /bin/wc -l` /bin/date +%m-%d-%y %T /usr/sbin/lsof /bin/grep app /bin/wc -l
/bin/echo `date` $* date $LOG
/bin/echo foo bar barfoo foobar barbar foofoo
/bin/env perl -w
/bin/false
/bin/grep pcsi-selector=" /LDCManifest.xml cut -f 2 -d "
/bin/grep pcsi-selector=" /LDCManifest.xml cut -f 2 -d "
/bin/hostname -s /usr/bin/tr A-Z a-z
/bin/kill -- -$ -$
/bin/kill -9 1234
/bin/kill -f 1234
/bin/ls
/bin/ls
/bin/ls  leftsquarebrc ^D rightsquarebrc *.sql
/bin/ls *.sql
/bin/ls -l
/bin/ls -l $line grep -i No file
/bin/ls /tmp
/bin/mv ...
/bin/phpunit blabla
/bin/ps -A -o -c -o -m -m -a -n -d -, -p -i -d -, -p -p -i -d /bin/grep  1$ /bin/grep /php /bin/awk { print $2; } /usr/bin/xargs --no-run-if-empty kill -9
/bin/ps -f -u $USER grep ABCD grep -v grep awk {print $2}
/bin/sed -i s/HOSTNAME=.*/HOSTNAME=${HOSTNAME//./_}/g /etc/sysconfig/network
/bin/sh
/bin/sh $0 background
/bin/sh $PENTAHO_HOME/kitchen -f -i -l -e $ETL_JOB_HOME/sync_job.kjb
/bin/sh -c  leftanglebrc command rightanglebrc 
/bin/sh -c . /somepath/script.ksh argument
/bin/sh -c . /somepath/script.ksh argument
/bin/sh -c /bin/df | awk 'END{gsub(/%/, "", $5); print $5}'
/bin/sh -c /bin/df | awk '{p=$5} END{sub(/%/, "", p); print p}'
/bin/sh -c /bin/true $i
/bin/sh -c /home/MY_SCRIPT.py /home/arguments 2 rightanglebrc  /dev/null
/bin/sh -c RAILS_ROOT/lib/parking_timer.sh STRING_VARIABLE | at 12:57
/bin/sh -c at 12:57  leftanglebrc  RAILS_ROOT/lib/parking_timer.sh STRING_VARIABLE
/bin/sh -c echo cat output{1,2}
/bin/sh -c find dir/checkpoint/features.txt -mindepth 1 -maxdepth 1 -type d -iname '20*' -exec echo "hello" ;
/bin/sh -c find dir/checkpoint/features.txt -mindepth 1 -maxdepth 1 -type d -iname '20*' -exec yourscript.sh {} ;
/bin/sh -c for dirname in $(ls -d sh_test/* | awk -F/ '\''{print $NF}'\''); do mkdir sh_test_root/${dirname}; cat sh_test/${dirname}/*  rightanglebrc  sh_test_root/${dirname}/final.txt;done
/bin/sh -c gcc --version
/bin/sh -c gcc --version gcc --version
/bin/sh -c if ps -ef | grep apple ; then echo APPLE fi ;
/bin/sh -c ls -l -R
/bin/sh -c myscript.sh echo $? echo $!
/bin/sh /somepath/script.ksh argument
/bin/sh /tmp/echoscript.sh  rightanglebrc  rightanglebrc  /tmp/log
/bin/sh /your/script/path/your_file
/bin/sh ls -l -R
/bin/sh: c: command not found
/bin/sh: cannot create : nonexistent
/bin/su -c pwd; id username
/bin/tar xf $tarfile -C $tmp $contents
/bin:/usr/bin
/bjump.*?b/
/c 0.5p_f/{n s/( leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc + leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc +)S*/1modify/}
/c/Program Files/TortoiseSVN/bin/TortoiseProc.exe /command:update /path:d:DirLocalRepo /closeonend:0
/c/WINDOWS/system32/notepad.exe $1
/c/users/file.txt
/c9d0s3/ {print}
/chaitanyavaranasi/android-sdks
/cygdrive/c/temp/dirA/
/cygdrive/c/users/file.txt
/data/source_folder/ IN_CREATE /path_to_script/file_delivery.sh $#
/def/d /page/d
/dev/bin/com/example/Hello.class
/dev/disk1s2
/elememt1/*/group1
/etc/bash_completion.d/git
/etc/cron.weekly
/etc/crontab
/etc/environment
/etc/git.bash
/etc/init.d/auditd restart
/etc/init.d/functions
/etc/init.d/httpd /etc/init.d/nscd status
/etc/init.d/sshd restart
/etc/init.d/sshd restart
/etc/init.d/syslog stop /etc/init.d/syslog start
/etc/mysql/my.cnf
/etc/profile
/etc/puppet/nodes/brackets.pl
/etc/shells
/filename. leftsquarebrc 12 rightsquarebrc  leftsquarebrc 90 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 01 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc /
/foo bar baz/d
/foo/bar/home/project/myscript.sh
/fox/{
/frmweb/ !/PID/ $2+0
/full/path/to/animate HRIT_MSG3_CTT
/full/path/to/java -j -a -r my.jar myfirst_p mysecond_p
/full/path/to/myscript
/full/path/to/rvm/bin/ext_1.9.3_bundle exec unicorn_rails -E production -D
/great/path/to/my/application/script/rails runner Student.do_something
/home/a/b
/home/a/b/c
/home/a/b/c
/home/a/b/c/home/a/b/d
/home/a/b/d
/home/admin/script2.sh $ARG1 $ARG2 $ARG3
/home/ahmed/Desktop/run.sh
/home/apercu/git/Site-Lillie-Monster/{.tmp,app}/http:/fonts.googleapis.com/css?family=Raleway:400
/home/appname/script/rails s -p 3333 -d
/home/evgeny/.Private on /home/evgeny type ecryptfs
/home/hsaka/public_html
/home/klenwell/.pyenv/versions/2.7.7/bin/python
/home/larix/.bashrc
/home/mumps/Medline2012/getDocs.mps
/home/my_username/path/myfile.swf IN_MODIFY killall gtk-gnash
/home/my_username/path/myfile.swf IN_MODIFY xargs kill
/home/myname/project/stopWithZip.sh date +%F
/home/myname/project/stopWithZip.sh date +%F
/home/myuser/watchDir/ IN_MODIFY,IN_CLOSE_WRITE,IN_CLOSE_NOWRITE /bin/bash /usr/local/bin/runT.sh $@/$#
/home/myusername
/home/rm/home-scripts/originals/audicerttest/incoming/TEST040511.txt
/home/ubuntu/testsql.sqlite .dump one/newfinal.sql
/home/user/scripts/./my_script.sh
/home/user1/run.sh $SEED
/home/whatever/bar/code/foo.txt
/home/whatever/foo/code/foo.txt
/home/you/bin/unsetsugid vim /tmp/xyz
/local/mnt/named/sbin/named -c /local/mnt/named/var/named.conf
/mnt/backup/daily0/localhost/var/www/clients/client1/web1/web/
/mnt/backup/daily0/localhost/var/www/domain.ext/web/
/mypath/abc $gateway
/opt/Oracle/Java/bin/java
/opt/local/bin/bash
/opt/local/bin/id3v2
/opt/local/bin/pgrep -P ${_pid}
/opt/sbin/script.pl --group value1 --rule value2
/p:AutoParameterizationWebConfigConnectionStrings=false
/path/to/a/banana/././././././././././././/
/path/to/bar abc 123 fixed args
/path/to/bar some args
/path/to/file -q --params somefile1 somefile2
/path/to/jvmtop.sh --once grep $process
/path/to/musicdir/genre/artist/album/track.suffix
/path/to/myscript.r
/path/to/myscript.sh 5 3 89 12
/path/to/php somefile.php
/path/to/recorder.sh
/path/to/rhino /path/to/your/script
/path/to/rtest 2
/path/to/rvm 2.1 do /path/to/script.rb args...
/path/to/script
/path/to/script.bash /usr/bin/xmessage -b -u -t -t -o -n -s button a,button b some text to test
/path/to/script.sh  leftsquarebrc multilog rightsquarebrc  leftsquarebrc 2 rightsquarebrc  s2000 ./logdir
/path/to/script: 1: CR: command not found
/path/to/ustvari.sh 3 5
/path/to/your_script.py arg1 arg2  leftsquarebrc ... rightsquarebrc 
/path/v1/module/order/some other value
/patt/!d s//repl/
/proc/
/proc/5/fd
/production/bin/title_case.awk old_name getline new_name
/program/that/generates/lines /path/to/your/php/script
/regex/
/res:MyFile.xml,MyNamespace.MyFile.xml
/root/full/path/to/leaves/
/root/public_html
/root/script.sh mail -E -s topic my@mail.com
/sbin/blkid
/sbin/ifconfig -a grep -i inet addr:
/sbin/ifconfig eth0 grep inet addr cut -d -: -f 2 awk {print $1}
/sbin/ifconfig grep -B 1 1.2.3.4 awk {print $1; exit}
/sbin/ifconfig grep inet addr: grep -v 127.0.0.1 cut -d -: -f 2 awk { print $1}
/sbin/ifconfig ppp0 grep inet addr: cut -d -: -f 2 awk { print $1}
/sbin/ifconfig sed -n 2 p awk {print $3}
/sbin/service --test-if-configured-on org.apache.httpd
/sbin/stop api
/search_replace
/share/pythonLib/lib/python2.7/site-packages/
/shared/sqoopToHdfs.sh $t
/some/long/path/we/need
/some/long/path/we/need/to/shorten
/some/path/here/phpunit ....php
/something/ { arrayPARAM1 leftsquarebrc something rightsquarebrc ++ }
/srv/user-data.sh
/str1/{found=1}
/sw/bin/perl /path/to/tv_grab_oztivo ...
/tmp/ DELETE foo
/tmp/My Batch Script Files/Processing arg1 arg2 ...
/tmp/My Batch Script Files/Processing arg1 arg2 ...
/tmp/My Batch Script Files/Processing arg1 arg2 ...
/tmp/a.sh 1 2 3
/tmp/a:5.79.78.236
/tmp/inventury.expect tr -d \r
/tmp/p.pl $@
/trunk/ui/mydialog.h
/u01/app/oracle/product/11.2.0/xe/bin/sqlldr
/user/dj/a/mydir
/usr/IBM/WebSphere/AppServer/java/bin/java -v -e -r -b -o -s -e -: -c -l -a -s -s -c -p XXXXX com.ibm.XXXX
/usr/bin/ leftsquarebrc 
/usr/bin/Rscript -e library(knitr); knit("${input}")
/usr/bin/bash -c APSHOME=/all/aps/msc_2012; export APSHOME; 
/usr/bin/ckint -d 389 -p port(389)= -h Enter a port number
/usr/bin/diff  leftanglebrc (find . -type d \( -name store_sitemap \) -prune -o -type f -exec md5sum {} \; | grep -v "bidorbuy.log") /root/scripts/forum_checkum_original.txt find . -type d ( -name store_sitemap ) -prune -o -type f -exec md5sum {} ; grep -v bidorbuy.log
/usr/bin/dscl /LDAPv3/127.0.0.1 auth $USERNAME $PASSWORD
/usr/bin/emacs -n -w /root/.bashrc
/usr/bin/env /usr/local/bin/my_interpreter /Users/modchan/test_interpreter/foo.bar
/usr/bin/env bash -x
/usr/bin/env myservice
/usr/bin/env python3 deploy_p3k.py
/usr/bin/env python3 deploy_p3k.py
/usr/bin/env zsh -c echo $fpath
/usr/bin/find /u01/app/dw/admin/dgwspool -t -y -p -e f -d -a -y -s -t -a -r -t -m -m -i -n -1 621 -p -r -i -n -t -f %P 
/usr/bin/google-chrome /tmp/myaccount.tasks.htm
/usr/bin/id $AWK -F -( {print $2}
/usr/bin/ifstat -i eth0 -b -n awk NR rightanglebrc 2 {print "Download" $1 "upload" $2; fflush()}
/usr/bin/java -X -X -: -M -a -x -P -e -r -m -S -i -z -e -= -2 -5 -6 -m -j -a -r /usr/lib/eclipse//plugins/org.eclipse.equinox.launcher_1.2.0.dist.jar -o -s linux -w -s gtk -a -r -c -h x86_64 -s -h -o -w -s -p -l -a -s -h -l -a -u -n -c -h -e -r /usr/lib/eclipse/eclipse -n -a -m -e Eclipse --launcher.library /usr/lib/eclipse//plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.100.dist/eclipse_1407.so -s -t -a -r -t -u -p /usr/lib/eclipse//plugins/org.eclipse.equinox.launcher_1.2.0.dist.jar --launcher.overrideVmargs ... and so on
/usr/bin/java -j -a -r /path/to/Pharmagistics_auto.jar -o
/usr/bin/man -P cat somecommand ul
/usr/bin/mpstat ...
/usr/bin/mysql -u root -p -e -x -p -r -e -s -s azuzDB ls -A -r -t /home/admin/Desktop/backups -A -r -t tail -n 1
/usr/bin/mysqldump --user user --password password -h hostname database date +%Y-%m-%d_%H_%M
/usr/bin/mysqldump/mysqldump --add-drop-table -u dbname -p -m -y -p -a -s -s dbname date +%Y%m%d
/usr/bin/nano /etc/paths
/usr/bin/nano ~/.bash_profile
/usr/bin/nas --whatever$
/usr/bin/open ~/.bash_profile
/usr/bin/osascript -e tell application "Finder" to make alias file to POSIX file "$Source" at POSIX file "$Destination"
/usr/bin/osascript -e tell application "System Events" to tell process "Terminal" to keystroke "k" using command down
/usr/bin/php
/usr/bin/php -f $HOME/lib/get_fifobuild.php
/usr/bin/php -f /path/to/beta.php -- -x
/usr/bin/php -v
/usr/bin/php /applications/xampp/htdocs/index.php cronControl countSales
/usr/bin/php /path/to/beta.php -x
/usr/bin/php /path/to/php/script.php
/usr/bin/php /var/www/bims/index.php projects/output xargs rm
/usr/bin/php /var/www/website/index.php controller_name function_name
/usr/bin/php artisan -n migrate:refresh sed s/^/\ leftsquarebrc migrate:refresh\ rightsquarebrc /
/usr/bin/php command
/usr/bin/php command
/usr/bin/printf %s\c */
/usr/bin/printf \u00d5
/usr/bin/psql
/usr/bin/python -t -  -- -O -  -- -V ./test.py
/usr/bin/python myfile.py
/usr/bin/rsh -n $Host_Name cat asdf.txt & echo $!  rightanglebrc &2
/usr/bin/s3cmd ls s3://my-bucket/my-prefix
/usr/bin/somebinary -a -r -g $0
/usr/bin/ssh -p 1234 -i $KEYFILE foo@$1 mkdir $TGTDIR
/usr/bin/ssh -t -t username@machinename /path/myscript.sh /path/applications-war/*
/usr/bin/sudo -H -u administrateur -- /bin/sh /path/to/your/script.sh
/usr/bin/sudo /usr/bin/nano .profile
/usr/bin/svn log $1 -r HEAD --limit 1 --incremental sed 1,3d
/usr/bin/svn update /apps/software
/usr/bin/svn update /apps/software
/usr/bin/tee -a $LOG_DIR/hosts.`date +%Y%m%d-%H%M%S`.log date +%Y%m%d-%H%M%S
/usr/bin/test
/usr/bin/time -f %es bash -c ls | wc
/usr/bin/time -f %es dash -c ls | wc
/usr/bin/time -o /dev/tty ./program
/usr/bin/time -v -o time.log java RandomTest
/usr/bin/time ./wrapper.sh ./test.sh
/usr/bin/time ls -l
/usr/bin/time sh -c ./program  rightanglebrc /dev/null 2 rightanglebrc &1
/usr/bin/vi
/usr/bin/vi ~/.bash_profile
/usr/bin/winexe -U domain/login%password //host **cmd /C %WINDIR%\sysnative\reg.exe** "QUERY" "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft Antimalware\Signature Updates"
/usr/bin/xcrun -s -d -k iphoneos PackageApplication -v ${RELEASE_BUILDDIR}/${APPLICATION_NAME}.app -o ${BUILD_HISTORY_DIR}/${APPLICATION_NAME}.ipa --sign ${DEVELOPER_NAME} --embed ${PROVISONING_PROFILE}
/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin
/usr/games/fortune cowsay -f www sed -e s/^/\t/
/usr/include/asm/signal.h
/usr/lib/kconf_update_bin/khotkeys_update --id zzz
/usr/lib/misc/xscreensaver/phosphor -p -t -y -s -c -a -l -e 2 -d -e -l -a -y 1000 -p -r -o -g -r -a -m /bin/bash
/usr/lib/nagios/plugins/check_procs -c 1:1 -a module.py -C python
/usr/lib/update-notifier/apt-check awk -F -; END { print $1, $2 }
/usr/libexec/PlistBuddy -c Set :KEY VALUE /path/to/plistfile
/usr/libexec/PlistBuddy -c Set :items:0:metadata:bundle-identifier newidentifier your.plist
/usr/libexec/PlistBuddy -c Set NSHumanReadableCopyright '${MESSAGE//\'/\'}' ${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}
/usr/libexec/PlistBuddy -c print :ProductUserVisibleVersion /System/Library/CoreServices/SystemVersion.plist
/usr/libexec/PlistBuddy -c set :PreferenceSpecifiers:0:DefaultValue '$NEW_DEFAULT_VALUE' $PLIST_PATH
/usr/local/bin/abbyyocr9 -r -l Swedish -i -f $1 -o -f $2
/usr/local/bin/eth0tx.sh
/usr/local/bin/git-upload-pack
/usr/local/bin/ios-sim launch ...
/usr/local/bin/khtml2png2 --width 1024 --height 768 --time 10 --disable-java --disable-plugins $line /var/www/$FILENAME.png
/usr/local/bin/khtml2png2 --width 1024 --height 768 --time 10 --disable-java --disable-plugins $line /var/www/$FILENAME.png
/usr/local/bin/monit --version grep -q 5.5
/usr/local/bin/php -m grep mysql -i
/usr/local/bin/php /home/script_to_run.php 1
/usr/local/bin/python2.6
/usr/local/bin/redis-server path/to/redis.conf
/usr/local/bin/sed -i -e s/${String1}/${String1R}/g;s//${String2}///${TString2R}//g ${ROOT_DIR}/data/file.sql
/usr/local/bin/sysbench --test cpu --cpu-max-prime 100 run
/usr/local/bin:/usr/bin:/bin
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin:/usr/X11R6/bin
/usr/local/cpanel/3rdparty/etc/php.ini
/usr/local/cpanel/cpanel -V
/usr/local/cpanel/cpanel -V
/usr/local/etc/rc.d/tomcat55 start
/usr/local/lib
/usr/local/lib/ImageMagick/convert images/a.pdf images/a.png
/usr/local/rvm/gems/ruby-1.9.2-p136
/usr/local/special/bin/getprop
/usr/sbin/exim -b -p awk /^ * leftsquarebrc 0-9 rightsquarebrc + leftsquarebrc mhd rightsquarebrc /{print "/usr/sbin/exim -Mrm " $3} printf To:myemail@mydomain.comnSubject: Mail queue cleanup for for My-VPS-Linuxnn bash /usr/sbin/sendmail myemail@mydomain.com
/usr/sbin/lsgroup Test-Group grep kbxb025
/usr/sbin/lsof -p $$ grep  0u cut -c 60-
/usr/sbin/lustatus awk NR rightanglebrc 3&&$3=="yes"{print $1}
/usr/sbin/route awk $2 == "*" {print $8}
/usr/sbin/tmpwatch $flags
/usr/sbin/tmpwatch $flags
/usr/sbin/useradd ... -p `openssl passwd -1 '$2'` ... openssl passwd -1 $2
/usr/sfw/bin/wget --execute http_proxy prox:8080 -q -O /tmp/$(basename ${FILENAAM}) -c http://www.dct.de${FILENAAM} basename ${FILENAAM} cp /tmp/$(basename ${FILENAAM}) desired_directory basename ${FILENAAM}
/usr/share/zsh/functions/Completion/Linux/_yast
/usr/ucb/ps -a -l -x -w -w -w
/usr/xpg4/bin/awk
/usr/xpg4/bin/sed -f sed.txt input.txt
/usr/xpg4/bin/sed /Location/{n; d}
/var/folder/program.exe -L parameters grep -q text_to_filter echo SomeText
/var/lib/einarc/tools/adaptec_arcconf/cli getlogs 1 device tabular egrep serialNumber|mediumErrors|deviceID awk {$2="";print} grep -C 2 mediumErrors   leftsquarebrc 1-9 rightsquarebrc 
/var/lib/mlocate/mlocate.db
/var/lib/mysql
/var/log/server.log: 28977
/var/log/server.log: 28977 28990
/var/test/info.domain2.com
/var/www/boinc/m52cc/query_tasks.sh m52cc -w -o -r -k -u -n -i -t -R -e -s -u -l -t m52cc_job_6;
/var/www/clients/clients1/web1/web/
/var/www/domain.ext/web/
/var/www/domain.ext/web/
/var/www/flat/app/Console/cake reminder daily_reminder
/var/www/flat/app/Console/cake reminder daily_reminder less
/var/www/includes/config.php
/var/www/magento# php shell/compiler.php state
/var/www/magento/../includes/config.php
/var/www/new/video/`basename %f` basename %f
/www/file-name/1
/your/first/command
/your/first/command
/{N N s/#beginn(.*)n#end/replaced 1/}
0 * * * * /bin/sh -c /foo/bar/my_command  leftanglebrc  my_input
0 * * * * /home/alandoyle/mc.sh
0 * * * * /path/change_wallpaper.sh
0 * * * * /path/to/above/script
0 * * * * /path/to/app/Console/cake FooBar --params... etc
0 * * * * cd home/docs/reports/ rm -r *
0 * * * * find /home/docs/reports/* -c -m -i -n +5 -d -e -l -e -t -e
0 * * * * myscript.sh
0 * * * * rm -r home/docs/reports/*
0 * * * * sh -c echo `date`: myscript starting ; /path/to/myscript  rightanglebrc /dev/null 2 rightanglebrc &1; echo `date`: myscript finished
0 * * * * timeout -s 9 3540 /path/to/your_command.sh
0 */2 * * * python /path/to/file.py
0 */6 * * * python /path/to/delete_unverified_files.py
0 --version
0 0 * * * /path/to/script.sh
0 0 * * * /tmp/myscript.bash
0 0 * * * /usr/local/cronscripts/my-backup-script.
0 0 * * * my_php_runner.bash
0 0 * * * tar czf /var/backups/file_$(date +%Y-%m-%d).tar.gz /home/files date +%Y-%m-%d
0 0 * * * tar czf /var/backups/file_$(date +\%Y-\%m-\%d).tar.gz /home/files date +%Y-%m-%d
0 0 * * 0 sh /path/to/file
0 0 1-7 * *  leftsquarebrc  $(date +\%A) == Monday  rightsquarebrc  date +%A /usr/aa1/finacc/bsheet
0 1 * * * /bin/bash -x /var/www/example.com/processors/run.sh
0 1 * * * PATH=/directory/containing/qsub:/usr/bin:/bin qsub /script.sh
0 1 * * * root /root/backup.sh
0 1,13 * * * /maint/run_webalizer.sh
0 1,13 * * * time /maint/run_webalizer.sh
0 10 * * * /path/to/script
0 10 * * * /path/to/script
0 10 * * * bash /path/to/script
0 17 * * * cd /home/user/backupfolder tar -c -p -z -f localhost.tar.gz /var/www
0 18 * * 5 /bin/bash /home/ubuntu/scripts/dev/stop.sh
0 2 * * * /bin/bash -l -c source /home/ubuntu/.rvm/scripts/rvm && cd /var/www/yoolk_statistics_api && RAILS_ENV=production bundle exec rake statistics:generate_clienst --silent  rightanglebrc  rightanglebrc  log/client.log 2 rightanglebrc &1
0 2 * * * foo
0 3 * * * /path/to/dbbackup.sh
0 4 * * * /bin/bash /path/to/script.sh
0 4 * * 1 find /home/XXXXXX/public_html/images/products -i -n -a -m -e l_*.jpg tar -v -c -f /home/XXXXXX/public_html/backups/monday_backup.tar --files-from -
0 5 * * * /bin/bash -l -c export RAILS_ENV=my_env; cd /my_folder; ./script/my_script.rb  rightanglebrc  ./log/my_log.log 2 rightanglebrc &1
0 6 * * * /usr/bin/php /Users/MilesM/Sites/meetmyfriends-back/index.php tools reset_avail
0 6 * * * php /Users/MilesM/Sites/meetmyfriends-back/index.php tools reset_avail
0 6 * * * php ~/Sites/meetmyfriends-back/index.php tools reset_avail
0 6 * * 1-5 /usr/sbin/zfs snapshot rpool@`date +"\%m-\%d-\%y"` date +%m-%d-%y
0 7 * * * mysqldump usblog bzip2 -c date --utc +%Y-%m-%dT%H-%M-%SZ
0 8,20 * * * script.sh
0 8-20/12 * * * script.sh
0 9 * * * /path/to/bashscript
0 Line3
0 leftanglebrc 3)print}
0 leftsquarebrc 1-9 rightsquarebrc   leftsquarebrc 1-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  4 leftsquarebrc 0-7 rightsquarebrc 
0 ~ s {
0%2+1}1
0,10,20,30,40,50 * * * * bash /FULL_PATH/detect.sh
0,20,40 * * * * wget URL ~/files/file-`date  rightanglebrc  '+%m%d%y%H%M'`.html date
0,30 * * * * /home/user1/script.sh
0,30 * * * 2,4 /path.to.script.to.be.run/scriptname
0,5,10,15,20,25,30,35,40,45,50,55 * * * * cd /path/to/script ksh ./myScript.sh
0-59 * * * * /var/www/html/private/fivemin/zdaemon.php
00 09 * * 7 /usr/local/bin/once_a_week
00 09 1 * * find /path/to/mail -t -y -p -e f -m -t -i -m -e +120 -p -r -i -n -t -e -x -e -c rm {} ;
00 16 * * * /etc/cron.daily/maj_cat
00 16 * * * /usr/bin/env php /var/www/dev/update.php
00,0A,45
00000000.00000000.00000000.00000000
00000011000000
000000999
00001010.00101010.01100110.11111100
00692434 ABC09638006924340017 SOME_TEXT SOME_OTHER_TEXT
00990029000000008410517183 IM1450029 1.000 Recurring 855003 ST1400029
00:00:00 54.92 239.12 231.23 882.12
00:02.0
00d:18h:42m:27s
01 00 * * 1 dtTm=`/bin/date +\%Y\%m\%d.\%H\%M\%S` /bin/date +%Y%m%d.%H%M%S export dtTm /usr/bin/mineserver -o ..... your_options_to_run_mineserver_here ...
0110011001110101011000100110000101110010
047
05 18 * * * ~/job.sh
06/28/12 14:17:10.754 117 :R: INFO  leftsquarebrc 6 rightsquarebrc  X10.cpp:4042 xevent 35932825 1 0 0
09/May/2012:05:14
09:30:37 up 269 days, 18:08, 3 users, load average: 0.00, 0.00, 0.00
0: /dev/tty, 1: /dev/null, 2: pipe
0: /dev/tty, 1: /dev/tty, 2: /dev/tty
0: /dev/tty, 1: pipe, 2: /dev/tty
0: /dev/tty, 1: pipe, 2: pipe
0:01:24:48
0:01:24:48
0=1
0=1
0^^^ 128^ 192^ 224^ 240^ 248^ 252^ 254^
0^^^128^
0^^^128^192^224^240^248^252^254^
0b00001000 0b00000010 0b00000001 =
0x434346000
1
1
1
1
1
1
1
1
1
1
1
1
1
1 * * * *
1 + 1
1 0 148248 148248
1 1 5
1 10611 rs146752890 C G 100 PASS AC=184
1 10611 rs146752890 C G 100 PASS REF=0.983607
1 2
1 2 3
1 2 3
1 2 3 6 8 9 11
1 2 6
1 52 53 54 55-vm 55 56 57 58 59 60 61 62 63 65 66 67 ah-builtin-python-bundle export-backend export lab stage-test test
1 7 $1
1 9360
1 == 1 ? 1 : 0
1 == VAL_1 $2 == VAL_2 { print MATCH }
1 Affx-14150122 0 75891 00 C T T T C T T T C T
1 not == $1  == $1
1 rightsquarebrc 
1 rightsquarebrc  = $0
1 rightsquarebrc  = $1 in r ? r leftsquarebrc $1 rightsquarebrc  OFS $2 : $2
1 rightsquarebrc ++
1 { print }
1%202%203%204%205%206%207%208
1+1
1+3*$nprop
1,2,2012-04-11,2012-04-11
1,2,3,4,,,,,,5,6,7
1,2,3,4,5,6,7,8,9,XpVm,11
1,2,4,6
1,23,56,we,,89,,2009-12-06
1,23,56,we,,89,,2009-12-06
1,3,8,25-27,4-16
1.0
1.0.0/g
1.033 1.080
1.1.1, 201
1.2.6
1.6.0_15
1.6.0_18
1.8e-308
1/*.pdf
10
10 1 * * * executeeveryxday nameofthestatefile 20 command to execute
10 10
10*${line leftsquarebrc 4 rightsquarebrc } + ${line leftsquarebrc 5 rightsquarebrc }
10**2
10.0.0.3
10/23482347234
10/May/2012:22:59
101 filename
1010010000011110101110000110111000011000010000100000011100100110001011000001...
10268n
10451
1072250520.a at Wed Dec 24 00:22:00 2003
10X0Xstring1_string2,_string3XX8X0X0X0.59X20140101205216X20140128074836X584266915X5934
11000000
111
11111111.11111111.11000000.00000000
11111111.11111111.11111111.11111111
11111111000000
1151
12
12
12 + 4 / 2
12 0,8,16 * * * /opt/maintenance/backup-databases.sh
12 1
122603
123.123.123 www.example.com  leftsquarebrc 17/Mar/2013:00:00:39 +0100 rightsquarebrc  GET /example.org HTTP/1.1 200 3810  Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots) 234  example
123.XYZ-A1,DD/MM/YYYY HH24:MI:SS,,,
12301561af82aa81a15e7392e7052b6541a384f6d
12345 987 ...
1234FOO
1234go
12:38070040-39070040 13:92416321-93446176 14:47539055-48560868 14:89244697-90244697 14:90046821-91047886 14:98556636-99556636 15:47718221-48718221
13.0.5 :: 8
1300, router 13, Corp
13277
1328828400 1329087600
134,015 people 03:36:30 PM Oct 24 2011
1352861457
1356908400
1359178584
1359178584
139382.537 entered-auto_attendant
140
15 1
15 1 * * * /bin/sh /usr/local/sbin/tarball_svn_project.sh
15 22 * * * shutdown -h 5
16
16.7631
165
178.139.20.52  leftsquarebrc 26/Nov/2011:08:21:13 +0000 rightsquarebrc  POST /test/LinkTest.cgi?e=PATTERN&t3=0:010015&t4=1322295671:587875&l=178.139.20.174&n=149 HTTP/1.1 200 17 BOT/1.26
178.139.20.52 PATTERN
18
1:g
1I:1:1,1I:1:2
1bar1
1st-field
1st-field 2nd-field
1}
2
2
2
2
2
2
2 1/2
2 10 19/4/2014 school 800m 2:20:22
2 15 * * * mysqldump -u user -p -p -a -s -s dbname gzip -9 -c date +%Y-%m-%d
2 2 * * * root ./myscript.sh
2 FS $7,$3 rightsquarebrc  += $6
2 W
2 b
2 rightsquarebrc  = $1
2 ~ /REGEX/ {ACTION}
2/g
20 19 * * * imuser /home/imuser/myscript.sh bash -c tee  rightanglebrc (logger -t MYSCRIPT)
20 20 * * * ~/.profile bash /home/muaddib/grads/get_nomads/bash/nam4.sh
20/01/2012 01:14:27 UP UserID bob abc@sample.com
200 201 202 203 204 205
2007.04.29.10.01.17
2009-04-02 14:22
2009-12-15+11:08:52.original.txt
2010-01-31 17:03:24.317 iConChange leftsquarebrc 14848:10b rightsquarebrc  *** Terminating app due to uncaught exception NSInternalInconsistencyException, reason: Error (1002) creating CGSWindow
2010.01.12
2011-10-25 15:10:10
2011-11-03T06:43:08.000Z
20110113, 132.0, 43.0, 0.0, 0.0, 43.0,210.0
20110113, 132.0, 43.0, 0.0, 0.0, 43.0,210.0
2012-01-24 21:33:22.015 CLIXMPLParser leftsquarebrc 13042:707 rightsquarebrc  /Users/zrxq/Library/Developer/Xcode/DerivedData/CLIXMPLParser-dsibnvwgoqvjnvbhlxkyzcojqnwr/Build/Products/Debug/CLIXMPLParser
2012-01-30 app10 device INFO 2012-01-30 info1 info2 info3 ...
2012-03-04 11:56:54
20120202
20120831 daily
2013-01-23 23:59:59.123456
2013-09-15
2013.11.12 13:00:00 UTC
2013.11.12 13:11:00 CET
2014-07-02 06:19:09
20140303
20140621130603.9932529560 ./fill8bit.c
2016204108
2078608.64,83169,8529,243.710709
20:00:00:24:ff:3d:bf:50
21 33210001 rs60180678 G T . .
210866803200000000
22 42960000 . A AC . .
23-50
23:00:00
2401db72-043d-46e4-b600-ada35f7f9cc1
245
245.00
245.00
25 leftsquarebrc 0-5 rightsquarebrc  2 leftsquarebrc 0-4 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc   leftsquarebrc 01 rightsquarebrc ? leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc ?
250 transfer complete.
255 Line3
255.255.192.0
255.255.192.0
27.0.0.1  leftsquarebrc 28/Oct/2012:21:38:34 +0530 rightsquarebrc  GET /phpmyadmin HTTP/1.1 301 559 Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
28/Oct/2012 127.0.0.1 Linux 1
28433 jleffler 20 0 1511m 403m 31m S 2 1.3 70:35.76 chrome
2=KBB BBBBB AD                                                                                             ,$3=BEOGRAD 
2dir 3 $(gem which rspec/core) gem which rspec/core
2underline /g
2}
2}++
3
3
3 $3 != 0{print null}
3 M N O P
3 print x, yprime}
3*}
3-1
3-48/5 * * * * foo.sh
3.0.0/
30
30 * * * * /usr/bin/echo current dir= $(pwd)  $PATH 2 pwd
30 08 * * * env
30 1 * * * /path/to/script2 date +%Y%m%dlog.txt mutt -a $(date "+\%Y\%m\%dlog.txt") -- me@example.com date +%Y%m%dlog.txt
30 10 * * 1,2,3,4,5 export DISPLAY=:0 ~/bin/webcheck.sh
30 10 * * 5 sh /home/test.sh hostnm101.abc /mypath/dir test login.info
3000
3000 FORKS
3177191281013,997,094
321
33 7 3 5
346
34:17:36
34a7
360b7de7-d7e5-455a-8eb8-0bd856c705ed,7e17bf09-e56b-428e-94c9-a7dc50991e00,9166e19c-4794-467e-baad-3f8c2f2656cb,ee721e70-a7e2-4da2-a2b0-22bec3432c3d,f5553f54-589b-4afd-a8e0-2239b23dc138
3=modify
3lax
3s/./X/
4
4
4
4
4 file3
4.0.5.6%20 805AOEtUaMu
4.5.1-RC1
404 mod 256=148
41.48500000000000000055511151231257827021181583404541015625
41.4949999999999999990285548534529880271293222904205322265625
4324321_A3something 4324321 1 0 0 0
4391465 banned.
456
47833
5
5 5 * * 1 /usr/bin/php -f /path/to/your/php/file
5 Valentine, 4 alentine, 3 lentine, 2 entine, 1 ntine,
5/30 * * * 2,4 /path.to.script.to.be.run/scriptname
50 08 * * 1-5 /bin/sh -c echo "$$"  rightanglebrc  /var/run/my_script.pid; exec /home/MY_SCRIPT.py /home/arguments 2 rightanglebrc  /dev/null
50 08 * * 1-5 /bin/sh -c exec /home/MY_SCRIPT.py /home/arguments 2 rightanglebrc  /dev/null
50 16 * * 1-5 /usr/bin/php /location/of/script/transfer.php
50%%R39%35%R43%-35%R4Z%10%RRN%0%R0M%-950
50, 500
55
55
55 15 * * 1-5 scp user@host:/path/to/file/`date +%Y%m%d`.log /tmp date +%Y%m%d
55 8 * * 1,2,6 /usr/local/bin/my_cool_script
57 1 * * 2-6 ET=`date --date 'yesterday' +\%Y\%m\%d` date --date yesterday +%Y%m%d echo $ET
58 23 * * * script
59 23 * * * source /home/zfz/cleanlog.sh
59 23 * * 1-5 /bin/sh -c read PID  leftanglebrc  /var/run/my_script.pid; kill "$PID"
59 23 * * 1-5 /usr/bin/killall MY_SCRIPT.py
59 23 12 31 * var=x export var myCommand
6
6 /dev/fd/3
6 ccg8qqqqqqqqqqqqggg 10 ccccg3qqqqqqqqqqqggggg
6 ccgggg 10 ccccgggggg
6 ccgqqqqggg 10 ccccgqqqqqqqqggggg
6 occurs 8 times in /Users/Robert/Desktop/file.txt
6 ~ /^ring...cs.utsa.edu$/
6 ~ /ring??.cs.utsa.edu/
6 ~ /ring??.cs.utsa.edu/
624.50
65 75
7 3 6
7 sum8+=$8
7 ~ /3047UTR/
7*
7.*
7.134353E+37
7699 days since 11/17/1988
7808 KiB
7z a -t -z -i -p myzip.zip /home/pradeeban/Desktop/man4/man5/*
7z a -t -z -i -p myzip.zip Desktop/man4/man5/*
7z e example.tar.gz 7z x example.tar
7zg.exe a k.7z -a -d
8.75446
822 526006 1343315205 1.4.2 32 0.000000 13.048815
9.410000
9342432_A1 9342432 1 0 0 0
981 10
98A9-D422
99
999
:
:
:
:
:
:
:
: ${A:=hello}
: ${CHOSEN_ENV_VAR:?'was not set but should have been'}
: ${FOO:="default value"}
: ${HELLO=Hello}
: ${HELLO?Need a greeting}
: ${PASSWORD_TO_RUN_SUBSCRIPTS:?Script may only be run from within script1}
: ${q = 30}
: ${q=30}
: :
: :
: : :
: FILE_PRELOAD -C execve+open+stat:/usr/bin/prog_b:/usr/bin/prog_b.old ./prog_a
: clear your_command sleep 2
: command not founde 4:
: command not foundh
: date sleep 60 tail -f -v lol kill %1
: leftanglebrc ,
: leftanglebrc ,
: leftanglebrc , !tr -d  leftsquarebrc :space: rightsquarebrc  wc -m
: leftsquarebrc range rightsquarebrc Substitute  leftsquarebrc column/ rightsquarebrc pattern/string leftsquarebrc /flags rightsquarebrc 
: loggit myscript.sh
: newfile : restart
: not found.sh: 2: graphhopper.sh:
: sleep 1 echo a
: sleep 30 clear kill -U -S -R -1 $(pgrep '^dd$') pgrep ^dd$
:!./shell.sh
:!chmod +x %
:!chmod +x filename.sh
:!echo -e \ec\e(K\e leftsquarebrc J
:!java -c -l -a -s -s -p -a -t -h Desktop HelloWorld
:%!
:%!awk {a=$2; $2=$3; $3=a}1
:%!bash
:%!xargs -L 1 -I {} rake {} --trace
:%!xargs -L 1 wc -l
:%s#( leftsquarebrc ^  rightsquarebrc ) ( leftsquarebrc ^  rightsquarebrc )#1,2#g
:%s#http://#r g
:%s/ leftsquarebrc 0-9 rightsquarebrc {4}.. leftsquarebrc 0-9 rightsquarebrc {4}/{ }/g
:%s/ leftsquarebrc { } rightsquarebrc / r/g
:%s/( leftsquarebrc ^/ rightsquarebrc *.csv)( .*)/ 1.org/
:%s/(w+)  leftsquarebrc  (w+)  rightsquarebrc : (w+)/1, leftsquarebrc 2 rightsquarebrc :3/gi
:%s/.*/echo 0rcat 0/g
:%s/^( leftsquarebrc ^, rightsquarebrc *),/ leftsquarebrc 1 rightsquarebrc :/
:%s/^(d{,3}.d{,3}.d{,3}.d{,3})(/ leftsquarebrc ^ rightsquarebrc )/1,2
:%s/^M//g
:%s/^V^M//g
:%s/n/ /
:%s/one_.*two/one/g
:%s/s+/r/g
:%s/w+/L0/g
:%s/xid: (.*) id: (.*)/1,2/
:%s:
:%s~
:*:file:_directories
:.w !bash
:/blahblah/,/bleepbleep/g/booboo/d
:0 /blahblah/,/bleepbleep/g/booboo/d
:150
:1500
:81,129s/ $ARG/ \$ARG/g
::respawn:/usr/local/sbin/dynshell
:a
:argdo execute normal gg=G update
:args *.tex **/*.tex
:args `grep -Rl "hello" *` grep -R -l hello *
:badd scp://secure//home/Julius/fee/fie/fo/fum.txt
:diffsplit myfile.txt
:e **/filename.cpp
:e ++enc=cp1256
:e ++ff=unix
:e ftp:www.foobax.com/myfile.txt
:edit `=' leftsquarebrc 1 rightsquarebrc '` = leftsquarebrc 1 rightsquarebrc 
:execute !cat /path/to/file/tempFile.do  rightanglebrc  rightanglebrc  anotherFile
:execute %w !pbcopy q
:g/ .,/ join!
:g/#include/s@\@/@g
:g/^INSERT INTO address/normal f FciDetroit
:g/my_pattern/-2,//+2d
:g/{{{/,/}}}/le 4 d /}}}/d
:h inputlist
:h pattern-overview
:h pyfile
:help statusline
:help titlestring
:let $PS1=subshell$ 
:make
:r! grep -v ^% filename wc -w
:r!./shell.sh
:retab
:retab!
:s/(
:se binary
:se fileformat=dos
:se fileformat=unix
:set autochdir
:set enc=latin1
:set ff?
:set fileformat=unix
:set fileformat=unix
:set inde=16
:set nu!
:set nu!
:set shell
:set shell=bash --rcfile ~/.vimbashrc
:set shellcmdflag=-ic
:set shellcmdflag=-ic
:set t_Co?
:set titlestring=%t
:setlocal eol?
:source ~/.vimrc.local
:t
:tabnew r!ack-grep function tracking ../
:v/./d
:v/name=/d
:vim do_action( 'init' ) **/*.php copen
:vimgrep ^Foo.*Bar **/*.txt
:w !sudo tee %
:w ++enc=utf-8
:w myfile.txt
:w next
:windo set nonumber list
:~ ProAdminGuide.pdf head -3
= ${line%.*}
= 0.000
=/etc/httpd/conf/httpd.conf
=/home/someuser/trash
=======
==================== Begin steps ==============================
=EDITOR $file
=one-hd.mov=another-hd.mov=
?
?
?
?
?
? /
?!.
?.exitstatus
?ls
@
@( leftsquarebrc ^. rightsquarebrc *).png,
@=cd D:\ATS & D:\ATS\ATS.exe "%1"
@@folder = #{ subdir }/Youtube-Music
@C:Program Files (x86)Internet Exploreriexplore.exe localhost/%~nx1
@C:python32python.exe %*
@C:python64python.exe %*
@Powershell -N -o -P -r -o -f -i -l -e -E -x -e -c -u -t -i -o -n -P -o -l -i -c -y unrestricted -C -o -m -m -a -n -d iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) SET PATH=%PATH% %systemdrive%chocolateybin
@a=`ls` ls
@abc @def @pqr-stu @xyz
@app.load_console
@count = $count +1
@count = 1
@echo Connect a network cable. cmd /q /c for /l %N in () do ping -n 1 site.com  rightanglebrc nul&&exit echo echo n^ gpupdate /force msg * Done.
@echo Error...
@echo Generation of the doxygen documentation done
@echo execute some_procedure sqlplus username/password@databasename
@echo off
@envvar = `csh -c "cd $ENV{WSDIR} ; source  leftanglebrc script rightanglebrc .csh  ; env"` csh -c cd $ENV{WSDIR} ; source  leftanglebrc script rightanglebrc .csh  ; env
@envvar = `csh -c "cd \$WSDIR ; source  leftanglebrc script rightanglebrc .csh  ; env"` csh -c cd $WSDIR ; source  leftanglebrc script rightanglebrc .csh  ; env
@file2 = @file // full content of the file in an array
@findstr /r /c:^#  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc * " leftsquarebrc a-zA-Z0-9_ rightsquarebrc *.inc %1
@foo.sql bar
@hourly /custom/doandmail
@import _base.scss
@ls_output = `ls -l 2 rightanglebrc &1` ls -l
@reboot /home/scripts/./persistent-tunnel.sh
@reboot /path/to/your/script.sh
@reboot /usr/local/bin/myservermonitor
@reboot /var/www/ghost/launch.sh
@reboot cd /home/ leftsquarebrc path to project rightsquarebrc  rails server
@reboot cd /var/www/ghost ./launch.sh
@sed -e s/.*:// -e s/\\$$// fmt -1 sed -e s/^ *// -e s/$$/:/
@sed -e s|.*:|$*.o:|
@sed -i 1{/^\//!{x;s/^/$(PREFIX)/;x}};G;s/\(.*\)\n\(.*\)/\2\1/ $(FILE) FILE
@set -e rm -f $@
@word = `artii Hello World` artii Hello World
@{sqlFilePath} param1 param2 param 3
@}
A B A A C A
A B A C B A A
A B C D
A B C D
A B C D E F
A B C D E F
A B Cabc D
A leftsquarebrc 4 rightsquarebrc =doughnut
A program should do one and only one thing and do it well.
A script should do one and only one thing and do it well.
A trap on ERR, if set, is executed before the shell exits.
AA,BB,CC,DD
AAAAAAA0XXXKBB BBBBB AD BEOGRAD
AAAAA{0}{1}{2}{3} -f 0x86,0x08,0x04,0xed ./program
ABAR ABARZ
ABC
ABC System, 50000, 1000, Name, Thanks
ABC...Add
AFTER = `echo $ORIGINAL | sed 's/\\r//g'` echo $ORIGINAL sed s/\\r//g
AMI_ID TYPE=$TYPE external-script.sh
ANSI text here
ANT_HOME/bin/ant -b -u -i -l -d -f -i -l -e $XYZ_HOME/build.xml $*
APP_main
ARRAY1 A ARRAY1 B ARRAY1 C ARRAY1 D ...
ARRAY_COUNTER++
ARRAY_COUNTER++
AS15169 Google Inc.,US
AWAKE = awake
Acrobat /A page= leftanglebrc pagenum rightanglebrc  %1.pdf
Action php-fastcgi /cgi-bin/php.fcgi
Active code page: 850
Add-PSSnapin Microsoft.Exchange.Management.PowerShell.Admin
AddHandler php-fastcgi .php
Administrator:unused: leftsquarebrc SID-STUFF rightsquarebrc :U-POS-SERVERAdministrator, leftsquarebrc SID-HERE rightsquarebrc :/cygdrive/c/Users/Administrator:/cygdrive/c/windows/system32/cmd
AllowOverride All
Almost Human/Season 1/Almost Human Episode 01.mkv
Almost Human/Season 1/Episode 01.mkv
Also, can anybody explain what does real, user, sys means here?
Alwnick:Users:aleith...blah...blah...something
App.start
Apply the replacement to all matches to the regexp, not just the first.
April 2014
Archive::Tar::DO_NOT_USE_PREFIX = 1
Argument List:  leftsquarebrc -, 1, 2, 3 rightsquarebrc 
Aug 23 08:16:07 yogi logger: + echo 1 2
AuthzSVNAccessFile ^/authz
AuthzSVNReposRelativeAccessFile authz
B
B
B -i -n -p -u -t P kill $pidA
B C1 C2 C3 A
BAC, CSCO, INTC, MSFT, VZ, KO, MMM
BACKUP DATABASE @mydb TO DISK = @path
BASE_DIR/out/production/dir
BASHPID + $(date '+%N') date +%N
BASH_ARGV
BASH_REMATCH
BBBB__CCC__GGGG
BEGIN { $ = 1 }
BEGIN { ARGV leftsquarebrc ARGC rightsquarebrc  = ARGV leftsquarebrc ARGC-1 rightsquarebrc  ARGC++ }
BEGIN { FS = = }
BEGIN { RS = t FS = -| -n OFS = t }
BEGIN { a leftsquarebrc THR rightsquarebrc =T a leftsquarebrc TYR rightsquarebrc =Y ... }
BEGIN {FS = :}
BEGIN {ORS=}
BEGIN{FS=.} $2 in a {next} {a leftsquarebrc $2 rightsquarebrc } 1
BEGIN{FS=.} a leftsquarebrc $2 rightsquarebrc  {next} {a leftsquarebrc $2 rightsquarebrc =1} 1
BEGIN{FS=rn
BEGIN{IGNORECASE = 1} f /some_word {f=1}
BUILD_ID/archive
Blaze Of Glory Track
Bobby Bigfoot Hill
Bobby Bigfoot Hill bhill
BootstrapperSetup.exe /i /passive MyBurnVariable1=1 MyBurnVariable2=2
C-E emacs-editing-mode
C-L: backward-kill-line
C-i: complete
C-j: C-atime C-m
C-x": ""C-b
C: *.*  leftsquarebrc destination folder rightsquarebrc 
C: http://www.snort.org/sub-rules/...
C: image.mnc
C: rightanglebrc  C:mymongomongo-it.ps1 C:mymongo
C: rightanglebrc  cd wampwwwnew_project
C: rightanglebrc  move c:usersyousomefile.txt c:tempnewlocation.txt
C: rightanglebrc  perl -0 777 -p -e s/\r?n/\n/g
C: rightanglebrc  test.bat c:/cygwin/home/jonathan/camlprog "foo" bar
C: rightanglebrc javac tempcompile-testsrcabcD.java
C: rightanglebrc test space.avi
C:..psql.exe -h my_server_host -U usr -c CREATE DATABASE test; postgres
C:/ a D:test.rar D:test
C:/Android/SDK/platform-tools/adb install superuser.apk
C:/a/b/c/bin.exe
C:/foo/bar.xml
C:/test/dir
C:Cygwinbinmintty.exe -e /bin/sh -l -c /scripts/servername.sh
C:MinGWbin
C:MinGWmsys1.0 -c times;/c/MinGW/msys/1.0/bin/bash
C:MinGWmsys1.0bin
C:Program Files (x86)Foobarbinmytool.exe
C:Program Files (x86)Microsoft Visual Studio 10.0VCbinvcvars32.bat
C:Program Files (x86)Notepad++notepad++.exe $(grep -rl " leftanglebrc script" .) grep -r -l  leftanglebrc script .
C:Program FilesGDALgdalinfo.exe E:DATAimage.tif
C:Program FilesJavajdk_versionbin
C:Program FilesMicrosoft OfficeOffice14excel.exe /e C:My ProgramsCPU AnalysisdataIOParse.xlsm -i -o -d -u -m -p -l -o -c -a -t -i -o -n C:My ProgramsCPU Analysisiodump065901_iodump.txt
C:Program FilesMicrosoft SQL Server80ToolsBinnosql -E -S Sql server-hl7timeclockplus timeclockplus.sql -o -r -e -s -u -l -t -s -. -t -x -t
C:Program FilesMicrosoft Visual FoxPro 9vfp9.exe -C -B -U -I -L -D -. -F -P -W
C:Program FilesMySQLMySQL Server 5.5my.ini
C:Program FilesR-3.0.2binRScript.exe
C:Program FilesRR-2.15.2binx64Rscript.exe C:UsersjddDocumentstest.R
C:Program FilesWinZipwinzip32
C:Program Filesiis expressPHPv5.3php.exe -f C:htdocsclients.php
C:ProgrammeOperaopera.exe -n -e -w -p -a -g -e file://localhost/C:/redirect.html
C:ProgramsMicrosoft OfficeOffice14OUTLOOK.EXE /c ipm.note /m myemail@email.com&cc=seconda.address@email.com&subject=Test&body=Line 1 %0D%0ALine 2
C:ProjectPathConsoleApplication1bindebugConsoleApplivation1.exe Test Test2
C:Python26python26.exe %1 %*
C:UsersUsernameAppDataLocalGitHubGitHub.appref-ms --open-shell
C:Userscscott argument1 argument2
C:Userscsf10dum
C:Userscsf10dum cmd Desktop
C:Usersdaniel347xDesktopBackup__Dan_Rootqt5qtbasebinuic.exe
C:UsersnickLocalProjectsexample
C:WINDOWSsystem32 C:WINDOWS C:WINDOWSSystem32Wbem
C:WINNTsystem32cmd.exe /c C:Gitbinsh.exe --login -i
C:WINNTsystem32cmd.exe /c C:Gitbinsh.exe --login -i -- D:temptest.sh
C:WindowsMicrosoft.NETFrameworkv4.0.30319MSBuild.exe
C:WindowsMicrosoft.NETFrameworkv4.0.30319MSBuild.exe TestApp.csproj /p:Configuration=Release /t:Package
C:WindowsSystem32Java.exe -v -e -r -s -i -o -n
C:WindowsSystem32cmd.exe /C  C:\Program FilesABCxyz.exe -register=abc 
C:Windowssystem32cmd.exe /k PathToMy.exe & exit
C:\cygwin64\bin\bash.exe
C:abcbin.exe
C:cygwin64binbash.exe
C:cygwinbinbash --login -i D:scriptsmyscript.sh
C:cygwinbinbash --login -i D:scriptsmyscript.sh
C:cygwinbinperl.exe /cygdrive/c/scripts/testscript.pl
C:devcygwinbinmintty.exe --help
C:my pathmysqlbinmysqld-nt --init-file C:\mysql-script.txt
C:mysql_pathbinmysql.exe --user xx --password xx --host localhost --port 3306 --database xx
C:programszip myzipfile a/file1 b/file2 c/file3
C:src rightanglebrc java -c -l -a -s -s -p -a -t -h . E:Libmath.jar map.TestClasses.Test
C:temp a^ b
C:temp a^^^ b
C:tempcompile-testsrc abcD.java
C:tempcompile-testsrcabcD.class
C:tempcompile-testsrcabcD.java
C:wampbinphpphp5.3.13 -f C:wampwwwhello.php
C:wampbinphpphp5.4.16php.exe -f C:\wamp\www\ControlAsistencia\php\GenerarParesDeTiempo.php
C:wampstackphp
C:wampwwwnew_projectlaravel
CALL nameOfOtherFile.bat
CATKIN_SHELL $_SETUP_UTIL $@
CATKIN_SHELL $_SETUP_UTIL $@
CC error.cpp
CFLAGS += -D -F -O -O
CFLAGS += -U -F -O -O
CFLAGS = -O 3 -f -o -p -e -n -m -p -s -t -a -t -i -c -- -l -i -b -g -c -c -s -t -a -t -i -c -- -l -i -b -s -t -d -c -+ -+
CL /DDEBUG="abc" TEST.C
CLASSPATH variable:C:UsersOwnerDesktopstdlib.jar C:UsersOwnerDesktopalgs4.jar
CMD /C c:whereverwhatever.exe
CMD /c copy /b  "C:\Program Files\Project\GS\3_5_5\macID.bin.bin" + "C:\Program Files\Project\GS\3_5_5\facDflttemp.bin" "C:\Program Files\Project\GS\3_5_5\facDflt.bin"
CMD /k Start /W  %drive%DesktopSWPCBSWPCBDebugbatchisp -device at32uc3a0512 -hardware usb -operation erase f memory flash blankcheck loadbuffer SWPCB.elf program verify start reset 0
CMD ln -s $f $HOME/recent$i i++
CMD read f ln -s $f $HOME/recent$i i++
CODE = $(shell find . -name '*.cpp') shell find . -n -a -m -e *.cpp
COLUMNS : columns 142
COLUMNS dpkg -l
COMMAND
COMMAND grep -w -F -f dummy_file
COMMAND param1 param2
COMSPEC /c batch-file "$var1" "$var2"
COMSPEC /c batch-file "$var1" "$var2"
CONDITION { ACTION }
CONDITION { COMMAND }
COPY %1.HEX COMX
COUNT echo $COUNT COUNT++
COUNTER++
CREATE DATABASE `nice-day` nice-day
CREATE DATABASE deneme
CREATE VIEW as SELECT ......
CSKIU7 Advanced course .. 2013 class 1
CTG GCA AGA AAG AAA TGT GGA ATG GCA ACA AAG AAA GGA AAA AAA ATC AAT ACT GGC TGA TGC AGT TTC
CURLOPT_POSTFIELDS =
CURLOPT_USERPWD =
CURRENT LINE=`sed "$UNIQ_SCAN_INIT_POINT"'q;d' $UNIQ_LIST_FINAL` sed $UNIQ_SCAN_INIT_POINT'q;d' $UNIQ_LIST_FINAL
Cannot open: No such file or directory
Class-Path: cab.v1.jar
Class-Path: lib/lib1.jar lib/lib2.jar lib/lib3.jar
Clock.AutoReset = false
Column xyzzy does not exist
ConEmuC -G -u -i -M -a -c -r -o Rename 0 Title
ConEmuC.exe /AUTOATTACH
Config file: /home/username/.VirtualBox/Machines/Windows XP/Windows XP.xml
Console.OutputEncoding = Encoding.UTF8
Console/cake
Console/cake CakeResque.CakeResque enqueue default Friend swapnil
Console/cake email
Contains arr1 arr3
ContainsRe arr1 arr3
Content-disposition: attachment
Content-type: application/octet-stream
Content-type: application/zip
Contents/MacOS/
Convert cmd: convert -d -e -l -a -y 1432 /root/so/00001_1432.gif -d -e -l -a -y 1552 /root/so/00002_1552.gif -d -e -l -a -y 1432 /root/so/00003_1432.gif -d -e -l -a -y 1444 /root/so/00004_1444.gif -d -e -l -a -y 1432 /root/so/00005_1432.gif -d -e -l -a -y 1432 /root/so/00006_1432.gif -d -e -l -a -y 1432 /root/so/00007_1432.gif -l -a -y -e -r -s Optimize /root/so/stackoverflow.gif
Copy standard input to each FILE, and also to standard output.
Copy-Item C:ProgramDataMicrosoftWindowsStart MenuProgramsAccessoriesWindows PowerShellWindows PowerShell.lnk C:WindowsSystem32powershell.lnk
Ctrl+x Ctrl+e
Ctrl-R abc Ctrl-R
CustomLog logs/old_redirections common env=redirectinuse
D1=`ls 'a_costant_string'"$DATE1"????????"$g"* | sort -u | wc -l` ls a_costant_string$DATE1????????$g* sort -u wc -l
D:0.0
D:ProgramsGitcmd D:Programscygwinbin D:Programschefbin RESTOFPATH
D:cygwinbinbash --login -c C:/ILS/trunk/NAVAID/test.exe
DAAAAABCBBBCC
DAEJ: 36 23 57.946407, 127 22 28.132160, 116.6419
DATA: 42
DEBUG VERBOSE = SUPPRESS_ERRORS =
DELETE FROM table WHERE Position='$4'; DELETE FROM table WHERE Instance='$4';
DESCRIBE table_test
DESCRIPTION
DIR2=`echo $DIR2 | tr -d '\r'` echo $DIR2 tr -d \r
DISK
DO @set FOO=%i echo %FOO:~0,-3%
DataFunction mail -s Title Bob@123.com
DeRez -o -n -l -y TEXT foo.textClipping perl -n -e m|/\* (.*) \*/| && print $1; END {print "\n"}
Debug
Defaults !requiretty
Defaults !visiblepw
Defaults requiretty
Defaults requiretty
Defaults requiretty
Defaults secure_path list
Defaults to program
Defaults to program requiretty
Defaults:myuser !requiretty
Defaults:username !requiretty
DirectorySourcefolderC
Disable-NetAdapter *
Disable-NetAdapter -N -a -m -e Wi-Fi
Do not write column names in results.
Documents/bds/bds2/getemptydir.sh Documents
Done0
E-source my-env.sh
E:babakgitbintype e:/babak/git/bin/test.txt
ECHO = /bin/echo -e
ECHO = echo -e
EDITOR $(cat a.txt) cat a.txt
EDITOR $DAILY_FILENAME
END { print var_1, var_2 }
END{print $NF}
END{print}
ENTRY awk -F # {print $2}
ENV leftsquarebrc SECRET_KEY rightsquarebrc 
ENV leftsquarebrc SOME_VAR rightsquarebrc  = some_value
ENV leftsquarebrc VARIABLE_NAME rightsquarebrc  = value
ENV{CVSROOT}= leftanglebrc cvs rightanglebrc 
ENV{LOC} = /tmp/1
ENV{NEW_IP}/g
ENV{NEW_IP}/g
ENV{PATH} = $ENV{PATH}:/home/lsk250/www/portfolio
ENV{PATH} = /usr/local/bin:$ENV{PATH} unless :$ENV{PATH}: =~ m~:/usr/local/bin:~
EOF
EOF
EOF
EOF
ESC  leftsquarebrc  ? 1 h ESC =
EXAMPLES
EXEC
EXPLAIN table_test
EXPR True if expr is false.
EXPR1 -o EXPR2 True if either expr1 OR expr2 is true.
Enable-NetAdapter *
Enter username:
Environment.CommandLine
Error: Assembly App1.Assembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=xxxxxxxxxx references the following assemblies that must be deployed before deploying this assembly: Assembly SharedApp.Services, Version=1.0.0.0, Culture=neutral, PublicKeyToken=yyyyyyyyyyyyyyyy
Exception  leftsquarebrc ... rightsquarebrc : For input string: 8080
ExecuteCommand oracle@192.168.***.*** password123 srvctl status database -d mydb
F90= gfortran
F90=gfortran.
F: directory
FAILED ./path/to/directory
FILE = $(shell echo '\#include  leftanglebrc ham/hamsterdb.h rightanglebrc ') shell echo \#include  leftanglebrc ham/hamsterdb.h rightanglebrc 
FILE = $(shell echo \\\#include\ \ leftanglebrc ham/hamsterdb.h\ rightanglebrc ) shell echo \#include  leftanglebrc ham/hamsterdb.h rightanglebrc 
FILENAME == ARGV leftsquarebrc 1 rightsquarebrc 
FILENAME == file1.txt
FILES = $(shell ls) shell ls
FILETYPE_SRCFILES = $(shell find $(FILETYPE_DIRECTORY)/ -type f -and -name '*.ft') shell find $(FILETYPE_DIRECTORY)/ -t -y -p -e f -a -n -d -n -a -m -e *.ft FILETYPE_DIRECTORY
FILE_TESTx
FILTER
FNR FNR {$3=fld6 leftsquarebrc FNR+30 rightsquarebrc  $4=fld7 leftsquarebrc FNR+30 rightsquarebrc  $5=fld8 leftsquarebrc FNR+30 rightsquarebrc }
FOO
FROM mail_headers a LEFT JOIN mail_headers_body b ON a.mailid=b.id blah
Failed: foo: command.ext arg1 with space arg2 thing etc
Filename: {pf32}MYSQLMySQLServerBinMySQL.exe BeforeInstall: MakeQuery AfterInstall: DeleteQuery WorkingDir: {app}Database Flags: waituntilterminated Parameters: -u -  -r -o -o -t -  -- -- -p -a -s -s -w -o -r -d -= - leftanglebrc  -p -a -s -s -w -o -r -d - rightanglebrc  -  -  -- -- -d -a -t -a -b -a -s -e -= - leftanglebrc  -d -b - rightanglebrc  -  -- -- -e -x -e -c -u -t -e -= -S -O -U -R -C -E -  -t -e -m -p -. -s -q -l
Files old/file and new/file differ
Friday, October 3, 2014
GET /projects/:id/repository/archive
GETxxxHTTPxxxVARxxx
GF_ASADMIN ... tee -a $LOG
Get-ADGroupMember CN=Group DN,OU=Group OU,DC=domain,DC=com ? ObjectClass -e -q User Get-ADUser ? Enabled
Get-ChildItem -R -e -c -u -r -s -e Measure-Object -S -u -m Length
Get-ChildItem somepathwhichsurelydoesntexisthere
Get-Content C:tempconfig.txt % {$_ -r -e -p -l -a -c -e /,'} set-content C:tempconfig Bis.txt
Get-Content ex1.sql sqlite3 ex1.db
Get-Content test.txt ForEach-Object { $_ -r -e -p -l -a -c -e foo, bar } Set-Content test2.txt
Get-Date -U -F -o -r -m -a -t %s
Get-Help command more
Get-Help mkdir
Get-NetAdapter
Get-WmiObject win32_computersystem -c -o -m -p -u -t -e -r -n -a -m -e computername
Git checkout
H
HD HLTHDMD Wkly DDD.CLI Cntcr W200908021012 TRAIL0101 00581 00000CKSUM680
HDR := $(patsubst ./segd/%.segd,./db/%.segd_hdr, $(shell find ./segd -name "*.segd")) patsubst ./segd/%.segd,./db/%.segd_hdr, $(shell find ./segd -name "*.segd") shell find ./segd -n -a -m -e *.segd
HI
HKCUSoftwareTortoiseSVNDebug
HKEY_CLASSES_ROOT*shellexContextMenuHandlers
HKEY_CLASSES_ROOTApplicationspython26.exeshellopencommand
HKEY_CLASSES_ROOTpy_auto_fileshellopencommand
HKEY_CURRENT_USERSoftwareMicrosoftWindowsCurrentVersionExplorerFileExts
HKEY_LOCAL_MACHINESOFTWAREMicrosoftWindows NTCurrentVersionWinlogon
HKEY_LOCAL_MACHINESystemCurrentControlSetControlSession ManagerEnvironmentPROCESSOR_ARCHITECTURE
HOME/.oh-my-zsh
HOME/Library/Application Support/Google/Chrome/Default
HOME/bin/B
HOME/opt/libav/bin/avprobe
HOME/s3cmd-master
HOME/trash
HOME/vikas/input.ksh
HOME/}
HOME}
HOST := $(shell echo $(HOST) | cut -d . -f 1) shell echo $(HOST) HOST cut -d . -f 1
He said "It'"'"'s done"
He said It's done
Hello
Hello World
Hello stackoverflow how are you today foo bar xoo yoo ooo
Hello worldz
Host seems upper down
Host_down
I am using basic grep expression
I don'\''t like shell quoting
I just wondered if somebody could provide a quick yes/no answer
I know that  leftsquarebrc   rightsquarebrc  is for if condition
IF  leftsquarebrc %1 rightsquarebrc  ==  leftsquarebrc  rightsquarebrc  GOTO MyLabel
IF ERRORLEVEL 1 EXIT /B
IF NOT EXIST NEWFILE MOVE OLDFILE NEWFILE
IFS read -r -n 4 var_prefix
IGNORECASE = 1 f /some_word
INCLUDE += -I -/ -u -s -r -/ -l -o -c -a -l -/ -i -n -c -l -u -d -e
INDEX++
INSERT INTO "$1"
INSERT INTO \""$1"\"
INSTALL_LIB
IPT -P INPUT DROP
ISQL -S server -D database -U user -P password
IamAwaitingStdin
If it is due to Branch Prediction at all, then does not it apply in case of smaller arrays?
If the interval parameter is specified without the count parameter, the iostat command generates reports continuously.
Import-Csv C:Directoryfile.csv Measure-Object
Inserted row 1 of table foo in database main
Invoke-Item -P -a -t -h C:PathToMyFile.pptx
Invoke-WebRequest http://stackoverflow.com/search?tab=newest&q=powershell
Is is the compiler optimization which causes the processing of Sorted Array faster than an Unsorted array, in case if the both arrays are of 50000 integers?
JAVA_HOME/bin/java -j -a -r SocketListener.jar 8182
JAVA_HOME/bin/java com.domain.BatchProcess
JAVA_HOME/java -X -m -s -2 -5 -6 -M -X -m -x -5 -1 -2 -M -c -l -a -s -s -p -a -t -h $CLASSPATH com.myapp.cam.conversion
JJTP@yahoo.com
JQ
Jean Paul Blanc 12/07/2012 00:00:00
John Doe,jdoe,9239
Jun109:50
K1 S2 S3 S4 S5
L3Nydi91c2VyLWRhdGEuc2g=
LC_ALL echo Z grep  leftsquarebrc 0-z rightsquarebrc 
LD_LIBRARY_PATH , LIBPATH , SHLIB_PATH
LD_LIBRARY_PATH ./nw $*
LD_LIBRARY_PATH ./nw $*
LEFT = PWED $PWTIME
LINE awk {print $2}
LINE leftsquarebrc 4 rightsquarebrc =${LINE leftsquarebrc 4 rightsquarebrc //,}
LIST := $(shell ls foo/) shell ls foo/
LIST = $(shell ls foo/) shell ls foo/
LISTEN
LOGTYPES =error, access
LS -1
Library/Ruby/Gems/1.8/...
LinuxWindows.*.zip
Location: http://www.w3.org/pub/WWW/People.html
LogEntry $LOG_LINE
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit
M-x auto-fill-mode RET
M-x cd /hostname:/current/path/in/the/shell
M-x compile RET make ./test RET
M-x compile RET make RET
M-x compile RET make test RET
M-x server-start
MAJOR MAJOR == 4 MINOR 2
MD5sums is win32 command line software to generate MD5 hashes of files
MKLINK  leftsquarebrc options rightsquarebrc  {link} {target}
MO%CC%88RKGRA%CC%8A.JPG
MODE COMX:9600,N,8,1,P
MYFIELD echo $line awk -F -| -v o=$old -v n=$new {OFS=FS} sub(o, n, $6) {print}
MYNAMES = $(basename $$file .js) basename $$file .js
MYSQLDUMP -u $MYSQLUSER -p -$ -M -Y -S -Q -L -P -A -S -S --all-databases $GZIP -c 9
MYSQL_HOME C:Program FilesMySQLMySQL Server 5.0bin
MYVAR = $1
MY_DIFF
MY_VAR = my value
MacKassner:Geto Boys kassner$ find . -t -y -p -e f egrep .flac$ parallel ffmpeg -i {} -a -b 192k -a -c -o -d -e -c libmp3lame -a -c 2 {.}.mp3
MacKassner:Geto Boys kassner$ find . -t -y -p -e f egrep .flac$ parallel ffmpeg -i {} -a -b 192k -a -c -o -d -e -c libmp3lame -a -c 2 {}.mp3
Main-Class : mypackage.myclass.yourclassnamehere
Main-Class: myProject
MainForm.AppArgs
MainForm.AppArgs = new string leftsquarebrc  rightsquarebrc  { Arg 1, Arg 2 }
Mary had a little lamb
May also be specified as -d -.
May also be specified as ^ leftsquarebrc  leftsquarebrc 1m-d^ leftsquarebrc  leftsquarebrc 22m.
Measure-Command { Start-Process -F -i -l -e -P -a -t -h C:Program FilesMicrosoft OfficeOffice14WINWORD.EXE }
My Number is = 1234
My goal is to read the variable here: Variable is 2014-03-07 20:42:23
My work build
MySetup.exe /S /D=C:Program FilesFoo BarBaz
My_Application
NAME
NAME1','NAME2','NAME3
NEWDNS 2011-06-04 06:00:59 10 220 136 217 crl.verisign com
NODES := $(shell grep -- -\ rightanglebrc  graph.gv | while read line; do for w in $$line; do echo $$w; done; done | grep  leftsquarebrc Aa-Zz rightsquarebrc  | sort | uniq | wc -l) shell grep -- - rightanglebrc  graph.gv read line echo $$w grep  leftsquarebrc Aa-Zz rightsquarebrc  sort uniq wc -l
NR == 1 { I = /^$/ ? 13 : 12 }
NR {printf %s%s%.3f%s%.3f%s%.3f%s%dn, $1, OFS, $2/$5, OFS, $3/$5, OFS, $4/$5, OFS, $5}
NR%2==0
NSArray *args =  leftsquarebrc  leftsquarebrc NSProcessInfo processInfo rightsquarebrc  arguments rightsquarebrc 
NSArray *finished_path =  leftsquarebrc NSArray arrayWithObjects:@http://idisk.mac.com/, mac_username, @/ /Volumes/, mac_username, nil rightsquarebrc 
NSString *currentpath =  leftsquarebrc  leftsquarebrc NSFileManager defaultManager rightsquarebrc  currentDirectoryPath rightsquarebrc 
NSString *filePath =  leftsquarebrc  leftsquarebrc NSBundle mainBundle rightsquarebrc  pathForResource:@MyFile ofType:@txt rightsquarebrc 
NSString *scriptFile =  leftsquarebrc NSString stringWithFormat:@svn co %@ %@ ncd %@ nsvn log -v --xml  rightanglebrc  logfile.log ncd %@ncp %@ %@ njava -jar %@/statsvn.jar %@/logfile.log %@ nrm -r -f %@nrm statsvn.jar, svnURLStr, tempLocStr, tempLocStr, destDirStr, SVNStatStr, destDirStr, destDirStr, tempLocStr, tempLocStr, tempLocStr, nil rightsquarebrc 
NTRights.exe -u user +r SeDenyRemoteInteractiveLogonRight
NULL = RbConfig::CONFIG leftsquarebrc host_os rightsquarebrc  =~ /mingw mswin/ ? NUL : /dev/null
Name1 123 something more
Name: value Comment: I want the Width: value Width: 11 etc...
Naptime over.
New-Alias h Get-History
Nice_Picture_02_.jpg
Nice_Picture_2_.jpg
No matching command
No time for napping!
Note: Host seems upper down If it is really up, but blocking our ping probes, try -P -n
Notice: Undefined index: ip_addr in /home/wemail1/www/index.php on line 147
OBJECTS := $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SOURCES)) patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SOURCES) SRCDIR OBJDIR SOURCES
OLDPS1
OPTIONS * HTTP/1.0
ORDER BY maxSalary DESC
ORIGIN
ORIGIN
ORIGIN
ORIGIN
ORS The output record separator, by default a newline.
OUTPUT_WITH_RC := $(shell $(COMMAND) 2 rightanglebrc $1; echo $$?) shell $(COMMAND) COMMAND echo $$?
On Unix with shell=True, the shell defaults to /bin/sh
OpenWithGedit yes $File1 $File2 $File3 $File1Out $File2Out $File3Out
Or is it the Branch Prediction in C, that causes the faster processing?
Osome text to add^Msome more text to add^ leftsquarebrc :%s/text/TEXT^M:wq^M
Output is xyzzy
P  leftanglebrc (echo "something something") echo something something
PAGE1=...&METHOD=GET&AGENT=%CBn&TARGET=%3a%2f%2fwww...
PASSWORD ?= $(shell bash -c 'read -s -p "Password: " pwd; echo $$pwd') shell bash -c read -s -p "Password: " pwd; echo $$pwd
PATH
PATH
PATH
PATH
PATH
PATH
PATH
PATH
PATH /Users/zak/bin/command
PATH /bin:/usr/bin $PATH
PATH = $HOME/bin:$PATH
PATH BAR
PATH DEFAULT=${PATH}:/home/paul/avatar-gf-1.0-ea/glassfish4/bin/
PATH python -m test
PATH:/Applications/MAMP/bin/php/php5.5.10/bin
PATH:/Applications/Xcode.app/Contents/Developer/usr/bin
PATH:/dir/to/the/script
PATH:/etc/init.d
PATH:/opt/AWS-ElasticBeanstalk-CLI-2.6.0/eb/linux/python3/
PATH:/path/to/something
PATH:/usr/local/bin
PATH:/usr/local/mysql/bin
PATH:path/to/ndk
PATH:usr/local/bin/rssh
PATH:~/Library/Enthought/Canopy_64bit/User/bin
PATHBAR
PATTERN{action}
PHP5 myclass.php
POST_DATA = username=meatsafe&password=murderer
PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@
PRODUCT_COPY_FILES += $(shell ls /untared/dir/*) shell ls /untared/dir/*
PRODUCT_COPY_FILES += $(shell tar -tf tarfile) shell tar -t -f tarfile
PRODUCT_COPY_FILES := ...
PRODUCT_COPY_FILES = ...
PROG $@
PROJECT_NUMBER = 42.42
PROMPT ./init
PS C: rightanglebrc  findUsersGroup raf
PS1= leftsquarebrc ! rightsquarebrc : leftsquarebrc w rightsquarebrc n leftsquarebrc u@h rightsquarebrc   leftsquarebrc 033 leftsquarebrc 1m rightsquarebrc  leftsquarebrc 033 leftsquarebrc 41m rightsquarebrc  $SOME_VARIABLE  leftsquarebrc 033 leftsquarebrc 0m rightsquarebrc  $ 
PS1= leftsquarebrc 033 leftsquarebrc 1;36m rightsquarebrc u@h: leftsquarebrc 033 leftsquarebrc 0m rightsquarebrc  leftsquarebrc 033 leftsquarebrc 1;34m rightsquarebrc w leftsquarebrc 033 leftsquarebrc 0m rightsquarebrc   leftsquarebrc 033 leftsquarebrc 1;32m rightsquarebrc $(__git_ps1) leftsquarebrc 033 leftsquarebrc 0m rightsquarebrc $  __git_ps1
PS1= leftsquarebrc e leftsquarebrc 0;30m rightsquarebrc test  leftsquarebrc e leftsquarebrc 0m rightsquarebrc 
PS1= leftsquarebrc e leftsquarebrc 0;32m rightsquarebrc  leftsquarebrc  w  rightsquarebrc n# leftsquarebrc e leftsquarebrc m rightsquarebrc  
PS1= leftsquarebrc e leftsquarebrc 0;32m rightsquarebrc w rightanglebrc   leftsquarebrc e leftsquarebrc 1;32m rightsquarebrc 
PS1= leftsquarebrc e leftsquarebrc 1;33m rightsquarebrc u::h leftsquarebrc e leftsquarebrc m rightsquarebrc   leftsquarebrc e leftsquarebrc 0;32m rightsquarebrc { w } leftsquarebrc e leftsquarebrc me leftsquarebrc 0;36m rightsquarebrc $(parse_git_branch) leftsquarebrc e leftsquarebrc me leftsquarebrc 1;34m rightsquarebrc @ leftsquarebrc e leftsquarebrc me leftsquarebrc 1;35m rightsquarebrc n- rightanglebrc  leftsquarebrc e leftsquarebrc m rightsquarebrc  
PS1= leftsquarebrc e leftsquarebrc se leftsquarebrc 1;1He leftsquarebrc 42me leftsquarebrc Kh u ipaddresse leftsquarebrc 0me leftsquarebrc u rightsquarebrc w $ 
PS1= leftsquarebrc e rightsquarebrc 0;u@h: wa rightsquarebrc 
PS1=$2$ 
PS1=%n%m %~ %(?.. leftsquarebrc %? rightsquarebrc  )%# 
PS1=342230 leftsquarebrc 224357270 rightsquarebrc  
PS1=Hello World  rightanglebrc  
PS1=end1 rightanglebrc  command1
PS1=foo:  bash --norc
PS1=h:W u$ 
PS1=n leftsquarebrc  $(pwd -P)  rightsquarebrc n= rightanglebrc   pwd -P
PS1=rn leftsquarebrc e leftsquarebrc 1;32m rightsquarebrc dave:w $ leftsquarebrc e leftsquarebrc 0;37m rightsquarebrc  
PS1=t  leftanglebrc w rightanglebrc  ERR:$(echo \$?) $  echo $?
PS1=w  leftsquarebrc e leftsquarebrc se leftsquarebrc 1;1He leftsquarebrc 42m rightsquarebrc h u ipaddress leftsquarebrc e leftsquarebrc 0me leftsquarebrc u rightsquarebrc $ 
PS1=|%*| ~ 
PSEXEC \othermachine z:program.exe
PWD
PWD find . -type d cd $dir /path/to/command cd $STDIR unset IFS
PWD/certainfolderforportablestuff
Package A
Page 121, first program: test if (NF  rightanglebrc  0) is unnecessary.
Param 1: this
Param: a b c
Peer authentication failed for user deploy
PermitRootLogin no
PermitUserEnvironment yes
PermitUserEnvironment yes
PhyPhy1 file1.pdf Phy file2.pdf Che/Che1 file3.pdf Che file4.pdf
PowerShell -C -o -m -m -a -n -d & {c:usersjohnmyscript.ps1}
PowerShell.exe -F -i -l -e c:usersjohnmyscript.ps1
Powershell.exe -e -x -e -c -u -t -i -o -n -p -o -l -i -c -y remotesigned -F -i -l -e C:UsersSEDesktopps.ps1
Preferences Default
Print $var
Process only files or directories that match the specified pattern.
Process.StartInfo.Arguments = /C DEL /Q /F "C:\Users\WinUser\AppData\Local\Temp\abc\*.tmp"
Program.CommandLineArgs
Provides a formatted prompt, then reads a single line of text from the console.
R -q -e x  leftanglebrc - read.csv('nums.txt', header = F); summary(x); sd(x leftsquarebrc  , 1 rightsquarebrc )
R CMD BATCH --no-save --no-restore --slave --args $1 $2 $3 tabulate.r /dev/tty
R CMD BATCH --no-save --no-restore --slave --args $1 $2 $3 tabulate.r /dev/tty
R CMD BATCH --no-save --no-restore --slave --args 2 Vocab May12 tabulate.r /dev/tty
R CMD BATCH --no-save --no-restore my_script.R
R CMD BATCH foobar.R
R CMD BATCH so.R
R CMD check -o MyRepo MyRepo/MyRpkg
RANDOM
RED5_HOME=/opt/red5-1.0.0
REG ... FIND REG_SZ
REG QUERY HKLMSoftwareMicrosoftInternet Explorer /v Version
RESULT
REV_NUMBER++
ROMS::ROMS_Menu::read_recipes_ingredients::String
Reattach a session and if necessary detach it first.
Remove-Item c:xampphtdocsprestashopdfs -R -e -c -u -r -s -e -F -o -r -c -e
Replace lines 27:29 of filename005, with text1=000 text2=005 text3=010
Resque::Failure.clear
Resque::Failure.count
RewriteCond ${foobar:test:$1} ^
RewriteRule /old/page /new/page  leftsquarebrc R=301,E=redirectinuse rightsquarebrc 
Robocopy %source% ...
Rscript -e print("hello world")
Rscript /Users/GR/web-app/Rproject/Scripts/arg_file_test.R path_in leftanglebrc -"/Users/GR/web-app/Rproject/Inputs/Rscript/Gene.csv" path_in2 leftanglebrc -"/Users/GR/web-app/Rproject/Inputs/Rscript/Template_Auto.csv" l=0 w=0
Rscript /path/to/myscript.r
Rscript args.R 10
Rscript my_script.R
Rscript myscript.R batch.csv
Rscript script.R c('col1','col2','col3')
Rscript test.R --inputfiles file A.txt:file B.txt:fileC.txt etc...
Rscript test.R --inputfiles fileA.txt fileB.txt fileC.txt
Rscript test.R --inputfiles fileA.txt:fileB.txt:fileC.txt etc...
Run C:delete#me
RunCompressor.bat %1
S !!
S01E01-somemovie.mkv
SAVEIFS
SC \computername CONFIG apache start= demand
SCHEMA1.IJK_ECX_LEDGER_HST_200925391
SCRIPT nc -l -p -q 5 $PORT
SECRET_KEY: my_secret_key
SEE ALSO
SELECT * FROM USER G
SELECT * FROM sometableG
SELECT * FROM your_table
SELECT 1 FROM pg_roles WHERE rolname=USR_NAME
SELECT @myId
SELECT SomeName AS  leftsquarebrc Some Name rightsquarebrc  FROM myTbl
SELECT SomeName AS Some Name FROM myTbl
SELECT T2.A, T2.B , T2.C INTO TEST FROM t2,t1 where t2.c = t1.c order by t2.a
SELECT field leftsquarebrc 3 rightsquarebrc  WHERE field leftsquarebrc 0 rightsquarebrc  = Charterish
SELECT foo FROM bare
SET
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=NO_AUTO_VALUE_ON_ZERO
SET APPDIR=%~dp0
SET BASE_JAVA_SRC=%APPDIR%/../src/main/java
SET CL=/Ic:MyFolder
SET CL=/MP /Ic:MyFolder
SET CLASSPATH=
SET CLASSPATH=.;pathtostdlib;pathtoalgs4.jar
SET CONCAT_NULL_YIELDS_NULL, ANSI_PADDING, ANSI_WARNINGS ON EXEC myProc ...
SET FOREIGN_KEY_CHECKS=0
SET FOREIGN_KEY_CHECKS=1
SET MAVEN_REPO=C:/Users/James/.m2/repository
SET QUERY_STRING=start_debug=1&debug_port=10137&debug_host=127.0.0.1&debug_stop=1&no_remote=1&debug_session_id=10000
SET SERVEROUTPUT ON FORMAT WRAPPED
SHARED_LIB_PACK $LIB=${LIB##*/}
SHELL -c cp file/that/might/not/exist . ; echo "good"
SHELL := /bin/bash
SHELL = /usr/bin/bash
SHELL = /usr/bin/ksh
SHELL = myshell
SHELL:=/bin/bash -O extglob
SHOW DATABASES LIKE yourdb
SHOW PROCESSLIST
SHOW TABLES LIKE yourtable
SITENAME
SLEEP 9600
SOAPAction: add soap action here from bindings or from soapui
SOURCE_PATH git checkout -- path/to/deploy.sh
SPTH = /home/Foo/Documents/Programs/ShellScripts/Butler
SRCS = $(filter-out excludefile.c, $(wildcard *.c)) filter-out excludefile.c, $(wildcard *.c) wildcard *.c
START /WAIT 7za.exe a file_%year%%month%%day%_%hour%%min%%secs%.zip * -r -m -x -9 -p -% -p -a -s -s -% -m -h -e
START /WAIT VSIXInstaller.exe /q C:DeveloppementABC.vsix
START = `date +%s` date +%s
START MyMacros /D M:applicationsAutoIt M:applicationsAutoItKeyShortcuts.exe
START Tasklist Monitor /LOW TheBatchFile
START http://www.google.com
START_STOP_AA_07Jun2013
STR = foo
STR =foo
STRING True if string is not empty.
SUM leftsquarebrc NR rightsquarebrc =...
SVNLOOK cat -t $TXN $REPOS $FILE
SVNLOOK cat -t $TXN $REPOS $FILEPATH $ICONV -f UTF-8 -o /dev/null
SVNLOOK cat -t $TXN $REPOS $FILEPATH $ICONV -f UTF-8 -t UTF-16 -o /dev/null
SVNPathAuthz short_circuit
SYNOPSIS
Safari http://stackoverflow.com
Scan1
ScrabbleHelper.exe
Second Third Fourth Fifth
SellerName,2013-08-20 17:19:49,71.185.24.60,-8523106007192903367,5526150741,1,null,25d20a500342-653AC57AF9E6401B,16,2574455867,product description,-8574103407192903368,353860,_,null,-1
Server API = Line Interface
Server1
ServerAliveInterval 60
Session id: foobar
Set MSBuildEmitSolution=1
Set OPTS=-Dlog4j.configuration=.log4j.properties
Set USERNAME=test
Set or unset values of shell options and positional parameters.
Set-ExecutionPolicy RemoteSigned
Set-ExecutionPolicy RemoteSigned
Set-WebConfiguration system.webServer/httpRedirect IIS:sitesDefault Web Site -V -a -l -u -e @{enabled=true
SetEnvIf User-Agent .*MSIE.*
Shell Environ$("COMSPEC") COMSPEC  /c c:path torfrompcb file path
Shell Environ$("COMSPEC") COMSPEC  /c rfrompcb file path
Shell cmd echo foo, vbNormalFocus
ShellListView1.RootFolder.PathName
ShellStr = PathZipProgram 7z.exe a  NameZipFile   FolderName *.fat  FolderName *.sh
Shopping Internet Technology C/C++
Shutdown hook is executing
Sleeping for 5 seconds, hit ctrl-c to proceed now.
Some Text that should be changed
Some Text that should be changed \
Some Title Here v1.2.3 Some Other Description About the Title in Here
SomeFilter all-hidden-files.txt
Start Application.exe %OPTS%
Start FILEPATHFILENAME.mdb
StrictHostKeyChecking no
String args  leftsquarebrc  rightsquarebrc  = {arg1, arg2, -d -n -a -m -e -, dNameArguments}
String cmd leftsquarebrc  rightsquarebrc  = {gnome-terminal, -x -, bash, -c -, ls; echo ' leftanglebrc enter rightanglebrc '; read }
String command=cat  rightanglebrc  + rfile +; chmod 777  + rfile +; scp -t  + rfile
String leftsquarebrc  rightsquarebrc  args = {/system/bin/top -m 10 -n 1}
String leftsquarebrc  rightsquarebrc  args = {/system/bin/top, -m -, 10, -n -, 1}
String leftsquarebrc  rightsquarebrc  cmd = {/usr/bin/open, -a , love.app, /Users/mtc06/testgame}
String leftsquarebrc  rightsquarebrc  cmd = {sh test.sh, /Path/to my/resource file}
String leftsquarebrc  rightsquarebrc  cmd = {sh, test.sh, /Path/to my/resource file}
String leftsquarebrc  rightsquarebrc  command = {/bin/bash, /home/pi/tbe/testSleep.sh}
String leftsquarebrc  rightsquarebrc  commands = {sysrw, rm /data/local/bootanimation.zip, sysro}
String leftsquarebrc  rightsquarebrc  processCommand = { cmd, /c, c:\dir with spaces\test.bat }
String scriptloc= workingDir + /process-executor.sh
String tailCommand = /bin/sh -c 'tail -f /path/PATH.txt| grep (...)'
Student Number:92839342 Name:Robert Bloomingdale Lab1:9 Lab2:26 Lab3:18 Lab4:22 Lab5:9 Lab6:12 Exam1:25 Exam2:39 Final:99
SumatraPDF.exe -i -n -v -e -r -s -e -- -s -e -a -r -c -h "C:Program Files (x86)Eclipse (C++)inverse_search.bat" "%f" %l
Sun Feb 21 00:00:00 EST 2010
Sun, 26 Feb 2012 14:33:00 +0100
System.AppDomain.CurrentDomain.FriendlyName
System:~ user# ls -C -w $(tput cols) tput cols cat
TAB: menu-complete
TAR -z -c -v -f ${BACKUPDIR}/${BFILE} ${DIRS}
TARGETS = $(shell echo '' | php -r 'echo "target1 target2";' ) shell echo  php -r echo "target1 target2";
TARGETS = $(shell php -r 'echo "target1 target2";'  leftanglebrc  /dev/null ) shell php -r echo "target1 target2";
TASKKILL /F /IM program_name.exe
TEMP_DIR/greg -o $DERIVED_FILES_DIR/${INPUT_FILE_BASE}.m $INPUT_FILE_PATH
TESTS = foo.test bar.test baz.test
TEST_ENVIRONMENT = $(SHELL) -e $${V+-x} SHELL
TEST_ENVIRONMENT = $(srcdir)/run srcdir
TF get /?
TF.exe get /login:yourUsername,yourPassword ...
THIS sentence textsc{is all caps} Except not really textsc{but this is}
TOT_SRC = 273
Taco My-Fish-Tacos My_Fish_Tacos
Test `perl -a "print qq{A\n}x500"` perl -a print qq{An}x500
Test2.sh $@
Test: Jaguar XKR-S: Unter dem Blech lauert d
TestApp
TextTransform.exe Model1.tt
The 21 is only the half of answer
The current path is ../bin/test.sh
The expression is false.
The expression is true if and only if the argument is not null.
The quick brown fox
The quick brown fox jumped 144 times over the lazy dog
This  leftsquarebrc mv rightsquarebrc  command is equivalent to an svn copy followed by svn delete
This commit has double spaced sections. And a tab, and a new line
This is_a string
This morning, I ate $3^12$ apples.
Thu Jan 1 23:00:00 UTC 1970
TortoiseProc /command:log /path:%SOURCE% /outfile:%Des%svnlog.xml
Total number =  leftsquarebrc 0-9 rightsquarebrc +
Total number = d+
True
True
Truncated write file may have grown while being archived.
Tue Dec 3 14:25:28.217  leftsquarebrc initandlisten rightsquarebrc  waiting for connections on port 27017
Type help; or \h for help. Type \c to clear the buffer.
UPDATE address SET city =Detroit
URLMD5=`/bin/echo $URL | /usr/bin/md5sum | /bin/cut -f1 -d" "` /bin/echo $URL /usr/bin/md5sum /bin/cut -f 1 -d - 
URxvt.backspacekey: ^H
URxvt.font: xft:Courier New
URxvt.font: xft:Courier New:pixelsize=18:antialias=false
USER su -m
Usage: coffee  leftsquarebrc options rightsquarebrc  path/to/script.coffee  leftsquarebrc args rightsquarebrc 
Usage: plink  leftsquarebrc options rightsquarebrc   leftsquarebrc user@ rightsquarebrc host  leftsquarebrc command rightsquarebrc 
Usage: rename  leftsquarebrc -v rightsquarebrc   leftsquarebrc -n rightsquarebrc   leftsquarebrc -f rightsquarebrc  perlexpr  leftsquarebrc filenames rightsquarebrc 
Usage: script.pl  leftsquarebrc -start=1 rightsquarebrc   leftsquarebrc -end=0 rightsquarebrc   leftsquarebrc -pos=80 rightsquarebrc   leftsquarebrc -count=1 rightsquarebrc 
Useless use of single ref constructor in void context at -e line 1.
UserKnownHostsFile ~/.ssh/known_hosts
Uzing ztdin and ztdout
VAR := $(shell find . -name "*.txt") shell find . -n -a -m -e *.txt
VAR/some
VAR1 * ONEDAY
VAR1 := CONFIG_X1=$(CONFIG_X1) CONFIG_X2=$(CONFIG_X2) CONFIG_X33=$(CONFIG_X33) CONFIG_X1 CONFIG_X2 CONFIG_X33
VAR1=`ssh $i localhost "echo awk -F: '/^bar/ {print \\\$2}' /local/foo.txt"` ssh $i localhost echo awk -F: '/^bar/ {print \$2}' /local/foo.txt
VAR1=one VAR2=two someprogram param1 param2
VAR2= expr $VAR1 \* $ONEDAY
VBoxManage showvminfo ${vm} grep Config file cut -2 -d -:
VMOne VM Second
VOLUME  leftsquarebrc /opt/nagios/var, /opt/nagios/etc, /opt/nagios/libexec, /var/log/apache2, /usr/share/snmp/mibs rightsquarebrc 
Vanilla-Server-Files
Var1 + Var2
Vos bureaux
W32i APP 8.0.0.xxxxx shp 6SFE25~1.EXE
WAIT Start application and wait for it to terminate.
WGET -t -r -i -e -s -= -1 -T 4 http://www.my.url/my/script.php
WHENEVER SQLERROR EXIT SQL.SQLCODE
Wednesday, August 27, 2014
Why are there pipes between each pattern? sh|SH|exe
Why is there a dollar sign at the end? ...BAT)$
WindowsError:  leftsquarebrc Error 2 rightsquarebrc  The system cannot find the file specified
Wipe out workspace before build
World
Write-Error blah
X := $(shell echo 5) shell echo 5
X1=foo X2=bar X3=baz command1 command2
X1=foo X2=bar X3=baz export X1 X2 X3 command1 command2
XTerm*deleteIsDEL: True
XTerm.backarrowKeyIsErase: False
XX /* comment1 */ YY /* comment2 */ ZZ
XX comment1 */ YY /* comment2 ZZ
YOURTFPCMD sleep $TIMEOUT kill $PID wait $PID
YYYY/MM/DD H:M:S
Yes, 2 is 2
Your computer has 4 GB of memory.
Your file has 5 lines
\"
\(, -n -a -m -e -, *.mp4, -o -, -n -a -m -e -, *.zip, \), !, \\(
\.
\/
\2 read -r -a ITEMS
\\/
\b leftsquarebrc A-Za-z0-9 rightsquarebrc + leftsquarebrc A-Za-z0-9._%+- rightsquarebrc +@( leftsquarebrc A-Za-z0-9- rightsquarebrc +\.)+ leftsquarebrc A-Za-z rightsquarebrc {2,8}\b
\bweblogic_
\e leftsquarebrc 33m
\f
\n
\n
\n
\n
\n
\n
\n
\n
\n find -iname .#* foobar $i
\n ls -a echo $f
\n read -d -r -a DESCRIPTION
\n read -r -a CMDS
\n=======\n
\n\t. 
\r
\serversharein_house_thingy.exe myusername mypassword
\t read var1 var2 sed -n s/.* leftanglebrc \/a rightanglebrc  leftanglebrc strong rightanglebrc \(.*\) leftanglebrc font color="red" rightanglebrc  &nbsp;&nbsp;(\(.*\)).*/\1\t\2/p new21
\x01\x02abc
\x0a
\xBF read -d  -a array
^
^ leftsquarebrc  leftsquarebrc 3 5~
^ leftsquarebrc A-Z rightsquarebrc  leftsquarebrc a-z rightsquarebrc + leftsquarebrc  t rightsquarebrc  leftsquarebrc A-Z rightsquarebrc  leftsquarebrc a-z rightsquarebrc +$
^ leftsquarebrc A-Za-z rightsquarebrc + leftsquarebrc  t rightsquarebrc  leftsquarebrc A-Za-z rightsquarebrc +$
^#.*
^+ leftsquarebrc ^  rightsquarebrc * $
^.* -t ( leftsquarebrc ^" rightsquarebrc *) .*$
^Disk leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc +/dev leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc +: leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc + leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc +
^Filesystem|^tmpfs|^cdrom|^none
^old^new
^s**s* leftsquarebrc   rightsquarebrc  leftsquarebrc ^* rightsquarebrc +? leftsquarebrc . rightsquarebrc com leftsquarebrc . rightsquarebrc au$
^this is a catNthis is a dog$
^this is a dogNthis is a cat$
_FtpWebRequest- = System::Net::WebRequestMethods::Ftp.UploadFile
_FtpWebRequest- = System::Net::WebRequestMethods::Ftp::UploadFile
_ZN4ROMS9ROMS_Menu24read_recipes_ingredientsE6String
__git_complete gco _git_checkout
_completion_loader man
_my_function $do_add_list leftsquarebrc @ rightsquarebrc 
_my_function ${do_add_list leftsquarebrc @ rightsquarebrc }
_www ALL=NOPASSWD: /path/to/script
_}@F}{print@a
` leftanglebrc /home/pi/auto/mark` echo 1
`!cd foo` !cd foo
`"C:\Documents and Settings\test.exe"` C:Documents and Settingstest.exe
`./program --bash` ./program --bash
`./program_name #{params}  rightanglebrc #{temp_file} 2 rightanglebrc &1` ./program_name
`/bin/sh --login -i` /bin/sh --login -i
`: not a valid identifierad: `var_name : not a valid identifierad:
`a.sh` a.sh
`a.sh` a.sh
`basename .txt ${i}`.bak basename .txt ${i}
`bash -c "$WHICH_MPI"` bash -c $WHICH_MPI
`bash -c 'cat  leftanglebrc (echo foo)'` bash -c cat  leftanglebrc (echo foo)
`bash -c \"your command with args\"` bash -c "your command with args"
`bash -ic 'sayHi "friend"'` bash -i -c sayHi "friend"
`bash ./#{path_to_pullLogs_sh} #{args}` bash ./#{path_to_pullLogs_sh}
`cat ${HOME}/.bash_history` cat ${HOME}/.bash_history
`cd $dir` cd $dir
`cd / && ls` cd / ls
`cd ~/stage.mydomain.com && unset GIT_DIR && git pull core stage` cd ~/stage.mydomain.com unset GIT_DIR git pull core stage
`chmod -v 700 {}` chmod -v 700 {}
`command` command
`command` command
`command` command
`command` command
`command` command
`command` command
`cp -R $HOME/directory.1/file.bundle /library/application\ support/directory/` cp -R $HOME/directory.1/file.bundle /library/application support/directory/
`cp /home/bhavya/workspace/UnetStack/logs/log-0.txt $dir/log.txt` cp /home/bhavya/workspace/UnetStack/logs/log-0.txt $dir/log.txt
`curl -i -s http://www.google.com|grep -q 302` curl -i -s http://www.google.com grep -q 302 echo 302 is missed
`date "+%Y-%m-%d"` date +%Y-%m-%d
`date --date="last month" +%Y-%m` date --date last month +%Y-%m
`date` date
`defaults read com.apple.finder AppleShowAllFiles` defaults read com.apple.finder AppleShowAllFiles
`diff -b file1 file2` ? diff -b file1 file2
`echo "$f" | sed "s/'/''/g"` echo $f sed s/'/''/g
`echo "$line" | sed 's/.*--- \( leftsquarebrc ^( rightsquarebrc *\) (.*/\1/'` echo $line sed s/.*--- \( leftsquarebrc ^( rightsquarebrc *\) (.*/\1/
`echo "$string" | sed 's/ leftsquarebrc ^a-zA-Z0-9 rightsquarebrc / /g'` echo $string sed s/ leftsquarebrc ^a-zA-Z0-9 rightsquarebrc / /g
`echo "${searchpath}"` echo ${searchpath}
`echo $FILE | sed 's/bond/distance/'` echo $FILE sed s/bond/distance/
`echo $MXrecords | awk '{ printf "%s", $0; }'` echo $MXrecords awk { printf "%s", $0; }
`echo ${filename%.mkv}.mp4` echo ${filename%.mkv}.mp4
`echo foo bar` echo foo bar
`echo hi there` echo hi there
`echo test` echo test
`eval echo echo $VAR=\\\\\"\\$$VAR\\\\\"` eval echo echo $VAR=\\"\$$VAR\\"
`exec "C:\Documents and Settings\test.exe"` exec C:Documents and Settingstest.exe
`exec 2 rightanglebrc  filename` exec
`expr match "$holder" '\( leftsquarebrc A-Z|a-z rightsquarebrc *\)'` expr match $holder \( leftsquarebrc A-Z|a-z rightsquarebrc *\)
`find ... 2 rightanglebrc &1` find ...
`find ...` find ...
`find /xyz/abc/music/ |grep def | head -n 1` find /xyz/abc/music/ grep def head -n 1
`find /xyz/abc/music/ |grep def | head -n line_number | tail -n 1` find /xyz/abc/music/ grep def head -n line_number tail -n 1
`foo` foo
`func args ...` func args ...
`git merge --no-ff --message "#{merge_message}" #{branch}` git merge --no-ff --message #{merge_message}
`grep '^ leftsquarebrc    rightsquarebrc *datadir leftsquarebrc    rightsquarebrc *=' /etc/mysql/my.cnf | cut -f2 -d'='`/db_backups grep ^ leftsquarebrc    rightsquarebrc *datadir leftsquarebrc    rightsquarebrc *= /etc/mysql/my.cnf cut -f 2 -d -=
`grep -l 'Credits'` grep -l Credits
`grep stuff | head -n 1` grep stuff head -n 1
`gui google-chrome` gui google-chrome
`http --print hb google.com  rightanglebrc  out.txt` http --print hb google.com
`mkdir $dir` mkdir $dir
`mkdir -p "$FINALPATH"` mkdir -p $FINALPATH
`nohup tcpdump port 389 -i bond0 -s 0 -w /tmp/capture.pcap   rightanglebrc  nohup2.out 2 rightanglebrc &1&` nohup tcpdump port 389 -i bond0 -s 0 -w /tmp/capture.pcap
`perl -wpi -e 's/( leftsquarebrc ^\r rightsquarebrc )\n/$1\r\n/g' $1` perl -w -p -i -e s/( leftsquarebrc ^\r rightsquarebrc )\n/$1\r\n/g $1
`php get_defs.php` php get_defs.php
`printf "%76s"; echo "$'\x14\x84\x04\x08'"` printf %76s echo $'x14x84x04x08'
`printf "%76s"; echo $'\x14\x84\x04\x08'` printf %76s echo $x14x84x04x08
`process $j &` process $j
`return`
`rm $tempFile` rm $tempFile
`rm -rf xyz.log` rm -r -f xyz.log
`say "I'm done master"` say I'm done master
`sed "s/'/''/g"  leftanglebrc  "$f"` sed s/'/''/g
`sed '/CREATE DATABASE/s/dms/dms_old/'` sed /CREATE DATABASE/s/dms/dms_old/
`sed -i '' -e '/ leftanglebrc ArchiveAction/,/ leftanglebrc \/ArchiveAction/ s/buildConfiguration = " leftsquarebrc ^" rightsquarebrc *"/buildConfiguration = "'$my_build_configuration'"/' /Path/To/File` sed -i  -e / leftanglebrc ArchiveAction/,/ leftanglebrc \/ArchiveAction/ s/buildConfiguration = " leftsquarebrc ^" rightsquarebrc *"/buildConfiguration = "'$my_build_configuration'"/ /Path/To/File
`sed -r ...` sed -r ...
`su - oracle -c  "echo \\"select database_role from v\\\\\\\$database;\\" | sqlplus -s / as sysdba";` su oracle -c echo \select database_role from v\\\$database \ | sqlplus -s / as sysdba
`tar -C $folder3Path -r --file=$sampleBackupsPath $compressedSampleName --remove-files` tar -C $folder3Path -r --file $sampleBackupsPath $compressedSampleName --remove-files
`tempfile 2 rightanglebrc /dev/null` tempfile
`timeout 2 ./run.sh` timeout 2 ./run.sh
`wc -l  leftanglebrc  file` / 2 wc -l
`your_command args etc` your_command args etc
a
a "$b" c
a $b c
a .. z, A .. Z, 0 .. 9
a = b if c else d if e else f if g else h
a A1 A2
a b '\''c '\''\'\'\''echo test'\''\'\
a b c
a b c
a b c
a b c
a b c d
a b c d
a b c d
a b c d
a b c d e f g h ice j keep l m
a echo a is greater than b
a leftsquarebrc 0 rightsquarebrc =seven
a leftsquarebrc key rightsquarebrc  = value
a sed -e s/M$/ 1024 * +/ -e s/K$/ +/ dc -e 0 -f -e p
a somewhat long string followed by a number: 0000001
a+
a++
a++ printf %02dn $a
a++nb++nc++n
a,b,c,d,e,f,g
a.bash b.txt
a.com b.com c.com
a1 a2 a3
a39qrT
aAbBcCdDeE...
a\0b  leftsquarebrc  ${#foo} -e -q 3  rightsquarebrc  echo $0 rocks
a_command fallback_command
a_command other_command fallback_command
a_command second_command
aa ab ac ad
aa bb cc
aa*
aaa /* c1 */ bbb /* c2 */ ccc
aaa /* test */
aaa // test
aaa bbb 0.21
aaa bbb ccc // c1 c2
aaaaabbbbbccccc
aapt dump badging
aapt dump badging $1 grep launchable cut -d ' -f 2
aa|bb cc
abc $@
abc == 0 date
abc def pqr-stu xyz
abc#def#ghi
abc','def','ghi','jkl','mno
abc','def','ghi','jkl','mno
abc,345, some words ,some text,text,with,commas
abc,345, some words ,some text,text,with,commas
abc,345, some words ,some text,text,with,commas
abc,pqr,mno
abc-tmp
abc.so* def.so* hij.so*
abc123 unknown text which might have spaces/Windows/There might be /es here
abc_def_APP_13.4.5.2
abcdeXfghijkl
abcdefghijkl
abcidentified file def as /Users/jleffler/tmp/soq/defghi
accurev hist -c My Comment -a
accurev hist -c My Comment elem1 elem2
ack +|+
ack --print0 --html -l searchpattern xargs -0 perl -p -i -e s/old/new/g
ack --print0 -l --type java (List|Collection|Map|Set) xargs -0 ack String
ack --print0 -l searchpattern xargs -0 perl -p -i -e s/old/new/g
ack --ruby -l pattern xargs mate
ack -l Peter * xargs ack -l James
ack -l {% url xargs sed -i s/{% url ( leftsquarebrc A-Za-z0-9_ rightsquarebrc *) /{% url '1' /g
ack -r -l --print0 pattern . xargs -0 -l sed -i s/pattern/other_pattern/g
ack ^(?!.*bar).*(foo).*$ file
ack assert_equal ack -v amazon
ack-grep --type python import ipdb -c -l
ack-grep -a -l -i --print0 --text $1 xargs -0 -n 1 sed -i -e s/$1/$2/g
ack-grep -l Peter xargs ack-grep -l James xargs ack-grep Peter|James
acp your comment
acroread -h -e -l -p
action $src $@
action /path/to/prog args
actions start
actions stop
adb -e install -r your-apk-file-complete-path
adb -s $deviceID shell am start -a android.intent.action.MAIN -n $packageName/$launchableActivity
adb -s 015d2578a7280412 shell ls /data/app tr -d \r
adb devices awk NR rightanglebrc 1 {print $1}
adb devices grep -o \b leftsquarebrc a-f0-9 rightsquarebrc \+\b
adb install -r game.apk
adb install MyApp.apk
adb logcat filter1:V
adb logcat grep -v nativeGetEnabledTags
adb push myfile //mnt\sdcard\
adb push test.mp4 /sdcard/test.mp4
adb push test.mp4 /sdcard/test.mp4
adb push vmstat /sdcard/
adb shell
adb shell
adb shell am force-stop com.blah.foo
adb shell am kill com.blah.foo
adb shell am start -n com.example/.ActivityName
adb shell am start -n com.package.name/com.package.name.ActivityName
adb shell am start -n package/.activity
adb shell command1 | command2
adb shell dumpsys cpuinfo
adb shell dumpsys meminfo your apps package name
adb shell dumpsys wifi
adb shell echo 1 | while read L; do echo $L; done
adb shell getprop
adb shell getprop ro.build.version.sdk
adb shell getprop service.adb.root tr -d \015
adb shell grep ro.build.version.sdk= system/build.prop
adb shell pm list packages
adb shell run-as com.example.myapp chmod 666 databases/mydatabase.db
adb shell service call notification 1
adb shell sqlite3 /data/data/ileran.game/databases/ilearn.db
adb shell su -c 'chmod 777 /my/path'
adb shell su -c 'command1; command2; command3'
adb shell svc wifi disable
adb shell svc wifi enable
add 10 20 xargs square
add arg1 arg2
add-hook emacs-startup-hook toggle-window-split
add-hook shell-mode-hook ansi-color-for-comint-mode-on
adduser
adiff fromfile
agcc vmstat.c -o vmstat
airport -s egrep -o ( leftsquarebrc  leftsquarebrc :xdigit: rightsquarebrc  rightsquarebrc {2}:){5} leftsquarebrc  leftsquarebrc :xdigit: rightsquarebrc  rightsquarebrc {2}
alias
alias $SHORTTEXT=$LONGTEXT
alias $SHORTTEXT=$LONGTEXT
alias $aliascmd cut -d -f 2 xargs
alias -g G=| grep --color
alias -g lafi=`ls -rt | tail -n 1 | tee  rightanglebrc ({ printf "last file: "; cat; }  rightanglebrc &2)` ls -r -t tail -n 1 tee  rightanglebrc ({ printf "last file: "; cat; }  rightanglebrc &2) printf last file:  cat
alias -g vv=$(date) date
alias -s c=compile_c
alias -s ps=screen -d -m okular
alias S=sudo
alias aaa=./script2.sh
alias abc=echo The quick brown fox jumps over the lazy dog.
alias adiff /usr/bin/diff --to-file=standard
alias alias_name
alias alias_name=expect -c spawn ssh usr@ip -p 57022 ; expect password ; send "passn" ; interact
alias alternate_name=MY_ALIAS_WAS=alternate_name real_name
alias ant=ant | grep -v Trying to override old definition of task
alias ascii=cat ~/ascii
alias b=bundle
alias bashcd = bash -l;cd `cat ~/.place`
alias be=bundle exec rake
alias branch=git symbolic-ref --short -q HEAD 2 rightanglebrc /dev/null
alias build-product1=(cd $working-copy/delivery; mvn package;)
alias c=clear; myscript.ksh
alias calc=noglob calc
alias cd cd \!*;  leftanglebrc dir of script file rightanglebrc /titleRename.tcsh
alias cd-=cd ${${(z)$(fc -l -1)} leftsquarebrc 3 rightsquarebrc }
alias cd=HOME=~/Documents/Github cd
alias cd=_cd
alias cda=cd /a; exit_code=$?; echo STATUS: $exit_code;  leftsquarebrc  leftsquarebrc  exit_code -eq 0  rightsquarebrc  rightsquarebrc  alias cdb=cd /b
alias cgrep=grep --color=always
alias chrome=open -a Google Chrome
alias chrome=open -a Google Chrome
alias cleanup=rm -Rf -- foo bar baz
alias cleanup=rm -Rf -- {foo,bar,baz}
alias cleanup=rm -Rf `pwd`/{foo,bar,baz} pwd
alias clear=printf e leftsquarebrc He leftsquarebrc 2J
alias clip=xclip -i -selection clipboard
alias closure=python /var/www/closure-library/closure/bin/calcdeps.py -p ../closure-library/closure/goog/ -c /var/www//closure-compiler/build/compiler.jar -f --compilation_level=ADVANCED_OPTIMIZATIONS -o compiled
alias cls=printf 033c
alias cmd=history | cmd
alias cmus=monkeys -n music cmus
alias code=cd ~/Documents/Code
alias count1=num=$1;wc $num
alias cp=my-command-script cp $*
alias csvcc=awk -F, NR==1 { print NF }
alias dev=cd /path/to/my/dev
alias dev=cd your/dev/direcrory/
alias do grep -iE '\''pattern'\'' filename | awk '\''{if ( $2  leftanglebrc  0 ) print}'\''
alias doit=cd somedir && rm -rf *
alias domsrv01=echo -e ?HT_R8'% | xclip ; ssh 10.50.0.35
alias ec=emacsclient -t -a 
alias edit=/path/to/vim
alias em=emacs
alias emacs-ro emacs !:1 --funcall toggle-read-only
alias example=cd $MYUSR ; ./bin/start.sh -t
alias execute_testfile=sh /path/to/file/testfile
alias exiftool=~/et/exiftool
alias faster=export http_proxy=http://192.168.0.205:1099
alias faster=http_proxy=http://192.168.0.205:1099
alias fer=~/Documents/tutorials/ruby/RnR/third_course_0/projects
alias fer=~/hej
alias ferr=grep "^ ERRROR"
alias ferr=grep ^ERRROR
alias ff=grep -irl
alias fixpermissions=( cd ~/public_html/wp-content/themes/presstheme; find . -type f -exec chmod 644 {} ; ; find . -type d -exec chmod 755 {} ; )
alias fixpermissions=cd ~/public_html/wp-content/themes/presstheme; find . -type f -exec chmod 644 {} ; ; find . -type d -exec chmod 755 {} ; ; cd
alias foo echo foo is set as an alias
alias foo=$(printf %q "$(which fooBinary)") printf %q $(which fooBinary) which fooBinary
alias foo=bar() { echo Hello; }
alias foo=bar=$(echo testing hello world | grep "hello world"); echo $bar echo testing hello world grep hello world
alias foo=echo foo
alias foo=pwd | rev | cut -d / -f1 | rev
alias fvgm=export|grep ^declare -x gm
alias g++=g++ -WHATEVER
alias gdb /usr/local/bin/gdb
alias geturl=python /some/cool/script.py
alias git-root=cd $(git rev-parse --show-cdup) git rev-parse --show-cdup
alias go=ssh $(pbpaste) -l pete pbpaste
alias gopath=export GOPATH=$(pwd)
alias gopath=export GOPATH=$(pwd) pwd
alias gotodir cd `/blah/blah/thescript \!:1`
alias gotodir cd `/blah/blah/thescript`
alias grep youtube-dl
alias grep=GREP_COLOR=1;32 grep --color
alias grep=grep --color=auto
alias gup=git pull origin $(git rev-parse --abbrev-ref HEAD) git rev-parse --abbrev-ref HEAD
alias hello=sudo $(fc -ln -1) fc -l -n -1
alias hgx=open -a Murky .
alias history=history -30
alias hists=history | grep -v ^ * leftsquarebrc 0-9 rightsquarebrc * *hists | grep $@
alias ij=open -a /Applications/IntelliJ IDEA 9.0.2.app
alias jump=cd $(myscript.sh) myscript.sh
alias kill3000=fuser -k -n tcp 3000
alias killbg=kill ${${(v)jobstates##*:*:}%=*}
alias knx=sudo kill -HUP `cat /usr/local/var/run/nginx.pid` cat /usr/local/var/run/nginx.pid
alias konsole_select_branch=SELECT_BRANCH=true konsole
alias lala=ls -lrt|grep a
alias lh=ls -lh
alias list-ip=nmap -sP 192.168.1.* | grep -o 192 leftsquarebrc 0-9. rightsquarebrc *
alias list-ip=nmap -sP 192.168.1.* | grep 192  | awk {print $5}
alias list-ip=nmap -sP 192.168.1.* | grep 192  | awk {print $5}
alias lls=ls -l --color=auto
alias lns=ln -s
alias lock=gnome-screensaver; gnome-screensaver-command --lock
alias ls=clear;ls
alias ls=echo Running ls -alh; ls -alh
alias ls=ls --color=auto
alias ls=ls -GpF
alias ls=ls -l
alias lsps=ps -elf | grep
alias mpsoma=mplayer http://192.168.1.1:8090
alias murky open -a Murky
alias mv_to_trash mv \!* ~/trash
alias mx=find . -name *.sh -exec chmod a+x {} ;
alias my_env=source /path/to/stuff/my_env
alias my_g++=g++ -WHATEVER
alias myalias=alias myalias;  leftanglebrc do stuff rightanglebrc 
alias myalias=myprogram $(pwd)
alias myfind find . -name 'pattern*'
alias myfold=cd ~/Files/Scripts/Main
alias myip=python -c from urllib import urlopen; print urlopen("http://whatismyip.appjet.net").read() leftsquarebrc :-1 rightsquarebrc 
alias myprog.awk=awk {print $0}  `ls -1rt | tail -1` ls -1 -r -t tail -1
alias myscript=set -f; globstopper /usr/bin/myscript
alias mysu=su -c "ZDOTDIR=$HOME zsh"
alias new=python /Python_scripts/radians.py
alias new=python Python_scripts/radians.py
alias new=python ~/Python_scripts/radians.py
alias newpython=/path/to/your/new_version/python
alias np ls -la
alias npp=notepad.exe&
alias ogc=open -a Google Chrome --args --disable-web-security
alias open=cygstart
alias p=python
alias pandoc=/path/of/new/pandoc
alias php=/usr/bin/php
alias pigalias=/dev/pig-0.11.1/bin/pig -D udf.import.list=org.apache.pig.piggybank.storage.avro -D pig.additional.jars=/dev/avro-1.7.4.jar;/dev/avro-mapred-1.7.4.jar;/dev/json_simple-1.1.jar;/Users/devpig-0.11.1/contrib/piggybank/java/piggybank.jar
alias pipup=sudo pip install --upgrade $(yolk -U | awk "{print \$1}") yolk -U awk {print $1}
alias pipup=sudo pip install --upgrade $(yolk -U | cut -d" " -f 2) yolk -U cut -d -  -f 2
alias pipup=sudo pip install -U `yolk -U | awk "{print \$1}"` yolk -U awk {print $1}
alias pipup=sudo pip install -U fnord
alias precmd echo -n "\033 rightsquarebrc 0;$user@`hostname`\007"
alias prev history | grep \!^
alias printMessag=ruby -e puts "Hello World"
alias printMessage=ruby /path/to/file.rb
alias proj=cd /home/tree/projects/java
alias proxyget=read userid?Userid: ; read passwd?Password: ; read url?URL: ; read local?Local: ; curl -x 1.2.3.4:8080 -U $userid:$passwd  $url -o $local;
alias pshell=pythonsh path/path/script.py
alias rails=/var/lib/gems/1.8/bin/rails
alias rake=nocorrect rake
alias randspec=rspec --seed $RANDOM
alias rdc=open -a "Remote Desktop Connection"
alias replace=sed s/~/~\n/g 
alias rh=sed -i '$d' ~/.bash_history
alias rm=echo SAFE
alias rm=rm -i
alias rm=rm -i
alias rot13=tr  leftsquarebrc A-Za-z rightsquarebrc   leftsquarebrc N-ZA-Mn-za-m rightsquarebrc 
alias setup_diffuser=export GIT_COMMITTER_NAME=Blah && export GIT_COMMITTER_EMAIL=blah@blah.com && export GIT_AUTHOR_NAME=Blah && export GIT_AUTHOR_EMAIL=blah@blah.com && export blah=true
alias sin=rerun ruby ${PWD##*/}.rb
alias somealias=something longer
alias sourcetree=open -a SourceTree
alias ssh_nokia=ssh -l root
alias sshx=TERM=xterm ssh -X 123.45.67.89
alias st=/correct/path/to/subl
alias startSP=cd mydirectory ; redis-server & node myApp.js
alias startSP=cd mydirectory ;redis-server & node myApp.js &
alias subl=$PATH_TO_SUBL
alias subl=/Applications/path/to/subl
alias suble=/some/thing else/here
alias svn-reset=svn status | perl -nale print $F leftsquarebrc 1 rightsquarebrc  if /^M/ | xargs svn revert
alias svndiff=svn diff --diff-cmd=diff -x -U0
alias svnx=~/bin/svnx wc . && ~/bin/svnx log .
alias tcl=tclsh tclhelper.tcl
alias test=if  leftsquarebrc  ! -d /path/to/the/folder  rightsquarebrc ; then mkdir -p /path/to/the/folder; fi
alias test=lsof -i tcp:80 | awk $1 == "Google" {print $2}
alias test=lsof -i tcp:80 | awk '$1 == Google {print $2}'
alias test=read -sp Enter pp:  pass; gpg --passphrase "$pass" --batch --symmetric --cipher-algo aes256 -o file.ext.gpg file.ext
alias test=read -sp pp:  pass; gpg --passphrase-fd 3 --etc-etc 3 leftanglebrc  leftanglebrc  leftanglebrc  $pass
alias time=time /usr/bin/time
alias totalmem=ps -u user -o rss,command | grep -v peruser | awk {sum+=$1} END {print sum/1024}
alias umusic=cd /Volumes/180 gram/Uncompressed
alias uniqlines perl -ane '"'"'print unless $a{$_}++'"'"' 
alias uniqlines=perl -ane print unless $a{$_}++ 
alias unix=echo $(date +%s) date +%s
alias up cd `yes ".." | head -n\!* | tr "\n" "\/"`
alias up-svn=svn up `ls -d ./*` ls -d ./*
alias update_my_gems=echo foo; echo bar
alias v=vim -c "
alias var=/usr/bin/python2.7 /home/user/file
alias vim=/Applications/MacVim.app/Contents/MacOS/vim
alias vim=mvim --remote-tab-silent
alias whatever cmd1; cmd2; cmd3
alias wrang=open -a TextWrangler
alias www=cd /cygdrive/c/xampp/htdocs/www
alias www=open http://localhost/~Sites/$(basename $PWD) basename $PWD
alias xxx=svn status | awk $1 =="M"{print $2;}
all: $(patsubst %.c,%,$(wildcard *.c)) patsubst %.c,%,$(wildcard *.c) wildcard *.c
all: $(subst .src,.png,$(wildcard *.src)) subst .src,.png,$(wildcard *.src) wildcard *.src
all: echo $(notdir $(CURDIR)) notdir $(CURDIR) CURDIR
all: radgrd_py.so lodiso_py.so
allow nano to suspend
als archive_name
altscreen on
altscreen on
am broadcast intent:#Intent;action=android.intent.action.BATTERY_CHANGED;i.status=5;i.voltage=4155;i.level=100;end
am start -a com.example.ACTION_NAME -n com.package.name/com.package.name.ActivityName
amixer get PCM playback sed -n /.*\ leftsquarebrc \( leftsquarebrc 0-9 rightsquarebrc *\)% rightsquarebrc .*/s//\1/p
amixer get PCM playback sed -n /.*\ leftsquarebrc \( leftsquarebrc 0-9 rightsquarebrc *\)% rightsquarebrc .*/s//\1/p
and should be able to be done using Bash
android create avd -t 12 -n test_002 -a --abi armeabi_v7a
android list targets
android update project -t android-10 -p .
android update sdk --no-ui --all --filter sysimg-15
android-sdk-windowstools
android.permission.INJECT_EVENTS
android.permission.WRITE_EXTERNAL_STORAGE
android:versionCode=38
ansible playbook.yml -i hosts
ant -D -f -i -l -e -1 -= -f -i -l -e -1 -D -f -i -l -e -2 -= -f -i -l -e -2 -b -u -i -l -d -f -i -l -e -= -b -u -i -l -d -. -x -m -l -v -e -r -b -o -s -e
ant -D -f -i -l -e -1 -= -f -i -l -e -1 -D -f -i -l -e -2 -= -f -i -l -e -2 -b -u -i -l -d -f -i -l -e build.xml -v -e -r -b -o -s -e
ant -D -o -u -t -p -u -t -. -r -o -o -t -= -/ -d -/ -o -u -t -p -u -t target1
ant -D -p -e -r -s -o -n -= -M -e -r -r -y -P -r -a -n -k -s -t -e -r hi
ant -D -p -r -o -p -e -r -t -y -= -$ -( -g -i -t -  -- -- -v -e -r -s -i -o -n -) git --version
ant -D -t -e -s -t -. -e -n -t -r -y -= -Y -o -u -r -T -e -s -t -N -a -m -e
ant -b -u -i -l -d -f -i -l -e build.xml
ant -v -e -r -b -o -s -e -d -e -b -u -g ...
ant debug
ant debug add-jar
aoeu $(pyfg) pyfg
apache ALL = NOPASSWD: /usr/bin/git
apache ALL= NOPASSWD: /path/to/script command
apachectl -V
aplay -l grep C-Media USB Audio Device perl -a -n -E s/://g, say for $t="$F leftsquarebrc 1 rightsquarebrc ,$F leftsquarebrc 8 rightsquarebrc "
aplay -l grep C-Media USB Audio Device perl -n -E s/ \ leftsquarebrc .*?\ rightsquarebrc  | : //xg; say join",",(split) leftsquarebrc 1,5 rightsquarebrc ;
aplay -q ~/.zsh/sounds/done.wav
aplay ~/.zsh/sounds/done.wav
appcmd list site
appcmd set config /section:applicationPools / leftsquarebrc name='xxx - yyy' rightsquarebrc .processModel.idleTimeout:0.00:00:00
appcmd.exe set config -s -e -c -t -i -o -n -: -s -y -s -t -e -m -. -a -p -p -l -i -c -a -t -i -o -n -H -o -s -t -/ -a -p -p -l -i -c -a -t -i -o -n -P -o -o -l -s /applicationPoolDefaults.managedRuntimeVersion:v4.0 /commit:apphost
apple,banana,pineapple
application_to_run grep FATAL
application_to_run grep FATAL
apropos (3) grep ^ leftsquarebrc a-z rightsquarebrc 
apropos -s 3 .
apropos -s 3 . grep ^ leftsquarebrc a-z rightsquarebrc 
apt-cache search gawk
apt-cache search terminal cut -d -f 1 grep terminal xargs -I % bash -c echo %; apt-cache show %; echo -e "\n"
apt-get -s -o Debug::NoLocking=true upgrade grep -c ^Inst
apt-get -y install tofrodos
apt-get install --reinstall packagename
apt-get install -y  leftsquarebrc YOUR_PACKAGE rightsquarebrc 
apt-get install alpine
apt-get install php5-cli
apt-get install python
apt-get install sshpass
apt-get install wmctrl
apt-get install xvfb
apt-get install zsh
apt-get update -q sleep 1
apt-get update apt-get -f -y upgrade  leftsquarebrc  -f /var/run/reboot-required  rightsquarebrc  shutdown -r now
apt-show-versions grep No available version
aptitude install expect
aptitude search ?provides(pattern)
arch -i 386 executable_file
arch -x -8 -6 -_ -6 -4 executable_file
archive ${_name_Project} ${_path_Componet1} filename1 file.log
archive + 1
arg_count++
args =  leftsquarebrc pathToScript, input1, input2, .... rightsquarebrc 
args leftsquarebrc i rightsquarebrc  = 0
argument at index: 3 is 2
argv leftsquarebrc 1 rightsquarebrc 
argv leftsquarebrc argc rightsquarebrc  = NULL
arp -a
arp -a cut -f 2 -d  
arp -a cut -f 2 -d   sed s/ leftsquarebrc () rightsquarebrc //g
arp -s $1 $2
arp -s $1 $2
arp -s $1 $2 grep -v SIOCSARP: Invalid argument
arp -s $1 $2 grep -v SIOCSARP: Invalid argument
arr_obj leftsquarebrc SomeSection034Blah rightsquarebrc  = 1
array
array leftsquarebrc i rightsquarebrc  = val1 + val2, ++val1
asdf exit 1
aseqdump myscript.sh
ash -c addr2line (nil) -e xcep_app
ash!/bin/sh -e
aspell check $f
aspell list --personal $HOME/Library/Spelling/en
aspnet_compiler -v -/ -W -e -b -s -i -t -e -O -n -e -p c:projectsWebsite1 -f c:InetpubwwwrootWebsiteOne
assign $my_date1
assoc .py
assoc .py=Python.File
asterisk -n -r -x "transcoder show"
asterisk -r -x originate SIP/1000 extension 4105556666@outbound
at
at $1
at -c 1072250520.a
at -f /app/data/scripts/func_test.sh -v 09:50
at -f your_command $hh:$mm
at 00:00 cmd /c copy C:Documents*.* C:MyDocs
at now +10 minutes
attachment leftsquarebrc i rightsquarebrc =--attach-file ${font1 leftsquarebrc i rightsquarebrc }
attrib /S *.xxx +r
audicerttest/incoming
augtool --autosave --noautoload --transform Desktop.lns incl /path/to/your/example.desktop set /files/path/to/your/example.desktop/Desktop Entry/NoDisplay true
autocmd BufNewFile *.py 0put ="#!/usr/bin/python leftanglebrc nl $
autocmd BufNewFile,BufReadPost *.m set filetype=objc
autocmd BufWrite /etc/httpd/conf/* !restart_apache.sh
autocmd FileType zsh set noundofile
autocmd bufnewfile *.py 0r /path/to/python_default.py
autocmd bufwritepost *.pl silent! !chmod +x %
autoreconf -f -i -s
autoreconf -i
avrdude -P -\ -\ -. -\ -U -S -B -S -E -R -0 -0 -0 ...
avrohdfs concat $DIRS
awk
awk  !x leftsquarebrc $0 rightsquarebrc ++
awk  $2 != $3 { print; next } $2 == $3 && $2 != 0 && $2 != 1 { print } INPUTFILE
awk  NR == 1 || /^13/  infile.txt
awk  leftanglebrc awk script commands rightanglebrc  input-file
awk  leftsquarebrc -W option rightsquarebrc   leftsquarebrc -F value rightsquarebrc   leftsquarebrc -v var=value rightsquarebrc   leftsquarebrc -- rightsquarebrc  program text  leftsquarebrc file ... rightsquarebrc 
awk  leftsquarebrc Aa rightsquarebrc  leftsquarebrc Rr rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc + &&  leftsquarebrc Ss rightsquarebrc  leftsquarebrc Mm rightsquarebrc  leftsquarebrc Ff rightsquarebrc _ leftsquarebrc Ll rightsquarebrc  leftsquarebrc Oo rightsquarebrc  leftsquarebrc Gg rightsquarebrc  ...
awk  { t = $1; $1 = $2; $2 = t; print; }  input_file
awk ! a leftsquarebrc $0 rightsquarebrc ++
awk ! a leftsquarebrc $1 rightsquarebrc ++ input-file
awk ! seen leftsquarebrc $0 rightsquarebrc ++ log1 log2 ...
awk ! seen leftsquarebrc $2 rightsquarebrc ++ filename
awk !($0 in seen) {seen leftsquarebrc $0 rightsquarebrc ;print}
awk !($0~s1 || $0~s2) s1=binding style=rpc s2=binding style=document
awk !($1 in a){print;a leftsquarebrc $1 rightsquarebrc } file
awk !($1~/EBI/ || $2~/EBI/)
awk !($2 in a){i leftsquarebrc NR rightsquarebrc =$2}{a leftsquarebrc $2 rightsquarebrc =$0}END{for(x=1;x leftanglebrc =NR;x++)if(x in i)print a leftsquarebrc i leftsquarebrc x rightsquarebrc  rightsquarebrc } a b
awk !($2==1 && $3==0){print} file
awk !(/^FILE NAME:/ && seen leftsquarebrc $NF rightsquarebrc ++) infile
awk !(/pattern1/ && /pattern2/) file
awk !(NR%10) file
awk !(NR%10) yourfile
awk !(NR%2) {$5="\\n"$5 }1 filename
awk !(NR%2){print p rightanglebrc =$0?p" rightanglebrc ="$0:p" leftanglebrc "$0;next}{p=$0} file
awk !(NR%2){print$0p}{p=$0} infile
awk !(NR%n){print $0 p; p=x; next}{p=p ORS $0} n=4 file
awk !/ / input.txt
awk !/##SA/ $1
awk !/#/{gsub(/ leftsquarebrc "; rightsquarebrc /,"",$0);print}
awk !/(^|\y)hello(\y|$)/ file
awk !/10.45.56.84|10.81.51.92/ file
awk !/;$/ {printf;next}1 infile
awk !/;$/{l=l""$0;next;}{print l""$0;l=""} file
awk !/^ /&&/:$/{p=0}p;/^Header 2:$/{p=1} file
awk !/^ leftsquarebrc  \t rightsquarebrc *###/ file
awk !/^ leftsquarebrc -= rightsquarebrc / && NR!=1{str=str","$1}END{print substr(str,2)}
awk !/^ leftsquarebrc 0-9 rightsquarebrc / {next} !/OK/ {print "BAD UNIT DETECTED:",$0} input
awk !/^ leftsquarebrc 0-9 rightsquarebrc /{n=0} {n++; A leftsquarebrc n rightsquarebrc =A leftsquarebrc n rightsquarebrc  (A leftsquarebrc n rightsquarebrc ?OFS:x) $0} END{for(i=1; i leftanglebrc =n; i++) print A leftsquarebrc i rightsquarebrc } OFS=t file
awk !/^ leftsquarebrc 0-9 rightsquarebrc /{n=0} {n++; A leftsquarebrc n rightsquarebrc =A leftsquarebrc n rightsquarebrc  (A leftsquarebrc n rightsquarebrc ?OFS:x) $2} END{for(i=1; i leftanglebrc =n; i++) print A leftsquarebrc i rightsquarebrc } OFS=t file
awk !/^ rightanglebrc / { gsub(/ leftsquarebrc a-z rightsquarebrc /, "C") }1 file.txt
awk !/^#/ && substr($12,1,3)~/ leftsquarebrc 01. rightsquarebrc \/ leftsquarebrc 01. rightsquarebrc / && substr($15,1,3)~/ leftsquarebrc 01. rightsquarebrc \/ leftsquarebrc 01. rightsquarebrc /
awk !/^*/{next}$1=="*"{sub("\\*+ ","");p=$0}$1="**"{c leftsquarebrc p rightsquarebrc +=1}END{for(i in c) printf "* %s  leftsquarebrc %s rightsquarebrc \n", i ,c leftsquarebrc i rightsquarebrc -1}
awk !/^C/ data.txt
awk !/^my/{$0=++cnt" "$0} 1 input
awk !/affraid/{print} /affraid/{print "Substitution"} file
awk !/hello/ file
awk !/searchphrase/{print "No Match"} file
awk !NF {$0=""}1 file awk -v RS= {print NR,$0}
awk !NF{$0=" rightanglebrc "}1 file
awk !NF{f=0} /PATTERN/ {f=1} f file
awk !NR%2{next} /Oranges/,/^$/ { if (/Good/) print $2} file
awk !_ leftsquarebrc $0 rightsquarebrc ++ infile
awk !_ leftsquarebrc $0 rightsquarebrc ++ text sort -t -, -n -k -1 -, -1
awk !a leftsquarebrc $0 rightsquarebrc ++ file
awk !a leftsquarebrc $0 rightsquarebrc ++ file1.cvs file2.cvs
awk !a leftsquarebrc $0 rightsquarebrc ++ infile
awk !a leftsquarebrc $0 rightsquarebrc ++ input.txt
awk !a leftsquarebrc $1 rightsquarebrc ++ file
awk !a leftsquarebrc $1 rightsquarebrc ++ file
awk !a leftsquarebrc $3 rightsquarebrc ++ file.txt
awk !a leftsquarebrc substr($0,1,40) rightsquarebrc ++
awk !a leftsquarebrc substr($2,0,8) rightsquarebrc ++ { print substr($2,0,8) } file.txt
awk !a++,$0=$NF RS=Fa input-awk.txt
awk !array leftsquarebrc $1,$2,$3 rightsquarebrc ++ file.txt
awk !array leftsquarebrc $2 rightsquarebrc ++ file.txt
awk !e{e=$1+4;} $1-e rightanglebrc 0{print "Range " ++i , c " entries. min: " min " max: " max ; e+=4; c=0; min=""} {if(!min)min=$1; c++; max=$1} END{print "Range " ++i , c " entries. min: " min " max: " max}  file
awk !h leftsquarebrc $1 rightsquarebrc  { g leftsquarebrc $1 rightsquarebrc =$0 } { h leftsquarebrc $1 rightsquarebrc ++ } END { for(k in g) print h leftsquarebrc k rightsquarebrc , g leftsquarebrc k rightsquarebrc  }
awk !h leftsquarebrc $4 rightsquarebrc ++ RS=--n ORS=--n FS=n| *: * infile
awk !h leftsquarebrc $4 rightsquarebrc ++ RS=--n ORS=--n infile
awk !p && /pattern/{p=1;c=0} c ~ /^( leftsquarebrc 578 rightsquarebrc |1 leftsquarebrc 689 rightsquarebrc )$/ {print; if (c==19) exit} p{c++} infile
awk !s leftsquarebrc $2 rightsquarebrc ++
awk !seen leftsquarebrc $0 rightsquarebrc ++ file
awk !seen leftsquarebrc $0 rightsquarebrc ++ file
awk !seen leftsquarebrc $1 rightsquarebrc ++ file
awk !seen leftsquarebrc $1,$2 rightsquarebrc ++ file
awk !seen leftsquarebrc $5,$6 rightsquarebrc ++ file1 file2
awk !v leftsquarebrc $2 rightsquarebrc  { print; v leftsquarebrc $2 rightsquarebrc =1; }  input
awk !x leftsquarebrc  substr( $0, 2 ) rightsquarebrc ++ file.txt
awk !x leftsquarebrc $0 rightsquarebrc ++ file.txt
awk !x leftsquarebrc $0 rightsquarebrc ++ file.txt
awk !x leftsquarebrc $0 rightsquarebrc ++ || ($0 ~ /Successful association/) /tmp/log
awk !x leftsquarebrc $1 rightsquarebrc ++ FS=/ $PATH_TO_FILE
awk !x leftsquarebrc $2 rightsquarebrc ++ file.txt
awk ""~$0 {flag=1; print; next}; flag {printf "$"; flag=0} 1
awk "14:40:00"  leftanglebrc = $1 && $1  leftanglebrc = "15:00:00" app.log
awk $(NF -1) == 200 {arr leftsquarebrc $1 rightsquarebrc ++}END{for (a in arr) print a, arr leftsquarebrc a rightsquarebrc } access.log
awk $(NF)==2013 input.tsv
awk $(NF)==2013 { count+=1 }; END { print count } input.tsv
awk $(awk '/mySearchString/ { print "NR==" NR-19 }' myInputFile.txt) myInputFile.txt awk /mySearchString/ { print "NR==" NR-19 } myInputFile.txt
awk $(echo 'BEGIN { print "hello!" }') echo BEGIN { print "hello!" }
awk $0  rightanglebrc = s && $0  leftanglebrc = e s=$start e=$end file
awk $0 != "-"
awk $0 != "Keyword:" file
awk $0 !~ "^@" && $0 !~ "^} *$" { print } FILE
awk $0 !~ /NO/ {print $0 "|YES|"} $0 ~ /NO/ {print} temp.txt
awk $0 == "Keyword:" {next} 1 file
awk $0 rightanglebrc =s && $0 leftanglebrc =e s=$(date +%H":00:00" -d 1h) e=$(date +%H":59:59" -d 1h) file date +%H:00:00 -d 1h date +%H:59:59 -d 1h
awk $0 rightanglebrc x{x=$0};END{print x} input.txt
awk $0 yourFile
awk $0 ~ /^ rightanglebrc / { print " rightanglebrc " $15; next } 1
awk $0 ~ str{print NR-1 FS b}{b=$0} str=findme path_to_file
awk $0*1==$0{$0=sprintf("%05d",$0)}1 file
awk $0*1==$0{printf("%05d\n",$0);next}1 file
awk $0="    "$0" \\"
awk $0=$0" or"
awk $0=$0*1==$0?sprintf("%05d",$0):$0 file
awk $0=$0FS tolower(substr($1,1,1)$NF) file
awk $0=$3 file
awk $0=="pattern1" {p=1}; p; $0=="pattern2" {p=0} file
awk $0=gensub(/(\s|^){(\s|$)/, "\\1 leftanglebrc \\2","g")
awk $0=length($1) FS $0 file sort -n -r sed -r s/^\S*\s//
awk $0{gsub(/./,"&\n");printf $0} input
awk $0~/ABC/{print " leftanglebrc  leftanglebrc ";print;getline;print;getline;print } temp.txt
awk $0~m {$0=$0":p=abcde"} 1 m=$(cat mac.txt) file cat mac.txt
awk $0~s1 && $0~s2 s1=binding style=rpc s2=binding style=document
awk $0~s1 && $0~s2{print FILENAME;nextfile}
awk $0~s1 || $0~s2 s1=binding style=rpc s2=binding style=document
awk $0~s1 || $0~s2{print FILENAME;nextfile}
awk $0~s1{f1=1} $0~s2{f2=1}ENDFILE{if (!(f1||f2)) print FILENAME;f1=f2=0}
awk $0~s1{f1=1} $0~s2{f2=1}ENDFILE{if (f1&&f2) print FILENAME;f1=f2=0}
awk $0~v v=patt/ern
awk $1  rightanglebrc  l { l = $1; p = 0 } $2  leftanglebrc  p { $2 = p } { p = $2 } 1 input-file
awk $1  rightanglebrc = 100 && $1  leftanglebrc = 999 file1
awk $1  rightanglebrc = 1344279903 && $1  leftanglebrc = 1344280204 { print $0 } data.txt
awk $1 !~ /random/ { print RS $0  rightanglebrc  $1 ".txt"; close($1 ".txt" } RS= rightanglebrc  ORS=
awk $1 - $3  leftanglebrc  0.01 || $3 - $1  leftanglebrc  0.01 {print $4} file
awk $1 == "055" { system( "/path/to/script " $2 )}
awk $1 == "2014-07-23" && $2  rightanglebrc = "01:00:00" && $2  leftanglebrc  "02:00:00" { print }
awk $1 == "ADDRESS" && substr($2,0,3) == "abc"
awk $1 == "ALTER" { $5=$5+5 } 1
awk $1 == "Axis" && $2 == "Mode" {t = 1;} $1 == "Vibro-Rot" && $2 == "alpha" && $3 == "Matrix" {t = 0;} t == 1 && NF == 6 {print $0} file.log
awk $1 == "CLs", $0 = $3
awk $1 == "FROM" { print $2 }
awk $1 == "HAI" && NR==1{print NR} file1
awk $1 == "SomethingA" && ! a++ || $1 == "SomethingD" { print $2 } FS=: text.txt
awk $1 == "Start" || $1 == "End" || $1 == "Slack----" {print $0} InputFile
awk $1 == "Vibro-Rot" && $2 == "alpha" && $3 == "Matrix" {t = 0;} t == 1 && NF == 6 {print $0} $1 == "Axis" && $2 == "Mode" {t = 1;} file.log
awk $1 == "a" && $2 ~ /^(LINE|SINE|ERV)/ myData.txt
awk $1 == "chr1" { total += $5 } END { print total } file
awk $1 == "export" { split($2, a, "="); print a leftsquarebrc 1 rightsquarebrc ; }
awk $1 == "go.gle.com"{print NR ":" $0} inFile
awk $1 == $2 {next} {print} oldfile
awk $1 == 3, $1 == 5 { next }; { print } INFILE
awk $1 == m { system( "/path/to/script " $2 )} m=${BTSID}
awk $1 == prev1 {print $2 - prev2} {prev1=$1; prev2=$2} file
awk $1 leftanglebrc 15 input_file
awk $1 rightanglebrc $3{ print "5"} newfile2
awk $1 rightanglebrc 1000 {print $0} graph_data_tmp.txt
awk $1 {printf s++ ? "|" $0 : $0} RS= leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc + rightanglebrc 
awk $1 ~ "^net" && $3==24{print "something", $3, "something else"} $1 ~ "^net" $3==23{print "something", $3, "something else"} file.txt
awk $1 ~ /\*+/ {prev = $2} $1 !~ /\*+/ {print prev, ":", $0} inputfile
awk $1 ~ /^ leftsquarebrc 0-9 rightsquarebrc +$/ { printf "%s: ", $2 } $1 == "HEIGHT" { height = $3 } $1 == "LATITUDE" { printf "%s %s %s, ", $2, $3, $4 } $1 == "LONGITUDE" { printf "%s %s %s, %s\n", $5, $6, $7, height } file.txt
awk $1 ~ /^(three|six|five)$/ {arr leftsquarebrc ++c rightsquarebrc  = $3} END {for (i = 1; i  leftanglebrc = c; i++) {printf "%s%s", delim, arr leftsquarebrc i rightsquarebrc ; delim = OFS}; printf "\n"} file
awk $1 ~ /^A/ && $2 ~ /^B/ file
awk $1 ~ /^France$/ { print }
awk $1 ~ /fm/ {print $2} RS=span FS= leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc 
awk $1!="MATH"{next}1;!i++{min=$2;max=$2;}{for(j=2;j leftanglebrc =NF;++j){min=(min leftanglebrc $j)?min:$j;max=(max rightanglebrc $j)?max:$j}}END{printf "Max value is %.2f. Min value is %.2f.\n", max, min} file
awk $1!="{{}}"{move leftsquarebrc ++i rightsquarebrc =$0;next}1 END{for(x=1;x leftanglebrc =length(move);x++)print move leftsquarebrc x rightsquarebrc } file
awk $1!~/^#/&&$1 in a{next;}{a leftsquarebrc $1 rightsquarebrc }1 file
awk $1-prev  rightanglebrc = 10 {print; prev=$1} years.txt
awk $10~/^DST=/{sub(/DST=/,"",$10); print $10};$11~/^DST=/{sub(/DST=/,"",$11); print $11} iptables.log sort -u
awk $13 ~ /type/ {print $15} filename.txt tee  rightanglebrc (wc -l  rightanglebrc &2) wc -l sort -u
awk $1=$1
awk $1==" leftsquarebrc end"{p=0}/^header=7075/{p=1}p file
awk $1=="1"&&$2=="1"{t=1};t;$1=="33"&&$2=="33"{exit} file
awk $1=="1"&&$2=="1"{t=1};t;$1=="33"&&$2=="33"{t=0} file
awk $1=="3"{A=NR}NR==(A+1)&&A
awk $1=="3"{getline;print;exit} file
awk $1=="Birthday"{birthday = $3} $1=="Name" && birthday leftanglebrc 1999 {print $3} birthday.txt
awk $1=="INSERT" test.txt
awk $1=="PIPPO" {print $2} file
awk $1=="Uid" && $2==1234 { print FILENAME } /proc leftsquarebrc 1-9 rightsquarebrc */status
awk $1=="User:",/login time: 2013-08/ file
awk $1=="XYZ" && $2=="GT" { f = 1 } f in.file
awk $1=="abcd" && $2 rightanglebrc 1000{print NR, $0; exit} file
awk $1=="ice" && $2=="cream" {names leftsquarebrc FILENAME rightsquarebrc ++} END{for(i in names)print i}
awk $1=="ice" && $2=="cream"{print FILENAME;nextfile} file1 file2 file3
awk $1=="number"{print $2} file
awk $1=="restartfreq"{$2=$2/2;}1 file mv t file
awk $1=="string" {print $2} file
awk $1==15{print $2} infile
awk $1==99999{f=($3==55&&$4==126)?1:0}f file
awk $1~"BODY leftsquarebrc 13 rightsquarebrc " RS= ORS=nn file
awk $1~/\/1$/ && $2==16 file
awk $1~/^000/ ...
awk $1~/^1/{print $2} file.txt
awk $1~/organization/{print $0;sub(/organization/,"company");print $0;sub(/company/,"long name")}1 file
awk $1~d {print $2} d=$(date +%Y-%m-%d) archivos.txt date +%Y-%m-%d
awk $1~r && p in k { next } { k leftsquarebrc $1 rightsquarebrc ++; print; r= "^" $1; p=$1 } words
awk $2  leftanglebrc  54 && $2  rightanglebrc  50 FS=: input.txt
awk $2  leftanglebrc  p { $2 = p } { p = $2 } 1 input-file
awk $2  rightanglebrc  45895 test-file_long.txt
awk $2 !~ /\\ leftsquarebrc  rightsquarebrc  leftsquarebrc |\\{}()!?+*.%$^ rightsquarebrc / FS=,
awk $2 !~ /^synonymous/
awk $2 - $3 infile
awk $2 = "xyz" {print $1, "\t", $8} infile
awk $2 = $2 FS "0" file
awk $2 == "$module" {print $1} /proc/devices
awk $2 == "0.0000"{getline var  leftanglebrc "file2";$1=var};{print} file1
awk $2 == "ST" { printf "%s ", $0; next} 1 input-file
awk $2 == "linux1" && $3 ~ /^eth leftsquarebrc 0-8 rightsquarebrc $/
awk $2 == "lo" {print ""} {printf("%s", $1)} END {print ""}
awk $2 == "xyz" infile sort -k 8n head -1 cut -f -1 -, -8
awk $2 == 1002 FS=| input-file
awk $2 leftanglebrc 25 {print; i++} END{print "\nTotal number of students:- "i} file
awk $2 leftanglebrc =972 {$4=$4 FS "H"} 1 file
awk $2 rightanglebrc 0 && $1=="$col1type"
awk $2 rightanglebrc 1000{print NR, $0; exit} file
awk $2 rightanglebrc 20{print $1} file1 file2
awk $2 { $2 = 1 } 1 input
awk $2 { $2 = 1; print } input
awk $2 ~ / leftsquarebrc / rightsquarebrc .* leftsquarebrc / rightsquarebrc .* leftsquarebrc / rightsquarebrc / FS=, input
awk $2 ~ / leftsquarebrc ^\\ rightsquarebrc  leftsquarebrc  rightsquarebrc  leftsquarebrc |{}()!?+*.%$^ rightsquarebrc / FS=,
awk $2 ~ /(^| leftsquarebrc ^\\ rightsquarebrc ) leftsquarebrc  rightsquarebrc  leftsquarebrc |{}()!?+*.%$^ rightsquarebrc / FS=,
awk $2 ~ /^ leftsquarebrc 0-9 rightsquarebrc $/{print} FS=t file
awk $2=$2" "sprintf("%.3f",$2) file
awk $2=$2/1024"MB" file
awk $2=="$module" {print $1} /proc/devices
awk $2=="CC" { a+=1 } {$2=sprintf("%02d",a)} 1 input
awk $2=="header"{h=$1;next} {print h " " $0} input.txt
awk $2=="n"{x++}END{print x} file
awk $2=="no"{$3="N/A"} {print $0} file
awk $2=="no"{$3="N/A"} {print} file
awk $2==120{$2=1201;next}$3==130{$3==1301}1
awk $2==120{$2=1201;next}{$2==1202}1
awk $2==120{$2=1201}$3==130{$3==1301}1
awk $2==120{$2=1201}1
awk $2==120{$2=1201}1 FS=t OFS=t file
awk $2==120{$2=1201}{print $0}
awk $2==1{fn=$3} $2==2{ln=$3} $2==3{age=$3} NR rightanglebrc 1 && NR%3==0 {print $1,fn,ln,age} file
awk $2~"^/$"{$4="acl,"$4}1 OFS=t /etc/fstab
awk $2~/^(23|17|21|1)$/ file
awk $2~/^4\.4/{print $9;exit} myfile
awk $2~/^4\.4/{print $9} myfile
awk $3  rightanglebrc  0 && $4  rightanglebrc  0 input.txt
awk $3 != $4 "" {print $0} test
awk $3 != current {id++; current=$3} {print $0, id}
awk $3 && $4 input.txt
awk $3 == "*" { $3=$2 }1 file.txt
awk $3 == 0 data
awk $3 rightanglebrc 3 inputFile
awk $3 || $3=="0" {t=$3} {$3=t} 1 file
awk $3 ~ /snow/ { print } dummy_file
awk $3!=5.5 filename
awk $3=="cd" {print $0} wc -l
awk $3=="cd"||$3=="yum"||$3=="install"||$3=="cat" {print $0} file wc -l
awk $3~/^2/&&$4=$5=$6="F" file
awk $3~/^2/{gsub(/T/,"F");print} file
awk $4  rightanglebrc  $1 { count++ } END { print count } file.txt
awk $4 != "TelePacific" file mv output file
awk $4 == "NS" {print $1, $5, $0} $4 == "A" {print $1, $1, $0} sort cut -f -3 -- -d - 
awk $4 ~ /\/foo$/ { print $1 }
awk $4 ~ /success/ {print $3} logfile
awk $4==dd{print $1} dd=02/03/2013
awk $4{c++}END{print c} file
awk $4~/^x/&&!/y/ raw.txt
awk $4~dd{print $1} dd=02/03/2013
awk $5 != "*" {print}
awk $5 != 14003 && $4~/DC/ file mv new_file file
awk $5 != last; {last = $5} last=-1 input
awk $5 !=b && NR rightanglebrc 1{print a} {a=$0; b=$5} input
awk $5 ~ /OD leftsquarebrc 0-9 rightsquarebrc *-NZ leftsquarebrc 0-9 rightsquarebrc *|NZ leftsquarebrc 0-9 rightsquarebrc *-OD leftsquarebrc 0-9 rightsquarebrc *|OE leftsquarebrc 0-9 rightsquarebrc *-NZ leftsquarebrc 0-9 rightsquarebrc *|NZ leftsquarebrc 0-9 rightsquarebrc *-OE leftsquarebrc 0-9 rightsquarebrc *|OE leftsquarebrc 0-9 rightsquarebrc *-NH leftsquarebrc 0-9 rightsquarebrc *|NH leftsquarebrc 0-9 rightsquarebrc *-OE leftsquarebrc 0-9 rightsquarebrc */ input.txt
awk $5 ~ /^(A|B|C|D)$/ *.csv
awk $5~/ leftsquarebrc ACGT rightsquarebrc / && $8~/^DP=/ && $10!~/^0/{split($0,tmp,/ leftsquarebrc =; rightsquarebrc /);if(tmp leftsquarebrc 2 rightsquarebrc  rightanglebrc 10) print} file
awk $6 == "SYN_RECV" {++ip leftsquarebrc substr($5, 1, index($5, ":") - 1) rightsquarebrc } END{for (i in ip) print ip leftsquarebrc i rightsquarebrc , i}
awk $6 == "SYN_RECV" {print substr($5, 1, index($5, ":") - 1)}
awk $6 rightanglebrc 3{print $1,$2} file
awk $6 ~ /a/ file
awk $6==1260 || $6==1068 || $6==907 {next} {print}
awk $6~/^(( leftsquarebrc 1-9 rightsquarebrc | leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |100) leftsquarebrc SM rightsquarebrc ){2}$/ file
awk $7 ~ /\.html/ {print  leftanglebrc your-field-list rightanglebrc }
awk $7~=/datasheets/{a leftsquarebrc $7 rightsquarebrc ++;} END{for(x in a)print x": "a leftsquarebrc x rightsquarebrc  file
awk $8 == 1 || $8 == 2 || $8 == 3 || $8 == 4 file
awk $9  rightanglebrc = 0.1 &&$9  leftanglebrc  0.2  s_all_frq.txt wc -l
awk $9 != "NTM" && $9 !="" $file
awk $9=="plant" file_in.txt
awk $9~/plant/ file_in.txt
awk $NF != prev {print} {prev=$NF}
awk $NF == "msgstr \"\"" { c++ } END { print c } FS=n RS= file
awk $NF leftanglebrc =10{print " leftanglebrc div style='"'"' width: 50%; background-color: red; color: white'"'"' rightanglebrc "$0" leftanglebrc /div rightanglebrc ";next}1 file
awk $NF ~ /^@/ {print $NF}
awk $NF=$NF"." file
awk $NF=="letters"{sub($NF,"");s=s $0}END{sub(/ *$/,"",s);print s} file
awk $line -v ...
awk $out $bigfile
awk $out' { /* do stuff */ }' $bigfile
awk $x  rightanglebrc  FLOOR Table.txt
awk ${ print \ $1  :{$row leftsquarebrc ' $1 ' rightsquarebrc }\ }
awk (!( $1 in arr) ){arr leftsquarebrc $1 rightsquarebrc =$0}END{for(i in arr) print arr leftsquarebrc i rightsquarebrc } file
awk ("15:21:14"  leftanglebrc = $1) && ($1  leftanglebrc = "15:51:14") file
awk ("15:21:14"  leftanglebrc = $1) && ($1  leftanglebrc = "15:51:14") file sort
awk ($0 !~ /#/ && $2 !~ /_R/){print $2} ../download/interactions.$1.$2 sort -u -k
awk ($0+0) rightanglebrc 10 && ($0+0) leftanglebrc 100 file
awk ($1==c1 && $2==c2){print line RS $0}{line=$0;c1=$1;c2=$2} file
awk ($3 != $4) && !($3=="C" && $4=="T") file
awk ($3 in t){ln leftsquarebrc $3 rightsquarebrc =t leftsquarebrc $3 rightsquarebrc ":"$0;next}{t leftsquarebrc $3 rightsquarebrc =$0}END{for(s in ln) print ln leftsquarebrc s rightsquarebrc } file
awk (NF  rightanglebrc  1){print} input
awk (NR  rightanglebrc = $4) && (NR  leftanglebrc = $5) {print} $1
awk (NR % 10 == 1){ print } your_input_file
awk (NR rightanglebrc 1){{a leftsquarebrc NR rightsquarebrc =$0;if($0~/ leftanglebrc \/ABC rightanglebrc /){for(i=NR-4;i leftanglebrc =NR;i++){print a leftsquarebrc i rightsquarebrc }}}} input.txt
awk (NR-1)%100  leftanglebrc  20 bigfile.txt
awk (PROGRAM) testfile.txt mv testfile.tmp testfile.txt
awk (length(gensub(" leftsquarebrc ^{ rightsquarebrc ","","g"))-length(gensub(" leftsquarebrc ^} rightsquarebrc ","","g"))) != 0 { print NR, $0}
awk ++a leftsquarebrc $9 rightsquarebrc  rightanglebrc 2{print $0 rightanglebrc "dups";next}1 file
awk ++seen leftsquarebrc $0 rightsquarebrc  == 2 in
awk -- BEGIN { input = ARGV leftsquarebrc 1 rightsquarebrc ; while (getline line  leftanglebrc  input) { sub(/^ +/, "", line); split(line, a, /   +/); for (i = 2; i  leftanglebrc  ARGC; ++i) { if (a leftsquarebrc 1 rightsquarebrc  == ARGV leftsquarebrc i rightsquarebrc ) {; printf "%s %s\n", a leftsquarebrc 1 rightsquarebrc , a leftsquarebrc 2 rightsquarebrc ; break; }; }; }; exit; }  leftanglebrc (my_command) ${ROWS leftsquarebrc @ rightsquarebrc } my_command
awk --field-separator ; {print $1}
awk --posix { if ($6 ~ /^.{14}:$/) print $6} file
awk --re-interval $2 ~ / leftsquarebrc 0-9 rightsquarebrc {1}/{print} FS=t file
awk --re-interval $23 ~ / leftsquarebrc 0-9 rightsquarebrc {6} leftsquarebrc 1357 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc /{print "Found a match", $23}
awk --re-interval -F  leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc {1,} {printf ("%s ", $2)} list
awk --re-interval -F -  -  -+ /^ leftsquarebrc 0-9 rightsquarebrc {4}/{print $2} ./infile
awk --re-interval ...b = match($23, / leftsquarebrc 0-9 rightsquarebrc {6}1 leftsquarebrc 0-9 rightsquarebrc /)...
awk --re-interval / leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}/{print $0} maillog
awk --re-interval /size='0x leftsquarebrc 0-9a-fA-F rightsquarebrc {4,}'/ thefile
awk -F   $1, { }
awk -F   {key=$1" "$2; value=$4" "$5; if(! key in t){t leftsquarebrc key rightsquarebrc =value} else {t leftsquarebrc key rightsquarebrc =t leftsquarebrc key rightsquarebrc ""value}} END {for (key in t){print key" "t leftsquarebrc key rightsquarebrc }} file sort -r -t -  -k 1
awk -F   {print $2-40000} Input.txt
awk -F  :  $1=="Unexpected exception"{a leftsquarebrc $2 rightsquarebrc ++} END{for (i in a) print i,a leftsquarebrc i rightsquarebrc } output.txt
awk -F  =  FNR==NR { array leftsquarebrc $1 rightsquarebrc =$2; next } $1 in array { sub ($2, array leftsquarebrc $1 rightsquarebrc ) }1 fileb filea
awk -F  =  FNR==NR { array leftsquarebrc $1 rightsquarebrc =$2; next } $1 in array { sub ($2, array leftsquarebrc $1 rightsquarebrc ); delete array leftsquarebrc $1 rightsquarebrc  }1; END { for (i in array) print i FS array leftsquarebrc i rightsquarebrc  } fileb filea
awk -F  leftanglebrc /*td rightanglebrc | leftanglebrc /*tr rightanglebrc  / leftanglebrc \/*t leftsquarebrc td rightsquarebrc  rightanglebrc .* leftsquarebrc A-Z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc / {print $3, $5, $7 } FILE
awk -F  leftsquarebrc  ' rightsquarebrc  { print $2 ": " $7 " -- rightanglebrc  " $14}
awk -F  leftsquarebrc  ,: rightsquarebrc + FNR==NR { a leftsquarebrc $3 rightsquarebrc =$4; next } $1 in a { print a leftsquarebrc $1 rightsquarebrc , $2 } OFS=: file1 file2
awk -F  leftsquarebrc  =:, rightsquarebrc  FNR==NR { a leftsquarebrc $1 rightsquarebrc =$0; next } $2 in a { split(a leftsquarebrc $2 rightsquarebrc ,b); for (i=3;i leftanglebrc =NF-1;i+=2) for (j=2;j leftanglebrc =length(b)-1;j+=2) if ($(i+1) == b leftsquarebrc j rightsquarebrc ) line = (line ? line "," : "") $i ":" b leftsquarebrc j+1 rightsquarebrc ; print $1 "=" line; line = "" } file1 file2
awk -F  leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc  / leftanglebrc ns1:CarrierServiceId rightanglebrc / {print $3} TEST.tmp
awk -F  leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc  / leftanglebrc td / { gsub(/ leftanglebrc b rightanglebrc /, ""); sub(/ .*/, "", $3); print $3 }  file
awk -F  leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc  { for (i=1; i leftanglebrc =NF; i++) if ($i ~ /translate="yes"/) print $(i+1), "=", $(i+1) } file.txt
awk -F  leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc + {for (i=2; i leftanglebrc =NF; i+=2) if ($i ~ /^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc +$/) print $i} file
awk -F  leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *\\| leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * -v OFS=, $2 ~ / leftsquarebrc 0-9 rightsquarebrc {5}/ {print $2,$3}
awk -F  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *, leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * {print $2} input.txt
awk -F  leftsquarebrc  rightsquarebrc  leftsquarebrc  rightsquarebrc  NR  rightanglebrc  1 {print $2}
awk -F  leftsquarebrc  rightsquarebrc  leftsquarebrc  rightsquarebrc  {$0=NF==3?$2:NF rightanglebrc 4?$2 OFS $4:1}1 OFS=* file
awk -F  leftsquarebrc  rightsquarebrc  leftsquarebrc  rightsquarebrc  {if(NF==3)print $2; else if(NF rightanglebrc 4)print $2,$4; else print 1} OFS=* file
awk -F  leftsquarebrc  rightsquarebrc  leftsquarebrc  rightsquarebrc  {print $1,$2} 11
awk -F  leftsquarebrc  rightsquarebrc  leftsquarebrc  rightsquarebrc  {print $2,$4} OFS=* file
awk -F  leftsquarebrc  t;= rightsquarebrc + { print $1, $2, $3, $4, $5, $6, $7, $8 } file.txt
awk -F  leftsquarebrc "./ rightsquarebrc  { print $0 $3 "-thumbs." $4 } file.txt
awk -F  leftsquarebrc '/ rightsquarebrc  {for (i=3; i leftanglebrc =NF; i+=3) if ($i leftanglebrc 10) next; print} file
awk -F  leftsquarebrc () rightsquarebrc  FNR==NR { a leftsquarebrc $(NF-1) rightsquarebrc ++; next } !(gensub(/(.*),.*/,"\\1","g",$(NF-1)) in a) File1 File2
awk -F  leftsquarebrc () rightsquarebrc  {print $(NF-1)} input tr -d ,
awk -F  leftsquarebrc ,~ rightsquarebrc  NF  leftanglebrc  21 { line = (line ? line OFS : line) $0; fields = fields + NF } fields  rightanglebrc = 21 { print line; line=""; fields=0 } NF == 21 { print } file.txt
awk -F  leftsquarebrc /() rightsquarebrc  -v OFS=; {print $0,$(NF-2),$(NF-1)} your-file
awk -F  leftsquarebrc : leftanglebrc  rightanglebrc / rightsquarebrc + NR % 2 { n = $1 } NR % 2 == 0 { print $2 ":" n ":" $1 }
awk -F  leftsquarebrc : leftanglebrc  rightanglebrc / rightsquarebrc + { n = $1; getline; print $2 ":" n ":" $1 }
awk -F  leftsquarebrc :, rightsquarebrc  /=sent/{a leftsquarebrc $2 rightsquarebrc =$0;}/=receive/{print a leftsquarebrc $2 rightsquarebrc , $0;delete a leftsquarebrc $2 rightsquarebrc ;}END{for(i in a)print a leftsquarebrc i rightsquarebrc ,"NO MATCH";} file
awk -F  leftsquarebrc :, rightsquarebrc  {split($2,a,",");if($1~/sent/){if(prev!~/receive/&& NR!=1)print prev,"NOMATCH";else if (NR!=1)print prev;prev=$0;session=a leftsquarebrc 1 rightsquarebrc ;}if($1~/receive/&&session==a leftsquarebrc 1 rightsquarebrc ){prev=prev","$0;}}'END'{if(prev~/receive/)print prev;} file1.txt
awk -F  leftsquarebrc :\t rightsquarebrc  FNR==NR{n leftsquarebrc $1 rightsquarebrc ;next}$5 in n{print  rightanglebrc  ("Alignments_"$5".sam")}
awk -F  leftsquarebrc =  rightsquarebrc + FNR==NR{a leftsquarebrc $1 rightsquarebrc =$0;next} $1 in a{$0=a leftsquarebrc $1 rightsquarebrc }1 oldfile newfile
awk -F  leftsquarebrc =, rightsquarebrc  FNR==NR { for(i=2;i leftanglebrc =NF;i++) a leftsquarebrc $1 rightsquarebrc  leftsquarebrc $i rightsquarebrc ; next } { $5 = "NOMATCH"; for(j in a) for (k in a leftsquarebrc j rightsquarebrc ) if (substr($2,0,6) == k) $5 = j }1 OFS=, file1.txt file2.txt
awk -F  leftsquarebrc =, rightsquarebrc  FNR==NR { for(i=2;i leftanglebrc =NF;i++) a leftsquarebrc $1,$i rightsquarebrc ; next } { $5 = "NOMATCH"; for(j in a) { split(j,b,SUBSEP); if (substr($2,0,6) == b leftsquarebrc 2 rightsquarebrc ) $5 = b leftsquarebrc 1 rightsquarebrc  } }1 OFS=, file1.txt file2.txt
awk -F  leftsquarebrc @#= rightsquarebrc +
awk -F  leftsquarebrc | rightsquarebrc  leftsquarebrc | rightsquarebrc  -v OFS=, {$1=$1}1
awk -F  leftsquarebrc |, rightsquarebrc  { for (i=2;i leftanglebrc =NF;i++) print $1 "|" $i } file
awk -F  {for(i=1;i leftanglebrc =NF;i++) freq leftsquarebrc $i rightsquarebrc ++;}END{for(i in freq) printf("%c %d\n", i, freq leftsquarebrc i rightsquarebrc );}
awk -F " /^%attr/ {gsub(/\\/, "/", $(NF-1))} 1 OFS= file
awk -F " /^%attr/ {gsub(/\\/, "/", $(NF-1))} 1 OFS= file mv _tmp file
awk -F " /upload_url/ {print $2} filename
awk -F " {OFS="'"'"'"; gsub(" ", "%20", $2); print $0}
awk -F "*,"* {print $2} textfile.csv
awk -F "*_"* {print ";189;" ($5 ? $5 : $4) ";-6"} file.txt
awk -F # {print $2}
awk -F # {print $2}
awk -F #+|@+|=
awk -F $ { print $(NF-1) } shadow.lab4
awk -F $ { print $3 } shadow.lab4
awk -F $ { print $4 } shadow.lab4
awk -F $ { print $NF } shadow.lab4
awk -F $1 == $title $library wc -l
awk -F $8!=$12 {print $8,"=",$12}
awk -F $: -f file.awk
awk -F , $1 !=""{OFS=","; print $1,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20} file1.csv
awk -F , -f test.awk test.dat
awk -F , -v OFS=, { for (i=1;i leftanglebrc =NF-4;i++){ printf $i, }; printf "\n"}
awk -F , -v OFS=, {print $1, $4, $4}
awk -F , -v i=$i { i++; j=i+2; printf "%3d, %12.3f, %12.3f\n", $1, $i, $j } All_Runs.csv
awk -F , -v oid=$oid $5 == oid $SYMBOL_CSV_FILE
awk -F , -v tId=$1 $0 ~ "(^|,)" tId "(,|$)" file
awk -F , BEGIN { i = j = 1 } { i++; j+=3; printf "%3d, %12.3f, %12.3f\n", $1, $i, $j  rightanglebrc  Run-$i.csv } All_Runs.csv
awk -F , FNR == 2 {print $1 " age is " $2} names
awk -F , NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}{print $0 "," (a leftsquarebrc $2 rightsquarebrc ?"Available":"NotFound")  } f22.txt f11.txt
awk -F , { gsub(/(^{)|(}$)|"/, ""); for (i = 1; i  leftanglebrc = NF; ++i) print $i }
awk -F , { if ($8 == 6) { print $1":"$2":"$4":"$7":"$8 } }
awk -F , {if ($2!='0') print}
awk -F , {if(NF==1){ print "Exiting"; exit -1}} exit
awk -F , {print $7} file
awk -F -  -  -+ {print $2} ./infile
awk -F -  -  {print $3} file
awk -F -  -* -: -  -* {if(x!=$1)x=$1;else $1="   "}1 input.txt
awk -F -  -* -@ -  -* NR==FNR{lines leftsquarebrc $2 rightsquarebrc =$0} NR!=FNR{if(lines leftsquarebrc $1 rightsquarebrc )lines leftsquarebrc $1 rightsquarebrc =lines leftsquarebrc $1 rightsquarebrc  " @ " $2} END{for(line in lines)print lines leftsquarebrc line rightsquarebrc } file2.csv file1.csv
awk -F -  -- -  -v date=$YESTERDAY -v patt=$1 $0 ~ date && $0 ~ patt {print $1} $ACCESSLOG
awk -F -  -- -v OFS=n- $1=$1
awk -F -  -/ -  $1 == "'"$log"'" { print $3} schedlist
awk -F -  -/ -  $1 == s {print $3} s=$log schedlist
awk -F -  -O -b -j -e -c -t -I -d -\ -( {sub(/".*$/,"",$2)}$0=$2 file
awk -F -  -S -= -= -v k1=this {gsub(" leftsquarebrc  rightsquarebrc  leftsquarebrc ()#$@~%  rightsquarebrc ", "", $2); if ($2 ~ k1) print $1}
awk -F -  -S -= -= -v k1=this {gsub(" leftsquarebrc ^ leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc ", "", $2); if ($2 ~ k1) print $1}
awk -F -  -S -= -= -v k1=this {gsub(" leftsquarebrc ^a-zA-Z0-9 rightsquarebrc ", "", $2); if ($2 ~ k1) print $1}
awk -F -  -| -= $12 ~/401/{print $10} inputFile
awk -F -  -| -| -| -  {$0=$1}1 file
awk -F -  BEGIN {OFS="," FS} { print $1, $2, $3 } data
awk -F -  { print $1 }
awk -F -  { print $1, $2, $3 } OFS=,  data
awk -F -  { print $1, $2, $3 } file.txt
awk -F -  {print "00000000"$7} tmp.txt
awk -F -  {print $4,$3,$5,$6,$7,"1","2","3","4"}
awk -F -  {printf "%s:%s:%s:%s\n", substr($9, 1, 2), $3, $17, $0}
awk -F - leftsquarebrc  -  - leftsquarebrc  - rightsquarebrc  - rightsquarebrc  {print $4,$7} your_file
awk -F - leftsquarebrc  -  -, - rightsquarebrc  NR rightanglebrc 2{for (i=2;i leftanglebrc =NF;i++) if ($i leftanglebrc -1 || $i rightanglebrc 1) print (NR%2==0) ? NR ORS NR + 1 : NR - 1 ORS NR; next } file.txt
awk -F - leftsquarebrc  -  -, - rightsquarebrc  NR rightanglebrc 2{for (i=2;i leftanglebrc =NF;i++) if ($i leftanglebrc -1 || $i rightanglebrc 1) { print NR; next } } file
awk -F - leftsquarebrc  -  -. - rightsquarebrc  -v ts=$Timestamp2 $2 == ts {print $1} find_thread
awk -F - leftsquarebrc  -  -. - rightsquarebrc  /cpu MHz/ {if (f) {print $(NF-1); exit}; f=1} /proc/cpuinfo
awk -F - leftsquarebrc  -  -/ - rightsquarebrc  $(NF-1)=="Firefox"{print $NF} file.log
awk -F - leftsquarebrc  -  -/ - rightsquarebrc  NR~/^ leftsquarebrc 123 rightsquarebrc $/; /^---/{ip=$2} /^rtt/{print ip, $8} /100% packet loss/{print ip, "100% packet loss"} file
awk -F - leftsquarebrc  -  -/ -t - rightsquarebrc  {print $2} /usr/share/nmap/nmap-services
awk -F - leftsquarebrc  -  -: - rightsquarebrc  -* {if($7 == $9 ) print $1,$2,$3,$4,$5,$6,$7,$8,$9; else print $1,$2,$3,$4,$7,$8,$5,$6,$9} input.txt column -t
awk -F - leftsquarebrc  -  -: -. - rightsquarebrc  {for(i=1;i leftanglebrc =NF;i++) {if ($i=="Y") c++;}}{print c; c=0} inputfile
awk -F - leftsquarebrc  -  -t - rightsquarebrc  -* -; - leftsquarebrc  -  -t - rightsquarebrc  -* NR  rightanglebrc  1 && NF  rightanglebrc  1 { print $2"= rightanglebrc \"0000:0000:0000:1000::"$1"/64\"" } file
awk -F - leftsquarebrc  -  -t -: - rightsquarebrc  -* FNR==NR {a leftsquarebrc $2 rightsquarebrc =$0;next} {print a leftsquarebrc $3 rightsquarebrc ,$5,$6,$7 } OFS=t f2 f1
awk -F - leftsquarebrc  - leftanglebrc  - rightanglebrc  - rightsquarebrc  {print $3}
awk -F - leftsquarebrc  - leftanglebrc  - rightanglebrc  - rightsquarebrc  {print $3} input.txt
awk -F - leftsquarebrc  - leftsquarebrc  -: -b -l -a -n -k -: - rightsquarebrc  -: - rightsquarebrc  -+ { print $4 } infile
awk -F - leftsquarebrc  - leftsquarebrc  -: -s -p -a -c -e -: - rightsquarebrc  -, - rightsquarebrc  -+ {for(i=4;i leftanglebrc =NF;++i)print $1,$2,$3,$i} file
awk -F - leftsquarebrc  - rightanglebrc  -, -) - rightsquarebrc  {gsub(/.*ID /,"",$6);gsub(/Addr.*/,"",$7);print $2,$3,$6,$7 } file
awk -F - leftsquarebrc  - rightanglebrc  -, -) - rightsquarebrc  {print $2,$3,$6,$7 } file
awk -F - leftsquarebrc  - rightsquarebrc  - leftsquarebrc  - rightsquarebrc  /ERROR/ {a leftsquarebrc $4 rightsquarebrc ++} END{for (i in a) print i, a leftsquarebrc i rightsquarebrc } file
awk -F - leftsquarebrc  - rightsquarebrc  - leftsquarebrc  - rightsquarebrc  /dB/ { print $2 }  leftanglebrc (amixer sget Master) amixer sget Master
awk -F - leftsquarebrc  - rightsquarebrc  - leftsquarebrc  -| - rightsquarebrc  - leftsquarebrc  - rightsquarebrc  {print NF-1} input.txt
awk -F - leftsquarebrc  - rightsquarebrc  - leftsquarebrc  -| - rightsquarebrc  - leftsquarebrc  - rightsquarebrc  {print NF} input.txt
awk -F - leftsquarebrc  - rightsquarebrc  /define/ && /URL/{print $4} config.php
awk -F - leftsquarebrc  - rightsquarebrc  /define/ && /URL/{print $4} config.php
awk -F - leftsquarebrc  -$ -t -, - rightsquarebrc  {print "$0 =",$0; for (i=1;i leftanglebrc =NF;i++) print "\t$" i, "=", $i} file
awk -F - leftsquarebrc  -( -) - rightsquarebrc  $2 rightanglebrc 2{print} file
awk -F - leftsquarebrc  -( -) - rightsquarebrc  /^ / {printf "%s ", $2; next} /^ leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc /{print ""}
awk -F - leftsquarebrc  -( -) - rightsquarebrc  /^ / {printf "%s ", $2}
awk -F - leftsquarebrc  -( -) - rightsquarebrc  FNR==NR { m leftsquarebrc ++d rightsquarebrc =$1;next } { for(i=1;i leftanglebrc =d;i++){if( $0 ~ m leftsquarebrc i rightsquarebrc  ){ print }}} dataset secondfile
awk -F - leftsquarebrc  -( -) - rightsquarebrc  {print $2} file
awk -F - leftsquarebrc  -( -= -t -; - rightsquarebrc  $9 rightanglebrc 2 file
awk -F - leftsquarebrc  -, -  - rightsquarebrc  {for (i=2; i leftanglebrc =NF;i++) print $1","toupper($i)} file
awk -F - leftsquarebrc  -, -| - rightsquarebrc  NR==FNR{gh leftsquarebrc $0 rightsquarebrc ;next} {print "set security address-book global", (($2=="group") && ($3 in gh) ? "address-set" : "address")} $group_holder your.csv
awk -F - leftsquarebrc  -. - rightsquarebrc  NF rightanglebrc 2{print $2} file
awk -F - leftsquarebrc  -. -= - rightsquarebrc  $4 ~ /^ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +$/ {print $3} file
awk -F - leftsquarebrc  -. -_ - rightsquarebrc  !a leftsquarebrc $2 rightsquarebrc ++ file
awk -F - leftsquarebrc  -: -  - rightsquarebrc  {if(/^ leftsquarebrc 0-9 rightsquarebrc /)print $1,$2,$4;else print $3,$4,$1}
awk -F - leftsquarebrc  -: - leftsquarebrc  - rightsquarebrc  -v vd=$sd BEGIN{ gsub(/\//," ",vd);"date +%s -d \""vd"\""|getline d} {p=$0;  gsub(/\//," ",$2); "date +%s -d \""$2"\""|getline o;if(o rightanglebrc d) print p} log.txt
awk -F - leftsquarebrc  -: -, -  - rightsquarebrc  -+ OFS=": " { for (i = 2; i  leftanglebrc = NF; i++) print $1, $i } file
awk -F - leftsquarebrc  -: -. -  - rightsquarebrc  $5=="IP"{print $4","$12"."$13"."$14"."$15}
awk -F - leftsquarebrc  -: -; - rightsquarebrc  {if(NF rightanglebrc n){n=NF;w=$1}}END{print w} filename
awk -F - leftsquarebrc  -; -  - rightsquarebrc  -+ {print "JOIN_IMPORTANT_ATTRIBUTE", $8 $4 "; " $0} file
awk -F - leftsquarebrc  -= -# - rightsquarebrc  NR==15 {gsub("\"","",$2); print $2} main.py
awk -F - leftsquarebrc  -= -: -  -- - rightsquarebrc  /^ rightanglebrc /{s=$3" "$4" "$5; next} {print s,$0} file
awk -F - leftsquarebrc  -^ -  - rightsquarebrc  -* NR==1{f=$2}{sub($2,f)}1 file
awk -F - leftsquarebrc  -^ -  - rightsquarebrc  -* length($2) leftanglebrc 4{sub($2,"    ")}1 file
awk -F - leftsquarebrc  -^ -  - rightsquarebrc  -* {sub($2,"    ")}1 file
awk -F - leftsquarebrc  -^ -0 -- -9 - rightsquarebrc  -* / leftsquarebrc 0-9 rightsquarebrc / { print ($1 != "" ? $1 : $2) }
awk -F - leftsquarebrc  -_ -- - rightsquarebrc  {print "Version number : "$3; print "Release number : "$4}
awk -F - leftsquarebrc  -t -/ - rightsquarebrc  {print $2} file
awk -F - leftsquarebrc  -| - rightsquarebrc  -{ -4 -} { printf "Field 1 - rightanglebrc  %s\nField 2 - rightanglebrc  %s\n", $1, $2 } infile
awk -F - rightanglebrc  $2~/^mail/{f=$2".mail";gsub(/ leftsquarebrc )( rightsquarebrc /,"_",f)}{print  rightanglebrc  f} file
awk -F - rightanglebrc  /table name/{$NF="slonyid="q x++ q FS}1 q= inputFile
awk -F - rightanglebrc  /table name/{print $(NF-1)" slonyid""=""\""NR-1"\""" rightanglebrc "} inputFile
awk -F - rightanglebrc  {print $2} file.txt
awk -F -" $2~/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *PATTERN/{print $2} file
awk -F -" $4
awk -F -" $4 huge.csv
awk -F -" -, -" {cmd="date -d \"$(date -d \""$3"\")+10days\" \"+%Y-%m-%d %T\"";cmd | getline datum; close(cmd); print $0 ",\""datum"\""} test.csv
awk -F -" -v OFS=" FNR==NR{ a leftsquarebrc $0 rightsquarebrc ++; next} $2 in a { $0 = "+" $0 } 1 file.csv target.csv
awk -F -" -v OFS=" FNR==NR{ a leftsquarebrc $0 rightsquarebrc ++; next} { sub(/^ ?/, $2 in a ? "+" : " ") } 1 file.csv target.csv
awk -F -" -v OFS=" FNR==NR{ a leftsquarebrc $0 rightsquarebrc ++; next} { sub(/^ ?/, $2 in a ? "+" : " ") } 1 file.csv target.csv
awk -F -" -v OFS=| BEGIN { print "*Brand", "Product", "Quality*"} { sub(/.* : /, "", $5); sub(/ leftsquarebrc . rightsquarebrc /, "", $5); print $2, $4, $5 } file column -t -s |
awk -F -" / leftanglebrc address| leftanglebrc hostnames/{print $2} file
awk -F -" /au_pxytimetag/{print $(NF-1)} yourfile
awk -F -" /sectorNumber/{x="Sector:" $2 RS} /cellIdentity/{x=x $2 RS} /\ leftanglebrc \/Sector/{printf x} file
awk -F -" NR==FNR{a leftsquarebrc $1 rightsquarebrc ;next}($6 in a){print "TIMESTAMP=\""$2"\"\nSQLTEXT=\""$10"\"\n=========\n"  rightanglebrc  $6".txt"} file2 file1
awk -F -" { for(i=1;i leftanglebrc NF;i++) if ($(i+1) ~ /RSS/) print $i } file
awk -F -" { printf (NR  rightanglebrc  1 ? ";%s" : "%s"), $2 } END { if (NR) print "" } file
awk -F -" {for (i=2;i leftanglebrc =NF;i+=2) if ($i ~/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *PATTERN/ ) {print $i;next}}
awk -F -" {print $2"-"$4} data.txt sort -t -- -k 4 -k -3 -M -k 2 awk -F -- {kv leftsquarebrc $1 rightsquarebrc =$2"-"$3"-"$4}END{for(k in kv){print k,kv leftsquarebrc k rightsquarebrc }}
awk -F -" {print $2}
awk -F -" {print $4} file
awk -F -# !a leftsquarebrc $1 rightsquarebrc ++ your_file.txt
awk -F -# NF rightanglebrc 1{split($2,a," leftsquarebrc 0-9 rightsquarebrc +");print $1 FS $2+11 a leftsquarebrc 2 rightsquarebrc ;next}1 infile
awk -F -# OFS=FS { for (i=2; i  leftanglebrc = NF; i++) gsub(" ", "+", $i); print } file.txt
awk -F -# OFS=FS { gsub(" ", "+", $2) }1 file.txt
awk -F -$ -f -o -r -m -a -t -i -n -d -i -c -a -t -o -r {print $formatarg} $filename
awk -F -$ -t BEGIN {OFS="\t"} {$3="new_str"; print} in.csv
awk -F -$ -t BEGIN{OF=OFS}{print $1,$2,$10,$12,$14,$20} AECPRDA.TAB head -1 0
awk -F -$ -{ -H -O -S -T -N -A -M -E -% -% -. -* -} /usb/ && !seen leftsquarebrc $1 rightsquarebrc ++ {print $1} /var/log/messages
awk -F -$ /\$/{printf("%-79s$%s\n", $1, $2);next}1 ./params
awk -F -$ {x+=$NF}END{print "\n**Total: $"x} $1
awk -F -% /^\s*kernel/{print NR} $grubFile
awk -F -& {for(i=1;i leftanglebrc =NF;i++)if($i~/country/ ||$i~/language/){split($i,a,"=");printf a leftsquarebrc 2 rightsquarebrc " "}} your_file
awk -F -& {gsub(/\./,"",$2)}1 file
awk -F -' {c leftsquarebrc $2 rightsquarebrc ++} END{for (w in c) print w,c leftsquarebrc w rightsquarebrc } file
awk -F -' {print $2,$4} file.txt
awk -F -) /-/ {a=$0;getline;t=split($1,x," ");sub(/-/,"-"x leftsquarebrc t rightsquarebrc ")",a);$t="";print a"\n"$0;next} !/-/ file
awk -F -* {i+=$1*$2} END{print i} count.txt
awk -F -, !($2 ~ / / || $3 ~ / /) input.txt
awk -F -, !a leftsquarebrc $1 rightsquarebrc ++ { keys leftsquarebrc ++i rightsquarebrc  = $1 } !r leftsquarebrc FILENAME rightsquarebrc ++ { ++argind } { b leftsquarebrc $1, argind rightsquarebrc  = $2 } END { for (i = 1; i in keys; ++i) { k = keys leftsquarebrc i rightsquarebrc ; t = k; for (j = 1; j  leftanglebrc = argind; ++j) t = t FS (length(b leftsquarebrc k, j rightsquarebrc ) ? b leftsquarebrc k, j rightsquarebrc  : "0000"); print t } } file1 file2 file3
awk -F -, !arr leftsquarebrc $1 rightsquarebrc ++ { print } LOGFILE
awk -F -, !seen leftsquarebrc $1 rightsquarebrc ++ file
awk -F -, !seen leftsquarebrc substr($6,4,8) rightsquarebrc ++ infile.txt
awk -F -, !seen leftsquarebrc tolower($1) rightsquarebrc ++ file
awk -F -, !x leftsquarebrc toupper($1) rightsquarebrc ++ test.csv
awk -F -, $0~var {print $2} var=$title $library
awk -F -, $1 !~ / leftsquarebrc ^ leftsquarebrc :digit: rightsquarebrc  rightsquarebrc /
awk -F -, $1 ~ /^ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +$/
awk -F -, $1!="'${empid_search}'" tmpfile
awk -F -, $1=="01/02/2002"{p=1} $1=="01/08/2008"{p=2} $1!="01/08/2008" && p==2{exit} p dataset.txt
awk -F -, $2
awk -F -, $2 !~ / / input.txt
awk -F -, $2 == "" file
awk -F -, $2 file
awk -F -, $2 leftanglebrc 100 file
awk -F -, $2 ~ /\/.*\/.*\// input
awk -F -, $2 ~ /^ leftsquarebrc a rightsquarebrc {2}$/
awk -F -, $2=="Group"{ g=$1; print "create group",g } $7!="-"{print "add " $7 " to " g} file
awk -F -, $2=="Group"{g=$1; print "create group",g}{print "add " $7 " to " g} file
awk -F -, $3  rightanglebrc  -39 momenttensors.csv
awk -F -, $3 !~ /^synonymous/ fileCSV.csv
awk -F -, $3 == "\"0\"" file.csv
awk -F -, $3 ~ /"0"/ file.csv
awk -F -, $3!~/""/{nbr=$3} {print $1","$2","nbr} file
awk -F -, $4 ~ /@test\.com/ /home/mail/test.csv
awk -F -, $5 == $oid $SYMBOL_CSV_FILE
awk -F -, ++a leftsquarebrc $1,$3 rightsquarebrc  == 2 {print $1} your.file
awk -F -, -  !/^#/ && NF{$1=$1; print} OFS=: file
awk -F -, -  $1=="foo"{print $2} file
awk -F -, -  -v OFS=: !/^#/ && NF{$1=$1; print} file
awk -F -, -  BEGIN{OFS=":"} !/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *#/ && NF{$1=$1; print} file
awk -F -, -  {for(i=1;i leftanglebrc =NF;i++)printf "%.1f%s",$i,(i==NF?RS:FS)}
awk -F -, - leftsquarebrc  - leftsquarebrc  -: -s -p -a -c -e -: - rightsquarebrc  - rightsquarebrc  -* {print $1,$2}
awk -F -, -+ NF==8;1 file.txt
awk -F -, -f qq.awk qq.in
awk -F -, -v -C -O -L -M -= -m -i -n -A -c -c -e -s -s -T -i -m -e -f qq.awk qq.in
awk -F -, -v -O -F -S -= -, -v -c -= -1 NR == 1 {for (i=1; i leftanglebrc NF; i++) {if ($i != "") {g leftsquarebrc c rightsquarebrc =i; f leftsquarebrc c++ rightsquarebrc =$i}}} NR rightanglebrc 2 { for (i=1; i  leftanglebrc  c; i++) {print $1,$2, $g leftsquarebrc i rightsquarebrc   rightanglebrc  "file_"f leftsquarebrc i rightsquarebrc ".csv" }} data.csv
awk -F -, -v -O -F -S -= -, {$1=NR}1 input.txt
awk -F -, -v -O -F -S -= -, {$5=$5}1
awk -F -, -v -O -F -S -= -, {if($7~/^BL/ && $2==""){$2="foo"}print;} file
awk -F -, -v -m -a -x -= -0  NF  rightanglebrc  max { max_line = $0; max = NF; } END { print max_line; }
awk -F -, -v -s -= -$ -s -e -a -r -c -h {for (i=1;i leftanglebrc =NF;i++)if($i~"^"s"$"){print i;exit;}}{print "not found"} yourString
awk -F -, -v -t -y -p -e -= -2 ($1=="'"$user"'") {type=1}; END {print type} notas.csv
awk -F -, -v OFS=, $1 != "" { link=$1 } { $1 = link; print $0 }
awk -F -, -v OFS=, FNR==NR{ sub(/ leftsquarebrc  \t\r rightsquarebrc $/, ""); a leftsquarebrc $0 rightsquarebrc ++; b leftsquarebrc FNR rightsquarebrc =$0; next} { t = $4; gsub(/(^"|"$)/, "", t); r = " "; if (t in a) { c leftsquarebrc t rightsquarebrc ++; r = "+" }; sub(/^ leftsquarebrc  \t rightsquarebrc */, r); } 1; END { for (i = 1; i in b; ++i) { t = b leftsquarebrc i rightsquarebrc ; sub(/^ leftsquarebrc  \t rightsquarebrc */, t in c ? "+" : " ", t); print t  rightanglebrc  "/dev/stderr" } } file.csv target.csv
awk -F -, -v OFS=, FNR==NR{ sub(/ leftsquarebrc  \t\r rightsquarebrc *$/, ""); a leftsquarebrc $0 rightsquarebrc ++; next} { t = $4; gsub(/(^"|"$)/, "", t); sub(/^ leftsquarebrc  \t rightsquarebrc */, t in a ? "+" : " "); } 1 file.csv target.csv
awk -F -, -v OFS=, NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next}{for(x in a)if(x~"^"$1FS)print $0,x} file2 file1
awk -F -, -v OFS=, NR==FNR{d leftsquarebrc $2 rightsquarebrc =$4;next}$2 in d{$5=d leftsquarebrc $2 rightsquarebrc }7 file2 file1
awk -F -, -v OFS=, {$1 = sprintf("%13.0f", $1); print} foo.csv
awk -F -, -v OFS=, {$5 = tolower($5); print} file
awk -F -, -v OFS=, {gsub(" ", "_", $3); print} file.txt
awk -F -, -v a=$a { if ($10==a) print $0 } ...
awk -F -, -v awkvar=$1 $4 ~ "^\""awkvar {print $1 $2} records.txt
awk -F -, -v col=B NR==1{for(i=1;i leftanglebrc =NF;i++)if($i==col)break;print;next}$i==2 file
awk -F -, -v var=$var { $3 = var } 1 OFS=, math_ready.csv
awk -F -, -| -^ -| -$ {print $2} testfile.csv
awk -F -, .....
awk -F -, /$itemname/ { print $3 }
awk -F -, /'$title'/ {print $2} $library
awk -F -, /HELLO/{ $3=" NEW, "$3;}1 OFS=, infile.txt
awk -F -, /Salaried/{print $2} $PAYROLL
awk -F -, BEGIN { OFS = "," } $1 { last = $1 } !$1 { $1 = last } { print } SedExit.txt
awk -F -, BEGIN { OFS = "," } {$6="2012-02-29 16:13:00"; print} input.csv
awk -F -, BEGIN {OFS = ","} {gsub("-( leftsquarebrc 0-9. rightsquarebrc +)", "(" substr($3, 2) ")", $3); print} inputfile
awk -F -, BEGIN {OFS=","} {$10=substr($10,1,255);print}
awk -F -, BEGIN {OFS=","} {t = $8; $8 = $9; $9 = t; print}
awk -F -, BEGIN{ OFS=", "} {print $1, $4+1} 0809_data.csv
awk -F -, BEGIN{OFS=","} {$5 = tolower($5); print} file
awk -F -, BEGIN{OFS=","}{{gsub("\047","",$2)}; print} file.txt
awk -F -, BEGIN{print "Failure_Code,FAILURE_SUM,Ratio"}{a leftsquarebrc ++i rightsquarebrc =$1;b leftsquarebrc i rightsquarebrc =$2};/Total/{for(j=1;j leftanglebrc =i;++j)printf "%s,%d,%0.2f%\n",a leftsquarebrc j rightsquarebrc ,b leftsquarebrc j rightsquarebrc ,(b leftsquarebrc j rightsquarebrc *100/$2)} file
awk -F -, FNR==NR && /STRING/ { gsub(/ /,""); a leftsquarebrc $3 rightsquarebrc ; next } FNR!=NR { for (i in a) if ($0 ~ i) { print; next } } test.txt temp.txt
awk -F -, FNR==NR { a leftsquarebrc $1 rightsquarebrc ++; next } { print $0, ($3 in a ? a leftsquarebrc $3 rightsquarebrc  : "0") } OFS=, file file
awk -F -, FNR==NR { a leftsquarebrc $1 rightsquarebrc ; next } $1 in a file1 file2
awk -F -, FNR==NR { a leftsquarebrc $2 rightsquarebrc =$0; next } { print a leftsquarebrc $0 rightsquarebrc  } file2 file1
awk -F -, FNR==NR { for(i=1;i leftanglebrc =NF;i++) a leftsquarebrc $i rightsquarebrc ; next } { for(j=1;j leftanglebrc =NF;j++) if (!($j in a)) r = (r ? r FS : "") $j } END { print r } file2 file1
awk -F -, FNR==NR {a leftsquarebrc $1 rightsquarebrc +=$2;next} {print $0 ","($2 in a?$2","a leftsquarebrc $2 rightsquarebrc :"NotFound,NotFound")} f2.txt f1.txt
awk -F -, FNR==NR {a leftsquarebrc $1 rightsquarebrc =$0;next} {if (!($1 in a)) print $0,a leftsquarebrc $1 rightsquarebrc  ; } OFS=,  leftanglebrc (gzip -dc f22.txt.gz)  leftanglebrc (gzip -dc f11.txt.gz) gzip -d -c f22.txt.gz gzip -d -c f11.txt.gz
awk -F -, FNR==NR{a leftsquarebrc $1 rightsquarebrc =$0;next} ($2 in a){print $0,a leftsquarebrc $2 rightsquarebrc } OFS=, f22.txt f11.txt
awk -F -, FNR==NR{a leftsquarebrc $3 rightsquarebrc ++;next} /k_k/ {if(a leftsquarebrc $3 rightsquarebrc ==2)print $0} file file
awk -F -, FNR==r{print c} r=$r c=$c file
awk -F -, NF == 1 {header = $0;} NF  rightanglebrc  1 {print header", "$0;} test.txt
awk -F -, NF!=3 file
awk -F -, NR  rightanglebrc  1 {a leftsquarebrc $1 rightsquarebrc =$1} END { delim=":"; num=asort(a); for (i=1;i leftanglebrc =num;i++) printf "\"%s\" ",a leftsquarebrc i rightsquarebrc ; printf "\n"} tables/ansi.csv
awk -F -, NR == 4 { print $3 } somefile.csv
awk -F -, NR == FNR { r = $3; next } { $3 = r } 1 OFS=, math_ready.csv math_ready.csv
awk -F -, NR rightanglebrc 1 && $7 leftanglebrc =0.05 { print $7 } test.txt
awk -F -, NR rightanglebrc 1{ fname=$2".csv"; print  rightanglebrc  rightanglebrc (fname); close(fname);} yourCsv
awk -F -, NR rightanglebrc 1{f=$1".sync";print  rightanglebrc  rightanglebrc  f;close(f)} file.csv
awk -F -, NR rightanglebrc 1{for (i=2;i leftanglebrc =NF;i++){sum +=$i}if (sum rightanglebrc 0) print $0;sum=0} csv
awk -F -, NR=="'$line'"{print $'$index'} $1
awk -F -, NR==1 || $2==2 file
awk -F -, NR==100{ $150 = "NewValue"}1 OFS=, myfile.csv
awk -F -, NR==1{for(i=1;i leftanglebrc =NF;i++)if(!($i in v)){ v leftsquarebrc $i rightsquarebrc ;t leftsquarebrc i rightsquarebrc }}{s=""; for(i=1;i leftanglebrc =NF;i++)if(i in t)s=s sprintf("%s,",$i);if(s){sub(/,$/,"",s);print s}}  file
awk -F -, NR==1{hdr=$0;next}!($3 in files){files leftsquarebrc $3 rightsquarebrc =1;print hdr"\n" rightanglebrc $3".csv"}{print rightanglebrc $3".csv"} test.csv
awk -F -, NR==1{hdr=$0;next}!($3 in files){files leftsquarebrc $3 rightsquarebrc =1;print hdr"n" rightanglebrc $3".csv"}{print rightanglebrc $3".csv"} test.csv
awk -F -, NR==1{hdr=$0;next}{out=$3".csv"}!($3 in files){files leftsquarebrc $3 rightsquarebrc ;print hdr"\n" rightanglebrc out}{print rightanglebrc out} test.csv
awk -F -, NR==1{title=$0;next} { print  rightanglebrc  rightanglebrc  ($2".csv");colse} yourCSV
awk -F -, NR==FNR{PATS leftsquarebrc $0 rightsquarebrc ++;next}$1 in PATS b.txt a.txt
awk -F -, NR==FNR{PATS leftsquarebrc $0 rightsquarebrc ++;next}{for(p in PATS) if($1~p) print $0} b.txt a.txt
awk -F -, NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next} $1 in a file2.csv file1.csv
awk -F -, NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next}$1 in a 300513-code.csv 30-05-4UTF.csv
awk -F -, NR==FNR{a leftsquarebrc $1$2 rightsquarebrc =$3;next}{$3=a leftsquarebrc $1$2 rightsquarebrc ;}1 OFS=, file1 file2
awk -F -, NR==FNR{a leftsquarebrc $1,$2,$3,$4 rightsquarebrc ;next} ($1SUBSEP$3SUBSEP$6SUBSEP$7 in a) file1.txt file2.txt
awk -F -, NR==FNR{a leftsquarebrc $2 rightsquarebrc =1; next;} ($2 in a) file2 file1
awk -F -, NR==FNR{old leftsquarebrc $0 rightsquarebrc ;next} $0 in old{delete old leftsquarebrc $0 rightsquarebrc ;next} 1 END{for(line in old) print line} old.txt  leftanglebrc (sort -u new.txt) sort -u new.txt sort
awk -F -, gsub(/ leftsquarebrc  \t rightsquarebrc +$/, "", $2); {print $2 ":"} test.csv
awk -F -, length($19) rightanglebrc 1 file.txt
awk -F -, length($2) leftanglebrc =3 input.txt
awk -F -, length($2) rightanglebrc 5 file
awk -F -, seen leftsquarebrc $3,$4 rightsquarebrc ++{print $0  rightanglebrc  "dups.csv"; next}{print $0  rightanglebrc  "new.csv"} mycsv
awk -F -, { #Do stuff } 2012_03_ leftsquarebrc 0-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
awk -F -, { $4 = ($4 == "N/A" ? -1 : $4) } 1 OFS=, test.csv
awk -F -, { count leftsquarebrc substr($2,0,5) rightsquarebrc  = 1; } END { for(i in count) x++; print x; } abc.csv
awk -F -, { for (i=1;i leftanglebrc =NF;i++) print (i rightanglebrc 1 ? substr($0,0,4) : "") $i } file
awk -F -, { if (((length($2) == 15 ) || length($2) == 16) && (length($1) == 12 && length($3) == 15)) print }
awk -F -, { if (NF  leftanglebrc  15 ) print NR "," $0 } fileToTest
awk -F -, { n = split($2,array," "); printf "%s, %s\n", $1, array leftsquarebrc n rightsquarebrc  } file.txt
awk -F -, { outFile="$1"; gsub(/\//, "", outFile); print $0  rightanglebrc  outFile } infile
awk -F -, { print  rightanglebrc  substr($2,0,4) ".txt" } file
awk -F -, { print $0  rightanglebrc  $1} infile
awk -F -, { print $2 "\\" $1 } file
awk -F -, { print $NF, $0 } yourfile sort -n -k 1 sed s/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc * //
awk -F -, { print substr($2,1,5) } abc.csv sort uniq wc -l
awk -F -, { printf "INSERT INTO Testing (\x27\Date\x27,\x27User\x27,\x27Usage\x27) VALUES (\x27%s\x27,\x27%s\x27,\x27%s\x27)",$1,$2,$3;print ""} yourFile
awk -F -, { printf("%s,%d,%.10f\n",$1,$2,$3)} text.csv
awk -F -, { sub(/T.*/,"",$3); sub(/T.*/,"",$4) }1 OFS=, file.txt
awk -F -, { system("mkdir -p "$2); print  rightanglebrc  $2"/"$2".csv"} Input.csv
awk -F -, { x += $1 } END { print x " " x/NR } MyFile
awk -F -, {$NF="e";}1 OFS=, file
awk -F -, {OFS=","; a=$5; $5=",,,,,",a; print $0} file
awk -F -, {OFS=",";print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$20,$21,$22,$23,$24,$25,$30,$33} infile.csv
awk -F -, {SUM+=$3} END{print SUM} $FILE
awk -F -, {a = -log($16)/log(10); printf("%0.4f\n", a)}
awk -F -, {a leftsquarebrc $1 rightsquarebrc +=$2;c leftsquarebrc $1 rightsquarebrc ++}END{for(k in c)print c leftsquarebrc k rightsquarebrc , k","a leftsquarebrc k rightsquarebrc } file sort -n -r awk NR leftanglebrc 3&&$0=$2
awk -F -, {a leftsquarebrc $1 rightsquarebrc =$2} END{for (i in a) print i  rightanglebrc  a leftsquarebrc i rightsquarebrc } file
awk -F -, {a leftsquarebrc $3/$2 rightsquarebrc  = $3/$2; b leftsquarebrc $3/$2 rightsquarebrc  = $0} END {c = asort(a); for (i = 1; i  leftanglebrc = c; i++) print b leftsquarebrc a leftsquarebrc i rightsquarebrc  rightsquarebrc } inputfile
awk -F -, {a=$0;gsub(/ /,"",$2);if(length($2) rightanglebrc 5)print a} file
awk -F -, {arr leftsquarebrc $2 rightsquarebrc ++; if (FILENAME != prevfile) {c++; prevfile = FILENAME}} END {for (i in arr) {if (arr leftsquarebrc i rightsquarebrc  == c) {print i}}} file*.csv
awk -F -, {arr leftsquarebrc $2 rightsquarebrc +=$1}END{for(i in arr)print i,",",arr leftsquarebrc i rightsquarebrc }
awk -F -, {array leftsquarebrc $1","$2 rightsquarebrc +=$3} END { for (i in array) {print i"," array leftsquarebrc i rightsquarebrc }} datas.csv
awk -F -, {c leftsquarebrc $1 rightsquarebrc ++; t leftsquarebrc $1 rightsquarebrc =$0} END {for(k in c) {if (c leftsquarebrc k rightsquarebrc ==1) print t leftsquarebrc k rightsquarebrc }}
awk -F -, {cnt leftsquarebrc $2 rightsquarebrc +=$3}END{for (x in cnt){printf "%s,%d\n",x,cnt leftsquarebrc x rightsquarebrc }} file
awk -F -, {count leftsquarebrc $1,$2,$3 rightsquarebrc ++; line leftsquarebrc $1,$2,$3 rightsquarebrc  = line leftsquarebrc $1,$2,$3 rightsquarebrc  ", " NR} END {for (i in count) {if (count leftsquarebrc i rightsquarebrc   rightanglebrc  1) {v=i; gsub(SUBSEP, FS, v); print "Error: lines", substr(line leftsquarebrc i rightsquarebrc , 3), "collide on value:", v}}}
awk -F -, {for (i=2;i leftanglebrc =NF;i++) printf $i" "} filename
awk -F -, {for (i=3;i leftanglebrc =4;i++) sub("'\''", "", $i)}1 OFS=, file
awk -F -, {for(i=1;i leftanglebrc =NF;i++) if($i rightanglebrc 1) {$i="replacement"}}1 OFS=, file
awk -F -, {for(i=1;i leftanglebrc =NF;i++) {if ($i=="alireza") c++;}}{print c; c=0} inputfile
awk -F -, {for(i=1;i leftanglebrc NF-2;i++)printf("%s,", $i)}{print $NF+$(NF-1)+$(NF-2)} file
awk -F -, {for(i=2;i leftanglebrc =NF;i++)print $1,$i} temp
awk -F -, {for(i=length($3);i rightanglebrc =1;i--){s=s substr($3,i,1)};$3=s;s=""}1 OFS=, file mv temp file
awk -F -, {gsub(/ leftsquarebrc  \t rightsquarebrc +$/, "", $2); print $2 ":"}
awk -F -, {if ($2 == 0 || $11  rightanglebrc  0) printf "%s,%s,%s,%d,%s,%s,%s,%d:%d:%d,%d,%dn", $7,$5,$6,$4,$8,strftime("%c",$9),strftime("%c", $11),$10/(60*60),$10%(60*60)/60,$10%60,$16,$15}
awk -F -, {if($1 in a) {a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc  "," $NF} else {a leftsquarebrc $1 rightsquarebrc =$0}} END {asort(a); for(i in a) print a leftsquarebrc i rightsquarebrc }
awk -F -, {if(NR rightanglebrc 1)printf("%s,%s\n",$1,$(NF-1));} ip.txt
awk -F -, {print  rightanglebrc  $1".out"} your_file
awk -F -, {print  rightanglebrc  $2; close($2)} test1.csv
awk -F -, {print  rightanglebrc  rightanglebrc  $2"_"$3"_"$5} infile.txt
awk -F -, {print  rightanglebrc $3".txt"} your_file
awk -F -, {print $$i}
awk -F -, {print $(NF-1)} file
awk -F -, {print $1  rightanglebrc  $2} INPUT_FILE
awk -F -, {print $1 "," $2}
awk -F -, {print $1","$2","$3":"$4":"$5} inputfile
awk -F -, {print $1, $2}
awk -F -, {print $1,$2,$3,$4+$5+$6} OFS=, file
awk -F -, {print $1,$2}
awk -F -, {print $1} data.txt
awk -F -, {print $1} file.txt
awk -F -, {print $1} inputfile.csv
awk -F -, {print $2 ":" $1}
awk -F -, {print $2} $PAYROLL grep Salaried
awk -F -, {print $2} abc.csv cut -c 1-5 sort uniq wc -l
awk -F -, {print $2} grep Salaried $PAYROLL
awk -F -, {print $3 "," $5} inputfile.csv
awk -F -, {print $4} x.CSV awk -F -  {print $1} sort -u
awk -F -, {print $4} x.CSV awk -F -  {print $1} sort uniq
awk -F -, {printf("%s\t%s", $2, $3)  rightanglebrc  "Col1.txt"} file.csv
awk -F -, {s leftsquarebrc NR rightsquarebrc =$1;e leftsquarebrc NR rightsquarebrc =$2;} { for (i=s leftsquarebrc NR rightsquarebrc ;i leftanglebrc =e leftsquarebrc NR rightsquarebrc ;i++) print i","$3","$4}  Input.txt
awk -F -, {split($1,a,".");print  rightanglebrc a leftsquarebrc 1 rightsquarebrc "/"$1".out"} your_file
awk -F -, {split($2,d,"-");print  rightanglebrc  d leftsquarebrc 1 rightsquarebrc } file
awk -F -, {split($3,ary,/:/); print ary leftsquarebrc 2 rightsquarebrc } input
awk -F -, {system("sleep 1");print  $1} sample.csv netcat -l -k 9999
awk -F -, {users leftsquarebrc $1 rightsquarebrc +=$2}; END{for (u in users) {printf("%s,%s\n", u, users leftsquarebrc u rightsquarebrc )}} file1 file2
awk -F -- $4  rightanglebrc  198000 {print} filename
awk -F -- $4  rightanglebrc  198000 {print} filename mv tmp filename
awk -F -- - leftsquarebrc  -0 -- -9 - rightsquarebrc  - leftsquarebrc  -. - rightsquarebrc  - leftsquarebrc  -0 -- -9 - rightsquarebrc  {print $1} file
awk -F -- - leftsquarebrc  -0 -- -9 - rightsquarebrc  -+ {print $1} yourfile
awk -F -- - leftsquarebrc  -0 -- -9 - rightsquarebrc  {$0=$1}1 yourfile
awk -F -- -v OFS=- NF rightanglebrc 1{l=length($1);if(l leftanglebrc 2||l rightanglebrc 3)$2=" "$2}7 file
awk -F -- -v OFS=- {for(i=NF-1;i rightanglebrc =1;i--){l=length($i);if(l leftanglebrc 2||l rightanglebrc 3)$(i+1)=" "$(i+1)}}7 file
awk -F -- NF leftanglebrc =2 file
awk -F -- NF leftanglebrc =2 file mv tmp_file file
awk -F -- { print $3 }
awk -F -- {t=20130910130000;split($2,a,"\.");}a leftsquarebrc 1 rightsquarebrc  rightanglebrc t your_fle
awk -F -. $1 != x; { x = $1 } file
awk -F -. -v -s -= -$ -s -t -a -r -t -_ -t -i -m -e -v -e -= -$ -e -n -d -_ -t -i -m -e $1 rightanglebrc s && $1 leftanglebrc e logfile
awk -F -. -v OFS=. /_AA/,/#else/ {if (/ leftsquarebrc 0-9 rightsquarebrc + leftsquarebrc . rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc + leftsquarebrc . rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc + leftsquarebrc . rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc +/) {$NF=$NF+1}}; {print} file mv tmp file
awk -F -. -v OFS=.n; { $1=$1; print $0 } filename.txt
awk -F -. -v OFS=.n; { $1=$1; print $0 } filename.txt
awk -F -. ...
awk -F -. / leftsquarebrc 0-9 rightsquarebrc +\./{$NF++;print} OFS=.
awk -F -. / leftsquarebrc 0-9 rightsquarebrc +\./{$NF+=1;OFS=".";print}
awk -F -. NF==4 {$0=substr($0,1,4)"."substr($0,5,4)"."substr($0,9)}1 OFS=. file
awk -F -. NR  rightanglebrc  1 && $1==a && $2 + 0 != b + 1; { a=$1; b=$2 + 0 } file
awk -F -. NR  rightanglebrc  1 && strtonum("0x" $1) == a && strtonum("0x" $2) != b + 1; { a=strtonum("0x" $1); b=strtonum("0x" $2) } file
awk -F -. NR==FNR{getline x;a leftsquarebrc $2$3 rightsquarebrc =x;next}$2$3 in a{print;print a leftsquarebrc $2$3 rightsquarebrc ;next}1 templatefile inpfile
awk -F -. strtonum("0x" $1) != x; { x = strtonum("0x" $1) } file
awk -F -. {$NF+=1; OFS="."; print $0}
awk -F -. {print $(NF-1)} inFile.txt
awk -F -. {print $1$2}
awk -F -. {print $1} your_file sort -u xargs mkdir
awk -F -. {print length($0),NF,length($1)} yourfile
awk -F -. {printf "%03s%03s\n", $3, $4} /metadata cut -c -3 -- -6
awk -F -. {printf "%d%03d\n", $3 % 10, $4} /metadata
awk -F -. {s="";for (i=NF;i rightanglebrc 1;i--) s=s sprintf("%s.",$i);$0=s $1}1 file
awk -F -/ !x leftsquarebrc $1 rightsquarebrc ++ file
awk -F -/ -v -O -F -S -= -/ {$1=""}1 input
awk -F -/ -| -, {b=mktime($5" "$4" "$3" 00 00 00 00");a=(systime()-b)/(365*24*60*60);a=a==int(a)?a:int(a)+1;print $0","a} file
awk -F -/ /^FILE_PATHS/{$4=$4=="REL"?"AUNT":$4;$4=$4=="SIB"?"BROTHER":$4;print $4} file.txt
awk -F -/ /^FILE_PATHS/{$4=$4~"^(REL|SIB)$"?$6:$4;print $4} file.txt
awk -F -/ /std_out_file:|std_err_file:/{print ($(NF-1)=="batchlog" ? "$BATCH" : "$CONSOLE") "LOG_DIR/"$NF} file
awk -F -/ gsub($3,"anotherdomain",$0)
awk -F -/ {print $1"/"$2"/"$3} file
awk -F -/ {print $2}
awk -F -/ {print $4}
awk -F -/ {print $NF} Input.txt
awk -F -/ {print $NF} file
awk -F -/ {print $NF} file.txt
awk -F -:  $3  rightanglebrc  499 {print $1}  /etc/passwd sudo grep -f /etc/shadow
awk -F -: $0=$1 ":" file
awk -F -: $1=="Account number"{print $2;exit;} file
awk -F -: $1=="Ford" && $4=="Red" { c+=$5 } END { print c } file
awk -F -: $2  rightanglebrc  0 { split($1, a, "."); print a leftsquarebrc 5 rightsquarebrc } file
awk -F -: $2~/12.345.678.99/{print $1} inputfile
awk -F -: $2~/pattern_to_match/{print $1} filename
awk -F -: $3  rightanglebrc  999 /etc/passwd
awk -F -: $3 !~ /^ ?#/ { print }
awk -F -: $3 !~ /^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *#/ { print }
awk -F -: $3 == 2 Input.txt
awk -F -: $3 == 2 Input.txt wc -l
awk -F -: $3 rightanglebrc =500 {print $0} /etc/passwd
awk -F -: $4 rightanglebrc 2500 && $4  leftanglebrc  5500 file
awk -F -: $7=="/bin/csh" {print $5} /etc/passwd
awk -F -: ($2 != $3 && $3 != $4){print $0":foobar"} file
awk -F -: -  -* NR==FNR{c leftsquarebrc $2 rightsquarebrc ++;next}$2 in c{print $2,c leftsquarebrc $2 rightsquarebrc ;delete c leftsquarebrc $2 rightsquarebrc } file file
awk -F -: -  -| -  {print $1,$2} list.txt mv /tmp/t.tmp /path/to/list.txt
awk -F -: -f script_above.awk /etc/passwd
awk -F -: -v OFS=: $5="01"
awk -F -: -v OFS=: -v s=$1 -v r=$2 $1==s{$2=r}7 file
awk -F -: -v awkvar=$user $1==awkvar {print $7} /etc/passwd
awk -F -: -v user=$USER $1==user /etc/passwd
awk -F -: -v year=$(date +"%Y") { split($4, dob, "/"); if (year-dob leftsquarebrc 3 rightsquarebrc   leftanglebrc = 60) print $1 } file.txt date +%Y
awk -F -: -v year=$(date +"%Y") { split($4, dob, "/"); print $1, "is", year-dob leftsquarebrc 3 rightsquarebrc , "years old" } file.txt date +%Y
awk -F -: -| -, -| -} {print $2,$4,$6,$8} file
awk -F -: -| -, BEGIN {split("ABCDEFGHIJKLMNOPQRSTUVWXYZ",a,"");for (i=1;i leftanglebrc =27;i++) x leftsquarebrc a leftsquarebrc i rightsquarebrc  rightsquarebrc =i} {printf "%s,",x leftsquarebrc $1 rightsquarebrc ;for (i=3;i leftanglebrc NF;i+=2) printf "%s,",$i;print $NF} OFS=, file
awk -F -: /LOC/ {sum += $3;} END {print sum;} InputFileName
awk -F -: /^ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc / {iface=$1; next} /baseTX/ {print iface; exit}
awk -F -: /^Employee/{a=$NF;next}{print $0,a} file
awk -F -: /^USER:/{u=$2} /POSITION:/{p=$2} /CLIENT:/{c=$2} /APPLICATION:/{print u,p,c,$2} yourfile
awk -F -: /^bar/ {print $2} /local/foo.txt
awk -F -: /^bar/ {print } /local/foo.txt
awk -F -: /^lg325:/{$6="/sbin/nologin"}1 OFS=: file
awk -F -: /eval/{a leftsquarebrc $1 rightsquarebrc +=$2}END{for(i in a)print i ": " a leftsquarebrc i rightsquarebrc } results.txt
awk -F -: /name/{print $2} infile
awk -F -: BEGIN {OFS="\t"; print "Turbine\047s" OFS "My"} /Turbine/ {tflag=1; mflag=0} /My/ {mflag=1; tflag=0} /Full speed/ {if (tflag) {T=$2; tflag=0}; if (mflag) { print T OFS OFS $2; mflag=0}} inputfile
awk -F -: BEGIN{OFS=":"} /cjares/{temp=$1; $1=$2; $2=temp; print} /etc/passwd
awk -F -: BEGIN{print "USER\t\tHOME\t\tSHELL"}{printf("%s\t\t%s\t\t%s\n", $1, $6, $7)} /etc/passwd
awk -F -: FNR==NR{a leftsquarebrc $1 rightsquarebrc =$0;next}{if($1 in a){print a leftsquarebrc $1 rightsquarebrc ;} else {print;}} file2 file1
awk -F -: NR==7 || NR==8 {print $5} file
awk -F -: NR==FNR {a leftsquarebrc $2 rightsquarebrc ; next} !($2 in a) file2 file1
awk -F -: NR==FNR {x leftsquarebrc $1 rightsquarebrc  = $0; y leftsquarebrc $1 rightsquarebrc  = $2; next} ($1 in x) {print $2":"y leftsquarebrc $1 rightsquarebrc } file1 file2
awk -F -: NR==FNR{a leftsquarebrc $1$2 rightsquarebrc ;next}$1$2 in a file_a file_b
awk -F -: NR==FNR{a leftsquarebrc $1,$2 rightsquarebrc ;next}!(($1,$2) in a) excludes.txt all.txt
awk -F -: NR~/^(7|8)$/ {print $5} file
awk -F -: length($1)==4{print $1} /etc/passwd
awk -F -: { printf "%014i: %s\n", $1,$2 } input.txt
awk -F -: { printf uid: %sn cn: %s %sn sn: %sntel: %sn, $1, $3, $2, $3, $4 } INPUTFILE
awk -F -: {a leftsquarebrc ++i rightsquarebrc =$0;if(i==3)f=$2}i==4{for(x=1;x leftanglebrc =i;x++)print a leftsquarebrc x rightsquarebrc  rightanglebrc f".txt";i=0} file
awk -F -: {cmd = "last "$1; cmd | getline result;printf "%s", result} /etc/passwd
awk -F -: {f=$1?$1:f; print  rightanglebrc  f} file
awk -F -: {f=$1?$1:f; print  rightanglebrc  rightanglebrc  f; close(f)} file
awk -F -: {for (i=1; i leftanglebrc =NF; i++) if ($i !~ /foo/) {printf "%s%s", $i, (i==NF? RS : FS)}}
awk -F -: {gsub(/,/," ",$3);print $3} file
awk -F -: {if ($3  rightanglebrc  999) print "user", $1, "uid", $3} /etc/passwd
awk -F -: {print $1':'$2} inputFile
awk -F -: {print $1}
awk -F -: {print $2":"$1} input-file
awk -F -: {print $2, $4}
awk -F -: {print $2, $4} data.txt
awk -F -: {print $2,$1} OFS=: input-file
awk -F -: {print $NF; for(i=NF-1; i; i-- ) print ":"$i } input-file
awk -F -: {print $NF} file
awk -F -: {printf "%s %s",$2,ORS=NF?"":"\n"}END{print "\n"} file
awk -F -: {printf "%s, ", $1} END {print ""}
awk -F -: {printf "COUNTRY: %s\nCAPITOL: %s\nTIMEZONE: %s\n\n",$1,$2,$3}
awk -F -: {v leftsquarebrc $NF rightsquarebrc +=$2*$3}END{for(x in v)print x, v leftsquarebrc x rightsquarebrc } file
awk -F -; !a leftsquarebrc $2 FS $3 rightsquarebrc ++ file
awk -F -; !seen leftsquarebrc $2 rightsquarebrc ++ file
awk -F -; $0=length($1) leftanglebrc 5?"0" $1 FS:$1 FS
awk -F -; $1!=l{c=$2}{$2=c++}{l=$1}1 OFS=; input
awk -F -; $1!=l{c=0}{$2=++c}{l=$1}1 OFS=; input
awk -F -; $1=="1234" || $1=="1390" {print $2,$4} file
awk -F -; $3+0  rightanglebrc  100 yourfile
awk -F -; -v OFS=; $6=0;7 file
awk -F -; -v col=$1 !seen leftsquarebrc $col rightsquarebrc ++ {print $col} test.csv
awk -F -; -v col=$1 { print  rightanglebrc  "fisier_"$col".csv" } test.csv
awk -F -; -v col=$col -v pat=$val $col ~ pat $input
awk -F -; BEGIN{OFS=";"} {$3="";print } file3 sed s/;;/;/
awk -F -; NR==FNR{a leftsquarebrc $0 rightsquarebrc }{for(i in a){if(i==substr($3,4))print substr($1,2),substr($3,4),$2  rightanglebrc  rightanglebrc  substr($3,4)}} Pattern.txt hugefile
awk -F -; NR==FNR{a leftsquarebrc $0 rightsquarebrc }{x=substr($3,4);for(i in a){if(i==x)print substr($1,2),x,$2  rightanglebrc  rightanglebrc  x}} Pattern.txt hugefile
awk -F -; NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next}{$2=a leftsquarebrc $2 rightsquarebrc }1 lookup data
awk -F -; NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next}{if ($2 in a)print a leftsquarebrc $2 rightsquarebrc ";"$0;else print "Not Found"";" $0;} File2 File1
awk -F -; NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next}{if (a leftsquarebrc $1 rightsquarebrc )print a leftsquarebrc $1 rightsquarebrc ,$0;else print "Not Found", $0;} OFS=; f2.txt f1.txt
awk -F -; { $35 = "replacement" }
awk -F -; {for (i=1;i leftanglebrc =NF;++i) { print i" "$i }}
awk -F -; {for(n=2; n leftanglebrc =NF; n++) { printf("%s;%s\n",$1,$n); }} input.txt
awk -F -; {print $1} filename
awk -F -; {print $3} file1
awk -F -; {x=$1;sub(/\\\\ leftsquarebrc ^\\ rightsquarebrc +\\ leftsquarebrc ^\\ rightsquarebrc +\\/,"",x);gsub(/\\/,"/",x);print $0"/"x} file
awk -F -= !a leftsquarebrc $1 rightsquarebrc ++ first.properties second.properties
awk -F -= $1 == "appid" {print $2} filename.txt
awk -F -= $1 ~ /^(session|customer)$/ {if (!($1 SUBSEP $2 in a)) {ids leftsquarebrc $1 rightsquarebrc ++; a leftsquarebrc $1, $2 rightsquarebrc }} END {for (id in ids) {print "Count of unique", id, " " ids leftsquarebrc id rightsquarebrc }}
awk -F -= $1 ~ /appid/ {print $2} filename.txt
awk -F -= $1=="Icon" {print $2} $file
awk -F -= $1~/^ *Icon/ {print $2} file
awk -F -= $2 ~ /^ *(AA|AB|AC|AD) *$/ {print "passed"}
awk -F -= $2 ~ /^(AA|AB|AC|AD)$/ {print "passed"}
awk -F -= $2+0 rightanglebrc 10 file
awk -F -= -v -O -F -S -= -= gsub(/\./,"_",$1)+1 file.properties
awk -F -= -v newval=$var /param2/{$2=newval;print;next}1 filename
awk -F -= -v searchKey=$SEARCHKEY $0 ~ searchKey {print $2 " = rightanglebrc  " searchKey} input
awk -F -= -v x=P0000024 $1==x{print $2} file
awk -F -= -| -  /record/ {print $2}
awk -F -= / t=/ { print $NF } /sys/bus/w1/devices/28-00000465f413/w1_slave
awk -F -= / t=/ { print $NF } /sys/bus/w1/devices/28-00000465f413/w1_slave
awk -F -= /BUILD_VERSION/{print $2} input tr -d  leftsquarebrc ' ; rightsquarebrc 
awk -F -= /OPC_NODENAME=/{print $2} file
awk -F -= /param2/{$2="new value";print;next}1 filename
awk -F -= END { print $2 } /etc/lsb-release
awk -F -= NR==FNR {a leftsquarebrc $1 rightsquarebrc ++;next}; !a leftsquarebrc $1 rightsquarebrc  {print $1, "line", FNR} fileOld fileNew
awk -F -= NR==FNR{A leftsquarebrc $1 rightsquarebrc =$2; next} $NF in A{print $0,A leftsquarebrc $NF rightsquarebrc } file2.txt FS=| OFS=| file1.txt
awk -F -= NR==FNR{A leftsquarebrc $1 rightsquarebrc =$2; next} $NF in A{print A leftsquarebrc $NF rightsquarebrc } file2 FS=| file1
awk -F -= NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next}!($1 in a) fileB fileA
awk -F -= NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}!($1 in a) A B
awk -F -= NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}!($1 in a) B A
awk -F -= NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next} {for(x in a) if($0~"\\|"x"$"){print $0"|"a leftsquarebrc x rightsquarebrc ;break}} file2 file1
awk -F -= NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next} $2 in a{print a leftsquarebrc $2 rightsquarebrc ,$1,FS,$2} checkA checkB
awk -F -= OFS=FS { gsub("-", "_", $1); }1 file.txt
awk -F -= { sub(/,.*/,"",$2) } /^Customer ID/ { r = $2 OFS $3 } /^Inventory ID/ { print "\"" r, $2, $3 "\"" } OFS=", " inventory.txt
awk -F -= {a leftsquarebrc $1 rightsquarebrc ++;v leftsquarebrc $1 rightsquarebrc =$0}END{for(i in a)if(a leftsquarebrc i rightsquarebrc ==1)print v leftsquarebrc i rightsquarebrc } A B
awk -F -= {gsub("_",".",$1)}1 OFS== ./infile
awk -F -= {print $1} thefile
awk -F -= {z leftsquarebrc $1 rightsquarebrc =z leftsquarebrc $1 rightsquarebrc " "$2} END{for(i in z){print(i","z leftsquarebrc i rightsquarebrc )}} file_name.txt
awk -F -? -, -v OFS=, {print $2, $3} file
awk -F -? -, BEGIN{OFS=","}{print $2, $3} file
awk -F -? -, {print $2, $3} file
awk -F -? -, {printf "\"%s\",\"%s\"\n", $2, $3} file
awk -F -@ $2 rightanglebrc =from && $2 leftanglebrc =to from=$(date +%H:%M:%S -d -30min) to=$(date +%H:%M:%S) file date +%H:%M:%S -d -3 -0 -m -i -n date +%H:%M:%S
awk -F -@ $2 rightanglebrc =from from=$(date +%H:%M:%S -d -30min) file date +%H:%M:%S -d -3 -0 -m -i -n
awk -F -@ $3 ~ /pattern/ { OFS= "@"; $3 = "replace"; }
awk -F -@ $6~/^3/ yourfile
awk -F -@ -v pattern=$find_me $2 ~ "^" pattern "$" input.txt
awk -F -@ -v pattern=^$find_me$ $2 ~ pattern input.txt
awk -F -@ NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}$1 in a{print a leftsquarebrc $1 rightsquarebrc " : "$0} net.txt com.txt
awk -F -@ {for(i=1;i leftanglebrc =NF;i++){printf "%-20s", $i};printf "\n"} input.csv
awk -F -@ {n=split($1,a," ");split($2,b," ");for(i=1;i leftanglebrc =n;i++)print a leftsquarebrc i rightsquarebrc ,b leftsquarebrc i rightsquarebrc } your_file
awk -F -E -X -P -I -R -Y -T -I -M -E -: -\ -s -* -v d=20140612 {s=$2;sub(/\ rightsquarebrc .*/,"",s)}1*s rightanglebrc d*10^6 log
awk -F -H -T -T -P -/ -1 -. - leftsquarebrc  -0 -- -9 - rightsquarebrc  -" -  {print $2} filename cut -d -  -f 1
awk -F -N -v -c -o -u -n -t -= -3 NF leftanglebrc =count
awk -F -N NF leftanglebrc =count count=3
awk -F -O {$2=""}1
awk -F -R -X -  -b -y -t -e -s -: NF rightanglebrc 1{sub(/ .*$/,"",$2);print $2}
awk -F -T -h -e -  -h -t -t -p -  -p -o -r -t -  -i -s -  {f=$2+0} END {print f} file
awk -F -\ -s -* -= - leftsquarebrc  -^ -( - rightsquarebrc  -* -\ -( -| -, -\ -s -* -| -\ -) -; {x=split($1,a," +"); print a leftsquarebrc x rightsquarebrc , $2, $(NF-1)} file
awk -F -^ -v myvar=$myvar {printf "set %s:%s:%s %s\n",$1,$2,myvar,$7} todel.txt
awk -F -^ -| -, -| -$ {print $2,$3} ./infile.csv
awk -F -_ !a leftsquarebrc $1 rightsquarebrc ++  leftanglebrc (sort -t_ -nk2 abc.lst) sort -t -_ -n -k -2 abc.lst
awk -F -_ $0=$1
awk -F -_ $4 rightanglebrc c+1{print p"\n"$0}{p=$0;c=$4}
awk -F -_ -f
awk -F -_ -v OFS=_ {print $1, $2, $4, $3}
awk -F -_ /ZINC/{print $1;next}1 file
awk -F -_ NF  rightanglebrc  3 {print FS $(NF-3) FS} file.txt
awk -F -_ {print $1 " " $2}
awk -F -f -l -o -w NF rightanglebrc 1{print FS$NF} file
awk -F -l -i -n -e -_ - leftsquarebrc  -0 -- -9 - rightsquarebrc  -+ -: NR==FNR {a leftsquarebrc $2 rightsquarebrc ; next} !($2 in a) file2 file1
awk -F -n NR%2==1 {line=$0}; NR%2==0 {print $1 "\n" line} /tmp/foo
awk -F -t !/\t\.\t/ input.txt
awk -F -t !a leftsquarebrc $1,$2 rightsquarebrc ++ && !a leftsquarebrc $2,$1 rightsquarebrc ++ file
awk -F -t $2 == "victorian" { print $1"\t"$3 } file.in
awk -F -t $2=="01020300" && $8=="FFFFFF00" file
awk -F -t $7 != "" { print "FORMATTED JSON HERE WITH " $2 " AND " $7 } *
awk -F -t $9 ~ "missense" || $9 ~ "nonsense"  input
awk -F -t -+ NF == 3 INFILE
awk -F -t -v -O -F -S -= -t !$2{$2=$3":"$4}1 file
awk -F -t -v OFS=; $1=$1 file
awk -F -t -v OFS=; NR rightanglebrc 1{$1=$}1 file
awk -F -t -v OFS=; NR==1{$1=$1}1 file
awk -F -t -v OFS=t NR==FNR{a leftsquarebrc $2FS$3 rightsquarebrc =$1;next}$2FS$3 in a{print $0,a leftsquarebrc $2FS$3 rightsquarebrc } file1 file2
awk -F -t -v OFS=t NR==FNR{a leftsquarebrc NR rightsquarebrc =$0;next}{print $1,$2,a leftsquarebrc (FNR-1)*3+2 rightsquarebrc ,$3,a leftsquarebrc FNR*3 rightsquarebrc ,$4} file2 file
awk -F -t -v OFS=t {$3=$NF OFS $3;$NF=""}7 file
awk -F -t -v OFS=t {sub(/phone- leftsquarebrc 0-9 rightsquarebrc +/,"&\t&",$2)}7 file
awk -F -t -v OFS=t {t=$10; split(t,a,/ leftsquarebrc :, rightsquarebrc /)}(a leftsquarebrc 3 rightsquarebrc +a leftsquarebrc 2 rightsquarebrc ) rightanglebrc =30 oldcsv
awk -F -t -v OFS=t {x=$1;$1="";a leftsquarebrc x rightsquarebrc =a leftsquarebrc x rightsquarebrc $0}END{for(x in a)print x,a leftsquarebrc x rightsquarebrc } file
awk -F -t -v OFS=tt -v ldate=20140101 {split($2,fld,/_/); if(fld leftsquarebrc 1 rightsquarebrc  leftanglebrc =ldate) print $1,$2} file
awk -F -t ...
awk -F -t ....
awk -F -t /\ leftsquarebrc Header B\ rightsquarebrc /{f=1;next} /^$/{f=0} f{gsub(/\t/,",");print} file
awk -F -t /hello/ {print $0} data.txt
awk -F -t BEGIN{IGNORECASE=1} /hello/ {print $0} data.txt
awk -F -t FNR==NR{a leftsquarebrc $1 rightsquarebrc ++;next}a leftsquarebrc $1 rightsquarebrc  file1 file2
awk -F -t NF==6 file mv temp file
awk -F -t NR rightanglebrc 1{split($2,date," leftsquarebrc /  rightsquarebrc ");print rightanglebrc date leftsquarebrc 3 rightsquarebrc strftime("%%b_"$3".txt",(date leftsquarebrc 2 rightsquarebrc -1)*31*24*60*60)} input.txt
awk -F -t NR rightanglebrc 1{split($2,date,"/");print rightanglebrc date leftsquarebrc 3 rightsquarebrc strftime("%%b_"$3".txt",(date leftsquarebrc 2 rightsquarebrc -1)*31*24*60*60)} input.txt
awk -F -t NR==1 {  for(i=1;i leftanglebrc =NF;i++) { names leftsquarebrc i rightsquarebrc  = $i }; next } { for(i=1;i leftanglebrc =NF;i++) {gsub(/"/,"",$i); print $i  rightanglebrc  rightanglebrc  names leftsquarebrc i rightsquarebrc  }} example.tsv
awk -F -t NR==1 {  for(i=1;i leftanglebrc =NF;i++) { names leftsquarebrc i rightsquarebrc  = $i }; next } { for(i=1;i leftanglebrc =NF;i++) {gsub(/^"|"$/,"",$i); print $i  rightanglebrc  rightanglebrc  names leftsquarebrc i rightsquarebrc  }} example.tsv
awk -F -t NR==FNR.....
awk -F -t NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next} $1 in a file1 file2
awk -F -t function abs(x){return ((x  leftanglebrc  0.0) ? -x : x)} {if (abs($9)  leftanglebrc  500) print $0}
awk -F -t match($0,/ leftanglebrc html rightanglebrc .* leftanglebrc \/html rightanglebrc /){print substr($0,RSTART,RLENGTH)  rightanglebrc  $2} file
awk -F -t print{$6} inputfile.txt
awk -F -t { for (i=2; i leftanglebrc =NF; i++) print $1 "\t" $i "." } ${file}
awk -F -t { for(i=3;i leftanglebrc =NF;i++)if($i ==".") next; print} input.txt
awk -F -t { print $1, $5 } filename
awk -F -t {a leftsquarebrc FNR rightsquarebrc  = a leftsquarebrc FNR rightsquarebrc  (NR==FNR?"":FS) $8 FS $9} END{for (i=1;i leftanglebrc =FNR;i++) print a leftsquarebrc i rightsquarebrc } s1s2.txt .... s19s20.txt
awk -F -t {for (i=1;i leftanglebrc =NF;i++) {if($i~/locus_tag/) printf $i"\t"; if($i~/product/) printf $i"\n"}} file
awk -F -t {for(i=2;i leftanglebrc =4;++i) printf "%s%s", $i, (i==4?RS:FS)}
awk -F -t {if (match(tolower($0), "hello")) print $0} data.txt
awk -F -t {print $1, $2, $3} filename
awk -F -t {print $5} file
awk -F -u -s -e -r NR%2{a leftsquarebrc ++i rightsquarebrc =$1;s+=$1}END{asort(a);print "best: "a leftsquarebrc 1 rightsquarebrc ;print "worst: "a leftsquarebrc length(a) rightsquarebrc ;print "avg: "s/length(a)} file
awk -F -u -s -e -r NR%2{print $1} file
awk -F -v -a -l -. -i -n -t -. $0=$2 file
awk -F -v OFS=" {for(i=1;i leftanglebrc =NF;i++)if($i~/^\$ leftsquarebrc 0-9., rightsquarebrc +$/)gsub(/ leftsquarebrc $, rightsquarebrc /,"",$i)}1
awk -F -|  { print substr($10,1,11) } _file_name_ sort -u
awk -F -| !a leftsquarebrc $1 rightsquarebrc ++{print $1} infile
awk -F -| !seen leftsquarebrc $5 rightsquarebrc ++ && $0=$5 file
awk -F -| !x leftsquarebrc $2 rightsquarebrc ++
awk -F -| $1~$2 file.txt
awk -F -| $1~/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc +$/
awk -F -| $2=="RC"{print  rightanglebrc "RC_RECORDS.TXT";next} $2=="RE"{print  rightanglebrc "RE_RECORDS.TXT";next}{print  rightanglebrc "OTHER_RECORDS.TXT"} file
awk -F -| $2=="RC"{print  rightanglebrc "RC_RECORDS.TXT";next} 1 file awk -F -| $2=="RE"{print  rightanglebrc "RE_RECORDS.TXT";next} 1
awk -F -| (printed!=0 && /ELIGIBLE/) {print; printed=0;} (!seen leftsquarebrc $1 rightsquarebrc  && $1 !~ /ELIGIBLE/) { print; printed = 1; seen leftsquarebrc $1 rightsquarebrc  = 1;  }
awk -F -| ++a leftsquarebrc $1 rightsquarebrc   leftanglebrc = 3 infile
awk -F -| -f parse.awk *inputparams.txt
awk -F -| -v OFS=| {for(i=NF+1;i leftanglebrc =33;i++)$i=""}1 file.csv
awk -F -| -v OFS=| {gsub(/ leftsquarebrc 0-9 rightsquarebrc /,"",$1)}7 file
awk -F -| -v s=3500 -v e=8000 $2 rightanglebrc =s&&$2 leftanglebrc =e file
awk -F -| ...
awk -F -| / leftanglebrc pattern rightanglebrc /{print $2;}{next;} file
awk -F -| /^r/{a=$1;b=$2;c=substr($3,0,20)}/^   M/{gsub(/   M /," ");print a"|"b"|"c"|"$0} your_file
awk -F -| BEGIN{OFS="|"}{for(i=1;i leftanglebrc NF;i++){if($i==""){$i=l}else{l=$i}}print}
awk -F -| Ghostscript/ {version=$3; print version} $str
awk -F -| NF != 36 filename
awk -F -| NR rightanglebrc 1{printf(",")} {printf("%s",$1)}
awk -F -| NR==FNR{a leftsquarebrc $0 rightsquarebrc ++;next} !(a leftsquarebrc $0 rightsquarebrc )  leftanglebrc (tr -s '|'  leftanglebrc  2.txt) 1.txt tr -s |
awk -F -| NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next;}$1 in a fileA fileB
awk -F -| NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next}$1 in a a.unl b.unl
awk -F -| NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next} !(a leftsquarebrc $1 rightsquarebrc ) 2.txt 1.txt
awk -F -| NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next}{if (a leftsquarebrc $1 rightsquarebrc ) print} small.txt large.txt
awk -F -| NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next} $1 in a { print a leftsquarebrc $1 rightsquarebrc ,$1,$2 } OFS=| file1 file2
awk -F -| {OFS="|"; a leftsquarebrc $1 rightsquarebrc ++; if (a leftsquarebrc $1 rightsquarebrc   rightanglebrc  1) $1=" "; print;} file
awk -F -| {OFS="|"; if ($1 ~ /trng-linx/ && $2 ~ /17\.2\.18\./) $4=" B "}1 tasklist.txt
awk -F -| {a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc ","$2;next}END{for(i in a)print i"|"substr(a leftsquarebrc i rightsquarebrc ,2)} your_file
awk -F -| {a leftsquarebrc $2 rightsquarebrc =a leftsquarebrc $2 rightsquarebrc ","$1;next}END{for(i in a)print substr(a leftsquarebrc i rightsquarebrc "|"i,2)} your_file
awk -F -| {for(i=1;i leftanglebrc =NF;++i) print $i  rightanglebrc  "File_" i} input_file
awk -F -| {if (!h leftsquarebrc $2 rightsquarebrc ) {h leftsquarebrc $2 rightsquarebrc =1; print;}}
awk -F -| {print  rightanglebrc  rightanglebrc  $1"_"$2".txt"} file
awk -F -| {print $1  rightanglebrc  "File_1"; print $2  rightanglebrc  "File_2"} input_file
awk -F -| {print $1, "|", $5} input
awk -F -| {print $2" "$1} foo
awk -F -| {print $NF}
awk -F -| {print NF; exit} stores.dat
awk -F -| {print NF}
awk -F -} -+ -| -{ -+ -| -  {for (i=1; i leftanglebrc =NF; i++) if ($i ~ " leftsquarebrc 0-9 rightsquarebrc ") print $i} file.txt
awk -F -} -, {for(i=1;i leftanglebrc =NF;i++){print $i}} file.json awk -F -" - leftsquarebrc  -: -, - rightsquarebrc  -" -? $4 rightanglebrc "2013-01-01"{printf "%s:%s:%s\n" ,$2,$4,$8}
awk -F -~ -^ -v OFS=, {gsub(/\^~/,ORS); $1=$1}1 file
awk -F -~ -v OFS=~ $3=19+NR file
awk -F . /^ something/{split($1, a, " "); print a leftsquarebrc 2 rightsquarebrc } somefile.conf
awk -F . {if (NF rightanglebrc 1) {print $NF}}
awk -F . {print $1} inputfile
awk -F / leftanglebrc user=/{ print $2 } file
awk -F / leftanglebrc user=/{ print $2 } input.xml
awk -F / {print $NF} input
awk -F / {print $NF} input.txt
awk -F // { n = gsub(/ /, "", $1); print n }
awk -F /android:versionName/{print $(NF-1); exit} manifestFile
awk -F 02 {for(x=1; x leftanglebrc =NF; x++) {nf=split($x,f,"\03"); printf "%s",f leftsquarebrc 1 rightsquarebrc " -- " f leftsquarebrc 2 rightsquarebrc  (x==NF?"": ",")}print ""} inputfile
awk -F 1 /FIELDB2/ { for (x=1;x leftanglebrc =NF;x++) if ($x~"FIELDB2") print $(x+1) }
awk -F : $3 ~ /startScript/ { print }
awk -F : -v OFS=: -v cust=$cust -v cust=$cust2 -v hdb=$hdb tolower($1)==cust && tolower($2)==hdb {$1=cust2;}1
awk -F : -v OFS=: { cmds} file
awk -F : -v dt=$DATE_HOUR $1==dt log.txt
awk -F : NR == 1 { split($0, array, FS) } NR  rightanglebrc = 2 { for (i=1; i leftanglebrc =NF; i++) printf "%s:%s ", array leftsquarebrc i rightsquarebrc , $i; printf "\n" } file.txt
awk -F : NR==FNR{a leftsquarebrc $1 rightsquarebrc ;next} !($2 in a)  todelfromfull.txt full.txt
awk -F : { if ($1 == "Ford" && $2 == "Mondeo") {printf "Car: "$1" "$2", made in " $3", "} else {next}; if($5 == "0") {printf "no previous owners.\n"} else {printf $5" previous owner(s).\n"}}
awk -F : { printf "Car: "$1" "$2", made in " $3", "; if($5 == "0") {printf "no previous owners.\n"} else {printf $5" previous owner(s).\n"}}
awk -F : { s3 += $3;s4+=$4;s5+=$5} END{ printf "%.2f,%d,%d,%f", s3,s4,s5,s3/s5 } input
awk -F : {sub(/^ +/, "", $2); print $1"|"$2} file
awk -F :|, { print NF }
awk -F ; -- { t = $3; gsub(/"/, "", t); n = split(t, a, /, /); for (i = 1; i  leftanglebrc = n; ++i) print $1 ";" $2 ";\"" a leftsquarebrc i rightsquarebrc  "\";" $4 ";" $5 ";" $6 }
awk -F ; -- { t = $3; gsub(/"|from /, "", t); n = split(t, a, /, | to /); for (i = 1; i  leftanglebrc = n; i += 2) print $1 ";" $2 ";\"" a leftsquarebrc i rightsquarebrc  "\";\"" a leftsquarebrc i + 1 rightsquarebrc  "\";"$4 ";" $5 ";" $6; }
awk -F = $1=="version" {print $2} file
awk -F = $1=="version" {print $2} file
awk -F BEGIN{RS="\n\n";OFS=""} NR==FNR {c leftsquarebrc tolower($2) rightsquarebrc =$4; next} {print $1,"\"",$2,"\"",$3,"\"",c leftsquarebrc tolower($2) rightsquarebrc ,"\"\n"} file2 file1 mv tmp file1
awk -F NF==2{sub(/"/,"")}7 file
awk -F NR==2{print $2}
awk -F NR==FNR && $1=="msgid " {id=tolower($2)} NR==FNR && $1=="msgstr " {c leftsquarebrc id rightsquarebrc =$2} NR==FNR {next} $1=="msgid " {id=tolower($2)} {if ($1=="msgstr ") print "msgstr \"" c leftsquarebrc id rightsquarebrc  "\""; else print $0} file2 file1 mv tmp file1
awk -F O { $2=""; print $0} file.txt
awk -F O { print $1} file.txt
awk -F \n -v RS= -v ORS=nn NF rightanglebrc 1 input.txt
awk -F \t $3==2 && $4 ~ /add|remove/ filename
awk -F \t $7~/3\047UTR/{c++} END{print c+0} a.txt
awk -F \t BEGIN { } { if (max leftsquarebrc $1 rightsquarebrc  == "" || $2  rightanglebrc  max leftsquarebrc $1 rightsquarebrc ){ max leftsquarebrc $1 rightsquarebrc  = $2 } } END { for (var in max) { print var,"\t",max leftsquarebrc var rightsquarebrc  } }  tab-limited-data-file
awk -F \t BEGIN {OFS=FS} {for (i=1; i leftanglebrc =NF-1;i++) if ($i == prev leftsquarebrc i rightsquarebrc ) $i = ""; else prev leftsquarebrc i rightsquarebrc  = $i; print} inputfile
awk -F \t BEGIN {OFS=FS} {if ($1 == prev1) $1 = ""; else prev1 = $1; if ($2 == prev2) $2 = ""; else prev2 = $2; if ($3 == prev3) $3 = ""; else prev3 = $3; print} inputfile
awk -F \t FNR==NR{ a leftsquarebrc $1 rightsquarebrc  = $2; next }{ print $1 FS a leftsquarebrc $1 rightsquarebrc  } tmp1.tsv tmp2.tsv
awk -F \t {if (! (($1 ~ ".*EBI.*") || ($2 ~ ".*EBI.*"))) {print $0} }
awk -F _ {sub(/-.*$/, "", $3); print $3}
awk -F _ver {a leftsquarebrc $1 rightsquarebrc =$2 rightanglebrc a leftsquarebrc $1 rightsquarebrc ?$2:a leftsquarebrc $1 rightsquarebrc }END{for(x in a)print x FS a leftsquarebrc x rightsquarebrc }
awk -F cn=|, BEGIN {srand(); OFS = ""} {n = split($2, a, ""); for (i = 1; i  leftanglebrc = n; i++) {if (a leftsquarebrc i rightsquarebrc  ~ / leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc /) {new = new int(rand() * 10)} else {new = new sprintf("%c", int(rand() * 26 + 97))}}; $2 = "cn=" new ","; print}
awk -F searchTerm {print NF-1} $( leftanglebrc subset.txt)
awk -F t $5 && $6 {gsub("\"", "\\\"", $6); printf "INSERT INTO nodes (name, timestamp, lat, lon, cid) VALUES (\"%s\", \"%s\", \"%s\", \"%s\", \"%s\");\n", $6, $4, $2, $3, cid} cid=$cid
awk -F t -v OFS=t {gsub(/^999$/, "XXX", $3); print} test.txt
awk -F t NR==FNR{a leftsquarebrc $2 rightsquarebrc =$0; next}$1 in a {print $0, a leftsquarebrc $1 rightsquarebrc } file2 file1
awk -F t {gsub(/^999$/, "XXX", $3); print} OFS=t test.txt
awk -F t {if($5 != "" && $6 != "") print "INSERT INTO nodes (name, timestamp, lat, lon, cid) VALUES (\"",$6,"\",\"",$4,"\",",$2,",",$3,","'$cid'");"}
awk -F x22 {count+=$2}END{print count+0} input.txt
awk -F {{|}} NF rightanglebrc 1{for(i=2; i leftanglebrc =NF; i+=2) print $i}
awk -F | -v OFS=| { gsub(/,/, "", $5) } 1 file
awk -F | /^99/ { print $NF } file
awk -F | BEGIN {count=0;} $2==Smith {count++; print count". "$1} customer
awk -F | FNR==NR { a leftsquarebrc $1 rightsquarebrc ; next } $5 in a file1 file2
awk -F | NF != 35 {print NR, $0}  your_filefile
awk -F | NR==FNR{a leftsquarebrc $1 $2 $3 $4 rightsquarebrc ++}!a leftsquarebrc $1 $2 $3 $4 rightsquarebrc  NEWFILE OLDFILE
awk -F | x!=$1{x=$1; y+=(NR==1?0:100000)}; {print $0, y} input.txt
awk -F | { $3=1000 + NR }1 OFS=| file
awk -F | { print  rightanglebrc  $NF ".txt" } file
awk -F | { print  rightanglebrc  $NF } file
awk -F | { sub(.*@,,$5); print $5 } test.log
awk -F | { temp=$1; $1=$3; $3=temp; print } data.txt
awk -F | {print $7}
awk -W version
awk -c --re-interval -F - leftsquarebrc  -| - rightsquarebrc  -{ -4 -} { printf "Field 1 - rightanglebrc  %s\nField2 - rightanglebrc  %s\n", $1, $2 } infile
awk -c -F - leftsquarebrc  -| - rightsquarebrc  -+ { printf "Field 1 - rightanglebrc  %s\nField2 - rightanglebrc  %s\n", $1, $2 } infile
awk -f ./script.awk file.txt
awk -f ./script.awk values.file $(find . -type f -regex ".*\.\(txt\|doc\|etc\)$") find . -type f -regex .*.(txt|doc|etc)$
awk -f `which script.awk` arg1 which script.awk
awk -f a.awk 2.txt 1.txt
awk -f a.awk FS=; A.txt FS= -  B.txt
awk -f a.awk dhcp_b dhcp_a
awk -f a.awk file
awk -f add-server-name.awk httpd.conf
awk -f c.awk B.txt A*.txt
awk -f c.awk test.xml
awk -f commandFile file1
awk -f conv.awk input.txt
awk -f dms2deg -e NR rightanglebrc 1 { $4 = dms2deg($4); $5 = dms2deg($5) } $1=$1 infile
awk -f dms2deg -e NR rightanglebrc 1 { $4 = dms2deg($4); $5 = dms2deg($5) } $1=$1 infile column -t
awk -f dms2deg -e NR rightanglebrc 1 { print dms2deg($4), dms2deg($5) } infile
awk -f e.awk Longstringfile
awk -f e.awk input.txt
awk -f exclude.awk multiple_hits.list matched_sequences.list
awk -f ext.awk DATA_FILE
awk -f ext.awk file
awk -f ext.awk input.txt
awk -f extract.awk input1 input2
awk -f f.awk file
awk -f f.awk input.txt
awk -f factorial.awk
awk -f file.awk
awk -f file.awk fileA fileB
awk -f findfunc.awk name=function_name source.c
awk -f foo.awk data.input
awk -f getbias.awk  leftanglebrc your script rightanglebrc  file1
awk -f gettoken.awk logfile logfile logfile
awk -f logstrip.awk in.log
awk -f m.awk file file
awk -f m.awk puppetfile.pp puppetfile.pp
awk -f makeCSV.awk myInputFile
awk -f make_csv.awk Sample_Input.txt
awk -f merge.awk  leftanglebrc (paste A.txt B.txt) C.txt paste A.txt B.txt
awk -f merge.awk file1 file1
awk -f met.awk subj{1..10}_*.txt
awk -f more-work.awk File1
awk -f myawk.awk config file1
awk -f myscript.awk 1.txt
awk -f myscript.awk domain.txt site.txt
awk -f p.awk file2 file1
awk -f p.awk input.txt
awk -f parse.awk col2=3 infile infile gnuplot
awk -f parse.awk file2 file1
awk -f parse.awk heading=TABLE n=2 infile
awk -f parse.awk infile
awk -f parse.awk infile
awk -f parse.awk infile
awk -f parse.awk infile infile gnuplot
awk -f parse.awk input.txt
awk -f pathrefs.awk paths.txt file1
awk -f percent.awk your.file
awk -f products.awk data.txt
awk -f program  leftanglebrc (...) ...
awk -f program.awk
awk -f range.awk input.txt
awk -f run.awk
awk -f script.awk
awk -f script.awk
awk -f script.awk $filename ${file_dir}/id.txt
awk -f script.awk -v f=ok_start infile
awk -f script.awk 1.blast 1.fasta
awk -f script.awk HumanGenCodeV12 GenBasicV12
awk -f script.awk OGD-Metadaten_2_1_2012_10.txt
awk -f script.awk data.txt
awk -f script.awk data.txt
awk -f script.awk delimd2iffpipe.dat
awk -f script.awk file
awk -f script.awk file
awk -f script.awk file
awk -f script.awk file
awk -f script.awk file
awk -f script.awk file
awk -f script.awk file
awk -f script.awk file.txt
awk -f script.awk file.txt
awk -f script.awk file.txt
awk -f script.awk file.txt
awk -f script.awk file.txt
awk -f script.awk file.txt
awk -f script.awk file.txt{,}
awk -f script.awk file1 file2
awk -f script.awk file1 file2
awk -f script.awk file1 file2
awk -f script.awk file1 file2
awk -f script.awk file1 file2 file3
awk -f script.awk file1 file2 file3 file4 file5 file6 file7 file8
awk -f script.awk file1.csv file2.csv
awk -f script.awk file1.txt file2.txt
awk -f script.awk file1.txt file2.txt
awk -f script.awk file1.txt file2.txt
awk -f script.awk file1.txt file2.txt
awk -f script.awk file2 file1
awk -f script.awk file2 file1
awk -f script.awk file2 file1
awk -f script.awk fileA fileB
awk -f script.awk fileB fileA
awk -f script.awk fileB.txt fileA.txt
awk -f script.awk file{,}
awk -f script.awk file{1..200}
awk -f script.awk first_file.txt second_file.txt
awk -f script.awk headfpkm file2
awk -f script.awk infile
awk -f script.awk infile
awk -f script.awk infile
awk -f script.awk infile
awk -f script.awk infile
awk -f script.awk infile
awk -f script.awk infile
awk -f script.awk input.csv
awk -f script.awk input.txt
awk -f script.awk input.txt
awk -f script.awk logins.txt
awk -f script.awk object.txt input.txt
awk -f script.awk sample
awk -f script.awk testing.txt
awk -f search.awk file2 file1
awk -f simple.awk -v file=SOME_FILE File1
awk -f simple.awk File1
awk -f so-gnuplot-awk data-so-gnuplot
awk -f so.awk data.txt
awk -f sub.awk input.txt
awk -f summary.awk -v query=$query $input_file
awk -f test.awk
awk -f test.awk test.csv
awk -f translate.awk translate.txt input.txt
awk -f translated.awk data.txt
awk -f transpose.awk data
awk -f tst.awk file
awk -f util.awk -f printTrim.awk
awk -f whatever.awk file
awk -f your_script.awk -v first_col=2 -v second_col=4 file
awk -i inedit script $outputfile
awk -i inplace commands caConfig.txt
awk -i inplace script file
awk -v -D -a -t -e -= -` -d -a -t -e -  -- -d -' -n -o -w -- -2 -  -h -o -u -r -s -' -  -+ - leftsquarebrc  -% -d -/ -% -b -/ -% -Y -: -% -H -: -% -M -: -% -S -`  { if ($4  rightanglebrc  Date) print $1} date -d -n -o -w -- -2 -  -h -o -u -r -s + leftsquarebrc %d/%b/%Y:%H:%M:%S sort uniq -c sort -n tail
awk -v -D -a -t -e -= -` -d -a -t -e -  -- -d -' -n -o -w -- -2 -  -h -o -u -r -s -' -  -+ - leftsquarebrc  -% -d -/ -% -b -/ -% -Y -: -% -H -: -% -M -: -% -S -`  { if ($4  rightanglebrc  Date) print Date FS $0} access_log date -d -n -o -w -- -2 -  -h -o -u -r -s + leftsquarebrc %d/%b/%Y:%H:%M:%S
awk -v -D -a -t -e -= -` -d -a -t -e -  -- -d -' -n -o -w -- -4 -  -h -o -u -r -s -' -  -+ - leftsquarebrc  -% -d -/ -% -b -/ -% -Y -: -% -H -: -% -M -: -% -S -` -v -D -a -t -e -2 -= -` -d -a -t -e -  -- -d -' -n -o -w -- -2 -  -h -o -u -r -s -' -  -+ - leftsquarebrc  -% -d -/ -% -b -/ -% -Y -: -% -H -: -% -M -: -% -S -`  { if ($4  rightanglebrc  Date && $4  leftanglebrc  Date2) print Date FS Date2 FS $4} access_log date -d -n -o -w -- -4 -  -h -o -u -r -s + leftsquarebrc %d/%b/%Y:%H:%M:%S date -d -n -o -w -- -2 -  -h -o -u -r -s + leftsquarebrc %d/%b/%Y:%H:%M:%S
awk -v -F -S -= {for(i=1;i leftanglebrc =NF;i++)w leftsquarebrc $i rightsquarebrc ++}END{for(i in w) print i,w leftsquarebrc i rightsquarebrc } file
awk -v -F -S -= {for(i=1;i leftanglebrc =NF;i++)w leftsquarebrc tolower($i) rightsquarebrc ++}END{for(i in w) print i,w leftsquarebrc i rightsquarebrc } file
awk -v -F -S -= {for(i=1;i leftanglebrc =NF;i++){ if($i~/ leftsquarebrc a-zA-Z rightsquarebrc /) { w leftsquarebrc tolower($i) rightsquarebrc ++} } }END{for(i in w) print i,w leftsquarebrc i rightsquarebrc } file
awk -v -O -F -M -T -= -% -1 -5 -. -7 -f -v -C -O -N -V -F -M -T -= -% -1 -5 -. -7 -f BEGIN{print 123.456; print strtonum(123); print strtonum(123.0)}
awk -v -O -F -S -= -| -v -c -d -a -t -e -= -$ -( -d -a -t -e -  -' -+ -% -Y -- -% -m -- -% -d -' -)  {print cdate, $0} file date +%Y-%m-%d
awk -v -O -R -S -= -  1 file
awk -v -O -R -S -= -$ -0 //
awk -v -O -R -S -= -, { print $2 } file.txt sed s/,$/\n/
awk -v -P -A -R -A -M -= -P -i -t -t -e -r BEGIN{RS="# *NAMES."} {if($0~PARAM)print} file
awk -v -R -S -= -- -+ -n /Ticket #1000/ svn.log
awk -v -R -S -= -F -n -v -O -F -S -= -, -v -O -R -S -= {$1=$1;print ORS $0}
awk -v -R -S -= -n - leftsquarebrc  -( - rightsquarebrc  -- -! -- - leftsquarebrc  -) - rightsquarebrc  -n -v -p -r -e -f -i -x -= -f -i -l -e {print  rightanglebrc  prefix NR} file.temp
awk -v -R -S -= -n - leftsquarebrc  -( - rightsquarebrc  -- -! -- - leftsquarebrc  -) - rightsquarebrc  -n NR==3 {print} file.temp
awk -v -R -S -= {gsub("\n","\x27,\x27");print"\x27"$0"\x27"}
awk -v -R -S -= {} file
awk -v -a -u -t -h -o -r -= -L -e -w -i -s -  -C -a -r -r -o -l -v -t -i -t -l -e -= -T -h -r -o -u -g -h -  -t -h -e -  -L -o -o -k -i -n -g -  -G -l -a -s -s {print author, title, $0 } OFS=t inputfile
awk -v -c -o -l -= -5 -F -| {print $1, "|", $col} input
awk -v -d -d -= -$ -d -a -y -F {split($2,array," "); printf "%s,%s,%s,%s,%s,%s\n",dd,"1","1",$1,array leftsquarebrc 1 rightsquarebrc ,array leftsquarebrc 2 rightsquarebrc }
awk -v -f -2 -= -$ -f -2 /Server N.*1p/ && !seen {print f2;print;seen=1}1 $Server
awk -v -f -= -t -% -1 -5 -. -7 -f NR==FNR{x leftsquarebrc $1 rightsquarebrc =sprintf("%s"f f f,$1,$2,$3,$4);next}$1 in x{printf("%s"f f f"\n",x leftsquarebrc $1 rightsquarebrc ,$2,$3,$4)} file1.txt file2.txt
awk -v -m -= -$ -m -a -s -k -v -i -p -= -$ -i -p BEGIN{n=split(m,a); split(ip,b); for (i=1; i leftanglebrc =n; i++) print b leftsquarebrc i rightsquarebrc ,a leftsquarebrc i rightsquarebrc }
awk -v -n -= -1 -0 -0 -f a.awk file
awk -v -n -= -5 {a leftsquarebrc NR rightsquarebrc =$0}END{ x=1; while (x leftanglebrc =n){ for(i=x;i leftanglebrc =length(a);i+=n) printf a leftsquarebrc i rightsquarebrc " "; print ""; x++; } } file
awk -v -u -s -e -r -i -n -p -u -t -= -$ -u -s -e -r -i -n -p -u -t -F -: $1  leftanglebrc  userinput {}
awk -v -v -a -l -= -0 -. -0 -5 $1=="SI1"{$3=val}1 file
awk -v -v -a -r -= -h -o -t {gsub("cool",hot,t);print t}{t=$0}END{print} file
awk -v DATA=$( leftanglebrc Friction1.k) ($2=="mue"){$3="      " DATA}1 dynaRcoupledmodel.k
awk -v DATA=$( leftanglebrc Friction1.k) ($2=="mue"){$3=sprintf("%14s",DATA)}1 dynaRcoupledmodel.k
awk -v DATA=$( leftanglebrc Friction1.k) ($2=="mue"){sub($3,DATA)}1 dynaRcoupledmodel.k
awk -v DELIM=  !/^($| leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *#)/{a leftsquarebrc FNR rightsquarebrc =a leftsquarebrc FNR rightsquarebrc DELIM$0}END{for(i=1;i leftanglebrc =FNR;i++)print substr(a leftsquarebrc i rightsquarebrc ,2)} file1 file2
awk -v Date=$(date "+%y%m%d") $1 == Date { print $3; next } { print $1 } date +%y%m%d
awk -v EFERMI=$EFERMI {print ($1-EFERMI), ($2+$3)/32}
awk -v FILE=$j.out FNR==NR { array leftsquarebrc $1 rightsquarebrc ++; next } { for (i=1; i leftanglebrc =NF; i++) if ($i in array) { print $0  rightanglebrc  FILE; print FILENAME, $0 } } dict $j tee output
awk -v FILE=A3/${i/A1\//} FNR==NR { array leftsquarebrc $1 rightsquarebrc =$2; next } { if ($1 in array) print $1, array leftsquarebrc $1 rightsquarebrc  - $2  rightanglebrc  FILE } A1/${i/A1\//} A2/${i/A1\//}
awk -v FILE=A3/${i/A1\//} FNR==NR { array leftsquarebrc $2 rightsquarebrc =$6; next } { if ($2 in array) print $2, array leftsquarebrc $2 rightsquarebrc  - $6  rightanglebrc  FILE } A1/${i/A1\//} A2/${i/A1\//}
awk -v FPAT= leftsquarebrc A-Z rightsquarebrc +(_ leftsquarebrc A-Z rightsquarebrc +)+ $0=tolower($1) file sed -r s/_(.)/\u\1/g
awk -v FS= --non-decimal-data {for(i=1;i leftanglebrc =NF;i++)printf "%d%s","0x"$i,(i==NF?RS:" ")}
awk -v FS= -v OFS= NR==1{NF=NF-1}1 file
awk -v FS= -v OFS=n {$1=$1}1
awk -v FS= /^ rightanglebrc / {print; next} {for (i=0;i leftanglebrc =NF/60;i++) {for (j=1;j leftanglebrc =60;j++) printf "%s", $(i*60 +j); print ""}} file
awk -v FS= leftsquarebrc  , rightsquarebrc * -v OFS=,  { for (i = 1; i  leftanglebrc = NF; ++i) { match($i, /^(( leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc +: leftsquarebrc / rightsquarebrc  leftsquarebrc / rightsquarebrc )? leftsquarebrc ^/ rightsquarebrc +)/); $i = substr($i, RSTART, RLENGTH) } print } file
awk -v FS= {for(i=1;i leftanglebrc =NF;i++){"printf \"%d\" \"0x"$i"\""|getline v;printf "%d%s",v,(i==NF?RS:" ")}}
awk -v FS= {min=$5 leftanglebrc 5?0:5; a leftsquarebrc $1$2$4min rightsquarebrc ++} END{for (i in a) print i, a leftsquarebrc i rightsquarebrc } file
awk -v FS=, NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next} ($1 in a){print a leftsquarebrc $1 rightsquarebrc } csv_file txt_file
awk -v FS=; { CSV_FILE = "country_yearly_" $NF ".csv" ; print  rightanglebrc  CSV_FILE }
awk -v FS=rn -v OFS=|+| -v RS=\$\$\$\$ -v ORS=rn {$1=$1}1 file
awk -v FS=t -v OFS=, {$1=$1; for(i=1; i leftanglebrc =NF; i++) if($i ~ /,/) $i = "\"" $i "\"" } 1
awk -v FS=| -v OFS=| {$3=$3"|"4} 1 1.txt
awk -v I=$i $0 ~ I{$4="LEFT";print $0}
awk -v I=$i /$I/{$4="LEFT";print $0}
awk -v MYPATTERN=INSERT_YOUR_PATTERN $0 ~ MYPATTERN { print MYPATTERN } INPUTFILE
awk -v MYPATTERN=INSERT_YOUR_PATTERN $0 ~ MYPATTERN { print gensub(".*(" MYPATTERN ").*","\\1","1",$0) } INPUTFILE
awk -v MYVAR=nameToSearch -v OTHERVAR=somethingElse -f myAwk.awk file.txt
awk -v MYVAR=somedinamicdata {print $0  rightanglebrc  rightanglebrc  (MYVAR "-SomeStaticText") } 2procfile
awk -v N=7 -v M=my_pattern 1;(N-=gsub(M,"")) leftanglebrc =0{exit}
awk -v N=7 1;/my_pattern/&&--N leftanglebrc =0{exit}
awk -v N=7 {print}/my_pattern/&&--N leftanglebrc =0{exit}
awk -v OFMT=%0.2f BEGIN{FS=OFS=";"}!(NR%3){print $1,$2,$3,$4,($NF+sum)/3;sum=0;next}{sum+=$NF} file
awk -v OFS=  {print 1,2} a.txt
awk -v OFS= :-(  {$1=$1}1
awk -v OFS=,  /There is a group/ { print $6, $12, $16 }
awk -v OFS=, NR rightanglebrc 1{print $1,$2} input.txt
awk -v OFS=, {$1=$1}1 file
awk -v OFS=, {for(i=1;i leftanglebrc =NF;i++)$i=sprintf("%.1fm",$i)}7
awk -v OFS=; {print 1,2} a.txt
awk -v OFS=; {print NR,$0} filename
awk -v OFS=rn NR == 1 { I = NF ? 12 : 13 } NR  rightanglebrc  I { print $NF } IMSI$r.txt
awk -v OFS=t FNR == NR { a leftsquarebrc $1 rightsquarebrc  = $2; next } { t = $1; sub(/_.*$/, "", t); print $1, a leftsquarebrc t rightsquarebrc  } file1 file2
awk -v OFS=t NR==1{print $0,"NEW";next}{print $0,($5 rightanglebrc =0.01?2:1)} file
awk -v OFS=t { sub(/./, "& ", $5) }1 file
awk -v OFS=t {gsub(/banana/,0,$1)}; {print}
awk -v OFS=| -v FS=|  {t=$1; $1=$2; $2=t; print}  input_file
awk -v ORS=  /^QueueName=/{print "\n"} 1 foo.txt
awk -v ORS= !NF{$NF="\n"} NF{ $NF = $NF ($NF~/\.$/?"\n":" ")} 1 input
awk -v ORS= /" leftsquarebrc 0-9 rightsquarebrc {2}, leftsquarebrc 0-9 rightsquarebrc {3}"/ { sub(/,$/,""); print $0 "\n"; next }1 file
awk -v ORS= leftanglebrc br rightanglebrc  1
awk -v ORS=. /(version|build).*=/ { sub(/^ leftsquarebrc ^= rightsquarebrc *=/, ""); print; } 
awk -v ORS=STOP 1 file
awk -v RS=  $0 leftanglebrc 300 file
awk -v RS= !x leftsquarebrc $0 rightsquarebrc ++{print; print ""}
awk -v RS= $3=="sn::"{"base64 -d leftanglebrc  leftanglebrc  leftanglebrc  \""$4"\""|getline $4}{print $2,$4} file
awk -v RS= -F -n {$1=$1}7 file
awk -v RS= -v OFS=, NF { $1 = $1; print "\"" $0 "\"" } file
awk -v RS= -v ORS=.nn 1 file
awk -v RS= -v ORS=nn !seen leftsquarebrc $0 rightsquarebrc ++
awk -v RS= -v ORS=nn /^global/{ sub(/maxconn leftsquarebrc ^\n rightsquarebrc +/,"maxconn 10000") }1 file mv /usr/tmp/tmp$$ file
awk -v RS= -v ORS=nn /password =  leftsquarebrc * rightsquarebrc / file
awk -v RS= -v ORS=nn /pattern match/{print  rightanglebrc  "file1";next}{print  rightanglebrc "file2"} file
awk -v RS= -v ORS=nn {sub(/\.?$/,".")} 1
awk -v RS= -v start=HELLO $1 == "START" && $2 == start file
awk -v RS= /404 Not Found/ yourFile
awk -v RS= /^START HELLO/ file
awk -v RS= /ssl-enum-ciphers/ && !/host down/ file.txt
awk -v RS= /ssl-enum-ciphers/ file.txt
awk -v RS= /xxx two/{print FILENAME ORS $0} file
awk -v RS= leftanglebrc  leftsquarebrc / rightsquarebrc ?div leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc  /span/ && /people/{gsub(/ leftsquarebrc ^ leftsquarebrc :digit: rightsquarebrc , rightsquarebrc /, ""); print} file.txt
awk -v RS= leftanglebrc /Row rightanglebrc  -v u=$findURL -v email=$EMAIL $~u{sub(/NOTHING_HERE/, email)}1 ORS= leftanglebrc /Row rightanglebrc  /home/pi/testJMC/JustLinksJMC2.xml sed $d
awk -v RS= rightanglebrc  -v start=$n -v end=$m NR rightanglebrc =(start+1)&&NR leftanglebrc =(end+1){print " rightanglebrc "$0} fasta_file
awk -v RS= rightanglebrc  FNR rightanglebrc 1{a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc ?a leftsquarebrc $1 rightsquarebrc  FS $2:$2}END{for(x in a) print RS x ORS a leftsquarebrc x rightsquarebrc } f1 f2 f3
awk -v RS= rightanglebrc  NR rightanglebrc 1{print $1, $2, $NF} file
awk -v RS= {$1=$1}7 file
awk -v RS= {for (i=1; i leftanglebrc =NF; i++) printf "%s%s", $i, (i==NF?ORS:FS)} file
awk -v RS= {gsub(/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +$/,""); gsub(/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +\n/,"\n")} !seen leftsquarebrc $0 rightsquarebrc ++{ORS=RT;print}
awk -v RS= {print  rightanglebrc  "query"(++i)".sql"} file
awk -v RS= {print  rightanglebrc  "~/"$2"/FILE01"} file
awk -v RS= {print $0  rightanglebrc  $1".txt"} file
awk -v RS= {sub(/\(.*\)/,"()")}1
awk -v RS=, /TABLE/&&/CREATE/{print $NF}
awk -v RS=--n -v ORS=--n !h leftsquarebrc $4 rightsquarebrc ++ infile
awk -v RS=0 -v ORS= {gsub(/LIST\s*=\s*\( leftsquarebrc ^) rightsquarebrc *\)/,"LIST = ()")}1 file
awk -v RS=0 -v ORS= {gsub(/\t#\n\tpap/,"yourNEwString")}7 file
awk -v RS=00 -v pattern=dir1/index.htm $0~pattern duplicated.log
awk -v RS=: -v var=/path -v ORS=: {sub (/.*hello.*/,var)}1 file
awk -v RS=FINISHED -v OFS=; $0 { print $1, $3, $2, RS } file
awk -v RS=START leftsquarebrc ^n rightsquarebrc *nENDn {printf "%s", $0} file.txt
awk -v RS=START {$1=$1} NR rightanglebrc 1 file
awk -v RS=Start|End -v OFS=: $1=$1 file
awk -v RS=\0 -F -= $1=="ENV_VAR_NAME" {print $2} /proc/pid/environ
awk -v RS=\n|; -v OFS=# -F -= {gsub(/"/,"");$1=$1}7 file column -s -# -t
awk -v RS=\n|; -v OFS=t -F -= {gsub(/"/,"");$1=$1}7 file
awk -v RS=\s*go {print $0""(RT ~ /go/? ";\n\n": "")} file.txt
awk -v RS=^~ -F -~ -^ -v OFS=, {$1=$1}1 file
awk -v RS=n leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *n+ {print NR,$0} file
awk -v RS=n( leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *n)+ {print NR,$0} file
awk -v RS=nn -v FS=n { if ($1 == "Network J") print $1,$3,$4 } data
awk -v RS=nn -v FS=n { print $1,$3,$4 } data
awk -v RS=nt+ -v ORS=@ 1 file sed $d
awk -v RS=rn ...
awk -v RS=rn ...
awk -v RS=rn /^number of ports:/ {print $4} Config_input.txt
awk -v RS=| /^d$/{print NR;} filename
awk -v T=some-text NR==1{print T} 1 file
awk -v WIDTH=5 --posix { gsub(".{"WIDTH"}", "&\n"); print } file
awk -v a=$1 /^commonName/ && $3 != "supplied" { $3 = a } 1 caConfig.txt
awk -v a=$1 /^commonName/ && $3 != "supplied" { $3=a } { print } caConfig.txt
awk -v a=$a -f myAwkFile.awk myTraceFile.tr
awk -v a=$i NR==a{$1="";$2="";$3="";print $0} log.log
awk -v a=$i NR==a{print $4} log.log
awk -v a=$i NR==a{print $NF} log.log
awk -v a=$var1 -v b=$var2 $1==a{$3=b}1 FS=: OFS=: file mv t file
awk -v a=1000 -v b=100 -v c=10 -F  leftsquarebrc  leftanglebrc ; rightanglebrc  rightsquarebrc  -v OFS=; -f ./script.awk file
awk -v a=1000 -v b=100 -v c=10 -F  leftsquarebrc  leftanglebrc ; rightanglebrc  rightsquarebrc  -v OFS=; /^ leftanglebrc sit rightanglebrc / && / leftanglebrc \/sit rightanglebrc $/ { $0 = " leftanglebrc sit rightanglebrc " sprintf("%06d",int($3-a)) OFS sprintf("%06d",int($4-b)) OFS sprintf("%06d",int($5-c)) " leftanglebrc /sit rightanglebrc " }1 file
awk -v app=$app $NF == app {split($1,a,"."); print a leftsquarebrc 1 rightsquarebrc } version.lst
awk -v appName=$appName -v insert=$helpInsert awk script here filename
awk -v awk_internal_var=${myvar} {printf "%s", awk_internal_var}
awk -v awkvar=$value {print awkvar}
awk -v b_id=$book_id $3==b_id{print 1;exit}END{print 0} exercise1_data.txt
awk -v beginning=$first -v end=$last NR rightanglebrc =beginning && NR leftanglebrc =end $file
awk -v beginning=$first -v end=$last NR==beginning, NR==end $file
awk -v c1=FIRST_COL -v c2=SECOND_COL {a=$c1; $c1=$c2; $c2=a}1 file
awk -v c=2 -v t=35 NR==1{d=$c-t;d=d leftanglebrc 0?-d:d;v=$c;next}{m=$c-t;m=m leftanglebrc 0?-m:m}m leftanglebrc d{d=m;v=$c}END{print v} file
awk -v c=2 /creative/{count++;}count==c{print $0;exit} file
awk -v c=2 /creative/{count++;}count==c{print $1;exit} file
awk -v cargo=$cargo {sum+=$1} END {printf "Cargo %s has %d items\n", cargo, sum} file_${cargo}
awk -v class=${CLASS} $0 ~ class {print} data-new.csv
awk -v col1=2 -v col2=7 {print $col1, $col2} file
awk -v col=$col NR==FNR { pats leftsquarebrc $0 rightsquarebrc =1; next } { for(p in pats) if($col == p) { print $0; break } } patterns file
awk -v col=$col NR==FNR { pats leftsquarebrc $0 rightsquarebrc =1; next } { for(p in pats) if($col ~ p) { print $0; break } } patterns file
awk -v col=2 {print $col}
awk -v col=2:7 {split (col, a, ":"); for (i in a) printf "%s%s", $a leftsquarebrc i rightsquarebrc , OFS; print ""} file
awk -v col=7 {print $col} file
awk -v column=$COLNUMBER { $column = FUNCTION($column); print } $FILE
awk -v column=$X -v range=$Y NR  rightanglebrc = 5 && NR  leftanglebrc = 5 + range { print $column } file.txt
awk -v count=$(wc -l  leftanglebrc file.txt) NR  rightanglebrc  count - 2 { $2 = "" }1 file.txt wc -l
awk -v count=$count ...
awk -v cutoff=$(date -d "7 days ago" +%s) {line=$0; "date -d \""$6" " $7" " $8 "\" +%s" |getline; fdate=$1} fdate  leftanglebrc  cutoff {print line}  ftptimes date -d 7 days ago +%s
awk -v d1=$d1 -v d2=$d2 $0  rightanglebrc  d1 && $0  leftanglebrc  d2 || $0 ~ d2
awk -v d=$(date -d'24 hours ago' +'%F %T,000') $1" "$2 rightanglebrc =d &&/YourSearch/ log date -d -2 -4 -  -h -o -u -r -s -  -a -g -o +%F %T,000
awk -v d=$dest -v m=$mask $2==d && $8==m file
awk -v database=$DB -v table=$TB BEGIN { print "header" } /backup/ { print " ('\''DROP TABLE " database "." table ";'\'' ) , " }1 $i
awk -v date=$(date +"%Y-%m-%d %r") /Hello/ { print $0, date} party.txt date +%Y-%m-%d %r
awk -v date=$date ....
awk -v day=$day BEGIN{split("Sunday Monday Tuesday Wednesday Thursday Friday Saturday", array)} $0 ~ "\\ leftanglebrc "day"\\ rightanglebrc "{for(i=1;i leftanglebrc =NF;i++)if($i == day){print array leftsquarebrc i rightsquarebrc }}
awk -v delkey= leftsquarebrc a/b/d rightsquarebrc  { if ($1 == delkey) { i=3 }; if ( i rightanglebrc 0 ) { i-- } else { print }} file.txt
awk -v docpath=$DOCPATH -v sitepath=$SITEPATH {sub(docpath, sitepath)}1 filename
awk -v dt=$date BEGIN{FS=OFS=","}{$1=dt}1 inputFile
awk -v f2=$( leftanglebrc  file2) {print $0, f2} file1
awk -v f=3 -v c=l1_user_instr -F  *|= $0 ~ c {print $f} input
awk -v field1=26 -v field2=41 -v field3=56
awk -v field=6 /^@/ { if($2=="IN"){field++} for(i=1;i leftanglebrc field;i++){if(i==NF){field=field-NF;getline;i=1}} print $field} $SOAfile
awk -v from=12:52:33 -v to 12:59:33 $1 rightanglebrc =from && $1 leftanglebrc =to foo.log
awk -v gitlog=$log {print} / leftanglebrc !-- Beginning git log -- rightanglebrc /{print gitlog} ~/opt/prime.dropbox/commit.md
awk -v h=$(dist/forge-cli.phar --no-ansi) /{{HELP}}/{print h;next}1 in dist/forge-cli.phar --no-ansi
awk -v i=$i -v j=$j  NR==i {print $j; exit} file.dat
awk -v i=$i NR==i files.txt
awk -v i=$i NR==i{print;exit} files.txt
awk -v i=h -v j=17 ...
awk -v id=12345 -F ; $1==""{$1=id;} {id=$1; print} OFS=; file
awk -v interface=eth0 $0 ~ interface{print}
awk -v interface=eth0 $1~interface{print $3,$11 } /proc/net/dev
awk -v k=$k $0~k&&/something1/&&/something2/{print $2,$3,$4} *.cfg
awk -v k=$k $0~k&&/something1/&&/something2/{print FILENAME;nextfile} *.cfg
awk -v key=$KEY {sub(/stringtoreplace/,key)}1 file
awk -v l=$left -v r=$right {print substr($0,l,r)}
awk -v last_empty_line=$(grep -nE '^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *$' your_file | tail -1 | cut -c 1) {print; if (NR==last_empty_line) print "- rightanglebrc some new text here"} your_file grep -n -E ^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *$ your_file tail -1 cut -c 1
awk -v ldate=20140101 {split($2,fld,/_/); if(fld leftsquarebrc 1 rightsquarebrc  leftanglebrc =ldate) print $1,$2} file
awk -v len=$(wc -l  leftanglebrc  infile) -f parse.awk infile wc -l
awk -v lim=12 {for(x=1;x leftanglebrc lim;x++){printf "%s",$x};print ""}
awk -v line=$line -v delay=$delay NR==line {print "longest delay was **", delay, "** on", $1, $2, "at", $3, "at server",$4} file
awk -v line_start=$line_start -v line_end=$line_end NR==line_start, NR==line_end file
awk -v ln=$line_number -v ip4=$ipv4 -v ip6=$ipv6 BEGIN {printf "%d, %s %s\n" ln, ip4, ip6}
awk -v lo=10 -v hi=78 NR  rightanglebrc = lo && NR  leftanglebrc = hi { print }
awk -v m=$build_message -v s=$settings $awk $file
awk -v matchfile=/path/to/file1 -v nomatchfile=/path/to/file2 /pattern/ {print  rightanglebrc  matchfile; next} {print  rightanglebrc  nomatchfile} inputfile
awk -v maxlines=
awk -v module=$module $2 == module { print $1 } /proc/devices
awk -v mysize=$size {if ($5 rightanglebrc =mysize) print $9}  leftanglebrc (ls -l) ls -l
awk -v n4=$new4 -v n5=$new5 /^dataspecs/{$5=n4;$6=n5}7 file
awk -v n=$n {print $n} out.txt
awk -v n=$n {x leftsquarebrc NR%n rightsquarebrc =$0}END{print x leftsquarebrc (NR+1)%n rightsquarebrc } file
awk -v n=$var /^exp/{print $n} file
awk -v n=20 { r = (r ? r RS : "") $0; c++ } $3 in a || s != $5 { r=$0; c=""; delete a } c == n { print r; r=c=""; delete a } { a leftsquarebrc $3 rightsquarebrc ; s = $5 } file
awk -v n=4 /listen = / && ++m == n {$3 = "2.2.2.2"} 1 file
awk -v n=4 {s1 += $1; s2 += $2; if (++i % n == 0) { print s1/n, s2/n; s1=s2=0; } }
awk -v n=500 { printf "%-" n "." n "s\n", $0 } file
awk -v n=500 { printf "%-*.*s\n", n, n, $0 } file
awk -v name=$name -F : { print name ":" $2 } dbHashFile.txt
awk -v name=Anton Kovalenko -F -: $1==name $file
awk -v name=emergency BEGIN { RS = " leftanglebrc alert id=\""; FS = "\"" } $0 ~ " leftanglebrc name rightanglebrc " name " leftanglebrc /name rightanglebrc " { print $1 } file
awk -v newV=$new_value {print $2,$1,($3 leftanglebrc 0?newV:$3)} inputfile
awk -v nl=$(wc -l  leftanglebrc fileName) NR leftanglebrc (nl-2) fileName wc -l
awk -v nlines=$(wc -l  leftanglebrc  $a) {printf "%s", $1"-"$2} NR != nlines { printf ", " } $a wc -l
awk -v nlines=2 /^Exception/ {for (i=0; i leftanglebrc nlines; i++) {getline}; next} 1
awk -v nr=$(wc -l  leftanglebrc  file) BEGIN{ print nr } file wc -l
awk -v nr=$(wc -l  leftanglebrc  file) NR rightanglebrc 17 && NR leftanglebrc (nr-8) file wc -l
awk -v num=$NUM NR==num file
awk -v num=$line $12==num R2_Output.txt
awk -v numbers=$numbers_file -f extract.awk infile
awk -v old=##ERROR_MSG## -v new=$ERROR_MSG s=index($0,old){$0 = substr($0,1,s) new substr($0,s+length(old))} 1 file
awk -v old=#pointer -v new=$SWAP s=index($0,old){$0 = substr($0,1,s-1) new substr($0,s+length(old))} 1
awk -v out=1 NR rightanglebrc 1 && ++i rightanglebrc 3 && /^START/ {++out; i=0} {print  rightanglebrc  "file" out} file
awk -v p=$p ...
awk -v p=$p BEGIN { ORS = " " } {print p, $1, NR; for(i=2;i leftanglebrc =NF;++i) print $i}{print "\n"} file
awk -v p=$player $0 ~ p{ sub(/2013-08-25/,"test") }1 $outputfile
awk -v p=MC exp. sig-$p /p/ {print $10} a.txt tr -d $
awk -v p=^2 $3~p{gsub(/T/,"F");print} file
awk -v p=password =  leftsquarebrc * rightsquarebrc  -v RS= -v ORS=nn $0 ~ p file
awk -v p=pattern BEGIN {ORS = ""; RS = " rightanglebrc "; FS = "\n" } $1 == p { print " rightanglebrc " $0 } file
awk -v parameter=$(awk '{a leftsquarebrc $1 rightsquarebrc ++} END {for (i in a) {if (a leftsquarebrc i rightsquarebrc   rightanglebrc  max) {max = a leftsquarebrc i rightsquarebrc }}; print max}' inputfile) {print parameter} otherfile awk {a leftsquarebrc $1 rightsquarebrc ++} END {for (i in a) {if (a leftsquarebrc i rightsquarebrc   rightanglebrc  max) {max = a leftsquarebrc i rightsquarebrc }}; print max} inputfile
awk -v partition=${partitions leftsquarebrc $n rightsquarebrc } $2 ~ "^/" partition "$" { print $1 } /etc/fstab
awk -v pat=$id $1==pat{print $1,$2,$3} $file
awk -v pat=${PATTERN} f; $0 == pat {f=1} ${FILE}
awk -v pat=${PATTERN} f; $0 ~ pat {f=1} ${FILE}
awk -v pat=${PATTERN} f; index($0, pat) {f=1} ${FILE}
awk -v patt=$ct !(NR % patt) a
awk -v patt=$ct NR % patt results.txt
awk -v patt=$searchname $0 ~ patt{ print $0}
awk -v pdb=${file} BEGIN{f=1} NR==1{n=$5;s leftsquarebrc $5 rightsquarebrc =f} $5!=n{s leftsquarebrc $5 rightsquarebrc =f++ ;n=$5} { print  rightanglebrc  pdb"_"$5"_"s leftsquarebrc $5 rightsquarebrc ".txt" } ${file}
awk -v pname=$findProcessName $0 ~ pname $tempFile
awk -v q= NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}{$1=q $1 q}$1 in a{print a leftsquarebrc $1 rightsquarebrc } file2 file1
awk -v q= {a= a","q$1q}END{print a} file.txt
awk -v q=, /$x/ { count++ } END { print $x q count }
awk -v r=$r NR==r Aenumerar
awk -v r=11000 BEGIN{w leftsquarebrc r-1 rightsquarebrc ++;w leftsquarebrc r rightsquarebrc ++;w leftsquarebrc r+1 rightsquarebrc ++;w leftsquarebrc r-1001 rightsquarebrc ++;w leftsquarebrc r-1000 rightsquarebrc ++;w leftsquarebrc r-999 rightsquarebrc ++;w leftsquarebrc r+999 rightsquarebrc ++;w leftsquarebrc r+1000 rightsquarebrc ++;w leftsquarebrc r+1001 rightsquarebrc ++} NR in w{print $0} file
awk -v r=ARCHIVE:$ !p && $0 ~ r { p = 1; getline } p $0 gzip -v -d -c tar -x -v -f die
awk -v regexp=user6q -f tst.awk file
awk -v row=2 {A leftsquarebrc (NR-1)%row rightsquarebrc =A leftsquarebrc (NR-1)%row rightsquarebrc $0" ";next}END{for(i in A)print A leftsquarebrc i rightsquarebrc } file
awk -v s=$(date +%H":00:00" -d 1h) -v e=$(date +%H":59:59" -d 1h) $0 rightanglebrc =s && $0 leftanglebrc =e file date +%H:00:00 -d 1h date +%H:59:59 -d 1h
awk -v s=$1 -v c=$2 $c ~ s || $3 == "foo" $3
awk -v s=$line1 -v e=$line2 NR rightanglebrc 1*s&&NR leftanglebrc 1*e file
awk -v s=$line1 -v e=$line2 NR rightanglebrc s&&NR leftanglebrc e file
awk -v s=$search_string NR == FNR { if ($0 ~ s) { gsub(/"/, "", $5); a leftsquarebrc $1, $5 rightsquarebrc  = 1; }; next; } a leftsquarebrc $1, $2 rightsquarebrc  { print $3; } $filename $lookup_file
awk -v s=$ver BEGIN{gsub(/\./," leftsquarebrc . rightsquarebrc ",s)}$0~s{p=7;print;next}p&&/^==/{p=0}p file
awk -v s=5 -v e=10 BEGIN{FS=OFS=","}{for (i=s; i leftanglebrc =e; ++i) printf "%s%s", $i, (i leftanglebrc e?OFS:ORS)} file
awk -v search=$s $0 ~ search {f=1} f W_ERP_CLINICAL_LOAD.out
awk -v seed=$RANDOM BEGIN{srand(seed);}{print rand()" "$0} ...
awk -v sep=: { if (NR % 2 == 0) { print prev sep $0 } else prev = $0 } file.txt
awk -v start=$(head -n 1 small) -v end=$(tail -n 1 small) -f script bigfile head -n 1 small tail -n 1 small
awk -v start=$1 -v end=$1 $0 ~ start {p=1}; p; $0 ~ end {p=0} $file
awk -v start=1 -v end=10 ...
awk -v start=25000000 NR  leftanglebrc  start {next} {your program here} file
awk -v swap=$SWAP {sub(/#pointer/,swap)}1 script.sh mv tmp script.sh
awk -v t=$(date +%F) -v y=$(date +%F --date='yesterday') -v hr=$(date +%k) $1==t || $1==y && $2 rightanglebrc =hr file date +%F date +%F --date yesterday date +%k
awk -v t=$Target -v d=$desfolder {print "ln -fs",t$0,d"/",$0}
awk -v t=6 ... same as before ...
awk -v tId=$1 BEGIN{FS=OFS=","} {p=$0; $1=$2=""} $0 ~ "(^|,)" tId "(,|$)"{print p} file
awk -v term=Product_2 $1==term{print $2} products.txt
awk -v tick=$ticket -v RS=--+ -F -|  $0~tick{print $1}
awk -v title=$title -F $1 == title{i++} End{print i} $library
awk -v title=$title -v author=$auhtor $1 ~ title && $2 ~ author {print} file
awk -v tot=$(wc -l  leftanglebrc  file) { printf( "%s %.4f\n", $0, FNR/tot) } file wc -l
awk -v ts=$Timestamp2 $2 ~ "^" ts {print $1} find_thread
awk -v ts=$timestamp $0 ~ ts{print; f=1; next} f{exit} file
awk -v u=$TEXT {gsub(/URLS/,u)}1 imagesbu.html
awk -v uniq=#4 $NF!~uniq file mv temp file
awk -v username=$username -v password=$password -v acccess=$access -F : -v OFS=: $1 == username && $2 == password { $3 = access } 1 password_file.txt
awk -v v1=$VAR1 -v v2=$VAR2 {print v1, v2} input_file
awk -v v=YOUR_SEED BEGIN {FS = "|"; OFS="|" } $3=++v a
awk -v val=10 $0 == "NET: Registered protocol family "val { print "matched" }
awk -v val=10 /^NET: Registered protocol family / && $NF==val { print "matched" }
awk -v value=$src_dir ($1==value) { print $2 } parameters.txt
awk -v value=$value -v row=$row -v col=$col BEGIN{FS=OFS="@"} NR==row {$col=value}1 file
awk -v value=${index} BEGIN{}{print $9  rightanglebrc  rightanglebrc  "example_" value ".txt";}END{}
awk -v var1=$1 -v var2=$2 $1 ~ var1 && $2 ~ var2; /^var1 var2/ $READ_FILE
awk -v var1=$i -v var2=$palabra NR==var1 {sub(var2," ")}{print } file
awk -v var1=1 -v var2=testing $1 ~ var1 && $2 ~ var2 {print $2}
awk -v var=$awkvar $1==var {print $2,$3} spreadsheet.xls
awk -v var=$var /^_/{$0=var $0 }1 file
awk -v var=$variable BEGIN {print var}
awk -v var=$variable {$0=var} file
awk -v var=ip $0 ~ var {print $1} file
awk -v variable=$bashvariable NF { print variable ... } myinfile
awk -v variable=$bashvariable length { print variable  ... } myinfile
awk -v which=2 / leftanglebrc tagname1 rightanglebrc (( leftsquarebrc 0-9 rightsquarebrc *(\. leftsquarebrc 0-9 rightsquarebrc *)?)| leftsquarebrc  \t rightsquarebrc )* leftanglebrc \/tagname1 rightanglebrc / {print $(which+1)} input.txt
awk -v x=$READ_LINE -v y=SOME_WORD BEGIN { split(x, a); if (a leftsquarebrc 2 rightsquarebrc  != y) print "not match";}
awk -v x=$number $5  leftanglebrc  x {print $5} $fileName wc -l
awk -v x=$x -v q=, $0 ~ x { count++ } END { print x q count }
awk -v y=$year -v m=$month BEGIN { FS = "." } $1 == y m { print $2 } file
awk ...
awk ...
awk ...
awk ... "\\\." ...
awk ... $f mv $f.tmp $f
awk ... /proc/mounts
awk ... FS=, file1 FS=| file2
awk ... FS=: file1 FS=  file2
awk ... c++filt -t
awk ... count=$count /tmp/input.csv
awk ... file file mv new_file file
awk ... file.txt mv file.tmp file.txt
awk ... fileB fileA mv tmp fileA
awk ... sed s/.$//g
awk ... sort
awk ... sort -t -, -k -2 -, -2 -n -k -1 -, -1
awk .... */*/*.abc
awk .... file mv temp_file file
awk .... file.db mv file.db.tmp /path/to/your/file.db
awk ...{print} file1 cat file3
awk / (TCP|UDP) / { split($5, addr, /:/); cmd = "/Users/user1/Scripts/geoiplookup " addr leftsquarebrc 1 rightsquarebrc ; cmd | getline rslt; split(rslt, r); close(cmd); print $1, $2, $3, r leftsquarebrc 4 rightsquarebrc , r leftsquarebrc 5 rightsquarebrc , r leftsquarebrc 6 rightsquarebrc  }
awk / HOSTNAME sendmail\ leftsquarebrc .*.from=.*., size=/{ split($8,a,"=") ; SUM += a leftsquarebrc 2 rightsquarebrc  } END { print SUM/1048576 } maillog
awk / differ$/ {print "diff "$2" "$4"  rightanglebrc "$2".diff"}{}
awk / leftanglebrc  leftanglebrc  leftanglebrc HDOC/{f=1;next}f{if($0 ~ /\ leftanglebrc foo\ rightanglebrc /)print NR,FILENAME,": "$0}/HDOC;/{f=0} *.php
awk / leftanglebrc !-- start of lyrics -- rightanglebrc /,/ leftanglebrc !-- end of lyrics -- rightanglebrc / input.txt
awk / leftanglebrc --|-- rightanglebrc /{rec=""; f=1} f{rec = rec $0 ORS} !f; /Content-Length:/{ if (f && (rec !~ "REGISTER")) printf "%s",rec; f=0} file
awk / leftanglebrc --|-- rightanglebrc /{rec=""; f=1} f{rec = rec $0 ORS} /Content-Length:/{ if (f && (rec !~ "REGISTER")) printf "%s",rec; f=0} file
awk / leftanglebrc ?php/{f=1;next;} /? rightanglebrc /&&f{f=0} f file
awk / leftanglebrc ?php/{f=1} /? rightanglebrc /&&f{print;f=0} f file
awk / leftanglebrc IPv6 rightanglebrc /,/ leftanglebrc \/IPv6 rightanglebrc / {sub(/Automatic/,"__INACTIVE__")}1 xml_file
awk / leftanglebrc Main rightanglebrc / { f=1 } f && /Amt/ { split($0,a,/ leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc /); s+=a leftsquarebrc 3 rightsquarebrc  } / leftanglebrc \/Main rightanglebrc / { f=0 } END {print  s } MyFile.xml
awk / leftanglebrc \/review_text rightanglebrc / {f=0} f {print  rightanglebrc  rightanglebrc  (t".txt")}; / leftanglebrc review_text rightanglebrc / {f=1; t++} file
awk / leftanglebrc failure/ {print s} /^ name/ {getline;s=$0} RS=" file.xml
awk / leftanglebrc li rightanglebrc  leftanglebrc p rightanglebrc  leftanglebrc a href="anti\/recent.html" rightanglebrc / && ++a == 4 {next} 1 file
awk / leftanglebrc li rightanglebrc  leftanglebrc p rightanglebrc  leftanglebrc a href="anti\/recent.html" rightanglebrc / {a++} a == 4 { getline } 1 file
awk / leftanglebrc pl:updated rightanglebrc / feed.rss head -n 1 awk -F - leftanglebrc   { print $2 }  awk -F - rightanglebrc   { print $2 }  date -j -f %a, %d %b %Y %H:%M:%S %Z Fri, 13 Sep 2013 17:16:45 GMT +%s000
awk / leftanglebrc start/,/\/ rightanglebrc /{printf "%s ",$0}/\/ rightanglebrc /{print ""} file
awk / leftanglebrc table rightanglebrc / { cf=1; print " leftanglebrc table rightanglebrc "; getline } / leftanglebrc \/table rightanglebrc / {cf = 0 } {if(cf == 1){print $0}}END{ print " leftanglebrc /table rightanglebrc " } demo.html
awk / leftanglebrc tr rightanglebrc /,/ leftanglebrc \/td\ rightanglebrc / input.txt
awk / leftanglebrc tr valign=top rightanglebrc /&&v++%2{sub(/ leftanglebrc tr valign=top rightanglebrc /, " leftanglebrc tr valign=top bgcolor='#E0E0E0' rightanglebrc ")}{print} untitled.html
awk / leftanglebrc ul rightanglebrc / {ul++} ul == 6 { getline } 1 INPUTFILE mv TMPFILE INPUTFILE
awk / leftsquarebrc  \t rightsquarebrc +'$1'\/'$2'/ { print $1 } /etc/services
awk / leftsquarebrc 0-9 rightsquarebrc $/{ blahblahblah } !/ leftsquarebrc 0-9 rightsquarebrc $/ {blagblag}
awk / leftsquarebrc 0-9 rightsquarebrc + of  leftsquarebrc 0-9 rightsquarebrc + DOCUMENTS/{g++} { print $0  rightanglebrc  g".txt"} file
awk / leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +/{x=$0}{a leftsquarebrc x rightsquarebrc =a leftsquarebrc x rightsquarebrc ?a leftsquarebrc x rightsquarebrc ", "$0:$0}END{for (i in a)print a leftsquarebrc i rightsquarebrc } file
awk / leftsquarebrc 0-9 rightsquarebrc .* leftsquarebrc 0-9 rightsquarebrc / && / leftsquarebrc a-zA-Z rightsquarebrc .* leftsquarebrc a-zA-Z rightsquarebrc /
awk / leftsquarebrc 0-9 rightsquarebrc .* leftsquarebrc 0-9 rightsquarebrc / && /^ leftsquarebrc ^a-zA-Z rightsquarebrc * leftsquarebrc a-zA-Z rightsquarebrc  leftsquarebrc ^a-zA-Z rightsquarebrc * leftsquarebrc a-zA-Z rightsquarebrc  leftsquarebrc ^a-zA-Z rightsquarebrc *$/
awk / leftsquarebrc ^" rightsquarebrc $/{printf "%s",$0;next}7
awk / leftsquarebrc mM rightsquarebrc essage leftsquarebrc bB rightsquarebrc ox\(/,/\)$/ {gsub(/.* leftsquarebrc mM rightsquarebrc essage leftsquarebrc Bb rightsquarebrc ox\(|\)$/,""); print} file
awk / rightanglebrc  myoccupation/,/ rightanglebrc  mygrosssalary/ file
awk / rightanglebrc / {close(OUT); OUT=substr($0,2) ".fasta"}; OUT {print  rightanglebrc  OUT} file.fasta
awk /"'$line'"/,/\/ rightanglebrc /{printf "%s ",$0}/\/ rightanglebrc /{print ""}
awk /"trajectory"/ {if (getline x  leftanglebrc  "file2") {sub(/"nodo2"/,"\"nodo"x"\"")}}1
awk /#/{sub(/# +/,"#");n=gsub(/#/,"",$NF);$(n+1)=$NF;$NF="\t\t#"}1 file
awk /$1/ {print NR} $2 head -n 1
awk /$args/' {f=$0} END{print f}' $TMP_FILE
awk /$line/&&c++ {next} 1 ./file.txt
awk /%ENDBLOCK POSITIONS_FRAC/{ exit }; p; /%BLOCK POSITIONS_FRAC/{p = 1}; geometry.xyz
awk /(#.*#.*#|:.*:.*:.*:)/ file.txt
awk /(^| )abcd( |$)/ file
awk /(on|off)line/ { o leftsquarebrc ++c rightsquarebrc =$3 } substr($0,0,27)~$1 { v leftsquarebrc c rightsquarebrc =v leftsquarebrc c rightsquarebrc  $1 } END{ for(i=1;i leftanglebrc =c;++i) print v leftsquarebrc i rightsquarebrc ,o leftsquarebrc i rightsquarebrc  } file
awk /- GEM PATHS:/ { getline; sub(/.* - /,""); print } file
awk /------------------/ {p=0} /Specific/ {p=1; next} p file
awk /-/ {a=$0;getline;for (i=1;i leftanglebrc =NF;i++) if ($i~")")t=i;sub(/-/,"-"$t,a);$t="";print a "\n" $0;next} !/-/ file
awk /-END PUBLIC KEY-/ { p = 0 }; p; /-BEGIN PUBLIC KEY-/ { p = 1 } file.key
awk /.*(Bob).*(Bob).*/ yourFile
awk /./{line=$0} END{print line} my_file.txt
awk /146 GB/{x++;s=s?s","$2:$2}x==2{print s;exit} free-drivers
awk /1510603|1510504/ file
awk /2/
awk /80\/open/{print $2} infile
awk /;/{ count+=1 } {print} count==100 { print "COMMIT; BEGIN"; count=0 }
awk /= leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc / file
awk /@/{n++;close(filename)} !/@/{filename = sprintf("part%02d.txt", n); print  rightanglebrc filename; } text.txt
awk /ABC/{$0="AAAAAAA"}7 file
awk /ADDED UPDATED/{ t=$3; $3=$2; $2=t } 1 file
awk /ARCHIVE:$/{print NR; exit} $0
awk /Allow from local/ {sub(/localhost 127.0.0.0\/8 ::1/,"all")}1 /etc/munin/apache.conf
awk /Apples/,/^$/ { if (/Good/) print $2} file
awk /BODY leftsquarebrc 13 rightsquarebrc /,/^$/ file
awk /BirthdayYear/{birthday=$NF} $1=="Name" && birthday leftanglebrc 1999 {print $3} birthday.txt
awk /Blah/,/Failed/ file
awk /CPU/&&/idle/{f=1;next}f{a leftsquarebrc $4 rightsquarebrc +=$13;b leftsquarebrc $4 rightsquarebrc ++}END{for(i in a){print i,a leftsquarebrc i rightsquarebrc /b leftsquarebrc i rightsquarebrc }} your_file
awk /Coords/{getline leftanglebrc "coords.txt"}1 template.txt
awk /Current Network Information/,0 INPUT_FILE
awk /Customer/ { out=FILENAME".out"; print $5, $NF  rightanglebrc  out } $i
awk /Customer/ { print $5, $NF  rightanglebrc  FILENAME".out" } $i
awk /Distribution_Facilities_carrying_Item/ {sub(/^ leftanglebrc /," leftanglebrc !--");sub(/ rightanglebrc $/,"-- rightanglebrc ")}1 a.xml
awk /Drive\/Music/ {sub(/\/string/,":string");sub(/Music.*\//,"Music/");sub(/:string/,"/string")}1 file
awk /EFF=exon/{print} file
awk /ERROR|DEBUG|TRACE|WARN|FATAL/ {count leftsquarebrc $4,$5 rightsquarebrc ++} END {for (i in count) {split(i, a, SUBSEP); print a leftsquarebrc 1 rightsquarebrc , a leftsquarebrc 2 rightsquarebrc , count leftsquarebrc i rightsquarebrc }} inputfile
awk /FINDME/{f=1}f&&/NEWSEARCH/{print} file
awk /File does not exist/{count leftsquarebrc $13 rightsquarebrc ++}END{for(ip in count) print count leftsquarebrc ip rightsquarebrc ,ip} local1.log
awk /Flags/{sub(/.80:/, "", $4);printf $4"\t"} /User-Agent/{sub(/^ leftsquarebrc ^: rightsquarebrc  leftsquarebrc ^: rightsquarebrc *:/,"");sub(/\.80/,"", $4); print} logTest
awk /FormattedDescription/ { getline; print; exit; } archivage001.1.tar
awk /Ghostscript/ {version=$3; print version}
awk /Ghostscript/{print $3} inputfile
awk /Header/ { show=1 } show; /Footer/ { show=0 }
awk /ItemA/{f1=1} /ItemB/{f2=1} END{ exit (f1 && f2 ? 0 : 1) } file
awk /John/{print NR, $0} file
awk /July/{f=1} f&&/foobar/{print "Found foobar after July!";exit} file
awk /LOCATION/{l=$0;getline;if(!$0)i=33; else print l}i{if(--i);next}1
awk /Line-to-reorder/ {tmp = $1; $1 = $3; $3 = tmp} {print} file.txt
awk /Looking up status of/ {print} /JON8RFC-LT/ && !a {print "\t"$1;a=1} /DOMAIN/ && !b {print "\t"$1;b=1} /MAC Address/ {print "\t"$4} input.txt
awk /Looking up status of/ {print} /JON8RFC-LT/ {if(a!=1){print "\t"$1;a=1}} /DOMAIN/ {if(b!=1){print "\t"$1;b=1}} /MAC Address/ {print "\t"$4} input.txt
awk /Looking up status of/,/MAC Address/ {print; getline;print "\t"$1;getline;print "\t"$1;getline;getline;getline;getline;print "\t"$4;exit 0} input.txt
awk /MACS_peak/{$1=$1"_"$2;$2="";}1 your_file
awk /MB$/{$4*=1024};/GB$/{$4*=1024*1024};{a leftsquarebrc $1 rightsquarebrc +=$4}END{for(i in a){printf "%s %s KB\n",i, a leftsquarebrc i rightsquarebrc }} a.txt
awk /MC exp. sig-250-0/ {print $10} your.txt
awk /MC exp. sig-250-0/ {print $10} your.txt tr -d $
awk /MODEL/{f=1;s="FILE"++i;next}/ENDMDL/{f=0;close(s)}f{print  rightanglebrc  s} 1KZS.pdb
awk /MYSTRING/ {n++} {p=97+int(n/26); q=(n%26)+97; s=sprintf("out_%c%c.txt", p, q); print  rightanglebrc  s} LARGEFILE
awk /MemTotal/ { print $2 } /proc/meminfo
awk /NA/ { for ( i = 1; i  leftanglebrc = 4; i++ ) { getline; } } { print } infile
awk /New USB device found/{p++}p==1 file
awk /Nmap scan report/ { host=$NF } NF==4 && $2=="open" { print host, $2, $NF } nmap-output.txt
awk /O leftsquarebrc 0-9 rightsquarebrc /{out=$0} out{print  rightanglebrc  out} file
awk /OBJECT-TYPE/ { obj= $1 } /KEY { .* }/ { print obj, $3 } file.txt
awk /OHZ061/{found=1} found{print; if(/OHZ062/) exit} /tmp/weather.html
awk /PARENT1_H/ {print "#ifndef NOPARENT" RS $0;f=1} /#endif/ && f {print $0;f=0} !/PARENT1_H/ file
awk /PATTERN/{c=3}c&&c-- file
awk /PATTERN/{c=3}c-- rightanglebrc 0 file
awk /PATTERN/{close("result"f);f++}{print $0  rightanglebrc  "result"f} file.log
awk /PATTERN/{for(;i leftanglebrc NR-2;)print lines leftsquarebrc ++i rightsquarebrc ;i=NR;delete lines;print $0}{lines leftsquarebrc NR rightsquarebrc =$0} file
awk /PATTERN/{if(f){print ""};print;f=f?0:1;next}f{printf "%s ", $0} file
awk /PropertyName=\"ABC\"/{print; getline; sub(/true/,"false")}1 file
awk /Query/{print RS" "$0} RS= leftanglebrc AUDIT_RECORD file
awk /Reco/{c=3} c&&c--{print; if(!c)print ""} file
awk /Reco/{c=3} c{c--; print; if(c == 0)print ""} file
awk /Release:  leftsquarebrc 0-9 rightsquarebrc +/ { printf "Release: %d\n", $2+1 }
awk /SEPARATOR/{n++}{filename = "part" n ".txt"; print  rightanglebrc filename } in.txt
awk /Sending file/ {print $NF} scp.output
awk /Sequences/{print prev ORS $0} {prev=$0} file
awk /Start of activty/{f=$1;next}   /End of activity/{f="";next}   {if(f){print  rightanglebrc f}else print} yourfile
awk /Start/ { start = $3 } /End/ { end = $3; print end - start }
awk /Stats/,0 FILE
awk /String1/ { linematch leftsquarebrc NR+10 rightsquarebrc =1; } /String2/ && NR in linematch; file1.log
awk /TYPE A/{p=1;next}/TYPE E/{print $0;p=0}p inputFile
awk /Taco/ {print prev;print $0} {prev=$0} datafile
awk /The http port is/ {f=$NF} END {print f} file
awk /Think/,/event/ {if(/event/) {print $4}} /proc/bus/input/devices
awk /Transformation/ && $4=="Filter" && match($5, /^fltr_ leftsquarebrc A-Za-z_ rightsquarebrc +/) { print $4,$5 } filename
awk /User-Agent/ && NF  rightanglebrc  6 {...}
awk /User-Agent/{brow=$NF} END{sub(/\\r.*$/, "", brow); print brow;} file
awk /Version:/{$2++}1 ./infile
awk /WACSLAW1 CRITICAL INCOMING/ && $14 !~ /192.168.1./ && $14 !~ /IN=eth1/ && $14 !~ /MAC/ { print $14 } /var/log/messages
awk /XXX/,/ leftanglebrc  leftanglebrc /{print a leftsquarebrc FILENAME rightsquarebrc ?$0:FILENAME RS $0;a leftsquarebrc FILENAME rightsquarebrc ++} *.txt
awk /\ leftanglebrc WAM\ rightanglebrc / {split($1, a, ":"); print a leftsquarebrc 2 rightsquarebrc  ":" a leftsquarebrc 3 rightsquarebrc } file
awk /\ leftsquarebrc / temp.txt
awk /\('\''Backup/ {print " ('\''Drop the no good white.cap ;'\'' ) , " } { print } filename.sh
awk /\* \* \* \* \* \* \*/{i++}i && $2 == "-" { print $1 } data2.txt
awk /\.\*/ file
awk /\/\*!/{a=1}!a;/\*\/;/{a=0} test.in
awk /\/dev\/vda/ {if(c++ rightanglebrc 0){print _n-$4};_n=$4} src/checkout-plugin/a.txt
awk /\/var/{print $3}
awk /\\return/{cmt=$0} /^ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc /{ if (/^void/ && cmt) print cmt ORS $0; cmt=""} file
awk /\r$/ && length  leftanglebrc  13 {sub(/\r$/,""); printf "%s  ", $0; next} {print} file
awk /\t/ { print NR ":" $0 } file.txt
awk /\usr/ && ! a leftsquarebrc $0 rightsquarebrc ++{print $3} foo.txt
awk /^ * leftsquarebrc 0-9 rightsquarebrc *(\. leftsquarebrc 0-9 rightsquarebrc +)?" *$/{sub(/"/, ""); print} inFile
awk /^ / {gsub(/ leftsquarebrc () rightsquarebrc /, "", $3); printf "%s ", $3}
awk /^ / {printf "%s ", substr($3, 2, (length($3) - 2))}
awk /^ leftanglebrc /{i="old,"}/^ rightanglebrc /{i="new,"}i{$2=$2" "i;print;i=0}
awk /^ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc / infile
awk /^ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +$/ {i++} END { print i } Nameofpop_chr1_window1.txt
awk /^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *#/ { NR-- } {sum+=$3} END { ... } coriolis_data
awk /^ leftsquarebrc 0-9 rightsquarebrc + leftsquarebrc . rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc + leftsquarebrc . rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc . rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc +/ {print $2} arp-scan-output.txt
awk /^ leftsquarebrc 0-9 rightsquarebrc +$/ file
awk /^ leftsquarebrc 0-9 rightsquarebrc +$/{$0=sprintf("%05d",$0)}1 file
awk /^ leftsquarebrc 0-9 rightsquarebrc +/{print substr($0,length($1),11)} your_file
awk /^ leftsquarebrc 0-9 rightsquarebrc / && !/OK/ {print "BAD UNIT DETECTED:",$0} input
awk /^ leftsquarebrc 0-9 rightsquarebrc / && $3 rightanglebrc $2 {a=$2; $2=$3; $3=a} {print} file column -t sort -u
awk /^ leftsquarebrc 0-9 rightsquarebrc / && $3 rightanglebrc =$2 file
awk /^ leftsquarebrc 0-9 rightsquarebrc / file
awk /^ leftsquarebrc 0-9 rightsquarebrc / {print $1}
awk /^ leftsquarebrc 0-9 rightsquarebrc /{print $0} file
awk /^ leftsquarebrc 0-9 rightsquarebrc {1,10}  leftsquarebrc 0-9 rightsquarebrc {1,4}/{l=$1+$2; "date --date=@"$1|getline d1; "date --date=@"l|getline d2;print d1" - "d2;next;}1 file
awk /^ leftsquarebrc 1-9 rightsquarebrc / { if (num_printed++  leftanglebrc  50) print $6 }
awk /^ leftsquarebrc 1-9 rightsquarebrc / { print $6; if (++num_printed == 50) exit }
awk /^ leftsquarebrc A-Z rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc / file
awk /^ leftsquarebrc ^ \t rightsquarebrc / && buf{print buf;buf=""} {buf=buf $0} END{print buf} input.txt
awk /^ leftsquarebrc ^!  rightsquarebrc / {p = 1; print;}  /^ *$/ {if (p++ % 2 == 0) print;}  (p % 2 == 0) { print; }
awk /^ rightanglebrc / && r { print r, "-", s; r=s="" } /^ rightanglebrc / { r = substr($0, 2); next } { s += length } END { print r, "-", s } file
awk /^ rightanglebrc / { $0=$0 "," ++i }1 file
awk /^ rightanglebrc / { .... }
awk /^ rightanglebrc / { file = substr($1,2); next } { a leftsquarebrc file rightsquarebrc  leftsquarebrc $1 rightsquarebrc  } END { for (i in a) { while ( ( getline line  leftanglebrc  ("./F1/" i) )  rightanglebrc  0 ) { split(line,b); for (j in a leftsquarebrc i rightsquarebrc ) if (b leftsquarebrc 6 rightsquarebrc ==j) print line  rightanglebrc  "./F1/" i ".new" } system(sprintf("mv ./F1/%s.new ./F1/%s", i, i)) } } data.txt
awk /^ rightanglebrc / { file = substr($1,2); next } { a leftsquarebrc file rightsquarebrc =( a leftsquarebrc file rightsquarebrc  ? a leftsquarebrc file rightsquarebrc  SUBSEP : "") $1 } END { for (i in a) { split(a leftsquarebrc i rightsquarebrc ,b,SUBSEP); while ( ( getline line  leftanglebrc  ("./F1/" i) )  rightanglebrc  0 ) { split(line,c); for (j in b) if (c leftsquarebrc 6 rightsquarebrc ==b leftsquarebrc j rightsquarebrc ) print line  rightanglebrc  "./F1/" i ".new" } system(sprintf("mv ./F1/%s.new ./F1/%s", i, i)) } } data.txt
awk /^ rightanglebrc / { sub (/ leftsquarebrc ^\/ rightsquarebrc +\//," rightanglebrc ", $0); sub (/\..+/, "", $0) }1 file.txt
awk /^ rightanglebrc / {if (seqlen){print seqlen}; print ;seqlen=0;next; } { seqlen = seqlen +length($0)}END{print seqlen} file.fa
awk /^ rightanglebrc / {print ""; print; next} {printf "%s", $0} END {print ""}
awk /^ rightanglebrc /sub(/hg19_ct_UserTrack_3545_/, "") input
awk /^ rightanglebrc /sub(/hg19_ct_UserTrack_3545_/, "");sub(/ /, "_") input
awk /^ rightanglebrc /{i++};{print  rightanglebrc  (i".txt")} yourFile
awk /^ rightanglebrc /{p=!($0 in a);a leftsquarebrc $0 rightsquarebrc }p file1
awk /^ rightanglebrc /{printf("%s,%d\n",$0,++counter);next}{print $0} file
awk /^ rightanglebrc ENSBTAG/{tag=$0;}/^MA/{print $0,tag}
awk /^## Screenshot/{p=1} p{gsub( "line", "modified")} p&&/^##/{p=0}; 1 readme.md
awk /^#/{x=$0;next}{if(x)print $0,x;else print;x=0} file
awk /^#/{x=$0;next}{print $0 (x? FS x:"");x=0} file
awk /^#PRINTME/ { sub( /^#PRINTME /, "" ) ; system( "echo " $0 ) }
awk /^#Start/{f=$NF;next}   /^#End/{f="";next}   {if(f){print  rightanglebrc f}else print} yourfile
awk /^${ipAddress//./\.} rightanglebrc /' { print $4 }' /proc/net/arp
awk /^%%(HiRes)?BoundingBox:/{print $1, $2-1, $3-1, $4+2, $5+2;next}{print}
awk /^-----+$/{++j};!j{next};{a leftsquarebrc i++ rightsquarebrc =$0}j==3{t="";for(k=0;k leftanglebrc i;++k)t=t a leftsquarebrc k rightsquarebrc "\n";b leftsquarebrc ++l rightsquarebrc =t;i=j=0}END{for(i=l;i;--i)printf "%s", b leftsquarebrc i rightsquarebrc } file
awk /^--/{$0=" ";}1 file
awk /^0/{next}{print $0 rightanglebrc FILENAME} file
awk /^02/{f=0} /name/{f=1} f file
awk /^1 leftsquarebrc 0-9 rightsquarebrc {10}$/ { $0 = substr($0, 2) }1 file
awk /^1 leftsquarebrc 0-9 rightsquarebrc {10}$/ { sub(/^1/, "") }1 file
awk /^1$/ {for(i=1; i leftanglebrc =1; i++) {getline; printf("%s,",0);}} file.txt
awk /^1/{i++;a leftsquarebrc i rightsquarebrc =$0;next}i rightanglebrc 1{for(x=1;x leftanglebrc =i;x++)print a leftsquarebrc x rightsquarebrc }{i=0;delete a} file
awk /^101/ && !i { c++; i=1 } i { print  rightanglebrc  "file" c } /^110/ { i=0 } input
awk /^101/,/^110/{ print  rightanglebrc  "output" c } /^110/{c++} c=1 input
awk /^15 /{print $2} infile
awk /^4/ {print ++i, "MMM"} /^ leftsquarebrc 0-9 rightsquarebrc / {$1=++i} 1 file
awk /^==/ {out=$2} {print  rightanglebrc  out".txt"} file
awk /^===/{h=$0;next}h{print h;h=0}1 file
awk /^====/{print;for(i=1;i leftanglebrc =3;i++)getline;x=0;next}{++x}x leftanglebrc =5 file
awk /^@/ && l~/@$/ { print l; l=$0; next } { l=l $0} END { print l }
awk /^@/{a=substr($0,2)}/^\+/{printf ("%s%s\n", $0,a);next}1 file
awk /^AB1/{ab1=$0;next}/^AB2/{print $0, ab1}
awk /^AB1/{ab1=$0;next}/^AB2/{print $1, $2, ab1, FILENAME} $f
awk /^AB1/{ab1=$0;next}/^AB2/{print $1, $2, ab1} $f awk {print $1,$2,$3,$4,$5,$6,FILENAME} new$f
awk /^ABC\./{print; f=1; next} f{exit} file
awk /^ATOM/&&substr($0,20,1)~/ leftsquarebrc GATC rightsquarebrc / file
awk /^Amount/ {amount+=$2} END {print amount+0} file
awk /^Build Number/{$4=$4+1;}1 $path/$file
awk /^Build Number/{$4=$4+1;}1 $path/$file mv /tmp/file $path/$file
awk /^Case Notes:$/ { matched = 1 } matched { print }
awk /^Col1 /,/^$/{ if( $2 == "bar" && $3  rightanglebrc  1 ) print $1} example
awk /^Content-Length:/ { gsub("\015", "", $2); print $2 }
awk /^Content-Type: application\/octet-stream/,/^--------/
awk /^E/ && $2=="2" {$0=substr($0,1,length($0)-5)"     "}1 file
awk /^E/ && $2=="2" {NF--}1 file
awk /^Ge/{print $8,$9}/^ea/{print $3,$4} file
awk /^H/{t=3} /^B/ || t--  rightanglebrc 0 input.file
awk /^Line$/,/^10$/ myfile
awk /^Nmap/{h=$0;i=NR;next}NR==i+1{if($0){print h;p=1}else p=0}p file
awk /^O/{if(seen==0){seen=1};c=$0} !/^O/{if (seen==1) {print c; seen=0;}} myfile.txt
awk /^O/{x=$0} !/^O/&&x{print x;x=0;} myfile
awk /^O/{x=$0} !/^O/{if(x!=0) {print x; x=0;}} myfile.txt
awk /^O/{x=$0} !/^O/{if(x){print x;x=0;}} myfile
awk /^P01/{cnt+=$3; num+=1} END{print "avg="cnt/num} input
awk /^PermitRootLogin yes$/{f=1} /^Match/{exit} END{exit !f} /etc/ssh/sshd_config
awk /^SF.*test.*/{f=1}f;/end_of_record/{f=0} yourFile
awk /^START/{n++;w=1} n&&w{print  rightanglebrc "out" n ".txt"} /^END/{w=0} input_file.txt
awk /^START=A$/,/^END$/ { print } data
awk /^SomethingA/ && ! a++ || /^SomethingD/ { print $2 } FS=: text.txt
awk /^StringB/ { if(lastline ~ /^StringA/) {print lastline }} {lastline=$0} $file
awk /^TCF/ || /^FSTL/ /path/to/file
awk /^Text Point/{print p; p="-" } /String/{ p=$0} END{print p} input
awk /^XXX$/ { c++ } c leftanglebrc =3 $i
awk /^XXX$/ { c++ } c rightanglebrc =3 { exit }1 $i
awk /^\ leftsquarebrc PATTERN\ rightsquarebrc $/{close("file"f);f++;next}{print $0  rightanglebrc  "file"f} data
awk /^\s*$/{a leftsquarebrc NR rightsquarebrc ;if(!(NR-1 in a))print} / leftsquarebrc 235 rightsquarebrc $/{print} file
awk /^\|/ file
awk /^ab leftsquarebrc ^a-z rightsquarebrc +cd$/{gsub(/ab/,""); gsub(/cd/,""); print} file
awk /^abcd/{p++;if(p==1) print}/^DDD/{q++;if(q==8||q==9)print} file
awk /^case 4.1/,/^endcase 4.1/ ./your_file
awk /^category/,/^done/{if(++m==1)n++;if(n==3)print;if(/^done/)m=0} file
awk /^category/{c=$3}/^item/{printf "%s %s %s %d\n",c,$1,$2,$3} file
awk /^category/{c=$3}/^item/{printf "%s %s %s\t%d\n",c,$1,$2,$3} file
awk /^class/{p=1;++x}/^}/{p=0;print $0 rightanglebrc "file"x}p{print $0 rightanglebrc "file"x} test.txt
awk /^cpu/ { total=0; idle=$5; for (i=2; i leftanglebrc =NF; ++i) { total += $i }; print $1, int((1000 * (total - idle) / total + 5) / 10) }
awk /^example/ { i++; next } { print  rightanglebrc "test"i}
awk /^exp /{sub(/^exp /,"");s=(s?s"|":s) sprintf("%s",$0)}END{print s} file
awk /^foo leftsquarebrc 34 rightsquarebrc $/||!/^foo/{print} foo
awk /^foo$/ { if (NR rightanglebrc 1) printf("\n"); print; next } { printf("%s ", $0) }
awk /^fun2/ {a=0;next} /^ leftsquarebrc a-z rightsquarebrc / {a=1} a
awk /^lg325/ {sub(/\/bin\/bash/,"/sbin/nologin")}1 file mv tmp file
awk /^miss rate/ { print $3 } yourfile
awk /^num/ {n++;sum+=$2} END {print n?sum/n:0} file
awk /^number of ports:/ {print $4} Config_input.txt
awk /^password/ {split($0, a, "="); gsub(/^ leftsquarebrc  \t rightsquarebrc +| leftsquarebrc  \t rightsquarebrc +$/, "", a leftsquarebrc 2 rightsquarebrc ); print a leftsquarebrc 2 rightsquarebrc ; exit} file
awk /^starting/{l=1;print;next} /^\S/{l=0} l file
awk /_y/ {print $1} myFile
awk /aa/{f=1}/aa|bb/&&f{printf "%d %s\n%d %s\n",NR-1,a,NR,$0}{a=$0}/bb/{f=0}
awk /aa\|/ {print $2} FS=| try_1.txt paste -s -d -,
awk /abc/ && /vhg/ file.txt
awk /alice/,/cat/ file
awk /arg = rightanglebrc /{f=1} f; /bytes = rightanglebrc /{f=0} file
awk /arg = rightanglebrc /{rec=""; f=1} f{rec = rec $0 ORS} /bytes = rightanglebrc /{ if (f && (rec !~ "whatever")) printf "%s",rec; f=0} file
awk /arg = rightanglebrc /{rec=""; f=1} f{rec = rec $0 ORS} /bytes = rightanglebrc /{ if (f && (rec ~ "whatever")) printf "%s",rec; f=0} file
awk /arg = rightanglebrc /{rec=""; f=1} f{rec = rec $0 ORS} /bytes = rightanglebrc /{ if (f) printf "%s",rec; f=0} file
awk /begin-message/{ P=1; next } /end-message/ {exit} P new.txt
awk /bhaskar/ && !p++, /ganesh/ bhaskar.txt
awk /bhaskar/ {p=1} p {print} /ganesh/ {exit} bhaskar.txt
awk /chrom=2/{p=1}/chrom= leftsquarebrc ^2 rightsquarebrc /{p=0}p input
awk /client.dom.lcl/ && !(/timeout/||/disconnect/) {sub(":","",$6); msgid leftsquarebrc $6 rightsquarebrc  = 1} {if (gensub(":", "", 1, $6) in msgid) print} sampledata
awk /client.host.name/ && !(/timeout/||/disconnect/) {sub(":","",$6);msgid leftsquarebrc $6 rightsquarebrc =1} {if ($FIELD in msgid) print} maillog
awk /count=/ { sub("count=","",$2); gsub("\042","",$2); sum += $2} END{print sum} tmp_20100923*.xml
awk /cpu MHz/ {print $4} awk -F -. NR==1 {print $1}
awk /dbdir/ {$0="dbdir /var/lib/munin"}1 /etc/munin/munin.conf mv temp /etc/munin/munin.conf
awk /dbdir/ {sub(/^#/,x)}1 /etc/munin/munin.conf
awk /desktop/ {print $NF}
awk /enabled/{g=$1}/Mode:/{printf "%s is %s\n",g,$NF} foo.txt
awk /f89e7000/ {print $2} syscall_list.txt
awk /fin\(fname\)/ {sub("fname", "fname.c_str()", $0)} {print} input_filename
awk /find user/ {print "-A INPUT -s " $NF "-j DROP"} /usr/local/freeswitch/log/freeswitch.log
awk /foo$/ { printf("%s\t", $0); next } 1
awk /foo/
awk /foo/ && /bar/{print FILENAME;nextfile} folder/* basename
awk /foo/ { while(getline  rightanglebrc  0) { print }}
awk /foo/ {a=$0} END{print a} file
awk /foo/ {sub(/foo/, "&_" sprintf("%02d",++c))} 1 infile
awk /foo/{if (a && a !~ /foo/) print a; print} {a=$0} file
awk /group ProfileLocator/ {f=1} f && /Address/ {print;f=0} file
awk /interface/{if(p)print p; p=$0; next}{p=x} END{if(p)print p} file
awk /line/ && !(++c%3) infile
awk /line/{ print NR; exit } input-file
awk /link| leftsquarebrc Ii rightsquarebrc  leftsquarebrc Ss rightsquarebrc  leftsquarebrc Ss rightsquarebrc  leftsquarebrc Uu rightsquarebrc  leftsquarebrc Ee rightsquarebrc - leftsquarebrc Ff rightsquarebrc  leftsquarebrc Ii rightsquarebrc  leftsquarebrc Xx rightsquarebrc  leftsquarebrc Ee rightsquarebrc  leftsquarebrc Dd rightsquarebrc :/{print $2} foo.txt sed N; y/\n/ /
awk /localhost rightanglebrc  localhost rightanglebrc /{print $1  rightanglebrc "file2";next}{$2=$3=$NF=""}7 file
awk /msg.*/{getline x;print x;}1 file sed -e s/msgid/msgidt/g -e s/msgstr/msgid/g -e s/msgidt/msgstr/g
awk /msg_sent_node number/ { node_total += $5  } /msg_sent/ { sent_total = sent_total + $4} END { print sent_total " " node_total }
awk /my pattern/{count++ }; END { print count }; myfile.log
awk /mystring/{three = two; two = one; one = $0} END{print three} myfile
awk /namenode/{print  rightanglebrc "masters"; next} /slave leftsquarebrc 0-9 rightsquarebrc /{print  rightanglebrc  "slaves"} /etc/hosts
awk /not enough space/{split(pre,a);print a leftsquarebrc pNF rightsquarebrc }{pre=$0;pNF=NF} input-awk.txt
awk /output_checkbox/{printf "%s",$0;next}{printf (NR rightanglebrc 1?"\n%s":"%s"), $0}END{print ""} file
awk /packet loss/ && /100/{x="Loss: " $7} /round-trip/{split($4,a,/\//);x="Ave: " a leftsquarebrc 2 rightsquarebrc } END{print x}
awk /pattern 1/,/pattern 2/ {if ($0 !~ /pattern 1|pattern 2/) print} input.txt
awk /pattern/ {p=1;next}p file
awk /pattern/ {print; next} {print  rightanglebrc  "/dev/stderr"} inputfile
awk /pattern/,0{if (!/pattern/)print}
awk /pattern/{ print $0 } file
awk /pattern/{++i} i==1{print} file
awk /pattern/{c=N}c&&c-- file
awk /pattern/{c=N}c&&c-- file
awk /pattern/{f=1}f file
awk /pattern/{f=1}f file
awk /pattern/{i++}i tmp.log
awk /pattern/{p=1;print;next} p&&/^##/{p=0};p file
awk /pattern/{special processing; next} 7 file
awk /pattern1/ || /pattern2/{print}
awk /pattern_a/{f=1;c+=1;next}/pattern_b/{f=0;next}f{print  rightanglebrc  "outfile_"c} input_file
awk /patterns/{e=0}/Hi /{gsub("^.*Hi ","",$0);e=1}{if(e==1){print}}
awk /pay/ {match($0, /"money":"( leftsquarebrc 0-9 rightsquarebrc +)"/); split(substr($0, RSTART, RLENGTH), a, / leftsquarebrc ": rightsquarebrc /); print a leftsquarebrc 5 rightsquarebrc } action.log
awk /pay/ {match($0, /"money":"( leftsquarebrc 0-9 rightsquarebrc +)"/, a); print substr($0, a leftsquarebrc 1, "start" rightsquarebrc , a leftsquarebrc 1, "length" rightsquarebrc )} action.log
awk /policy/ {print $3} /proc/process_id/sched
awk /regex/,0 INPUTFILE
awk /regex/{c++}END{print c+0} /home/someuser/sometext.txt
awk /regex1/,/regex2/ INPUT_FILE
awk /regex2/ { print $1 }
awk /regexp/ {exit} {print} $i
awk /searchTerm/ {print NF-1} $(cat subset.txt) cat subset.txt
awk /searchphrase/{c++; print} END{if(c == 0) print "No Match"} file
awk /searchphrase/{c++} END{if(c == 0) print "No Match"} file
awk /searchtext/ {flag=1} flag; file1
awk /something/ { array'$1' leftsquarebrc something rightsquarebrc ++ }
awk /start/,/end/ { print ( $0 ~ /end/ ) ? $0 "\n--" : $0 } infile
awk /start/,/end/{if(/ppp/)print} file
awk /start/,/end/{next}1
awk /start/,/stop/{if($0 ~ /stop/){print}; if($0 !~ /stop/){printf $0" "}} file
awk /start/{f=1} /ppp/ && f; /end/{f=0} file
awk /start_here/{f=1} /end_here/{f=0;print} f file
awk /start_here/{f=1} f; /end_here/{f=0} file
awk /string/ && length($0)  leftanglebrc =100 filename
awk /string/{x=$2$3;sub(/.*\//,"",x);print x}
awk /t=/ { sub(/t=/,"",$NF); print $NF/1000} /sys/bus/w1/devices/28-00000202070c/w1_slave
awk /task/ { a = "(....)(..)(..).(..)(..)(..)"; b = "\\1 \\2 \\3 \\4 \\5 \\6"; t += mktime(gensub(a, b, "", $NF)) - mktime(gensub(a, b, "", $(NF-1))) } END { print t } file
awk /test/ {f=1} !f; /end/ {f=0} file
awk /test/ {for(i=1; i leftanglebrc =100; i++) {getline; print}}
awk /test/{p=1} /^( leftsquarebrc 0-9 rightsquarebrc |\ leftsquarebrc )/{p=0} p file
awk /test1/&&!/test2/{next}1 file
awk /the-timestamp-I-have/,0 the-log-file
awk /this/{count++;if(count==3){sub("this","something")}}1
awk /two/{i++}i==2 file
awk /two/{i++}i==2{print; exit} file
awk /username=/ {match($7, " leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc +"); A=substr($7, RSTART, RLENGTH); split($9, B, "="); print(A, B leftsquarebrc 1 rightsquarebrc );} /var/log/mylog
awk /value="/,/" rightanglebrc /
awk /wtec_1/ {ok=1} /^$/ {ok=0} {if(ok){print $0}} filename
awk /yahoo/{y=1;next}y data.txt
awk /you:me/ { print "#"$0 }
awk /}/{f=1;m=0;next} $0 && f{f=0;m=0;next} !$0 && f &&!m{m=1;next} m{print "empty line found:"NR} file
awk /}/{f=1;next} $0 && f{f=0;next} !$0 && f{print "empty line found:"NR} file
awk 1  leftanglebrc (echo "$MSG") file echo $MSG
awk 1 ORS=;n file
awk 1 RS=var12= leftsquarebrc 0-9 rightsquarebrc + file
awk 1 file
awk 1 file
awk 1300000000  leftanglebrc  $1 && $1  leftanglebrc  1305000000 Log2.log
awk 1; END {if (NR  leftanglebrc = 2) print "another line"} file
awk 1;$1=="timeout"{printf "    index = %d;\n", ++i} file
awk 1;/Find a hot chick/{if(i++==3){print "New line";i=0}} yourfile
awk 1;END{print "T|"NR-1} file
awk 7 file
awk BEGIN { FPAT = "( leftsquarebrc ^, rightsquarebrc *)|(\" leftsquarebrc ^\" rightsquarebrc +\")"; OFS="," } { for (i=1; i leftanglebrc =NF; i++) gsub(/ leftsquarebrc \", rightsquarebrc /,"", $i) }1
awk BEGIN { FPAT="( leftsquarebrc ^, rightsquarebrc +)|(\" leftsquarebrc ^\" rightsquarebrc +\")"; OFS=","; N="\"" } { for (i=1;i leftanglebrc =NF;i++) if ($i ~ /^\".*\"$/) { gsub(/\"/,"", $i); $i=N $i N } }1 file
awk BEGIN { FS = "=" } { ip = substr( $1, 0, index( $1, " " ) - 1 ); pattern = substr( $2, 0, index( $2, "&" ) - 1 ); printf "%s %s\n", ip, pattern } infile
awk BEGIN { FS = "="; OFS = "=" } $1 == "abcd" { print $1, "new value"; next } 1
awk BEGIN { FS = "\t" } ; { print $1, $5 } filename
awk BEGIN { FS = "|" } { sum += $4 } END { print sum } tag_FLI1
awk BEGIN { FS = OFS = ","} {$4 = $2/$3; print} sort -k -4 -, -4 -n -r -t -, sed s/, leftsquarebrc ^, rightsquarebrc *$// inputfile
awk BEGIN { FS=" leftsquarebrc  \t; rightsquarebrc +"; OFS=" " } { for (i=1; i leftanglebrc =NF; i++) { sub (/ leftsquarebrc ^= rightsquarebrc *=/,"", $i); line = (line ? line OFS : "") $i } print line; line = "" } file.txt
awk BEGIN { FS=" leftsquarebrc (|) rightsquarebrc " ; OFS=""} /\(.*\)/ { for (field=2;field leftanglebrc NF;field++) {print $1,$field ;} ; next ; }1
awk BEGIN { FS=","; OFS="," } (NF rightanglebrc =2) { $2=$2 ":00:00"; } (1)
awk BEGIN { FS=","; OFS="," } (NF rightanglebrc =2) { $2=$2 ":00:00"; } (1) source.txt
awk BEGIN { FS=",? leftsquarebrc  \t rightsquarebrc *"; OFS="|"; } { $1=$1; print $0; }
awk BEGIN { FS=",? leftsquarebrc  \t rightsquarebrc *"; } { print $1,"|",$2,"|",$3,"|",$4,"|",$5; }
awk BEGIN { FS=": " } { print $2 } lines.txt
awk BEGIN { FS=":"; OFS="\t" } /Size|Locator|Speed|Manufacturer|Serial Number|Part Number/ { gsub(/^ leftsquarebrc  \t rightsquarebrc +/,"",$2); line = (line ? line OFS : "") $2 } /^$/ { print line; line="" } file.txt
awk BEGIN { FS="\n"; RS=""; OFS="\t\t" } { print $1, $2, $3 } file.txt
awk BEGIN { FS="\t"; OFS="," } {$1=$1; print} file.tsv
awk BEGIN { FS="\x01" } {print $1} input
awk BEGIN { FS=OFS="," } $1 == x=("Node") { c++; f=sub(/ leftsquarebrc ^, rightsquarebrc *,/,""); one = (one ? one : x) OFS $0; next } c==5 && $2 !~ /CBMR/ { next } f==1 { y=$1; gsub(/^ leftsquarebrc ^, rightsquarebrc *,| leftsquarebrc  \t rightsquarebrc *$/,""); two = (two ? two : y) OFS $0; f=0 } END { print one ORS two } file
awk BEGIN { FS=OFS="," } { split($3,a,"\\\\\\\\"); print $0, a leftsquarebrc 2 rightsquarebrc , a leftsquarebrc 3 rightsquarebrc , a leftsquarebrc 4 rightsquarebrc  } file
awk BEGIN { FS=OFS="\t" } FNR==NR { a leftsquarebrc $1,$2,$4,$5 rightsquarebrc =$3; next } ($1,$2,$4,$5) in a { $3=a leftsquarebrc $1,$2,$4,$5 rightsquarebrc  }1 file1 file2
awk BEGIN { FS=OFS="\t" } FNR==NR { array leftsquarebrc substr($1, 2) rightsquarebrc =$2; next } { if ($1 in array) print $0, array leftsquarebrc $1 rightsquarebrc  } file2.txt file1.txt
awk BEGIN { FS=OFS="\t" } FNR==NR { gsub(/ leftsquarebrc ^0-9 rightsquarebrc +/, "", $1); array leftsquarebrc $1 rightsquarebrc =$2; next } { if ($1 in array) print $0, array leftsquarebrc $1 rightsquarebrc  } file2.txt file1.txt
awk BEGIN { FS=OFS="|" } { $3=1000 + NR }1 file
awk BEGIN { FS=OFS="|" } { $3=1000 + NR; print } file
awk BEGIN { FS=OFS="|" } { sub(/.*_/,"",$3); $3+=1000 }1 file
awk BEGIN { OFS = "\t" } { $14 = "string" $14; print } infile
awk BEGIN { OFS = "\t" } { gsub(/.*=/, "", $3); print $1,$2,$3 } text.txt
awk BEGIN { OFS = "\t"; } { sub( / leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc /, "S", $3 ); print } infile
awk BEGIN { OFS="|" } { for (i=1; i leftanglebrc =NF; i++) if (i  leftanglebrc = 3 || i  rightanglebrc = NF - 3) printf "%s"OFS, $i; else printf "%s", $i; print "" } file.txt
awk BEGIN { OFS=FS="|" } $1 == "01" { c++ } $1 == "99" { $2 = c }1 file
awk BEGIN { ORS = " " } {print 22, $1, NR; for(i=2;i leftanglebrc =NF;++i) print $i}{print "\n"} file
awk BEGIN { ORS=" " }; { print $2 } file
awk BEGIN { RS = " leftanglebrc alert id=\""; FS = "\"" } / leftanglebrc name rightanglebrc emergency leftanglebrc \/name rightanglebrc / { print $1 } file
awk BEGIN { RS = " leftanglebrc option value=\"" ; FS = "\""; } NF { print $1 } file
awk BEGIN { RS = "/" } ; { print $0 } BBS-list
awk BEGIN { RS = "START" } {$1=$1} 1 file
awk BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR  rightanglebrc  1 {  gsub("~", "", $1); gsub("!", "", $1); gsub("%20", "_", $1; gsub("#", "", $1); gsub("$", "", $1); gsub("%", "", $1); gsub("^", "", $1); gsub("&", "_", $1); gsub("@", "", $1); gsub("*", "", $1); gsub("\\(", "", $1); gsub("\\)", "", $1); gsub(/ /, "_", $1); gsub("____", "_", $1); gsub("___", "_", $1); gsub("__", "_", $1); print RS } 1 piece1.txt
awk BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR  rightanglebrc  1 { gsub(/ /, "_", $1); print RS } 1 file
awk BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR  rightanglebrc  1 { gsub(/%20/, "_", $1); gsub(/ leftsquarebrc ~!#$%^&*()@ rightsquarebrc /, "", $1); gsub(/_+/, "_", $1); print RS } 1 piece1.txt
awk BEGIN { RS = "href=\""; ORS = ""; FS = OFS = "\"" } NR  rightanglebrc  1 { gsub(/(%20|_)+/, "_", $1); gsub(/ leftsquarebrc ~!#$%^&*()@ rightsquarebrc /, "", $1); print RS } 1 piece1.txt
awk BEGIN { RS=""; FS="\n" } /ssl-enum-ciphers/ && $1 !~ /host down/ file.txt
awk BEGIN { RS=""; FS="\n" } /ssl-enum-ciphers/ && $1 !~ /host down/ { printf "%s\n\n", $0 } file.txt
awk BEGIN { RS=""; OFS=FS="\t"; print "A", "B", "C", "D", "E", "F" } { split ($2, one, " "); split ($3, two, " "); print one leftsquarebrc 1 rightsquarebrc , two leftsquarebrc 1 rightsquarebrc , one leftsquarebrc 2 rightsquarebrc , two leftsquarebrc 2 rightsquarebrc , one leftsquarebrc 3 rightsquarebrc , two leftsquarebrc 3 rightsquarebrc  } file.txt
awk BEGIN { RS=","; FS=":" } { print $2 }
awk BEGIN { RS="NODE-ID rightanglebrc  "; } /^command1/ { print RS $0; }
awk BEGIN { RS="\n\n" } ; { print $1, $3, $5 }
awk BEGIN { RS="\r\n"; FS=":" } NR == 1 { split($0, array, FS) } NR  rightanglebrc = 2 { for (i=1; i leftanglebrc =NF; i++) printf "%s:%s ", array leftsquarebrc i rightsquarebrc , $i; printf "\n" } file.txt
awk BEGIN { RS="guide_change_names leftsquarebrc ^{ rightsquarebrc *{ leftsquarebrc ^} rightsquarebrc *} leftsquarebrc ^{ rightsquarebrc *{ leftsquarebrc  \n rightsquarebrc *} leftsquarebrc  \n rightsquarebrc *" } 1 file
awk BEGIN { clean=1 } /#c3284d#/ { clean=0 } /#\/c3284d#/ { clean=1 } { if (clean==1 && match($0,"#\/c3284d#") == 0) { print $0 } } dirty-file
awk BEGIN { count=0 }; /my pattern/{count++ }; END { print count } myfile.log
awk BEGIN { count=0};  { if ($0 ~ /my pattern/)  count++ }; END { print count }; myfile.log
awk BEGIN { family = ""} { if ($1 == "@") family = $2; else print family, $1, $2 } input.txt
awk BEGIN { for (i=1; i leftanglebrc =9999999; i++) { print i, i, i, int(i * rand()), i, i, i, i, i, i } }
awk BEGIN { i=""; FS = "( leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc |\\.)+" };{if($2 == i) print $1; i = $2;}
awk BEGIN { n = 1 } { print $0  rightanglebrc  "bandera" n } /bandera2/ { n++ } infile
awk BEGIN { nl=1 } /^$/ { nl=1 }  /OBJECT-TYPE/ && nl { obj= $1; nl=0; } /KEY { .* }/ { print obj, $3 } file.txt
awk BEGIN { ok = 1 } { if (/^ * leftsquarebrc 0-9 rightsquarebrc + + leftsquarebrc 0-9 rightsquarebrc + *$/) { a += $1; b += $2 } else { ok = 0; exit 1 } } END { if (ok) print a, b } foo.log
awk BEGIN { one = ""; } { if ( one != $1 ) { printf("\n%s %s",$1,$2); one = $1; } else { printf(" %s",$2); } } END { printf("\n"); }
awk BEGIN { print " leftanglebrc exam" }
awk BEGIN { print "\ leftanglebrc exam" }
awk BEGIN { print "\\ leftanglebrc exam" }
awk BEGIN { print mktime("2012 11 14 12 50 57") }
awk BEGIN { print strftime("%d/%m/%y") }
awk BEGIN { t = 0 } {t += $NF} END { print t }
awk BEGIN { t = systime() } { s = $1 " " $2; gsub(/ leftsquarebrc -: rightsquarebrc /, " ", s) } t - mktime(s)  leftanglebrc  86400 file
awk BEGIN { while ("ls" | getline var) print "I got: " var; }
awk BEGIN { while(" w_scan -c PL -x " | getline ) print  rightanglebrc  rightanglebrc  "tmp"; while(" w_scan -I tmp -E 0 -t 3 -F " | getline) print  rightanglebrc  rightanglebrc  "channels" }
awk BEGIN { x = 1 }; /^-- Dumping data for table `cache(_ leftsquarebrc a-zA-Z0-9 rightsquarebrc +)?`$/ { x = 0 }; /^-- Table structure for table ` leftsquarebrc ^` rightsquarebrc +`$/{ x = 1 }; (x == 1) { print } $1
awk BEGIN {"curl -sI http://example.com" | getline; print "Status Code: " $2}
awk BEGIN {A = 1};/ leftanglebrc restApi rightanglebrc /{A=0; print " leftanglebrc sometag rightanglebrc stuff leftanglebrc /sometag rightanglebrc "};/.*/ { if ( A == 1) print $0};/ leftanglebrc \/restApi rightanglebrc /{A=1};  file.xml
awk BEGIN {FIELDWIDTHS="10 10 10"}{if ($2 ~ /^\s*$/) $2 = "XXXXX     "; if ($3 ~ /^\s*$/) $3 = "XXXXX     "; $1=substr($1,1,4)0substr($1,6)}1 OFS= inputfile
awk BEGIN {FIELDWIDTHS="10 10 10"}{if ($2 ~ /^\s*$/) $2 = "XXXXX     "; if ($3 ~ /^\s*$/) $3 = "XXXXX     "}1 inputfile
awk BEGIN {FS = ";"; OFS=";"; } $1 ~ /^total/ { $3 = 0 } 1
awk BEGIN {FS = OFS = "@"} {$5 = $5; print} inputfile
awk BEGIN {FS="."};{print $2"."$1}
awk BEGIN {FS=";"}  $1 ~ /'$date'/ && $2 == '$area'{......}
awk BEGIN {FS="\n"; RS="-\n"}{for(i=1;i leftanglebrc =NF;i++) printf("%s   ",$i); if($1)print"-";} dict.txt
awk BEGIN {FS=OFS=","} {for (i=1; i leftanglebrc =NF; i++) $i/=10;}1 infile
awk BEGIN {FS=OFS="\t"; hd1=hd2=hd3=""} $1=="" {$1=hd1;$2=hd2;$3=hd3; print; next} {hd1=$1;hd2=$2;hd3=$3; print} yourfile
awk BEGIN {FS=OFS="\t"}{t=$44;gsub("-"," ",t); print strftime("%d %b %Y", mktime(t" 00 00 00")),$44} test.txt
awk BEGIN {OFS = "\t"} {for (n = 11; n  leftanglebrc  18; n++) {split($n, arr, ":"); $n = arr leftsquarebrc 5 rightsquarebrc }; print $0}
awk BEGIN {OFS = FS = ","} {a leftsquarebrc $1 rightsquarebrc  = $2; ind leftsquarebrc j++ rightsquarebrc  = $1} $2  rightanglebrc  max {max=$2} END {n = asort(ind); for (i=1; i leftanglebrc =n; i++) print ind leftsquarebrc i rightsquarebrc , a leftsquarebrc ind leftsquarebrc i rightsquarebrc  rightsquarebrc /max} inputfile
awk BEGIN {OFS = FS = ","} {a leftsquarebrc $1 rightsquarebrc  = $2} $2  rightanglebrc  max {max=$2} END {for (w in a) print w, a leftsquarebrc w rightsquarebrc /max} inputfile
awk BEGIN {OFS=FS="\t"} {gsub(/\./,"",$4);gsub(/\./,"",$5)}1 input
awk BEGIN {ORS=""};!/ leftsquarebrc 1-2 rightsquarebrc  leftsquarebrc 1-9 rightsquarebrc / {print} / leftsquarebrc 1-2 rightsquarebrc  leftsquarebrc 1-9 rightsquarebrc /{printf("\n%s",$0)} tempFile.txt
awk BEGIN {RS = "$"} { ... }
awk BEGIN {RS=" leftsquarebrc .!? rightsquarebrc  *"} {print}
awk BEGIN {RS=""; FS="\n"; ORS="\n\n"} $2 !~ /New Code\?/
awk BEGIN {RS="";FS="\n"} $1=="degree1" {c1++; print $0  rightanglebrc $1 "-" c1} $1=="degree2" {c2++; print $0  rightanglebrc $1 "-" c2} query.txt
awk BEGIN {RS="";FS="\n"} /^degree1\n/ {c++; print $0  rightanglebrc "output-" c} query.txt
awk BEGIN {RS="----- rightanglebrc "} ! /5\. select \* from mytable/ { printf("%s %s",RS,$0)} INPUT_FILE
awk BEGIN {RS="----- rightanglebrc "} /5\. select \* from mytable/ { printf("%s %s",RS,$0)} INPUT_FILE
awk BEGIN {RS="omg"; ORS=""} {print $0""++i} file
awk BEGIN {a="2012-03-16"; "date +%s -d "a | getline; print $0}
awk BEGIN {acnt=0; bcnt=0;} /a/ {acnt++;} /b/ {bcnt++} END { if (acnt  rightanglebrc  0 && bcnt  rightanglebrc  0) print "Matches"; } $FILE
awk BEGIN {notThis=0} / leftanglebrc not-this rightanglebrc / {notThis=1} / leftanglebrc \/not-this rightanglebrc / {notThis=0} / leftanglebrc this rightanglebrc .* leftanglebrc \/this rightanglebrc / {if (notThis==0) print} input.txt
awk BEGIN {nout=1;} /^ leftanglebrc \/endxml rightanglebrc $/ {close("xml"nout".xml"); ++nout;} !/^ leftanglebrc \/endxml rightanglebrc $/ {print  rightanglebrc ("xml"nout".xml");}
awk BEGIN {now=systime()} {then=strtonum(gensub(/\ leftsquarebrc |\ rightsquarebrc /,"","g",$1)); if(now-86400 leftanglebrc =then) print}
awk BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0; print FILENAME} else {if((prev+1)==NR) {print NR-1 ":" line;print NR ":" $0}; prev=NR; line=$0}} file-a
awk BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0} else {if((prev+1)==NR) {print FILENAME ":" NR-1 ":" line;print FILENAME ":" NR ":" $0}; prev=NR; line=$0}} file-a
awk BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0} else {if((prev+1)==NR) {print FILENAME ":" NR-1;print FILENAME ":" NR}; prev=NR; line=$0}} file-a
awk BEGIN {prev=0} /&abcdef/ {if(prev==0) {prev=NR;line=$0} else {if((prev+1)==NR) {print line;print $0}; prev=NR; line=$0}} file-a
awk BEGIN {print " leftsquarebrc table rightsquarebrc ";ORS=""; print " leftsquarebrc tr rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc # leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc Position leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc Nickname leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc Region leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc Level leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc Kills leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc Deaths leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc td rightsquarebrc  leftsquarebrc b rightsquarebrc KD/R leftsquarebrc /b rightsquarebrc  leftsquarebrc /td rightsquarebrc  leftsquarebrc /tr rightsquarebrc "} {for(i=0;i leftanglebrc 8;i++){gsub(/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc $|^ leftsquarebrc  \t rightsquarebrc +|\/img\/flags\/|-Flag-48.png/,"",$0);arr leftsquarebrc i rightsquarebrc =" leftsquarebrc td rightsquarebrc "$0" leftsquarebrc /td rightsquarebrc ";getline;} print "\n leftsquarebrc tr rightsquarebrc "; for(i in arr) print arr leftsquarebrc i rightsquarebrc ; print " leftsquarebrc /tr rightsquarebrc ";} END{print "\n leftsquarebrc /table rightsquarebrc ";} input.txt
awk BEGIN {print "GB FREE\n--------"} NR rightanglebrc 2{print $4} INPUT_FILE
awk BEGIN {print "Name\t\tAge"}  FNR == 5 {print "Name: "$3"\tAge: "$2}
awk BEGIN {srand()} !/^$/ { if (rand()  leftanglebrc = .01 || FNR==1) print $0}
awk BEGIN {srand()} !/^$/ { if (rand()  leftanglebrc = .01) print $0}
awk BEGIN {srand()} {match($0, /cn= leftsquarebrc ^, rightsquarebrc *,/); n = split(substr($0, RSTART+3, RLENGTH-4), a, ""); for (i = 1; i  leftanglebrc = n; i++) {if (a leftsquarebrc i rightsquarebrc  ~ / leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc /) {new = new int(rand() * 10)} else {new = new sprintf("%c", int(rand() * 26 + 97))}}; print substr($0, 1, RSTART+2) new substr($0, RSTART+RLENGTH-1)}
awk BEGIN {while ((getline  leftanglebrc  "file")  rightanglebrc  0) { a leftsquarebrc $0 rightsquarebrc ++; if(a leftsquarebrc $0 rightsquarebrc  == 2) print; if (a leftsquarebrc $0 rightsquarebrc   rightanglebrc = 2) print }}
awk BEGIN{ FS=" " } { cnt leftsquarebrc $2 rightsquarebrc  += $3; lincnt leftsquarebrc $2 rightsquarebrc  +=1;  } END{i=1; for (x in cnt){print i++, x, (cnt leftsquarebrc x rightsquarebrc  /lincnt leftsquarebrc x rightsquarebrc  )  } } file
awk BEGIN{ FS="- leftsquarebrc 0-9 rightsquarebrc +" } {print $1} yourfile
awk BEGIN{ FS="INDEX | ON "}{gsub(/ leftsquarebrc  ( rightsquarebrc .*/,"",$3); print $2", " $3} test.dat
awk BEGIN{ OFS=FS="|";} NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next} $1 in a { print a leftsquarebrc $1 rightsquarebrc ,$0 } file1 file2
awk BEGIN{ OFS=FS="|";} NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next} $1 in a { print a leftsquarebrc $1 rightsquarebrc ,$1,$2 } file1 file2
awk BEGIN{ ORS = ""; RS = " rightanglebrc "; FS="\n" } $1 == "pattern" { print " rightanglebrc " $0 } file
awk BEGIN{ fmt = "| %s | %s | %s | %s |\n"; printf fmt,  "Date", "Event", "Days Until", "~Weeks" } { match($0,/.* in /); printf fmt, $1, substr($0,12,RLENGTH-15), $(NF-4), $(NF-1) } file
awk BEGIN{ hits=0; misses=0; }/^hit/{ hits+=$NF}; /^misses/{misses=$NF}; END {print "Hits: " hits "\nMisses: " misses } txtfile
awk BEGIN{ system("find . -type f -not -name \".\"") }
awk BEGIN{ while ( (getline var  leftanglebrc  ARGV leftsquarebrc 1 rightsquarebrc   rightanglebrc  0) ) nr++; print nr } file
awk BEGIN{A leftsquarebrc 0 rightsquarebrc ="aaa";A leftsquarebrc 1 rightsquarebrc ="bbb"}{ print $1, A leftsquarebrc $1 rightsquarebrc  } abc.txt
awk BEGIN{FIELDWIDTHS = "10 18 13 11"}{printf "| %s | %s | %s |\n", $1,$3,$4} $device
awk BEGIN{FIELDWIDTHS="14 8 6 6 6 8 6 8 6 8 200"}{print $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11} $TMPFILE
awk BEGIN{FPAT="\\s*\\S*\\s*";OFS=""} {sub("\\S*","bar",$2)}1 file
awk BEGIN{FS = ","}{print $1, $8, $10}
awk BEGIN{FS=""; OFS=""}{if ($25$26 == "07") {$25="0"; $26="8"}{print}}
awk BEGIN{FS=","; OFS=""} ... file
awk BEGIN{FS=","; OFS=","} {$25=$22; print}
awk BEGIN{FS=","} $3 !~ /^synonymous/ fileCSV.csv
awk BEGIN{FS="/"} {print $NF} file.txt
awk BEGIN{FS=";"} {for(i=1;i leftanglebrc NF;i++) if (i leftanglebrc 26) printf $i FS}{print $26} file
awk BEGIN{FS="="; OFS=" - "; desc=""}function display(){print dev, desc, flags}/Device/{if(desc!="") display(); desc=""; flags=""; dev=$0; gsub("Dev.*PLAY", "Display ", dev)}/Desc/{desc=$2}/Flags/{flags=$2}END{display}
awk BEGIN{FS="\""}{print $2}
awk BEGIN{FS="\\ leftanglebrc blue\\ rightanglebrc "; OFS="blue"}{$1=""}7 file
awk BEGIN{FS="\n"; RS=""} $2~/country.*MO/ && $1~/SMS-MO-FSM/  file
awk BEGIN{FS="from|FROM|where|WHERE"} /from|FROM/ {print $2}
awk BEGIN{FS="}+|{+| "} {for(i=1;i leftanglebrc =NF;i++) if($i ~ " leftsquarebrc 0-9 rightsquarebrc ")print $i} file.txt
awk BEGIN{FS=OFS="%"}{sub(/^ */,"",$2);$2=sprintf("%-8s",$2); print}
awk BEGIN{FS=OFS=","} FNR==NR {a leftsquarebrc $1 rightsquarebrc =$0; next} $2 in a{print $0, a leftsquarebrc $2 rightsquarebrc } f22.txt f11.txt
awk BEGIN{FS=OFS=","} {gsub(/^ leftsquarebrc  \t rightsquarebrc +| leftsquarebrc  \t rightsquarebrc +$/, "", $2)}1 infile
awk BEGIN{FS=OFS=","} {if ($2 rightanglebrc 0) $2="-"$2; else sub("-", "", $2)}1 file
awk BEGIN{FS=OFS=","}{$NF=($NF rightanglebrc 10?$NF+1:$NF)}1 file
awk BEGIN{FS=OFS=","}{gsub(/\"/,"");gsub(/ leftsquarebrc ^,\r rightsquarebrc +/,"\"&\"")}1
awk BEGIN{FS=OFS=","}{gsub(/^ leftsquarebrc  \t rightsquarebrc +/,"",$2);gsub(/ leftsquarebrc  \t rightsquarebrc +$/,"",$2)}1 input.txt
awk BEGIN{FS=OFS=","}{sub(" leftsquarebrc ^. rightsquarebrc *.","",$3);print}
awk BEGIN{FS=OFS="."} NR==1{++$NF}1 file
awk BEGIN{FS=OFS="."} NR==1{++$NF}1 file mv tmp_file file
awk BEGIN{FS=OFS="."} {$4=$4+4; print} input
awk BEGIN{FS=OFS="."} {$4=$4+4; print} input read line echo hello world
awk BEGIN{FS=OFS="/"} {print $6, $7} input_file.txt
awk BEGIN{FS=OFS=":"} {if (NR==1) {$3 = "XXXX"}; print} input_file
awk BEGIN{FS=OFS=":"}NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next}{$2=a leftsquarebrc $2 rightsquarebrc }1 city.txt user.txt
awk BEGIN{FS=OFS=":"}{$NF=($NF~/abc/)?"def":$NF}1 your_file
awk BEGIN{FS=OFS=":"}{for(i=1;i leftanglebrc =NF;i++)if(i==5 && $i=="abc"){$i="def"}}1 your_file
awk BEGIN{FS=OFS=":"}{for(i=1;i leftanglebrc =NF;i++)if(i==5){$i="def"}}1 your_file
awk BEGIN{FS=OFS="\""} {for (i=1;i leftanglebrc NF;i+=2) gsub(/ /,";",$i)} 1 file
awk BEGIN{FS=OFS="\""}{for(i=1;i leftanglebrc =NF;i++)if($i~/ leftsquarebrc 0-9\. rightsquarebrc */)gsub("\\.",",",$i)}1 file
awk BEGIN{FS=OFS="\",\""}$5=="credit"{$4="+"$4}$5=="debit"{$4="-"$4}1 file.csv
awk BEGIN{FS=OFS="\t"} {sub("\.", $3, $2)}1 file
awk BEGIN{FS=OFS="\t"}NR==FNR{ids leftsquarebrc $1 rightsquarebrc ++;next}!($1 in ids) idFile tabFile
awk BEGIN{FS=OFS="\t"}{$1=$2=$3="";print} file
awk BEGIN{FS=OFS="\t"}{print $4,$5,$6} file
awk BEGIN{FS=OFS="\t"}{split($2,a,"_"); $2=a leftsquarebrc 1 rightsquarebrc "_"a leftsquarebrc 2 rightsquarebrc "\t"a leftsquarebrc 3 rightsquarebrc  }1 file
awk BEGIN{FS=OFS="_"}$NF==$(NF-1){--NF;$1=$1}1 test.in
awk BEGIN{FS=OFS="|"} NF!=20{print "not enough fields"; exit} !($1~/^ leftsquarebrc 0-9 rightsquarebrc $/) {print "1st field invalid"; exit} file.csv
awk BEGIN{FS=OFS="|"} NF==20 && $1~/^ leftsquarebrc 0-9 rightsquarebrc $/ && $2~/^ leftsquarebrc a-z rightsquarebrc {2,4}$/ && $3~/^ leftsquarebrc YN rightsquarebrc $/ file.csv
awk BEGIN{FS=OFS="|"} {t=$1; $1=$2; $2=t; print}  input_file
awk BEGIN{FS=OFS="|"}/^B/{$3="QQQ"$3}1
awk BEGIN{FS=OFS="|"}/^B/{$3="QQQ"}1
awk BEGIN{FS=OFS="|"}NR==FNR{a leftsquarebrc $1 rightsquarebrc =$3;next}$5 in a{$7=a leftsquarebrc $5 rightsquarebrc }1 file1 file2
awk BEGIN{FS=OFS=,} {$2=$(NF-1); NF=NF-3;sub(/$/,r);}1 sample.csv NF-1
awk BEGIN{FS=OFS=- } NF rightanglebrc 1{$1=;sub(/^- */, )}1 inFIle
awk BEGIN{FS=OFS=/} {$NF=}1 file
awk BEGIN{IGNORECASE = 1} f; /some_word leftanglebrc \/div rightanglebrc / {f=1}
awk BEGIN{OFMT="%.16f";print rand()}
awk BEGIN{OFS = ","; FS = ";"} {$1 = $1; print $0, FILENAME} *.csv
awk BEGIN{OFS = ","; FS = ";"} {$1 = $1; split(FILENAME, a, "_"); print $0, a leftsquarebrc 1 rightsquarebrc } *.csv
awk BEGIN{OFS = FS = ";"} {print $0, FILENAME} *.csv
awk BEGIN{OFS=" ";} NR==1 { print; next } { v = ($2 == a) ? (($3 == b) ? "0" : "1") : "0"; } v == "1" && reprice leftsquarebrc $2 rightsquarebrc  { v = "0"; } { print $0, v; a = $2; b = $3 } v == "1" {reprice leftsquarebrc $2 rightsquarebrc  = 1} testv1.txt
awk BEGIN{OFS=" "}NF rightanglebrc 1{t=$1;$1="";printf "%-13s%s\n",t,$0}
awk BEGIN{OFS="/"} NR%4==1{$2=$2*1}1 file
awk BEGIN{OFS="\t";} {print $1,$3,$5} infile
awk BEGIN{OFS="\t"} NR==1{print;next}{if ($4==0) {print $0, "inf"} else {print $0, ($3/$4)/log(2)}} file
awk BEGIN{OFS='\t'} {print $2, $1}
awk BEGIN{OFS=FS="\t"} $2=FS$2 file
awk BEGIN{OFS=FS="\t"}{gsub(/^999$/, "XXX", $3); print} OFS=t test.txt
awk BEGIN{ORS="";} NR==1 { print; next; } /^ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc / { print "\n"; print; next; } { print; }
awk BEGIN{ORS=":";RS=" leftsquarebrc :\n rightsquarebrc "}!a leftsquarebrc $0 rightsquarebrc ++
awk BEGIN{RS=" leftanglebrc  leftanglebrc  leftanglebrc  leftanglebrc  leftanglebrc  leftanglebrc o01o rightanglebrc  rightanglebrc  rightanglebrc  rightanglebrc  rightanglebrc  rightanglebrc ";FS="\n"} /CLAUSEID/{system("banner " substr($2,10)); for(i=8;i leftanglebrc NF;i++) if(i==8) print substr($i,8);else print $i; system("read i;clear")} autocontract.txt
awk BEGIN{RS=" leftanglebrc  leftanglebrc  leftanglebrc  leftanglebrc  leftanglebrc  leftanglebrc o01o rightanglebrc  rightanglebrc  rightanglebrc  rightanglebrc  rightanglebrc  rightanglebrc ";FS="\n"} /CLAUSEID/{system("banner " substr($2,10)); for(i=8;i leftanglebrc NF;i++) print $i; system("read i;clear")} auto_contract_data1.txt
awk BEGIN{RS=""; FS="\n"; } { for (i=1;i leftanglebrc =NF;i++){ printf "%s ", $i; };printf "\n";}  test4.txt
awk BEGIN{RS="";FS="\n";OFS=","}{$1=$1}7 file
awk BEGIN{RS="";FS="\n";OFS=","}{print $1,$2} file
awk BEGIN{RS=""} {for (i=NF-l-p-1;i leftanglebrc NF-p-1;i++) printf $i" "; print ""} p=3 l=1159 file1.txt sed s/..\{47\}/&\n/g
awk BEGIN{RS=""} {for (i=NF-p-1;i leftanglebrc NF-1;i++) printf $i" "; print ""} p=1 file.txt sed s/..\{47\}/&\n/g
awk BEGIN{RS="---+\n";a leftsquarebrc "pvid" rightsquarebrc ;a leftsquarebrc "reserve_policy" rightsquarebrc ;a leftsquarebrc "ww_name" rightsquarebrc }{printf "%s",$3;for(i=1;i leftanglebrc =NF;i++)if($i in a)printf " %s", $(i+1);print ""} file
awk BEGIN{RS=";"} NR==2{print $0} yourfile.sql
awk BEGIN{RS="@"} NR==2{print $6} $SOAfile
awk BEGIN{RS="\042"}{} file
awk BEGIN{RS="\xFF"}{print $1, $2, $3, $4, $5, $6} file
awk BEGIN{RS="dob=";OFS="\n\n"}$1~/Customer1/{$0=$0"dob=1234";print} input
awk BEGIN{for(i=2;i in ARGV;++i){j=ARGV leftsquarebrc i rightsquarebrc ;users leftsquarebrc j rightsquarebrc =1;ARGV leftsquarebrc i rightsquarebrc ="";}}$N in users{print $4,$7,$14} /var/log/xferlog ${userdirs leftsquarebrc @ rightsquarebrc }
awk BEGIN{getline to_add  leftanglebrc  "f3"}{print $0,to_add} f
awk BEGIN{i=1}{if($0~/#0/){print $0"/"i;if(i==1)i=2;else i=1;}else {print}} your_file
awk BEGIN{line=0;}/,,/{line=0;}!/,,/{a leftsquarebrc line++ rightsquarebrc =a leftsquarebrc line rightsquarebrc " "$0;}END{for (i in a ) print a leftsquarebrc i rightsquarebrc } datafile
awk BEGIN{print "FD1"  rightanglebrc "/dev/fd/1" ; print "FD6"  rightanglebrc "/dev/fd/6" }
awk BEGIN{print "WAM"}/\ leftanglebrc WAM\ rightanglebrc /{print $1} /home/santosh/messages
awk BEGIN{print "host_name,hostgroups,check_interval"}/host_name/{v1=$2} /hostgroups/{v2=$2} /check_interval/{v3=$2} /}/{print v1","v2","v3; v1=v2=v3=""} file
awk BEGIN{print $sum / $subjects}
awk BEGIN{print ($x~/^ leftsquarebrc A-L rightsquarebrc /)?"YES":"NO"}
awk BEGIN{print 0.5*2}
awk BEGIN{print ARGV leftsquarebrc 1 rightsquarebrc } file
awk BEGIN{printf("%.16f", rand())}
awk BEGIN{rs=RS;RS=FS} {last=$0} END{if (last ~ rs"$") print "found RS"} file
awk BEGIN{s=0}/^of_interest /{s=1}/^)$/{if(s==1){print};s=0}{if(s==1)print}
awk BEGIN{s=substr($x,1,1);print (s rightanglebrc ="A"&&s leftanglebrc ="L")?"YES":"NO"}
awk BEGIN{seek=0} $3=="A" && $4==seek {print; seek +=1; if (seek rightanglebrc 5) seek=0} file.txt
awk BEGIN{split("23 17 21 1",tmp); for (i in tmp) arr leftsquarebrc tmp leftsquarebrc i rightsquarebrc  rightsquarebrc } $2 in arr file
awk BEGIN{split("4 6 3 2 7 1 5",n)} {a leftsquarebrc NR rightsquarebrc =$0} END{for(i=1;i in n;i++) print a leftsquarebrc n leftsquarebrc i rightsquarebrc  rightsquarebrc } file.txt
awk BEGIN{split("5 6 7",a," ")}{t=$0;sub(/.$/,a leftsquarebrc ++i rightsquarebrc ,$2);$0=t RS $0}1 FS=" OFS=" /tmp/MC/Cell_F1
awk BEGIN{srand();R=rand()}{print $0, R}
awk BEGIN{v="variable_name";V=toupper(v); FS=OFS=" : "} $1~"^"v{$2=($2~"^"V)?V"myValue":"myValue"}1 file
awk BEGIN{v=4}{now=(NR-1)%v; STOR leftsquarebrc now rightsquarebrc  = STOR leftsquarebrc now rightsquarebrc  "\n" $0;} END {for (v in STOR) print STOR leftsquarebrc v rightsquarebrc }
awk BEGIN{v=4}{now=(NR-1)%v; STOR leftsquarebrc now rightsquarebrc  = STOR leftsquarebrc now rightsquarebrc  "\n" $0;} END {for (v in STOR) print substr(STOR leftsquarebrc v rightsquarebrc ,2)}
awk BEGIN{while(a++ leftanglebrc 30)s=s " "} {print substr($0, 1, 6) s substr($0, 7)} myfile
awk END {print $NF} file
awk END {print NR} a.txt
awk END {print NR} inputfile
awk END {print x,"Total Matches"} $3~/0 leftsquarebrc 69 rightsquarebrc :/&&++x
awk END {print} RS= output.dat
awk END{if (NR rightanglebrc 2) {print}} FILE
awk END{print FNR} file
awk END{print NR} file
awk END{print NR} file1 file2
awk END{printf NR} file.log
awk FILENAME != "file.txt"{ a leftsquarebrc $1 rightsquarebrc =FILENAME; next } $1 in a { $3=a leftsquarebrc $1 rightsquarebrc ; sub(/\..*/,"",$3) }1 {A..E}.txt file.txt
awk FILENAME == "file1.txt" { print $1 } FILENAME == "file2.txt" { print $1 } FILENAME == "file3.txt" { print $1 } *.txt
awk FILENAME == ARGV leftsquarebrc 1 rightsquarebrc  { print $1 } FILENAME == ARGV leftsquarebrc 2 rightsquarebrc  { print $1 } FILENAME == ARGV leftsquarebrc 3 rightsquarebrc  { print $1 } file1.txt file2.txt file3.txt
awk FILENAME==ARGV leftsquarebrc 1 rightsquarebrc {a leftsquarebrc $0 rightsquarebrc ++;next}!($1 in a||$2 in a) file1 file2
awk FNR  rightanglebrc  24 file1 file2 sort -k -3 -, -3 -k -4 -, -4 -n
awk FNR  rightanglebrc  24 { print $0 | "sort -k3,3 -k4,4n" } file1 file2
awk FNR != NR { if(!tot) tot=NR-1; printf( "%s %.4f\n", $0, FNR/tot) } file file
awk FNR == 1 { print FILENAME } { printf "%02d %s\n", FNR - 1, $0 } infile
awk FNR == 2 {print}
awk FNR == 3 file1  leftsquarebrc file2 .. filen rightsquarebrc 
awk FNR == 5 {print $3}
awk FNR == NR { a leftsquarebrc $1 rightsquarebrc  = $2; next } { print $1,  a leftsquarebrc $1 rightsquarebrc , $2 } file2  leftanglebrc (sort -nr -k 2 file1) sort -n -r -k 2 file1
awk FNR == NR { a leftsquarebrc $1 rightsquarebrc  = $2; next } { print $1,  a leftsquarebrc $1 rightsquarebrc , $2 } file2 file1
awk FNR == NR { a leftsquarebrc $1 rightsquarebrc  = $2; next } { t = $1; sub(/_.*$/, "", t); printf "%s\t%s\n", $1, a leftsquarebrc t rightsquarebrc  } file1 file2
awk FNR == NR { f2 leftsquarebrc  $1  rightsquarebrc  = 1; next } FNR  leftanglebrc  NR { print (($1 in f2) ? 1 : 0)  rightanglebrc "output" } file2 file1
awk FNR == NR { h leftsquarebrc $1 rightsquarebrc  = 1; next } !h leftsquarebrc $1 rightsquarebrc  file2 file1
awk FNR == NR { tot=NR; next } { printf( "%s %.4f\n", $0, FNR/tot) } file file
awk FNR == NR {arr leftsquarebrc $1 rightsquarebrc  = $2 " " $3; next} {print; for (lookup in arr) {if ($0 ~ lookup) {split(arr leftsquarebrc lookup rightsquarebrc , a); print "Here I want to add " a leftsquarebrc 1 rightsquarebrc  " and " a leftsquarebrc 2 rightsquarebrc }}} File1 File2
awk FNR == NR {keys leftsquarebrc $1 rightsquarebrc ; next} $3 in keys || $6 in keys fileB fileA
awk FNR leftanglebrc =5 file
awk FNR leftanglebrc =8192{ print $2 } *.tst
awk FNR rightanglebrc 5 inputfile
awk FNR==1 && NR!=1 {print "END"} /START/,/END/{if (!/START/&&!/END/) print} END {print "END"} test*.txt
awk FNR==1 {if (/^#/) {print;getline};print "#"$0;next} 1 file
awk FNR==1 {print " rightanglebrc "FILENAME} f+1==$0 {a++} f+1!=$0 {if (a rightanglebrc 1) {for (i=f-a;i leftanglebrc =f;i++) print i}a=0} {f=$0} *
awk FNR==1{a+=$2;next}{b+=$2;close(FILENAME);nextfile}END{print a,b} diffusion*
awk FNR==1{if(s!=0)print s/c; s=0;c=0}{s+=$7;c++}END{print s/c} c*
awk FNR==1{p=0} $1=="ice" && $2=="cream" && !p {print FILENAME;p=1} file1 file2 file3
awk FNR==1{print ""}1 *.txt
awk FNR==1{print FILENAME} $2 rightanglebrc 20{print "    ",$1} file1 file2
awk FNR==1{r=0;w=0;lasttime=$1} $1!=lasttime{print lasttime,"Read: ",r, "Write: ",w;r=0;w=0;lasttime=$1} /write\(/{w++} /read\(/{r++} file
awk FNR==52 Files*
awk FNR==52 {print; nextfile} Files*
awk FNR==NR && /^0/{a leftsquarebrc FNR rightsquarebrc } NR rightanglebrc FNR && (!(FNR in a)) inputfile anotherfile
awk FNR==NR && /regex2/ { var = $1; next } /regex1/ { print var } file.txt{,}
awk FNR==NR { a leftsquarebrc  "\\ leftsquarebrc  " $1 " \\ rightsquarebrc "  rightsquarebrc ; next } /^\ leftsquarebrc / { f=0 } { for (i in a) if ($0 ~ i) f=1 } f file1 file2
awk FNR==NR { a leftsquarebrc $0 rightsquarebrc ; next } $0 in a file2 file1
awk FNR==NR { a leftsquarebrc $1 rightsquarebrc ; next } !($1 in a) file2 file1
awk FNR==NR { a leftsquarebrc $1 rightsquarebrc ; next } $1 in a file2 file1
awk FNR==NR { a leftsquarebrc $1 rightsquarebrc ; next } $2 in a file1 file2
awk FNR==NR { a leftsquarebrc $1 rightsquarebrc =$0; next } $1 in a { print a leftsquarebrc $1 rightsquarebrc  } table list
awk FNR==NR { a leftsquarebrc $1 rightsquarebrc =$0; next } $1 in a { print a leftsquarebrc $1 rightsquarebrc  } table list column -t
awk FNR==NR { a leftsquarebrc $1 rightsquarebrc =$2; next } FNR==1 { for (i in a) b leftsquarebrc i rightsquarebrc =a leftsquarebrc i rightsquarebrc  } { for (j in b) if ($0 ~ j && b leftsquarebrc j rightsquarebrc --  rightanglebrc  0) print  rightanglebrc  FILENAME ".out" } values.file $(find . -type f -regex ".*\.\(txt\|doc\)$") find . -type f -regex .*.(txt|doc)$
awk FNR==NR { a leftsquarebrc $NF rightsquarebrc ; next } !($NF in a) other main
awk FNR==NR { a leftsquarebrc $NF rightsquarebrc ; next } $NF in a other main
awk FNR==NR { a leftsquarebrc $NF rightsquarebrc ; next } { print  rightanglebrc  ($NF in a ? "deleted" : "present") } other main
awk FNR==NR { a leftsquarebrc NR rightsquarebrc =$0; next } { for (i=FNR+1;i leftanglebrc =NR-1;i++) { split(a leftsquarebrc i rightsquarebrc ,b); print $1 "-" b leftsquarebrc 1 rightsquarebrc , sqrt(($2-b leftsquarebrc 2 rightsquarebrc )^2 + ($3-b leftsquarebrc 3 rightsquarebrc )^2 + ($4-b leftsquarebrc 4 rightsquarebrc )^2) | "column -t  rightanglebrc  /path/to/folder/" FILENAME } NR--} $i{,}
awk FNR==NR { a leftsquarebrc NR rightsquarebrc =$0; next } { for (i=FNR+1;i leftanglebrc =NR-1;i++) { split(a leftsquarebrc i rightsquarebrc ,b); print $1 "-" b leftsquarebrc 1 rightsquarebrc , sqrt(($2-b leftsquarebrc 2 rightsquarebrc )^2 + ($3-b leftsquarebrc 3 rightsquarebrc )^2 + ($4-b leftsquarebrc 4 rightsquarebrc )^2) | "column -t" } NR--} file file
awk FNR==NR { array leftsquarebrc $0 rightsquarebrc ++; next } { line = $4; sub(/\. leftsquarebrc 0-9 rightsquarebrc +$/, "", line); if (line in array) print } fileB.txt fileA.txt
awk FNR==NR { array leftsquarebrc $1 rightsquarebrc ++; next } { for (i=1; i leftanglebrc =NF; i++) if ($i in array) print $0 } dict file
awk FNR==NR { array leftsquarebrc $1 rightsquarebrc =$2; next } { if ($1 in array) print $1, array leftsquarebrc $1 rightsquarebrc  - $2  rightanglebrc  "A3/f1.txt" } ~/A1/f1.txt ~/A2/f1.txt
awk FNR==NR { array leftsquarebrc $1,$2 rightsquarebrc =$8; next } ($1,$2) in array { print $0 ";" array leftsquarebrc $1,$2 rightsquarebrc  } input1 input2
awk FNR==NR { array leftsquarebrc $2 rightsquarebrc =$6; next } { if ($2 in array) print $2, array leftsquarebrc $2 rightsquarebrc  - $6  rightanglebrc  "A3/f1.txt" } ~/A1/f1.txt ~/A2/f1.txt
awk FNR==NR { c++; next } FNR==2 { x = substr($NF,0,8) } FNR==c-1 { sub(/ leftsquarebrc ^, rightsquarebrc */,x); sub(/..$/,""); print } file file
awk FNR==NR { for (i=$2-4;i leftanglebrc $2+5;i++) a leftsquarebrc i rightsquarebrc ; next } $4 in a { b leftsquarebrc $10,$4 rightsquarebrc  } END { print length b } LISTFILE INFILE
awk FNR==NR { for (i=1;i leftanglebrc =NF;i++) if ($i != "NA") a leftsquarebrc $i rightsquarebrc ++; next } { for (j=1;j leftanglebrc =NF;j++) if ($j in a) next }1 file1 file2
awk FNR==NR { for(i=1;i leftanglebrc =NF;i++) a leftsquarebrc NR rightsquarebrc  leftsquarebrc i rightsquarebrc =$i; next } { for(j=1;j leftanglebrc =NF;j++) $j = $j * a leftsquarebrc FNR rightsquarebrc  leftsquarebrc j rightsquarebrc  }1 file1 file2
awk FNR==NR { split($5,a,":"); split($6,b,":"); c leftsquarebrc $1,$2,a leftsquarebrc 1 rightsquarebrc ,b leftsquarebrc 1 rightsquarebrc  rightsquarebrc ="REF=" a leftsquarebrc 2 rightsquarebrc  ";ALT=" b leftsquarebrc 2 rightsquarebrc  ";"; next } ($1,$2,$4,$5) in c { print $0 ";" c leftsquarebrc $1,$2,$4,$5 rightsquarebrc  }  leftanglebrc (gzip -dc input1.gz)  leftanglebrc (gzip -dc input2.gz) gzip -d -c input1.gz gzip -d -c input2.gz gzip
awk FNR==NR { split($5,a,":"); split($6,b,":"); c leftsquarebrc $1,$2,a leftsquarebrc 1 rightsquarebrc ,b leftsquarebrc 1 rightsquarebrc  rightsquarebrc ="REF=" a leftsquarebrc 2 rightsquarebrc  ";ALT=" b leftsquarebrc 2 rightsquarebrc  ";"; next } ($1,$2,$4,$5) in c { print $0 ";" c leftsquarebrc $1,$2,$4,$5 rightsquarebrc  } input1 input2
awk FNR==NR { split($5,a,":"); split($6,b,":"); c leftsquarebrc $1,$2,a leftsquarebrc 1 rightsquarebrc ,b leftsquarebrc 1 rightsquarebrc  rightsquarebrc ="REF=" a leftsquarebrc 2 rightsquarebrc  ";ALT=" b leftsquarebrc 2 rightsquarebrc  ";"; next } ($1,$2,$4,$5) in c { print $1, $2, $3, $4, $5, $6, $7, c leftsquarebrc $1,$2,$4,$5 rightsquarebrc  $8 ";" } file1 file2
awk FNR==NR { split($NF,a,":"); b leftsquarebrc $1,$2 rightsquarebrc =a leftsquarebrc 2 rightsquarebrc ; next } ($1,$2) in b { print $0 ";ASNE=" b leftsquarebrc $1,$2 rightsquarebrc  }  leftanglebrc (gzip -dc input1.vcf.gz)  leftanglebrc (gzip -dc input2.vcf.gz) gzip -d -c input1.vcf.gz gzip -d -c input2.vcf.gz gzip
awk FNR==NR { split($NF,a,":"); b leftsquarebrc $1,$2 rightsquarebrc =a leftsquarebrc 2 rightsquarebrc ; next } ($1,$2) in b { print $0 ";ASNE=" b leftsquarebrc $1,$2 rightsquarebrc  } input1.vcf input2.vcf
awk FNR==NR { two leftsquarebrc $0 rightsquarebrc ++; next } { for (i in two) { split(i, one); if (one leftsquarebrc 3 rightsquarebrc  == $NF) print $1,$2,$3,$4, i, one leftsquarebrc 2 rightsquarebrc  } } file2 file1
awk FNR==NR {a leftsquarebrc $1 FS $2 rightsquarebrc ++; next} a leftsquarebrc $1 FS $2 rightsquarebrc  file1 file2
awk FNR==NR {a leftsquarebrc $1 rightsquarebrc ;next} {for (i in a) if (index($0, i)==1) print} file2 file1
awk FNR==NR {a leftsquarebrc $1 rightsquarebrc =$0;next} a leftsquarebrc $1 rightsquarebrc  {$0=a leftsquarebrc $1 rightsquarebrc }1 file2 file1
awk FNR==NR {a leftsquarebrc $1 rightsquarebrc =$2;next} a leftsquarebrc $1 rightsquarebrc {$1=a leftsquarebrc $1 rightsquarebrc }1 OFS=t subfile file
awk FNR==NR {a leftsquarebrc NR rightsquarebrc =$3;next} FNR%2==0 {$3=a leftsquarebrc FNR rightsquarebrc }1 firstfile secondfile
awk FNR==NR {a leftsquarebrc NR rightsquarebrc =$3;next} FNR%2==0 {$3=a leftsquarebrc FNR rightsquarebrc }1 firstfile secondfile mv tmp secondfile
awk FNR==NR {if(length($0)==32)p = substr($0,12,18);if(/Invnum.*/)A leftsquarebrc p rightsquarebrc =substr($0,7);next}((s=substr($1,1,18)) in A){ print $1 A leftsquarebrc s rightsquarebrc  } file2 file1.txt
awk FNR==NR {keys leftsquarebrc FNR rightsquarebrc =$2; cnt=FNR} {x leftsquarebrc $2 rightsquarebrc  += $3} END {for(i=1; i leftanglebrc =cnt; ++i) print keys leftsquarebrc i rightsquarebrc ,x leftsquarebrc keys leftsquarebrc i rightsquarebrc  rightsquarebrc } freqdat044.dat freqdat045.dat freqdat046.dat freqdat047.dat freqdat049.dat freqdat050.dat
awk FNR==NR {something; next} {other things} file1 file2
awk FNR==NR {x2 leftsquarebrc $1 rightsquarebrc  = $0; next} $1 in x2 {print x2 leftsquarebrc $1 rightsquarebrc } second first
awk FNR==NR {x2 leftsquarebrc $1 rightsquarebrc  = $0; next} $1 in x2 {print x2 leftsquarebrc $1 rightsquarebrc } second first
awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ++;next}a leftsquarebrc $0 rightsquarebrc  file1 file2
awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next} $0 in a  leftanglebrc (awk 'FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next} $0 in a' f1 f2)  leftanglebrc (awk 'FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next} $0 in a' f3 f4) awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next} $0 in a f1 f2 awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next} $0 in a f3 f4
awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next}!($0 in a) file1 file2
awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next}!($0 in a) file1 file2
awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next}($0 in a) file2 file1
awk FNR==NR{a leftsquarebrc $0 rightsquarebrc ;next}($0 in a) file_1 file_2
awk FNR==NR{a leftsquarebrc $0 rightsquarebrc =1;next}a leftsquarebrc $0 rightsquarebrc --  rightanglebrc  0 file1 file2
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc ++;next}(a leftsquarebrc $1 rightsquarebrc   rightanglebrc  1) ./infile ./infile
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc ;next} ($1 in a){delete a leftsquarebrc $1 rightsquarebrc ; print $1} file1 file2
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc ;next} {for (i=1; i leftanglebrc =NF; i++) if ($i in a) print} A B
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc ;next}($1 in a) file1.txt file2.txt
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc ;next}{ for(i=1;i leftanglebrc =NF;i++){ if($i in a) {print $i} } }  file1 file2_wget
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc =$0;next} !($1 in a) {print $1, $4} file2 file1
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc =$2;next}(($1 in a) && a leftsquarebrc $1 rightsquarebrc --  rightanglebrc 0) filter.txt map.txt
awk FNR==NR{a leftsquarebrc $1 rightsquarebrc =$2;next}(($1 in a) && a leftsquarebrc $1 rightsquarebrc --  rightanglebrc 0){print} filter.txt map.txt
awk FNR==NR{a leftsquarebrc $2 rightsquarebrc =$3;next}{print $0,a leftsquarebrc $2 rightsquarebrc ?a leftsquarebrc $2 rightsquarebrc :"NA"} file2 file1
awk FNR==NR{a leftsquarebrc ++i rightsquarebrc =$0;next} {print a leftsquarebrc FNR rightsquarebrc  "\t" $0} a.txt b.txt
awk FNR==NR{a leftsquarebrc NR rightsquarebrc =$1;next}{$7=$7-a leftsquarebrc FNR rightsquarebrc ;print} avg.txt corr0.txt
awk FNR==NR{a leftsquarebrc NR rightsquarebrc =$3;next}{$2=a leftsquarebrc FNR rightsquarebrc }1 f2 f1
awk FNR==NR{dict leftsquarebrc $1 rightsquarebrc ; next}; $1 in dict file{1,2}.txt
awk FNR==NR{i leftsquarebrc $1 rightsquarebrc =1;next} i leftsquarebrc $1 rightsquarebrc {print} file1 file2
awk FNR==NR{if(NR%2)i=$0;else a leftsquarebrc i rightsquarebrc =$0;next;}{if($0 in a){print; print a leftsquarebrc $0 rightsquarebrc }else if ($0!~/someurl/) print} f2 f1
awk FNR==NR{if(NR%2)i=$0;else a leftsquarebrc i rightsquarebrc =$0;next;}{if($0 in a){print; print a leftsquarebrc $0 rightsquarebrc }else print} file2 file1
awk FNR==row { printf "%6.3f    ", $col } END { printf "\n" } row=2 col=2 file1 file2
awk NF  rightanglebrc  0 { print $1 "\t" ($3 - $2) } input.txt
awk NF  rightanglebrc  2 input_file
awk NF  rightanglebrc  3 { f = $NF } $1 ~ /^Rss/ && f ~ /\// { print f, $2 }
awk NF  rightanglebrc = 3 filename
awk NF  rightanglebrc = 8 { a leftsquarebrc ++i rightsquarebrc  = $0 } NF == 2 { a leftsquarebrc i rightsquarebrc  = a leftsquarebrc i rightsquarebrc  " " $2 } END { for (j = 1; j  leftanglebrc = i; ++j) print a leftsquarebrc j rightsquarebrc  } file
awk NF != 3 || !/\r$/ file
awk NF && !/^( rightanglebrc |END)/ && !/#.*/ file
awk NF == 7 $decoder
awk NF == 7 ./my/file.txt $decoder
awk NF INPUT_FILE
awk NF data.txt
awk NF data.txt
awk NF leftanglebrc 4{getline $(NF+1)}1 file
awk NF rightanglebrc 1 { for(i=2;i leftanglebrc =NF;i+=2) if ($i rightanglebrc 0.05) next }1 File_1.txt
awk NF rightanglebrc 1{print $1} file
awk NF rightanglebrc 2 file
awk NF rightanglebrc 3 ./infile
awk NF rightanglebrc 3 file
awk NF rightanglebrc 3{a=$1;b=$2;c=$3;$1=$1;print;next}NF leftanglebrc 3{d=$1;e=$2;print a,b,c,d,e;next}{$1=$1;}1 OFS=, file
awk NF rightanglebrc =3 file
awk NF { print $1 } your_input
awk NF==0&&s==0{NR=0}NR==1&&$1=="/*"{s=1}s==1{print $0}$NF=="*/"{s=2} test.c
awk NF==1 { print $0, "NULL"; next }1 file
awk NF==1{cmd=$1;next} NF==0{next} $1==cmd{printf "%s", $0; while (1) { if (! getline tmp) break; if(length(tmp)) printf " %s", tmp; else break;};print ""} test.txt
awk NF==2
awk NF==4
awk NF==4 input.txt
awk NF==4 {print  rightanglebrc  "OutputChr"$1".txt}
awk NF==4{count++} END {print count} file
awk NF==4{t=$NF;next}$0{print t,$4,$NF} file
awk NF==7&&/ROTATION/{if($7 leftanglebrc 0||$7 rightanglebrc 0.2)$7=0}1 file
awk NF=NF FS=\..+  test.txt
awk NF{$(NF-1)~/ leftsquarebrc a-zA-Z rightsquarebrc +/?count+=$NF:num+=$NF;count+=$(NF-1)}END{print "Count= "count" NUM= "num} inputFile
awk NF{i++} END { print i } Nameofpop_chr1_window1.txt
awk NF{print $0} ORS=nn
awk NR  rightanglebrc  1 && $2  leftanglebrc  p ...
awk NR  rightanglebrc  1 && $2  leftanglebrc  p { $2 = p } { p = $2 } 1 OFS=\t input-file
awk NR  rightanglebrc  1 && NF == 6 { if ($6 == "+") x = $4; else x = $5; print $1, $2, $3, x; }
awk NR  rightanglebrc  1 && max  leftanglebrc  $1 { max = $1 } END { print max } file.txt
awk NR  rightanglebrc  1 && min=="" || min  rightanglebrc  $1 { min = $1 } END { print min } file.txt
awk NR  rightanglebrc  1 { print prev } { prev = $0 } file.txt
awk NR  rightanglebrc  1{print line" \\"}{line=$0;}END{print $0" "} inputfile
awk NR  rightanglebrc = 23 && NR  leftanglebrc = 56
awk NR  rightanglebrc = 5 && NR  leftanglebrc = 5 + Y { print $X } file.txt
awk NR  rightanglebrc =2 {for (i=7;i leftanglebrc =NF;i++) if ($i !~ /^-/) sum += $i; print $1,$2,$3,$4,$5,$6,sum; sum = 0} data.txt
awk NR % 10 != 0 file
awk NR % 2 == 0 file
awk NR % 2 == 0 filename
awk NR % 2 == 0 { print substr($0, 0, 45) } NR % 2 == 1 { print } BT8_A.fastq
awk NR % 2 == 1 { saved_line=$0 ; next } { print saved_line $0 } INPUTFILE
awk NR % 2 {print} !(NR % 2) && /pattern/ {print} file.fasta
awk NR % 2 {print} !(NR % 2) {print length($0)} file.fasta
awk NR % 2 {print} !(NR % 2) {print | "grep pattern | rev" } file.fasta
awk NR % 3 == 0 { print $0 ; print "" } NR % 3 INPUTFILE
awk NR % 4 == 1 {sub(/$/,",")} {print}
awk NR == 1 { I = NF ? 12 : 13 } NR  rightanglebrc  I IMSI$r.txt
awk NR == 1 { I = NF ? 12 : 13 } NR  rightanglebrc  I { print $NF "\r" } IMSI$r.txt
awk NR == 1 { I = NF ? 12 : 13 } NR  rightanglebrc  I { print $NF "\r" } IMSI$r.txt tee -a out
awk NR == 1 { print $0, "sum"; next } { if (NR == 2) { sum = $1 + $2 + $3 + $4 } else { t = $1 - a; sum = ($2 - b) / t + ($3 - c) / t + ($4 - d) / t } print $0, sum; a = $1; b = $2; c = $3; d = $4 } file
awk NR == 1 {pad = length($0); print} NR  rightanglebrc  1 {gsub(/\r/,""); printf "%*s%s\n", pad, " ", $0}
awk NR == 1 || $3  leftanglebrc  min {line = $0; min = $3}END{print line} file.txt
awk NR == 2 {print}; {line1 = line2; line2 = line3; line3 = $0} END {print line1; print line2; print line3} files*
awk NR == 62 || NR == 152 || NR == 153 || NR % (62+217) == 0 || NR % (152+217) == 0 || NR % (153+217) == 0 {print $0;} test.txt
awk NR == FNR { a leftsquarebrc $1, $2 rightsquarebrc ++; next } a leftsquarebrc $1, $2 rightsquarebrc  file1 file2
awk NR == FNR { f1 leftsquarebrc $0 rightsquarebrc ; next } !($0 in f1) file1 file2
awk NR == FNR {a leftsquarebrc $2 rightsquarebrc  = $1; next} {if ($2 in a){print(a leftsquarebrc $2 rightsquarebrc , $1)}} file1 file2
awk NR == FNR {nums leftsquarebrc $1 rightsquarebrc ++; next} ! flag {flag = 1; for (num in nums) {if (nums leftsquarebrc i rightsquarebrc   rightanglebrc  max) {max = nums leftsquarebrc i rightsquarebrc }}} {print max * $3} filetomax filetoprocess
awk NR == FNR{a leftsquarebrc $0 rightsquarebrc ;next} !($0 in a) fileA fileB
awk NR leftanglebrc 4 file
awk NR leftanglebrc =3 || /hello/ test.txt
awk NR rightanglebrc 1 && $1~"/"{print s; s=""} {s=s $0} END{print s} file
awk NR rightanglebrc 1 && $1~r { next } { print; r="^" $1 } words
awk NR rightanglebrc 1 file
awk NR rightanglebrc 1 {if ($2 rightanglebrc 40) {print $1,$2; f=1}} END {if (!f) print "ok"}
awk NR rightanglebrc 1 {print $1 "," $2  rightanglebrc  rightanglebrc  $5 ".txt"}
awk NR rightanglebrc 1&&/pattern/{print "lineToInsert"}1 file
awk NR rightanglebrc 1000 {print $0} graph_data_tmp.txt
awk NR rightanglebrc 10{for (i=13;i leftanglebrc =NF;i++) $i=substr($i,1,3)} 1 file
awk NR rightanglebrc 1{$0=substr($1,0,1)$2" "$3}1 file
awk NR rightanglebrc 1{a=$3;$3="@";gsub(/ -1\ rightanglebrc /," ? ?");gsub(/\ leftanglebrc 0\ rightanglebrc /,$5 " " $5);gsub(/\ leftanglebrc 1\ rightanglebrc /,$5 " " $6);gsub(/\ leftanglebrc 2\ rightanglebrc /,$6 " " $6);$3=a;print} file
awk NR rightanglebrc 1{if($6=="N") print $1,$3,$4,$5; if($8=="N") print $1,$3,$4,$7 }  file
awk NR rightanglebrc 1{print $2,$3,$4  rightanglebrc  $1} file
awk NR rightanglebrc 1{print $2,$3,$NF} inputFile
awk NR rightanglebrc 1{printf "%d %d %d\n", $20,$45,$102} RS=vector
awk NR rightanglebrc 1{printf "=HYPERLINK(B%d, C%d) \t https://otrs.city.pittsburgh.pa.us/index.pl?Action=AgentTicketZoom;TicketID=%s\n", NR-1, NR-1, $0} temp.txt
awk NR rightanglebrc 1{s=$2+$3+$4;if(($1 in a && s rightanglebrc m leftsquarebrc $1 rightsquarebrc )|| !($1 in a)){m leftsquarebrc $1 rightsquarebrc =s;a leftsquarebrc $1 rightsquarebrc =$0}}END{for(x in a)print a leftsquarebrc x rightsquarebrc } file sort -V
awk NR rightanglebrc 1{t=$1;gsub(/ leftsquarebrc ^ leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc /,"");$0=t "\t" $0}1 file
awk NR rightanglebrc 2 && $1~/DISK_2/{print $4} INPUT_FILE
awk NR rightanglebrc 2 {print $NF "\r"} IMSI.txt
awk NR rightanglebrc 2{ print l} {l=$0}
awk NR rightanglebrc 2{print $1} /proc/net/dev
awk NR rightanglebrc 2{print $4} INPUT_FILE
awk NR rightanglebrc 2{while((getline a  leftanglebrc  "sample.txt")  rightanglebrc  0){print a}}1 input.txt
awk NR rightanglebrc 4 { print a leftsquarebrc i%4 rightsquarebrc } {a leftsquarebrc i++%4 rightsquarebrc =$0} input
awk NR rightanglebrc 90307{for(i=2;i leftanglebrc =90289;i+=3) print $i, $(i+1), $(i+2) }
awk NR rightanglebrc =2 && NR leftanglebrc =4 file
awk NR rightanglebrc =3&&NR leftanglebrc =5 input.txt
awk NR rightanglebrc =3{print}NR==5{exit} /etc/passwd
awk NR rightanglebrc =4 file
awk NR rightanglebrc =start && NR leftanglebrc =end && /string/ {print NR} start=$LINESTART end=$LINEEND ${myFile}
awk NR ~ /^9|13|17|21$/{sub(/ leftsquarebrc 0-9 rightsquarebrc +\r$/, "1\r")}1 file mv _temp file
awk NR!=1{print $3} your_file
awk NR!=FNR && FNR==1 { print NR - FNR } file file
awk NR%10 yourfile
awk NR%1000 == 1{ file = "outputfile" i++ } { print  rightanglebrc  file } ORS= RS=------ test.list
awk NR%100==1 { ++i } { print $0 (NR%100==0 ? "\nFFFFFF" : "")  rightanglebrc  "outputfile" i ".txt" } file.txt
awk NR%2
awk NR%20==1 { file = FILENAME "_" sprintf("%04d", NR+19) } { print  rightanglebrc  file } domains.xml
awk NR%2==0 infile
awk NR%2==0 { x = sprintf("%-66s", $0); gsub(/ /,"A",x); $0 = x }1 file
awk NR%2==1 {line=$0; next} {printf("%-20s%-4s%s\n", line, $2, $3)} file
awk NR%2{printf $0" ";next;}1 yourFile
awk NR%3!=0{printf "%s ",$1;next}1 inputFile
awk NR%3==1{if(a)print a;a=$0;v=$NF;next}$NF leftanglebrc v{a=$0;v=$NF}END{print a} file
awk NR%4 && NR%4!=3
awk NR%4!=0 { printf "%s", $0; next } { sub(/,$/,"") }1 file
awk NR%4!=0 { printf "\"%s\",", $0; next } { printf "\"%s\"\n", $0 } file
awk NR%40==1 || NR%40==2 || NR%40==3 || NR%40==4 file
awk NR%40~/^ leftsquarebrc 1-4 rightsquarebrc $/ file
awk NR%4==1 || NR%4==2
awk NR%4==1 || NR%4==2 file
awk NR%4==1{sum=$2; next}{sum+=$2} NR%4==0{print ++j,sum;} input.txt
awk NR%5{printf "%s", $0;next}1 file
awk NR%5{printf "%s, ",$0;next}1 file
awk NR%6==1 || NR%6==2 file
awk NR%7==0 { print ++i, $2, $3, $4} Files*.txt
awk NR%8 ~ / leftsquarebrc 134 rightsquarebrc / file
awk NR== 71 || NR == 116 || NR == 211 {sub(/ *$/,"",$0)}{print $0}
awk NR==$line_start, NR==$line_end file
awk NR==$r {print $0} Aenumerar
awk NR==1 { $0=substr($0, 1, 5) } 1 file
awk NR==1 { $0=substr($0, 1, 52000) } 1
awk NR==1 { n = $5 } FNR==NR && $5 != n { a leftsquarebrc c++ rightsquarebrc =$0 } FNR!=NR && $5 == n { for (i=0;i leftanglebrc =c-1;i++) { split (a leftsquarebrc i rightsquarebrc ,b); dist = sqrt (($7-b leftsquarebrc 7 rightsquarebrc )^2 + ($8-b leftsquarebrc 8 rightsquarebrc )^2 + ($9-b leftsquarebrc 9 rightsquarebrc )^2); if (dist  rightanglebrc = 5) printf "%s-%s\t%.2f\n", $NF, b leftsquarebrc NF rightsquarebrc , dist  rightanglebrc  "/path/to/folder/" FILENAME } } $i{,}
awk NR==1 { n = $5 } FNR==NR && $5 != n { a leftsquarebrc c++ rightsquarebrc =$0 } FNR!=NR && $5 == n { for (i=0;i leftanglebrc =c-1;i++) { split (a leftsquarebrc i rightsquarebrc ,b); dist = sqrt (($7-b leftsquarebrc 7 rightsquarebrc )^2 + ($8-b leftsquarebrc 8 rightsquarebrc )^2 + ($9-b leftsquarebrc 9 rightsquarebrc )^2); if (dist  rightanglebrc = 5) printf "%s-%s\t%.2f\n", $NF, b leftsquarebrc NF rightsquarebrc , dist } } file{,}
awk NR==1 { next } FNR==NR { a leftsquarebrc $1 rightsquarebrc =$2; next } $1 in a { $1=a leftsquarebrc $1 rightsquarebrc  }1 TABLE OLD_FILE
awk NR==1 { print "First Login:", $1, $2, $3 } END { print "Last Login:", $1, $2, $3 } logins.txt
awk NR==1 { print; next } { print $0, ($1 == a && $2 == b) ? "equal" : "not_equal"; a = $1; b = $3 } file column -t
awk NR==1 {next} {$1=$1;  print ": (" $0} RS=: ( FS=n OFS= filename
awk NR==1 {print substr($0,12,6),substr($0,21,7)} inputfile.inp
awk NR==1 {print; next} {split($2,a,/,/); for (i in a) {$2=a leftsquarebrc i rightsquarebrc ; print}}
awk NR==1 {s=l=$1; next} $1!=l+1 {if(l == s) print l; else print s ":" l; s=$1} {l=$1} END {if(l == s) print l; else print s ":" l; s=$1}
awk NR==1 || ($25  rightanglebrc  333 && $25  leftanglebrc = 500) av_bngc6522_Hband_chi1p5_IR_10
awk NR==1 || NR==2 || !/^#/ file.txt
awk NR==1&&/^\/\*/{s=1}s==1{print $0}s==1&&$NF=="*/"{s=0} test.c
awk NR==1,/mySearchString/ tail -n 19 head -n 1
awk NR==1,NR==750 INPUT_FILE
awk NR==10 file
awk NR==100,NR==200{print $8} file.tsv
awk NR==102 {$0=$0","}1 file
awk NR==162 {print $4} FS= skinlist.html
awk NR==1{OFS="\t";print;next} {x leftsquarebrc $1 OFS $2 rightsquarebrc +=$3} END{for (r in x)print r,x leftsquarebrc r rightsquarebrc } file
awk NR==1{for(i=0;i leftanglebrc NF;i++){row leftsquarebrc i rightsquarebrc =$i}} NR==2{for(i=0;i leftanglebrc NF;i++){printf "%s:%s",row leftsquarebrc i rightsquarebrc ,$i}} oldfile
awk NR==1{for(i=1;i leftanglebrc =NF;i++)n leftsquarebrc i rightsquarebrc =$i}; NR==3{for(i=1;i leftanglebrc =NF;i++){if($i~/florida|texas/)print $i"\t"n leftsquarebrc i rightsquarebrc ;}} yourFile
awk NR==1{for(i=1;i leftanglebrc =NF;i++)print i,$i} FS= RS= leftanglebrc /client rightanglebrc  file
awk NR==1{h=$0;next}{f="file"++i;print h,$0  rightanglebrc  f;close(f)} OFS=n file
awk NR==1{n=NF}{$n=$n}1 FS=, OFS=, file
awk NR==1{nc=NF;for(i=1;i leftanglebrc =nc;i++)a leftsquarebrc i rightsquarebrc =$i}{for(i=1;i leftanglebrc =nc;i++){if($i!=a leftsquarebrc i rightsquarebrc ){v leftsquarebrc m leftsquarebrc i rightsquarebrc ++,i rightsquarebrc =$i;if(m leftsquarebrc i rightsquarebrc  rightanglebrc nl)nl=m leftsquarebrc i rightsquarebrc }}}END{for(l=0;l leftanglebrc nl;l++){for(i=1;i leftanglebrc =nc;i++){if(l leftanglebrc m leftsquarebrc i rightsquarebrc ){printf("%d ", v leftsquarebrc l,i rightsquarebrc )}else{printf("  ")}}printf("\n")}}
awk NR==1{next}NR==FNR{while(++i leftanglebrc =NF)if($i!="0")k leftsquarebrc i rightsquarebrc ;i=0;next}{while(++x leftanglebrc =NF)if(!(x in k))printf "%s ",$x;x=0;print ""} file file
awk NR==1{prev=$0}NR rightanglebrc 1{printf "%s\n%s\n%s\n%s\n%s\n%s\n", prev, prev, $0, $0, prev, prev; prev=$0} input.txt
awk NR==1{print "Type,",$0}NR rightanglebrc 1{print "Adding Text,",$0} filename
awk NR==1{print $1} /etc/*release
awk NR==1{print $NF} RS=Failed to clone input-awk.txt
awk NR==1{print;next}$2==0 file
awk NR==1{s=$2;next} {print s ORS $6 ORS s, $6} file
awk NR==1{t=$NF;next}$0{print t,$4,$NF} file
awk NR==1{top_line=$1} {$1=int(($1-top_line)/200); print $0} data.txt
awk NR==2 {gsub(/;/,\"\"\\);print (match($3,/^ch/\\) ? \"\ \":\"\"\\),$2,$4}
awk NR==2 {split($2, arr, " leftsquarebrc #/ rightsquarebrc "); print arr leftsquarebrc 2 rightsquarebrc }
awk NR==2, NR==4 file
awk NR==2,NR==5 INPUT_FILE
awk NR==271{for(i=1;i leftanglebrc =NF;i++)if($i=="Lost")print $(i+2)} filename.txt
awk NR==27{printf "%s ", $0} $INDIR/files
awk NR==2{print "\n" $0; next}1 file
awk NR==2{printf("%s ",$0);next}1 file
awk NR==3 {print $3} /proc/net/wireless
awk NR==3 {while (getline  leftanglebrc  "file2") print; next} 1 RS= ORS=nn file1
awk NR==3,NR==5 /etc/passwd
awk NR==314 file
awk NR==314{print;exit} file
awk NR==3{print "my log"}1 INPUT_FILE
awk NR==42{print $1; exit}
awk NR==5 file
awk NR==6 { print $2 }
awk NR==7 file
awk NR==7{print $2} NR==8{print $3} NR==11{print $1, $3} Old_file
awk NR==FNR { a leftsquarebrc $0 rightsquarebrc ; next } { for (i in a) print i",", $0 } file1 file2
awk NR==FNR { a leftsquarebrc $1 rightsquarebrc ;next } (FNR in a) line_number_list.txt bigfile.txt
awk NR==FNR { a leftsquarebrc FNR rightsquarebrc =$2; next} $2 != a leftsquarebrc FNR rightsquarebrc  { print $2 } File1 File2
awk NR==FNR { pats leftsquarebrc $0 rightsquarebrc =1; next } { for(p in pats) if($2 ~ p) { print $0; break } } patterns file
awk NR==FNR {a leftsquarebrc $0 rightsquarebrc ; next} $0 in a {i=0} ++i rightanglebrc 3 names.dat text.dat
awk NR==FNR {a leftsquarebrc $1 rightsquarebrc ; next} $1 in a second_file first_file
awk NR==FNR {a leftsquarebrc $1 rightsquarebrc ;next} ($1 in a) && ($2=="spring") && (($4-($3-$4)) rightanglebrc 0) FILE_B FILE_A
awk NR==FNR {a leftsquarebrc $1 rightsquarebrc =$2; next} {if ($1 in a) {$1=a leftsquarebrc $1 rightsquarebrc }}1 f2 f1
awk NR==FNR {a leftsquarebrc $2,$4 rightsquarebrc ++; next} {print $0 "\t" a leftsquarebrc $2,$4 rightsquarebrc } file file
awk NR==FNR {id leftsquarebrc $1 rightsquarebrc =1; next} $i in id fileB fileA
awk NR==FNR {if($0 ~ /^---/) {b=1} else if(b==1) {a leftsquarebrc $1$2 rightsquarebrc =$3; b=0} next} $1$2 in a {if(a leftsquarebrc $1$2 rightsquarebrc  leftanglebrc $3) print $2} file1 file2
awk NR==FNR {n leftsquarebrc FNR rightsquarebrc =$1; next} {sub(/ leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc +/, n leftsquarebrc FNR rightsquarebrc ); print} f1 f2
awk NR==FNR {print; seen leftsquarebrc $0 rightsquarebrc =1; next} !($0 in seen) file1 file2
awk NR==FNR{ a leftsquarebrc $0 rightsquarebrc ++ } NR!=FNR && a leftsquarebrc $1 $2 $3 rightsquarebrc  file_no_del original_file
awk NR==FNR{ a leftsquarebrc $1 rightsquarebrc =$2; next;} $2==0{ $2=a leftsquarebrc $1 rightsquarebrc ; }1 OFS=t input2 input1
awk NR==FNR{ if( $1 in a) next;a leftsquarebrc $1 rightsquarebrc =$2;next}{$0=$0" "a leftsquarebrc $1 rightsquarebrc }1 file1 file2
awk NR==FNR{ if($1 in a) a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc ","$2" "$3; else a leftsquarebrc $1 rightsquarebrc =$2" "$3;next;} {n=split(a leftsquarebrc $1 rightsquarebrc ,arr,",");for(i=1;i leftanglebrc n;i++){split(arr leftsquarebrc i rightsquarebrc ,b," ");if( $2  rightanglebrc  b leftsquarebrc 1 rightsquarebrc  && $2  leftanglebrc  b leftsquarebrc 2 rightsquarebrc  ){ print $0;} }} file2 file1
awk NR==FNR{ s leftsquarebrc $1 rightsquarebrc += $2; next} {t+=s leftsquarebrc $1 rightsquarebrc } END{ print t} FS=, csv-file names.txt
awk NR==FNR{A leftsquarebrc $1 rightsquarebrc ; next} $1 in A file1 file2
awk NR==FNR{A leftsquarebrc $1 rightsquarebrc =$2; next} {i=int($1+.5); print (i in A)?A leftsquarebrc i rightsquarebrc :0} ctd seafloor
awk NR==FNR{A leftsquarebrc $1 rightsquarebrc =$2; next} {i=int($1+.5); print A leftsquarebrc i rightsquarebrc +0} crd seafloor
awk NR==FNR{A leftsquarebrc $1 rightsquarebrc =NR; next} A leftsquarebrc $1 rightsquarebrc !=FNR{print rightanglebrc f; next}1 f=dups file file
awk NR==FNR{NF==2?k=$2:a leftsquarebrc k rightsquarebrc =$1;next}{for(i=2;i leftanglebrc =NF;i++){for(k in a){$i=$i==k?$i OFS a leftsquarebrc k rightsquarebrc :$i}}}1 FS= leftsquarebrc  rightanglebrc   rightsquarebrc  file{2,1}
awk NR==FNR{a leftsquarebrc " rightanglebrc "$0 rightsquarebrc }/^ rightanglebrc /{p=!($0 in a)}p file2 file1
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ++;next}{for(x in a) if(index($0,x) rightanglebrc 0) next}1 file{1,2}
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next;}!($0 in a) file1 file2
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next} $1 in a{c=2} c&&c-- file2 file1
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next} ($1 in a) && ($2 in a) list.txt test.txt
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next} /^ rightanglebrc /{f=0} $1 in a{f=1} f file2 file1
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next} FNR in a idx.txt lines.txt
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next} { for (word in a) if ($0 ~ word) print FILENAME, $0 } fileOfWords /wherever/dir/*
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next}!($0 in a) file2 file1
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc ;next}NF leftanglebrc 3||!($22 in a) file1 file2
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc =1;next}!a leftsquarebrc $0 rightsquarebrc  B A
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc =1;next}FNR==1{for(i=1;i leftanglebrc =NF;i++)if(a leftsquarebrc $i rightsquarebrc )k leftsquarebrc i rightsquarebrc }{for(x in k)$NF= sprintf("%s ",$x) $NF}7 f1 f2
awk NR==FNR{a leftsquarebrc $0 rightsquarebrc =1;next}a leftsquarebrc $1 rightsquarebrc  file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next;}!($0 in a) file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next;}!($0 in a) file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next}$1 in a test.1 test.2
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next}($1 in a){print $1,$4} timestampfile datafile
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next}{ print a leftsquarebrc $1 rightsquarebrc ,$0} file file sort -n -r sed -r s/ leftsquarebrc 0-9 rightsquarebrc * //
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ++;next}{for(x in a){if(index(tolower($0),x) rightanglebrc 0)print $0,x}} fileb filea
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc +=$3;next}{printf("%s/%d\n",$0,a leftsquarebrc $1 rightsquarebrc )} ./infile ./infile
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ;next}!($4 in a) file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc ;next}{split($4,b,"\"")}(b leftsquarebrc 2 rightsquarebrc  in a){print $2"\n"$6"\n=========\n"  rightanglebrc  b leftsquarebrc 2 rightsquarebrc ".txt"} file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}$1 in a{$0=a leftsquarebrc $1 rightsquarebrc }1 value zero
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}$1 in a{print a leftsquarebrc $1 rightsquarebrc  rightanglebrc "file4.txt";print} file1 file2
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}a leftsquarebrc $2 rightsquarebrc ~/shipped/{print $0} list.txt cpu.txt
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$0;next}{print a leftsquarebrc $1 rightsquarebrc } f2 f1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$1; next} FNR leftanglebrc 2||a leftsquarebrc $1 rightsquarebrc  LIST DATA
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next} $2 in a{print $1,a leftsquarebrc $2 rightsquarebrc } replacement.txt list.txt
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next}$1 in a{print $1,a leftsquarebrc $1 rightsquarebrc } file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$2;next}{$1=a leftsquarebrc $1 rightsquarebrc }1 hosts.txt output.txt
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =$3;next}$1 in a{$3=a leftsquarebrc $1 rightsquarebrc }7 file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =0;next}$1 in a{a leftsquarebrc $1 rightsquarebrc +=$3}END{for(i in a) print i,a leftsquarebrc i rightsquarebrc } Name_file table
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =1;next} $1 in a {print} file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =7;next}a leftsquarebrc $3 rightsquarebrc  file2 file1
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc =substr($0,92,5);next}($1 in a) {$0=substr($0,1,92) a leftsquarebrc $1 rightsquarebrc  substr($0,97)}1 file file2
awk NR==FNR{a leftsquarebrc $1 rightsquarebrc }{for(i in a){if(i==$2)print $0  rightanglebrc  rightanglebrc  $2}} Pattern.txt hugefile
awk NR==FNR{a leftsquarebrc $1$2 rightsquarebrc =$0;next}$1$4 in a{print a leftsquarebrc $1$4 rightsquarebrc ,$2-$3} file{A,B}
awk NR==FNR{a leftsquarebrc $1$2$3 rightsquarebrc ++;next}!($1$2$3 in a) file{1,2}
awk NR==FNR{a leftsquarebrc $1,$2 rightsquarebrc =$3;next} ($1,$2) in a{print $0, a leftsquarebrc $1,$2 rightsquarebrc } file1 file2
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc ;next}!($2 in a) file2 file1 mv tmp file1
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc ;next}$1 in a file2 file1
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc =$0; next} a leftsquarebrc $2 rightsquarebrc  rightanglebrc 0{print a leftsquarebrc $2 rightsquarebrc ,$1} file1 file2
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1; next} ($1 in a){$1=a leftsquarebrc $1 rightsquarebrc ;print;next} {print "NOT FOUND"} file2 file1
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;b leftsquarebrc $2 rightsquarebrc =$4" "$5;next} {sub(/.*:/,"",$2); $3=$1" "$3" "b leftsquarebrc $2 rightsquarebrc ; $1=a leftsquarebrc $2 rightsquarebrc ;}1 file1 file2
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next}$6 in a{print $0,a leftsquarebrc $6 rightsquarebrc } file2 file1
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next}{$1=a leftsquarebrc $1 rightsquarebrc ;}1 fileA fileB
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc =$1;next}{print $0,a leftsquarebrc $2 rightsquarebrc } file2 file1
awk NR==FNR{a leftsquarebrc $2 rightsquarebrc =1;next}a leftsquarebrc $2 rightsquarebrc {print $2} file1 file2
awk NR==FNR{a leftsquarebrc $3"_"NR rightsquarebrc =$0;next;}{for(x in a){if(x~"^"$5) print $1,$2,$3,$4,a leftsquarebrc x rightsquarebrc ;}} f2.txt f1.txt
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$(NF-1);next}/cellIdentity/{$(NF-1)=a leftsquarebrc ++i rightsquarebrc }1 FS= OFS= inputFile bigFile
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$0;next} {split($0,b,a leftsquarebrc FNR rightsquarebrc ); print b leftsquarebrc 1 rightsquarebrc } file1 file2
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$0;next} {split($0,b,a leftsquarebrc FNR rightsquarebrc ); print b leftsquarebrc 2 rightsquarebrc } file1 file2
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$0;next}a leftsquarebrc FNR rightsquarebrc  rightanglebrc $0{i++}END{print i} file1 file2
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$1; next} {for (x in a) if ($0 ~ a leftsquarebrc x rightsquarebrc ) print $0 " found because of -- rightanglebrc  " a leftsquarebrc x rightsquarebrc } textile text2
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$1;next} {print a leftsquarebrc FNR rightsquarebrc , $2} file1 file2
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$1;next}!/^ rightanglebrc /{$1=substr($1,1,n-1) a leftsquarebrc ++i rightsquarebrc  substr($1,n+1)}1 n=5 f2 f1
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$1;next}FNR rightanglebrc 5&&FNR leftanglebrc 5287{$1=a leftsquarebrc FNR rightsquarebrc }1 b.com a.com
awk NR==FNR{a leftsquarebrc NR rightsquarebrc =$6;next}a leftsquarebrc FNR rightsquarebrc !=$6{print "diff @ lineNr:",FNR;exit} file1 file2
awk NR==FNR{a leftsquarebrc n++ rightsquarebrc =$0;next} 1; /URLs found/{for (i=0;i leftanglebrc n;++i) print a leftsquarebrc i rightsquarebrc } Text1.txt Text2.txt mv tmp Text2.txt
awk NR==FNR{c leftsquarebrc ++n rightsquarebrc =$3;next}{$2=($3+c leftsquarebrc 1 rightsquarebrc )*c leftsquarebrc n rightsquarebrc " "$2}7 file file
awk NR==FNR{c leftsquarebrc NR rightsquarebrc =$3;l=NR;next}{$2=($3+c leftsquarebrc 1 rightsquarebrc )*c leftsquarebrc l rightsquarebrc " "$2}7 file file
awk NR==FNR{c leftsquarebrc NR rightsquarebrc =$3;l=NR;next}{$2=($3+c leftsquarebrc 1 rightsquarebrc )*c leftsquarebrc l rightsquarebrc }7 file file
awk NR==FNR{c leftsquarebrc NR==1 rightsquarebrc =$3;next}{$2=($3+c leftsquarebrc 1 rightsquarebrc )*c leftsquarebrc 0 rightsquarebrc " "$2}7 file file
awk NR==FNR{e leftsquarebrc i++ rightsquarebrc =$0;next} /person/{sub("person",e leftsquarebrc j++ rightsquarebrc )}1 emails.txt xmlFile.xml
awk NR==FNR{f leftsquarebrc NR rightsquarebrc =$4;l leftsquarebrc NR rightsquarebrc =$5;id leftsquarebrc NR rightsquarebrc =$6;next}{for(i in id){if($2 rightanglebrc f leftsquarebrc i rightsquarebrc &&$2 leftanglebrc l leftsquarebrc i rightsquarebrc ){printf "%-8s%s\n",$2,id leftsquarebrc i rightsquarebrc ;next}}printf "%-8s%s\n",$2,"NoID"} file1 file2
awk NR==FNR{f2 leftsquarebrc $1 rightsquarebrc ;next}$1 in f2 file-2 file-1
awk NR==FNR{f6=$6;f7=$7;f8=$8;next}!f&&/^detector/{f=1;$6=f6;$7=f7;$8=f8}7 copy.txt paste.txt
awk NR==FNR{for(i=7;i leftanglebrc =NF;i++)fld leftsquarebrc i rightsquarebrc =$i;next}{for(i=7;i leftanglebrc =NF;i++)$i=($i*fld leftsquarebrc i rightsquarebrc )-$i}1 lookupfile datafile
awk NR==FNR{h leftsquarebrc $2 rightsquarebrc =$1;next} {for (i=1; i leftanglebrc =NF;i++) $i=h leftsquarebrc $i rightsquarebrc ;}1 a.txt b.txt
awk NR==FNR{h leftsquarebrc tolower($2) rightsquarebrc =$1;next} {for (i=1; i leftanglebrc =NF;i++) $i=h leftsquarebrc tolower($i) rightsquarebrc ;}1 a.txt b.txt
awk NR==FNR{idx leftsquarebrc $0 rightsquarebrc ; next}; !(FNR in idx) idx.txt data.txt
awk NR==FNR{if(/^START - 'cmd1'/)p=NR;next}FNR rightanglebrc p{if(/^END/)exit;print} file file
awk NR==FNR{info leftsquarebrc $1 rightsquarebrc =gensub(/ leftsquarebrc ^\t rightsquarebrc *\t/,"",1)} NR!=FNR{printf"%s\t%s\n",$0,info leftsquarebrc $NF rightsquarebrc } file1.txt file2.txt
awk NR==FNR{k++;next}FNR leftanglebrc =k-3 file.txt file.txt
awk NR==FNR{n leftsquarebrc $0 rightsquarebrc ;next}FNR in n numbers.txt lines.txt
awk NR==FNR{p leftsquarebrc $0 rightsquarebrc ;next}{a leftsquarebrc FNR rightsquarebrc =$0}END{for(i=1;i leftanglebrc =FNR;i++){for(l in p)gsub(l,"",a leftsquarebrc i rightsquarebrc );print a leftsquarebrc i rightsquarebrc }} file1 file2
awk NR==FNR{repl leftsquarebrc NR rightsquarebrc =$0;next}/Coords/{$0=repl leftsquarebrc ++n rightsquarebrc }1 coords.txt template.txt
awk NR==FNR{s leftsquarebrc $1 rightsquarebrc =$2;e leftsquarebrc $1 rightsquarebrc =$3;next}$1 in s && $2  rightanglebrc s leftsquarebrc $1 rightsquarebrc  && $2  leftanglebrc e leftsquarebrc $1 rightsquarebrc  file1 file2
awk NR==FNR{sfx leftsquarebrc $1 rightsquarebrc =$2; next} {print  rightanglebrc  ("file_" sfx leftsquarebrc $NF rightsquarebrc +0)} FS=, file2 FS=  file1
awk NR==FNR{strings leftsquarebrc $0 rightsquarebrc ; next} {for (string in strings) if ( (idx = index($0,string))  rightanglebrc  0 ) print string, FNR, idx } file1 file2
awk NR==FNR{sum+= $1; next}{printf("%4.2f\n", $1/sum)} input input
awk NR==FNR{x leftsquarebrc $1 rightsquarebrc =1} NR!=FNR && x leftsquarebrc $1 rightsquarebrc  file1 file2
awk NR==FNR{x leftsquarebrc $1 rightsquarebrc =1} NR!=FNR && x leftsquarebrc $1 rightsquarebrc  file1 file2 awk NR==1 {s=l=$1; next} $1!=l+1 {if(l == s) print l; else print s ":" l; s=$1} {l=$1} END {if(l == s) print l; else print s ":" l; s=$1}
awk OFS="\t" split ($0, a, ";"){print a leftsquarebrc 1 rightsquarebrc ,$5,$6}
awk ORS=/PowerOnHours/?RS:"\t" ./infile
awk ORS=NF leftanglebrc 4?FS:RS file
awk ORS=NR%4?"\t":RS ./infile
awk \$2 ~ /^${dev_name}\$/ { print \$1 } /proc/devices echo $major
awk \$9 != "NTM" && \$9 !="" $file
awk a leftanglebrc $1{a=$1}b leftanglebrc $2{b=$2}c leftanglebrc $3{c=$3}d leftanglebrc $4{d=$4} END{print a,b,c,d} numbers
awk a leftsquarebrc $0 rightsquarebrc ++ file1 file2
awk a leftsquarebrc $0 rightsquarebrc ++ file1 file2 wc -l
awk a leftsquarebrc $1 rightsquarebrc {$1=$1"_"a leftsquarebrc $1 rightsquarebrc }{a leftsquarebrc $1 rightsquarebrc ++}1 file
awk a leftsquarebrc $1 rightsquarebrc {a leftsquarebrc $1 rightsquarebrc ++}NF&&a leftsquarebrc $1 rightsquarebrc {$1=$1"_"a leftsquarebrc $1 rightsquarebrc }!a leftsquarebrc $1 rightsquarebrc {a leftsquarebrc $1 rightsquarebrc ++}1 file
awk a=/^O/{x=$0} !a&&x{print x;x=0;} myfile
awk alen==length($1) {for (i=a;i leftanglebrc =$1;i++) print i}; {a=$1; alen=length(a); if (a==(i-1)) {a++}}
awk a~$0{exit}NR==1{a=$0}1 file
awk c&&!--c;/Revision:/{c=5} file
awk c&&!--c;/pattern/{c=N} file
awk c&&!--c;/pattern/{c=N} file
awk c&&!--c;/pattern/{c=N} file
awk c&&!--c{next}/pattern/{c=N}1 file
awk c&&!--c{next}/pattern/{c=N}1 file
awk c&&c--;/pattern/{c=N} file
awk c&&c--;/pattern/{c=N} file
awk c&&c--;/str3/{print p;print $0;c=1}{p=$0} file
awk c&&c--{next}/pattern/{c=N}1 file
awk c&&c--{next}/pattern/{c=N}1 file
awk code file
awk command sort -k -2 -, -2
awk commands
awk commands mv tmp caConfig.txt
awk f && !NF{exit} /PATTERN/ {f=1} f file
awk f {print; exit} /Message/ {f=1}
awk f; /Message/ {f=1} file
awk f; tolower($0) ~ /some_word leftanglebrc \/div rightanglebrc / {f=1}
awk f;/pattern/{f=1} file
awk f;/pattern/{f=1} file
awk f==1{print last}{last=$0;f=1}END{print "NEW WORD\n"$0} file
awk file
awk foobar... file awk new awkcmd
awk function print_all() { if (i  rightanglebrc = 5) { print "*" FILENAME; for (j = 1; j  leftanglebrc = i; ++j) print a leftsquarebrc j rightsquarebrc  } i = 0 } $4  rightanglebrc  0 { a leftsquarebrc ++i rightsquarebrc  = $2; next } { print_all() } ENDFILE { print_all() } file1.txt file2.txt
awk function update(array) { array leftsquarebrc 1 rightsquarebrc ="hi" } BEGIN { update(); print array leftsquarebrc 1 rightsquarebrc ;}
awk f{fmt=$0; gsub(/ leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc +/,"%s",fmt); $0=sprintf(fmt,$1+10,$2+20); f=0} /RANDOM/{f=1} 1 file
awk f{print ++x,$1} /4096/{f=1} RS= | *n file
awk gsub("\.mi", "", $2)1 inputfile
awk gsub(/ leftsquarebrc @$ rightsquarebrc /,"") || 7 file
awk gsub(/\*\*\*\*/,"")==2 && $1=$1 file
awk gsub(/\//,"&") leftanglebrc 5 file
awk if($2="AF1%" {print $1,"\t"NULL"\t", print$2, print$3} input.vcf
awk index($1, "A")==1 && index($2, "B")==1 file
awk index($1, "go.gle.com"){print NR ":" $0} inFile
awk length  rightanglebrc  80 {print FILENAME " line " FNR "\n\t" $0} *.cpp
awk length  rightanglebrc  80 {print FILENAME "(" FNR "): " $0} *.cpp
awk length data.txt
awk length data.txt
awk length rightanglebrc 1 file
awk length!=1 file
awk length%2 file
awk length($1) == 3 file1
awk length($4)==4{$4=substr($4,2)}1 file column -t
awk magic files paste -d -| sort sed s/|/\n/
awk magic files paste sort sed s/\t/\n/
awk match($0, "(www\\.)?( leftsquarebrc a-z0-9\\- rightsquarebrc +\\.com?(\\. leftsquarebrc a-z rightsquarebrc {2})?)", r) { print r leftsquarebrc 2 rightsquarebrc  } input.txt sort -u
awk match($0, /(ERROR|DEBUG|TRACE|WARN|FATAL) + leftsquarebrc ^  rightsquarebrc +/) {s = substr($0, RSTART, RLENGTH); split(s, a); count leftsquarebrc a leftsquarebrc 1 rightsquarebrc ,a leftsquarebrc 2 rightsquarebrc  rightsquarebrc ++} END {for (i in count) {split(i, a, SUBSEP); print a leftsquarebrc 1 rightsquarebrc , a leftsquarebrc 2 rightsquarebrc , count leftsquarebrc i rightsquarebrc }} inputfile
awk match($0,/string1|string2|string3/){print $2,substr($0,RSTART,RLENGTH)} file1 file2...
awk matched { print } /^Case Notes:$/ { matched = 1 }
awk n && !--n { sub(/.* - /,""); print } /- GEM PATHS:/ { n = 1 } file
awk p!=$4{c=$4;print "App: "$2" PID "p}1 data.txt
awk p!=$4{p=$4;print s"App: "$2" PID "p;s="--\n"}1 data.txt
awk p; /foo/{p=1}
awk p==0 {p= (~/A/) rightanglebrc 0;filenr++} p==1 {print  rightanglebrc  "range"filenr".txt"; p= (~/Z/)==0; if(!p && ~/A/){filenr++;;p=1; print  rightanglebrc  "range"filenr".txt"}} test.txt
awk program *
awk p{print $0-p}{p=$0} file
awk regex
awk script $outputfile mv tmp $outputfile
awk script file mv tmp file
awk seen leftsquarebrc $0 rightsquarebrc ++{print $0  rightanglebrc  "dups.csv"; next}{print $0  rightanglebrc  "new.csv"} mycsv
awk seen leftsquarebrc $0 rightsquarebrc ++{print|"cat rightanglebrc &2";next}1 file mv tmp file
awk some commands inputfile mv tmp inputfile
awk something
awk stuff
awk sub(/.*flow/,"flow") file
awk sub(/^ rightanglebrc /,"") { print ++i, $0 } /Grades/ { print i, $NF } /year =/ { print i, "year = ", $NF } file
awk sub(/^.*\//, "") file
awk substr($0,0,24) ~ $1 { f=$1 }{ $0=f substr($0, length(f)+1) } 1 file
awk substr($0,12,14)~/ohn/ file
awk substr($0,7,2) == "01" {c++} END {print FILENAME, c++} FILENAME
awk tolower($0) ~ /jack/ && tolower($0) ~ /Jill/{ print FILENAME ":" $0; } *.txt
awk tolower($0)~/reject/ && $0 rightanglebrc =from && $0 leftanglebrc =to from=$(date -d'now-30 days' + leftsquarebrc %d/%b:%H:%M:%S) to==$(date + leftsquarebrc %d/%b:%H:%M:%S) /var/log/messages date -d -n -o -w -- -3 -0 -  -d -a -y -s + leftsquarebrc %d/%b:%H:%M:%S date + leftsquarebrc %d/%b:%H:%M:%S zcat /var/log/messages-*
awk tolower($0)~/reject/ && $0~Date Date=$(date -d'now-30 days' + leftsquarebrc %d/%b:%H:%M:%S) /var/log/messages date -d -n -o -w -- -3 -0 -  -d -a -y -s + leftsquarebrc %d/%b:%H:%M:%S zcat /var/log/messages-*
awk x { gsub(/string1/,"string2") ; x=0 } /string3/ { x=1 } 1 file
awk { $0 = gensub(/ leftsquarebrc ^\t rightsquarebrc *, leftsquarebrc ^\t rightsquarebrc */, "\"&\"", "g"); $1=$1 } 1 FS=t OFS=,
awk { $1=$1 } !a leftsquarebrc $0 rightsquarebrc ++ file2 file1
awk { $3 -= 2; print } filename
awk { $3 = q $3 q; $8 = q $8 q } 1 FS=, OFS=, q=' infile
awk { OFS="\", \""; ORS="\"\n"; split ($8, array, "="); print "\"" substr ($1 , 12, 2 ), substr ($1 , 15, 2 ), $3, $4, array leftsquarebrc 2 rightsquarebrc  + 0 } file.txt
awk { OFS="\", \""; split ($8, array, "="); printf "\"" substr ($1 , length ($1) - 13, 2 ) OFS substr ($1 , length ($1) - 10, 2 ) OFS $3 OFS $4 OFS substr (array leftsquarebrc 2 rightsquarebrc , 0, length (array leftsquarebrc 2 rightsquarebrc ) -2) "\"\n" } file.txt
awk { a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc  + $3 - $2 } END { for(i in a) print i, a leftsquarebrc i rightsquarebrc  | "sort" } dummy
awk { a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc  + $3 - $2 } END { for(i in a) print i, a leftsquarebrc i rightsquarebrc  } dummy
awk { a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc  + $3 - $2 } END { for(i in a) print i, a leftsquarebrc i rightsquarebrc  } dummy sort
awk { a leftsquarebrc $2 rightsquarebrc ++ } END { for (i in a) print "total no:of", i, a leftsquarebrc i rightsquarebrc  }  leftanglebrc (awk '!a leftsquarebrc $1,$2 rightsquarebrc ++' file1)  leftanglebrc (awk '!a leftsquarebrc $1,$2 rightsquarebrc ++' file2) awk !a leftsquarebrc $1,$2 rightsquarebrc ++ file1 awk !a leftsquarebrc $1,$2 rightsquarebrc ++ file2
awk { a leftsquarebrc $2 rightsquarebrc =a leftsquarebrc $2 rightsquarebrc +$1;} END{ for( idx in a){ print idx,a leftsquarebrc idx rightsquarebrc }} file*
awk { a leftsquarebrc FILENAME,$1,$2 rightsquarebrc  } END { for (i in a) { split (i,x,SUBSEP); b leftsquarebrc x leftsquarebrc 3 rightsquarebrc  rightsquarebrc ++ } for (j in b) print "total no:of", j, b leftsquarebrc j rightsquarebrc  } file{1..200}
awk { a leftsquarebrc FNR rightsquarebrc  = (a leftsquarebrc FNR rightsquarebrc  ? a leftsquarebrc FNR rightsquarebrc  FS : "") $5 } END { for(i=1;i leftanglebrc =FNR;i++) print a leftsquarebrc i rightsquarebrc  } $(ls -1v *) ls -1 -v *
awk { a=$0; sub (/txt$/,"tst",$NF); print a"  rightanglebrc  "$NF} file
awk { array leftsquarebrc $1 "\t" $2 "\t" $3 rightsquarebrc  += $4 } END { for (i in array) print i "\t" array leftsquarebrc i rightsquarebrc  } file.txt
awk { c leftsquarebrc $1 rightsquarebrc +=$2 } END { for (i in c) { print i,c leftsquarebrc i rightsquarebrc  } } groceries
awk { count leftsquarebrc $1 rightsquarebrc =(count leftsquarebrc $1 rightsquarebrc )?count leftsquarebrc $1 rightsquarebrc  " " $2 :$2 }; END { for (key in count) { print count leftsquarebrc key rightsquarebrc  }} file
awk { f = $3 "-" $5 ".tsv" } !a leftsquarebrc f rightsquarebrc ++ { printf ""  rightanglebrc  f } { print $1  rightanglebrc  rightanglebrc  f; close(f) } your_file
awk { f = $3 "-" $5 ".tsv"; print $1  rightanglebrc  f } your_file
awk { filename=$4".log"; if (prev && (filename != prev)) close(prev); print  rightanglebrc  rightanglebrc filename; prev=filename } ips.log
awk { for (i=0; i leftanglebrc $2; ++i) print $1 } file
awk { for (i=10;i leftanglebrc =11;i++) { $i = substr( $i, 1, 1) } } { print } infile
awk { for (i=1; i leftanglebrc =NF; i++) if (NR  rightanglebrc = 2 && NR == i) print $(i - 1) } file.txt
awk { for (i=1; i leftanglebrc =NF; i++) print $i } file
awk { for (i=1;i leftanglebrc =NF;i++) if ( $i == "2010" ) count++ } END { print count } myfile.txt
awk { for (i=1;i leftanglebrc =NF;i++) if($i=="pattern") arry leftsquarebrc NR rightsquarebrc =$i } END {. . .} inputfile
awk { for (i=1;i leftanglebrc =NF;i+=2) print $i } file
awk { for (i=2;i leftanglebrc =NF;i++) { total+=$i }; print $1,total; total=0 } file
awk { for (i=2;i leftanglebrc =NF;i+=2) $i="" }1 file
awk { for (i=5; i leftanglebrc =NF; i++) { if ($i != 0) { print; next } } } infile
awk { for(i = 1; i  leftanglebrc = NF; i++) { print $i; } } foo.txt
awk { for(i=1; i leftanglebrc =NF; i++) if ($i ~ /^1 leftsquarebrc 0-9 rightsquarebrc {10}$/) sub(/^1/, "", $i) }1 file
awk { for(i=1; i leftanglebrc =NF; i++) if($i == 0 || $i == 8 || $i == 9 || $i == -999) $i = "NA" } 1 FS=, OFS=, firsttwolines.csv
awk { for(i=1;i leftanglebrc =NF;i++) if(length($i)==0) $i="nil"} 1 FS=| OFS=|
awk { for(i=1;i leftanglebrc =NF;i++) print $i  rightanglebrc  "file_" i ".txt" } RS= FS=\$ file
awk { getline add  leftanglebrc  "file-2"; $3 += add; print } file-1
awk { gsub(",{","\n{"); {print substr($0, 2, length($0) - 2)} } file
awk { gsub("\r", "\n"); print $0;} macfile.txt
awk { gsub(/T leftsquarebrc ^, rightsquarebrc */,"") }1 file
awk { gsub(/\$file/, file); print } file=$file script.in
awk { gsub(/^ leftsquarebrc  \t rightsquarebrc +| leftsquarebrc  \t rightsquarebrc +$/,"") } !a leftsquarebrc $0 rightsquarebrc ++ file2 file1
awk { if ( $3 == 3 ) { $3 = 1 } else if ( $3 == 4 ) { $3 = 2 }; print} filename
awk { if ( NR  rightanglebrc  1 ) print }
awk { if ($0 != prev) n = 0; print $0, ++n; prev = $0 }
awk { if ($0 == "@") {n++;close(filename)} else {filename = sprintf("part%02d.txt", n); print  rightanglebrc filename; }} text.txt
awk { if ($0 ~ /^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *#/) {NR--} else {sum+=$3} END { ... } coriolis_data
awk { if ($0 ~ /network=\{/) { exit } print } wpa_supplicant.conf
awk { if ($1 == 23) sub("23", "X"); print } file.txt
awk { if ($10  rightanglebrc  old1 && old1  leftanglebrc  old2) print NR-1; old2 = old1; old1 = $10; }
awk { if ($2 == $5 && $3 == $6 && $4 == $7) { print $1 } }
awk { if ($2==5) count++ } END { print count }
awk { if ($3 != 0) print $1/$3; else print 0 } your-data-file
awk { if ($9 != $10) {print "google calendar add \"" $2, $3, "Work", $9, "to", $10"\""}} cal
awk { if (NF  rightanglebrc  0) { last = $NF } } END { print last } $@
awk { if (NR%3==0) { print $0}  }
awk { if (NR==1) sub(/^\xef\xbb\xbf/,""); print } INFILE
awk { if (a leftsquarebrc $1 rightsquarebrc ++ == 0) print $0; } $@
awk { if (match($0, "*RECORD") != 0) { $2="$DATE-n++"; }; print } $BATCH
awk { if($1 == "for") id = $2; else arr leftsquarebrc id $5 rightsquarebrc +=$7 } END {for (i in arr) {print i,arr leftsquarebrc i rightsquarebrc }   }  testfile
awk { if($2 ~ /^ leftsquarebrc * rightsquarebrc +$/) { gsub ( / leftsquarebrc * rightsquarebrc /,"N",$2); } if($4 ~ /^ leftsquarebrc * rightsquarebrc +$/ ){ gsub ( / leftsquarebrc * rightsquarebrc /,"N",$4); } print  } your_file.txt sed s/ leftsquarebrc -$*=+() rightsquarebrc //g
awk { if(/comp/) { getline $1  leftanglebrc  "input2"; } print } input1
awk { if(seen leftsquarebrc $0 rightsquarebrc ) { print NR, $0; exit } seen leftsquarebrc $0 rightsquarebrc  = 1 } file
awk { if(seen leftsquarebrc $0 rightsquarebrc ) { print; exit } seen leftsquarebrc $0 rightsquarebrc  = 1 } file
awk { ips leftsquarebrc $5 rightsquarebrc ++ } END { for (ip in ips) { print ip } } your_log_file
awk { lastfield = $NF; $NF = ""; print lastfield " " $0 }
awk { len = (8 - length % 8) % 8; printf "%.*s%s\n", len, "00000000", $0}
awk { line leftsquarebrc  FNR  rightsquarebrc  = $0 } END { if ( FNR  rightanglebrc  0 ) { print "File" } else { print "NO file" } } infile
awk { n = split($1, a, / leftsquarebrc ()# rightsquarebrc /); print (n==1 ? $0 : a leftsquarebrc 2 rightsquarebrc  FS a leftsquarebrc 4 rightsquarebrc ) } file
awk { names leftsquarebrc $2 rightsquarebrc  = names leftsquarebrc $2 rightsquarebrc  " " $5; } END { for (name in names) print name " " names leftsquarebrc name rightsquarebrc  } file
awk { orig=$NF ; if (gsub("/","",$NF) == 2) { print orig  } } INPUTFILE
awk { p = 1 } / leftanglebrc appender /{ t = $0; while (getline  rightanglebrc  0) { t = t ORS $0; if (/COM_FIND leftsquarebrc . rightsquarebrc log/ || /COM_Find leftsquarebrc . rightsquarebrc log/) p = 0; if (/ leftanglebrc \/appender rightanglebrc /) break } $0 = t } p file
awk { print  leftanglebrc whatever rightanglebrc  } /dir/*
awk { print  rightanglebrc  ($1 ".txt") } TS129.txt
awk { print  rightanglebrc  rightanglebrc  $5 } yourfile
awk { print  rightanglebrc  rightanglebrc  $5.txt }
awk { print  rightanglebrc  rightanglebrc ($4".log"); close($4".log") } ips.log
awk { print  rightanglebrc  substr($0,8,4) ".txt" } file
awk { print " rightanglebrc "NR }1 file.txt
awk { print "Do stuff for " $1; print "Do stuff for " $2 } filename
awk { print "public void goToWebsite" NR "() {driver = new FirefoxDriver();driver.get(\"" $0 "\");driver.quit();" } file
awk { print $(NF-3) }
awk { print $0  rightanglebrc $1 } infile
awk { print $0 (NF==5 ? "NA" : "") }
awk { print $0 } RS=0 file
awk { print $1  rightanglebrc  $3 "-" $5 ".tsv" } your_file
awk { print $1 "/" $NF } infile
awk { print $1 }
awk { print $1 } flag.txt od
awk { print $1"      0x"$2$3$4$5$6$7; } input.txt
awk { print $1+$2; } file.txt
awk { print $2 " " $1} file.txt
awk { print $2 "=" $3 } myFile
awk { print $2 $4 } filename.txt
awk { print $2 }
awk { print $2 } text.txt
awk { print $2, $3, $4  rightanglebrc  $1 ".txt" } file
awk { print $2, gensub(/@:/, "", "g", $5), $6} log.txt
awk { print $3 } common_pattern*
awk { print $3 } file1  leftsquarebrc file2 .. filen rightsquarebrc 
awk { print $5, $6 } text
awk { print '"$eq"' } file
awk { print .... }
awk { print gensub(/(, leftsquarebrc ^, rightsquarebrc +).*/,"\\1", "g") }
awk { print gensub(/^(..\/)(..\/)..(..,)/, "\\2\\1\\3", "g"); next }1 file
awk { print length($0) " " $0; } $file sort -n cut -d   -f 2-
awk { print length($0) " " $0; } $file sort -r -n cut -d   -f 2-
awk { print length($0); } abc.txt
awk { print length($1) " " $0; } $FILE sort -n
awk { print strftime("%Y-%m-%d %H:%M:%S"), $0; } /dev/ttyUSB0
awk { print substr($0,8) } lines.txt
awk { print substr($1, 1, 3), x = (substr($1, 6, 4)), x, x } OFS=
awk { print substr($1, 1, 7), $2 } file.txt
awk { print toupper($0) }
awk { print toupper($0) } yourfile.txt
awk { print } lsfiles.txt Out-File awkedlsfile.txt -e -n -c -o -d -i -n -g ASCII
awk { printf "%-20s %-40s\n", $1, $2}
awk { printf "%s ", $1; for (x = 2; x  leftanglebrc = NF; x = x + 2) {printf "%s%s ", $x, $(x+1)} printf "\n"} input
awk { printf "%s -- %s\n", strftime("%c",$1), $0 } file
awk { printf "%s-%s-%sT%s:%s:%s\n", substr($1, 5), substr($1, 3, 2), substr($1, 0, 2), substr($2, 0, 2), substr($2, 3, 2), substr($2, 5, 2) } file.txt
awk { printf "Do stuff for %s\nDo stuff for %s\n", $1, $2 } filename
awk { printf $0 " " } NR%1000 == 0 { print "" } file
awk { printf $0 " " } NR%1000 == 0 { print "" } file sed s/.*/(&)/
awk { printf $0 " " } NR%1000 == 0 { print "" } file.txt sed -e s/ /,/g -e s/^/Delete from ReportingDetail where ReportingDetailID IN (/ -e s/,$/)/
awk { printf("%.2f\n", $1/$2 * 100) }
awk { printf("\n%s", $0) }
awk { r=$1; sub($1 FS, ""); print  rightanglebrc  r ".txt" } file
awk { s += $1 } NR % c == 0 { print s; s=0 } END { if(NR % c) print s } c=80
awk { s = ""; for (i = 9; i  leftanglebrc = NF; i++) s = s $i " "; print s }
awk { s=$1; sub($1,""); gsub("C","g"); gsub("G","c"); gsub("T","a"); gsub("A","t"); print s $0 } filename
awk { split($1,a,"-"); print $0, (a leftsquarebrc 1 rightsquarebrc -a leftsquarebrc 2 rightsquarebrc   rightanglebrc = 0 ? a leftsquarebrc 1 rightsquarebrc -a leftsquarebrc 2 rightsquarebrc  : a leftsquarebrc 2 rightsquarebrc -a leftsquarebrc 1 rightsquarebrc ) | "column -t" } $i mv $i.temp $i
awk { split($1,a,"-"); print $0, (a leftsquarebrc 1 rightsquarebrc -a leftsquarebrc 2 rightsquarebrc   rightanglebrc = 0 ? a leftsquarebrc 1 rightsquarebrc -a leftsquarebrc 2 rightsquarebrc  : a leftsquarebrc 2 rightsquarebrc -a leftsquarebrc 1 rightsquarebrc ) | "column -t" } file
awk { split($1,arr,"/"); print arr leftsquarebrc length(arr) rightsquarebrc  } yourfile
awk { split($4,array," leftsquarebrc :/ rightsquarebrc "); print  rightanglebrc  array leftsquarebrc 2 rightsquarebrc  array leftsquarebrc 3 rightsquarebrc  ".txt" } file.txt
awk { split($4,array,"/"); print  rightanglebrc  array leftsquarebrc 2 rightsquarebrc  ".txt" } file.txt
awk { sub ("\\\\$", ""); printf "%s", $0 } END { print "" } file
awk { sub( "/ leftsquarebrc ^/ rightsquarebrc */","")}1
awk { sub(/ leftsquarebrc  \t rightsquarebrc +$/, ""); print } file
awk { sub(/ leftsquarebrc  \t\r rightsquarebrc +$/, ""); sub(/^ leftsquarebrc  \t rightsquarebrc +/, "") } !NF { next } /^ leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc +:/ { if (length(t)) print t; t = $0; next } { t = t $0 } END { if (length(t)) print t } file
awk { sub(/-+$/, "", $NF); print } infile
awk { sub(/100$/, "2000", $3) }1 file
awk { sub(/^ leftsquarebrc ^: rightsquarebrc *: leftsquarebrc :blank: rightsquarebrc */, ""); print }
awk { sub(/^ leftsquarebrc ^: rightsquarebrc *: leftsquarebrc :blank: rightsquarebrc */, "", $0); print $0; }
awk { sum += $2 } END { if (NR  rightanglebrc  0) print sum / NR }
awk { sum += $2 } END { printf("Total: %.2f\n", sum); } $2
awk { sum += $2; n++ } END { if (n  rightanglebrc  0) print sum / n; }
awk { sum += $4 } END { print sum } tag_FLI1
awk { sum leftsquarebrc $1 rightsquarebrc  += $3 } END { for (i in sum) print i, sum leftsquarebrc i rightsquarebrc  } data
awk { sum+=$1} END {print "Cargo '"${cargo}"' has " sum " items"} file_${cargo}
awk { sum+=$1} END {print sum}
awk { sum+=$1} END {print sum} file_${cargo}
awk { sum+=$9} END {print sum} /home/user/top_VM.txt
awk { system("mkdir " $1); system("chown " $1 ":" $2 " " $1); } idlist
awk { system("openssl s_client -connect host:port -cipher " $1) } ciphers.txt
awk { total += $2 } END { print total/NR } yourFile.whatever
awk { total += $3 - $2 } END { print total } file
awk { vals leftsquarebrc $1 rightsquarebrc  = vals leftsquarebrc $1 rightsquarebrc  " " $2 }; END { for (key in vals) { print key,vals leftsquarebrc key rightsquarebrc  }} list
awk { while( i leftanglebrc  c && sub( "pattern", "replace" )) i+=1}1 c=10 input
awk { x leftsquarebrc $1 rightsquarebrc =x leftsquarebrc $1 rightsquarebrc  " " $2 " " $3 " " $4 " " $5 } END { for (k in x) print k,x leftsquarebrc k rightsquarebrc ; } input.txt
awk { x=0; for(i = 1; i  leftanglebrc = NF; i++) x += $i; print x } file
awk {"date -d\""$0"\" +\"%s\""|getline d; print strftime("%Y-%m-%d %T",d)}
awk {"expr "NR" + 225"|getline n; print "dm" n ","$0} test
awk {"stat -c %Y " $9  | getline a; ...}
awk {$(NF+1)=$2}1 file
awk {$0=$2?$1FS$2FS$1/$2:$1 rightanglebrc 15?$1FS$2FS$1:$1FS$2FS"0"}1 file
awk {$0=NF FS $0}7 file
awk {$0=NR rightanglebrc 1?$0"\t20":$0"\tAge"}1 myFile.txt
awk {$0=sprintf("%.1f%.1f%04d", $1,$2,$3);gsub(/\./,"")}1 file
awk {$0=var} var=$variable file
awk {$1 = ""; sub(" ", ""); arr leftsquarebrc $0 rightsquarebrc ++} END {for (i in arr) {print arr leftsquarebrc i rightsquarebrc , i}}
awk {$1="" print $0}
awk {$1=""; print $0}
awk {$1=""}1
awk {$1=$1;$0=$0"\\\\"}1 OFS= &  file
awk {$1=$1}1 OFS=|
awk {$1=$1}1 RS=nn file
awk {$1=$2="";}sub("^ *","")
awk {$1=a leftsquarebrc $2 rightsquarebrc +++0;print} input.txt
awk {$2 = ""; print $0;}
awk {$2 = substr($2, 1, 12) " " substr($2, 13); print}
awk {$2=($2+$3)/2; $3=$2+1}1 file
awk {$2=int($2)}1 file
awk {$2=int(($2+$3)/2); $3=$2+1}1 file
awk {$2=sprintf("%.2f",$2-30)}7 file
awk {$3="new_str"; print} FS=$t OFS=$t in.csv
awk {$3=$NF OFS $3;$NF=""}1 file
awk {$3=$NF OFS $3;$NF=""}7 file
awk {$3=gensub(/( leftsquarebrc 0-9 rightsquarebrc )( leftsquarebrc A-Z rightsquarebrc )/,"\\1 \\2","",$3)}1 ./infile
awk {$4 = substr($4, 1, $3-1) $2 substr($4, $3+1); print}
awk {$4 leftanglebrc 2?l++:g++}END{printf " leftanglebrc  2 : %s %\n", l*100/(g+l); printf " rightanglebrc =2 : %s %", g*100/(g+l)} your.file
awk {$4=$5"/28"} NF-- FS= leftsquarebrc  . rightsquarebrc + OFS=. file.csv
awk {$4=$5} NF-- FS= leftsquarebrc  . rightsquarebrc + OFS=. file.csv
awk {$5 = $4 - $3}1 input
awk {$5=sprintf( "%.2g", $5)} 1 OFS=, FS=, input
awk {++a leftsquarebrc $0 rightsquarebrc ; if(a leftsquarebrc $0 rightsquarebrc  == 2) print}
awk {...stuff...}
awk {...stuff...} file1 file2
awk {...} a.txt FS=t
awk {/pat/?f++:f=0} f==2 file
awk {BEGIN RS=" ";ORS="\n";} { if (NR  rightanglebrc 20 && NR  leftanglebrc  31) print $0} hexFile
awk {FS=","; print $2}
awk {FS="var="; if ($1~/big/) { print $2"\tmsg="$1} else {print }} a
awk {FS="|";OFS="\t";$0=$0} {print $1,$2,$3,$4,$5}
awk {FS=OFS=","}NR==FNR{a leftsquarebrc $1,$2 rightsquarebrc ="136-7425";next} ($1,$2) in a{$3=a leftsquarebrc $1,$2 rightsquarebrc } 1 file2 file1
awk {FS=OFS=","}NR==FNR{seen leftsquarebrc $1,$2 rightsquarebrc ++;next} seen leftsquarebrc $1,$2 rightsquarebrc {$3="136-7425"} 1 file2 file1
awk {NF = 29; print} filename
awk {NF = 29; print} filename mv filename.new filename
awk {NR%2 || $5="\\n"$5 }1 filename
awk {ORS=(NR%6?"":RS)}1 file
awk {ORS=(NR%6?"":RS)}1 file
awk {ORS=(NR%6?"":RS)}1 file mv tmp file
awk {ORS=NF leftanglebrc 4?x:RS}1 file
awk {a += $1; b += $2} END { print a " " b } foo.log
awk {a leftsquarebrc $0 rightsquarebrc ++; next}END {for (i in a) print i": "a leftsquarebrc i rightsquarebrc } file_with_IPs.txt
awk {a leftsquarebrc $0 rightsquarebrc ++} END{for (i in a) print a leftsquarebrc i rightsquarebrc , i} file
awk {a leftsquarebrc $0 rightsquarebrc ++}END{for(i in a){if(a leftsquarebrc i rightsquarebrc   rightanglebrc  2){print i}}} a.txt
awk {a leftsquarebrc $0 rightsquarebrc ++}END{for(x in a)b leftsquarebrc a leftsquarebrc x rightsquarebrc  rightsquarebrc ++;for(x in b)print b leftsquarebrc x rightsquarebrc , x} file
awk {a leftsquarebrc $0 rightsquarebrc ++}END{for(x in a)print x,a leftsquarebrc x rightsquarebrc } file
awk {a leftsquarebrc $0 rightsquarebrc ++}END{for(x in a)print x,a leftsquarebrc x rightsquarebrc } input*
awk {a leftsquarebrc $1 FS $2 rightsquarebrc ++}END{for (i in a) print i, a leftsquarebrc i rightsquarebrc ==3?"match":"mismatch"} file*
awk {a leftsquarebrc $1 rightsquarebrc  += $2} END {for( i in a ) print i, a leftsquarebrc i rightsquarebrc } testcf.txt
awk {a leftsquarebrc $1 rightsquarebrc ++;b leftsquarebrc $1 rightsquarebrc =$0}END{for(x in a)if(a leftsquarebrc x rightsquarebrc ==1)print b leftsquarebrc x rightsquarebrc } file
awk {a leftsquarebrc $1 rightsquarebrc ++;b leftsquarebrc $1 rightsquarebrc =$0}END{for(x in a)if(a leftsquarebrc x rightsquarebrc ==1)print b leftsquarebrc x rightsquarebrc } file
awk {a leftsquarebrc $1 rightsquarebrc ++}END{for(k in a)print a leftsquarebrc k rightsquarebrc ,k} RS= |n file
awk {a leftsquarebrc $1 rightsquarebrc ++}END{for(k in a)print a leftsquarebrc k rightsquarebrc ,k} RS= |n file sort
awk {a leftsquarebrc $1 rightsquarebrc ++}END{for(k in a)print k,a leftsquarebrc k rightsquarebrc } RS= |n file
awk {a leftsquarebrc $1 rightsquarebrc +=$2;c leftsquarebrc $1 rightsquarebrc ++}END{for(x in a)printf "average of %s is %.2f\n",x,a leftsquarebrc x rightsquarebrc /c leftsquarebrc x rightsquarebrc }
awk {a leftsquarebrc $1 rightsquarebrc +=$2}END{for(i in a){print i, a leftsquarebrc i rightsquarebrc }} inputfile
awk {a leftsquarebrc $1 rightsquarebrc =$1 in a?a leftsquarebrc $1 rightsquarebrc ";"$2:$2}END{for(x in a)print x, a leftsquarebrc x rightsquarebrc } file
awk {a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc  " " $2} END {for( i in a ) print i a leftsquarebrc i rightsquarebrc } *.csv sort -n
awk {a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc  FS $2} END {for (i in a) print i a leftsquarebrc i rightsquarebrc } file1 file2 sort
awk {a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc  FS $2}END{for(i in a) print i,a leftsquarebrc i rightsquarebrc } file
awk {a leftsquarebrc $1" "$2 rightsquarebrc ++}END{for(i in a){print i" = "a leftsquarebrc i rightsquarebrc }} your_file
awk {a leftsquarebrc $1" "$2 rightsquarebrc =a leftsquarebrc $1" "$2 rightsquarebrc " "$3" "$4;}END{for(i in a)print i,a leftsquarebrc i rightsquarebrc } your_file
awk {a leftsquarebrc $1*1 rightsquarebrc ;b leftsquarebrc $1*1 rightsquarebrc =$0}END{asorti(a);for(i=1;i leftanglebrc =length(a);i++)print b leftsquarebrc a leftsquarebrc i rightsquarebrc  rightsquarebrc ;} file2 file1
awk {a leftsquarebrc $2 rightsquarebrc +=$1} END{for (i in a) print a leftsquarebrc i rightsquarebrc ,i} *cnt
awk {a leftsquarebrc $2 rightsquarebrc =$0}END{for(x in a)print a leftsquarebrc x rightsquarebrc } fileA fileB
awk {a leftsquarebrc $2 rightsquarebrc } END { for (i in a) { if (+i  rightanglebrc  45895) print i } } test-file_long.txt
awk {a leftsquarebrc $6 rightsquarebrc } END{for (i in a) s++;print "Total no:of residues in", FILENAME, ":",s} file
awk {a leftsquarebrc $6 rightsquarebrc } END{print "Total no:of residues in", FILENAME, ":", length(a)} file
awk {a leftsquarebrc $7 rightsquarebrc +=$10}END{for(x in a)print x, a leftsquarebrc x rightsquarebrc } yourLogfile sort -r -n -k 2 head -n 10
awk {a leftsquarebrc $NF rightsquarebrc ++} END{for (el in a) print a leftsquarebrc el rightsquarebrc  " lines end with \""el "\""} file sort -n -r
awk {a leftsquarebrc $NF rightsquarebrc +=$1}END{for(x in a) printf "%s\n%4.2f\n",x,a leftsquarebrc x rightsquarebrc } file
awk {a leftsquarebrc ++i%4 rightsquarebrc =$0} END {print a leftsquarebrc ++i%4 rightsquarebrc ,a leftsquarebrc ++i%4 rightsquarebrc ,a leftsquarebrc ++i%4 rightsquarebrc ,a leftsquarebrc ++i%4 rightsquarebrc } OFS=n
awk {a leftsquarebrc FNR rightsquarebrc +=$7}END{for(i=1;i leftanglebrc =FNR;i++)print a leftsquarebrc i rightsquarebrc /(ARGC-1);} c*
awk {a leftsquarebrc NR rightsquarebrc =$0;}/eee/{a leftsquarebrc NR-3 rightsquarebrc ="www\n" a leftsquarebrc NR-3 rightsquarebrc ;}END{for(i=1;i leftanglebrc =NR;i++)print a leftsquarebrc i rightsquarebrc ;} file
awk {a leftsquarebrc NR rightsquarebrc =$0}/#MyUniqueString/{a leftsquarebrc NR-1 rightsquarebrc =a leftsquarebrc NR-1 rightsquarebrc "domain4.com"}END{for(i=1;i leftanglebrc =NR;i++)print a leftsquarebrc i rightsquarebrc } configFile
awk {a leftsquarebrc NR rightsquarebrc =$0}END{ #here you could do whatever with a leftsquarebrc 1 rightsquarebrc  (a) and a leftsquarebrc 2 rightsquarebrc  (b)} file
awk {a leftsquarebrc NR rightsquarebrc =$1} END {for (k in a) if(a leftsquarebrc k rightsquarebrc =="monkey") print k} textile
awk {a leftsquarebrc NR rightsquarebrc =$1}END{for(i=1;i leftanglebrc =3;i++)for(j=1;j leftanglebrc =NR;j++)print a leftsquarebrc j rightsquarebrc } file
awk {a leftsquarebrc i++ rightsquarebrc =$0};/-----/{++j};j==3{t="";for(k=0;k leftanglebrc i;++k)t=t a leftsquarebrc k rightsquarebrc "\n";b leftsquarebrc ++l rightsquarebrc =t;i=j=0}END{for(i=l;i;--i)printf "%s", b leftsquarebrc i rightsquarebrc } file
awk {a leftsquarebrc i++ rightsquarebrc =$0}i==7{t="";for(i=0;i leftanglebrc 7;++i)t=t a leftsquarebrc i rightsquarebrc "\n";b leftsquarebrc ++j rightsquarebrc =t;i=0}END{for(;j;--j)printf "%s", b leftsquarebrc j rightsquarebrc } file
awk {a leftsquarebrc i++ rightsquarebrc =$0}i==7{t="";for(k=0;k leftanglebrc i;++k)t=t a leftsquarebrc k rightsquarebrc "\n";b leftsquarebrc ++l rightsquarebrc =t;i=0}END{for(i=l;i;--i)printf "%s", b leftsquarebrc i rightsquarebrc } file
awk {a leftsquarebrc int($1/0.2) rightsquarebrc ++}END{for(i in a)print i*0.2 "-" (i+1)*0.2, a leftsquarebrc i rightsquarebrc } file sort -n
awk {a leftsquarebrc j++ rightsquarebrc =$0}END{for(i=0;i leftanglebrc j-2;i++){print a leftsquarebrc i rightsquarebrc }} filename
awk {a= a",'"'"'"$1"'"'"'"}END{print a} file.txt
awk {a= a",'\''"$1"'\''"}END{print a} file.txt
awk {a= a",\x27"$1"\x27"}END{print a} file.txt
awk {a=$0;}END{if(!a)print FILENAME} file
awk {a=$1 OFS $2 OFS $3; for (i=4; i leftanglebrc NF; i+=2) print a,$i,$(i+1); a=""} file
awk {a=a colon $0; colon=":"} END {print a} INPUT.TXT
awk {a=int(($2+$3)/2+0.5); $2=a; $3=a+1;print}
awk {a=substr($0, 17, 1);a=(a~/ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc /)?a:"C";print substr($0,1, 16) a substr($0,18)} file
awk {a=substr($1,5,4); print $0" pass"a} YOUR_FILE
awk {a=substr($1,length($1)-3,4); print $0" pass"a} YOUR_FILE
awk {a=substr($12,1,3);b=substr($15,1,3)} !/^#/ && ((a=="1/1" && b=="1/1") || (a=="0/0" && b=="0/0") || (a=="1/1" && b=="./.") || (a=="./." && b=="1/1") || (a=="0/0" && b=="./.") || (a=="./." && b=="0/0")) $1
awk {arr leftsquarebrc $1 rightsquarebrc +=$2; ++n leftsquarebrc $1 rightsquarebrc } END {for (i in arr) {print " leftsquarebrc epoch", i,arr leftsquarebrc i rightsquarebrc /n leftsquarebrc i rightsquarebrc }}
awk {arr leftsquarebrc $1 rightsquarebrc +=$2;} END { for (i in arr) print i, arr leftsquarebrc i rightsquarebrc } file
awk {arr leftsquarebrc $1 rightsquarebrc +=$2;} END {for (i in arr) print i, arr leftsquarebrc i rightsquarebrc } filename
awk {arr leftsquarebrc $2 rightsquarebrc +=$1} END {for (i in arr) {print arr leftsquarebrc i rightsquarebrc ,i}}
awk {arr leftsquarebrc $NF rightsquarebrc  = $0} END { for (key in arr) { print arr leftsquarebrc key rightsquarebrc  } } file.log
awk {array leftsquarebrc $1 rightsquarebrc +=$2} END { for (i in array) {print "Sum for time stamp",i,"=", array leftsquarebrc i rightsquarebrc }} data.txt
awk {b=gensub(/page-( leftsquarebrc 0-9 rightsquarebrc +)/,"apple-\\1.html","g",$0) ;print b  } file
awk {c += sub(/ leftsquarebrc ^= rightsquarebrc +=/,"cuts leftsquarebrc "c+0" rightsquarebrc =") }1 file
awk {c+=1} END if c (c rightanglebrc 2) print $0 FILE
awk {c=1 ; for (f in ARGV) {print c, f ; c++ } } *
awk {cmd="c_program "$1; cmd|getline l;print $1,$2-l} file
awk {cnt leftsquarebrc $2 rightsquarebrc ++} END{for (gene in cnt) print gene, cnt leftsquarebrc gene rightsquarebrc } file
awk {command=substr($0,70); print command} $TEMPFILE
awk {count leftsquarebrc $1 " " $2 rightsquarebrc ++} END {for (key in count) print key, count leftsquarebrc key rightsquarebrc } sort
awk {count leftsquarebrc $8 rightsquarebrc ++}END{for(i=1;i leftanglebrc 925;i++) print i, count leftsquarebrc i rightsquarebrc " HIT"} myfile.txt
awk {d = $1-$2; if (-1  leftanglebrc = d && d  leftanglebrc = 1) next; else print} oldfile
awk {d=$3-$4;$0=(d rightanglebrc 0?d:-d) "#"$0}7 file sort -n sed s/^.*#//
awk {delete z; d=""; split($4,arr,";");for (k in arr) z leftsquarebrc arr leftsquarebrc k rightsquarebrc  rightsquarebrc =k; for (l in z) d=d";"l; print($1,$2,$3,substr(d, 2))} file_name
awk {f=$1; $1=$2=""; print  rightanglebrc  f} file
awk {f=$1; $1=$2=""; sub("  ", ""); print  rightanglebrc  f} file
awk {f=0; if (alen==length($1)) {for (i=a;i leftanglebrc =$1;i++) print i} else {f=1}} {a=$1; alen=length(a)} a==(i-1){a++} f{print; a++}
awk {file="inputfile_"$3".txt";print  rightanglebrc  rightanglebrc  file;close(file)} inputfile.txt
awk {fname=substr($0, 0, 2); print  rightanglebrc  rightanglebrc fname} input.txt
awk {for (i = 2; i  leftanglebrc = 30; i++) {if ($i  leftanglebrc  0.05) {print $1, $i  rightanglebrc  "phen_" i ".txt"}}} test.txt
awk {for (i=0; i leftanglebrc $2; i++) print $1} file
awk {for (i=0; i leftanglebrc 4; i++) printf(" "); print $0} test
awk {for (i=0;i leftanglebrc 2;i++) sub(",", "|", $0); print} file.txt
awk {for (i=1; i leftanglebrc =16; ++i) if($i != 0) {print;next}} file.csv
awk {for (i=1; i leftanglebrc =NF; ++i) { $i=toupper(substr($i,1,1)) tolower(substr($i,2)); } print }
awk {for (i=1; i leftanglebrc =NF; i++) printf "%.3f %s", $i, (i==NF?RS:FS)} file
awk {for (i=1; i leftanglebrc =NF; i++) {if ($i ~ /one/) {a++; if(a  leftanglebrc = 6) sub("one", "three", $i)}}; print}
awk {for (i=1;i leftanglebrc 5;i++) if (NR%40==i) print $0} file
awk {for (i=1;i leftanglebrc =NF;i++) if ((1 leftanglebrc =i && i leftanglebrc =7) || (9 leftanglebrc =i && i leftanglebrc =15) || i==19) printf("%s ", $i); print ""} file
awk {for (i=1;i leftanglebrc =NF;i++) if($i ~/mystring/) print $1, $i, $(i+2)}
awk {for (i=1;i leftanglebrc =NF;i++) {printf $i" "; if ($i~/TTT/) exit}} file
awk {for (i=1;i leftanglebrc =NF;i++)if($i==-1) print NR, i} file.txt
awk {for (i=2;i leftanglebrc =NF;i++) printf $i" ";printf "\n"} file
awk {for (i=3;i leftanglebrc =NF;++i) {print $i}}
awk {for (i=3;i leftanglebrc =NF;i+=3)$i*=3; print} input.txt
awk {for( i=0;i leftanglebrc 3;i++) a leftsquarebrc i rightsquarebrc =a leftsquarebrc i+1 rightsquarebrc ;a leftsquarebrc 3 rightsquarebrc =$0} END {print a leftsquarebrc 0 rightsquarebrc ,a leftsquarebrc 1 rightsquarebrc ,a leftsquarebrc 2 rightsquarebrc ,a leftsquarebrc 3 rightsquarebrc } OFS=n
awk {for(i = 1; i  leftanglebrc = NF; i++) { x = "0x" $i + 0; printf(" %d", x); printf "\n";}
awk {for(i=0;i leftanglebrc $1;i++) printf "%.2f %.2f\n", $2+i*$3/$1, $4+i*$5/$1; } file
awk {for(i=0;i leftanglebrc $2;i++) print $1;} file.in
awk {for(i=0;i leftanglebrc $3;i++) print $1;} file.in
awk {for(i=1; i leftanglebrc =NF; i++) print $i} sort -n
awk {for(i=1; i leftanglebrc =NF; i++) printf("%d\n",$i)} sort -n
awk {for(i=1; i leftanglebrc =NF; i++) printf("%d\n",$i)} sort -n paste -s -d  
awk {for(i=1;i leftanglebrc 11;i++)$i="";print }
awk {for(i=1;i leftanglebrc 11;i++)$i="";sub(/-.*$/,"");sub(/^ */,"")}7
awk {for(i=1;i leftanglebrc =30;++i) feasible leftsquarebrc i+$2 rightsquarebrc =1;} {val leftsquarebrc NR rightsquarebrc  = $4; letter leftsquarebrc NR rightsquarebrc  = $3} END {for(y in val) if(feasible leftsquarebrc val leftsquarebrc y rightsquarebrc  rightsquarebrc ) print letter leftsquarebrc y rightsquarebrc , val leftsquarebrc y rightsquarebrc }
awk {for(i=1;i leftanglebrc =6;i++) if(length($i) leftanglebrc 2) $i=0$i}1 file
awk {for(i=1;i leftanglebrc =NF;i++) if ($i=="--pe_cnt") print $(i+1)} inputFile
awk {for(i=1;i leftanglebrc =NF;i++) if($i~/A|C|D/) printf $++i FS; print ""} file
awk {for(i=1;i leftanglebrc =NF;i++) sub(/string leftsquarebrc 0-9 rightsquarebrc */,"string"int(10*rand()),$i)}1 file
awk {for(i=1;i leftanglebrc =NF;i++) {if ($i=="$$$$") count++; if ($i=="$$$$" && count==3396) print $(i+1);}} INPUT_FILE
awk {for(i=1;i leftanglebrc =NF;i++) {if ($i~/:Y$/) c++;}}{print c; c=0} inputfile
awk {for(i=1;i leftanglebrc =NF;i++)if $1~/^locus_tag|^product|db_xref/) print $i} Chrom.txt
awk {for(i=1;i leftanglebrc =NF;i++)if(!a leftsquarebrc $i rightsquarebrc ++)print $i} ORS= FS= *.ext
awk {for(i=1;i leftanglebrc =NF;i++)if($i rightanglebrc 10)printf "%s ",$i;else break;print  ""} file
awk {for(i=1;i leftanglebrc =NF;i++)if($i~/dbsnp/)print $i}!/dbsnp/{print "N/A"} dbsnp.tsv
awk {for(i=1;i leftanglebrc =NF;i++)if(i%8==0)print $i;else printf $i" "} auth_data
awk {for(i=1;i leftanglebrc =NF;i++){ if($i=="yyy"){print $i} } } file
awk {for(i=1;i leftanglebrc =NF;i++){$i=$i-1}}1 infile
awk {for(i=1;i leftanglebrc =NF;i++){t=$0;w=$i;gsub(/\S/,"-");$i=w;print;$0=t}} file
awk {for(i=2; i leftanglebrc =NF; i++) print $i} bth.data
awk {for(i=2; i leftanglebrc =NF; i++)$i="(" ++k ")" $i}1 FS=i OFS=i
awk {for(i=2;i leftanglebrc =NF;i++)$i !~ /var_.*\.h/ && $i=""}1 Makefile
awk {for(i=2;i leftanglebrc =NF;i++)if($i!=$1)printf(" %d",$i);printf("\n")}
awk {for(i=2;i leftanglebrc NF;i++)printf "%s",$i OFS; if (NF) printf "%s",$NF; printf ORS}
awk {for(i=3;i leftanglebrc =51;i+=4) printf "%s ",$i ;for(i=52;i leftanglebrc =119;i++) {printf "%s ",$i} ;print ""} file
awk {for(i=4;i leftanglebrc NF;i++)printf "%s",$i OFS; if (NF) printf "%s",$NF; printf ORS}
awk {for(i=j=7; i  leftanglebrc  NF; i+=2) {$j = $i"/"$(i+1); j++} NF=j-1}1 input
awk {getline second  leftanglebrc  "example"; printf("%s\t%s\n",$0,second)} input.txt
awk {getline t leftanglebrc "file1"; print $0-t} file2
awk {getline x  leftanglebrc  "file2"}$0 rightanglebrc x{i++}END{print i} file1
awk {gsub(" leftsquarebrc . rightsquarebrc ", "D", $0)}{print $0" rightsquarebrc "}
awk {gsub(" leftsquarebrc ^0-9 rightsquarebrc +"," "); print}
awk {gsub("###",NR,$0);print}
awk {gsub("/.*", ""); print $2} /usr/share/nmap/nmap-services
awk {gsub("\\.", "D", $0)}{print $0" rightsquarebrc "}
awk {gsub("_",".",$1)}1 ./infile
awk {gsub(/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc /,"")}length!=1 file
awk {gsub(/ leftsquarebrc  leftsquarebrc :upper: rightsquarebrc  rightsquarebrc /,"_&");sub(/^_/,"");print tolower($0)}
awk {gsub(/ leftsquarebrc 0-9 rightsquarebrc .*|_/,x);gsub(/\.$/,x)} {print $0 ".apk"} file
awk {gsub(/,/," ");print NR,$0} file
awk {gsub(/,/," ");print NR,$0} file column -t
awk {gsub(/.../,"& ")}1
awk {gsub(/./,"& ",$2);print $2} yourFile
awk {gsub(/ACT|GGG/,"")}1 file
awk {gsub(/\./,"");print $1,$5} file
awk {gsub(/\/.*\//,"",$1); print} file
awk {gsub(/\n\n+/,"\n\n");printf $0} RS=^$ file
awk {gsub(/\|g/,"")}8 file
awk {gsub(/it.s an error/, NR" &"); print } filename
awk {gsub(/temp/,FILENAME)}1 file
awk {i=RT=="\n"?1:RT;while(i--) if (NF) print $0} RS= leftsquarebrc 0-9 rightsquarebrc +|n file
awk {id = gensub(":", "", 1, $6)} /client.dom.lcl/ && !(/timeout/||/disconnect/) {msgid leftsquarebrc id rightsquarebrc  = 1} {if (id in msgid) print} sampledata
awk {if (!($0 in ids)) ids leftsquarebrc $0 rightsquarebrc  = ++i; print ids leftsquarebrc $0 rightsquarebrc }
awk {if (!($18==0 && $19==0 && $20==0 && $21==0)) print $0} file
awk {if ($0 ~ /^\s*$/) {print line; line="";} else line=line $0 "|"} file.txt
awk {if ($0 ~ /start/) a++} {print  rightanglebrc  rightanglebrc  "file"a} file
awk {if ($1 == "false") {array leftsquarebrc $2 rightsquarebrc  = $1} else if (array leftsquarebrc $2 rightsquarebrc  != "false") array leftsquarebrc $2 rightsquarebrc  = $1} END {for (i in array) if (array leftsquarebrc i rightsquarebrc  == "true") print i} inputfile
awk {if ($1 == 10993) {print $NF}} someFileName
awk {if ($1 in x){x leftsquarebrc $1 rightsquarebrc =x leftsquarebrc $1 rightsquarebrc ","$2}else{x leftsquarebrc $1 rightsquarebrc =$0}}END{for(i in x)print x leftsquarebrc i rightsquarebrc } yourfile
awk {if ($1 leftanglebrc prev) {offset++}; print ($1+(offset*10)); prev=$1} input_file
awk {if ($1 leftanglebrc prev){next}}{prev=$1; gsub("\"", "", $2); $2=substr($2,0,3);$2="\""$2"\""}1 inputfile
awk {if ($1 leftanglebrc prev){next}}{prev=$1}1 inputfile
awk {if ($1 ~ /^(LOAD|IMPORT)/) {gsub(/\\/, "/", $2); system("cat " $2)} else print} test.txt
awk {if ($1!="C" && $1!="D") {print $0}} file
awk {if ($1=="3") A=NR}{ if (NR==(A+1)&&A) print $0}
awk {if ($2 rightanglebrc 0) print; $3=0; for (i=1; i leftanglebrc $2; i++) print} inputfile
awk {if ($2!=a) {print $2"\t"$3"\t"$1} else {print "\t\t"$3"\t"$1}}{a=$2}
awk {if ($2=="abc" || $2="def") print "blah" }
awk {if ($2==5 && $3  rightanglebrc = 40 && $3 leftanglebrc =50 && $6 rightanglebrc =0.96 && $1=="---") print } Infile.txt
awk {if ($3~/^TCF|^GLI/ || NR==1 ) print $0,FILENAME} /path/to/file1 /path/to/file2
awk {if ($9=="ice") {$11="keep"} print} inputfile
awk {if ((FNR % 4)==2) {print FNR":"$0}} inputFile grep (=( leftsquarebrc 14-9 rightsquarebrc | leftsquarebrc 23 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc )
awk {if (NF  rightanglebrc  1 ) print  rightanglebrc  "pass"; else print  rightanglebrc  "fail"} input
awk {if (NF  rightanglebrc  max) {max = NF; line=$0}} END{print line} twister.txt
awk {if (NR == 1) {temp1=$2;min=$1;max=$1;} else if ((NR % 2)!=0) {temp2=$2; if (temp1 == temp2) {max=$1} else {print (temp1,min,max); temp1=$2;min=$1;max=$1} } } END{if ((NR % 2)!=0) {temp2=$2; if (temp1 == temp2) {max=$1} else {print (temp1,min,max);} print (temp2,min,max) } } inputfile
awk {if (NR rightanglebrc 1) print old; old=$0;} END { printf "%s", old }
awk {if (NR%5 != 0) {printf $1", "} else {printf $1"\n"}} file
awk {if (NR==FNR) a leftsquarebrc $2 rightsquarebrc ; else if (!($2 in a )) {print $2} }
awk {if (a leftsquarebrc $1 rightsquarebrc ) next; a leftsquarebrc $1 rightsquarebrc ++} 1 file
awk {if (a leftsquarebrc $1,$3,$4 rightsquarebrc ++ == 0) print  rightanglebrc  "file1"; else print  rightanglebrc  "file2" } input
awk {if (flag) print line; line = $0; flag = 1} END {gsub(" leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc +$","",line); printf line}
awk {if (index($0, " leftanglebrc char") == 0) print $0} xmlfile
awk {if (last==$1) {flag=0} else {last=$1; flag=1}; print $0,flag} file.txt
awk {if (substr($0,299,11)=="")print $0} file
awk {if( !seen leftsquarebrc $1 rightsquarebrc ++ ) print } input-file
awk {if($0~/./){a leftsquarebrc $0 rightsquarebrc ++;print $0" leftsquarebrc "a leftsquarebrc $0 rightsquarebrc " rightsquarebrc ";} else print} file
awk {if($0~/\ leftanglebrc codingScheme\ rightanglebrc BDR\ leftanglebrc \/codingScheme\ rightanglebrc /){if(x~/productCode/)count++};x=$0}END{print count} your_file
awk {if($0~/\*$/)sub(/ leftanglebrc path rightanglebrc /,"ls -lrt ");else sub(/ leftanglebrc path rightanglebrc /,"find ")}7 file
awk {if($1=="foo") {TERM=$2; gsub(",", "", TERM); SUM+=TERM}}END{print "foos ",SUM}
awk {if($1=="foo") {gsub(",", "", $2); SUM+=$2}}END{print "foos ",SUM}
awk {if($2 rightanglebrc 10) {print  rightanglebrc  "outfile1"} else {print  rightanglebrc  "outfile2"}} infile
awk {if($2~/^AF1/) print $1 "\tNULL\t" $2 "\t" $3; else print} input.vcf
awk {if($3 in a)a leftsquarebrc $3 rightsquarebrc =$2==1?$0:a leftsquarebrc $3 rightsquarebrc ;else a leftsquarebrc $3 rightsquarebrc =$0}END{for(i in a)print a leftsquarebrc i rightsquarebrc } file
awk {if($3=="DD") {split($0, a); print a leftsquarebrc 1 rightsquarebrc ;}} file
awk {if(NR  rightanglebrc  1 && $2 != prev_two){printf "\n";} prev_two=$2; print $0} A
awk {if(NR rightanglebrc 1){print _n-$4};_n=$4} your.file
awk {if(NR%3 == 0){printf("%s\n",$0);}else{printf("%s ",$0);}} ip_file.txt
awk {if(NR==FNR)idx leftsquarebrc $0 rightsquarebrc ;else if(!(FNR in idx))print} idx.txt data.txt
awk {if(s==0 && /abended/){s = 1;st = $NF}}{if(s && /restarted/) {et = $NF}}1; /completed/{s=0;print "Downtime of this job was: "et "-" st} tmp.log
awk {k=$1;a leftsquarebrc k rightsquarebrc =a leftsquarebrc k rightsquarebrc ?a leftsquarebrc k rightsquarebrc ","$4:$4}END{for(x in a)print x":"a leftsquarebrc x rightsquarebrc } file
awk {k=tolower($2); arr leftsquarebrc k rightsquarebrc =arr leftsquarebrc k rightsquarebrc  " " NR} END{for(v in arr) print v, arr leftsquarebrc v rightsquarebrc } test.txt sort -f -k 1,1
awk {k=tolower($2); arr leftsquarebrc k rightsquarebrc =arr leftsquarebrc k rightsquarebrc  " " NR} END{n=asorti(arr, dest); for(i = 1; i  leftanglebrc = n; i++) print dest leftsquarebrc i rightsquarebrc , arr leftsquarebrc dest leftsquarebrc i rightsquarebrc  rightsquarebrc } test.txt
awk {l=l$0;if(NR%3==0){print l;l=""}else{l=l","}}END{if(l!=""){print substr(l,1,length(l)-1)}} yourData.txt
awk {l=substr($0,1,10);r=substr($0,11);gsub(/n/,"m",l);print l r} file
awk {line=$0; sub(/^ leftsquarebrc ^| rightsquarebrc +\|/, "", line)} !found leftsquarebrc line rightsquarebrc ++
awk {ln=length(ARGV leftsquarebrc 1 rightsquarebrc ); if(NR==7) print substr(ARGV leftsquarebrc 1 rightsquarebrc ,0,ln-4)"..."$0} ABC.mod
awk {match($0, /Pattern\w+/)} { print $1, substr($0, RSTART, RLENGTH) } file
awk {match($0,/PASSWORD=(.*==)/,a); print a leftsquarebrc 1 rightsquarebrc ;} input.txt
awk {max=$1;for(i=2;i leftanglebrc =NF;i++)if($i rightanglebrc max)max=$i;sum=sum+max;}END{print sum+0}
awk {mm=substr($4, 1, 4); cnt leftsquarebrc $3 " " mm rightsquarebrc ++} END{for(a in cnt) print a " " cnt leftsquarebrc a rightsquarebrc } Text.log
awk {n leftsquarebrc $1 rightsquarebrc }END{print length(n)} s.log
awk {n2=n1;n1=n;n=$0;if(NR%3==0){printf"%s,%s,%s\n",n2,n1,n}} yourData.txt
awk {n=split($1,array,"*"); for (i=3;i leftanglebrc =NF;i++) {print $i  rightanglebrc array leftsquarebrc 1 rightsquarebrc }} input
awk {names leftsquarebrc $1 rightsquarebrc =$1;vals leftsquarebrc $1 rightsquarebrc +=$2} END {for(i in names){sum+=vals leftsquarebrc i rightsquarebrc ;print i, vals leftsquarebrc i rightsquarebrc }; print "total " sum} foo.txt
awk {num leftsquarebrc $1,$2 rightsquarebrc ++; fruits leftsquarebrc $1 rightsquarebrc =1; colors leftsquarebrc $2 rightsquarebrc =1}END{for(i in fruits) {for(j in colors) printf("%d ", num leftsquarebrc i,j rightsquarebrc ); printf("\n");}}
awk {old=$0;new=/path/pathsub/;system("mv \""old"\" "new)} your_file_with_file_list
awk {out=$1; for (i=2; i leftanglebrc =NF; i++) {out=out"\t"i-1":"$i} {print out}} inputfile
awk {p = split($0,a,"\t"); if (length(a leftsquarebrc 3 rightsquarebrc )  leftanglebrc  1000) print $0} test.txt
awk {p=1.2*$0;$0=p rightanglebrc 1?1:p;printf "%.5f\n",$0} file
awk {p=1.2*$0;$0=p rightanglebrc 1?1:p}7 file
awk {print   rightanglebrc  "data"substr($1,0,8)".dat"} myfile
awk {print  rightanglebrc  "Chr"$1".gen"} file
awk {print  rightanglebrc  ("file" ($2~/+/?1:2))} file
awk {print  rightanglebrc  rightanglebrc  "output." $2} input.file
awk {print  rightanglebrc ("SMALL_BATCH_OF_FILES_" int((NR+2)/3))} BIG_INPUT_FILE
awk {print "$line_number $ipv4 $ipv6" $1 $2 $3}
awk {print "'" $1 "':'" $2 "'"} input
awk {print "'hello'"} filename
awk {print ","$0} file1.csv
awk {print "INSERT INTO users (email,paypal_tran,CCReceipt) VALUES"; print "(\x27"$1"\x27,\x27"$2"\x27,\x27"$3"\x27);"} input.txt
awk {print "chr"$0} file.in
awk {print "dir: "$1}
awk {print "dm" NR "," $0} input.csv
awk {print "dm" NR+255","$0} test
awk {print "echo",$1,$2,$3} $logfile sh -x
awk {print "foo"} input
awk {print "line #", NR, "-", gsub("0/0",""), gsub("0/1",""), gsub("1/1","")} file
awk {print "prefix" $0} file
awk {print "s/" tolower($1) "/" tolower($2) "/g;s/" toupper(substr($1,1,1)) tolower(substr($1,2)) "/" toupper(substr($2,1,1)) tolower(substr($2,2)) "/g"} words.dat
awk {print $'$n'} out.txt
awk {print $(NF - 1), $NF}
awk {print $(NF-1), $NF;} filename
awk {print $(NF-1),"\t",$NF} file
awk {print $(NF-1)}
awk {print $(NF-1)} file
awk {print $(NF-2), $(NF-1), $NF}
awk {print $(NF-2), $(NF-1), $NF} file
awk {print $0  rightanglebrc  "file_"$1"_"$2} file
awk {print $0  rightanglebrc  "file_"substr($4,0,1)} yourfile
awk {print $0 ; exit(0); }
awk {print $0 OFS $17 OFS $5} test_s sort -n -k 18 -k 19 uniq -c -f 17 awk {NF=18;print}
awk {print $0 rightanglebrc $2".txt"} file
awk {print $0" or"}
awk {print $0"|"$(date +\"%d-%m-%Y\")} date +"%d-%m-%Y"
awk {print $0+0}
awk {print $0, "7"}  inputfile
awk {print $0, "or"}
awk {print $0, $2 + $NF } input_file
awk {print $0, $2} file
awk {print $0, ++a leftsquarebrc $0 rightsquarebrc }
awk {print $0, gsub("Y", "Y"), gsub("R", "R")}
awk {print $0,"\t",FILENAME} file
awk {print $0,$2+$3+$4+$5+$6+$7} input.txt
awk {print $0,FILENAME} OFS=t file
awk {print $0,FILENAME} file1 file2
awk {print $1 "  "strtonum("0x"substr($2,11))-0xca115ac0 "  "strtonum($3)-0x3665fb5f1ac1 } input
awk {print $1 " "  $2 "\n" $3 " " $4 "\n rightanglebrc "}
awk {print $1" "$2} a b c sort uniq -c awk {if ($1==3){print $2" "$3}}
awk {print $1"\t"$8"\t"$9} yourfile.tsv
awk {print $1$2" "$3} inputFile
awk {print $1$2$3$4$5$6$7$8$9$10$11$12}
awk {print $1+1}
awk {print $1, " ", gensub(/.*(serverfile leftsquarebrc 0-9 rightsquarebrc +).*/, "\\1", $0)} file.txt
awk {print $1, $2, $3, $4} file
awk {print $1, $3} filename
awk {print $1,$2,$3,"\t",$4,$5} file column -t -s -$ -t
awk {print $1,$2,$3,$4,$5} FS=| OFS=t
awk {print $1,$2,$3,$4,$5} FS=| OFS=t
awk {print $1,$2,$9,$NF}
awk {print $1,$2} RS= file sort awk {print $1 "\n" $2 "\n"}
awk {print $1,$3,$(NF-1),$NF} your.file
awk {print $1-$EFERMI , ($2+$3)/32}
awk {print $10 ".torrent"}
awk {print $10} cut -f 1 -d -,
awk {print $11,$12}
awk {print $1; exit}
awk {print $1FS"has {"substr($0,index($0,$2))"} itmes in his bag."} data.txt
awk {print $1}
awk {print $1}
awk {print $1}
awk {print $1}
awk {print $1} /path/to/file
awk {print $1} /proc/$PPID/cmdline
awk {print $1} file
awk {print $1} file.txt xargs dig +short
awk {print $1} file1 fgrep -f file2
awk {print $1} input.txt xargs -n 1 -I pattern grep -r -n pattern dir
awk {print $1} read ip ping -c 1 $ip echo $ip IS UP echo $ip IS DOWN
awk {print $2,$1} ip-list
awk {print $2}
awk {print $2}
awk {print $2} FILENAME
awk {print $2} dihed_*.dat
awk {print $2} dl.txt mv $$.tmp dl.txt
awk {print $2} file
awk {print $2} file.txt
awk {print $2} frequency.txt grep -F -x -f dictionary.txt
awk {print $2} input
awk {print $2} sort -r -n perl -e $d=.1;@l= leftanglebrc  rightanglebrc ;print $l leftsquarebrc int($d*$#l) rightsquarebrc 
awk {print $3 - $2} temp.txt
awk {print $3 - $2} test.txt
awk {print $3, $4, $5, $6, " leftanglebrc a href=" $7 " rightanglebrc " $7 " leftanglebrc /a rightanglebrc "}
awk {print $39} /proc/2338/stat
awk {print $3}
awk {print $3}
awk {print $3} file
awk {print $4".jpg"}
awk {print $4} tr -d ,
awk {print $6} data.txt
awk {print $7} temp
awk {print $NF}
awk {print $NF}
awk {print $NF} file.txt
awk {print $NF} your_file
awk {print $N} RS= file
awk {print ($1  rightanglebrc  0 && $1  leftanglebrc  $2)}
awk {print ($1 - 1280449530) " " $2} file
awk {print ($1 ~ /\.$/ ? "OK" : "NOK"), $0} file
awk {print ($4) ? $4 : " "} FILE.CSV
awk {print ((NR-1)%3)+1 $0} $1
awk {print ((NR-1)%3)+1, $0} $1
awk {print FILENAME " : " $0} V*
awk {print FILENAME, $0} V*
awk {print NF, $0} file sort -r -n cut -d -  -f 2-
awk {print NR, $0}
awk {print NR-1 "," $0}
awk {print gensub(/\y( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc )-/, "\\1:", "g")} file
awk {print gsub("ENST leftsquarebrc 0-9 rightsquarebrc +","")} INPUTFILE
awk {print gsub(/\"\|\"/,"&",$0) +1 } input.txt
awk {print gsub(/\"\|\"/,"&",$0)} input.txt
awk {print gsub(/t/,)}$FILE
awk {print gsub(/t/,)}inputfile
awk {print int($3)}
awk {print name_of_created_file | "./process.sh &"}
awk {print strftime("%c", (  leftanglebrc timestamp in milliseconds rightanglebrc  + 500 ) / 1000 )}
awk {print strftime("%c",$1)} input.txt
awk {print substr($0,0,80)} your_file
awk {print substr($0,1,299) substr($0,501)} file
awk {print substr($0,2,6)} file
awk {print substr($0,index($0,"FBCD"),200) file
awk {print($0 leftanglebrc 0?0:$0)} file.txt
awk {print($2,"\t",$1)} abcd.txt
awk {print; $3=0; for (i=1; i leftanglebrc $2; i++) print} inputfile
awk {printf "%-27s%-18s%-11s$%-14.2f$%.2f\n",$1,$2,$3,$4,$3*$4} FS=: foo.txt
awk {printf "%.2f %.2f\n", $4 / 1024, $6 / 1024 }
awk {printf "%.2f\n",$0/59.5} ball_dropping_times
awk {printf "%09d ", NR}1 file.txt
awk {printf "%d %d\n", $1, $1-a; a=$1;} file
awk {printf "%f\n", your_field .... } file
awk {printf "%s "(!NF?"\n\n":""),$0} file
awk {printf "%s ", $3}
awk {printf "%s ",$0} !NF {print "\n"} file
awk {printf "%s ",$1;for(i=12;i leftanglebrc NF;i++)printf "%s ",$i;printf "\n"} file
awk {printf "%s %.2fMB %s\n", $1, $2/1024, $3 } file
awk {printf "%s"(NR%5?", ":"\n"),$1} file
awk {printf "%s", $0}
awk {printf "%s",$0}/;$/{print ""} file
awk {printf "%s",$0}/;$/{print ""} file
awk {printf "%s%s", (NR rightanglebrc 1&&/^ leftsquarebrc 0-9 rightsquarebrc {10}/?"\n":""),$0}END{print ""} file
awk {printf "%s%s%s\n", "\"", $0, "\" = \"\";"} file
awk {printf "%s\0", $0}
awk {printf "create synonym classa.%-30s for classb.%s;\n",$1,$1} student.txt
awk {printf $1":"} a.txt
awk {printf $1FS$2; for (i=5; i  leftanglebrc = NF; i++) printf FS$i; print NL }
awk {printf $1} END{print "\n"}
awk {printf ("%-10.9s%s\n", $1,$2)} file
awk {printf NR%37?"%d ":"%d\n", $1} file
awk {printf colon $0; colon=":"} END {printf "\n" } INPUT.TXT
awk {printf( "Type %s, %s", $4, $5 )} FS=, $i
awk {printf("%d %s\n", length($NF), $0)} junk.lst sort -n -k -1 -, -1 sed s/^ leftsquarebrc 0-9 rightsquarebrc * //
awk {printf("%d, %d, %d, ", 22, $1, NR); for(i=2;i leftanglebrc =NF;++i) printf("%d, ", i)} file
awk {printf("%d\n", ($1+$2)/2)} input
awk {printf("%s ", $0)}
awk {printf("%s ", $0)} data.txt
awk {printf("%s - ", $1) ; system("ip2country \"" $1 "\"")}
awk {printf("%s%s",$0,NR==2?OFS:ORS)} file
awk {printf("'"'"'%s'"'"',", $0)} END{print ""} 1.txt
awk {printf("\x27%s\x27,", $0)} END{print ""} 1.txt
awk {print} RS= leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +| + file.txt
awk {print}; ""~$0 {getline; print "$" $0} input_file
awk {r=$NF;k=$1$2;a leftsquarebrc k rightsquarebrc =a leftsquarebrc k rightsquarebrc ?a leftsquarebrc k rightsquarebrc ";"r:$0}END{for(x in a)print a leftsquarebrc x rightsquarebrc } file
awk {rec = rec (NR rightanglebrc 1?RS:"") $0} END{ print " leftanglebrc " rec " rightanglebrc " } file
awk {s leftsquarebrc $1 rightsquarebrc +=$5} END{ for (x in s) { print x, s leftsquarebrc x rightsquarebrc }} in1 in2
awk {s+=$1;i leftsquarebrc NR rightsquarebrc =$1" "$2;a leftsquarebrc i leftsquarebrc NR rightsquarebrc  rightsquarebrc =$1}END{for(x in i)print i leftsquarebrc x rightsquarebrc ,sprintf("%.3f%", 100*a leftsquarebrc i leftsquarebrc x rightsquarebrc  rightsquarebrc /s)} file
awk {s+=$1} END {print s} mydatafile
awk {s+=$1}NR%4==0{print s;s=0} file
awk {s+=$7}END{print s/NR} c*
awk {s="";i=1;while(substr($0,i++,1)=="\t")s=s "   ";sub(/^\t*/,s)}1
awk {s=$0;getline  leftanglebrc  "file2";print s,$0} file1
awk {s=$0}{n=gsub(/ leftsquarebrc 0-9 rightsquarebrc /,"",s)}n rightanglebrc =3&&n leftanglebrc =8 file
awk {s=$1;gsub(/:/,"",s);if (s rightanglebrc max leftsquarebrc $2 rightsquarebrc ){max leftsquarebrc $2 rightsquarebrc =s;l leftsquarebrc $2 rightsquarebrc =$0}}END{for (i in max) print l leftsquarebrc i rightsquarebrc } file sort -n
awk {s=$4" "$3" "$2" "$1; if($5=="None"&& s in a)next;else a leftsquarebrc s rightsquarebrc =$5" "s}END{for(i in a)print a leftsquarebrc i rightsquarebrc } file sort
awk {s=(NR-1)%25}!s{printf "%04d\n", ++k}{printf "%2d %s\n",s+1,$0} file
awk {s=NR leftanglebrc 3?"-":++i;print s,$0} file
awk {s=NR leftanglebrc 3?"-":++i;print s,$0} file less
awk {s=tolower($0)} s~/lowercase_pattern1/ && s~/lowercase_pattern2/ file
awk {show=0; for (i=1; i leftanglebrc =NF; i++) {if ($i!=0) show=1; col leftsquarebrc i rightsquarebrc +=$i;}} show==1{tr++; for (i=1; i leftanglebrc =NF; i++) vals leftsquarebrc tr,i rightsquarebrc =$i; tc=NF} END{for(i=1; i leftanglebrc =tr; i++) { for (j=1; j leftanglebrc =tc; j++) { if (col leftsquarebrc j rightsquarebrc  rightanglebrc 0) printf("%s%s", vals leftsquarebrc i,j rightsquarebrc , OFS)} print ""; } } file
awk {split($0,a,""); for (i=1; i leftanglebrc =100; i++) print a leftsquarebrc i rightsquarebrc } anyFile.txt xargs bash -i -c ord $@ _
awk {split($0,a,""); for (i=1; i leftanglebrc =100; i++) printf("%d",a leftsquarebrc i rightsquarebrc )} anyFile.txt
awk {split($0,a,"viewport=");split(a leftsquarebrc 2 rightsquarebrc ,b,",");print b leftsquarebrc 5 rightsquarebrc ,b leftsquarebrc 6 rightsquarebrc } filename
awk {split($1,a,"/"); print $2,$3,$4  rightanglebrc  a leftsquarebrc 2 rightsquarebrc  ".txt"} datafile
awk {split($11,ary,/:/); if(ary leftsquarebrc 2 rightsquarebrc  rightanglebrc =5) print} myFile
awk {split($3, a, "@"); split($6, b, "@");if (a leftsquarebrc 1 rightsquarebrc  == b leftsquarebrc 1 rightsquarebrc ) print}
awk {split($3, a, "@"); split($6, b, "@")}; a leftsquarebrc 1 rightsquarebrc  == b leftsquarebrc 1 rightsquarebrc 
awk {sub(",","")}1 file mv temp file
awk {sub("T", " ", $3)}1 file.csv
awk {sub(/ #  leftsquarebrc ^  rightsquarebrc +/,x)}1 file
awk {sub(/ +"CN= leftsquarebrc ^" rightsquarebrc +" +/," ")}1 infile
awk {sub(/ leftanglebrc DistanceMeters rightanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc /,x)}8 file
awk {sub(/ leftsquarebrc ^ leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc .*/,"X",$1)}1 file
awk {sub(/,/,"",$0); print substr($0,0,length($0)-1)} input.txt
awk {sub(/.*\//,"",$4)}1 file
awk {sub(/...$/, ".&"); print}
awk {sub(/: leftsquarebrc . rightsquarebrc /,":0.",$6)}1 FS=, OFS=, file
awk {sub(/AA BB/,"CC DD")}1 infile
awk {sub(/DST=/,"",$10); print $10} iptables.log sort -u
awk {sub(/E.*/,"",$3); print$3} temp.txt
awk {sub(/E.*/,"",$4); print$4} temp.txt
awk {sub(/H....\$/, "replacement")}7 file
awk {sub(/\.$/,"",$1);sub(/\.$/,"",$5);print $1,$5} file
awk {sub(/\S*\t/,"");a leftsquarebrc $0 rightsquarebrc ++}END{for(x in a)print x, a leftsquarebrc x rightsquarebrc } file
awk {sub(/\r$/,"");print $2,$1}
awk {sub(/^ rightanglebrc  leftsquarebrc ^  rightsquarebrc * /," rightanglebrc ")} 1
awk {sub(/^END=/,"",$8); sub(/;.*$/,"",$8); print $1,$2,$8} line
awk {sub(/^M/,"")}1 filename
awk {sub(/_ leftsquarebrc ^_ rightsquarebrc *_ leftsquarebrc ^_ rightsquarebrc *$/,"")}1
awk {sub(/root/, "yoda"); print}
awk {sum leftsquarebrc $2 rightsquarebrc  += $1} END {for (i in sum) printf "%4d %s\n", sum leftsquarebrc i rightsquarebrc , i; }
awk {sum leftsquarebrc $2 rightsquarebrc += $1;}END{for (date in sum){print sum leftsquarebrc date rightsquarebrc , date;}}
awk {sum+=$1} END {print sum}
awk {sum+=$1} END {print sum} data
awk {sum+=$1} END {print sum} read
awk {sum+=$1} END{ print sum}
awk {sum+=$3;s3 leftsquarebrc NR rightsquarebrc =$3} END {ave=sum/NR; for(i=1;i leftanglebrc =NR;i++)print s3 leftsquarebrc i rightsquarebrc -ave} coriolis_data
awk {sum4 += $4; sum5 += $5} END {print sum4/NR, sum5/NR} names.txt
awk {system("a=$(stat -c %Y $9)")}
awk {system("pstree " $2)}
awk {system("rm -i " $10 ".torrent")}
awk {system("rm -i " gensub(" ","\\\\ ","g",$10) ".torrent")}
awk {system("touch /tmp/pages/"NR".txt")} /tmp/file.txt
awk {system("wc "$1)} myfile
awk {t += $NF} END {print t}
awk {t=$1; $1=$2; $2=t; print} OFS=| FS=| input_file
awk {t=$1;$1=$NF;$NF=t}1
awk {t=$2 " " $4;gsub(/ leftsquarebrc -: rightsquarebrc /," ",t);printf "\"%s\",%s\n",(mktime(t)+6*3600)*1000,substr($0,25)} FS=" OFS=" file
awk {t=length($0);sub(" *$","");print t-length($0)} file
awk {target=substr($0,1,10); gsub(/-/,":",target); print target substr($0,11)} file
awk {total += $1; count++ } END {print total/count}
awk {var = $3} /three/ {a = var}; /six/ {b = var}; /five/ {c = var} END {print a, b, c} file
awk {w=$1} END{print w} file
awk {while(++i leftanglebrc =NF)if($i~/ leftsquarebrc 235 rightsquarebrc $/)print $i;i=0;print ""} RS= file
awk {while(/0$/) { getline a; $0=$0 a; sub(/\n/,_) }; print}
awk {x = ($3  rightanglebrc  0 ? 1 : -1); print $1*x "\t" $2*x} file
awk {x leftsquarebrc $1 " " $2 rightsquarebrc +=$3} END{for (r in x)print r,x leftsquarebrc r rightsquarebrc } file
awk {x leftsquarebrc $2 rightsquarebrc  += $3} END {for(y in x) print y,x leftsquarebrc y rightsquarebrc } freqdat044.dat freqdat045.dat freqdat046.dat freqdat047.dat freqdat049.dat freqdat050.dat
awk {x+=($0~/^SectionMarker/)?1:0}x leftanglebrc 2 data.log
awk {x=$0;sub($1FS$2,"",x);gsub(FS,"",x);print $1,$2,x}
awk {x=$1/10; a leftsquarebrc int(x) rightsquarebrc ++} END{for(i in a) print i,a leftsquarebrc i rightsquarebrc  | "sort -n"} INPUT_FILE
awk {x=$2; sub(/D/,"e",x); print log(x)} file
awk {x=$NF;NF--;printf "%-100s %10d\n", $0, x}
awk {x=4; print $x}
awk {x=x ORS $0};/pattern/{x=$0};END{if(x ~ //)print x} file
awk {y=substr($7,1,5);z=substr($7,6); $7=z""y;}1 inputfile
awkex 1.txt 2.txt 3.txt
awko data column -t
aws ec2 create-tags --resources ami-78a54011 --tags Key=Name,Value=myname
aws ec2 describe-instances --query Reservations leftsquarebrc * rightsquarebrc .Instances leftsquarebrc * rightsquarebrc .PublicIpAddress --output text
aws elb describe-load-balancers --region us-east-1 jq .LoadBalancerDescriptions leftsquarebrc  rightsquarebrc  | select((.AvailabilityZones leftsquarebrc  rightsquarebrc  | select(. == "us-east-1b")) == "us-east-1b") | .CanonicalHostedZoneName, .AvailabilityZones
aws.user_data = #!/bin/bashnecho 'Defaults:ec2-user !requiretty'  rightanglebrc  /etc/sudoers.d/999-vagrant-cloud-init-requiretty && chmod 440 /etc/sudoers.d/999-vagrant-cloud-init-requirettynyum install -y puppetn
b
b
b c '\''echo test'\
b c d f
b( leftsquarebrc fh rightsquarebrc i|k)w*(eld|ed)b
b.sh My first My second
b101001.0111 11101011100001010001 11101011100001010001 11101011100001010001 ...
b101001.0111111010111000010100011110101110000101000111101011100001
b2 = ${b} + 2
backupbatch.cmd miFileToCopy.txt
backy --whatever --this --is ignored not ignored anymore
bad-cmd echo failed
bad_command
bad_command
bankAccountBalance = b
bankAccountNumber = n
bar
base64 --wrap 0 /dev/urandom
base64 /dev/urandom
base64 DSC_0251.JPG
base64 reddit.png
basename $(dirname $(dirname $0)) dirname $(dirname $0) dirname $0
basename $(find dir/* -name "$file") find dir/* -name $file
basename $(ls /var/www/some_directory/example_file.*) ls /var/www/some_directory/example_file.*
basename $(readlink link) readlink link
basename $(sed '2q;s/^#!//;s/ .*//' test.sh) sed 2q;s/^#!//;s/ .*// test.sh
basename $0
basename $0
basename $0 .sh
basename $1
basename $1
basename $1
basename $1
basename $1
basename $1 .zip
basename $FILE
basename $PWD
basename $f .txt cat $f $b.svs
basename $file
basename $file
basename $file .deb
basename $file .deb
basename $filename
basename $filename
basename $filename
basename $filename
basename $pfile .data
basename ${1}
basename ${name} cut -d -. -f 1
basename -- $(dirname -- "$path") dirname -- $path
basename SF_Library/example/Platform/DS-PLATFORM.car
basename `pwd` pwd
basename file1.java file2.java file3.java...
basename git@git.gitweb.com:/myModule-repo.git .git
basex -b -$ -w -o -r -d -= -c -e -l -o -s -o consulta.xq
basex -b -w -o -r -d -= -c -e -l -o -s -o consulta.xq
bash  leftanglebrc (cat "test.sh") cat test.sh
bash  leftanglebrc (curl -s http://mywebsite.com/myscript.txt) curl -s http://mywebsite.com/myscript.txt
bash  leftanglebrc (curl -s https://raw.github.com/gist/419201/gitconfig.bash | head -n 3) curl -s https://raw.github.com/gist/419201/gitconfig.bash head -n 3
bash  leftanglebrc (curl www.test.com/script.sh) curl www.test.com/script.sh
bash  leftanglebrc (wget -O - https://raw.github.com/aaronhancock/pub/master/bash/readtest.sh) wget -O https://raw.github.com/aaronhancock/pub/master/bash/readtest.sh
bash $1
bash --init-file my-init-script
bash --login
bash --login
bash --login -c /var/www/tweeet/get_tweeet.sh
bash --login -i
bash --login -i -c cd somdir; exec bash
bash --noprofile --norc
bash --rcfile  leftanglebrc (cat ~/.bashrc; echo 'PS1="change  rightanglebrc  "') cat ~/.bashrc echo PS1="change  rightanglebrc  "
bash --rcfile  leftanglebrc (echo ". ~/.bashrc && cd ~/Work") echo . ~/.bashrc && cd ~/Work
bash --rcfile  leftanglebrc (echo "export PS1=' rightanglebrc  ' && ls") echo export PS1=' rightanglebrc  ' && ls
bash --version
bash -O extglob -c echo !(file1|file2)
bash -O extglob -c ls !(*site*).mol2
bash -O extglob scriptname
bash -c
bash -c $(tail -1 command.txt) tail -1 command.txt
bash -c $ACTIONS_COMMAND
bash -c $CMD '$CATALINA_HOME/bin/catalina.sh stop 20 -force'
bash -c $cmd
bash -c $foo
bash -c $shopt -s extglobnecho !(file1|file2)
bash -c ${nodeSayi} grep -c ""
bash -c ${nodeSayi} | grep -c '""'
bash -c ${nodeSayi} |grep -c '""'
bash -c ${nodeSayi} |grep -c ''
bash -c (sleep 5m; kill $$ 2 rightanglebrc  /dev/null) & exec script
bash -c ...$1...$1... bash argument
bash -c ./script.sh
bash -c PROFILE=default_profile exec bash
bash -c PROFILE=screen_profile exec screen -U
bash -c XXXX ; bash
bash -c cmd  rightanglebrc output.file 2 rightanglebrc error.file
bash -c date  rightanglebrc &/tmp/log.$$
bash -c date "+%Y-%m-%d %H:%M:%S"  rightanglebrc  rightanglebrc  unit-tests-runs.log
bash -c db2 connect to mydb;db2 -x -v "select 1,'\'','\'',2,'\'','\'',3  from SYSIBM.SYSDUMMY1 fetch first 10 rows only"; db2 connect reset;
bash -c diff  leftanglebrc (sort text2)  leftanglebrc (sort text1)
bash -c dirify "$1" dirify {}
bash -c echo $$
bash -c echo $$
bash -c echo $0 Hello, world
bash -c echo $BASH_EXECUTION_STRING
bash -c echo $FOO
bash -c echo this is a bash script; echo lalalala
bash -c for ((i=0; i leftanglebrc 10; i=i+1)); do echo $i; done
bash -c for ((i=0; i leftanglebrc 10; i=i+1)); do echo $i; done
bash -c for i in * ; do echo -n  rightanglebrc  $i ; done
bash -c ls
bash -c ls NONEXISTENT
bash -c ls NONEXISTENT
bash -c pkill -TERM -f " leftsquarebrc j rightsquarebrc ava"; true
bash -c pkill -TERM java; true
bash -c r=$( dd bs=4096 count=1 2 rightanglebrc  /dev/null); echo "$r"
bash -c sleep 10 & echo $!
bash -c source /neuro/arch/scripts/neuro-fs stable;echo $XAPPLRESDIR;
bash -c stat $(echo "${files leftsquarebrc * rightsquarebrc }") echo ${files leftsquarebrc * rightsquarebrc }
bash -e myScript
bash -e my_script.sh
bash -e yourscript.sh
bash -f /path/to/my/php/script.php
bash -i -l -x
bash -n script.sh
bash -n scriptname
bash -x
bash -x -l -s -c exit
bash -x ...
bash -x ./boot.sh
bash -x /path/to/birthdays.bash
bash -x /path/to/script
bash -x bashplot.sh .... arguments....
bash -x chart.sh
bash -x commit.sh
bash -x myscript.sh
bash -x myscript.sh
bash -x myscript.sh
bash -x run.sh
bash -x script
bash -x script.sh
bash -x script.sh
bash -x script.sh
bash -x script_name
bash -x test1.sh
bash -x test1.sh $DATE1 $DATE2 $DATE3 $DATE4
bash ./env.sh
bash ./errtest.sh
bash ./file.bash
bash ./log_sender.sh
bash ./myscript.sh
bash ./script.sh
bash ./so.sh 127.0.0.1
bash ./test.sh
bash ./test.sh
bash /path/to/script
bash /path/to/script/deploy.sh
bash /tmp/My Batch Script Files/Processing arg1 arg2 ...
bash MakeDB.sh
bash a.bash bash b.bash
bash argtest ubrs badarg brd
bash arguments.sh Bash Scripting Tutorial
bash b.sh
bash create_thumbs.sh
bash curl.sh -d Remote -a Moz 123 -r http://localhost http://www.google.com/
bash echosomecommands.sh bash
bash fancy_rename.sh Ebc-345- 10 1 /path/to/files/*
bash file.sh
bash filename $sed 's/foo/foo bar/g' file
bash foo.sh
bash format_output.sh
bash hhhqst
bash lolcat
bash mksql.bash
bash myShellScript.sh
bash my_script.sh tee -a log.txt
bash my_script.sh tee log.txt
bash myscript
bash myscript.sh
bash myscript.sh
bash myscript.sh
bash myscript.sh
bash myscript.sh
bash node_modules/.bin/tsc -v
bash proc_${i}.sh
bash rename.sh
bash run.sh
bash script
bash script -a -b b_arg
bash script -a a_arg -b b_arg extra
bash script.sh
bash script.sh
bash script.sh
bash script.sh
bash script.sh
bash script.sh
bash script.sh
bash script.sh
bash script.sh /usr/local/bin
bash script.sh /usr/local/src/file1.props /usr/local/src/file2.props
bash script.sh A B C
bash script.sh date +%Y-%m-%d_%H:%M
bash script.sh dir string replacement
bash script.sh disown
bash script.sh file
bash script.sh file1 file2
bash script.sh test  rightanglebrc (wc) wc
bash script.sh your_config_file pattern1 pattern2 ...
bash script.sh your_config_file patterns_file
bash script1 bash script2
bash script_name.sh
bash scriptname.sh
bash shell_expansion.sh Text_File.msh Text_File_expanded.msh
bash split_history_file_test.sh
bash sysroot.sh
bash temp.sh /var/tmp/tar-1.27.1/ -e m4 -f -l c
bash temp.sh gnl|SRA|SRR035294.8575.2 FIHSSUW01EWK4S.2 length=287 temp.txt
bash test.sh
bash test.sh
bash test.sh
bash test.sh /media/2C44138344134F48/RB1
bash ustvari.sh 3 5
bash yourscript
bash yourscript.sh
bash ~/webSupport.sh pullVars $b
bash ~/webSupport.sh pullVars $b
bash, 0.0, 1.5
bash.exe --rcfile 01.txt -i
bash: !: event not found
bash: ./install_programs: /bin/bash^M: bad interpreter: No such file or directory
bash: ./runScript.bash 8000: No such file or directory
bash: /usr/local/bin/w: No such file or directory
bash: badcommand: command not found
bash: cheese: readonly variable
bash: functionName: readonly function
bash: test: -g -t -: unary operator expected
bash: x: unbound variable
bash: ~/folds/DarumaFramework/: is a directory
bash: ~/folds/myfile.dot: command not found
batch_gs.sh 3 5 fileName
bbuttb
bc
bc
bc
bc -l
bc -l
bc -l
bc -l
bc du wednesday cut -f 1 du tuesday cut -f 1
bcdedit /deletevalue {current} safeboot
bcdedit /set {current} safeboot minimal
bcdedit /set {current} safeboot network
bcp MyDB..my_view out my_data.out -U -u -s -e -r -n -a -m -e -P -p -a -s -s -w -o -r -d -S -s -e -r -v -e -r -n -a -m -e -c
better-dig.sh google.com
bin -u -r -o -o -t -p filepath}
bin : { myapp :  leftanglebrc relative_path_to_the_script rightanglebrc /script.js }
bin-path =
bin/executable
bin/hadoop fs -r -m -r /user/cloudera/capital/output
bin/python /usr/local/bin/nosetests --with-snort
bin/someapp do-action --option1 some_value --input /dev/stdin
bin: { myapp :  leftanglebrc relative_path_to_myapp.js rightanglebrc /lib/myapp.js }
bin_PROGRAMS = mybin
bind "'`echo -e '\x52'`'":self-insert
bind "R":self-insert
bind "\C- rightsquarebrc ":"\C-e\C-u pbcopy  leftanglebrc  leftanglebrc "EOF"\n\C-y\nEOF\n"
bind "\C-M":"foobar"
bind "\C-i":complete
bind "\C-i":complete
bind "\C-j": "\C-atime \C-m"
bind "\C-t":"\C-a\ed"
bind "\C-t":"cd ..\n"
bind "\e leftsquarebrc 24~": "\e leftsquarebrc 1~gui \e leftsquarebrc 4~\n"
bind "\e leftsquarebrc 24~":"\C-k \C-upwd\n"
bind "\e leftsquarebrc 24~":"foobar"
bind "\e leftsquarebrc 24~":"pwd\n"
bind "\e leftsquarebrc 3;5~":kill-word
bind "\eY": "\e2\e."
bind "\e^M":"foobar"
bind "\ee": " \C-u \C-a\C-k${PWD##*/}\e\C-e\C-y\C-a\C-y\ey\b"
bind "\ee": " \C-u \C-a\C-k${PWD##*/}\e\C-e\C-y\C-a\C-y\ey\b\ef\C-f"
bind "\ee": "${PWD##*/}\e\C-e"
bind "\ee": "${PWD##*/}\e\C-e\eb\"\C-e"
bind "\t":menu-complete
bind "^M":"foobar"
bind -P grep --fixed-strings  can be found on  perl -p -e s/((? leftanglebrc !\\)(?:\\\\)*)\\C/\1Ctrl/g;s/((? leftanglebrc !\\)(?:\\\\)*)\\e/\1Esc,/g
bind -P grep can be found sort awk {printf "%-40s", $1} {for(i=6;i leftanglebrc =NF;i++){printf "%s ", $i}{printf"\n"}}
bind -m vi-insert "{" "\C-v{}\ei"
bind -p grep -i " leftsquarebrc pE rightsquarebrc "
bind -q complete
bind -x "\C-K": "echo -en \\033c"
bind -x "\C-x\C-e":fg %emacs
bind -x "\eW":"who"
bind Q focus up
bind RETURN: "\e leftsquarebrc 1~gui \e leftsquarebrc 4~\n"
bind set completion-ignore-case on
bind set show-all-if-ambiguous on
bind t send-keys C-m ~.
bind-key C-c respawn-pane -k bash
bind_ip = 127.0.0.1
bindkey -M vicmd ? history-incremental-search-backward
bindkey -m
bindkey C-r history-incremental-pattern-search-backward
bindkey ^ leftsquarebrc  leftsquarebrc 3~ backward-delete-word
bindkey ^ leftsquarebrc  leftsquarebrc Z reverse-menu-complete
bindkey ^H backward-kill-word
bindkey ^O forward-word
bindkey ^U backward-kill-line
bindkey ^X/ i-search-back
bindkey ^_ undo
bindkey ^h backward-delete-char
bindkey ^i expand-or-complete-prefix
binmode STDOUT, :utf8:raw
biz echo oh noes
bjobs -u $1 awk ...
blah blah blah = change disposition to disposition.
blaunch -I -n env grep TASKID
blaunch -u JobHost cmd.sh
blender ~ $ bash ./script.sh
blkid
blockdev --getsize64 /dev/sda
bob -a some_arg ${VAR:+-b "$VAR"}
body must be at least 30 characters you entered 15
bomb bomb bomb
bond0 bond1 bond2 eth0 eth1 eth2
boost::lexical_cast optarg
break cmd /v:on /c for %f in (*.txt) do break  rightanglebrc  !random!.txt
brew install ack
brew install aspell --lang en,fi,jp
brew install git bash-completion
brew install gnu-sed
brew install grep --default-names
brew install node
brew install redis
brew outdated wc -l
brew tap homebrew/dupes brew install apple-gcc42
browser.tabs.loadDivertedInBackground to true.
bsdtar -c -z -f mage6BRQWJ-1.tar.gz --exclude ^vendor *
btick1 `def` def
build = spawn /bin/bash,  leftsquarebrc test.sh rightsquarebrc 
buildarchtranslate: i686: i586
builtin echo $(basename $0 .sh): $1 basename $0 .sh
builtin echo == rightanglebrc  $@
builtin echo This 'echo' will not be suppressed.
bundle
bundle exec my_script.rb
bundle install beep
bundle show gem xargs cd
bwa sampe ref.fa r1.sai r2.sai r1.fq r2.fq samtools view -b -S -h -o out.bam echo Here is another command.
bww+b
bzip2 -c
bzip2 -c directory.tar
bzip2 -d -c archive.tbz tar -x -v -f filename
bzr commit -m merged upstream version ${REV_UPSTREAM} exit 0
bzr commit whatever true
bzr export /path/to/myproj.tar.gz
c
c 3
c c-- /Reco/{c=3}
c c-- /pattern/{c=N}
c/foo.txt
c/x/a/b/foo.txt
c/xfoo.txt
c1seconds leftsquarebrc 0-9 rightsquarebrc 
c: *something you did* android-sdk-windows-1.5_r2tools
c: rightanglebrc test.exe type output.txt
c:/cygwin/home/jonathan/camlprog "foo" bar
c:123.doc
c:KindleGenkindlegen.exe %1 -c 2
c:KindleGenkindlegen.exe Htmlpage.html -c 2
c:MySetup.exe /exelog c:log.txt /x // /log c:msilog.txt
c:Program FilesWinRARWinRAR.exe a -a -f -z -i -p -d -f e:test.zip e:test.csv
c:Program Filesgsgs9.04bingswin64c.exe -d -Q -U -I -E -T -d -N -O -P -A -U -S -E dBATCH -d -D -E -V -I -C -E -W -I -D -T -H -P -O -I -N -T -S -= -2 -5 -9 -2 -d -D -E -V -I -C -E -H -E -I -G -H -T -P -O -I -N -T -S -= -1 -7 -2 -8 -d -F -I -X -E -D -M -E -D -I -A -s -D -E -V -I -C -E -= -p -d -f -w -r -i -t -e -s -O -u -t -p -u -t -F -i -l -e -= -j -u -s -t -a -f -i -l -e -. -e -x -t justafile.ext
c:Temp
c:Temp summary.log
c:\123.doc
c:cygwinbinbash myscript
c:cygwinbinbash.exe --login -c scp account@server:~mysourcedirectory/targetfilename* /cygdrive/c/targetfolder
c:foo.flibble test of args
c:my documentsfile1.xls
c:myapp.exe -f -o -o -b -a -r
c:oracleproduct11.2.0client_1
c:oracleproduct11.2.0client_1binsqlplus.exe
c:windowssystem32inetsrvappcmd set config Default Web Site -s -e -c -t -i -o -n -: -r -e -q -u -e -s -t -F -i -l -t -e -r -i -n -g -r -e -q -u -e -s -t -L -i -m -i -t -s -. -m -a -x -A -l -l -o -w -e -d -C -o -n -t -e -n -t -L -e -n -g -t -h -: -1 -5 -7 -2 -8 -6 -4 -0 -0
cake email
cal awk NR==2 {split($0,a)} {for (i=1;i leftanglebrc =NF;i++) if ($i==date) print a leftsquarebrc i rightsquarebrc } FIELDWIDTHS=3 3 3 3 3 3 3 3 date=31
cal head -1 grep -o -P  leftsquarebrc A-Za-z rightsquarebrc +
cal sed -e s/^.\{3\}// -e s/^\(.\{15\}\).\{3\}$/\1/
cal sed s/^.\{9\}\(.\{3\}\).*$/\1/
cal sed s/^\(.\{18\}\).*$/\1/
calc 9 + 10
calculateforfile
call $(VCInstallDir)vcvarsall.bat VCInstallDir
call $(VS110COMNTOOLS)....VCvcvarsall.bat VS110COMNTOOLS
call %vs90comntools%vsvars64.bat
call :ack %m% %2
call :ack %m% 1
call C:Program Files (x86)Microsoft Visual Studio 10.0VCvcvarsall.bat x86
call SecondDirectoryfoo.bat
call ant_batch.bat
call command echo valid find /i valid goto okay goto stop
call command goto okay find /i valid %Temp%out.txt goto okay goto stop
call rem, my comment goes here
call setenv.bat
call shortcut.bat C:PROGRA~2TeraTermttermpro.exe TeraTerm
call test.bat %changeFrom% %changeTo% %origFile%
canonicalize ./bash_profile
cantaloupe
cap install
cap roll HOSTS=server1, server2, server3
cap roll HOSTS=server1,server2,server3
cap roll ROLES=myrole
cap roll ROLES=myrole1,myrole2,myrole3
capify .
caption leftsquarebrc Server HTTP responses rightsquarebrc {Server HTTP responses}label{fig:http-status}
casperjs test test.js --url http://google.com
casperjs test.js --word soccer ball
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat
cat  leftanglebrc ( some-command ) some-input  leftanglebrc ( some-other-command ) some-command some-other-command
cat  leftanglebrc (echo "SET FOREIGN_KEY_CHECKS=0;") imports.sql echo SET FOREIGN_KEY_CHECKS=0; mysql
cat  leftanglebrc (echo "yes")  leftanglebrc (echo "no") echo yes echo no
cat  leftanglebrc (echo "yes") echo yes python manage.py
cat  leftanglebrc (fgrep -i -v "$COMMAND"  leftanglebrc (crontab -l))  leftanglebrc (echo "*/3+1 * * * * $COMMAND") fgrep -i -v $COMMAND  leftanglebrc (crontab -l) crontab -l echo */3+1 * * * * $COMMAND crontab
cat  leftanglebrc (gen_input) gen_input parse_input_and_stdin
cat  leftanglebrc (grep "match1|match2" input.txt)  leftanglebrc (grep -v "match1|match2" input.txt) grep match1|match2 input.txt grep -v match1|match2 input.txt
cat  leftanglebrc (ls -1 | grep '^ leftsquarebrc 0-9 rightsquarebrc ' |sort -n)  leftanglebrc (ls -1 | grep -v '^ leftsquarebrc 0-9 rightsquarebrc ' | sort) ls -1 grep ^ leftsquarebrc 0-9 rightsquarebrc  sort -n ls -1 grep -v ^ leftsquarebrc 0-9 rightsquarebrc  sort
cat  leftanglebrc (ls smthing)  leftanglebrc (echo more) ls smthing echo more sort
cat  leftanglebrc (ls somedir | grep some_prefix | cut -d '_' -f2)  leftanglebrc (echo 2.5) ls somedir grep some_prefix cut -d _ -f 2 echo 2.5 sort -t . -k 1 -r head -n 1
cat  leftsquarebrc 0-9 rightsquarebrc .csv  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc .csv ....
cat  leftsquarebrc file rightsquarebrc  script.foo
cat $( ls -1 *.csv | sort -n  ) ls -1 *.csv sort -n
cat $( ls unit-*-slides.txt | sort -n ) ls unit-*-slides.txt sort -n grep st^ split -l 200
cat $(dirname -- "$0")/Folder/Text.txt dirname -- $0
cat $(echo filename with spaces) echo filename with spaces
cat $(echo tmp.sh) echo tmp.sh
cat $(find src/js -type f -name "*.js" -printf "%d\t%p\n" | sort -n | sed -e "s| leftsquarebrc 0-9 rightsquarebrc *\t||") find src/js -type f -name *.js -printf %dt%pn sort -n sed -e s| leftsquarebrc 0-9 rightsquarebrc *t||
cat $(grep -v '^#' files) grep -v ^# files
cat $(seq -f "report%g.txt" $NUM) seq -f report%g.txt $NUM
cat $(seq -f "report%g.txt" $start $end) seq -f report%g.txt $start $end
cat $1
cat $1 ./words_num word tee $1
cat $1 cut -d , -f 7 sort uniq -c
cat $@
cat $@ awk { c leftsquarebrc $1 rightsquarebrc +=$2 } END { for (i in c) { print i,"=",c leftsquarebrc i rightsquarebrc  } }
cat $@.tmp
cat $@.tmp cut -d -: -f 2 grep \.h sed s,\.h,.h :,g
cat $API
cat $CHANGED grep -v $IG
cat $EMAILMESSAGE mail -s $SUBJECT $EMAIL
cat $FILE cut -d -: -f 1
cat $FILENAME
cat $HOME/.rvm/environments/default
cat $MAIL formail -d -s sh -c cat  rightanglebrc  msg.$FILENO
cat $NEWLIST wc -l awk  { print $1 } 
cat $UNIQ_LIST_FINAL sed $UNIQ_SCAN_INIT_POINT'q;d'
cat $f
cat $f echo
cat $f echo newline
cat $f echo newline mv out output.md
cat $f grep ^From:  head -1 sort -u
cat $f sed something
cat $file cut -c 1-10
cat $file cut -d   -f 1
cat $file egrep -v xxx|yyy|zzz grep -v -E -i ( leftsquarebrc 0-z rightsquarebrc )\1{2,} uniq sort -u
cat $filename grep $line wc -l
cat $filename wc -l
cat $findString perl -0 -7 -7 -7 -p -e s/\t/\\t/g
cat $foo
cat $i ./fetch_contact.php
cat $i basename $i
cat $i echo 
cat $i.html wc -c
cat $keyFile hexdump -e 16/1 "%02x"
cat $name
cat $old_properties awk BEGIN{ FS="=";OFS="=" } {if($1=="$property_name") $2="$new_value"; print $0;}
cat $param
cat $rootFilename perl -p -e s/Policy leftsquarebrc  \t rightsquarebrc +( leftsquarebrc a-zA-Z0-9_ rightsquarebrc +) leftsquarebrc  \t rightsquarebrc * leftsquarebrc ;= rightsquarebrc .*/\1/g
cat $sndf gawk { printf "%f\t"  $3 -$2 "\t", (((($4/"'$tag'")/($3-$2)))*100) }
cat ${1:-.}/*
cat ${@/#/t_}
cat ${ITEM_LIST} ...
cat ${LOG}.tmp1 ${LOG}.tmp2 ${LOG}.tmp3
cat ${TEMPFILE} cut -d   -f 1 sed /^$/d sed 1,4d sed s/$/|ON_ICE|OFF_ICE/g
cat ${TMP_PART2DAT}
cat ${arr leftsquarebrc $m rightsquarebrc } ${arr leftsquarebrc m+1 rightsquarebrc }
cat ${cmd leftsquarebrc @ rightsquarebrc }
cat ${c}
cat ${filename} wc -l
cat ${file} awk {c = c + $3; d = d + $4} END {print "APPNAME", c, d}
cat ${f}/operstate
cat ${src_path}/${bakfile} awk /\\\\\\./ {print NR;}
cat * grep ^From:  sort -u
cat *.csv
cat *.eml
cat *.eml lpr
cat *.java
cat *.js date +%Y%m%d%H%M
cat *.js date +%d%m%Y%H%M
cat *.txt
cat *.txt
cat *.txt aspell list sort -u
cat *.{txt,html} grep -o -P \b leftsquarebrc A-Za-z0-9_ rightsquarebrc +\. leftsquarebrc A-Za-z0-9 rightsquarebrc {1,4}\b awk -F -. { print "." $(NF) } sort -u
cat *cnt awk {count=$1; $1=""; a leftsquarebrc $0 rightsquarebrc =count} END{for (i in a) print a leftsquarebrc i rightsquarebrc ,i}
cat *txt
cat -- $1
cat -e ble.txt cat -e bla.txt
cat -n
cat -n  leftanglebrc (ls -1) ls -1
cat -n $1 grep $c1TIME awk {printf "%s\n",$1} awk sub("$", "") head -1
cat -n file.log grep Start new test tail -1 cut -f 1 xargs -I % sed -n %,$s/is not alive/&/p file.log cut -d -: -f 4 xargs -I % echo Error: %
cat -n filename sort -r -n cut -f -2 --
cat -n log.txt sed -n /TST STARTS/,/TST FINISHED/p grep MATCHED
cat -n textfile.txt grep  b  tail -1 cut -f 1 xargs -I % sed -n %,$s/blades are down/&/p myfile.txt
cat -n yourfile sed -n 8,12p
cat -v -e -t
cat -v -e -t yourfile
cat -v -e -t yourfile
cat -v -e tarball_weekly
cat -v -t -e file
cat -v file sed s/\^A/\t/g
cat -v ls *.properties
cat ../address
cat ../download/interactions.$1.$2 grep -v # awk ($2!~/_R/){print $2} sort -k 1 uniq
cat ../header.txt -n -a -m -e *.c
cat ../header.txt -n -a -m -e *.c
cat ../header.txt tee *.c
cat ./mycommands.sql
cat ./nounlist egrep b leftsquarebrc ${charlist} rightsquarebrc {${wordlength}}b
cat ./pipeddata ./awko ./output.xml
cat ./version tr -d   tr -d \n
cat .temp_occ sort uniq -c sort -k -1 -, -1 -n -r -k 2
cat .version
cat /backup/fileslists/filelist1.txt read line rsync -a -v -z -R $line $DESTSRV:$DESTPATH/
cat /dev/null
cat /dev/null file
cat /dev/urandom base64
cat /dev/urandom env LC_CTYPE=C tr -c -d a-f0-9 head -c 32
cat /dev/urandom tr -c -d a-f0-9 head -c 32
cat /dev/urandom tr -d -c a-zA-Z0-9 fold -w 32 head -n 1
cat /dev/usbXXX grep what you're looking for
cat /etc/filename grep staticip awk {print $3} tr -d '
cat /etc/issue
cat /etc/passwd -n grep `whoami` whoami cut -f 1
cat /etc/passwd awk -F : $7=="/bin/bash" { print $1 }
cat /etc/passwd awk -F : {print $7}
cat /etc/passwd cut -d -: -f 7 sort -n uniq xargs ls -l
cat /etc/passwd grep ^$usernamevariable: cut -d -: -f 3
cat /etc/passwd sed -e s/^ leftsquarebrc ^: rightsquarebrc */USER/
cat /etc/passwd some_cmd
cat /home/dell/case3.3/private.key
cat /my/file
cat /my/file
cat /path/to/file
cat /path/to/file awk {if ('/^TCF/' || '/^FSTL/' ) print $0;}
cat /path/to/file mail -s your subject your@email.com
cat /proc/$$/environ tr \0 \n
cat /proc/asound/cards
cat /proc/cpuinfo
cat /proc/cpuinfo awk /^processor/{print $3} tail -1
cat /proc/cpuinfo grep model name
cat /proc/meminfo grep MemTotal awk {print $2}
cat /proc/meminfo grep MemTotal awk {print $2}
cat /proc/version
cat /sys/class/net/*/operstate
cat /sys/class/net/eth0/carrier
cat /sys/class/net/eth0/carrier
cat /tmp/file.xml sed s/ rightanglebrc \( leftsquarebrc 0-9 rightsquarebrc *\)px leftanglebrc / rightanglebrc \n\1\n leftanglebrc /g grep ^ leftsquarebrc 0-9 rightsquarebrc *$ sort uniq let double=$number*2 sed -i s/'$number'px/'$double'dp/g /tmp/file.xml
cat /tmp/filesToFind.txt xargs -n 1 -I -@ egrep /@$ /tmp/allFiles.txt
cat /tmp/foo
cat /tmp/last_ip_check.txt
cat /tmp/list_of_interesting_words parallel --pipe --block 10k --files
cat /tmp/myfile dos2unix sed s#^\(.*\)$#\1\t1#g
cat /tmp/out.log sed -r s/(\sLOB.*"L_.+_)( leftsquarebrc 0-9 rightsquarebrc {10})("\()/\1'$NUM'\3/g
cat /tmp/tables read line echo $line
cat /tmp/tables xargs -L 1 echo
cat /tmp/tempfile
cat /tmp/tt.txt sed s/^st\^/\n\0/g
cat /tmp/x tee /tmp/x
cat /usr/include/boost/version.hpp grep BOOST_LIB_VERSION
cat /var/log/kern.log grep -E ^$(date +%b) date +%b wc -l
cat /var/log/local3.pipe grep -i --line-buffered test
cat /var/log/local3.pipe stdbuf -o -L grep -i test
cat /var/log/messages
cat /var/log/messages grep `date --date="yesterday" +%b\ %e` date --date yesterday +%b %e
cat /var/log/somelogfile awk { if (system("grep -Fxq " $1 " textfile")) print "useful command " $1; }
cat /var/spool/mail/ryan
cat /washington sed s/ leftsquarebrc Cc rightsquarebrc apit leftsquarebrc ao rightsquarebrc l/capital/g
cat 1.css  leftanglebrc (echo "FOO")  leftanglebrc (sed ...) 2.css  leftanglebrc (echo "BAR") echo FOO sed ... echo BAR
cat 1.js 2.js blabla.js
cat 1.txt $1 2.txt echo $1 sed s/\.html/.php/
cat 1.txt 2.txt 3.txt
cat 123 . send_reminder.sh.
cat 123 source send_reminder.sh
cat 2.txt ./jq -c {(.id): .custom}
cat A
cat A xargs -n 1 xyz.pl
cat Doxyfile echo PROJECT_NUMBER=1.0 doxygen
cat FILE cut -d -: -f 2 sponge FILE
cat FILE xargs sed s/ ---- /n---- /g
cat FILE1.txt read IP sed -i /^${IP}$/d FILE2.txt
cat FileA FileB
cat FileA xargs -n 4 echo paste FileB read a b c d e cat $a $b $c $d
cat File_A File_B File_C File_D sort uniq
cat File_A File_B File_C File_D sort uniq -u
cat File_A File_B File_C File_D sort uniq -u read line grep -l $line File* echo $file $line
cat HTML grep -P -o (? leftanglebrc = leftanglebrc img src="http://example.com/images/I/).*?(?=._.*.jpg" style="display:none;"/ rightanglebrc )
cat LIST.TXT mv *$PARTNAME* /NEWDIR
cat L_z_expectation.dat awk { print $1 "+0.0001"} bc
cat L_z_expectation.dat awk { print $1 "+0.0001"} paste -s -d -+ bc
cat Logone2.txt sed s/^name1=.*/name1=`date`/g date
cat MASTER file
cat STUDENT."7534"
cat Stack.txt uniq -w 11
cat TextToAdd.txt FileToAddTo.txt mv $$.tmp FileToAddTo.txt
cat UnitTests/expect-process-$process
cat UsedBash.txt tr \n  
cat X grep Y
cat `bash` bash
cat `cat logfilenames.txt` cat logfilenames.txt
cat `echo file` echo file
cat `find -name '*.as'` find -name *.as
cat `find /wherever/you/want/to/start/from -name name_of_file` find /wherever/you/want/to/start/from -name name_of_file
cat `ls -t _system*.log` ls -t _system*.log
cat `which scriptname` which scriptname
cat a.hex $f ...
cat a.txt
cat a.txt
cat a.txt awk -F | {print $4}
cat a.txt awk -F | {printf("insert into table (id,value,status,starttime,endtime,number,phone,number) values (%d, %d, %d, %d, %d, %d, %d, %d) \n", $1, $2, $3, $4, $5, $6, $7, $8)}
cat a.txt awk END {print NR}
cat a.txt grep RG1 grep + cut -d -: -f -3 -- cut -d -+ -f 2 sed -e s/ //
cat a.txt xargs -I % sh -c command1; command2; ...
cat access.* awk { print $1 }  sort uniq -c sed -r s/^ leftsquarebrc  \t rightsquarebrc *( leftsquarebrc 0-9 rightsquarebrc +) (.*)$/\1 --- \2/ sort -r -n
cat access_log Select-String ^\s*(?:\w+\s+){8}503
cat add sed -r -n /FIRST_LINE_REGEX/{:a;N;/LAST_LINE_REGEX/{/SOME_REGEX/p;d};ba}
cat aliases awk {$1=sprintf("%20s =",$1);print}
cat aliases.sh
cat all upd sort uniq -c grep ^1
cat arglist.dos tr -d r xargs -n 2 echo cp
cat arglist.unix tr -d r xargs -n 2 echo cp
cat args.list parallel --max-procs 8 python run.py
cat asd.xml awk { x leftsquarebrc NR rightsquarebrc  = $0 } END { for ( i=1 ; i leftanglebrc =NR ; i++ ) { if (x leftsquarebrc i rightsquarebrc  ~ / leftanglebrc name rightanglebrc property2/ ) {x leftsquarebrc i+4 rightsquarebrc ="       leftanglebrc current rightanglebrc false leftanglebrc /current rightanglebrc "}print x leftsquarebrc i rightsquarebrc  }} 
cat avis.txt awk {print "vlc --playlist-enqueue "$0}
cat awk head
cat b
cat b  leftsquarebrc  :$(grep $i a) != :$i  rightsquarebrc  grep $i a echo $i
cat b.txt grep -f a.txt
cat b1.sql b2.sql b3.sql
cat b1.sql cat b2.sql b3.sql sed -e /^DROP TABLE/,/^-- Dumping data/d
cat bad-stuff.txt mv $file /quarantine/$file.`date -u +%s%N` date -u +%s%N
cat battery.txt
cat battery.txt
cat bigfile parallel --pipe --files sort parallel -X -j -1 sort -m {} ; rm {}
cat bigfile.sort uniq -c awk {print $2 "\t" $3 "\t" $1*$4}
cat bla.log awk -F -: {print $2":"$3":"$4} awk -F -, {print $1}
cat cat
cat cat /etc/termcap
cat chr{1..22}_from_6_new_mono.txt
cat commandArguments.txt xargs mycommand
cat commands.txt sleep 1 telnet mailhost.25
cat config_file xargs your_script.sh
cat config_file1 config_file2 xargs your_script.sh
cat core strings
cat crap.txt awk { sub(/D/,"E",$3); A leftsquarebrc NR-1 rightsquarebrc  = $3; } END { print A leftsquarebrc 1 rightsquarebrc  - A leftsquarebrc 0 rightsquarebrc  }
cat cvs_file awk BEGIN{ FS=" *;"; OFS=";" } {$1=$1; print $0}
cat data awk {sum+=$2 ; print $0} END{print "sum=",sum}
cat data ssh foo@processor cat  rightanglebrc  process_fifo
cat data.dat perl convert.pl
cat data.gz gunzip_and_map_to_old.sh
cat data.json underscore select .description, .statistics first-child tr -d  leftsquarebrc  rightsquarebrc 
cat data.txt
cat data.txt awk -F = {print $2} xargs
cat data.txt awk {if ($2 == "arecord") print $2 " " $1 " " $3; else if ($2 == "cnamerecord") print $2 " " $1 "." $3 " " $3; else if ($2 == "mxrecord") print $2 " " $1 " " $3; else print}
cat data.txt read x echo $x sleep 0.7 batch_processor
cat data.xml xmllint --format tee data.xml
cat datafile.dat read line echo $line sed s/ /\n/g sort gawk {line=line " " $0} END {print line}
cat dir/*
cat directoryname/* tr  leftsquarebrc :upper: rightsquarebrc   leftsquarebrc :lower: rightsquarebrc  sort -u
cat done1 parallel --eta wget
cat dump.file grep -C 250 Revision-number: xxxxx
cat echo -e $wd1t$wd2nn
cat echo /etc/termcap
cat example.txt perl -p -e s/My favorite dog is\s+(\w+).*/\1/g
cat f1  leftanglebrc (echo) f2  leftanglebrc (echo) f3  leftanglebrc (echo) echo echo echo
cat ff.log tr r n tail -n 2 head -n 1
cat fifo
cat fifo nc -l 3000 stdbuf -o 0 rev
cat file
cat file
cat file
cat file awk $2 == "qux" { print $1 } $2 != "qux" { print $0 }
cat file awk -f p.awk
cat file awk ...
cat file awk length($0)  rightanglebrc  120
cat file awk { if ($2 == "qux") {$2 = ""}; print }
cat file dos2unix tr \n \r sed s,\(.* leftanglebrc /div rightanglebrc \).*,\1, tr \r \n unix2dos
cat file grep \(.*"48"\)\{5\} grep -v \(.*"48"\)\{6\}
cat file grep \(.*"48"\)\{n\} grep -v \(.*"48"\)\{n+1\}
cat file grep apple python -c for line in __import__('sys').stdin: print line.replace("apple", "orange"),
cat file grep pattern
cat file ln -s $i
cat file read a date --date $(echo "$a" | tr -d '%') +%x %a echo $a tr -d %
cat file read a echo $a
cat file sed -r :a;N;$!ba;s/((^|\n)( leftsquarebrc ^, rightsquarebrc +,){0,2} leftsquarebrc ^, rightsquarebrc +)\n/\1/g
cat file sed /^--/d
cat file sed s/  *qux *$//
cat file sed s/%/%%/g read -r line printf ${line}n sed s/\\ / /g
cat file sed s/://g
cat file sed s/T/\ /g sed s/-07:00//g
cat file sed s/^ leftsquarebrc 0-9 rightsquarebrc *//g;=; sed -n N;s/n//g;p
cat file tee
cat file tr   \n tr -d ,
cat file tr , | awk -F | { line=""; for (i=1; i leftanglebrc =NF; i++) {if ($i != "" && list leftsquarebrc NR"@"$i rightsquarebrc  != 1){line=line $i "|"}; list leftsquarebrc NR"@"$i rightsquarebrc =1 }; print line}
cat file tr -d r read line echo $line
cat file tr -s   sed s/^\(.*\)$/INSERT INTO table(l_colour, l_price, l_type, l_in_date) VALUES(\1);/
cat file xargs -L 1 -I db mysqldump db cat file gzip *.sql
cat file xargs -L 1 -I db mysqldump db cat file xargs -L 1 -I db gzip database.sql
cat file-$i
cat file-$i
cat file-{2..10}
cat file.1 file.1 file.2 sort -n uniq -u cat
cat file.asm perl script.pl
cat file.csv sed 1,2d;10d;12d;28,35d
cat file.html grep -o -E href="( leftsquarebrc ^"# rightsquarebrc +)" cut -d -f 2 sort uniq
cat file.html php -r echo strip_tags(file_get_contents('php://stdin'), ' leftanglebrc a rightanglebrc ');
cat file.html sed -e :a -r -e s/ leftanglebrc !--.*?-- rightanglebrc //g;/ leftanglebrc !--/N;//ba
cat file.txt
cat file.txt
cat file.txt
cat file.txt awk {for (i=1;i leftanglebrc =NF;i++)if($i==-1) print i}
cat file.txt file2 mv _tmp file2
cat file.txt grep -o -P (? leftanglebrc =string1)(d.*)( leftanglebrc =$var)
cat file.txt grep company_name cut -d = -f 2 sed s/;$//
cat file.txt java myProgram
cat file.txt perl -p -e s/one/1/
cat file.txt read line chmod 777 $line
cat file.txt sed -e s/  */ /g
cat file.txt sed -e s/"\( leftsquarebrc ^" rightsquarebrc *\)"/`\1`/g sed /"/s/`/\"/g sed -e s/`\( leftsquarebrc ^` rightsquarebrc *\)`/``\1'\'''\''/g
cat file.txt sed -e s/"\( leftsquarebrc ^" rightsquarebrc *\)"/``\1'\'\''/g sed /"/s/``/"/g sed /"/s/'\'\''/"/g
cat file.txt sed -e s/, /\'$'\n/g
cat file.txt sed -e s/\( leftsquarebrc ^| rightsquarebrc *\)|\( leftsquarebrc ^| rightsquarebrc *\)|\( leftsquarebrc ^| rightsquarebrc *\)|\( leftsquarebrc ^| rightsquarebrc *\)|/insert into table set date-time=\1, process-name=\2, thread-id=\3, sequence-num=\4, / -e s/, leftsquarebrc ^= rightsquarebrc *,/,/g -e s/ \( leftsquarebrc ,= rightsquarebrc \)/\1/g -e s/\( leftsquarebrc ,= rightsquarebrc \) /\1/g -e s/\( leftsquarebrc ^, rightsquarebrc *\)=\( leftsquarebrc ^, rightsquarebrc *\),/\1="\2",/g -e s/" leftsquarebrc ^" rightsquarebrc *$/";/ mysql dbname
cat file.txt sed -r s/#( leftsquarebrc \t rightsquarebrc disutil_screening leftsquarebrc \ =0-9\.; rightsquarebrc +# favorable)/\1/
cat file.txt sed /^P/d
cat file.txt sed s/, /\n/g
cat file.txt sed s/^.*( leftsquarebrc 0-9 rightsquarebrc {13}).*/date -d @1/ sh
cat file.txt ssh user@localhost cat  rightanglebrc  file.txt
cat file.txt tr "'  \n sort -u
cat file.txt tr "'  \n sort uniq -c
cat file.txt tr -d  tnr
cat file.txt tr -d \r awk {print $NF $1}
cat file.txt your_command
cat file.xml sed -n -e s/ leftanglebrc f:facet leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //;s/ leftanglebrc \/f:facet rightanglebrc //p grep Name
cat file1
cat file1 file2
cat file1 file2
cat file1 file2 file3 file4 sort uniq -c awk $1==4 {print $2}
cat file1 file2 sort -k 2
cat file1 file2 sort -u mv combined file2
cat file1 grep -v -E ^$ read min cat file2 read line echo $line cut -d -, -f 1  leftsquarebrc  $min -l -t $val  rightsquarebrc  echo $line cut -d -, -f 3 echo $min: $short_country ($val) break
cat file1 sed 1d file2
cat file1.txt
cat file1.txt
cat file1.txt
cat file1.txt cat file2.txt nl
cat file1.txt file2.txt mv file3.txt file2.txt
cat file1.txt xargs -i sh -c ls  /projects/analysis7/{}/meta_bwa/hg19a/*varFilter
cat file2 comm -2 3 file1  leftanglebrc (cut -d';' -f1 file2) cut -d -; -f 1 file2 sed s/$/;cost1;cost2;cost3;cost4;0/ sort
cat file2.DAT
cat file2.DAT
cat fileA fileB sort -t -$ -t -s -k -1 -, -1 awk -f script.awk
cat fileName xargs touch
cat file_1 file_2 ... file_x
cat file_full_of_files_names xargs touch
cat file_in awk BEGIN{FS=":"}NR rightanglebrc 1{print $1,$2} awk {print $1":"$2,$1":"$2,$0} cut -d   -f 3 --complement
cat file_name.txt grep :*\.,
cat file_name.txt grep :*\., ./x.pl
cat file_with_new_lines file
cat fileinput parallel --colsep \t myprogram {1} {2} {1}_vs_{2}.result
cat filelist read i grep pattern $i
cat filename awk {if($1==$1+0 && $1 leftanglebrc THRESHOLD_VALUE)print $1} sort -n
cat filename command
cat filename sed s/$/ `date`/ date
cat filename sed s/^..\(.*\)$/\1,/
cat filename sed s| leftsquarebrc ^0-9 rightsquarebrc *||
cat filename sed s| leftsquarebrc ^0-9 rightsquarebrc ||g
cat filename sed s| leftsquarebrc ^0-9 rightsquarebrc ||g sort uniq
cat filename xargs -n 1 ./download
cat filename.sql mysql -u username -p
cat filename.txt awk { print $2 $4 }
cat fileneed2bread
cat filepaths parallel -j 30 grep -P -l \d+,\d+,\d+,\d+ {}
cat files.txt mv $f ${f//:/_}
cat files.txt xargs grep keyword
cat foo
cat foo awk -F , -f awkfile
cat foo awk BEGIN{FS="|"} {print $2 " " $1}
cat foo awk { for(i=3; i leftanglebrc =NF-3; i++) { printf $i "_"; } printf $i "\n";  }
cat foo grep ^ leftsquarebrc ^ leftanglebrc  rightsquarebrc 
cat foo sed -e s/^ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *//g -e s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$//g -e s/ /_/g
cat foo sed -e s/^ leftsquarebrc 0-9  rightsquarebrc *//g -e s/  leftsquarebrc 0-9  rightsquarebrc *$//g -e s/ /_/g
cat foo sed s/ leftsquarebrc ^a-zA-Z rightsquarebrc //g
cat foo.c sed /^\s*$/d wc -l
cat foo.pl sed /^\s*#/d;/^\s*$/d wc -l
cat foo.py xargs --null -I % python -c %
cat foo.txt head -1 tail -1
cat foo.txt node bar.js
cat foo.txt sed -e N;s/\n//
cat foo.txt uniq -c
cat func_list sed s#//.*##
cat giantfile.txt parallel -j 8 --pipe --block 4000000 myimport
cat hamlet.txt words
cat hc.ls1 cut -d , -f 2,3,6 $i
cat header $f footer mv tmp $f
cat header.txt $i footer.txt
cat headerfile myfile trailerfile
cat hello.py ssh user@192.168.1.101 python
cat hosts read host echo $host: $(ssh $host uptime) ssh $host uptime
cat hosts.txt xargs -I %REPL ssh user@%REPL
cat html sed -n s/.* leftanglebrc img src="\( leftsquarebrc ^" rightsquarebrc *\)".*/\1/p
cat i.txt wine ~/run.exe $i.asc
cat id_dsa.pub
cat image.jpg convert -s -t -r -i -p md5sum
cat image.jpg exiftool -a -l -l -= -o -u -t md5sum
cat image.jpg image.sh
cat image.png impbcopy
cat in.txt cat
cat in_file tr -d ( tr ) \n
cat in_file tr -d ()
cat infile
cat infile
cat infile.txt tr -d  leftsquarebrc :space: rightsquarebrc  fold -8 0
cat input perl -n -e print join " ", sort split /\s/ ; print "\n"
cat input sh mysort.sh
cat input sort -u -n
cat input sort uniq -c awk {print $3 "\t" $4 "\t" $1}
cat input xargs -L 13 -d -n sed -e s/ /, /g
cat input$1 ./prog$1  leftsquarebrc  $2 !=   rightsquarebrc  diff output$1 expected$1
cat input-one input-two input-n
cat input.files xargs grep -w HTC_One
cat input.html sed -r s/ leftanglebrc script( leftsquarebrc ^ leftanglebrc  rightsquarebrc | leftanglebrc  leftsquarebrc ^\/ rightsquarebrc | leftanglebrc \/ leftsquarebrc ^s rightsquarebrc | leftanglebrc \/s leftsquarebrc ^c rightsquarebrc )* leftanglebrc \/script rightanglebrc | leftanglebrc style( leftsquarebrc ^ leftanglebrc  rightsquarebrc | leftanglebrc  leftsquarebrc ^\/ rightsquarebrc | leftanglebrc \/ leftsquarebrc ^s rightsquarebrc | leftanglebrc \/s leftsquarebrc ^t rightsquarebrc )* leftanglebrc \/style rightanglebrc | leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g
cat input.html sed s/ leftanglebrc script.* leftanglebrc \/script rightanglebrc \| leftanglebrc style.* leftanglebrc \/style rightanglebrc \| leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g
cat input.svg grep translate sed s/^.*translate(.*,\(.*\)\..*) scale.*$/\1/
cat input.txt cat example.txt awk { print "      "$0}
cat input.txt grep -e ^192.168.1.102
cat input.txt grep -e ^192.168.1.102
cat input.txt perl -l -n -e ($a,$b,$c,$d,$e) = /^( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +)$/g; $b =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; $d =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; print "$a;$b $c;$d $e";
cat input.txt sed s/^ leftsquarebrc  \t rightsquarebrc *//;s/ leftsquarebrc  \t rightsquarebrc *$//
cat input.txt ssh clrg@192.168.2.22 sh -c 'cd /path/to/shell/script; ./tokenize.sh'
cat input3 sed s/\ct/^T/g
cat input3 sed s/\o024/^T/g
cat input3 sed s/\x14/^T/g
cat input3 sed s/\x1b/^ leftsquarebrc /
cat input_file cut -f 1 sort uniq
cat input_file program
cat inputfile grep ^t: split -l 200
cat inputfile sed s/\(.\)/\1\n/g sort uniq -c
cat inputfile.txt read line echo $line
cat ip.txt awk {if(index($4,$1) rightanglebrc 0)printf("%s\n",$0);}
cat ip_file.txt tr \n : sed s/control_data( leftsquarebrc ^} rightsquarebrc *)}//g tr : \n
cat ips xargs -n 1 ping -c 2
cat isbndb.sample echo $var wc -l
cat largefile awk NR  rightanglebrc = 10000  && NR  leftanglebrc = 100000 { print }
cat largefile cut -d \t -f 10000-100000
cat largefile.tgz.aa largefile.tgz.ab tar -z -x -f
cat launched grep MyTest
cat lines sort -k 3
cat list cut -d -: -f 2  leftsquarebrc  $odd -e -q 0  rightsquarebrc  echo -n -e $i echo $i
cat list of all files awk {print "Type "$4, $5}
cat list parallel -j 5  leftsquarebrc  {#} -l -t 6  rightsquarebrc  && sleep {#}; upload {}
cat list xargs -n 2 cp
cat list-of-entries.txt
cat list_part* sort --unique wc -l
cat lista.txt mv $y filename$x let x=$x+1
cat log awk / leftsquarebrc START_A rightsquarebrc /,/ leftsquarebrc END_A rightsquarebrc /
cat log perl -p -e s/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/`host \1`/ge
cat log sed -e s/"\( leftsquarebrc ^: rightsquarebrc *\):\( leftsquarebrc ^" rightsquarebrc *\)"/"\1" "\2"/
cat log sed -r s/ leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}/example.com/g
cat log sed -r s/10\.224\.0\.2/example.com/g
cat log sed s/where mytable\.s_id= leftsquarebrc 0-9 rightsquarebrc \+/where mytable.s_id=?/g
cat logFile egrep -v (firstString)|(secondString)|(thirdString)|...|(nString)
cat logFile grep -v Type: Error
cat logfile awk {print $1 " " $2} sed s_\. leftsquarebrc 0-9 rightsquarebrc *__g
cat machinesList.txt xargs -i ssh {} cat log.txt
cat main.properties awk -F -= {print "s/\\${" $1 "}/" $2 "/g"} sed -f 1.properties
cat mapping.txt grep $1 awk {print$1}
cat my.log grep -o GET /service1/api. sort uniq -c
cat my.log grep -w $line wc -l
cat my.xml grep -A 1 ^ leftanglebrc a rightanglebrc 
cat my_bash_file.sh sed s#/opt/Test/conf/server#/opt/Test/conf#g
cat my_code.rb node my_code.js
cat my_fifo
cat my_file
cat my_smaller_files.txt.*
cat myfile
cat myfile sed s/^\( leftsquarebrc A-Z rightsquarebrc .*\)$/\U\1/
cat myfile.txt grep MyKeyword wc -l
cat myfile.txt perl -n -e BEGIN...
cat mysig tee -a F*
cat name.txt sed s/One/Two/1 mv temp.name.txt name.txt
cat named.local grep zone sed -e s/^.*"(.*)".*$/"1"/
cat names.txt xargs -I -{ -} cp file.pdf {} file.pdf
cat new_dba_keys.pub ssh -l root 10.224.1.16 su - postgres -c "cat  rightanglebrc  rightanglebrc  ~/.ssh/authorized_keys"
cat new_section.txt
cat nonexistantFile echo echo e: $? p: ${PIPESTATUS leftsquarebrc @ rightsquarebrc }
cat number.txt sort -n uniq -c awk { print $2, $1 }
cat nums xargs -I ARG ./myscript ARG
cat nums xargs -n 1 -J ARG ./myscript ARG
cat nums xargs -n 1 ./myscript
cat old.file sed s%/var/www/%/home/www/%g
cat one_mb{,}{,}{,}{,}{,}{,}{,}
cat optionsfile xargs gcc
cat orig_filenames.txt read file find /dest/directory -name $file
cat original.jpg dd if=/dev/zero bs=1024 count=1024
cat original_list wc -l
cat originalfile tr -d r
cat originalfile.txt sed -r s/,Fromdate leftsquarebrc ^\n rightsquarebrc +// sed s/,/\n/ sed -r s/$/\n\n
cat output
cat output_*
cat p1.csv sort -t , -k 2 awk -F -, !x leftsquarebrc $2 rightsquarebrc ++
cat parallel --pipe --recend ===\n --rrs do_stuff
cat passwords.txt read x ./testpassword pass $x echo -n $x: $result
cat path.txt gdalinfo $file cp $file /data/temp
cat path.txt gdalinfo $file echo $file cp $file /data/temp
cat path/to/your_text_file sed s/:50K.*:53B/:50KCREDIT:53B/g
cat pattern.txt grep -i -m 5 $pat file.txt
cat php.ini grep -n Module Settings grep -o ^ leftsquarebrc 0-9 rightsquarebrc *
cat pounds.xml sed -r s/( leftsquarebrc A-Za-z rightsquarebrc +)&\\?#39;( leftsquarebrc A-Za-z rightsquarebrc +)/\1\\u2019\2/g
cat prog ruby -n -e puts $_.gsub(/{{{(.+?)}}}/) {  File.read $1 }
cat prog ruby -p -e $_.gsub!(/{{{(.+?)}}}/) { File.read $1 }
cat query.sql mysql -u -r -o -o -t -p -r -o -o -t
cat regex.test sed -r s/( leftsquarebrc 0-9 rightsquarebrc {3})/\1\./g sed -r s/^0*// sed -r s/.0*/./g sed -r s/..test.com// sed -r s/../.0./g
cat report{1..80}
cat result
cat results.txt python -c import re, sys; print ''.join(re.sub(r'.+(d.d+).n', r'1 ', line) for line in sys.stdin)
cat run sed 1,2d run%*
cat sample.txt sed s/.*\(\/namespace\/media\/.*-sync.xml\).*/\1/g
cat sandwich header.txt footer.txt
cat script bash -s 5
cat script.log sed -n /Name:/s/^.*Name:\( leftsquarebrc ^) rightsquarebrc *\)).*$/\1/gp
cat script.sh bash /dev/stdin arguments
cat script.sh sed /\015/d
cat script_file rsh fooDNS bash
cat scriptname.sh sed s/\r/ leftanglebrc CR rightanglebrc /
cat server.clean.log sed -e s/^ leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *  leftsquarebrc 0-9 rightsquarebrc *: leftsquarebrc 0-9 rightsquarebrc *: leftsquarebrc 0-9 rightsquarebrc * \ leftsquarebrc INFO\ rightsquarebrc   Connection reset$//g
cat server.log sed -e s/^ leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *  leftsquarebrc 0-9 rightsquarebrc *: leftsquarebrc 0-9 rightsquarebrc *: leftsquarebrc 0-9 rightsquarebrc * \ leftsquarebrc INFO\ rightsquarebrc   Connection reset$//g
cat sha256sums.txt sort cut -b -3 2 uniq -c -d sort -n -r
cat somefile awk {$1=""; print $0}
cat somefile awk {$1=$2=""; print $0}
cat somefile grep example awk -F " { print $2 } read file cat $file echo 
cat somefile sed s/,\( leftsquarebrc 0-9a-f rightsquarebrc *\)$/,0x\1,/
cat somefile.json jq -c -r .after leftsquarebrc  rightsquarebrc  + "; " tr -d \n
cat sortedfiles.txt xargs -n 1 -i -{ -} grep ^{}$ ngfilelist.txt
cat source ssh user@host cat  rightanglebrc  rightanglebrc  /path/to/target
cat statelist.txt parallel --gnu python mypy.py
cat states sed /./,/^$/!d
cat stats.txt gnuplot -p -e set datafile separator " "; plot "-" using 1:2 with lines
cat stuff.py
cat syscall_list.txt grep f89e7000
cat t.sh
cat temp sort -n uniq -c awk { print $2, $1 }
cat temp.txt xargs -0 date -d
cat temp1 awk email="$1"; transaction="$2"; ccreceipt="$3";
cat template.txt sed -e s/${i}/1/ -e s/${word}/dog/
cat test echo ${line//*::}
cat test read a b c d echo $a:$b:$c:$d
cat test sed -e s/(${ leftsquarebrc A-Z rightsquarebrc *})/`eval "echo '\1'"`/ eval echo '1'
cat test.csv tr \n , tr -d  
cat test.data awk BEGIN{FS="/"}{print $5} sed s/\..*//g
cat test.html aspell list f- sgml --lang en --extra-dicts /home/test/dictionary.test --add-sgml-skip {nospell,literal,screen} sort uniq
cat test.html awk sub(/ leftanglebrc li leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc  leftanglebrc a leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc /,"")&&sub(/ leftanglebrc \/a rightanglebrc .*/,"")
cat test.html gawk / leftanglebrc li leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc  leftanglebrc a leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc (.*?) leftanglebrc \/a rightanglebrc .*/&&$0=gensub(/ leftanglebrc li leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc  leftanglebrc a leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc (.*?) leftanglebrc \/a rightanglebrc .*/,"\\1", 1)
cat test.json jq .Project leftsquarebrc 0 rightsquarebrc .projectName.tag leftsquarebrc 0 rightsquarebrc .tagName |= .+  leftsquarebrc "path2" rightsquarebrc  | .Project leftsquarebrc 0 rightsquarebrc .projectName.branch leftsquarebrc 0 rightsquarebrc .branchName |= .+  leftsquarebrc "path2" rightsquarebrc 
cat test.json perl -M -J -S -O -N -M -X -M -L -: -: -S -i -m -p -l -e -e print XMLout(decode_json(do{local$/; leftanglebrc  rightanglebrc }),RootName= rightanglebrc "json")
cat test.log tr  leftsquarebrc \000-\011\013-\037\177-\377 rightsquarebrc  . grep whatever
cat test.txt cd /folder/p/`awk '{print substr($0,0,1)"/"substr($0,2,1)}'` awk {print substr($0,0,1)"/"substr($0,2,1)}
cat test.txt perl -n -e s/"NATIVE\/ leftsquarebrc ^" rightsquarebrc +(? leftanglebrc !\.XLS)(? leftanglebrc !\.XLSX)"/""/g; print;
cat test.txt perl -n -e s/"NATIVE\/ leftsquarebrc ^" rightsquarebrc ++(? leftanglebrc !\.XLS)(? leftanglebrc !\.XLSX)/"/g; print;
cat test.txt read LINE  leftsquarebrc  $LINE  rightsquarebrc  echo $LINE read HEADER echo $HEADER sort echo :
cat test.txt sed -e s/r//g find -name $i
cat test.txt sed -r s/^.*- leftsquarebrc 0-9 rightsquarebrc {4}\s//
cat test1.txt xargs -I -{ -} cp {} ./Folder
cat test2 awk { if ( $0 ~ ".*Zend.*" ) { print $0 "a" } else if ($0 ~ ".*Yii.*") { print $0 "b" } else if ($0 ~ ".*CI.*") { print $0 "c" } else { print $0 } }
cat test_dump.txt perl -p -e s/ leftsquarebrc ^();INSERT INTO) rightsquarebrc n/\$1\n/
cat testfile awk { print length, $0 } sort -n cut -d -  -f -2 --
cat testfile grep ^\S
cat text mv newtext text
cat text.txt grep $line input.txt
cat text.txt read line grep  leftanglebrc ${line} rightanglebrc  input.txt
cat text.txt read line grep $line input.txt
cat text.txt read line grep $line input.txt cat output.txt sort uniq
cat text.txt sed s/\./.\n/g grep pattern
cat text.txt sed s| leftsquarebrc ,. rightsquarebrc ||g tr   \n sort uniq -c
cat text.txt tr -s   cut -d   -f 4
cat textfile
cat textfile grep -o target_string.*
cat thefile read line printf %d %sn 0x$line $line sort -n awk {print $2}
cat this_file sed :a;N;$!ba;s/\n\( leftsquarebrc a-z rightsquarebrc \)/ \1/g
cat tmp sed s/\bfi leftsquarebrc ^  rightsquarebrc */(&)/g
cat tmp.sh
cat to_be_removed.txt xargs rm -f
cat tr a-z A-Z tr A-Z a-z
cat tst xargs grep -o  leftanglebrc \s*C\s*o\s*d\s*e leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc  wc -l
cat t{1..1500}
cat unwanted-lines sed -i /$x/d test-domain
cat usernum.txt
cat values.properties grep = cut -d $ -f 2 awk -F = {print "s/$"$1"/"$2"/g "$1".txt"} xargs -n 2 sed -i
cat wc -l
cat wget.html grep -e http:.*jpg sed -e s/^.*\(http:.*jpg\).*$/\1/g
cat working-dir/*OUTPUT
cat working-dir/*OUTPUT
cat www-backup.tar.* gunzip -c tar -x -v -f
cat x*
cat x1.tmp gawk -F -; {"base64 -d  leftanglebrc  leftanglebrc  leftanglebrc \""$2"\""|getline $3;close("base64 -d  leftanglebrc  leftanglebrc  leftanglebrc \""$2"\"")}{print $1,$3}
cat xyzzy
cat your-html sed -e s/\ leftanglebrc input.*type="text".*\ rightanglebrc //g sed -e s/\ leftanglebrc input.*type="password".*\ rightanglebrc //g
cat yourFileWithTheLines sort uniq -d
cat your_file sed s/default_color .*/default_color $VAR/
cat your_file sed s| leftanglebrc /b rightanglebrc |-|g sed s| leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc ||g
cat your_file_with_numbers tr \n , sed s/,$//
cat yourfile.txt tr -d -c  leftsquarebrc :alnum: rightsquarebrc \n\r tr  leftsquarebrc :upper: rightsquarebrc   leftsquarebrc :lower: rightsquarebrc 
cat yourscript.sh tr -d \r
cat ~/.bash_history
cat ~/.bash_profile
cat ~/.profile openssl des3 -e -a -s -a -l -t -p -a -s -s pass:asdf -o -u -t /tmp/output.txt
cat ~/Documents/weather.dat awk BEGIN { FS = " leftsquarebrc \" rightsquarebrc " } ; /yweather:condition/ { print $2 } 
cat ~/filepaths/$x
cat ~/test/File01
catalina version
catdoc_cmd =  leftsquarebrc catdoc -w %s  rightanglebrc  testing.txt % name rightsquarebrc 
cc -W -n -o -- -i -m -p -l -i -c -i -t -- -i -n -t -I -. -d -y -n -a -m -i -c -l -i -b -o libmarkdown.dylib mkdio.o markdown.o dumptree.o generate.o resource.o docheader.o version.o toc.o css.o xml.o Csio.o xmlpage.o basename.o emmatch.o github_flavoured.o setup.o tags.o html5.o flags.o
cc -o redelimit redelimit.c
cc -o reserve reserve.c ./reserve
cc -o size_of size_of.c
cc -o size_of size_of.o
ccc
ccc
ccontrol stop instancename restart quietly
cd
cd
cd  leftsquarebrc file dirname $argv0 rightsquarebrc 
cd !!:$:h
cd !$:h
cd "$d"
cd "/cygdrive/c/Users/my dir/Documents"
cd $( dirname "$0" ) dirname $0 pwd
cd $( leftanglebrc fold.txt)
cd $(bundle show gem) bundle show gem
cd $(cut -c4-  leftanglebrc  leftanglebrc  leftanglebrc $input) cut -c -4 --
cd $(dirname "$(find . -name file.xml 2 rightanglebrc  /dev/null)") dirname $(find . -name file.xml 2 rightanglebrc  /dev/null) find . -name file.xml
cd $(dirname "$(readlink -e "$BASH_SOURCE")") dirname $(readlink -e "$BASH_SOURCE") readlink -e $BASH_SOURCE pwd cd
cd $(dirname "$0") dirname $0
cd $(dirname "$0") dirname $0
cd $(dirname "$0") dirname $0
cd $(dirname "$0") dirname $0 pwd
cd $(dirname "$BASH_SOURCE") dirname $BASH_SOURCE
cd $(dirname $(find . -name file.xml 2 rightanglebrc  /dev/null)) dirname $(find . -name file.xml 2 rightanglebrc  /dev/null) find . -name file.xml
cd $(dirname $(which brew)) dirname $(which brew) which brew
cd $(dirname $(which oracle)) dirname $(which oracle) which oracle
cd $(dirname $(which oracle)) dirname $(which oracle) which oracle
cd $(dirname $(which ssh)) dirname $(which ssh) which ssh
cd $(dirname $0) dirname $0 /bin/pwd
cd $(dirname `which $@`) dirname `which $@` which $@
cd $(dirname `which python`) dirname `which python` which python
cd $(dirname relative/path/to/file) dirname relative/path/to/file
cd $(echo "$dir" | sed -e 's:\\\\fmg_cifs1\\Dept_Shares:/Volumes/Dept_Shares:') echo $dir sed -e s:\\\\fmg_cifs1\\Dept_Shares:/Volumes/Dept_Shares:
cd $(echo $RED_INSTANCE_NAME | tr -d '\r') echo $RED_INSTANCE_NAME tr -d \r
cd $(echo -e "$input" | cut -c4-) echo -e $input cut -c -4 --
cd $(find . -name Subscription.java | xargs dirname) find . -name Subscription.java xargs dirname
cd $(find . -name test -type d) find . -name test -type d
cd $(find . -print0 | sort -z | tr '\0' '\n' | tail -1) find . -print0 sort -z tr \0 \n tail -1
cd $(getent passwd foo | cut -d: -f6) getent passwd foo cut -d -: -f 6
cd $(git rev-parse --show-cdup) git rev-parse --show-cdup
cd $(mkapp createddir) mkapp createddir
cd $(node app) node app
cd $(pwd) pwd
cd $(sed -e 's:\\\\fmg_cifs1\\Dept_Shares:/Volumes/Dept_Shares:' -e 's: :\ :g' -e 's:\\:/:g') sed -e s:\\\\fmg_cifs1\\Dept_Shares:/Volumes/Dept_Shares: -e s: :\ :g -e s:\\:/:g
cd $(which oracle) which oracle
cd $(xsel) xsel
cd $@ exit 1
cd $ARCHIVE_PATH/tmp tar -c -v -z -f $ARCHIVE_PATH/$3_$fileYear$fileMonth.tar.gz *
cd $Apps
cd $CENTRASITE_HOME
cd $DIR
cd $DIR git add ${TARGET_FILES leftsquarebrc @ rightsquarebrc } git commit -q -m Current tag $TAG$SUFFIX.
cd $DIR tar -v -c *
cd $DJANGODIR
cd $DOCS
cd $DOCS
cd $FUBAR
cd $HOME
cd $OGRE_ANDROID_ROOT
cd $PATH
cd $SOME_DIR
cd $TAG
cd $TARGET
cd $TRUNK $SERVERCOMMAND
cd $WORKDIR
cd $bin
cd $c
cd $d
cd $d/EmotMRI/firstfour/ ls s* wc -l echo failed
cd $dir cmd
cd $dir do_something foo $dir bar
cd $dir ls -1 -s --block-size 1 is*.* awk {print $2"\t"$1}
cd $dir ~-/cmd
cd $directory basename $(find . -type f) find . -type f
cd $env:MYPSPATH
cd $f
cd $folder echo $i
cd $foldername ../../test $filename cd ../..
cd $myFold
cd $src cp -r -f . $tgt
cd $umusic
cd ${!var}
cd ${0%%/$(basename "$0")}
cd ${1%/*}
cd ${DESTINATION_FOLDER/#~/$HOME}
cd ${PWD%.*}
cd ${PWD/a/another}
cd ${PWD/tom/richard}
cd ${scanresult}/${tempdir}
cd %APPDATA%
cd %USERPROFILE%DocumentsDropFolder
cd -P -- $(dirname -- "$0") dirname -- $0 pwd -P
cd -P xyz
cd .. pwd
cd ../.. pwd
cd ../dir1/ ./Quack.sh
cd /Developer/Platforms/iPhoneOS.platform/DeviceSupport/4.2.1 (8C148)/Symbols
cd /Developer/Platforms/iPhoneOS.platform/DeviceSupport/4.2.1 (8C148)/Symbols
cd /Volumes/180 gram/Uncompressed/
cd /d %Pathname%
cd /d C:TargetFolder
cd /d C:leads
cd /d/work_space_for_my_company/project/code_source
cd /dir ls
cd /folder/with/data tar -c -v -z ssh target cd /target/folder; tar xvz
cd /home php /home/testfile.php
cd /home/inst1 ls *.txt *.wmv *.odt
cd /home/jars java -j -a -r /home/jars/jarfile.jar
cd /home/my_home ruby -x test.rb
cd /home/path/to/current
cd /home/piperoman/Librerias/Ogre Android SDK
cd /home/username/files
cd /mail find . -type f cpio -p -v -d -m -B /home/username/mail
cd /mail find . -type f tar -c -f -F cd /home/username/mail tar -x -f
cd /mail tar -c -f . cd /home/username/mail tar -x -f
cd /media/movies mkdir /tmp/movies/$dir
cd /path/to/file ls -l *.*.*
cd /path/to/project exec npm root
cd /scratch/ `nohup sh xyz.sh rightanglebrc  rightanglebrc del.txt &` nohup sh xyz.sh exit
cd /sys/class/net/ grep -T  */{addre,o}* sort
cd /tmp
cd /tmp echo test diff -u  leftanglebrc (strace -s250 -f tar -cf /dev/null testinput 2 rightanglebrc &1)  leftanglebrc (strace -s250 -f tar -cf testoutput testinput 2 rightanglebrc &1) strace -s 250 -f tar -c -f /dev/null testinput strace -s 250 -f tar -c -f testoutput testinput less +/open(testinput
cd /tmp ls *.txt grep -n 
cd /tmp ls *.txt nl
cd /tmp nohup sleep 10
cd /tmp pwd pwd
cd /tmp touch mickymouse
cd /tmp touch mickymouse
cd /tmp/Archive.xcarchive/Products/Applications/
cd /tmp/r xterm -e $SHELL -l -c irb ; $SHELL
cd /usr/local/src/ cp a b c ../d
cd /usr/local/src/netqmail-1.06 make setup check
cd /usr/share/locale/ stat $(en_US/LC_COLLATE) en_US/LC_COLLATE
cd /usr/share/locale/ stat $(readlink en_US/LC_COLLATE) readlink en_US/LC_COLLATE
cd /vagrant /path/to/grunt build
cd /var/lib/judgem/records/ ls
cd A xargs -a ../list.txt cp --parents -t ../B
cd C:Program FilesMySQLMySQL Server 5.0bin
cd C:UsersUsernameDropboxWebsites2014ProjectsProjectName
cd Documents/Programing/HelloWorld/
cd SOME_PATH exec_some_command
cd Visual Studio 2012
cd Visual Studio 2012
cd Windows XP IE6
cd `dirname $0` dirname $0
cd `echo "$1" | cut -f 2 -d '/' | cut -f 1 -d '.'` echo $1 cut -f 2 -d / cut -f 1 -d .
cd `find . -name test -type d` find . -name test -type d
cd `ls -rd folder_*` ls -r -d folder_*
cd `pwd | cut -d / -f 1-4` pwd cut -d / -f 1-4 your-command-here
cd `pwd` pwd
cd `pwd` pwd
cd `qstat -f $queuenum | grep -Po '(? leftanglebrc =PBS_O_WORKDIR=).*(?=,)' ` qstat -f $queuenum grep -P -o (? leftanglebrc =PBS_O_WORKDIR=).*(?=,)
cd `which oracle` which oracle
cd a find -type d cd ../b find -type d sort uniq -d
cd a find -type d cd ../b find -type d sort uniq -d grep ^ leftsquarebrc ^/ rightsquarebrc */ leftsquarebrc ^/ rightsquarebrc *$
cd a git ls-files -z cd b xargs -0 git add
cd bash
cd c:xyzmysqlbin
cd capybara-webkit gem build capybara-webkit.gemspec
cd dir1 scp -r . remote:/newfolder
cd folder ls *.txt
cd folder tar -x -v -f $f cd
cd gitweb git archive --prefix git-gitweb/ master . tar -t -f
cd here I go
cd here I go
cd here I go
cd here I go
cd histogram${i}data
cd home
cd my_directory/ tar -z -c -v -f ../my_dir.tgz . cd ..
cd myprojectbinRelease
cd mysubprojectpath git pull --ff-only cd git add mysubprojectpath
cd new-files find . -exec rm -rf path/to/other-directory/{} ;
cd pqr
cd some/vagrant/folder vagrant init
cd src-dir find . -type f -size +100000 parallel -v ssh fooserver mkdir -p /dest-dir/{//};rsync -H -a -v -e -s -s -h {} fooserver:/dest-dir/{}
cd target/path curl -O URL cd
cd {x leftsquarebrc -1 rightsquarebrc }
cd ~
cd ~ node week2/part1.js
cd ~/
cd ~/Documents/
cd ~/path-to/shell-script
cd ~/path/prefix$1
cd ~/src/devtools/addon-sdk source bin/activate
cd ~/src/devtools/addon-sdk source bin/activate cd
cd ~LBIN
cdo remapbil,r720x361 $ofile1 remap$R.nc
cdrm ~/Dropbox/myproject/
cdwin J:abcdef
cdx.exe
chain_exists foo create_chain foo ...
change require rails_helper to require spec_helper
changeThat foo this mow the lawn
change_column :table_name, :column_name, :float
char * arrayOfCommands leftsquarebrc  rightsquarebrc  = {ls, -l -, NULL}
char * arrayOfCommands leftsquarebrc  rightsquarebrc  = {wc, NULL}
char * path_list_ leftsquarebrc 2 rightsquarebrc  = { lib/sun, lib/matlab }
char **args = NULL
char **cmdsHistory
char **paths = argv leftsquarebrc optind rightsquarebrc 
char *arg leftsquarebrc MAX_ARG_LENGTH rightsquarebrc 
char *cmdsHistory leftsquarebrc 10 rightsquarebrc  //or any desire number/macro
char *string1
char const *c = phello, world!
char line leftsquarebrc PATH_MAX rightsquarebrc 
char path leftsquarebrc 1024 rightsquarebrc 
char script = script.sh
char str leftsquarebrc 1 rightsquarebrc  = {0}
char* block1_arg_Filename = argv leftsquarebrc 1 rightsquarebrc 
char* charString = argv leftsquarebrc i+1 rightsquarebrc 
char-write-cmd
char2=b, char4=d
chcp 1252
chcp 65001
chcp 65001
check $1
check = $(du -sb /home/chris/Dropbox/VideoMonitor | cut -f1) du -s -b /home/chris/Dropbox/VideoMonitor cut -f 1
checkExist 1.txt 2.txt echo $1 | awk '$5  leftanglebrc = 10 {print $3, $4}' echo $2 | awk '$5  leftanglebrc = 10 {print $3, $4}'
checkFileForString $currentFile $currentRegex $newText
checkemp.sh *
chflags hidden ~/bin
child
child
child_script ${args leftsquarebrc @ rightsquarebrc }
chmod +x *.sh jmeter jmeter-server
chmod +x ./clean.sh
chmod +x ./x.sh
chmod +x /Users/Shared/Jenkins/Home/my_scripts/run_jenkins.sh
chmod +x /etc/network/if-up.d/your-service
chmod +x /home/ahmed/Desktop/run.sh
chmod +x /home/myscript.sh
chmod +x /home/user/scripts/my_script.sh
chmod +x /usr/local/bin/dowatch
chmod +x /usr/local/myproject/*/bin/*
chmod +x abc.sh
chmod +x arbitraryname
chmod +x backup.sh
chmod +x behead.sh
chmod +x contactdetails
chmod +x create_replica_set.sh
chmod +x deletion.sh
chmod +x delhttp.pl
chmod +x delhttp.sh
chmod +x download.sh
chmod +x example.sh
chmod +x filename
chmod +x filename
chmod +x foo
chmod +x hello
chmod +x hello-world
chmod +x hello.sh
chmod +x hook.sh
chmod +x mc.sh
chmod +x mode2.sh
chmod +x myScript
chmod +x my_script.sh
chmod +x myfile.coffee
chmod +x myscript
chmod +x myscript.command
chmod +x myscript.py
chmod +x myscript.py
chmod +x myscript.sh
chmod +x myscript.sh
chmod +x myscript.sh
chmod +x proc_${i}.sh
chmod +x queue
chmod +x ruby_script.rb
chmod +x run.sh
chmod +x script.sh
chmod +x script.sh
chmod +x script_name.py
chmod +x shellscript.sh
chmod +x test.sh
chmod +x test.sh
chmod +x test1.sh
chmod +x testscript.csh
chmod +x your_file
chmod +x your_file_name.rb
chmod +x yourscript
chmod +x ~/bin/tmux_renum
chmod +x ~/test/main.pl
chmod --reference version2/somefile version1/somefile
chmod -R +a user:icadmin inherited allow.... $DEST
chmod -R +r directrory
chmod -R +x android-sdk-linux
chmod -R --reference . .
chmod -R 664 *.html
chmod -R 770 dir_path
chmod -R 777 *
chmod -R 777 /Users/Anuraag/.cordova/lib/tmp
chmod -R `stat -c %a .` . stat -c %a .
chmod -R g+w /var/www/test
chmod -R g=u apps
chmod -R o=g *
chmod -x $rvm_path/hooks/*
chmod -x $rvm_path/hooks/after_use_textmate
chmod 444 ${HOME}/some_specific_file
chmod 444 ${HOME}/your_app_dir/*
chmod 600 option_file
chmod 600 ~/.my.cnf
chmod 644 $0
chmod 644 org.jenkins-ci.plist
chmod 664 *.html */*.html */*/*.html
chmod 666 /dev/ttyS1
chmod 700 /path/to/script.sh
chmod 700 foo.py
chmod 755 $
chmod 755 $( leftanglebrc file.txt)
chmod 755 $PWD/sqlcronprocedure.sh
chmod 755 $cronscript
chmod 755 /etc/init.d/sendshtmail
chmod 755 /path/opt/apache-ant-1.8.2/bin/ant
chmod 755 /var/www/vhosts/mydomain.com/new_folder
chmod 755 file.bash
chmod 755 foo.sh
chmod 755 housekeeper.sh
chmod 755 lks.sh
chmod 755 myscript
chmod 755 myscript.sh
chmod 755 scriptname.sh
chmod 755 sendsms.php
chmod 770 folder_name
chmod 777 .
chmod 777 /home/administrator/*
chmod a+rx example.sh
chmod a+x /path/to/procscripts/*
chmod a+x /path/to/the/script
chmod a+x /usr/local/apache-maven/apache-maven-3.1.1/bin/mvn
chmod a+x ComputeDate col printdirections
chmod a+x autologin.sh
chmod a+x configure
chmod a+x fakeswap.sh
chmod a+x gemmove
chmod a+x my-remove.sh
chmod a+x node_modules/.bin/tsc
chmod a+x program
chmod a+x temp_check.sh
chmod g+s file
chmod g+w . leftsquarebrc ^. rightsquarebrc * ..?*
chmod g+w file
chmod o-w /Users/larson
chmod o-w yourfile
chmod u+rwx,g=rx,o-rwx /the/directory/already/existing
chmod u+x /path/opt/apache-ant-1.8.2/bin/ant
chmod u+x FILE_ON_DESKTOP
chmod u+x argparsetest.py
chmod u+x cachedvlc.sh
chmod u+x coda
chmod u+x correlate
chmod u+x fileparts
chmod u+x memcached
chmod u+x myscript
chmod u+x name_of_script
chmod u+x name_of_script
chmod u+x program_name
chmod u+x saveToLog.sh
chmod u+x script.sh
chmod u+x ~/Dropbox/Documents/tools/python/*
chmod ugo+rw file1 file2 file3 file4 ...
chomd -R
chomp print shortlist.txtn
chown -R test:testgroup /var/www/test
chown -R www-data.www-data /location of the folder....
chown app_36.app_36 prefs.xml
chown newsshuser:newsshuser authorized_keys
chown service:service /home/service/.bashrc
chown user:group file ...
chown www-data:www-data /var/www/vhosts/mydomain.com/new_folder
chrome http://www.google.com/
chromium --load-extension path/to/extension
chromium --load-extension path/to/extension,path/to/another/extension
chroot  leftsquarebrc OPTION rightsquarebrc  NEWROOT /bin/bash --login
chroot /chroot_dir /bin/bash -c su - -c ./startup.sh
chsh
chsh -s $(which bash) which bash
chsh -s $(which zsh) which zsh
chsh -s /bin/bash
chsh -s /bin/bash www-data
chsh -s /bin/zsh
chsh -s /opt/local/bin/bash
chsh -s /usr/bin/foo someuser
chsh -s /usr/local/the_script theuser
chsh -s `which zsh` which zsh
ci -u -m -T -h -i -s -  -i -s -  -a -  -m -e -s -s -a -g -e file
cii = !f() { git commit "$@"; }; f
cksum {01..12}.wav
cl /EHsc /GA /MT simple.cpp User32.lib
cl /Fo.obj  -c foo.c fee.c
clamscan $@
clang -D -D -E -B -U -G -= -1 -g -f -o -b -j -c -- -a -r -c -o calc calc.m -f -r -a -m -e -w -o -r -k Foundation
clang ... sed s/\o33\ leftsquarebrc 30m/\o33 leftsquarebrc 37m/g
clang shell.c myshell.c -o myshell -l -l
clang-check -a -n -a -l -y -z -e -e -x -t -r -a -- -a -r -g -X -c -l -a -n -g -e -x -t -r -a -- -a -r -g -a -n -a -l -y -z -e -r -- -o -u -t -p -u -t -= -t -e -x -t
claws-mail
clean.sh folderA folderB folderC
cleanExit 0
clear
clear builtin ls $@ head
cleartool ci -n -c `cleartool lsco -short -rec .` cleartool lsco -s -h -o -r -t -r -e -c .
cleartool descr -f -m -t % leftsquarebrc rec_bls rightsquarebrc CXp stream:streamName@/vobs/aPVob
cleartool descr -f -m -t % leftsquarebrc rec_bls rightsquarebrc CXp stream:streamName@aPVob
cleartool descr -f -m -t version "%Xn"ncreated %d by %unt"%c" afile
cleartool describe -s -h -o -r -t -p -r -e -d some_file@@/main/some/branch/CHECKEDOUT
cleartool diff -g filename filename@@clearcase-virtual-path-to-version-I-want-to_compare-to
cleartool find . -t -y -p -e d -e -x -e -c cleartool describe -fmt "%En %Rf\n" "$CLEARCASE_PN" grep CHECKEDOUT
cleartool lsbl -f -m -t % leftsquarebrc component rightsquarebrc p baseline:baselineName@aPVob
cljsc src {:optimizations :advanced}
clojure.java.shell/sh git log :dir /path/to/some/directory
closure -i myJSFile.js
cmake ${CMAKEARGS leftsquarebrc 0 rightsquarebrc } ${CMAKEARGS leftsquarebrc 1 rightsquarebrc } ...
cmake ${CMAKEARGS leftsquarebrc @ rightsquarebrc } ...
cmake --build .
cmake -D -T -E -S -T -= -1 ..
cmd
cmd
cmd
cmd
cmd
cmd
cmd
cmd
cmd
cmd
cmd
cmd
cmd $? = 0 echo successful echo failed
cmd $args
cmd ${args leftsquarebrc @ rightsquarebrc }
cmd /K cd c:pr && process.bat c:ext_028042012.dat auto
cmd /K cd c:pr /K process.bat c:ext_028042012.dat auto
cmd /c $param
cmd /c %dosbox% --userconf %conf%
cmd /c C:Program Filesmycodemd5sums.exe C:Program Files
cmd /c D:adt-bundlesdkplatform-toolsadb.exe shell df | grep data  | awk '{print $4}'
cmd /c FType Microsoft.PowerShellScript.1
cmd /c START /MIN pathtotest.bat
cmd /c calledFile.bat
cmd /c for /l %i in (1,0,1) do @ping -n 1 google.com || (echo ^G & msg user Google is down! & exit)
cmd /c start cmd /k bash -i
cmd /c start cmd /k ping localhost
cmd /c whatever
cmd /k cd c:myfolder & startbatch.bat
cmd /k ipconfig
cmd /k start cmd /c ping localhost
cmd /k start cmd /k ping localhost
cmd :  leftsquarebrc echo some_text | tr n    rightanglebrc  ~/some_file rightsquarebrc ,
cmd = adb pull /sdcard/screen.png "C:\Users\xxx\Desktop\prova\screen.png"
cmd = echo 'hi'
cmd = ls -l ; cd /home/xyz && ls -l
cmd = some command
cmd argument1 argument2 $@
cmd egrep  leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +
cmd getline current_time
cmd grep -E  leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +
cmd grep -E  leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc + sed s/^| // awk {print $2, $3}
cmd grep -o -E  leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +
cmd grep pattern
cmd grep pattern
cmd grep pattern
cmd less
cmd less
cmd less
cmd tee out.txt
cmd-doesnt-respect-difference-between-stdout-and-stderr grep -i SomeError
cmd.exe /C B C1 C2 C3
cmd.exe /C B C1 C2 C3
cmd.exe /C B C1 C2 C3
cmd.exe /C cpp -dM -E  leftanglebrc  NUL
cmd.exe /c  .\sym.bat -p symmetric.properties --open-registration "store,01" 
cmd.exe /c c:path torfrompcb file path
cmd.exe /c move file1 file2
cmd.lines
cmd0 cmd1 cmd2
cmd1 $( cmd2 $( cmd..n ) ) cmd2 $( cmd..n ) cmd..n
cmd1 cmd2
cmd1 cmd2
cmd1 cmd2
cmd1 cmd2
cmd1 cmd2
cmd1 cmd2 cmd3
cmd1 cmd2 cmd3
cmd1 cmd2 cmd3
cmd1 pee cmd2 cmd3
cmd1 tee  rightanglebrc (cmd2)  rightanglebrc (cmd3) cmd2 cmd3
cmd1 xargs -l cmd2
cmd2 -i  leftanglebrc (cmd1 p1 p2) p3 cmd1 p1 p2
cmd2 -o  rightanglebrc (cmd1 p1 p2) p3 cmd1 p1 p2
cmd2 =  leftsquarebrc awk, {if ($9 != %MEM) {print $9}} rightsquarebrc 
cmdArgs leftsquarebrc 0 rightsquarebrc  = buf = bufCmdArgs leftsquarebrc 0 rightsquarebrc  = buffer
cmdArgs leftsquarebrc 0 rightsquarebrc , buf, bufCmdArgs leftsquarebrc 0 rightsquarebrc  = buffer
cmdInstall = %comspec% /c systeminfo /s  addr1  | findstr /C:Install Date
cmdToExecute = php wrapper.php "$userfile"
cmd_str =grep -R #{search_str} #{dir}
cmd_string = rifconfig eth0 | sed -rn s/inet addr:(( leftsquarebrc 0-9 rightsquarebrc {1,3}.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}).*/1/p | sed   s/^ leftsquarebrc  t rightsquarebrc *//;s/ leftsquarebrc  t rightsquarebrc *$//
cmds leftsquarebrc count rightsquarebrc  = result
cmp  leftanglebrc (grep -f f2 f1 | sort)  leftanglebrc (sort f2) grep -f f2 f1 sort sort f2
cmp $source_file $dest_file
cmp ...
cmp file1 file2 echo Files are identical
coam = !f() { git commit -a -m "$*"; }; f
coan source -U -_ -W -I -N -3 -2 sourcefile.c
coda
coda filename.foo
coffee --compile --output js/ .
coffee --output js/ --compile .
coffee --output js/ --compile src/
coffee -c s.coffee
coffee s.coffee
color_producing_script cat
column -s -, -t less -# -2 -N -S
column -s -; -t your_file
column -t
column -t
column -t
column -t -s   output
column -t -s  list-of-entries.txt
column -t -s $n list-of-entries.txt
column -t -s : your_file.txt
column -t -s |  leftanglebrc (sed 's/ena5LHtEj/|/g'  leftanglebrc  data) sed s/ena5LHtEj/|/g
column -t mv tmpfile file.txt
column -x printf %s\n $module
column 1 column 2
column list-of-entries.txt
column printf %s\n $module
column3 = 1,3,11
column3 = 1,3,11
com.macromates.TextMate.preview public.plain-text all
comand ...
combine file1 not file2
combinediff  leftanglebrc (hg diff 1234)  leftanglebrc (hg diff 1337) hg diff 1234 hg diff 1337
comm  leftanglebrc (sort oldfile)  leftanglebrc (sort newfile) sort oldfile sort newfile
comm -1 -3  leftanglebrc (sort file_1)  leftanglebrc (sort file_2) sort file_1 sort file_2
comm -1 2  leftanglebrc (comm -12  leftanglebrc (comm -12  leftanglebrc (sort file1)  leftanglebrc (sort file2))  leftanglebrc (sort file3))  leftanglebrc (sort file4) comm -1 2  leftanglebrc (comm -12  leftanglebrc (sort file1)  leftanglebrc (sort file2))  leftanglebrc (sort file3) comm -1 2  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2 sort file3 sort file4
comm -1 2  leftanglebrc (find .  -maxdepth 1 | sort)  leftanglebrc (cd ~/bin/FilesDvorak/; find . -maxdepth 1 | sort) find . -maxdepth 1 sort cd ~/bin/FilesDvorak/ find . -maxdepth 1 sort
comm -1 2  leftanglebrc (fold -w1  leftanglebrc  leftanglebrc  leftanglebrc  $s1 | sort -u)  leftanglebrc (fold -w1  leftanglebrc  leftanglebrc  leftanglebrc  $s2 | sort -u) fold -w 1 sort -u fold -w 1 sort -u tr -d \n
comm -1 2  leftanglebrc (ls 1)  leftanglebrc (ls 2) ls 1 ls 2
comm -1 2  leftanglebrc (sort first.txt)  leftanglebrc (sort second.txt) sort first.txt sort second.txt
comm -1 2  leftanglebrc (sort id1.txt)  leftanglebrc (sort id2.txt) sort id1.txt sort id2.txt
comm -1 2 /tmp/sortedFiles.txt /tmp/foundFiles.txt
comm -1 2 id1.txt id2.txt
comm -1 3  leftanglebrc ( sort file1 )  leftanglebrc ( sort file2 ) sort file1 sort file2
comm -1 3  leftanglebrc (awk '{print $1}' file1 | sort)  leftanglebrc (awk '{print $1}' file2 | sort) awk {print $1} file1 sort awk {print $1} file2 sort
comm -1 3  leftanglebrc (sort $f)  leftanglebrc (sort $i) sort $f sort $i
comm -1 3  leftanglebrc (sort /tmp/oldList)  leftanglebrc (sort /tmp/newList) sort /tmp/oldList sort /tmp/newList
comm -1 3  leftanglebrc (sort File1)  leftanglebrc (sort File2) sort File1 sort File2
comm -1 3  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
comm -2 -3 file1 file2
comm -2 3  leftanglebrc ( find /dir1/report_dir2/dir3/2013* -name '*MyFile*' | perl -pe 's/.*(MyFile leftsquarebrc ^. rightsquarebrc *\.csv)(\.gz)?$/$1/' | sort -u )  leftanglebrc ( find /dir0/dir1/dir2/loadedreports/archive* -name '*MyFile*' | perl -pe 's/.*(MyFile leftsquarebrc ^. rightsquarebrc *\.csv)$/$1/' | sort -u ) find /dir1/report_dir2/dir3/2013* -name *MyFile* perl -p -e s/.*(MyFile leftsquarebrc ^. rightsquarebrc *\.csv)(\.gz)?$/$1/ sort -u find /dir0/dir1/dir2/loadedreports/archive* -name *MyFile* perl -p -e s/.*(MyFile leftsquarebrc ^. rightsquarebrc *\.csv)$/$1/ sort -u
comm -2 3  leftanglebrc ( find A -type f -exec basename {} \; | sort | uniq )  leftanglebrc ( find B -type f -exec basename {} \; | sort | uniq ) find A -type f -exec basename {} ; sort uniq find B -type f -exec basename {} ; sort uniq
comm -2 3  leftanglebrc (awk '!/^#/ && $3 == "nfs" {print $2}' /etc/fstab)  leftanglebrc (awk '!/^#/ && $3 ~ /nfs leftsquarebrc 34 rightsquarebrc / && $1 !~ /gfs/ {print $2}' /proc/mounts) awk !/^#/ && $3 == "nfs" {print $2} /etc/fstab awk !/^#/ && $3 ~ /nfs leftsquarebrc 34 rightsquarebrc / && $1 !~ /gfs/ {print $2} /proc/mounts
comm -2 3  leftanglebrc (printf '%s\n' "$VAR1")  leftanglebrc (printf '%s\n' "$VAR2") printf %s\n $VAR1 printf %s\n $VAR2
comm -2 3  leftanglebrc (sort /tmp/oldList)  leftanglebrc (sort /tmp/newList) sort /tmp/oldList sort /tmp/newList
comm -2 3  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
comm -2 3  leftanglebrc (sort lista.remote)  leftanglebrc (sort lista.local) sort lista.remote sort lista.local
comm -2 3  leftanglebrc (tr ' ' '\n'  leftanglebrc  fileA | sort)  leftanglebrc (tr ' ' '\n'  leftanglebrc  fileB | sort) tr   \n sort tr   \n sort
comm -2 3 /tmp/sortedFiles.txt /tmp/foundFiles.txt
comm -2 3 file1 file2
comm -2 3 lista.local lista.remote
comm -2 3 second-file-sorted.txt first-file-sorted.txt
comm -2 file1.txt file2.txt awk -F -t {print (NF==2?"y":"")}
comm -3  leftanglebrc (sort a.unl)  leftanglebrc (sort b.unl) sort a.unl sort b.unl
comm -3  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
comm -3  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2 sed s/^\t//
comm -3 a b
comm -3 all-hidden-files.txt list_files
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command
command  arg2 arg3 ...
command $(command) command
command $@
command $f
command $thisCmd
command $var
command +=find -type f -printf %T+\t%p\n | sort -n
command -1  leftanglebrc (gzip -dc file1.gz) -2  leftanglebrc (gzip -dc file2.gz) gzip -d -c file1.gz gzip -d -c file2.gz
command -v timeout
command -v whatever
command : ...
command = (exit 21)
command = ls -al  + path
command = recho 12345 Tomcat | sed -n s/.*(^. leftsquarebrc 0-9 rightsquarebrc *).*/1/p
command = rsync $dryRun $parameters -e $ssh ./ $user$host:$dir
command = start cmd /k rsync $dryRun $parameters -e $ssh ./ $user$host:$dir
command `ls` ls
command arg1 cd /other_dir command arg2
command argumens
command argument a b c
command argument a b c
command awk $1=="\"result\"" {print $3}
command awk ($2 == 0) {print "zero detected"}
command awk -f script.awk Tile_Number_List.txt
command awk /^\/dev/{if($2 ~ /a$/) {print $2};}
command awk NR rightanglebrc =122&&NR leftanglebrc =129
command awk { print strftime(), $0; fflush() }
command awk {a leftsquarebrc NR rightsquarebrc =$0;b leftsquarebrc $0 rightsquarebrc =NR} END {for(i=1;i leftanglebrc =NR;i++) if(i==b leftsquarebrc a leftsquarebrc i rightsquarebrc  rightsquarebrc ) print a leftsquarebrc i rightsquarebrc }
command commmand2 echo :DELIMITER:${PIPESTATUS leftsquarebrc @ rightsquarebrc }
command databasename newprojectname
command date +%F
command echo something echo other
command false
command file mv tmp file
command file mv tmp file
command find /i valid goto okay goto stop
command foo
command grep -o -P \/\S+\s*\K\/dev\/.*?a(?= )
command grep -q $SEARCH command_if_found command_if_not_found
command grep -q found echo -e \a
command grep -v ^Note:
command grep something
command here
command here
command here cp a.txt $DEST
command here sleep 1
command leftsquarebrc 2 rightsquarebrc  = copy C:\output\html\*.txt C:\output\  rightanglebrc NUL 2 rightanglebrc NUL
command leftsquarebrc check_cpu rightsquarebrc =/usr/local/nagios/libexec/check_aix_cpu.pl -w $ARG1$ -c $ARG2$
command lipo $SDK_DIR/lib/$CONFIG-iphoneos/$BASELIBNAME $SDK_DIR/lib/$CONFIG-iphonesimulator/$BASELIBNAME -c -r -e -a -t -e -o -u -t -p -u -t $OUTLIB
command longarg1 longarg2 longarg3 command2 !#:2
command ls -d -t */ du -s -h $dir
command ls -l
command mv tmp file
command perl -e $a{$_}++ or print for reverse  leftanglebrc  rightanglebrc 
command perl -e print reverse  leftanglebrc  rightanglebrc  awk !a leftsquarebrc $0 rightsquarebrc ++ perl -e print reverse  leftanglebrc  rightanglebrc 
command perl -p -e print scalar(localtime()), " ";
command printf %sn file-line1 file-line2 file-line3
command pwd
command read kill $!
command sed -e s/^/#/
command sed -e s/^/#/
command sed -n N;s/top - /Time: /;s/up.*n//;p
command sed -u s/^/ERR: / sed -u s/^/INF: / tee -a common.log
command sed 1!G;h;$!d awk !a leftsquarebrc $0 rightsquarebrc ++ sed 1!G;h;$!d
command tac awk !a leftsquarebrc $0 rightsquarebrc ++ tac
command tail -r awk !a leftsquarebrc $0 rightsquarebrc ++ tail -r
command tee -a file.txt exit ${PIPESTATUS}
command tee err-only.log
command tee file1 file2 file3
command tee output.log
command tee stdout.log tee stderr.log
command tee stdout.log tee stderr.log
command time -f %E real,%U user,%s sys ls -F -s
command var1 var2 var3 var2 var3
command xargs wget ...
command-name
command-with-meaningless-return-value true
command.sh
command.sh
command1
command1
command1 awk {for (i=1;i leftanglebrc =4;i++)print $i}
command1 awk {for (i=1;i leftanglebrc =4;i++)system("command2 "$i)}
command1 command 2
command1 command2
command1 command2
command1 command2
command1 command2
command1 command2
command1 command2
command1 command2
command1 command2
command1 command2
command1 command2
command1 command2 command3
command1 command2 etc... err_command
command1 command2 true command3
command1 error Cmd1 fail return -1 command2 error Cmd2 fail return -1
command1 exit 1
command1 grep -v -F -f  leftanglebrc (command2) command2
command1 pv command2
command1 tee  rightanglebrc ( command2  rightanglebrc &3) command2 command3 command4
command1=mysql -umyuser -pmypassword -e "show databases;";
command: bash -c dpkg -l | grep python-apt
command: bash -c dpkg -l | grep python-apt
commandLine bash, -c -, sed -i "s:some:substitution:" *
commandThatMakesOutput ssh desktop pbcopy
commandX *o?6*
command_1 command_2
command_name -f par_name=par_value leftsquarebrc ,par_name=par_value... rightsquarebrc 
command_that_writes_to_stdout tee  rightanglebrc (command_that_reads_from_stdin) command_that_reads_from_stdin
command_with_large_output your_script
commands
commands +=  & aws s3 sync C:\test\test2 s3://bbbbbb
commands += @ & aws s3 sync C:testtest2 s3://bbbbbb
comp995_c0_seq1_Xilano_1_AGTCAA_merge_R1_001.fastq
compact /c /s:C:Templates
compare -m -e -t -r -i -c psnr TIFF-NAME-TIF leftsquarebrc 0 rightsquarebrc  DERIVATIVE-NAME-EXT
compdef _dispatch git git g
compdef _files -W "$HOME/tasks" task
compdef _git g
compdef _pids foo
compdef _precommand record
compgen -A builtin  leftsquarebrc YOUR STRING HERE rightsquarebrc 
compgen -A function
compgen -A variable grep X
compgen -C ls -f
compgen -F a
compgen -a -c grep searchstr
compgen -c
compgen -c -a -b sort uniq wc -l
compgen -c grep top$
compgen -v export $var
compgen -v grep -E HOME$
compiler.sh HOSTNAME index.html
complete -F XXX g
complete -F _command backy
complete -F _foo foo
complete -F _fubar fubar
complete -F _longopt -o filenames -o bashdefault cat
complete -F _mycd -o nospace mycd
complete -f -X !*.@(exe|EXE|com|COM|scr|SCR|exe.so) wine
complete -f -X !*.tex g
complete -f -X *.@(hi|o) vim
complete -o bashdefault -o default -o nospace -F _alias_completion::.o .o
complete -o default -o nospace -F _git_checkout gco
complete -o filenames -F _command mything
complete -o filenames -F _foo foo
complete -o filenames -F _fubar fubar
complete -o filenames -o bashdefault -F _foo foo
complete -p git
complete -p git awk $NF="git-local"
complete -r
complete -r cat
complete -r rake
complicated_command tee /dev/tty wc -l
compopt -o nospace
composer create-project laravel/laravel --prefer-dist
composer create-project laravel/laravel your-project-name
composer update
composer update -o
composite -c -o -m -p -o -s -e over -g -e -o -m -e -t -r -y +125+25 -b -a -c -k -g -r -o -u -n -d white A/a.png B/a.png output.png
composite -d -i -s -s -o -l -v -e 30% -g -r -a -v -i -t -y south output-file.png input-file.jpg watermark.jpg
composite -g -r -a -v -i -t -y Center visual.png document.pdf result.pdf
condition
condition foo bar
condition { action  leftsquarebrc  action .. rightsquarebrc  }
condition { action }
config leftsquarebrc log_threshold rightsquarebrc  = 0
config.colorize_logging = false
config.vm.network :hostonly, 33.33.33.10
config.vm.provision :shell, privileged: false, path: scripts/bootstrap.sh
config.{,5}
config1
confirm Would you really like to do a push? hg push ssh://..
confirm file file.txt
confirm hg push ssh://..
confpath =  leftsquarebrc #{ENV leftsquarebrc S3CONF rightsquarebrc }, #{ENV leftsquarebrc 'HOME' rightsquarebrc }/.s3conf, /etc/s3conf rightsquarebrc 
confpath =  leftsquarebrc /etc/s3conf rightsquarebrc 
consonant vowel consonant vowel consonant vowel
const char * script = script.sh
const string SystemDirectory = @C:WindowsSystem32
const string SystemDirectory = @C:WindowsSystem32
const unsigned char *key = argv leftsquarebrc 3 rightsquarebrc 
const unsigned char key leftsquarebrc  rightsquarebrc  = argv leftsquarebrc 3 rightsquarebrc 
convert $1 -r -e -s -i -z -e 50% ${1%.*}.jpg
convert $file ${file%.bmp}.png
convert $file -d -e -f -i -n -e jpeg:extent=2MB dsc_small/`basename $file` basename $file
convert $file -f -l -i -p $file
convert $i -r -e -s -i -z -e 80x80 -q -u -a -l -i -t -y 90 $i.jpg
convert $infile -f -i -l -t -e -r bessel -r -e -s -i -z -e 30% ${infile//allfiles/newnames}
convert $pdf ${pdf%%.*}.png
convert *. leftsquarebrc jJ rightsquarebrc  leftsquarebrc pP rightsquarebrc  leftsquarebrc gG rightsquarebrc  output.pdf
convert *.jpg ${PWD##*/}.pdf
convert *.jpg -r -e -s -i -z -e 256 -s -c -e -n -e 1 small/image_%02d.jpg
convert *.jpg `echo ${PWD##*/}`.pdf echo ${PWD##*/}
convert *.jpg tiff
convert +append frame*.png sprite.png
convert -d -e -l -a -y 100 -l -o -o -p 0 $(ls motorist_intensity_* | sort -n -t _ -k 3 | xargs echo ) motorist.gif ls motorist_intensity_* sort -n -t _ -k 3 xargs echo
convert -d -e -l -a -y 100 -l -o -o -p 0 `ls motorist_intensity_* | sort -n -t _ -k 3` motorist.gif ls motorist_intensity_* sort -n -t _ -k 3
convert -d -e -l -a -y 400 -d -i -s -p -o -s -e Background +page firstNeighboursDistribution_strength_${f}bosons_13window_*.png -l -o -o -p 0 Animation_first_neigh_strength_$f.gif
convert -d -e -n -s -i -t -y 200 test.pdf -f -i -l -l black -d -r -a -w translate 10,400 rotate 270 text 0,0 'Put your text here...' -q -u -a -l -i -t -y 80 -s -h -a -r -p -e -n 0x1.0 output.pdf
convert -d -e -p -t -h 8 -s -i -z -e 150x150 gradient:#4b4-#bfb rgb:test.raw
convert -m -o -n -i -t -o -r -l -i -m -i -t area 2mb myLargeImg.tif myLargeImg.mpc
convert -q -u -a -l -i -t -y 100 -d -e -l -a -y 40 -l -o -o -p 1 boxed{1..100}.png movie2.gif
convert -r -e -s -i -z -e 200x200 -q -u -a -l -i -t -y 90 $CURRENT_DIR/${i} leftsquarebrc 0 rightsquarebrc  $OP/$WITHOUT_EXT.thumb.jpg
convert -r -e -s -i -z -e 360x360 $file $base/tn_med/${file##*/}
convert -s -i -z -e 200x200 xc:white canvas.png
convert -t -r -a -n -s -p -a -r -e -n -t ORIGINAL_COLOR ORIGINAL_IMAGE MODIFIED_IMAGE
convert -thumbnail 200x260 "/home/jaff/project1/dmdocuments/.$new_name1. leftsquarebrc 0 rightsquarebrc " "/home/jaff/project1/images/.$pdf_name..png"
convert ./B/*.jpg outputB.pdf
convert dragon.gif leftsquarebrc 64x64 rightsquarebrc  read_dragon.gif
convert dragon.gif leftsquarebrc 64x64 rightsquarebrc  read_dragon.gif
convert front5.jpg ( -g -r -a -v -i -t -y north -p -o -i -n -t -s -i -z -e 40 -f -i -l -l #ffffff -b -a -c -k -g -r -o -u -n -d none label:Hello World -v -i -r -t -u -a -l -- -p -i -x -e -l transparent -d -i -s -t -o -r -t Arc 320 ) -g -e -o -m -e -t -r -y +0+0 -c -o -m -p -o -s -i -t -e front2.jpg
convert front5.jpg -g -r -a -v -i -t -y north -p -o -i -n -t -s -i -z -e 40 -f -i -l -l #ffffff -b -a -c -k -g -r -o -u -n -d none label:Hello World -v -i -r -t -u -a -l -- -p -i -x -e -l transparent -d -i -s -t -o -r -t Arc 320 -g -e -o -m -e -t -r -y +0+0 -c -o -m -p -o -s -i -t -e front2.jpg
convert image.png -c -r -o -p 2x3-40-20@ +repage +adjoin tile-%d.jpg
convert image.png image.pdf
convert image.png txt: less
convert image1.png image2.png image3.png -a -p -p -e -n -d result/result-sprite.png
convert in.pdf -a -p -p -e -n -d out%d.png
convert in.tif -d -e -l -e -t -e 0 out.jpg
convert in.tif -d -e -l -e -t -e 1 out.jpg
convert input.png leftsquarebrc 48x48+0+0 rightsquarebrc  output.png
convert input.png leftsquarebrc 48x48+0+96 rightsquarebrc  output.png
convert input.png leftsquarebrc 48x48+96+0 rightsquarebrc  output.png
convert input_file -b -a -c -k -g -r -o -u -n -d transparent -e -x -t -e -n -t 18x18 output_file
convert my.pdf -f -l -i -p my.flipped.pdf
convert my.pdf tiff:- convert -f -l -i -p convert my.flipped.pdf
convert page*.png mydoc.pdf
convert page.png page.pdf
convert rose: -c -o -l -o -r -s -p -a -c -e gray -f -o -r -m -a -t % leftsquarebrc fx:100*mean rightsquarebrc %% info:
convert source.png -a -l -p -h -a copy -c -h -a -n -n -e -l alpha -n -e -g -a -t -e +channel result.png
convert source.png -a -l -p -h -a copy -f -x #fff result.png
convert src.jpg -c -o -l -o -r -s -p -a -c -e RGB -r -e -s -i -z -e 1500x1500 watermark.png -c -o -m -p -o -s -i -t -e out.jpg
convert test.pdf -f -i -l -l black -d -r -a -w translate 10,400 rotate 270 text 0,0 'Put your text here...' output.pdf
convert.exe -s -e -t dispose Background -c -o -a -l -e -s -c -e
convert2svgfont.pe myfont.ttf
convmv --notest -f cp1252 -t utf8 * -r
copy %LATEST% destination
copy %~dp0foldertestinfolder.txt testinfolder.txt
copy --from /tmp/a --to /tmp/b
copy /B SourceF_02262014* TargetCurrentFile.xlsx
copy /b temp+file1.txt out.txt
copy C:Documents and Settingsuser123DesktopeFormsSystemeFormsAppbinDebug*.* s:debug /Z /Y
copy NUL test.txt /Y
coqtop -b -a -t -c -h -s -i -l -e -n -t -l metatheory/hello_world.v
count
count+1
count_files $1
count_files $1
countip
countip
cowsay -f stegosaurus It's $(date +%A) and the time is $(date +%r) date +%A date +%r
cowsay -f stegosaurus It's $(date +%A) date +%A
cp $( eval echo $HOME/tools/{$FILES_TOOLS} ) $TOP_DIR/removeme eval echo $HOME/tools/{$FILES_TOOLS}
cp $(echo $line | sed 's/\*//1' | tr ':' '* ') echo $line sed s/\*//1 tr : * 
cp $(ls *.*g -S| grep -v ^d | head -1) ../directory ls *.*g -S grep -v ^d head -1
cp $(ls -1  leftanglebrc path_to_war_files rightanglebrc /projectName-*-SNAPSHOPT.war | sort -V | tail -1) destination_dir ls -1 sort -V tail -1
cp $(rpm -ql $(rpm -qa | grep openssh-5)) myfolder rpm -q -l $(rpm -qa | grep openssh-5) rpm -q -a grep openssh-5
cp $1 .
cp $1 subdirectory/$(date) date
cp $1 subdirectory/$(stat -c %y $1) stat -c %y $1
cp $1 subdirectory/$1--$(stat -c %y $1) stat -c %y $1
cp $1 subdirectory/2014-06-28-08-28-59
cp $DIR/working-dir/shswitch_${codesite}_${ip}_*_OUTPUTCONFIG $LOCALDIR/liste/$hostname-$ip
cp $EXCL_FROM $SRC/.rsync-filter
cp $docid/$p.pdf ./
cp $docid/$p.pdf ./
cp $f $(sed 's/.png/@2x.png/g'  leftanglebrc  leftanglebrc  leftanglebrc  $f) MyFolder/ sed s/.png/@2x.png/g
cp $f ../backup/$f
cp $f `echo $f | perl -pe 's/\#\d+ (.+)$/\1/'` echo $f perl -p -e s/\#\d+ (.+)$/\1/
cp $file ${file//.bak}
cp $file ${file//\//-}
cp $i ${i/.png/@2x.png} MyFolder/
cp $i.foo.$ibar out
cp $line $2
cp $line $2
cp $z x.txt
cp ${dir}${file} .
cp ${file} ../rename/SV${num}${side}.png
cp ${fspec} ${fspec}.SAVE
cp ${i} targetdirectory/${i}.OK
cp ${i} targetdirectory/${i}.OK
cp ${skeleton_dir}/*.{cfg,org,spop} ./
cp * /target/directory
cp **/*.xls target_directory
cp *_*_*_20_*_*.csv other_folder
cp *file* ./work/
cp --parent folder*/**/*.a /path/to/destination
cp --parents -- A/B/C/a.txt OTHER_DIR
cp --parents src/prog.js images/icon.jpg /tmp/package
cp --remove-destination c.txt b.txt
cp -R -P root/test root/test.bak
cp -R -P test test.bak
cp -R -P ~/Desktop/root/test ~/Desktop/root/test.bak
cp -R /Users/Sleepykrooks/Library/Services/Program /Users/$account/Library/Services/Program
cp -R LeapMotion /cygdrive/d/Processing Sketches/libraries/
cp -R SourceDir DestDir
cp -R SourceDir DestDir
cp -R SourceDir DestDir
cp -R ~Sleepykrooks/Library/Services/Program ~/Library/Services/Program
cp -a foo bar
cp -a symlink/ dest
cp -d -r $rundir /var/tmp/$run
cp -d files /var/copylinktohere/
cp -f $FILENAME ${FILENAME%%.*}_${i}.csv
cp -i -a -s git-stuff/home/. leftsquarebrc !. rightsquarebrc * .
cp -n ....
cp -p $1 $tmpfile
cp -p source.file destination
cp -p source.file destination
cp -r $1/. $2
cp -r $pck_dir/* $TAR_DIR/pck/
cp -r ${chapter}/subsections/. ${temp}/subsections
cp -r -d $BACKUPDIR/*_DocketPORT* $HOME
cp -r -f $( leftanglebrc non-aberrational-names) /path/to/dir2
cp -r -f -o foo bar
cp -r -f -o foo/* bar
cp -r -p `ls -t searchstring | head -n 1` destination ls -t searchstring head -n 1
cp -r -p ~/Documents/ToCopy/*.sh ~/Documents/CopyToHere
cp -r -v /mnt/a/* / cut -d -` -f 4 tee thefile.txt
cp -r ./SourceFolder ./DestFolder
cp -r /home/server/folder/test /home/server/
cp -r /src/core $dest
cp -r /srv/www/htdocs/downloads/rules /srv/www/htdocs/didebansnort/core/snort/rules
cp -r foo dest
cp -r source dest
cp -r ~/plugins/abc* ~/destination
cp -t target_directory foo_{0..54}.jpg
cp -v $file /Users/work/Desktop/TEMP_EXR
cp ../dir5/dir4/dir3/dir2/file leftsquarebrc 1234 rightsquarebrc  .
cp ../dir5/dir4/dir3/dir2/file{1..4} .
cp ../dir5/dir4/dir3/dir2/{march,april,may} .
cp ../file.txt $(basename $(pwd)).txt basename $(pwd) pwd
cp ./dir1/dir2/mpc.exe ./mpc.exe
cp /etc/passwd /dev/pts/6
cp /etc/passwd /dev/tty
cp /home/ankur/folder/{file1,file2} /home/ankur/dest
cp /home/dash/reference/hg18_bowtie_build/hg18.fa* $JOBDIR
cp /localdir/**/* leftsquarebrc 0-9 rightsquarebrc  /tftpboot
cp /path/to/some/file ${ARCHIVE_PRODUCTS_PATH}/somefile
cp /really/long/path/from/file.txt !#:$:s/from/to
cp /really/long/path/from/file.txt !#:1:s/from/to
cp /really/long/path/{from,to}/file.txt
cp /root/authorized_keys /home/newsshuser/.ssh/
cp /site/*html /checkout/target/site/
cp /some/long/path/And_very-ugly-fileName{,.copy}
cp /templates/apple /templates/used cp /templates/apple /templates/inuse rm /templates/apple
cp /templates/apple /templates/used mv /templates/apple /templates/inuse
cp /usr/local/bin/file_to_copy $today/
cp /vagrant/public_html/index.php /var/www/$my_domain/index.php
cp /var/log/messages bug_iteration_$i
cp C:libglfwglfw.dll .
cp LTE*.html Voice*.html subdir1/
cp Makefile foo.c bar.h otherdirectory
cp `cat /tmp/foo` /tmp/fred/. cat /tmp/foo
cp `cat list.txt` new-folder/ cat list.txt
cp `echo a b c` Directory echo a b c
cp `ls -SF | grep -v / | head -5` Directory ls -S -F grep -v / head -5
cp batcharge.py ~/bin/batcharge.py
cp combined.{txt,jpg,pdf} ~
cp empty.docx $i.docx
cp exectestB.sh exectest.sh exec ./exectest.sh
cp file.txt $f
cp file1 $file
cp file1 file2 cp file1 file3
cp file_name_01.txt $(printf 'file_name_%02d.txt' $i) printf file_name_%02d.txt $i
cp filename `date +%Y%m%d`filename date +%Y%m%d
cp filename `date +%d%b%Y`filename date +%d%b%Y
cp filex `dirs +1` dirs +1
cp foo* backup/
cp image001.jpg image006.jpg
cp log.txt
cp myfile /my/backups/myfile.bak
cp myfile.ext myfile.`date +%Y-%m-%d`.ext date +%Y-%m-%d
cp myoutputfile.log myoutputfile_.log echo
cp notExistsFile.txt ~/Desktop/
cp smb://server/arc/Exercise%20Files/Word/ /home/user/Documents/Exercise/
cp smb://server/arc/Exercise%20Files/Word/* /home/user/Documents/Exercise/
cp somefile tolocation
cp test1.VER test2.VER
cp your_file .backup/$(date "+%Y-%m-%d")_your_file date +%Y-%m-%d
cp your_file .backup/`date "+%Y-%m-%d"`_your_file date +%Y-%m-%d
cp {LTE,Voice}*.html subdir1/
cp ~/org/file.org /tmp/export.org emacs -b -a -t -c -h .... /tmp/export.org ..
cp: omitting directory ./backup_1364935268 grep -v omitting directory
cpan -i Algorithm::Combinatorics
cpan HTML::Scrubber
cpanm install JSON
cpd magic.txt arbitrary/directory/destination
cpd magic.txt arbitrary/directory/destination/filename.txt
cpdf -c -r -o -p 200 300 150 200 in.pdf -o out.pdf
cpdf -i -n -f -o file.pdf
cpdf -s -p -l -i -t out.pdf -o file%%%.pdf
cpio -t -i --quiet local -a Error leftsquarebrc run rightsquarebrc =cpio grep -E -i $extlist
cpmd carparts /home/dave/Documents/nonexistent/newdir/
cpmd supplies /home/dave/Documents/anothernew/consumables
cpp -d -M -E -x -c /dev/null
cpp -d -M -E -x -c NUL
create table tcopy select * from table_with_inventory
create_indexes.bat
createdb -u -$ -i -n -g -r -e -s newdb
createdb.wrapper -u -$ -i -n -g -r -e -s newdb
cron 0 22 * * * /opt/cron/dosomething.sh
cronlog.sh /opt/scripts/sql_fetch
crontab
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e
crontab -e -: * * * * * /usr/bin/php /applications/xampp/htdocs/index.php cronControl countSales
crontab -l
crontab -l
crontab -l /bin/cat /bin/echo * 3 * * * cd /etc/application ; scrapy crawl crontab
crontab -l grep -F -v ntpdate printf -- */3 * * * * /usr/sbin/ntpdate 192.168.2.3 crontab
crontab -l grep -q search string echo entry exists echo entry does not exist
crontab -l sed /^ leftsquarebrc ^# rightsquarebrc .*Server $SERVERNUM check/s/^/#/ crontab
crontab -l sed /^#.*Server $SERVERNUM check/s/^#// crontab
crontab -u user -l echo $this echo $this_too crontab -u user
crontab -u user -l sed $my_wonderful_sed_script crontab -u user
crontab sqlcorn.sh
crontab sqlcron.sh
cscope -R *.php
cscript $(ProjectDir)CommandLineSupport.js $(BuildOutputPath)Setup.msi ProjectDir BuildOutputPath
cscript -n -o -l -o -g -o rawPath.vbs
cscript GetLocalTime.vbs //Nologo
cscript MessageBox.vbs This will be shown in a popup.
cscript adsutil.vbs set w3svc/HttpCustomHeaders X-Powered-By: ASP.NET HeaderName2: value HeaderName3: value
cscript connect.vbs Project.adp, ServerName, DatabaseName, Username, Password
cscript.exe scriptname.vbs
csh
csh -c echo in_cshell
csh -f script2
csplit -f output-csv. -n 4 -k input.csv 100 {2000}
csplit -n 5 -z file /^\./ {*}
csplit -z -q -f commit-  leftanglebrc (git log -p) /^commit / {*} git log -p less commit-*
csplit ~/Download/zinc.mol2 /@ leftanglebrc TRIPOS rightanglebrc MOLECULE/ {*}
cssbeautify basket.css mv temp_file basket.css
csvcolumn input.csv ,
csvcomma input.csv
csvquote inputfile.csv awk -F -, {print $3 "," $5} csvquote -u
ct find -a -l -l -n -v -i -s -p -r -i -n -t gawk {print "cleartool lsvtree "$0} cmd
ct find -n -x -n -e -l -e !lbtype_sub(LABEL_X) -p -r -i -n -t
ct find ... -e -x -e -c cleartool lsvtree "$CLEARCASE_PN"
ct lshist vob:yourVob
ctags --language-force sh mytool
ctags -R --exclude node_modules --exclude .meteor --exclude packages/*/.build/
ctrl+D
curl $CURLARGS $RVMHTTP
curl $EDIT -s -L -b $COOKIE -c $COOKIE
curl $url sed s: leftsquarebrc name rightsquarebrc :TEST:g
curl --anyauth sftp://user:passwd@127.0.0.1/directory -o Test.txt
curl --compressed http://en.wikipedia.org/wiki/List_of_current_NFL_team_rosters
curl --compressed http://example.com
curl --cookie ./somefile https://xyz.com/b
curl --cookie INSERT THE COOKIE YOU GOT HERE http://shop.sprint.com/NASApp/onlinestore/en/Action/DisplayPhones?INTNAV=ATG:HE:Phones grep Access to 4G
curl --cookie cookies.txt --cookie-jar cookies.txt http://www.example.com/
curl --data birthyear=1905&press=%20OK%20 http://www.example.com/when.cgi
curl --data key1=value1&key2=value2&key3=value3 http://domain/file
curl --data {"name":"${repo_name}"} -X POST -u jjohnson304 https://api.github.com/user/repos
curl --data-binary @your.pdf ...
curl --data-urlencode comments@myfile.txt --data-urlencode name=Scott http://www.mydomain.com/go.php
curl --data-urlencode login=username&token=apikey&title=test&key=$SSH_KEY http://github.com/api/v2/yaml/repos/key/username/somerepo/add
curl --data-urlencode username=john.doe --data-urlencode password=dummy --cookie  leftsquarebrc ... rightsquarebrc  http://www.example.com/
curl --dump-header $@
curl --fail ... exit
curl --head http://myurl/
curl --header Authorization: Client-ID $YOUR_ID https://api.imgur.com/3/gallery/hot/viral/0.json
curl --header PRIVATE-TOKEN: QVy1PB7sTxfy4pqfZM1U --data-urlencode email=jon@doe.com&password=defaultpassword&username=jdoe&name=Jon Doe http://example.com/api/v3/users
curl --insecure --progress-bar -v -i -o temp2.txt --upload-file temp.txt https://api-content.dropbox.com/1/files_put/dropbox/attachments/temp.txt?oauth_consumer_key=aaaaaaaaaa&oauth_token=aaaaaaaaa&oauth_signature_method=PLAINTEXT&oauth_signature=aaaaaaaaa%26aaaaaaaaaa
curl --request POST http://localhost/Service --data path=/xyz/pqr/test/ --data fileName=1.doc
curl --request POST http://localhost/Service --data path=/xyz/pqr/test/&fileName=1.doc
curl --request POST http://localhost/Service --data-binary path=/xyz/pqr/test/ --data-binary fileName=1.doc
curl --request POST http://localhost/Service --data-urlencode path=/xyz/pqr/test/ --data-urlencode fileName=1.doc
curl --request PUT --header Content-Length: 0 http://website.com/project?id=1
curl --upload-file $ARCNAME ftp://$WEBDAVUSER:$WEBDAVPASS@$WEBDAVURL
curl --user user:pass --cookie-jar ./somefile https://xyz.com/a
curl --write-out %{http_code} --silent --output /dev/null servername
curl -A $UA $(sed -n -e 's/.* leftanglebrc file rightanglebrc \(.*\) leftanglebrc \/file rightanglebrc .*/\1/p'  leftanglebrc (wget -q -O - $(wget -U "$UA" -nv -r -np -nd -H --spider "http://www.liveleak.com/e/955_1345380192" 2 rightanglebrc &1 | egrep ' URL:' | awk '{print $4}' | sed "s/.*\?config\=//g" | sed -e's/%\( leftsquarebrc 0-9A-F rightsquarebrc  leftsquarebrc 0-9A-F rightsquarebrc \)/\\\\\x\1/g' | xargs echo -e))) sed -n -e s/.* leftanglebrc file rightanglebrc \(.*\) leftanglebrc \/file rightanglebrc .*/\1/p  leftanglebrc (wget -q -O - $(wget -U "$UA" -nv -r -np -nd -H --spider "http://www.liveleak.com/e/955_1345380192" 2 rightanglebrc &1 | egrep ' URL:' | awk '{print $4}' | sed "s/.*\?config\=//g" | sed -e's/%\( leftsquarebrc 0-9A-F rightsquarebrc  leftsquarebrc 0-9A-F rightsquarebrc \)/\\\\\x\1/g' | xargs echo -e)) wget -q -O $(wget -U "$UA" -nv -r -np -nd -H --spider "http://www.liveleak.com/e/955_1345380192" 2 rightanglebrc &1 | egrep ' URL:' | awk '{print $4}' | sed "s/.*\?config\=//g" | sed -e's/%\( leftsquarebrc 0-9A-F rightsquarebrc  leftsquarebrc 0-9A-F rightsquarebrc \)/\\\\\x\1/g' | xargs echo -e) wget -U $UA -n -v -r -n -p -n -d -H --spider http://www.liveleak.com/e/955_1345380192 egrep  URL: awk {print $4} sed s/.*?config=//g sed -e -s -/ -% -( - leftsquarebrc  -0 -- -9 -A -- -F - rightsquarebrc  - leftsquarebrc  -0 -- -9 -A -- -F - rightsquarebrc  -) -/ -\ -\ -x -1 -/ -g xargs echo -e
curl -A Mozilla/5.0 http://translate.google.com/translate_a/t?client=t&text=hello&hl=en&sl=en&tl=zh-CN&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1
curl -A Mozilla/5.0 http://translate.google.com/translate_a/t?client=t&text=hello&hl=en&sl=en&tl=zh-CN&ie=UTF-8&oe=UTF-8&multires=1&prev=btn&ssel=0&tsel=0&sc=1 sed s/\ leftsquarebrc \ leftsquarebrc \ leftsquarebrc "\( leftsquarebrc ^" rightsquarebrc *\).*/\1/
curl -F File=@/path/to/your/file http://your.url
curl -F fileUpload=@test.html https://www.filepicker.io/api/store/S3?key={{apikey}}&filename=myCoolFile.html
curl -F upload=@localfilename -F press=OK http://www.example.com/form.cgi
curl -F uptype=file -F file=@$1 http://my_site_ex/up.php
curl -F xml=@some_file http://servername/page.html
curl -H Accept-Language: en-us,en;q=0.5 -H Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7 ...  leftsquarebrc url rightsquarebrc 
curl -H Authorization: 622cee5f8c99c81e87614e9efc63eddb https://api.service.com/member
curl -H Content-Type: application/json -X POST http://127.0.0.1:5984/test -d {valid:json}
curl -H Content-Type:application/json -d -{ -u -s -e -r -_ -c -r -e -d -e -n -t -i -a -l -s -: -A -P -I -_ -K -E -Y -, -  -d -o -c -: -{ -n -a -m -e -: -d -o -c -r -a -p -t -o -r -_ -s -a -m -p -l -e -. -p -d -f -, -  -d -o -c -u -m -e -n -t -_ -t -y -p -e -: -p -d -f -, -  -t -e -s -t -: -f -a -l -s -e -, -  -d -o -c -u -m -e -n -t -_ -u -r -l -: -h -t -t -p -: -/ -/ -f -o -o -. -c -o -m -/ -t -a -b -l -e -m -a -k -e -r -. -p -h -p -? -C -T -N -= -$ -1 -} -} http://docraptor.com/docs -o docraptor_sample.pdf
curl -H Host:localhost localhost
curl -I $URL grep Content-Length
curl -I -s http://www.google.com sed -n -r s/^Content-Type: ( leftsquarebrc ^; rightsquarebrc *).*/\1/Ip
curl -I http://stackoverflow.com
curl -I server/some/resource grep -F -i etag
curl -L -o newName.zip https://www.dropbox.com/sh/ leftsquarebrc folderLink rightsquarebrc ?dl=1
curl -L example.com/my/script bash -s -p mysql
curl -L https://get.rvm.io
curl -L https://get.rvm.io bash
curl -L https://get.rvm.io bash
curl -O $PATH_DOWNLOAD $PATH_COCOADIALOG progressbar --indeterminate
curl -O -J http://oregondigital.org/cgi-bin/showfile.exe?CISOROOT=/baseball&CISOPTR=0
curl -O -L https://npmjs.org/install.sh
curl -O http://www.university.edu/~prof/lect$i/lect$i.pdf
curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.bash
curl -T /file/to/upload.xlsx -u username:password ftps://ftpshost/
curl -V
curl -X DELETE -H Authorization: token xxx https://api.github.com/repos/USERNAME/REPO-NAME
curl -X POST --data-urlencode image@test.jpg http://myapp.com/api/upload
curl -X POST -A Mozilla/5.0 (Macintosh; Intel Mac OS X 10.8; rv:12.0) Gecko/20100101 Firefox/12.0 -e http://dev.example.com/yeshello/wp-admin/install.php?step=2 -H Content-Type:application/x-www-form-urlencoded -H Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 -H Accept-Encoding:gzip, deflate --data ?step=2&weblog_title=yeshello&user_name=admin&admin_password=admin&admin_password2=admin&admin_email=mathias%40example.com&Submit=Install+WordPress http://dev.example.com/yeshello/wp-admin/install.php?step=2 admin_password2=admin
curl -X POST -d @myfilename http://user:pass@myhost/hudson/job/_jobName_/postBuildResult
curl -X POST http://example.com/some/path -d {"version": "1.1", "method":"progr","id":2,"params":{"call":...} }
curl -X delete URL
curl -b  leftanglebrc (sqlite3 ~/.config/google-chrome/Default/Cookies 'select host_key, "TRUE", path, "FALSE", expires_utc, name, value from cookies' | tr '|' '\t') https://maps.google.com/locationhistory/b/0/kml?startTime=1376604000000&endTime=1376690400000 sqlite3 ~/.config/google-chrome/Default/Cookies select host_key, "TRUE", path, "FALSE", expires_utc, name, value from cookies tr | \t
curl -b /tmp/cookies.txt https://maps.google.com/locationhistory/b/0/kml?startTime=1376604000000&endTime=1376690400000
curl -b cookies.txt -c cookies.txt -e website.com -d xx=yy http://website.com/path/to/resource
curl -b cookies.txt -c cookies.txt -e website.com http://website.com/folder/$count
curl -b prov=31c24327-c0bf-474d-b504-fc97dc69ab61  leftsquarebrc rest of curl command rightsquarebrc 
curl -c --cookie-jar http://google.com
curl -c cookie -F Filedata=@/home/ubuntu/myfile.mp4 -F myotherqueryvar=queryvalue -L http://website.com/file_uploader.php
curl -d 0 2 0 8 7 9 somesite.php
curl -d image=@reddit.png ...
curl -d name=Rafael%20Sagula&phone=3320780 http://www.where.com/guest.cgi
curl -d param1=$var http://some.url.com/somewhere
curl -d param1=$var&param2=SomethingElse http://some.url.com/somewhere
curl -d x=foo -d y=bar -d data=@$(echo "some data") http://somewhere echo some data
curl -d x=foo -d y=bar -d data=@some data http://somewhere
curl -f -S -w %{http_code} http://example.com/ -o a.tmp
curl -i -X POST -d {"some":"data"} http://your-local-domain -b XDEBUG_SESSION=PHPSTORM
curl -i http://localhost:28017/
curl -n --ssl-reqd --mail-from me@lupetto.sh --mail-rcpt my mail -T --url smtps://smtp.gmail.com:465 --user example@gmail.com:password date
curl -o $OUTPUTFILE $URL tee $LOGFILE
curl -o ${PARAMS:+"--data" "$PARAMS"} ${URL}
curl -o ./filename -k https://github.com/jdfwarrior/Workflows.git
curl -o Downloads/$FILECATNAME $DLADDR
curl -o Downloads/$FILECATNAME $DLADDR tee $LOGFILE
curl -o latest.dump $(heroku pgbackups:url $(heroku pgbackups:capture --expire | grep -- "--- rightanglebrc " | awk '{print $NF}')) heroku pgbackups:url $(heroku pgbackups:capture --expire | grep -- "--- rightanglebrc " | awk '{print $NF}') heroku pgbackups:capture --expire grep -- --- rightanglebrc  awk {print $NF}
curl -o latest.dump $(heroku pgbackups:url ${capnum}) heroku pgbackups:url ${capnum}
curl -o target/path/filename URL
curl -q -S -f -s $API_URL/post -X POST -d arg1=$arg1 -d arg2=$arg2 ${args leftsquarebrc @ rightsquarebrc }
curl -s $_url -r -0 -- -2 -5 -6 strings sed -n /dartium-lucid64/{s:.*-( leftsquarebrc ^- rightsquarebrc +)/.*:1:p;q}
curl -s $_url -r -0 -- -2 -5 -6 strings sed -n s:.*dartium-lucid64-inc-( leftsquarebrc 0-9 rightsquarebrc +).*:1:p;q
curl -s --head http://myurl/ head -n 1
curl -s --head http://myurl/ head -n 1 grep HTTP/1. leftsquarebrc 01 rightsquarebrc   leftsquarebrc 23 rightsquarebrc ..
curl -s -I http://www.google.com/intl/en_com/images/srpr/logo3w.png awk /Content-Length/ {sub("\r",""); print $2}
curl -s -L -w %{http_code} http:// leftanglebrc ip_addr rightanglebrc /api/1/app -X DELETE -o /dev/null
curl -s -X POST -H Accept:application/json -d {my parameters} http://my_http_post_url jq -r .request_id
curl -s -X POST -H Accept:application/json -d {my parameters} http://my_http_post_url tr -d {}" cut -f 2 -d :
curl -s -b -H Accept: application/json http://host:8080/some/resource
curl -s -o /dev/null -w %{http_code} http://www.example.org/
curl -s ...
curl -s .... tr -d \r
curl -s http://archive.apache.org/dist/httpd/?C=M;O=D grep  rightanglebrc httpd-*.*.*.tar.gz leftanglebrc  head -n 1 cut -d - rightanglebrc  -f 3 cut -d - leftanglebrc  -f 1
curl -s http://checkip.dyndns.org/ grep -o -E ( leftsquarebrc 0-9 rightsquarebrc +.){3} leftsquarebrc 0-9 rightsquarebrc +
curl -s http://google.com
curl -s http://weather.noaa.gov/pub/data/forecasts/state/ma/maz007.txt sed -n /^TAB/,+11p; /BOSTON/,+3p
curl -s http://whatsmyip.org
curl -s http://www.kernel.org/ -o /tmp/kernel cat /tmp/kernel grep -A 1 mainline tail -1 cut -d  rightanglebrc  -f 3 cut -d  leftanglebrc  -f 1
curl -s http://www.kernel.org/ tee /tmp/kernel grep -A 1 mainline tail -1 cut -d  rightanglebrc  -f 3 cut -d  leftanglebrc  -f 1
curl -s http://www.kernel.org/ tee /tmp/kernel sed -n /ainl/,/ leftanglebrc \/s/ s|.* rightanglebrc \( leftsquarebrc 0-9\. rightsquarebrc *\) leftanglebrc /st.*|\1|p
curl -s http://xx.com/api sed s/.*:"\(.*\)".*/\1/
curl -s https://something.com bash
curl -s kernel.org tee /tmp/kernel sed -n /ainl/,/ leftanglebrc \/s/ s|.* rightanglebrc \( leftsquarebrc 0-9\. rightsquarebrc *\) leftanglebrc /st.*|\1|p
curl -u -s -e -r dweintraub:swordfish http://jenkins.corpwad.com/jenkins/job/Admin-5.1.1/138/submitDescription?Submit=Submit&desciption=This%20is%20my%20test%20descripition
curl -u UserName\WithSlash:PasswordWithExclamation! http://....
curl -u bk322:$passw https://api.github.com/user/repos -d {"name":"$title"}
curl -u ftpuser:ftppass -T {file1,file2} ftp://ftp.testserver.com
curl -u metaraine https://api.github.com/user/repos -d {"name":"$name"}
curl -u username:password -d {"title":"Test Deploy Key", "key":"'"$public_key"'"} -i https://api.github.com/repos/username/repository/keys
curl -u username:password http://www.website.com/content/file.zip
curl -u username:password https://api.github.com/user/repos -d {"name":"repoName"}
curl -v --noproxy localhost, http://localhost/muestra
curl -v --upload-file ${fileName} ${location}
curl -v -H Accept: application/json -H Content-type: application/json -X POST -d {} http://example.com
curl -v -X GET http://foo.bar jsongrep.py value2
curl -w We downloaded %{size_download} bytes\n www.download.com
curl -w \nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n -o /dev/null -s http://www.pintile.com
curl -z image0.jpg http://site.com/image0.jpg
curl .... awk /foo/{x=NR+3}(NR leftanglebrc =x) || /bar/
curl ......$myvar......
curl example.com/infected_file.php?exec -d rm%20-rf%20/
curl file:///path/to/source/file -o /path/to/destination
curl ftp://user:password@host:port/path/to/file
curl google.com
curl http://...
curl http://123.196.125.62/send -H Host: poj.org -e http://poj.org/send
curl http://169.254.169.254/1.0/meta-data/instance-id
curl http://api.breakingnews.com/api/v1/item/?format=rss awk -v RS= leftanglebrc /?title rightanglebrc  NR%2==0 && NR rightanglebrc 2 {print ++i". "$0}
curl http://auth.address/login.html awk -F -" /au_pxytimetag/{print $(NF-1)}
curl http://beyondgrep.com/ack-2.02-single-file chmod 0755 ~/bin/ack
curl http://da2.uib.no/webbok/riksreg1/bilete/riksreg1_ leftsquarebrc 001-369 rightsquarebrc .jpg -o pic#1.jpg
curl http://datastream.com/data
curl http://en.wikipedia.org/wiki/Special:Random -s -I perl -w -n -l -e /Location: (.*)/ and chomp($1) and print $1 . "?printable=yes";
curl http://example.com/ sh /dev/stdin world
curl http://example.com/down curl -T ftp://mysite.org/up
curl http://example.dev/index.php?v=var
curl http://foo.com/script.sh bash -s arg1 arg2
curl http://google.com
curl http://host/path/to/init.sh sh
curl http://localhost:3000/application.sql mysql --user root --password my_pass
curl http://localhost:8080/GeneratePdf
curl http://myserver/mypath head -1
curl http://npmjs.org/install.sh sh
curl http://npmjs.org/install.sh sh
curl http://remotehost/myphpfile.php?data=variable
curl http://rvm.io/releases/rvm-install-head bash
curl http://somehere.tld/data.json jshon -e url_outfile_excel
curl http://twitter.com/users/username.json jsawk -a return this.name
curl http://url.com/add -F foo=String -F date=22.12.13 20:21:12 -F foobar=Fake_NR_Data
curl http://www.example.com/index.php/backup?para1=mypara
curl http://www.exsample./index.php/backup
curl http://www.gametracker.com/datafeeds/?server_info&GAMESERVERID=2814889 -o output.xml
curl http://www.google.com/images/srpr/logo3w.png curl --data-binary --request POST http://www.somesite.com
curl http://www.kegg.jp/kegg-bin/download_htext?htext=br08902.keg&format=htext&filedir=
curl http://www.snort.org/...
curl https://dl.google.com/dl/cloudsdk/release/install_google_cloud_sdk.bash bash
curl https://raw.github.com/visionmedia/git-extras/master/bin/git-extras sudo INSTALL=y sh
curl https://raw.githubusercontent.com/jplew/SyncDB/master/syncdb diff syncdb
curl https://remote.path/script.py python arg1 arg2 arg3
curl https://www.site.com/api $AUTH_HEADERS -H Content-Type:undefined -X POST --data $ANNOTATION_INIT_DATA
curl icanhazip.com
curl ipinfo.io/ip
curl localhost:3000/encodingCompleted?user=abc
curl pi.dk/3/ bash
curl smtps://smtp.gmail.com:465 -v
curl website.com sed -n -r s|.*standards\.xml\?revision=( leftsquarebrc 0-9 rightsquarebrc +).*|\1|p
curl www.aaaaaaa.com/file-to-execute.php?arg=1
curl www.google.com
curl www.some.where.com
curl www.some.where.com awk -F -" /au_pxytimetag/{print $(NF-1)}
curl www.some.where.com awk something
curl www.some.where.com awk something
curl www.some.where.com grep something
curl www.some.where.com grep something
curl x.x.x.x/originDir/test16k_ leftsquarebrc 0-5999 rightsquarebrc .txt
current project1
currentTransport
custom value
customfetch = ! git fetch -r "$(wget -qO - http://hudson/url_to_project/lastStableBuild/ | gawk \"c&&!--c;/Revision:/{c=1}\" | sed -ne \"s/ leftanglebrc .*//p\" | sed -ne \"s/\\s//p\")" wget -q -O http://hudson/url_to_project/lastStableBuild/ gawk "c !--c /Revision:/{c=1}" sed -n -e "s/ sed -n -e "s/\s//p"
cut -b -1 -- -1 -3
cut -b -1 -- -2 -1 -, -2 -7 -- testfile.txt
cut -b -1 -- -9
cut -c -- -5
cut -c -1 -- -2 -0 -0 file
cut -c -1 -- -8 -0 your_file
cut -c -1 -9 -- -2 -6 input.txt sed s/$/,/
cut -c -2 -1 -- logfile
cut -c -2 -2 -- -2 -3 t uniq sort uniq -d -c
cut -c -5 -- -9 yourfile
cut -c -5 -- file
cut -c 1 t.txt sort uniq
cut -c 1-23 file
cut -c 10- /home/tiger/Desktop/shell\ practice
cut -c 3,4,6- file
cut -c 3-
cut -c 9-12,14-25,43-57 file
cut -c 9-22
cut -d   --complement -f -2 -, -4 -- -6 -, -1 -0 -- -1 -2 file.txt
cut -d   -f 2
cut -d   -f 2 file
cut -d   -f 2- input-file
cut -d " -f 2 $FILENAME
cut -d $001 ...
cut -d ' -f 2
cut -d , -f $NUM sort -n uniq -d
cut -d , -f -1 -- -1 -0 -, -2 -0 -- -2 -5 -, -3 -0 -- -3 -3 infile.csv
cut -d , -f 1
cut -d , -f 1,2 file.txt sort -u
cut -d , -f 2 file.txt
cut -d , -f 2 file.txt sort -u
cut -d , -f 2,3,6 $i
cut -d , -f 4 $LINE
cut -d , -f 7 file
cut -d -  --complement -f -1 -- -5
cut -d -  -f -$ -o -p -e -r -a -t -i -o -n
cut -d -  -f -- -2 -, -4 --
cut -d -  -f -1 -, -3 -, -4
cut -d -  -f -1 -- -3
cut -d -  -f -1 -2 -, -2 -1 /var/log/iptables.log
cut -d -  -f -2 -- yourFile
cut -d -  -f -3 file.txt
cut -d -  -f 1 $1 sort uniq paste -s -d -,
cut -d -  -f 1 file.txt xargs dig +short
cut -d -  -f 1 filename
cut -d -  -f 1 inputfile paste -s -d -+
cut -d -  -f 1 inputfile paste -s -d -+ bc -l
cut -d -  -f 2 --complement file
cut -d -  -f 2 dihed_*.dat
cut -d - rightanglebrc  -f -2 -- file
cut -d -% -f 1 awk { print $(NF) }
cut -d -, -f -- -4 -, -6 -, -8 --
cut -d -, -f -- -4 -, -6 -- -6 -, -8 --
cut -d -, -f -- -4 -, -6 -- -6 -, -8 -- -1 -0 -, -1 -2 --
cut -d -, -f -1 -- -2
cut -d -, -f -1 -- -3 -, -6 -- file
cut -d -, -f -1 -- -6
cut -d -, -f -1 -- -7
cut -d -, -f -2 -- -4 -, -6 -- -1 -0 -, -1 -2 -- -2 -0
cut -d -, -f -2 -- file
cut -d -, -f -5 -- -1 -0 file
cut -d -, -f -5 -- test1.txt
cut -d -, -f 3
cut -d -, ...
cut -d -- -f 3 your_input
cut -d -. -f -1 -- -2 --output-delimiter 
cut -d -. -f -1 -- -4 inputfile
cut -d -. -f 1 /proc/loadavg
cut -d -. -f 2 filename
cut -d -. -f 3 filename
cut -d -/ -f -4 --
cut -d -: -f -2 --  leftanglebrc (echo "$var") echo $var cut -d -- -f -2 --
cut -d -: -f -2 -- cut -c -3 -- -4 -2
cut -d -: -f 1
cut -d -: -f 1
cut -d -: -f 1 $FILE
cut -d -: -f 1 File 1 paste -d -: File 2
cut -d -: -f 1 input
cut -d -; -f 2
cut -d -= -s -f -2 -, -3 --output-delimiter    input.txt
cut -d -_ -f 1-4 old_file
cut -d -f 2
cut -d ; -f -1 -- -2 -, -4 -- my.csv
cut -d = -f 2
cut -d _ -f 4
cut -f $1 $2 sort uniq -c awk {array leftsquarebrc $2 rightsquarebrc =$1; sum+=$1} END { for (i in array) printf "%-20s %-15d %6.2f%%\n", i, array leftsquarebrc i rightsquarebrc , array leftsquarebrc i rightsquarebrc /sum*100} sort -r -k -2 -, -2 -n
cut -f -1 -, -3 -- -d  
cut -f -1 -- -1 -3 -, -1 -8 -- $file
cut -f -2 -- -d -; filename.txt
cut -f -2 -- infile
cut -f 1
cut -f 1
cut -f 1 -d   only-jpeg1.txt
cut -f 1 -d -, file.txt
cut -f 1 -d -:
cut -f 1 comm-results.txt
cut -f 1 file cut -f 2 file cut -f 3 file
cut -f 1 input_file sort uniq
cut -f 1 input_file sort uniq wc -l
cut -f 19 -d -  $1 cut -f 1 -d -/ sort uniq -c sort -n -r head -n 100
cut -f 2 -d -:
cut -f 2 file cut -f 1 -d -/
cut -f 2 file sed s?/.*??
cut -f 2 file.txt
cut -f 2 file.txt sort uniq wc -l
cut -f 2-3 input.txt
cut -f 3 file_name
cut -f 4 -d
cut -f 4 -d -$ -t your_file
cut -f 4 -d -/
cut -f 4 data
cut -f 4 data echo invalid
cut -f 7 -d -, FILENAME sort -n uniq
cut -f 7 FILENAME sort -n uniq
cut -i -d -  -f 2 data.file
cutoff = $today 604800
cvs checkout -r filename.ext
cvs diff -b -B -r 1.5 -r 1.6 ProjectsrcSample.java findstr /vbl  leftanglebrc   rightanglebrc 
cvs export -r ~/tmp module/filename.ext
cvs update -d
cyg4 C:/Users/Ted/Music/Enigma
cyg4 C:\Users\Ted\Music\Enigma
cyg4 C:\Users\Ted\Music\Enigma
cygpath $b
cygpath C:/Users/Ted/Music/Enigma
cygstart /cygdrive/C/windows/system32/cmd.exe k 'bash.exe -i'
cygstart bash
cygstart cmd
c}
d = $_GET leftsquarebrc domain rightsquarebrc 
d = $argv leftsquarebrc 1 rightsquarebrc 
d = %x leftsquarebrc echo `grep '^ leftsquarebrc    rightsquarebrc *datadir leftsquarebrc    rightsquarebrc *=' /etc/mysql/my.cnf | cut -f2 -d'='`/db_backups rightsquarebrc .strip grep ^ leftsquarebrc    rightsquarebrc *datadir leftsquarebrc    rightsquarebrc *= /etc/mysql/my.cnf cut -f 2 -d -=
d = `date -r $f +%F` date -r $f +%F
d N 2,5ba
d f g h j 2
d2u test.txt cat test.txt find -name $i
d:devzendZendServerbinphp.exe d:workattachessamplehelps.php
d????????? ? ? ? ? ? S??curit??
dart --version
dart --version
data data data data
dataGridView1.Columns leftsquarebrc 0 rightsquarebrc .HeaderText = First Column
dataGridView1.Columns leftsquarebrc SomeName rightsquarebrc .HeaderText = Some Name
date
date
date
date
date
date  leftsquarebrc OPTION rightsquarebrc ...  leftsquarebrc +FORMAT rightsquarebrc 
date %H:%M
date +%A
date +%A
date +%B
date +%B %Y --date $(date +%Y-%m-15) next month date +%Y-%m-15
date +%F
date +%F %T
date +%F:%T
date +%H
date +%H
date +%H -d 1h
date +%H:%M
date +%M
date +%N
date +%R
date +%T
date +%Y
date +%Y%m%d --date yesterday
date +%Y%m%d%H%M%S
date +%Y%m%d%H%M%S
date +%Y-%m-%d
date +%Y-%m-%d
date +%Y-%m-%d
date +%Y-%m-%d -r $filename
date +%Y-%m-%d-%H-%M-%S
date +%Y-%m-%d:%H:%M:%S
date +%Y.%m.%d %H:%M:%S %Z -d 2013-11-12 13:00:00
date +%Y_%m_%d
date +%Y_%m_%d_%H_%M_%S
date +%a %b %d
date +%a, %b %d
date +%c $(ls | wc -l) ls wc -l
date +%d
date +%d%m%Y%H%M
date +%d-%h-%Y tr  leftsquarebrc :lower: rightsquarebrc   leftsquarebrc :upper: rightsquarebrc 
date +%h%-d%H:%M
date +%m%d%Y -d ${initial_date:4}${initial_date:0:4} + 1 day
date +%m%d%Y -d 3 days ago
date +%m%y -d 2 month ago
date +%m-%d
date +%m-%d-%Y
date +%s
date +%s
date +%s
date +%s
date +%s
date +%s
date +%s
date +%s
date +%s
date +%s -d 01:43:38.123
date +%s -s @`date +%s` date +%s
date +%s -u -d 2010-10-08 00:00:01
date +%s%N cut -b -1 -- -1 -3
date +%s-%N
date +%s-%N
date +%w
date +%z
date +20%y-%m-%d
date +FILE_%-m_%-d.dat
date --date $( leftanglebrc  /dz-ceibo/applis/db5/parm/control.date) + 1 day +%Y-%m-%d
date --date $1 day ago +%y%m%d
date --date $1 days ago +%Y/%m/%d
date --date $line +%s
date --date ${dataset_date} -${date_diff} day +%Y-%m-%d
date --date ${dataset_date} -${date_diff} day +%Y-%m-%d
date --date 1 day ago +$myDate
date --date 1 year ago
date --date 19-FEB-12 +%s
date --date 20 Feb 2010 1 day
date --date 6 months ago +%Y%m%d
date --date June 03 -28 days +%s
date --date Tuesday - 2 weeks
date --date yesterday +%Y%m%d
date -I mv $of $nf tar cJvf $nf.txz $nf --remove-files
date -d $(date +%Y-%m-1) -1 day +%a date +%Y-%m-1
date -d $(date -d "2 months" +%Y-%m-1) -1 day +%a date -d 2 months +%Y-%m-1
date -d $(date -d "next month" +%Y-%m-1) -1 day +%a date -d next month +%Y-%m-1
date -d $(date -d '2013-05-07 16:02:07')+10days +%Y-%m-%d %T date -d 2013-05-07 16:02:07
date -d $(last $user | head -n 1 | tr -s ' leftsquarebrc :space: rightsquarebrc ' '\t' | cut -f 4-7) +%Y%m%d%H%M%S last $user head -n 1 tr -s  leftsquarebrc :space: rightsquarebrc  \t cut -f 4-7
date -d $(myapp) myapp
date -d $(sed -e 's#/#-#g; s#:# #'  leftanglebrc  leftanglebrc  leftanglebrc  '17/Oct/2013:16:52:28') +%s sed -e s#/#-#g; s#:# #
date -d $TimeStamp +%s
date -d $date $time +%s
date -d $dateTale + 1 day +%Y%m%d
date -d $day -$(date -d $day +%u) days + 1 day date -d $day +%u
date -d $day -$(date -d $day +%u) days date -d $day +%u
date -d ${input%-*} ${input##*-} +%s
date -d -2 -0 -1 -4 -- -0 -6 -- -0 -2 -T -1 -6 -: -2 -3 -: -1 -3 -+ -0 -2 -: -0 -0 +%s
date -d -3 -0 -m -i -n -u -t -e +%Y-%m-%d %H:%M wc -l
date -d -5 -  -m -i -n -u -t -e -s +%Y%m%d%H%M%S
date -d 01-Mar-2011 -1 sec
date -d 16:00 + 410 minutes +%H:%M
date -d 16:00 410 minutes +%H:%M
date -d 16:00 today + 410 minutes +%H:%M
date -d 1970-01-01 + $(stat -c '%Z' $filename ) secs +%F %X stat -c %Z $filename
date -d 1970-01-01 + $(stat -c '%Z' $filename ) secs stat -c %Z $filename
date -d 2012-09-04T00:11:20.000Z +%s
date -d 2013-11-12 13:00:00 +%Y.%m.%d %H:%m:%S %Z
date -d 27jul2012 - 5 days +%d%b%Y
date -d 30 minutes ago +%Y-%m-%d
date -d @$(  echo "(MilliSecondTimeStamp + 500) / 1000 | bc") echo (MilliSecondTimeStamp + 500) / 1000 | bc
date -d @$START +%c
date -d @$startTime
date -d @$startdate
date -d @133986838
date -d @1381219358 +%H-%M-%S-%b-%d-%y
date -d this Friday +%d/%m/%y
date -d today 00:00:00
date -d today 00:00:00 +%s
date -d yesterday +%Y%m%d
date -d yesterday 13:00  +%Y-%m-%d
date -f %m/%d/%Y -j 2012-02-29
date -j -f %Y%m%d %H%M $date $time +%s
date -j -f %Y-%m-%d 1969-12-31 +%s
date -j -f %Y-%m-%d 2006-06-30 +%a %F
date -j -f %Y/%m/%d %T $2 +%s
date -j -f %a %b %d %T %Z %Y Tue Sep 28 19:35:15 EDT 2010 +%s
date -j -f %a %b %d %T %Z %Y `date` +%s date
date -j -f %a %b %d %T %Z %Y `date` +%s date
date -j -f %d-%B-%y 19-FEB-12 +%s
date -j -f %s $(stat -f "%m" /path/test.app) +%Y/%m/%d %T stat -f %m /path/test.app
date -r $TIMESTAMP +%Y%m%dT%H%M%S
date -r $chem
date -r $f +%F
date -r $f +%F
date -r $filename
date -r /raid/file/test.txt +%d %b %Y % r awk {print $1,$2,$3,$4,$5;}
date -r name_of_file +%Y-%m-%d %H:%M
date -u +%FT%T.000Z
date -u +%H/%M/%S
date -u +%H:%M:%S
date -u +%Y%m%d-%H%M -d $(svn info | grep 'Date' | cut -d' ' -f4-6) svn info grep Date cut -d -  -f -4 -- -6
date -u +%Y-%m-%dT%H:%M:%SZ
date -u +%Y-%m-%dT%TZ -r $i cksum * paste .stat .cksum sort awk {if($2 in f) system("rm -v " $4); else f leftsquarebrc $2 rightsquarebrc ++} rm .stat .cksum
date -u -d @${i} +%T
date -v -1 -d
date -v -3 -1 -d +%a
date -v -3 -1 -d -v -+ -1 -m +%a
date -v -3 -1 -d -v -- -1 -m +%a
date ... $(last $USER | ... | awk '...') ... last $USER ... awk ...
date awk {print $1}
date awk {split($4, a, ":"); printf "%s %s %s:%02d:00", $2, $3, a leftsquarebrc 1 rightsquarebrc ,int(a leftsquarebrc 2 rightsquarebrc /5)*5}
date grep -o  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
date ls wc -l
date ps -U USERNAME -o rss=MEM,comm=CMD,pid=PID
date sensors -A -f awk {print $2} awk {print $1;} /proc/loadavg
date tee  rightanglebrc ( wc  rightanglebrc &3) wc wc wc
date your_prog date
date.timezone = America/Los_Angeles
date1=`date -d @$startdate` date -d @$startdate
datecalc -a 2014 01 31 + 1
date}
db2 -f foo.db2
db2 select * from  leftanglebrc tablename rightanglebrc  WITH UR
db2 select * from T1
db2 select * from T1
db2 select * from t1
db2 select * from t1
db2 select C1 from T2
db2 select c1 from T2
db2 select c1 from T2
db2 values SYSPROC.MON_GET_APPLICATION_ID()
db2level grep DB2 v awk {print$5} sed s/ leftsquarebrc ^0-9\. rightsquarebrc //g
db_perf_clean.sh
db_perf_clean.sh
db_perf_clean.sh
db_query prestaging INSERT INTO pb_properties (c_name, c_value) VALUES ('testname', 'testvalue');
dbbkup changed name of field
dbisql -n -o -g -u -i -h -o -s -t host1 -p -o -r -t 2740 -c uid=user;pwd=password script.sql
dbus-send --print-reply --session --dest org.mpris.vlc /Player org.freedesktop.MediaPlayer.Pause
dbus-send --print-reply --session --dest org.mpris.vlc /Player org.freedesktop.MediaPlayer.Play
dbus-send --session --dest org.ayatana.indicator.sound /org/ayatana/indicator/sound/service org.ayatana.indicator.sound.SetSinkVolume uint32:40
dc
dc
dcop $KONSOLE_DCOP_SESSION renameSession I am renamed!
dcop konsole-8540 session-6 setFont Monospace,20,-1,5,50,0,0,0,0,0
dd ...
dd if= leftanglebrc (yes $'\01' | tr -d "\n") of=file count=1024 bs=1024 yes $01 tr -d n
dd if= leftanglebrc (yes foo) of=foo_200kb bs=1024 count=200 yes foo
dd if=/dev/null of=/dev/block/mmcblk0p3 bs=1 count=4 seek=33796 conv=notrunc
dd if=/dev/random of=${filename} bs=${size} count=1
dd if=/dev/random of=random.dat bs=1000000 count=5000
dd if=/dev/urandom bs=1 count=1 od -t u1 cut -f -4 -- -d   head -1 sed s/ //g
dd if=/dev/urandom bs=1 count=1 of=file$i
dd if=/dev/urandom count=1 bs=8 ...
dd if=/dev/urandom of=myrandom bs=100 count=10 conv=notrunc
dd if=/dev/urandom of=newfile bs=1m count=10
dd if=/dev/zero bs=1024 count=1024 sed -e s/\o00//g wc -c
dd if=/dev/zero of=/dev/null
dd if=/dev/zero of=/dev/null dd if=/dev/zero of=/dev/null dd if=/dev/zero of=/dev/null dd if=/dev/zero of=/dev/null fulload read killall dd
dd if=/dev/zero of=/dev/sdb bs=4096
dd if=/dev/zero of=/tmp/test.data bs=1k count=128k
dd if=/dev/zero of=/tmp/zeroes
dd if=/dev/zero of=1.txt count=1
dd if=/dev/zero of=1.txt count=1
dd if=/dev/zero of=file.img bs=1 count=0 seek=20G
dd if=/dev/zero of=fill_me bs=1 count=8589934592
dd if=/dev/zero of=path/to/file bs=1 count=10 conv=notrunc skip=1000
dd if=/dev/zero of=sparsefile bs=1 count=1 seek=40G
dd if=/dev/zero of=upload_test bs=file_size count=1
dd if=/some/file of=/another/file bs=16k count=200
dd if=/some/file of=/another/file bs=16k count=200
dd if=data.bin of=zero.bin bs=1 count=5 conv=notrunc
dd if=filename bs=
dd if=infile of=outfile
dd if=input_file of=output_file bs=${RANDNUM}m count=1
dd if=largefile count=6 bs=1M
dd if=myfifo iflag=nonblock of=/dev/null
dd if=somfile of=someotherfile
dd if=your_file of=output_tmp_file bs=1024 count=1 skip=0
dd of=output.dat bs=1 seek=390143672 count=0
dddproc myprogramname
de_DE.UTF-8
deadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef
dec_value = 16#$(echo dede0a01 | sed 's,\(..\)\(..\)\(..\)\(..\),\4\3\2\1,g') echo dede0a01 sed s,\(..\)\(..\)\(..\)\(..\),\4\3\2\1,g
declare $x=another_value
declare -A arr
declare -A copied
declare -A my_array
declare -A new_array
declare -A tencent
declare -a arr
declare -a array_local=( leftsquarebrc 0 rightsquarebrc =1  leftsquarebrc 1 rightsquarebrc =2  leftsquarebrc 2 rightsquarebrc =3  leftsquarebrc 3 rightsquarebrc =4  leftsquarebrc 4 rightsquarebrc =5)
declare -a bar
declare -a bar=( $(  leftanglebrc  foo.txt ) )
declare -a c=( leftsquarebrc 0 rightsquarebrc =0:2  leftsquarebrc 1 rightsquarebrc =0:3  leftsquarebrc 2 rightsquarebrc =1:2  leftsquarebrc 3 rightsquarebrc =1:3)
declare -a shell_array=$(my_perl_prog.pl) my_perl_prog.pl
declare -a w_pos=( leftsquarebrc 0 rightsquarebrc =1.000  leftsquarebrc 1 rightsquarebrc =1.477  leftsquarebrc 2 rightsquarebrc =1.790  leftsquarebrc 3 rightsquarebrc =0.580)
declare -f
declare -f -F
declare -f -F cut -d   -f 3
declare -f run_tool_commands echo run_tool_commands ${ARGS leftsquarebrc @ rightsquarebrc } ssh -t user@host
declare -p Clear Workspace sed -e s/^declare -x Clear Workspace="//;s/"$//
declare -p variable-name grep -q declare \-a
declare -r cheese=nice
declare -r var=123
declare -x -F
declare -x -f
declare a_$count=filename
declare arr_$jobcfgUniqName leftsquarebrc $xx rightsquarebrc =`grep -B 3 -i error $joblogPath/$joblognameSearch leftsquarebrc $xx rightsquarebrc ` grep -B 3 -i error $joblogPath/$joblognameSearch leftsquarebrc $xx rightsquarebrc 
declare input=${i// /\\ }
declare magic_variable_$1=$(ls | tail -1) ls tail -1
declare sd$i=true
def bc pff p $a n $b n $c n $d n n n
default login root password secret
default value
default-push = http://username:password@hg.myco.com/repo
default_run_options leftsquarebrc :shell rightsquarebrc  = /bin/zsh
defaults read com.apple.dock wvous-tl-corner
defaults write /Library/Preferences/loginwindow AutoLaunchedApplicationDictionary -a -r -r -a -y -- -a -d -d {Path="/Applications/Your Application.app";}
defaults write com.apple.Xcode PBXCustomTemplateMacroDefinitions { "USERNAME" = "${USERNAME}" ;}
defaults write com.yourcompany.app key -d -i -c -t -- -a -d -d subkey plistValue
del /q /f *
del C:Documents and SettingsmattheweDesktoptestfoldertest.pdf
del a
del script.txt
delayed_interleaved_stdout_stderr.pl tee z.stdout tee z.stderr
delete array leftsquarebrc index rightsquarebrc 
delete from `table` limit 1000 table
deploy ALL =NOPASSWD:/usr/bin/startLDAPServer.sh
describe tablename
devenv /RunExit sln /Out out%x%.log
devenv /RunExit sln input args /Out out.log
devenv /command Macros.MyMacros.Module1.OpenFavoriteFiles
devenv.exe file1 ... devenv.exe fileN
devenv.exe file1 ... fileN
df $path tail -1 awk { print $6 }
df --total tail -1 awk {print $2}
df -F ufs -o i nawk NR rightanglebrc 1 {print $4}
df -P -T -h column -t sort -n -k -6 -n sed s:$: leftanglebrc br/ rightanglebrc :
df -P -h awk { print $4 }
df -P -h column -t
df -g awk /\/usr\/app/ {print $4}
df -h -t -g -f -s awk $5~/^\//{name=name sep $5; size=size sep $4; sep=","} END{print name; print size}
df -h / egrep -v Filesystem|xscsi sed $!N;s/\n/ /
df -h / egrep -v Filesystem|xscsi sort -r -n -k 3 sed $!N;s/\n/ / awk {printf "%-10s %s\n", $1, "\tTotal utilization: " $(NF -1)"(" $(NF -3) ")\tFree space: " $(NF -2)}
df -h awk NR  rightanglebrc  1 && /partition/ {print substr($3,1,length($3)-1)}
df -h awk NR rightanglebrc 1 {print$1,$2+0,$3+0,$4+0}
df -h awk {if ($1 != "Filesystem") print $1 " " $5}
df -h awk {print $1 " " $5}
df -h date echo $OUT
df -h grep $pth tr -s   cut -d -  -f 6
df -h head -3
df -h sed -n 2p awk {print $2}
df -h sed -n 2p awk {print $3}
df -h sed -n 2p awk {print $4}
df -k -h -B 1g /ws/abc-Location03 awk {print $4}
df -k .
df -k /Volumes/Label tail -n +2 awk { print $4 }
df -k /Volumes/label tail -n +2 awk { print $4 }
df -k /some/dir
df -k awk -f print.awk
df -k awk NR rightanglebrc  1{ sub(/%/,"",$5);  if ($5  rightanglebrc  69) { if (!match($1,/bkp|archival/)) { print $5, $1; f=1; } } } END { if (!f) print "ok" }
df -k sed -e /Filesystem/d
df -k sed -e /^Filesystem/d
df -k tail -1 cut -d -% -f 1 awk { print $(NF) }
df -l -H awk /Volumes/ { sub(/^ leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + +/, ""); print }
df -l -H awk /Volumes/ { sub(/^ leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + + leftsquarebrc ^  rightsquarebrc + +/, ""); print }
df -l -H awk /Volumes/ { sub(/^(\S+\s+){5}/, ""); print }
df -l -H sed -n -r /Volumes/s/^(\S+\s+){5}//p
df -l -H sed -n /Volumes/s/^ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+//p
df -l -H sed -n /Volumes/s/^ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+ leftsquarebrc ^  rightsquarebrc \+ \+//p
df -l -k -P grep -v devfs grep -v none grep -v Filesystem awk {print $6}
df -l -k grep -v devfs grep -v none grep -v Filesystem awk {print $6}
df -l grep -v Mounted awk  { print $6 } 
df / awk FNR rightanglebrc 1 {print $3, $4}
df awk /\//{print $6 "\t" $4}
df awk NR rightanglebrc 1{print $6 "\t" $4}
df filename
df musicfolder/
df tail -n +2 awk { print $1, $4 }
dfgabcehijkl
dialog --no-nl-expand ...
dialog --title Example --default-item 2 --menu Select: 0 0 0 1 ABC 2 DEF 3 GHI
dialog --yesno Hello, this is my first dialog program 20 60
diascope -c -l -e -a -n /mnt/videos/video$1.txt
dict leftsquarebrc $word rightsquarebrc ++
diff  leftanglebrc ((foo) 2 rightanglebrc &1)  leftanglebrc ((bar) 2 rightanglebrc &1) foo bar
diff  leftanglebrc (./a)  leftanglebrc (./b) ./a ./b
diff  leftanglebrc (./p3  leftanglebrc  1.in)  leftanglebrc (./p4  leftanglebrc  1.in) ./p3 ./p4
diff  leftanglebrc (cut -b13- file1)  leftanglebrc (cut -b13- file2) cut -b -1 -3 -- file1 cut -b -1 -3 -- file2
diff  leftanglebrc (cut -d, -f1 file1)  leftanglebrc (cut -d, -f1 file2) cut -d -, -f 1 file1 cut -d -, -f 1 file2
diff  leftanglebrc (echo "string 1")  leftanglebrc (echo "string 2") echo string 1 echo string 2
diff  leftanglebrc (echo "string 1")  leftanglebrc (echo "string 2") echo string 1 echo string 2
diff  leftanglebrc (foo | bar)  leftanglebrc (baz | quux) foo bar baz quux
diff  leftanglebrc (grep -f f2 f1 | sort)  leftanglebrc (sort f2) grep -f f2 f1 sort sort f2
diff  leftanglebrc (head -k file1)  leftanglebrc (head -k file2) head -k file1 head -k file2
diff  leftanglebrc (head -n 2000 file1.log)  leftanglebrc (head -n 2000 file2.log) head -n 2000 file1.log head -n 2000 file2.log
diff  leftanglebrc (html2text before.html)  leftanglebrc (html2text after.html) html2text before.html html2text after.html
diff  leftanglebrc (ls /bin)  leftanglebrc (ls /usr/bin) ls /bin ls /usr/bin
diff  leftanglebrc (printf "%s\n" "${host_names leftsquarebrc @ rightsquarebrc }"| sort )  leftanglebrc (printf "%s\n" "${lookedup_host_names leftsquarebrc @ rightsquarebrc }"| sort) printf %sn ${host_names leftsquarebrc @ rightsquarebrc } sort printf %sn ${lookedup_host_names leftsquarebrc @ rightsquarebrc } sort
diff  leftanglebrc (sed "$expr" file1)  leftanglebrc (sed "$expr" file2) sed $expr file1 sed $expr file2
diff  leftanglebrc (sed '/abXd/,/abYd/d' file1)  leftanglebrc (sed '/abXd/,/abYd/d' file2) sed /abXd/,/abYd/d file1 sed /abXd/,/abYd/d file2
diff  leftanglebrc (sed 's/^ leftsquarebrc 0-9 rightsquarebrc * ps//g' file1)  leftanglebrc (sed 's/^ leftsquarebrc 0-9 rightsquarebrc * ps//g' file2) sed s/^ leftsquarebrc 0-9 rightsquarebrc * ps//g file1 sed s/^ leftsquarebrc 0-9 rightsquarebrc * ps//g file2
diff  leftanglebrc (sed -n 'i,jp' file1)  leftanglebrc (sed -n 'i,jp' file2) sed -n i,jp file1 sed -n i,jp file2
diff  leftanglebrc (sort $def.out)  leftanglebrc (sort $def-new.out) sort $def.out sort $def-new.out
diff  leftanglebrc (sort demo1)  leftanglebrc (sort demo2) sort demo1 sort demo2
diff  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
diff  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2 sed /^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc * leftsquarebrc acd rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc */d;s/^ leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc  //
diff  leftanglebrc (sort file1.txt)  leftanglebrc (sort file2.txt) sort file1.txt sort file2.txt
diff  leftanglebrc (ssh admin@10.0.0.10 ls -R /home/admin)  leftanglebrc (ls -R /home/admin) ssh admin@10.0.0.10 ls -R /home/admin ls -R /home/admin
diff  leftanglebrc (tail -k file1)  leftanglebrc (tail -k file2) tail -k file1 tail -k file2
diff  leftanglebrc (tar ztf "$1" | sort)  leftanglebrc (tar ztf "$2" | sort) tar -z -t -f $1 sort tar -z -t -f $2 sort
diff  leftanglebrc (zcat file1.gz)  leftanglebrc (zcat file2.gz) zcat file1.gz zcat file2.gz
diff $FILE $DIR/$(ls -tr $DIR | tail -n 1) ls -t -r $DIR tail -n 1
diff $source_file $dest_file
diff $t.out  leftanglebrc ($parser_test `cat $t` 2 rightanglebrc &1) $parser_test `cat $t` cat $t
diff ${t/.in}.out  leftanglebrc ($parser_test  leftanglebrc "$t" 2 rightanglebrc &1) $parser_test
diff --brief -r dir1/ dir2/
diff --brief -r dir1/ dir2/
diff --changed-group-format % leftanglebrc  --unchanged-group-format  file1 file2
diff --git a/lids b/lids grep ^ leftsquarebrc +- rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
diff --new-line-format  --unchanged-line-format  file1 file2
diff --old-line-format %L --new-line-format  --unchanged-line-format   leftanglebrc (nl File-out)  leftanglebrc (nl File-Reference) nl File-out nl File-Reference
diff --old-line-format %L --new-line-format  --unchanged-line-format  File-out File-Reference
diff --old-line-format -%L --unchanged-line-format  %L --new-line-format +%L file1 file2
diff --recursive src my_src
diff --unified file1.json file2.json
diff -2 --old-line-format  leftanglebrc %L --new-line-format  rightanglebrc %L --unchanged-line-format  equal.lst equal2.lst
diff -B a.properties b.properties
diff -U 0 file1 file2 grep -v ^@ wc -l
diff -a -q new_dir/ old_dir awk -F -: -  /Only in new_dir/{print $2}
diff -b -u -r folder1/ folder2/
diff -c  leftanglebrc (rpm -qpR prev/p.src.rpm 2 rightanglebrc /dev/null)  leftanglebrc (rpm -qpR curr/p.src.rpm 2 rightanglebrc /dev/null) rpm -q -p -R prev/p.src.rpm rpm -q -p -R curr/p.src.rpm
diff -q -r /Volumes/Label /template/directory
diff -q -r /dir1 /dir2
diff -q -r directory directory.original cut -d -  -f 2 xargs dirname uniq
diff -q -r projectA projectB --exclude .svn grep ^Files  cut -d -  -f 2 sed s!projectA!!g
diff -q a  leftanglebrc (tail -n $(wc -l  leftanglebrc  a) lines) tail -n $(wc -l  leftanglebrc  a) lines wc -l cat a
diff -q file1 file2 echo Files are identical echo Files differ
diff -q file1 file2 some_command
diff -q folder1 folder2 grep Only in blaa cut -d   -f 4- xargs -I {} cp {} ../{}
diff -r -c -w DIR1 DIR2 grep ^Only
diff -r -q dir1 dir2 grep differ awk {print $2 "has changed"}
diff -r -q dir1 dir2 sed -n -e s/^Files \(.*\) and \(.*\) differ$/\1\n\2/p xargs -n 2 sift
diff -r -q dir1 dir2 sed -n -e s/^Files \(.*\) and \(.*\) differ$/sift "\1" "\2"/p sh
diff -r -q foo bar head -n 1
diff -r -q old/ new/ grep ^Files.*differ$
diff -r -q old/ new/ grep ^Files.*differ$ sed s/^Files \(.*\) and .* differ$/\1/
diff -r -u -N server.xml.old server.xml.new
diff -r -x .git repoA repoB
diff -r ../backup_folder .
diff -r /develop /main
diff -r /path/to/backup_folder .
diff -r dir1 dir2 grep dir1 awk {print $4}
diff -r sampleWith/a sampleWithout/a
diff -r temp/$NODE-pre temp/$NODE-post
diff -s  leftanglebrc (sed "s/^\( leftsquarebrc \"' rightsquarebrc \)\(.*\)\1\$/\2/g" in.txt) expected.txt sed s/^( leftsquarebrc "' rightsquarebrc )(.*)1$/2/g in.txt
diff -s -r -q dir1/ dir2/ grep identical
diff -u  leftanglebrc (cd Folder1 ; find | sort)  leftanglebrc (cd Folder2 ; find | sort) cd Folder1 find sort cd Folder2 find sort
diff -u A1 A2 grep -E ^+
diff -u file1 file2
diff -w  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
diff -w -B a.properties b.properties
diff -w a.properties b.properties
diff -y /tmp/test1 /tmp/test2
diff a.csv b.csv sed -n /^ leftsquarebrc 0-9 rightsquarebrc \+d leftsquarebrc 0-9 rightsquarebrc */,/^ leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc ^d rightsquarebrc *$/{/^ leftsquarebrc 0-9 rightsquarebrc \+/d;s/^ leftanglebrc  //;p}
diff a.properties b.properties
diff a.txt b.txt grep  leftanglebrc  wc -l
diff data1.txt data2.txt
diff dir{A,B}/foo.txt
diff file  leftanglebrc (cat file | grep -E '^ leftsquarebrc 0-9 rightsquarebrc +$') cat file grep -E ^ leftsquarebrc 0-9 rightsquarebrc +$
diff file `cat file | grep -E ^ leftsquarebrc 0-9 rightsquarebrc +$` cat file grep -E ^ leftsquarebrc 0-9 rightsquarebrc +$
diff file.ls  leftanglebrc (ls -l directory) ls -l directory
diff file1 file2 grep  leftanglebrc  sed s/^ leftanglebrc //g
diff file1.csv file2.csv --old-line-format  leftanglebrc  %L --new-line-format  rightanglebrc  %L --unchanged-line-format   %L
diff fileA fileB awk FNR == 2 {print $2}
diff list.sorted.txt list.sorted.uniq.txt
diff new_jumps/true.jump old_jumps/true.jump awk { if($1==" leftanglebrc " || $1==" rightanglebrc "){($1==" leftanglebrc ")?temp="New,":temp="Old,";print $2,temp$3,$4,$5}}
diff repoA repoB
diff {dir,folder}/foo.txt
diff_latest /path/to/some/dir
dig +short gmail.com mx sort -n nawk {print $2; exit} dig +short -f
dig +short sub.domain.com
dig +short sub.domain.com
dig @ns1.hosangit.com djzah.com +noall +authority +comments awk -f script.awk
digest -a md5 -v /filename
dir
dir $(shell which $(CROSS_COMPILE)gcc) shell which $(CROSS_COMPILE)gcc CROSS_COMPILE
dir *.cpp *.h *.java /b/s
dir *.pdf
dir /b /a-d repl ^ leftsquarebrc ^( rightsquarebrc .* ren q$&q q(S)$&q xa
dir /b /s /a-d find /i /v (S) repl .*\(.*) ren q$&q q(S)$1q xa
dir /b /s sort
dir /s /ar *.txt
dir /s /b /A:D * findstr /ri  leftsquarebrc \ rightsquarebrc bin$
dir /s /b /a-d *.* findstr /v .*..*.
dir /s /b /o:gn
dir /s /b c:sqlplus.exe
dir c:demofiles*.* -R -e -c -u -r -s -e Add-Zip c:demomyzip.zip
dir echo foo
dir echo hello
dir md folder1 rename folder1 mainfolder
dir md folder1 rename folder1 mainfolder
dir weka.jar
dir/b *.pdf
dir/s/b *.pdf
dir/s/b C:Path*.pdf
dir1 -t -y -p -e f
directory/*
dirname $(dirname $(readlink $0)) dirname $(readlink $0) readlink $0
dirname $(dirname $(readlink -f $(which java))) dirname $(readlink -f $(which java)) readlink -f $(which java) which java
dirname $(dirname $0) dirname $0
dirname $(readlink -f "$0") readlink -f $0
dirname $(readlink -f $0) readlink -f $0
dirname $(readlink -f relative/path/to/file) readlink -f relative/path/to/file
dirname $0
dirname $0
dirname $0
dirname $0
dirname $0
dirname $0 cd ${mydir} exit 1
dirname $BASH_SOURCE
dirname $BASH_SOURCE
dirname $INVERSE
dirname $file
dirname $with_mylib
dirname ${0#$PWD/}
dirname */1.txt
dirname -- $0
dirname -- $0
dirname /home/edwprod/abortive_visit/bin/abortive_proc_call.ksh
dirname /home/files/myfiles/good.txt
dirname `dirname $0` dirname $0
dirname `which mysort` which mysort
dirname relative/path/to/file
disklabel xbd0 sed -e s/match/replace/ new_command
diskpart /s diskpart.script
diskutil eject $f
diskutil info /Volume/foo
diskutil info /dev/disk$i awk -F -: -  -* /SMART/{print $2}
diskutil info /dev/disk0 grep Media Name: cut -f 2 -d -:
diskutil info `diskutil list / | head -1` diskutil list / head -1 grep Media Name: cut -f 2 -d -:
diskutil unmountDisk /dev/disk*
disown "$a"
disown %1
dispatcher.sh
display ${PLT}
display image.png sleep 0.1 wmctrl -i -a $my_id
ditto -c -k --rsrc --sequesterRsrc folder file.zip
ditto foo bar
djzah.com,qr,aa,rd,ns3.eventguyz.com,ns1.eventguyz.com,ns2.eventguyz
dm toolload bar  leftanglebrc libname rightanglebrc .profile. leftanglebrc name_of_toolbar rightanglebrc 
dmake -m _makefile_.m
dmesg
dmidecode -t 17 awk BEGIN { FS=":"; OFS="\t" } /Size|Locator|Speed|Manufacturer|Serial Number|Part Number/ { gsub(/^ leftsquarebrc  \t rightsquarebrc +/,"",$2); line = (line ? line OFS : "") $2 } /^$/ { print line; line="" } grep -i -v no module
dmidecode -t 17 awk BEGIN { FS=":"; OFS="\t" } /Size|Locator|Speed|Manufacturer|Serial Number|Part Number/ { if ($2 ~ /MB$|MHz$/) { gsub(/ leftsquarebrc  \t rightsquarebrc +/,"",$2) } gsub(/^ leftsquarebrc  \t rightsquarebrc +/,"",$2); line = (line ? line OFS : "") $2 } /^$/ { print line; line="" } grep -i -v no module
do-scp 123.txt
do-things arg1 arg2 echo $? progress-meter Doing stuff
doRandomize.cmd c:somewhere bmp
doThis STRING
do_sth 0 exit $?
do_sync $getopt_option
do_your_thing uniq -c grep -v ^ *1 
doalias nav
docker inspect -f {{.State.Running}} $CONTAINER_ID
docker ps -q xargs docker inspect --format {{.State.Pid}}, {{.ID}} grep ^${PID},
docker run -i -t --rm dockerfile/ubuntu /bin/bash
docker run -i -t -r -m ${docker_env leftsquarebrc @ rightsquarebrc } ubuntu /bin/bash
docker run -t -i -n -a -m -e myapp -p 3000:3000 -v /src/myapp:/src/myapp -l -i -n -k myappsql:myappsql devbox/myapp /bin/bash
does not exist. file /path/to/directory1/
done             |n
done!n
dos2unix
dos2unix
dos2unix
dos2unix -f /cygdrive/c/MyScripts/Bash.sh
dos2unix ./script
dos2unix /cust/vivek.txt
dos2unix /path/to/.bashrc
dos2unix /tmp/testFiles/*.xml
dos2unix file
dos2unix file file2 .... filen
dos2unix file.sh
dos2unix filename
dos2unix filename
dos2unix freecs.sh
dos2unix fruit.sh
dos2unix hibernate.properties
dos2unix my_env.sh
dos2unix myfile
dos2unix myitems.csv myitems.csv
dos2unix myscript.sh
dos2unix myscript.sh
dos2unix nextcommand
dos2unix pg_dump_script.sh
dos2unix pre-commit
dos2unix run.sh
dos2unix script.sh
dos2unix script2.txt script2.txt
dos2unix sqlscriptname
dos2unix test.txt cat test.txt find -name $i
dos2unix test_file
dos2unix testfile2.txt
dos2unix tmp.dat
dos2unix tmp6.txt
dos2unix yourfile.sh
dos2unix yourscript.sh
doskey /reinstall
doskey exit=doskey/history$g$gc:tempcommands.log$texit $1 $2
doskey mcd=mkdir $*$Tpushd $*
dot -T -p -n -g -o data.png data.dot
doxygen -w latex header.tex doxygen.sty
dpkg --list grep ^ii.*linux-image
dpkg -l awk /^i/ { print $2 }
dpkg -l csh
dpkg -l grep -q -w package apt-get install package
dpkg -l mysql-server grep -E ^ii tr -s   cut -d -  -f 3
dpkg-buildpackage -u -s -u -c -a -a -r -m -e -l
draw
dreampie /path/to/python2.x
drop database `test-db` test-db
drop table if exists `csvTable` csvTable
drush cc all
drush si geoslate -y --db-url mysql://root:root@localhost/geo_test --site-name Geoslate
drwxr-xr-x 2 root root 4096 2013-01-16 15:01 /etc/openvpn/ccd
drwxrwxr-x 2 root root 4096 Dec 11 10:13 /usr/local/orientdb/log
drwxrwxrwx 2 test-backup everyone 4096 Jul 8 02:30 .
dscl . -l -i -s -t /Users UniqueID sort -n -r -k 2 head -1
dscl . -p -a -s -s -w -d /Users/$user
dscl . -p -a -s -s -w -d /Users/SomeUser UserPassword
dscl . -r -e -a -d /Users/$USER UserShell
du  leftsquarebrc OPTION rightsquarebrc ...  leftsquarebrc FILE rightsquarebrc ...
du *
du -a --max-depth 1 sort -n
du -a -h --max-depth 1 sort -h -r
du -a cut -d -/ -f 2 sort uniq -c sort -n -r
du -b /path/to/file awk {print $1}
du -b file
du -b file cut -f 1
du -c -h $file_list tail -1 cut -f 1
du -c -h abc_* tail -n 1
du -c -s -h *.jpg
du -h * awk -v FS=t { print $2, $1 }
du -h * grep  leftsquarebrc 0-2 rightsquarebrc ..K awk {print $2} xargs -0 -I {} mv {} Ready/
du -h --exclude ./.*
du -h -s mydir
du -h awk -F  leftsquarebrc KM rightsquarebrc  { print $1 }
du -h file_size.txt awk { print $1 }
du -h file_size.txt cut -f -1
du -h file_size.txt sed s/file_size.txt//
du -h your_directory
du -s $home/folder/sub-folder
du -s * awk { if ($1  rightanglebrc  '"$1"') print }
du -s -b */
du -s -b myDirectory yourDirectory hisDirectory
du -s -k
du -s -k
du -s /root/Dropbox cut -f 1
du -s ~/neo4j-community-2.1.2/data/graph.db/
du awk { val = $1; dir = $2; sizes leftsquarebrc dir rightsquarebrc  = val }
du awk { val = $1; dir = $2; sub(/^.*\//, "", dir); sizes leftsquarebrc dir rightsquarebrc  += val }
du awk { val = $1; dir = $2; sub(/^.*\//, "", dir); sizes leftsquarebrc dir rightsquarebrc  = val }
du cut -f 1
dumpe2fs -h /dev/mapper/mylv grep -q Filesystem state: clean echo clean echo dirty
dvdauthor -x dvdauthor.xml
e 1 2
e c b
e leftsquarebrc 24~:C-k C-upwdn
e leftsquarebrc 34mBLUE COLORe leftsquarebrc 31mRED COLOR
e leftsquarebrc 3;5~: kill-word
e.BringToForeground = true
e.g. /bin/dos2unix.exe myScript.sh
e/: dabbrev-expand
e: 0 p: 1 0
eY: e2e.
earth.com/tree/apples/filename2.html
easy_install QLCLI
ebi-describe-env awk -F -| NR==6 {print $NF}
ebi-describe-env grep Linux | Ready cut -t -| -f 4
ec2-create-volume -s 5 -z us-west-1c cut -f 2
ec2-create-volume -s 5 -z us-west-1c cut -f 2
ec2-describe-tags --filter resource-type=instance --filter resource-id=$(ec2metadata --instance-id) ec2metadata --instance-id awk {print $5}
ec2-run-instances ami-****** -k testing2.pem -d Setup.sh
ec2-run-instances ami-dd8ea5a9  leftsquarebrc ... rightsquarebrc  awk /INSTANCE/{print $2}
echo
echo
echo
echo
echo
echo
echo 
echo 
echo     = rightanglebrc  installing prerequisite1
echo    -V             Print version information and exit
echo    leftanglebrc UL rightanglebrc  leftanglebrc a href="/$path" rightanglebrc $path leftanglebrc /a rightanglebrc 
echo    test echo $i
echo    word1  word2  awk {print $1;} // Prints word1
echo   word1  word2  cut -f 1 -d   // Prints nothing/whitespace
echo  $STRING cut -d -  -f 3
echo  $i
echo  6.32138 * $USD  bc -l
echo  Number is: $(grep "Multiple_Frame = $var"  20mrf.txt | wc -l) grep Multiple_Frame = $var 20mrf.txt wc -l
echo  Number is: $(grep "Multiple_Frame = echo **$var**"  20mrf.txt | wc -l) grep Multiple_Frame = echo **$var** 20mrf.txt wc -l
echo  Number is: $(grep -c "Multiple_Frame = $var"  20mrf.txt) grep -c Multiple_Frame = $var 20mrf.txt
echo  asdfdf "\t",7 asdfadsf grep "\\t",7
echo  awk { printf("")  rightanglebrc  "file_to_delete" }
echo  leftanglebrc (cat /dev/null) cat /dev/null
echo  leftanglebrc (echo foo)  leftanglebrc (echo foo) ... 997 repetitions ...  leftanglebrc (echo foo) echo foo echo foo echo foo
echo  leftanglebrc ?php echo "hello world!"; ? rightanglebrc  php
echo  leftanglebrc Cell rightanglebrc  leftanglebrc Data rightanglebrc `sed -n '${r}p' $IN_FILE | cut -d "," -f ${c} ` leftanglebrc /Data rightanglebrc  leftanglebrc /Cell rightanglebrc  n sed -n ${r}p $IN_FILE cut -d , -f ${c}
echo  leftanglebrc a href="http://example.com?q=man&amp;string=1&amp;bat=2" rightanglebrc Link leftanglebrc /a rightanglebrc  ruby -p -e $_.gsub!(/href="( leftsquarebrc ^" rightsquarebrc *)"/) { |h| h.gsub("&amp;", "&") }
echo  leftanglebrc a href="http://myurl.com.html?print=1" rightanglebrc my link leftanglebrc /a rightanglebrc  sed s/?print=1/ /g
echo  leftanglebrc a href="play.php?file='.$plik.'" rightanglebrc '.$plik.' leftanglebrc /a rightanglebrc 
echo  leftanglebrc b rightanglebrc HTML Message goes here leftanglebrc /b rightanglebrc  mail -s $(echo -e "This is the subject\nContent-Type: text/html") foo@example.com echo -e This is the subjectnContent-Type: text/html
echo  leftanglebrc end rightanglebrc 
echo  leftanglebrc html rightanglebrc 
echo  leftanglebrc html rightanglebrc 
echo  leftanglebrc html rightanglebrc  leftanglebrc head rightanglebrc  leftanglebrc meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/ rightanglebrc  leftanglebrc /head rightanglebrc  leftanglebrc /body rightanglebrc 
echo  leftanglebrc li rightanglebrc  leftanglebrc a href="link" rightanglebrc text1 leftanglebrc /a rightanglebrc  grep -o -P  leftsquarebrc ^" rightsquarebrc *(?=" rightanglebrc text1)
echo  leftanglebrc li rightanglebrc  leftanglebrc a href="link" rightanglebrc text1 leftanglebrc /a rightanglebrc  grep -o -P (? leftanglebrc ="link" rightanglebrc ) leftsquarebrc ^ leftanglebrc  rightsquarebrc *
echo  leftanglebrc li rightanglebrc  leftanglebrc a href="link" rightanglebrc text1 leftanglebrc /a rightanglebrc  sed s/.*"\( leftsquarebrc ^" rightsquarebrc \+\)" rightanglebrc text1.*/\1/
echo  leftanglebrc li rightanglebrc  leftanglebrc a href="link" rightanglebrc text1 leftanglebrc /a rightanglebrc  sed s/.*"link" rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc \+\).*/\1/
echo  leftanglebrc pre rightanglebrc $out leftanglebrc /pre rightanglebrc 
echo  leftanglebrc sometag param='x' rightanglebrc  leftanglebrc irrelevant stuff='nonsense' rightanglebrc  grep -o -P (? leftanglebrc = leftanglebrc sometag param=').*?(?=' rightanglebrc )
echo  leftanglebrc sometag param='x' rightanglebrc  leftanglebrc irrelevant stuff='nonsense' rightanglebrc  sed -n s/.* leftanglebrc sometag param='( leftsquarebrc ^' rightsquarebrc *)' rightanglebrc .*/1/p
echo  leftanglebrc x rightanglebrc small leftanglebrc X rightanglebrc capital sed s/ leftanglebrc  leftsquarebrc Xx rightsquarebrc  rightanglebrc /WORD/g
echo  leftsquarebrc  leftsquarebrc target|visible rightsquarebrc  rightsquarebrc  sed -r s:^\ leftsquarebrc \ leftsquarebrc  leftsquarebrc ^\| rightsquarebrc *\|(.*)\ rightsquarebrc \ rightsquarebrc $:\1:
echo  leftsquarebrc "cheese", {"cake": leftsquarebrc "coke", null, 160, 2 rightsquarebrc } rightsquarebrc  python -m -j -s -o -n -. -t -o -o -l
echo  leftsquarebrc $no rightsquarebrc   leftsquarebrc $number rightsquarebrc 
echo  leftsquarebrc 1000 rightsquarebrc   3000 awk /^\ leftsquarebrc / { print $2 } xargs echo
echo  leftsquarebrc ONE testing 1 2 3 rightsquarebrc   leftsquarebrc TWO lorem ipsum rightsquarebrc   leftsquarebrc ONE 123 rightsquarebrc  grep -o \ leftsquarebrc ONE leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ rightsquarebrc 
echo  leftsquarebrc PIN rightsquarebrc  bluez-simple-agent hci0  leftsquarebrc BT_MAC_ADDRESS rightsquarebrc 
echo  leftsquarebrc ^c rightsquarebrc ?* c leftsquarebrc ^r rightsquarebrc *
echo  rightanglebrc  rightanglebrc $COMMAND_WAIT leftanglebrc  leftanglebrc 
echo  sdf sdf sdf0736-41 43 51 sdfasfd  sed s/ leftsquarebrc ^0-9 rightsquarebrc //g
echo  sed -i -e /^$/d;$G file sed -i -e /^$/d;$G file
echo  tee /home/jem/rep_0 leftsquarebrc 1-3 rightsquarebrc /logs/SystemOut.log
echo  test@test.com egrep ^ leftsquarebrc _a-z0-9- rightsquarebrc +(\. leftsquarebrc _a-z0-9- rightsquarebrc +)*@ leftsquarebrc a-z0-9- rightsquarebrc +(\. leftsquarebrc a-z0-9- rightsquarebrc +)*(\. leftsquarebrc a-z rightsquarebrc {2,6})$
echo  xargs doit.sh
echo !  leftsquarebrc  ! -f file.txt  rightsquarebrc  && echo bye rightanglebrc  rightanglebrc ftpin.out
echo ! leftsquarebrc alt text rightsquarebrc (https://... "What'"'"'s up, Doc?")
echo ! leftsquarebrc alt text rightsquarebrc (https://... "What's up, Doc?")
echo !510 pbcopy
echo !omg
echo "$1","$2","$3","$4"
echo "$line" sed -n "s/^U ( leftsquarebrc 0-9a-zA-Z_ rightsquarebrc *).*/$file:1/p"
echo "${fs_item%/}"
echo "M       ABC/PQR/src/MyFile.h" awk {print $2}
echo "M       ABC/PQR/src/MyFile.h" sed s/M leftsquarebrc   rightsquarebrc *//
echo "Nickname":"bad_name" awk -F -: {print $NF}
echo "bServers leftsquarebrc nonServers rightsquarebrc " echo "primeReference"
echo "bServers leftsquarebrc nonServers rightsquarebrc " echo "primeReference"
echo "internal"
echo "member":"time" grep -e member"
echo "member":"time" grep -e member"
echo "test" sed -e s/^"// -e s/"$//
echo "test" sed s/"//;s/"$//
echo "test" sed s/^"//;s/"$//
echo #!/bin/bash
echo ######      30%r
echo ########### dd of=FILENAME seek=20 bs=1 count=11 conv=notrunc
echo #define $(sed '/=/{s/=/ "/;s/$/"/}'  leftanglebrc  leftanglebrc  leftanglebrc  $1) sed /=/{s/=/ "/;s/$/"/}
echo #define DISTVERSION "${float_dist}-pax"
echo #define DISTVERSION "${float_dist}-pax"
echo #define DISTVERSION "${float_dist}-pax"
echo #this is comment sed s/ leftsquarebrc ^a-zA-Z0-9 \t rightsquarebrc //g;
echo $!
echo $!
echo $!
echo $#
echo $$
echo $$
echo $$
echo $$
echo $$
echo $$  leftsquarebrc  ! -f $F  rightsquarebrc  echo echo $PPID
echo $$  leftsquarebrc  ! -f $F  rightsquarebrc  echo echo $PPID bash $F ps
echo $$ echo $BASHPID
echo $$ sleep 4
echo $$MYNAMES
echo $$n
echo $${file%.*}
echo $(" launchctl list | grep -i "aqua" ")  launchctl list | grep -i aqua 
echo $(./run.sh) ./run.sh
echo $(DataFunction) DataFunction mail -s Title Bob@123.com
echo $(adb shell getprop ro.build.version.release) adb shell getprop ro.build.version.release
echo $(adb shell ps | grep com.android.phone | awk '{ system("adb shell cat /proc/" $2 "/stat");}' | awk '{print $14+$15;}') adb shell ps grep com.android.phone awk { system("adb shell cat /proc/" $2 "/stat");} awk {print $14+$15;}
echo $(basename "$i") basename $i
echo $(basename $file),$unique,$total basename $file
echo $(basename $filename) basename $filename
echo $(cat file) cat file sed -r -e s/(2013-06)/@@@\1/g sed -r -e s/@@@/\n/g
echo $(cat file.txt)test cat file.txt
echo $(curl -sSL http://dot.ciel.im) curl -s -S -L http://dot.ciel.im bash -s FLAG1 FLAG2 etc
echo $(curl -sSL http://dot.ciel.im) curl -s -S -L http://dot.ciel.im bash -x -s FLAG1 FLAG2 etc
echo $(date "+%Y%m%d%H%M") - ($(date +%M)%5) date +%Y%m%d%H%M date +%M bc
echo $(date "+%Y%m%d%H%M") - ($(date +%M)%5) date +%Y%m%d%H%M date +%M bc
echo $(date +%Y) $(date +%m) date +%Y date +%m
echo $(date +%Y-%m-%d\ %H:%M:%S) Answer: $lrsq date +%Y-%m-%d %H:%M:%S
echo $(date +%s -d "Fri, 13 Sep 2013 17:16:45 GMT")000 date +%s -d Fri, 13 Sep 2013 17:16:45 GMT
echo $(date -j -f "%a, %d %b %Y %H:%M:%S %Z" "Fri, 13 Sep 2013 17:16:45 GMT" +%s)000 date -j -f %a, %d %b %Y %H:%M:%S %Z Fri, 13 Sep 2013 17:16:45 GMT +%s
echo $(date -j -f "%a, %d %b %Y %H:%M:%S" "Fri, 13 Sep 2013 17:16:45" +%s)000 date -j -f %a, %d %b %Y %H:%M:%S Fri, 13 Sep 2013 17:16:45 +%s
echo $(date) $line date
echo $(date) date
echo $(date)#... variables here .... date
echo $(echo "hi" $(echo "there")) echo hi $(echo "there") echo there
echo $(echo $(basename $HOME)) echo $(basename $HOME) basename $HOME
echo $(echo $url | cut -d"/" -f4) echo $url cut -d -/ -f 4
echo $(echo '!b') echo !b
echo $(echo \z) echo z
echo $(echo foo$(echo bar)) echo foo$(echo bar) echo bar
echo $(echo z) echo z
echo $(eval $COMMAND) eval $COMMAND
echo $(eval echo \{a,b,c,d\}_{0..3}) eval echo {a,b,c,d}_{0..3}
echo $(expr $a + $b) expr $a + $b
echo $(expr $var % 13) expr $var % 13
echo $(expr '(' $(date -d 2011/11/1 +%s) - $(date +%s) + 86399 ')' / 86400)  days until deadline expr ( $(date -d 2011/11/1 +%s) $(date +%s) + 86399 ) / 86400 date -d 2011/11/1 +%s date +%s
echo $(get-all-hosts) get-all-hosts tr   \n xargs -P 4 -n 1 ./blocking-restart
echo $(getprop ro.build.version.release) getprop ro.build.version.release
echo $(grep "ENVOI_MAIL=" "${FILE_PROPERTIES}" | cut -d "=" -f "2") grep ENVOI_MAIL= ${FILE_PROPERTIES} cut -d = -f 2
echo $(grep -Eo ' leftsquarebrc 0-9\. rightsquarebrc +' myfile.txt) grep -E -o  leftsquarebrc 0-9\. rightsquarebrc + myfile.txt
echo $(hostname):$(cat /sys/block/sda/size) hostname cat /sys/block/sda/size
echo $(launchctl list | grep -i "aqua") launchctl list grep -i aqua
echo $(ls -dl $x) $(file $x) ls -d -l $x file $x
echo $(ls -l $(which bash)) ls -l $(which bash) which bash
echo $(mysqlshow -uroot -pPassWord | awk '{print $2}' | egrep -v 'Databases|information_schema') mysqlshow -u -r -o -o -t -p -P -a -s -s -W -o -r -d awk {print $2} egrep -v Databases|information_schema
echo $(nslookup 100.100.100.100) nslookup 100.100.100.100
echo $(pbpaste -Prefer txt) pbpaste -P -r -e -f -e -r txt
echo $(ps ax) ps ax
echo $(pwd)/$line pwd
echo $(readlink -f $0) readlink -f $0
echo $(stat -c '%n %A' $filename) $(date -d "1970-01-01 + $(stat -c '%Z' $filename ) secs"  '+%F %X') stat -c %n %A $filename date -d 1970-01-01 + $(stat -c '%Z' $filename ) secs +%F %X stat -c %Z $filename
echo $(tr ' ' '\n'  leftanglebrc myfile.txt | grep -E ' leftsquarebrc 0-9\. rightsquarebrc +') tr   \n grep -E  leftsquarebrc 0-9\. rightsquarebrc +
echo $(tr '\n' ':'  leftanglebrc  INPUT.TXT | head -c -1) tr \n : head -c -1
echo $(tr -d "\r\'"  leftanglebrc  $PROC | awk 'NR==5{print substr($0,index($0,$2))}{print $NF}') tr -d r' awk NR==5{print substr($0,index($0,$2))}{print $NF}
echo $(xsel --output --clipboard) xsel --output --clipboard
echo $*
echo $0
echo $0: file $FILE not readable
echo $1
echo $1
echo $1
echo $1
echo $1
echo $1
echo $1
echo $1
echo $1
echo $1 $(pwd) pwd
echo $1 $2 awk {div=$1/$2; printf"%0.2f\n", div }
echo $1 $2 awk {print index($1,$2)}
echo $1 awk {FS="=";print $2}
echo $1 cat rest of the pipe here
echo $1 head
echo $1 head
echo $1 sed -e s#^J:## -e s#\\#/#g
echo $1 sed s@\ leftsquarebrc @\\ leftsquarebrc @g sed s@\ rightsquarebrc @\\ rightsquarebrc @g
echo $2
echo $44a:
echo $4a:
echo $?
echo $?
echo $?
echo $?
echo $?
echo $@
echo $@
echo $@
echo $@
echo $@ awk {print $NF}
echo $@ grep -q ^ leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *$
echo $@ grep -q ^ leftsquarebrc ^, rightsquarebrc \+, leftsquarebrc ^, rightsquarebrc \+, leftsquarebrc ^, rightsquarebrc \+, leftsquarebrc ^, rightsquarebrc \+$
echo $@ sed s/ /,/g cut -d , -f -2 --
echo $@ sed s/ /,/g cut -d , -f -2 --
echo $A / $B bc -l
echo $A cut -d   -f 5-
echo $AES_PASSWORD openssl enc -d -a -a -e -s -2 -5 -6 -p -a -s -s pass:secret
echo $ALL_RESULTS cut -d -  -f 2
echo $ANSWER myapp
echo $APP_SERVER_HOME sed s/\s//g
echo $APP_SERVER_HOME sed s/^\s\+// sed s/\s\+$//
echo $ARGUMENT sed s/\^(-D.*)=(.*)/\1="\2"/g
echo $ARGUMENT sed s/^(-D.*)=(.*)/1="2"/g
echo $BACKUP_DESTINATION/$DATE_FOLDER/${FOLDERNAME}_$FILENAME
echo $BASH_SOURCE
echo $BASH_VERSION
echo $BASH_VERSION
echo $BLA
echo $CHANGED grep -v $IG
echo $CLASSPATH
echo $COLUMNS
echo $COMMAND
echo $COMMAND
echo $CONFIG_FILE was copied to $CONFIG_DIR
echo $CONTENT
echo $COUNTER 
echo $Commander
echo $D: $(ls -d "$D"*/ 2 rightanglebrc /dev/null |wc -l) ls -d $D*/ wc -l
echo $D: $(ls -d "$D"*/| wc -l) ls -d $D*/ wc -l
echo $DIR
echo $DIR
echo $DIREC od -c
echo $DIR_CONTENT sed -n s/.*"modified": *"\( leftsquarebrc ^" rightsquarebrc *\)",.*"path": *"\( leftsquarebrc ^" rightsquarebrc *\)",.*"is_dir": *\( leftsquarebrc ^, rightsquarebrc *\),.*/\2:\3 \1/p
echo $DequeuedItem cut -d -  -f 1
echo $DequeuedItem cut -f 1
echo $Don't
echo $EDITOR
echo $EMAIL_TXT
echo $ENTRY awk -F # {print $2}
echo $F sed s/$PREFIX//g sed s/$SUFFIX//g
echo $F sed s/$PREFIX//g sed s/$SUFFIX//g
echo $FILEHEADER = IOS
echo $FILENAME cut -d -_ -f 3 cut -d -. -f 1
echo $FILENAME sed -e s/.*ehb\(.*\)#.*/\1/
echo $FOUND cut -d / -f 6
echo $HISTFILE
echo $HOSTNAME
echo $HTML sed -e s@ENTRY@$TABLE@
echo $HTTP leftsquarebrc "url" rightsquarebrc 
echo $I'm a student
echo $IN
echo $INDEX grep -c ^?? 
echo $INVERSE sed -e s,/ leftsquarebrc ^/ rightsquarebrc *$,/,
echo $JAVA_HOME
echo $KEY
echo $LANG
echo $LD_LIBRARY_PATH
echo $LIB/*.jar tr   :
echo $LINE awk {print $2}
echo $LINE cut -f -$ -{ -a -r -g -} -d - 
echo $LINE perl -M -R -e -g -e -x -p -: -: -C -o -m -m -o -n -= -n -e -t -n -e /($RE{net}{IPv4})/ and print "$1\n"
echo $LINE sed -e s/12345678/"${replace}"/g
echo $LINE sed -e s/12345678/${replace}/g
echo $LINES sed ...
echo $LIST sed s/,/','/g
echo $LIST xargs lcov --output-file coverage_report.info.cleaned --remove coverage_report.info
echo $LOAD sed s/average/averages/
echo $M3 sed s/\./\\./g
echo $MESSAGE nc -v $ipaddress 23053
echo $MXrecords awk {print $2}
echo $MYENVVAR ls $MYENVVAR
echo $MYLIST
echo $MYNAMES
echo $MYSTRING
echo $MYVAR
echo $MYVAR perl -p -e s/ leftsquarebrc a-zA-Z rightsquarebrc /X/g and s/ leftsquarebrc 0-9 rightsquarebrc /N/g
echo $MY_VAR
echo $NDS sed s/^\(.*\)\ leftanglebrc opt\ rightanglebrc .*$/\1/
echo $NUMBERS perl -p -e s/b$DEL_NUMb/ /g
echo $OUTFILE leftsquarebrc $count rightsquarebrc 
echo $OUTPUT
echo $OUTPUT sed s/ leftsquarebrc ^0-9 rightsquarebrc //g
echo $One linensecond line
echo $One linex0asecond line
echo $PARAM egrep ^( leftsquarebrc 0-9 rightsquarebrc +\.)+ leftsquarebrc 0-9 rightsquarebrc +$
echo $PASSWORD sudo -S su postgres
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH
echo $PATH grep -q whatever echo found it
echo $PATH grep ~/bin
echo $PATH pbcopy
echo $PATH tr : \n
echo $PATH tr : n read line echo $line ls $line
echo $PATH xsel --clipboard
echo $PCAP_PATH gawk BEGIN {FS = "/"} {print $NF}
echo $PET tr -d -c  leftsquarebrc :upper: rightsquarebrc 
echo $PPID
echo $PS1
echo $PS1
echo $PS1
echo $PWD sed -e s!.*/!! -e y/.:/01/
echo $PWD sed -e s|^$HOME/|~| -e s-.*/\( leftsquarebrc ^/ rightsquarebrc */ leftsquarebrc ^/ rightsquarebrc *\)-\1/-
echo $PWD sed s_/_\\/_g
echo $PWD/*
echo $PYTEST
echo $PYTEST
echo $RANGE
echo $RANGE
echo $RAW sed -r s/^.{0,15}//
echo $RAW_LIST_A sed s/ leftsquarebrc 0-9a-f rightsquarebrc {8} //g
echo $RED_INSTANCE_NAME tr -d \r
echo $RESULT
echo $RESULT
echo $RETVAL
echo $RUN_CMD
echo $SHELL
echo $SINR awk BEGIN { chars="abcdefg" } { print substr(chars, $1 + 21, 1) }
echo $SQL isql -U $USERNAME -P $PASSWORD -D $DATABASE -S $SERVER
echo $SQL sed -e s/$BATCH_END/$BATCH_END/g
echo $SQL sed -e s/'$BATCH_END/$BATCH_END/g
echo $STRING
echo $STRING cut -d   -f $N
echo $STRING egrep  leftsquarebrc * rightsquarebrc 
echo $STRING grep .gif$
echo $String2 + $String8 bc
echo $TERM
echo $TEST
echo $TESTDEMO sed s/{/\n{/g grep "name":"demo" cut -d -, -f 2 cut -d -/ -f 7 cut -d -} -f 1 cut -d " -f 1
echo $TTT
echo $USEDPCT mail -s Test Email from MOD Server test@test.com
echo $USER python -c import urllib; print urllib.quote(raw_input())
echo $VAR awk {print $9}
echo $VAR1 $VAR2 tr   \n sort -u
echo $VARIABLE grep -E ^3+{2}
echo $VARIABLE sed s|^/opt/Application/||
echo $VAR_WITH_TEXT grep -P -o (? leftanglebrc =ERROR total: )d+
echo $VERSIONS awk -F -. / leftsquarebrc 0-9 rightsquarebrc +\./{$NF+=1;OFS=".";print}
echo $VNCServerResponse awk /desktop/ {print $NF}
echo $WR + $RD bc
echo $X $Y
echo $YESTERDAY
echo $_SERVER leftsquarebrc 'DB_NAME' rightsquarebrc  sed s/$_SERVER leftsquarebrc 'DB_NAME' rightsquarebrc /test/g
echo $_SERVER leftsquarebrc 'DB_NAME' rightsquarebrc  sed s/\$_SERVER\ leftsquarebrc '"'"'DB_NAME'"'"'\ rightsquarebrc /test/g
echo $a
echo $a
echo $a
echo $a $b
echo $a / ( $b - 34 ) bc -l
echo $a awk -v RS=, -v myvar=$b BEGIN{IGNORECASE=1} /TABLE/&&/CREATE/&& $0~myvar {print $NF}
echo $a awk NR rightanglebrc 1 {if ($2 rightanglebrc 40) {print $1,$2; f=1}} END {if (!f) print "ok"}
echo $a awk {print $1} FS= leftsquarebrc 0-9 rightsquarebrc 
echo $a awk {printf("\\\"%s\"",$1)}
echo $a awk {printf("\\\\\"%s\"",$1)}
echo $a perl -p -e s/(email: leftsquarebrc  leftsquarebrc :graph: rightsquarebrc  rightsquarebrc *,last)/\L\1/
echo $a sed s@a@o@g
echo $a tr  leftsquarebrc a-z rightsquarebrc   leftsquarebrc A-Z rightsquarebrc  awk -v RS=, -v myvar=$b /TABLE/&&/CREATE/&& $0~myvar {print $NF}
echo $abc
echo $abc sed s|\( leftsquarebrc "/ rightsquarebrc \)|\\&|g
echo $ans
echo $audio
echo $b
echo $blah my_cmd
echo $body mail $receiver -s $subj
echo $branch awk {for (i=1;i leftanglebrc =NF; i++) {$i="^"$i} print}
echo $c
echo $channel od -t c
echo $children wc -w
echo $chksitename tr   \n
echo $com
echo $console.log('lalala')
echo $currentFolder tr -c -d  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc 
echo $currentFolder tr -c -d  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc  sed -e s/^0\{1,2\}//
echo $d
echo $d cut -d -. -f 1
echo $data awk -F -% BEGIN {OFS="|"} {$1=$1; print $0}
echo $data grep -P -o (^| )-input=( leftsquarebrc ^ / rightsquarebrc */)*\K leftsquarebrc ^  rightsquarebrc *
echo $data sed s/\. leftsquarebrc 0-9 rightsquarebrc //g
echo $data sed s/\. leftsquarebrc 0-9 rightsquarebrc \+//g
echo $date sed s/\(..\)-\(..\)-\(....\)/\3-\1-\2/
echo $date sed s/\(..\)-\(..\)-\(....\)/\3-\2-\1/
echo $days tr -s   \n func grep -o -P (? leftanglebrc =lSecure) leftsquarebrc 1-6 rightsquarebrc  sort uniq -u
echo $df
echo $elem
echo $endMS_line
echo $exa sed s/-/\//g
echo $example perl -n -l -e m/.*?video.php\?video=( leftsquarebrc ^" rightsquarebrc +)" rightanglebrc .*video.php\?video=( leftsquarebrc ^" rightsquarebrc +)".*/; print "=$1=$2="
echo $f
echo $f $f.lzo
echo $f cat $f
echo $f egrep -o  leftsquarebrc 0-9 rightsquarebrc +
echo $f sed -r -e s/^tmp( leftsquarebrc 0-9 rightsquarebrc +)\.csv$/\1/
echo $f sed s,_ leftsquarebrc 0-9 rightsquarebrc \+\(\. leftsquarebrc a-z rightsquarebrc \+\)$,\1
echo $f sed s/^foo/foo1/
echo $f tr -d -c  leftsquarebrc 0-9 rightsquarebrc 
echo $f zgrep MYBOND $f
echo $f1
echo $f1
echo $fg leftsquarebrc red rightsquarebrc  `ls` ls
echo $file
echo $file
echo $file $new_name
echo $file - ${FILES leftsquarebrc $file rightsquarebrc }
echo $file gawk BEGIN { FS = "." } ; {print $3 }
echo $file gawk BEGIN { FS = "." } ; {print $3 } echo Number of Threads: $numThreads
echo $file mv $file ${file:3}
echo $file sed s/"$R2K_SOURCE"/"$R2K_PROCESSED"/g
echo $file sed s/\.po$/.mo/
echo $file sed s/^ leftsquarebrc ^- rightsquarebrc * - (.*). leftsquarebrc ^. rightsquarebrc *$/1/
echo $file sed s/^.*\.\( leftsquarebrc ^. rightsquarebrc  leftsquarebrc ^. rightsquarebrc *\)\(_ leftsquarebrc -.0-9 rightsquarebrc  leftsquarebrc -.0-9 rightsquarebrc *_arm\)*\.deb$/\1/
echo $file sed s/^./( leftsquarebrc ^- rightsquarebrc *) - .*$/1/
echo $fileData awk {print $1}
echo $filename
echo $filename awk -F . {if (NF rightanglebrc 1) {print $NF}}
echo $filename cut -f 1 -d -.
echo $filename sed -e s/TestVersion/Version2/g $filename
echo $filename sed s/\/home\/devtestdocs\/devtestdocs-repo\//$testdocsdirurl/
echo $filename sed s/find_and/replace_on_filename/g
echo $filename sed s@/home/devtestdocs/devtestdocs-repo/@$testdocsdirurl@
echo $filename tr -c -d _ wc -c
echo $files
echo $filevar sed s/$/ leftanglebrc br rightanglebrc /
echo $findString perl -0 -7 -7 -7 -p -e s/\t/\\t/g
echo $findString perl -0 -7 -7 -7 -p -e s/\t/\\t/g
echo $firstname echo $lastname somecommand
echo $fixture
echo $fn cat $fn
echo $foo tr   .
echo $foo true
echo $foobar tr  leftsquarebrc :upper: rightsquarebrc   leftsquarebrc :lower: rightsquarebrc 
echo $fork FORKS
echo $fyle sed -e s/FOO//gI -e s/BANG//gI
echo $get_the_profile_name
echo $gg sort join -1 2 -2 1 text.txt
echo $gitstatus
echo $gitstatus
echo $hello world!
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i
echo $i $word tr A-Z a-z sed -e s/ leftsquarebrc ^a-z0-9 rightsquarebrc //g
echo $i and $j paste -d | file1 file2
echo $i mv $i $(perl -e 'use URI::Escape; $u=uri_unescape( leftanglebrc STDIN rightanglebrc ); chomp($u); $u=~s/\s/_/g; $u=~s/-\(.*\)//; print $u;') perl -e use URI::Escape; $u=uri_unescape( leftanglebrc STDIN rightanglebrc ); chomp($u); $u=~s/\s/_/g; $u=~s/-\(.*\)//; print $u;
echo $i processes: pgrep -f -l -u $u
echo $i sed -e s/\/cygdrive\/g/G\:/g
echo $i sed s/\( leftsquarebrc ^\. rightsquarebrc *\).\( leftsquarebrc ^\. rightsquarebrc *\).\( leftsquarebrc ^\. rightsquarebrc *\)/\2.\1/
echo $i sed s/\./.$VERSION./ cp $i $NEW uglifyjs --overwrite --no-copyright $NEW
echo $i sleep 5 echo end $i
echo $i sort -u
echo $i tr   _ mv $i $j
echo $i:  leftsquarebrc ${!i} rightsquarebrc 
echo $id
echo $id
echo $idx:${arr leftsquarebrc $idx rightsquarebrc } sort -t -: -k -1 -, -1
echo $idx:${arr leftsquarebrc $idx rightsquarebrc } sort -t -: -k 2
echo $info sed -n -r / leftanglebrc input/s/ leftanglebrc input +name="( leftsquarebrc ^" rightsquarebrc +)" +value="( leftsquarebrc ^" rightsquarebrc +)" leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc  leftsquarebrc ^ leftanglebrc  rightsquarebrc */\1 = \2\n/gp
echo $initial_date
echo $input
echo $input sed s/ leftsquarebrc ^, rightsquarebrc *=//g
echo $input wc -w
echo $inputData
echo $ip leftsquarebrc ip_addr rightsquarebrc 
echo $ip_port
echo $ipaddresscurrent grep -q -P $ipaddressused echo found exit 0 echo not found exit 1
echo $j sed s/tRap/tRapTrain/BEEML/BEEMLTrain/g
echo $j sort -n
echo $joules2 * $cpu bc
echo $k
echo $k sed s/$/\\/
echo $k tr \n  
echo $l
echo $l python script1.py python script2.py
echo $last_n2_lines
echo $line
echo $line
echo $line
echo $line
echo $line
echo $line
echo $line
echo $line
echo $line
echo $line 
echo $line awk -F -  -* - leftsquarebrc  - leftsquarebrc  - rightsquarebrc  - rightsquarebrc  -  -* -v -Q -= {print Q$2Q}
echo $line awk -F -, {print $1 ",'"$mycol_new"'," $3 "," $4 "," $5 "," $6 "," $7 "," $8}
echo $line awk -F -| -v o=${MYFIELD} -v n=${MYHASH} {OFS=FS} sub(o, n, $6) {print}
echo $line awk -v var=$mycol_new -F -, {print $1 "," var "," $3 "," $4 "," $5 "," $6 "," $7 "," $8}
echo $line awk BEGIN{FS="\\"; OFS="\\\\"} {print $(NF-1), $NF}
echo $line awk {print $1}
echo $line cut -c -2 -- -2 -0
echo $line cut -c -2 -- -2 -0
echo $line cut -d   -f 1
echo $line cut -d , -f 3
echo $line cut -d -  -f -4 -- -$ -N -F
echo $line cut -d -  -f 3
echo $line cut -d -; -f 1
echo $line cut -d -; -f 1
echo $line cut -d -; -f 3
echo $line cut -d -; -f 3
echo $line grep -o -E  leftsquarebrc a-zA-Z rightsquarebrc  leftsquarebrc a-zA-Z rightsquarebrc  leftsquarebrc a-zA-Z rightsquarebrc   leftsquarebrc 0-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc   leftsquarebrc 0-2 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-5 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-5 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
echo $line grep -o -E  leftsquarebrc a-zA-Z rightsquarebrc  leftsquarebrc a-zA-Z rightsquarebrc  leftsquarebrc a-zA-Z rightsquarebrc \  leftsquarebrc 0-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \  leftsquarebrc 0-2 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \: leftsquarebrc 0-2 rightsquarebrc  leftsquarebrc 2-9 rightsquarebrc \: leftsquarebrc 0-2 rightsquarebrc  leftsquarebrc 2-9 rightsquarebrc 
echo $line grep OPR sed -e s/^.*(OPR leftsquarebrc 0-9 rightsquarebrc *).*$/1/ head -1
echo $line grep OPR sed -e s/^.*OPR( leftsquarebrc 0-9 rightsquarebrc *).*$/1/
echo $line grep S leftsquarebrc ABD rightsquarebrc  leftsquarebrc 42 rightsquarebrc 00 cut -c -1 -1 -- -1 -2
echo $line nawk BEGIN {FS=" #" } ; { print $1 }
echo $line perl -p -e s/ leftsquarebrc  \t rightsquarebrc .*//g;s/(.*)_.*/$1/g
echo $line sed -e s/ leftanglebrc  rightanglebrc /;/g -e s/- rightanglebrc \| leftanglebrc -//g
echo $line sed -e s/$MYFIELD/${MYHASH}/g
echo $line sed -e s/$varA/$resA/
echo $line sed -e s@.*/@@g -e s@\. leftsquarebrc ^. rightsquarebrc *$@@g
echo $line sed -n s! leftanglebrc strong rightanglebrc \(http:// leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc /strong rightanglebrc !\1!p
echo $line sed -n s/^U ( leftsquarebrc 0-9a-zA-Z_ rightsquarebrc *).*/$file:1/p
echo $line sed s/.*_( leftsquarebrc ^ t rightsquarebrc *).*/1/
echo $line sed s/\\/\\\\/g
echo $line sed s/^.* leftsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *( leftsquarebrc ^ rightsquarebrc  rightsquarebrc * leftsquarebrc ^ rightsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc ) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * rightsquarebrc .*$/'1'/
echo $line sed s/^.* leftsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc */'/; s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * rightsquarebrc .*$/'/
echo $line tr -s   cut -f -1 -, -2 -, -3 -d  
echo $lines
echo $lines
echo $list sed -e s@$refcat@$cat1@g
echo $location grep -x -q w{10}|/w{10}|/home/w{10}
echo $long_str grep -q $shrt_str echo found echo not found
echo $longstring awk $1 == "second" { print $2 }
echo $mLine grep $max grep -o  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc *
echo $mail
echo $many_lines grep -B 1 $var grep -v $var
echo $mat = reshape(1:9, 3, 3) mx
echo $matched
echo $md5$sk cksum cut -d -  -f 1
echo $mean * 1000 tr -d $r bc
echo $mean tr -d $r
echo $msg sendmail -o -i -t
echo $msgs
echo $myString sed -r s/^.{5}//
echo $myVar read -a names
echo $my_var
echo $mydata xargs -n 2 another_command
echo $myline awk { print $2 }
echo $name
echo $name sed -e s/\%20/_/ -e s/\.+/_/
echo $name sed s/.$//
echo $nascmd sed s/$/\$/g
echo $nascmd sed s/\$/\\$/g
echo $nested_script sh -s foo bar
echo $new1
echo $new_db_name sed s/$replace_string/$replace_with/
echo $newexpr
echo $now $full awk { printf("%.2f\n", $1/$2 * 100) }
echo $num
echo $number1 + $number2 bc -l sed -e s/^\./0./ -e s/^-\./-0./
echo $o
echo $opt sed -e s/^"// -e s/"$//
echo $original sed -n -e s/.*$regex.*/1/p
echo $out
echo $output
echo $output
echo $output Java_Program_2
echo $output awk BEGIN { hits=0; misses=0; } /^hit/{ hits+=$2}; /^misses/{misses+=$2}; END {print "Hits: " hits "\nMisses: " misses } t.txt
echo $output awk NR%2{printf $0"\t";next;}1
echo $output awk NR%2{printf $0"\t";next;}1
echo $output1 eval $grepg
echo $p,$(awk '/MC exp. sig-$p/ {print $10}' filename | tr -d '$') awk /MC exp. sig-$p/ {print $10} filename tr -d $
echo $p1 sed -e s/\( leftsquarebrc *. leftsquarebrc ^$ rightsquarebrc \)/\\\1/g
echo $param
echo $passwd sed -e s/./*/g
echo $path
echo $path awk -F / { print "", $6, $7, $8 } OFS=/
echo $path_to_track
echo $process is down!
echo $qry2)); 275 grep -o  leftsquarebrc 0-9 rightsquarebrc *$
echo $query
echo $query mysql database
echo $query mysql database
echo $response sed -e s/^.*"$value" leftsquarebrc   rightsquarebrc *: leftsquarebrc   rightsquarebrc *"// -e s/".*//
echo $result
echo $result
echo $result mailx -s KLON ILK BILDIRIM SONUCLARI $MAIL_LIST
echo $return
echo $s
echo $s
echo $s sed s/\\ /^K/g
echo $s sed s/^.*_\( leftsquarebrc ^_ rightsquarebrc *\)$/\1/
echo $s tr   n sort uniq -c grep -q -v ^ *1  echo duplicates!
echo $s1$HEADS$s2$s3$s4$s5$s6'$FPATH$DATE$FNAME$'$s7$s8$selectend
echo $scriptName awk -F -_ {print $1}
echo $sensor ${!sensor}
echo $sentence grep -o -P b$test.*?b
echo $sequence sed s/,/\n/g
echo $service : `dig +short unix.stackexchange.com` : allow # My DynDNS Server dig +short unix.stackexchange.com
echo $sourceX $FolderName
echo $sql
echo $sql mysql -u -u -s -e -r -p -p -a -s -s -w -o -r -d
echo $sqlvar sqlplus user/pwd@dbname
echo $ssh
echo $str
echo $str awk -F . NF  rightanglebrc  1 {print $NF}
echo $str awk -F . {if (NF rightanglebrc 1) {print $NF}}
echo $str cut -d  leftsquarebrc  -f 2 cut -d  rightsquarebrc  -f 1
echo $str sed -e s/x/./g
echo $str sed -e s/x/./g
echo $str sed s# \(//\)#\'$'\n''\1#g
echo $str sed s/_ leftsquarebrc 0-9 rightsquarebrc \{14\}$//
echo $string
echo $string awk { print $3 }
echo $string cut -f -6 -- -d -.
echo $string grep -P -o (? leftanglebrc =\D )(\d+)
echo $string grep -P -o \d+
echo $string nawk /Subject:/ {sub(".*CN=",""); sub("/.*",""); print}
echo $string perl -n -e print "$1\n" if /\b(\S.{0,20})$/
echo $string sed $s/r//
echo $string sed -r s/ leftsquarebrc xyz rightsquarebrc +/_/g
echo $string sed s/ leftsquarebrc ^: rightsquarebrc *:"\( leftsquarebrc ^" rightsquarebrc *\).*/\1/
echo $string sed s/.*CREATESETTABLE leftsquarebrc ^) rightsquarebrc \+TABLENAME\(.*\)/\1/g
echo $string sed s/^.*-s *\( leftsquarebrc 0-9 rightsquarebrc *\).*$/\1/
echo $string tr 0123456789 abcdefghij
echo $string tr xyz _
echo $stuff
echo $sum+${NUMBERS leftsquarebrc $i rightsquarebrc } bc -l
echo $sum_var
echo $test
echo $test awk -F - leftsquarebrc  -; -& - rightsquarebrc  {print $4}
echo $test sed -n 2p
echo $test sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *port leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc */ leftanglebrc port rightanglebrc \1 leftanglebrc \/port rightanglebrc /
echo $test test2=$test echo echo test  $test2
echo $testvar
echo $text
echo $title
echo $title sed s/,/My_com/g
echo $title tr -c -d  leftsquarebrc :alnum: rightsquarebrc 
echo $title tr -d '
echo $tmpstr
echo $txt egrep -o \ leftanglebrc ip leftsquarebrc 46 rightsquarebrc : leftsquarebrc ^  rightsquarebrc + cut -c 5-
echo $txt grep -P -o \bip leftsquarebrc 46 rightsquarebrc :\K leftsquarebrc ^  rightsquarebrc +
echo $unixpath sed s/\//\\\\/g
echo $updatedDocument
echo $username:$password sudo chpasswd
echo $v_msg sed s/To: root/To: $v_recipient/g
echo $val
echo $val  
echo $value
echo $value
echo $value
echo $value tr " \n grep @
echo $var
echo $var
echo $var
echo $var
echo $var
echo $var
echo $var
echo $var cut -d -' -f 2
echo $var echo that
echo $var sed /str/d
echo $var sed s/{{VALUE}}/'"${newValue//\//\/}"'/g
echo $var split -b 10240
echo $var split -b 10240 dir1/mysplits
echo $var wc -l
echo $var wc -l
echo $var1
echo $var1 .. $var2
echo $var1 sed s/: leftsquarebrc ^, rightsquarebrc \+,\?/ /g
echo $var_a
echo $variable awk {print $0}
echo $variable mail -s switch_HARDWARE_CHECK recipeint_email_address
echo $variable read a echo $a
echo $variablename sed s/position: // sed s///n/ sed -n 2~2!p
echo $variablename sed s/position:/npostion:/g cut -d -/ -f 1 cut -d   -f 2 sed /^$/d
echo $vname
echo $word grep -o  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc  tr -d \n
echo $word sed -n s/ leftsquarebrc ^a-z rightsquarebrc //ig
echo $x
echo $x
echo $x
echo $x awk -F -/ {print gensub(".*/java/(.*/).*", "\\1", $0)}
echo $x sed -e s/-6\.0\.dll$/-6.1.dll/ echo mv $x $y
echo $x sed -e s@.*/java/\(.*/\).*@\1@
echo $x sed -n $Np
echo $x sed -n ${N}p
echo $x sed -n 3p
echo $x5d
echo $x5e
echo $x_$y
echo $xc2xa3
echo $xml_message sed s/xmlns/ignore/
echo $yourvariable python thisfile.py
echo $zip grep -E ^ leftsquarebrc 0-9 rightsquarebrc \. leftsquarebrc 0-9 rightsquarebrc {1,2}\. leftsquarebrc 0-9 rightsquarebrc {1,2}$
echo $zip sed -E s/.*( leftsquarebrc 0-9 rightsquarebrc \. leftsquarebrc 0-9 rightsquarebrc {1,2}\. leftsquarebrc 0-9 rightsquarebrc {1,2}).*/\1/
echo $zone rev
echo ${!1} sed -e s/{/\\{/g
echo ${!B}
echo ${!REF}
echo ${!VAR}
echo ${!a}
echo ${!scene_name}
echo ${!value}
echo ${!x leftsquarebrc @ rightsquarebrc }
echo ${!x}
echo ${#arr leftsquarebrc @ rightsquarebrc }
echo ${#arr leftsquarebrc @ rightsquarebrc }
echo ${#array leftsquarebrc * rightsquarebrc }
echo ${#array leftsquarebrc @ rightsquarebrc }
echo ${#arr}
echo ${#dir leftsquarebrc @ rightsquarebrc }
echo ${#pdffiles leftsquarebrc * rightsquarebrc }
echo ${$line/coordinateIndex="0"/coordinateIndex="124"}
echo ${(P)${KIND} leftsquarebrc ID rightsquarebrc }
echo ${(P)nameOfA}
echo ${*:1:$(($#-1))}
echo ${*:2}
echo ${.sh.version}
echo ${/home/yourdir##*/}
echo ${0%/*}
echo ${1##*/}
echo ${1-0}.${2-0}.${3-0}.${4-0}
echo ${10}
echo ${1}_$(/bin/date --utc +"%Y%m%d_%H%M%Z")_$2 /bin/date --utc +%Y%m%d_%H%M%Z
echo ${4//\\n/$'\n'}
echo ${@ leftsquarebrc n rightsquarebrc }
echo ${@:$#:$#}
echo ${@:$n:1}
echo ${@:(-2):1}
echo ${@:2}
echo ${@:2}
echo ${ADB:=adb}
echo ${BASH_SOURCE leftsquarebrc 0 rightsquarebrc }
echo ${COLORS} awk {print $$i}
echo ${DATA_ARRAY leftsquarebrc * rightsquarebrc } awk !f && $1!=val{print "False"; f=1}END{if(!f)print "True"} RS=  val=120
echo ${DATA_ARRAY leftsquarebrc * rightsquarebrc } awk !f && $1!=val{print "False"; f=1}END{if(!f)print "True"} RS=  val=121
echo ${DATA_ARRAY leftsquarebrc * rightsquarebrc } awk $1!=val{print "error"} RS=  val=120
echo ${DIR#*_}
echo ${FILES leftsquarebrc @ rightsquarebrc } xargs -i mv {} /path/to/destination
echo ${FILE} sed s/.gz$//g
echo ${HEADER/$'\r'/}
echo ${HELLO+Hello}${HELLO-World}
echo ${JOB_OUTPUT}
echo ${MSG}$( leftanglebrc file)
echo ${OUTFILE leftsquarebrc $count rightsquarebrc }
echo ${Orance.home} tee MY_FILE.txt
echo ${PATH//:/$'\n'}
echo ${PATH} sed s/\//\\//g
echo ${PATH} sed s:/:\\/:g
echo ${PIPESTATUS leftsquarebrc 1 rightsquarebrc }
echo ${PIPESTATUS leftsquarebrc @ rightsquarebrc }
echo ${PIPESTATUS leftsquarebrc @ rightsquarebrc }
echo ${PWD##*/}
echo ${Prg} sed s,/home/in/PL/\(.*_Data\.txt\)$,'$Btr'\1,
echo ${QUERY_STRING##*=}
echo ${SHUTDOWNBODY} /usr/bin/mutt -s ${SHUTDOWNSUBJECT} ${EMAIL}
echo ${SHUTDOWNBODY} su -l -c /usr/bin/mutt -s "${SHUTDOWNSUBJECT}" "${EMAIL}" yourusername
echo ${SSH_CLIENT%% *}
echo ${STR1// /,}
echo ${TEMPERATURES leftsquarebrc 0 rightsquarebrc }
echo ${UPDATED} grep -P -o  leftsquarebrc 0-9 rightsquarebrc *(?= rows)
echo ${VAR/$TOKEN/$REPLACEMENT}
echo ${VAR// leftsquarebrc ^0-9 rightsquarebrc /} ${VAR// leftsquarebrc 0-9 rightsquarebrc /}
echo ${VAR1} cut -d   -f ${X}
echo ${VARS} tr () {}
echo ${VAR}="${!VAR}"
echo ${VAR}bar
echo ${WCUM leftsquarebrc @ rightsquarebrc } sed -e s/; /;\n/g awk -F -: !/ 0;?/ {print $0} sort -t -: -k 2 -r xargs
echo ${_filelist} wc -w
echo ${`pwd`##*/}
echo ${a% }${b% }
echo ${a%.*}
echo ${a:0:$length}
echo ${abc leftsquarebrc 9 rightsquarebrc }
echo ${app} sed s/rtcom-call-ui/general_call/
echo ${archive_dir}/${date}_Aggregated.txt
echo ${archive_dir}/${date}_Aggregated.txt
echo ${arr leftsquarebrc * rightsquarebrc }
echo ${arr leftsquarebrc 0 rightsquarebrc }
echo ${arr leftsquarebrc 1 rightsquarebrc }
echo ${arr leftsquarebrc @ rightsquarebrc }
echo ${arr leftsquarebrc @ rightsquarebrc } xargs -n 1 sort -u xargs
echo ${array leftsquarebrc * rightsquarebrc }
echo ${array leftsquarebrc * rightsquarebrc }
echo ${array leftsquarebrc * rightsquarebrc }
echo ${array leftsquarebrc * rightsquarebrc }
echo ${array leftsquarebrc -1 rightsquarebrc }
echo ${array leftsquarebrc 0 rightsquarebrc }
echo ${array leftsquarebrc 0 rightsquarebrc }
echo ${array leftsquarebrc 0 rightsquarebrc }
echo ${array leftsquarebrc 1 rightsquarebrc }
echo ${array leftsquarebrc @ rightsquarebrc }
echo ${array leftsquarebrc @ rightsquarebrc }
echo ${array leftsquarebrc @ rightsquarebrc } tr   \n sort -n head -1
echo ${a}_$b
echo ${bashFilePathArray leftsquarebrc * rightsquarebrc :0:len-3}
echo ${baz/${foo/${foo/#bar/foo}/bar}/qux}
echo ${commit_hashes leftsquarebrc 0 rightsquarebrc }
echo ${commit_hashes leftsquarebrc @ rightsquarebrc }
echo ${content} awk /href="( leftsquarebrc 0-9 rightsquarebrc {8}\/)"/ { pen = ult; ult = $0 } END { print pen }
echo ${content} awk match($0, /href="( leftsquarebrc 0-9 rightsquarebrc {8}\/)"/, a) { pen = ult; ult = a leftsquarebrc 1 rightsquarebrc  } END { print pen }
echo ${content} awk { pen = ult; ult = $0 } END { print pen }
echo ${currentFold}...r
echo ${databases leftsquarebrc "${country}:${action} rightsquarebrc }
echo ${data} sed s/week leftsquarebrc ^; rightsquarebrc *; *//
echo ${data} sed s/week leftsquarebrc ^; rightsquarebrc *;//
echo ${delimiter}
echo ${empty_space}some_other_thing
echo ${field leftsquarebrc $i rightsquarebrc }
echo ${file##*/},$unique,$total
echo ${filename##*/}
echo ${filename%%?????.moc1}.moc1
echo ${files leftsquarebrc ${#files leftsquarebrc @ rightsquarebrc }-1 rightsquarebrc }
echo ${files leftsquarebrc 0 rightsquarebrc }
echo ${files// leftsquarebrc !0-9 rightsquarebrc /}
echo ${finalt/' leftanglebrc /span rightanglebrc  leftanglebrc /td rightanglebrc '/}
echo ${foo leftsquarebrc (i)' rightsquarebrc }HiMomImOnTV}
echo ${foo%.*}
echo ${foo:=42}
echo ${hosts leftsquarebrc 2 rightsquarebrc }
echo ${i%.*} awk -v FS=/ { print $2 }
echo ${ids leftsquarebrc @ rightsquarebrc } tr   \n sort -u tr \n  
echo ${ids leftsquarebrc @ rightsquarebrc } tr   \n sort -u tr \n  
echo ${ip leftsquarebrc * rightsquarebrc }
echo ${ips leftsquarebrc 1 rightsquarebrc }
echo ${i}
echo ${jps} grep Dapp=master awk {print $1}
echo ${jps} grep Dapp=master awk {print $1}
echo ${line leftsquarebrc * rightsquarebrc :0:2},${hash_value}
echo ${line leftsquarebrc 1 rightsquarebrc } ${line leftsquarebrc 2 rightsquarebrc } cs2cs +init=esri:102067 +towgs84=570.8,85.7,462.8,4.998,1.587,5.261,3.56 +to +init=epsg:4326
echo ${line%%\( leftsquarebrc 0-9 rightsquarebrc *\)}($COUNT)
echo ${line/%\( leftsquarebrc 0-9 rightsquarebrc *\)/\($COUNT\)}
echo ${line/coordinateIndex="0"/coordinateIndex="124"}
echo ${line/coordinateIndex=\"0\"/coordinateIndex="124"}
echo ${line/coordinateIndex=\"0\"/coordinateIndex="124"}
echo ${lines} read -r line something with ${line}
echo ${lines} sed s/\\/\\\\/g read line something with ${line}
echo ${my_array leftsquarebrc * rightsquarebrc }
echo ${my_array leftsquarebrc @ rightsquarebrc }
echo ${my_array leftsquarebrc key rightsquarebrc }
echo ${name##* leftsquarebrc :letter: rightsquarebrc }
echo ${name} cut -d = -f 4 cut -d   -f 1
echo ${name} has ${!${name}_${item}} ${item}
echo ${nodeID}_ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc _19700101010${ts}_udp_filtered.pcap
echo ${nodes leftsquarebrc @ rightsquarebrc }
echo ${number} fold -w 1
echo ${pathToConfig//:/\\\\:}
echo ${pdffiles leftsquarebrc * rightsquarebrc }
echo ${pdffiles leftsquarebrc 4 rightsquarebrc }
echo ${pn leftsquarebrc @ rightsquarebrc }
echo ${query leftsquarebrc $1 rightsquarebrc }
echo ${s//*_some/}
echo ${s^^}
echo ${someid} sed s#\/#\\\/#
echo ${str%_ leftsquarebrc 0-9 rightsquarebrc *}
echo ${str// /-}
echo ${str// leftanglebrc * rightanglebrc /|}
echo ${str//toto2/}
echo ${str:$i:1}
echo ${string#\#}
echo ${string%_${string#${string%%_*}_*_}}
echo ${string// leftsquarebrc  $'\t' rightsquarebrc /}
echo ${string// leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc /}
echo ${string1#"$string2"}
echo ${string:(-4)}
echo ${tempvar} sed -r s/^.*s( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *):sMeshsTallysNumbers${meshnum1}.*$/1/
echo ${test#"${test_dir}}
echo ${test#$test_dir}
echo ${test#test_dir}
echo ${text} / 10 bc -l
echo ${tmp##*:}
echo ${totals leftsquarebrc * rightsquarebrc } tr   \n sort -n -t -= -k 2
echo ${value} sed -e s/ leftsquarebrc eE rightsquarebrc +*/\\*10\\^/
echo ${var:8}
echo ${var}0
echo ${x//ome/}
echo ${x}
echo ${x}_${y}
echo %1
echo %date% %time%
echo %g%
echo %optflags "-O2"
echo %optflags "-O2"
echo %path%
echo %path: = echo.%
echo %total%
echo %~1
echo %~a1 find a goto doCopy goto noCopy
echo 'First argument'
echo 'param 1' 'param 2' xargs -n 1 xargs -I -@ echo  leftsquarebrc @ rightsquarebrc   leftsquarebrc @ rightsquarebrc 
echo ($a/$b) * $c) bc -l
echo ($n1 + $n2 + $n3)/3 bc
echo (4.2-1.3) / 1 bc
echo (def ^Integer a 1) sed s/\^\w\+//g
echo (foo)
echo (x1,y1,z1) (x2,y2,z2) (x3,y3,z3) awk -F - leftsquarebrc  -( -, - rightsquarebrc  {print $2, $3}
echo *
echo *
echo *
echo *
echo *
echo *
echo *   CRISTOBAL  AL042014  08/05/14  12  UTC   * awk {print $2}
echo * echo $A
echo * master sed -e /^ leftsquarebrc ^* rightsquarebrc /d -e s/* \(.*\)/\1/
echo ** it is python testing **
echo **/*.h xargs ./a.out
echo *.c
echo *.{ext1,ext2} sort -u
echo */
echo */
echo ,1
echo ,1
echo ,article{gjn2010jucs, Author =   {Grzegorz J. Nalepa},  awk { print gensub(/(, leftsquarebrc ^, rightsquarebrc +).*/,"\\1", "g") }
echo -  - leftsquarebrc  -$ -w -o -r -d - rightsquarebrc 
echo -  -- -  --
echo -- . $lastline . --
echo -- Found: $file rm -v $(basename "$file" .txt) (*).txt basename $file .txt
echo ---${pass}---
echo ----------   $(date +"%d %B %G") , $(date +%r) : date +%d %B %G date +%r
echo --exclude-agent $line \
echo --foo bar baz
echo -E ${(q)@}
echo -e   $ipttttDOWN
echo -e  \t 
echo -e "What do we say to the God of Death?nNot today."
echo -e #!/bin/sh\n echo "hello world"
echo -e #!/usr/bin/env bashnmyprogram -i "input_${i}.txt"
echo -e $(./tpb.sh) ./tpb.sh
echo -e $(sort $1 | uniq -d) sort $1 uniq -d
echo -e $MY_STRING
echo -e $RESULT
echo -e $What do we say to the God of Death?nNot today.
echo -e $in  is an  ${type leftsquarebrc $(is_odd $in) rightsquarebrc }  number.
echo -e $in is an ${type leftsquarebrc in % 2 rightsquarebrc } number.
echo -e $input tr -s   cut -d   -f -2 --
echo -e $s awk {print $2}
echo -e $sqlvar sqlplus user/pwd@dbname
echo -e $sshpassn$sshpass passwd --stdin root
echo -e ${CONFIG_FILE}x
echo -e ${message}n${changed} /usr/bin/php -q /home/chad/www/mantis.localhost/scripts/checkin.php
echo -e -n 111 22 3\n4 555 66\n column -t sed s/ \( leftsquarebrc 0-9 rightsquarebrc \)/\1/g
echo -e -n bD{a,b,c}.jpgn
echo -e -n use AVL \ngo\nexec spAVL_SetAlertIVR 1, ' base64 myFile.wav tr -d \n echo -n -e '\ngo tsql -H 192.168.1.111 -p 1433 -U sa -P x
echo -e .separator "@"\n.import output log_dump sqlite log.db
echo -e 001033 leftsquarebrc 32m002cheese001033 leftsquarebrc 0m002
echo -e 012
echo -e 033 leftsquarebrc 1m$(grep '/data' file)033 leftsquarebrc 0m grep /data file
echo -e 033 leftsquarebrc 38;5;208mpeach033 leftsquarebrc 0;00m
echo -e 033 leftsquarebrc ?35h033 rightsquarebrc 50;#+1^G
echo -e 034202240224034202240200034202240200 033 leftsquarebrc 01
echo -e 0r header.txt\nw ed sample.txt
echo -e 10 ABC n5 DEF n87 GHI sort -n -r -k 1 head -n 1 cut -f 2 read MYVAR echo intermediate value: $MYVAR echo $MYVAR xargs -I {} grep -w {} FILES
echo -e 1234bbb56 perl -p -e $b="\b";s/$b//g
echo -e 123\nabc\n'"$(tput cuu1)$(tput cuu1)"'*\n*
echo -e 1:45n0:20 awk BEGIN { FS=":" } { SUM += 60*$1 + $2 } END { print SUM }
echo -e 1n2n3n4n5n ./bin/file_name
echo -e 2.0.13n2.0.2 sort -V
echo -e A A 1nB B 1nC C 1 awk {gsub($(!/B/),"",$0); print $1 "\t" $2}
echo -e AAAnBBB awk NR==2
echo -e AAAnBBB sed -n 2p
echo -e ABC 12345 t Job Worked on DATE
echo -e ALERT - Shell Access on:' `date` `who` 'nn' `whois $(who | cut -d'(' -f2 | cut -d')' -f1)` date who whois $(who | cut -d'(' -f2 | cut -d')' -f1) who cut -d -( -f 2 cut -d -) -f 1
echo -e Cmd rightanglebrc  c read -s cmd echo -a -p -p -e -n -d -_ -s -o -m -e -t -h -i -n -g
echo -e Cmd rightanglebrc  c$'e leftsquarebrc s' read cmd echo $e leftsquarebrc u${cmd}-append_something
echo -e Content-type: image/pngn
echo -e GET /ws/map/v1/search.wsdl HTTP/1.1nHost: my.site.comnn openssl s_client -c -o -n -n -e -c -t my.site.com:443 -i -g -n -_ -e -o -f
echo -e I am using basic grep expression.\nOne more line\nOne with sed\nOne without sed -n /am/,/sed/p
echo -e IDtNametJobtPhonetLocation grep -n -i . $HOME/$DATAFILENAME sort -k 2 -t $t column -t -s -$ -t
echo -e Icon\r xargs touch
echo -e Normal e leftsquarebrc 1mBold1 e leftsquarebrc 0mNormal Normal e leftsquarebrc 1m--Bold-2 e leftsquarebrc 0mNormal grep -P -o $e leftsquarebrc 1m.*?e leftsquarebrc 0m
echo -e SizetFilestDirectory
echo -e SizetFilestDirectory paste  leftanglebrc (du -sh ./*/ | sort -k2 | cut -f1)  leftanglebrc (find ./*/ | cut -d/ -f2 | uniq -c | sort -k2 | awk '{print ($1-1)"\t"$2}') du -s -h ./*/ sort -k 2 cut -f 1 find ./*/ cut -d -/ -f 2 uniq -c sort -k 2 awk {print ($1-1)"\t"$2} sort -n -k -2
echo -e Some Message With NewlinesnHello World.n php temp.php
echo -e This Is a Test MessagenWell, not really!! tee  rightanglebrc (exec logger) exec logger
echo -e This is the body mutt -a /home/adrian/Backups/Server1/MyFile-2013-04-17.zip -s This is the subject -- myEmail@gmail.com
echo -e YnNnNn trad install
echo -e \033k'$USER@$HOSTNAME'\033\\
echo -e \U0001f37a
echo -e \e leftsquarebrc s tar -o -p -t -i -o -n -s -f dest source read line echo -e -n e leftsquarebrc ue2K echo -n $line cut -b -1 -- -$ -( -t -p -u -t -  -c -o -l -s -) tput cols echo
echo -e \n hexdump -C
echo -e \n\t\a
echo -e \x5a
echo -e `date +'%Y-%m-%d'`t`grep -c 'string1' filename` date +%Y-%m-%d grep -c string1 filename
echo -e `grep -c 'string1' filename`t`grep -c 'string2' filename` grep -c string1 filename grep -c string2 filename
echo -e a.nnbncnnnd perl -0 777 -p -e s/\.?(\n(\n+|$))/.$1/g cat -n
echo -e a011b perl -l -p -e s/ leftsquarebrc \0-\037\177 rightsquarebrc /sprintf "\\x%02x", ord $&/ge
echo -e aaanfoonfoonaaanfoonbbbnfoonbbb awk BEGIN{RS=""}{sub(/aaa\nfoo\nbbb/,"aaa\nright\nbbb",$0);print}
echo -e aaanfoonfoonaaanfoonbbbnfoonbbb perl -p -0 -0 -e s/aaa\nfoo\nbbb/aaa\nright\nbbb/
echo -e aan$(tput cuu1)b tput cuu1
echo -e abc.txtnpqr.txt read name find . -name $name
echo -e arrays2 28narrays 28narrays3 28
echo -e arrays2 28narrays 28narrays3 28
echo -e atbtctdte awk -F -$ -t {print NF}
echo -e bla bla c
echo -e ccc1t4ncccYt1ncccYt5ncccXt2ncccXt10nccc10t4nccc1t10nccc2t5 sort -t $t -k 1.4,1 --version-sort -k 2n
echo -e e leftsquarebrc 4mhello worlde leftsquarebrc 24me leftsquarebrc 1m
echo -e e leftsquarebrc ?1049h
echo -e e leftsquarebrc ?1049l
echo -e expected program inputnmoreexpected program inputneven moren ./runme
echo -e file1.txt file2.txt file3.txt
echo -e first linensecond linenthird line
echo -e foon-- nbar awk /^--/{exit}1
echo -e foonbarnbaz cat /dev/stdin foo
echo -e hello\\\nthere awk { if (gsub(/\\$/, " ")) printf; else print }
echo -e hello\\\nthere perl -n -e s/\\\n/ /; print
echo -e hexdump -C
echo -e host1.comnhost2.com xargs -n 1 printf ssh user@%s -p 999n
echo -e import sysnfor r in range(10): print 'rob' python
echo -e import sysnsys.stdout.write('x11x22x33x44') python
echo -e key1n123nkey2n456 sed N;s/\n/ /
echo -e line 1nline 2nline 3 program
echo -e my_hostn192.168.1.100nfoonbar ./myscript
echo -e nametagetuniversitytcity cat yourfile mv /tmp/out yourfile
echo -e nnn ssh-keygen -t rsa
echo -e r$var033 leftsquarebrc K
echo -e ra b {1..3} d en
echo -e scale=2n$BC_CEIL$BC_FLOORceil(2.5) bc
echo -e set serveroutput onn execute proc1(10,10); sqlplus -s system/xxxxx@orcl head -1
echo -e some-textn$( leftanglebrc file)
echo -e somethingr bash foo
echo -e stack\b 
echo -e stats\nquit sleep 1 telnet localhost 11211
echo -e testName\n cat ./a.out
echo -e this is line onen this is line twon ...
echo -e thisthasttabs
echo -e upload\n leftanglebrc uploadid rightanglebrc \n cat ~/test.txt nc 127.0.0.1 1567
echo -e x00x00x07x04x00x00x00...
echo -e x04x00x00x00www.google.com
echo -e xC2xA0
echo -e xC2xA3
echo -e {"hostname":"$hostname", "distro":"$distro", "uptime":"$uptime"}
echo -n
echo -n
echo -n
echo -n   12 s3c   sed s/^ *// sed s/ *$// echo c
echo -n   some_command
echo -n  leftsquarebrc migrate:refresh rightsquarebrc  /usr/bin/php artisan -n migrate:refresh
echo -n  md5sum
echo -n $(basename "$i" ".xml")  basename $i .xml head -1 $i
echo -n $0: Starting backup process in '$backupdir'... 
echo -n $171
echo -n $IP echo -n of echo -n $IPLINES
echo -n $SITE openssl dgst -b -i -n -a -r -y -s -h -a -1 -h -m -a -c $MASTER openssl base64 cut -c -1 -- -8
echo -n $SIZE
echo -n $i  echo
echo -n ${apk} tr -d r
echo -n ${i^}
echo -n ${line:$j-1:1}
echo -n ${line} awk -F | {printf "%s", $1}
echo -n *
echo -n *Checking Partition Permission* Hostname=$(hostname) LastChecked=$(date) hostname date
echo -n --exclude-agent $line
echo -n -e $(gettext 'Insert\ta\tword: ') gettext Insert\ta\tword: 
echo -n -e $(printf '\\x%x' 200) printf \\x%x 200
echo -n -e $ar033 leftsquarebrc K
echo -n -e 033 leftsquarebrc 2J033 leftsquarebrc H
echo -n -e 1\n2\n3 xargs -0 printf SELECT %s INTO MyTable
echo -n -e 54686973776f726b7366696e65 perl -p -e s/( leftsquarebrc 0-9a-f rightsquarebrc {2})/chr hex $1/gie
echo -n -e Cmd rightanglebrc  e leftsquarebrc s read cmd echo $e leftsquarebrc u${cmd}-append_something
echo -n -e Content-type: image/pngnn
echo -n -e \x${c:0:2}\x${c:2:2} iconv -f UNICODEBIG -t UTF-8
echo -n -e \x01\x53\x20\x00\x41\x04\x4f
echo -n -e \x30
echo -n -e \x48\x00\x49\x00
echo -n -e hello\r
echo -n -e hello\r sleep 5 echo -n -e good-bye\r echo
echo -n -e line\n\nanother\nno line ending here rightanglebrc 
echo -n ./bootstrp3.cab sed s! leftsquarebrc ^/ rightsquarebrc !!g wc -c
echo -n / ip -4 addr awk /eth0/ { getline; {print $2} } cut -f 2 -d -/
echo -n /path/to/folder: grep -q -r $kw /path/to/folder/  leftsquarebrc  $? == 0  rightsquarebrc  echo -n  $kw
echo -n 0: asterisk ......
echo -n 1 2 xargs ...
echo -n 5a perl -p -e s/( leftsquarebrc 0-9a-f rightsquarebrc {2})/chr hex $1/gie
echo -n Hello od -A n -t x1
echo -n I hate cats
echo -n What is your name?
echo -n exampleString md5sum
echo -n foobar sha256sum
echo -n i hexdump
echo -n key=value1&key2=value2&btext= openssl base64 curl --data @- myhost.com/api
echo -n passnpassn openssl req ....
echo -n password{salt} shasum -a 1
echo -n sed  sed -e s/^(.*)/-e 's,1,gl' \/ file.csv
echo -n sleep 5 cat tempfile mail.domain.com 25
echo -n some text here
echo -n stuff wc
echo -n svn.revision=
echo -ne "\\e rightsquarebrc 1;$account\\a"
echo -o -  -t -o -t -o -. -o sed -E s/-o  leftsquarebrc ^  rightsquarebrc +//
echo -v xargs doit.sh
echo .* * tr   \n
echo .. xargs -n 1 shuf paste -d -  -s
echo ...
echo ... grep -P -o ^.*?\K(? leftanglebrc =MATCH1).*?(?=MATCH2)
echo ... passwd
echo ... passwd
echo ... perl -p -e s{=( leftsquarebrc \d.| rightsquarebrc +)}{"=" . (join ",", split /\|/, $1)}eg
echo ... sed -n :a;/JOIN/{s/ leftsquarebrc ^J rightsquarebrc *JOIN \( leftsquarebrc A-Z0-9_ rightsquarebrc *\)/\1\n/;P;D;ta} sed -e :a;N;s/\n/ /;ta sed s/.*/ leftsquarebrc SQL_JOINS=\"&\" rightsquarebrc /
echo ... sed s/.*\(ec2 leftsquarebrc ^  rightsquarebrc *\).*/\1/
echo ... sed s/MATCH1/&\n/;s/.*\n//;s/MATCH2/\n&/;s/\n.*//
echo ... sudo debconf-set-selections
echo .....
echo ..... awk -F -: {total+=$NF}END{print "sumTotal=" total}
echo ...... DEF..... grep --color DEF
echo ...... perl -n -e @x=/JOIN (\w+)/g;print " leftsquarebrc SQL_JOINS=\""."@x"."\" rightsquarebrc ";
echo ./*
echo ./Delivery Note.doc 1 awk { command="sum -r \""$1" "$2"\""; print command} bash
echo .help sqlite3 more
echo .nh
echo .quit sqlite3.exe
echo /$line/,/\/ rightanglebrc /{printf "%s ",$0}/\/ rightanglebrc /{print ""}
echo /* abc
echo /backups/world_$(date | sed 's/ /_/g') date sed s/ /_/g
echo /bin/bash /path/to/script.sh at 11:10
echo /bin/meteo at 09:32 today
echo /common/common/img/pictos/klArrowRight.gif /common/common/img/pictos/klArrowRight.gif 03/Dec/2012:00:00:00 127.0.0.1 03/Dec/2012:00:00:00 us 404 awk {gsub(/\/.*\//,"",$1); print}
echo /home/XXX/*
echo /home/XXX/fileA /home/XXX/fileB
echo /home/edwprod/abortive_visit/bin/abortive_proc_call.ksh sed s/\(.*\)\/.*/\1/
echo /path/to/my/script at now + 5 min
echo /sdd/ee/publ/xmlfile_555.xml sed -n s/^.*_\( leftsquarebrc 0-9 rightsquarebrc *\)\.xml/\1/p
echo /some/long/path/we/need/to/shorten awk -F / { for(i=1; i leftanglebrc =6; i++) {print $i} } tr \n / sed s/.$//
echo /some/long/path/we/need/to/shorten cut -d / -f 1-6
echo /user/dj/a/mydir sed s:/:\\\/:g
echo /usr/bin/php command at now
echo /usr/sbin/ocs-onthefly -s $src_ip -t $dest_disk
echo /x/y/z/x awk { c=$0; gsub("/", "_", c) ; system( "echo " $0 " " c )}
echo /x/y/z/x awk { gsub("/", "_") ; print $0 }
echo /x/y/z/x awk { gsub("/", "_") ; system( "echo "  $0) }
echo 0
echo 0 Files on server $machine in $dir3
echo 0 reboot
echo 0.1 + 0.1 bc awk {printf "%f", $0}
echo 0.1 0.1 awk {printf "%f", $1 + $2}
echo 0/2 bc l
echo 000,010,069 awk -F , { printf "%02X,%02X,%02X\n", $1, $2, $3 }
echo 0000-00-00-title.ext sed -E -n s/ leftsquarebrc 0-9 rightsquarebrc {4}- leftsquarebrc 0-9 rightsquarebrc {2}- leftsquarebrc 0-9 rightsquarebrc {2}-(.+)\.ext/\1/p
echo 00:20:40.25 awk -F -: { print ($1 * 3600) + ($2 * 60) + $3 }
echo 020
echo 03.26.12 awk {split($0,a,/\\\./); print a leftsquarebrc 3 rightsquarebrc  a leftsquarebrc 2 rightsquarebrc  a leftsquarebrc 1 rightsquarebrc }
echo 033 rightsquarebrc ;Hello World007
echo 09/May/2012:05:14:58 +0100 sed s/\: leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  \+0100//
echo 1
echo 1 0
echo 1 2 3 4 5
echo 1 2 3 4 5 6 7 8 sed -e s/ /%20/
echo 1 2 3 4 gawk BEGIN { OFS=" :-( "}; {$1=$1; print $0}
echo 1 2 3 5 7 9 sed s/ /\n/g
echo 1 2 3 awk { print $1 }
echo 1 2 3 awk { print }
echo 1 2 3 awk {print $5}
echo 1 2 3 tr   \n sort tee  rightanglebrc ( **code** ) **code** uniq
echo 1 2 3 xargs myapp
echo 1 ^
echo 1 command
echo 1 echo 2 tee file
echo 1 echo2 tee file
echo 1 hour ago sed s/ leftsquarebrc 0-9 rightsquarebrc \{,2\}  leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc \{4\} ago//g
echo 1 read L echo
echo 1 sleep 1 echo 2
echo 1,2,3 rev cut -d -, -f 1
echo 1,2,3 tr -c -d , wc -c
echo 1,2,3,4 awk -F -, -v OFS=, {$'$index'="NEW"; print }
echo 1,2,3,4,5,6,7 awk -F -, {a=$5; $5=",,,,,"a; OFS=","; print}
echo 1,23,56,we,89,2009-12-06 sed -e s/,/,,/5;s/,/,,/4
echo 1,3,"3,5",4,"5,5" sed -r s|(" leftsquarebrc ^" rightsquarebrc *),( leftsquarebrc ^" rightsquarebrc *")|\1\x1\2|g;s|,|;|g;s|\x1|,|g
echo 1.8e-308 gawk ($1+0) leftanglebrc 0.05
echo 1/2 bc l
echo 10.11.12.13 perl -M -R -e -g -e -x -p -: -: -C -o -m -m -o -n -= -n -e -t -n -E $_=~/^$RE{net}{IPv4}{-keep}$/ and say $1
echo 10.11.1200.13 perl -M -R -e -g -e -x -p -: -: -C -o -m -m -o -n -= -n -e -t -n -E $_=~/^$RE{net}{IPv4}{-keep}$/ and say $1
echo 10.2 rightanglebrc 10.1 bc
echo 100 * $size_target / $filesystem_size bc
echo 100 2i p dc
echo 1000 java myProgram
echo 1023m grep -w ^ leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc * leftsquarebrc km rightsquarebrc $
echo 11*15 myprogram
echo 112233 sed s/\(..\)\(..\)\(..\)/\3\2\1/
echo 11:46:24.851239 IP (tos 0x0, ttl 128, id 11289, offset 0, flags  leftsquarebrc none rightsquarebrc , proto UDP (17), length 229) grep -o proto  leftsquarebrc ^, rightsquarebrc \+
echo 12 BBQ ,45 rofl, 89 lol grep -P \d+ (?=rofl) -o
echo 12 cats sed s/ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc */Number/g
echo 121
echo 123
echo 123 rev
echo 123 sed -e w tempfile -e s/ leftsquarebrc 0-9 rightsquarebrc /\./g
echo 123 sed -r s/ leftsquarebrc 0-9 rightsquarebrc {2}/x/
echo 1234 5678 fold -w 1
echo 123420110404123520110404123620110404 sed -r s/(.{4}).{8}/\1/g
echo 123420110404123520110404123620110404 sed s/\(....\)......../\1/g
echo 12345-BA-PreSchool-LT.local cut -d -- -f -2 -, -3 sed -e s/-/ /g
echo 1234567890 cut -b 1-6
echo 1234567890 sed s/ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)/\1-\2/
echo 123adv123 gsed -r s/( leftsquarebrc a-z rightsquarebrc +)/#/g
echo 123adv123 sed -E s/( leftsquarebrc a-z rightsquarebrc +)/#/g
echo 123adv123 sed s/\( leftsquarebrc a-z rightsquarebrc  leftsquarebrc a-z rightsquarebrc *\)/#/g
echo 127.0.0.1
echo 12|23|11 awk {split($0,a,"|"); print a leftsquarebrc 3 rightsquarebrc ,a leftsquarebrc 2 rightsquarebrc ,a leftsquarebrc 1 rightsquarebrc }
echo 1318-*.pdf
echo 15 one two
echo 16i DEADBEEF 10o p 2o p dc
echo 192.168.38.{217,222} 192.168.40.215 192.168.41.{219..222} tr   ,
echo 192.241.xx.xx  venus.example.com venus
echo 1969 years 12 months 25 days 19 hours 38 minutes 24 seconds since last release sed -r s/.* ( leftsquarebrc 0-9 rightsquarebrc +) months.*/\1/
echo 1:  awk -F : /1/ {print $1}
echo 1;2;3;4;5 tr ; \n read line echo $line
echo 2 * 3  rightanglebrc  5 is a valid inequality
echo 20000024ff3dbf50 sed s/../&:/g;s/.$//
echo 2012-05-25 00:16:51,610 awk -v var=$TIME {if ($0  leftanglebrc  var) print $0}
echo 2014-05-01 01:00 parallel --dry-run foo {}
echo 202.168.56.32 awk -F -. {print $3"."$2"."$1}
echo 2033010 tr 0123 ACGT
echo 24/06/2013 awk  $0 ~ / leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {2}\/ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {2}\/ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {4}/ { print "MATCHES!"}
echo 24/06/2013 awk  $0 ~ /^ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {2}\/ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {2}\/ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {4}$/ { print "MATCHES!"}
echo 2^100 bc
echo 2^1024 bc
echo 3*a(3)^2+6*a(1)^2*(5*a(2)^2-2*a(4))+6*a(2)*a(4)+6*a(1)*(-4*a(2)*a(3)+a(5)) perl t.pl
echo 3.11.0.17.16 awk -F -. {printf "%s.%s.%s-%s-generic\n",$1,$2,$3,$4}
echo 321 sed -e s/\( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \)/.\1/g -e s/^\.//
echo 344F9DA1EA1859437077CCA38923C67797BDB8F6 sed -E s/.{8}/& /g
echo 42 sleep 3
echo 4BF8E rev tr 0123456789ABCDEF 084C2A6E195D3B7F
echo 50
echo 5678:robert dylan :d.g.m. :marketing :04/19/43 85000 awk -F -: {print $2, $4}
echo 5a perl -n -e s/( leftsquarebrc 0-9a-f rightsquarebrc {2})/print chr hex $1/gie
echo 66.9090_89.4450_168.0250_ABC3/ cut -d -_ -f 4 cut -d -/ -f 1
echo 6^6 bc
echo 71343531834366140263241767594070376448 awk {printf "%E",$1}
echo 720/304 * 360 bc -l
echo 8.8- sed -r s/( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +(\. leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +)?)-/-\1/
echo 9191234567 sed s/^\( leftsquarebrc 0-9 rightsquarebrc \{3\}\)\( leftsquarebrc 0-9 rightsquarebrc \{7\}\)$/\1 \2/
echo 99% grep -o  leftsquarebrc 0-9 rightsquarebrc *
echo =?ISO-8859-1?Q?Test:_Jaguar_XKR-S:_Unter_dem_Blech_lauert_d?= sh convert_subject.sh
echo A,B,C sed s/,/','/g
echo AAA_BBBB__CCC__GGGG___fffffffffffffff_hhhh sed -r s/^ leftsquarebrc ^_ rightsquarebrc +_+((_* leftsquarebrc ^_ rightsquarebrc +){3}).*/\1/
echo ABC123456AA sed -e s,(${X}).*,1ZZP,
echo ABCD EFGH IJKL MNOP awk {print toupper(substr($0,1,1)) tolower(substr($0,2)) }
echo ABCDEFGHIJ awk -v num=4 {for (i=1; i leftanglebrc length($0)-num;i++) print substr($0,i,num)}
echo ABCDEFGHIJ sed -n :a;/^...$/{p;b};s/.../&\n/;P;s/.//;s/\n//;ba
echo ABCDEFGHIJ sed -n :a;/^.{$num}$/{p;b};s/.{$num}/&n/;P;s/.//;s/n//;ba
echo All's Well That Ends Well grep -o \(\bThat\b\|\bWell\b\)
echo An error has occured: $1
echo Anirudh   Tomer sed -r s/ +/ /g
echo Answer: $lrsq
echo Append string sudo tee -a protected_file
echo Apple, Orange tr -s ,  \n
echo Argument $i: $(echo "${var leftsquarebrc i rightsquarebrc }" | sed -e 's/^ *//g' -e 's/ *$//g') echo ${var leftsquarebrc i rightsquarebrc } sed -e s/^ *//g -e s/ *$//g
echo Avarage word size is: ${avg_word_size}.${_100x_avg_word_size: -2:2}
echo Avg Time Taken:  $timeAvg
echo Bienvenido
echo Bruce-Wayne Batman 0.0.0.0 awk {print $1}
echo C1_1_B_(1)IMG1511.jpg tr _ \n
echo C1_1_B_(1)IMG1511.jpg tr _ \n sed -e s/)/)\n/
echo C:UsersTedDocumentsUnixScripts xargs echo
echo C:\Users\Ted\Documents\Unix\Scripts xargs echo
echo C:\foo\bar.xml sed s/\\/\//g
echo CONSTRAINT `FK5E61277CBAE1E8F6` FOREIGN KEY (`action_item_group_id`) REFERENCES `action_item_group` (`id`), sed -r s/CONSTRAINT .* FOREIGN KEY .* REFERENCES .* (.*)/& ON UPDATE CASCADE/
echo Ciao, `/usr/bin/whoami` /usr/bin/whoami
echo Command not found: $* return 127
echo Computer Peripherals Internet Technology C/C++ sed -e s@${refcat}@${cat1}@g
echo Count= leftsquarebrc # rightsquarebrc  sed s/.*\ leftsquarebrc \(.*\)\ rightsquarebrc .*/\1/
echo Current_IP=$(host $HOSTNAME | cut -f4 -d" ")
echo Current_IP=$(host $HOSTNAME | cut -f4 -d' ') host $HOSTNAME cut -f 4 -d - 
echo DAAAAABCBBBCCABCABC sed -e s/\(ABC\)*$//g
echo DIR 1
echo DISPLAY=$DISPLAY zenity --info --text="time is up" at now + 30 minutes
echo Date;Visit;Login;Euro;Rate cat file.txt sed s/;/ leftanglebrc tab rightanglebrc /g
echo Dave,ws245f,09/12/1982 awk -F -/ -| -, {b=mktime($5" "$4" "$3" 00 00 00 00");a=(systime()-b)/(365*24*60*60);a+=a leftanglebrc 0?-0.5:0.5;a=int(a);print $0","a}
echo Decimal: 999/581 sed -e s/ leftsquarebrc ^0-9 rightsquarebrc *//
echo Decimal: 999/581 sed -e s/Decimal: //
echo Don''t
echo ERROR: $1 is a subdirectory of $(readlink -e "$2") readlink -e $2
echo Echoing: $1
echo Exit Code is %errorlevel%
echo F xcopy ....Common%%a Common%%a /i /d /c /v /s /y /f
echo F$i
echo FLUSH PRIVILEGES; tee -a $MYSQL_TMPFILE
echo FTP dir has modified mail -s dir notification sni912@######.com
echo Failed: foo: $(printf "'%s' " "${mycmd leftsquarebrc @ rightsquarebrc }") printf '%s'  ${mycmd leftsquarebrc @ rightsquarebrc }
echo Filename: $file zcat $file head -2
echo Folder doesn't exist on $machine
echo Folder is NOT locked echo folder is LOCKED
echo Foo Bar tee one.txt tee -a two.txt
echo FooBar tee /dev/stderr
echo FoonBarnBaz ruby -p -e $_.downcase!
echo GIT_WORK_TREE=/path/htdocs git checkout -f
echo GIT_WORK_TREE=/var/www/${1} git checkout -f
echo H2*/
echo HTML example leftanglebrc br rightanglebrc Print new line leftanglebrc br rightanglebrc please leftanglebrc br rightanglebrc not work sed -e s/ leftanglebrc br rightanglebrc /\`echo -e '\n\r'`/g echo -e \n\r
echo HTML example leftanglebrc br rightanglebrc Print new line leftanglebrc br rightanglebrc please leftanglebrc br rightanglebrc not work sed -e s/ leftanglebrc br rightanglebrc /\n/g
echo He likes cats, really? fold -w 1 sort -u
echo Hel'lo sed s/'/\\'/g
echo Hello
echo Hello Holly. python -c import sys; print  leftsquarebrc line for line in sys.stdin rightsquarebrc 
echo Hello Holly. python -c import sys; print ' '.join( leftsquarebrc line for line in sys.stdin rightsquarebrc )
echo Hello I'm a background task
echo Hello brave new world awk {print $1}
echo Hello brave new world awk {print $1}
echo Hello grep ^ leftsquarebrc A-Z rightsquarebrc 
echo Hello grep ^ leftsquarebrc A-Z rightsquarebrc 
echo Hello im the script, here your args $@
echo Hello log tee /dev/tty2 /var/log/my_logs
echo Hello world cut -d -  -f 1
echo Hello!
echo Hello, World!
echo Hello, world!
echo Hello, world! gsed -r /^\w{3}lo, wor.*$/d
echo Hello, world! gsed /^\w\{3\}lo, wor.*$/d
echo Hello?
echo Hi nc localhost 30000
echo INSERT INTO InsertTableName (Column001, Column002) VALUES('Value001', 'Value002'); mysql -u InsertUserName -p -I -n -s -e -r -t -P -a -s -s -w -o -r -d InsertDatabaseName
echo INSERT INTO mylittletable VALUES ($THENUMBER,'$THEDATE'); mysql --host 192.168.0.0 --user garfunkle --password spatulaface mylovelydb echo Warning!
echo INSERT INTO tblename (fieldname) VALUES (LOAD_FILE('filename')); mysql -u root -p password dbname
echo Ignore this email mailx -s Test Data DL-host-PD-WAS-TT_Emp@corp.host.com
echo Install ID:          XKCD (8426200,8179503) awk {print $3}
echo Install ID:          XKCD (8426200,8179503) sed -n s/^.*ID: *\( leftsquarebrc ^  rightsquarebrc *\) .*$/\1/p
echo Is anybody listening?
echo JAVA_OPTS="$JAVA_OPTS -Dorg.apache.catalina.jsessionid=some_value" export DORG_APACHE_CATALINA_JSESSIONID=FOO/BAR/FOOBAR sed s/^(JAVA_OPTS="$JAVA_OPTS leftsquarebrc  t rightsquarebrc *-Dorg.apache.catalina.jsessionid*=s*).*$/1${DORG_APACHE_CATALINA_JSESSIONID////\/}"/
echo MAGIC: $a
echo MARKER
echo MAVEN_OPTS=-XX:MaxPermSize=128m -Xms128m -Xmx768m sed s/=/="/; s/$/"/
echo Manufacturer: $(echo ${family:-$name}|cut -d' ' -f1) echo ${family:-$name} cut -d -  -f 1
echo Mar 8
echo Mary had a "little" lamb awk { gsub(/"/, "&&") } 1
echo Mary had a "little" lamb sed s/"/&&/g
echo May 5 2014 awk {print $2}
echo May 5 2014 cut -d -  -f 2
echo Message
echo Mismatch Percentage: $(echo "100*$TEST2/$TEST1" | bc -l) echo 100*$TEST2/$TEST1 bc -l
echo My String ruby -e puts gets.downcase
echo My email is abc@example.com sed -r s/ leftsquarebrc a-zA-Z0-9 rightsquarebrc +@ leftsquarebrc a-zA-Z0-9 rightsquarebrc +\. leftsquarebrc A-Za-z rightsquarebrc {2,4}/ leftsquarebrc emailaddr rightsquarebrc /g
echo My message
echo My title find ... ; mail ...
echo NDK_HOME=/opt/android-ndk-r8 export NDK_HOME
echo NOVAR
echo Name City State sed -E s/( leftsquarebrc A-Za-z rightsquarebrc +)/Example&/g
echo Name: 
echo Nate or nate grep -P (? leftanglebrc !N)a
echo New Line sort -o file -m file
echo New Line sort -o file file
echo PATH
echo PATH $PATH $PATH
echo PATH /bin:/usr/bin $PATH
echo PATH="$PATH:~/bin"
echo PATH=xxx awk -F -= {print ENVIRON leftsquarebrc $1 rightsquarebrc }
echo PHP10000 awk -F PHP { printf "$%.2f\n", $2 * .0245 }
echo PHP10000 awk -F PHP { printf "$%d\n", $2 * .0245 }
echo PHP10000 sed s/PHP\( leftsquarebrc 0-9 rightsquarebrc \+\)/echo "scale=2; \1*.0245\/1" | bc/e
echo PREPENDED STRING cat /tmp/file sed s/test/test2/g
echo PS1="Hello World  rightanglebrc  "
echo Password successfully changed for $USERNAME to $PASSWORD at `date` date
echo Please answer y or n.
echo Please,enter a brief Description  leftsquarebrc ENTER rightsquarebrc :
echo Prepended Line cat origfile mv tmpfile origfile
echo Question?  leftsquarebrc Y/n rightsquarebrc  c
echo Reading $BLOCK_SIZE from $TAPE and writing it to file $FILE.
echo Replace  leftanglebrc newLine rightanglebrc  it by  leftanglebrc newLine rightanglebrc  NEWLINE  leftanglebrc newLine rightanglebrc  in my OSX terminal  leftanglebrc newLine rightanglebrc  and bash script sed s/ leftanglebrc newLine rightanglebrc /\'$'\n/g
echo Result:${FOO}
echo Revision: 53413 cut -d   -f 2
echo Running scheduleSpider.sh at `date`
echo S1,                // name awk -F // { n = gsub(/ /, "", $1); print n }
echo SELECT ${MYSQLTABLE}.created_at, ${MYSQLTABLE}.product_options FROM ${MYSQLTABLE} WHERE ${MYSQLTABLE}.product_id=1 ORDER BY ${MYSQLTABLE}.created_at mysql ${MYSQLOPTS} perl -F -t -l -a -n -e print join ",", map {s/"/""/g; /^ leftsquarebrc \d. rightsquarebrc +$/ ? $_ : qq("$_")} @F 
echo SELECT 'DROP TABLE ' || tablename ...  su postgres -c psql database
echo SELECT * FROM RDB\$DATABASE; isql -u SYSDBA -p -a -s -s mypasswd localhost:mydatabase tail -n 2 head -n 1 wc -l
echo SELECT * FROM sometable /usr/bin/time -f %es psql
echo SELECT A, B, C FROM table_a mysql database -u $user -p -$ -p -a -s -s -w -o -r -d
echo SELECT things FROM some_table mysql some_database grep excitement
echo SGVsbG8gQmFzZTY0Cg== sed -r s/(.+)$/$(decodeBaseSixtyFour \\1)/ decodeBaseSixtyFour \1
echo Script Got '$1'
echo Searching: $ab$ac$bc ./searchgraph $ab $ac $bc inputfile
echo Server = http://repo.archlinux.fr/$arch sudo -s tee -a /etc/pacman.conf
echo Some Text n  grep  \\n *$
echo Some console and log file message tee /dev/fd/3
echo Some console message
echo Some error message
echo Some- String- 12345- Here sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *- leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc */-/g
echo Some- String- 12345- Here sed s/\s*-\s*/-/g
echo Speed : 1624.127424 Kib/s in 9.410000 seconds awk {print $6}
echo Speed : 1624.127424 Kib/s in 9.410000 seconds cut -d -  -f 6
echo Split made `ls -1|wc -l` files. ls -1 wc -l
echo Starting scriptr `date '+%T'` date +%T tee script.log
echo String1 $1
echo Successfully created the directory location
echo Sum: $sum
echo TEST ssh user@host cat  rightanglebrc  tempfile; cat tempfile; rm tempfile
echo THIS-some-string-zzz-55.xml sed s/\.xml$//
echo TITLE=  B=ack=To ian    sed -n -e s/ leftsquarebrc ^= rightsquarebrc *= leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *\(.* leftsquarebrc ^ leftsquarebrc :blank: rightsquarebrc  rightsquarebrc \) leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *$/\1/p od -t -x -1 -t -c
echo TRAC? TRACE1 netcat -q 1 192.168.0.10 5025
echo TRAC? TRACE1 netcat 192.168.0.10 5025
echo Tessting ./our_program grep -o z wc -l
echo Test .... sed s/Test.*/echo " leftanglebrc \0 rightanglebrc " | tr s x/e
echo Test 1 exit echo Test 2
echo Test 1 exit echo Test 2
echo The .... MD5: $(md5sum xxx.jar) md5sum xxx.jar
echo The .... MD5: `md5sum xxx.jar` md5sum xxx.jar
echo The DB Host is $DATABASE_SERVER
echo The computer will be suspended at $(date --date "now $1 minutes") date --date now $1 minutes
echo The quick echo brown fox sed -e N;s/\n/ /
echo The quick echo brown fox tr n  
echo There are $(countPwd) files in the current directory. countPwd
echo There are 5 apples and 7 oranges grep -o -E  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +  leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc +
echo Third token: ${tokens leftsquarebrc 2 rightsquarebrc }
echo This is a file
echo This is a test awk {print $1}
echo This is a test string sed /This/s/.*/This/
echo This is a test string sed s/.*/This/
echo This is a test string sed s/.*\(This\).*/\1/
echo This is command #1 echo The previous command was: !#
echo This is command 1 echo !#:s/;// echo The previous command was: '$var'
echo This is my string
echo This is outputParseFulll
echo This is outputParseFulll
echo This is the body mail -s Subject recipient@example.com
echo This is the file.txt from my folder. sed s/^This is the (.*) from my folder.$/1/
echo This is the message body mutt -a /path/to/file.to.attach -s subject of message -- recipient@domain.com
echo This is the message body mutt -a /path/to/file.to.attach -s subject of message -- recipient@domain.com
echo This morning, I ate 3^12 apples. sed s/ leftsquarebrc 0-9 rightsquarebrc +^ leftsquarebrc 0-9 rightsquarebrc +/$&$/
echo This will show on the screen
echo This++++this+++is+not++done awk {gsub(/\++/," ");}1
echo This___________is_a____string sed s/_\{2,\}/;/g
echo Title:Author:Price:Qty Avail.:Qty Sold cat your_file.txt column -t -s :
echo Today is %date%
echo True gawk 1.8e-308 leftanglebrc 0.05
echo True gawk 1.8e-322 leftanglebrc 1.9e-322
echo True gawk 1.8e-323 leftanglebrc 1.9e-323
echo US/Central - 10:26 PM (CST) grep -o -P -s -+ -K -d -{ -2 -} -: -d -{ -2 -}
echo USER_PROMPT=haloooo
echo Usage: $(basename $0) {start|stop|restart|status} basename $0
echo Usage: $0 usernames report errors
echo VERSION=`echo "1.0 + 0.1" | bc` echo 1.0 + 0.1 bc
echo We're about to find out what we like.
echo Welcome $(whoami)! whoami
echo X author: 00000000000; X sed ...
echo XML-Xerces-2.7.0-0.tar.gz sed -e s/^\(\( leftsquarebrc ^- rightsquarebrc \|- leftsquarebrc ^0-9 rightsquarebrc \)*\).*/\1/g
echo XXX
echo XXX + YYY bc -l
echo XYZZY
echo Y myapp
echo Z grep  leftsquarebrc 0-z rightsquarebrc 
echo \ sed s/\/replace/
echo \"
echo \\servername\folder\folder\folder sed y#\\#/#
echo \\servername\folder\folder\folder tr \\ /
echo \i auto_qa_db_sync.sql $DB_PATH -U $POSTGRESS_USER $Auto_rpt_production$TARGET_DB -p $TARGET_PORT
echo ^@shade{0.85} cat $1 ...
echo ^D openssl s_client -c -o -n -n -e -c -t ${line}:443 openssl x509 -n -o -o -u -t -h -a -s -h grep -E ^ leftsquarebrc  leftsquarebrc :xdigit: rightsquarebrc  rightsquarebrc {8}
echo `$COMMAND` $COMMAND
echo `$JAVA_BIN/java ${JVM_OPTION:-} -classpath $CP $MAIN_CLASS` $JAVA_BIN/java ${JVM_OPTION:-} -c -l -a -s -s -p -a -t -h $CP $MAIN_CLASS
echo `$avrohdfs concat $DIRS -` $avrohdfs concat $DIRS
echo `cat file*.txt` cat file*.txt awk BEGIN {a=0;b=0;} {for (i=1;i leftanglebrc =NF;i++) { if ( i%2 == 0 ) { b+=$i } else { a+=$i } } } END { print a, b }
echo `cat file` cat file
echo `date +"%d%m%Y%H%M%S"` $LINENO The script is running..  date +%d%m%Y%H%M%S
echo `date` User `whoami` started the script.$'r' date whoami
echo `date` date
echo `date`: Myscript ends date
echo `date`: Myscript exited because ... date
echo `date`: Myscript starts date
echo `df -h | head -3` df -h head -3
echo `df -hlg | awk -F/ '/disk*/ {print $5}'` df -h -l -g awk -F -/ /disk*/ {print $5}
echo `diff -biw out.txt out2.txt | sed -n 's/^ rightanglebrc  //p'` diff -b -i -w out.txt out2.txt sed -n s/^ rightanglebrc  //p
echo `dirname $0` dirname $0
echo `echo "Hello, World!"` echo Hello, World!
echo `echo \\z` echo \z
echo `eval $COMMAND` eval $COMMAND
echo `eval echo \$$n` eval echo $$n
echo `expr "$stringZ" : 'abc leftsquarebrc A-Z rightsquarebrc *.2'` expr $stringZ : abc leftsquarebrc A-Z rightsquarebrc *.2
echo `find ./ -type f -name \$1` find ./ -type f -name $1
echo `find ./ -type f -name \$1` find ./ -type f -name $1
echo `foo $dates` foo $dates
echo `git add -A && git commit -m "Added license headers"` git add -A git commit -m Added license headers
echo `grep "ENVOI_MAIL=" "${FILE_PROPERTIES}" | cut -d "=" -f "2"` grep ENVOI_MAIL= ${FILE_PROPERTIES} cut -d = -f 2
echo `ifconfig eth0 2 rightanglebrc /dev/null|awk '/inet addr:/ {print $2}'|sed 's/addr://'` ifconfig eth0 awk /inet addr:/ {print $2} sed s/addr://
echo `ls My_FOLDER/ | sort -R | head -n 100` file_to_output ls My_FOLDER/ sort -R head -n 100
echo `ls | vipe` ls vipe
echo `ls` `cal` ls cal
echo `ls` ls grep .txt
echo `rm $f` rm $f
echo `seq 0 10` `seq 5 15` seq 0 10 seq 5 15 tr   n sort -n
echo `uptime|cut -d, -f2` uptime cut -d -, -f 2
echo a
echo a
echo a b c d
echo a b c d
echo a b c d e col 5 3 2
echo a b read -d -  char echo $char
echo a cat file1
echo a echo b sed -e 1!G;h;$p;$s/b\na/X
echo a echo b sed s/$/1/ sed s/$/2/
echo a echo b xargs echo wc -l
echo a echo b xargs wc -l
echo a echo ba echo b a sed -n /\ leftanglebrc a/ p
echo a leftsquarebrc  'xxx'  rightsquarebrc  sed s/a leftsquarebrc  '(.*)'  rightsquarebrc /a leftsquarebrc  1  rightsquarebrc /
echo a sed s|a|${tmp//\\/\\\\}|g
echo a tr a b tr b c
echo a xargs ls -l
echo a*
echo a, b, Aaa, bc egrep -o  leftsquarebrc ^,  rightsquarebrc  leftsquarebrc ^, rightsquarebrc * sort -f xargs -I Q echo Q, xargs
echo a, b, Aaa, bc egrep -o  leftsquarebrc ^,  rightsquarebrc + sort -f xargs sed -e s/ /, /g
echo a,b,c python myscript.py myparm
echo a.b.c.d sed -E -e s/(.*) leftsquarebrc . rightsquarebrc (.*) leftsquarebrc . rightsquarebrc (.*) leftsquarebrc . rightsquarebrc (.*)/\1.\2.254.\4/
echo a.com b.com c.com sed s/^/\*./g;s/ / *./g
echo a:b,c:d awk -F - leftsquarebrc  -: -, - rightsquarebrc  BEGIN {OFS=FS} {$2=42; print}
echo aa bb cc dd awk {print $1:$3:$4}
echo aa$@bb will print aa$@bb
echo aa$@bb will print aabb
echo aaa -Dprop=var Class arg perl -p -e s|(.*-Dprop=(.*))?.*Class\s*(.*)|$3 $2|
echo aaa$i sleep 2 sed s/./X/
echo aaaabbbbaaaacccc sed :l s/^\(x*\)a/\1x/;tl
echo aabb sed s/a*((ab)*)b/1/g
echo ab'"'"'c'"'"'d
echo abc awk { if ( match($0, /a(b)c/, a)  rightanglebrc  0 ) { print a leftsquarebrc 1 rightsquarebrc  } }
echo abc awk {print |"tee files"}
echo abc echo bcd grep  leftsquarebrc ab rightsquarebrc 
echo abc grep a grep b
echo abc gzip xz
echo abc-1234a : cut -d -: -f 1
echo abc-1234a : egrep -o ^ leftsquarebrc ^: rightsquarebrc +
echo abc-1234a : grep : egrep -o ^ leftsquarebrc ^: rightsquarebrc +
echo abc-1234a : sed -n -e s/ *:.*//p
echo abc-1234a : sed s/ *:.*//
echo abc-vcu def grep -F -w abc.vcu
echo abc; def; ghi; jkl cut -f -2 -- -d -;
echo abc_def_08032011.txt awk {print substr($0,13,4) substr($0,9,4)}
echo abc_def_08032011.txt sed s/^........\(....\)\(....\).*$/\2\1/
echo abcd sed -n s| leftsquarebrc ^/ rightsquarebrc */\(.*\)|\1|p
echo abcdefg cut -c -3 -- -5
echo abcdefg fold -w 1
echo abcdefg grep -o .
echo about to fail /bin/false
echo about to fail /bin/false echo foo
echo ace
echo action `eval echo '$'$1` eval echo $$1
echo additional line
echo adf99fgl12,345qsdfm34 grep -E -o  leftsquarebrc 0-9 rightsquarebrc +, leftsquarebrc 0-9 rightsquarebrc *
echo alias '$*'
echo alias foo='\''command with * and ? and spaces'\
echo alias foo=bar
echo alias hello='echo hello'
echo alias youralias='yourcmd'
echo apples (orange) (plum) sed -r -e s/^ leftsquarebrc ^( rightsquarebrc +\(//
echo apt-get update && apt-get -y install git-core
echo asd sed s:.:&/:g xargs -n 1 -I % mkdir -p %
echo audio
echo awk -F, '$12 != 0' ${TargetIDs}_output.csv  rightanglebrc  rightanglebrc  ${TargetIDs}_output2.csv
echo awk -v balance=${balance} BEGIN { printf "\nCurrent balance: %.2f\n", balance }
echo awk {print $2, a} a=$a
echo awk {sum=0; for (i=3; i leftanglebrc =1000; i++){if ((i % 3 == 0) || (i % 5 == 0))sum+=i}print sum}
echo a|b|c|d awk -F -| {for(i=1; i leftanglebrc =NF; i++) print i, $i}
echo a|||d|e sed :repeat; s/||/|\N|/g; t repeat
echo a~b sed s/~/==/g
echo b.sh at -t `date -v+60S "+%Y%m%d%H%M%S"` date -v -+ -6 -0 -S +%Y%m%d%H%M%S
echo base64 string base64 od -c
echo bash myfile.txt at midnight
echo bcdujcd.2 awk -F - leftsquarebrc  -^ -0 -- -9 - rightsquarebrc  -* $0=$2
echo bin/hadoop dfs -g -e -t urls-input/MR6/*url* .
echo bla 18934750 + wwv_flow_id.offset bla sed -E s/ \+ wwv_flow_id.offset/blabla/
echo bla 18934750 + wwv_flow_id.offset bla sed -E s/ \+ wwv_flow_id.offset/blabla/
echo bla 18934750 + wwv_flow_id.offset bla sed -E s/( leftsquarebrc 0-9 rightsquarebrc +) /\1/
echo bla 18934750 + wwv_flow_id.offset bla sed -E s/( leftsquarebrc 0-9 rightsquarebrc +) /\1/
echo bla bla word word1 = strin1 string2 awk -F -= {print $2} awk {print $2}
echo blabla a13724bla-bla244 35% sed s/.* leftsquarebrc  \t rightsquarebrc  leftsquarebrc  \t rightsquarebrc *\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\)%.*/\1/
echo blabla {$email} blieblie {$name} bloebloe ${alreadydone|escape:htmlall} sed s/{\(\$ leftsquarebrc ^}\| rightsquarebrc *\)}/{\1|escape:htmlall}/gi
echo blah telnet -y -r -D -u -m -b
echo c:\path1\abc\dir 2\file.txt sed s/\\abc//
echo cat  //title/text() xmllint --shell rss.xml
echo cat  //title/text() xmllint --shell rss.xml egrep ^\w
echo cba grep -o . sort tr -d n
echo cd /;bash chmod +x /tmp/new.command open /tmp/new.command
echo cd /path/to/dir cat localscript.sh ssh -T remotehost
echo changing directory '$dirpath' `cd $dirpath` cd $dirpath
echo cmd1; cmd2; cmd3 su install
echo col1 col2 awk {for (i=1;i leftanglebrc =NF;i++) print $i | "gzip  rightanglebrc  out" i ".gz"}
echo colorscheme slate
echo column3 = $(awk '{print $3}' test.txt |sort -nu |  paste -s -d, ) awk {print $3} test.txt sort -n -u paste -s -d -,
echo column3 = $(tr -d -  leftanglebrc  test.txt| awk '{print $3}'  |sort -nu |  paste -s -d, ) tr -d awk {print $3} sort -n -u paste -s -d -,
echo command
echo command ... env PATH=$PATH sudo su otheruser -c at now
echo command leftsquarebrc runcmd rightsquarebrc =sudo service $ARG1$ restart
echo commands cat gdb X
echo commands gdb X
echo commands script
echo connect localhost:35873ngetconfigsnquit flume shell -q
echo convert ${f leftsquarebrc @ rightsquarebrc } ${PWD##*/}.pdf
echo cp $HOME/tools/{$FILES_TOOLS} $TOP_DIR/removeme
echo cp -n -v -- $fn_orig $fn
echo cp -n -v -- ff/$fn_orig ff/$fn
echo create database databasename mysql -u username -p
echo data awk -v -O -R -S -= -, { print $2 } sed s/,$/\n/
echo data mail -s $subj mail@mail
echo ddayaynightday sed -e :loop -e s/day//g -e t loop
echo deb blah # blah sudo tee --append /etc/apt/sources.list
echo deb blah # blah sudo tee --append /etc/apt/sources.list
echo dede0a01 tr  leftsquarebrc a-z rightsquarebrc   leftsquarebrc A-Z rightsquarebrc  sed s,\(..\)\(..\)\(..\)\(..\),ibase=16;\4\3\2\1,g bc
echo deploymenet xxxx.xml ./flow.sh connect localhost login user password
echo dev/temp/text/$(grep 'Some pattern' location/*filename* | cut -d ' ' -f2 | cut -d '}' -f2 | grep -v '^$' | head -1) grep Some pattern location/*filename* cut -d   -f 2 cut -d } -f 2 grep -v ^$ head -1 xarg grep some pattern
echo diff(A45(i,j),alpha leftsquarebrc 1 rightsquarebrc ) sed s/diff(A45(i,j),alpha\ leftsquarebrc 1\ rightsquarebrc )/dzA45(i,j)/
echo diradirbabcdefaa.txt sed s;^\\ leftsquarebrc ^\\ rightsquarebrc *\\ leftsquarebrc ^\\ rightsquarebrc *;http:\\\\something;
echo dis clusqmgr(*) suspend runmqsc QMGR1 egrep CLUSQMGR|SUSPEND paste awk {print $1,$4}
echo dn: '$RESULT'
echo dog cat fish +hamster awk NF--
echo dog dog dos sed -e s:dog:log:g
echo dot1dTpFdbPort leftsquarebrc 00:02:6f:d9:16:ca rightsquarebrc  12 sed -e s/^.*\ leftsquarebrc //g -e s/ leftsquarebrc  rightsquarebrc  leftsquarebrc \: rightsquarebrc //g
echo easy gpg --passphrase-fd 0 -d secrets.txt.gpg
echo easyFirst.txt java -c -p . First
echo echo $f
echo echo $x
echo echo $x
echo echo ${declaration#*-a leftsquarebrc b-z rightsquarebrc * }
echo echo This is command #1
echo echo a$t$t bash -i head -3 tail -1
echo echo foo /bin/bash
echo echo hello  rightanglebrc  /var/tmp/hello.out at now + 1 minutes
echo echo hello at now + 1 minutes
echo echo hello chmod +x sayhi.command open sayhi.command
echo ee tee /dev/tty foo
echo ereg ($rat, $dog, $cat) sed s/ereg(.*)(( leftsquarebrc ^, rightsquarebrc *),/preg_match1('#'.2.'#',/g
echo error tee -a log
echo eval  if  leftsquarebrc  -r  leftanglebrc INCL_FILE rightanglebrc   rightsquarebrc  ; then source  leftanglebrc INCL_FILE rightanglebrc  ; else logger -t  leftanglebrc SCRIPT_NAME rightanglebrc  -p crit "unable to source  leftanglebrc INCL_FILE rightanglebrc " ; exit 1 ; fi 
echo execfile("myFile.py") python manage.py shell
echo exit telnet $1 $2 grep Connected
echo export LANG=en_US.UTF-8
echo export PRIMOSBASE=/directory/for/primosfiles
echo export PYTHONPATH=/usr/local/lib/python2.7/site-packages
echo export ROS_PACKAGE_PATH=/home/forklift/forklift-workspace:$ROS_PACKAGE_PATH
echo face_date:=TO_DATE($(echo $str | cut -d '=' -f2)),'YYYY/MM/DD'); echo $str cut -d = -f 2
echo fail
echo ff awk ${print Students name is ' $1 ' }
echo fffff awk {gsub('f', "b")}1
echo fffff awk {gsub(//, "b")}1
echo ffmpeg -version
echo file    input.txt sed s/  */ /g
echo file = $i
echo file_1.gz sed -n -r s/.*_(.*)(\.gz)?/\1/p
echo file_1.gz sed -r s/(.*_(.*)\.gz)|(.*_(.*))/\2\4/
echo first bit perl myScriptThatOutputsSecondBit.pl echo third bit
echo first line cat file echo last line some_command
echo first second third awk BEGIN{RS=" "} {print $1}
echo first second third etc cut -d   -f -2 --
echo first url, second url, third url perl -n -l -e m/second ( leftsquarebrc ^  rightsquarebrc *)/; print $1
echo first url, second url, third url sed s/.*second \( leftsquarebrc ^  rightsquarebrc *\).*/\1/
echo first url, second url, third url sed s/.*second//
echo fish duck     cheese            bacon wc -w
echo flush_all nc localhost 111 tr -d \r
echo folderName/input*.txt xargs -n 1 -P 16 mycmd
echo foo
echo foo
echo foo 'bar' it's 'OK' sed -E s/'( leftsquarebrc a-zA-Z rightsquarebrc *)'/1/g
echo foo + bar + haz awk -F -+ {print $3}
echo foo + bar + haz awk {print $3}
echo foo ./x.awk file1 file2
echo foo awk NR==FNR{print $1;next}{print $1} file
echo foo awk {print $1} file
echo foo bar
echo foo bar 12 34 awk {print $1,$2,$3"/"$4}
echo foo bar baz q45 awk { for (i=1; i leftanglebrc =NF; i++) if ($i ~ "q45") print $i; }
echo foo bar node test.js
echo foo bar read i
echo foo echo bar
echo foo file
echo foo leftsquarebrc bar rightsquarebrc  sed s/\ leftsquarebrc /\\ leftsquarebrc /g echo $FOO
echo foo leftsquarebrc bar rightsquarebrc  sed s/\\ leftsquarebrc /\\\\ leftsquarebrc /g echo $FOO
echo foo read a echo $a
echo foo sed /bar/ s/a/b/
echo foo strace bash -c read -n 100 f
echo foo sudo tee /path/to/file
echo foo tee /dev/stderr
echo foo tee /dev/stderr yourscirpt
echo foo tee f1.txt
echo foo tee f1.txt f2.txt
echo foo wc -c
echo foo x.awk file
echo foo x.awk file1 file2 file2
echo foo$myvariablebar
echo foo${myvariable}bar
echo foo'\''bar
echo foo.BAZ.bar awk BEGIN{IGNORECASE = 1}{gsub(/ leftsquarebrc . rightsquarebrc baz leftsquarebrc . rightsquarebrc /,".")}1
echo fooman@example.com rot13
echo fooman@example.com tr  leftsquarebrc A-Za-z rightsquarebrc   leftsquarebrc N-ZA-Mn-za-m rightsquarebrc 
echo foonbar
echo foonbarnbaznwith spac e snoh:noesnoh:yes ~/simple-complete
echo fooo        bar perl -p -e s/( +)/\033 leftsquarebrc 41m$1\033 leftsquarebrc 00m/g
echo galax_report_for_Sample11_8757.xls cut -d _ -f 4
echo get %name%
echo git@git.gitweb.com:/myModule-repo.git sed s%^.*/\( leftsquarebrc ^/ rightsquarebrc *\)\.git$%\1%g
echo google fold -w 1
echo gra$$ bash yourscript
echo grep a | grep b
echo happy sed -r s/( leftsquarebrc p rightsquarebrc )( leftsquarebrc p rightsquarebrc )/*\1*\2*/
echo happy sed s/\( leftsquarebrc p rightsquarebrc \)\( leftsquarebrc p rightsquarebrc \)/*\1*\2*/
echo hell-hello-helloo perl -F -/ -- -/ -a -n -e print join("-",@F leftsquarebrc 0,1 rightsquarebrc );
echo hello
echo hello
echo hello
echo hello ./foo.awk file
echo hello ./valecho
echo hello `sleep 2 &` sleep 2
echo hello awk {print}
echo hello cat
echo hello tee  rightanglebrc (rev) rev
echo hello world
echo hello world
echo hello world
echo hello world awk {split($0, array, " ")} END{print array leftsquarebrc 2 rightsquarebrc }
echo hello world doddy sed -e s/\(.\) \1/\1  \1/g -e s/\(.\) \(.\)/\1\2/g
echo hello world gzip -c -f
echo hello world gzip -c -f
echo hello world mail -s a subject someone@somewhere.com
echo hello world mail -s hello me@example.com
echo hello world mutt -a task*.log -- me@example.com
echo hello world read test echo test=$test
echo hello world sed -n s|hello \(w\).*|\1|p
echo hello world sed -r s/(\w+) (\w+)/\1 (\2)/
echo hello world tee /dev/tty awk {print $2, $1}
echo hello world tee aa bb
echo hello | grep hi
echo hello\\nthere
echo hello\\nthere sed -e s/\\\\n/ /g
echo hey hey, we're the monkees tee /dev/tty gzip --stdout
echo hi
echo hi $(awk NR=="$x" file.txt) $(awk NR-1=="$x" file.txt) bye awk NR==$x file.txt awk NR-1==$x file.txt
echo hi $(awk NR=="$x" file.txt) bye awk NR==$x file.txt
echo hi tty
echo hi write $(whoami) $(tty) whoami tty
echo http://bla.com|http://blabla.com tr | \n
echo http://dx.doi.org/$(pbpaste) pbpaste
echo http://dx.doi.org/rsif.2012.0125
echo http://google.com sed -e s/ leftsquarebrc / rightsquarebrc /\\\//g
echo http://google.com sed -e s|/|\\/|g
echo http://randomurl/suburl/file.mp3 sed s#.*/##
echo http://www.myserver.org/very/very/long/path/mystring perl -p -e s|^http://www.myserver.org/very/very/long/path/(.*)$|\1|
echo http://www.myserver.org/very/very/long/path/mystring sed s|^${variable}(.*)$|1|
echo http://www.myserver.org/very/very/long/path/mystring sed s|^http://www.myserver.org/very/very/long/path/\(.*\)$|\1|
echo http://www.site.org/{1..10} tr   \n
echo https://secure.XYZ.ab.mydomain.com sed -e s+https:// leftsquarebrc ^/ rightsquarebrc *\.mydomain.com+https://secure.future.qa.mydomain.com+
echo i $i
echo i $i
echo i cat input.file commands.list ed -s
echo i m sure he doesn t test test don t. sed s/ \( leftsquarebrc mt rightsquarebrc \) leftsquarebrc  leftsquarebrc : rightanglebrc : rightsquarebrc  rightsquarebrc /\1/g
echo ibase=16 cat hdump tr   ; bc awk {printf("%c",$0)}
echo ibase=16 cat input.txt tr   ; bc awk {printf("%c",$0)}
echo ibase=16; obase=2; A15 bc
echo identified file $1 as $PWD/$1
echo if (1.2 rightanglebrc 1.3) 1 bc
echo import sys echo for r in range(10): print 'rob' python
echo include /home/adrian/app/config/fluentd/td-agent.conf
echo info vlc -q
echo input awk {print $1"string"}
echo input command
echo insecure
echo int temp; // this is temp variable sed s@//\(.*\)$@/*\1 */@
echo internal
echo iscale=16 prog1 prog2 sed s/$/*2/ bc
echo iscale=16 prog1 prog2 sed s/\(.*\)/\U\1*2/g bc
echo java -Xms$ramM
echo java -c -p .;.\common.jar -D -c -o -n -t -e -x -t -= -a -t -e -s -t -1 -D -r -e -s -o -u -r -c -e -p -a -t -h -= -. DW_Install
echo java -c -p .;.\common.jar -D -c -o -n -t -e -x -t -= -a -t -e -s -t -1 -D -r -e -s -o -u -r -c -e -p -a -t -h -= -. DW_Install
echo java packet.Program $$1 $$2 $$3 $$4
echo jn34r 38&Y EY$@H #EY$@HDCmhf453gf=,e73e3bnd2wbyzd fr fr4fn3r f 4df 3 awk -F -= {print "words_before="$1"\nwords_after="$2}
echo ko05414     ko:ITGA4 sed s/\(^ko leftsquarebrc 0-9 rightsquarebrc \{5\}\)\tko:\(.*$\)/\1\2/
echo l=l.split('\n')
echo lastAnn
echo line1nline2nlin3
echo loadings_file  leftanglebrc - "$loadings" ; calls_file  leftanglebrc - "$file"
echo loadings_file  leftanglebrc - '$loadings' ; calls_file  leftanglebrc - '$file'
echo lock_me
echo lock_me
echo log 2 tee -a 2.log 123.log
echo lpr ../{Che,Phy}/{*.pdf,*/*.pdf}
echo ls -1 sftp remote-site:dir
echo ls -1 tr  leftsquarebrc a-z rightsquarebrc   leftsquarebrc A-Z rightsquarebrc 
echo ls -l at 07:00
echo ls -l sftp server wc -l
echo ls ftp host port awk -v cutoff=$(date -d "5 days ago" +%s) {line=$0; "date -d \""$6" " $7" " $8 "\" +%s" |getline; fdate=$1} fdate  leftanglebrc  cutoff {print line}  date -d 5 days ago +%s
echo maps.google.com rev cut -d -. -f 1 rev
echo mike@yahoo.com sed s/ leftsquarebrc a-zA-Z0-9 rightsquarebrc  leftsquarebrc a-zA-Z0-9 rightsquarebrc *@\( leftsquarebrc a-zA-Z0-9 rightsquarebrc  leftsquarebrc a-zA-Z0-9 rightsquarebrc *\. leftsquarebrc a-zA-Z0-9 rightsquarebrc  leftsquarebrc a-zA-Z0-9 rightsquarebrc *\)/customer@\1/g
echo mkdir -p ~/Desktop/CronSuccess at now + 10 hours
echo moo cow boo xargs -n 1 echo
echo mtjoseph:6/MKTCzMS/YU.:10974:10060:Matthew awk -F : {print $5}
echo mv $1 ${G_DEST_DIR}
echo mv $f ${f// leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc |!@#$%^&*() rightsquarebrc }
echo mv $f ${f/_*_/_}
echo mv $i ${i/myfile./newname.}
echo mv $i ${i/somewhere/elsewhere} sh
echo mv ${new}/accepted_hits.bam.bai ${new}/${new}.bam.bai
echo mv '$i' '${i/?.txt}.txt'
echo mv '$i' '${i/?.txt}.txt' sh
echo mv -v $d $p/abc-$b
echo my message
echo myImage.jpg sed s/.jpg//
echo my_command myargs /bin/bash/
echo my_file_name-00-andsome sed s/^.*\(.\)\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\1.*$/\2/
echo myfile*.dat xargs -n 1 mycommand
echo mypassword sudo -S vim /etc/resolv.conf
echo n cp --interactive ~/somefile.txt ~/somefile_already_exists.txt
echo n sed s/\\n/---\\&/g
echo n yes pacman ...
echo nCompiled on:n $(gcc --version | sed 's/^/\t/g' )n gcc --version sed s/^/\t/g
echo new line
echo new_value read var echo $var
echo new_value read var echo $var
echo ntpd Service Respawned mail -s ntpd Service Respawned my_email@gmail.com
echo obase=16 cat file_of_integers bc
echo obase=16; 34 bc
echo obase=2;$1 bc sed -r s/(.)/\1 /g
echo obase=2;$1 bc sed s/./& /g
echo obase=2;$1 bc sed s/\(.\)/\1 /g
echo obase=2;$ip1 bc
echo one echo two
echo one echo two
echo one echo two
echo one two three filer sed -e s/( leftsquarebrc ^  rightsquarebrc {1,} {1,} leftsquarebrc ^  rightsquarebrc {1,}) {1,}(.*)$/1n2/g
echo one:two:three:four:five awk -F -: { st = index($0,":");print $1 "  " substr($0,st+1)}
echo out $i
echo out echo err f cat
echo output from sysuser database -  leftanglebrc a href='sysuser/model01-$tstampm' rightanglebrc  leftanglebrc /a rightanglebrc   leftanglebrc br / rightanglebrc 
echo param 1 echo param 2 echo param 3 echo param 4 read line1 read line2 echo  leftsquarebrc $line1 rightsquarebrc   leftsquarebrc $line2 rightsquarebrc 
echo passphrase gpg --passphrase-fd 0 --batch -d --output decrypted.file file.gpg
echo password command
echo password db_perf_clean.sh
echo password scp me@localhost:test .
echo password sudo -S apache2ctl -l graceful
echo pgrep -f '$PATTERN'
echo pid 2928's current affinity list: 0-3 pid 2928's new affinity list: 0 awk -F  leftsquarebrc  ' rightsquarebrc  { print $2 ": " $7 " -- rightanglebrc  " $14}
echo porc sed -r s:^:$abc:
echo porc sed s!^!'"$abc"'!
echo prefix = ~/.node
echo prefix/${^~$( leftanglebrc globs.txt)}
echo printf $foo
echo ps
echo put $clientfilepathclient-$clientversion-.jar tr \n 
echo put file.txt sftp -b servername
echo python my_script.py data_arg at now + 5 minutes
echo python path/to/somescript $1 at `python -c "import sys; hour,minute=map(int,max(sys.argv leftsquarebrc 1: rightsquarebrc ).split(':')); minute += 1; hour, minute =  leftsquarebrc (hour,minute), ((hour+1)%24,(minute+2)%60) rightsquarebrc  leftsquarebrc minute rightanglebrc =60 rightsquarebrc ; print '%d:%02d'%(hour, minute)" "$minute" "$curr"` python -c import sys; hour,minute=map(int,max(sys.argv leftsquarebrc 1: rightsquarebrc ).split(':')); minute += 1; hour, minute =  leftsquarebrc (hour,minute), ((hour+1)%24,(minute+2)%60) rightsquarebrc  leftsquarebrc minute rightanglebrc =60 rightsquarebrc ; print '%d:%02d'%(hour, minute) $minute $curr
echo q
echo qwertyuiop awk { for(i=1;i leftanglebrc =5;i++) x = x substr($1, 6, 4); print substr($1, 1, 3), x } OFS=
echo qwertyuiop awk { print substr($1, 1, 3), x = (substr($1, 6, 4)), x, x } OFS=
echo random words domain name example.com random words grep -o -P domain name K leftsquarebrc ^  rightsquarebrc +.com
echo read ...
echo rend ./spellcheck corpus_colors
echo repl.look() nc localhost 4242 grep -i tab
echo result:3*3 sed -r s/(result:)(.*)/echo \1$(echo "\2"\|bc)/ge
echo rm -rf !(cookbooks) bash -O extglob
echo rvm_install_on_use_flag=1
echo rvm_use_flag=0
echo sad ads ( this should come awk -F - leftsquarebrc  -( - rightsquarebrc  -  {print $2}
echo scale 1; 90 - 70.333 bc
echo scale 1; 90 - 70.333/1 bc
echo scale=10; 1/3 bc
echo scale=1; $RX/10 bc
echo scale=1; $i * 12.5 bc -l
echo scale=2; $count/$total bc
echo scale=2; 1/3 bc
echo scale=2; res=(100-($S*1.86)); if (res  leftanglebrc  75) {res=75}; if (res  rightanglebrc  89) {res=89}; res bc -l
echo scale=2;$sum/$subjects bc
echo scale=3; $USEDMEM / $MAXMEM * 100 bc
echo scale=3;$elapsed_time/1000000 bc
echo scale=3;$k/($i*$j) bc
echo scale=4; $dividend/$divisor bc echo $animal,$dividend,$divisor,$quotient sort -k -4 -, -4 -n -r -t sed s/, leftsquarebrc ^, rightsquarebrc *$//
echo script.sh usr/local/bin/
echo script2.sh received $# parameters
echo select * from myvalue; psql -t -h host -U user -d db
echo select 1 mysql
echo select some_column from some_table mysql -u -u -s -e -r -n -a -m -e -p -p -a -s -s -w -o -r -d some_db tail -n -+ -2
echo set foreign_key_checks = 0; truncate table saurabh.bus_services; mysqldump --compact --no-create-info -h -1 -9 -2 -. -1 -6 -8 -. -1 -5 -0 -. -8 -0 -u -r -o -o -t -p live pnlbus more
echo set show-all-if-ambiguous on
echo set term canvas mousing size 500, 500; set output 'file_name.html'; plot 'my_file.txt' with lines gnuplot
echo size is: `du -sh` .... du -s -h
echo sleep 10 qsub
echo smth $string
echo smth $string
echo some SQL sudo sqlite3 /some/database.db
echo some command
echo some command
echo some command
echo some command echo some other long command
echo some data
echo some input yourprog
echo some string tr -d -c . leftsquarebrc :alnum: rightsquarebrc 
echo some text
echo some text
echo some text here
echo some text with spaces sed -e s/ //g
echo some text with spaces tr -d  
echo some_text123_ leftsquarebrc 123 rightsquarebrc _some_text perl -n -e print "$1_", "$`", "$'\''\n" if /\ leftsquarebrc (\d+?)\ rightsquarebrc /;
echo some_value
echo someletters_12345_moreleters.ext cut -d -_ -f 2
echo something
echo something
echo something read param
echo something sudo tee /var/lib/varlibfile
echo source /path/to/starcluster/completion/starcluster-completion.sh
echo source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
echo source ~/.bashrc
echo stackOverflow
echo start index for creating version array${START_INDEX} commit ID: ${COMMIT_SHA_ARRAY leftsquarebrc ${ARRAY_INDEX} rightsquarebrc }
echo started at: $(date) date your_prog echo ended at: $(date) date
echo stop java -X -m -x -1 -0 -2 -4 -M -X -m -s -1 -0 -2 -4 -M -j -a -r craftbukkit.jar
echo string sed ...
echo stringBsomething sed -e s/\(stringA\|stringB\|stringC\)something/something else/
echo suhail passwd $username --stdin
echo syntax on
echo taco my-fish-tacos my_fish_tacos sed s/ leftsquarebrc ^ _- rightsquarebrc */\u&/g
echo tar cf  leftanglebrc  leftanglebrc EOF cat your_here_doc echo EOF
echo temp sort -n uniq -c awk { print $2, $1 }
echo test
echo test  leftsquarebrc test1 rightsquarebrc  test grep -P -o (? leftanglebrc = leftsquarebrc ).*?(?= rightsquarebrc )
echo test ^%PATH^%
echo test cat
echo test sed s#{"playlist":\ leftsquarebrc #{"playlist": leftsquarebrc {"comment":" text 1","playlist": leftsquarebrc #
echo test text "here_is_some_test_text_'"$counter"'" "output"
echo test xargs cat
echo test xargs rm
echo test++abc awk -v bar=test leftsquarebrc + rightsquarebrc  leftsquarebrc + rightsquarebrc  BEGIN {FS=bar} {print $2}
echo test.jpg sed s/\.\( leftsquarebrc ^. rightsquarebrc *\)$/.th.\1/
echo test: sed s/:$//g
echo test@test.com egrep ^ leftsquarebrc _a-z0-9- rightsquarebrc +(\. leftsquarebrc _a-z0-9- rightsquarebrc +)*@ leftsquarebrc a-z0-9- rightsquarebrc +(\. leftsquarebrc a-z0-9- rightsquarebrc +)*(\. leftsquarebrc a-z rightsquarebrc {2,6})$
echo tester.html grep -q \.html$ echo MATCH echo NO MATCH
echo testing mail -s $OUT user@example.com
echo testing only awk {print $2}
echo testing only cut -c 2
echo text
echo thePassword passwd theUsername --stdin
echo this echo that echo other
echo this is ${bold}bold${normal} but this isn't
echo this is a header cat
echo this is a sample id='42' string sed -r s/id='.*?'/id='1'/g
echo this is input sed -r s/(\w+)\s+/\1\n/g
echo this/that/theother/stuff awk -F -/ {print $(NF-1) "/" $(NF)}
echo today_is_sunny leftsquarebrc 0F rightsquarebrc  sed -e s;\(\ leftsquarebrc \)\( leftsquarebrc 0-9 rightsquarebrc \)F;_F\1\2;
echo tog-pegasus-2.12.1-16.el7.x86_64 cut -d . -f 3 cut -d -f 1
echo type: 1000 cut -f 2 -d  
echo update contact set email_address='foo@bar.com'; /path/to/isql --your-favorite-switches
echo update-8.1.0-v46.sql sed s/update-8.1.0-v\( leftsquarebrc 0-9 rightsquarebrc *\).sql/\1/p
echo used_memory:1775220696 awk -F -: {print $2}
echo used_memory:1775220696 cut -d -: -f 2
echo user_pref("browser.startup.homepage", "http://stackoverflow.com");
echo usr_web88_2 sed s/_/\\_/g
echo v=1;echo v=$v ssh user@host
echo v=1;echo v=$v ssh user@host
echo value1 value2 read a b curl --data valA=$a&valB=$b http://example.com
echo var=$var, anothervar=$anothervar
echo varchar(255) CHARACTER SET utf8, sed s/ CHARACTER SET  leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc \+/ /g
echo vif         =  leftsquarebrc  'ip=1.2.3.4, mac=00:00:00:00:00:00, bridge=eth1', 'ip=5.6.7.8, mac=11:11:11:11:11:11, bridge=eth1', 'ip=9.1.2.3, mac=22:22:22:22:22:22, bridge=eth1'  rightsquarebrc  tr -s  leftsquarebrc ,' n grep ^ip= cut -d = -f 2
echo void f0 (***) | void f1 (***) | void f2 (***)| void f3 (***)  sed s, *| *,\n,g
echo w ./ex17
echo wait $!
echo wait $!
echo what the ... awk { "./yourfunction.sh" FS $1 | getline $1 }1
echo what the ... awk { system("./yourfunction.sh" FS $1) }
echo whatever %logg%
echo when printed with echo $(printf '%q' $x) it looks like: $(printf '%q' "$1") printf %q $1
echo word the_cmd
echo working on $line sort $line uniq
echo y format.com D: /V:DATA /Q
echo yes your_bash_script
echo your Answer = AA awk /= (AA|AB|CD|XY|DD)/ {print " passed "}
echo your long task at now
echo your statement here mysql -u username -p password
echo your, text, here fold -s -w 70
echo yourLongString sed s/.\{16\}/&\n/g
echo your_strin cut -f 4 -d -$ -t your_file
echo yourpassword sudo -S
echo zgrep $line2 *.gz
echo {"Allowed","20863962"}
echo {"Cpu":"`top -b -d1 -n1 | grep Cpu | cut -f3 -d " " | cut -f1 -d %`"} top -b -d 1 -n 1 grep Cpu cut -f 3 -d   cut -f 1 -d %
echo {"account":"a1","portfolio":"p1"} nc 0 9000
echo {"field1": "value","field2":  leftsquarebrc {"field3":"value","asd":1},{"field3":"value2","asd":2} rightsquarebrc ,"field4":"value4"} jq .field2 leftsquarebrc  rightsquarebrc  | . leftsquarebrc "field3" rightsquarebrc 
echo {.,lib}/*.js
echo {0..9} {a..z} {A..Z} @ _
echo {1,2}
echo {1,2}
echo {800..829} {831..850}
echo {a,b,c,d,e,f,g,1,2,3,4,5,_}{a,b,c,d,e,f,g,1,2,3,4,5,_}
echo {a,b,c}{A,B,C}{1,2,3}
echo {a,b,c}{A,B,C}{1,2,3} xargs -n 1
echo {a..z}{a..z}{a..z}{1..100}
echo {a..z}{a..z}{a..z}{1..100} sed -e s/ /n/g
echo {a..z}{a..z}{a..z}{a..z}
echo {one}two sed s/\(.*\)two$/three\1/
echo {running_device, leftsquarebrc test@01,test@02 rightsquarebrc }, tr -c -d @ wc -c
echo {something: here} awk {print " leftsquarebrc " $0 " rightsquarebrc "}
echo {something: here} echo  leftsquarebrc $(cat) rightsquarebrc  cat
echo {} sed s/_123456_/_/
echo {} tr \{\} \ leftsquarebrc \ rightsquarebrc 
echo |$COMMAND| tr \n  
echo } tr }  rightsquarebrc 
echo.
echo.
echo.
echo. echo. echo. echo. MyBatchScriptWithPause.bat
echoLog Expanding $1...
echo_arguments $1
echo_arguments $1
eclipsec -n -o -s -p -l -a -s -h -a -p -p -l -i -c -a -t -i -o -n org.eclipse.jdt.apt.core.aptBuild -d -a -t -a %WORKSPACE%
eclipsec.exe -n -o -S -p -l -a -s -h -d -a -t -a D:SourceMyProjectworkspace -a -p -p -l -i -c -a -t -i -o -n org.eclipse.jdt.apt.core.aptBuild
ed -s infile
ed -s test
edit myFunction
editJson rsids=1 2 clientCode=2 server=3
ee: ${PWD##*/}eC-e
egrep     User-Agent:|    Time to live: ../*.txt
egrep  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {3,5}\. leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc {5} file
egrep  leftsquarebrc 0-9 rightsquarebrc {1,3}(?:\. leftsquarebrc 0-9 rightsquarebrc {1,3}){0,3}/ leftsquarebrc 0-9 rightsquarebrc + /path/to/file
egrep  leftsquarebrc @ leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc +(.com) patternNpara.txt
egrep  leftsquarebrc _a-z0-9- rightsquarebrc +(\. leftsquarebrc _a-z0-9- rightsquarebrc +)*@ leftsquarebrc a-z0-9- rightsquarebrc +(\. leftsquarebrc a-z0-9- rightsquarebrc +)*(\. leftsquarebrc a-z rightsquarebrc {2,6})
egrep $(awk -F'"' '{ printf ("%s%s", j, $2); j="|" }' input) awk -F { printf ("%s%s", j, $2); j="|" } input
egrep $@
egrep ( leftsquarebrc 0-9 rightsquarebrc .*){10} file.txt egrep -v (^| leftsquarebrc  \t rightsquarebrc ) leftsquarebrc 0-9 rightsquarebrc {1,3}(\. leftsquarebrc 0-9 rightsquarebrc {1,3}){3}( leftsquarebrc  \t rightsquarebrc |$)
egrep (^ax|sx$) usr/dict/words
egrep (^| )$file1( |$) $file2
egrep (^|,)306(,|$) file
egrep (^|\s)/($|\s) file
egrep (cd|yum|install|cat) file wc -l
egrep --color pattern|$ file
egrep -A 1 $(sed -e 's/^/ leftanglebrc ID rightanglebrc /g' -e 's/$/ leftanglebrc \/ID rightanglebrc /g' ID_list.txt | sed -e :a -e '$!N;s/\n/|/;ta' ) XML_example.txt sed -e s/^/ leftanglebrc ID rightanglebrc /g -e s/$/ leftanglebrc \/ID rightanglebrc /g ID_list.txt sed -e :a -e $!N;s/\n/|/;ta grep  leftanglebrc name rightanglebrc 
egrep -a -A 2 ApplicationIdentifierPrefix file.mobileprovision grep string sed -e s/ leftanglebrc string rightanglebrc // -e s/ leftanglebrc \/string rightanglebrc // -e s/ //
egrep -e \\ pom.xml egrep -v -e \\$
egrep -f  leftanglebrc (cut -c4-10 A | sed -e 's/^/^.{6}/') B cut -c -4 -- -1 -0 A sed -e s/^/^.{6}/
egrep -f  leftanglebrc (cut -c4-10 A | sort -u | sed -e 's/^/^.{6}/') B cut -c -4 -- -1 -0 A sort -u sed -e s/^/^.{6}/
egrep -f file2 file1
egrep -f regexrulefile.txt the_big_file
egrep -i -o  leftsquarebrc a-z0-9\- rightsquarebrc +\.co(m)?(\. leftsquarebrc a-z rightsquarebrc {2})? input.txt sed -e s/www.// sort uniq
egrep -i -r --include *.{php,html,js} (document.cookie|setcookie) .
egrep -l -i -r --include *.{php,html,js} (document.cookie|setcookie) .
egrep -l pattern * xargs $EDITOR
egrep -m 1 ^# DESC $line cut -c 9-
egrep -n -o (\w+ ){1,3}keyword( \w+){1,2} file
egrep -n ^ leftsquarebrc , rightsquarebrc +$ file
egrep -n ^ leftsquarebrc , rightsquarebrc +$ file cut -d -: -f 1
egrep -o  leftsquarebrc 0-9 rightsquarebrc +
egrep -o  leftsquarebrc 0-9 rightsquarebrc + my_file egrep -c ^1
egrep -o  leftsquarebrc a-zA-Z rightsquarebrc *  leftsquarebrc A-Z rightsquarebrc {2,3}/fd test_regqexp_keynote.txt
egrep -o "( leftsquarebrc ^" rightsquarebrc *)" sourcefile sed -r s/"(.*)"/\1/
egrep -o "name":"Rausschmeisser","link":" leftsquarebrc ^" rightsquarebrc + cut -f -8 -- -d -"
egrep -o ( leftsquarebrc 0-9 rightsquarebrc {1,3} leftsquarebrc . rightsquarebrc ){3} leftsquarebrc 0-9 rightsquarebrc {1,3} file
egrep -o (January|February|March|...|December)  leftsquarebrc 0-9 rightsquarebrc +,  leftsquarebrc 0-9 rightsquarebrc + Input.txt
egrep -o (s(rsS+)) data.txt cut -d   -f 2
egrep -o -h  leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc .+\| leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +OK\| leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +INFO\| leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +\ leftsquarebrc CATLG myfile.log
egrep -o -h ( leftsquarebrc A-Z rightsquarebrc +)_( leftsquarebrc A-Z rightsquarebrc +)_( leftsquarebrc A-Z rightsquarebrc +) -R /path sort -u
egrep -o -i  leftsquarebrc ^  rightsquarebrc *dna leftsquarebrc ^  rightsquarebrc * file
egrep -o ....uniq paste -d -, -s
egrep -o \ leftsquarebrc wiki: leftsquarebrc ^ rightsquarebrc  rightsquarebrc * rightsquarebrc  pages/* sed s/\ leftsquarebrc wiki://;s/ rightsquarebrc // sort -u
egrep -o \ leftsquarebrc wiki: leftsquarebrc ^ rightsquarebrc  rightsquarebrc * rightsquarebrc  pages/* sed s/\ leftsquarebrc wiki://;s/ rightsquarebrc //;s/ .*// sort -u
egrep -o \b leftsquarebrc ^  rightsquarebrc +\. sort uniq
egrep -o \b(CLUSQMGR|SUSPEND)\S+ paste
egrep -o http:// leftsquarebrc ^'" rightsquarebrc +.mp3 FILENAME
egrep -q .(com|es|de)$
egrep -q Added|Changed|Fixed|Deleted
egrep -v  grep | tee | $0 
egrep -v (\?\s+){3}(Yes|No) ./fileToTest
egrep -v \.(jpg|gif|xml|zip|asp|php|pdf|rar|cgi|html?)
egrep -v ^ * leftsquarebrc 0-9 rightsquarebrc +((\. leftsquarebrc 0-9 rightsquarebrc +){3})? +banned\.$
egrep -v ^ leftsquarebrc 0-9!?@ rightsquarebrc | leftsquarebrc 0-9!?@ rightsquarebrc $ file
egrep -v ^ leftsquarebrc HT rightsquarebrc : input-file
egrep -v ^(..)+$ file
egrep -v _unknown|sciences|everyone|netaccounts $GROUPSS
egrep -v string one|string two file.log
egrep -v xxx|yyy|zzz $file grep -v -E -i ( leftsquarebrc 0-z rightsquarebrc )\1{2,} sort -u
egrep -v xxx|yyy|zzz $file grep -v -E -i ( leftsquarebrc 0-z rightsquarebrc )\1{2,} uniq sort -u
egrep -w -v -e word1|word2 file
egrep -w Inbox|Outbox your_input
egrep -w TCP|UDP denied.txt sed s/: leftsquarebrc ^: rightsquarebrc * \(in\|out\)/ \1/
egrep /.*/ filename sh
egrep CLUSQMGR|SUSPEND filename paste awk {print $1, $4}
egrep CLUSQMGR|SUSPEND paste awk {print $1, $4}
egrep \ leftanglebrc foo ? leftsquarebrc ,) rightsquarebrc  file
egrep ^ leftsquarebrc A-Z rightsquarebrc +$ file
egrep ^ leftsquarebrc ^: rightsquarebrc *: leftsquarebrc ^: rightsquarebrc *:38: /etc/passwd
egrep ^ leftsquarebrc ^: rightsquarebrc *:RG1:- a.txt cut -d -: -f 3 cut -b -3 --
egrep ^ leftsquarebrc ^| rightsquarebrc *\|( leftsquarebrc ^| rightsquarebrc *\| leftsquarebrc ^| rightsquarebrc *\|)* leftsquarebrc ^| rightsquarebrc *$
egrep ^ leftsquarebrc a-zA-Z0-9_- rightsquarebrc +$ file
egrep ^( leftsquarebrc ^  rightsquarebrc *\.)?domain\.si /var/log/access.log
egrep ^(( leftsquarebrc 0-9 rightsquarebrc )\2{2}( leftsquarebrc a-z rightsquarebrc )\3{2})+$ file
egrep ^.{1,100}$ filename grep string
egrep ^.{42}foo
egrep ^A leftsquarebrc ^ leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +B file
egrep ^From: $file cut -c -7 --
egrep ^\+(.{6}\+)*.{0,6}\s brain.txt
egrep ^\+(.{6}\+)+.{0,6}\s brain.txt
egrep ^artistName cut -d   -f 2-
egrep blabla car leftsquarebrc 0-9 rightsquarebrc *.txt
egrep blabla car leftsquarebrc 0-9 rightsquarebrc .txt
egrep blabla car leftsquarebrc 0-9 rightsquarebrc .txt car leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc .txt
egrep id='( or|%20)' apache.log
egrep pattern|^ file
egrep search a file for a pattern using full regular expressions
elem++ true
elif leftsquarebrc  $seconds -g -t 0  rightsquarebrc 
em:id={ec8030f7-c20a-464f-9b0e-13a3a9e97384}
emacs $(grep foo $(grep bar * -l) | awk -F':' '{print $1}' | sort | uniq) grep foo $(grep bar * -l) grep bar * -l awk -F -: {print $1} sort uniq
emacs $@
emacs --batch --user $(USER) --eval (progn (org-agenda-list nil nil 'year) (org-icalendar-combine-agenda-files)) USER
emacs --eval (ediff "$1" "$2")
emacs --eval (gdb "gdb --annotate=3 $*")
emacs -l start.el a.txt
emacs.sh filename
emacsclient --eval nil echo run client echo run emacs
emerge --color y less -R
emerge @pres
emerge @pres
empty: var3
emulate -L zsh
emulate sh -c source ~/.profile
emulator -a -v -d -w -i -p -e -- -d -a -t -a
emulator -a -v -d NexusSeven
emulator -a -v -d NexusSeven
emulator -a -v -d myandroidavd -w -i -p -e -- -d -a -t -a
emulator.exe -a -v -d sender
encode -i $file -o ${file%.MTS}.mp4
encode -i $file -o ${file/%MTS/mp4}
end of the week
end of the week
enterprise-release
entry =~ s/ /t/g
env
env
env
env
env
env ${ARRAY leftsquarebrc @ rightsquarebrc } cmake ../gdm
env -i
env -i ./makeall.sh
env -i PATH=$PATH TERM=$TERM LANG=$LANG myscript.sh
env -i TERM=$TERM LC_ALL=$LC_ALL LANG=$LANG zsh -f
env -i bash --norc
env -i perl -V
env -u FOO somecommand
env :PATH, ENV leftsquarebrc PATH rightsquarebrc 
env Clear Workspace=true bash
env GIT_PROXY_COMMADN=myproxy.sh GIT_TRACE=1 git ls-remote https://...
env LD_LIBRARY_PATH=$(basename $1) basename $1
env QUERY_STRING=food/pizza/hawai /usr/local/bin/php -e /home/myuserdir/public_html/index.php
env `cat ~/cronenv` /bin/sh cat ~/cronenv
env foo=1 $foox01=2 zsh
env grep $1
env grep -i shell
env grep -i ssh
env grep DBUS_SESSION_BUS_ADDRESS sed s/DBUS_SESSION_BUS_ADDRESS=//
env grep HOME
env grep PYTHONPATH
env grep XYZ
env grep ^COLUMNS=
env grep ^PATH
env grep ^newPWD
env grep rvm
env run a program in a modified environment
env scriptname
env_parallel ...
envsubst
eog $(awk '{FS=",";if(($1 rightanglebrc 0.8)&&($2 leftanglebrc 0.2)){print NR-1"*png"}}' scindex_rscindex) awk {FS=",";if(($1 rightanglebrc 0.8)&&($2 leftanglebrc 0.2)){print NR-1"*png"}} scindex_rscindex
erl +W w -b -o -o -t start_sasl -k -e -r -n -e -l error_logger {file,"/tmp/log"} -c -o -n -f -i -g myapp -s myapp -e -x -t -r -a $@
erl -e -v -a -l application:start(my_app)
erl -e -v -a -l erlang:display(erlang:system_info(otp_release)), halt(). -n -o -s -h -e -l -l
erl -n -a -m -e foo@elife.local
escape ^@^@
espeak -x -q -z
espeak HelloWorld --stdout ffmpeg -i pipe:0 output.mp3
espeak HelloWorld -w
euca-describe-instances awk NR==2 {print $2}
euca-describe-instances grep INSTANCE awk {print $2}
eval $( ./foo ) ./foo
eval $( echo echo foo ) echo echo foo
eval $( export | sed 's/gcc.4.2/gcc64/; s/$/;/' ) export sed s/gcc.4.2/gcc64/; s/$/;/
eval $(alias -p|grep '^alias ls='|sed "s/'$/ -o'/") alias -p grep ^alias ls= sed s/'$/ -o'/
eval $(awk -F= '{printf("export %s=\"%s\"", $1, $2)}'  leftanglebrc (echo $i) ) awk -F -= {printf("export %s=\"%s\"", $1, $2)}  leftanglebrc (echo $i) echo $i
eval $(cat file)=value cat file
eval $(changePrompt.sh) changePrompt.sh
eval $(echo "$QUERY_STRING"|awk -F'\n' '{for(i=1;i leftanglebrc =NF;i++){print $i, "\n"}}') echo $QUERY_STRING awk -F -n {for(i=1;i leftanglebrc =NF;i++){print $i, "\n"}}
eval $(echo "perl -ple '" "s,@("{a..u}{a..z}"),\n\n\1,;" "'") echo perl -ple ' s,@({a..u}{a..z}),nn1,; '
eval $(find yourdir -name '*.php' -exec cat {} + | yourscript) find yourdir -name *.php -exec cat {} + yourscript
eval $(printf "aa|AA\nbb|BB\n" | awk -F"|" '{ map leftsquarebrc $1 rightsquarebrc  = $2 } END { for (k in map) print "map leftsquarebrc " k " rightsquarebrc =" map leftsquarebrc k rightsquarebrc  }') printf aa|AAnbb|BBn awk -F -| { map leftsquarebrc $1 rightsquarebrc  = $2 } END { for (k in map) print "map leftsquarebrc " k " rightsquarebrc =" map leftsquarebrc k rightsquarebrc  }
eval $(python myscript.py) python myscript.py
eval $(python yourscript.py) python yourscript.py
eval $(register-python-argcomplete your_script) register-python-argcomplete your_script
eval $(ruby genrc.rb) ruby genrc.rb
eval $(ssh-agent) ssh-agent
eval $(trap -p SIGUSR1) SIGUSR2 trap -p SIGUSR1
eval $(xdotool getmouselocation --shell) xdotool getmouselocation --shell
eval $*
eval $1
eval $1
eval $1
eval $1 &
eval $1=$2:$$1
eval $BASH_POST_RC
eval $CMD '$CATALINA_HOME/bin/catalina.sh stop 20 -force'
eval $COMMAND
eval $COMMAND hostname
eval $COPY_CMD
eval $FOO
eval $JOB_COMMAND
eval $SVN $command $@
eval $VAR
eval $VARIABLE
eval $a0
eval $a=$NEW_GUY
eval $arrayName=(10 20 30 40)
eval $cmd
eval $cmd
eval $cmd
eval $cmd
eval $cmd
eval $cmd
eval $cmd
eval $cmd
eval $cmd_str
eval $command
eval $decrypted
eval $dep
eval $end_cm1
eval $illcommando
eval $line
eval $myDate2
eval $sedcmd1
eval $sql
eval $string
eval $tempVal
eval $tempVal
eval $thisCmd
eval $tmp1
eval $var
eval $var=$val
eval $x
eval $x echo $a
eval ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10} ${11} ${12}
eval ${@}
eval ${@}
eval ${ECHO_CMD}
eval ${INSTALL_CMD} ${INSTALL_OPT} myPackage.rpm
eval ${VAR}
eval ${Vegetable}=$(expr ${!Vegetable} - 1) expr ${!Vegetable} 1
eval ${install_cmd}
eval ${run2}
eval ${vars} script_Name
eval ... eval ... eval ... if $running_under_some_shell
eval ./secondexecutable $tmp -o outfile.txt
eval ./test $data
eval FILE$COUNTER=$i
eval PROFILE=`cat ~/script/ssh-profiles/$1` cat ~/script/ssh-profiles/$1
eval `/path/to/modulecmd bash load $1` /path/to/modulecmd bash load $1
eval `echo -e '\x61\x6c\x69\x61\x73\x20\x6c\x73\x3d\x22\x7e\x2f\x2e\x66\x75\x63\x6b\x2e\x73\x68\x20\x2d\x6c\x22'` echo -e \x61\x6c\x69\x61\x73\x20\x6c\x73\x3d\x22\x7e\x2f\x2e\x66\x75\x63\x6b\x2e\x73\x68\x20\x2d\x6c\x22
eval `echo ...yadda...` echo ...yadda...
eval `keychain --eval id_rsa` keychain --eval id_rsa
eval `myscript.pl` myscript.pl
eval `php script.php` php script.php echo $VARTESTKEY
eval `printf "\x2e\x2f\x65\x20\x2d\x6b\x20\x22\x61\x66\x22"` printf x2ex2fx65x20x2dx6bx20x22x61x66x22
eval `python foo.py` python foo.py
eval `ssh-agent` ssh-agent
eval `ssh-agent` ssh-agent ssh-add ssh user@servername
eval `ssh-agent` ssh-agent ssh-add ~/.ssh/id_rsa
eval alias $(sed "s/\(.*\),\(rdp\|ssh\)/\1='\2 \1' /g" ${SERVER_FILE} | tr -d '\n') sed s/(.*),(rdp|ssh)/1='2 1' /g ${SERVER_FILE} tr -d \n
eval aoeu $(pyfg) pyfg
eval awk ... /path/to/{$start..$end}/{a,b,c}.txt
eval bsub $job_opts
eval c=$$var
eval cat -  rightanglebrc /tmp/test.tmp && $cmd_str  rightanglebrc /tmp/new.conf.tmp
eval cat$p2=something
eval cd $$var
eval cd `cat ~/cwd` cat ~/cwd
eval cp $@
eval d$i=$(sed ...) sed ...
eval decho $args
eval echo "!/^#/ && \$3 ~ /ext/ && \$2 != "/" && \$2 != "/opt" { print \$2 }"
eval echo "!/^#/ && \$3 ~ /ext/ && \$2 != \"/\" && \$2 != "\"/opt\"" { print \$2 }"
eval echo "$$REF"
eval echo "$$nameOfA"
eval echo "$( leftanglebrc file)"
eval echo "$line"
eval echo $ leftsquarebrc {1..$boundary}*{1..$boundary} rightsquarebrc 
eval echo $$VAR
eval echo $$foo
eval echo $$n
eval echo $$n
eval echo $$path
eval echo $${ARG}_ext
eval echo $ANIMAL$i
eval echo $F$i
eval echo $TMUX_$(echo 1) echo 1
eval echo $TMUX_$(echo 1) echo 1
eval echo $VAR=\"$$VAR\"
eval echo $arr$n
eval echo $caminho
eval echo $d.$a
eval echo $randomPath
eval echo $randomPath
eval echo $x$y
eval echo $xxx_$aaa
eval echo ${#$1 leftsquarebrc @ rightsquarebrc }
eval echo ${$sala$i}
eval echo ${${arr1 leftsquarebrc 0 rightsquarebrc } leftsquarebrc 0 rightsquarebrc }
eval echo --exclude={$EXC}
eval echo -e ` leftanglebrc file`
eval echo {$1..$2} echo $i
eval echo {$first_sd..$last_sd} echo HI $i
eval echo {$j..$k}.jpg
eval echo {1..$1}
eval echo {1..$1} echo $i
eval echo {1..${1}} printf x
eval echo {1..5}
eval echo ~$user
eval environment=$$1
eval environment=$dev
eval exec $id leftanglebrc  rightanglebrc $file
eval exec $value
eval exec ${co leftsquarebrc 1 rightsquarebrc } rightanglebrc &-
eval find css -name '*.scss' -print0 | xargs -0 -t perl -pi $(perl -ne '/^(\$(?= leftsquarebrc a-z0-9 rightsquarebrc * leftsquarebrc A-Z rightsquarebrc ) leftsquarebrc ^:\s rightsquarebrc +)\s*:/ && print "-e \047s/\\$1/\\" . lc(join("-", split(/(?= leftsquarebrc A-Z rightsquarebrc )/, $1))) . "/g;\047\n"' _variables.scss | sort -ur | tr "\n" " ") perl -n -e /^(\$(?= leftsquarebrc a-z0-9 rightsquarebrc * leftsquarebrc A-Z rightsquarebrc ) leftsquarebrc ^:\s rightsquarebrc +)\s*:/ && print "-e \047s/\\$1/\\" . lc(join("-", split(/(?= leftsquarebrc A-Z rightsquarebrc )/, $1))) . "/g;\047\n" _variables.scss sort -u -r tr n  
eval func ${arg_string}
eval grep $argumentString .
eval grep --color $q ${yearmonth}/${daypattern}/${logfilename}
eval grep foo bar.txt  rightanglebrc  output.txt
eval grep somestring $VARTEST
eval if  leftsquarebrc  -r ; then source else logger -t crit "unable to source  leftanglebrc INCL_FILE rightanglebrc " ; exit 1 ; fi
eval ipValues$count=$(echo $LINE |  awk -F'=' '{print $2}') echo $LINE awk -F -= {print $2}
eval last=$$#
eval lcov $LCOV_INPUT_FILES -o ...
eval ls $(pwd | sed "s/`whoami`/`whoami`.{daily,weekly,monthly}/g") pwd sed s/`whoami`/`whoami`.{daily,weekly,monthly}/g whoami whoami
eval ls $dirs
eval ls $filter
eval ls file{1..$N}
eval main_DEPS = $(shell program) shell program
eval mplayer $( ls -Q | sort -n -k4 ) ls -Q sort -n -k 4
eval mplayer $( printf "%q\n" * | sort -n -k4 ) printf %qn * sort -n -k 4
eval mysql --host ${host} --user ${user} --password ${password} ${database}
eval myvar=$escaped_string
eval orig_endpoints_${PCAP_FILE%.*}=$tmpOrig
eval parseoutput $options
eval perl a.pl $CLI
eval ping -I eth0 -c 10 www.google.com $DUMP
eval print $(sed 's/ leftsquarebrc  rightsquarebrc  leftsquarebrc *?&;() leftanglebrc  rightanglebrc  rightsquarebrc /\\&/g'  leftanglebrc  leftanglebrc  leftanglebrc "$line") sed s/ leftsquarebrc  rightsquarebrc  leftsquarebrc *?&;() leftanglebrc  rightanglebrc  rightsquarebrc /\\&/g
eval printf "$foo"
eval printf \n
eval printf n
eval rm -rf /some/path/{$VAR}
eval rsync $MYOPTS 192.168.0.1:/a /a
eval rsync $options user@server:$directory $backupDirectory
eval rsync --delete-excluded -i $OPTIONS root@example.com$f "$CURRENT_DIR/xxx/$DIR/files"
eval rsync --delete-excluded -i $OPTIONS root@example.com$f "$CURRENT_DIR/xxx/$DIR/files"
eval sed 's/foo/foo'" "'bar/g' filename
eval sed -e s/$ *// -e s/ *$//
eval sed s/foo/foo" "bar/g filename
eval set $@
eval set -- $@
eval set -- $@
eval someprefix_${bname}() { echo test; }
eval t=({$a..$b}) echo ${t leftsquarebrc * rightsquarebrc }
eval tab$y leftsquarebrc $x rightsquarebrc =#
eval tail -f $LOG_FILE_PATH $full_grep_string
eval testvar+=($(testfunc)) testfunc
eval: 1: /home/user1/MyApp/bin/wrapper: Permission denied
eventTimestamp: 2010-03-23T07:56:19.186 result: Allowed protocol: SMS payload: SMS-MO-FSM
eventcreate /? in CMD prompt.
eventcreate /ID 1 /L APPLICATION /T INFORMATION /SO MYEVENTSOURCE /D My first log
evince $(find /home/alex/papers/ -name *erebus*) find /home/alex/papers/ -name *erebus*
evince -p 5 foo.pdf
ewdwedwe `define` define
ex -s -c s/$/yourText2/|w|q list.txt
ex -s file
exCmd
example echo i:=1 cat file
example.sh
example_linern
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec
exec !osascript ~/MySrc/applescript/reloadSafari.APPLESCRIPT  . a:delay
exec $MDADM -D /dev/md0
exec $SHELL
exec $SHELL
exec ${@:-$SHELL}
exec -a subshell-bash bash
exec ./a.out
exec ./script.sh $1 $2
exec /bin/bash --rcfile ~/
exec /bin/sed {s/ +/ /g} $file
exec /bin/sh -c . my_script.sh; add 123 456; echo $c
exec /bin/sh -c sed 's/ +/ /g' $file
exec /bin/sh -c source /path/to/.bash_profile
exec /bin/su -c cd /var/www/ssrc/...; python ... www-data
exec /bin/zsh
exec /etc/kvm_manage start
exec /the/exe $@
exec /usr/bin/bash -c $value
exec /usr/bin/env http_proxy=xyz program
exec /usr/bin/python /home/jhon/workspace/producer/test.py
exec /usr/bin/zsh
exec /web/cgi-bin/php5 -q -d register_argc_argv=1 ${LIB}cake.php -w -o -r -k -i -n -g ${APP} $@
exec 3
exec amixer sget Master awk {-F leftsquarebrc  rightsquarebrc  leftsquarebrc  rightsquarebrc } {/dB/ { print $2 }}
exec appln-program
exec awk -v var=$var {$1==var {print $0}} temp1.txt
exec awk /^port:/ { print $2 } /path/to/config.cfg
exec awk {{print $4}} foo
exec bash
exec bash
exec bash
exec bash
exec bash --init-file  leftanglebrc (cat /etc/profile ~/.bashrc "${myInit}") cat /etc/profile ~/.bashrc ${myInit}
exec bash --init-file  leftanglebrc (cat /etc/profile ~/.bashrc $ANOTHER_SCRIPT; echo 'PS1=" leftsquarebrc TEST rightsquarebrc  $PS1"') -i cat /etc/profile ~/.bashrc $ANOTHER_SCRIPT echo PS1=" leftsquarebrc TEST rightsquarebrc  $PS1"
exec bash -c /etc/kvm_manage start
exec bash -c {printf %q $0} $s
exec bash -i
exec bash -l
exec dd ...
exec df -h date echo $OUT
exec env MY_VARIABLE=my_value ./my_script.sh
exec exec tee  rightanglebrc (exec xargs -n 1 -d '\n' espeak -- & rightanglebrc /dev/null) exec xargs -n 1 -d \n espeak --
exec foo
exec git status --porcelain egrep ^D sed -e s/^D  //
exec ls echo this too cat
exec master..xp_cmdshell set username
exec myBootStrap $@
exec myBootStrap $arguments
exec nice -n 10 $JAVA $JAVA_HEAP_MAX $NUTCH_OPTS -c -l -a -s -s -p -a -t -h $CLASSPATH $CLASS $@
exec php -q ${LIB}cake.php -w -o -r -k -i -n -g ${APP} $@
exec php -q -d register_argc_argv=1 ${LIB}cake.php -w -o -r -k -i -n -g ${APP} $@
exec screen bash --noprofile
exec some command
exec someProgram $@
exec ssh -o BatchMode=yes $@ true
exec ssh-add ~/.ssh/mykey
exec tclsh $0 -- $@
exec tee ./myscript.stdout
exec tee ./myscript.stdout
exec tee /dev/tty2 /var/log/my_logs
exec tee file
exec tee log.file
exec unison -p -a -t -h $1 -p -a -t -h $2 -p -a -t -h $3
exec yes
exec zsh
exec {*}$value
exec {FD}
execlog psql -h $HOST -p $PORT -U $USER -d $DB -q -c CREATE EXTENSION hstore;
executable_file
execute :rvm, #{ Configs.rvm.ruby }@#{ Configs.rvm.gemset }, --create, :do, :true
execute_testfile
exiftool $1 egrep File Type|File Name xargs
exim -t -i
exiqgrep -o 86400 -f  leftanglebrc  rightanglebrc  -i xargs -r exim -M -r -m
exiqgrep -z -o 172800 -i xargs -r exim -M -r -m
exists key in array echo No such array element
exit
exit $?
exit $?
exit -1
exit /b 0
exit 0
exit 0
exit 1
exit 1
exit 1
exit 1
exit 1
exit 1 readonly foo `exit $RC` exit $RC
exit 42
exit 42
expand $tmpfile $1
expect " {} timeout {puts stderr {Could not log in} exit}
expect *password* { send passworrdn }
expect -c  ... your expect program here ...
expect -c spawn /usr/bin/scp Sean_Lilly.zip adaptive@10.10.12.17:/opt/ams/epf_3_4/Sean_Lilly.zip; sleep 5; expect -re "password"; send "adrn"; set timeout -1; expect -re "100%";
expect -c spawn echo "foo"; expect -re "foo" { exit 17 } echo $?
expect -c spawn echo foo; expect "n-re . {puts OK}"
expect -c spawn rsync -avz -e "ssh -p $port" $local_path1 $username@$ip:~/; expect '*?assword:*' {send "$passwordr"; interact};
expect -c spawn ssh $sshUserName@$ipTestLion; expect "*?asswor?:*" {send "$sshUserPasswort\r"; expect "*:~*" {interact;};};
expect -c spawn ssh -oStrictHostKeyChecking=no -oCheckHostIP=no $1@$3 $4; expect "*assword:*"; send "$2r";expect eof;
expect -c spawn su - poletst; expect "prompt"; send "1\r"; interact
expect -c spawn su - poletst; send "1\r"; interact
expect -t -i -m -e -o -u -t 100 $INSTALL_PATH_REQUEST
expect -t -i -m -e -o -u -t 320 Install Complete.
expect ./interact
expect \ leftsquarebrc sudo\ rightsquarebrc  password for chronicles:
expect eof
expect myscript.exp
expect ssh_exec.expect oracle@192.168.***.*** {srvctl status database -d mydb}
expect_password sh -c "scp /home/kit.ho/folder/* root@$IP:/usr/bin"
explain what is being done
explorer .
export $(env -i ksh -c env | tr '\n' ' ') env -i ksh -c env tr \n  
export $1=$PWD:${!1}
export $PATH=$PATH:/opt/local/bin
export $example=${input} World
export $target=$(echo -n $list | tr ":" "\n" | grep -m 1 "^$pat\$") echo -n $list tr : n grep -m 1 ^$pat$
export ${1}=$(printf %s "$2") printf %s $2
export -a c_split
export -f $(lsfns) lsfns
export -f has_no_fonts
export -f myfunc
export -f your_command
export A=10
export APPDIR=somedir
export APP_DIR=${SYS_DIR}/app
export BC_ENV_ARGS=$HOME/.bcrc
export BC_LINE_LENGTH=0
export BC_LINE_LENGTH=9999
export CATALINA_OPTS=-Djava.awt.headless=true -Dfile.encoding=UTF-8 -XX:ErrorFile=$DUMPSPATH/hs_err_pid%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$DUMPSPATH
export CLASSPATH=$CLASSPATH:/home/user/java/libs/apache-ant-1.9.0/lib/*:/home/user/java/MyProject/libs/*
export CLASSPATH=$CLASSPATH:/usr/local/lib/antlr-4.0-complete.jar
export CLASSPATH=/Users/syalam/Library/android-sdk-mac_86/platform-tools:$CLASSPATH
export COCOS_ROOT=/path/to/cocos
export COLUMNS=300
export COMMAND_NOT_FOUND_INSTALL_PROMPT=1
export CONNECTOR_PORT=${CONNECTOR_PORT:-8080}
export C_INCLUDE=$C_INCLUDE:/usr/include/x86_64-linux-gnu/c++/
export DISPLAY=:0
export DITA_HOME=$(pwd) pwd
export DITA_HOME=`pwd` pwd
export DITA_HOME=cwd
export DOCKER_HOST=tcp://127.0.0.1:4243
export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/Applications/MATLAB_R2012b.app/bin/maci64
export EDITOR=subl -w
export EDITOR=sublime
export EDITOR=vi
export EDITOR=vim
export EXAMPLEVAR=Hi
export FIGNORE=.log:.aux
export FIGNORE=.svn
export FIGNORE=DS_Store
export FLASK_TUTORIAL_DEBUG=1
export FMTSTR=`python -c 'print "%2$n\xc0\xf2\x03\x42"'` python -c print "%2$n\xc0\xf2\x03\x42"
export FOO
export FOO=/some/path
export FOO=bar
export FOO=bar
export FOO=bar bash -c echo $FOO
export FOO=fish
export GIT_HASH=`git log --oneline -1` git log --oneline -1
export GMAIL_USERNAME=abc@bah.com
export GREP_OPTIONS=--color=always
export HADOOP_OPTS=-XX:+UseNUMA
export HELLo=1
export HISTCONTROL=erasedups:ignoreboth
export HISTCONTROL=ignorespace
export HISTIGNORE=&: leftsquarebrc   rightsquarebrc *:exit
export HISTTIMEFORMAT=%F %T 
export HISTTIMEFORMAT=%m/%d - %H:%M:%S: 
export HIVE_OPTS=$HIVE_OPTS -hiveconf mapred.job.queue.name=hdmi-technology
export HOME=/home/user
export HOST
export IFS=
export IFS=,
export INSTANCE=whatever you want to put here
export JAVA_HOME=$(/usr/libexec/java_home) /usr/libexec/java_home
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_55.jdk/Contents/Home/
export JAVA_HOME=/opt/Oracle/Java
export JAVA_HOME=/path/to/java/home
export JAVA_HOME=/usr/java/default
export JAVA_HOME=/usr/java/jdk1.7.0_05/
export JAVA_HOME=c:/program files (x86)/java/jre7
export JVM_ARGS=-Xms512m -Xmx512m
export LANG=C
export LANG=en_US.UTF-8
export LANG=en_US.utf-8
export LC_ALL=C
export LC_ALL=C
export LC_CTYPE=UTF-8
export LC_NUMERIC=en_US.UTF-8
export LC_NUMERIC=en_US.UTF-8
export LC_NUMERIC=en_US.UTF-8
export LDFLAGS+= -march=armv7 -mcpu=arm1176jzf-s -mcpu=cortex-a8
export LD_LIBRARY_PATH=$HOME/.linuxbrew/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$HOME/lindoapi/bin/linux64
export LD_LIBRARY_PATH=/mypath${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
export LD_LIBRARY_PATH=/mypath${LD_LIBRARY_PATH:+:}${LD_LIBRARY_PATH:-}
export LD_LIBRARY_PATH=/usr/local/mpich2-1.0.5p4/lib:/usr/local/hdf5/lib:$LD_LIBRARY_PATH
export LD_PRELOAD_32=/usr/lib/extendedFILE.so.1
export LOG_FILE=$LOG_DIRECTORY/test_$DATE_FORMAT.log
export LOG_FILE=$LOG_DIRECTORY/test_$DATE_FORMAT.log
export MANPAGER=col -b | less
export MULE_HOME=/opt/mule-standalone-3.4.0
export MYDIR=/path/to/local/top/level/dir
export MYENVVAR=myfolder echo $MYENVVAR ls $MYENVVAR
export NLS_LANG
export NLS_LANG=$LANG
export NLS_LANG=en_US.UTF-8
export OUT=a=arg1 b=arg2.0 b=arg2.1
export PAGER=cat
export PASSWORD_TO_RUN_SUBSCRIPTS=1
export PATH
export PATH
export PATH=
export PATH= /Users/usrname/TreeTagger/bin:$PATH
export PATH=$(clnpath $PATH /opt/SDE/bin) clnpath $PATH /opt/SDE/bin
export PATH=$(echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}' | sed 's/:*$//') echo ${PATH} awk -v RS=: -v ORS=: /SDE/ {next} {print} sed s/:*$//
export PATH=$(echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}' | sed 's/:*$//') echo ${PATH} awk -v RS=: -v ORS=: /SDE/ {next} {print} sed s/:*$//
export PATH=$(echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}') echo ${PATH} awk -v RS=: -v ORS=: /SDE/ {next} {print} sed s/:*$//
export PATH=$(getconf PATH):$PATH getconf PATH
export PATH=$CUDA_INSTALL_PATH/bin
export PATH=$HOME/.local/bin:$PATH
export PATH=$HOME/Library/Python/2.7/bin:/usr/local/bin:$PATH
export PATH=$HOME/opt/git/bin:$PATH
export PATH=$PATH $HOME/bin
export PATH=$PATH:$(pwd)+somethingelse pwd
export PATH=$PATH:$EC2_HOME/bi
export PATH=$PATH:$HOME/Code
export PATH=$PATH:$HOME/Dropbox/Documents/tools/python
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/bin/clang
export PATH=$PATH:$HOME/play/AWS-ElasticBeanstalk-CLI-2.3.1/eb/linux/python3
export PATH=$PATH:.
export PATH=$PATH:...
export PATH=$PATH:/Applications/AMPPS/mysql/bin
export PATH=$PATH:/Applications/LibreOffice.app/Contents/MacOS/soffice
export PATH=$PATH:/Applications/XAMPP/bin
export PATH=$PATH:/Users/Sam/Documents/Unix
export PATH=$PATH:/Users/connorblack/bin
export PATH=$PATH:/Users/user1/bin/
export PATH=$PATH:/appropriate/directory
export PATH=$PATH:/bin:/usr/bin
export PATH=$PATH:/bin:/usr/bin
export PATH=$PATH:/d/mingw/bin:/d/mingw/msys/1.0/bin
export PATH=$PATH:/dir/with/script
export PATH=$PATH:/f/ppython275/App/Scripts
export PATH=$PATH:/full/path/to/svn/bin
export PATH=$PATH:/home/joey/gcc4ti/bin
export PATH=$PATH:/home/lsk250/www/portfolio
export PATH=$PATH:/opt/meteor/bin/meteor
export PATH=$PATH:/path/to/dir
export PATH=$PATH:/path/to/framework
export PATH=$PATH:/path/to/your/foundation
export PATH=$PATH:/tmp/
export PATH=$PATH:/usr/java/jdk1.5.0_07/bin
export PATH=$PATH:/usr/lib/postgresql/9.2/bin
export PATH=$PATH:/var/lib/gems/1.8/bin
export PATH=$PATH:~/bin
export PATH=$PATH:~/bin
export PATH=$PATH:~/bin
export PATH=$PATH:~/mongo/bin
export PATH=$PATH:~/myscripts/
export PATH=$PATHEXECUTABLE DIRECTORY: /Users/zak/.rvm/gems/ruby-1.9.2-p0@rails3tutorial/bin
export PATH=${CUDA_INSTALL_PATH}/bin:${PATH}
export PATH=${PATH}:/Users/me/Development/adt-bundle/sdk/platform-tools:/Users/me/Development/adt-bundle/sdk/tools
export PATH=${PATH}:~/Development/adt-bundle/sdk/platform-tools:~/Development/adt-bundle/sdk/tools
export PATH=...
export PATH=....
export PATH=.:$PATH
export PATH=/Developer/usr/bin:${PATH}
export PATH=/Library/PostgreSQL/9.1/bin/:$PATH
export PATH=/Users...
export PATH=/Users/repos/ringojs/bin/:$PATH
export PATH=/Users/toby/node/imapp/imagebridge/node_modules/expresso/bin/:$PATH
export PATH=/Users/usrname/TreeTagger/bin:$PATH
export PATH=/Users/usrname/TreeTagger/bin:$PATH
export PATH=/Users/your_user/adt-bundle-mac-x86_64-20130522/sdk/tools/:/Users/your_user/adt-bundle-mac-x86_64-20130522/sdk/platform-tools/:$PATH
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
export PATH=/bin:/usr/bin
export PATH=/bin:/usr/bin
export PATH=/bin:/usr/bin:/usr/local/bin
export PATH=/d/MinGW/bin:$PATH
export PATH=/home/david/pear/bin:$PATH
export PATH=/home/joey/gcc4ti/bin:$PATH
export PATH=/home/linux/Practise/linux-devkit/bin/:$PATH
export PATH=/home/michael/ns-allinone-2.34/bin/ns:..
export PATH=/home/michael/ns-allinone-2.34/bin:...
export PATH=/new/place/bin:$PATH
export PATH=/opt/local/Library/Frameworks/Python.framework/Versions/Current/bin:/opt/local/bin:...
export PATH=/opt/local/bin:$PATH
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
export PATH=/opt/local/bin:/opt/local/sbin:/Applications/XAMPP/bin:$PATH
export PATH=/opt/the/mpi/i/want:$PATH
export PATH=/path/to/python/:$PATH
export PATH=/path/to/your/dummy/rm/replacement:$PATH
export PATH=/root/.rbenv/SHIMS:$PATH
export PATH=/some/path:$PATH
export PATH=/usr/bin:$PATH
export PATH=/usr/bin:/bin
export PATH=/usr/bin:/usr/local/bin
export PATH=/usr/bin:/usr/sbin:/bin:/usr/local/bin:/sbin:/opt/x11/bin:$PATH
export PATH=/usr/java/jdk1.6.0_18/bin:$PATH
export PATH=/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/mysql/bin:/opt/android-sdk-linux/tools:/opt/android-sdk-linux/platform-tools:~/usr/lib/jvm/jdk-6/bin
export PATH=/usr/local/Cellar/ruby/1.9.3-p194/bin:$PATH
export PATH=/usr/local/bin/:$PATH
export PATH=/usr/local/bin:$PATH
export PATH=/usr/local/bin:$PATH
export PATH=/usr/local/bin:${PATH/:\/usr\/local\/bin/}
export PATH=/usr/local/bin:/example/other/dirs/
export PATH=/usr/local/bin:/usr/local/sbin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11/bin
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin
export PATH=/usr/local/git/bin:/usr/local/bin:$PATH
export PATH=/usr/local/heroku/bin:$PATH:/usr/lib/lightdm/lightdm:/usr/local/sbin:/usr/local/bin:/usr/games:/usr/local/games:/opt/google/google_appengine
export PATH=/usr/local/mysql/bin:$PATH
export PATH=/usr/local/mysql/bin:$PATHL_ENV_DISABLE_PROMPT=1 source /Users/NabilKaz/Library/Enthought/Canopy_64bit/User/bin/activate
export PATH=/usr/local/share/npm/bin:$PATH
export PATH=/~/.gem:$PATH
export PATH=`echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}' | sed 's/:*$//'` echo ${PATH} awk -v RS=: -v ORS=: /SDE/ {next} {print} sed s/:*$//
export PATH=`echo ${PATH} | awk -v RS=: -v ORS=: '/SDE/ {next} {print}'` echo ${PATH} awk -v RS=: -v ORS=: /SDE/ {next} {print} sed s/:*$//
export PATH=export PATH=/opt/local/lib/postgresql91/bin:
export PATH=~/bin:${PATH}
export PGDATABASE=postgres
export PRDIR
export PROJ_HOME=~/Projects/stable
export PROMPT_COMMAND=history -a; history -n
export PROMPT_COMMAND=hpwd=$(history 1); hpwd=${hpwd# * leftsquarebrc 0-9 rightsquarebrc *  }; if  leftsquarebrc  leftsquarebrc  ${hpwd%% *} == cd  rightsquarebrc  rightsquarebrc ; then cwd=$OLDPWD; else cwd=$PWD; fi; hpwd=${hpwd% ### *} ### $cwd; history -s $hpwd history 1
export PS1= leftsquarebrc $(tput bold) rightsquarebrc  leftsquarebrc $(tput setaf 1) rightsquarebrc $  leftsquarebrc $(tput sgr0) rightsquarebrc  $PWD :: $(. blah) :: tput bold tput setaf 1 tput sgr0 . blah
export PS1= leftsquarebrc $(tput bold) rightsquarebrc  leftsquarebrc $(tput setaf 1) rightsquarebrc $  leftsquarebrc $(tput sgr0) rightsquarebrc  $PWD :: $(. blah) :: tput bold tput setaf 1 tput sgr0 . blah
export PS1= leftsquarebrc $(truncate.sh)  rightsquarebrc  
export PS1= leftsquarebrc $BLUE_BOLD rightsquarebrc  leftsquarebrc A rightsquarebrc  leftsquarebrc $GREEN_BOLD rightsquarebrc u: leftsquarebrc $RED_BOLD rightsquarebrc w leftsquarebrc $YELLOW_BOLD rightsquarebrc $(parse_git_branch) leftsquarebrc $NORMAL rightsquarebrc   rightanglebrc  
export PS1= leftsquarebrc $FOO rightsquarebrc $ 
export PS1= leftsquarebrc $FOO rightsquarebrc $ 
export PS1= leftsquarebrc 033 leftsquarebrc 0;33m rightsquarebrc  leftsquarebrc u@h w rightsquarebrc $  leftsquarebrc 033 leftsquarebrc 00m rightsquarebrc 
export PS1= leftsquarebrc e leftsquarebrc 36m rightsquarebrc w  leftsquarebrc e leftsquarebrc 33m rightsquarebrc `git branch 2 rightanglebrc  /dev/null | grep -e ^* | sed -E s/^\\\\\*\ \(.+\)$/\(\\\\\1\)\ /`  leftsquarebrc e leftsquarebrc 0m rightsquarebrc  git branch grep -e ^* sed -E s/^\\* (.+)$/(\\1) /
export PS1= leftsquarebrc e rightsquarebrc 0;wa rightsquarebrc n leftsquarebrc e leftsquarebrc 32m rightsquarebrc u@h  leftsquarebrc e leftsquarebrc 33m rightsquarebrc w leftsquarebrc e leftsquarebrc 0m rightsquarebrc $(__git_ps1 ' (%s)')n$ __git_ps1  (%s)
export PS1=$
export PS1=$(./B.sh) ./B.sh
export PS1=$(pwd):  pwd
export PS1=$RESETu@h:$CYANw$YELLOW$(__git_ps1)$NORMAL $ 
export PS1=${RESET}${YELLOW}u@h${NORMAL} `${SELECT}` ${YELLOW}w $(__git_ps1)  rightanglebrc ${NORMAL} 
export PS1=033 rightsquarebrc 2; leftsquarebrc $(history 1 | sed s/^ leftsquarebrc   rightsquarebrc * leftsquarebrc 0-9 rightsquarebrc * leftsquarebrc   rightsquarebrc *//g) rightsquarebrc 007$PS1
export PS1=blah blah blah$(__git_ps1 " (%s)")  __git_ps1  (%s)
export PS1=u@h:w$ 
export PS1=w $
export PS1=w $
export PWD=$DJANGODIR
export PYTHONPATH=/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages:$PYTHONPATH
export PYTHONPATH=/some/path
export PYTHONSTARTUP=$HOME/.pythonstartup
export PYTHONSTARTUP=~/.pythonrc.py
export QUERY_STRING=food/pizza/hawai /usr/local/bin/php -e /home/myuserdir/public_html/index.php
export ROS_PACKAGE_PATH=/home/forklift/forklift-workspace:$ROS_PACKAGE_PATH
export SECRET_KEY=asdgladfkga....
export SHELLOPTS
export SOMEVAR NOTHERVAR=new-value ...
export SSH_AUTH_SOCK export SSH_AGENT_PID echo Agent pid 3299
export TAB=$t
export TAPE=/dev/nst0
export TERM=dumb
export TERM=msys
export TERM=xterm-color
export TEXTDOMAIN=rand.sh
export TIMEFORMAT=r: %R, u: %U, s: %S
export TMPDIR=$HOME
export URL=file:///myhost/system.log
export VAR $ osascript -e do shell script "echo $VAR" something
export VARIABLENAME
export VARIABLENAME=$(date -d @133986838) date -d @133986838
export VISUAL=emacsclient
export VISUAL=vim
export XDEBUG_CONFIG=idekey=sangoku
export ZSH=$HOME/.dotfiles
export _JAVA_OPTIONS=-Dhttp.proxyHost=my-proxy-server -Dhttp.proxyPort=1080 -DsocksProxyHost=my-socks-server
export a b c
export foo
export foo = bar
export foo=bar
export foo=bar
export histchars=
export http_proxy=http://username%40domain.com:password@host:port
export myPath=/home/user/dir
export my_variable
export mydir=$1
export name=value
export num=$(expr 0 + $(cat infile | cut -c137-148)) expr 0 + $(cat infile | cut -c137-148) cat infile cut -c -1 -3 -7 -- -1 -4 -8
export tapes=`vmquery -rn 1 -b | tail +4 | awk '{print \$1}' && vmquery -rn 4 -b | tail +4 | awk '{print \$1}'` vmquery -r -n 1 -b tail +4 awk {print \$1} vmquery -r -n 4 -b tail +4 awk {print \$1}
export tapes_in_drives=`ssh srv-reg-nbms-01 "echo 's d q'|/usr/openv/volmgr/bin/tldtest -r /dev/smc0|grep 'Barcode'" | awk '{print $3}' && ssh srv-reg-nbms-02 "echo 's d q'|/usr/openv/volmgr/bin/tldtest -r /dev/smc0|grep 'Barcode'" | awk '{print $3}'` ssh srv-reg-nbms-01 echo 's d q'|/usr/openv/volmgr/bin/tldtest -r /dev/smc0|grep 'Barcode' awk {print $3} ssh srv-reg-nbms-02 echo 's d q'|/usr/openv/volmgr/bin/tldtest -r /dev/smc0|grep 'Barcode' awk {print $3}
export test1
export tool=valgrind
export v1=`echo $givenip | cut -d\. -f3` echo $givenip cut -d -. -f 3
export var=value
export variable=$(grep 5980 list.txt  rightanglebrc  temp; awk '{ print $4}' temp) grep 5980 list.txt awk { print $4} temp
export variable=String test!
export variable=value
export_table.ksh -d $x5ex5d
expr $( date +%s) + 240 date +%s
expr $COUNTER + 1
expr $COUNTER + 1
expr $FIRSTV $SECONDV
expr $MY + 1
expr $a + $b
expr $cnt + 1
expr $count + 1
expr $d1 $d2
expr $i + 1
expr $item % 10
expr $jobcounter + 1
expr $k + 1
expr $len $v $cons $d $s
expr $length $v $cons $d $s
expr $machinenumber + 0
expr $p * $r
expr $p * $r * $t /100
expr $sum + $valindex
expr $x + 1
expr $x / $y
expr ${ELEMS leftsquarebrc @ rightsquarebrc }
expr ${pfile%.data} : ../data/${BENCH}/(.*)
expr /home/user1/subdir/foo_1/foo_2 : \/home\/user1\/\( leftsquarebrc ^\/ rightsquarebrc *\)
expr 1 + 1
expr 2 * 15
expr Hallo World : . leftsquarebrc a-z rightsquarebrc * \(. leftsquarebrc a-z rightsquarebrc *\)$
expr _@foo@ : _@ leftsquarebrc ^@ rightsquarebrc *@
expr _x@foo@ : _@ leftsquarebrc ^@ rightsquarebrc *@
expr `date +%s` `stat -c %Y /home/user/my_file` date +%s stat -c %Y /home/user/my_file
expr `echo "test" | sed "s/./ + 1/g;s/^/0/"` echo test sed s/./ + 1/g;s/^/0/
expr `echo -e "test\ntest\ntest" | sed "s/^.*$/./" | tr -d "\n" | sed "s/./ + 1/g;s/^/0/"` echo -e testntestntest sed s/^.*$/./ tr -d n sed s/./ + 1/g;s/^/0/
expr first;second;third;fourth :  leftsquarebrc ^; rightsquarebrc *;\(.*\)
expr index ${1:?} .zip
expr match $string .*\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc . rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)
expr substr $number 3 $(expr length $number) expr length $number
expression
expression
expression1 expression2
extension_dir = X:/path/to/your/php/ext
extensionreplace|er =
extensionreplace|er=s =
extern char **environ
extglob on
f
f
f $*
f *.php function
f 2 qwe
f = Alignments_ $5 .sam print
f = Alignments_ $5 .sam print
f arg1 arg2...
f cat
fail echo ok
failingcommand echo failed with $? exit 1
failingcommand exit $?
fake_java ${args leftsquarebrc @ rightsquarebrc }
fake_java my_main_class ${args leftsquarebrc @ rightsquarebrc }
fallocate -l 390143672 output.dat
false
false echo foo
false exit 1
famihug@hvn:/home/famihug%~/bin/leecher.py cat ~/bin/kq.txt  leftsquarebrc 0 rightsquarebrc 
faster your_program
fastqc -o $out_path --noextract -f -a -s -t -q $files1
fbosons_13window_
fc -W
fc -l -n -1
fc -l -n -1 xsel --clipboard
fcnArray = {@fcn1 @fcn2 @fcn3}
fconfigure stdout -b -u -f -f -e -r -i -n -g none
fetchkeys -t foo -F grep .fits xargs -P 1 -n 500 --replace {} cp -v -f -a {} /path/to/dir
fffffffffffffff
ffmpeg -f concat -i mylist.txt -c copy output.mkv
ffmpeg -i $0 -a -c -o -d -e -c libmp3lame -a -b 320 ${0%.m4a}.mp3
ffmpeg -i $a -a -r 44100 -a -b 80k $(basename -s.mp3 $a)  leftsquarebrc 80 rightsquarebrc .mp3 basename -s -. -m -p -3 $a
ffmpeg -i $a -a -r 44100 -a -b 80k ${a%.*}  leftsquarebrc 80 rightsquarebrc .mp3
ffmpeg -i $f awk -f add_durations.awk
ffmpeg -i $file -b -l -a -h -b -l -a -h -n -o -s -t -d -i -n $filename
ffmpeg -i $i -s -a -m -e -q $i.mp3
ffmpeg -i $input -c -: -v mpeg4 -v -t -a -g divx -s -a -m -e -q -a -s -p -e -c -t 16:9 -r 25 $output
ffmpeg -i $input -c -: -v mpeg4 -v -t -a -g divx -s -a -m -e -q -a -s -p -e -c -t 16:9 -r 25 $output
ffmpeg -i file.mp4 grep Duration awk {print $2} tr -d ,
ffmpeg -i file.mp4 grep Duration sed s/Duration: \(.*\), start/\1/g
ffmpeg -i filename
ffmpeg -i flvfile 1.mp3
ffmpeg -i infile.mp3 -s -s 11 outfile.mp3
ffmpeg -i input.avi -i subtitle.srt -m -a -p 0 -m -a -p 1 -c -o -d -e -c copy output.mkv
ffmpeg -i input.avi -v -c -o -d -e -c copy -a -c -o -d -e -c copy -s -s 00:00:00 -t 00:05:00 output1.avi
ffmpeg -i input.avi -v -f drawtext -v -c -o -d -e -c huffyuv -a -c -o -d -e -c copy output.mkv
ffmpeg -i input.avi -v -f drawtext -v -c -o -d -e -c libx264 -c -r -f 18 -a -c -o -d -e -c copy output.mkv
ffmpeg -i input.mkv -i subtitles.srt -c copy -c -: -s srt -m -e -t -a -d -a -t -a -: -s -: -s -: -1 language=eng -m -a -p 0 -m -a -p 1 -m -a -p -_ -m -e -t -a -d -a -t -a 0 output.mkv
ffmpeg -i input.mkv -s -s 00:00:00 -t 00:01:35 -c copy -m -a -p 0:0 -m -a -p 0:1 -m -a -p 0:2 -q -s -c -a -l -e -: -0 -: -V 0 -y out0.mkv
ffmpeg -i input.mp4 -v -f drawtext=enable='between(t,12,3*60)':fontfile=/usr/share/fonts/truetype/freefont/FreeSerif.ttf: text='Test Text' -a -c -o -d -e -c copy output.mp4
ffmpeg -i my video file.mov
ffmpeg -i out.mp4 -a -c -o -d -e -c copy -v -c -o -d -e -c copy final.mp4
ffmpeg -i rtsp://IP_ADDRESS/live.sdp -f image2 -u -p -d -a -t -e -f -i -r -s -t 1 img.jpg
ffmpeg -l -o -o -p 1 -i image.jpg -i audio.mp3 -c -: -a copy -c -: -v libx264 -s -h -o -r -t -e -s -t out.mp4
ffmpeg -l -o -o -p 1 -i image.jpg -i audio.wav -c -: -a aac -a -b 112k -c -: -v libx264 -s -h -o -r -t -e -s -t -s -t -r -i -c -t -2 out.mp4
ffmpeg -s -s 00:00:10 -t 1 -s 400x300 -i $1 -f mjpeg /home/zavids/rawvids/thumbs/$1.jpg
ffmpeg -s -s 00:00:10 -t 1 -s 400x300 -i $1 -f mjpeg /home/zavids/rawvids/thumbs/${1%.*}.jpg
ffmpeg -t 7200 -s 640x480 -f rawvideo -p -i -x -_ -f -m -t rgb24 -r 25 -i /dev/zero empty.mpeg
ffmpeg -y -i ${I} -a -c -o -d -e -c mp3 -a -r 22050 -f wav ${I/%.3gp/.mp3}
ffmpeg ...
ffmpeg ...
ffmpeg ...
ffmpeg2theora -v 6 -a 5 $filename mv $filename finished/
ffprobe video.mov grep Stream #0 awk {print $10}
fg
fg `jobs | iselect -a | grep -o  leftsquarebrc 0-9 rightsquarebrc *` jobs iselect -a grep -o  leftsquarebrc 0-9 rightsquarebrc *
fgrep  leftsquarebrc exclude-XYZ rightsquarebrc  -- $1 echo  leftsquarebrc XYZ rightsquarebrc 
fgrep -A 16 New USB device found /var/log/messages tail -n 16
fgrep -R -h -o $ some_dir wc -l
fgrep -R -h -o --include *.php $ some_dir wc -l
fgrep -c $$$$ $@
fgrep -f  leftanglebrc (awk '{print $1}' file1) file2 awk {print $1} file1
fgrep -f  leftanglebrc (awk '{print $3}' myfile) myotherfile awk {print $3} myfile
fgrep -f ./inputfile.txt ./lscommandoutput.txt xargs mkdir
fgrep -f first-file second-file
fgrep -f wanted_file_list.txt
fgrep -h -r --include */filename.txt LINE_TXT $1
fgrep -n go.gle.com  inFile
fgrep -q =  sf echo blanks there
fgrep -r -h LINE_TXT $1
fgrep -r -l -f messages.txt dir
fgrep -v -f FILE2 FILE1
fgrep -v -x -f before.txt after.txt less
fgrep -v http
fgrep -w -f first-file second-file
fgrep -x -f b.txt -v a.txt
fgrep .* file
fgrep cat text.txt fgrep dog
fgrep idle $outputDir/check_status_update_index.txt
fiji --headless --console HelloWorldMacro.ijm
fijiCmdText = /C "C:\Users\myAccount\Downloads\fiji (1)\ImageJ-win64.exe" -macro D:\fiji\macros\FFTBatch.ijm C:\Users\myAccount\Documents\Untitled005\ --headless
file
file
file $(locate example/file) locate example/file
file $(readlink -f $(type -p rename)) readlink -f $(type -p rename) type -p rename
file $(readlink -f $(type -p rename)) readlink -f $(type -p rename) type -p rename
file ${FILENAME} awk -F -: {print $NF}
file *
file *
file --mime
file --mime myfile.txt
file -0 * awk -F \0 $2 ~ /ASCII text/ {print $1 "\0"} xargs -0 chmod -x
file -b -i myfile.txt
file -i $myvid
file -i $myvid grep -q video echo $?
file -i $myvid grep nonesuch echo $?
file -i $myvid grep video
file . -t -y -p -e f -n -a -m -e *.png xargs cp -t destination
file /dev/*
file /tmp/:0
file InstructionManager.txt.*
file dataset.csv
file rightsquarebrc }
file sed -e s/.*///var/www/parsingdev/output//g -e s/.docx//g
file.log.131504
file.sh value1 value2
file.txt
file:///C:/repositories/repository
file:///Users/whateveryourusernameis/ports
file_exists filename echo Do your stuff...
filecount++
filename perl -e print scalar localtime((stat("$ENV{fn}")) leftsquarebrc 9 rightsquarebrc )
filename_20130104112845.txt
filename_listing_command grep -v -z -Z \.py$ filename_listing_command
filename_listing_command sed s/ leftsquarebrc ^\x0 rightsquarebrc *\.py\x0//g filename_listing_command
filepath_newstap.sh
files = `ls` ls
filter-data $(seq --format="0_%g.dat" 0 6 600) seq --format 0_%g.dat 0 6 600
find  leftsquarebrc -H rightsquarebrc   leftsquarebrc -L rightsquarebrc   leftsquarebrc -P rightsquarebrc   leftsquarebrc -D debugopts rightsquarebrc   leftsquarebrc -Olevel rightsquarebrc   leftsquarebrc path... rightsquarebrc   leftsquarebrc expression rightsquarebrc 
find  leftsquarebrc ... rightsquarebrc  -exec  leftsquarebrc commands rightsquarebrc  {} ;
find  leftsquarebrc ... rightsquarebrc  -exec ;
find  leftsquarebrc path rightsquarebrc   leftsquarebrc conditions to prune rightsquarebrc  -prune -o  leftsquarebrc your usual conditions rightsquarebrc   leftsquarebrc actions to perform rightsquarebrc 
find  leftsquarebrc whatever-files-you-want rightsquarebrc  xargs sed -i s/string/replacement/g
find ! -iname abc -exec rm -rf {} ;
find ! -iname abc -maxdepth 1 -depth -print0 sed $d xargs -0 rm -r
find ! -name . -maxdepth 1 -type d xargs -I {} find {}/{} -type d -maxdepth 1 xargs rmdir
find ! -name . -maxdepth 1 -type d xargs -I {} sh -c find {}/{} -maxdepth 1 | xargs -I  leftsquarebrc  rightsquarebrc  echo "mv  leftsquarebrc  rightsquarebrc  {}"
find $(APPLICATION_DIRECTORY) -iname *.py APPLICATION_DIRECTORY xargs -I file pyflakes file
find $(dpkg -L package_name) -name filename dpkg -L package_name
find $(echo $PATH | tr ':' ' ') -maxdepth 1 ( -type f -or -type l ) -name *user* -executable echo $PATH tr :  
find $(ls) -amin +120 -exec some command here ; ls
find $(pwd) -name .htaccess -exec grep -q RedirectMatch {} ; -print pwd
find $(pwd) -name YourProgram -exec dirname {} ; pwd read d cd $d ./YourPrgram
find $(pwd) -name YourProgram -exec dirname {} ; pwd read d cd $d pwd
find $(pwd)/ -type f pwd
find $1 ! ( -name .backup -prune ) ${@:2}
find $1 -maxdepth 1 -name *.sav wc -l
find $1 -name $2
find $1 -name IMG_*.JPG
find $1 -name IMG_*.JPG -exec cp {} $2 ;
find $1 -name filename.txt -exec fgrep LINE_EXT {} ;
find $1 -path /proc -prune -o -name $2 -print -exec grep -Hn $3 {} ;
find $1 -size +$2c -printf %f - rightanglebrc  %sn
find $1 -size +$2c read file echo $(basename "$file") - rightanglebrc  $(ls -lh "$file" | awk '{print $5}') basename $file ls -l -h $file awk {print $5}
find $1 -type d
find $1 -type d ! -perm /u+wx -perm /u+r -perm /g+r
find $1 -type f -mmin +1 -mmin -10
find $1 -type f -name *.c -exec bash -c gcc $0 -o ${0%.c}.o && echo $0 {} ;
find $1 -type f -name *.txt -exec cat {} +
find $1 -type f -name *.txt -exec cat {} ;
find $1 -type f -perm /111 -exec dirname {} ; sort -u
find $1 -type f -perm /111 -printf %hn sort -u
find $1 -type f -print0 xargs -0 cp -t $HOME/TestDirectory
find $1 -type f -size +$2k -exec rm {} ;
find $1 -type f -size +$2k -exec sh -c f={}; echo "removing $f"; rm $f {} ;
find $1 sort -f uniq -i -d -D
find $@ -exec chmod go-rwx {} ;
find $@ -type f -mmin +1 -mmin -10
find $@ -type f -name abc.txt
find $BASE_DIR -name *$PROC_NM
find $CATALOG -size +$SIZE -exec ls -1 {} +
find $CATALOG -size +$SIZE -exec ls -S1 {} +
find $CATALOG -size +$SIZE -exec ls -hlrt {} +
find $CATALOG -size +$SIZE -exec ls -t1 {} +
find $CATALOG -size +$SIZE -type f -exec ls -hlrt {} +
find $CurrentDir -type f -name $CurrentFile -mtime +$CurrentDay -exec cp {} $CurrentBackup ;
find $DBSBAKDIR -type f -mtime +4 -mtime -10 -exec echo rm -f {} ;
find $DIR ( ! -name . -prune ) -type d -exec java myProg {} ;
find $DIR -maxdepth 1 -type d -exec echo -n . ; wc -c
find $DIR -maxdepth 1 -type f -exec echo -n . ; wc -c
find $DIR -maxdepth 1 -type f -mtime -30 -exec cp {} $DEST/ ;
find $DIR -name *.jpg -o -name *.png -o -name *.gif -print
find $DIR -name master3* grep master3 rightanglebrc  xargs
find $DIR -type d xargs -n 1 find $PATH -lname
find $DIRTY_DIR -name .AppleDouble -exec rm -rf {} ;
find $DIR_TO_CLEAN -mtime +$DAYS_TO_SAVE -exec bash -c printf "Total: %d\n" $#; rm "$@" _ {} +
find $DIR_TO_CLEAN -mtime +$DAYS_TO_SAVE -exec bash -c printf "count=0; for f; do rm "$f" && (( count++ )); done; printf "Total: %d\n" $count _ {} +
find $DRIVE -mindepth 1 -depth -name found.??? -type d -exec rm -r {} ;
find $DRIVE -mindepth 1 -name found.??? -type d -prune -exec rm -r {} ;
find $E ! -type d -mtime -1 -exec cp -r --parents {} $B/$T ;
find $E -type f -mtime -1 -exec cp -r --parents {} $B/$T ;
find $FILEDIR -mtime +14 -delete
find $HOME -name *.txt -type f -not -path $HOME/newdir/* -print0 xargs -0 cp -t $HOME/newdir
find $HOME -type f -exec grep -Hn PROJECT_HOME {} ;
find $HOME/.junk -type f wc -l
find $INPUT_LOCATION -name *.pdf.marker -exec bash -c mv ${0%.marker} $0 $1 {} $OUTPUT_LOCATION ;
find $INPUT_LOCATION -name *.pdf.marker xargs -i bash -c mv ${0%.marker} $0 $1 {} $OUTPUT_LOCATION
find $LIB -name *.jar -printf %p: sed s/:$//
find $LIB_DIR -name *.jar -print tr \n :
find $LOCATION -name $REQUIRED_FILES -type f -mmin +360 -delete
find $LinkDest/ -not -path *$m_date* -xdev -depth -mindepth 1 -exec rm -Rf {} ;
find $MY_PATH -type f -name authuser-*
find $PATH -type l -xtype d -lname $DIR*
find $PWD -exec echo -n "{}"  ; tr \n  
find $PWD -name *.txt -exec bash -c cd $(dirname {}) && pwd && /mycmd {} ;
find $PWD -name *txt* ! -name *tmp*
find $PWD -name .* -prune -o -print
find $PWD -type f -name *.txt -printf %k %h/%fn sort -r -g
find $PWD -type f -name *.txt -printf %s %h/%fn sort -r -g
find $PWD sed -e s/^/"/g -e s/$/"/g tr \n  
find $PWD sed s/^/"/g sed s/$/"/g tr \n  
find $ROOT_PATH -executable -name unittests_runner.exe -exec {} ;
find $SOURCEFOLDER -type f -exec sed -e s/\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  leftsquarebrc  rightsquarebrc *\ rightsquarebrc //g {}; -exec ln {} $ENDFOLDER/$TR_NEW_TORRENT_NAME/${basename} ;
find $SRCPATH/* wc -l
find $STARTDIR -name *.ps -print sed -e s/.ps$// xargs -l -i ps2pdf {}.ps
find $STORAGEFOLDER -name .todo -printf %h\n
find $STORAGEFOLDER -name .todo -printf %h\n uniq xargs ls -l
find $STORAGEFOLDER -name .todo -printf %h\n xargs ls -l
find $TARGET_DIR -regextype posix-extended -regex .*/$now.* -fprint $FILE_LIST
find $TEMP -name *.css -exec sh -c f="{}"; min "$f" && mv "${f%.css}.min.css" "$f" ;
find $TEMP -name *.js -and -not -name *.min.js -exec ...
find $TEST_DIR -type f -printf x wc -c
find $TRANSCODEDIR/* -type f -exec bash -c HandBrakeCLI -i "$1" -o "${1%.*}".mp4 --preset="$PRESET" __ {} ; -exec rm {} ;
find $WORK.../.history -type f -printf %T@\t%p\n sort -n -r cut -f -2 --
find $WORK.../.history -type f -printf %T@\t%p\n sort -n -r cut -f -2 -- xargs grep your_pattern
find $WORK.../.history -type f -printf %T@t%Tct%pn sort -n -r
find $WWWROOT -perm /u+w -user $WWWUSER -o -perm /g+w -group $WWWUSER grep -v $WHITELIST
find $YOUR_DIR -iname *.csv -exec cat {} ; -exec echo ;
find $YOUR_DIR -iname *.csv -exec sed 1d {} ; -exec echo ;
find $catalog -size +$size -type f -exec ls -1rt {} +
find $dir -maxdepth 1 -type d sort sed s/^/x\n/g zenity --list --title All albums : selected band --text Enter the band you want to listen to: --column Select --column Artist --radiolist --height 900 --width 200 echo $artDir
find $dir -maxdepth 1 -type f -delete
find $dir -maxdepth 1 -type f wc -l
find $dir -perm 777 -exec cp {} newLocation ;
find $dir -size 0
find $dir -size 0
find $dir -size 0 -print
find $dir -type -f size +$size -print0 xargs -0 ls -1 -h -s -S
find $dir -type d ! ( -readable -a -writable ) -printf %p\n
find $dir -type f ! -name *.txt -exec rm {} ;
find $dir -type f ( -perm -007 ) -print tee /dev/tty wc -l
find $dir -type f -name "$dir_$adresse_$ip_*"
find $dir -type f -name "${dir}_${adresse}_${ip}_*"
find $dir1 -type f wc -l
find $dir_name -size $sizeFile -printf %M %n %u %g %s %Tb %Td %Tk:%TM %pn
find $directory
find $directory -name *.c -o -name *.sh
find $directory_path -name $file_name wc -l
find $dirname -maxdepth 2 -type d
find $filename -mtime +5 -exec tar -cvz /home/myfoldertobackups -f {} ;
find $folderPath -name $ext largeRead
find $folder_root/ -name .git -prune -o -type f -print0 ...
find $homeDirData -type d -mmin +10 -print0 xargs -0 rmdir
find $i -type f
find $i -type f perl -l -n -e chomp(@files =  leftanglebrc  rightanglebrc ); my $p = 9; foreach my $f (sort { (stat($b)) leftsquarebrc $p rightsquarebrc   leftanglebrc = rightanglebrc  (stat($a)) leftsquarebrc $p rightsquarebrc  } @files) { print scalar localtime((stat($f)) leftsquarebrc $p rightsquarebrc ), "\t", $f; exit }
find $location -type f -size 0 -exec rm -i {} ;
find $musicdir -type f -print
find $musicdir -type f -print egrep -i \.(mp3|aif*|m4p|wav|flac)$
find $path ! -name $string*
find $someDir ( -iname *.jpg -o -name *.png -o -name *.gif ) -exec sh -c echo hello {} ;
find $some_directory -name .* ! -name . ! -name .. -delete
find $some_directory -type f -name .* -delete
find $some_directory -type f -name .* -exec rm {} ;
find $source ( -name *.c ) -or ( -name *.cpp -execdir gcc {} -o $output ; )
find $source ( -name *.c -or -name *.cpp ) -execdir gcc {} -o $output ;
find $sourcedir -maxdepth 2 -mindepth 2 -type f -exec bash -c HandBrakeCLI -i "$0" -o "'"$destdir"'/${0%.*}.mp4" --preset=AppleTV {} ; -print
find $target ! ( -name *.png -o -name *.txt ) -printf %f\n -delete
find $workingDir/testcases -type f ! -name *.* -perm -og+rx
find ${1:-.} ! -name .* -print set -e s; leftsquarebrc ^/ rightsquarebrc */;   ;g
find ${1:-.} -type f -maxdepth 1 -exec cat {} +
find ${DIR} -type f -name *.css -exec sed -n /\.ExampleClass.{/,/}/p {} +
find ${HOMEDIR} -name  leftsquarebrc sS rightsquarebrc potify.app
find ${INPUT_LOCATION} -name *.pdf.marker -exec sh -c echo mv $0 `dirname $0`/`basename $0 .marker` $1 {} ${OUTPUT_LOCATION} ;
find ${INPUT_LOCATION} -name *.pdf.marker -exec sh -c mv $0 `dirname $0`/`basename $0 .marker` $1 {} ${OUTPUT_LOCATION} ;
find ${INPUT_LOCATION} -name *.pdf.marker xargs -i bash -c -x pdf=`dirname {}`/`basename {} .marker`; leftsquarebrc  -e "$pdf"  rightsquarebrc &&{ mv {} "$pdf" "$0";} ${OUTPUT_LOCATION}
find ${PATH_TO_FILES} -name * * -exec bash -c DIR=$(dirname "{}" | sed "s/ /-/g" ); BASE=$(basename "{}"); echo mv -v \"$DIR/$BASE\" \"$DIR/$(echo $BASE | sed "s/ /-/g")\" ; sh rename-script.sh
find ${PATH_TO_FILES} -name * * -exec bash -c eval $(echo mv -v \"{}\" $(echo {} | sed "s/ /-/g")) ;
find ${ROOT}/au* -type f grep -v -f files_containing_list_of_ignore_directories
find ${SRC} -type f -level 0 -exec sh -c echo {} ; rm -f {} ;
find ${SRC} -type f -level 0 -print -exec rm -f {} ;
find ${direc leftsquarebrc $iterdir rightsquarebrc } $r_option -name *${exten leftsquarebrc $iterext rightsquarebrc } -exec echo rm {} ;
find ${dirs leftsquarebrc @ rightsquarebrc /#//path/with spaces/} -name *.gz -print0 xargs -0 mycmd
find ${searchpath} -type f -print0 xargs -0 grep -l -E ${string1}.*${string2}.*${string3}
find ( -cnewer .timestamp -o -newer .timestamp ) -type f -exec ./script.pl {} +
find ( -cnewer .timestamp -o -newer .timestamp ) -type f -exec ./script.pl {} ;
find ( -name *.en.php -o . -name *.fr.php ) -exec cat {} ; wc -l
find ( -name *.png -and -not -name *-hd.png ) -exec image-shadow {} 0x0 ;
find ( -name .git -o -name .gitignore -o -name Documentation ) -exec rm -rf {} ;
find ( -name .git -o -name .gitignore -o -name Documentation ) -prune -exec rm -rf {} ;
find ( -name .git -o -name .gitignore -o -name Documentation ) -prune -exec rm -rf {} ; true
find ( -name .git -o -name folder1 -o -name folder2 ) -prune -o -exec rm -rf {} ;
find ( -name CVS -or -name build -or -name classes -prune ) -or -mtime +10
find * -exec echo {} ;
find * -maxdepth 1 -type d -exec zip -r {}.zip {} ;
find * -name *_0VT0_* -prune -o -print
find * -perm -a+r
find * -type d egrep -v ^logs/|/logs/
find * -type f -name level(basic)-\ leftsquarebrc done\ rightsquarebrc 1.*
find * -type f -print
find * -type f -print -o -type d -prune
find * -type f xargs cat tr -d -c  leftanglebrc  wc -c
find * -type f xargs md5sum sort uniq -D -w -3 -2
find * xargs -t -l -I {} qmHandle -d -{ -}
find **path** -follow cat /tmp/symlinkFiles awk {print $4}
find *.class -fprint location.txt
find *.mkv -exec sh -c mv "$0" "${0%%.mkv}.avi" {} ;
find *.mp3
find *.txt xargs myParser
find *e* -type f -maxdepth 1 -size +0 -exec less {} ;
find *e* -type f -maxdepth 1 -size +0 xargs less
find +7
find -2 -print
find -E . -iregex .*/a_{1}b
find -E . -not -type d -and -not -regex \./exclude/.* -exec echo mv {} /wherever ;
find -E . -regex .*file-($a|$b).txt
find -E /somefolder -type f -iregex \./(.*\.error.*|second.*log|.*FFPC\.log)$
find -E /somefolder -type f -regex \./(.*\.error.*|second.*log|.*FFPC\.log)$
find -E ~/my-documents/ -iregex .*ABC_ leftsquarebrc 0-9 rightsquarebrc {3}.JPG -type f -exec cp {} ~/my-documents/archive/ ;
find -L . -name *.php xargs grep --color auto a_string
find -L . -name . -o -type d -prune -o -type l -exec rm {} +
find -L . -type f -name *.txt -exec bash -c echo "$0" "${0%/*}/PrependedTextHere${0##*/}" {} ;
find -L . wc -l
find -L ../Classes -name *.cpp -print
find -L /var/www/ -type l
find -L /var/www/ -xtype l
find -ctime +7 -print0 xargs -0 rm -v
find -exec
find -exec bash -c echo -n {}; grep -v dbsnp {} | wc  ;
find -exec bash -c file -b --mime-type {} | grep -q ^image/png$ ; -delete
find -exec bash -c file -b --mime-type {} | grep -q ^image/png$ ; -print
find -exec command {} ;
find -exec sh -c grep -q "$1" file || echo "$1" dummy {} ;
find -exec some_script {} ;
find -exec wc {} ;
find -execdir ipython nbconvert {} ;
find -f -name *.jsp -exec cp --parents {} /dest/path ;
find -g=x -type f
find -iname *.gif
find -iname *.gif
find -iname *.html scp $f remoteserver:$f break
find -iname *.jpg -execdir sh ~/watermark.sh {} ;
find -iname *.py -and -type f xargs sed -i -e /= *text()/ i new text
find -iname *.tgz -exec tar -zxvf {} ; -quit
find -iname *.txt -exec cat {} ; grep -o \w* awk {a leftsquarebrc $1 rightsquarebrc ++}END{for(k in a)print a leftsquarebrc k rightsquarebrc ,k} sort
find -iname /abc/*.txt
find -iname makefile -execdir make -f {} ;
find -ipath ./projects/insanewebproject
find -ipath ./projects/insanewebproject head -n 1
find -ipath projects/insanewebproject
find -maxdepth 1 ! -type d sort
find -maxdepth 1 -name *.data -print0 xargs -0 -n 1 -I % sh -c ./prog %  rightanglebrc  dir/%.bck
find -maxdepth 1 -regex ./ leftsquarebrc 0-9 rightsquarebrc * -print0 xargs -0 -I -{ -} mv {} newdir/{}
find -maxdepth 1 -type d
find -maxdepth 1 -type d -name *.y -mtime +`expr 2 \* 365` -exec mv {} {}.old ; expr 2 * 365
find -maxdepth 1 -type d -name *foo* awk NR==1
find -maxdepth 1 -type d -name *foo* awk {if(NR==1) print}
find -maxdepth 1 -type d -name *foo* head -n 1
find -maxdepth 1 -type f -exec md5sum {} ; awk {s=$2; $2=$1; $1=s;}1
find -maxdepth 1 -type f -exec md5sum {} ; sed s/ leftsquarebrc ^( rightsquarebrc *(\( leftsquarebrc ^) rightsquarebrc *\)) =/\1/
find -maxdepth 1 -type f -newermt Nov 22 ! -newermt Nov 23 -delete
find -maxdepth 1 -type f awk {printf "mv %s my_%s\n", $2, $2} FS=/ sh
find -maxdepth 1 -type f sort
find -maxdepth 1 -user username -exec mv {} ../ ;
find -maxdepth 2 -name Makefile -print -execdir make ;
find -maxdepth 2 -name Makefile.* -print -execdir make -f {} ;
find -maxdepth 4 -mindepth 4 -type d -iname VIP_Info* -printf $PWD/%Pn
find -mindepth 1 -maxdepth 1 ( -type f -and -not -name *1\.65* ) -delete
find -mindepth 1 -maxdepth 1 -printf %Tb %Td %TH:%TM %fn grep ^Dec sort -r
find -mindepth 1 -maxdepth 1 -type d -exec cat-txt {} ;
find -mindepth 2 -maxdepth 2 -name *.txt
find -mtime $TIME -exec mv {} $tmp_dir/ {};
find -mtime +7 -print grep -F -x -v -f file.lst
find -mtime 0 -not ( -name *.swp -o -path ./es* -o -path ./en* )
find -mtime 1 -regex  leftsquarebrc your_pattern_here rightsquarebrc  -exec rm -f {} ;
find -name ${nameArg//\*/\\*}
find -name * xargs perl -p -i -e s/MY_NAME/YOUR_NAME/g
find -name *. leftsquarebrc ch rightsquarebrc  -o -name *. leftsquarebrc CH rightsquarebrc  -o -name *.cc -o -name *.CC
find -name *.GIF -or -name *.gif
find -name *.c
find -name *.c -exec ctags {} +
find -name *.c xargs sed -i 0,/^*\/$/d
find -name *.class -printf %h\n sort -u
find -name *.en.php -o -name *.fr.php
find -name *.es.* -exec bash -c cp "$1" "${1/.es./.}" modlang {} ;
find -name *.html
find -name *.html -exec bash -c w3m "$1"  rightanglebrc  w3m-"$1".html.out w3mout {} ;
find -name *.html xargs sed -r -i -e s/href="( leftsquarebrc ^" rightsquarebrc *)\/index\.html"/href="\1\/"/gi
find -name *.jar xargs -n 1 jar tf
find -name *.jar xargs echo jar tf
find -name *.java ! -name Test.java
find -name *.jsp -exec sed -i 1i  leftanglebrc !-- {} -- rightanglebrc  {} ;
find -name *.mp3 -exec mv -v {} test/ ;
find -name *.nfo xargs awk -F - leftsquarebrc  - rightanglebrc  - leftanglebrc  - rightsquarebrc  {print FILENAME,$3}
find -name *.php -print0 xargs -0 cat
find -name *.txt -print0 xargs -0 -I {} cp {} .
find -name *?* -exec rename.sh {} ;
find -name *bar* xargs bash -i -c gi foo
find -name *bar* xargs tcsh -c gi foo
find -name .gitignore
find -name EXCLUDE1 -prune -o -name EXCLUDE2 -prune -o -type d -print
find -name EXCLUDE1 -prune -o -name EXCLUDE2 -prune -type d
find -name MY_NAME* -type d -maxdepth 1
find -name a -type d xargs rm -r
find -name bak -type d -exec du -ch {} ; +
find -name file_* -follow -type f -exec zcat {} ; agrep -d -E -O -E grep
find -name index.html -exec sh -c basename "$1" | tr " " _ _ {} ;
find -name index.yml -exec grep -i -H -C4 pattern {} ;
find -name lib*.so -exec cp {} ~/libs/ ;
find -name pattern_*.sh -printf \n wc -c
find -name testname.c -exec vi {} ;
find -name vendor -prune -o ( -name .git -o -name .gitignore -o -name Documentation ) -prune -exec rm -rf {} ; true
find -name whatever -exec grep --with-filename you_search_for_it {} ;
find -name zad*
find -newermt 2010-01-01
find -not -newermt -30 seconds -delete
find -not -perm -o=r
find -option2
find -perm -0004 -type f
find -perm -204
find -perm -o=r
find -perm -o=r -type f
find -print0 read -d  -r line echo -e -n -- leftsquarebrc ${line} rightsquarebrc --tt echo $line sed -e :t;N;s/\n/\\n/;bt sed s/\( leftsquarebrc  \o47()"&;\\ rightsquarebrc \)/\\\1/g;s/\o15/\\r/g
find -printf $PWD'/%p %Mn'
find -printf %11s %TY-%Tm-%Td %.8TT %pn
find -regex '\''.*/test.*'\'' -fprint out.txt
find -regex .*.(jpg|gif|png) -print0 xargs -r 0 mv --target ~/Pictures
find -regex .*.(png) sed -r s/.png//g xargs -I {} cp {}.png {}_copy.png
find -regex .*/.*\.html
find -regex \./ leftsquarebrc 0-9 rightsquarebrc + -type d
find -regex \./ leftsquarebrc 0-9 rightsquarebrc + -type d -exec mv -n -- {}/photo.jpg {}.jpg ; -empty -delete
find -regex \./ leftsquarebrc 0-9 rightsquarebrc + -type d -exec mv -nv -- {}/photo.jpg {}.jpg ; -empty -delete
find -regextype egrep -regex .*\.(avi|mp4|mkv|etc)
find -regextype posix-basic -regex .* leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc .* -print -delete
find -regextype posix-extended -iregex (.*/)?log4j-cnode1.*\.log\.(1 leftsquarebrc 0-1 rightsquarebrc | leftsquarebrc 1-9 rightsquarebrc )
find -size +100 -exec basename {} ;
find -type d
find -type d -exec bash -c svn info {}  rightanglebrc  /dev/null 2 rightanglebrc  /dev/null ; -prune -print
find -type d -exec bash -c svn info {} 2 rightanglebrc  /dev/null | grep URL ; -prune -print
find -type d -exec test -d {}/.svn ; -prune -print0 xargs -0 svn info grep -e \(Path\|URL\)
find -type d -regex .*py.*bin.*
find -type f
find -type f ! ( -name *.csv -o -name *.eps -o ... ) -print0 du -h -c --files0-from - tail -n 1
find -type f ! -name *\.c -exec rm -f {} ;
find -type f ! -regex .*\.\(csv\|eps\|jpg\|nc\|ncf\|pdf\|png\|tif\)$ -print0 du -h -c --files0-from - tail -n 1
find -type f -exec md5sum {} ; sort uniq --all-repeated separate -w 33 cut -c 35-
find -type f -exec perl -pi -e s/\bindex\.php3\b/index.php/g {} ;
find -type f -exec sed -i.bak s/){/) {/g {} +
find -type f -maxdepth 1 -writable
find -type f -name *.* sed s|.*\.|| sort -u
find -type f -name *.css* -exec echo FILE="{}"; mv ${FILE} ${FILE%\?*}  ; bash
find -type f -name *.csv xargs -I {} sh -c filen=`echo {} | sed 's/.csv//' | sed "s/.\///"` && egrep -i "foo" {}  rightanglebrc  ${filen}_foo.log
find -type f -name *.htm awk -F - leftsquarebrc  -/ - rightsquarebrc  BEGIN{OFS="-"}{ gsub(/^\.\//,"") ;print $1,$2, substr($4,3,2),substr($4,5,2),substr($4,8) }
find -type f -name *.mp3 -exec sh renamer.sh {} ;
find -type f -name *.php -exec sed -i :a;N;$!ba;s/ leftanglebrc ?\( leftsquarebrc  \n rightsquarebrc \|echo\)/ leftanglebrc ?php \1/g {} ;
find -type f -name *.png -printf %h0 uniq -z xargs -0 rm -r -f
find -type f -name *.txt -print0 read -d $0 f mv $f ${f%.txt}
find -type f -name *.txt read f mv $f ${f%.txt}
find -type f -name 2010* -printf %C@t%Pn sort -r -k -1 -, -1 head -3 cut -f 2-
find -type f -name ??????* -delete
find -type f -name error. leftsquarebrc 0-9 rightsquarebrc * -o -name access. leftsquarebrc 0-9 rightsquarebrc * -o -name error_log. leftsquarebrc 0-9 rightsquarebrc * -o -name access_log. leftsquarebrc 0-9 rightsquarebrc * -o -name mod_jk.log. leftsquarebrc 0-9 rightsquarebrc *
find -type f -name header.php xargs -n 1 dirname xargs -n 1 cp -f topscripts.php
find -type f -o ( ! -name . -type d -prune -false ) ! -empty
find -type f -printf %f  %s %pn sort
find -type f -regex .*\(\(error\|access\)\(_log\)?\|mod_jk\.log\)\. leftsquarebrc 0-9 rightsquarebrc +
find -type f -regex ./ leftsquarebrc ^/ rightsquarebrc +/images/ leftsquarebrc 0-9 rightsquarebrc +\.jpg$
find -type f -regextype posix-basic -regex ^.*/ leftsquarebrc ^/ rightsquarebrc * leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc  leftsquarebrc ^/ rightsquarebrc *$
find -type f -regextype posix-basic -regex ^.*/ leftsquarebrc ^/ rightsquarebrc * leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc  leftsquarebrc ^/ rightsquarebrc *$ -delete
find -type f -regextype posix-basic -regex ^.*/ leftsquarebrc ^/ rightsquarebrc * leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc  leftsquarebrc ^/ rightsquarebrc *$ -print -delete
find -type f -size +5c -delete
find -type f -wholename */lib/file.php sed s:/lib/file\.php$:: xargs -I dirs mv dirs /path/to/new/dir/
find -type f grep -P \w+-\d+x\d+\.\w+$ sed -r -e s/(\s)/\\\1/g xargs rm
find -type f grep -P \w+-\d+x\d+\.\w+$ xargs rm
find -type f grep -v /\.svn/ xargs grep -l roads
find -type f head -2 tail -1
find -type f parallel --tag eml-to-text {} | grep -o -n -b -f /tmp/list_of_interesting_words
find -type f perl -l -n -e chomp(@files =  leftanglebrc  rightanglebrc ); my $p = 9; @files = sort { (stat($b)) leftsquarebrc $p rightsquarebrc   leftanglebrc = rightanglebrc  (stat($a)) leftsquarebrc $p rightsquarebrc  } @files; print scalar localtime((stat($files leftsquarebrc 0 rightsquarebrc )) leftsquarebrc $p rightsquarebrc ), "\t", $files leftsquarebrc 0 rightsquarebrc 
find -type f xargs -i sed -i -e s/dev/prod/g {}
find -type f xargs grep foo
find -type l -print0 xargs -0 ls -l -d grep Dropbox
find -whatever -exec sh -c whatever you did in -exec before {}; other thing {} ;
find -whatever -printf mv %p destdir; ln -s destdir/%f %h\n sh
find -wholename *.txt xargs awk /foo/{print FILENAME; gsub(/foo/,"bar");print}
find -wholename *.txt xargs awk /foo/{print FILENAME; gsub(/foo/,"bar")}1
find -wholename *.txt xargs sed -n /foo/p;s/foo/bar/gp
find -xtype l -delete
find .
find .
find .
find .
find .
find . ! ( -name bootstrap -prune -o -name *.js ! -name *.min.js -o -name *.css ! -name *.min.css )
find . ! -empty
find . ! -iname customer_rows*
find . ! -name *.* -exec cp -t /your/destination/dir/ {} +
find . ! -name *.* -exec cp {} /your/destination/dir/ ;
find . ! -name *.* -type f -exec mv {} {}.mp3 ;
find . ! -name *.gz -size +100M -exec gzip {} ;
find . ! -name . -prune
find . ! -name .* -type f -maxdepth 1 -printf x wc -c
find . ! -name .* -type f wc -l
find . ! -newer $COMP ! -name $COMP
find . $iname -exec grep text {} ;
find . ( ! -user pieter -o ! -group www-data ) -print0
find . ( -iname *.hh -o -iname *.h ) -exec ...
find . ( -iname *hs* -a -iname *foo* ) -exec grep foo {} +
find . ( -name *.123 -a -print ) -o ( -name 123.* -a -print )
find . ( -name *.csv -or -name *.fmt ) -print0 xargs -0 tar -c -f pakage1.tar
find . ( -name *.dat -o -name *.txt )
find . ( -name *.extension1 -o -name *.extension2 ) -type f -delete
find . ( -name *.m -or -name *.h ) -print0 xargs -0 wc -l
find . ( -name *.mpeg -o -name *.mkv -o -name *.avi -o -name *.mov ) -size +1073741824
find . ( -name *.php -or -name *.html ) -exec sed -i /./,$\!d {} ;
find . ( -name *.rar -and -not -name *.part*.rar ) -or -name *.part01.rar xargs -I {} unrar x {}
find . ( -name *.tcl -o -name *.itcl -o -name *.db ) -exec sed -i /abc/s/abc/cba/g {} +
find . ( -name *a -o -name a* ) -printf %p %sn
find . ( -name .snapshot -prune -o -name *.foo ) -print
find . ( -name Dir2 -o -name Dir3 ) -prune -o -name Dir1 -type d
find . ( -type d ! -name . -prune ) -o ( bit you want to look for
find . ( -type d -o -type f ) -name somefile
find . ( -type d -perm /u+r -o -type d -perm /u+x -o -type f -perm /u+r )
find . ( -uid $UID -a ! -group $UID ) -type f -ls
find . -amin -200 -regex .*$rand_int.*
find . -cmin -5
find . -delete
find . -depth -name * * -exec ./move.sh {} ;
find . -depth -name *a_* -execdir bash -c mv "$0" "${0//a_/b_}" {} ;
find . -depth -name *foo* -execdir bash -c for f; do mv -i "$f" "${f//foo/bar}"; done bash {} +
find . -depth -name *foo* -execdir bash -c mv -i "$1" "${1//foo/bar}" bash {} ;
find . -depth -name *from_stuff* -execdir sh -c mv {} $(echo {} | sed "s/from_stuff/to_stuff/") ;
find . -depth -name __temp__* -exec rm -rf {} ;
find . -depth -name `*.zip` -exec /usr/bin/unzip -n {} ; -delete *.zip
find . -depth -name `*.zip` -exec /usr/bin/unzip -n {} ; -exec rm {} ; *.zip
find . -depth -name `*.zip` -exec rm {} ; *.zip
find . -depth -type d ! -name . -exec sh -c mv "$0" "$0.$(date "+%H%M%S%N")" {} ;
find . -depth -type d -name foo -print read echo svn mv $REPLY `dirname $REPLY`/bar dirname $REPLY
find . -depth -type d -name thefoldername* -exec mv {} newfoldername ;
find . -depth read LONG basename $LONG tr  leftsquarebrc :lower: rightsquarebrc   leftsquarebrc :upper: rightsquarebrc  dirname $LONG  leftsquarebrc  ${LONG} != ${DIR}/${SHORT}  rightsquarebrc  mv ${LONG} ${DIR}/${SHORT}
find . -empty -type d -delete
find . -exec arg0 arg1 arg2 ... ;
find . -exec arg0 arg1 arg2 ;
find . -exec bash -c file "$1" | grep "image data" | grep -iv JPEG && convert "$1" -resize 50% "${1%.*}.jpg" {} {} ;
find . -exec chown ${USER}:${USER} {} +
find . -exec cmd -option1 -option2 -- {} +
find . -exec echo /{} ;
find . -exec echo `echo "{}" | sed 's/./foo/g'` ; echo {} sed s/./foo/g
find . -exec grep -H string-to-find {} ;
find . -exec grep -l -e myregex {} ;
find . -exec grep -l -e myregex {} ;
find . -exec ls -dl {} ; awk {print $3, $4, $9}
find . -exec printf %s\0 {} ; nul_terminated tail -n 2
find . -exec sed -e s/2009/2010/g {} ;
find . -exec sed -f sed.s -i  {} ;
find . -exec sed -r -e s/(^.*)Copyright \(c\) 2008 - 2009/\1Copyright (c) 2008 - 2010/g {} ;
find . -exec sed -r -i -e s/(^.*)Copyright \(c\) 2008 - 2009/\1Copyright (c) 2008 - 2010/g {} ;
find . -exec stat -f %m {} ; sort -n -r head -1
find . -exec touch -t 201007162310.00 {} +
find . -iname *$1* -exec ack-grep $2 {} +
find . -iname *.* -type f -print0 read -d $0 file cp $file $file.bak
find . -iname *.cpp read filename grep --with-filename \ leftsquarebrc  leftsquarebrc 01 rightsquarebrc \ rightsquarebrc  $filename
find . -iname *.java -exec ./fnfs2lc.sh {} +
find . -iname *.java -exec ./fnfs2lc.sh {} ;
find . -iname *.mov read line mv $line OUTPUTDIR/
find . -iname *.php -exec sed -i.bak / leftanglebrc !DOCTYPE/ i $text {} +
find . -iname *.php -type f -print0 read -d $0 file cp $file $file.bak
find . -iname *.php xargs -n 1 awk {a=$0;}END{if(!a)print FILENAME}
find . -iname *.php xargs chmod +x
find . -iname *.php~ mv ${D} /mydir
find . -iname *.py xargs pcregrep -M _name.*\n.*_description
find . -iname *.sln -print xargs cygstart
find . -iname *Advanced*Linux*Program* -exec sh -c "$0" "$@" & kpdf {} ;
find . -iname *FA -exec ls {} ; sort xargs -n 1 sed -n 13p
find . -iname *FooBar* -exec printf %s\0 {} ; nul_terminated tail -n 2 xargs -I {} -0 cp {} dest
find . -iname *dbg* -exec rename _dbg.txt .txt {} ;
find . -iname *file* read -r i cp $i temp/
find . -iname *foobar* -exec cp {} ~/foo/bar ;
find . -iname *hs* -exec ./list-foo +
find . -iname *html xargs egrep -i -w -l (word1.*word2|word2.*word1)
find . -iname *jpg -exec /your/image/conversion/script.sh {} +
find . -iname *jpg -exec /your/image/conversion/script.sh {} ;
find . -iname *jpg.jpg sed -e s/\(.*\)jpg\.jpg$/mv & \1.jpg/ sh
find . -iname *png -print0 xargs -0 --max-procs 4 -n 1 pngout
find . -iname *py -exec grep text {} ;
find . -iname .#* -print read -r i foobar $i
find . -iname .#* -print0 read -r -d  i foobar $i
find . -iname .svn -exec rm -rf {} ;
find . -iname 2010-06* -maxdepth 1 -type d -print0 xargs -0 -I -{ -} find {} -iname *.jpg
find . -iname ABC* wc -l
find . -iname f????.a -exec mv {} {}.img ;
find . -iname thumbs.db -exec rm -rfv {} +
find . -inum rm -i {} ;
find . -ipath */abc/*.txt
find . -ipath */fetch/evs/*.ev -exec grep -L -e ' Error {} ;
find . -ipath */fetch/evs/*.ev -exec sh -c grep -L -e "' Error" {} ;
find . -iregex .*(_web|_thumb).(jpg|png|bmp) -delete
find . -iregex .*\(mp3\|mp4\|exe\) -printf %f\0 xargs -0 dosomething
find . -iregex .*\(mp3\|mp4\|exe\) -printf %f\n
find . -iregex .*\.h$
find . -iregex .*html? -printf %P\0 xargs -0 sed -i -E -e s:(http|https)://(www.|)${domain} leftsquarebrc ?/ rightsquarebrc ::g
find . -iregex ./\(EA\|FS\)_.*
find . -ls -name *.app -prune
find . -maxdepth 0 -name *em*
find . -maxdepth 1 ! -type l ! -iname .*
find . -maxdepth 1 ! -type l ( ! -iname .* ) -exec echo {} ;
find . -maxdepth 1 -inum $number
find . -maxdepth 1 -iregex the_regex -size +32M -printf Viseo over 32 MB (size %s): %h/%f
find . -maxdepth 1 -mindepth 1 -type f -name *-foo-bar.txt sed s/-foo-bar.txt// xargs -I -{ -} mv {}-foo-bar.txt {}.txt
find . -maxdepth 1 -mindepth 1 -type f -not -name *${EXEC_DATE}* -print0
find . -maxdepth 1 -name *$pattern*xlsx -type f -exec mv {} $destination +
find . -maxdepth 1 -name *.csv -exec ruby importer.rb {} ;
find . -maxdepth 1 -name *.hash -printf -x0%p0 xargs -0 md5deep -r * -e
find . -maxdepth 1 -name *.txt -exec data {} ;
find . -maxdepth 1 -newer $1
find . -maxdepth 1 -not -name $name_fasta -not -name letsgo.sh -delete
find . -maxdepth 1 -not -name .repo -not -name out -not -name release -type d
find . -maxdepth 1 -perm $permission -exec $* {} ;
find . -maxdepth 1 -perm -111 -type f
find . -maxdepth 1 -perm 644 -exec ls -ld {} ;
find . -maxdepth 1 -regex \./ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc p\.pdb xargs -I _IN_ csh -c program _IN_ `echo _IN_ | sed -e s/p/h/`
find . -maxdepth 1 -type -f -delete
find . -maxdepth 1 -type d ! -name . cp a.txt $DEST
find . -maxdepth 1 -type d -cmin -60 -print egrep -v ^(\.|\.\.)$ sed s/..//
find . -maxdepth 1 -type d -cmin -60 -printf %fn egrep -v ^(\.|\.\.)$
find . -maxdepth 1 -type d -exec ls -ld {} ;
find . -maxdepth 1 -type d -exec mkdir -p {}/converted ;
find . -maxdepth 1 -type d -name  leftsquarebrc ^. rightsquarebrc ?* -printf %f -quit
find . -maxdepth 1 -type d -regex .*/ leftsquarebrc 0-9 rightsquarebrc *
find . -maxdepth 1 -type f
find . -maxdepth 1 -type f
find . -maxdepth 1 -type f
find . -maxdepth 1 -type f ! -empty
find . -maxdepth 1 -type f ! -iname *.pdf -delete
find . -maxdepth 1 -type f -and ( -iname blah.* -or -iname foo.* ) -print0 xargs -0 -I {} mv {} ~/target/dir
find . -maxdepth 1 -type f -and -iname blah* -print0 xargs -0 -I {} mv {} ~/target/dir
find . -maxdepth 1 -type f -ctime -12 -delete
find . -maxdepth 1 -type f -exec echo {} ;
find . -maxdepth 1 -type f -exec grep $@ {} +
find . -maxdepth 1 -type f -exec sed -i 1i #comment {} ;
find . -maxdepth 1 -type f -exec sed -i s/abc/abcd/g {} ;
find . -maxdepth 1 -type f -executable -printf %T@ %p\n sort -n tail -1 cut -f -2 -- -d - 
find . -maxdepth 1 -type f -iname *.xml -exec xmllint --format {} --output formatted/{} ;
find . -maxdepth 1 -type f -iname *.xml xargs -I {} xmllint --format {}
find . -maxdepth 1 -type f -mtime -1
find . -maxdepth 1 -type f -name *.JPG mv $x ${x%.JPG}.jpg
find . -maxdepth 1 -type f -name *.JPG mv $x `echo $x|sed 's/JPG/jpg/g'` echo $x sed s/JPG/jpg/g
find . -maxdepth 1 -type f -name *.java -newermt 2012-10-16 ! -newermt 2012-10-18 -exec cp {} /home/user/dstFolder/ ;
find . -maxdepth 1 -type f -name *.pdf -exec cp -f {} ~/github/maps/fichesPedago/ ;
find . -maxdepth 1 -type f -name *.txt -exec sed -i s/.*/\L&/ {} +
find . -maxdepth 1 -type f -newermt 2013-10-08 ! -newermt 2013-10-11
find . -maxdepth 1 -type f -newermt Nov 22 ! -newermt Nov 23 -exec echo {} +
find . -maxdepth 1 -type f -print0 grep -z ${DAYTWOPREV} tar -c -v -f archive.tar --null -T /dev/stdin
find . -maxdepth 1 -type f -printf %P, sed -e s/,$/\n/
find . -maxdepth 1 -type f -printf %f\n
find . -maxdepth 1 -type f -printf %st%fn
find . -maxdepth 1 -type f parallel --gnu wc -l awk BEGIN {n=0} {n += $1} END {print n}
find . -maxdepth 1 -type f xargs -n 1 -P 4 wc -l awk BEGIN {n=0} {n += $1} END {print n}
find . -maxdepth 1 -xdev -type f -exec sed -i /teststring/Id {} ;
find . -maxdepth 2 -type f
find . -maxdepth 2 -type f -exec ls -l {} ;
find . -mindepth 1 -maxdepth 1 ! -name *.jar -delete
find . -mindepth 1 -maxdepth 1 ! -name *.jar sort
find . -mindepth 1 -maxdepth 1 ! -type d ! -name *.jar -exec rm {} ;
find . -mindepth 1 -maxdepth 1 ! -type d ! -name *.jar -print0 xargs -0 -r rm -f
find . -mindepth 1 -maxdepth 1 ! -type d ! -name *.jar -print0 xargs -0 rm -f
find . -mindepth 1 -maxdepth 1 -name cookbooks -prune -o -exec rm -rf {} +
find . -mindepth 1 -maxdepth 1 -not -empty -type d
find . -mindepth 1 -maxdepth 1 -type d
find . -mindepth 1 -maxdepth 1 -type f -printf %Pn sed s/-.*//g sort -u
find . -mindepth 2 -name * -exec sh -c sed -i "s,PBD FolderName,PBD $(echo $(basename $(dirname {})))," {} ;
find . -mindepth 2 -type d -mtime 3 cd $dir zip ../$(basename "$dir") * basename $dir cd rm -r -f $dir cd
find . -mindepth 2 -type f -size +0 cut -d -/ -f 2 uniq
find . -mmin +10
find . -mtime +0 -printf %f\n
find . -mtime +0 -printf %f\n -type f
find . -mtime +0h55m
find . -mtime +180 -exec du -ks {} ; cut -f 1 awk {total=total+$1}END{print total/1024}
find . -mtime +3 -exec rm {} ;
find . -mtime +90 -exec zip zipped.zip {} +
find . -mtime +90 -exec zip zipped.zip {} + mv zipped.zip /var/ARCHIVES
find . -mtime -1
find . -mtime -1
find . -mtime -1
find . -mtime -1 ! -name .DS_Store -type f -exec basename {} ;
find . -mtime -1 ! -name .DS_Store -type f -printf %f\n
find . -mtime -1 -exec cat {} ;
find . -mtime -1 -mmin +5 -name *.tmp -type f -print0
find . -mtime -1 xargs tar --no-recursion -c -z -f myfile.tgz
find . -mtime -1.5 xargs tar --no-recursion -c -z -f myfile.tgz
find . -mtime -5 ( -name *.h -o -name *.txt )
find . -mtime -90 -exec cp {} targetdir ;
find . -mtime 0 ( -name *.php -o -name *.xml -o -name *.phtml )
find . -mtime 0 -name *XML* -exec ls {} ; unzip -l $i awk -F -. {if ($2=="XML") print $0} wc -l paste -s -d -+ bc
find . -name #*# -exec rm -i {} ;
find . -name $1 -type f -exec grep -i $2 {} ;
find . -name ${input}
find . -name * -exec command arguments {} ;
find . -name * -type f xargs grep -l xyz xargs sed -i s/'${line}'/'${rep}'/g
find . -name *$n*
find . -name *-GHBAG-* -exec bash -c mv $0 ${0/GHBAG/stream-agg} {} ;
find . -name *. leftsquarebrc ch rightsquarebrc  -print xargs grep -H main
find . -name *. leftsquarebrc ch rightsquarebrc  -print xargs grep -H main cut -d : -f 1
find . -name *. leftsquarebrc ch rightsquarebrc  wc -l
find . -name *. leftsquarebrc chyl rightsquarebrc  -print0 xargs -0 grep -n magic_name /dev/null
find . -name *. leftsquarebrc chyl rightsquarebrc  xargs grep -n magic_name /dev/null
find . -name *. out -exec grep -ci search_string {} +
find . -name *.123 -o ( -name 123.* -a -print )
find . -name *.123 -o -name 123.* -a -print
find . -name *.123 -o -name 123.* -print
find . -name *.?pp -exec perl -0777 -pi -e s/(#include "my.hpp"\n)((#include .*\n)*)/$2$1/g {} ;
find . -name *.VER -mtime +31 -mtime -62 -exec mv {} /opt/html/62 ; -print
find . -name *.VER -printf %f awk -F -~ {for(i=1;i leftanglebrc =NF;i++)printf("%s\t",$i)}1
find . -name *.VER -printf %f awk -F -~ {print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\t"$8"\t"$9"\t"$10"\t"$11"\t"$0}
find . -name *.abc -exec sh -c NEWDIR=`basename "$1" .abc` ; mkdir "$NEWDIR" ; mv "$1" "$NEWDIR"  _ {} ;
find . -name *.abc -exec sh -c mkdir "${1%.*}" ; mv "$1" "${1%.*}"  _ {} ;
find . -name *.bak -exec sh -c mv -f $0 ${0%.bak} {} ;
find . -name *.bar -type f -exec sha256sum {} ;
find . -name *.bar -type f -exec sha256sum {} ; sort
find . -name *.bin -type f -print sort -r awk BEGIN{FS="."} a leftsquarebrc $2 rightsquarebrc  {next} {a leftsquarebrc $2 rightsquarebrc =1} 1 sort
find . -name *.bx -type f read NAME mv ${NAME} ${NAME%.bx}
find . -name *.c -exec sed -i your_command {} ;
find . -name *.c -exec wc -l {} ;
find . -name *.c -print xargs wc -l
find . -name *.c -print0 xargs -0 grep Unit32
find . -name *.c -print0 xargs -0 sed -i -. -b -a -k -e s/#includes"( leftsquarebrc ^" rightsquarebrc +/)"/#includes"L1"/
find . -name *.c -print0 xargs -0 wc -l
find . -name *.c -type f
find . -name *.c xargs grep Unit32
find . -name *.coords -mtime 0 -exec cat {} ;
find . -name *.coords -mtime 0 -print -exec cat {} ;
find . -name *.csv -exec ruby importer.rb {} ;
find . -name *.csv.gz -exec gzip -d {} ;
find . -name *.csv.gz -print0 xargs -0 -n 1 gzip -d
find . -name *.dat -exec sed -i s/"//g {} ;
find . -name *.doc xargs -d -n grep -r -H --color word
find . -name *.ear -exec ls -lh {} ;
find . -name *.erb -print sed p;s/.erb$/.haml/ xargs -n 2 html2haml
find . -name *.erb -print0 gsed -z p;s/.erb$/.haml/ xargs -0 -n 2 html2haml
find . -name *.ext ( -exec ./some_other_script $PWD/{} ; -o -print )
find . -name *.ext xargs sed -i s/a/b/g
find . -name *.extension -print0 xargs -0 -n 1 tail -n +2
find . -name *.extension xargs -n 1 tail -n +2
find . -name *.fal -exec eine_fal_macher {} Versuch.txt ;
find . -name *.foo -execdir bash -c  leftsquarebrc  leftsquarebrc  -f "${1%.*}.bar"  rightsquarebrc  rightsquarebrc  && rm "$1" - {} ;
find . -name *.gif -exec gif2bmp -i {} -o {}.bmp ;
find . -name *.gz -exec cp --target-directory=/home/itadmin/temp4 {} +
find . -name *.gz -exec cp {} /home/itadmin/temp4/{} ;
find . -name *.gz gzcat $i grep -q -e n1 -e n2 echo $i
find . -name *.gz read -r file zcat -f $file head -n 1
find . -name *.h -o -name *.txt
find . -name *.h -print0 xargs -0 rename s/(*)/\L\1/
find . -name *.hash -printf -x0%p0 xargs -0 md5deep -r * -e
find . -name *.hpp -o -name *.cpp xargs grep -l StuffToEdit
find . -name *.html
find . -name *.html -exec /bin/bash -c sed "s/DOCTITLE/$(grep -m1 '\'' leftanglebrc h1 rightanglebrc .* leftanglebrc /h1 rightanglebrc '\'' '\''{}'\'' | sed '\''s, leftanglebrc h1 rightanglebrc \(.*\) leftanglebrc /h1 rightanglebrc ,\1,'\'')/" "{}" ;
find . -name *.html -exec /bin/bash -c sed "s/DOCTITLE/$(sed -n '\''\, leftanglebrc h1 rightanglebrc .* leftanglebrc /h1 rightanglebrc ,{s, leftanglebrc h1 rightanglebrc \(.*\) leftanglebrc /h1 rightanglebrc ,\1,p;q}'\'' '\''{}'\'')/" "{}" ;
find . -name *.html -exec chmod 664 {} ;
find . -name *.html -exec grep -H string-to-find {} ;
find . -name *.html -exec sed -i s|{{\s*oldtag\s*}}|{{ newtag }}|g {} +
find . -name *.html -exec sed -i.BAK -n / leftanglebrc div id="left-col/,$ p {} ;
find . -name *.html -exec sed -i.bak s#http://version2\.staging\.myname\.com##g {} ; -print
find . -name *.html xargs perl -p -i -e s/find/replace/g
find . -name *.html.haml -exec sed -i s/restaurant_id/company_id/g;s/restaurants/companies/g;s/restaurant/company/g;s/Restaurants/Companies/g;s/Restaurant/Company/g {} ;
find . -name *.infected sed -e s#.*#diff & &# -e s#.infected## sh -x
find . -name *.info xargs wc -l
find . -name *.jar -exec sh -c jar -tf {} | grep -q foo ; -print
find . -name *.jar -print -exec ...
find . -name *.jar -print0 xargs -0 -I {} sh -c jar tf {} | grep Message.class &&  echo {}
find . -name *.jar xargs -n 1 jar -t -v -f
find . -name *.jar xargs echo tr   :
find . -name *.java -exec bash -c mv "$1" "${1%/*}"/test.java -- {} ;
find . -name *.java -exec sed -i -f sed.script {} +
find . -name *.java -execdir mv {} test.java ;
find . -name *.java -print0 xargs -0 grep -L -z regular_expression
find . -name *.java -print0 xargs -0 sed -i -n /GNU GENERAL PUBLIC LICENSE/{:a;N;/why-not-lgpl.html\ rightanglebrc ./!ba;N;s/.*\n//};p
find . -name *.java wc -l
find . -name *.java xargs du -c -h
find . -name *.java xargs perl -p -i -e -s -/ -f -o -o -/ -b -a -r -/ -g
find . -name *.java xargs sed -i s/foo/bar/g
find . -name *.jpg -exec bash -c f={}; f=${f/.\//}; echo mycommand -in "${f}" -out "${f%.*}.tif" --otherparam paramvalue {} ;
find . -name *.jpg -exec bash -c file="{}"; cp "$file" "${file%%.jpg}1.jpg" ;
find . -name *.jpg -exec sh -c mycommand -in $0 -out "${0%.*}.tif" --otherparam paramvalue {} ;
find . -name *.jpg -print0 tar -z -c -v -f images.tar.gz --null -T
find . -name *.jpg_m -execdir rename .jpg_m _m.jpg {} ;
find . -name *.js -exec bash -c name="{}"; cp "$name" "${name%.js}.ts" ;
find . -name *.js -exec echo {} ; -exec sed -i  s/_persistenceURL = "prod"/_persistenceURL = "qa"/g {} +
find . -name *.js -print0 xargs -0 grep -n .*loginError.*
find . -name *.js xargs sed -i -e /^;var/N;/^;varnO0l='=sTKpUG/d
find . -name *.kaks -type f -maxdepth 1 -exec grep -f A01/genes.txt {} ;
find . -name *.kaks -type f -maxdepth 1 -print0 xargs -0 grep -f A01/genes.txt
find . -name *.kaks -type f -maxdepth 1 xargs grep -f A01/genes.txt
find . -name *.less -exec lessc {} ../css/{}.css
find . -name *.less -exec sh -c plessc $0 $(dirname $0)/$(basename $0 less)css {} ;
find . -name *.log -exec bash -c x={} ; y=$(stat -c %y $x); echo cp $x ${x}_${y%% *}_bak  ;
find . -name *.m -exec grep  leftsquarebrc POEditor localizedStringWithKey: {} ; awk -F -" {print $2}
find . -name *.m4a -type f -exec bash -c ffmpeg -i "$0" -acodec libmp3lame -ab 320 "${0%.m4a}.mp3" {} ;
find . -name *.mk xargs grep .dat
find . -name *.mol2
find . -name *.mov -depth +1 -print0 xargs -0 -J % ln -s % .
find . -name *.mov -exec rm -f {} +
find . -name *.mp3 -exec cp -iv {} /my/dir ;
find . -name *.mp3 -maxdepth 0 -print0 sort -z xargs -0 cat
find . -name *.mp3 -print0 xargs -0 mplayer
find . -name *.mt0 -type f -exec sed -n 2{p;q} {} ; cut -f 2 -d - 
find . -name *.pdf -exec /path/to/pdftotext {} ;
find . -name *.pdf -exec cp --parents {} /new_path/ ;
find . -name *.pdf -exec echo Yes, we have a pdf: {} ; -o -exec echo No, not a pdf: {} ;
find . -name *.pdf -mtime +30 -mtime -46
find . -name *.pdf -print
find . -name *.pdf -print awk {cmd=sprintf("pdftotext \"%s\"", $0);system(cmd);}
find . -name *.pdf -print0 xargs -0 -n 1 -I -f -o -o cp --parents foo /new_path/
find . -name *.pem -type f -execdir openssl x509 -in {} -noout -enddate ;
find . -name *.per ! -exec grep -q connection_id {} ; -print
find . -name *.php -exec chmod 755 {} ; -exec /bin/echo {} ; wc -l
find . -name *.php -exec sed -i /@category/d {} ;
find . -name *.php -exec sed -i s/www.fubar.com/www.fubar.ftw.com/g {} ;
find . -name *.php -exec sed -r -i.bak s#http(s?)://account.mysmallwebsite.com# leftanglebrc ?php echo $domainName;? rightanglebrc #g {} ;
find . -name *.php -mtime -14 -print xargs tar -c -v -f backup.tar
find . -name *.php -print0 xargs -0 -L 1 php -l
find . -name *.php -print0 xargs -0 grep -l ^M$
find . -name *.php -type f -exec sed -i s/hello/bonjour/ {} ;
find . -name *.php -type f -print0 xargs -0 sed -i -e s|if *($_GET leftsquarebrc  leftsquarebrc "' rightsquarebrc ( leftsquarebrc ^"' rightsquarebrc +) leftsquarebrc "' rightsquarebrc  rightsquarebrc ) *{|if(isset($_GET leftsquarebrc '1' rightsquarebrc )){|g --
find . -name *.php -type f -print0 xargs -0 sed -i -e s|if *($_GET leftsquarebrc  leftsquarebrc "' rightsquarebrc x leftsquarebrc "' rightsquarebrc  rightsquarebrc ) *{|if(isset($_GET leftsquarebrc 'x' rightsquarebrc )){|g --
find . -name *.php -type f -print0 xargs -0 sed -i -e s|if *($_GET leftsquarebrc 'x' rightsquarebrc ) *{|if(isset($_GET leftsquarebrc 'x' rightsquarebrc )){|g --
find . -name *.php sed ...
find . -name *.php xargs perl -n -e $v=$1 if /\$RELEASE\s*=\s*\047( leftsquarebrc 0-9. rightsquarebrc +)\047/; $devlevel=$1 if /\$DEV_LEVEL\s*=\s*\047( leftsquarebrc 0-9. rightsquarebrc +)\047/; if (defined $v && defined $devlevel) { print "$ARGV: Release=$v Devlevel=$devlevel\n"; last; }
find . -name *.php xargs wc
find . -name *.php xargs wc -l
find . -name *.pl xargs grep /local -s -l
find . -name *.png sed s#^.*/\( leftsquarebrc ^/ rightsquarebrc *\)/\( leftsquarebrc ^/. rightsquarebrc *\)\. leftsquarebrc 0-9 rightsquarebrc \+\.png$#\1 \2# sort -u
find . -name *.png xargs -I -{ -} echo mycommand {}
find . -name *.png xargs -t -I -{ -} sh -c mycommand {}
find . -name *.py -exec grep -nH main() {} ;
find . -name *.py -exec grep -nHr $1 {} ;
find . -name *.py -exec svn add --parents {} ;
find . -name *.py -print0 xargs -0 sed -i -e s/\s\s*$//
find . -name *.py xargs sed -i  s/organizations/organisations/g
find . -name *.py xargs sed -i s/foo/foobar/g
find . -name *.pyc -delete
find . -name *.pyc -exec rm -rf {} ;
find . -name *.pyc -exec sh -c pycdc {}  rightanglebrc  {}_dec ;
find . -name *.qux -type f -print0 du -h --files0-from
find . -name *.rb -type f
find . -name *.sh -exec chmod +x {} ;
find . -name *.sql awk { print "source",$0 } mysql --batch
find . -name *.svn -print0 xargs -0 -I -{ -} rm '{}'
find . -name *.t1 -exec bash -c mv "$1" "$(sed "s/\.t1$/.t2/"  leftanglebrc  leftanglebrc  leftanglebrc  "$1")" - {} ;
find . -name *.t1 -exec rename s/\.t1$/.t2/ {} ;
find . -name *.tar.gz -exec bash -c d=$(dirname "{}") && b=$(basename "{}") && cd "$d" && tar zxvf "$b" ;
find . -name *.tar.gz -execdir tar zxvf {} ;
find . -name *.tex
find . -name *.tex
find . -name *.txt
find . -name *.txt -exec bash -c cd $(dirname {}) && pwd && /mycmd $(basename {}) ;
find . -name *.txt -exec cat -- {} ; wc -l
find . -name *.txt -exec data {} ;
find . -name *.txt -exec dd if=source of={} oflag=append conv=notrunc ;
find . -name *.txt -exec dirname {} ;
find . -name *.txt -exec file {} +
find . -name *.txt -exec ls -l {} ;
find . -name *.txt -exec sed -i s/Coke/Pepsi/g {} ;
find . -name *.txt -or -name *.html -exec grep -oP \b leftsquarebrc A-Za-z0-9_. rightsquarebrc +\. leftsquarebrc A-Za-z0-9 rightsquarebrc {1,4}\b {} ; awk -F -. { print "." $(NF) } sort -u
find . -name *.txt -print -exec awk $4 ~ /NM/{ sum += $2 } END{ print sum } {} ;
find . -name *.txt -print -exec awk $9 != "" && n  leftanglebrc  10 {print; n++} {} ;
find . -name *.txt -print xargs egrep foo /dev/null
find . -name *.txt -print0 xargs --null -n 1 awk $4 ~ /NM/{ sum += $2 } END{ print sum }
find . -name *.txt -print0 xargs -0 egrep foo /dev/null
find . -name *.txt -print0 xargs -0 grep word
find . -name *.txt -print0 xargs -0 svn ps svn:eol-style native
find . -name *.txt parallel grep -i -l iso-8859-1 parallel iconv -f ISO-8859-1 -t UTF-8 {}  rightanglebrc  {}.converted
find . -name *.txt read thefile mv -v $thefile ${thefile%-*}
find . -name *.txt xargs -I -{ -} awk -F -, NF!=5{print FILENAME;exit;} {}
find . -name *.txt xargs cat awk -f script.awk
find . -name *.txt xargs rm
find . -name *.txt xargs rm
find . -name *.txt xargs sed -i s/Coke/Pepsi/g
find . -name *.txt.* -print -exec zip {}.zip {} ; -exec mv {}.zip {} ;
find . -name *.undo -ls awk {total += $7} END {print total}
find . -name *.utv xargs egrep -l ACCOUNT NO: +700  /home/me/output.txt
find . -name *.wav.gz xargs rename -v s/abcd124*/abcd1234$1/
find . -name *.xib -exec bash -c f='{}' ; echo ${f%.xib}.strings ;
find . -name *.xib sed s/.xlib$/.strings/
find . -name *.xls -exec cp ....
find . -name *.xml -exec cp -a -t ~/Desktop/test/ --parents {} +
find . -name *.xml -type f xargs rm -f
find . -name *.xml xargs -I {} sh -c grep -H FOO {}
find . -name *.xml xargs java XMLBeautifier
find . -name *.xvi.txt sed s/ leftsquarebrc 0-9 rightsquarebrc \+.xvi.txt$/\\&/ sort -t -' -k 2 sed s/\\//
find . -name *.xvi.txt sort -t -. -k 3 -n
find . -name *.zip -exec script.sh {} ;
find . -name *.zip -exec sh -c unzip -d "`dirname \"{}\"`" "{}" ;
find . -name *.zip -exec sh -c unzip -d `dirname {}` {} ;
find . -name */function.php -print xargs sed -i s/foo/bar/g
find . -name *20120805.gz -exec zcat {} ;
find . -name *A.jpg -exec bash -c old="$0";new=${old/A.jpg/A@2.jpg};echo convert "$old" -resize 400x400 "$new" {} ;
find . -name *Source*.dat -exec sh -c cp "$1" "$2/$RANDOM.dat" -- {} $INBOUND ;
find . -name *TXT wc -l
find . -name *VER awk -F -~ {print $11} sort uniq -c
find . -name *\(*\) -exec bash -c mv "$1" "$(sed "s/  leftsquarebrc ^  rightsquarebrc *$//" leftanglebrc  leftanglebrc  leftanglebrc "$1")" - {} ;
find . -name *\(*\) -exec rename s/  leftsquarebrc ^  rightsquarebrc *$// {} ;
find . -name *_(*) -type f -exec rename s/_\((\d+)\)$/$1/ {} +
find . -name *abc*
find . -name *abc* -path *src*
find . -name *abc* -print
find . -name *abc* -print xargs some_command_that_takes_filenames_as_arguments
find . -name *bills* -exec grep -H put {} ;
find . -name *css -exec sed -i  s/old_link/new_link/g {} ;
find . -name *foo -print0 perl -n -0 -l -e print;s/foo/foo2/;print xargs -0 -n 2 echo bar
find . -name *html -print0 xargs -0 du -s -h -c
find . -name *html.erb -exec sh -c echo html2haml "{}" "$(echo "{}" | sed 's/\.erb/\.haml/')" ;
find . -name *html.erb -exec sh -c html2haml "{}" "$(sed 's/\.erb/\.haml/' leftanglebrc  leftanglebrc  leftanglebrc "{}")" ;
find . -name *mobile*
find . -name *mobile*
find . -name *mobile*
find . -name *pattern.txt -maxdepth 1 -type f ( -mmin -15 -a -mmin +5 )
find . -name *php -exec grep -H abc {} ;
find . -name *php -print xargs grep abc
find . -name *php -print0 xargs -0 grep -H abc
find . -name *php -print0 xargs -0 grep abc /dev/null
find . -name *php -type f -exec ls -l {} ;
find . -name *png -exec bash -c base64 {}  rightanglebrc  {}.txt ;
find . -name *show1* -exec cp {} /mnt/main/data/tv/Show1 ;
find . -name *tablet* -exec /path/to/script {} ;
find . -name *tablet* -exec sh -c new=$( echo {} | sed "s/tablet/mobile/" ) && mv {} $new ;
find . -name *test*
find . -name *test*
find . -name *test.c
find . -name *txt xargs cat
find . -name *zip unzip -o $i *PSU* -d psutmp/
find . -name ... -ls
find . -name ... -mtime +3 -exec rm +
find . -name ./td/*.c -exec sed -i s/:::/::/g {} ;
find . -name .DS_Store -print0 xargs -0 git rm --ignore-unmatch
find . -name ._* -print0 xargs -0 rm -r -f
find . -name .git xargs dirname pushd $d git status popd
find . -name .git* -prune -o -type f -print
find . -name .htaccess -exec sed -i  s/RedirectMatch/#RedirectMatch/g {} ;
find . -name .snapshot -prune -o -name *.foo
find . -name .snapshot -prune -o -name *.foo -print
find . -name .svn -exec ls {} ;
find . -name .svn -exec rm -rf {} ;
find . -name 1.txt -exec dirname {} ;
find . -name 111.xml -exec bash -c awk '$0 ~ /"/ { print $0 }' {}  rightanglebrc  {}.NEW ;
find . -name 123*.txt -type f -exec bash -c mv "$1" "${1/\/123_//}" -- {} ;
find . -name AA* -mtime +60 -exec rm {} ;
find . -name FILE*TXT -mtime +1 -exec sh -c grep -H ^err "{}" || echo "{}:No error" ;
find . -name FILE_NAME grep PATERN $f tail -1
find . -name FOO -exec echo {} ./foo {} ;
find . -name FOO -exec echo {} ;
find . -name FOO* -execdir mv {} bar ;
find . -name Makefile -exec make -j3 -f {} ; tee result.txt
find . -name Makefile -print0 xargs -0 grep -n -H $ grep :235:
find . -name Myinput* -print0 parallel -0 -P 8 ./myscript {1}
find . -name Myinput* -print0 parallel -0 -P 8 nohup ./myscript {1}
find . -name README -exec head -1 {} ;
find . -name README -printf %T@\t%p\n sort cut -f 2-
find . -name README.txt
find . -name X.sql A.sql W.sql E.sql S.sql
find . -name \*.php -o -name \*.phtml -print0 xargs -0 svn propset svn:keywords Id
find . -name `.git` .git xargs dirname
find . -name a.c xargs -I $$ diff ~/good/a.c $$
find . -name abc* sed s/$/\tok/ column -t
find . -name activate
find . -name bak -type d xargs du -c -h
find . -name bar -type d -execdir mv {} baz ;
find . -name bobtest.c cattest.c snowtest.c
find . -name data*.txt -exec sed -i -e /-nan/d {} +
find . -name database.php -exec grep $dbname /dev/null {} +
find . -name f1.tex f2.tex
find . -name file -exec du --time {} +
find . -name file* -size 0 -print0 xargs -0 rm
find . -name file-$a.sh -o -name file-$b.sh
find . -name file_* -exec rename s/file_/mywish_/ {} ;
find . -name file_* -follow -type f -print0 xargs -0 zcat agrep -d -E -O -E grep
find . -name file_for_print*
find . -name file_for_print*
find . -name file_for_print* -exec cat {} ;
find . -name file_for_print* -print
find . -name file_for_print* -print -exec cat {} ;
find . -name filename -printf %TY:%Tm:%Td %TH:%Tm %h/%f\n sort
find . -name filename -type f -delete
find . -name foo.xml -exec xsltproc -o {} transform.xsl {} ;
find . -name foo.xml -print0 xargs -I {} -0 xsltproc -o {} transform.xsl {}
find . -name generator.yml -exec gedit {} +
find . -name generator.yml -print0 xargs -0 gedit
find . -name index.html -print xargs sed -i s/ leftanglebrc script rightanglebrc try.* leftanglebrc \/script rightanglebrc // fileName
find . -name index.html xargs sed -i .bak -e s# leftanglebrc !-- Added by HTTrack -- rightanglebrc  leftanglebrc meta http-equiv="content-type" content="text/html;charset=UTF-8" rightanglebrc  leftanglebrc !-- /Added by HTTrack -- rightanglebrc ##g
find . -name index.php xargs sed -i -. -b -a -k s:'.$siteUrl.':/:g
find . -name index.php xargs sed -i s/'.$siteUrl.'///g
find . -name index.php xargs sed -i s:'.$siteUrl.':/:g
find . -name mobile.1
find . -name myfile* -print xargs grep myword $1
find . -name myfile.txt grep myfile.txt
find . -name mylib* -exec bash -c mv "$1" "${1/\/mylib//libvertio}" - {} ;
find . -name mylib* -exec rename s/mylib/libvertio/ {} ;
find . -name mystring*
find . -name orig_name -exec myscript.sh {} ;
find . -name pattern_A ! -name pattern_B
find . -name photo* -type f mv ${i} ${i/\/photo//color}
find . -name quest* cut -d -_ -f 1 sort uniq -c sort -k -1 -n -r head -n 10
find . -name sample*_1.txt perl -p -e s/_1\.txt$// parallel program {}-out {}_1.txt {}_2.txt
find . -name script.sh xargs grep watermelon
find . -name sqlite.db -exec ... ; -print
find . -name test -exec rm -f {} ;
find . -name test3* -print xargs rm -f
find . -name user_prefs -exec sh -c echo "whitelist_from basheer@hydrofitgroup.com"  rightanglebrc  rightanglebrc  {} ;
find . -name vmware-*.log -print0 xargs -0 rm
find . -name zad*
find . -newermt 2014-04-30 08:00:00 -not -newermt 2014-04-30 09:00:00 xargs gunzip -c * grep 1234567890
find . -newermt 2014-04-30 08:00:00 -not -newermt 2014-04-30 09:00:00 xargs zgrep 1234567890
find . -newermt last Thursday
find . -not -name *.exe -not -name *.dll
find . -not -name *.exe -not -name *.dll -not -type d
find . -not -name *.exe -not -name *.dll -type f
find . -not -path */gen* -a ( -name *.java -o -name *.xml )
find . -not -path */gen* -a ( -name *.java -o -name *.xml ) xargs cat wc -l
find . -not -path *git* -not -name *git* grep git
find . -path */.svn -prune -o -type f -exec sed -i s/foo/bar/g {} +
find . -path */.svn -prune -o -type f -print
find . -path */Library/Application Support/Adobe/Acrobat/10.0 -type d -execdir rm -r {} +
find . -path ./*_parameterOne_ leftsquarebrc 12 rightsquarebrc 00_*/* -exec ./myScript.py {} +
find . -path ./.OldFiles -prune -o -type f -print
find . -path ./.git -prune -o -not -name *git* -print grep git
find . -path ./ProductA/src -prune -o -print
find . -path ./misc -prune -o -name *.txt -print
find . -path ./source/script -prune -o -type f -print
find . -perm /u+x -execdir chmod a+x {} ;
find . -perm 0644 -exec ls -l {} ;
find . -print -name *.sav_20110405
find . -print -name *.sav_20110405 xargs /bin/rm
find . -print -name myTestFile.sav_20110405 xargs /bin/rm
find . -print -o -name SCCS -prune
find . -print grep /${prefix}${ypatt} xargs commands -a -r -g -s
find . -print perl -l -n -e $,=" "; @s=stat $_; print $_, $s leftsquarebrc 2 rightsquarebrc , $s leftsquarebrc 7 rightsquarebrc 
find . -print0 perl -M -F -i -l -e -: -: -P -a -t -h -= -r -e -m -o -v -e -_ -t -r -e -e -n -0 -e chomp; remove_tree($_, {verbose= rightanglebrc 1}) if / leftsquarebrc  leftsquarebrc :^ascii: rightsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc /
find . -print0 perl -n -0 -e chomp; print $_, "\n" if / leftsquarebrc  leftsquarebrc :^ascii: rightsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc /
find . -print0 perl -n -0 -e print $_, "\n"
find . -print0 xargs -0 cmd -o -p -t -i -o -n -1 -o -p -t -i -o -n -2 --
find . -print0 xargs -0 egrep Cache
find . -print0 xargs -0 rename s/ABC/DEF/g
find . -print0 xargs -r 0 du -c -h -x grep total
find . -r -type f abc.txt -exec sed -i -e s/search/replace/g {} +
find . -regex $1
find . -regex .* leftsquarebrc 19|20 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-1 rightsquarebrc  leftsquarebrc 0-2 rightsquarebrc  leftsquarebrc 0-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-2 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-6 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-6 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc .txt$
find . -regex .*$EOL.*
find . -regex .*.py -print0 xargs -0 grep print 
find . -regex .*/_ leftsquarebrc 0-9 rightsquarebrc +_.*\.sql
find . -regex .*/foo/ leftsquarebrc ^/ rightsquarebrc *.doc
find . -regex .*\.\(txt\|h\)
find . -regex .*\.dcc$ -ls
find . -regex ./.*test.*
find . -regex ./AA.* -mtime +60 -exec rm {} ;
find . -regex ^.*. leftsquarebrc 0-9 rightsquarebrc {3,4}$
find . -regex ^\./.*test.*
find . -regex filename-regex.*.html
find . -regex filename-regex.*.html -exec grep -H string-to-find {} ;
find . -regextype posix-egrep -regex .*.(extension1|extension2)$ -type f -delete
find . -regextype posix-extended -iregex .*/a_{1}b
find . -regextype posix-extended -regex .*/ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +.bed
find . -regextype posix-extended -regex .*file-($a|$b).txt
find . -regextype posix-extended -regex ./ leftsquarebrc ^/ rightsquarebrc {5,}.txt
find . -size +${size}c
find . -size +100M -exec gzip {} ;
find . -size +100M xargs -n 1 -P 4 gzip
find . -size +100k ! -name a.html ! -name b.html ! -name c.html -delete
find . -size +10M
find . -size +20 xargs du -s -h sort -n
find . -size +XM -exec file {} --mime-type + awk -F -: /x-rar/{print $1}
find . -size -300k -name *.png -exec mv {} Ready/ ;
find . -type -f -delete
find . -type d
find . -type d
find . -type d
find . -type d
find . -type d  leftsquarebrc other tests... rightsquarebrc  read path  leftsquarebrc  -d $path  rightsquarebrc  ln -s $path ${path//_/-}
find . -type d ! -iname *-Subfolder -exec bash -c mkdir {}/$(basename {})-Subfolder ;
find . -type d ( -name .svn -o -name .git ) -prune -o -type f -exec grep -nH -e thing {} +
find . -type d ( -path ./a -o -path ./b ) -prune -o -name *. leftsquarebrc ch rightsquarebrc  -print
find . -type d ( -path ./a/* -o -path ./b/* ) -prune -o -name *. leftsquarebrc ch rightsquarebrc  -print wc -l
find . -type d ( -path ./stubdom -o -path ./dist ) -prune -o -name *. leftsquarebrc ch rightsquarebrc  -print
find . -type d ( -path ./stubdom/* -o -path ./dist/* ) -prune -o -regex .*\.\(h\|c\)$ -print
find . -type d ( -path dir1 -o -path dir2 -o -path dir3 ) -prune -o -print
find . -type d -a ! -name .?* -o -name .?* -a ! -prune
find . -type d -a -print0 xargs -0 chmod 755
find . -type d -depth 1 -exec echo git --git-dir={}/.git --work-tree=$PWD/{} status ;
find . -type d -depth 1 -exec git --git-dir={}/.git --work-tree=$PWD/{} pull origin master ;
find . -type d -empty
find . -type d -empty -exec rmdir {} ;
find . -type d -empty wc -l
find . -type d -exec bash -c (( $(stat -c %W "{}")  rightanglebrc  $(date +%s -d '2013-12-03') )) && du -h "{}" ;
find . -type d -exec bash -c cd "$0" || exit; shopt -s nullglob; f=( *.jpg ); ((${#f leftsquarebrc @ rightsquarebrc })) && echo convert "${f leftsquarebrc @ rightsquarebrc }" "${PWD##*/}.pdf" {} ;
find . -type d -exec chmod +rx {} ;
find . -type d -exec chmod ug+x {} +
find . -type d -exec cp index.php {} ;
find . -type d -exec cvs add {} ;
find . -type d -exec echo Hello, '{}' ;
find . -type d -exec find {} -type f -maxdepth 1 ;
find . -type d -exec ls -d {} ;
find . -type d -exec ls -ld {} ; awk {print $NF, $1} sed -e s; leftsquarebrc ^/ rightsquarebrc */;|____;g;s;____|; |;g
find . -type d -exec ls {} ;
find . -type d -exec sh -c (ls -p "{}"|grep / rightanglebrc /dev/null)||echo "{}" ;
find . -type d -exec sh -c cd "{}" ;  unzip "*.zip" ; rm "*.zip"   ;
find . -type d -exec sh -c n=$(find "$0" -maxdepth 1 -type f -printf x | wc -c); printf "%s -- %s files\n" "$0" "$n" {} ;
find . -type d -exec sh -c printf "%s " "$0"; find "$0" -maxdepth 1 -type f -printf x | wc -c {} ;
find . -type d -exec sudo sh -c chmod -R 775 {} || echo "FAILED {}" ;
find . -type d -exec test -e {}/.hg ; -print
find . -type d -exec touch {}/COMPLETE ;
find . -type d -exec touch {}/hiya ;
find . -type d -exec touch {}/hiya ;
find . -type d -exec touch {}/hiya ;
find . -type d -execdir bash -c mv $1 `echo $1 | sed -E "s/rabbit_( leftsquarebrc a-z rightsquarebrc +)_( leftsquarebrc abc rightsquarebrc )_/rabbit_\2_\1_/"` -- {} ;
find . -type d -execdir mv {} {}
find . -type d -iname *foo* -depth -exec rename s@Foo@Bar@gi {} +
find . -type d -maxdepth 1
find . -type d -mindepth $n
find . -type d -mtime -0 -exec mv -t /path/to/target-dir {} +
find . -type d -mtime -0 -print0 xargs -0 mv -t /path/to/target-dir
find . -type d -mtime 0 -exec sh -c cat {}/*.coords 2 rightanglebrc /dev/null ;
find . -type d -mtime 0 -exec sh -c ls {}/*.coords 2 rightanglebrc /dev/null ;
find . -type d -name .git* -prune -o -type f -print
find . -type d -name .svn -prune -o -mmin -5 -type f -print
find . -type d -name Product leftsquarebrc AC rightsquarebrc  -prune -o -type d -exec chmod 755 {} ; -o -type f -exec chmod 644 {} ;
find . -type d -name ProductA -prune -o -type d -exec chmod 755 {} ;
find . -type d -name example* egrep -o  leftsquarebrc 0-9 rightsquarebrc +
find . -type d -path ./dir1/*.1 -prune -o -print
find . -type d -print awk !/\.$/ {for (i=1;i leftanglebrc NF;i++){d=length($i);if ( d  leftanglebrc  5  && i != 1 )d=5;printf("%"d"s","|")}print "---"$NF} FS=/
find . -type d -print0 xargs -0 chmod ug+x
find . -type d -printf Folder name: %f\nParen path: %h\n
find . -type d awk NR rightanglebrc 1{a leftsquarebrc c++ rightsquarebrc =$0; t=t $0 SUBSEP} END{for (i in a) {if (index(t, a leftsquarebrc i rightsquarebrc  "/")  rightanglebrc  0) delete a leftsquarebrc i rightsquarebrc } for (i in a) print a leftsquarebrc i rightsquarebrc }
find . -type d find $i -mindepth 1 -maxdepth 1 -type d wc -l  leftsquarebrc  $count -e -q 2  rightsquarebrc   leftsquarebrc  -d $i/folder1  rightsquarebrc   leftsquarebrc  -d $i/folder2  rightsquarebrc  echo $i
find . -type d find $i -mindepth 1 -maxdepth 1 wc -l  leftsquarebrc  $count -e -q 2  rightsquarebrc   leftsquarebrc  -d $i/folder1  rightsquarebrc   leftsquarebrc  -d $i/folder2  rightsquarebrc  echo $i
find . -type d grep -v /\.
find . -type d read d convert ${d}/*.jpg ./${d##*/}.pdf
find . -type d sed -e s/\.\///g -e s/\./avoid/g grep -v avoid awk {print $1"\t"$1} xargs chgrp
find . -type d sed -e s/\.\///g awk {print $1, $1} xargs chgrp
find . -type d sort awk $0 !~ last "/" {print last} {last=$0} END {print last}
find . -type d xargs -I {} chmod -R 770 {}
find . -type d xargs java XMLBeautifier
find . -type f
find . -type f
find . -type f
find . -type f ! ( -execdir bash ~/gitstatus.sh ; -or -execdir bash ~/gitstatus.sh ; )
find . -type f ! ( -path ./. leftsquarebrc a-z rightsquarebrc * )
find . -type f ! -iname *.pdf -delete
find . -type f ! -name *.* -exec bash -c mv "$0" "$0.txt" {} ;
find . -type f ! -name *.gz -exec gzip {} ;
find . -type f ! -name *.o
find . -type f ! -name *dir1/file.log -exec tail {} ;
find . -type f ! -path */.svn/* -exec dos2unix {} ;
find . -type f ! -path */Documents/* -print 0 ...
find . -type f ! -path */target/*/*.zip -a -path */target/*.zip
find . -type f ! -path ./.git/* -exec sh -c echo hello world  rightanglebrc  rightanglebrc  {} ;
find . -type f ! -regex .*\.svn.* xargs no-mime-type.sh
find . -type f ! -type d
find . -type f ( ! -iname Makefile ) -exec ln -s {} newdir/{} ;
find . -type f ( -iname *.html ! -iname template.html ! -iname list.html ) -exec rm -rf {} ;
find . -type f ( -name *.c -o -name *.h ) sed -i s/\r// $i
find . -type f ( -name *.cpp -o -name *.h ) ! -name pugixml.cpp -exec cat {} + wc -l
find . -type f ( -name *.cpp -o -name *.h ) ! -name pugixml.cpp -exec wc -l {} +
find . -type f ( -name *.cpp -o -name *.h ) -exec sed -i.bak /FIXME/s/date/data/g {} ;
find . -type f ( -name *.txt -o -name *.md ) -exec sed -i s/lion/hawk/g {} ;
find . -type f ( -name *~ -prune -o -print )
find . -type f -a -name *.bak xargs rm
find . -type f -and ! -type d
find . -type f -and ( -name *.c -o -name *.h -o -name *.cc )
find . -type f -and ( -name *~ -prune -or -print )
find . -type f -daystart -mtime -2 -exec cp -t /wherever {} +
find . -type f -daystart -mtime -2 -exec cp {} /wherever ;
find . -type f -empty -exec sh -c echo NON  rightanglebrc  {} ;
find . -type f -exec ./subst.sh {} ;
find . -type f -exec /path/to/fixNames.sh {} ;
find . -type f -exec bash -c echo "append this"  rightanglebrc  rightanglebrc  "{}" ;
find . -type f -exec bash -c ed -s "$2"  leftanglebrc  leftanglebrc  leftanglebrc  "$1" _ $g/a/s//b/gnw {} ;
find . -type f -exec bash -c ex -s -- "$0"  leftanglebrc  leftanglebrc  leftanglebrc  $'%s/ leftsquarebrc  leftsquarebrc :upper: rightsquarebrc  rightsquarebrc +/L&/gnwq' {} ;
find . -type f -exec bash -c file -bi {} | grep -q text ; -exec grep TEXTSEARCH {} ;
find . -type f -exec bash -c mv "$0" "$0.txt" {} ;
find . -type f -exec bash -c printf "%s\n" "%s/ leftsquarebrc  leftsquarebrc :upper: rightsquarebrc  rightsquarebrc \+/\L&/g" "wq" | ex -- -s "$0" {} ;
find . -type f -exec cat {} + wc -l
find . -type f -exec cat {} ;
find . -type f -exec cat {} ;
find . -type f -exec ccrypt -e -E cryptograph {} ;
find . -type f -exec chmod g-s {} ;
find . -type f -exec command {} ;
find . -type f -exec cp {} ~/Backup/ ;
find . -type f -exec cvs add {} ;
find . -type f -exec dos2unix {} ;
find . -type f -exec echo Hello, '{}' ;
find . -type f -exec echo {} $comment ; awk {printf "%30s %s\n", $1, $2}
find . -type f -exec echo {} ;
find . -type f -exec egrep -l ^M$ {} ;
find . -type f -exec fgrep -l searchword {} ;
find . -type f -exec grep -H bin doesn't exist for HY11 {} +
find . -type f -exec grep -e ^#!/bin/.*sh$ {} +
find . -type f -exec grep -i \bweblogic_ {} +
find . -type f -exec grep -q \\/for\\/endetta {} ; -delete
find . -type f -exec grep pattern {} ;
find . -type f -exec is_html.sh {} ; -print
find . -type f -exec java StripEnronHeaders {} ;
find . -type f -exec lpr {} ;
find . -type f -exec ls -al {} ; sort -k 5 -n sed s/ \+/\t/g cut -f 9
find . -type f -exec ls -l {} ; sort -t -  -k +6,6 -k +7,7
find . -type f -exec ls -ltr --time-style=+%Y%m%d%H {} ; awk {if($6 rightanglebrc 2013111822 && $6 leftanglebrc 2013111907) print $0}
find . -type f -exec mapname {} +
find . -type f -exec md5 {} ;
find . -type f -exec md5sum {} ;
find . -type f -exec mv {} {}.jpg ;
find . -type f -exec mv {} {}.xml ;
find . -type f -exec perl -p -i -e s/Masi/Bond/g {} ;
find . -type f -exec scp {} hostname:/tmp/{} ;
find . -type f -exec sed -e s/Test_Dbv3/TestDbv3/g -i.bak {} +
find . -type f -exec sed -i  -e s/Red/$color1/g -e s/Blue/$color2/g {} ;
find . -type f -exec sed -i /(.*) leftsquarebrc   rightsquarebrc *$/{N; s/) leftsquarebrc   rightsquarebrc *\n leftsquarebrc   rightsquarebrc *{/&\npr_debug();/g} {} ;
find . -type f -exec sed -i 2i/* Copyright */ {} ;
find . -type f -exec sed -i s/.*/\L&/ {} +
find . -type f -exec sed -i s/DEFAULT_DEV_PATH/DEV_PATH/g {} ;
find . -type f -exec sed -i s/\r// {} ;
find . -type f -exec sed -i s/abc/abcd/g {} ;
find . -type f -exec sed -i s|Hello World|Hai Universe|g {} ;
find . -type f -exec sed -i s|text|text plus {}|g {} ;
find . -type f -exec sed -i.bak s/foo/bar/g {} ;
find . -type f -exec sed 1s/^\xEF\xBB\xBF// -i.bak {} ; -exec rm {}.bak ;
find . -type f -exec sed s/Hello/Goodbye/g {} ;
find . -type f -exec sed s@'var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : http://www.);'@'google analytics'@ {} ; -exec mv {}.tmp {} ;
find . -type f -exec sh -c $f={}; f=${f/.\//}; sed -i "s|text|text plus ${f}|g" {} ;
find . -type f -exec sh -c echo "abc"  rightanglebrc  rightanglebrc  ${1} _ {} ;
find . -type f -exec sh -c for f; do echo "abc"  rightanglebrc  rightanglebrc  $f; done _ {} +
find . -type f -exec sh -c head {} | grep -q Copyright ; -exec sed -ne 10,$ta;/Copyright/d;:a;p {} ;
find . -type f -exec sh -c if  leftsquarebrc  cat ${1} = "abc"  rightsquarebrc ; then  echo ${1}; fi _ {} ;
find . -type f -exec sh -c printf "%s %s \n" "$(ls -l $1)" "$(md5sum $1)"  {} {} ;
find . -type f -exec sh -c printf "%s\n" "g/a/s//b/g" w | ed -s "$1" _ {} ;
find . -type f -exec sh -c test $(file --brief --mime-type "$0") == "text/html" {} ; -print
find . -type f -exec sh -c tr -d "\r"  leftanglebrc  "{}"  rightanglebrc  "{}".new && mv "{}".new "{}" -- {} ;
find . -type f -exec sha1sum {} ; grep 7ceeeeaba7d7e22301dfc5d6707f0c7f3eeb55a8
find . -type f -exec wc -w {} ; awk {numfiles=numfiles+1;total += $1} END{print total/numfiles}
find . -type f -executable
find . -type f -executable -print
find . -type f -iname *- leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc -* ! -iname *.gz ! -iname *_processed -exec mv {} {}_parsed ;
find . -type f -iname *-* -exec rename -v s/-.*(\. leftsquarebrc ^. rightsquarebrc +)$/$1/ {} ;
find . -type f -iname 20* awk -v -F -R -O -M -= -2 -0 -1 -4 -0 -1 -1 -0 { if (0+substr($1,3)  rightanglebrc = FROM) print $1;}
find . -type f -maxdepth 1 -name .* -exec sed -i.bakkk -e s#/sa/#/he/#g {} +
find . -type f -maxdepth 1 -name .* -print0 xargs -0 sed -i -. -b -a -k -k -k -e s#/sa/#/he/#g
find . -type f -mmin -9 -exec cp {} ../bak ;
find . -type f -mmin -9 xargs zip ../bak/backup.zip
find . -type f -mtime +5 -print xargs rm
find . -type f -mtime +7 tee compressedP.list parallel compress
find . -type f -mtime -100 -daystart -printf "%f"\n
find . -type f -mtime -2 -exec echo {} +
find . -type f -mtime -30 -exec s3cmd put {} s3://path ;
find . -type f -name * * -exec bash -c f="$1"; s="${f/_ / }"; mv -- "$f" "${s/ *./.}" _ {} ;
find . -type f -name * grep tgt/etc/*
find . -type f -name * grep tgt/etc/file1 tgt/etc/file2 tgt/etc/file3
find . -type f -name *.* sed s/.*\././ sort -u
find . -type f -name *.a -print0 xargs -0 -I -Z -Z mv ZZ ZZ.b
find . -type f -name *.bak -delete
find . -type f -name *.bak -exec rename -f s/\.bak$// {} ;
find . -type f -name *.bak -exec rename s/\.bak$// {} ;
find . -type f -name *.c -exec grep -q ^a  {} ; -print
find . -type f -name *.c -exec sed -i.bak s/\bint\b/xint_t/g {} ;
find . -type f -name *.cpp -exec sh -c echo {} && cpp -M {} | grep -c stdafx.h ;
find . -type f -name *.cpp -exec sh -c g++ {} -o $(basename {} .cpp) ;
find . -type f -name *.cpp -exec sh -c g++ {} -o $(dirname {})/$(basename {} .cpp) ;
find . -type f -name *.csv -exec sed -i 1icolumn1,column2,column3 {} ;
find . -type f -name *.csv -print0 xargs -0 sed -i 1icolumn1,column2,column3
find . -type f -name *.dat xargs ls -l
find . -type f -name *.flac parallel ffmpeg -i {} -a -c -o -d -e -c libmp3lame -a -b 320k {.}.mp3 && rm {}
find . -type f -name *.gif -print0 xargs -0 --replace % sh -c echo -e "Archive-Asset-Name: %\nArchive-Asset-SHA-512-Digest: `openssl dgst -sha512 -binary % | openssl enc -base64 | tr "+" "-" | tr "/" "_" | tr -d "=" | tr -d "\n"`\n"
find . -type f -name *.gif or .jpeg -o -exec sed -i s/^M// {} ;
find . -type f -name *.gz xargs zcat wc -l
find . -type f -name *.html -exec js-beautify -r {} ;
find . -type f -name *.html -exec sed s/f\.\( leftsquarebrc 0-9a-zA-Z rightsquarebrc *\)\.focus()/highlight("\1")/g {} ;
find . -type f -name *.html echo new content
find . -type f -name *.java -exec sed -i s/^package zn\./package /1 {} ;
find . -type f -name *.java xargs javadoc -d outputdir
find . -type f -name *.jpg read i echo Procesing $i...
find . -type f -name *.js.compiled mv $i ${i%.*}
find . -type f -name *.mp3 -print0 xargs -0 basename
find . -type f -name *.mp4 -exec myscript {} ;
find . -type f -name *.my_format -exec sh -c ./my_script {} & ;
find . -type f -name *.o -print0 xargs -0 rm
find . -type f -name *.php -exec awk / leftanglebrc \?/,/\? rightanglebrc / && /eval/ {} ;
find . -type f -name *.php -exec recode windows1252..utf8 {} ;
find . -type f -name *.php -not ( -path ./etc/* -o -path ./cache/* -o -path ./archive/* ) -exec sed -i s|oldurl.com|newurl.org|g {} ;
find . -type f -name *.php -print -exec iconv -f euc-kr -t utf-8 {} -o {}.utf8 ;
find . -type f -name *.php xargs sed -e s/\$PHP_SELF/\$_SERVER\ leftsquarebrc 'PHP_SELF'\ rightsquarebrc /g -i
find . -type f -name *.png -exec cp {} ~/path/to/your/destination/folder ;
find . -type f -name *.png -execdir convert {} *OPTIONS* mydefinedname.jpg ;
find . -type f -name *.rm -exec ffmpeg -i {} -sameq {}.mp3 ; -exec rm {} ;
find . -type f -name *.so -exec sh -c echo {} && readelf -s {} | grep mysymbol ;
find . -type f -name *.txt -exec cat {} +
find . -type f -name *.txt -exec cat {} ;
find . -type f -name *.txt -exec sed --in-place s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+$// {} +
find . -type f -name *.txt -exec sed s/f/u/g {} ;
find . -type f -name *.txt -exec sh -c cat TextToAdd.txt {}  rightanglebrc  $$.tmp && mv $$.tmp {} ;
find . -type f -name *.txt -print0 xargs -0 ./myscript.py
find . -type f -name *.txt -print0 xargs -0 cat
find . -type f -name *.txt-exec bash -c echo "$1" | sed "s/f/u/g" - {} ;
find . -type f -name *.xml
find . -type f -name *.xml -exec perl -MFile::Basename -0777pi.bak -e s#(.*)\n#" leftanglebrc DOC rightanglebrc \n  leftanglebrc DOCNO rightanglebrc  ".basename($ARGV,".xml")."  leftanglebrc /DOCNO rightanglebrc \n  leftanglebrc TEXT rightanglebrc  ".$1."  leftanglebrc /TEXT rightanglebrc \n leftanglebrc /DOC rightanglebrc \n"#es {} ;
find . -type f -name *.xml -exec perl -MFile::Basename -0777pi.bak -e s#.*#" leftanglebrc DOC rightanglebrc \n  leftanglebrc DOCNO rightanglebrc  ".basename($ARGV,".xml")."  leftanglebrc /DOCNO rightanglebrc \n  leftanglebrc TEXT rightanglebrc  ".$&."  leftanglebrc /TEXT rightanglebrc \n leftanglebrc /DOC rightanglebrc \n"#es {} ;
find . -type f -name *.xml* -exec awk {gsub("ID","\nID");printf"%s",$0} {} +
find . -type f -name *_peaks.bed ! -path ./tmp/* ! -path ./scripts/*
find . -type f -name *abc -exec bash -c  mv -v  {} `dirname {}`/..  ;
find . -type f -name *my_word* echo $file
find . -type f -name *my_word* xargs cat
find . -type f -name *o?6*
find . -type f -name *php* -exec grep -iHn error_reporting {} ; cut -d -: -f -- -2 -.
find . -type f -name GLOB xargs UTILITY
find . -type f -name YourProgramName -execdir ./YourProgramName YourParameterFile ;
find . -type f -name YourProgramName -execdir pwd ;
find . -type f -name YourProgramName -execdir sh -c command1; command2; command3 ;
find . -type f -name dropbox-backup-*.tar.gz
find . -type f -name file* -exec bash -c echo "your line"  rightanglebrc  rightanglebrc  $1 -- {} ;
find . -type f -name file*pattern -print0 xargs -0 sed -i s/bad/good/g
find . -type f -name filename -print0 xargs -0 awk ...
find . -type f -name mubunching* awk -F - leftsquarebrc  -. - rightsquarebrc  $(NF-1) rightanglebrc =5
find . -type f -name prob leftsquarebrc 0-9 rightsquarebrc *_*
find . -type f -name prob leftsquarebrc 0-9 rightsquarebrc *_* -exec echo {} ;
find . -type f -newerat 2008-09-29 ! -newerat 2008-09-30
find . -type f -newerct 2008-09-29 ! -newerct 2008-09-30
find . -type f -newermt 2007-06-07 ! -newermt 2007-06-08
find . -type f -newermt 2013-08-02 ! -newermt 2013-08-02
find . -type f -newermt 2014-03-30 ! -newermt 2014-04-01 -exec bash -c f="$1"; n="bc.${f##*.}"; mv "$f" "$n" - {} ;
find . -type f -newermt 2014-04-30 ! -newermt 2014-05-01
find . -type f -not -exec grep -q Copyright {} ; -exec sed -i 2i/* Copyright */ {} ;
find . -type f -not -name output.txt -exec cat {} ; -exec echo | ;
find . -type f -path ./source/script -prune -o -print
find . -type f -perm +111 -print
find . -type f -print -exec iconv -f iso8859-2 -t utf-8 -o {}.converted {} ; -exec mv {}.converted {} ;
find . -type f -print grep -f id.file xargs cp -t target_dir
find . -type f -print perl -l -n -e  $_{$_} = -M; END {  $,="\n";   print sort {$_{$b}  leftanglebrc = rightanglebrc  $_{$a}} keys %_   } head -n 500
find . -type f -print0 parallel -0 -P 3 ./myscript {1}
find . -type f -print0 read -d $0 file cp $file $file.bak
find . -type f -print0 wc -l --files0-from -
find . -type f -print0 xargs -0 -n 1 sed -i -e s/from/to/g
find . -type f -print0 xargs -0 cat
find . -type f -print0 xargs -0 cat
find . -type f -print0 xargs -0 command parameters
find . -type f -print0 xargs -0 file
find . -type f -print0 xargs -0 perl -p -i -e s/Masi/Bond/g
find . -type f -print0 xargs -0 sed -i  s~^\( leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\)"web" leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$~\1"pkg/web"~g
find . -type f -print0 xargs -0 sed -i -e s/RELEASE_AND_NIL((.*))/ leftsquarebrc 1 release rightsquarebrc /g
find . -type f -print0 xargs -0 sed -i -e s/^#!\/bin\/bash$/#!\/bin\/bash -x/
find . -type f -print0 xargs -0 sed -i -r s/"XXX" \| \{"Foo", "Bar"\}/"YYY" \| \{"Foo"\}/g
find . -type f -printf %T@ %p\n sort -n tail -1 cut -f -2 -- -d - 
find . -type f -printf %T@ %p\n sort -n tail -1 cut -f -2 -- -d - 
find . -type f -printf %T@ %p\n sort -n tail -1 sed s/.*PO\.\( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/
find . -type f -printf %fn grep --color -R -f .
find . -type f -printf %hn sort uniq xargs -i ssh hostname mkdir -p /tmp/{}
find . -type f -printf %p %s\n awk { sum+=$2}; END { print sum}
find . -type f -printf %p %s\n perl -n -a -e $sum+=$F leftsquarebrc 1 rightsquarebrc ; print "$sum\n" tail -n 1
find . -type f -printf %p %s\n perl -n -a -e $sum+=$S leftsquarebrc 1 rightsquarebrc ; print "$sum\n"
find . -type f -printf %s %pn sort -n -r awk {print $2} head -1 0
find . -type f -printf %st%fn
find . -type f -printf /%p\n
find . -type f -regex  leftsquarebrc ^  rightsquarebrc *.cpp
find . -type f -regex @"LBL_ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc " rightsquarebrc +
find . -type f -size +0
find . -type f -size +10000000 -print xargs ls -l -d more
find . -type f -size 0 -exec rm -f {} +
find . -type f -size 63c -delete
find . -type f -wholename *.mbox sed s/\(.*\)\.mbox/mv "\1.mbox" "\1"/ sh
find . -type f ctime -$2 -name mylog*.log -exec tinyscript.sh {} +
find . -type f dirname ${i#./} mv $i ${i//DSC/$(basename $dir)}
find . -type f egrep -i  leftsquarebrc -~&@# leftanglebrc  rightanglebrc ;:!^,_ rightsquarebrc  tee temp.txt
find . -type f grep -E -v .git/|.gitmodules|^./lib xargs grep -E -l $\r|$\t| $
find . -type f grep -i -f ./remove_list read line rm $line
find . -type f grep 000000 tr \n \0 xargs -0 -i -+ cp ~/offblack.png +
find . -type f grep somestring
find . -type f parallel --tag eml-to-text {} | grep -F -w -o -n -b -f /tmp/list_of_interesting_words sort -k 3 -t -: tee index.by.word awk FS=":" {print $3} uniq -c
find . -type f parallel -k -j -1 -5 -0 -% -n 1000 -m grep -H -n STRING {}
find . -type f read file echo your line
find . -type f xargs -I {} chmod --reference {} ../version1/{}
find . -type f xargs -d n perl -p -i -e s/search/replace/g
find . -type f xargs -i echo {} sed -r s#(.\/)(.*)#cat &\|sed  "s:^:file \2 :g"#ge
find . -type f xargs -n 1 -d n md5sum
find . -type f xargs awk $0=FILENAME$0
find . -type f xargs cat
find . -type f xargs egrep -H -m 1 -n  leftanglebrc $month/$day/$year rightanglebrc  awk -F : $2  leftanglebrc = N { print $1; }
find . -type f xargs java StripEnronHeaders
find . -type f xargs md5sum
find . -type f xargs perl -p -i -. -b -a -k -e s, leftsquarebrc ^ leftsquarebrc :ascii: rightsquarebrc  rightsquarebrc ,,g
find . -type f xargs perl -p -i -e s/one\/two\/three/shopping\/shop\/ipad/g
find . -type f xargs perl -p -i -e s/windows/android/g
find . -type f xargs perl -p -i -e s{ leftanglebrc a href='\'' leftsquarebrc . rightsquarebrc  leftsquarebrc . rightsquarebrc /Example/case(\d\d) leftsquarebrc . rightsquarebrc html'\'' rightanglebrc  leftanglebrc img src='\'' leftsquarebrc ^'\'' rightsquarebrc *'\''}{ leftanglebrc a href='\''../Example/case$1.html'\'' rightanglebrc  leftanglebrc img src='\'' leftanglebrc ?php imgname('\''case$1'\''); ? rightanglebrc '\''}
find . -type f xargs sed -n -e s/ leftanglebrc f:facet leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //;s/ leftanglebrc \/f:facet rightanglebrc //p
find . -type l -exec readlink -f {} ; grep -v ^`readlink -f ${PWD}` readlink -f ${PWD}
find . -type l -exec readlink -f {} ; sort uniq -c sort -n
find . -type l -exec sh -c for x; do  leftsquarebrc  -e "$x"  rightsquarebrc  || rm "$x"; done _ {} +
find . -type l -print0 xargs -n 1 -0 readlink -f sort uniq -c sort -n
find . -type l -printf %ln
find . -user BobTheCat -type f -printf %s\n awk {bytes+=$0}END{print bytes}
find . cut -c 3-
find . fgrep -f my_file
find . grep -v permission denied
find . grep .xml$ parallel bzip2
find . grep file_for_print xargs echo
find . grep your_pattern xargs mv destination_directory
find . perl -n -e s!( leftsquarebrc ^/ rightsquarebrc +)$!lc $1!e; print if 1 == $seen{$_}++
find . sed s/.*/& &/
find . something xargs -r 0 printf %sn
find . type f -name *.m -exec grep -E @"LBL_ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc " rightsquarebrc + /dev/null {} +
find . type f -print fgrep -f wanted_file_list.txt
find . wc -l
find . xargs grep -L someword uniq
find .*stringinfilenamesIwant.* ! -regex .*stringinfilesnamesIdont.* -exec dosomecommand {} +
find .-type f ! -name *.c -exec rm {} +
find ... ( ... -o ..... ) -exec ...
find ... -exec ./myScript {} +
find ... -exec bash -c echo 0x0  rightanglebrc  {} ...
find ... -exec cmd {} ;
find ... -exec echo 0x0 ...
find ... -exec {} -v ;
find ... -print0 xargs -0 ...
find ... -print0 xargs -0 rm
find ... -print0 xargs -0 tar -A gzip
find ... ; grep -v tar: Removing leading
find ... awk -F -/ {print $NF " - " $FILENAME} column -t
find ... awk -F -_ {print $(NF-4) "\t" $0} sort -k 1 cut -f -2 --
find ... grep ... xargs ...
find ... grep ... xargs ...
find ... sort -r -n cut -d -  -f 2 xargs df -h
find ... wc -l
find ... xargs perl -l -p -i -e s/\t/    /g; s/\s+$//
find ... xargs tar -c -z -f /path/to/your/target/a.gz
find .... xargs rm
find ..... -print0 xargs rm
find ..... sed s#.*/##
find ..... sed s#.*/##
find ../../$name-module -name Name* -type f -exec bash -c mv "$1" "${1/Name/$Name}" -- {} ;
find ../dir2/ -maxdepth1 -name Quack.sh -execdir {} ;
find ../path -exec grep foo {} +
find ./ ! -type d -writable
find ./ ( -name *.xyz -o -name *.abc ) -exec cp {} /path/i/want/to/copy/to ;
find ./ -iname *.bz2 -exec bzip2 -d {} ;
find ./ -maxdepth 1 ! -path *txt
find ./ -maxdepth 1 -name user* -exec script_that_does_text_replace.sh {} ;
find ./ -mtime +30 -exec mv dir/newdir {} ;
find ./ -name ${oldName}* -exec rename $oldName $adminDB {} ;
find ./ -name *.cs -execdir sed /#region License/,/#endregion/d {} ;
find ./ -name *.docx -print read i mv $i `echo "$i" | sed -e 's/\.docx/_stringhere\.docx/'` echo $i sed -e s/\.docx/_stringhere\.docx/
find ./ -name *.ogv -exec echo myfile {} ; bash
find ./ -name *.raw -print xargs -n 1 -P 4 sed -e $s/$/\n/
find ./ -name *.rns -printf $FECHA %pn
find ./ -name *JIM* -exec cp --target-directory=$TARGET_DIR {} +
find ./ -name *html -exec sh -c cp {} _$(basename {}).ebr ;
find ./ -name 20110101* -print0 -type f xargs -0 grep -l search_pattern
find ./ -name myFile.txt -print0 rsync -0 -a -d -v --files-from - ./ ../newTree/
find ./ -name results.txt -exec sed 12!d {} ;
find ./ -name results.txt sort -V
find ./ -printf %f\n
find ./ -type d -print awk -F / {for (i=1; i leftanglebrc =NF-2; i++){printf "| "} print "|____"$NF}
find ./ -type d -print sed -e s; leftsquarebrc ^/ rightsquarebrc */;|____;g;s;____|; |;g
find ./ -type f
find ./ -type f -exec sed -e /my_folder./s/my_folder.// {} ;
find ./ -type f -exec sed -i -e s/apple/orange/g {} ;
find ./ -type f -exec sed -ri s/font-family: leftsquarebrc "A-Za-z,  rightsquarebrc +;/font-family: Verdana;/g {} ;
find ./ -type f -exec sh -c echo {} ; sed -nre 's/^.*- rightanglebrc (from|join)('''( leftsquarebrc ^'''  rightsquarebrc *) leftsquarebrc '''  rightsquarebrc .*$/2/gp' "{}" ; ;
find ./ -type f -name * leftsquarebrc a-z rightsquarebrc *.csv xargs rm
find ./ -type f -name *$thismodelnormal* -exec ls -la {} ;
find ./ -type f -name *.html xargs sed -i -. -b -a -k ....
find ./ -type f -name *.php -exec sed -i s/check_perm('venA')/check_perm('venA:venB')/g {} ;
find ./ -type f -name httpd -exec {} --version ; -print
find ./ -type f -name httpd xargs -n 1 -I -{ -} bash -c {} --version
find ./ -type f -print0 xargs -0 -I -{ -} -n 1 -P 4 grep -I -P $REX {}
find ./ -type f -printf %f\n sed s/\..*// sort uniq read filename find . -type f -iname $filename'*' -exec mv {} /dest/dir ; sleep 240
find ./ -type f -regex .*\.php -exec sed -i -e 1{/^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *$/d;} {} ;
find ./ -type f -writable
find ./ -type f -writable sort
find ./ -type f parallel --gnu bash -c convert "$1" "${1/%.pdf}.jpg" bash {}
find ./ -type f parallel --gnu convert {} {.}.jpg
find ./ -type f xargs gsed -i -r s/ leftsquarebrc $ rightsquarebrc  leftsquarebrc A-Za-z_\x22\x27 rightsquarebrc /testing
find ./ leftsquarebrc ac rightsquarebrc */ -name blarg
find ./*.pir -type f -exec sed -i / rightanglebrc /d {} ;
find ./archive -mindepth 1 -mtime +180 -delete -type f
find ./base -type d
find ./dir -type f -iname *.t leftsquarebrc argz rightsquarebrc * leftsquarebrc bz2 rightsquarebrc  -print0 xargs --null mv --target-directory dir
find ./directory -regex .*/filename leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\.temp
find ./downloads -maxdepth 2 -type f -mtime +32 -delete
find ./js/common -type f -name *.js grep extend: .*, $i sed s/.*'(.*)'.*/and include -namespace1/ tr \n  
find ./kernel -name *.ko read file cp $file temp/
find ./myFolder -type f -exec sed -i s/Application/whatever/g {} ;
find ./myFolder/ -type f -exec sed -i s? leftanglebrc value rightanglebrc $VAR1 leftanglebrc /value rightanglebrc ? leftanglebrc value rightanglebrc $VAR2 leftanglebrc /value rightanglebrc ?g {} ;
find ./my_dir -mtime +10 -type f -delete
find ./someDir -name *.log -o -name *.TXT tar -c -f my_archive -T
find ./src -name *.c -and -not -path ./src/test/*
find ./src -name *.c grep -v /src/test/
find ./src -type f ruby1.9 -n -e #some statement
find / -exec echo {} ;
find / -exec stat -c %n,%U,%G {} ;
find / -iname *.ppd -exec grep grep *ModelName: {} ;
find / -iname *.ppd -print0 xargs -0 cat grep *ModelName:
find / -iname *.ppd -print0 xargs -0 grep -h *ModelName:
find / -iname *desktop -exec fgrep -l $0 {} ;
find / -maxdepth 1 -xdev -type f -exec grep -i stringtofind -l {} ; -exec sed -i /./d {} ;
find / -maxdepth 3 -type f -print -exec sed -i -e s/teststring123/itworked/g {} ;
find / -maxdepth 3 -type f -size +50M
find / -mindepth 1 -maxdepth 1 -type f -exec pdflatex {} ;
find / -mmin 1 wc -l
find / -name file.xml -exec cat {} ;
find / -name myfile -type f -exec dirname {} ;
find / -name php.ini
find / -name test2abc
find / -name test2abc -
find / -name tokyw
find / -type d -name name-of-the-directory
find / -type d -path */ruby/lib
find / -type d -path */ruby/lib
find / -type f
find / -type f -mmin 60
find / -type f -name *.cpp -exec curl -T {} ftp://somesite/somedir/ --user myname:mypassword ;
find / -type f -name *.txt
find / -type f -name 19191919.log -exec /usr/bin/cat {} ;
find / -type f -name acpid grep /etc/
find / -type f -name filename.ext -exec grep -l lookingfor {} +
find / -type f -name foo* wc -l
find / -type f -print xargs stat -f %m %N sort -n cut -f -2 --
find / -type f -regex (.*A.*a.*.*)|(.*a.*A.*.*) -exec tail -n 3 {} ;
find / -type f -size +50M
find / -type f awk -F -/ {print $NF} awk length($0)  leftanglebrc  25
find / -type f grep secret/* awk / leftsquarebrc a-zA-Z.- rightsquarebrc {54}/
find / -type f xargs -n 1 -I -@ basename @ sort -u
find / -type l -exec ls -l {} ; perl -n -e -B -E -G -I -N -  -{ -  -$ -s -t -r -  -= -  -s -h -i -f -t -( -@ -A -R -G -V -) -; -  -} -  -  -  -  -  -p -r -i -n -t -  -i -f -  -/ -Q -$ -s -t -r -E -/ -; -  $name_old_dir
find / -type l -printf %p - rightanglebrc  %ln grep - rightanglebrc  -  -/ -h -o -m -e -/ -d -e -p -l -o -y -/ -l -i -v -e
find /Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS7.0.sdk/System/Library/PrivateFrameworks ! -name *.* -exec cp -t /your/destination/dir/ {} +
find /DIR -name *.info xargs sed -i $a\version = $version
find /Directory -name *.jpg -exec mv {} /Directory ;
find /Users -depth 2 ! -perm 0700 ! -name Public ! -name Sites -type d -exec echo chmod 700 {} +
find /Users -maxdepth 2 ! -perm 0700 ! -name Public ! -name Sites -type d -exec chmod 700 {} +
find /Users -maxdepth 2 ! -perm 0700 ! -name Public ! -name Sites -type d -exec echo chmod 700 {} +
find /Users -name prefs.js -exec sed -i.bak -e s/$oldPref/$newPref/ {} ;
find /Users -type d -iname *.bak -print0 xargs -0 rm -r -f
find /Users -type d -iname *.bak -print0 xargs -0 rmdir
find /Users/KanZ/Desktop/Project/Test/ -type f -name M*.jpg -exec convert {} -flip {} ;
find /Users/me/Workspace/ -type f -name *.png ! -name *@2x* -exec echo rm {} +
find /Users/ptomblin/Shared -name *.css -o -name *.html -exec sed -i  s@".{0,2}/?images@"http://mycdn.com/images@g {}
find /Volumes/Media/ -type f -size +2G -mtime +10s -exec rsync -aq --update {} /Volumes/LocalMedia/ ;
find /Volumes/NEXSAN/Engine Folders/Input/DTO_Proxy/* -type f -mtime +7 -exec mv -v {} /Volumes/NEXSAN/.2BeDeleted4realz/ ;
find /YOUR/SEARCH/DIR -type f -mmin -300
find /a/b/ -maxdepth 1 -type f -mtime +90
find /a/b/c/*/deploy -name *.pdf xargs du -c -h
find /apps -exec grep performance {} /dev/null ; grep -v warn
find /apps/dir -printf %Ab %Ad %AY %fn
find /apps/dir -type f -printf %fn
find /base/path -type d -perm +o+r
find /bin -type f -perm +111 -print0 xargs -0 file
find /c/some/dir/ ( -iname *html -o -iname *tpl ) -exec grep -inH search_string {} ;
find /cygdrive/c/inetpub/wwwroot/ -iname web.config -printf %p\0 xargs -0 grep -P -o -i (User ID|Password)= leftsquarebrc ^;" rightsquarebrc *
find /data -user test xargs rm -r -f
find /data/ -name command-*-setup sort -t -k 2,2
find /data/shares/builds/place1/ -mindepth 1 -maxdepth 1 -type d ! -name .*
find /data2/input -type f -mmin +360 -delete -print
find /desktop/themes -name footer.php -print0 xargs -0 gvim -p
find /destination/webapp -type f -name abc-1.0.0-*.jar -exec cp /source/tmp/abc-1.0.0-SNAPSHOT.jar {}
find /dev -maxdepth 1 -name abc-*
find /dev -name .udev -prune -o -name abc-* -print
find /dev/disk leftsquarebrc 1-9 rightsquarebrc  -exec diskutil eject {} ;
find /dir -name *.* -type f -print -exec rm {} ;
find /dir -name *.gz ! -name first_skip ! -name second_skip .... etc
find /dir -name *.gz $(printf "! -name %s " $(cat skip_files)) printf ! -name %s  $(cat skip_files) cat skip_files
find /dir -name *.gz grep -v -F -f skip_files
find /dir -name filename* -type f -exec rm {} ;
find /dir -print
find /dir -type f -ctime +365 head -n 100 xargs rm
find /dir -type f -mtime -1 -exec mv {} /pdf ;
find /dir grep -f  leftanglebrc (sed 's@^@/@; s/$/$/; s/\( leftsquarebrc \. leftsquarebrc \* rightsquarebrc \|\ rightsquarebrc \)/\\\1/g' filelist.txt) sed s@^@/@; s/$/$/; s/\( leftsquarebrc \. leftsquarebrc \* rightsquarebrc \|\ rightsquarebrc \)/\\\1/g filelist.txt
find /dir/ -perm /g=w
find /dir/ -perm /g=w -exec ls -lLd {} +
find /dir1 -type f -printf %fn
find /dir1 /dir2 -type f -iname *$1* -iname *$2* -iname *$3*
find /dir1 /dir2 -type f -iname *$1*$2*$3* -o -iname *$1*$3*$2* -o -iname *$2*$1*$3* -o -iname *$2*$3*$1* -o -iname *$3*$1*$2* -o -iname *$3*$2*$1*
find /directory -maxdepth 1 -type f -exec fgrep -l ez123 {} ;
find /directory -name *pattern* -exec sh -c cut -f8 {}  rightanglebrc  {}.txt ;
find /directory -type d -exec youscript.sh {} ;
find /directory -xdev --exec ls -dils --time-style=long-iso {} ;
find /directory -xdev -print0 xargs -0 ls -d -i -l -s --time-style long-iso
find /directory awk -F / {names leftsquarebrc tolower($NF) rightsquarebrc ++} END { for (name in names) { if (names leftsquarebrc name rightsquarebrc  rightanglebrc 1) { print name }}}
find /directory awk {names leftsquarebrc gensub(".*/","","g") rightsquarebrc ++} END { for (name in names) { if (names leftsquarebrc name rightsquarebrc   rightanglebrc  1) { print name } } }
find /directory_path -mtime -1 -ls
find /disk0116/ui -name .user_repo.log xargs cat column -t
find /earth
find /earth sed -e s/\// / awk { print "planet = " $1 "\ncategory = " $2 "\nsubcat = " $3 "\nname = " $4}
find /etc -name php.ini
find /etc -type f -exec sh -c /bin/ls -hastl '{}' | tr 'n' ' ' ; -exec /usr/bin/md5sum {} ;
find /etc -type f -exec sh -c /bin/ls -hastl '{}' | tr 'n' ' ' ; -exec sh -c /usr/bin/md5sum '{}'| tr -d 'n'  ;
find /etc/ -name my.cnf -mtime 0 -exec sh -c cat {} | mail -E -s "file changed" shantanu@company.com ;
find /etc/ -type f -print0 xargs -0 grep -o c wc -l
find /etc/bash_completion*
find /etc/test/ -type f -print0 xargs -0 cat
find /example/dir -type f ( -perm 777 -or -perm 775 )
find /example/dir -type f -perm +775
find /example/dir -type f -perm 777
find /example/dir -type f -perm 777 grep -E -v file leftsquarebrc 1234 rightsquarebrc 
find /example/dir -type f -perm 777 grep -E -v file leftsquarebrc 1234 rightsquarebrc  xargs stat --format %a
find /filestodelete -mtime +93 -exec rm -rfv {} +
find /filestodelete -mtime +93 -exec sh -c rm -rfv {} ;
find /folder -name *.txt
find /folder/to/search -name Function.php -type f -exec sed -i s/\$arguments\ leftsquarebrc \$i rightsquarebrc  = \$arguments = func_get_args();\$arguments\ leftsquarebrc \$i rightsquarebrc ;/\$arguments\ leftsquarebrc \$i rightsquarebrc  = \&\$arguments\ leftsquarebrc \$i rightsquarebrc ;/ {} ;
find /folderpath -type l -delete
find /foo -exec sh -c grep "$1"  rightanglebrc  "$1.out" -- {} ;
find /foo -iname *.txt -exec cp {} /dest/ ;
find /foo -maxdepth 1 -type f ! -name runscript* -exec ln -s {} /bar/tmp/ ;
find /foo -printf %P\0
find /foo -printf %f\0
find /foo/bar -printf %p %A@
find /git -name *.git -execdir sh -c cd {} && git gc ;
find /hello -type f xargs sed -i s#\(account leftsquarebrc . rightsquarebrc \)oldomain\( leftsquarebrc . rightsquarebrc com\)#\1newdomain\2#g
find /home -iname .htaccess -exec sed -i s/FollowSymLinks/SymLinksIfOwnerMatch/g {} ;
find /home -type f -exec sed -i $s/if(@$_POST leftsquarebrc 'test' rightsquarebrc ){eval(base64_decode($_POST leftsquarebrc 'test' rightsquarebrc )); exit();}php if(@$_POST leftsquarebrc 'test' rightsquarebrc ){eval(base64_decode($_POST leftsquarebrc 'test' rightsquarebrc )); exit();}//g {} ;
find /home -type f -name *.html -exec sed -i / leftanglebrc TXT_accesp rightanglebrc /,/ leftanglebrc \/TXT_accesp rightanglebrc / s/ leftanglebrc p rightanglebrc \(.*\) leftanglebrc \/p rightanglebrc $/\1/g {} ;
find /home -type f -path *public_html/version.txt -exec echo {}   `cat {}` ; cat {}
find /home -type f -path *public_html/version.txt -exec grep -H . {} ;
find /home$i -iname .backuprc -exec cat {} ; xargs -d \n cp -t /var/backup/temp/$user
find /home/ -maxdepth 1 -print sudo cpio -p -a -m -V -d /newhome
find /home/ -type d -name uploads -exec sh -c zip -r /backup/uploads/`echo "$0" | cut -d/ -f 2`-uploads.zip `dirname $0`/`basename $0` {} ;
find /home/ -type d -name uploads -exec sh -c zip -r /backup/uploads/`echo $0 | tr "/" "-"`.zip `dirname $0`/`basename $0` {} ;
find /home/ -type f -name *.html awk -F -/ {a leftsquarebrc $NF rightsquarebrc =$0}END{for(i in a)print a leftsquarebrc i rightsquarebrc } zip -j all-html-files -@
find /home/ -type f -name *php* -print0 xargs -0 perl -e s/ leftanglebrc script.*PaBUTyjaZYg.*script rightanglebrc //g;
find /home/ -type f -regextype posix-extended -regex .*(string1|string2|$(hostname)).* hostname
find /home/ -type f -regextype posix-extended -regex .*(string1|string2|$HOSTNAME).*
find /home/*/public_html/images -iname *php -exec echo {} ;
find /home/ABC/testDir -iname *.java -exec find . -iname {}
find /home/Desktop/ -size 0 -exec mv {} /home/Desktop/a ;
find /home/XXXXXX/public_html/images/products -iname l_*.jpg tar -v -c -f /home/XXXXXX/public_html/backups/monday_backup.tar --files-from -
find /home/admin/Backup -name *.tar -printf %f\n
find /home/alex/papers/ -name *erebus* -print0 xargs -0 evince
find /home/alex/papers/ -name *erebus* xargs evince
find /home/caine/thecopy -user caine -size -10240c -name a.* wc
find /home/dem -size +1000M -exec ls -lh {} +
find /home/directory -mindepth 1 -maxdepth 1 -name subdirectory leftsquarebrc 57 rightsquarebrc  -or -exec cp -r {} /path/to/dir ;
find /home/disk1 -maxdepth 0 -name file1* -o -name file7*
find /home/disk2/ -type f -iname *.jpg -exec sh -c /usr/bin/jpegtrans '{}'  rightanglebrc  '{}.temp'; mv -f '{}.temp' '{}' ;
find /home/disk2/ -type f -iname *.jpg -exec sh -c /usr/bin/jpegtrans {}  rightanglebrc  {}.temp; mv -f {}.temp {} ;
find /home/downloaded/ -type f -name *.gz -exec cat {} ;
find /home/feeds/data -type f -not -path *def/incoming* -not -path *456/incoming*
find /home/foo/bar.com/ -mmin -12 grep -v error_log\|baz
find /home/ian/Desktop/TEST/ -type f -mmin -1 -execdir echo cp {} {}_backup ;
find /home/jason/code -iname *.txt
find /home/jms grep *.txt wc -l
find /home/kparisi -printf %M %pn
find /home/loni/config -type f -exec sed -i s/${PATTERN}/${REPLACEMENT}/g {} ;
find /home/mba/Desktop/ -type d -name logs awk { print $1"/*" }
find /home/mba/Desktop/ -type d -name logs sed s/$/\/\*/
find /home/mba/Desktop/ -type d -name logs sed s/$/\/\*/ xargs rm -r -f
find /home/myusuf3/Downloads/ -name *.nzb -exec mv {} /home/myusuf3/.hellanzb/nzb/daemon.queue/ +
find /home/mywebsite -type f -name *.php -exec grep -l base64_decode {} +
find /home/mywebsite -type f -name *.php xargs grep -l base64_decode
find /home/palchan/code ( -name *pattern* ) -prune -o -type f ( -name *. leftsquarebrc CcHh rightsquarebrc  -o -name *.cpp -o -name *.hpp ) -print
find /home/rk -type f xargs -n 100
find /home/sample/ -name $i awk -F -/ {print $(NF-1) "/" $NF}
find /home/san -type f -name *'* -print0 xargs -0 -L 1 rename ' 
find /home/school/exam -print
find /home/shantanu -atime +2 -name my_stops* -exec rm {} ;
find /home/spenx/src -name a1a2*txt xargs -n 1 dirname xargs -I list mv list /home/spenx/dst/
find /home/test -regextype posix-extended -regex ^.*test\.log\. leftsquarebrc 0-9 rightsquarebrc {4}- leftsquarebrc 0-9 rightsquarebrc {2}- leftsquarebrc 0-9 rightsquarebrc {2}\.zip -mtime +3
find /home/user
find /home/user ( -type f -o -type d )
find /home/user -type f -mmin -4860 -a -mmin +3420 -printf %sn awk {s+=$1}END{print "total size: "s" bytes"}
find /home/user -type f -mmin -4860 -a -mmin +3420 xargs du awk {s+=$1}END{print "total size: "s}
find /home/user -type f -printf %fn
find /home/user -type f -printf %fn
find /home/user/Maildir/.SPAM/cur -type f -exec rm {} +
find /home/user/Maildir/.SPAM/cur -type f xargs rm
find /home/user/directory -type f -mmin -50 -name *.mpg ( ! -regex .*/..* ) ftp ...
find /home/user/find
find /home/usr/AAA -maxdepth 4 -mindepth 4 -type d -iname VIP_Info* -printf %pn
find /home/virt -exec touch -t 200001010000 {} ;
find /home/whoever/ /mnt/hd -name *.cpp -exec grep name {} ; -print
find /home/you -iname *.pdf -atime +60 -type f
find /home/you -iname *.pdf -printf %A@ %p\n sort -n head -n 100
find /home/yourdir -name *.txt -exec cat {} ;
find /home/yourdir -name *.txt cat $i
find /home/zjm1126/ -name *.html -print0 xargs -0 sed -i s/tttt/new-word/g
find /location/ -name *.tar -mtime -7 -print0 xargs -0 ls -r -t head -1
find /mail -type f cpio -p -v -d -m -B /home/username
find /mnt/ -maxdepth 2 -name 1_drive_check.sh -executable -exec {} ;
find /mnt/STStorage/ -type d -mtime +14 -exec mv -v {} /mnt/LTStorage/ ;
find /mnt/STStorage/ -type d -mtime +14 -exec mv {} /mnt/LTStorage/ ;
find /mnt/STStorage/ -type d -mtime +14 -exec mv {} /mnt/LTStorage/ ;
find /mnt/STStorage/ -type d -mtime +14 xargs -I {} mv {} /mnt/LTStorage/
find /mnt/data -type f parallel -j 64 md5sum
find /mnt/hd -name *.cpp find /mnt/hd -name *.cpp grep name
find /mnt/hdd -type f -print file -f
find /mnt/hdd -type f -print file -i -f
find /mnt/offsite/backup -type f -mtime +365 -exec rm {} ; -print
find /mnt/win_host -type d
find /mountpoint -mtime +42 -type f -exec rm {} ;
find /my/dir -type f -print0 xargs -r 0 sha256sum
find /my/path/ -mindepth 2 -maxdepth 2 -type f -name README.txt -mtime +30 -printf %h\n xargs echo rm -r
find /myDir -mindepth 1 -mtime 7 -exec rm -rf {} ;
find /myDir -name log* -and -not -name *.bz2 -ctime +7 -exec bzip2 -zv {} ;
find /myMusic -type f -iname *.mp3
find /my_directory -mtime -1d -type f -exec mv {} /new_dir/. ;
find /mydir -name *.test -delete
find /mydirectory/ -type d cd $i find $PWD -type f -name *.* sort -n -r head -5
find /opt/site/ -name .log.txt xargs cat awk {$NF=""; print $0} xargs sed /Filesystem/d sed 1i Owner RepoName CreatedDate column -t
find /path -name *.md -exec perl -pi -e s/FOO/BAR/g {} ;
find /path -name pattern -print xargs command
find /path -print0 xargs -0 -n 1 -P -c pngcrush $1 temp.$$ && mv temp.$$ $1 sh
find /path -type f
find /path -type f -exec sed -i s/oldstr/newstr/g {} ;
find /path -type f -iname *.txt -exec sed -i.bak s/$/  def/ {} +
find /path -type f -name *.dat awk -F -. a leftsquarebrc $4 rightsquarebrc ++
find /path -type f -perm -u=x -print awk -F -/ { rec=$0; sub(/_v leftsquarebrc 0-9 rightsquarebrc .*$/,"",$(NF-1)); if( $NF == $(NF-1) ) print rec }
find /path-to-directory -type f -mtime +60 -print0 xargs -0 ls -l -t -r
find /path/ -exec stat {} --printf=%yn ; sort -n -r head -1
find /path/ -type f -name *.rm -exec ffmpeg -i {} -sameq {}.mp3 rm {} ;
find /path/ -type f -name *wav -exec ffmpeg -i {} -sameq {}.mp3 ;
find /path/people -mtime -1 -type f -printf mkdir --parents %h/updated_filesn sort uniq sh
find /path/to -name * leftsquarebrc  leftanglebrc  rightanglebrc :"\\|?* rightsquarebrc * -exec bash -c n=$(sed 's/ leftsquarebrc  leftanglebrc  rightanglebrc :"\|?* rightsquarebrc /_/g'  leftanglebrc  leftanglebrc  leftanglebrc  '{}'); echo '{}' "$n" ;
find /path/to -path */ leftsquarebrc 21 rightsquarebrc  leftsquarebrc 90 rightsquarebrc  leftsquarebrc 09 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc / leftsquarebrc abc rightsquarebrc .txt xargs awk ....
find /path/to -regex .*.(jpg|gif|png|jpeg)
find /path/to awk {print length($0)} sort -n -r head -n 1
find /path/to/ -name ?????*
find /path/to/ABC -type d -name CVS -exec rm -fdr {} ;
find /path/to/Main -type f -name *.txt -exec python2.7 ../getDOC.py {} ; -exec sleep 10 ;
find /path/to/base/dir -type d -ctime +10 -exec rm -rf {} ;
find /path/to/base/dir -type d -ctime +10 xargs rm -r -f
find /path/to/dir ! ( -name .gitignore -o -name *.js ) -type f -mtime +7 -exec rm {} ;
find /path/to/dir ! -name .gitignore -type f -mtime +7 -exec rm {} ;
find /path/to/dir ! -newer $(ls -t | sed 'x!d') -exec rm {} ; ls -t sed x!d
find /path/to/dir -maxdepth 0 -ctime +1 -exec rm -fr {} +
find /path/to/dir -not ( $(php files.php) ) -delete php files.php
find /path/to/dir -regextype posix-extended -regex /path/to/dir/ leftsquarebrc 0-9 rightsquarebrc {8,}.* -exec ls -lh {} ;
find /path/to/dir -type f -ctime -0 -name *.* zip -@ file.zip
find /path/to/dir -type f -exec sed -i s/original/replacement/g {} +
find /path/to/dir -type f -exec sed -i s/original/replacement/g {} ;
find /path/to/dir -type f -name *.php -exec sed -i /string-to-remove/{1d;} {} ;
find /path/to/dir/ -type f -name *.html -exec perl -ibak -pe s/\( leftsquarebrc 0-9 rightsquarebrc \{1,3\}\.\)\{3\} leftsquarebrc 0-9 rightsquarebrc \{1,3\}/** masked ip **/g {} ;
find /path/to/dir/ -type f -name *.xml ! -type l -exec sed -i s/search_regexp/replacement_string/ {} ;
find /path/to/dir/ -type f -name *.xml ! -type l xargs sed -i s/search_regexp/replacement_string/
find /path/to/directory -type f -exec md5sum {} +
find /path/to/directory -type f -exec sed -e / leftanglebrc !--String 1 -- rightanglebrc /,/ leftanglebrc !--String 2 -- rightanglebrc /d {} ;
find /path/to/directory -type f -name *.mov
find /path/to/directory/ -type f -name *.ksh -exec sed -ibak s/^echo "/echo -e "/ {} ;
find /path/to/file -user user1 -perm -u+rwx
find /path/to/files
find /path/to/files -name *.php xargs sed -i -e s/www.example.com/subdomain.example.com/g
find /path/to/files -name artifact* -type f -mtime +7 -exec rm {} ;
find /path/to/files -name pattern* -print0 xargs -0 ls
find /path/to/files -type f -exec file {} ; nawk -F -: !arr leftsquarebrc $2 rightsquarebrc ++
find /path/to/files -type f -name *.txt ...
find /path/to/files -type f -name M*.jpg -exec bash -c echo mv "$1" "${1/jpg/mxg}" -- {} ;
find /path/to/files -type f -name M*.jpg -exec rename s/jpg$/mxg/ {} ;
find /path/to/files* -mtime +5 -exec rm {} ;
find /path/to/folder -iname *.bin -o -iname *.sh
find /path/to/folder/ -mtime 1 -exec rm {} ; // Deletes all Files modified yesterday
find /path/to/jpgs -type f -exec sh -c jhead -v {} | grep 123 ; -print
find /path/to/look/in/ -type d -name .texturedata
find /path/to/look/in/ -type d -name .texturedata -exec chmod 000 {} ; -prune
find /path/to/look/in/ -type d -name .texturedata -prune
find /path/to/look/in/ -type d -name .texturedata -prune -print0 xargs -0 chmod 000
find /path/to/photos -iname *.jpg -o -iname *.png -type f -exec mv -nv -t /path/to/master -- {} +
find /path/to/photos -type f -exec mv -nv -t /path/to/master -- {} +
find /path/to/scripts -type f -name *.ksh -exec sed -ibak /ORACLE_HOME/s/10\.2\.0"/11.2.0.2_org"/ {} ;
find /path/to/search -name file.txt head -n 1 awk -F -t -v dir=$dir {printf "cp \"%s\" \"%s\"\n", $1, dir} sh
find /path/to/search -name file.txt head -n 1 cp $path $dir
find /path/to/search -type f -iname *.mp3 -exec mv {} path/to/music ;
find /path/to/search/ -type f -iname *string* xargs -0 cp -t /path/to/copy
find /path/to/some/files/ -mindepth 3 -maxdepth 3 -name *.dat
find /path/to/somewhere
find /path/to/somewhere -exec path/to/script.sh {} ;
find /path/to/src -name *.nr -exec cp {} /path/to/dest ;
find /path/to/your/.waste -name filename.* -print
find /path/to/your/files -name *.html.tmp -exec sh -c mv -i "{}" "$(dirname "{}")/$(basename "{}" .tmp)" ;
find /pathto_folder -type f -iname file1 -delete
find /proc -regex .*/ leftsquarebrc 0-9 rightsquarebrc .* -prune -o -print
find /proc -regex /proc/ leftsquarebrc 0-9 rightsquarebrc .* -prune -o -print
find /proc -user someone -ls
find /replica_path/ -mmin +1 wc -l
find /results/ -type f -name *Metadata*.xml read file java -j -a -r $SAXON/saxon9h3.jar -o -: -$ -{ -f -i -l -e -% -. -x -m -l -} -. -c -s -v $file $WORKDIR/transform.XMI.xsl
find /root -type f -name * * -exec rm -f {} ;
find /root/ -name wallet.dat -execdir bash -c echo cp "$0" "/home/backup/${PWD##*/}-${0#\./}" {} ;
find /root/of/files -type f -name *00080*
find /root/of/files -type f -name *138.096.000* -exec rm {} ;
find /rootdir/ -name index.html -exec sed -i 1,196d {} ;
find /search/path/ -type f -name *my_file.txt* -exec vim {} ;
find /shared/Simulations/.
find /some/directory -type f -name *.txt -print -exec sed -i s/foo/bar/g {} ;
find /some/path -name *.html -print0 xargs -0 sed -i -n / leftanglebrc div class="LoginOuterCssClass" id="ctl07" rightanglebrc /{:a;N;/ leftanglebrc \/div rightanglebrc /!ba;N;s/.*\n//};p
find /some/path -perm 0777
find /some/path -type f -name *.c -exec sed -i /extern "C" void myPrintf(char \*fmt, \.\.\.);/d {} ;
find /some/path -type f xargs sed -i s/\.0\( leftanglebrc \/rating rightanglebrc \)/\1/g
find /some/start/dir -cmin -30 -type f
find /somedir -type f -print grep -i LMN2011 xargs grep -i LMN20113456
find /somedir -type f -print grep LMN2011
find /somedir -type f -print0 grep -i -z LMN2011 xargs -0 grep -i LMN20113456
find /source-tree -type f -exec cp {} /target-dir ;
find /source/picturesRoot -type f -name *.JPG -exec rsync -a {} /destination/flatView/ ;
find /students -maxdepth 1 -type d -perm -o=r
find /students -perm -o=r
find /stuff -type d -exec script.py {} +
find /test/$1 -type f -name *.html xargs sed -i -r s,href="http://'"$1"'/,href="/,g
find /thepath -type d -empty -print0 xargs -0 rmdir -v
find /tmp ( -name twofirmscoop.so -o -name twofirms.so ) -exec ls -lt {} +
find /tmp -name *$ORIGNAME* -exec /tmp/rename.pl {} +
find /tmp -name *.ABC read i cp $i $(basename $i | md5sum | cut -c1-6)$(basename $i) basename $i md5sum cut -c -1 -- -6 basename $i
find /tmp -name *.pdf -or -name *.doc xargs rm
find /tmp -regex .*daj.*\.txt -printf %p %m  -exec sh -c sed  -e 's/ leftanglebrc ReplaceMe rightanglebrc /#DONE#/gi' $@ | md5sum _ {} ;
find /tmp -type f ( -name *.txt ) cut -c -1 -4 -- nl
find /tmp/ -depth -name * * -execdir rename s/ /_/g {} ;
find /tmp/dir1 /tmp/dir2 .....
find /tmp/logs/ -maxdepth 1 -mindepth 1 -type d -mtime -30 xargs ls -t -d -1
find /tmp/targets/ -amin 120 -exec mv {} {}.found ;
find /tmp/testFiles -name *.xml -exec dos2unix {} +
find /tmp/unpacked -type f parallel -j 1 -I ,, parallel --arg-file-sep // -X grep -H -o -n -b -f ,, {} // :::: /tmp/blocks_of_words
find /u01/ -type f -size 0 -mtime +2 -name  leftsquarebrc !. rightsquarebrc * -exec rm {} +
find /u01/ -type f -size 0 -mtime +2 -name  leftsquarebrc !. rightsquarebrc * -exec rm {} ;
find /u01/ -type f -size 0 -mtime +2 -name  leftsquarebrc !. rightsquarebrc * -print0 xargs -0 rm
find /users/rhysparker/downloads/ -maxdepth 1 ( -iname *.pkg -o -iname *.app -o -iname *.dmg ) -exec mv {} /folder/location/ ;
find /usr -follow -name *.sh
find /usr -name *.sh
find /usr -name *.sh
find /usr -name tclConfig.sh tkConfig.sh
find /usr -name tkConfig.sh
find /usr/audio/incoming -name *.mp3 -exec eyeD3 -t New Title {} ; -exec mv {} /usr/audio/complete ;
find /usr/lib -maxdepth 1 -type l -iname *libblas* xargs -I -{ -} sh -c echo "{} = rightanglebrc " $(realpath {})
find /usr/lib/libdb.so -type l -xtype l -print -delete
find /usr/local/svn/repos/ -maxdepth 1 -mindepth 1 -type d -printf %f0 xargs -0 -I -{ -} echo svnadmin hotcopy /usr/local/svn/repos/{} /usr/local/backup/{}
find /usr/share/terminfo
find /var/backup -type f -name foo -mtime -20 -delete
find /var/backup -type f -name foo -mtime -20 -print0 xargs -0 rm -f
find /var/cache/pacman/pkg -name vim- leftsquarebrc 0-9 rightsquarebrc *.gz
find /var/cache/pacman/pkg -name vim-*-*-*.pkg.tar.xz
find /var/cache/pacman/pkg -regex .*/vim- leftsquarebrc ^- rightsquarebrc *- leftsquarebrc ^- rightsquarebrc *- leftsquarebrc ^- rightsquarebrc *.pkg.tar.xz
find /var/lib/tomcat6/webapps -maxdepth 1 -type d
find /var/log/httpd/ ! -name *gz -exec tail -n 15 {} +
find /var/log/processing -name *.log -exec basename {} ;
find /var/spool/mail -type f cpio -p -v -d -m -B /home/username/mail
find /var/tmp/stuff -type f -iname backup* -mtime +90 -exec rm {} +
find /var/tmp/stuff -type f -iname backup* -mtime +90 -print0 xargs -0 rm
find /var/www -maxdepth 2 -mindepth 2 -type d -name ${search}
find /var/www -name .hg_gg -execdir bash -c mv {} .hg ;
find /var/www -type d -name .hg_gg -execdir bash -c mv {} .hg ;
find /var/www/* ( -path ${Iggy leftsquarebrc 0 rightsquarebrc } $(printf -- '-o -path "*%s" ' "${Iggy leftsquarebrc @ rightsquarebrc :1}") ) -prune -type d printf -- -o -  -- -p -a -t -h -  -" -* -% -s -" -  ${Iggy leftsquarebrc @ rightsquarebrc :1}
find /var/www/advertise/ -name *.php -type f -exec sed -i s#'/home/example/public_html#$_SERVER leftsquarebrc 'DOCUMENT_ROOT' rightsquarebrc  . '#g {} ;
find /var/www/cgi-bin -name touch -cmin 10 -exec echo ok ;
find /var/www/html/folder1/folder2/folder3/ -type f -mtime +90 -exec zip filename.zip {} ;
find /var/www/media_test1/media001/ -type f -not -name th* -exec cp {} /var/www/media_test2/media001/ ;
find /var/www/page/logs/ -name *.gz -exec zgrep -H /index.php {} ;
find /var/www/page/logs/ -name *.gz -exec zgrep -l /index.php {} ;
find /var/www/sites -type f xargs sed --in-place s/abc@gmail\.com/mynewemail@elsewhere.com/g
find /var/www/temp/updates/ -type d -name date-* -printf %T@ %p\n sort -n head -n -2 cut -f -2 -- xargs rm -r -f
find /var/www/vhosts/ -not ( -name *.jpeg -o -name *.jpg ) -ctime 0 -type f
find /var/www/websitename/ -name *.html -exec sed -i.bak s/.title.Old title..title./ leftanglebrc title rightanglebrc New title leftanglebrc \/title rightanglebrc /g {} ;
find /volume1/uploads -name *.mkv -exec /tmp/rename.sh {} ;
find /volume1/uploads -name *.mkv -exec mv {} {}.avi ;
find /volume1/uploads -name *.mkv -exec rename .mkv .avi {} ;
find /volume1/uploads -name *.mkv -exec rename s/\.mkv$/.avi/ {} ;
find /volumes/OD -type d ! -iname .*
find /where/to/search -type f -iname *.SUFFIX -exec echo USER DEFINED STRING ;
find /x -path /x/y -prune -o -type f -print
find /your/dir/ -type f sed -i $file s|index.html|/|g
find /your/directory ! -user nobody -exec echo chown user:group {} ;
find /your/folder -type f -exec mv {} {}.cel ;
find /your/path -mindepth 1 -maxdepth 1 -type d sort -r -n
find /your/path -name *.TERM sort -t -. -k 1 -n tail -n +2 xargs -r rm
find /your/path/ -exec touch -r $(echo {} | sed "s#/your/path#/your/original/path#g") {} ; echo {} sed s#/your/path#/your/original/path#g
find /your/source/dir/ -iname *.txt.mrg -exec ln -s {} /your/dest/dir/ ;
find /yourdir ! -user root
find /yourdir -printf %u %p\n
find A -type d ( ! -wholename A/a/* )
find ABG-Development/ -name *.php -print0 xargs -0 grep  leftanglebrc ? wc -l
find Balzac/ -iname 20??????.txt -exec cat {} + cut -c 10-21 sort uniq egrep -R -e  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc - leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc .mp3
find DIR -iname regex -type f -exec wc -l {} ;
find DIR -iname regex -type f -exec wc -l {} ; awk { SUM += $1 } END { print SUM }
find DIRECTORY -type f ( -name *.jpg -o -name *.html ) -mtime +95
find Desktop/ ( -iname *.JPG -o -iname *.jpeg -o -iname *.jf leftsquarebrc il1 rightsquarebrc f -o -iname *.exif -o -iname *.tiff -o -iname *.gif -o -iname *.bmp -o -iname *.png ) -exec cp -n {} test ;
find DirPath -type d -exec bash -c  leftsquarebrc  "x`find "{}" -maxdepth 1 -type f`" = x  rightsquarebrc  && echo "{}" ;
find DirsRoot/ -maxdepth 1 -type f
find DirsRoot/* -maxdepth 0 -type f
find Documents -name *.py -o -name *.html
find Failed Loaded ToLoad -name file
find Sales Purchase -type f sed s_\.\/__
find SomeNotExistingDir ... -exec ls -1 {} +
find SomeNotExistingDir ... -print0 xargs -r -0 ls -1
find SomeNotExistingDir ... xargs -r ls -1
find Sources/$1-$2 -name *.php -o -name *.rb ....
find Test Folder -type d -exec '{}' ;
find Test Folder -type d -print0 xargs -0 rm -r -f
find `echo "${searchpath}"` -type f -print0 echo ${searchpath} xargs -0 grep -l -E "${string1}".*"${string2}".*"${string3}"
find `paste -s -d' ' directories.list` -type f -name core.* -or -name *.o paste -s -d -  directories.list
find `pwd` -iname .* -type f pwd
find `pwd` -maxdepth 1 -type f -print pwd
find `pwd` -name .htaccess pwd
find `pwd` -name file.ext -printf %fn pwd
find `pwd` -type f -name *.ksh -exec grep -E -o  leftsquarebrc a-zA-Z0-9_ rightsquarebrc *.ksh {} ; pwd
find `pwd` -type f -name *.ksh -exec grep -E -o  leftsquarebrc a-zA-Z0-9_ rightsquarebrc *.ksh {} ; pwd sort -u
find `pwd` pwd
find a -type f -name *.txt -exec sed -i.bac s/^/PREPENDED / {} ;
find a b -type f ! -name *crazy* -print sed -e s|.*/|| diff -X -r a b
find a b -type f ! -name crazy -printf %f\n diff -r a b -X
find a/ -regextype egrep -not -path */gen* -a -regex .*(java|xml)$
find a/ -type f -exec mv {} {}.eml ;
find bar -type f -name *.txt -o -name *.log -o -name *.csv -delete
find bar1 -name *foo* -not -type d -not -name *.cc -exec ln -s $PWD/{} bar2/ ;
find c:path -iname *.txt -exec sed s/old/new/g {}
find config/view -type f -name *.xml -exec bash -c sed -n "/def=something/,/ leftanglebrc \/box rightanglebrc /!p" "$0"  rightanglebrc  tmp.xml; mv tmp.xml "$0" {} ;
find config/view -type f -name *.xml -exec sed -i -n /def=something/,/ leftanglebrc \/box rightanglebrc /!p {} +
find config/view -type f -name *.xml -exec sed -n /def=something/,/ leftanglebrc \/box rightanglebrc /!p {} ; -exec mv tmp.xml {} ;
find data/ -name *.json -exec cat {} ;
find dir -exec sh -c ... | ... | ... ;
find dir -name *.* -print rev cut -d . -f 1 rev
find dir -name *.png -execdir process.py {} ;
find dir -name file.* -maxdepth 1 sort -n -t -. -k 2 tail -1
find dir -type d -links 2
find dir -type f -print0 xargs -0 rm
find dir -type f -regex .*/ leftsquarebrc . rightsquarebrc  .* -exec rename .   {} ;
find dir -type f xargs sed -i -. -b -a -k s#from#to#
find dir/ -type f -exec bash -c mv "$1" "$(iconv -f UTF8 -t ASCII//TRANSLIT  leftanglebrc  leftanglebrc  leftanglebrc  $1)" -- {} ;
find dir/ -type f -exec bash -c mv "$1" "${1%/*}/$(iconv -f UTF8 -t ASCII//TRANSLIT  leftanglebrc  leftanglebrc  leftanglebrc  ${1##*/})" -- {} ;
find directory 1 -type f -print0 xargs -0 -i basename {} ...
find dirname -exec echo found {} ;
find dirname -exec grep foo {} +
find dirname -iname *.c -exec mv {} {}c ;
find dirname -print0 xargs -0 grep foo
find dirname -type f -name *.html -exec sed -e s/^(//;s/)//;s/^/1-/ {} ;
find files/ -type f -name .*
find files/* -exec bash -c /path/to/stagger  leftanglebrc  "$1" -- {} ;
find folder -type f -exec gzip -9 {} ; -exec mv {}.gz {} ;
find folder -type f -executable -exec echo {} /tmp ;
find folder* -name *.a -print cpio -o cd /path/to/dest cpio -i -d -v
find folder/to/frob -type f -exec sh -c  rightanglebrc  "{}" ;
find folder2 -name *.* -exec mv {} folder ;
find foldername -type d -exec chmod 777 {} ;
find foo -name *.h -print0 xargs -0 -n -1 basename sort uniq -c
find grep -v -F -f duplicates_sorted.txt
find home -name myfile.xml -exec sh sdiff.sh $basexml {} ;
find home -name myfile.xml -print -exec diff home/hello/myfile.xml {} ;
find htdocs -type f -exec chmod 664 {} + -o -type d -exec chmod 775 {} +
find index.html xargs -r -t sed -i s/ leftanglebrc script rightanglebrc if(window.* leftanglebrc \/script rightanglebrc //g
find js/ -type f -maxdepth 3 -name *.js -exec uglifyjs -o {} {} ;
find lattice* -type f -name POSCAR.* -exec bash -c echo mv -iv "$0" "${0/POSCAR./POSCAR}" {} ;
find local_dir -type d -print0 ssh remote while IFS="" read -r -d "" a; do mkdir -p "remote_dir/$a"; done
find lol -depth -type d ( -name .git -o -name .hg -o -name .svn ) -exec rm -r {} ;
find main-directory -type f -exec mv -v {} {}.html ;
find main_directory/ -name myfile.txt tar -c -z -v -f mytar.tar.gz -T
find model -type f -name *_* -exec sh -c d=$(dirname "$1"); mv "$1" "$d/$(basename "$1" | tr -d _)" sh {} ;
find mv {} $(modify {} whenever you want) ; modify {} whenever you want
find my_dir/ -name *filename* -exec sh -c tail -200 {} | grep lookingfor ;
find mydir $dis*.xml
find mydir -maxdepth 1 -name $dis*.xml
find mydir -mindepth 1 -maxdepth 1 -type d -exec bash -c mv {}/* mydir; rm -ri {} ;
find mydir -name $dis*.xml
find mydir -type d -exec ./myscript {} ;
find mydir -type f -exec curl -u xxx:psw --ftp-create-dirs -T {} ftp://192.168.1.158/public/demon_test/{} ;
find nested directory with spaces -type f -exec ./test.sh {} +
find olddir -name script.sh -printf %p0 -printf newdir/%P0 xargs -0 -L -2 cp -n
find olddir -type d -printf newdir/%P0 xargs -0 mkdir -p
find options -name dontfile.txt
find output-* -name *.chunk.?? xargs -I -{ -} ./myexecutable -i {} -o {}.processed
find path ( -name foo.js -o -name FOOBAR -o -name bar.json -o -name fubar -o -name .foo -o -name .baz ) -exec rm -fr -- {} ;
find path ( -name foo.js -o -name FOOBAR -o -name bar.json -o -name fubar -o -name .foo -o -name .baz ) -print0 xargs -0 rm -f -r --
find path -maxdepth 1 -not -name file-to-keep -print0 xargs -0 rm
find path/to/dir -type d awk -F -/ $NF != toupper($NF) {l = n = $0; sub($NF "$", toupper($NF), n); print "mv " l " " n;} tac
find path/to/dir -type d awk -F -/ $NF != toupper($NF) {l = n = $0; sub($NF "$", toupper($NF), n); print "mv " l " " n;} tac sh
find path/to/dir/ -name appropriate name pattern -type d -maxdepth 1
find path/to/files -name archive.gz -exec sh -c gzip -dc {} | awk 'NR==100' ;
find path/to/suspect/files -size +10c -exec padded.sh {} +
find procesoSitemap-*.jar -exec printf . ; wc -c
find products -type f -print xargs gawk ...
find public/javascripts/ -type f -exec awk /new_pupil_group_form/ && length($0)  leftanglebrc  400 { print FILENAME":"FNR": "$0} {} ;
find public_html -type f -name *.php
find public_html -type f -name *.php xargs -n 1 dirname sort -u
find public_html/ -type f -name *.js -exec sed -i s|;document.write(\x27 leftanglebrc iframe src="http://sitecorporatemanagement.ru/pretzellogmeins.cgi?8" scrolling="auto" frameborder="no" align="center" height="3" width="3" rightanglebrc  leftanglebrc /iframe rightanglebrc \x27);||g {} ;
find rapidly_shrinking_drive/ -name offender1 -mtime -1 -print0 du --files0-from - -h -c tail -n 1
find rootDir -name myprefix_*
find root_dir -name download.txt -exec cat {} ;
find server.log* -exec ls -lth {} ; awk {print $9} xargs awk -F "2012.12.06 01:56:01"  leftanglebrc  $1 && $1  leftanglebrc = "2012.12.08 04:30:00"
find some/dir -name foo.gz -exec zcat {} ;
find some/dir -printf %P\n
find some_dir -mtime +0 -printf %f\n -mindepth 1
find some_files -name *.html -exec sed -e :a;$!{N;ba};s/`cat old.tmp`/`cat new.tmp`g -i {} ; cat old.tmp cat new.tmp
find somedir/ ( -type d -exec chmod 0775 {} + -true ) -o ( -exec chmod 0644 {} + )
find somedir/ -name *.js -exec cat {} +
find source -name *.php -print0 rsync -a -v --files-from - --from0 ./ ./destination/
find sourcedir -type f -print0 xargs -0 mv -t target
find src/ ! -name Default.png -exec cp {} dest/ +
find src/ -type f ! -name Default.png -exec cp {} dest/ +
find src/ -type f -maxdepth 1 ! -name Default.png -exec cp {} dest/ +
find src/dir/ -name *.txt -exec mv {} target/dir/ ;
find start_dir -name something -print0 xargs -0 /bin/rm -r -f
find subd/*.html -type f -exec ./mycmd {} opts  rightanglebrc  subd2/$(basename {}) ;
find test ! -path test/2*
find test -maxdepth 1 -type f -name *.txt -print0 tar -c -f test/foo/test.tar --null --files-from
find test -name *.coffee ! -wholename */client/*
find test -name client -prune -o -name *.coffee -print
find test -type d -regex .*/course leftsquarebrc 0-9. rightsquarebrc *
find test -type f -exec sed -i /welcome/d {} ;
find test -type f -printf %h\0%d\0%p\n sort -t \0 -n awk -F \0 {print $3}
find test1 -type f -name textfile.txt -print
find test1 -type f -print
find testdir/ -depth read file dirname $file echo $(basename "$file") basename $file tr  leftsquarebrc :lower: rightsquarebrc   leftsquarebrc :upper: rightsquarebrc  mv $file $NEWNAME
find videos/ -name *.mp4 -exec ffmpegScript {} ;
find www.site.com/samples/ -name *.h -exec cp -p {} backup/{} ;
find your_dir -type d -printf %p:
find your_folder -depth -name * * -execdir rename s/ /_/g {} ;
find yourdir -type d -name *.app -exec ln -s {} /AppLinks ;
find yourdir -type f -name *.txt sed s/.*\///
find yourdir -type f -name *.txt sed s:.*/::
find yum/yum_hyd -name "*".csv sed s/"/\\"/g xargs rm
find {my/path,another/path,some/path} -name *some_pattern*
find ~ ! -name * leftsquarebrc 0-9 rightsquarebrc *
find ~ -name *.mp3 -o -name *.ogg
find ~ -type f ! -name * leftsquarebrc 0-9 rightsquarebrc *
find ~ -type f -exec ....
find ~/Desktop/administration/ -type f -exec sed -i  s#\\MySite\\scripts\\connection.php#\/MySite\/scripts\/connection.php#g {} ;
find ~/Download -name *.avi -exec mv {} Directory ;
find ~/SAN/$site/*.tar.gz -maxdepth 1 -mtime +60 -exec rm {} +
find ~/addon_backups/202/ME -name *.tar.gz -maxdepth 0 -ctime +365
find ~/addon_backups/202/ME -name *.tar.gz -maxdepth 1 -mtime +365 -exec rm {} +
find ~/addon_backups/202/ME/*.tar.gz -mtime +365 -exec rm {} +
find ~/code -type d -name  leftsquarebrc ^\. rightsquarebrc * tr \n : sed s/:$//
find ~/code -type d sed /\/\\./d tr \n : sed s/:$//
find ~/code -type d tr \n : sed s/:$//
find ~/cron/obnam -type f -mtime +3 -name test-*.txt -exec rm -v {} +
find ~/dev/tools/flex-4.5.0.20967 -type d -exec chmod o+rx {} ;
find ~/dir1 *.m4a xargs play
find ~/dotfiles -maxdepth 1 -mindepth 1
find ~/jars grep .jar$ sed :a;N;$!ba;s/\n/:/g
find ~/jars grep .jar$ tr \n :
find ~/my-documents/ -iname ABC_ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc .JPG -type f -exec cp {} ~/my-documents/archive/ ;
find ~/test -type d -exec basename {} ;
find ~/test -type f -name *.css -execdir cmd {} +
find-repos-of-install grep rpmfusion xargs yum update
find2perl . -t -y -p -e f
find: paths must precede expression:
findstr /I /l d:0.0
findstr /I D:0.0
findstr /I d:0.0
findstr /c:error /c:warning C: MyFiles*.txt
findstr /i error warning C:MyFiles*.txt
findstr /r /c:^#  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc * " leftsquarebrc a-zA-Z0-9 rightsquarebrc *.inc" all_pre.txt more
findstr /r /c:^#  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc * " leftsquarebrc a-zA-Z0-9 rightsquarebrc *.inc.*" all_pre.txt more
findstr /r ^ leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *$ ^- leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *$ ^0$
findstr /r error warning C:MyFiles*.txt
findstr /s /m /i READONLY *.txt
findstr /s /m READONLY *.txt
findstr /vrc:^ leftsquarebrc ^A-Za-z0-9 rightsquarebrc *DontAppend file.txt
findstr Error %LOG% goto :sendmail
findstr error warning C:MyFiles*.txt
finger $USER_NAME grep Directory expand cut -d   -f 2
finger -s testuser1 testuser2 testuser3 awk {print substr($0,1,31),substr($0,46,14)}
finger awk NR rightanglebrc 1{print $2,$3}
finger colrm 34 39
firefox  leftanglebrc some-url-with-complex-authentication rightanglebrc  -s -a -v -e -- -t -o -- -f -o -l -d -e -r ./somewhere
firefox $(tail -1 output.txt) tail -1 output.txt
firefox YOUR_URL
first-cmd second-cmd
first_mail_sent_date_time datetime NOT NULL FOO,
fixdirs -x s -r _ *
flac -d $i
flags 1
flags_help
fld1, text for, fld2, fld3, fld4,....
flex -o shell.c shell.l
float a, b, c, sol1, sol2
flock -n -e 200 echo This script is currently being run exit 1
flock -n -e 200 exit 1
flock -n /tmp/lockfile.lck echo Script B is not running echo Script B is running right now
flock -n /var/run/your.lockfile -c /your/script
flock -s 200
flock -x 200 sleep 10 echo original finished sleep 2 flock -x -w 2 200 echo a finished
flock /tmp/lockfile.lck ScriptB.sh
fmt -d 
fnHotlinkG2R #hotlink
fold -w 12 file
fold -w 130 file ...
fold file wc -l
folder3\executable.exe
foo
foo
foo
foo
foo
foo
foo
foo
foo
foo $i
foo -o my_buf
foo /?
foo /path/to/my/new/directory
foo 4 123
foo = 123
foo = bar
foo BAR baz
foo ^ dir/s
foo ^ dir/w
foo bar
foo bar
foo bar
foo bar
foo bar
foo bar  leftanglebrc (qux)
foo bar barfoo foobar barbar foofoo
foo bar baz bip fred barney wilma
foo bar baz quux diff file1.txt file2.txt
foo bar baz quux diff file1.txt rm file1.txt
foo bar grep --line-buffered bar foo baz tee /tmp/output
foo bar its OK -- rightanglebrc  foo bar its OK
foo bar quux
foo bar.txt
foo dir
foo dog dir
foo echo -e foonbarnbaz cat /dev/stdin
foo grep -e bar -e baz
foo node server.js
foo pwd
foo rightsquarebrc =bar
foo tail -f bar tee baz
foo tee  rightanglebrc (grep -o bar)  rightanglebrc (grep -o baz) grep -o bar grep -o baz
foo, bar
foo.o: src/foo.c src/foo.h src/bar.h
foo.o: src/foo.c src/foo.h src/bar.h
foo.pl tee foo.log
foo.py -d C:/My Folder/hello
foo.sh 111
foo.txt is different
foo/**/bar
foo/bar baz.txt
foo1 $@
fooTEXT1barfooTEXT2bar
foobar 34
foocmd ... $l
foonbar
fop.bat -x -m -l in.xml -x -s -l xsl.xsl -p -d -f out.pdf -p -a -r -a -m mFileName yourfile.xml
for@a
foreach f,$(rcFiles),  leftsquarebrc  -e $(HOME)/$f  rightsquarebrc  rcFiles HOME ln -v -f -n -s $(PWD)/$f $(HOME)/ PWD HOME
foremost -i tcpflow.out
forever list awk /server.*root.*\.log/{print $8}
forfiles -p -N -: -Q -C -A -T -R -s -s -m -* -. -x -l -s -* -d -- -3 -0 -c -C -M -D -  -/ -C -  -d -e -l -  -/ -f -  -/ -q -  -^ -0 -x -2 -2 -@ -F -I -L -E -^ -0 -x -2 -2
forfiles /m * /c cmd /c if @isdir==FALSE echo @path
forfiles /p c:Users /m *Signatures* /c cmd /c forfiles /p @path /m *.htm /c "cmd /c echo @path"
format-list help
format-list help
fortune -f head -1
found IND for country name INDIA
fpfunction
fping -c 1 -t 1 $ips sort
fpm ...blah blah details... ${DEPENDENCIES leftsquarebrc @ rightsquarebrc } path
free -h awk FNR == 2 {if (match($2," leftsquarebrc BKMGT rightsquarebrc $",a)) r=sprintf("%.0f %sB",substr($2,0,RSTART-1), a leftsquarebrc 0 rightsquarebrc ); else r=$2 " B";print "Your computer has " r " of memory."}
free -m
free -m grep Mem awk {print $3} free -m grep Mem awk {print $6} free -m grep Mem awk {print $7} free -m grep cache: awk {print $3}
free -m grep Mem:  awk {print ($3/$2)*100}
from os import getenv
from subprocess import *
fromdos post-commit
frq = run- $1 /data/data.frq
fstcompile --isymbols M.syms --acceptor I.wfst
fstcompile --isymbols M.syms --osymbols M.syms M.wfst
fstcompose I.ofst M.ofst fstprint --isymbols M.syms --osymbols M.syms
fstcompose I.ofst M.ofst fstproject --project_output fstprint --isymbols M.syms --acceptor
fstcompose I.ofst M.ofst fstproject --project_output fstprint --isymbols M.syms --osymbols M.syms
fsum SlavaSoft Inc.
fswatch  leftsquarebrc opts rightsquarebrc  -0 path ... xargs -0 -n 1 -I -{ -} your full command goes here
ftp -N my.netrc.file
ftp -i -n -s -: -% -c -u -r -r -e -n -t -F -o -l -d -e -r -P -a -t -h -% -f -t -p -_ -c -o -m -m -a -n -d -s -. -t -x -t %IPAddress%
ftp -i -s -: -y -o -u -r -s -c -r -i -p -t
ftp -n
ftp -p -v -i $HOST
ftp -v -i -s -: -s -c -r -i -p -t -. -t -x -t
ftp ... sleep 1
ftype Python.File=c:python27python.exe %1 %*
full_filename{ $partial_filename } = $filename
func ${a_variable:-"default_value"}
func arg1 arg2
func args ...
funcA tee -a out.txt
function_name $arg1 $arg2
functions --copy fish_prompt fish_prompt2
fuser -T -E -R -M -k -w mfifo sleep 5 fuser -k -w mfifo
fuser -k -n tcp 10000
fuser -k 8000/tcp
fuser -v /path/to/your/file awk BEGIN{FS=""}$38=="F"{num++}END{print num}
fv gm
g
g++ -E something.cpp vi
g++ -W -a -l -l program_name.c -o /dev/fd/1
g++ -W -a -l -l yourcode.cc -l -n -c -u -r -s -e -s -o yourprog
g++ -g -W -a -l -l testCard.cpp ../card.cpp -I -. -.
g++ main.cpp GradeBook.cpp
g++ sed -e s/no/on/g
g++ sed -e s/no/on/g
g++ tmp/test.cpp -o tmp/test
gawk  { address leftsquarebrc $1 rightsquarebrc =1 } END { for (a in address) print a;}
gawk $5 == 2 {print $1, $2, $6, $7} FS=, samplef.csv
gawk --posix -F  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\| leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * -v k=$key $1 == k $TABLE_FILE
gawk --re-interval BEGIN{RS=" leftsquarebrc 0-9 rightsquarebrc {1,2}: leftsquarebrc 0-9 rightsquarebrc {1,2}: leftsquarebrc 0-9 rightsquarebrc {1,2}. leftsquarebrc 0-9 rightsquarebrc {1,6} \\ leftsquarebrc  leftsquarebrc A-Z rightsquarebrc *\\ rightsquarebrc ";} /983a99f8-bec6-11e1-80dd-059a821d0b73/ {print savedRT, $0} {savedRT = RT} full.log
gawk --source BEGIN { exit(0) } END { exit(0) } --file syntax-test.awk
gawk -F  leftsquarebrc  $0 ~ /Exception/ && $2 ~ /^2014-01-26 16:/ {print $2} coms-core.log
gawk -F - leftsquarebrc  - leftsquarebrc  -: -s -p -a -c -e -: - rightsquarebrc  - rightsquarebrc  -+ -| - leftsquarebrc  -. - rightsquarebrc  {print $2}
gawk -F -, -f s.awk a.txt b.txt
gawk -F -: -v -d -s -t -_ -r -e -g -i -o -n -= -$ -1 /Global path:/ { if (dst_region == "ABC") print "dest_region is ABC"; else print "dest_region is not ABC" }
gawk -F -: -v -d -s -t -_ -r -e -g -i -o -n -= -$ -1 /Global path:/ { printf "dest region is%s ABC", (dst_region=="ABC"?"":" not") }
gawk -F -| -f myawkscript.awk myfile
gawk -f a.awk FileZilla Server.log
gawk -f a.awk file file
gawk -f a.awk file.xml
gawk -f ext.awk tmp.txt
gawk -f script.awk a.txt
gawk -i inplace ... *.txt
gawk -i inplace ... file
gawk -i inplace NR==1 { r = $0; print } r == $0 { next }1 file.txt
gawk -v -R -S -= -S -E -P /PATTERN/ {print RT $0 RT}
gawk -v -n -u -m -= -2 -f e.awk input.txt
gawk -v FIELDWIDTHS=5 5 5 5 8 8 8 -v OFS=: {print $1, $2, $3, $4, $5, $6, $7}
gawk -v FPAT= leftsquarebrc ^, rightsquarebrc  leftsquarebrc ^, rightsquarebrc *|( leftsquarebrc ^ rightsquarebrc *)*
gawk -v FS=" { print $2 ";" $4 } a.txt
gawk -v FS=; -v OFS=/ {match($3, /From: "(.*)"  leftanglebrc (.*)@/, m); print m leftsquarebrc 1 rightsquarebrc , m leftsquarebrc 2 rightsquarebrc }
gawk -v FS=; -v OFS=/ {match($3, /From: "(.*)"  leftanglebrc (.*)@/, m); print m leftsquarebrc 1 rightsquarebrc , m leftsquarebrc 2 rightsquarebrc } gawk -v FS=; -v OFS=/ {match($3, /From: "(.*)"  leftanglebrc (.*)@/, m); print m leftsquarebrc 1 rightsquarebrc , m leftsquarebrc 2 rightsquarebrc }
gawk -v FS=; {match($3, /From: (.*)@/, m); print m leftsquarebrc 1 rightsquarebrc }
gawk -v IGNORECASE=1 { p = 1 } / leftanglebrc appender /{ t = $0; while (getline  rightanglebrc  0) { t = t ORS $0; if (/COM_FIND leftsquarebrc . rightsquarebrc log/) p = 0; if (/ leftanglebrc \/appender rightanglebrc /) break } $0 = t } p file
gawk -v RS= rightanglebrc  NF{ print RS$0  rightanglebrc  $1".txt" } InputFile
gawk -v RS=(^|n) leftsquarebrc  leftsquarebrc  rightsquarebrc group rightsquarebrc ($|n) !/enable = 0/ {sub(/.*name leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc += leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +/,x);print $1}
gawk -v RS=0 -v ORS= {print gensub(/,( leftsquarebrc ^, rightsquarebrc +)$/,"\\1","")} file
gawk -v RS=0 -v ORS= {print gensub(/,( leftsquarebrc ^, rightsquarebrc +})/,"\\1","g")} file
gawk -v RS=Song NF{ print RS$0  rightanglebrc  "Song_"++n".txt" } Song.txt
gawk -v RS=^$ { print " leftanglebrc " $0 " rightanglebrc " } file
gawk ... file mv file.tmp file
gawk /INSERT INTO/ query.log
gawk /\ leftanglebrc GOOD\ rightanglebrc /{++i} END{print i}
gawk /\ leftanglebrc foo\ rightanglebrc / {sub(/\ leftanglebrc foo\ rightanglebrc /, "&_" sprintf("%02d",++c))} 1
gawk /isaPDAVersion/ {match($4,"( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc ),( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc ),( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc ),( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc )",a); {print a leftsquarebrc 1 rightsquarebrc a leftsquarebrc 2 rightsquarebrc a leftsquarebrc 3 rightsquarebrc a leftsquarebrc 4 rightsquarebrc }} f1
gawk BEGIN { FPAT="\\ leftanglebrc GOOD\\ rightanglebrc "; RS="^$" } { print NF } file
gawk BEGIN { RS="(^|\n)-($|\n)" } { print "Numbers:\n" $0 }
gawk BEGIN { RS="\r\n"; FS=":" } NR == 1 { split($0, array); next } { for (i=1; i leftanglebrc =NF; i++) printf "%s:%s ", array leftsquarebrc i rightsquarebrc , $i; print "" } file.txt
gawk BEGIN {RS=""} /here goes your pattern/ { print $0} INPUTFILE
gawk BEGIN {getline} $3 rightanglebrc 60{print $2} AA/ff.txt read number gawk -v number=$number $2 != number BB/ff.txt mv /tmp/ff.txt BB/ff.txt
gawk BEGIN {pattern = "/"} $0 ~ pattern {print} backup.sh
gawk BEGIN{FPAT="( leftsquarebrc ^; rightsquarebrc +)|(\" leftsquarebrc ^\" rightsquarebrc +\")"}{for(i=1;i leftanglebrc =NF;i++){printf ("%s\n",$i)}} file.csv
gawk END{if (RT!="") print "found RS"} file
gawk END{print "Number of paragraphs: "NR} RS= tmp.txt
gawk NF != 6 file
gawk NF{gsub(/.{16}/,"&\n",$0);print $0}
gawk NR==3 { print patsplit($0,a,/GOOD DI/) } file
gawk match($0, /&viewport= leftsquarebrc 0-9 rightsquarebrc +, leftsquarebrc 0-9 rightsquarebrc +,( leftsquarebrc 0-9 rightsquarebrc +),( leftsquarebrc 0-9 rightsquarebrc +),( leftsquarebrc 0-9 rightsquarebrc +),( leftsquarebrc 0-9 rightsquarebrc +),( leftsquarebrc 0-9 rightsquarebrc +)/, m){print m leftsquarebrc 3 rightsquarebrc , m leftsquarebrc 4 rightsquarebrc } filename
gawk match($0, /&viewport= leftsquarebrc 0-9 rightsquarebrc +, leftsquarebrc 0-9 rightsquarebrc +,( leftsquarebrc 0-9 rightsquarebrc +),( leftsquarebrc 0-9 rightsquarebrc +)/, m){print m leftsquarebrc 1 rightsquarebrc , m leftsquarebrc 2 rightsquarebrc }
gawk { t = $0; while (match(t, / leftanglebrc option value="( leftsquarebrc ^" rightsquarebrc *)"(.*)/, a)) { print a leftsquarebrc 1 rightsquarebrc ; t = a leftsquarebrc 2 rightsquarebrc  } } file
gawk {$7=gensub(/(.{5})(.{6})/ , "\\2\\1" , "g" , $7)}1 inputfile
gawk {for (i = 1; i  leftanglebrc = NF; i += 1) {printf "%f\t", ($i + 5) / 12;} printf "\n"}
gawk {if(NR==FNR)l leftsquarebrc NR rightsquarebrc =$0; else print l leftsquarebrc $1 rightsquarebrc  } data.txt numbers.txt
gawk {match($0, /( leftsquarebrc ^;, rightsquarebrc *)(;+|,)(.*)/, a); print a leftsquarebrc 1 rightsquarebrc , a leftsquarebrc 2 rightsquarebrc , a leftsquarebrc 3 rightsquarebrc }
gawk {split($0,n_arr," "); getline; n=split($0,v_arr," "); getline; for (i=1;i leftanglebrc =n;i++){print n_arr leftsquarebrc i rightsquarebrc  "=" v_arr leftsquarebrc i rightsquarebrc }}
gawk {x+=gsub("the","it");print} END{print "total changes:"x} file.csv
gcc  $gcc_options $1
gcc $gcc_options $1
gcc ${=gcc_options} $1
gcc ${=gcc_options} ${=1}
gcc *.c -l -r -t ./a.out
gcc -# -# -# -o hello hello.c
gcc --version awk BEGIN { print "\nCompiled on:" } { print "\t" $0 } END { printf RS }
gcc -E main.c
gcc -O 2 -o linebufferedstdout.so -f -p -i -c -s -h -a -r -e -d linebufferedstdout.c -l -d -l -l -c
gcc -W -a -l -l -W $@ ./a.out
gcc -W -a -l -l -o term -p -t -h -r -e -a -d filename.c
gcc -W -a -l -l -s -t -d -= -c -9 -9 program.c ./a.out echo $?
gcc -W -a -l -l myfnmatch.c -o myfnmatch
gcc -c -s -t -d -= -c -9 -9 -W -a -l -l -D -$ -O -P -T -I -M -I -Z -E -O 2 code.c
gcc -d -u -m -p -s -p -e -c -s
gcc -f -r -a -m -e -w -o -r -k Foundation -f -r -a -m -e -w -o -r -k AudioToolbox audio.m WavReader.m WavFileCreator.m -o audio
gcc -f -r -a -m -e -w -o -r -k Foundation audio.m WavReader.m -o audio
gcc -g -o types types.c
gcc -g -s -t -d -= -c -9 -9 -s -h -a -r -e -d -f -P -I -C -o calc.so -l -d -l calc.c
gcc -o hlink hlink.c -W -a -l -l
gcc -o my_application my_application.o -l -m -y -l -i -b
gcc -o process_io process_io.c
gcc -o redelimit redelimit.c
gcc -p -r -i -n -t -- -s -e -a -r -c -h -- -d -i -r -s
gcc -s -a -v -e -- -t -e -m -p -s -= -o -b -j -o dir/foo.o foo.c
gcc -s -t -d -= -c -9 -9 %1 %2 %3 %4 %5 %6 %7 %8 %9
gcc -v -o hello hello.c
gcc args.c -o args
gcc filename.c -o filename
gcc keys.m -f -r -a -m -e -w -o -r -k Carbon -o keys
gcc test.c `/sw/bin/curl-config --cflags` `/sw/bin/curl-config --libs` -o test.o /sw/bin/curl-config --cflags /sw/bin/curl-config --libs
gcc test.cpp `python-config --cflags --ldflags` python-config --cflags --ldflags
gci -r Select-String SomeSearchString %{tf edit $_.Path}
gcloud auth login
gcloud auth revoke
gconftool-2 -s -t string /apps/gnome-terminal/profiles/Default/background_type transparent
gcore -o /tmp/SOMETHING PID1 PID2 PID3
gdal_merge.py -o World_SRTM4.tif SRTM_*_250m_TIF.tif
gdal_rasterize -l $(basename $file .shp) -b -u -r -n 1 -t -r 0.5 0.5 -t -1 80 -9 0 180 90 $file rast2 basename $file .shp
gdal_translate -a -_ -s -r -s EPSG:25832 $f test/$f
gdb -- /usr/bin/ruby1.8
gdb --batch-silent -e -x attach $BASHPID -e -x print dlopen("calc.so", 0x101)
gdb -e -x run --args /usr/bin/ruby1.8 /usr/bin/irb
geany $(find public/javascripts/ -type f -exec awk '/new_pupil_group_form/ && length($0)  leftanglebrc  400 { printf FILENAME":"FNR" "}' {} \;) find public/javascripts/ -type f -exec awk /new_pupil_group_form/ && length($0)  leftanglebrc  400 { printf FILENAME":"FNR" "} {} ;
geany public/javascripts/a:2 public/javascripts/c:3
gedit $(ls | head -1) ls head -1
gedit sleep 2 xdotool key k
gem condi, 0.0.6, :path =
gem env grep EXECUTABLE DIRECTORY
gem install
gem install condi
gem install minitar
gem install sass-globbing
gem mail
gem mail, :require =
gem pg ,  rightanglebrc = 0.12.2
gem pg, 0.12.2
gem specification /tmp/condi-0.0.6.gem
gem specification condi -v -= -0 -. -0 -. -6
gem update heroku
generateChangeLog
generate_data pv -b -f -t consume_data tr \015 \012
generate_file_pairs parallel --colsep   ./prog {1} {2}
generating_program nc machineB 12345
generic string generator sed /\(.\).*\1/d sed /BA/d sed /AB/d sed /CB/d sed /BC/d sed /DC/d sed /CD/d sed /ED/d sed /DE/d sed /FE/d sed /EF/d sed /GF/d sed /FG/d sed /HG/d sed /GH/d sed /IH/d sed /HI/d sed /JI/d sed /IJ/d sed /KJ/d sed /JK/d sed /LK/d sed /KL/d sed /ML/d sed /LM/d sed /NM/d sed /MN/d sed /ON/d sed /NO/d sed /PO/d sed /OP/d sed /QP/d sed /PQ/d sed /RQ/d sed /QR/d sed /SR/d sed /RS/d sed /TS/d sed /ST/d sed /UT/d sed /TU/d sed /VU/d sed /UV/d sed /WV/d sed /VW/d sed /XW/d sed /WX/d sed /YX/d sed /XY/d sed /ZY/d sed /YZ/d
genhash --use-ssl -s $IP -p 443 --url $URL grep MD5 grep -c $MD5
genre/artist/album/track
geoiplookup 8.8.8.8 awk /^GeoIP Country/{ sub(/,*$/, "", $4); c = $4; } sub(/^GeoIP ASNum Edition: /, ""){ print $0 "," c }
get filename_*.txt
get-childitem *.txt -E -x -c -l -u -d -e found_nots.txt -r -e -c -u -r -s -e select-string not
get-command format-list help
get-content c:filename.txt -T -o -t -a -l -C -o -u -n -t 3
get-content foo.txt foreach-object {start powershell -n -o -e -x -i -t -  -g -e -t -- -e -v -e -n -t -l -o -g -  -- -l -o -g -n -a -m -e -  -s -e -c -u -r -i -t -y -  -- -i -n -s -t -a -n -c -e -I -D -  -4 -6 -2 -5 -  -- -a -f -t -e -r -  -$ -t -i -m -e -C -u -t -  -- -m -e -s -s -a -g -e -  -* -b -a -r -* -  -- -c -o -m -p -  -$ -_ -  -| -  -s -e -l -e -c -t -  -m -a -c -h -i -n -e -n -a -m -e -, -t -i -m -e -g -e -n -e -r -a -t -e -d -, -  -e -v -e -n -t -i -d -, -  -@ -{ -n -= -' -A -c -c -o -u -n -t -N -a -m -e -' -; -e -= -{ -$ -_ -. -R -e -p -l -a -c -e -m -e -n -t -S -t -r -i -n -g -s - leftsquarebrc  -5 - rightsquarebrc  -} -} -}
get-help EntityFramework
get-help Update-Database
get-help Update-Database -d -e -t -a -i -l -e -d
getConfigVals
getExchangeRates aud
get_arguments read data lambda echo $data $lambda
get_boolean $DROP_TABLE_OF_INVALIDS n
get_last_name $path
get_last_name $path
get_old_version
getconf ARG_MAX
getconf CLK_TCK
getconf PAGESIZE
getent passwd $(logname) logname awk -F -: {print $6}
getent passwd $LOGNAME cut -d -: -f 5 cut -d -, -f 1
getent passwd $USER cut -d : -f 5
getent passwd $user cut -d -: -f 6
getent passwd awk -F -: { if ($3  rightanglebrc = 1000) print $1}
getent passwd awk -F -: { if ($3  rightanglebrc = 500) print $1}
getent passwd awk -F -: {print $7} sort uniq -c
getent passwd cut -f 1 -d -:
getent shadow egrep ^ leftsquarebrc ^: rightsquarebrc *: leftsquarebrc *! rightsquarebrc : -v cut -f 1 -d -:
getevent -p -l busybox sed -e :a;N;$!ba;s/\n / /g busybox grep ABS_MT_TOUCH busybox awk {print $4}
getgrgid_test GID
getopts optstring name ${myargs leftsquarebrc @ rightsquarebrc }
geturl http://example.com/excitingstuff.jpg
gfortran -W -a -l -l file.f90 grep something
gg Fixed all bugs (closed 123)
gimp -i -b (let* ( (img (gimp-file-load 1 "$image" "$image")) (drw (gimp-image-get-active-drawable (car img))) ) (gimp-image-scale-full 1 400 300 3) (file-jpeg-save 1 (car img) (car drw) "processed/$image" "$image" 0.6 0 1 1  3 0 0 2) (gimp-quit 0) )
gimp -i -b (your-script-name "test.psd" 200 200) -b (gimp-quit 0)
git --git-dir /full/path/to/repo/.git --work-tree /full/path/to/rpeo diff --cached grep -q ^my/folder
git --git-dir /home/app/personal_website/server/.git --work-tree /home/app/personal_website/server pull --quiet
git --git-dir /home/gcom370p/stu013/express/.git pull /home/gcom370p/stu013/express.git master
git --git-dir /home/username/myFolder/.git config --get remote.origin.url
git --git-dir c:codeklas.git --work-tree c:codeklas merge origin/master
git --git-dir projectDirPath/.git show -s --pretty format:%h
git --no-pager shortlog -n -s -e HEAD cut -f 2-
git --version
git --work-tree Z:/www/proj/web/test/sample-repo-cloned/ --git-dir Z:/www/proj/web/test/sample-repo-cloned/.git status
git -C /home/app/personal_website/server pull --quiet
git -c color.ui=always status git diff --color cat
git ... awk -F | { printf "%s %-20s %s\n", $1, $2, $3 }
git add !$
git add $TARGET_FILES
git add ${TARGET_FILES leftsquarebrc @ rightsquarebrc }
git add -i
git add -p
git add user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG
git archive --format tar --remote git@server:repo.git master tar -x -f
git archive --prefix git-gitweb/ master:gitweb tar -t -f
git archive -o ../latest.zip some-commit $(git diff --name-only earlier-commit some-commit) git diff --name-only earlier-commit some-commit
git archive master tar -x -C -/ -m -y -/ -p -a -t -h -/ -c -o -d -e -b -a -s -e
git archive v2.0.0 --remote git@bitbucket.org:john/myapp.git --output myapp.zip --format zip
git blame source_file
git branch
git branch --list -v -v grep ^\*
git branch -a
git branch -a grep -m 1 $1
git branch -l nano /tmp/branches whatever /tmp/branches rm /tmp/branches
git branch -r awk -F -/ /\/PREFIX/{print $2}
git branch -r awk -F -/ /\/PREFIX/{print $2} xargs -I {} git push origin :{}
git branch grep * cut -c -3 --
git branch grep * sed s/* // git commit -F
git branch grep * sed s/* // xargs git commit -m
git branch grep ^ leftsquarebrc * rightsquarebrc  cut -c -3 --
git branch sed -n -e s/^\* \(.*\)/\1/p
git checkout  leftsquarebrc some_dir file.txt rightsquarebrc 
git checkout -b $1 alias $1=git checkout $1
git checkout -t -b whatever origin/whatever
git checkout -t origin/whatever
git checkout .
git checkout .
git checkout master
git checkout pull/origin/123
git checkout svnMirror
git chepull branch_name
git cherry -v master sed -n -e 1p -e $p awk {print $2}
git clean  leftsquarebrc -f rightsquarebrc 
git clean -d -n -x cut -c 14-
git clean -d -n cut -c 14-
git clean -f -d -x
git clean -f pv -l -s $linecount
git clone $GIT_REPO cat
git clone --single-branch --branch 
git clone -b develop-1.9.8-beta https://github.com/gsscoder/commandline.git commandline-develop
git clone /home/admin/path/repository.git
git clone git@github.com:${@?need to set param:  leftanglebrc developer rightanglebrc / leftanglebrc project rightanglebrc }
git clone git@github.com:abc/xyz.git
git clone git@github.com:user/repo.git
git clone git@github.com:username/repo.git
git clone git@github.xxxx.com:blablabla/reponame.git /Users/myname/dev/myfolder
git clone git@github.xxxx.com:blablabla/reponame.git /Users/myname/dev/myfolder
git clone https://github.com/SachaG/Void.git
git clone https://github.com/Study-Master/Java-WebSocket.git /tmp/socket cd /tmp/socket mvn install -D -m -a -v -e -n -. -t -e -s -t -. -s -k -i -p -= -t -r -u -e
git clone https://github.com/mrdoob/three.js.git
git clone https://github.com/mrdoob/three.js.git
git clone https://github.com/thoughtbot/capybara-webkit.git
git clone https://username:password!@github.com/org/repository.git
git clone https://username:password!@github.com/org/repository.git
git clone https://yourLogin@bitbucket.org/someUser/aRepo
git clone repo_url grep -v warning: You appear to have cloned an empty repository.
git clone ssh://correct_username@server.net/team/git/gui.git/
git commit
git commit --amend -C HEAD
git commit -a -m Nailed it!
git commit -m $(grep -Po '(? leftanglebrc =Subject: \ leftsquarebrc PATCH \d/\d\ rightsquarebrc .).*') $patch grep -P -o (? leftanglebrc =Subject: \ leftsquarebrc PATCH \d/\d\ rightsquarebrc .).*
git commit -m $1
git commit -m $desc
git commit -m $desc
git commit -m $m
git commit -m '$1'
git commit -m Added notes for $(date) date
git commit -m Database $(date '+%a %M:%H %h %d %Y') date +%a %M:%H %h %d %Y
git commit -m Frustrating  leftanglebrc insert object of frustration here rightanglebrc !
git commit -m This is why it was committed
git commit -m `date` filename date
git commit -m add `foo`
git commit -m cracked enigma's code
git commit -m hope it works
git commit -m hope it works
git commitall message goes here
git config --get-regexp ^svn-remote
git config --global --add core.pager cat
git config --global --replace-all core.pager less -+X -+F
git config --global alias.ac !f(){ git add . && git commit -m "$1"; };f
git config --global alias.ac !sh -c "git add . && git commit -m \"$1\""
git config --global alias.delete !/path/to/deletion_script.sh
git config --global alias.diffall !sh diffall.sh
git config --global alias.l !bash -c source ~/.githelpers && git_pretty_log
git config --global alias.remotes remote -v
git config --global alias.sp stash pop
git config --global alias.t !/path/to/above/script
git config --global alias.who !/path/to/your/git/who
git config --global color.ui auto
git config --global color.ui true
git config --global core.editor /usr/local/Cellar/vim/7.3.266/bin/vim
git config --global core.editor c:/APPS/CYGWIN/bin/vim.exe
git config --global core.editor notepad
git config --global log.abbrevCommit true
git config --global pager.stash false
git config alias.foo !git-foo.sh
git config color.status always
git config color.ui auto
git config core.editor emacs -nw
git config core.editor nano
git config core.pager fold -sw $(tput cols)
git config status.short true
git delete `git log --all --pretty=format: --name-only --diff-filter=D` git log --all --pretty format: --name-only --diff-filter D
git delete `git log --all --pretty=format: --name-only --diff-filter=D` git log --all --pretty format: --name-only --diff-filter D
git describe --exact-match --tags HEAD
git describe --exact-match HEAD
git diff --cached grep -e ^+ leftsquarebrc ^+ rightsquarebrc  cat test.html aspell list f- sgml --lang en --extra-dicts /home/test/dictionary.test --add-sgml-skip {nospell,literal,screen} sort uniq
git diff --color never
git diff --ignore-submodules
git diff --name-only $1 git difftool $1 $name
git diff --name-only earlier-commit some-commit xargs -d -n git archive -o ../latest.zip some-commit
git diff --name-only tag-name tag-name^
git diff --no-color file
git diff --word-diff porcelain awk -v red=$(tput setaf 1) -v green=$(tput setaf 2) -v reset=$(tput sgr0) -f worddiff.awk tput setaf 1 tput setaf 2 tput sgr0
git diff --word-diff-regex ( leftsquarebrc ^ leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc | leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc ) --word-diff porcelain awk -v red=$(tput setaf 1) -v green=$(tput setaf 2) -v reset=$(tput sgr0) -f worddiff.awk tput setaf 1 tput setaf 2 tput sgr0
git diff HEAD
git diff HEAD:old_path/main.cpp :new_path/main.cpp
git diff HEAD:old_path/main.cpp new_path/main.cpp
git diff _js/main.js
git diff awk { seen leftsquarebrc substr($0,2) rightsquarebrc ++; l leftsquarebrc i++ rightsquarebrc  = $0; } END { for (j = 0; j  leftanglebrc  i; ++j) if (seen leftsquarebrc substr(l leftsquarebrc j rightsquarebrc ,2) rightsquarebrc   leftanglebrc  2) print l leftsquarebrc j rightsquarebrc  }
git fetch --dry-run grep ssh
git fetch origin
git filter-branch --tree-filter rm -rf assets/vids HEAD
git foo
git foo
git foo.sh
git for-each-ref --format %(objectname) %(refname:short) refs/heads awk /^$(git rev-parse HEAD)/ {print $2} git rev-parse HEAD
git grep $*
git grep --name-only $grepexp xargs sed -r $sedcmd -i
git gui
git help clone col -b
git ignore //Directory\Subdir\
git init --shared --bare
git log --all --pretty format: --name-only --diff-filter D sort -u
git log --diff-filter A
git log --diff-filter A --stat
git log --diff-filter A -1
git log --diff-filter A -p
git log --diff-filter D --summary grep delete
git log --follow ./path/to/file
git log --grep $JIRA_KEY
git log --oneline -- $(echo "$filename" | tr -d '\r') echo $filename tr -d \r wc -l
git log --oneline -- ${filename% leftsquarebrc - leftsquarebrc :space: rightsquarebrc  rightsquarebrc } wc -l
git log --oneline -- ${filename%^M} wc -l
git log --oneline --pretty format:-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) leftanglebrc %an rightanglebrc %Creset
git log --pretty %s --since `date -r ./../lastSuccessful/build.xml "+%F %T"` date -r ./../lastSuccessful/build.xml +%F %T
git log --pretty format:%h %an %ai sort -k 3
git log --pretty oneline --branches -- $FILE tail -1 cut -f 1 -d - 
git log --pretty oneline path_to_file wc -l
git log --since yesterday
git log --stat
git log --stat 1000,1000 --pretty format:%cN perl ~/git-contrib.pl
git log -1 --format %at xargs -I -{ -} date -d @{} +%Y%m%d
git log -1 HEAD --pretty format:%s
git log -S ThisClass(object):
git log -n 1 --pretty format:%s
git log path_to_file wc -l
git log sed -n 0,/.*\ leftsquarebrc git-p4:.*\/\/depot\/blah\/\( leftsquarebrc ^\/ rightsquarebrc *\)\/.*/s//\1/p; /\ leftsquarebrc git-p4/ q
git ls-files --deleted tr \n \000 xargs -0 ls
git ls-files --others --exclude-standard -z xargs -0 tar -r -v -f ~/backup-untracked.tar
git ls-files -z xargs -0 git update-index --assume-unchanged
git ls-files read file git log -n 1 --pretty Filename: $file, commit: %h, date: %ad -- $file
git ls-files tr \n   xargs git update-index --assume-unchanged
git ls-files xargs cat wc -l
git ls-files xargs wc -l
git ls-remote --tags git://git.kernel.org/pub/scm/git/git.git ...
git ls-remote ... tail -n 1 sed s@.*refs/tags/\(.*\)\^{}@\1@
git merge --no-ff develop
git merge svnMirror
git mv $1 $2 ln -s $2 $1
git mv README.txt README
git mv _fav-locations-cluster.html.erb partials/!#:2:gs/-/_/
git mv _fav-locations-cluster.html.erb partials/_fav_locations_cluster.html.erb
git mv file2 file1
git pull
git pull
git pull --upload-pack /c5/shared/git/1.7.6/bin/git-upload-pack myserver:~/mygitrepository
git pull git://host.example.com/path/to/repo.git
git pull origin devel
git pull origin master
git pull origin master ...
git pull origin master read msg ...
git pull origin master read msg echo ${msg}
git pull sed /\*\*/,/\./d
git push
git push -u origin dev_aFeature
git push -u origin yourCurrentBranch
git push github svnMirror
git push mine my-work
git push origin $(branch) branch
git push origin :x4e925e4
git push origin `branch` branch
git push origin excellent:refs/remotes/from-desktop/excellent
git push origin master:x4e925e4
git read-tree --empty && git reset -q ${GIT_COMMIT} -- $(xc  leftanglebrc  ~/to_keep.txt) xc
git read-tree --empty && git reset -q ${GIT_COMMIT} -- $tmp
git reflog show --date iso -n 1 origin/master
git remote -v
git remote -v show
git remote add origin git@github.com:LiamBailey/TweetSlider.git
git remote add origin https://bitbucket.org/your-name/your-repository
git remote add pushable
git remote rm heroku
git remote set-url dev foo@bar:/var/dev
git remote set-url origin git@github.com:path/to/repo
git remote set-url origin https://new.url.here
git reset
git reset --hard  leftsquarebrc HEAD rightsquarebrc 
git reset --hard HEAD
git reset --hard HEAD
git reset HEAD .
git rev-list $newsha --not --all
git rev-list $oldsha..$newsha
git rev-list --branches -- $FILE tail -1
git rev-list --count %MERGE_TO%..%BRANCH_NAME%
git rev-list --no-merges -n 1 HEAD
git rev-list --reverse HEAD xargs -L 1 -J % git log -1 %
git rev-list -1 --grep git-svn-id HEAD
git rev-list HEAD
git rev-parse --show-prefix echo $@ exit
git rev-parse --show-toplevel
git rev-parse --show-toplevel echo $PWD is in a Git repo. echo $PWD is not in a Git repo.
git rev-parse --symbolic-full-name @{-1}
git rev-parse --verify refs/stash color for stashed files
git rev-parse HEAD
git rev-parse HEAD
git rm --cached ../project.properties
git rm -r -f mapeditor
git rm user_data/post_img/kesongxie/LuYWf7nM915SQ0X/003(2).JPG
git shortlog -s -n
git shortlog -s -n wc -l
git show --pretty format: --name-only HEAD^ grep \.js$
git show --quiet --date rfc --pretty format:%s|%b|%an, %ae|%H|%cd $i
git show :file
git show-branch --list
git show-ref grep remotes/origin
git show-ref grep remotes/origin cut -d -  -f 2 cut -d -/ -f 3-
git stash changes
git status -s grep ? cut -b 4-
git status git diff --color cat
git status grep deleted awk {print $3} xargs git rm
git status sed s/^/  /
git submodule foreach npm install || :
git submodule status MySubmoduleFolder awk {print $1;}
git svn rebase
git symbolic-ref -q --short HEAD echo HEAD
git symbolic-ref HEAD
git symbolic-ref HEAD echo $@ exit
git symbolic-ref HEAD sed -e s,.*/\(.*\),\1,
git tag --list
git update-index --assume-unchanged $(git ls-files | tr '\n' ' ') git ls-files tr \n  
git update-index --assume-unchanged -- wp-config.php
git update-index --skip-worktree -- wp-config.php
git-foo.sh
git@github.com:username/repositoryname.git
github --reinstall-shortcuts
giving up after 10
gksudo runmydeletescript
gksudo sh -c 'command1; command2; ...'
global-ignores = *.iml
glog 7 days ago
gm convert input.png -r -e -s -i -z -e 1920x1080 +matte out.bmp
gname:.*//g
gnome-open $(bundle show jquery-rails) bundle show jquery-rails
gnome-screensaver-command -l
gnome-session-save --logout
gnome-terminal --disable-factory -x ./setup_svrconfig
gnome-terminal --disable-factory -x sh -c . ./test1.sh|less
gnome-terminal --full-screen -x script mylogfile.txt -c ./user_script_file.sh
gnome-terminal --tab -e /bin/bash -c '/usr/bin/myprog; exec /bin/bash -i'
gnome-terminal --tab -e bash -c "ls; exec bash"
gnome-terminal --tab -e ls; exec bash
gnome-terminal --title virtual_3: server -x bash -c ssh -t root@192.168.1.132 'echo 1'
gnome-terminal --working-directory xxx/yyy/zzz --tab -e command 1 --tab -e sh -c 'sleep 2; command 2' --tab -e sh -c 'sleep 4; command 3' --tab -e sh -c 'sleep 6; command 4'
gnome-terminal -e /my/fortran/program
gnome-terminal -e bash --rcfile $HOME/.term-rcfile -i
gnome-terminal -e bash -c 'cd /'; $SHELL
gnome-terminal -e bash -c 'cd /';$SHELL
gnome-terminal -e bash -c 'cd /;$SHELL'
gnome-terminal -e command  leftsquarebrc args rightsquarebrc 
gnome-terminal -e ssh -t server "echo \"tail -F logfile;rm /tmp/foo\"  rightanglebrc  /tmp/foo; bash --rcfile /tmp/foo"
gnome-terminal -e top --title Testing
gnome-terminal -t MyWin -x bash -c ssh -X $USER@$REMOTE_IP 'echo "Press ENTER to continue" ; read JUNK && echo "HELLO"  rightanglebrc  hello.txt ; bash '
gnome-terminal -x ./abc.sh
gnome-terminal -x bash -c $(declare -f my_func); my_func; bash declare -f my_func
gnome-terminal -x bash -c cat dksdamfasdlm; echo $?; sleep 2
gnome-terminal -x bash -c cmd1; cmd2
gnome-terminal -x bash -c ls; bash
gnome-terminal -x bash -c ls; echo ' leftanglebrc enter rightanglebrc '; read
gnome-terminal -x script.sh file1.txt file2.txt
gnuplot -e DATAFILE='mydatafile.txt' coolscript.gp
gnuplot -e filename = '$fileName' plotFile
gnuplot -e filename = '${!fileName}' plotFile
gnuplot -e filename='foo.data' foo.plg
gnuplot -e x=$x;y=$y;file = "mydata.dat" Myscript.gp
gnuplot -e x=1;y=2;file = "mydata.dat" Myscript.gp
gnuplot -e x=1;y=2;file = "mydata.dat" Myscript.gp
gnuplot -e x=1;y=3;file = "mydata.dat" Myscript.gp
gnuplot -p -e -r -s -i -s -t -e plot 'data.dat' using 1:2 with lines ,'' using 1:3 with lines loop.plt
gnuplot -p -e -r -s -i -s -t -e set terminal dumb; plot ' leftanglebrc  adb shell dumpsys meminfo $PID | grep TOTAL | sed -r ''s/ +/ /g'' | cut -d '' '' -f 2-' using 1:6
google-chrome
gpg --armor --detach-sign backup_username_110217.tar.gz
gpg --batch -c --passphrase secret readme.txt
gpg --list-keys awk /pub/&&/4096R/{split($2,a,"/");print a leftsquarebrc 2 rightsquarebrc }
gpg --passphrase easy -d secrets.txt.gpg
gpg --passphrase passphrase --batch -d --output decrypted.file file.gpg
gpg --passphrase-fd 3
gpg --recv-key 15C4D63E
gpg --trust-model always --passphrase some password --yes -s -e -r  leftanglebrc someone s@s.com rightanglebrc  D:abc.txt
gpg --verify backup_username_110217.tar.gz.asc backup_username_110217.tar.gz
gpg -d ...
gpg -d secrets.txt.gpg
gpg -r recip --encrypt-files $(ls $source/*.gz | egrep -v 'alabama|somename') ls $source/*.gz egrep -v alabama|somename
gpg -s -e -r Someone  leftanglebrc s.s@s.com rightanglebrc  D:20130328pcs0CONTAINER0035017310.txt --passphrase-fd 1 & echo somePassword
gprolog --init-goal  leftanglebrc your_goal rightanglebrc ,halt
gradle console
gradle console -q
grails refresh-dependencies --plain-output
grant execute on 1 to usr
grep  $(date --date='1 hour ago' '+%H').*MTS /var/log/oss.log date --date 1 hour ago +%H
grep  -1  file.txt
grep  file.txt
grep  file.txt wc -l
grep  leftanglebrc  leftanglebrc include /home/$user/cvs/dbtag.conf rightanglebrc  rightanglebrc  /etc/dbtag.conf
grep  leftanglebrc !--#include  file="../../includes/ *.*
grep  leftanglebrc p rightanglebrc  myfile.html sed -e s%\( leftanglebrc p rightanglebrc \)\(.*\)\( leftanglebrc /p\)\( rightanglebrc \)%\2%
grep  leftanglebrc strong rightanglebrc First ascent: leftanglebrc /strong rightanglebrc  sed s/.*by \( leftsquarebrc ^ rightanglebrc  rightsquarebrc *\) leftanglebrc .*/\1/
grep  leftanglebrc td rightanglebrc .* leftanglebrc /td rightanglebrc  tmp.txt sed s/ leftanglebrc td rightanglebrc \( leftsquarebrc 0-9. rightsquarebrc \+\).*/\1/g
grep  leftanglebrc url rightanglebrc  a.txt sed s/ leftanglebrc \/*url rightanglebrc //g
grep  leftanglebrc url rightanglebrc  a.txt tr  leftanglebrc  rightanglebrc    awk {print $2}
grep  leftanglebrc url rightanglebrc  file.xml sed s/.* rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc .*/\1/
grep  leftsquarebrc  leftsquarebrc :xdigit: rightsquarebrc  rightsquarebrc \{32\} myfile.txt
grep  leftsquarebrc  rightsquarebrc  leftsquarebrc - rightsquarebrc  ...
grep  leftsquarebrc $(date +%d/%b/%Y) date +%d/%b/%Y
grep  leftsquarebrc 0-2 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-5 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-5 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
grep  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \. file
grep  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \. leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \. file
grep  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
grep  leftsquarebrc 0-9 rightsquarebrc {4}- leftsquarebrc 0-9 rightsquarebrc {2}- leftsquarebrc 0-9 rightsquarebrc {2}  leftsquarebrc 0-9 rightsquarebrc {2}:0 leftsquarebrc 0-5 rightsquarebrc  logfile
grep  leftsquarebrc 1-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  Mar 2014 catalina.logs
grep  leftsquarebrc A-Z rightsquarebrc  *
grep  leftsquarebrc OPTIONS rightsquarebrc  PATTERN  leftsquarebrc FILE... rightsquarebrc 
grep  leftsquarebrc ^ rightsquarebrc  leftsquarebrc - rightsquarebrc  ...
grep  leftsquarebrc ^0-9 rightsquarebrc 
grep  leftsquarebrc ^@ rightsquarebrc @ file
grep  leftsquarebrc p rightsquarebrc erl check
grep ! input.txt grep -E -o  leftsquarebrc 0-9 rightsquarebrc {1,}|- leftsquarebrc 0-9 rightsquarebrc {1,}
grep "48" file
grep #PEM-6-GUESTIN log.txt sed -r s/.*user account ((.*)).* MAC address (.*), IP address (.*).**.*/1,2,3/
grep $(awk '{if (NF  rightanglebrc  0) print $1}' file1) file2 awk {if (NF  rightanglebrc  0) print $1} file1
grep $(grep STRING test.txt | cut -d"," -f3 | tr -d ' ') temp.txt grep STRING test.txt cut -d -, -f 3 tr -d  
grep $1 ...
grep $1 ./ leftsquarebrc FILE rightsquarebrc  wc -l
grep $1 awk {print$1}
grep $1;$2; temp.authorization.config
grep $1;$2; temp.authorization.config
grep $2 bookprint.txt sed s/^/Author(s)! /; s/:/\nTitle!     /; s/:/\nPublisher! /; s/:/\nYear!      /; s/!/:/g
grep $@ sed -r -e -s -/ -: - leftsquarebrc  - leftsquarebrc  -: -s -p -a -c -e -: - rightsquarebrc  - rightsquarebrc  -* -/ -: -/
grep $CLASS data-new.csv
grep $NUM file
grep $REPLY b.txt
grep $YESTERDAY $ACCESSLOG grep $1 awk -F -  -- -  {print $1}
grep $date feb2010 cut -c -1 -3 --
grep $file
grep $foo file.txt
grep $i 4700921_combined_subs.txt
grep $i dataset$j FLAGS_IN cut -d   -f -3 --
grep $incstring -r -l --include *.{h,cpp} pathToFiles
grep $incstring -r -l --include *.{h,cpp} pathToFiles
grep $itemname $filename cut -d -, -f 3
grep $itemname $filename cut -d -, -f 3
grep $person_name people_file.txt cut -f 1 -d - 
grep $person_name people_file.txt head -n 1 cut -f 1 -d - 
grep $string $file
grep $string file.txt
grep $today aaa.sh
grep $today log.txt
grep $today log.txt $r
grep $today log.txt sed -e s/$/\r/g
grep $value $(exim -Mvh "$(exim -bpru | grep "$eximID")") exim -M -v -h $(exim -bpru | grep "$eximID") exim -b -p -r -u grep $eximID more
grep ${DEPARTAMENTO:0:5} ARCHIVOS2MOVER xargs -d \n mv -t $DEPARTAMENTO
grep ${VALUE} inputfile.csv cut -d -, -f -$ -{ -I -N -D -E -X -}
grep * -n -s -i -e foo
grep ***END `perl -e 'print( ( sort { -M $a  leftanglebrc = rightanglebrc  -M $b } @ARGV ) leftsquarebrc 0 rightsquarebrc , "\n");' name_pattern.o*` perl -e print( ( sort { -M $a  leftanglebrc = rightanglebrc  -M $b } @ARGV ) leftsquarebrc 0 rightsquarebrc , "\n"); name_pattern.o*
grep , leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc $ inventory
grep , leftsquarebrc 0-9 rightsquarebrc $ inventory
grep ,-,\.txt$ input.txt sed s|/ leftsquarebrc ^/ rightsquarebrc *$|/|
grep -- --- your_file
grep -- -v file
grep --after-context 200 2014-06-02 22:46 log/production.log less
grep --after-context 200 2014-06-02 log/production.log less
grep --binary-files text Revision-number Dump1.dump tail -n 1 sed s/Revision-number\:\ //g
grep --color
grep --color $@
grep --color -E pattern|$ file
grep --color POST access_log
grep --color a
grep --color always
grep --color always -C 0 -r -n -i --exclude-dir node_modules Login ./* sed G
grep --color always WORD * grep -v AVOID
grep --context 3 foo myfile.txt
grep --exclude-dir .svn
grep --include *.rb -r -n -w . -e pattern
grep --invert-match --file pattern.txt complext.txt
grep --null -l -r FOO . xargs -0 cp -t MEOW
grep --text
grep -A 1 Started POST.*\/ leftsquarebrc fr rightsquarebrc  log/production.log
grep -A 1 ^%name= $Input_file grep -B 1 ^%value= grep -v ^--
grep -A 10 -B 10 NullPointerExceptions your.log
grep -A 10 pattern file.txt
grep -A 2 $title:$author:* tr \n  
grep -A 2 A LOG_FILE awk -v RS=--n !/B/ { printf "%s", $0 }
grep -A 2 file
grep -A 2 string 1 $file tail -2 grep -B 1 string 2 head -1
grep -A 3 YES
grep -A 5 19:55 file
grep -A 6 Final set of parameters file
grep -A 999999 $today aaa.sh
grep -B $N -A $M string pattern file
grep -B 1 -P ORA\-(?!00001) logfile
grep -B 1 Broken pipe mylog.log grep -c ^2013-06-13 05
grep -B 1 ^ leftsquarebrc ^- rightsquarebrc  data sed /^--$/d
grep -B 1 foo file
grep -B 1 foo foo.txt grep -v -E foo|^--$
grep -B 1 include $FILE grep -E \.(C|cpp)$
grep -B 2
grep -B 2 URL has changed url.txt grep https\?://
grep -B 2 three test.txt sed -n 1~4p
grep -C 10 -P \ leftsquarebrc .*(? leftanglebrc !AAA|BBB)Exception
grep -C 2 CFBundleVersion $file grep -o  leftsquarebrc 0-9 rightsquarebrc \{3\}
grep -E  leftsquarebrc  leftsquarebrc :xdigit: rightsquarebrc  rightsquarebrc {32} myfile.txt
grep -E  leftsquarebrc 0-9 rightsquarebrc + (month|year|day|week)s? ago a.txt grep -E -o ^ leftsquarebrc a-zA-Z0-9 rightsquarebrc +
grep -E  leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}
grep -E  leftsquarebrc 0-9 rightsquarebrc {3}- leftsquarebrc 0-9 rightsquarebrc {3}- leftsquarebrc 0-9 rightsquarebrc {4}
grep -E (#.*#.*#|:.*:.*:.*:) file.txt
grep -E ((#.*){2}#|(:.*){3}:) file.txt
grep -E (..:){5}..
grep -E (\S+\s+){12}A\s
grep -E (^| leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc )host($| leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc ) /etc/hosts
grep -E -A -1 -5 alpha.*beta|beta.*alpha tail -1 6
grep -E -H -r -o -i -- - rightanglebrc  -( -f -r -o -m -| -j -o -i -n -) -\ -( -' -\ -' -' - leftsquarebrc  -^ -' -\ -' -' -  - rightsquarebrc  -* /path/to/files sed -r -e s/:.*(from|join)\('\''/:/g
grep -E -R ^.*(.*); file
grep -E -i -R your regex * sed ...
grep -E -i -o ( * leftsquarebrc ^  rightsquarebrc * *){4}JOIN mail_headers_body( * leftsquarebrc ^  rightsquarebrc * *){4}
grep -E -i -v ( leftsquarebrc 0-9a-z rightsquarebrc ){3} $file sort -u
grep -E -i ^COLOUR=((RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN|WHITE|BLACK)\|)*(RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN|WHITE|BLACK)\|?$
grep -E -i pattern1.*pattern2|pattern2.*pattern1 file
grep -E -m 1 pattern1|pattern2|pattern3  leftanglebrc (tac test.txt) tac test.txt
grep -E -m 1 pattern1|pattern2|pattern3 test.txt
grep -E -o  leftanglebrc div class="quote".* leftanglebrc /div rightanglebrc 
grep -E -o  leftanglebrc video rightanglebrc (.+?) leftanglebrc /video rightanglebrc  myfile.html
grep -E -o  leftanglebrc video rightanglebrc (.+?) leftanglebrc /video rightanglebrc  myfile.html sed -E s| leftanglebrc /?video rightanglebrc ||g
grep -E -o  leftsquarebrc '" rightsquarebrc  leftsquarebrc ^'" rightsquarebrc *.(gif|png) leftsquarebrc '" rightsquarebrc 
grep -E -o  leftsquarebrc '" rightsquarebrc  leftsquarebrc ^'" rightsquarebrc *.(gif|png) leftsquarebrc '" rightsquarebrc  tr -d "'
grep -E -o  leftsquarebrc 0-9 rightsquarebrc + error sed s/$/p/ sed -f error
grep -E -o  leftsquarebrc 0-9 rightsquarebrc +(\. leftsquarebrc 0-9 rightsquarebrc +)*
grep -E -o  leftsquarebrc 0-9 rightsquarebrc {2}: leftsquarebrc 0-9 rightsquarebrc {2}: leftsquarebrc 0-9 rightsquarebrc {2}  leftsquarebrc 0-9 rightsquarebrc {2}/ leftsquarebrc 0-9 rightsquarebrc {2}/ leftsquarebrc 0-9 rightsquarebrc {4}
grep -E -o  leftsquarebrc 0-9\. rightsquarebrc + myfile.txt
grep -E -o "scheme_version":(w*) cut -d -: -f 2
grep -E -o ( leftsquarebrc 0-9 rightsquarebrc {2}:){2} leftsquarebrc 0-9 rightsquarebrc {2} ( leftsquarebrc 0-9 rightsquarebrc {2}/){2} leftsquarebrc 0-9 rightsquarebrc {4}
grep -E -o (?def .*|' leftsquarebrc a-z rightsquarebrc +') test.txt
grep -E -o Total number =  leftsquarebrc 0-9 rightsquarebrc + inputfile
grep -E -o ^ leftsquarebrc ^  rightsquarebrc + file
grep -E -o ^(root|isometric|akau|) rightanglebrc  /etc/shadow
grep -E -o b leftsquarebrc a-zA-Z0-9.- rightsquarebrc +@ leftsquarebrc a-zA-Z0-9.- rightsquarebrc +. leftsquarebrc a-zA-Z0-9.- rightsquarebrc +b file.csv sort -u
grep -E -o finalNumber=" leftsquarebrc 0-9 rightsquarebrc +" file.xml grep -E -o  leftsquarebrc 0-9 rightsquarebrc +
grep -E -o http:// leftsquarebrc ^  rightanglebrc  rightsquarebrc + yourFile head -1
grep -E -o name=" leftsquarebrc ^" rightsquarebrc +" your_file
grep -E -o symbol=" leftsquarebrc ^" rightsquarebrc + yahoo.txt cut -c 9-
grep -E -q  leftsquarebrc 0-7 rightsquarebrc {3}
grep -E -q (0|1|2|3|4|5|7){3}
grep -E -v -i ( leftsquarebrc 0-9a-z rightsquarebrc )\1{2} $file
grep -E -v ^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * leftsquarebrc a-zA-Z_ rightsquarebrc 
grep -E -v ^foo leftsquarebrc ^3 rightsquarebrc |foo$ foo
grep -E -v string1|string2|string3 filename
grep -E -x -v ${ab//,/|} Name.txt
grep -E ABC|DEF test2.txt
grep -E Failed to add (.*) to database sed s/Failed to add (.*) to database/1
grep -E InputPattern -A 27 inputFile.csv sed -n 1p;19p;$p
grep -E MYPATTERN -n root/channel_*/service_*/2014-05-24/file_*.xml
grep -E \ leftanglebrc host\ rightanglebrc  /etc/hosts
grep -E \ leftanglebrc myServer\ rightanglebrc ( leftsquarebrc ^- rightsquarebrc |$) test-file.txt
grep -E \.(c|cpp)$ input
grep -E ^ *//
grep -E ^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * leftsquarebrc 0-9*@ rightsquarebrc 
grep -E ^ leftsquarebrc 0-9 rightsquarebrc +$ file diff file
grep -E ^ leftsquarebrc 0-9 rightsquarebrc +\s+foo foo
grep -E ^ leftsquarebrc 0-9 rightsquarebrc {8}$
grep -E ^ leftsquarebrc ^/ rightsquarebrc {2}.*https file
grep -E ^ leftsquarebrc a-zA-Z rightsquarebrc +  leftsquarebrc 0-9 rightsquarebrc +  leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc + Kingston
grep -E ^( leftsquarebrc 1-9 rightsquarebrc | leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |1 leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |2 leftsquarebrc 0-4 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |25 leftsquarebrc 0-5 rightsquarebrc ).( leftsquarebrc 1-9 rightsquarebrc | leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |1 leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |2 leftsquarebrc 0-4 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |25 leftsquarebrc 0-5 rightsquarebrc ).( leftsquarebrc 1-9 rightsquarebrc | leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |1 leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |2 leftsquarebrc 0-4 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |25 leftsquarebrc 0-5 rightsquarebrc ).( leftsquarebrc 1-9 rightsquarebrc | leftsquarebrc 1-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |1 leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |2 leftsquarebrc 0-4 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |25 leftsquarebrc 0-5 rightsquarebrc )$
grep -E ^-|-$ filename
grep -E ^Swap leftsquarebrc TF rightsquarebrc  /proc/meminfo awk p{print p-$2}{p=$2}
grep -E ^Title:|^Test run fileName
grep -E ^Title:|^Test run fileName egrep -v ^Title: foo XXX|^Title:bar XXX
grep -E ^\S*\s+ leftsquarebrc A-Z rightsquarebrc  file
grep -E ^\S*\s+ leftsquarebrc ^a-z rightsquarebrc  file
grep -E ^\S+\s+cat\s file
grep -E ^\s*\S+\s*$
grep -E ^\w+\s+cat\s file
grep -E ^test1 file
grep -E ba(na)* split *.txt
grep -E cat.*?dog|dog.*?cat text.txt
grep -E expr1|expr2|expr3
grep -E self\.timeout leftsquarebrc  \t rightsquarebrc *= leftsquarebrc  \t rightsquarebrc * leftsquarebrc 0-9. rightsquarebrc +
grep -F  leftsquarebrc GET rightsquarebrc  catalina.out
grep -F $cnty wheatvrice.csv
grep -F $line $path
grep -F $server leftsquarebrc 'fish_stick' rightsquarebrc 
grep -F -H -r  leftanglebrc ?php preg_replace("/.*/e" *
grep -F -L -f pattern.txt /var/log/maillog*
grep -F -c -f a.txt b.txt
grep -F -f FILE2 FILE1
grep -F -f File2 File1
grep -F -f IDS DATA
grep -F -f a.txt b.txt sort uniq
grep -F -f file1 file2
grep -F -f file1 file2
grep -F -f file2 file1
grep -F -f id1.txt id2.txt
grep -F -f idsfile.lines datafile.txt
grep -F -f list1.txt list2.txt sort uniq -c sort -n tail -n 1
grep -F -f mailids maillog grep to= leftanglebrc 
grep -F -i -n -f blklst srclst
grep -F -o -f  leftanglebrc (tr ' ' $'\n'  leftanglebrc  file1) file2 tr   $n
grep -F -o -f a.txt b.txt sort uniq -c sort -n -r
grep -F -r -l -f messages.txt dir
grep -F -v -f List_1.csv List_2.csv
grep -F -v -f list_to_exclude filename
grep -F -v -f pattern.txt target.txt
grep -F -v -f smallfile bigfile
grep -F -v -f whitelist.txt greylist.txt
grep -F -v line* input.txt
grep -F -w -f dictionary.txt frequency.txt awk {print $2 "," $1}
grep -F -w -f file2 file1
grep -F -w -f fileB.txt fileA.txt
grep -F -x -f b.txt -v a.txt
grep -F -x -q $FILENAME my_list.txt
grep -F -x -q foobar line file sed -i /^context line$/i foobar line file
grep -F -x -v -f file.1 file.2
grep -F -x -v -f file1 file2
grep -F -x -v -f first-file.txt second-file.txt
grep -F -x -v -f lines_to_remove.txt database.txt
grep -F InputString -A 27 inputFile.csv sed -n 1p;19p;$p
grep -F id='%20or apache.log
grep -H -m 1 \s-\? leftsquarebrc 0-9. rightsquarebrc \+- leftsquarebrc 0-9. rightsquarebrc \+\s dir/* cut -d -: -f 1
grep -H -n pattern files* cut -d -: -f -1 -, -2
grep -H -o n * uniq -c
grep -H -o n * uniq -c read count file echo ${file%:n} $count
grep -H -r -n $1 pwstore.txt
grep -I -U -r --color ^M
grep -I -l -R string .
grep -I -r -s --include '*.*rb' foo .
grep -L -Z -r Subject: \ leftsquarebrc SPAM\ rightsquarebrc  . xargs -0 -I -{ -} mv {} DIR
grep -L -z regular_expression file1.java file2.java file3.java...
grep -L ^a *.c
grep -L keyword $( find /start/path -type f ) find /start/path -type f
grep -L my.h *.c
grep -P "weather":.*?\ leftsquarebrc .*?\{.*?"id": ?\d{1,3}
grep -P ( leftanglebrc =http://)?\S*tt(?!p:) file
grep -P (? leftanglebrc ! leftsquarebrc %&^ rightsquarebrc )\b leftsquarebrc A-Za-z0-9 rightsquarebrc + leftsquarebrc A-Za-z0-9._%+- rightsquarebrc +@( leftsquarebrc A-Za-z0-9- rightsquarebrc +\.)+ leftsquarebrc A-Za-z rightsquarebrc {2,8}\b
grep -P (? leftanglebrc !stack)over
grep -P (? leftanglebrc =name=) leftsquarebrc  A-Za-z0-9 rightsquarebrc * filename
grep -P (?i)** leftsquarebrc a-zd rightsquarebrc +** leftsquarebrc a-z rightsquarebrc +_d+_d+ somepath
grep -P (?sm)^S+ leftsquarebrc ^:rn rightsquarebrc *?(?=s*:(?:(?!^S).)*?Groundhog Day) mymoviefile
grep -P -c  rightsquarebrc \s+ERROR yourLogFile
grep -P -e bsomewordb
grep -P -e someword
grep -P -o  NumberLong\(\K\d+ file
grep -P -o  ObjectId\("\K leftsquarebrc ^" rightsquarebrc * file
grep -P -o  leftsquarebrc 0-9 rightsquarebrc *(..*)? filename
grep -P -o  leftsquarebrc 0-9 rightsquarebrc {3}(?=%) file
grep -P -o  leftsquarebrc A-Z rightsquarebrc +(_ leftsquarebrc A-Z rightsquarebrc +)+ file
grep -P -o  leftsquarebrc d. rightsquarebrc *(?=-) file
grep -P -o ".*?"
grep -P -o ".*?/1031/" test.xml
grep -P -o "tarih":"\K\d{8} file
grep -P -o 'active'=KS*
grep -P -o ( leftanglebrc =\ leftsquarebrc ) leftsquarebrc a-zA-Z0-9 rightsquarebrc +(?=\ rightsquarebrc )
grep -P -o (? leftanglebrc = leftanglebrc ) leftsquarebrc ^ rightanglebrc  rightsquarebrc *
grep -P -o (? leftanglebrc = leftanglebrc cite rightanglebrc ).*?(?= leftanglebrc /cite rightanglebrc )
grep -P -o (? leftanglebrc = leftanglebrc title| leftanglebrc TITLE rightanglebrc ).*(?= leftanglebrc /title| leftanglebrc /TITLE rightanglebrc ) file
grep -P -o (? leftanglebrc = rightanglebrc ) leftsquarebrc 0-9, rightsquarebrc *(?= leftanglebrc /a rightanglebrc  leftanglebrc /td rightanglebrc ) file
grep -P -o (? leftanglebrc ="Body": ") leftsquarebrc ^" rightsquarebrc *
grep -P -o (? leftanglebrc ="host": ") leftsquarebrc ^" rightsquarebrc * myjsonFile
grep -P -o (? leftanglebrc =') leftsquarebrc ^.' rightsquarebrc *(?=.) file
grep -P -o (? leftanglebrc ==)( leftsquarebrc ^& rightsquarebrc *)(?=&|$) xargs
grep -P -o (? leftanglebrc =Duration=) leftsquarebrc 0-9-: rightsquarebrc * -F -- NF==2{split($2,t,":");t leftsquarebrc 1 rightsquarebrc +=($1*24);print t leftsquarebrc 1 rightsquarebrc ":"t leftsquarebrc 2 rightsquarebrc ":"t leftsquarebrc 3 rightsquarebrc ;next;}1
grep -P -o (? leftanglebrc =FPKM )" leftsquarebrc ^" rightsquarebrc *" file
grep -P -o (? leftanglebrc =Max_value=).* post_check.ini
grep -P -o (? leftanglebrc =S2=) leftsquarebrc \d. rightsquarebrc +  leftanglebrc (tr -d '\n'  leftanglebrc  file) tr -d \n
grep -P -o (? leftanglebrc =TALB: ).*
grep -P -o (? leftanglebrc =\ leftsquarebrc file:) leftsquarebrc ^ rightsquarebrc  rightsquarebrc *(?= rightsquarebrc ) file
grep -P -o (? leftanglebrc =\(1 ).*?(?=\)) INPUTFILE
grep -P -o (? leftanglebrc =\d leftsquarebrc a-zA-Z rightsquarebrc ).*\..*(?= leftsquarebrc a-zA-Z rightsquarebrc \d) file tr . \n
grep -P -o (? leftanglebrc =^HereIsAKey ).* file
grep -P -o (? leftanglebrc =divider-bin-) leftsquarebrc ^; rightsquarebrc +
grep -P -o (? leftanglebrc =divider-bin-)\d.\d.\d
grep -P -o (? leftanglebrc =host ) leftsquarebrc ^ ) rightsquarebrc * filterfile grep -v  leftsquarebrc 0-9 rightsquarebrc $ xargs -I % sh -c echo -n "% "; echo $(dig +short %) grep -v   leftsquarebrc 0-9 rightsquarebrc 
grep -P -o (? leftanglebrc =http://) leftsquarebrc ^/ rightsquarebrc + access.log sort -u
grep -P -o (? leftanglebrc =miss rate ).* yourfile
grep -P -o (? leftanglebrc =myname\s)\w+ inputFile
grep -P -o (? leftanglebrc =user= leftanglebrc ) leftsquarebrc ^ rightanglebrc  rightsquarebrc *
grep -P -o (? leftanglebrc =video=).*?(?=" rightanglebrc ) inputfile
grep -P -o (?!").*(?=(" =)) input.txt
grep -P -o (?i)\bUSE *\K\w+ file
grep -P -o (?xs)(?(DEFINE) (? leftanglebrc c rightanglebrc ( leftsquarebrc ^() rightsquarebrc |(?&p))) (? leftanglebrc p rightanglebrc \((?&c)*\)))((?&p))
grep -P -o (User ID|Password)= leftsquarebrc ^;" rightsquarebrc * web.config
grep -P -o (\( leftsquarebrc 0-9 rightsquarebrc {3}\)| leftsquarebrc 0-9 rightsquarebrc {3})-? leftsquarebrc 0-9 rightsquarebrc {3}- leftsquarebrc 0-9 rightsquarebrc {4}(?= leftanglebrc /p rightanglebrc )
grep -P -o (\S+\s+){10}\K leftsquarebrc ^- rightsquarebrc *
grep -P -o -i (? leftanglebrc =kamilla)\d{8}
grep -P -o -i kamilla\K\d{8}
grep -P -o .*(?=\.)
grep -P -o .*?(?= \d)|\d+ file
grep -P -o .*\)|\d+ file
grep -P -o .{3}(?=%) file
grep -P -o :"\K leftsquarebrc ^" rightsquarebrc * file
grep -P -o :"\K leftsquarebrc ^" rightsquarebrc * file xargs -n 4
grep -P -o PROD leftsquarebrc . rightsquarebrc \K.* file
grep -P -o Undefined error code.*?id bad_events_P2J3.xml sed s/^Undefined error code//;s/id$//
grep -P -o \S*(?=-\d+$) file
grep -P -o \S.*?(?=\s*$) infile
grep -P -o \b leftsquarebrc A-Z rightsquarebrc +\b file
grep -P -o \d{3,5}x\d{3,5}
grep -P -o \d{7}(?=\s*\(.*GiB)
grep -P -o \d{8} file
grep -P -o \s\K leftsquarebrc ^- rightsquarebrc * file
grep -P -o ^(\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc * rightsquarebrc  *)?\K.*
grep -P -o ^asd\.www\.\K leftsquarebrc ^. rightsquarebrc *(?=\.com) file
grep -P -o content:"\K leftsquarebrc ^" rightsquarebrc + 1rule
grep -P -o http:// leftsquarebrc ^/ rightsquarebrc + access.log sort -u
grep -P -o name="\K.*?(?=") file.txt
grep -P -o sessionId= leftsquarebrc ^s rightsquarebrc * filename
grep -P -o user.*?com file
grep -P .+ leftanglebrc text2 rightanglebrc .+ filename
grep -P AAA( |$)
grep -P Q**xMT123xMT123x**ABCxxxxxxxxxxxxxxxxxx_123_29887E somepath
grep -P STATUS: (?!Perfect) recess.txt
grep -P \d{4} leftsquarebrc -/ rightsquarebrc \d{2} leftsquarebrc -/ rightsquarebrc \d{2}\s\d{2}:\d{2}:\d{2}
grep -P ^(( leftsquarebrc ^ leftanglebrc  rightanglebrc  rightsquarebrc *)|(( leftanglebrc  leftanglebrc )* leftanglebrc (?! leftanglebrc ))|(( rightanglebrc  rightanglebrc )* rightanglebrc (?! rightanglebrc )))*$
grep -P ^File: blah.txt Location: .+ test.txt cut -d -: -f 3
grep -P cAND leftsquarebrc   rightsquarebrc *KS+(?= leftsquarebrc   rightsquarebrc *(?:c.|(p)) some_path_or_files
grep -P http://\S*tt(?!p:) file
grep -R  leftanglebrc ( leftsquarebrc ^ rightanglebrc  rightsquarebrc *) rightanglebrc &lt;\1&gt; *.properties more
grep -R  leftsquarebrc POEditor localizedStringWithKey: *.m */*.m awk -F -" {print $2}
grep -R "5\.1" .
grep -R -P -o (? leftanglebrc =-\() leftsquarebrc ^) rightsquarebrc *(?=\)-) yourDir
grep -R -i 64 src/install/ grep -v -E (\.svn|file|2\.5|2\.6)
grep -R -i \bweblogic_ .
grep -R -l English (.*) leftanglebrc /option rightanglebrc  pathtowebsite
grep -R -l gaq /Users/myname/Desktop/website
grep -R -n var topicName = html/ grep -o " leftsquarebrc ^" rightsquarebrc *"
grep -R -n var topicName = html/ grep -o " leftsquarebrc ^" rightsquarebrc *" sed s/"//g
grep -R .*get_token(),.*get_token() *
grep -R 5\.1 .
grep -R Class Example Example
grep -R ^To:  $ARCHIVE cut -d -@ -f 1 awk {print $2} sort uniq -c wc -l ind.txt
grep -R param /var/* grep -w -q -m 1 param
grep -R requests $(pwd) pwd
grep -R root .
grep -R whatever you like * grep -v .svn/*
grep -U $variable $raw_file_path
grep -U -R -l --null ^M . xargs -0 ...
grep -U -R -l ^M . xargs fromdos
grep -Z -l -R /~test/dev/portal . xargs -0 -l 1 sed -i s:/~test/dev/portal/:/apps/portal/:g
grep -a
grep -a -o -E  leftsquarebrc 123 rightsquarebrc + /dev/urandom tr -d \n
grep -a Student ID $i.txt sed -e -  -s -/ -( -S -t -u -d -e -n -t -  -I -D -: -  -  -/ -/ -g -e s/)Tj//g -e $s/r$//
grep -c 
grep -c 
grep -c ""
grep -c $1 ./ leftsquarebrc FILE rightsquarebrc 
grep -c $ITEM ItemStored.txt
grep -c $line $filename
grep -c -P .+ leftanglebrc text2 rightanglebrc .+ filename
grep -c -P http://\S*tt(?!p:) file
grep -c -v -P \S file
grep -c PATTERN * awk -F -: {sum+=$2} END{print sum}
grep -c \ leftanglebrc NH:i:1\ rightanglebrc  samtry.txt
grep -c ^ leftsquarebrc A-Z rightsquarebrc  the_file.txt
grep -c ^$
grep -c ^2013-05-17.*reason : 1004 file
grep -c ^20130305-2 leftsquarebrc 1-3 rightsquarebrc .*myPattern your.log
grep -c ^processor /proc/cpuinfo
grep -c ^processor /proc/cpuinfo
grep -c a output output2 sed s/^.*:\( leftsquarebrc 0-9 rightsquarebrc *\)/\1/
grep -c echo FILE
grep -c keyword * sed -n -e /:2$/s/:2$//p
grep -c my_username  leftanglebrc (qstat) qstat
grep -c pattern *.sh
grep -c pattern /home/someuser/sometext.txt
grep -c proc /proc/cpuinfo
grep -c qwe file leftsquarebrc 1-3 rightsquarebrc  sed -e s/^\(.*\):\(.*\)$/\2 \1/ sort -r -n
grep -c regex files sed -e s/^\(.*\):\(.*\)$/\2 \1/ sort -r -n head -n 1
grep -c sda leftsquarebrc 0-9 rightsquarebrc  /proc/partitions
grep -c something file
grep -c word file
grep -c xyz *.sh
grep -e  leftsquarebrc 0-9 rightsquarebrc {3}- leftsquarebrc 0-9 rightsquarebrc {3}- leftsquarebrc 0-9 rightsquarebrc {4}
grep -e "weather": leftsquarebrc ^ leftsquarebrc  rightsquarebrc *\ leftsquarebrc  leftsquarebrc ^{ rightsquarebrc *{ leftsquarebrc ^} rightsquarebrc *"id": * leftsquarebrc 0-9 rightsquarebrc \{1,3\}
grep -e $pattern /home/*/.bash_history
grep -e $string file...
grep -e ^ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+foo foo
grep -f  leftanglebrc (cut -d, -f2 file2) file1 cut -d -, -f 2 file2
grep -f  leftanglebrc (grep ohn dep/playlist) employeelist grep ohn dep/playlist
grep -f  leftanglebrc (printf "BBB\nAAA\n") file printf BBBnAAAn
grep -f  leftanglebrc (sed 's/.*/\\ leftanglebrc &\\ rightanglebrc /' match1) list sed s/.*/\\ leftanglebrc &\\ rightanglebrc / match1
grep -f  leftanglebrc (sed 's/^/\^/' file1) file2 sed s/^/\^/ file1
grep -f 1.txt 2.txt awk ...
grep -f domains articles
grep -f file
grep -f file1 file2
grep -f file1 file2
grep -f file1 file2
grep -f file1.csv file2.csv
grep -f file2 file1
grep -f myDocument.txt cat dog 123
grep -f name.txt /etc/passwd awk -F -: {print "User name", $1, "Full name", $5, "Home directory", $6}
grep -f pattern_file files*
grep -f queries.txt myDocument.txt
grep -f search employeelist
grep -f stringFile xmlFile
grep -f strings.txt final.txt
grep -h -E --before-context 1 ^DB2 leftsquarebrc 0-9 rightsquarebrc +E log.txt
grep -h -P ^ leftsquarebrc  \t rightsquarebrc + leftsquarebrc a-z rightsquarebrc * *.s sed s/^ leftsquarebrc  \t rightsquarebrc \+\( leftsquarebrc a-z rightsquarebrc *\).*/\1/ sort uniq -c
grep -h -P ^\d+$ `ls -lad /dir/*/pid | grep -P '/dir/\d+/pid' | awk '{ print $9 }'` ls -l -a -d /dir/*/pid grep -P /dir/\d+/pid awk { print $9 } xargs kill -9
grep -h -o @string/(w*) * -R
grep -h -r -i -o -I  leftsquarebrc a-z0-9_\. rightsquarebrc \+@ leftsquarebrc a-z0-9 rightsquarebrc \+\. leftsquarebrc a-z0-9\. rightsquarebrc \{2,\} MYDIR sort -u
grep -h -r -i -o -I --include *.sh  leftsquarebrc a-z0-9_\. rightsquarebrc \+@ leftsquarebrc a-z0-9 rightsquarebrc \+\. leftsquarebrc a-z0-9\. rightsquarebrc \{2,\} MYDIR sort -u
grep -h -r name:foo *
grep -h -w ^$grep_id leftsquarebrc ^0-9 rightsquarebrc * ...
grep -h find a line with data1 and data2 ${FILENAMES leftsquarebrc @ rightsquarebrc } sed -r -n s/(data1).*(data2).*/1/p
grep -i $1 -A 3 grep First ascent: sed s/.*by \( leftsquarebrc ^ rightanglebrc  rightsquarebrc *\) leftanglebrc .*/\1/
grep -i $ort $f
grep -i $search $bookName
grep -i -B 10 error data
grep -i -P version=0x(?!26)\d\d my.log
grep -i -R -l --include *php* error_reporting *
grep -i -R -n --include *php* error_reporting * cut -d -: -f -- -2
grep -i -l -r orange . grep -v .git grep -e \.php$ xargs sed -i s/orange/apple/g {}
grep -i -l error_reporting *php*
grep -i -m 1 create *.log
grep -i -m 5 $pat file.txt
grep -i -n $search $bookName
grep -i -n John file
grep -i -n keyword ... cut -d -: -f 1
grep -i -o  leftsquarebrc 0-9a-f rightsquarebrc \{12\} file.txt
grep -i -o -P (? leftanglebrc =skype:) leftsquarebrc a-z rightsquarebrc  leftsquarebrc w.,- rightsquarebrc {6,32} file
grep -i -o -P (a|an|the).*?d{1,4} files
grep -i -o -P ttl \d+ file awk {a leftsquarebrc $0 rightsquarebrc ++}END{for(x in a)print x" - "a leftsquarebrc x rightsquarebrc " time"(a leftsquarebrc x rightsquarebrc  rightanglebrc 1?"s":"")}
grep -i -o -P ttl \d+ file awk {a leftsquarebrc $0 rightsquarebrc ++}END{for(x in a)print x" - "a leftsquarebrc x rightsquarebrc " times"}
grep -i -o -c $codon $1
grep -i -o insert into .* file
grep -i -r -l -Z $schema $WORKDIR/ xargs -0 sed -i s/'"$schema"'/EXI1/gI
grep -i -r -n Search_Pattern . awk -F -: $1!=f{print "\n"$1"\n";f=$1} {print $2":"$3}
grep -i -v chevy cars sort -n -k 5 sed / leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc $/q
grep -i -v chevy cars sort -n -k 5 sed / leftsquarebrc 0-9 rightsquarebrc \{5,\}$/q
grep -i -w -c ^$2 $3  $1
grep -i Zweigst: 00 $f
grep -i \ leftanglebrc tony\ rightanglebrc  file
grep -i \btony\b file
grep -i electron shell.txt
grep -i error report.txt
grep -i expression ./* perl -p -e s/.*(\d+).*:.*(\d+)/$1 $2/ sort uniq
grep -i other something *.txt
grep -i something ~* ' leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc *' /var/log/syslog
grep -i user@domain.com 1US* awk {...} xargs rm
grep -l #include .hf1\.h
grep -l $ID csvfolder/* wc -l
grep -l --null #archive ~/dropbox/documents/notes/Archive/* xargs -0 sed -e s|#archive|~archive|g -i 
grep -l -E  leftsquarebrc 0-9 rightsquarebrc {2}- leftsquarebrc 0-9 rightsquarebrc {7} * wc -l
grep -l -F -r $search /path/to/search
grep -l -Z pattern files xargs -0 mv -t target-directory --
grep -l -i delete /bigcompany/scripts/dbscripts/*
grep -l -i user@domain $i xargs rm
grep -l -r -- goodword * xargs grep -L -i -- badword
grep -l -r -Z -- goodword * xargs -0 grep -L -i -- badword
grep -l -r -e index *.html xargs sed -i .bak -e s# leftanglebrc !-- Added by HTTrack -- rightanglebrc  leftanglebrc meta http-equiv="content-type" content="text/html;charset=UTF-8" rightanglebrc  leftanglebrc !-- /Added by HTTrack -- rightanglebrc ##g
grep -l -r -f value.txt base_directory
grep -l -r -i -z (set feedback on){0,} leftsquarebrc  t rightsquarebrc *(?:(?!set feedback off).)* leftsquarebrc  t rightsquarebrc *select sysdate from dual ./*.sql
grep -l -r pattern /mydirectory/*
grep -l -r searchword *
grep -l /static dir/* xargs sed -i  s/\/static//g
grep -l Peter * xargs grep -l James
grep -l Term optim_HGF.o* xargs report
grep -l ^ice.*cream file*
grep -l a $FILE grep -l b $FILE echo Both a and b found in $FILE
grep -l delete /bigcompany/scripts/dbscripts/*
grep -l desiredString *
grep -l error *.log xargs grep -l foo
grep -l firstmatch * xargs grep secondmatch {}
grep -l foo $(grep -l error *.log) grep -l error *.log
grep -l pattern * xargs awk -F -t {print $1"\t"$2  rightanglebrc  FILENAME}
grep -l pattern files*
grep -l rvm.sh .??*
grep -l start on startup /etc/init/*
grep -l strings.txt *.xml xargs sed -i s/status/warning/g
grep -l your_string /your/dir/
grep -l your_string /your/dir/f*.dat
grep -l yourtext * xargs rm
grep -l ~/\.conky/ leftsquarebrc ^  rightsquarebrc */\.conkyrc AnotherFile.txt
grep -l ~/\.conky/ leftsquarebrc ^  rightsquarebrc */\.conkyrc AnotherFile.txt
grep -m 1  leftsquarebrc 0-9 rightsquarebrc $ file
grep -m 1 # DESC $line cut -c 9-
grep -m 1 -o -P dropped\s*=\s*\K\d+ logfile
grep -m 1 T1600 nGENERIC*.txt
grep -m 1 pattern1|pattern2|pattern3 test.txt
grep -m 1 server up  leftanglebrc (tail -F log -n 0) tail -F log -n 0 startServer wait
grep -n  leftanglebrc string rightanglebrc  input sed -n -e s/^\( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/ -e 1p;$p
grep -n $SEARCH_TERM $i tee -a /file.txt
grep -n $str filename
grep -n -E ^DB2 leftsquarebrc 0-9 rightsquarebrc + log.txt cut -f 1 -d   gawk /E$/{y=$0;print x, y};{x=$0} sed -e s/:DB2 leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc + leftsquarebrc IE rightsquarebrc //g gawk {print "sed -n \"" $1+1 "," $2 "p\" log.txt "} sed -e s/$/  rightanglebrc  rightanglebrc  filtered.txt/g
grep -n -E ^DB2 leftsquarebrc 0-9 rightsquarebrc + log.txt cut -f 1 -d   gawk /E/{y=$0;print x, y};{x=$0} sed -e s/:DB2 leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc + leftsquarebrc IE rightsquarebrc //g gawk {print "sed -n \""$1+1" ,"$2 "p\" log.txt" } sed -e s/$/  rightanglebrc  rightanglebrc  filtered.txt/g
grep -n -F go.gle.com  inFile
grep -n -e -1 -2 -3 -4 -. -5 -6 -7 -8
grep -n -f pattern.txt *.tsv cut -f 1,2,3
grep -n -f patternFile -R --include *.xml .
grep -n -o name=" leftsquarebrc ^" rightsquarebrc *" file.html
grep -n -r -H regex /dir/
grep -n -r \ leftanglebrc XML\ rightanglebrc  .
grep -n -r \$level --exclude tmpfile2.txt .
grep -n -v `head -1 FILE1` FILE2 head -1 FILE1
grep -n TGATTACTTGCTTTATTTTAGTGTTTAATTTGTTCTTTTCTAATAA 101127_2.bam
grep -n ^ leftsquarebrc ^# rightsquarebrc *test
grep -n ^#include in.h tail -1 cut -d -: -f 1
grep -n ^-----$ filename.txt
grep -n ^.\{80\} *.cpp
grep -n needle haystack1 haystack2 sed s/:/ +/
grep -n needle haystack1 haystack2 sed s/:/ +/ awk -F -: {print $1}
grep -n not found sed -n s/.*'(.*)'.*/1/p
grep -n not found sed -n s/.*('.*').*/1/p
grep -n pattern file
grep -n string match myFile cut -d -: -f 1 tail -1
grep -n target_string data.txt
grep -o  leftanglebrc item rightanglebrc  a.xml wc -l
grep -o  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
grep -o  leftsquarebrc 0-9 rightsquarebrc * filename
grep -o  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
grep -o  leftsquarebrc 0-9 rightsquarebrc \+
grep -o  leftsquarebrc 0-9 rightsquarebrc \+\. leftsquarebrc 0-9 rightsquarebrc \+\. leftsquarebrc 0-9 rightsquarebrc \+\. leftsquarebrc 0-9 rightsquarebrc \+ logfile sort uniq -c
grep -o  leftsquarebrc 0-9 rightsquarebrc \{1,3\}\. leftsquarebrc 0-9 rightsquarebrc \{1,3\}\. leftsquarebrc 0-9 rightsquarebrc \{1,3\}\. leftsquarebrc 0-9 rightsquarebrc \{1,3\} file.txt
grep -o  leftsquarebrc 0-9 rightsquarebrc \{10\} inputfilename wc -l
grep -o  leftsquarebrc 0-9 rightsquarebrc \{8\} file
grep -o  leftsquarebrc A-Z rightsquarebrc .* leftsquarebrc 0-9 rightsquarebrc 
grep -o  leftsquarebrc ^  rightsquarebrc *%
grep -o  leftsquarebrc ^  rightsquarebrc *a\.site leftsquarebrc ^  rightsquarebrc * input
grep -o " leftsquarebrc ^" rightsquarebrc *" list.txt
grep -o "directory=  leftsquarebrc ^" rightsquarebrc *" file
grep -o $ leftsquarebrc 0-9 rightsquarebrc \+ $1
grep -o $word: leftsquarebrc 0-9 rightsquarebrc * file
grep -o (.*) emailFile
grep -o (.*) emailFile sed s/ leftsquarebrc (") rightsquarebrc //g
grep -o , leftsquarebrc A-Za-z rightsquarebrc 
grep -o -E  leftsquarebrc 0-9 rightsquarebrc +  leftsquarebrc km rightsquarebrc b/s
grep -o -E  leftsquarebrc ^@ rightsquarebrc +@ leftsquarebrc ^@ rightsquarebrc +\.(com|net|biz|info) our_company_emails.txt sort
grep -o -E "name":"Rausschmeisser","link":" leftsquarebrc ^" rightsquarebrc +"
grep -o -E $(IFS='|'; echo "${list_of_strings leftsquarebrc * rightsquarebrc }") file echo ${list_of_strings leftsquarebrc * rightsquarebrc }
grep -o -E .{1,3} file.txt
grep -o -E /apps/jboss-eap- leftsquarebrc ^/ rightsquarebrc +/jboss-as/
grep -o -E 192\.168\.77\. leftsquarebrc 0-9 rightsquarebrc + dhcpd.conf
grep -o -E S leftsquarebrc XN rightsquarebrc 00- leftsquarebrc 0-9 rightsquarebrc {3} file
grep -o -E \bb leftsquarebrc 0-9 rightsquarebrc {3}\b file
grep -o -E ^ leftsquarebrc 0-9 rightsquarebrc +
grep -o -E config.{5} Lab-console.html
grep -o -P  leftanglebrc  leftsquarebrc vp rightsquarebrc :0x leftsquarebrc 0-9a-z rightsquarebrc + data.txt sed s/.\{5\}//
grep -o -P  leftanglebrc row value=" leftsquarebrc a-zA-Z0-9\-./:=_ rightsquarebrc *" count=" leftsquarebrc 0-9 rightsquarebrc *" rightanglebrc  leftsquarebrc a-zA-Z0-9\-./:=_  rightsquarebrc * leftanglebrc /row rightanglebrc 
grep -o -P "REFERENCE":"79","STATUS":".*?" file.log sort uniq -c
grep -o -P "name" : "${dbname}d*"
grep -o -P $regex
grep -o -P (? leftanglebrc = leftanglebrc  leftsquarebrc vp rightsquarebrc :0x) leftsquarebrc 0-9a-z rightsquarebrc + data.txt sed N;s/\n/ /
grep -o -P (? leftanglebrc = leftanglebrc )\d{3,}(?= rightanglebrc ) file
grep -o -P (? leftanglebrc = leftanglebrc strong rightanglebrc ).*?(?= leftanglebrc /strong rightanglebrc ) file
grep -o -P (? leftanglebrc =--pe_cnt ) leftsquarebrc ^  rightsquarebrc + inputFile
grep -o -P (? leftanglebrc =/)( leftsquarebrc ^/ rightsquarebrc *mp3) textfile
grep -o -P (? leftanglebrc =/player/)\w+ file
grep -o -P (? leftanglebrc =/watch\?v=).{11}
grep -o -P (? leftanglebrc =ANS_LENGTH=).* log.txt
grep -o -P (? leftanglebrc =Minimum = ) leftsquarebrc 0-9 rightsquarebrc +(?=ms)
grep -o -P (? leftanglebrc =Ran in )\d+(?= seconds) output
grep -o -P (? leftanglebrc =SIG: leftanglebrc ) leftsquarebrc ^ rightanglebrc  rightsquarebrc *(?= rightanglebrc )
grep -o -P (? leftanglebrc =XMLcpLINK: ).* file.txt
grep -o -P (? leftanglebrc =\ leftsquarebrc ) leftsquarebrc ^ rightsquarebrc  rightsquarebrc *
grep -o -P (? leftanglebrc =\ leftsquarebrc ) leftsquarebrc ^ rightsquarebrc  rightsquarebrc +
grep -o -P (? leftanglebrc =\"name\" rightanglebrc ) leftsquarebrc ^ leftanglebrc  rightsquarebrc +(?= leftanglebrc /h1 rightanglebrc ) test.txt
grep -o -P (? leftanglebrc =\${).*?(?=})
grep -o -P (? leftanglebrc =\() leftsquarebrc ^\) rightsquarebrc + file
grep -o -P (? leftanglebrc =\().*?(?=,,\))
grep -o -P (? leftanglebrc =\w=)\w+ file
grep -o -P (? leftanglebrc =bbb ).*?(?=ddd)
grep -o -P (? leftanglebrc =skype:) leftsquarebrc ^" rightsquarebrc + file
grep -o -P (? leftanglebrc =skype:)w+ file
grep -o -P (? leftanglebrc =value=") leftsquarebrc ^" rightsquarebrc + file
grep -o -P (Host.*down|Host.*up)
grep -o -P (d+(.d+)?(?=%))
grep -o -P -h \s.+\|\s+OK\|\s+INFO\|\s+\ leftsquarebrc CATLG myfile.log
grep -o -P -m -1 (? leftanglebrc = leftanglebrc title rightanglebrc ) leftsquarebrc ^ leftanglebrc  rightsquarebrc +
grep -o -P -r CMAKE_C_COMPILER_ID "\K leftsquarebrc ^" rightsquarebrc *
grep -o -P .*?\K(http:/)?/\S*tt(?!p:)\S* file
grep -o -P .*_(1|2|3)(?=;$) file.txt
grep -o -P .{13}$ foo.txt grep -o -P .{7}
grep -o -P .{3}pattern.{3} very_large_file
grep -o -P @\K leftsquarebrc ^  rightsquarebrc * tweets
grep -o -P Host.*?(down|up)
grep -o -P Host.*?\b(down|up)\b
grep -o -P LN:\K.* filename
grep -o -P MY-\d{5} file
grep -o -P MdcFile.* cube.mdl awk -F -" { print $2 }
grep -o -P PATTERN file.txt
grep -o -P Ran in \K\d+ output
grep -o -P STDMON.*?_company\.txt input.txt sort -u
grep -o -P TXT leftsquarebrc ^; rightsquarebrc * filename
grep -o -P VmRSS:\s*\K.* /proc/
grep -o -P \ leftsquarebrc A\s+\K leftsquarebrc ^\ rightsquarebrc  rightsquarebrc + file.txt
grep -o -P \ leftsquarebrc A\s+\K leftsquarebrc ^\ rightsquarebrc  rightsquarebrc + file.txt tee new_file.txt
grep -o -P \(\K leftsquarebrc ^\) rightsquarebrc + file
grep -o -P \d+(?=/(udp|tcp)) /usr/share/nmap/nmap-services
grep -o -P ^ *\Keth leftsquarebrc 0-9 rightsquarebrc + /proc/net/dev
grep -o -P ^$1:K.* file
grep -o -P ^(www\.)?\K leftsquarebrc a-z0-9\- rightsquarebrc +\.com?(\. leftsquarebrc a-z rightsquarebrc {2})?(?=)$ input.txt sort -u
grep -o -P ^abc\K.*?(?=xyz$|$)
grep -o -P ab leftsquarebrc a-z rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc +xyz filename
grep -o -P data-context-item-title=.*.data-context-item-id web.html cut -d -f 2
grep -o -P encoding= leftsquarebrc "' rightsquarebrc ( leftsquarebrc ^"' rightsquarebrc +) $file head -1 cut -c 11-
grep -o -P git-\K leftsquarebrc A-Fa-f\d rightsquarebrc +
grep -o -P git-\K leftsquarebrc A-Fa-f\d rightsquarebrc + head -1
grep -o -P hel(?=lo)
grep -o -P http leftsquarebrc ^" rightsquarebrc *(?=" rightanglebrc RSS) file
grep -o -P javascript:add2BasketProd.*?jpg
grep -o -P name : ${dbname}d*
grep -o -P skype:Kw+ file
grep -o -P upload_url: "\K leftsquarebrc ^" rightsquarebrc + filename
grep -o -P w+((w|d)+):s+w+s+d+ yourfile sort uniq
grep -o -c \.
grep -o -e  leftanglebrc dd rightanglebrc .*deg;C leftanglebrc /dd rightanglebrc  the_html.txt
grep -o -e ^C: leftsquarebrc ^: rightsquarebrc  inputFile
grep -o -m 1 2013-11-14  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  logfile.txt
grep -o -w  leftsquarebrc 0-9 rightsquarebrc * file awk {count+=$1} END{print count}
grep -o . filename sort uniq -c sort -n -r
grep -o . filename tr  leftsquarebrc :upper: rightsquarebrc   leftsquarebrc :lower: rightsquarebrc  sort uniq -c sort -n -r
grep -o .*/ file.txt
grep -o /.* 
grep -o /we.*
grep -o 1v..
grep -o CpuIowait= leftsquarebrc ^; rightsquarebrc *
grep -o LULWUT- leftsquarebrc 0-9 rightsquarebrc \{4\} leftsquarebrc 0-9 rightsquarebrc \? file
grep -o Logs\/.*txt\"
grep -o STDMON leftsquarebrc 0-9 rightsquarebrc *_company\.txt input.txt sort -u
grep -o TXT leftsquarebrc ^. rightsquarebrc *\.txt file
grep -o Thread  leftsquarebrc 0-9 rightsquarebrc * sort uniq -c awk {print $2, $3 ":", $1}
grep -o \S file awk {a leftsquarebrc $1 rightsquarebrc ++}END{for(k in a)print a leftsquarebrc k rightsquarebrc ,k}
grep -o \S file awk {a leftsquarebrc $1 rightsquarebrc ++}END{for(k in a)print a leftsquarebrc k rightsquarebrc ,k} sort
grep -o \w* a.txt sort uniq
grep -o ^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+\.
grep -o ^" leftsquarebrc 0-9 rightsquarebrc \+"\|^" leftsquarebrc A-Z rightsquarebrc \+" test.csv
grep -o ^.{80} your_file
grep -o bar  leftsquarebrc .0-9 rightsquarebrc * file.txt
grep -o content" rightanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * leftanglebrc /div rightanglebrc  input
grep -o group  leftsquarebrc 0-9 rightsquarebrc * file
grep -o http(s):// leftsquarebrc ^/ rightsquarebrc \+/
grep -o isDisabled=.
grep -o isDisabled=. results.txt
grep -o key5:  leftsquarebrc ^, } rightsquarebrc * file
grep -o name=" leftsquarebrc ^" rightsquarebrc *" file.html
grep -o name=" leftsquarebrc ^" rightsquarebrc \+" your_file
grep -o regex file
grep -o server_log_ leftsquarebrc 0-9 rightsquarebrc \+\.log
grep -o sometext12 file.txt
grep -o user leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+\.com file
grep -o w{$n,} file
grep -o w{$n} file
grep -q  leftanglebrc $sportsName rightanglebrc  $file echo Sports Found echo No Sports Found
grep -q $item filename echo it exists echo does not exist
grep -q (0|1|2|3|4|5|7)(0|1|2|3|4|5|7)(0|1|2|3|4|5|7)
grep -q -E Added|Changed|Fixed|Deleted
grep -q -E ^ leftsquarebrc ^# rightsquarebrc +=$ file1 echo message
grep -q -F include "/configs/projectname.conf" foo.bar echo include "/configs/projectname.conf"
grep -q -P ^(\S+\s){4}\S+$
grep -q -e extension=solr.so file sed ...
grep -q -l ${BASH_ARGV leftsquarebrc 0 rightsquarebrc } $temp
grep -q -s -R -w -m 1 param /var
grep -q AAAA $i sed -i s/BBBB/CCCC/g $i sed -i s/DDDD/EEEE/g $i
grep -q ^ leftsquarebrc a-z_ rightsquarebrc  leftsquarebrc a-z0-9_- rightsquarebrc *$ echo true echo false exit 1
grep -q ^a file.c echo The file is appended echo the file is clean
grep -q ^option file sed -i s/^option.*/option=value/ file echo option=value
grep -q foo file
grep -q pattern /some/filename exit 0 echo failed! exit 1
grep -q something somefile.txt echo found echo not found
grep -q user1 myfile.txt sed -i -~ s/user1/user2/g myfile.txt echo user1 not there
grep -r  leftanglebrc name rightanglebrc .* leftanglebrc /name rightanglebrc  /path/to/directory
grep -r $1 $2* sed -r s|(.*)/(.*):(.*)|\1 \2 \3|g
grep -r ${@}
grep -r *
grep -r --exclude *.cmd ckin ./
grep -r --include *.c Unit32
grep -r --include *.c printf .
grep -r --include *.{cc,h} hello .
grep -r -F $(sed 's#.*/##g' "$FILELISTING") $PROJECTDIR sed s#.*/##g $FILELISTING
grep -r -F $f $PROJECTDIR
grep -r -F -f $FILELISTING $PROJECTDIR
grep -r -I .
grep -r -I PatternToSearch ./path --exclude {*log*,tags}
grep -r -i --include *.h --include *.cpp CP_Image ~/path leftsquarebrc 12345 rightsquarebrc  mailx -s GREP email@domain.com
grep -r -l $oldstring /path/to/folder xargs sed -i s@$oldstring@$newstring@g
grep -r -l $oldstring public_html/ xargs -d -n sed -i s@$oldstring@$newstring@g
grep -r -l $xEFxBBxBF .
grep -r -l -E GIF|html . xargs rm
grep -r -l -I ` ./*
grep -r -l -f  leftanglebrc (cut -d = -f 2- messages.txt) dir cut -d = -f 2- messages.txt
grep -r -l -f messages.txt dir
grep -r -l /DS/tmp/2.gnuplot.ps ./ xargs sed -i s,/DS/tmp/2.gnuplot.ps,./gnuplot.ps,g
grep -r -l first.second.third.fourth . xargs sed -i s/first\.second\.third\.fourth/foo.bar.fooey/g
grep -r -l move from
grep -r -l override.*commitProperties . xargs grep -L super.commitProperties
grep -r -l roads . grep -v /\.svn/
grep -r -l {some_pattern . xargs your-command
grep -r -l ~/\.conky/ leftsquarebrc ^  rightsquarebrc */\.conkyrc SomeDirectory
grep -r -n --include *.hpp -- -= .
grep -r -n -H -P (? leftanglebrc !key:)(? leftanglebrc !orKey:)(? leftanglebrc !isEqualToString:)\@\" leftsquarebrc A-Za-z0-9 rightsquarebrc *\" ./
grep -r -n -i -E foo(.){0,20} leftsquarebrc 567 rightsquarebrc  .
grep -r -n -i ^$test include
grep -r -n -i ^$test include
grep -r -n -i ^'$test'  include
grep -r -n -i ^struct task_struct include
grep -r -n -i ^struct task_struct include
grep -r -n -w . -e text mv ../files.txt test/files.txt
grep -r -o  leftanglebrc mytag leftsquarebrc  \t rightsquarebrc .*Title=" leftsquarebrc ^" rightsquarebrc *" /path/to/directory/to/search
grep -r -o foo /some/directory wc -l xargs echo Total matches :
grep -r /bin * grep -P -v .*?:#!
grep -r \ leftsquarebrc  leftsquarebrc 01 rightsquarebrc \ rightsquarebrc  . grep .cpp:
grep -r `def *
grep -r `def *
grep -r db-connect.php . grep version
grep -r foo path sed s:$(~shared)/:shared/: ~shared
grep -r rs_mdfour *
grep -r search *
grep -r string
grep -r yourstring /path/to/your/folder
grep -s -q ^foo:bar: $@ exit 1
grep -s -q ^sometext$ $somefilename
grep -s -r ^.*\.(c|cpp|h)$ .
grep -v   input.txt
grep -v  leftanglebrc pattern rightanglebrc  file
grep -v  leftanglebrc string1 rightanglebrc | leftanglebrc string2 rightanglebrc | leftanglebrc stringN rightanglebrc  /path/to/file
grep -v  leftsquarebrc ^a-zA-Z rightsquarebrc  foo
grep -v  leftsquarebrc ^a-zA-Z0-9_- rightsquarebrc  file
grep -v  leftsquarebrc ^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ rightsquarebrc  foo
grep -v  rightanglebrc  $1 grep -o A wc -l
grep -v # ../download/interactions.$1.$2 awk ($2!~/_R/){print $2} sort -k 1 uniq
grep -v # blastGE90_lengthGE1000 cut -f 1-3 sed -r s/(.+)_chr( leftsquarebrc 0-9XY rightsquarebrc +)_.+\t(.+)_chr( leftsquarebrc 0-9XY rightsquarebrc +)_.+\t( leftsquarebrc 0-9 rightsquarebrc +).+/\1 \2 \3 \4 \5/
grep -v ****  textfile
grep -v ,, somefile.csv
grep -v ,0$
grep -v -E  leftsquarebrc 0-9 rightsquarebrc {3,} inputfile
grep -v -E ,,|^,|,$ somefile.csv
grep -v -E ^ leftsquarebrc 0-9 rightsquarebrc +$
grep -v -E ^# file
grep -v -E ^-|-$ filename
grep -v -E ^Filesystem|tmpfs|cdrom|none|\.Private
grep -v -F -f  leftanglebrc (grep '\ leftanglebrc header\ rightanglebrc ' masterfile | cut -d' ' -f2) tempfile grep \ leftanglebrc header\ rightanglebrc  masterfile cut -d -  -f 2
grep -v -F -f  leftanglebrc (sed 's/^header *//' masterfile) tempfile sed s/^header *// masterfile
grep -v -F -f  leftanglebrc (sed 's/^header *//' masterfile) tempfile sed s/^header *// masterfile mv tmp tempfile
grep -v -F -f blacklist.txt
grep -v -F -f file1 file2
grep -v -F -w -f file2 file1
grep -v -P  leftsquarebrc 0-9 rightsquarebrc {3,} inputfile
grep -v -P  leftsquarebrc ^A-Za-z rightsquarebrc read  leftsquarebrc x80-xFF rightsquarebrc  file.txt
grep -v -P  leftsquarebrc ^A-Za-z rightsquarebrc read  leftsquarebrc x{2E80}-x{9FBB} rightsquarebrc + file.txt
grep -v -e string one that I don't want -e string two that I don't want file.log
grep -v -f  leftanglebrc (awk '{print $1}' file_b) file_a awk {print $1} file_b
grep -v -f  leftanglebrc (cut -d ";" -f1 /tmp/list2.csv) /tmp/list1.csv cut -d ; -f 1 /tmp/list2.csv
grep -v -f  leftanglebrc (grep -o '/ leftsquarebrc 0-9 rightsquarebrc *-' file | sort | uniq -d) file grep -o / leftsquarebrc 0-9 rightsquarebrc *- file sort uniq -d
grep -v -f $whiteListOfErrors $originalLogFile
grep -v -f 20000-words.txt 50000-lines.txt
grep -v -f blacklist.txt inputfile
grep -v -f current-users.txt total-users
grep -v -f file1 file2
grep -v -f file2.txt file1.txt
grep -v -f input2 input1
grep -v -f list_to_exclude filename
grep -v -f only-jpeg1-md5only.txt only-jpeg2.txt
grep -v -f output_file input_file
grep -v -f pattern_file
grep -v -f usednaslist naslist
grep -v -h -F -x -f file1 file2
grep -v -i -f file2.txt file1.txt
grep -v -i ^${empid_search}, tmpfile
grep -v -x -F -e $initialVars set -o posix set grep -v ^initialVars=
grep -v -x -F -e $initialVars set -o posix set grep -v ^initialVars=
grep -v -x -F -f fileB fileA
grep -v :..: yourfile
grep -v ;\s*$ input.txt
grep -v BSC leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+BSC leftsquarebrc 0-9 rightsquarebrc \+ infile
grep -v DNW sample.txt
grep -v Dogs list-of-animals less
grep -v Warnings: 0 * grep -B 4 -i warning
grep -v \babcd$
grep -v ^ leftsquarebrc  |t rightsquarebrc *# file tr ;, n awk $1=$1
grep -v ^ leftsquarebrc 0-9 rightsquarebrc 
grep -v ^ leftsquarebrc \#\&\* rightsquarebrc  yourFile.txt
grep -v ^#
grep -v ^# INPUTFILE echo $line
grep -v ^# filename awk ...
grep -v ^$ paste -s -d -,
grep -v ^$ yourFile
grep -v ^$1 filename
grep -v ^$\|^\s*\# temp
grep -v ^,*$ ...
grep -v ^,,,$ old-file.csv
grep -v ^C data.txt
grep -v ^Note:
grep -v ^\( leftsquarebrc ^| rightsquarebrc *|\)\{35\} leftsquarebrc ^| rightsquarebrc *$ filename
grep -v ^\s*$ file
grep -v ^find: Filesystem loop detected; myFile
grep -v ^foo leftsquarebrc ^3 rightsquarebrc $ foo
grep -v ^foo leftsquarebrc ^3 rightsquarebrc $ foo grep -v ^foo$
grep -v ^s*# file.sh
grep -v ^string yourfile.txt
grep -v abcd$
grep -v bTelePacificb file mv output file
grep -v drop table outfile.txt
grep -v index.html
grep -v keyword $d/$file
grep -v line* input.txt
grep -v string1|string2|string3 filename
grep -v turnkey
grep -v xinetd|nrpe
grep -w $1 .
grep -w $line
grep -w $line
grep -w -A -1 -5 alpha|beta tail -1 6
grep -w -F -f file1 file2
grep -w -c GOOD file
grep -w -c NH:i:1 samtry.txt
grep -w -f grep-pattern.txt inputfile
grep -w -i ...
grep -w -l BML.I *
grep -w -o  leftsquarebrc ^abc rightsquarebrc * 1.txt
grep -w -o -F -f keys.txt filename.json sort uniq -c
grep -w -r --include ?????????.std $1 * sed s/\.std:/ / sort -k 2rn
grep -w -r --include ?????????.std $1 /dev/null * sed s/\.std:/ / sort -k 2rn
grep -w -v -e word1 -e word2 file
grep -w Inbox\|Outbox your_input
grep -w bar some/path/*/file cut -d : -f 1 cut -d / -f 3
grep -w host /etc/hosts
grep -w label for="id_query
grep -w python grep imag
grep -x -F -f A.txt B.txt
grep -x -f A.txt B.txt
grep -x -i -v -F -f 5k-most-common-sorted.txt brit-a-z-sorted-fixed.txt
grep -x -v -F -f whitelist testfile
grep -| -  input_file
grep .  leftanglebrc ( awk ...) awk ... sed s|.*\:||
grep .  leftanglebrc ( awk ...) awk ... sed s|.*\:|| xargs ...
grep . -n -s -r -i -e foo
grep . sed s|.*\:||  leftanglebrc ( awk ... ) awk ...
grep . sed s|.*\:|| /dev/fd/63
grep .*.zip$
grep .*abc.*vhg file.txt
grep ...
grep ... ./analyze_data
grep ... `ls -lad ... | awk '{ print $9 }'` ls -l -a -d ... awk { print $9 } xargs kill -9
grep ... grep -v  leftanglebrc ... rightanglebrc \(000\|40 leftsquarebrc 346 rightsquarebrc \|410\) leftanglebrc ... rightanglebrc 
grep ... grep -v -E  leftanglebrc ... rightanglebrc (000|40 leftsquarebrc 346 rightsquarebrc |410) leftanglebrc ... rightanglebrc 
grep ... sed -e s/^\(.\{12\}\).*/\1/
grep ... tail -n 1
grep ... xargs sed -i  s@"http://"@@g
grep .... cut -c 1-N
grep ...parameters... yourfile head
grep .80 
grep .torrent `find /top/level/directory/ -name files.txt` find /top/level/directory/ -name files.txt
grep /dev/sr0 /etc/mtab cut -d -  -f 2
grep /foo.c$ LIST_OF_FILES.txt
grep 00$ data cut -d   -f 9 sed s/^00*//
grep 06 Apr 2014 catalina.logs
grep 1 host up  leftanglebrc (nmap -O "$i") nmap -O $i echo UP echo DOWN
grep 1000 /etc/passwd cut -f 1 -d -:
grep 1000 /tmp/userfile cut -d -, -f -2 -- paste -s -d -,
grep 1000 /tmp/userfile cut -d -, -f -2 -- tr \n , sed s/,$//
grep 1001 customer cut -d | -f 3
grep 16/Sep/2012:17 access_log awk {for (i=12;i leftanglebrc =NF;++i) printf "%s ",$i;print ""}
grep 2013$ input.tsv uniq -c
grep 28590301456967003510KKK.*00051 *.txt
grep 48 file
grep :.*fg.*: ./*
grep = leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc  file
grep @ apache.log sed -r s,.*/folder/new/( leftsquarebrc ^@ rightsquarebrc +@.*)_home.*"( leftsquarebrc ^" rightsquarebrc *)"$,\1 using \2,
grep @ oldfile.txt
grep A.*$a.*Z file.txt
grep API file awk { arr leftsquarebrc $5 rightsquarebrc +=$7 } END {for (i in arr) {print i,arr leftsquarebrc i rightsquarebrc }   } 
grep CRON /var/log/syslog
grep DISPLAY ~/.??*
grep ENVOI_MAIL= ${FILE_PROPERTIES} cut -d = -f 2
grep FAILED file.txt -B 1
grep ID=$i: trace.log grep getConnection cut -d - leftsquarebrc  -s -f 1 tr -d \n
grep INFO: $LOG grep Memory awk ...
grep INFO: grep Memory $LOG awk ...
grep Max_value: proc_*.* awk  $2 ~ / leftsquarebrc 0-9 rightsquarebrc {3}$/ && $2  rightanglebrc  127 && $2  leftanglebrc  200 
grep MdcFile.* cube.mdl awk -F -" { print $2 }
grep Mem /home/modadm/top-output.txt cut -c 25-31
grep Mem cut -c 25-31
grep MemTotal /proc/meminfo awk {print $2}
grep MyTest launched
grep Page filename awk {print $2} sort -n tail -n 1
grep Perm File.txt sed -r s/.*Perm :.*\((.*?)\).*/\1/
grep RECORD ${FILEARRAY leftsquarebrc @ rightsquarebrc :0:$fileIterator} awk for(i=1;i leftanglebrc =NF;i++) {if($i ~ XXXX) {XARRAY leftsquarebrc $i rightsquarebrc ++}} END {for(element in XARRAY){print element  rightanglebrc  rightanglebrc  FILEB}
grep Rec STOM.log grep 1887283 grep 2013-07 grep -o -h '.*' wc -c
grep SCF Done $1 cut -f 5 cat -n sort -k 2
grep SEARCHTERM server.log grep -E -v PHHIABFFH|Stats
grep Sorry $(grep -l Thank /etc/profile /etc/bash* ~/.bashrc ~/.bash_profile ~/.profile) /dev/null grep -l Thank /etc/profile /etc/bash* ~/.bashrc ~/.bash_profile ~/.profile
grep There is a group awk {print substr($0,10)}
grep UncategorizedLdap * perl -l -p -e ($_) = /(ou=\w*)/
grep User-Agent ../*.txt head -1 cat -v -e -t
grep Warning build.log :
grep Y X
grep \ leftanglebrc P01\ rightanglebrc  file
grep \ leftanglebrc foo\ rightanglebrc  file
grep \ leftanglebrc header\ rightanglebrc  master cut -d -  -f 2 grep -v -F -f tempfile
grep \ leftanglebrc myServer\ rightanglebrc  test-file.txt
grep \( leftsquarebrc  leftsquarebrc :lower: rightsquarebrc  rightsquarebrc \) *\1 *\1
grep \(.\)\1 leftsquarebrc ^\r\n rightsquarebrc $ *
grep \.html grep -v /app/ leftsquarebrc ^/ rightsquarebrc *\.html
grep \.html grep -v /app/.*\.html
grep \B/\B file
grep \\$ file1 wc -l
grep \b leftsquarebrc A-Z rightsquarebrc  leftsquarebrc a-z rightsquarebrc \{8\}\b
grep \b-32\b file
grep \d{3} leftsquarebrc \s\- rightsquarebrc {0,1}\d{3} leftsquarebrc \s\- rightsquarebrc {0,1}\d{4} infile.txt
grep ^ * leftsquarebrc -+ rightsquarebrc  leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc 
grep ^ * leftsquarebrc -+ rightsquarebrc  leftsquarebrc ^-+ rightsquarebrc 
grep ^ * leftsquarebrc -+ rightsquarebrc  leftsquarebrc a-zA-Z0-9 rightsquarebrc 
grep ^ A : "$i" B : "$j" file wc -l
grep ^ A : $i B : $j file wc -l
grep ^ leftsquarebrc    rightsquarebrc *datadir leftsquarebrc    rightsquarebrc *= /etc/mysql/my.cnf cut -f 2 -d -=
grep ^ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc  infile
grep ^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *// *.java
grep ^ leftsquarebrc +- rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
grep ^ leftsquarebrc 0-9 rightsquarebrc  grep -q -v OK
grep ^ leftsquarebrc A-Z rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc  file
grep ^ leftsquarebrc \#\&\* rightsquarebrc  yourFile.txt
grep ^ leftsquarebrc ^/ rightsquarebrc  leftsquarebrc ^/ rightsquarebrc .*https file
grep ^ leftsquarebrc ^@ rightsquarebrc \+@ file
grep ^ leftsquarebrc eat rightsquarebrc *$ dictionary.txt
grep ^! input grep -E -o -e -? - leftsquarebrc  -0 -- -9 -. - rightsquarebrc  -+
grep ^$(/usr/gnu/bin/date -d -1hour +'%Y-%m-%d %H') test.logs /usr/gnu/bin/date -d -1 -h -o -u -r +%Y-%m-%d %H grep exception mail -s exceptions in last hour of test.logs ImranRazaKhan
grep ^$(TZ=HongKong date +'%Y-%m-%d %H') test.logs grep exception mail -s exceptions in last hour of test.logs ImranRazaKhan
grep ^$(basename "$file") desc basename $file sed s/.*.mp4 //
grep ^$(date -d -1hour +'%Y-%m-%d %H') test.logs date -d -1 -h -o -u -r +%Y-%m-%d %H
grep ^$(date -d -1hour +'%Y-%m-%d %H') test.logs date -d -1 -h -o -u -r +%Y-%m-%d %H grep exception mail -s exceptions in last hour of test.logs ImranRazaKhan
grep ^$(date -d -30minute +'%Y-%m-%d %H:%M') /var/log/zumigo/zlsapp.log date -d -3 -0 -m -i -n -u -t -e +%Y-%m-%d %H:%M wc -l
grep ^$NUM; file
grep ^$PARAMETERSSEARCH $OUTDIR_main/$MAIN_FILE_NAME tee -a ${OUTDIR_main}/${TMP_FILE_NAME}
grep ^$i File1
grep ^$i.* File1
grep ^$mac  awk {print $2}
grep ^$offender /etc/passwd cut -d -: -f 6
grep ^$table_prefix wp-config.php awk -F -' {print $2}
grep ^$table_prefix wp-config.php awk -F {print $2}
grep ^****  textfile
grep ^-? leftsquarebrc 0-9 rightsquarebrc +::-? leftsquarebrc 0-9 rightsquarebrc +::-? leftsquarebrc 0-9 rightsquarebrc +::-? leftsquarebrc 0-9 rightsquarebrc +$ log.out
grep ^.*:.*:38: /etc/passwd
grep ^.\{6,\} /usr/share/dict/words shuf
grep ^/var$ newfile
grep ^20140604.*Count :  leftsquarebrc ^0 rightsquarebrc .*$ XYZ.dat
grep ^AAA\.log$ a.tmp
grep ^ABC\. file
grep ^Feb 24 /var/log/secure
grep ^HELLO leftsquarebrc ^a-zA-Z rightsquarebrc  your_file
grep ^Stable tag: readme.md tr -d \015 awk -F -  {print $NF}
grep ^\#.*$ myscript.sh
grep ^\( leftsquarebrc ^, rightsquarebrc \+,\)\{N\}"x"
grep ^\( leftsquarebrc ^| rightsquarebrc *| leftsquarebrc ^| rightsquarebrc *\)\{7\}$
grep ^corrupt textfile
grep ^datadir= /etc/mysql/my.cnf cut -f 2 -d =
grep ^id, foo.txt
grep ^in|in$ input.txt
grep ^profile\$ File1
grep ^s= /path/file1
grep ^s= /path/file1  leftsquarebrc  $# -g -t 0  rightsquarebrc  echo ERROR: file has s parameter set and there are positional arguments
grep __gitdir ~/.bashrc
grep `date +%Y-%m-%d -d '2 days ago'` date +%Y-%m-%d -d 2 days ago
grep `date +'%y%m%d'` /var/log/mysqld.log date +%y%m%d sed s/^/computer /
grep aaa|bbb foo.txt
grep abc file.txt grep vhg
grep abc_cde_app_ leftsquarebrc ^_ rightsquarebrc *$
grep anypattern anyfile.txt awk END{print NR  rightanglebrc  "/dev/stderr"}1
grep anypattern anyfile.txt awk END{print NR}1
grep apple_with_seeds leftsquarebrc # rightsquarebrc *$ appleFile
grep apple_with_seeds leftsquarebrc ^_ rightsquarebrc  appleFile
grep argument sed -e s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc /|/g awk -F -| {print $3}
grep b leftsquarebrc an rightsquarebrc *a *.txt
grep bABC100-10b file
grep bar foo.txt awk { print $3 } xargs dem awk { print $3 }
grep bar input.txt tail -n 42
grep bbb yourfile grep ddd sed yourcommand
grep book1 file.txt cut -d -  --complement -f 1
grep da *
grep da *
grep data.frame(foo = x) mycode
grep error ~/Desktop/Servers/Folder/Error/Error_$DATE.txt grep -v PHP Notice\|PHP Warning\|File does not
grep example.com www_log date +example.com.%F-%T.log
grep example.com www_log date +example.com.%Y-%m-%d-%H:%M:%S.log
grep exception
grep exprt ~/.*
grep f89e7000 syscall_list.txt
grep first */*html
grep first ./*html
grep first ./*html ./.*html */*html */.*html
grep flags /proc/cpuinfo
grep foo *hs*
grep foo bar.txt
grep foo flatfile.txt cut -d / -f 1-6 xargs -I % echo %/
grep foo input.txt tail -n 10
grep hehe
grep hello /tmp/file
grep hello|world file1
grep href page.html sed s/^.*href="\( leftsquarebrc ^" rightsquarebrc *\)".*$/\1/ xargs sed s/ /,/g
grep https:// addresses.txt cut -d -/ -f 3 sort uniq
grep https?:// leftsquarebrc \w/&=.? rightsquarebrc + $1
grep include file1.h grep -f tmp -v file2.h grep ^#include
grep include file1.h grep -f tmp -v file2.h grep include
grep isaPDAVersion f1 awk -F -{ {print $2} awk -F -, {print $1$2$3$4}
grep java.lang.Exception $log awk -F -/ {print $4}
grep key my_file cut -d -= -f 2
grep keyword $(cat files.txt) cat files.txt
grep keyword `cat files.txt` cat files.txt
grep keyword1 inputfile sed s/.*=s*'( leftsquarebrc ^' rightsquarebrc +)';/1/
grep match\s*=\s*true
grep mykey =  file sed s/.*\(mykey =  leftsquarebrc A-Za-z rightsquarebrc *\).*/\1/
grep mystring myfile tail -n 3 head -n 1
grep name1 filename cut -d   -f 4 sort -u
grep out_time= progress.txt tail -1
grep packet loss grep -o  leftsquarebrc 0-9 rightsquarebrc +%
grep pat1 --color always grep pat2
grep pattern $(find /path -name pattern) find /path -name pattern
grep pattern -r --include *.{cpp,h} rootdir
grep pattern /path/to/file awk {print $0,"\n"}
grep pattern `find /path -name pattern` find /path -name pattern
grep pattern file ...
grep pattern file awk {print} ORS= 
grep pattern file head -1 file
grep pattern file tr \n  
grep pattern file1 file2
grep pattern {2..6}/*
grep pattern1 file grep pattern2 grep pattern3
grep pattern1\|pattern2 file.txt
grep pattern1|pattern2|pattern3 test.txt sed -n 1p;$p
grep pcsi-selector=" /LDCManifest.xml cut -f 2 -d
grep perl * --exclude try* --exclude tk*
grep print  **/*.py
grep puddle2_1557936 cut -d : -f 2
grep redeem file1 file2 file3..
grep s$(date --date='1 hour ago' '+%H').*MTS /var/log/oss.log date --date 1 hour ago +%H
grep search a file for a pattern
grep search string textfile.txt echo some string
grep search_pattern_here input_filename_here
grep searchterm myfile.csv sed -e s/replaceme/withthis/g
grep server crashed|server is up again tail -n 1
grep session opened for user USERNAME
grep some-name *.tsv
grep somePattern sort uniq
grep something --colour always files.* less -R
grep string $x.sh
grep string file
grep string file
grep table_name home/abcd/abc cut -d -: -f 1
grep target $a
grep text to search for *.sql
grep tgt/etc/*
grep the line which should be equal --files-with-matches temp/*
grep unix test.csv sed s/crap/linux/
grep unix test.csv sed s/crap/linux/
grep user `locate my.cnf` locate my.cnf
grep what_want_to_match filename_where_want_to_match.txt
grep whatever_you_like
grep word $TESTING
grep www.example.com *file.conf egrep -B 3 cert "|cert /Common
grep www.example.com *file.conf egrep profile|clientssl.*-cert
grep www.example.com *file.conf grep -o clientssl_.*-cert
grep xyz * perl -p -e print "\n" if /^( leftsquarebrc ^: rightsquarebrc +):/ && ! $seen{$1}++
grep xyz * perl -p -e print "\n" if /^( leftsquarebrc ^: rightsquarebrc +):/ && ! $seen{$1}++ && $.  rightanglebrc  1
grep xyz perl -p -e s/$/\n/
grep your key string yourFile.txt
grep yourKeyword yourFile.txt
grep your_search_string --after-context N your_log_file
grep { code } array
grep, egrep, fgrep print lines matching a pattern
grep-dctrl -n -s Package,Version nimbox /var/lib/apt/lists/..._Packages
grep... awk {gsub(/192.168.1.12 leftsquarebrc ^," rightsquarebrc * leftsquarebrc ," rightsquarebrc /,"");sub(/cidr=" rightanglebrc /," rightanglebrc ")}7
grep: character value in x{...} sequence is too large
greptags filename tag1 tag2 tag3 tag4
groff -m -t -t -y -- -c -h -a -r -T -u -t -f -8 -m -a -n -V /usr/share/man/man1/man.1
groff -m -t -t -y -- -c -h -a -r -T -u -t -f -8 -m -a -n -r -H -Y -= -0 /usr/share/man/man1/man.1
groff -m -t -t -y -- -c -h -a -r -T -u -t -f -8 -m -a -n -r -L -L -= -1 -0 -0 -0 -0 -0 -0 /usr/share/man/man1/man.1
groovy -c -p libjtds-1.3.0.jar libojdbc6-11g.jar srcStarter.groovy
groovy -e evaluate( new URL( "http://yoururl.com/yourscript.groovy" ).text )
groovy http://myserver/myScript.groovy
groupadd: Directie\r is not a valid group name.
groups $line tr   \n egrep -v _unknown|sciences|everyone|netaccounts
grunt publish
grunt test
gs -d -B -A -T -C -H -d -N -O -P -A -U -S -E -q -s -D -E -V -I -C -E -= -p -d -f -w -r -i -t -e -s -O -U -T -P -U -T -F -I -L -E -= -o -u -t -. -p -d -f foo.ps bar.ps another file.ps
gsed -n -r / leftsquarebrc 0-9 rightsquarebrc +/h; $ {x;p} testfile
gsettings get org.gnome.desktop.lockdown disable-lock-screen
gspecial master development
gst-launch-0.10 -v gstrtpbin name=rtpbin latency=100 udpsrc caps=application/x-rtp, media=(string)audio, clock-rate=(int)48000, encoding-name=(string)X-GST-OPUS-DRAFT-SPITTKA-00, caps=(string)audio/x-opus, multistream=(boolean)false, streamheader=(buffer) leftanglebrc 4f707573486561640101000080bb0000000000,4f707573546167731e000000456e636f6465642077697468204753747265616d6572204f707573656e63010000001a0000004445534352495054494f4e3d617564696f74657374207761766501 rightanglebrc , ssrc=(uint)3090172512, payload=(int)96, clock-base=(uint)4268257583, seqnum-base=(uint)10001 port=5002 ! rtpbin.recv_rtp_sink_1 rtpbin. ! rtpopusdepay ! opusdec ! audioconvert ! audioresample ! alsasink device=2 name=uudpsink0 udpsrc port=5003 ! rtpbin.recv_rtcp_sink_1 rtpbin.send_rtcp_src_1 ! udpsink port=5007 host=%s sync=false async=false
gtar -c -v -f $TAPE_DRIVE $BACKUP_FILE
gtar -r -v -f $TAPE_DRIVE $BACKUP_FILE
gtdownload  leftsquarebrc option parameter rightsquarebrc 
gunzip -c $fname perl myscript.pl
gunzip -c 4.56_release.tar.gz tar -x -v -f
gunzip -c input.gz dd bs=10485760 skip=0 count=1
gunzip -l file.zip
gunzip latest.tar.gz
gvim --servername GVIM
gvim --servername GVIM --remote-send  leftanglebrc Esc rightanglebrc :wqa leftanglebrc CR rightanglebrc 
gvim --servername GVIM --remote-tab file1 file2 file3 ...
gvim -d file1 file2
gvim -p 2 first.txt third.txt -c sp second.txt -c tabn -c sp fourth.txt
gvim `cygpath -w $*` cygpath -w $*
gvpr -f groups.g data.dot sort -k 2,2 -k 5,5 -k 8,8
gzcat file.gz tail -c +5 echo 000
gzcat jfk-gw10-asr1.20100408.log.gz sed -n /Nov 3 09:/,/Nov 3 11:/p
gzip $file mv $file.gz $file
gzip *
gzip -c -d $( leftanglebrc list.txt) ./a.out
gzip -c -d myDB.sql.gz pg_restore ...
gzip -d --stdout file.gz bash
gzip -d --stdout file.gz bash -s -- -n -  -w -o -r -d -p -r -e -s -s -  -l -o -c -a -l -h -o -s -t
gzip -d --stdout file.gz bash /dev/stdin arguments
gzip -d -c archive.tar.gz tar -x -f -C /destination
gzip -d file.tar.gz
gzip wc -c
gzip wc -c echo abcdef
h.Name = _path
h:o:g:
hadoop fs -c -a -t /path/to/output/dir/*
hadoop fs -l -s /apps/hdmi-technology/b_dps/real-time awk {print $8} read f hadoop fs -c -a -t $f grep bcd4bc3e1380a56108f486a4fffbc8dc echo $f
hadoop fs -l -s /path/to/files grep part awk {print $8} head -n 47 xargs hadoop fs -r -m
hadoop fs -l -s /projects/abcd/ awk -F / /delta|snapshot/ {print $NF}
hadoop fs -l -s sed 1d;s/  */ /g cut -d -  -f 8
hadoop fs -l -s sed 1d;s/  */ /g cut -d -  -f 8 xargs -n 1 basename
hadoop jar capital.jar org.myorg.Capital /user/cloudera/capital/input/City.dat,/user/cloudera/capital/input/Country.dat
handle: Handle 0x0037, DMI type 20, 35 bytes
handle_args ${m_parsed_args leftsquarebrc @ rightsquarebrc }
handlebars templates/*.handlebars -f precompiled_templates.js
hash -d ctags
hash -d fab
hash -r
hash -r
hash -r
hash -r
hash mycommand
haxe --help
hbase t1, r1, c1, value, ts1
hdfs dfs -a -p -p -e -n -d -T -o -F -i -l -e localfile /user/hadoop/hadoopfile
hdfs dfs -l -s -d ........
hdfs dfs -l -s /directory_path grep -v Found awk { print $6,$8 }
hdparm -i /dev/sda grep -i model
hdparm -i /dev/sda perl -n -e print "$1\n" if (m/model=(.+?),/i);
head $(search2.sh 'these are some search terms') search2.sh these are some search terms
head $(which rails) which rails
head --lines -1 filename
head -1 $OUTDIR_main/$MAIN_FILE_NAME tee -a ${OUTDIR_main}/${TMP_FILE_NAME}
head -1 000 input sed -i 1,+999d input
head -1 5696 filename tail -1 0
head -1 file.txt
head -1 file1 cat file2
head -1 filename cut -c -7 -- -1 -6
head -1 headerFile sed -i -. -b -a -k 1s/^/$HDR/ mainFile
head -1 tail -1 cat /usr/share/dict/words
head -2 Cit-HepPh.txt od -a
head -2 myfile.txt
head -3 0 $0 grep -n -a ^START cut -d : -f -1
head -5 2 file.txt tail -1 cut -f 2 awk {print int($3)/3}
head -5 42 FM_DEL_50r.bed read a b c rest_of_line echo $a $b $c
head -5 routes
head -5 routes
head -5 some_file tail -3 some_file
head -c $1 head -c 8
head -c $randompassLength
head -c $randompassLength
head -c ${1:-8}
head -c -1 AnalyzeClusterParameterFile
head -c 10
head -c 100 file
head -c 100000 /dev/urandom
head -c 22
head -c 4 /dev/urandom xxd -p
head -c 64
head -n ${i} files.txt tail -n 1
head -n -- -7 file
head -n -1 0 file
head -n -1 file
head -n -2 /etc/bash.bashrc sudo tee /etc/bash.bashrc
head -n -2 myfile.txt
head -n -9
head -n -` -g -r -e -p -  -- -n -  -' -* -' -  -f -i -l -e -. -t -x -t -  -| -  -h -e -a -d -  -- -n -1 -  -| -  -a -w -k -  -- -F -\ -: -  -' -{ -p -r -i -n -t -  -$ -1 -- -1 -; -} -' -` file.txt grep -n * file.txt head -n 1 awk -F -: {print $1-1;}
head -n 1 -q  leftanglebrc (git grep --name-only $0) git grep --name-only $0 sed s/OBJECT.//
head -n 1 -q `git grep --name-only $0` git grep --name-only $0 sed s/OBJECT.//
head -n 1 Bar.txt awk -F -= {print $2} xargs ./Foo.sh
head -n 1 Bar.txt xargs ./Foo.sh
head -n 1 file
head -n 1 file
head -n 1 file cut -c -1 -- -5 -2 -0 -0 -0 tail -n -+ -2 file
head -n 1 file cut -c -1 -- -5 tail -n -+ -2 file
head -n 1 file1 tail -n +2 file1 grep BLAH sed s/old/new/ sort -k 1,1
head -n 1 filename
head -n 1 sed s/\,/\n/g wc -l
head -n 1 your.data.file sed -e s/~/n/g
head -n 10 yourfile
head -n 158 file tail -n 73
head -n 199 $FILE tail -n 100 grep hello wc -l
head -n 199 $FILE tail -n 100 grep hello,  grep -v hello, world wc -l
head -n 2 backup.sh tail -n +3 backup.sh sort
head -n 2 file tail -n +3 file sort
head -n 3 SiteRank.csv sed s/,/,^"/ sed s/$/^"/
head -n 50000 FILENAME tail -1
head -n 532541 big-file
head -n 9 file sed -r s/(2nd|3rd)/\1 STREET/g
head -n `expr $a \* $b` m.txt expr $a * $b
head -n filename tail -1
head -q -n 1 * egrep -v ^ rightanglebrc .*(fragment|plasmid).*
head bag leftsquarebrc 12 rightsquarebrc .txt
head file leftsquarebrc 1234 rightsquarebrc 
head tail
head}
hello
hello
hello
hello
hello mary , my name is mary too .
hello word hello again
hello world
hello world
hello worldn
hello2
hello2 cmd
hello\nworld
helloworld
help $@
help .
help call
help exit
help for
help read
help read
help source
help source
help test
help times
help trap
heroku config:add aws_access_key= leftanglebrc your access key rightanglebrc  aws_secret_key= leftanglebrc your secret key rightanglebrc 
heroku config:set SECRET_KEY=my_secret_key
heroku logs -t grep router awk -f awk0
heroku pg:psql
heroku pgbackups:capture --expire grep -- --- rightanglebrc  awk {print $NF}
hexdump -C
hexdump -C /dev/urandom pv -q -L 1200
hexdump -C grep -w 0d
hexdump -C yourscript.sh
hexdump -e   leftsquarebrc iterations rightsquarebrc / leftsquarebrc byte_count rightsquarebrc  " leftsquarebrc format string rightsquarebrc "  filename
hexdump -e 16/1 "%02x " "\n" file.bin
hexdump -e 16/1 "%02x"
hexdump -n 4 -s 0x11C -e 4/1 "%x " "\n" myFile
hexdump -v -e /1 "%02x " $FILE
hexdump -v -e /1 "%02x " $FILE grep -F -b -o ff d8 
hexdump /dev/urandom tee out
hg clone http://hg.kublai.com/mercurial/extensions/rdiff
hg forget set:**.pro.user*
hg glog
hg incoming --bundle incoming.hg hg pull --update incoming.hg echo Go!
hg log --only-branch my_branch
hg log --rev rev1:rev2 --style mystyle
hg log --template {date} -l 1 path/to/file
hg log --template {date} -r 0:tip -l 1 README
hg log -G
hg log -r reverse(date("yyyy-mm-dd to yyyy-mm-dd"))
hg purge
hg push http://username:password@hg.myco.com/repo
hg revert --all --no-backup
hg serve --daemon
hg serve -d
hg status -m -n -0 xargs -0 rm
hg status -n 0 xargs -0 rm
hg status hg status --ignored awk ( $1 == "?" ) || ( $1 == "I") { print $2 } xargs rm -r
hg update echo Failure
hg update echo Success
hgtk.exe -R
hgx
hi
hi Normal ctermbg=NONE
hippo 9991
history
history -S
history -a
history -c
history -c -w
history -r
history -r file.txt
history -r ~/.term-rcfile
history -s $d
history -s whatever you want
history -w
history -w
history -w filename.sh
history 1 1 tr -s   cut -d   -f 3-
history 10 cut -c 8-
history awk ($2 ~ /^ leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc +$/) { ++a leftsquarebrc $2 rightsquarebrc ; t = length($2); if (t  rightanglebrc  l) l = t; } END { for (i in a) printf("%s%" (l - length(i) + 1) "s%5.2f%%\n", i, " ", (a leftsquarebrc i rightsquarebrc  * 100 / NR)); }
history awk {print $1-$HISTCMD, $0}
history awk {print $2} awk BEGIN {FS="|"} {print $1} sort uniq -c sort -r -n head -3 0
history cut -c 8-
history grep -C 5 ifconfig
history grep tail
history grep tail tail -3 head -2
history leftsquarebrc size++ rightsquarebrc  = inputBuffer
history on
history sed -n 2960,2966p
history sed s/^ */&\n/; :a; s/ \(.*\n\)/.\1/; ta; s/\n//
history sed s/^\( * leftsquarebrc 0-9 rightsquarebrc *\) */\1../
history vim
history vim
history vim -R
history?( * leftsquarebrc 0-9 rightsquarebrc *)
historyTemp-
history_file = $1
hive -e SELECT count(*) from pds_table
hookname user $user password $password
host $i grep -o -m 100  leftsquarebrc 0-9 rightsquarebrc \{1,3\}\. leftsquarebrc 0-9 rightsquarebrc \{1,3\}\. leftsquarebrc 0-9 rightsquarebrc \{1,3\}\. leftsquarebrc 0-9 rightsquarebrc \{1,3\}
host 204.152.191.5
host example.org awk /has address/ {print $4 }
host.name=ec2.123.3345.amazon.com
host:db:user:password
hostname $(cat /etc/hostname) cat /etc/hostname
hostname -i cut -d -. -f -1 -, -2 -, -3
hour
html =~ s/ test_routine ?
html2text
html2text -w -i -d -t -h 10000 $1 mv $1.tmp $1
htpasswd -b -c ~/temp/password admin test101
http-server  leftsquarebrc path rightsquarebrc   leftsquarebrc options rightsquarebrc 
http-server -p 8000
http://YOUR_BUCKET.s3.amazonaws.com/
http://build.chromium.org/cgi-bin/svn-log?url=http://src.chromium.org/svn//trunk/src
http://cdn.sstatic.net/stackoverflow/img/sprites.png
http://cli.learncodethehardway.org/book/cli-crash-coursech5.html#x10-300005
http://disqus.com/embed/comments/?f=cnn
http://linuxcommand.org/man_pages/dos2unix1.html
http://myapp.herokuapp.com/{guid}
http://pastebin.com/api_public.php
http://s73.domain.com/?action=uploadfiles
http://server:7997
http://someserver/somelink
http://someserver/somelink
http://tldp.org/LDP/abs/html/string-manipulation.html
http://web.archive.org/web/*/http://shellrevealed.com
http://www.domain.com/fonts/list/style/home words/10000
http://www.openssl.org/docs/apps/req.html#EXAMPLES
http://www.w3.org/2001/XMLSchema.xsd
http://www.youtube.com/watch?v=g34B-YOaC7c&ob=av2e
http://your_server_url:8080/manager/reload?path=/your_app_context
httpry -o -t -h -e -r -a -r -g -s -h -e -r -e awk {print $7}
https://github.com/msabramo/ren-regexp/blob/master/ren-regexp.pl
https://github.com/username/repositoryname
https://raw.github.com/msabramo/ren-regexp/master/ren-regexp.pl
https://servername
https://www.google.com/search?q=%27foo%27
hunspell -L -H ./text.xml ./awko ./output.xml
hxselect .c
i
i
i
i --help
i --help less cat
i --help text2wave -o ml-$i.wav
i --help text2wave -o ml.wav
i C:/users/user/desktop/copy_command.txt
i my.log grep -w $line wc -l
i r*10
i rightsquarebrc  = $line
i rightsquarebrc =value2
i rightsquarebrc }
i rightsquarebrc }
i rightsquarebrc }
i++
i++ mv $f ${f%/*}/pic${i}
i++ read -r program
i4blt -A -l -v $VENDOR -p $PRODUCT
iTunes
i_*.txt
i_*.txt
ibeacon scan -b ./python.py
ibeacon scan -b python python.py
iconv -c -f WINDOWS-1256 -t utf-8 problem.srt -o correct.srt
iconv -c -f cp1255 -t utf8 somefile awk ...
iconv -f ISO-8859-1 -t UTF-8 filename.txt
iconv -f LATIN1 -t UTF8
iconv -f UTF-8 -t UTF-16LE input
iconv -f utf-16 -t utf-8 sed -e expr iconv -f utf-8 -t utf-16
iconv -f utf-16be -t utf-8  leftsquarebrc input-file rightsquarebrc 
iconv -f utf-8 -t CP1252 a.txt
iconv -f utf-8 -t ascii//translit
iconv -f utf-8 -t utf-16 UTF-8-FILE dd conv=swab
iconv -f utf16 -t utf8
iconv -f windows-1252 -t UTF-8 import.csv -o new_import.csv
id $i echo $?
id -G -n username grep \bgroupname\b
id -g
id -u -n
id1,id2,id3,id1,id81,id13
id3v2 -l $FILE sed -n /^TCON/s/^.*: //p sed s/ (.*//
id:1:respawn:/var/tmp/server.sh
identify *.mkv *.avi
identify -f -o -r -m -a -t % leftsquarebrc exif:orientation rightsquarebrc  image_file.jpg
identify -f -o -r -m -a -t %w %h yourImage.png
ideviceinfo grep -i DeviceName
ie.visible = $true
if  leftsquarebrc  $(id -u) != 0  rightsquarebrc ; then echo You need root permission for installing programs. 1 rightanglebrc &2; exit 1; fi id -u
if leftsquarebrc f $PIDFILE rightsquarebrc 
if: Expression Syntax
ifconfig -a awk -v -R -S -= $1~/bond0:oamA/
ifconfig -a sed -n s/^\( leftsquarebrc ^  rightsquarebrc \+\).*/"\1"/p paste -s -d ,
ifconfig -a sed -r -f parse.sed
ifconfig awk -F  leftsquarebrc :  rightsquarebrc + /inet addr:/ { if ($4 != "127.0.0.1") print $4 }
ifconfig awk -F -: /RX bytes/{print $2+0}
ifconfig awk -F -: /inet addr/&&!/127.0.0.1/{split($2,_," ");print _ leftsquarebrc 1 rightsquarebrc }
ifconfig awk -v RS=nn { for (i=1; i leftanglebrc =NF; i++) if ($i == "inet" && $(i+1) ~ /^addr:/) address = substr($(i+1), 6); if (address != "127.0.0.1") printf "%s\t%s\n", $1, address }
ifconfig awk BEGIN { FS = "\n"; RS = "" } { print $1 $2 } sed -e s/ .*inet addr:/,/ -e s/ .*//
ifconfig en0 grep inet grep -v inet6
ifconfig en0 grep inet grep -v inet6 awk {print $2}
ifconfig en1 awk { print $2} grep -E -o ( leftsquarebrc 0-9 rightsquarebrc {1,3} leftsquarebrc . rightsquarebrc ){3} leftsquarebrc 0-9 rightsquarebrc {1,3}
ifconfig eth0 awk /inet addr/{print $13 } FS=:| 
ifconfig eth0 grep -i inet addr:
ifconfig eth0 grep inet addr cut -d : -f 2 cut -d   -f 1 sed -i s/MYIP=.*/MYIP=$ip/g foo.cnf
ifconfig eth0 sed -r -n s/inet addr:(( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}).*//p sed s/^ leftsquarebrc      rightsquarebrc *//;s/ leftsquarebrc      rightsquarebrc *$//
ifconfig eth0 sed -r -n s/inet addr:(( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}).*/\1/p sed s/^ leftsquarebrc  \t rightsquarebrc *//;s/ leftsquarebrc  \t rightsquarebrc *$//
ifconfig eth0 sed -r -n s/inet addr:(( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}).*/\1/p sed s/^ leftsquarebrc  \t rightsquarebrc *//;s/ leftsquarebrc  \t rightsquarebrc *$//
ifconfig eth0 tr -s   awk /inet addr/{print $4 } FS=:| 
ifconfig eth0 tr :   awk /inet addr/{ print $3 }
ifconfig eth0 | sed -rn 's/inet addr:(( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}).*/x01/p' | sed 's/^ leftsquarebrc  t rightsquarebrc *//;s/ leftsquarebrc  t rightsquarebrc *$//'
ifconfig grep -o -P (? leftanglebrc =RX bytes:) leftsquarebrc 0-9 rightsquarebrc *
ifconfig grep -o ^eth leftsquarebrc 0-9 rightsquarebrc \+
ifconfig grep 192.168.111 awk {print $2}
ifconfig grep en0
ifconfig grep inet  grep -v 127.0.0.1 cut -d -  -f 2
ifconfig grep inet addr: grep -v 127.0.0.1 cut -d -: -f 2 awk { print $1}
ifconfig grep inet addr: sed -e s/addr:/addr: /g awk {print $3}
ifstat -n awk NR rightanglebrc 2{print systime(),$0; fflush()} tee ifstat.log
ignore_bounce_errors_after = 2d
impdp sim/sim files=$(printf '%s\n' /${TMP_DIR}/*0000000221*.dbf | paste -d, -s) printf %s\n /${TMP_DIR}/*0000000221*.dbf paste -d -, -s
import -w -i -n -d -o -w root -c -r -o -p 200x300+100+15 -q -u -a -l -i -t -y 100 $(date +%Y%m%d-%H%M%S).png date +%Y%m%d-%H%M%S
import java.io.*
import os
import readline
import subprocess
in_array /home/backup ${exclude_dirs leftsquarebrc @ rightsquarebrc }
include $(wildcard $(dirname $(lastword $(MAKEFILE_LIST)))/*.make) wildcard $(dirname $(lastword $(MAKEFILE_LIST)))/*.make dirname $(lastword $(MAKEFILE_LIST)) lastword $(MAKEFILE_LIST) MAKEFILE_LIST
include $(wildcard *.make) wildcard *.make
include /etc/ld.so.conf.d/*.conf
include you_conf_path/my_new_config.conf
ind3 .....
indent -k -r -i 8 *.c
indexer --config /usr/local/etc/sphinx.conf --all --rotate
inetcpl.cpl
info -O gawk
info bash Basic Shell Features Shell Expansions Filename Expansion Pattern Matching
info body unknown
info date
info find
info gcc --index-search funroll-loops
info gcc option index O
info gettext
info gettext Variable Index
info ls
infocmp ansi
infokey
inotifywait --exclude .(swp|~) -q -q -r -e modify _source make
inotifywait --format %f -e create /var/www/media2net/torrent
inotifywait --monitor --format %f --event move --event create /root
inotifywait -e MOVED_TO -e CLOSE_WRITE -m -r testd/ grep --line-buffered -e MOVED_TO -e CLOSE_WRITE read d e f ./script.pl $f
inotifywait -e close_write myfile.py ./myfile.py
inotifywait -e modify /sys/class/net/eth0/carrier echo Change detected
inotifywait -m -r --format %w%f .......
inotifywait -m -r --format %w%f ....... php script.php
inotifywait -m /tmp grep --line-buffered /tmp/ CREATE read echo update mail -s /tmp updated john@example.com
inotifywait -q -m -e create --format %w%f /some/directory
inotifywait -q . kill $PID tail -F -n 0 *
inotifywait -r -e create /tmp/test1/ echo Change detected
inotifywait -r -m -e create /home/user1/*
inotifywatch -v -e access -e modify -t 60 -r /file/to/watch
input: aa.iso, output: bb.asm
inputstring
insmod k1.ko a=10,20,30,40
install -D -v /dev/null some/new/path/base-filename
install_repolist $gitRepos 0 mycallback
int *status
int *x = a
int TempSim=60
int arrayLength = args.length / x
int status
invoke-rc.d tomcat stop true
ios-sim launch ...
iostat -c awk /^ /{print $4}
iostat -x 1 -m awk /sda/ { print $6, $7}
iostat -x 3 6 awk /sda/ { print $11, $12}
iostat -x 3 awk -v max=10 /sda/ { print $11, $12; max++ } NR  rightanglebrc  max { exit } 
iostat -x 3 awk /sda/ { print $11, $12; fflush(stdout) }
iostat awk NR==3 { print $5 }
ip -o addr awk /1.2.3.4/{print $2}
ip = $_POST leftsquarebrc ip_addr rightsquarebrc 
ip addr awk /inet/ && /wlan0/{sub(/\/.*$/,"",$2); print $2}
ip addr grep inet grep wlan0 awk -F -  {print $2} sed -e s/\/.*$//
ip addr show dev eth0 awk $1=="inet" {print $2} cut -f 1 -d /
ip addr show dev eth0 sed -n -r s/.*inet ( leftsquarebrc ^  rightsquarebrc +).*/\1/p
ip address 10.1.1.1 255.255.255.0
ip route get 8.8.8.8 awk { print $NF; exit }
ipconfig /all
ipconfig /all findstr Servers findstr %1
ipconfig /all findstr Servers findstr 1.1.1.1
ipconfig getifaddr en0
ipcs -m -b awk NR  rightanglebrc  3 { print $7 } paste -s -d -+ bc
ipcs -m -b awk NR  rightanglebrc  3 { sum += $7 } END { print sum }
ipcs -m -b tail +4 awk { sum += $7 } END { print sum }
iperf -c $server_ip -p $iperf_port -t $iperf_duration
iperf -c 10.0.0.1 -i 1 -t 100 grep -P -o  leftsquarebrc 0-9. rightsquarebrc *(?= Mbits/sec)
iptables -A OUTPUT -m state --state NEW -j LOG --log-prefix New connection: 
iptables -A OUTPUT ... -m time --timestart 13:00 --timestop 14:00 -j ACCEPT
iptables -L ... awk !/destination/{a leftsquarebrc $9 rightsquarebrc +=$2}END{for(item in a)printf("%s\tTotal bytes: %s\n",item,a leftsquarebrc item rightsquarebrc )}
iptables -L INPUT -v -n grep $i continnue
iptables -v -L awk {your awk commands here} mysql --user foo --password bar yourdatabasename
iptables ... awk BEGIN { base="192.168.1"; startrange=100; endrange=110 } NR  rightanglebrc  1 { a leftsquarebrc $9 rightsquarebrc  += $2} END {for (i=startrange; i leftanglebrc =endrange; i++) {ip = base "." i; if (! a leftsquarebrc ip rightsquarebrc ) a leftsquarebrc ip rightsquarebrc  = 0; print ip, a leftsquarebrc ip rightsquarebrc }}
iptables-restore
irb -r -o -p -e -n -- -u -r -i
is this his pig
is_dir: *( leftsquarebrc ^, rightsquarebrc *),
isabelleann86@yahoo.com:nathan09
isql -U -u -s -e -r -S -s -e -r -v -e -r -P -p -a -s -s -w -o -r -d -i -m -y -. -s -q -l -o -r -e -s -u -l -t -s -. -c -s -v
isql -U username -P password -S servername -i Inputscript.name -o outputfile.name
isql -i -n -p -u -t test.sql
iterateIP 10.4
iw dev wlan0 station dump grep -P -o (? leftanglebrc =Station\s|signal avg:\s) leftsquarebrc ^\s rightsquarebrc *
iw dev wlan0 station dump grep -P -o (Station\s|signal avg:\s)\K leftsquarebrc ^\s rightsquarebrc *
iwatch -r -x \.git -t django\.po -c echo git pull &amp;&amp; whoami -e modify ./myapplication/locale/
iwconfig wlan0 grep ESSID: sed s/.*ESSID:"(.*)".*/1/
iwconfig wlan0 grep ESSID: sed s/.*ESSID:"(.*)".*/1/
j = $j * a leftsquarebrc FNR rightsquarebrc  leftsquarebrc j rightsquarebrc 
j).txt
j2re.exe /s /v/qn INSTALLDIR="C:Program FilesJRE"
jar -c -f yourfile.zip yourfolder
jar cf test.jar com
jar cfve file.jar Main Main.class Main$1.class Main$2.class
jar cvf nameOfMyTheme.jar YourClass.class
java
java  leftsquarebrc -options rightsquarebrc  -j -a -r jarfile  leftsquarebrc args... rightsquarebrc 
java $JAVA_OPTS -j -a -r analyse.jar $*
java -D -c -o -m -. -m -c -h -a -n -g -e -. -v -2 -. -c -3 -p -0 -. -c -f -g -. -x -m -l -= -/ -p -a -t -h -/ -t -o -/ -x -m -l -/ -f -i -l -e
java -D -c -o -m -. -m -c -h -a -n -g -e -. -v -2 -. -c -3 -p -0 -. -c -f -g -. -x -m -l -= -c -l -a -s -s -l -o -a -d -e -r -: -/ -M -E -T -A -- -I -N -F -/ -c -3 -p -0 -. -x -m -l
java -D -c -o -m -. -m -c -h -a -n -g -e -. -v -2 -. -c -3 -p -0 -. -c -f -g -. -x -m -l -= -c -l -a -s -s -l -o -a -d -e -r -: -/ -c -3 -p -0 -- -c -o -n -f -i -g -. -x -m -l
java -D -c -o -n -f -i -g -D -i -r -= -% -~ -d -p -0 ...
java -D -f -i -l -e -. -e -n -c -o -d -i -n -g -= -I -B -M -8 -5 -0 Test
java -D -t -a -g -= -p -r -o -c -e -s -s -1 -j -a -r ....
java -D -t -e -s -t -= -t -r -u -e -j -a -r myApplication.jar
java -D -u -n -i -q -u -e -n -a -m -e -= -1 test
java -X -X -: -+ -N -o -S -u -c -h -O -p -t -i -o -n -v -e -r -s -i -o -n
java -X -X -: -+ -R -e -d -u -c -e -I -n -i -t -i -a -l -C -a -r -d -M -a -r -k -s -v -e -r -s -i -o -n
java -X -m -s -$ -r -a -m -M
java -X -m -s -1 -2 -8 -M
java -X -m -x -1 -0 -2 -4 -m weka.classifiers.trees.J48 -t data.arff -i -k -d J48-data.model J48-data.out
java -X -m -x -1 -6 -g -c -p .:lib/* edu.cuny.util.VectorToInstancesConverter train HandednessJ48 SELECT * FROM collection1.Session1 WHERE Subj_Id!=402 and Subj_Id not in ( select Subj_id from collection1.Session2) AND Subj_Id IN ( SELECT Subj_Id FROM collection1.userdata WHERE 'DominantHand' = 'l' OR 'DominantHand' = 'r') 12 J48
java -X -m -x -1 -6 -g -c -p .:lib/* edu.cuny.util.VectorToInstancesConverter train HandednessJ48 SELECT * FROM collection1.Session1 WHERE Subj_Id!=402 and Subj_Id not in ( select Subj_id from collection1.Session2) AND Subj_Id IN ( SELECT Subj_Id FROM collection1.userdata WHERE 'DominantHand' = 'l' OR 'DominantHand' = 'r') 12 J48
java -X -m -x -9 -0 -0 -0 -m -D -t -o -d -a -y -_ -n -i -x -= -2 -0 -1 -2 -1 -1 -2 -8 -c -p /usr/lib/hadoop/conf com.paypal.risk.ars.linking.task_fw.BaseRunnableProcess tee /dev/tty
java -c -l -a -s -s -p -a -t -h
java -c -l -a -s -s -p -a -t -h . abc.jar xyz.jar peersim.Simulator example1.txt
java -c -l -a -s -s -p -a -t -h . myjar.jar lib/referenced-class.jar my.package.MainClass
java -c -l -a -s -s -p -a -t -h . path/to/yourlib.jar ClassWithMain
java -c -l -a -s -s -p -a -t -h . path/to/yourlib.jar your.package.path.ClassWithMain
java -c -l -a -s -s -p -a -t -h .:path/to/yourlib.jar your.package.path.ClassWithMain
java -c -l -a -s -s -p -a -t -h /path/to/some.jar:/path/to/another.jar:/home/pathToFolderWithResultsOfCompilation full.name.of.your.Java
java -c -l -a -s -s -p -a -t -h /xyz/root/bin:/xyz/root/mail.jar main.Main
java -c -l -a -s -s -p -a -t -h /your-weka-path/weka.jar weka.classifiers.trees.J48 -t data/weather.arff -i
java -c -l -a -s -s -p -a -t -h C:MyProjectclasses C:MyProjectlibutility.jar my.package.MyFile
java -c -l -a -s -s -p -a -t -h D:ActivityOneclasses com.wat.sampleapp.StudentMasterList
java -c -l -a -s -s -p -a -t -h bin mail.jar main.Main
java -c -l -a -s -s -p -a -t -h bin:lib/* FunctionalTests.TestRunner
java -c -l -a -s -s -p -a -t -h bin:mail.jar main.Main
java -c -l -i -e -n -t -c -l -a -s -s -p -a -t -h ojdbc14.jar lipstikLF-1.1.jar swing-layout.jar smt.jar Main.GUI.SmRun rimrim
java -c -p
java -c -p
java -c -p !AXIS2_CLASS_PATH! ClientJava --xxx !changeme!
java -c -p !AXIS2_CLASS_PATH! ClientJava --xxx ^!changeme^!
java -c -p $(dirname $0) rgb2hexConv $1 $2 $3 dirname $0
java -c -p $LIB/*
java -c -p $LIB/*
java -c -p %GROOVY_HOME%/embeddable/groovy-all-2.1.7.jar
java -c -p %GROOVY_HOME%/embeddable/groovy-all-2.1.7.jar:. Hello Luke Skywalker
java -c -p . C:UsersBrandonDownloadscommons-io-2.4* Login
java -c -p . EXT.jar driver
java -c -p . FileManagement.Main
java -c -p . First
java -c -p . Main
java -c -p . Main $@
java -c -p . ch01.ts.TimeServerPublisher
java -c -p . cs2.jar CB
java -c -p . cs2.jar CB
java -c -p . google-json-1.5gson-1.5.jar Test
java -c -p . mail.jar Hello
java -c -p . mail.jar myFile
java -c -p ./bin com.osama.GHide.EnteringPoint
java -c -p ./com/ug_ugbapi-all.jar:. com.QuoteTester $1
java -c -p ./lib/* ./bin com.foo.MyJavaClass
java -c -p ./src com.osama.GHide.EnteringPoint
java -c -p ./src:* MainClass
java -c -p ./src:./jars/* MainClass
java -c -p ./src:./jars/* com.mypackage.MainClass
java -c -p ./weka.jar weka.classifiers.bayes.NaiveBayes -t iris.arff -i
java -c -p ./weka.jar weka.classifiers.trees.J48 -t /data/iris.ARFF
java -c -p ./weka.jar weka.classifiers.trees.J48 -t data/iris.ARFF
java -c -p .: C:Program Filesjbdevstudio4studioplugins* org.testng.TestNG testng.xml
java -c -p .:EXT.jar driver
java -c -p .:extern/Hello.jar Tool
java -c -p .:libs/bcprov-jdk15on-150.jar fcrypt
java -c -p .:mysql-connector-java-5.1.24-bin.jar Sync_DB_RegCheck
java -c -p .:path_to_jar1.jar:path_to_jar2.jar Example
java -c -p .:swing-layout-1.0.4.jar StartFrame
java -c -p .;.\common.jar -D -c -o -n -t -e -x -t -= -a -t -e -s -t -1 -D -r -e -s -o -u -r -c -e -p -a -t -h -= -. DW_Install
java -c -p .;libs/bcprov-jdk15on-150.jar fcrypt
java -c -p .minecraft/bin/* -D -j -a -v -a -. -l -i -b -r -a -r -y -. -p -a -t -h -= -. -m -i -n -e -c -r -a -f -t -/ -b -i -n -/ -n -a -t -i -v -e -s -/ net.minecraft.client.Minecraft username login id
java -c -p /export/home/alun/jpsgcs/ CMorgansToTheta $filestem_$i.INPUT.par $filestem_$i.THETA.par
java -c -p /home/Prasanna/java/classes com.prasanna.udp.UDPServer
java -c -p /home/Prasanna/java/classes:/foo/bar/somelib.jar com.prasanna.udp.UDPServer
java -c -p /home/bram/Downloads/jmagick-6.6.9.jar HelloWorldApp
java -c -p /home/me/somepath/file.jar ... -s -o -m -e -f -l -a -g -  -s -o -m -e -v -a -l -u -e
java -c -p /home/scripts com.util.Hello
java -c -p /home/shbash6/astyanax/astyanax-examples/build/libs/*:/home/shbash6/astyanax/astyanax-cassandra/build/libs/*:/home/shbash6/astyanax/astyanax-core/build/libs/*:/home/shbash6/astyanax/astyanax-thrift/build/libs/* com.netflix.astyanax.examples.AstClient
java -c -p /opt/my_dir/class.method  leftsquarebrc parameter rightsquarebrc 
java -c -p /opt/my_dir/class.method  leftsquarebrc parameter rightsquarebrc 
java -c -p /path/to/classes com.foo.Test
java -c -p X.jar . Q
java -c -p X.jar:. Q
java -c -p a.jar:b.jar:c.jar:./src MainClass
java -c -p aspose-cells.jar:aspose-words.jar:aspose-slides.jar:. ConvertToPdf
java -c -p averageAmpCov/src averageAmpCov
java -c -p bin a.b.c.d.MyClass
java -c -p bin a.b.c.d.MyClass $*
java -c -p bin main.Main
java -c -p bin pathtolucene.jar com.brm.main.Demo2
java -c -p bin:path/to/lucene.jar com.brm.main.Demo2
java -c -p jarfile.jar . test
java -c -p jarfile.jar test
java -c -p jarfile.jar:. test
java -c -p karel.jar CollectNewspaperKarel.class CollectNewspaperKarel
java -c -p karel.jar CollectNewspaperKarel.class stanford.karel.Karel code=CollectNewspaperKarel
java -c -p karel.jar:CollectNewspaperKarel.class CollectNewspaperKarel
java -c -p karel.jar:CollectNewspaperKarel.class stanford.karel.Karel code=CollectNewspaperKarel
java -c -p lib/junit.jar sw.jar org.junit.runner.JUnitCore uoa.di.ys11.hw2.TestSmithWaterman
java -c -p libs/* com.mypackage.MyProgram
java -c -p myapp.jar
java -c -p nasa-top-secret.jar gov.nasa.RocketToMoon grep -v codehaus
java -c -p saxon9he.jar net.sf.saxon.Query -s -: -i -n -p -u -t -. -x -m -l -q -s -: -/ -a -/ -b - leftsquarebrc  -@ -i -d -= -x - rightsquarebrc  -o -: -r -e -s -u -l -t -s -. -x -m -l
java -c -p startup.jar -n -o -S -p -l -a -s -h -d -a -t -a D:SourceMyProjectworkspace -a -p -p -l -i -c -a -t -i -o -n org.eclipse.jdt.apt.core.aptBuild
java -c -p weka.jar weka.classifiers.functions.MultilayerPerceptron
java -c -p xmlutility.jar com.abc.util.XmlUtility input.xml output.xml //name/text() JAMES
java -c -p xxx.jar YourProgram
java -c -p your-classpath-dependencies-here -j -a -r hello.jar arg1 arg2
java -c -p {name_of_jar} {name_of_class} {name_of_csv}
java -j -a -r $CreateSequenceDictionary R=$reference O=output
java -j -a -r ./knowledge-generator.jar
java -j -a -r ./path/to/signapk.jar nameof.apk
java -j -a -r /opt/myapp/myapp.jar
java -j -a -r Ares.jar
java -j -a -r Ares.jar
java -j -a -r C:Program Fileseclipsepluginsorg.eclipse.jdt.core_3.5.2.v_981_R35x.jar test.java
java -j -a -r Main.jar
java -j -a -r SupplierControl.jar
java -j -a -r Test.jar C:\test\config.properties 10 100 2 TABLES:TABLE1 TABLES:TABLE2 TABLES:TABLE3
java -j -a -r YourJarFile.jar
java -j -a -r `find / -type f -name "R*.jar" -printf '%T@ %p\n' | sort -k 1nr | sed 's/^ leftsquarebrc ^  rightsquarebrc * //' | head -n 1` -d -e -b -u -g find / -type f -name R*.jar -printf %T@ %p\n sort -k 1nr sed s/^ leftsquarebrc ^  rightsquarebrc * // head -n 1
java -j -a -r `ls my-jar*.jar` ls my-jar*.jar
java -j -a -r batik-ttf2svg.jar myfont.ttf -o myfont.svg
java -j -a -r bfg.jar --replace-text replacements.txt my-repo.git
java -j -a -r bfg.jar -f -i *.php --replace-text passwords.txt my-repo.git
java -j -a -r biz.aQute.bnd.jar
java -j -a -r check_jmx.jar -U service:jmx:rmi://127.0.0.1/jndi/rmi://127.0.0.1:1090/jmxconnector --username admin --password admin -O jboss.system:type=ServerInfo -A FreeMemory
java -j -a -r deploy.jar -f ${basenames leftsquarebrc @ rightsquarebrc } -e $env
java -j -a -r dist/compiled_project.jar $(cat q1.txt) cat q1.txt
java -j -a -r ecj.jar -c -l -a -s -s -p -a -t -h rt.jar A.java
java -j -a -r examples/appserver/start.jar
java -j -a -r first.jar java -j -a -r second.jar
java -j -a -r hello.jar
java -j -a -r jarfile.jar
java -j -a -r jarfile.jar
java -j -a -r java-cup-11a.jar -p -a -r -s -e -r mj -d -u -m -p src/mjparser/mj.cup
java -j -a -r jenkins-cli.jar cancel-quiet-down
java -j -a -r jenkins-cli.jar quiet-down
java -j -a -r jenkins.war --httpPort 9090
java -j -a -r jenkins.war --httpsPort 9090
java -j -a -r js.jar app-prod.js
java -j -a -r names.jar -o output/alphabetized/ ${F}
java -j -a -r org.eclipse.jdt.core_3.4.0 -c -l -a -s -s -p -a -t -h rt.jar A.java
java -j -a -r program.jar $1 $2 $3
java -j -a -r program.jar $@
java -j -a -r signapk.jar nameof.apk
java -j -a -r tools/PlayGame.jar tools/maps/8planets/map1.txt python BullyBot.py python MinMaxBot.py parallel
java -j -a -r tools/PlayGame.jar tools/maps/8planets/map1.txt python BullyBot.py python MinMaxBot.py parallel python tools/visualizer/visualize_locally.py
java -j -a -r tools/PlayGame.jar tools/maps/8planets/map1.txt python BullyBot.py python MinMaxBot.py parallel python tools/visualizer/visualize_locally.py
java -j -a -r tools/PlayGame.jar tools/maps/8planets/map1.txt python BullyBot.py python MinMaxBot.py parallel python tools/visualizer/visualize_locally.py
java -j -a -r {name_of_jar} {name_of_csv}
java -j -a -r ~/Downloads/simian-2.3.35/bin/simian-2.3.35.jar files $(find ....) find ....
java -j -a -r ~/Downloads/simian-2.3.35/bin/simian-2.3.35.jar files ~/Classes/**/*
java AddThree
java CmdArgsTest s*
java CmdArgsTest s*
java CmdArgsTest s*
java CmdArgsTest s*
java EchoServer tail -f input.txt
java Hello  leftanglebrc  input.txt  rightanglebrc  output.txt
java Java_Program
java Java_Program
java Java_Program java Java_Program_2
java Main
java Main $PARAM01 $PARAM02
java MyApp split -b -5 -0 -0 -k out.log
java MyClass 1 2 3 4 5
java MyCode Hello World!
java MyFile some&&argument some-other-argument anArgWithoutQuotes
java NameOfClassWithMainMethod
java One.Test
java Program
java SupplierControl.jar
java Test.java
java TestConnection www.google.com&test
java Tool -c -p .:extern/Hello.jar
java YourJavaBinary echo $?
java className ab|cd
java com.foo.Test
java com.learner.learner.Main
java com.myserver.Program $@
java javaprog myScript
java mipsim -v
java p1 echo $! p2
java simpletree.Program1Test
java ~/Documents/conifer/ctmc/SingleProteinModel.java -c -l -a -s -s -p -a -t -h /path/to/Users/
java-version
javac *.java
javac *.java
javac *.java
javac -c -l -a -s -s -p -a -t -h . app/Main.java
javac -c -l -a -s -s -p -a -t -h . app/Main.java other/Entry.java
javac -c -l -a -s -s -p -a -t -h ../equinox.jar:. Package2/Class2.java
javac -c -l -a -s -s -p -a -t -h .:/usr/share/tomcat7/servlet-api.jar src/com/example/*.java
javac -c -l -a -s -s -p -a -t -h /home/yourusername/dir /home/yourusername/dir/Measurement.java
javac -c -l -a -s -s -p -a -t -h dir Measurement.java
javac -c -p . google-gson-1.5gson-1.5.jar Test.java
javac -c -p . google-gson-1.5gson-1.5.jar anotherlibanotherlib.jar Test.java
javac -c -p . mail.jar Hello.java
javac -c -p /path/of/junit-4.1.jar awe/some/awesomeTest.java
javac -c -p /path/to/lib/jars/lwjgl.jar ...
javac -c -p C:devmvnrepolog4jlog4j1.2.16log4j-1.2.16.jar AppenderTester.java
javac -c -p c:pathtolibjarslwjgl.jar ...
javac -c -p cs2.jar CB
javac -c -p jar/*:. MyFile.java
javac -c -p jar/A.jar:jar/B.jar:jar/C.jar:jar/D.jar:. MyFile.java
javac -c -p path_to_jar1.jar:path_to_jar2.jar Example.java
javac -d ../cls -s -o -u -r -c -e -p -a -t -h ../src ../src/pkgs/project/MainPrj.java
javac -d /home/pathToFolderWithResultsOfCompilation -c -l -a -s -s -p -a -t -h /path/to/some.jar:/path/to/another.jar home/pathToFolderA/src/*.java home/pathToFolderB/gen-java/*.java
javac -d bin -c -p bin srcnetchrisdojoProgram.java
javac -d bin -c -p libs/joda-time-2.2.jar src/your/package/*.java
javac -d bin src/com/osama/GHide/*.java
javac -d com/abc/customers/ CustomerAddress.java Customer.java CustomerMain.java
javac -s -o -u -r -c -e -p -a -t -h /home/test/src -c -l -a -s -s -p -a -t -h "/home/test/jars/Library.jar" -d /home/test/build /home/test/src/File.java /home/test/src/dir/File2.java
javac @${lstf}
javac File.java less
javac Support/*.java Me/*.java Wrapers/*.java
javac UpdateStockHistory.java -c -p commons-configuration-1.6.jar
javac `find . -name '*.java'` find . -name *.java
javac com/util/Hello.java
javac dir1/*.java
javac file.java
javac foo.java tee output.txt
javac hex_to_dec.java
javac src/com/osama/GHide/*.java
javap -c -l -a -s -s -p -a -t -h Scope
javap -c -l -a -s -s -p -a -t -h Scope$Variable
javap my.package.MyClass
jc_hms $songtime
jcar Program
jdk-7u51-linux-i586.tar.gz
jdk-7u51-linux-x64.tar.gz
jenkins ALL = NOPASSWD: /path/to/script
jenkins:x:496:492:Jenkins Continuous Build server:/var/lib/jenkins:/bin/bash
jenkins:x:496:492:Jenkins Continuous Build server:/var/lib/jenkins:/bin/false
jeykll -w serve sass --watch style.scss:style.css
jeykll -w serve sass --watch style.scss:style.css
jhead -n -% -Y -% -m -% -d -- -% -H -% -M -% -S *.jpg
jira.home = /var/atlassian/application-data/jira
jmeter -J -k -e -r -b -e -r -o -s -_ -j -a -a -s -_ -a -p -p -l -i -c -a -t -i -o -n -= -t -e -s -t -a -p -p -n -t myscript.jmx -l myscript.jtl
jmeter -n -t C:***TestPlan.jmx -J -h -o -s -t -n -a -m -e -= -% -1
job_command
jobcounter++
jobisrunning sleep 15
jobs -l
jobs -p awk {print NR}
jobs -p kill $x
john:x:1000:100:John Doe:/home/john:/bin/bash
join  leftanglebrc ( leftsquarebrc first set of commands rightsquarebrc )  leftanglebrc ( leftsquarebrc second set of commands rightsquarebrc )  leftsquarebrc first set of commands rightsquarebrc   leftsquarebrc second set of commands rightsquarebrc 
join  leftanglebrc (cat xyx.txt | awk '{.........}' | sed 's/.../' | cut -d....)  leftanglebrc (cat abc.txt | awk '{.........}' | cut -d ... | sed 's/...../') cat xyx.txt awk {.........} sed s/.../ cut -d -. -. -. -. cat abc.txt awk {.........} cut -d ... sed s/...../
join  leftanglebrc (gunzip -c fileA.gz)  leftanglebrc (gunzip -c fileB.gz) gunzip -c fileA.gz gunzip -c fileB.gz
join  leftanglebrc (sed '/^ leftsquarebrc 0-9 rightsquarebrc *  leftsquarebrc 0-9 rightsquarebrc * *$/!d' input)  leftanglebrc (sed '/^ leftsquarebrc 0-9 rightsquarebrc *  leftsquarebrc 0-9 rightsquarebrc * *$/d' input) sed /^ leftsquarebrc 0-9 rightsquarebrc *  leftsquarebrc 0-9 rightsquarebrc * *$/!d input sed /^ leftsquarebrc 0-9 rightsquarebrc *  leftsquarebrc 0-9 rightsquarebrc * *$/d input
join  leftanglebrc (sort a)  leftanglebrc (sort b) sort a sort b awk { if ($2  leftanglebrc  $3) print $0; else print $1, $3, $2 }
join  leftanglebrc (sort ldapoutput)  leftanglebrc (sort file) sort ldapoutput sort file
join  leftanglebrc (sort lista)  leftanglebrc (sort listb) sort lista sort listb
join  leftanglebrc (sort temp)  leftanglebrc (sort temp2) sort temp sort temp2
join  leftanglebrc (sort test.1)  leftanglebrc (sort test.2) sort test.1 sort test.2
join --nocheck-order  leftanglebrc (sort -n file1)  leftanglebrc (sort -n file2) sort -n file1 sort -n file2 awk {if ($2  rightanglebrc = $4 && $2  leftanglebrc = $5 || $3  rightanglebrc = $4 && $3  leftanglebrc = $5 || $4  rightanglebrc = $2 && $4  leftanglebrc = $3 || $5  rightanglebrc = $2 && $5  leftanglebrc = $3) {print $1" "$4" "$5;}}
join -1 1 -2 1 -1 2 -2 2 -o 1.1,1.2,1.3,2.3 server7.txt server8.txt
join -1 1 -2 1 -1 2 -2 2 -o 1.1,1.2,1.3,2.3 server7.txt server8.txt join -1 1 -2 1 -1 2 -2 2 -o 1.1,1.2,1.3,1.4,2.3 server9.txt
join -1 1 -2 6  leftanglebrc (sed 's/^ leftsquarebrc 0-9 rightsquarebrc  /00&/;s/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  /0&/;' T1_01) T1_03 sed s/^ leftsquarebrc 0-9 rightsquarebrc  /00&/;s/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  /0&/; T1_01
join -1 1 -2 6  leftanglebrc (sed 's/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc ^0-9 rightsquarebrc /00&/;s/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc ^0-9 rightsquarebrc /0&/;' T1_01) T1_03 sed s/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc ^0-9 rightsquarebrc /00&/;s/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc ^0-9 rightsquarebrc /0&/; T1_01
join -1 2 -2 1  leftanglebrc (sort +1 -2 file1)  leftanglebrc (sort +0 -1 file2) sort +1 -2 file1 sort +0 -1 file2
join -1 2 -2 1 -o 1.1,1.2,2.2 table1.txt table2.txt
join -1 2 -2 1 file1 file2
join -1 2 -2 2 -o 1.1,2.1,0 -a 1 -a 2 -e NA  leftanglebrc (sort -k2b File1)  leftanglebrc (sort -k2b File2) sort -k -2 -b File1 sort -k -2 -b File2
join -1 2 -2 3 -o 2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,2.10,2.11,2.12,2.13,2.14,2.15,1.1  leftanglebrc (sort -bk2,2 genes_ncbi-gi.list.mod)  leftanglebrc (sort -bk3,3 blastoutput.tsv) sort -b -k -2 -, -2 genes_ncbi-gi.list.mod sort -b -k -3 -, -3 blastoutput.tsv
join -a 1  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
join -a 1 -a 2 -o 0,1.2,2.2 -e $t tmp1.txt tmp2.txt
join -a 1 -t -$ -T -A -B File1.txt.sorted File2.fasta.sorted
join -a 2 -t $t -2 2 -1 1 -o 2.1 1.2  leftanglebrc (sort gar1.txt)  leftanglebrc (sort -k 2,2 gar2.txt) sort gar1.txt sort -k 2,2 gar2.txt sed /\t$/ s/$/NONE/ uniq
join -e NaN -a 1 -a 2 -o 1.1 2.2 first second
join -j 1  leftanglebrc (sort file1.txt)  leftanglebrc (sort file2.txt) sort file1.txt sort file2.txt
join -j 1  leftanglebrc (sort file1.txt)  leftanglebrc (sort file2.txt) sort file1.txt sort file2.txt sort -n
join -o 1.1,2.2 -t -: -1 2 -2 1  leftanglebrc (awk '{print(NR":"$0)}' key_file | sort -k2,2 -t':')  leftanglebrc (sort -k1,1 -t':' key_values_file) awk {print(NR":"$0)} key_file sort -k -2 -, -2 -t -: sort -k -1 -, -1 -t -: key_values_file sort -k -1 -, -1 -t -: cut -f 2 -d -:
join -o 1.2,2.3,2.4,2.5,2.6,2.7,2.8  leftanglebrc (cat -n file1)  leftanglebrc (cat -n file2) cat -n file1 cat -n file2 column -t
join -t $t -a 1 -a 2 -1 1 -2 1 -e NULL -o 0,1.2,2.2 file1 file2
join -t -  -  -  -  ...
join -t -, -1 2 -2 1 -o 1.1, 1.2 File1 File2 xargs -I -x -x grep xx File1
join -t -, -1 2 -2 1 -o 1.1, 1.2, 1.3 File1 File2
join -t -, -o 1.1,1.2,2.3 -a 1 in1 in2
join -t -, -o 1.1,1.2,2.3 in1 in2
join -t -, -v 2 StatusResults_sign_DESeq2.csv StatusResults_edgeR_sign.csv
join -t -, in1 in2
join -t -: selection2.txt selection1.txt
join -t -| -1 2  leftanglebrc (sort -t'|' -k2 file1) file2 sort -t -| -k 2 file1
join -t -| file1.txt file2.txt
join -t 0 -v 2 file1 file2
join -t : /etc/passwd /etc/shadow cut -d -: -f -3 -- -7 -, -1 -, -8
join -t ; -1 1 -2 2 -o 2.1,2.2,1.2,2.3  leftanglebrc (sort file1)  leftanglebrc (sort -t \; -k2,2 file2) sort file1 sort -t ; -k -2 -, -2 file2
join -t ; -1 1 -2 2 -v 2 -o 2.1,2.2,1.2,2.3  leftanglebrc (sort file1)  leftanglebrc (sort -t \; -k2,2 file2) sort file1 sort -t ; -k -2 -, -2 file2 sed s/;;/;*WAS NOT FOUND*;/
join -v 1  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
join -v 1 -i -t -, -1 1 -2 1 -o 1.2 1.3 1.4 1.5  leftanglebrc (awk -F, '{print $1":"$3","$0}' f1.txt | sort)  leftanglebrc (awk -F, '{print $1":"$3","$0}' f2.txt | sort) awk -F -, {print $1":"$3","$0} f1.txt sort awk -F -, {print $1":"$3","$0} f2.txt sort
join -v 1 file1 file2
join -v 1 list1 list2
join -v 1 success.txt fail.txt
join -v 2  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2
join -v 2  leftanglebrc (tr ' ' '\n' ids)  leftanglebrc (cat -n infile) tr   \n ids cat -n infile cut -f 2 -d  
join -v 2 list1 list2
join file1 file2
join file1 file2 join file3
join file1.txt file2.txt
join fileA fileB join fileC
join file_B file_A awk {t=$1; $1=$2; $2=t; print}
join file{1,2}.txt
join list1 list2
jq (.plants.veggies leftsquarebrc  rightsquarebrc  | select(.section == "TUBERS") | .values) |= . +  leftsquarebrc {"type": "root", "tuber": "yam"} rightsquarebrc  veggies.json
jq -r "\(.name): \(.ratio)" infile
jq -r .results.elements leftsquarebrc  rightsquarebrc  | select(.name=="Lines").ratio input.json
jq -r to_entries|map("(.key)=(.value|tostring)")|. leftsquarebrc  rightsquarebrc  test.json
jq . + { "key4": "value4" }
jq . leftsquarebrc  rightsquarebrc  | "\(.id) \(.word)" jsonfile
jq . leftsquarebrc  rightsquarebrc  | "\(.id) \(.word)" jsonfile sed -e s/^.\(.*\).$/\1/
jq . | length /tmp/test.json
jq .Body
jq .LoadBalancerDescriptions leftsquarebrc  rightsquarebrc  | select((.AvailabilityZones leftsquarebrc  rightsquarebrc  | select(. == "us-east-1b")) == "us-east-1b") input_file
jq .imageHeight data.json
jq .imageHeight data.json
jq del(.key3)
jq map(. leftsquarebrc 0 rightsquarebrc )
jq select(.geo != null) all.json
jrebinjava -c -p binneo4j-desktop-1.9.4.jar org.neo4j.shell.StartClient
jruby -S rake db:migrate less
jsonDataaa = {"script":"#!/bin/bash \\n hello=$jj1 \\n echo $hello \\n echo $jj1 \\n echo $jj2 \\n for el1 in $jj3 \\n do \\n echo \\"$el1\\" \\n done \\n for el2 in $jj4 \\n do \\n echo \\"$el2\\" \\n done"}
jsonStr = {"script":"#!/bin/bash\\necho Hello world\\n"}
jython.sh test.j.py
k+1
kate `find . -name \*.txt -type f` find . -name *.txt -type f
kate `find . -type f` find . -type f
kate `find dir -type f` find dir -type f
kate,bob,ray
kdialog --passivepopup This is a notification 5
kdialog --textinputbox Output: -- -0 -. -1
kdiff3 source.c@@/main/branch/30 source.c
kernel /boot/vmlinuz-2.6.26-1-686 root=/dev/sda1 ro inotify=yes
key1 = valueA //A will be used as a key word.
keygen sort keystrip
keytool -g -e -n -k -e -y -v -k -e -y -s -t -o -r -e my-release-key.keystore -a -l -i -a -s alias_name -k -e -y -a -l -g RSA -k -e -y -s -i -z -e 2048 -v -a -l -i -d -i -t -y 10000
keytool -k -e -y -s -t -o -r -e $(echo ~/Desktop) echo ~/Desktop
keytool -k -e -y -s -t -o -r -e $HOME/Desktop
keytool -l -i -s -t -k -e -y -s -t -o -r -e myKeystore -s -t -o -r -e -p -a -s -s myPW
keytool -l -i -s -t -v -k -e -y -s -t -o -r -e mykeystore.p12 -s -t -o -r -e -t -y -p -e PKCS12 -s -t -o -r -e -p -a -s -s 123456
keytool ... cat /tmp/keytmp
keyword pkw1 id premt1
kill  leftsquarebrc pid rightsquarebrc 
kill $!
kill $$
kill $(pgrep -f $DAEMON | grep -v ^$$\$) pgrep -f $DAEMON grep -v ^$$$
kill $(pgrep -l ccpd | grep -v restartccpd | awk '{print $1}') pgrep -l ccpd grep -v restartccpd awk {print $1}
kill $(ps aux | grep ' leftsquarebrc p rightsquarebrc ython csp_build.py' | awk '{print $2}') ps aux grep  leftsquarebrc p rightsquarebrc ython csp_build.py awk {print $2}
kill $PID
kill %1
kill %1
kill %1
kill %1
kill %1 %2 %3 %4 %5 %6 %7 %8
kill -- -$ -( -p -s -  -- -o -  -p -g -i -d -= -  -$ -P -I -D -  -| -  -g -r -e -p -  -- -o -  - leftsquarebrc  -0 -- -9 - rightsquarebrc  -* -) ps -o pgid= $PID grep -o  leftsquarebrc 0-9 rightsquarebrc *
kill -0 $PID
kill -1 5 `echo ~/inotitfy.something.pid` echo ~/inotitfy.something.pid
kill -1 `cat /var/run/script.sh.pid` cat /var/run/script.sh.pid
kill -2 $( leftanglebrc /tmp/pidfile.txt)
kill -2 $(cat /tmp/pidfile.txt) cat /tmp/pidfile.txt
kill -9 $$
kill -9 $( leftanglebrc "$PIDFile")
kill -9 ${line leftsquarebrc 0 rightsquarebrc }
kill -9 ${line}
kill -9 -p -a -r -e -n -t -p -i -d
kill -9 `cat save_id.txt` cat save_id.txt
kill -9 `jps -v | grep file_name.jar | awk {'print $1'}` jps -v grep file_name.jar awk {print $1}
kill -9 `ps aux | grep  leftsquarebrc j rightsquarebrc ava | awk '{ print $2 }' | sort -nr | head -n 1` ps aux grep  leftsquarebrc j rightsquarebrc ava awk { print $2 } sort -n -r head -n 1
kill -9 `ps ux | grep Infinite.sh | awk -F\  -v pid=$$ 'pid != $2 {print $2}'` ps ux grep Infinite.sh awk -F -  -v pid=$$ pid != $2 {print $2}
kill -C -O -N -T  leftsquarebrc processid rightsquarebrc 
kill -H -U -P $(cat $pid) cat $pid
kill -H -U -P 12133
kill -H -U -P 1234
kill -I -N -T $$
kill -S -I -G -H -U -P $$
kill -S -I -G -I -N -T PID
kill -S -I -G -I -N -T processPIDHere
kill -S -I -G -K -I -L -L $$
kill -S -I -G -N -O PID
kill -S -I -G -U -S -R -1 pid
kill -T -S -T -P  leftsquarebrc processid rightsquarebrc 
kill -l
kill -n bash
kill -s SIGHUP $TOP_PID
kill -s SIGSTOP pid
kill PID
kill RTMIN+1 $pid_of_my_process
kill `cat /tmp/my_pid` cat /tmp/my_pid
kill `ps -e | grep dmn | awk '{print $1}'` ps -e grep dmn awk {print $1}
kill `ps -ef | grep dinesh | awk '{ print $2 }'` ps -e -f grep dinesh awk { print $2 }
kill `ps auxww | grep zsh | awk '{print $2}' | while read line; do echo "$RANDOM $line"; done | sort | cut -d ' ' -f 2 | head -n 1` ps auxww grep zsh awk {print $2} read line echo $RANDOM $line sort cut -d   -f 2 head -n 1
kill `ps ax | grep ' leftsquarebrc m rightsquarebrc eteor' | awk '{print $1}'` ps ax grep  leftsquarebrc m rightsquarebrc eteor awk {print $1}
kill `ps ax | grep -i PATTERN | awk '{ print $1 }'` ps ax grep -i PATTERN awk { print $1 }
kill `ps ax | grep fcgi | cut -f1 -d' ' | head -1` ps ax grep fcgi cut -f 1 -d -  head -1
kill `pstree -p 1002 | sed 's/(/\n(/g' | grep '(' | sed 's/(\(.*\)).*/\1/' | tr "\n" " "` pstree -p 1002 sed s/(/\n(/g grep ( sed s/(\(.*\)).*/\1/ tr n  
killall -9 monitor.sh
killall -9 php
killall -K -I -L -L nmzsh
killall -q synergys
killall -s SIGHUP bash
killall -u $(whoami) dropbox whoami
killall -u $USER dropbox
killall -u myusername dropbox
killall PROGRAM
killall Terminal
killall `basename -a /path/path/*` basename -a /path/path/*
killall dropbox
killall killme
killall php
killall php
killall sleepListener
killall sshd
kirim = echo "Field2 contains:  $2 "  rightanglebrc  /dev/ttyACM0
klArrowRight.gif /common/common/img/pictos/klArrowRight.gif 03/Dec/2012:00:00:00 127.0.0.1 03/Dec/2012:00:00:00 us 404
konqueror /tmp
konsole --hold -e bash -c cat  leftanglebrc (curl --silent -S http://mysite/num.txt) /dev/tty|tee /dev/tty|bc
konsole --workdir pwd -e bash -c grep -R -i -n -A 2 -B 2 --color=always -R "searchtext" * | less -R
konsole -e bash nameofyourscript.sh
ksh
ksh -x ./something
ksh argument.ksh wc -l
ksh: ./so2.sh: cannot execute  leftsquarebrc Not a directory rightsquarebrc 
kwcheck create
kwcheck disable UNINIT.STACK.ARRAY.MIGHT INFINITE_LOOP.LOCAL
kwcheck run -b buildspec.out
kwcheck set-status 2 --status ignore -c we want to ignore this
lallalalala babababab.
lallalalala blabla.com babababab hehehe.org.
lame $file $(basename "$file" .wav).mp3 basename $file .wav
lame -b 192 -h input.wav output.mp3
lame -h -V 0 $f tmp mv tmp $f
lame -h -V 0 $f tmp mv tmp $f
lame -m m greetings.aiff greetings.mp3
lame silence.wav silence.mp3
lassign $argv user password server usercommand
last
last -F grep -v still logged in cut -d   -f 1
last -a -n 100 grep ^cvc
last -i grep -P -o -m 1  leftsquarebrc 0-9. rightsquarebrc {7,15}
last -i head -n 1 awk {print $3}
last = !sh -c git log "-${1:-1}" HEAD
last awk NR leftanglebrc =10{print $1, $5, $6  rightanglebrc  $1".txt"}
last awk NR leftanglebrc =10{print $1, $5, $6}
last egrep -v support|reboot|shutdown
last grep -c $username
last grep -c $value
last grep logged in
lastAnn+1
lastlog grep ...
launchctl submit -l MyUniqueScript -p ROOT/script.sh -o ROOT/out.txt -e ROOT/err.txt -- ROOT/script.sh abc def ghi jkl
lc rightsquarebrc {2,17}
lcov ${LCOV_INPUT_FILES leftsquarebrc @ rightsquarebrc } -o ...
ldapmodify -h hostName -p 10389 -D uid=admin,ou=system -w ***** -a
ldd ./BIBusTKServerMain awk $3 ~ /^\.?\// {print $3}
ldd ./BIBusTKServerMain sed s/^.* = rightanglebrc  \( leftsquarebrc ^  rightsquarebrc *\) .*$/\1/
ldd /usr/lib/x86_64-linux-gnu/libmysqlclient.so
ldd /usr/lib/x86_64-linux-gnu/libmysqlclient.so grep boost
less $( ls ./mydir | tail -1) ls ./mydir tail -1
less -p regex file_name
less file:name.txt
let $VIM =~/.vim/
let COUNTER=COUNTER + 1
let LEFT=PWED $PWTIME
let LEFT=PWED-PWTIME
let P_CUST_ORDER_REF+=1
let a+=$b
let a=3 b=4 c=5
let arg  leftsquarebrc arg ... rightsquarebrc 
let b+=$number
let bmi=$total_weight/$total_height
let foo.=bar
let foo=foo.bar
let g:ctrlp_working_path_mode = 0
let g:slime_target = tmux
let i++
let num = (( 0 && 1 ))
let num_children=num_children-1
let sum+=$n echo $sum
let var=10**2
let x=5 test $x -l -t 10 echo x is : $x let x=$x+1
lets go
libnet-config --defines
libreoffice --convert-to xlsx my.xls --headless
libreoffice --invisible --convert-to pdf:writer_pdf_Export *.odt
libreoffice4.2 --headless --convert-to txt:text 2000.html
limit coredumpsize unlimited
line 3
line_1: This is line0
lines = `ls`.split ls
lipo $SDK_DIR/lib/$CONFIG-iphoneos/$BASELIBNAME $SDK_DIR/lib/$CONFIG-iphonesimulator/$BASELIBNAME -c -r -e -a -t -e -o -u -t -p -u -t $OUTLIB
liquibase --lots of parameters here
liquibase --lots of parameters here
liquibase --lots of parameters here
list
list
list
list_node the_head = { 0, NULL }
listall shuf head -n 1
ll -a /
ll grep pattern sed s/this/that/ xargs mpc
ll perl -l -n -e print $1 if /^.* leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc *\s+(.*\.sh)$/
ll perl -n -E say $1 if /^.* leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc *\s+(.*\.sh)$/
ll perl -n -e print if s/(.*)( leftsquarebrc 0-9 rightsquarebrc *: leftsquarebrc 0-9 rightsquarebrc * *)(.*\.sh)/$3/
ll perl -n -e print if s/^.* leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc *\s+(.*\.sh)$/$1/
lm == processor
ln --force --target-directory ~/staging ~/mirror/*
ln -f -s /etc/configuration/file.conf /etc/file.conf
ln -f -s /etc/configuration/nginx/nginx/app.conf /etc/nginx/sites-available/app
ln -f -s /etc/configuration/nginx/nginx/app.conf /etc/nginx/sites-enabled/
ln -s $(readlink -e "$2") $1/link readlink -e $2
ln -s $HOME/bin/rd.sh $HOME/bin/rd
ln -s $PWD $HOME/my link name with spaces
ln -s $PWD $HOME/my link name with spaces and this quote"
ln -s $PWD ~/my link name with spaces
ln -s -f $(readlink -f "$link") $link readlink -f $link
ln -s -f -v -n source target
ln -s -n -- $FILE_PATH $TEST_DIR/$FILE_NAME
ln -s -t /dir1 /dir2/file1
ln -s /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl ~/.rvm/bin/subl
ln -s /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
ln -s /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
ln -s /Applications/Sublime Text.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
ln -s /Applications/XAMPP/xamppfiles/bin/mysql /usr/bin/mysql
ln -s /etc/bash_completion.d/git git.bash
ln -s /full/path/to/a b
ln -s /full/path/to/executable/svn /usr/bin/svn
ln -s /full/path/to/the/previously/created/shellscript /usr/bin/somecommand
ln -s /home/grammin/testFiles/program1/important/ fileDir
ln -s /home/jake/doc/test/2000/something /home/jake/xxx
ln -s /home/user/Ubuntu One/htdocs/vhosts/vhost.local $VHOST
ln -s /opt/jdk/bin/java /usr/bin/java
ln -s /path/to/folder1/abc.txt /path/to/folder2//path/to/folder1/abc-something.txt
ln -s /path/to/framework/yiic /usr/bin/yiic
ln -s /path/to/your-script.sh /etc/rc5.d/S99my-custom-script.sh
ln -s /some/path/original /other/path/copy
ln -s /working/bin/cat /local/bin/cat
ln -s SOURCE TARGET
ln -s `canonical.bash foo` bar canonical.bash foo
ln -s `pwd`/current/app/webroot public_html pwd
ln -s `python -c "import os.path; print os.path.relpath('$target','$name')"` $name python -c import os.path; print os.path.relpath('$target','$name')
ln -s apps/my_fancy_app_v2.63.1 apps/my_fancy_app
ln -s data/* .
ln -s git-stuff/home/. leftsquarebrc !. rightsquarebrc * .
ln -s new current_tmp mv -T -f current_tmp current
ln -s originals/original.txt copies/copy.txt
ln -s rel_path_from_current_dir_to_link_target ...
ln -s script1.py script1
ln -s torbrowser/start-tor-browser ~/bin/torbrowser
ln -s your/dev/directory/ dev
ln -s ~/Dropbox/dotfiles/.vimrc .vimrc
ln -s ~/dotfiles/* ~
ln ../notes/linux.txt
ln /home/jake/doc/test/2000/something /home/jake/xxx
load data infile PATH_TO_FILE into table TABLE_NAME lines terminated by  
load minimal amounts of data from the input files and flush the output buffers more often
local  leftsquarebrc option rightsquarebrc  name leftsquarebrc =value rightsquarebrc  ...
local DF_Result=$( executeCommand "$1" ) executeCommand $1
local IFS=$1 local s=${@:2} printf %s $s
local IFS=$1 shift echo $*
local IFS=$n printf -v $1 %s\n%s ${!1} ${*:2}
local IFS=, set -- $@ return $(test -n "$4" -a -z "$5") test -n $4 -a -z $5
local OPTIND
local SITE=$1
local a b c=d e=f g
local c_bit_mins c_bit_maxs gamma_bit_mins gamma_bit_maxs
local file
local outPath=$( echo $fuName | sed "s/.*Lua\/\(.*\)/\1/" ) echo $fuName sed s/.*Lua/(.*)/1/
local pingResults=$(LANG=C ping -q -c10 "$gateway")
local rvm_ruby= %{$fg leftsquarebrc red rightsquarebrc %} leftsquarebrc $(~/.rvm/bin/rvm-prompt i v g s) rightsquarebrc %{$reset_color%} ~/.rvm/bin/rvm-prompt i v g s
local test return 1 echo $? testing
local x=${1##*255.}
localc --headless --convert-to csv:Text - txt - csv (StarCalc) *.xlsx
locale
locale
locale
locale -a
locale -a grep -q ^ja_JP echo enable any of the japanese locales first
locale charmap
locate *re*trict*
locate -b rhyth*
locate -i /home/sh/music/*.jpg
locate .conf less
locate /home/sh/.local/share/rhythmbox/rhyth*
locate /home/sh/music/*.jpg
locate /rhyth
locate 50local.policy xargs gvim
locate abcdef  grep 2
locate file.ext xargs xdg-open
locate foo sed s/bar/baz/  leftsquarebrc other-processing rightsquarebrc  xargs -n 1 cowsay
locate labra xargs -I -{ -} echo {} more arguments
locate labra xargs -I -{ -} scp {} masi@11.11.11:~/Desktop/
locate rhyth*
locate sqlldr
log --graph --pretty format:%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue) leftanglebrc %an rightanglebrc %Creset --abbrev-commit --date relative
log cd $NEW_PLACE log command.py --flag $FOO $LOTS $OF $OTHER $VARIABLES
log.txt:Name=abc Date=20140710
log1.log
log2c=3.0 rate=89.5039
logInfo 2 none Minecraft: $minecraftsize.$minecraftsized $minecraftunit
logName $2
log_file ~/mylogfile.log
logcat -v time -f /dev/kmsg cat /proc/kmsg
logcat -v time -f /dev/kmsg cat /proc/kmsg
logfiles.tar.gz
logger -i  leftanglebrc ( rsync --del -az -e 'ssh -i mycrt.crt' /home/gnutt/backup/ me@offisite:backup  rightanglebrc  /dev/null ) rsync --del -a -z -e ssh -i mycrt.crt /home/gnutt/backup/ me@offisite:backup
logger -p local0.notice -t MYPROGRAM -f /tmp/myprogram.log
logger -p local3.info -t myprogram What's up, doc?
logname
logout
lokesh = wait
lokesh == wait rightsquarebrc 
lol foo *lol* bar *foo* *bar*
long_running_process thing_to_happen_after
long_running_script_what_produdes_lines wc -l
lookup.pl
lp -o number-up=6 my_scaled_image_*.jpg
lpadmin -p PRINTER -U ${username}%${password} -v smb://SERVER -E
lpadmin -p PRINTER -v smb://$username:$password@SERVER -E
lpadmin -p PRINTER -v smb://alice:passw@rd@SERVER -E
lprun -f -o -r -m -a -t -= -c -s -v $srcLoc
lr-x------ 1 user user 64 2010-04-15 19:26 39
lrwxrwxrwx 1 root root 19 Mar 15 11:22 /var/test/info.domain2.com
lrwxrwxrwx 1 root root 19 Mar 15 11:22 /var/test/info.domain2.com
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls
ls  leftsquarebrc  leftsquarebrc :lower: rightsquarebrc  rightsquarebrc *
ls  leftsquarebrc  leftsquarebrc :lower: rightsquarebrc  rightsquarebrc *
ls  leftsquarebrc 0-9 rightsquarebrc *
ls  leftsquarebrc bd rightsquarebrc 
ls $( command-that-produces-dirname-containing-whitespace ) command-that-produces-dirname-containing-whitespace
ls $( echo CZ_VF__________BILL____.* | sed 's/ leftsquarebrc _ rightsquarebrc /?/g' ) echo CZ_VF__________BILL____.* sed s/ leftsquarebrc _ rightsquarebrc /?/g
ls $(grep /dev/sr0 /etc/mtab | cut "-d " -f2) grep /dev/sr0 /etc/mtab cut -d -  -f 2
ls $1 grep -o \\.sav wc -w
ls $AbsolutePath
ls $DIR
ls $HOME/Music/iTunes/iTunes Media/Audiobooks
ls $INPUT
ls $L
ls $LGNAME* wc -l
ls $PATH command1 command2
ls $PATH command1 command2
ls $PATH echo $PATH does not exist
ls $PATH set +e do-something-that-might-fail
ls $PATH true
ls $PWD/baz sed s_`ls -d ~|tr -d '\n'`_~_ ls -d ~ tr -d \n
ls ${=args}
ls ${prefix}*.text
ls ${splitFilePrefix}*.ts wc -l
ls %{rconvert $_ -r -e -s -i -z -e 128x128}
ls * leftsquarebrc $a1 rightsquarebrc  leftsquarebrc $a2 rightsquarebrc  leftsquarebrc $a3 rightsquarebrc * head -n 1 cut -f 1 -d -.
ls * parallel --colsep \. leftsquarebrc ^\. rightsquarebrc *$ mkdir ./{1.}
ls * parallel --colsep \. mkdir ./{1}
ls * parallel --extensionreplace %foo mkdir ./%foo
ls * rightsquarebrc .mp4 sed s/^\(.*\)_\(\ leftsquarebrc  leftsquarebrc 0-9_ rightsquarebrc * rightsquarebrc \)\.mp4$/mv & \2_\1.mp4/
ls * rightsquarebrc .mp4 sed s/^\(.*\)_\(\ leftsquarebrc  leftsquarebrc 0-9_ rightsquarebrc * rightsquarebrc \)\.mp4$/mv & \2_\1.mp4/ sh
ls * sort -n xargs -d \n grep hello
ls **/*.py **/*.html
ls *. leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
ls *. leftsquarebrc jJ rightsquarebrc  leftsquarebrc pP rightsquarebrc { leftsquarebrc eE rightsquarebrc ,} leftsquarebrc gG rightsquarebrc 
ls *.2 leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
ls *.csv sort -n xargs cat
ls *.extension xargs -n 1 tail -n +2
ls *.fas sort -V some_code
ls *.jar sort -t -- -k 2 -V -r
ls *.jpg read i svn move $i ../
ls *.jpg sed -e s/\..*// xargs -I X convert X.jpg whatever-options X-resized.jpg
ls *.jpg sed -i -e s~^PHO_~~ xargs -n 1 -i convert PHO_{} -r -e -s -i -z -e 90x90^  -gravity center -e -x -t -e -n -t 90x90 THUMB90_{}
ls *.jpg sort -V awk -F _ !a leftsquarebrc $1 FS $2 rightsquarebrc ++
ls *.log read fn grep -i -H create $fn tail -1
ls *.mp3 xargs -n 10 id3.sh
ls *.sh paste
ls *.sh read i mv $i ${i%.sh}.bash
ls *.sln xargs cygstart
ls *.tar xargs -n 1 tar -x -v -f
ls *.txt
ls *.txt cat file1.txt
ls *.txt read FILE echo mv $FILE ${FILE/.txt/`date +%Y%m%d.txt`}
ls *.txt read FILE mv $FILE ${FILE/.txt/`date +%Y%m%d.txt`}
ls *.txt tee /dev/tty txtlist.txt
ls *.txt xargs -I {} cp {} ../{}
ls *.zip awk -F -. -z -i -p {print "unzip "$0" -d "$1} sh
ls *.{1..1000}
ls *.{java,cpp}
ls *.{zip,rar}
ls *34 sed s/34/\*/g xargs -n 1 -I file mv file target_dir
ls *Exam* xargs open
ls *delayed*
ls *foo* grep foo.*foo xargs rm
ls *foo* sed -n 2p xargs rm
ls *foo* tail -n 1 xargs rm
ls *sql* tac sed 1,7d tr \012 \000 xargs -0 --no-run-if-empty rm
ls -- *.png
ls --color always
ls --color always aha
ls --color always grep ^ leftsquarebrc \ leftsquarebrc 01;32m
ls -1
ls -1
ls -1 $FOLDER xargs du
ls -1 $HTTPD_HOSTS-EN grep .conf sed s/.conf// echo -e $APACHE_ENABLED wc -1  leftsquarebrc  -n $APACHE_ENABLED  rightsquarebrc  echo $SPACER echo Apache enabled Sites: $APACHE_COUNT echo $APACHE_ENABLED echo $SPACER echo There are no detectable nor delectable WebSites In Sight Blackbeard
ls -1 * sort -n echo $i
ls -1 *.bin xargs strings -n 4 --radix d -f grep string awk {sub(/:/, ""); print $2 " " $1 " " $1".";} xargs -l 1 split -b rm *.aa
ls -1 *.fastq awk -F -_ $8 == "R1" {system("cat " $0 " rightanglebrc  rightanglebrc " $1 "_R1.out")}
ls -1 *.flv sort -n -k -1 -. -2
ls -1 *.gz xargs -n 1 echo
ls -1 *.h perl -p -l -n -e $_="    ".$_." \\";
ls -1 *.properties wc -l
ls -1 *.yml.sample sed s%(.*).sample%mv & 1% sh
ls -1 *.yml.sample sed s%(.*).yml.sample%mv & 1.yml% sh
ls -1 *Mcmm*txt *Mmmm*txt awk -F -_ -| -\ -. {print $(NF-1)}
ls -1 *_* awk {fn=substr($0,1,7);a leftsquarebrc fn rightsquarebrc =a leftsquarebrc fn rightsquarebrc " "substr($0,8)}END{for(i in a) print i,a leftsquarebrc i rightsquarebrc }
ls -1 -A -p -l /home/$DIR grep -v /$ awk -v user=${usrnm} $3==user{print}{}
ls -1 -F -b -A /home
ls -1 -N -- ${source_dir} grep -P ^Q${source_base}.Ed{${fragment_digits}}Q.${source_extensions}E$
ls -1 -d -t -r /your/dir/{*,.*} tail -1 xargs less
ls -1 -h -s $dir
ls -1 -h -s $dir awk {print $2" "$1}
ls -1 -s --block-size 1 $dir
ls -1 -t -r $(cat filename.txt) cat filename.txt tail -1
ls -1 -t _system*.log xargs -d -n cat
ls -1 -v --color never */filename xargs tail -n 1
ls -1 /home/students grep o wc -l
ls -1 /home/user/logs/backup.*.tar.gz sort -t . -k -2 -r -n head -1
ls -1 _tmp* read FILE sort $FILE -o $FILE wait
ls -1 awk -F - leftsquarebrc  -_ -. - rightsquarebrc  {s=gensub(/^( leftsquarebrc 0-9 rightsquarebrc {4})(.*)/,"\\2\\1","g",$3);print s,$0} sort awk $0=$NF
ls -1 awk {print NR, $0}
ls -1 echo $i XXXX
ls -1 echo i=$i
ls -1 egrep \.txt$ xargs egrep  /dev/null
ls -1 file less
ls -1 folder1 rm folder2/$f
ls -1 gawk {print "`mv "$0" "tolower($0)"`"} xargs -i -t sh -c eval {}
ls -1 grep --color .txt
ls -1 grep -v good xargs rm -f
ls -1 grep \.properties$ wc -l
ls -1 grep ^customer_ leftsquarebrc ^r rightsquarebrc .*$
ls -1 less
ls -1 nl
ls -1 sed -e s/\..*$//
ls -1 sed -e s/^ leftsquarebrc ^_ rightsquarebrc *_ leftsquarebrc ^_ rightsquarebrc *_//
ls -1 sed s/-.*//g sort -u
ls -1 sed s/\-\( leftsquarebrc kM rightsquarebrc \)\?\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)\./-\10\2./ sort sed s/0\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)/\1/
ls -1 sed s/^ leftsquarebrc ^. rightsquarebrc *\(\..*\)$/\1/ sort -u
ls -1 tee file less
ls -1 tr \n ,
ls -1 wc -l
ls -1 xargs -L 1 echo
ls -A  leftsquarebrc  -d $i  rightsquarebrc  rm -r $i
ls -A -I -*
ls -A -r -t -L sed s/\(.*\)\..*/\1/ tail -n 1
ls -A -r -t -L tail -n 1
ls -A -r -t tail -n 1
ls -A -r -t tail -n 1
ls -A -r -t tail -n 1
ls -A sort -t -- -k 5,5 -k 7,7n
ls -A ~/dotfiles
ls -F
ls -F -a grep  leftsquarebrc * rightsquarebrc $
ls -F -r -t grep  leftsquarebrc ^/ rightsquarebrc $ tail -n 1
ls -F grep -E  leftsquarebrc * rightsquarebrc  rightanglebrc 
ls -F grep ...
ls -F world*.zip head -n -5 xargs rm
ls -Q -v *.pdf xargs script
ls -R -l -t -r / head -5 0 awk {if ($5  rightanglebrc 0) print $5,$9} OFS=,
ls -R -t
ls -R /dir grep -i foo
ls -R egrep 6-atom2D.vector$|6-atom2D.klist|6-atom2D.struct
ls -R grep .doc$
ls -S head -1 xargs vim
ls -a
ls -a
ls -a *.{pdf,txt,doc}
ls -a -1 grep ^. tail -n 5 xargs ls
ls -a -d .*/
ls -a -l *.xyz
ls -a -l -g -G --time-style +%s grep ^ leftsquarebrc ^d rightsquarebrc  awk -v -l -i -m -i -t -= -$ -( -d -a -t -e -  -+ -% -s -  -- -d -  -' -1 -0 -  -h -o -u -r -s -  -a -g -o -' -) $4  rightanglebrc  limit { print substr($0, index($0, $4) + length($4) + 1) } date +%s -d 10 hours ago
ls -a -l /tmp awk $3==u {print $NF} u=$USER
ls -a -l /tmp awk -v u=$USER $3==u {print $NF}
ls -a -l awk $6 == "Jan" && $7  rightanglebrc = 16 && $7  leftanglebrc = 20 {print $9}
ls -a -l awk /^d/{d++}{print}END{print "Directories: "d}
ls -a -l awk {print}END{print "Files:" NR}
ls -a -l grep -E ^ leftsquarebrc 0-9 rightsquarebrc +\.php$
ls -a -l grep ^d
ls -a -l head -5 tail -1 cut -d -  -f 3
ls -a -l ls -a -l
ls -a -l sort -k 6,6M -k 7,7n -r
ls -a -l tee -a file.txt
ls -a -l xyzzy0
ls -a -t -r -d */ head --lines -4 xargs rm -r -f
ls -a awk {print length($0), $0} sort -n
ls -c $LOGS_DIR/fetch_cron_*$CRON_DATE* head -1
ls -c -t *.zip tail -n +2 xargs rm
ls -d $(find * -name '*_0VT0_*' -prune -o -print) find * -name *_0VT0_* -prune -o -print
ls -d $(seq --format="/usr/local/mysql/data/mysql-bin.%06.0f" $STARTLOG $ENDLOG) seq --format /usr/local/mysql/data/mysql-bin.%06.0f $STARTLOG $ENDLOG sed s/^.*\///
ls -d $PWD/*/
ls -d * leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc - leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc - leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
ls -d * leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *
ls -d * leftsquarebrc ^~ rightsquarebrc 
ls -d */ grep -E  leftsquarebrc 0-9 rightsquarebrc {4}(- leftsquarebrc 0-9 rightsquarebrc {2}){2}_( leftsquarebrc 0-9 rightsquarebrc {2}-){2} leftsquarebrc 0-9 rightsquarebrc {2}
ls -d *foo* egrep -v ^foo|foo$ xargs rm
ls -d -t -1 $LOCATION/ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc / head -n 1
ls -d -t -r ${A}_ leftsquarebrc 0-9 rightsquarebrc ...
ls -d .*
ls -d .* mv $i `echo $i | sed 's/^.//'` echo $i sed s/^.//
ls -d /Volumes/*/.assets/port/Firefox Portable.app head -1 open $cmd
ls -d /home/inst1 file1.txt file2.txt file1.wmf file2.wmv file3.wmv file1.odt file2.odt
ls -d /home/inst1/ *.txt *.wmv *.odt
ls -d /proc/ leftsquarebrc ^0-9 rightsquarebrc *
ls -d /your/path/*/
ls -d 1  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc . leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc . leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  sort tail -1
ls -d 1 --color auto .*
ls -d 1 .*
ls -d 1 sort tail -1
ls -d H2*/
ls -d grep -E (\d+)-(\d+)-(\d+)$
ls -d grep -E \d{4}-\d{2}-\d{2}$
ls -e foo
ls -f --color $PathToLaunchers
ls -l
ls -l
ls -l
ls -l
ls -l
ls -l
ls -l  leftsquarebrc 0-9 rightsquarebrc *_ leftsquarebrc a-z rightsquarebrc *.log grep root ...
ls -l  rightanglebrc  rightanglebrc  test.log
ls -l $(dirname $(dirname $(which gcc)))/lib dirname $(dirname $(which gcc)) dirname $(which gcc) which gcc
ls -l $1 read x echo $x
ls -l $1 sed -n -e /^-/{s/^/file: /p;d;} -e /^d/{s/^/directory: /p;d;}
ls -l $@ cut -d -  -f 1
ls -l $file cut -d -  -f 1
ls -l *.h awk /\.h/{print "    "$0" \\"}
ls -l --color always grep --color never pattern
ls -l --color auto
ls -l --color less -r
ls -l --group-directories-first --sort extension --color always awk { if ( NR  rightanglebrc  1 ) print }
ls -l --group-directories-first --sort extension --color never
ls -l --time-style +%Y %H:%M:%S
ls -l --time-style +%Y %m %d grep zypper awk {print $6,$7,$8}
ls -l --time-style +%s
ls -l -F -t
ls -l -F cut -c -5 -2 --
ls -l -R / tee output.file
ls -l -R /path/to/folder grep ^l
ls -l -R grep .jpg awk {sum = sum + $5} END {print sum}
ls -l -S
ls -l -S -R sort -k 5 -n
ls -l -S -R sort -k 5 -n sed s/ \+/\t/g cut -f 9
ls -l -a
ls -l -a
ls -l -a
ls -l -a -R /var/run/screen/
ls -l -a -h /home/clucky/MinecraftServers/.backups/Backup-$timedate.tar.gz awk { print $5}
ls -l -a -h eval $var
ls -l -a -h home/clucky/MinecraftServers/.backups/Backup-$timedate.tar.gz awk { print $5}
ls -l -a -t -r tail -n 5
ls -l -a ./Column.sh 1
ls -l -a /
ls -l -a awk {t=(/^d/?"Directory":/^-/?"File":/^l/?"Link":"unknown");print $NF "---"  t}
ls -l -a filter
ls -l -a grep -E -o  leftsquarebrc ^  rightsquarebrc +( + leftsquarebrc ^  rightsquarebrc +){4} grep -E -o  leftsquarebrc ^  rightsquarebrc +$
ls -l -a grep -e May awk {print $9, $10} cat some.files read mFILE mv $mFILE dir/newdir
ls -l -a grep -e May awk {print $9, $10} xargs mv dir/newdir/
ls -l -a less -F -R -S -X
ls -l -a less -S -X
ls -l -a sed -E -n s/^(( leftsquarebrc ^  rightsquarebrc +) leftsquarebrc   rightsquarebrc +){5}.*/\2/p
ls -l -a sed -E 1d; s/^(( leftsquarebrc ^  rightsquarebrc +) leftsquarebrc   rightsquarebrc +){5}.*/\2/
ls -l -a sed -E 2d; s/^(( leftsquarebrc ^  rightsquarebrc +) leftsquarebrc   rightsquarebrc +){5}.*/\2/ sort -n -r head -3
ls -l -a sed -E s/^(( leftsquarebrc ^  rightsquarebrc +) leftsquarebrc   rightsquarebrc +){5}.*/\2/
ls -l -a sed -E s/^(( leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc +) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc +){5}.*/\2/
ls -l -a sed -r s/( leftsquarebrc ^  rightsquarebrc + +){4}( leftsquarebrc ^  rightsquarebrc +).*/\2/
ls -l -a tail +2 sed -E s/^(( leftsquarebrc ^  rightsquarebrc +) leftsquarebrc   rightsquarebrc +){5}.*/\2/
ls -l -a tr -s   cut -d -  -f 5
ls -l -a ~/. leftsquarebrc ^. rightsquarebrc *
ls -l -d .* egrep ^d wc -l awk {print $1 - 2}
ls -l -d /sys/block/sd*/device awk -F -/ { split( $NF, arr, /:/ ); print arr leftsquarebrc 1 rightsquarebrc  }
ls -l -f access.log* grep $(tail $i |awk {'print $4'} |cut -d: -f 1| sed 's/\ leftsquarebrc /\\ leftsquarebrc /') $i tail $i awk {print $4} cut -d -: -f 1 sed s/\ leftsquarebrc /\\ leftsquarebrc /
ls -l -i
ls -l -r -t -h /var/log/myapp/ awk {print $9} head -n -1 0 echo $i
ls -l -r -t awk  !/dly/ && $NF~/000001.txt.gz/ { print $NF }
ls -l -r -t grep -v total awk {print $9} head -n -1 xargs rm
ls -l -s -a grep -E  leftsquarebrc d- rightsquarebrc (( leftsquarebrc rw- rightsquarebrc {2})x){1,3}
ls -l -t $(find . -mtime 0) find . -mtime 0
ls -l -t *.htm head -1 0 awk {print "cp " $9 " ../Test/"$9} sh
ls -l -t -r -d */
ls -l -t -r /apps/dir awk {n=split($9,f,/\//);print $6,$7,$8,f leftsquarebrc n rightsquarebrc }
ls -l -t -r /home/oracle.$dbserver/*.log tail -3 awk {print $NF} awk -F -/ {print $NF} tee tmp.out
ls -l -t -r /proc/$$/fd
ls -l -t -r tail -5 0
ls -l -t `find . -mtime -1` find . -mtime -1 head -5 0
ls -l -t awk /^-/{file=$NF}END{print file}
ls -l -t head -5 0
ls -l /Users/myuser/Development/tools/groovy
ls -l /backup/temp_backup.tar /home/temp_db.gz /backup/temp_ftp.tar
ls -l /bin/ls
ls -l /bin/sh
ls -l /bin/sh /bin/bash
ls -l /dev/null /dev/not-actually/there
ls -l /some/dir/some/where awk {print $3} sort uniq
ls -l /var/temp.* awk {a+=$5}END{print a}
ls -l `find /usr/bin -maxdepth 1 -type l -print` find /usr/bin -maxdepth 1 -type l -print
ls -l `which ls` which ls
ls -l aaa* grep -v expr
ls -l awk $3=="someone"
ls -l awk ($3=="user1" && $7=="Aug")
ls -l awk ($9 ~ /em/) { print $9 }
ls -l awk -F -- - rightanglebrc  -  /\/tmp/{print $2}
ls -l awk { if ($1 ~ /.rwx....../) print "line" }
ls -l awk {print $5, $9} sort -n
ls -l awk {print $6}
ls -l awk {print $9} grep  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
ls -l awk {print $9} grep  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  wc -l
ls -l awk {print $9} xargs -I {} cat {} grep -o {String to search}
ls -l awk {print substr($9,substr1,11)} uniq xargs -i bash -c ls {}*
ls -l columns 1,5,9-
ls -l cut -c -1 -2 --
ls -l cut -d -  -f -2 --
ls -l echo This is it: $l
ls -l file with spaces and " quote in it
ls -l file.txt cut -d -  -f 5 xargs -0 -I {} echo {}-50
ls -l file.txt cut -d -  -f 5 xargs -n 1 -I {} echo {}-50
ls -l foo.sh
ls -l grep -P $1 awk { x += $5 } END { print "total bytes:" x }
ls -l grep .json grep -v fit-report.json wc -l
ls -l grep ^d
ls -l grep test2*
ls -l grep user cat
ls -l log* wc -l
ls -l pr -m bla.txt
ls -l run*
ls -l sed -n -e 2{p;q}
ls -l sed -n 2,4p
ls -l sed -n 2p
ls -l sed -n x;$p
ls -l sed -r s/^. leftsquarebrc -rwx rightsquarebrc {9} //
ls -l sed s/  leftsquarebrc 0-9 rightsquarebrc .*:. leftsquarebrc 0-9 rightsquarebrc  / / less
ls -l wc -c
ls -l {,**/}*.ext
ls -p grep -v / xargs md5sum awk {print $2,$1}
ls -r -t $LGNAME*
ls -r -t -1 file_a*.txt tail -1 xargs sed -n 2p
ls -r -t /home/user/directory/*.mpg head -1 ftp ...
ls -r -t /home/user/directory/*.mpg head -5 xargs ftp ...
ls -r -t tail -n 1
ls -r /var/www/xx*
ls -r /var/www/xx*
ls -r 2012* head -n 1
ls -r measure -s Length
ls -r select-string SomeSearchString Foreach {tf edit $_.Path}
ls -s
ls -t -d $(grep -r abcdefg . | grep commit_id | dirname) grep -r abcdefg . grep commit_id dirname
ls -t -d -1 $PWD/myDir/* tail -3 xargs 7z a myFile.7z
ls -t -r $(find . -type f) find . -type f head -1
ls -t -r /var/cache/apt/archives sed s/_.*//g sort -u
ls -t -r ParentFolder tail -1
ls -t -r grep dm_rmc_mover xargs grep -i -l Error Message:  xargs ls -l
ls -t /backups head -1
ls -t /u01/1/bin/core.siebprocmw.* sed 1,5d xargs rm -r
ls -t 1 head -n 1
ls -t awk NR  rightanglebrc  3 xargs rm
ls -t awk {printf("newest file: %s",$0);exit}
ls -t b2* head -1
ls -t head -1 rsync $latest backup_location
ls -t head -3 read file scp $file user@server
ls -t head -3 xargs -i scp {} user@server:.
ls -t head -n 1 awk {printf("newest file: %s",$0)}
ls -t head -n 2 xargs diff
ls -t head -n 5 ls sort uniq -u sed -e s,.*,"&",g xargs rm
ls -t head -n 5 ls sort uniq -u xargs rm
ls -t sed -e 1,10d xargs -d \n rm
ls -v *.fas echo $i
ls -v awk { if($0!~/Map/) print $0; else later leftsquarebrc NR rightsquarebrc =$0; } END { for (i=1; i leftanglebrc =NR; i++) if ( i in later ) print later leftsquarebrc i rightsquarebrc ; }
ls -v file*.txt xargs cat
ls -v tail -n 1
ls -v tcpdump* tail -n 1
ls ... awk -F - leftsquarebrc  -_ -/ - rightsquarebrc  {f=$(NF-1) rightanglebrc f?$(NF-1):f}END{print f}
ls ./example.pl
ls /android/sdk/build-tools/
ls /bowtie-0.12.7-win32/bowtie-0.12.7/output_635_25bp/* echo hello world
ls /dev/disk/by-path/*usb*
ls /dev/disk/by-path/*usb*part*
ls /dev/disk/by-uuid/ -l
ls /etc/alternatives/java -l awk -F -- - rightanglebrc  {print $2}
ls /home cp -a /home/$a /newhome/$a
ls /home/$Filename
ls /home/kv/m grep -i -E \.(mov|mp4)$ head -1
ls /proc/$pid/fd/ wc -l
ls /sys/class/net sed -e s/^\(.*\)$/"\1"/ paste -s -d ,
ls /sys/class/net/ $(cat ${f}/operstate) cat ${f}/operstate
ls /sys/class/net/ cat ${f}/operstate
ls /tmp
ls /tmp
ls /tmp/foo*
ls /user/local/*.log xargs -r -n -1 script.pl
ls /usr/bin grep -v \.
ls /var/run/screen/S-$USER/*.mapper screen -S mapper ...
ls 1* find . -type f awk {print("mv "$1" "$1)} sed s/ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc */0&/6 sed s/ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc */0&/8
ls ?BAR*
ls ?c*
ls ?{-not $_.PSIsContainer} %{rconvert $_ -r -e -s -i -z -e 128x128}
ls ?{-not $_.PSIsContainer} %{rconvert $_.FullName -r -e -s -i -z -e 128x128}
ls Beaglebone-* tail -n 1
ls Downloads/*.zip
ls F00001-0708-* sed s/F0000\(.*\)/mv & F000\1/ sh
ls File-* sed  s/\(File- leftsquarebrc ^- rightsquarebrc *\)-\(.*\)/mv & \1\2/ sh
ls File-* sed  s/\(File- leftsquarebrc ^- rightsquarebrc \)-\(.+\)/mv & \1\2/ sh
ls File-* sed s/\(.*\)-\(.*\)/mv & \1\2/ sh
ls `(seq 1 33; seq 35 41)|sed 's/^/xxx_/;s/$/.txt/'` seq 1 33 seq 35 41 sed s/^/xxx_/;s/$/.txt/
ls `echo foo`* echo foo
ls a b c
ls a*.txt wc -l
ls aodv* awk -F -. split($1,a,"-"){print $0,a leftsquarebrc 2 rightsquarebrc +1""FS""$2} xargs -n 2 mv
ls aodv* sed -e p;s/aodv-// -e s/-.// xargs -n 2 mv
ls apache-tomcat* sed -r s/^.*-( leftsquarebrc 0-9. rightsquarebrc +)\..*/\1/
ls awk -F -_ {print $1 " " $2} sort -n -k 2 tail -1 sed s/ /_/
ls awk -F -_ {print $1 $2} sort -n -k 2,2 tail -1
ls awk /$variable/'{print here}'
ls awk { sub(/.cpp/, " "); print }
ls awk { sub(/.cpp/, " ", $0); print($0); }
ls awk { sub(/\.cpp/, " "); print }
ls awk {a=substr($0,1,length($0)-4)}/avi$|AVI$/{system("ffmpeg -i "$0" -f avi -vcodec libxvid "a"\".mpg\"")}
ls awk {lc=tolower($0)} lc~/\.avi$/{sub(/...$/,"mpg"); print lc,$0}
ls back_dir grep aa. leftsquarebrc 0-9 rightsquarebrc '$'
ls basename $(pwd) pwd
ls cat leftsquarebrc ^7 rightsquarebrc 
ls cat{1..9}
ls cat{{1..6},{8,9}}
ls cb
ls checkin.* sort -t -. -n tail -1
ls cmd
ls cut -c -1 -- -2
ls data leftsquarebrc 0-9 rightsquarebrc *txt sort -n -k -1 -. -5 awk BEGIN{rn=5;i=1}{while((getline _ leftanglebrc $0) rightanglebrc 0){print _  rightanglebrc "data_new_"i".txt"}close($0)}NR%rn==0{i++}
ls data_* sort -n -t _ -k 2
ls date
ls dir/file.* sort -n -t . -k 2 tail -1
ls echo
ls echo !#:s/;// print The previous command was: '$var'
ls echo $a tr   echo $b echo $b
ls echo this too cat
ls egrep -o  leftsquarebrc 0-9 rightsquarebrc +
ls fgrep -v -e .tar -e .patch xargs echo rm -r -f
ls fgrep -v -e .tar -e .patch xargs rm -r -f
ls file leftsquarebrc 0-9 rightsquarebrc 
ls file* sort -V
ls file* xargs -n 1 sed -n 1{x;d}; /25/{x;p;x;p;q}
ls filename-or-wildcard
ls filepath -t -1
ls files* awk {print $1,$1".out"} xargs -P 4 -n 2 python fastq_groom.py
ls files_*.raw xargs -L 1 sed -e $s/$/\n/
ls folder/*.txt
ls foo*
ls gawk /^ leftsquarebrc 0-9 rightsquarebrc {4}NAME$/ {printf("mv -iv %s %s/%s\n", $1, substr($0,0,4), substr($0,5))}
ls grep -E -v \.(html|js)$
ls grep -E \.(py|txt|tar\.gz)$
ls grep -P \.(?!txt$) zip -@ zipname
ls grep -i foldername1 xargs -I {} mv {} foldername2
ls grep -q log echo there are files of type log
ls grep -v (.*BBB.*)|(.*AAA.*) xargs tar -c -v -z -f test.tgz
ls grep -v *.cpp xargs rm
ls grep -v -F -f exclude.file
ls grep -v -i \.txt$ zip -@ zipname
ls grep -v .h xargs rm -r -f
ls grep -v .v leftsquarebrc 0-9 rightsquarebrc *$
ls grep -v \.jar$
ls grep -v \.lnx$ xargs rm
ls grep -v ^prefix
ls grep -v _is\|_bkk\|_lb\|_sg
ls grep -v file-to-keep xargs rm
ls grep .*\.c
ls grep .txt
ls grep .txt wc -l
ls grep ab xargs cp -t files/
ls grep delayed
ls grep foo xargs -I %s mv %s bar/
ls grep p_ xargs rm
ls grep sample head -1 xargs eog
ls grep srt head -4
ls grep xyzzy cmd1 cmd2 cmd3
ls gsort -r -V sort -u -k -1 -, -1 read f mv $f ~/Desktop/Latest
ls head -1
ls ipsec_packet*.txt sort -V echo $var
ls less
ls less
ls more
ls mv $FILE `echo $FILE | sed -e 's:^0*::'` echo $FILE sed -e s:^0*::
ls mv $i dir/newdir/
ls mv ${file} `cksum "${file}" | cut -d' ' -f1`.${file##*.} cksum ${file} cut -d -  -f 1
ls myDir -t tail -3 xargs 7z a myFile.7z
ls n1=$(wc $i | awk '{print $1}') wc $i awk {print $1}  leftsquarebrc  $n1 -e -q 1  rightsquarebrc  rm $i
ls parallel -k -N 100 x=$(printf %03d {#});mkdir -p $x;mv {} $x
ls parallel -q sed -i s/ leftanglebrc ga\// leftanglebrc /g
ls parallel script.pl --input {3} --output {3.}.out --otherargs range:{1}-{2} ::::  leftanglebrc (ls | awk 'NR==1 {print $2}')  leftanglebrc (ls | awk 'END {print $2}') ls awk NR==1 {print $2} ls awk END {print $2}
ls pbcopy
ls perl -e use JSON; @in=grep(s/\n$//,  leftanglebrc  rightanglebrc ); print encode_json(\@in)."\n";
ls perl -l -n -e print $_
ls pwd
ls pwd
ls school_guide* echo  leftanglebrc %= render 'success_guide_menu' % rightanglebrc 
ls sed -e s/ leftsquarebrc ^0-9 rightsquarebrc //g
ls sed -e s/^The \(.*\)/\1, The/ sort sed -e s/\(.*\), The$/The \1/
ls sed -n -e ${START_INDEX},${STOP_INDEX}p
ls sed -r -n -e s:^( leftsquarebrc 0-9 rightsquarebrc {4})(NAME)$:mkdir -p \1:p sort -u
ls sed -r -n -e s:^( leftsquarebrc 0-9 rightsquarebrc {4})(NAME)$:mv -iv & \1/\2:p
ls sed -r -n -e s:^( leftsquarebrc 0-9 rightsquarebrc {4})(NAME)$:mv -iv & \1/\2:p sh
ls sed ... source /dev/stdin
ls sed s/\.doc$// ls
ls sort
ls sort -V
ls sort -k -4 -n
ls sort -k 1.5n
ls sort -n -t _ -k 2 tail -1
ls sort -n -t _ -k 2 tail -1
ls src_folder grep -v ^String xargs cp -t dest_folder
ls t leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc 
ls tail -n 10 head -n 20
ls td/*.c xargs sed -i  s/:::/::/g
ls tee /dev/tty
ls tee /dev/tty grep dir
ls tee /tmp/ls.txt
ls tee file1 file2
ls tee localbackup.txt
ls test.* xargs perl -p -e BEGIN{undef $/;};s/( leftanglebrc li class="menu-581" rightanglebrc )(.*)( leftanglebrc \/li rightanglebrc )/$1$3/gs
ls update-1.0.* sort sed -n -e /$ENVVAR/,// p
ls wc -l
ls wc -l
ls xargs -I X convert X whatever-options resized-X
ls xargs -d \n -n 1 mplayer
ls xargs -i -% -n 1 sort % -o %
ls xargs -n 3 command
ls xargs -t -I {} sh {}/MyScript.sh param1 param2
ls xargs -t -I {} {}/MyScript.sh param1 param2
ls xargs /bin/echo
ls xargs command
ls xargs echo
ls xargs file awk -F -: !($2~/PDF document/){print $1} xargs rm -r -f
ls y* xargs -i basename {} xargs -i sed s/{}//g {}
ls zasdasd echo file does not exist
ls {max,min}.txt
ls ~/Music/iTunes/iTunes Media/Audiobooks
ls ~/filepath.*jpg xargs -n 1 -I -{ -} convert -u -n -i -t -s PixelsPerInch 75 -r -e -s -i -z -e 200x200 {} {}
ls-l/dev/tty
ls.. awk -F - leftsquarebrc  -_ -/ - rightsquarebrc  {print $(NF-1), $0} sort -n sed s/.* //
ls: *.xyz: No such file or directory
ls: write error: Bad file descriptor
lsb_release -a grep -i Description
lsb_release -a grep Description cut -d -: -f 2
lsblk
lsof $FILE grep -q COMMAND
lsof $FILE grep -q COMMAND echo Command was found!
lsof +D /usr/bin awk /tail/{print $2}
lsof -F -n +p 12345
lsof -F -n +p 12345 tail -n +2 cut -c -2 --
lsof -i -n -P
lsof -i :10000 tail -n +2 awk {print $2} xargs -r kill
lsof -i tcp:22 grep LISTEN awk {print $2} xargs echo kill
lsof -i tcp:22 grep LISTEN awk {print $2} xargs kill
lsof -p $$ -a -d 1 -F n awk /^n/ {print substr($1, 2)}
lsof -p $(ps -o pid= | tr '\n' ',') ps -o pid= tr \n ,
lsof grep /file/path`s/
lsof grep /file/path`s/
lsps arg1 arg2 arg3 = to = -e -l -f grep arg1 arg2 arg3
lsusb awk /ZTE/ {print $6}
lsusb sed -n /ZTE/ s/.*ID \( leftsquarebrc ^  rightsquarebrc \+\).*/\1/p
ltrace -o my_program.ltrace -f -S ./my_program
lua hello.lua
lynx --dump $i
lynx -d -u -m -p http://example.com/
lynx -d -u -m -p input.html
lynx http://example.com/ -d -u -m -p -l -i -s -t -o -n -l -y -n -o -n -u -m -b -e -r -s
m = /REGEX/ { matching-action } !m { NOT-matching-action }
m/
mXWuax8NG9Wa1AkFdcClA5vw2T3407uBdImKNNbcBd/CUkS5NafjZnQ5ow.IubyLujU5ohS8PWogdNoPiF4d//
macchanger -s wlan0 awk /Current/ { print $3 }
macchanger -s wlan0 awk /Permanent/ { print $3 }
machine 192.163.3.3 login ftpuser password apple
machine1001 closed by foreign host.
mail -a info.cvs -a results.log -s Info $MAIL_RECIPIENTS
mail -s $SUBJ $TO
mail -s $SUBJ -q $MSG $TO
mail -s $text $email
mail -s Alert: SSH Access from `who | cut -d'(' -f2 | cut -d')' -f1` -a tmpfile user@example.com who cut -d -( -f 2 cut -d -) -f 1
mail -s Subject recipient@example.com
mail -s Subject recipient@example.com
mail -s exceptions in last hour of test.logs ImranRazaKhan
mail -s export CSV -a calls.tar mail@mail.pl
mailx -r me@example.com -s ...
mailx -s $( leftanglebrc bkp.txt) ......
mailx -s Random Subject myemail@mydomain.com
mailx -s subject foo@bar.com
main $@
main -t $path/$i
main -t $path/$i
main 3 wait
main.sh 13.7.0 4
main: other.o main.o
mainSubString = *blue cheese*
mainSubString = *blue cheese*
main_DEPS = $(TARGETS_$(d)/classes/player) $(TARGETS_$(d)/classes/monster) TARGETS_$(d)/classes/player d TARGETS_$(d)/classes/monster d
make
make
make
make  leftsquarebrc  -f makefile  rightsquarebrc   leftsquarebrc  options  rightsquarebrc  ...  leftsquarebrc  targets  rightsquarebrc  ...
make -C path/to/dir/with/makefile variable=Stop
make -e OPT1=SOME_OTHER_OPT1 OPT2=SOME_OTHER_OPT2
make -f Makefile.gcc -j 4 CCC_OPTS=$GCC_OPT $OPT_FLAG
make -j $(grep -c "^processor" /proc/cpuinfo) grep -c ^processor /proc/cpuinfo
make -j 3
make ./a2
make ./sheet
make CC=clang
make CC=gcc
make CC=gcc -flto -Wall
make CFLAGS=-g3 ...
make CPPFLAGS=-I/usr/include
make CXXFLAGS=-g3 ...
make LogMsg
make PYTHON=/tmp/python-beta/bin/python pythonbuild
make SHELL=/bin/bash
make VAR=bla bla
make all
make all DEBUG
make all awk { print strftime("%Y-%m-%d %H:%M:%S"), $0; } tee file
make check
make configure
make date sed s/a/A/
make foo
make install update-initramfs -k all -u
make install update-initramfs -k all -u
make lib
make libs-depends sed s/ /\n/g sed /\.h$/!d;s/^/src\// sed G;/^\(.*\)\n.*\1/!h;$!d;${x;s/\n/ /g}
make perl analysis.pl
make run
make sed s/a/A/ date
make smktestrun TESTARGS=-abc
make test exit $?
maker: command not found
makeself.sh ${dir_to_archive} ${name_of_archive} ${description} ${startup_script}
man -L -e -n -P -l -e -s -s -  -+ -/ -^ -  -* -A -r -r -a -y -s bash
man -P -l -e -s -s -  -+ -/ -d -e -b -u -g bash
man -P col -b grep grep color
man -S 5 proc
man -k . grep ^ leftsquarebrc a-z rightsquarebrc .*(3)
man acroread
man ascii
man bash
man bash
man bash
man bash
man bash
man bash
man bash less +/^SHELL BUILTIN COMMANDS
man cat
man command_name
man curl egrep  {7}${RETCODE} +S+
man date
man diff
man file
man find
man find
man fmt
man ftp
man gawk
man grep col -b grep color
man groff_man
man halt
man pgrep
man split
man swipl
man tar
man test
man test
man unzip
many commands awk {for(i=6;i leftanglebrc =NF;i++){printf "%s ", $i}}
many commands awk {for(i=6;i leftanglebrc =NF;i++){printf "%s\n", $i}}
map leftsquarebrc $k rightsquarebrc =$v
mapfile -t -O 1 array
mapfile -t -u ${co leftsquarebrc 0 rightsquarebrc } times_a
mapfile -t arr
mapfile -t arr mkdir -p ${arr leftsquarebrc @ rightsquarebrc %/*}
mapfile -t arr yourfunc $devices
mapfile -t array
mapfile -t array xdotool search brain
mapfile -t array your-subshell-here
mapfile -t lines
mapfile -t lines egrep ^-o speccmds.cmd
mapfile -t myvar
mapfile -t results find $catalog -size +$size -type f -exec ls -1rt {} +
mapfile UGUGU
mapfile lines
mapfile lines echo ${lines leftsquarebrc * rightsquarebrc } ${#lines leftsquarebrc @ rightsquarebrc } 2 echo another line
mapfile my_var
maple --kernel-binary /Users/me/bin/mserver
maple -i somedirectory/somefile
mapreduce.map.memory.mb = yarn.scheduler.maximum-allocation-mb mapreduce.map.child.java.opts
markkeys h=d:j=h:k=t:l=n
martin Martin Tournoij
mary age is 22
match
matlab -n -o -d -e -s -k -t -o -p -n -o -d -i -s -p -l -a -y
matlab -n -o -d -e -s -k -t -o -p -n -o -j -v -m -n -o -s -p -l -a -s -h
matlab -n -o -d -e -s -k -t -o -p -n -o -j -v -m -n -o -s -p -l -a -s -h -r add_em(3, 8)
matlab -n -o -d -i -s -p -l -a -y -n -o -j -v -m -n -o -s -p -l -a -s -h -r cd ${pathtoscript}; fit('${dataofinterest}');exit;
matlab -n -o -d -i -s -p -l -a -y -n -o -s -p -l -a -s -h -r runMyScript();
matlab -n -o -d -i -s -p -l -a -y -r firstFile; for idx = 1:7, secondFile(args); end, exit
matlab -n -o -j -v -m -n -o -d -e -s -k -t -o -p -n -o -s -p -l -a -s -h -r load mydata; run matlabTest ./c++Test
matlab -n -o -j -v -m -n -o -d -e -s -k -t -o -p -n -o -s -p -l -a -s -h -r mydata = 1; run matlabTest ./c++Test
matlab -n -o -s -p -l -a -s -h -n -o -d -e -s -k -t -o -p -n -o -d -i -s -p -l -a -y -r test tail +10
matlab -n -o -s -p -l -a -s -h -n -o -d -e -s -k -t -o -p -n -o -j -v -m -r add_em(3, 8) tail -n 3
matlab -r run E:ProductionProjectmytask
matlab -r statement
matlab -r test('hi')
matlab -w -a -i -t -n -o -s -p -l -a -s -h -n -o -d -e -s -k -t -o -p -r waitHello
matlab.exe -n -o -d -e -s -k -t -o -p -n -o -F -i -g -u -r -e -W -i -n -d -o -w -s
mawk /\(on\|off\)line/ { o leftsquarebrc ++c rightsquarebrc =$3 } substr($0,0,27)~$1 { v leftsquarebrc c rightsquarebrc =v leftsquarebrc c rightsquarebrc  $1 } END{ for(i=1;i leftanglebrc =c;++i) print v leftsquarebrc i rightsquarebrc ,o leftsquarebrc i rightsquarebrc  } real
mawk {gsub(/\047/,""); print} file
maxTransport = $currentTransport
mcd foo/bar
md5=`md5sum ${my_iso_file} | awk '{ print $1 }'` md5sum ${my_iso_file} awk { print $1 }
md5deep -r *
md5deep -r * awk { print $1 }
md5deep `find *` find *
md5deep `find *` find * awk ...
md5deep `find *` find * awk ...
md5sum
md5sum $source_file $dest_file
md5sum *.java awk {print $1} sort uniq -d
md5sum *.java grep 0bee89b07a248e27c83fc3d5951213c1
md5sum *.java sort uniq -d -w 32
md5sum -c md5sums
md5sum /etc/hosts awk -F -  {print $1}
mdfind -0 -o -n -l -y -i -n . kMDItemPixelHeight  rightanglebrc  1440 || kMDItemPixelWidth  rightanglebrc  1440 xargs -0 sips -Z 1440
mdfind __your-query-args__ grep -i -v bad path
mdls -r -a -w -n -a -m -e kMDItemFinderComment /Users/fred/Dropbox/OSXStuff/app.icns
me@myWork:../../My documents/Projects/Project 1/*
me@myWork:../../My documents/Projects/Project 1/*
mech-dump --forms http://site.com/
mediainfo --Inform General;%BitRate% /path/to/your/media file
mem_min 1234
mencoder -s -u -b sub.srt -u -t -f -8 -f -o -n -t Arial Unicode MS in.mp4 -o out.mp4 -o -f lavf -o -a -c copy -f -a -f -m -t -t -a -g 0x706D -o -v -c x264 -x -2 -6 -4 -e -n -c -o -p -t -s profile=baseline:bitrate=300k
mergecap -w testfiles/tcpdump.pcap testfiles/*.pcap
message = coucou
message hello world cut -f 1 -d  
message, this is an informational message, /informational
meteor mongo
mgrep the cat the bat the rat
mingw32-make.exe -B C:UsersBladeszaszaDocumentsvvdf3dProjBasicNoComp12Makefile
mingw32-make.exe -f C:UsersBladeszaszaDocumentsvvdf3dProjBasicNoComp12Makefile -B all
minute hour day-of-month month day-of-week command
minute hour day_of_month month day_of_week command_to_run
mirror -r background_docs --only-missing -e
mk-find -e -x -e -c truncate %s
mkdir $( leftanglebrc  temporary.txt)
mkdir $(date "+%m%d%y_%H%M%S_") date +%m%d%y_%H%M%S_
mkdir $DIR
mkdir $HOME/bin
mkdir $HOME/hello $HOME/hello/world
mkdir $dir/my_dir
mkdir $path
mkdir $var3
mkdir ${1%.dat}
mkdir ${1}
mkdir ${i%-*}
mkdir %DATE:/=-%@%TIME::=-%
mkdir -- -R -O -O -T
mkdir -p  leftsquarebrc download directory path rightsquarebrc  wget -O  leftsquarebrc download directory path rightsquarebrc / leftsquarebrc filename.zip rightsquarebrc  https://github.com/.../ leftsquarebrc myZipFile rightsquarebrc .zip
mkdir -p $(OBJDIR) OBJDIR
mkdir -p $(echo $package | tr . /) echo $package tr . /
mkdir -p $(echo asd | sed 's:.:&/:g') echo asd sed s:.:&/:g
mkdir -p $(sed 's:.:&/:g'  leftanglebrc  leftanglebrc  leftanglebrc  "asd") sed s:.:&/:g
mkdir -p $DIR/cx1_$now/$name
mkdir -p $HOME/.vim/{ftdetect,indent,syntax}
mkdir -p $LOCAL_WORKING_DIR $LOCAL_EVENT_LOG_WORKING_DIR
mkdir -p $MODS/out/$ver
mkdir -p $MYPATH
mkdir -p $deployDir
mkdir -p $deploydir
mkdir -p $filename
mkdir -p ${BUP}/ArchFolder
mkdir -p ${f%%_*} mv $f ${f%%_*}
mkdir -p ${f%/*}
mkdir -p ${i:0:1}/${i:1:1}/${i:2:1}/ mv $i ${i:0:1}/${i:1:1}/${i:2:1}/
mkdir -p -- $dirname
mkdir -p -- $s
mkdir -p ./systems/part3
mkdir -p /dir1/dir2/dir3/dir4...dirN/
mkdir -p /home/chris/downloads/$(date -I) date -I
mkdir -p /home/chris/downloads/`date -I` date -I
mkdir -p /mk{1..22}
mkdir -p /my/other/path/here/ touch /my/other/path/here/cpedthing.txt
mkdir -p backup.{0..7}
mkdir -p build/iphoneos/$(basename $PWD).txt basename $PWD
mkdir -p build/iphoneos/${PWD##*/}.txt
mkdir -p build/tests/param_test/bin
mkdir -p dir
mkdir -p folder/subfolder
mkdir -p folder1/folder2/folder3
mkdir -p foo
mkdir -p foo/bar/baz
mkdir -p systems/part3
mkdir -p {2008..2013}/{January,February,March,April,May,June,July,August,September,October,November,December}
mkdir -p ~/systems/part3
mkdir -v -p test/dir (A:B)
mkdir ./-ROOT
mkdir /etc/supervisor/conf.d/
mkdir /home/hieund/bpl
mkdir /home/sindhu/bin/misc_scripts/shellrc/.zshrc_1
mkdir /home/user/Documents/user1 user2
mkdir /mnt/temp /dev/null
mkdir /tmp/$(basename "$(pwd)") basename $(pwd) pwd
mkdir /tmp/$(basename $(pwd)) basename $(pwd) pwd
mkdir /tmp/`basename $(pwd)` basename $(pwd) pwd
mkdir /var/www/vhosts/mydomain.com/new_folder
mkdir B touch B/myfile.txt
mkdir C:userscharqusdesktopMyFolder
mkdir C:userscharqusdesktopMyFolder
mkdir Pics cd Pics
mkdir `echo $EXTRACTDIR/$CV_NAME*`/release echo $EXTRACTDIR/$CV_NAME*
mkdir abc
mkdir abc
mkdir dir_name cd dir_name
mkdir dir_name cd dir_name
mkdir foo/bar pushd foo/bar
mkdir foo1a foo1b foo2a foo2b foo3a foo3b
mkdir foo{1,2,3}{a,b}
mkdir site_media/media tar -x -v -f fixtures/media.tar -C site_media/media
mkdir tmp cd !#:1
mkdir tmp cd temp echo error
mkdir ~/bin
mkdir ~/bin
mkdir ~/bin
mkdtemp report_failure
mkfifo $PIPENAME
mkfifo /dev/mypipe
mkfifo /path/to/named/pipe
mkfifo /tmp/fifo
mkfifo batch_control
mkfifo my_buf
mkfile B/C/D myfile.txt
mknod /tmp/semaphore p
mknod mypipe p
mktemp -d
mktemp -d -t $0
mktemp -t git-open.XXXXXXXX.${1##*.} exit 1
mkvirtualenv test -p $mypython276
mkvmerge -i input.mkv grep -i attachment awk {printf $3 "\n"} sed s;\:;; awk END { print NR }
mkvmerge -i input.mkv grep -i attachment wc -l
mkvmerge -o $OUTDIR/$filename $filename ${filename%.mkv}.mka ${filename%.mkv}.ass sed -n /^The/q cat
mmv *.ext #1.otherext
mmv linux_* #1
module load turbovnc-1.0.0 vncserver -o -t -p rsh $host
mogrify -f -o -r -m -a -t jpg *.png
mogrify -f -o -r -m -a -t tif *.png
mogrify -p -a -t -h ../dsc_small -d -e -f -i -n -e jpeg:extent=2MB dsc_big/*
mojo get http://www.google.com a
mongo
mongo --eval printjson(db.serverStatus())
mongo --norc --shell fake.js
mongo --quiet --eval d=db.isMaster(); print( d leftsquarebrc 'ismaster' rightsquarebrc  );
mongo --quiet dbname --eval printjson(db.collection.find().toArray())
mongo db. leftanglebrc some_collection rightanglebrc .drop();
mongo db.dropDatabase()
mongo dbname command.js
mongo mydb
mongo sm-repository2.db.qa.test.com:27017/testdb --eval db.stats()
mongo sm-repository2.db.qa.test.com:27017/testdb script.js
mongo stop_mongod.js
mongo test --eval db.things.remove({expires: {$lt: Math.round(new Date().getTime() / 1000)}})
mongod --help
mongod --rest
mongodb://x.x.x.x:27017,y.y.y.y:27017,z.z.z.z:27017/database?opt1=o1 opt2=o2
mongodb://x.x.x.x:27017/database,mongodb://y.y.y.y,mongodb://z.z.z.z,{options}
mongodump -o /mydir/
mongoexport --db mydb --collection mycollection  --query `./test2.sh` --out ./test2.json ./test2.sh mongo mydb /home/dev/removeDocs.js
mongoexport --db mydb --collection mycollection  --query `./test2.sh` ./test2.sh
mongoimport -d myDB -c myCollection --drop --file file.json
monitor mvn blah sed -e SomeHiglightRegEx
monitor mvn blah | sed -e SomeHighlightRegEx
mono  leftsquarebrc options rightsquarebrc  file  leftsquarebrc arguments... rightsquarebrc 
mono myProgram.exe arg1 arg2 arg3
montage -g -e -o -m -e -t -r -y +4+4 $ICL3/three.jpg $ICL2/two.png output.jpg
montage -g -e -o -m -e -t -r -y +4+4 $ICLs/three.jpg $ICLs/two.png output.jpg
more
more
more +2 myfile.txt
more +2 myfile.txt
more /tmp/last_ip_check.txt
more YourFile.txt
mosh REMOTE -- sh -c tmux a || tmux
mosh REMOTE -- tmux
mosquitto_sub -t newtopic/test -h test.mosquitto.org
most  leftanglebrc (/bin/echo 'abcdef') /bin/echo abcdef
mount -L WHITE /mnt/WHITE -o rw
mount -L WHITE /mnt/WHITE -o rw,uid=test,gid=test
mount -o remount /moint/point
mount -o remount,noatime /moint/point
mount -t smbfs //192.168.0.2 192.168.0.3/user1 user2 /home/user/user1 user2
mount -t smbfs //mystaff:PE91XA!!%40@ncs-srv-fs3.ncs.local/Teaching /Users/mystaff/Desktop/DoNotUseTeachingDrive/
mount grep -q abc echo export pqr
mount grep /data
mount sed -n -e s///mynetaddr on ( leftsquarebrc ^  rightsquarebrc *).*$/1/p
mount.cifs //some/server /mnt/somewhere -o credentials=/root/credentials_file ...
mount_smbfs  leftsquarebrc -N rightsquarebrc   leftsquarebrc -o options rightsquarebrc   leftsquarebrc -d mode rightsquarebrc   leftsquarebrc -f mode rightsquarebrc   leftsquarebrc -h rightsquarebrc  // leftsquarebrc domain  rightsquarebrc  leftsquarebrc user leftsquarebrc :password rightsquarebrc @ rightsquarebrc server leftsquarebrc /share rightsquarebrc  path
mount_smbfs //user:pass@address/C$ /Volumes/test
mount_smbfs //user:pass@address/C$ /Volumes/test -o user=user,pass=pass
mountpoint -q myDir echo This is a mount point.
mov BYTE  leftsquarebrc eax rightsquarebrc ,0x31
move_site.sh website servername
mp3search -a The Rolling Stones -t Let It Bleed
mpc current awk { print } END { if (!NR) print "not playing" }
mpiexec -n
mplayer $(ls | grep mp3 | sed -n 7p) ls grep mp3 sed -n 7p
mplayer $address -d -u -m -p -s -t -r -e -a -m -d -u -m -p -f -i -l -e $2.wmv -v -f scale=320:240
mplayer '$address' -dumpstream -dumpfile '$2.wmv' -vf scale=320:240
mplayer -o -n -t -o -p -c -o -o -k -i -e -s -c -o -o -k -i -e -s -- -f -i -l -e ./cookie.txt $(youtube-dl -gf "$resolution"    --cookies ./cookie.txt "https://www.youtube.com/watch?v=${video_id}") youtube-dl -g -f $resolution --cookies ./cookie.txt https://www.youtube.com/watch?v=${video_id}
mplayer -s -s START -e -n -d -p -o -s END audio.wav
mplayer -v -o png,outdir=/tmp,prefix=frameNo,z=0 -a -o null -f -r -a -m -e -s 1 VIDEO-FILENAME
mplayer vidfile.mp4 -s -s 110 -e -n -d -p -o -s 5 -f -s vidfile.mp4 -s -s 130 -e -n -d -p -o -s 9 -f -s
mpstat -u 1 -P ALL awk NR==4 {print systime(), $4}
mpstat 1 1 awk /Average/{print 100 - $11}
mput *
mput /home/myAcct/SQLbackups/$FILE
mrathi_dev,00:1e:65:39:10:8e,192.168.133.146
msbuild /target:clean,publish /p:publishurl=c:publish_location
msbuild Project.csproj /t:Rebuild
msbuild myproject.sln /target:Publish /p:configuration=release /p:platform=win32
msbuild path/to/your/webdirectory/YourWeb.csproj /p:Configuration=Debug
msbuild project.sln /Flags...
msbuild.exe /p:Configuration=Release YourSolution.sln
msbuild.exe /p:Configuration=Solution Config /p:Platform=Solution Platform
msbuild.exe /p:CustomBeforeMicrosoftCSharpTargets=c:mytargetscustom.targets
msbuild.exe /t:Clean;Build /p:config=Release Myapp.dproj
msbuild.exe /v:q projectName.csproj /t:Package /p:MvcBuildViews=false
msbuild.exe MySolution.sln.
msbuild.exe projectName.csproj /p:MvcBuildViews=false
msbuild.exe projectname.proj /property:Configuration=Release
msg1 two three
msgattrib --untranslated --no-wrap wa.po grep msgid sed s/msgid leftsquarebrc ^  rightsquarebrc *//; s/^\s"\|"$//g; s/\\"/"/g
msgfmt -o se.molicy.po secpolicy.po
msggrep -K -e or\b template2.pot
msiexec /i UxStyle Core x64.msi /l*v x64_installlog.txt
msiexec /i c:myinstall.msi /qb TRANSFORMS=c:mytran1.mst
msiexec /passive TARGETDIR=C:MyInstallationDirectory /i node-download.msi
msql -h localhost -u -r -o -o -t -p -r -o -o -t -e database INSERT into userdetail SELECT  u1, u2, u3, d1, d2, d3 FROM USERS u INNER JOIN DETAILS d ON (u.id=d.user_id)
mstest /testcontainer:YourDLL.dll /detail:errormessage /detail:description /resultsfile:file.trx
murky .
musicsort -t -H -d .
mutt -s Subject -a file send@to
mutt -s Subject -a info.xls send@to
mv  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc /*.masked targetDir
mv $(awk 'BEGIN{for (i = 1; i  leftanglebrc = 3; i++) { printf("file%d.png ", i) }}') ../ awk BEGIN{for (i = 1; i  leftanglebrc = 3; i++) { printf("file%d.png ", i) }}
mv $(echo $f|sed s/.sql$/txt/) dir echo $f sed s/.sql$/txt/
mv $(grep -l pattern files) target grep -l pattern files
mv $(ls -lt | grep '^-' | head -1 | awk '{ print $9 }') /abc/home/asd451/Output ls -l -t grep ^- head -1 awk { print $9 }
mv $(ls -t | head -1) /abc/home/asd451/Output ls -t head -1
mv $1 $(echo $1 | sed "s/$/$2/") echo $1 sed s/$/$2/
mv $1 $1-alttmp mv $1-alt $1 mv $1-alttmp $1-alt
mv $1 $2 cd $2
mv $1 ${1// /_}
mv $1 ${G_DEST_DIR}
mv $1.htm $1
mv $DIR/$FILENAME $DIR/$HASH_OF_FILENAME
mv $FILE ${FILE/_*_/_}
mv $FILE ${FILE/_*_/_}
mv $FILE ${FILE/_*_/_}
mv $FOO `echo $FOO | sed 's/\( leftsquarebrc ^- rightsquarebrc *\) - \( leftsquarebrc 0-9 rightsquarebrc \)\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\(.*\)/\1 - S0\2E\3\4/g'` echo $FOO sed s/\( leftsquarebrc ^- rightsquarebrc *\) - \( leftsquarebrc 0-9 rightsquarebrc \)\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\(.*\)/\1 - S0\2E\3\4/g
mv $OUTDIR/new1 new2 new3 old1 $OUTDIR/old2 old3
mv $OUTPUT_DIRECTORY/$RANDOM6* $OUTPUT_DIRECTORY/$YEAR/$MONTH/$DAY/
mv $dir/$file $S3/1/post1.png
mv $f $(echo $f|sed s/.sql$/txt/) dir echo $f sed s/.sql$/txt/
mv $f $f-plaintext.txt
mv $f ${f# leftsquarebrc 0-9 rightsquarebrc *-}
mv $f ${f%.png}@2x.png
mv $f ${f%.png}@2x.png
mv $f ${f// leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc }
mv $f ${f// leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc |!@#$%^&*() rightsquarebrc }
mv $f ${f// leftsquarebrc ^ leftsquarebrc :print: rightsquarebrc  rightsquarebrc }
mv $f ${f//_/-}
mv $f ${f/test/foo}
mv $f `echo $f | sed s/IMG/VACATION/` echo $f sed s/IMG/VACATION/
mv $f `echo $f | tr " leftsquarebrc :upper: rightsquarebrc " " leftsquarebrc :lower: rightsquarebrc "` echo $f tr  leftsquarebrc :upper: rightsquarebrc   leftsquarebrc :lower: rightsquarebrc 
mv $f `printf foo%05d ${f#foo}` printf foo%05d ${f#foo}
mv $file $lowercase_filename
mv $file ${file#linux_}
mv $file ${file%%\?*}
mv $file ${file%-*}.jpg
mv $file ${file%-m.css}.css
mv $file ${file%.*}
mv $file ${file%.foo}.bar
mv $file ${file%.xml}.manual
mv $file ${file%???????}
mv $file ${file%dat}mp3
mv $file ${file/20/10}
mv $file ${file/something/else}
mv $file ${file:0:4}0${file:4}
mv $file ${file:0:6}.png
mv $file ${filename}001.${ext}
mv $file zzz - $file - copied $DATE.wav
mv $file zzz - ${file%.wav} - copied $DATE.wav
mv $filename ${filename#foo}
mv $filename ~/TAM/dustbin
mv $files ${files//%3A/:}
mv $filname $(echo $filename | sed -e 's/.....\.moc1$//') echo $filename sed -e s/.....\.moc1$//
mv $fname $(echo "$fname" | sed -r 's/ leftsquarebrc 0-9 rightsquarebrc {14}//') echo $fname sed -r s/ leftsquarebrc 0-9 rightsquarebrc {14}//
mv $fname O.$fname
mv $i $( echo $i | sed 's/\( leftsquarebrc ^\. rightsquarebrc *\).\( leftsquarebrc ^\. rightsquarebrc *\).\( leftsquarebrc ^\. rightsquarebrc *\)/\2.\1/' ) echo $i sed s/\( leftsquarebrc ^\. rightsquarebrc *\).\( leftsquarebrc ^\. rightsquarebrc *\).\( leftsquarebrc ^\. rightsquarebrc *\)/\2.\1/
mv $i $(echo $i | sed 's/_13/_15/g') echo $i sed s/_13/_15/g
mv $i $(perl -MURI::Escape -e '$u=uri_unescape($ARGV leftsquarebrc 0 rightsquarebrc ); chomp($u); $u=~s/\s/_/g; $u=~s/-\(.*\)//; print $u;' "$i") perl -M -U -R -I -: -: -E -s -c -a -p -e -e $u=uri_unescape($ARGV leftsquarebrc 0 rightsquarebrc ); chomp($u); $u=~s/\s/_/g; $u=~s/-\(.*\)//; print $u; $i
mv $i $a/$b
mv $i $i.$(grep $(file -bi $i | awk '{print $1}' | sed 's/;//') /etc/mime.types | head -1 | awk '{print $2}') grep $(file -bi $i | awk '{print $1}' | sed 's/;//') /etc/mime.types file -b -i $i awk {print $1} sed s/;// head -1 awk {print $2}
mv $i ${A/recovered/_}
mv $i ${i%%-*}.omf
mv $i ${i%-*}.${i##*.}
mv $i ${i%-*}.jpg
mv $i ${i%.sample}
mv $i ${i/*-doc-/doc-}
mv $i ${i/- leftsquarebrc 0-9. rightsquarebrc *.pkg/.pkg}
mv $i ${i/-512-/-256-}
mv $i ${i// /_}
mv $i ${i:15}.txt
mv $i file$(printf %02d $j).png printf %02d $j let j=j+1
mv $i file$j.png let j=j+1
mv $i/*.mp3 $i/$i.mp3
mv $j ${i%%_*}.${j##*.}
mv $j ${j%/*.zip}/preview.zip
mv $onam $dnam
mv $x HN_$x
mv $x test/${x%.png}test.png
mv ${@:1:$#-1} ${@: -1} cd ${@: -1}
mv ${FILE} ${FILE}.staging
mv ${file} ${file/my.fi.name/new.file.link}
mv ${f} $(echo "${f}" | sed 's/\n//g') echo ${f} sed s/\n//g
mv ${f} ${f//$'\n'}
mv * $target
mv * destination_path
mv *.dat *.mp3
mv *.manual `basename $file`.xml basename $file
mv *.mp3 *.ogg ../../Music
mv *.tar.gz OtherDirectoryName
mv *.{jpg,gif,png} ~/Pictures
mv */*.masked targetDir
mv *20110209*
mv *20120528_1 leftsquarebrc 23 rightsquarebrc * file/
mv *20120528_{0 leftsquarebrc 0-29 rightsquarebrc , leftsquarebrc 12 rightsquarebrc *}*
mv -- $f $(tr  leftsquarebrc :lower: rightsquarebrc   leftsquarebrc :upper: rightsquarebrc   leftanglebrc  leftanglebrc  leftanglebrc  "$f") tr  leftsquarebrc :lower: rightsquarebrc   leftsquarebrc :upper: rightsquarebrc 
mv -- $i ${i#*-}
mv -- $i ${i%.ext}.otherext
mv -- $i ./${i#*-}
mv -f input.txt scriptout/${filename}_input.txt
mv -i $1 $(dirname "$1")/$(basename "${1// /_}") dirname $1 basename ${1// /_}
mv -i $a ${a%\.png*}`identify -format '%w' $a`.png identify -f -o -r -m -a -t %w $a
mv -i */* leftsquarebrc 13579 rightsquarebrc .jpg temp/.
mv -n $f $(date -r "$f" +"%Y%m%d_%H%M%S").jpg date -r $f +%Y%m%d_%H%M%S
mv -v $thefile ${thefile%-*}
mv -v *.mp3 tmp/
mv ./sourcedir/**/*.ext ./targetdir
mv .test test
mv /home/jms/file1.txt /home/jms/myfiles/file1.txt
mv /home/myusuf3/Downloads/*.nzb /home/myusuf3/.hellanzb/nzb/daemon.queue/
mv /home/you/somefile.txt /tmp/newlocation.txt
mv /path/subfolder/* /path/
mv /path/subfolder/.* /path/
mv /path/subfolder/{.,}* /path/
mv /path/to/directory/ /path/to/non/existent/directory/
mv /path/to/file.txt /path/to/non/existent/directory/
mv /src_dir/* /target_dir
mv /src_dir/* /target_dir/*
mv /srv/www/htdocs/downloads/rules /srv/www/htdocs/didebansnort/core/snort/rules
mv /system/SystemUI.apk /system/app/
mv /tmp /tmp_old mkdir /tmp chmod 777 /tmp
mv /tmp/filename.foo.{gz,cdx} .
mv /users/me/collection/*/* /users/me/collection-all/
mv 1.txt 2.txt echo Success echo Failure
mv 1/*.masked targetDir
mv 8953-*/*.jpg /mnt/FOLDER
mv Activ_23676_03-1 leftsquarebrc 0-6 rightsquarebrc * /path/to/new/location
mv C:/Users/x/Documents/$f C:/Users/x/Documents/folder
mv Unnamed File1 1.pdf
mv `find . -name "*.mov" | xargs` OUTPUTDIR/ find . -name *.mov xargs
mv `ls *.boo` subdir ls *.boo
mv `ls *.sql|sed s/.sql$/.txt/g` dir ls *.sql sed s/.sql$/.txt/g
mv `ls -1t | tail -1` newdirname ls -1 -t tail -1
mv app/modules/keywords_builder.rb !#^:h/keywords_generator.rb
mv applist.log applist_`date -r applist.log +%Y%m%d%H%M%S`.log date -r applist.log +%Y%m%d%H%M%S
mv apps /usr/local/apps
mv at* ./output20
mv blahblah.20110209-b.gz blahblah.20110209.gz
mv dir/foo dir/subdir/
mv erd_*_$(date -v -1d +%Y%m%d)_*.csv.Z destination_dir/ date -v -1 -d +%Y%m%d
mv file.log file.LOG
mv file_str_23.txt file_23.txt
mv filename `date +%d%b%Y`filename date +%d%b%Y
mv file{1..3}.png ../
mv foo.c foo01/10/14.c
mv foo.c foo2014-01-10.c
mv foo.c foo`date +%D`.c date +%D
mv intro_??? leftsquarebrc 13579 rightsquarebrc .png tempdir/
mv is /bin/mv
mv my_directory/{test,yeah}.txt
mv myscript /usr/bin
mv new-$i $i
mv new.txt ../scripts_old
mv nutzer.1.gz ~/public_html/man/man1/
mv oldFileName newFileName
mv original.filename new.original.filename
mv rename.sh
mv script1.py script1
mv source target
mv t.dat *.mp3
mv t1.dat t2.dat *.mp3
mv temp_output* $code
mv useragents_$1 /${1%.dat}/useragents_$1
mv xxxx !#:1.bak
mv {,new.}original.filename
mv ~/.vim/_vim/* ~/.vim
mv ~/.vim/_vim/file_1 ... ~/.vim/_vim/file_n ~/.vim
mv ~/Desktop/Picture_{1..77}.png ./
mv ~/Dropbox/Backups/$SOURCE*.tgz ~/.Trash/
mv ~/desktop/blue ~/temp
mv ~/iPhoto Library.zip ./ bell
mv_to_trash jk*
mvim --remote-tab-silent filename
mvim -c au VimLeave * !cat % | pbcopy /tmp/bar.txt
mvim -c execute "au VimLeave * !pbcopy  leftanglebrc  " . expand("%") /tmp/bar.txt
mvn --settings YourOwnSettings.xml clean install
mvn -D -p -r -o -p -A -= -v -a -l -u -e -A -D -p -r -o -p -B -= -v -a -l -u -e -B -D -p -r -o -p -C -= -v -a -l -u -e -C clean package
mvn -D -p -r -o -p -e -r -t -y -N -a -m -e -= -p -r -o -p -e -r -t -y -V -a -l -u -e clean package
mvn -U test read line echo ${line} sed -e s/.*ERROR.*/`echo -e '\e leftsquarebrc 91m&\e leftsquarebrc 0m'`/g -e s/.*(WARN|INFO).*/`echo -e '\e leftsquarebrc 93m&\e leftsquarebrc 0m'`/g echo -e \e leftsquarebrc 91m&\e leftsquarebrc 0m echo -e \e leftsquarebrc 93m&\e leftsquarebrc 0m
mvn -d -a -l -t -D -e -p -l -o -y -m -e -n -t -R -e -p -o -s -i -t -o -r -y -= -i -n -t -e -r -n -a -l -. -r -e -p -o -: -d -e -f -a -u -l -t -: -h -t -t -p -: -/ -/ -W -h -a -t -E -v -e -r -U -R -L
mvn -d -a -l -t -D -e -p -l -o -y -m -e -n -t -R -e -p -o -s -i -t -o -r -y -= -r -e -p -o -s -i -t -o -r -y -I -d -: -d -e -f -a -u -l -t -: -h -t -t -p -: -/ -/ -W -h -a -t -E -v -e -r -U -R -L
mvn -s YourOwnSettings.xml clean install
mvn antrun:run
mvn antrun:run -P -m -y -p -r -o -f -i -l -e -- -f -o -r -- -a -n -t -r -u -n
mvn clean echo Maven Clean Unsuccessful exit 1
mvn clean install -D -t -e -s -t -= -M -y -T -e -s -t -N -G -T -e -s -t
mvn clean scm:checkout deploy
mvn clean test -D -e -n -v -. -U -S -E -R -= -U -A -T -D -g -r -o -u -p -s -= -S -n -i -f -f
mvn dependency:copy-dependencies
mvn exec:java
mvn exec:java -D -e -x -e -c -. -m -a -i -n -C -l -a -s -s -= -. -. -. -D -e -x -e -c -. -a -r -g -s -= -$ -{ -a -r -g -s - leftsquarebrc  -* - rightsquarebrc  -}
mvn exec:java -D -e -x -e -c -. -m -a -i -n -C -l -a -s -s -= -c -o -m -. -m -y -c -o -m -p -a -n -y -. -A -p -p
mvn groupID:artifactID:version:goal
mvn help:evaluate -D -e -x -p -r -e -s -s -i -o -n -= - leftsquarebrc  -p -r -o -p -e -r -t -y -- -n -a -m -e - rightsquarebrc  findstr /R ^^ leftsquarebrc ^^ leftsquarebrc INFO rightsquarebrc  rightsquarebrc 
mvn help:evaluate -D -e -x -p -r -e -s -s -i -o -n -= -b -a -s -e -d -i -r findstr /R ^^ leftsquarebrc ^^ leftsquarebrc INFO rightsquarebrc  rightsquarebrc 
mvn install -D -t -e -s -t -= -M -y -T -e -s -t -N -G -T -e -s -t
mvn package
mvn release:prepare mvn release:perform -D -a -r -g -u -m -e -n -t -s -= -- -D -s -k -i -p -. -d -e -p -l -o -y -= -f -a -l -s -e
mvn sample.plugin:maven-hello-plugin:1.0-SNAPSHOT:sayhi
mvn scm:status
mx A = reshape(1:9, 3, 3)
mxmlc -o -u -t -p -u -t main.swf src/com/nuaavee/MainClass.as -s -o -u -r -c -e -- -p -a -t -h src/
mxmlc MyApp.mxml load-config my-app-config.xml output /pathToRelease
mxmlc MyAs3File.as
my $awk_run = `./awk_program.txt saved_file.txt` ./awk_program.txt saved_file.txt
my $c = qx{cmd \c $ARGV leftsquarebrc 0 rightsquarebrc  /A page=$ARGV leftsquarebrc 1 rightsquarebrc =OpenActions $ARGV leftsquarebrc 2 rightsquarebrc }
my $command = multi_script.sh $data
my $err = `cp -r $HTML /tssobe/www/tstweb/$subpath/$HTMLDIR1 2 rightanglebrc &1` cp -r $HTML /tssobe/www/tstweb/$subpath/$HTMLDIR1
my $mod=`module load turbovnc-1.0.0; vncserver -otp 2 rightanglebrc  tmp_vnc.log` module load turbovnc-1.0.0 vncserver -o -t -p
my $mod=module load turbovnc-1.0.0; vncserver -otp 2 rightanglebrc  tmp_vnc.log
my $pstate=`nc -z 8.8.8.8 441; echo $?` nc -z 8.8.8.8 441 echo $?
my $pstate=`nc -z 8.8.8.8 441; echo \$?` nc -z 8.8.8.8 441 echo $?
my $pstate=qxnc -z 8.8.8.8 441; echo $?
my $results = `awk 'tolower(\$0) ~ $sanitized_query' *_Codes.txt` awk tolower(\$0) ~ $sanitized_query *_Codes.txt
my $str = q{echo -e usenseveralnlines}
my $var1= `awk '/secon/ {print $1}' vladtest.sh |cut -c2-6` awk /secon/ {print $1} vladtest.sh cut -c -2 -- -6
my $x = qx%identify $1% chomp $x $x
my @programoutput=`$command` $command
my @sorted = sort { $a- } @items
my string
my-script
my.command touch command.complete touch command.failed
my.command touch command.complete true touch command.failed
myCommand /s /d %dir% file1 file2
myCommand tee /path/to/some/file.txt
myFixer.sh
myFunctionOrScript $@
myGitThing bash
myPerlScript --myarg1 10 --myarg2 42
myProgram grep -o -P ppl=\s*\K\d+\.\d+
myProgram sed s/ppl= leftsquarebrc  \t rightsquarebrc *\( leftsquarebrc 0-9 rightsquarebrc \{1,\}\. leftsquarebrc 0-9 rightsquarebrc \{1,\})/\1/
myProgram sed s/ppl=\s*\(\d\+\.\d\+\)/\1/
myProgram.exe arg1 arg2 arg3
myScript.sh OriginalFile.xml 5
myStr
my_archive.run ${param1} ${param2} ${paramN}
my_array leftsquarebrc foo rightsquarebrc =bar
my_array leftsquarebrc foo rightsquarebrc =bar
my_array leftsquarebrc key rightsquarebrc =value
my_command
my_command awk -F  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc {2,}+ NR==$i {print $2} egrep ^ leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc 
my_command echo my_command failed exit 1
my_command my_args1 my_args2 matched_result
my_command myargs
my_command sed s/^/\t/
my_func {1,2,3}
my_function $1
my_less_func your/path
my_prog
my_prompt sh_auto_file=c:cygwinbinbash.exe %1 %*
my_scp_multi ACCOUNT SERVER PW ~/testfileA ~/testfileB ~/testfileC ~/test/
my_scp_multi ACCOUNT SERVER PW ~/testfileA ~/testfileB ~/testfileC ~/test/
my_script
my_script *
my_script *
my_script directory_a directory_b directory_c
my_stream_generator xargs -n 1 my_command
myapp sed -e s/^.* //
mybatchfile.bat 2 4
mycmd
mycmd pcregrep -M (? leftanglebrc =^/  rightanglebrc   -{7}\n).*\n(?=/  rightanglebrc  $)
mycmd pcregrep -M -o ^/  rightanglebrc   -{7}\n\K(?!/  rightanglebrc ).+(?=\n/  rightanglebrc  $(?!\n leftsquarebrc \s\S rightsquarebrc ))
mycmd pcregrep -M -o ^/  rightanglebrc   -{7}\n\K.+(?=\n/  rightanglebrc  $(?!\n leftsquarebrc \s\S rightsquarebrc ))
mycmd pcregrep -M ^/  rightanglebrc   -{7}\n.*\n/  rightanglebrc  $ pcregrep -v ^/  rightanglebrc 
mycmd sed -n 1{/^\/  rightanglebrc   -\{7\}$/{n;/./{h;n;/^\/  rightanglebrc  $/{${x;p}}}}}
mycmd sed -n 1{h;n;H;x;N;${/^\/  rightanglebrc   -\{7\}\n..*\n\/  rightanglebrc  $/{x;p}}}
mycommand
mycommand  rightanglebrc (cat) cat
mycommand  rightanglebrc (hexdump -C) hexdump -C
mycommand $( leftanglebrc  file.txt)
mycommand $@
mycommand $b.sa $b
mycommand $files
mycommand $files
mycommand ${my_list_of_files leftsquarebrc @ rightsquarebrc }
mycommand awk NR rightanglebrc 1{print $1,$2}
mycommand echo mycommand failed $$? exit 1
mycommand file{1..20}
mycommand smallcmd1
mycp myDir *sh
mydtach directoryName
myfile.coffee
myfile_1_exercise.txt == myfile_2_exercise.txt
myfinsdtr all_pre.txt more
myfold
myfunc $@
myfunction original.conf my.conf
mygitcm my commit message here
mygrep data.frame(foo = x) mycode
mypath = $file
myprog
myprog $(cat file-name) cat file-name
myprog alpha beta gamma delta
myprog tee  rightanglebrc (ap1)  rightanglebrc (ap2)  rightanglebrc (ap3) ap1 ap2 ap3
myprog.exe c:pathwith spacesin themiddlefile.pdf
myprog.exe pathtofile.txt
myprogram
myprogram -n MODE2 MODE1
myprogram tee  rightanglebrc (grep stack  rightanglebrc out) grep stack someotherprogram
myprogram tee /dev/tty grep stack
myprogram.exe (this is some text, with special characters.)
myprograme.exe c:my documentsfile1.xls
myprograme.exe c:my documentsfile1.xls
myprojectbinReleasemyproject.exe
mypython276=/opt/python276/bin/python2.7
myscript
myscript 192.0.2.42 output.txt
myscript arg1 with spaces
myscript out.pdf foo.ps bar.ps another file.ps
myscript.py
myscript.rb `hostname -i` file.txt hostname -i
myscript.sh
myscript.sh
myscript.sh
myscript.sh -d dir_name
myscript.sh bash ba.sh
myscript.sh input
myscript.sh: line 11: COMMMAND: unbound variable
mysed s/$orig_pkg/$package_name/g $f
myservice
mysql
mysql
mysql
mysql
mysql  leftsquarebrc options rightsquarebrc 
mysql  leftsquarebrc options rightsquarebrc  --execute UPDATE table SET Status ready WHERE ID IN (`paste -sd, id_file.txt`); paste -s -d -, id_file.txt
mysql * FROM posts LIMIT 1G
mysql --batch --silent -u $_adminuser -h $_host $_hostdb
mysql --batch --skip-column-names -e SELECT CONCAT('TRUNCATE TABLE ', TABLE_SCHEMA, '.', TABLE_NAME, ';') AS table_sql FROM information_schema.TABLES WHERE TABLE_NAME IN ('errorLog', 'errorLogBacktrace', 'errorLogUrl'); mysql
mysql --batch --skip-column-names -e SELECT CONCAT('TRUNCATE TABLE `', TABLE_SCHEMA, '`.`', TABLE_NAME, '`;') AS table_sql FROM information_schema.TABLES WHERE TABLE_NAME IN ('errorLog', 'errorLogBacktrace', 'errorLogUrl'); mysql
mysql --defaults-file /home/user/.my.cnf database
mysql --defaults-file /path/to/file_with_password
mysql --defaults-file mysecret.cnf
mysql --help
mysql --quick -u -n -a -m -e -p -p -w -d wmap -e ...
mysql --silent --raw
mysql --skip-column-names -B -e select ... from ... where ...; do_something /dev/stdin
mysql --table -e show engine innodb status -u -p database
mysql --table -u dbclient -p -x -x -x -x GEKONYLOGDB -e select now(),max(time_stamp) from metrics
mysql --user $USERNAME --password $PASSWORD --database $DATABASE -e show tables;
mysql --user root --password mypass vsftpd GRANT ALL PRIVILEGES ON `MYUSERNAME\_%`.* TO "MYUSERNAME"@"%";
mysql --user root --password xyz db_name
mysql --user sqluser --password $pasx --execute $CMD $db
mysql --user user_name --password your_password db_name
mysql --vertical false
mysql -A --user username --password password --host hostname usernameuction -e update core_config_data SET value = 'http://${URL}/' WHERE path LIKE 'web/unsecure/base_url'; update core_config_data SET value = 'https://${URL}/' WHERE path LIKE 'web/secure/base_url';
mysql -B -d -b mydb -u -a -n -o -n -p -p -w -d --disable-column-names -e select count(*) from table1
mysql -B -s -e DELETE FROM database.table WHERE filed  leftanglebrc  CURDATE()- 5
mysql -B -s -e DELETE FROM table WHERE filed  leftanglebrc  CURDATE()- 5 database
mysql -B -u username -p -p -a -s -s -w -o -r -d --disable-column-names --execute select name from test
mysql -P 9306 --protocol tcp
mysql -P 9306 --protocol tcp --prompt sphinxQL rightanglebrc  
mysql -U test_traffic traffic
mysql -e INSERT INTO tablename (colname) VALUES ('$variable')
mysql -e LOAD DATA INFILE 'ls.dat' INTO TABLE mytable1 mydatabase
mysql -e select * from mydb1.table1
mysql -e source /path-to-backup/backup-file.sql db_name --default-character-set UTF8
mysql -h -m -y -h -o -s -t -u -u -s -e -r -p -m -y -p -a -s -s -D -m -y -d -b -B -e ${QUERY leftsquarebrc ${query} rightsquarebrc }
mysql -h -m -y -h -o -s -t -u -u -s -e -r -p -m -y -p -a -s -s -D -m -y -d -b -B -e ${QUERY leftsquarebrc ${query} rightsquarebrc }
mysql -h 127.0.0.1 -u root -p redhat -H -D mysql -e select host,db from db;
mysql -h dbserver_hostname -e truncate table schema_name.table_name
mysql -h localhost -u root --password password -e CREATE DATABASE databasename;
mysql -h localhost -u test -p -Y -o -u -r -P -a -s -w -o -r -d
mysql -h server-name -u root -p -X -X -X -X -X -X -X -X database-name
mysql -h server-name database-name
mysql -h {hostname} -u {username} -p -{ -p -a -s -s -w -o -r -d -} {database}
mysql -p -y -o -u -r -p -a -s -s -w -o -r -d -w -i -t -h -o -u -t -s -p -a -c -e -s -e Your insert query goes here with semicolon;
mysql -s -N -u -U -S -E -R -p information_schema -e SELECT Variable_Value FROM GLOBAL_VARIABLES WHERE Variable_Name = "datadir"
mysql -u  leftsquarebrc username rightsquarebrc  -p -e SET PASSWORD FOR 'user' = PASSWORD ('newpassword')
mysql -u $(printf %q "$MYSQL_LOGIN_USER") -p -$ -( -p -r -i -n -t -f -  -% -q -  -" -$ -M -Y -S -Q -L -_ -L -O -G -I -N -_ -P -A -S -S -W -O -R -D -" -) CREATE USER $(printf %q "${MYSQL_USERS leftsquarebrc $i rightsquarebrc }") printf %q $MYSQL_LOGIN_USER printf %q $MYSQL_LOGIN_PASSWORD printf %q ${MYSQL_USERS leftsquarebrc $i rightsquarebrc }
mysql -u $U -p -$ -P -D -$ -D
mysql -u ${username} -p ${database}
mysql -u ***** -p -* -* -* -* -* admin-wp -e SELECT * FROM admin_wp.wp_8_posts WHERE post_type = 'post' AND DATEDIFF(NOW(), post_date)  rightanglebrc  30 LIMIT 0, 10 
mysql -u -$ -U -S -E -R -_ -N -A -M -E -p -$ -P -A -S -S -W -O -R -D -e -e -x -i -t
mysql -u -$ -u -s -e -r -p -$ -p -a -s -s -e DELETE FROM tablename WHERE datetimestamp  leftanglebrc  DATE_SUB(NOW(), INTERVAL $daysret DAY)
mysql -u -U -S -E -R -N -A -M -E -p -P -A -S -S -W -O -R -D -h -H -O -S -T -N -A -M -E
mysql -u -U -S -E -R -p -e SHOW VARIABLES WHERE Variable_Name = "datadir"
mysql -u -U -S -E -R -p -e SHOW VARIABLES WHERE Variable_Name LIKE "%dir"
mysql -u -U -s -e -r -n -a -m -e -p -P -a -s -s -w -o -r -d database_name
mysql -u -e select * from schema.table
mysql -u -m -u -u -s -e -r -p -m -y -p -a -s -s -w -o -r -d -e "show databases;";
mysql -u -r -o -o -t -p -a -b -c -1 -2 -3 -e -e -x -i -t
mysql -u -r -o -o -t -p -e CREATE DATABASE IF NOT EXISTS `$(basename -s .gz test-db.gz)` basename -s .gz test-db.gz
mysql -u -r -o -o -t -p -e CREATE DATABASE IF NOT EXISTS ``basename -s .gz test-db.gz`` basename -s .gz test-db.gz
mysql -u -r -o -o -t -p -p -a -s -s -e SELECT * FROM whatever
mysql -u -r -o -o -t -p -r -o -o -t --local_infile 1 3parsfdb -e LOAD DATA LOCAL INFILE '/logfiles/Bat_res.csv' INTO TABLE Bat_res FIELDS TERMINATED BY ','
mysql -u -r -o -o -t -p -r -o -o -t -e create database mydb;
mysql -u -t -h -e -u -s -e -r -p -t -h -e -p -a -s -s -w -o -r -d
mysql -u -u -s -e -r -p -p -a -s -s
mysql -u -u -s -e -r -p -p -w -h -h -o -s -t databasename -e CALL sp_exec_dump()
mysql -u myuser -p
mysql -u root --password $PASS
mysql -u root --password root
mysql -u root -e SELECT ... sed 1d
mysql -u root -p
mysql -u root -p -$ -( -c -a -t -  -~ -/ -. -m -y -s -q -l -_ -p -a -s -s -) cat ~/.mysql_pass
mysql -u root -p -$ -P -A -S -S
mysql -u root -p -$ -{ -p -a -s -s -} -B -e create database `$dbname`;GRANT ALL PRIVILEGES ON `$dbname`.* TO $dbuser@localhost IDENTIFIED BY '$dbpassw';FLUSH PRIVILEGES;
mysql -u root -p --execute SELECT User, Host FROM mysql.user
mysql -u root -p -` -c -a -t -  -/ -t -m -p -/ -p -a -s -s -` -e SHOW DATABASES cat /tmp/pass
mysql -u root -p -e select count(*) User_Count from  mail -s Count email_id
mysql -u root -p -m -y -_ -p -a -s -s -w -o -r -d -D DATABASENAME -e UPDATE `database` SET `field1` = '1' WHERE `id` = 1111; database field1 id
mysql -u root -p -p -a -s -s -w -o -r -d -e UPDATE table SET data = 1 WHERE id = 5; SELECT data FROM table WHERE id = 5
mysql -u root -p -p -a -s -s -w -o -r -d databasename -e SELECT * FROM main
mysql -u root -p -r -o -o -t -N elis27 -e select max(idnumber) from mdl_user;
mysql -u root -p -r -o -o -t -e show databases;
mysql -u root files -e insert into path values $VAR
mysql -u sqluser -p -$ -p -a -s -x -e $CMD $db
mysql -u user -p
mysql -u user -p -p -a -s -s -w -o -r -d -D database_name
mysql -u user -p dbnane
mysql -u username -p password
mysql ...
mysql ... -e YOUR_QUERY;SELECT ROW_COUNT() -B tail -n 1
mysql 1 -- test select
mysql SQL_MODE = ANSI
mysql SQL_MODE = ANSI_QUOTES
mysql USER root TO new_user
mysql USER user
mysql c:create_database.sql
mysql database -u $user -p -$ -p -a -s -s -w -o -r -d
mysql database -u -u -s -e -r -p -p -a -s -s -w -o -r -d -e describe table;
mysql database `happy-face` happy-face
mysql dbTest -e LOAD DATA INFILE './file' INTO TABLE tablename FIELDS TERMINATED BY ','
mysql db_name
mysql db_name
mysql dbname
mysql-connector-java-5.1.29/mysql-connector-java-5.1.29-bin.jar
mysql_safe
mysql_safe --log-error /tmp/mysqld.log
mysqladmin -P 3104 -r -v -i -1 ex grep Questions
mysqladmin -u - leftsquarebrc  -u -s -e -r -n -a -m -e - rightsquarebrc  -p - leftsquarebrc  -p -a -s -s -w -o -r -d - rightsquarebrc  drop  leftsquarebrc database rightsquarebrc 
mysqlbinlog mysql-bin.000016 awk /session(_log)?/,/;/ more
mysqlcheck --defaults-extra-file /etc/php.d/mysql-client.cnf
mysqld --help --verbose grep datadir
mysqld --init-file C:\mysql-init.txt
mysqldump --all-databases --routines -h
mysqldump --host localhost --user root --password ******* --result-file /home/lbs.company.sql lbs company
mysqldump --host localhost --user root --password ******* lbs company
mysqldump --insert-ignore --skip-add-drop-table --no-create-info --lock-tables false -u -c -r -b -t -_ -s -e -p -c -r -b -t -_ -s -e -h -1 -0 -. -2 -. -2 -. -1 -5 -0 blah master_backup --where date(END_TIME) rightanglebrc ='$FiveDays' --result-file torr1.sql
mysqldump --no-data mydb mysql mydb
mysqldump --opt test1 -u root -p -p -a -s -s -w -o -r -d bzip2
mysqldump -B $db ...
mysqldump -P 3306 -h  leftsquarebrc ip_address rightsquarebrc  -u  leftsquarebrc uname rightsquarebrc  -p - leftsquarebrc  -p -a -s -s - rightsquarebrc  db_name
mysqldump -S /opt/lampp/var/mysql/mysql.sock -u root -h localhost -p -g -i -h -a -n mistoria wp_posts gzip -9
mysqldump -h host -u user --password mypassword dbname -h host2 -u user2 --password mypassword dbname2
mysqldump -h host -u user --password mypassword dbname -h host2 -u user2 --password mypassword dbname2
mysqldump -h host -u user -p password database date +%d-%m-%Y %H %M %S
mysqldump -u  leftsquarebrc uname rightsquarebrc  -p - leftsquarebrc  -p -a -s -s - rightsquarebrc  --all-databases
mysqldump -u  leftsquarebrc uname rightsquarebrc  -p - leftsquarebrc  -p -a -s -s - rightsquarebrc  db_name
mysqldump -u  leftsquarebrc uname rightsquarebrc  -p - leftsquarebrc  -p -a -s -s - rightsquarebrc  db_name gzip
mysqldump -u  leftsquarebrc uname rightsquarebrc  -p - leftsquarebrc  -p -a -s -s - rightsquarebrc  db_name table1 table2
mysqldump -u -$ -{ -d -b -_ -u -s -e -r -} -p -$ -{ -d -b -_ -p -w -d -} ${schema_name} gzip
mysqldump -u -U -S -E -R -N -A -M -E -p -P -A -S -S -W -O -R -D -h -H -O -S -T -N -A -M -E USER_DATABASE
mysqldump -u -r -o -o -t -p -s -d -f -a -s -@ -N -$ -p -r -! -n -T --databases app_pro
mysqldump -u -u -s -e -r -p -p -w database --no-create-info --skip-add-locks --skip-disable-keys --skip-triggers
mysqldump -u myuser -p --databases --add-drop-database --no-data my_db
mysqldump -u root files path path_updated ...
mysqldump ... mv ~/sqldump/tmp$$ ~/sqldump/$(date +%F).sql date +%F
mysqldump blah blah gzip date +%m-%d-%y
mysqldump database sed -r /^(UN)?LOCK/d
mysqldump db1 bzip2 mysql db2
mysqldump my_db date +%Y-%m-%d_%H-%M-%S
myuser = NOPASSWD: /sbin/ifconfig
n
n % 4
n N Read/append the next line of input into the pattern space.
n/
n/}
nDaysAgo 20120910 5
nValue 0b00000001
nagios3-cgi nagios3-cgi/adminpassword
nagios3-cgi nagios3-cgi/adminpassword-retype
name e is not defined
name1=value1 name2=value2 command name3=value3 -x name4=value4 abc
name_of_file
name_of_file = ${line%.*}
nano  leftanglebrc (cat /var/log/qmail/current | tai64nlocal) cat /var/log/qmail/current tai64nlocal
nano  leftanglebrc (tai64nlocal  leftanglebrc  /var/log/qmail/current) tai64nlocal
nano /etc/ssh/sshd_config
nano ~/.bash_profile
nano ~/.gitconfig
nautilus /tmp
nautilus /usr/share/applications
nawk -F -" -v OFS=" {gsub(/ /,"",$1)}1 your_file
nawk -F -, NR==FNR {a leftsquarebrc $1 rightsquarebrc =$2;next} ($1 in a) && (a leftsquarebrc $1 rightsquarebrc +5) leftanglebrc =$2 count.txt count1.txt
nawk -F -= /NetworkName/{n=$2;getline;if($2~/ims3/){print n} } file
nawk -f script.awk $i ${i%%.*}.vy.dat ${i%%.*}.vz.dat
nawk /ADDRESS/{$0=$0" PROTOCOL"}1 file
nawk /valcred/{close(x);x="F"++i;printf ""  rightanglebrc  x}{print  rightanglebrc  rightanglebrc  x;} input_file.txt
nawk substr($0,42,4)~/ABCD|MNOP/ ${file}
nawk {system("svcadm enable " $3)}
nc
nc -d
nc -k -l 12345
nc -k -l 4444
nc -l -U /tmp/socket
nc -l -p 1234 -e my_function
nc -l 1234 echo $! myprog kill $( leftanglebrc /tmp/myprog_kill_pid) rm /tmp/myprog_kill_pid
nc -l 12345 processing_program
nc -l 30000
nc -l 30000
nc -l 8011
nc -l myport read line php file.php $line
nc -u 192.0.2.1 53
nc -v $1 $2
nc -v -w 1 111.111.111.111 -z 22
nc -v -z -w 3 127.0.0.1 5050 echo Online echo Offline
nc -v -z 192.168.8.216 9100 awk {print $NF}
nc -z 8.8.8.8 441 echo 0
nc MAINSERVER 9999 grep whatever_you_like
nc localhost 3306
nc my_server 1234
ncal -w 2013
ncal -w 4 2013
ncat -k -e /bin/sh -l $PORT
ncat -l 2000 -k -c xargs -n1 echo
ncdump myfile.nc awk /var61 =/ {nextline=NR+1}{if(NR==nextline){print $1}}
ncdump myfile.nc grep var61:_FillValue sed -e s/.*= //;s/ .*//
ncdump myfile.nc sed -z -e s/.* var61 =n  //;s/ .*//
net use X: /delete
net use X: \serverdirectory
net.trainParam.showWindow = false
nethogs -d 5 sed s/ leftsquarebrc ^ leftsquarebrc :print: rightsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc //g
netsh interface ipv6 add address Local Area Connection 2001:db8:290c:1291::1
netsh wlan show hostednetwork cmd /v:on /c find Not && echo found !errorlevel! || echo lost !errorlevel!
netsh wlan show hostednetwork cmd /v:on /c find Not ^ ^ echo found !errorlevel! ^ ^ echo lost !errorlevel!
netstat -a
netstat -a -n -p -t grep apache2 grep ESTABLISHED awk { print $5 } cut -d -: -f 1 sort -u
netstat -a -n -p grep LISTEN awk {print $4} sed s/.*://g sort -n -u
netstat -a -n -t awk $6 == "LISTEN" && $4 ~ / leftsquarebrc \.: rightsquarebrc 80$/ wc -l
netstat -a -n -t awk $6 == "LISTEN" && $4 ~ / leftsquarebrc ^0-9 rightsquarebrc 80$/ wc -l
netstat -a -n -t awk $6 == "LISTEN" && $4 ~ /:80$/ wc -l
netstat -a -n -t awk $6 == "LISTEN" && $4 ~ /\.80$/ wc -l
netstat -b -n 1 awk {print $3;fflush()} tail -n +3
netstat -n -a -p -u -t -e -o awk -v OFS=; $1 ~ /^tcp/ && $3  rightanglebrc  4000 { sub(/^.+:/, "", $4); print $3, $4, $9 }
netstat -n -a -t -p grep 11211 grep ESTABLISHED
netstat -n -a -t -p grep 7143 grep EST awk -F -  {print $5} awk -F -: {print $1} sort -n -r uniq -c awk {print $1} awk { sum+=$1} END {print sum}
netstat -n -t -l -p awk $4~/:*'${PORT}'$/{gsub(/\/.*/,"",$NF);cmd="kill -9 "$NF;system(cmd)}
netstat -n grep tcp awk { print $5 } cut -d . -f -- -4 sort /tmp/file uniq
netstat -t -l -n -p awk /:80 */ {split($NF,a,"/"); print a leftsquarebrc 2 rightsquarebrc ,a leftsquarebrc 1 rightsquarebrc }
netstat -t -n -p -l awk /tcp/{print $4}
netstat -t -n cut -f 2 -d -: cut -f 1 -d -  sort -r -n head -1
netstat -t 1 -i
new -n WindowName bash --login
new String leftsquarebrc  rightsquarebrc {/bin/sh, -c -, 'nm, -l -, file1.o,  rightanglebrc , file1.txt'}
new1
new_array leftsquarebrc color rightsquarebrc =red
new_mac_address // for instance 00:f6:a0:ff:f1:06
newfile = ${FILES/111/222}
newtask -p $Project_Name ./$PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@
next
next}
next}
nfcapd -p 12345 -l /path/to/new/file/ -x mv %d%f %d/$file
ng-nailgun clojure.main $@
ng-nailgun clojure.main path/to/myscript.clj
nginx -v awk -F -/ {print $2}
ni hklm:software/classes/firefoxhtml/shell/edit/command -t -y -p -e directory -f -o -r -c -e
nice -1 0 ${BASH_ALIASES leftsquarebrc list rightsquarebrc }
nice -1 0 `alias list | sed "s/^\(alias \)\? leftsquarebrc ^= rightsquarebrc \+='//; s/'$//;"` alias list sed s/^(alias )? leftsquarebrc ^= rightsquarebrc +='//; s/'$//;
nice -n 10 { ./configure
nice -n 15 sh -c while true; do true; done
nickw444@laptop ~ $ sudo ./addsudousers.sh `cat listofusers.txt` cat listofusers.txt
nickw444@laptop ~ $ sudo ./addsudousers.sh bob joe jeff
nin a box
nl -b a -p read number line  leftsquarebrc  $(ispell -l  leftanglebrc  leftanglebrc  leftanglebrc  "$line" | wc -l) -g -t 0  rightsquarebrc  ispell -l wc -l echo $number: $line
nm $item2 grep -e \ leftanglebrc T\ rightanglebrc  awk {print3}
nm -P a.out awk $2 == "T" && $1 !~ /^_/ && $1 != "main" {print "b " $1}
nm /usr/bin/svn
nmake
nmake /f makefile
nmake /f makefile.vc BUILD=release RUNTIME_LIBS=static
nmap -P -N -p 22 --open -o -G 192.168.*.* awk $NF~/ssh/{print $2}
nmap -i -L yourfile -v -o -X nmap.xml
nmap -n -s -L -i -L ip_ranges -o -G awk /^Host/{print $2} shuf -n 100000
nmap -o -X nmap.xml -s -P 172.16.1.0/24
nmap -p 23 -i list.txt grep ^23.*open -B 3 grep ^Nmap scan cut -d -( -f 2 cut -d -) -f 1
nmap -s -P 192.168.0.0-255
nmap -s -n -o -X -  -- example.com
nmap -v -v -i -L mylistwithip.txt grep Discovered open port awk {print $6:$4} awk -F -/ {print $1}
nmap 192.168.0.0/24 -s -U -p 44555 grep -B 3 open egrep -o ( leftsquarebrc 0-9 rightsquarebrc {1,3}.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}
nmap host -P -N -p ssh egrep open|closed|filtered
nnoremap :badd scp://secure//home/Julius/fee/fie/fo/fum.txt
nobody ALL = NOPASSWD: /your/script
nobody ALL=NOPASSWD: gzip
node $UGLIFYJS -o $JS_COMBINED_EDITOR $JS_TEMP_EDITOR
node -v
node helloworld.js
node mixpanel-extract date:$1 events:$EVENTSQUOTES
node server.js
node server.js
node server.js
node test.js
node wrapper.js blah
nohup $SCRIPTNAME --daemonize ${PARAMS leftsquarebrc @ rightsquarebrc }
nohup $_JAVA_EXEC -D -p -r -o -c -_ -$ -C -O -M -M -A -N -D $JAVA_HEAP_MAX $HADOOP_OPTS -c -l -a -s -s -p -a -t -h $CLASSPATH $CLASS $@
nohup -
nohup ./fetch_command
nohup ./myprogram.sh echo $!
nohup ./myscript.py
nohup ./myscript.py
nohup ./program
nohup ./script
nohup ./script
nohup ./script
nohup ./shell_script
nohup ./startEventProcessor
nohup /home/edheal/myprog arg1 arg2
nohup /path/to/run.sh
nohup /path/to/watchsu
nohup /path/to/your_script.sh
nohup Ex.exe
nohup S1 nohup S2
nohup bash another.sh
nohup bash script.sh
nohup find $LOCATION -exec shred $TIMES -u {} ;
nohup glxgears
nohup java -j -a -r myjar.jar
nohup java -j -a -r myjar.jar
nohup ls -1 *.txt .....
nohup matlab -n -o -d -e -s -k -t -o -p -n -o -s -p -l -a -s -h -r ...........
nohup matlab -n -o -d -i -s -p -l -a -y -n -o -s -p -l -a -s -h -r matlab_command
nohup matlab -n -o -d -i -s -p -l -a -y -n -o -s -p -l -a -s -h -r runMyScript();
nohup myInScript.sh
nohup mycommand
nohup myprogram
nohup myscript.sh
nohup nice -n 5 python3 blah.py
nohup nice /usr/bin/java -D -J -E -N -K -I -N -S -_ -H -O -M -E -= -/ -o -p -t -/ -j -e -n -k -i -n -s -/ -C -I -D -o -r -g -. -a -p -a -c -h -e -. -c -o -m -m -o -n -s -. -j -e -l -l -y -. -t -a -g -s -. -f -m -t -. -t -i -m -e -Z -o -n -e -= -A -m -e -r -i -c -a -/ -N -e -w -_ -Y -o -r -k -D -j -a -v -a -. -a -w -t -. -h -e -a -d -l -e -s -s -= -t -r -u -e -X -X -: -M -a -x -P -e -r -m -S -i -z -e -= -2 -0 -4 -8 -m -X -X -: -+ -C -M -S -C -l -a -s -s -U -n -l -o -a -d -i -n -g -E -n -a -b -l -e -d -X -X -: -+ -C -M -S -P -e -r -m -G -e -n -S -w -e -e -p -i -n -g -E -n -a -b -l -e -d -j -a -r jenkins.war
nohup nice /usr/bin/java -D -J -E -N -K -I -N -S -_ -H -O -M -E -= -/ -o -p -t -/ -j -e -n -k -i -n -s -/ -C -I -D -o -r -g -. -a -p -a -c -h -e -. -c -o -m -m -o -n -s -. -j -e -l -l -y -. -t -a -g -s -. -f -m -t -. -t -i -m -e -Z -o -n -e -= -A -m -e -r -i -c -a -/ -N -e -w -_ -Y -o -r -k -D -j -a -v -a -. -a -w -t -. -h -e -a -d -l -e -s -s -= -t -r -u -e -j -a -r jenkins.war -X -X -: -M -a -x -P -e -r -m -S -i -z -e -= -2 -0 -4 -8 -m -X -X -: -+ -C -M -S -C -l -a -s -s -U -n -l -o -a -d -i -n -g -E -n -a -b -l -e -d -X -X -: -+ -C -M -S -P -e -r -m -G -e -n -S -w -e -e -p -i -n -g -E -n -a -b -l -e -d
nohup node server.js
nohup otherScript.sh
nohup otherscript
nohup php -r while (true) { echo "a";}
nohup php /home/cron.php
nohup php somescript.php
nohup python app.py 8080
nohup python manage.py runserver 0.0.0.0:8000
nohup python test.py
nohup runScript
nohup sass --watch file.scss:file.css /bin/date +%Y%m%d.%H%M
nohup sayHello
nohup scrapy crawl first
nohup script-name.ksh ${parameter1} ${paramter2}
nohup sh -c for i in mydir/*.fasta; do ./myscript.sh "$i"; done  rightanglebrc output.txt
nohup sh /tmp/cmd.sh
nohup sh /tmp/cmd.sh
nohup some_command
nohup some_command
nohup somecmd arg1 -
nohup ssh ${NAMES leftsquarebrc i rightsquarebrc }@${IP leftsquarebrc i rightsquarebrc } vmstat -n ${interval} ${delay}  rightanglebrc  $file.csv
nohup ssh ${NAMES leftsquarebrc i rightsquarebrc }@${IP leftsquarebrc i rightsquarebrc } vmstat -n ${interval} ${delay}  rightanglebrc  $file.csv
nohup ssh ${NAMES leftsquarebrc i rightsquarebrc }@${IP leftsquarebrc i rightsquarebrc } vmstat -n ${interval} ${delay}  rightanglebrc  $file.csv
nohup ssh ${NAMES leftsquarebrc i rightsquarebrc }@${IP leftsquarebrc i rightsquarebrc } vmstat -n ${interval} ${delay}  rightanglebrc  $file.csv
nohup ssh -q sc-2 tail -f /home/logs/oam-2.log
nohup ssh remote sleep 100 &; echo $!
nohup ssh user@server simulation/script
nohup tcpdump port 389 -i bond0 -s 0 -w /tmp/capture.pcap
nohup time ./build_all args to build_all go here
nohup xterm -e java -j -a -r start.jar
nohup ~/Desktop/left.py
none /cygdrive cygdrive user,noacl,posix=0 0 0
normal: { x: 10, y: 6 }
normal: { x: 5, y: 3 }
nosetests --with-coverage $(for f in *.py; do echo --cover-package="${f%.*}"; done) echo --cover-package ${f%.*}
nostage
not cmd exit 0 OR syntax exit 1
notepad hello.txt
notificationdb_last_known_path 29
notify-send $line
notify-send notification title notification text
nova list grep derpInstance sed s/.*=//;s/ .*//
npm cache clean
npm config get prefix
npm config set prefix /usr/local
npm explore -g myapp -- pwd
npm get prefix
npm install -g coffee-script
npm install -g less
npm install .
npm install azure --global
npm install http-server -g
npm install jsawk
npm list -g
npm ls --depth 0 --depth 2 --depth 6 --depth 2
npp anyFile1 anyFile2 anyFile3
nprop
nrams1=`awk -F";" -v fecha=$fecha -v area=$area '$1 == fecha && $2 == area { print $3 }' niveles-rams.csv` awk -F -; -v fecha=$fecha -v area=$area $1 == fecha && $2 == area { print $3 } niveles-rams.csv
nslookup
num + 1
num2
num2=`echo "obase=16;ibase=16;$start_num + $num" | bc` echo obase=16;ibase=16;$start_num + $num bc
num2=`obase=16;ibase=16; echo $start_num \\+ $num | bc` echo $start_num \+ $num bc
num_gold++ wt_gold += $2 print num_gold print wt_gold
number1
nunit-console-x86 ambiHomeWPFTestTestsbinReleaseTests.dll
nvcc testCuda.cu --cl-version 2010 --use-local-env -I -% -O -P -E -N -C -V -_ -D -I -R -% -i -n -c -l -u -d -e -L -% -O -P -E -N -C -V -_ -D -I -R -% -x -6 -4 -v -c -1 -0 -l -i -b -l -o -p -e -n -c -v -_ -c -o -r -e -2 -4 -0 -l -o -p -e -n -c -v -_ -h -i -g -h -g -u -i -2 -4 -0
nvcc testCuda.cu --cl-version 2010 --use-local-env -I -% -O -P -E -N -C -V -_ -D -I -R -% -i -n -c -l -u -d -e -L -% -O -P -E -N -C -V -_ -D -I -R -% -x -6 -4 -v -c -1 -0 -l -i -b opencv_core240.lib opencv_highgui240.lib
n}
o
o C:/users/user/desktop/copy_command.txt
objdump -d -C file.o
ocrscript.sh -f -r -o -m /home/kristoffer/test.png -t -o /home/kristoffer/test.txt
ocrscript.sh /home/kristoffer/test.png /home/kristoffer/test.txt
octave --silent --eval myOctaveFunc("$line")
octave --silent --eval myOctaveFunc('$line')
octave script.m
od -A -n -t x1 read line echo $char
od -A -n -v -t -x -1 -w 1 test.txt cut -c -2 --
od -A -n -v -t -x -1 -w 1 test.txt cut -c -2 -- fgrep -v 0a
od -A n -t o1 -v input.txt rs 0 1 read n  leftsquarebrc  $n -e -q 015  rightsquarebrc  read n continue printf \$n
od -N 4 -t -u /dev/random awk NR==1 {print $2} {}
od -a -A -n -v file perl -0 -7 -7 -7 -n -e s/\n//g,print "$_\n " for /(?:esc| fs| gs| us)?(?:(?!esc| fs| gs| us).)*/gs
od -a -A n /dev/urandom head -3 0 tr -d   tr -d \n awk {print substr($0,1,256)}
od -c ble.txt od -c bla.txt
od -c filename.csv less
od -c myfile.csv
od -c scriptname
od -t x1 --skip-bytes 8 --read-bytes 1 file.moi head -1 awk {print $2}
od -t x1 --skip-bytes 9 --read-bytes 1 file.moi head -1 awk {print $2}
od -t x2 --skip-bytes 6 --read-bytes 2 file.moi head -1 awk {print $2}
od -x -c -b input_file_name less
ogr.sh /path/to/dir
ogr2ogr -f ESRI Shapefile -s -_ -s -r -s +proj=longlat +ellps=aust_SA +nadgrids=~/bin/a66_national.gsb +wktext -t -_ -s -r -s EPSG:4283 outputgda94.shp inputagd66.shp
ohome:/home/jail:/home/username
omxplayer -p /home/jason/Music/FileName.mp3
one two
one two three
one two three four
one two three four
one two three four five
one two:three:four:five
opath echo $PATH
open -a /Applications/Sublime Text.app/ ~/.profile
open -a Adobe Acrobat 7.0 Professional/Adobe Acrobat 7.0 Professional foo.pdf
open -a Coda
open -a Flash Player $(xmlc -warnings=false DocumentClass.as | tail -n 1 | sed 's/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc .*$//') xmlc -w -a -r -n -i -n -g -s -= -f -a -l -s -e DocumentClass.as tail -n 1 sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc .*$//
open -a Flash Player `xmlc -warnings=false DocumentClass.as | tail -n 1 | sed 's/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc .*$//'` xmlc -w -a -r -n -i -n -g -s -= -f -a -l -s -e DocumentClass.as tail -n 1 sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc .*$//
open -a Microsoft Word
open -a SourceTree path-to-file
open -a Terminal $1
open -a Terminal $1
open -a Terminal /path/to/python/script.py
open -a Terminal.app script1.command open -a Terminal.app script1.command open -a Terminal.app script1.command
open -a TextEdit /path/to/logfile
open -a file.command
open -a love.app /Users/mtc06/testgame
open -b com.Growl.GrowlHelperApp
open -g http://localhost:3000/
open /Applications/MyApp.app --args /path/to/file.pdf
open /Applications/Wireshark.app
open /myapplication/
open THIS, -| -, cat $ARGV leftsquarebrc 0 rightsquarebrc 
open THIS, cat $ARGV leftsquarebrc 0 rightsquarebrc  |
open com.apple.calculator
open http://localhost:$1
open http://www.google.com
open http://www.ocwconsortium.org/index.php?q=mathematics&option=com_coursefinder&uss=1&l=&s=&Itemid=166&b.x=0&b.y=0&b=search
open my $fh,  leftanglebrc , input.txt or die Couldn't open input.txt: $!
open my $fh, -| -, some_program --with-options
open my $pipe, -| -, @command,  leftanglebrc  single argument not mangled by shell  rightanglebrc 
open {file}
open_init_pty sudo bash -c echo hello
openssh version cut -d -  -f 2
openssl aes-128-cbc -e -i -n stream1.ts -o -u -t enc/stream1.ts -n -o -s -a -l -t -i -v -K 7aeb2faae0289b9828b2994f50a4cc3a
openssl aes-256-cbc -i -n encrypted -p -a -s -s file:../password.txt -d awk {print $1}
openssl base64
openssl blowfish -i -n plaint_text_file -o -u -t encrytped_file
openssl ciphers ALL:eNULL awk -v w=RC4 !($0~w) RS=: ORS=:
openssl ciphers ALL:eNULL awk -v w=RC4 ($0~w) RS=: ORS=:
openssl des3 -s -a -l -t -i -n /pritom/uaeyha_com.sql -o -u -t /pritom/a.ss -p -a -s -s pass:pritom
openssl dgst -s -h -a -1 $filename sed s/^.*= //
openssl enc -d -a -e -s -- -2 -5 -6 -- -c -b -c -a -s -a -l -t -i -n test.txt
openssl enc -n -o -s -a -l -t -a -e -s -- -1 -2 -8 -- -c -b -c -i -n test -o -u -t test.enc -p
openssl ocsp -w -h -a -t -e -v -e -r
openssl pkcs12 -e -x -p -o -r -t -o -u -t `basename $f .pem`.p12 -i -n -k -e -y $f -i -n $f -c -e -r -t -f -i -l -e ./myca.pem -p -a -s -s -w -o -r -d pass:myPass basename $f .pem
openssl rsa -p -u -b -o -u -t ...
openssl s_client -c -o -n -n -e -c -t imap.gmail.com:993 -c -r -l -f
openssl s_client -c -o -n -n -e -c -t pop.gmail.com:995 -q -u -i -e -t
openssl x509 -e -n -d -d -a -t -e -n -o -o -u -t -i -n file.pem
openssl x509 -i -n cacert.pem -n -o -o -u -t -t -e -x -t
openssl x509 -p -a -s -s -i -n pass:passwd -r -e -q -d -a -y -s 365 -i -n testem/2.csr -s -i -g -n -k -e -y testem/2.key -o -u -t testem/2.crt
openvt -c 2 sh myprogram.sh
optind = 0
option = bash -c cmd "$1" "$2" | sed "s/x/y/" sub
options = $fields + $defaults
oraclecommand
org/apache/xml/serialize/OutputFormat
orig_file = PRC_19_000011061354_01147_20110323.gz
os.environ leftsquarebrc c rightsquarebrc  = value
osacript path/to/applescript.scpt
osascript -e POSIX path of (path to frontmost application) xargs basename
osascript -e Tell application "System Events" to display dialog "Enter the network password:" **with hidden answer** default answer "" -e text returned of result
osascript -e Tell application "Terminal" to do script "osascript ~/Scripts/reset_simulator.applescript"
osascript -e display notification "$var2"
osascript -e display notification "'"$var2"'"
osascript -e do shell script "/path/to/script args" with administrator privileges
osascript -e long user name of (system info)
osascript -e system version of (system info)
osascript -e tell app "System Events" to display dialog "Things are broke \r \rPress OK to launch Google" buttons {"Cancel", "OK"}
osascript -e tell app "System Events" to display dialog with delay "10" "Running Health Check \r \rPlease allow 30 seconds or more to complete." giving up after 10 with title "Health Check"
osascript -e tell application "System Events" to get name of (processes where background only is false)
osascript -e tell application "System Events" to keystroke '$1'
osascript -e tell application "Terminal" to do script "cd /"
osascript -e tell application "Terminal" to do script "echo hello"
osascript -e tell application "Terminal" to quit
osascript -e tell application "terminal" -e do script "cd /path/to/direcory; output/b.o" -e end tell
osascript ~/Scripts/reset_simulator.applescript
osascript ~/Scripts/reset_simulator.applescript
other_command
out =`python --version` python --version
out@cleanup
outlook.exe /c ipm.note
outlook.exe /c ipm.note /a filename
outlook.exe /c ipm.note /m someone@microsoft.com
outlook.exe /c ipm.note /m someone@microsoft.com
output $(ls) ls
output = %x{bash -l -i -c repository_root}
output = `casperjs myscript.js '#{url}'` casperjs myscript.js #{url}
output = `phantomjs rasterize.js http://raphaeljs.com/polar-clock.html clock.png` phantomjs rasterize.js http://raphaeljs.com/polar-clock.html clock.png
output.dir=C:Test_Results
p
p ls -a -l
p.StartInfo.Arguments = " + path + "
p.StartInfo.Arguments = -c -z -f
p.StartInfo.Arguments = @ + path + 
p.StartInfo.Arguments = czf
p4 delete filename
p4 describe -s 100 101 102 103
p4 fstat -T headRev  leftsquarebrc file rightsquarebrc 
p4 have  leftsquarebrc file rightsquarebrc 
p4 login -s find gg
p4 set P4PORT=perforce:1669
p4 sync -f //depot/project/...#0
p4 sync -n
p4 sync {//tree1/a/b/c/...,//tree2/d/e/...}@1234
pBuffer: array leftsquarebrc 0..2400 rightsquarebrc  of AnsiChar
package
packageArchetype.java_server
pacman -Q -q grep -q -w package pasman -S package
pacman -S --noconfirm base-devel
pacman -S --quiet --noprogressbar --noconfirm base-devel
pacman -S -u -p grep -v -c ^(::| )
pacman -S bash-completion
pactl list source-outputs
pactl list sources
padSpaces TEST 10
pandoc -f -m -a -r -k -d -o -w -n -_ -s -t -r -i -c -t -+ -h -a -r -d -_ -l -i -n -e -_ -b -r -e -a -k -s -t markdown_strict
pandoc -s -S YOURTEXTFILE -o YOURDOC.docx
parallel --colsep   ssh {1} prog {2} {3} ... :::: argfile
parallel --gnu -n 10 find {} -n -a -m -e regex ::: *
parallel --gnu echo {} ::: A B C
parallel --gnu screen -d -m -S t1 bash -c 'echo {} 2 rightanglebrc &1 | tee {}.txt' ::: hi bye
parallel --gnu var="{}"; /some/binary "${var:0:6}/$var" ::: 20131017 20131018
parallel --load 100% ./intensiveCommand ::: 1 2 3 ::: 1 2 3
parallel --pipe --block 2M grep foo
parallel --pipe --header : my_program
parallel --pipe --sshlogin server.example.com,server2.example.net grep foo
parallel --pipe sed 's#^(@.*)_( leftsquarebrc 12 rightsquarebrc ).*#1/2#'
parallel --timeout 30 -j 0 while ! nc -vz localhost {}; do sleep 1; done; echo {} is open ::: {4000..4004}
parallel --xapply python interleave.py  leftanglebrc (zcat {1})  leftanglebrc (zcat {2}) |gzip  rightanglebrc  {=1 s/_R1.txt.gz/_interleave.txt.gz/=} ::: *R1.txt.gz ::: *R2.txt.gz
parallel --xapply python interleave.py {1} {2}  rightanglebrc  {=1 s/_R1.txt/_interleave.txt/=} ::: *R1.txt ::: *R2.txt
parallel -N 1 --pipe python -m -j -s -o -n -. -t -o -o -l
parallel -N 4 --xapply printf "%s\n%s\n" {1} {2} :::: file1 :::: file2
parallel -a hosts echo -n {}; ping -c1 {} |egrep -o -m 1 "\( leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc ^\(\r\n rightsquarebrc *\)"
parallel -a table_file.tsv --colsep \t cmd -o {2} -i {1}
parallel -j 20 seq 1000 | parallel -j 40 -I I ssh server{} 'cd /blah/; ./script.sh I' ::: {1..20}
parallel -j 4 -- php script.php  rightanglebrc  rightanglebrc  output.txt php script.php  rightanglebrc  rightanglebrc  output.txt php script.php  rightanglebrc  rightanglebrc  output.txt php script.php  rightanglebrc  rightanglebrc  output.txt php script.php  rightanglebrc  rightanglebrc  output.txt
parallel -j 4 ./sim -r -- 1 2 3 4 5 6 7 8 ...
parallel -j 4 php script.php -- 1 2 3 4 5
parallel ...
parallel ./myscript {1} ::: {1..100}
parallel ./run {1}  rightanglebrc  {1}_out ::: {1..10}
parallel ::: ${cmds leftsquarebrc @ rightsquarebrc }
parallel du ::: */*
parallel echo ::: ${V leftsquarebrc @ rightsquarebrc }
parallel grep -f {} infile ::: vailtar_*
parallel if  leftsquarebrc  -s {}  rightsquarebrc  ; then cmd_to_run {}; fi ::: $cur_archive_path/log.{1..3660}
parallel script.pl --input {3} --output {3.}.out --otherargs range:{1}-{2} ::::  leftanglebrc (ls | awk 'NR==1 {print $2}')  leftanglebrc (ls | awk 'END {print $2}')  leftanglebrc (ls) ls awk NR==1 {print $2} ls awk END {print $2} ls
parallel var=$(printf "%.5d" {}); echo test_$var ::: $(seq 0 3) seq 0 3
parallel_commands cmd arg0 arg1 arg2 other_cmd arg0 arg2 arg3
parallel_commands sleep 1 sleep 2 sleep 3 sleep 4
param-test foo
param1=abc param2=xyz /home/abhijeet/sample1.sh
params = mv /full_path_to_folder_source/*.nib /full_path_to_folder_target/
params leftsquarebrc 1 rightsquarebrc  = {print "1" $0}
parens like this
parent/working
parse-integer string :start 1
parse_args $@
parse_command_line
partial read-line-with-prompt Enter date: 
particular_script true
passwd
passwd $username
passwd --stdin username
passwd someuser
paste
paste
paste  leftanglebrc ( command1 )  leftanglebrc ( command2 ) command1 command2
paste  leftanglebrc (./progA)  leftanglebrc (./progB) ./progA ./progB
paste  leftanglebrc (awk '{print $1}' file1 )  leftanglebrc (awk '{print $3}' file2 )  leftanglebrc (awk '{print $7}' file3)  leftanglebrc (awk '{print $1}' file4) awk {print $1} file1 awk {print $3} file2 awk {print $7} file3 awk {print $1} file4
paste  leftanglebrc (awk '{print $1}' file2) file1  leftanglebrc (awk '{print $2, $3, $4}' file2) awk {print $1} file2 awk {print $2, $3, $4} file2
paste  leftanglebrc (awk -F , '/Aname/{for(i=1;i leftanglebrc =NF;i++) print $i,","}' file.csv)  leftanglebrc (awk -F , '/Bname/{for(i=1;i leftanglebrc =NF;i++) print $i,","}' file.csv)  leftanglebrc (awk -F , '/Cname/{for(i=1;i leftanglebrc =NF;i++) print $i}' file.csv) awk -F , /Aname/{for(i=1;i leftanglebrc =NF;i++) print $i,","} file.csv awk -F , /Bname/{for(i=1;i leftanglebrc =NF;i++) print $i,","} file.csv awk -F , /Cname/{for(i=1;i leftanglebrc =NF;i++) print $i} file.csv
paste  leftanglebrc (awk -F, 'NR%4==2 { print $NF }' file)  leftanglebrc (awk 'NR%4!=0 { printf "\"%s\",", $0; next } { printf "\"%s\"\n", $0 }' file) awk -F -, NR%4==2 { print $NF } file awk NR%4!=0 { printf "\"%s\",", $0; next } { printf "\"%s\"\n", $0 } file sort sed s/ leftsquarebrc ^" rightsquarebrc *//
paste  leftanglebrc (awk -F, '{print $1}' file1)  leftanglebrc (awk -F, '{print $2}' file2) awk -F -, {print $1} file1 awk -F -, {print $2} file2
paste  leftanglebrc (cut -d " " -f1 file1)  leftanglebrc (cut -d " " -f2 file2) cut -d   -f 1 file1 cut -d   -f 2 file2
paste  leftanglebrc (cut -f1 file1)  leftanglebrc (cut -f3 file2) cut -f 1 file1 cut -f 3 file2 process
paste  leftanglebrc (echo -e "this\tis\ttab\tseparated")  leftanglebrc (echo "this is your comment") echo -e thististtabtseparated echo this is your comment
paste  leftanglebrc (find . -maxdepth 1 -printf "%M %u %c %p\n")  leftanglebrc (find . -maxdepth 1 -exec du -s {} \; | cut -f1 ) find . -maxdepth 1 -printf %M %u %c %pn find . -maxdepth 1 -exec du -s {} ; cut -f 1 column -t
paste  leftanglebrc (shuf a.txt)  leftanglebrc (shuf b.txt) shuf a.txt shuf b.txt
paste  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2 awk {"date --date=\"" $5 ":00:00\" +%I%P" |& getline $5; print $1 " " $4 " " $2 " " $5 }
paste  leftanglebrc (sort file1)  leftanglebrc (sort file2) sort file1 sort file2 awk {print $1,$4,$2,$5}
paste $i D2/${i/D1\//} awk { printf "%s\t%s\t%s\t%s\n", $1, $5, $4, $8 }
paste --delimiter   file1 file2
paste --delimiter   file1 file2
paste --delimiters ; file1 file2
paste -d    leftanglebrc (cut -d ' ' -f 1 file1) file2 cut -d   -f 1 file1
paste -d    leftanglebrc (ls -1)  leftanglebrc (echo "XXX") ls -1 echo XXX
paste -d   FILE FILE
paste -d   file  leftanglebrc (rev file) rev file
paste -d   file1 file2
paste -d  /path/to/letters /path/to/numbers
paste -d  leftanglebrc (echo "$A")  leftanglebrc (echo "$B") echo $A echo $B
paste -d , file leftsquarebrc 123 rightsquarebrc  cut -d , -f 1,2,3,5,6,8
paste -d - 
paste -d -   leftanglebrc (paste -sd'   \n' file1)  leftanglebrc (paste -sd'   \n' file2) paste -s -d -  -  -  -n file1 paste -s -d -  -  -  -n file2 tr   \n
paste -d -  A.txt B.txt
paste -d -  file1 file2
paste -d -  ips.txt names.txt
paste -d -  output1 output2
paste -d -,
paste -d -,  leftanglebrc (awk '{print $1}' file.txt)  leftanglebrc (awk '{print $1}' anotherf.txt) awk {print $1} file.txt awk {print $1} anotherf.txt
paste -d -,  leftanglebrc (awk -F, '{print $2}' file)  leftanglebrc (awk -F, '{print $3}' file) awk -F -, {print $2} file awk -F -, {print $3} file
paste -d -,  leftanglebrc (cut -d, -f 3,7 f1) f2 cut -d -, -f 3,7 f1
paste -d -,  leftanglebrc (cut -f1 -d' ' file.txt)  leftanglebrc (cut -f1 -d' ' anotherf.txt) cut -f 1 -d -  file.txt cut -f 1 -d -  anotherf.txt
paste -d -,  leftanglebrc (echo "$var1")  leftanglebrc (echo "$var2") echo $var1 echo $var2
paste -d -,  leftanglebrc (sed 's/\r$//' f1 | cut -d, -f 3,7)  leftanglebrc (sed 's/\r$//' f2) sed s/\r$// f1 cut -d -, -f 3,7 sed s/\r$// f2
paste -d -,  leftanglebrc (seq $(wc -l  leftanglebrc input.txt))  leftanglebrc (cut -d, -f 2- input.txt) seq $(wc -l  leftanglebrc input.txt) wc -l cut -d -, -f 2- input.txt
paste -d -, $(ls ~/Desktop/*.txt | awk -F/ '{print $NF"/"$0}' | sort -n | cut -d/ -f2-) ls ~/Desktop/*.txt awk -F -/ {print $NF"/"$0} sort -n cut -d -/ -f -2 --
paste -d -, -s file
paste -d -, /tmp/list1 /tmp/list2 awk {print NR "," $0}
paste -d -, a_props.txt a.txt awk -v PROP=age -v FS=, {for (i=1; i leftanglebrc =NF/2; i++) if ($i == PROP) print $(NF/2+i)}
paste -d -: f1  leftanglebrc (perl -pe '$\="\n"x($c=()=/ leftsquarebrc a-z rightsquarebrc +/g)'  leftanglebrc f2) perl -p -e $\="\n"x($c=()=/ leftsquarebrc a-z rightsquarebrc +/g)
paste -d -: test leftsquarebrc 1-3 rightsquarebrc .csv sed -e -s -/ -^ -: -/ -, -: -/ -e -s -/ -: -: -/ -: -, -: -/ -g -e -s -/ -: -: -/ -: -, -: -/ -g -e -s -/ -: -$ -/ -: -, -/ -e -s -/ -: -/ -, -/ -g
paste -d -@ alpha num sed s/@/ blah /
paste -d -T file... sed -e -s -/ -^ -T -/ -E -T -/ -e -s -/ -T -T -/ -T -E -T -/ -g -e -s -/ -T -T -/ -T -E -T -/ -g -e -s -/ -T -$ -/ -T -E -/ -e -s -/ -T -/ -S -/ -g
paste -d -n /tmp/file1 /tmp/file2
paste -d -t paste.file.txt $(perl -anF'\t|\n' -e'$n=@F-1if!$n;for(0..$n){push@{$$m leftsquarebrc $_ rightsquarebrc },$F leftsquarebrc $_ rightsquarebrc }' 'END{print map{join"\t",@$_,"\n"}@$m}' input.txt) perl -a -n -F -t -| -n -e -$ -n -= -@ -F -- -1 -i -f -! -$ -n -; -f -o -r -( -0 -. -. -$ -n -) -{ -p -u -s -h -@ -{ -$ -$ -m - leftsquarebrc  -$ -_ - rightsquarebrc  -} -, -$ -F - leftsquarebrc  -$ -_ - rightsquarebrc  -} END{print map{join"\t",@$_,"\n"}@$m} input.txt perl -n -e {while ( leftanglebrc  rightanglebrc ) {$line = $_; $line =~ s/\t/,/g; print "$line";}} sed s/\"//g
paste -d -| inputfile anotherfile awk !/^0/{gsub(/^.*\|/,"");print}
paste -d :
paste -d : file1.txt file2.txt file3.txt
paste -d \n F1 F2
paste -d \n SupposedToSend.txt Recieved.txt GotReplyFor.txt uniq -c grep -v ^   3
paste -d \n filea fileb
paste -d | 1.txt 2.txt 3.txt. 4.tx
paste -d ~ file1 file2 sed s/~/,,/
paste -s -d -  -n input.txt
paste -s -d -  file
paste -s -d -  file
paste -s -d -+ infile bc
paste -s -d -,
paste -s -d -,
paste -s -d -, file
paste -s file* -d -, sed s/^/thisistheresult/
paste /path/to/names.txt  leftanglebrc (sort -R /path/to/emails.txt) sort -R /path/to/emails.txt
paste 1  leftanglebrc (cat 2 3 4 | sort -R) cat 2 3 4 sort -R
paste D1/file1.txt D2/file1.txt awk { printf "%s\t%s\t%s\t%s\n", $1, $5, $4, $8 }
paste File_1 File_2 awk {min = $4; if ($2  leftanglebrc  $4){min = $2;} max = $5; if ($2  rightanglebrc  $5){max = $2;}print $1"\t"min"\t"max;}
paste a.txt  leftanglebrc (shuf b.txt) shuf b.txt
paste a.txt b.txt sed -n /\( leftsquarebrc 0-9 rightsquarebrc \+\) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+\1/p
paste a.txt b.txt sed /\( leftsquarebrc 0-9 rightsquarebrc \+\) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+\1/d
paste awk {$1=$1; print OFS $0 OFS} OFS=|
paste awk {print $2, $3, "=", $1, "times"}
paste c1 c2 awk { printf("var %s = some_function(%s);\n", $1, $2); }
paste c1 c2 awk {print $1 + $2}
paste dat1.txt  leftanglebrc (cut -d" " -f2- dat2.txt) cut -d -  -f -2 -- dat2.txt
paste data1 data2 awk {print ($1 + $3), $4}
paste f1 f2 f3 awk {print "xyz"$1, $2$3"xyz", "xyz"}
paste file.txt anotherf.txt
paste file1 file2
paste file1 file2
paste file1 file2
paste file1 file2 awk {print "TEST CASE " $3 "  " $4 / $9}
paste file1 file2 awk {print $1,$4,$2,$5}
paste file1 file2 sort cut -f 2
paste file1.txt file2.txt
paste file2 file1
paste out1 out2 grep -v \..
paste seq 16
paste seq.txt A.txt sort tmp2.txt sed s/^ leftsquarebrc 0-9 rightsquarebrc *s//
paste sort -k -1 -8 -, -1 -8 -g xargs -n 6
paste testA.txt testB.txt testC.txt sed -e s/\t/ : /g
paste text1 text2 read file1 file2 diff $file1 $file2
patch original.txt diffs.patch
patch server.xml mydiff.patch
path = /home/user/prefix_.$var._suffix/bar
path =~ s/% leftsquarebrc da-f rightsquarebrc  leftsquarebrc da-f rightsquarebrc //gi
path foomatic/featurizer
path to users folder
path/to/file --
path/to/myscript.clj
path/to/run_sftp.sh
path/to/your/webdirectory/obj/Debug/Package/PackageTmp/
path1=/home/folder echo hello web
pathApplication Name.appref-ms arg1,arg2,arg3
pattern = #^(\d+)\s+(.*)\s+(\d+)$#
pattern { action }
pattern-list
pause
pause
pax hello hello
pax ibase=16;obase=2;A41EB86E184207262C12F66E7C480577 bc tr -d \\\n
pbpaste
pbpaste egrep -o  leftsquarebrc ^$ rightsquarebrc + bash
pbpaste egrep -o  leftsquarebrc ^$ rightsquarebrc + eval $LINE
pbpaste node
pbpaste tr a-zA-Z n-za-mN-ZA-M pbcopy
pcregrep --exclude_dir ^abc|cde$ -r alpha .
pcregrep -M  leftanglebrc activity leftsquarebrc \s\S rightsquarebrc *?MainActivity leftsquarebrc \s\S rightsquarebrc * leftanglebrc \/activity rightanglebrc  file
pcregrep -M (?s) leftanglebrc activity.*?MainActivity.*? leftanglebrc \/activity rightanglebrc  file
pcregrep -M (^\s*\*\s*\ leftsquarebrc  \ rightsquarebrc  leftsquarebrc ^\* rightsquarebrc +?(\w*\: leftsquarebrc ^\* rightsquarebrc +\d$)|( leftsquarebrc ^\* rightsquarebrc + leftsquarebrc . rightsquarebrc com leftsquarebrc . rightsquarebrc au$)) file1
pcregrep -M (foo(\n*.*?){0,4}bar)?(bar(\n*.*?){0,4}foo)? filename
pcregrep -M (foo.*(.*\n){0,4}.*?bar)?(bar.*(.*\n){0,4}.*?foo)? filename
pcregrep -M -n -i ^ leftsquarebrc ^\S\n rightsquarebrc *?\w+\s+\w+?\s*\( leftsquarebrc \w-0-9,/* \s rightsquarebrc *\)\s*\{$
pcregrep -M ;*R*.*thingtosearchfor*R*.*;.*
pcregrep -o (? leftanglebrc =_ )( leftsquarebrc ^( rightsquarebrc +) /tmp/foo
pd_dump prod-db -U postgres date +%d-%m-%y
pdcp -w node leftsquarebrc 10-12 rightsquarebrc  /local/file /remote/dir/
pdfinfo $i grep Title
pdfinfo $i grep Title
pdfinfo pdffile.pdf grep Pages awk {print $2}
pdfopt test.pdf test.opt.pdf
pdftk $(ls | sort -n) cat output combinewd2.pdf ls sort -n
pdftk $1 dump_data awk /NumberOfPages/{sub(/^ leftsquarebrc ^: rightsquarebrc *:/, ""); print}
pdftk ${args leftsquarebrc @ rightsquarebrc } ...
pdftk `find . -name "*.pdf"` cat output output.pdf find . -name *.pdf
pdftk `ls | sort -n` cat output combinewd2.pdf ls sort -n
pdftk form.pdf fill_form data.fdf output out.pdf flatten
pdftk new.*.pdf output output.pdf
pdftk pdffile.pdf dump_data grep NumberOfPages awk {print $2}
pdftk template.pdf stamp words.pdf output out.pdf
pdftk thefile.pdf cat 4-10 output pages_4-10_from_thefile.pdf
pdftotext OGD-Metadaten_2_1_2012_10.pdf
pdftotext myfile.pdf grep pattern
pdsh -w node leftsquarebrc 10-12 rightsquarebrc  command
pdsh -w node10,node11,node12 command
pear -V sed /^PEAR Version: /s///
pear channel-discover pear.phpunit.de pear.symfony-project.com
perf stat -B dd if=/dev/zero of=/dev/null count=1000000
perl -0 -0 -n -e print $1,"\n" while (/"((select|insert|update|delete|alter).*?)"/sig); file
perl -0 -0 -n -e print join " ",split(/\s+/,$1),"\n" while (/"((select|insert|update|delete|alter).*?)"/sig); file
perl -0 -0 -n -e while (/"((select|insert|update|delete|alter).*?)"/sig){$x=$1;$x=~s/\n//g;$x=~s/\s+/ /g;print "$x\n";}; file
perl -0 -1 -0 -0 -p -i -e -s -/ -+ -. -* -/ -+ -/ datafile
perl -0 -1 -0 -0 -p -i -e -s -/ -^ -( -( -? -: -. -* -n -) -{ -2 -} -. -* -? -+ -) -. -* -/ -$ -1 -/ datafile
perl -0 -1 -0 -0 -p -i -e -s -/ -^ -( -? -: -. -* -n -) -{ -2 -} -. -* -? -+ -K -. -* -/ -/ datafile
perl -0 -7 -7 -7 -l -n -i -e BEGIN{open(F,pop(@ARGV))||die;$b="#blockbegin";$e="#blockend";local $/;$d= leftanglebrc F rightanglebrc ;close(F);}s|\n$b(.*)$e\n||s;print;print "\n$b\n",$d,"\n$e\n" if eof; edited.file input.file
perl -0 -7 -7 -7 -n -E -s -a -y -  -/ -^ -0 -+ -$ -/ -  -? -  -y -e -s -  -: -  -n -o file
perl -0 -7 -7 -7 -n -e -p -r -i -n -t -  -/ -^ -0 -+ -$ -/ -  -? -  -y -e -s -  -: -  -n -o file
perl -0 -7 -7 -7 -p -e -s -/ -n -s -* -( -? -= -X -Y -Z -) -/ -  -/ -g file
perl -0 -7 -7 -7 -p -e s/ leftanglebrc !--BEGIN-- rightanglebrc \n(?:(?! leftanglebrc !--END-- rightanglebrc \n).)*?\ leftsquarebrc this\ rightsquarebrc .*?\n leftanglebrc !--END-- rightanglebrc \n/ leftsquarebrc new content rightsquarebrc \n/s in.txt
perl -0 -7 -7 -7 -p -i -e s/\n{3,}/\n\n/g
perl -0 0 -l -a -n -e next unless @F % 2; $, = " "; print reverse @F yourfilenamehere
perl -0 0 -l -p -e s|\r?\n| |g file
perl -0 0 -n -e $n=tr/\n/\n/; if ($n rightanglebrc $m) {$m=$n; $max=$_}; END {print $max} file
perl -0 0 -p -e $.==3 and $_=`cat file2`."\n" file1
perl -0 0 -p -e s/(click here  leftsquarebrc ^) rightsquarebrc *)//g inputfile
perl -0 0 -p -e s/\n//g; $_.="\n"
perl -0 777 -i -. -o -r -i -g -p -e s/foo/bar/gs file1 file2 file3
perl -0 777 -i -p -e s/(-name\s*riak@).*/${1}$riak_ip/g vm.args
perl -0 777 -i -p -e s/(\ leftsquarebrc mysqld\ rightsquarebrc  leftsquarebrc ^\^ rightsquarebrc +)/$1\nsometext/g test.txt
perl -0 777 -i -p -e s/\n/~~/g; s/"~~("|$)/"\n$1/g; file
perl -0 777 -i -p -e s{^\t*### leftsquarebrc \S\s rightsquarebrc *?^\t*###}{"foo"}gme file.coffee
perl -0 777 -n -e print $1 if /^--- START ---\s*\n(.*?)--- END ---/s file
perl -0 777 -n -e print join("\n", map {$_- rightanglebrc  leftsquarebrc 1 rightsquarebrc } sort {$a- rightanglebrc  leftsquarebrc 0 rightsquarebrc   leftanglebrc = rightanglebrc  $b- rightanglebrc  leftsquarebrc 0 rightsquarebrc } map { leftsquarebrc length, $_ rightsquarebrc } split /\n/), "\n" file
perl -0 777 -n -e s/FROM\nLINE\n/TO\nTHIS\n/g;print
perl -0 777 -n -l -e print "$1\n" while m/^\s*(\w+\s+\w+?\s*\( leftsquarebrc \w0-9,*\s rightsquarebrc +\)\s{)/gm
perl -0 777 -n -l -w -e while (m#/(\*?)(.*?)\1/#sg) { print $2 } input.txt
perl -0 777 -p -e -s -/ - leftanglebrc  -p - leftsquarebrc  -^ - rightanglebrc  - rightsquarebrc  -* - rightanglebrc  -/ - leftanglebrc  -p - rightanglebrc  -/ -g input.html
perl -0 777 -p -e s/,(?=\s*\);)//g
perl -0 777 -p -e s/\ leftsquarebrc .*?\ rightsquarebrc /!!!/gs myfile
perl -0 777 -p -e s/\\\n/\\n/g
perl -0 777 -p -e s/\n(?!\d{5}\b)/ /g yourfile
perl -0 777 -p -e s/\n\?\n//g file
perl -0 777 -p -e s/\n\s+/ /gms
perl -0 777 -p -e s/my first line\nmy second line\nmy third line\nthe fourth\n5th and last\n//g paragraph_file
perl -0 777 -p -e s|(nn//supercrazytag)|nvoid func_new();$1|g myfile.c
perl -0 777 -p -i -w -e s/"flags" : { leftsquarebrc ^" rightsquarebrc +"CP" : 1 leftsquarebrc ^" rightsquarebrc +"prop_name" : "ID" leftsquarebrc ^: rightsquarebrc +: "SKU"/"flags" : {          "SET" : 1       },       "prop_name" : "ID",       "rule" : "SKU+ProductId"/gms; *_input.xml
perl -0 777 -w -p -e s/\n //g MANIFEST.MF
perl -C -I -O -E -D -p -e s/\p{Block=CJK_Unified_Ideographs}/$& /g filename
perl -C -I -O -p -e s/ leftsquarebrc ^ leftsquarebrc :print: rightsquarebrc  rightsquarebrc //g
perl -C -S -A -D -i -. -o -r -i -g -M -c -h -a -r -n -a -m -e -s -= -: -f -u -l -l -p -e tr leftsquarebrc \N{FULLWIDTH COLON} rightsquarebrc  leftsquarebrc : rightsquarebrc  file1
perl -C -S -A -D -i -. -o -r -i -g -M -c -h -a -r -n -a -m -e -s -= -: -f -u -l -l -p -e tr leftsquarebrc \N{FULLWIDTH EXCLAMATION MARK}\N{FULLWIDTH QUOTATION MARK}\{FULLWIDTH NUMBER SIGN}\N{FULLWIDTH DOLLAR SIGN}\N{FULLWIDTH PERCENT SIGN}\N{FULLWIDTH AMPERSAND}\{FULLWIDTH APOSTROPHE}\N{FULLWIDTH LEFT PARENTHESIS}\N{FULLWIDTH RIGHT PARENTHESIS}\N{FULLWIDTH ASTERISK}\N{FULLWIDTH PLUS SIGN}\N{FULLWIDTH COMMA}\N{FULLWIDTH HYPHEN-MINUS}\N{FULLWIDTH FULL STOP}\N{FULLWIDTH SOLIDUS} rightsquarebrc  leftsquarebrc \N{EXCLAMATION MARK}\N{QUOTATION MARK}\N{NUMBER SIGN}\N{DOLLAR SIGN}\N{PERCENT SIGN}\{AMPERSAND}\N{APOSTROPHE}\N{LEFT PARENTHESIS}\N{RIGHT PARENTHESIS}\N{ASTERISK}\N{PLUS SIGN}\N{COMMA}\{HYPHEN-MINUS}\N{FULL STOP}\N{SOLIDUS} rightsquarebrc  file1
perl -C -S -A -D -i -. -o -r -i -g -p -e tr leftsquarebrc \x{FF1A} rightsquarebrc  leftsquarebrc : rightsquarebrc  file1
perl -C -S -A -D -p -e s/foo/bar/g
perl -C -S -D -n -E $seen{$1}++ while /(\pP)/g; END { say "$_ $seen{$_}" for keys %seen } sometextfile.utf8
perl -C -i -p -e s/s\x{0323}/s/g 1.htm
perl -E say for sort { substr($a, -11, 3) cmp substr($b, -11, 3) } glob "*.RST.txt"
perl -F - leftsquarebrc  - leftanglebrc  - rightanglebrc  - rightsquarebrc  -l -a -n -e $state = $F leftsquarebrc 2 rightsquarebrc  if /OpState/; print "$F leftsquarebrc 2 rightsquarebrc  is $state" if / leftanglebrc Name rightanglebrc / file
perl -F - leftsquarebrc  -, -s - rightsquarebrc  -+ -l -a -n -e print "@F leftsquarebrc 0..2,$_ rightsquarebrc " for 3..$#F file
perl -F -, -l -a -n -e $"=","; print "@F leftsquarebrc 4..9 rightsquarebrc " file
perl -F -, -l -a -n -e @A=sort @F; print join(",",@A) input_file uniq
perl -F -, -l -a -n -e print join(",",sort @F) input_file uniq
perl -F -. -l -a -n -E $,="."; say grep /\S/, @F leftsquarebrc 0..3 rightsquarebrc  inputfile
perl -F -/ -t -/ -a -n -l -e -$ -f -? -( -$ -l -= -$ -H -{ -$ -F - leftsquarebrc  -0 - rightsquarebrc  -} -) -& -& -p -r -i -n -t -( -j -o -i -n -t -, -$ -l -, -@ -F - leftsquarebrc  -1 -. -. -$ -# -F - rightsquarebrc  -) -: -( -$ -H -{ -$ -F - leftsquarebrc  -2 - rightsquarebrc  -} -= -$ -_ -) -; -e -o -f -& -& -$ -f -+ -+ f1.txt f2.txt
perl -F -/ -t -/ -a -n -l -e BEGIN{$f=1}if($f==1){$H{$F leftsquarebrc 2 rightsquarebrc }=$_;$f++ if eof}else{$l=$H{$F leftsquarebrc 0 rightsquarebrc };print join("\t",$l,@F leftsquarebrc 1..$#F rightsquarebrc ) if defined$l} f1.txt f2.txt
perl -F -/ -| -~ -| -/ -a -n -e $"="|~|"; if ($F leftsquarebrc 2 rightsquarebrc  =~ /password/) { $F leftsquarebrc 0 rightsquarebrc ="# $F leftsquarebrc 0 rightsquarebrc "; $F leftsquarebrc 3 rightsquarebrc  = "\n"; } print "@F"; datafile
perl -F -: -a -n -E $\=:; say reverse @F input-file
perl -F -: -a -n -E say join( ':',  reverse @F) input-file
perl -F -: -l -a -n -e print $F leftsquarebrc 0 rightsquarebrc 
perl -F -W -* -( -? -: -M -A -T -| -G -H -T -| -P -U -D -) -: -W -* -l -a -n -e -s -h -i -f -t -@ -F -; -  -s -| - rightanglebrc  -s -* -$ -| -| -f -o -r -@ -F -; -  -p -r -i -n -t -  -j -o -i -n -, -  -, -@ -F file
perl -F -_ -a -n -e -p -r -i -n -t -  -u -n -l -e -s -s -  -$ -x -{ -$ -F - leftsquarebrc  -1 - rightsquarebrc  -} -+ -+
perl -F -l -a -n -e $H{$F leftsquarebrc 0 rightsquarebrc ." ".$F leftsquarebrc 1 rightsquarebrc }=$H{$F leftsquarebrc 0 rightsquarebrc ." ".$F leftsquarebrc 1 rightsquarebrc }." ".$F leftsquarebrc 2 rightsquarebrc ."_".$F leftsquarebrc 3 rightsquarebrc ;if(eof){foreach(keys %H){print $_,$H{$_}}} your_file
perl -F -l -a -n -e $h{$F leftsquarebrc 0 rightsquarebrc }++;if($h{$F leftsquarebrc 0 rightsquarebrc } rightanglebrc =2){print $_;} file1 file2
perl -F -l -a -n -e if($.!=1){print $F leftsquarebrc 2 rightsquarebrc } your_file
perl -F -t -l -a -n -e print join ",", map {s/"/""/g; /^ leftsquarebrc \d. rightsquarebrc +$/ ? $_ : qq("$_")} @F 
perl -F -{ -# -# -} -l -a -n -e print $F leftsquarebrc 0 rightsquarebrc  if($F leftsquarebrc 0 rightsquarebrc =~/\bword\b/) infile
perl -F -| -a -n -e BEGIN{$f=0}if(/Rice/){print;$f=1}END{print "not found\n" unless($f)} your_file
perl -F -| -i -l -a -p -e if ($F leftsquarebrc 8 rightsquarebrc  eq "ROBERT") { s/JAMES/FUDIK/g } /dummy/chaat/h2
perl -F -| -l -a -n -e print /\|/ ? join "|", @F leftsquarebrc 0,1,5 rightsquarebrc  : $_ file
perl -I -$ -P -W -D -/ -p -2 p2/maxconnect4.pl arg1 arg2 arg3 arg4
perl -I -. -/ -a -s -s -m -b -l -e -r -/ assembler/asm.pl $1
perl -M -$ -m -o -d -u -l -e -e exit
perl -M -$ -m -o -d -u -l -e -e print $module::VERSION . 'n'
perl -M -5 -. -0 -1 -0 -w -p -i -. -b -a -k -e -o -u -r -  -$ -a -r -t -i -c -l -e -; -  -s -/ - leftanglebrc  -t -e -x -t -  -i -d -= -K - leftsquarebrc  -0 -- -9 - rightsquarebrc  -+ -/ -+ -+ -$ -a -r -t -i -c -l -e -/ -g -e hugetextfile
perl -M -C -G -I -i -p -e BEGIN{undef $/;} s/ leftanglebrc pre rightanglebrc (.*?) leftanglebrc /pre rightanglebrc /' leftanglebrc pre rightanglebrc ' . $1 . ' leftanglebrc /pre rightanglebrc ' . '$new_start_string' . CGI::escape($1) . '$new_end_string'/esmg /my/path
perl -M -D -a -t -a -E say for @Data::tests
perl -M -D -a -t -a -e print "$_\n" for @Data::tests
perl -M -D -a -t -e -T -i -m -e -e -p -r -i -n -t -  -D -a -t -e -T -i -m -e -- - rightanglebrc  -t -o -d -a -y -( -t -i -m -e -_ -z -o -n -e -  -= - rightanglebrc  -  -l -o -c -a -l -) -- - rightanglebrc  -s -u -b -t -r -a -c -t -( -d -a -y -s -  -= - rightanglebrc  -  -1 -) -- - rightanglebrc  -s -t -r -f -t -i -m -e -( -$ -A -R -G -V - leftsquarebrc  -0 - rightsquarebrc  -) -; -- $myDate
perl -M -D -i -g -e -s -t -: -: -S -H -A -1 -= -s -h -a -1 -_ -h -e -x -l -e print sha1_hex  leftanglebrc  rightanglebrc  secure.txt
perl -M -D -i -g -e -s -t -: -: -S -H -A -= -s -h -a -1 -_ -h -e -x -l -e print sha1_hex leftanglebrc  rightanglebrc  secure.txt
perl -M -H -T -M -L -: -: -E -n -t -i -t -i -e -s -C -S -p -e -$ -_ -  -= -  -e -n -c -o -d -e -_ -e -n -t -i -t -i -e -s -( -$ -_ -, -  -& - leftanglebrc  -' -)
perl -M -H -T -M -L -: -: -E -n -t -i -t -i -e -s -C -S -p -e -$ -_ -  -= -  -e -n -c -o -d -e -_ -e -n -t -i -t -i -e -s -( -$ -_ -, -  -& - leftanglebrc  -)
perl -M -H -T -M -L -: -: -E -n -t -i -t -i -e -s -C -S -p -e -$ -_ -  -= -  -e -n -c -o -d -e -_ -e -n -t -i -t -i -e -s -( -$ -_ -, -  -q -{ -& - leftanglebrc  - rightanglebrc  -' -} -)
perl -M -H -T -M -L -: -: -E -n -t -i -t -i -e -s -C -S -p -e -$ -_ -  -= -  -e -n -c -o -d -e -_ -e -n -t -i -t -i -e -s -( -$ -_ -, -  -q -{ -& - leftanglebrc  -} -)
perl -M -L -W -P -: -: -S -i -m -p -l -e -e print get ($ARGV leftsquarebrc 0 rightsquarebrc ) =~ / leftanglebrc $ARGV leftsquarebrc 1 rightsquarebrc  rightanglebrc (.*?) leftanglebrc /$ARGV leftsquarebrc 1 rightsquarebrc  rightanglebrc /; http://www.example.com/ title
perl -M -L -W -P -: -: -S -i -m -p -l -e -e print get ($ARGV leftsquarebrc 0 rightsquarebrc ) =~ /$ARGV leftsquarebrc 1 rightsquarebrc /; http://www.example.com/  leftanglebrc body rightanglebrc (.*?) leftanglebrc /body rightanglebrc 
perl -M -L -W -P -: -: -S -i -m -p -l -e -e print head("http://stackoverflow.com")- rightanglebrc as_string
perl -M -M -a -t -h -: -: -R -o -u -n -d -w -e print round $ARGV leftsquarebrc 0 rightsquarebrc  12.49
perl -M -M -o -d -u -l -e -; -S -E -T -U -P -  -C -O -D -E -n -e LOOP CODE
perl -M -O -= -D -e -p -a -r -s -e -p -e s/(\d+)/localtime($1)/e
perl -M -P -O -S -I -X -e -m -y -  -@ -d -  -= -  -l -o -c -a -l -t -i -m -e -  -t -i -m -e -- -8 -6 -4 -0 -0 -; -  -- -- -$ -d - leftsquarebrc  -4 - rightsquarebrc  -; -  -p -r -i -n -t -  -s -t -r -f -t -i -m -e -  -$ -A -R -G -V - leftsquarebrc  -0 - rightsquarebrc  -, -  -@ -d -; -- $myDate
perl -M -P -O -S -I -X -e -p -r -i -n -t -  -s -t -r -f -t -i -m -e -  -$ -A -R -G -V - leftsquarebrc  -0 - rightsquarebrc  -, -  -l -o -c -a -l -t -i -m -e -  -t -i -m -e -- -8 -6 -4 -0 -0 -; -- $myDate
perl -M -P -O -S -I -X -e print POSIX::strftime "%Y%m%d\n", localtime((stat $ARGV leftsquarebrc 0 rightsquarebrc ) leftsquarebrc 9 rightsquarebrc ) yourfile
perl -M -P -O -S -I -X -e print POSIX::strftime("%d/%m/%y", localtime) . "\n"
perl -M -S -u -b -: -: -U -p -l -e -v -e -l -e print "$Sub::Uplevel::VERSION"
perl -M -T -e -r -m -: -: -A -N -S -I -C -o -l -o -r -e print colored("yellow on_magenta","yellow on_magenta"),"\n" sed -r s/x1B leftsquarebrc ( leftsquarebrc 0-9 rightsquarebrc {1,2}(; leftsquarebrc 0-9 rightsquarebrc {1,2})?)? leftsquarebrc m|K rightsquarebrc //g perl -l -p -e s/ leftsquarebrc ^ leftsquarebrc :print: rightsquarebrc  rightsquarebrc //g
perl -M -T -i -m -e -: -: -H -i -R -e -s -e Time::HiRes::usleep 500000
perl -M -U -R -I -l -e chomp($url =  leftanglebrc  rightanglebrc ); print +{URI- rightanglebrc new($url)- rightanglebrc query_form}- rightanglebrc {offset}
perl -M -U -R -I -n -l -e print +{URI- rightanglebrc new($_)- rightanglebrc query_form}- rightanglebrc {offset}
perl -M -s -t -r -i -c -t -M -w -a -r -n -i -n -g -s -M -5 -. -0 -1 -4 -M -D -a -t -a -: -: -D -u -m -p -e -r -e say Data::Dumper- rightanglebrc Dump(  leftsquarebrc  \@ARGV  rightsquarebrc ,  leftsquarebrc  q leftsquarebrc *ARGV rightsquarebrc   rightsquarebrc  ) $(pass_array locDbList) pass_array locDbList
perl -a -F -, -l -n -e print if ! $seen{$F leftsquarebrc 1 rightsquarebrc }++ data.txt
perl -a -n -e $f=$F leftsquarebrc 0 rightsquarebrc .$F leftsquarebrc 1 rightsquarebrc ; print "$k{$f}$_" if $k{$f}; $k{$f}=$_; Sample_hg19_mapped.bed intersect.RData
perl -a -n -e $table{$F leftsquarebrc 1 rightsquarebrc  or next} += $F leftsquarebrc 0 rightsquarebrc ; END {print "$table{$_} $_\n" for keys %table}
perl -a -n -e ++$i; chomp; $line.=$_; if($i==5) {print "$line\n"; $line=""; $i=0;} else {$line.=","} 
perl -a -n -e -$ -F - leftsquarebrc  -0 - rightsquarebrc  -  -= -~ -  -s -/ -_ - leftsquarebrc  -^ -_ - rightsquarebrc  -* -z -/ -/ -; -  -p -r -i -n -t -  -u -n -l -e -s -s -  -$ -x -{ -$ -F - leftsquarebrc  -0 - rightsquarebrc  -} -+ -+
perl -a -n -e -p -r -i -n -t -  -$ -F - leftsquarebrc  -2 - rightsquarebrc  -; -  -p -r -i -n -t -  -n -  -i -f -  -e -o -f example*
perl -a -n -e next if /^\s*$/; $f=$F leftsquarebrc 0 rightsquarebrc .$F leftsquarebrc 1 rightsquarebrc ; print "$k{$f}$_" if $k{$f}; $k{$f}=$_; Sample_hg19_mapped.bed intersect.RData
perl -a -n -e print "$F leftsquarebrc 0 rightsquarebrc \n" x $F leftsquarebrc 1 rightsquarebrc  file
perl -a -n -e print if $. == 1 || grep {$_  rightanglebrc  50} @F leftsquarebrc 1..$#F rightsquarebrc  file.txt
perl -a -n -e print if $F leftsquarebrc 4 rightsquarebrc 
perl -a -n -e print if($.!=1 && $F leftsquarebrc 1 rightsquarebrc !=0) your_file
perl -d -e 1
perl -e  my @st=stat("'"$name"'"); print time - $st leftsquarebrc 9 rightsquarebrc ;
perl -e $,=" ";print +(A..Z) echo $i
perl -e $0="something_else"; do "/path/to/wrapper"
perl -e $ENV{"property.name"} = "property.value"; system "bash"
perl -e $count=1; foreach ( leftanglebrc  rightanglebrc ) { s/(my-company-review)(\/ leftanglebrc \/link rightanglebrc )/$1$count$2/ && $count++; print; }
perl -e $count=1; foreach ( leftanglebrc  rightanglebrc ) { while(s/(my-company-review)(\/ leftanglebrc \/link rightanglebrc )/$1$count$2/) {$count++;} print; }
perl -e $linehex=unpack("H*",pack("B*",$line));print $hex
perl -e $s=1;while( leftanglebrc STDIN rightanglebrc ){if(/^of_interest /){$s=1;$f=0;$x="";}if(($s==1)&&/QUALIFIED_CLOCK/){$f=1;}if(/^\)$/){if($s==1){$x.=$_;}if($f==1){print$x;}$s=0;next;}if($s==1){$x.=$_;}}
perl -e (chomp, s/^\s*\?//) && system "svn", "add", $_ for qx(svn st)
perl -e @a=`ls`;m/nw=(\d+)\.a=(\d+)(?{print"$1\t$2\n"})/ for@a
perl -e exit(!(grep(m{^/usr/bin$},split(":", $ENV{PATH})))  rightanglebrc  0) echo found it
perl -e for (1..1000) { my $fh; if(open($fh," rightanglebrc &=$_")) {$fh{$_}=$fh }  } print map{"$_\n"} keys %fh
perl -e foreach ( leftanglebrc  rightanglebrc ) { $count leftanglebrc 2 && s/hello/goodbye/ && $count++; print; }
perl -e local $/; $_ =  leftanglebrc  rightanglebrc ; s/ style=\047 leftsquarebrc ^\047 rightsquarebrc *\047//g; print fileA
perl -e local($/); $data =  leftanglebrc  rightanglebrc ; $data =~ s/stringstart(.*?)stringend//gms; print $data
perl -e open my $log_fh, " rightanglebrc ", "/tmp/dir/log" or die; while (1) { print $log_fh $x++,"\n"; } 
perl -e print "$ENV{\"Clear Workspace\"}\n";
perl -e print "$_\n" for sort { substr($a, -11, 3) cmp substr($b, -11, 3) } glob "*.RST.txt"
perl -e print "A" x 1024 . "\0\0\0\1" ./buf_overflow
perl -e print "X" x $size
perl -e print 'X' x $size
perl -e print chr(0xff) x 1000
perl -e print crypt($ARGV leftsquarebrc 0 rightsquarebrc , "Password") $pass
perl -e print crypt($ARGV leftsquarebrc 0 rightsquarebrc , "Password") $password
perl -e print qq{Hello Worldn}
perl -e print qx(bash -c "type -t e")
perl -e print sort {(split '/', $a) leftsquarebrc -1 rightsquarebrc   leftanglebrc = rightanglebrc  (split '/', $b) leftsquarebrc -1 rightsquarebrc }  leftanglebrc  rightanglebrc 
perl -e print time, "\n"
perl -e print( ( sort { -M $a  leftanglebrc = rightanglebrc  -M $b } @ARGV ) leftsquarebrc 0 rightsquarebrc , "\n"); name_pattern.o*
perl -e s/$2/$3/g
perl -e s/( leftsquarebrc .* rightsquarebrc )(.*)/\2\1/g
perl -e s/(\ leftsquarebrc  leftsquarebrc ^\ rightsquarebrc  rightsquarebrc *\ rightsquarebrc )(.*)/\2\1/g
perl -e s/(\ leftsquarebrc .*\ rightsquarebrc )(.*)/\2\1/g
perl -e s/. leftsquarebrc ^\. rightsquarebrc *$/rename $_, uc($`) . $&/e for @ARGV *.txt
perl -e use Net::Ping; $timeout=0.5; $p=Net::Ping- rightanglebrc new("icmp", $timeout) or die bye ; print "$host is alive \n" if $p- rightanglebrc ping($host); $p- rightanglebrc close;
perl -e use Text::Wrap; print wrap("", "  ",  leftanglebrc STDIN rightanglebrc ); nail -s Build completed $towhom
perl -e while ( leftanglebrc  rightanglebrc ) { s/( leftsquarebrc A-Z rightsquarebrc +)/{$1}/g if (/title = {.*},/); print; }
perl -e while( leftanglebrc  rightanglebrc ){my @dt = split(/,/);chomp $dt leftsquarebrc 1 rightsquarebrc ; my $tmp=`fgrep $dt leftsquarebrc 0 rightsquarebrc  two.csv`; my @rs = split(/,/,$tmp);chomp $rs leftsquarebrc 1 rightsquarebrc ; print $dt leftsquarebrc 0 rightsquarebrc ,$dt leftsquarebrc 1 rightsquarebrc ,$rs leftsquarebrc 1 rightsquarebrc ,"\n" } one.csv
perl -e while($line= leftanglebrc  rightanglebrc ) { if ($line=~ /versionName\s*=\s*"( leftsquarebrc ^" rightsquarebrc +)"/) { print "$1\n";}}
perl -e while(1) { fork(); sleep(1); }
perl -e {use Text::CSV_XS; my $csv=Text::CSV_XS- rightanglebrc new(); open my $fh, " leftanglebrc ", "file.csv" or die "file.csv: $!"; my $sum = 0; while (my $row = $csv- rightanglebrc getline ($fh)) {$sum += $row- rightanglebrc  leftsquarebrc 4 rightsquarebrc }; close $fh; print "$sum\n";}
perl -i -. -b -a -c -k -u -p -p -e s{ ( \b assets_version: \s+ ) (\d+) $ }{ $1 . ( 1 + $2 ) }xmse; your.yml
perl -i -. -b -a -k -l -a -n -e $F leftsquarebrc 2 rightsquarebrc  =~ s/match/subst/; print join q/ /, @F filename
perl -i -. -b -a -k -n -e $a++; s/\((.*?)\)/{$1$a}/g; print myfile.txt
perl -i -. -b -a -k -n -e $a=int(rand()*2000); s/\((.*?)\)/{$1$a}/g; print myfile.txt
perl -i -. -b -a -k -n -l -e s~^(\s++)$~\\$1~; /\S/ and print file.txt
perl -i -. -b -a -k -p -a -l -e $F leftsquarebrc 2 rightsquarebrc  =~ s/match/subst/ && $_="@F" filename
perl -i -. -b -a -k -p -e s/"(\d+)"/$1/g input.txt
perl -i -. -b -a -k -p -e s/"(d+)"/$1/g input.txt
perl -i -. -b -a -k -p -e s/\@(.*?)\@/$ENV{$1}/g somefile
perl -i -. -b -a -k -p -e s/^ AX.*\K rightanglebrc $//mg yourfile
perl -i -. -b -a -k -p -e s/^LogFormat (.*) combined$/replacement/ httpd.conf
perl -i -. -b -c -k -p -e -s -/ -$ -/ -y -o -u -r -T -e -x -t -2 -/ -  -i -f -  -e -o -f list.txt
perl -i -. -o -r -i -g -p -e s/\t/  /g *
perl -i -0 -7 -7 -7 -p -e -s -/ -n -( -? -! -E -u -r -o -p -e -| -z -) -/ -  -/ -g file
perl -i -a -n -e print if $F leftsquarebrc 3 rightsquarebrc  != 1 file
perl -i -c -o -p -y -_ -* flip-flop.pl data.txt
perl -i -l -a -n -e $F leftsquarebrc 11 rightsquarebrc  = sprintf("ABCDE%06d", ++$i); print "@F" file1.txt file2.txt ..
perl -i -l -a -n -e {print $F leftsquarebrc scalar(@F)-1 rightsquarebrc } your_file
perl -i -l -n -e if(/-(\d*)\.txt/){print if($1 rightanglebrc 20130910130000)} your_file
perl -i -l -n -e print unless(/\ leftanglebrc \!--fff309--\ rightanglebrc /.../\ leftanglebrc \!--\/fff309--\ rightanglebrc /)
perl -i -l -n -e unless(/\|$/){$line=$line.$_}else{print $line." $_";undef $line} your_file
perl -i -p -e -s -/ -b -t -h -i -s -w -o -r -d -b -/ -t -h -a -t -w -o -r -d -/ -g $(find . -name *.html) find . -name *.html
perl -i -p -e -s -/ -t -o -k -e -n -/ -f -o -o -n -b -a -r -n -b -a -z -n -/ -g file
perl -i -p -e BEGIN {$/ = \1024} s/FROM_STRING/TO_STRING/ .. undef file.txt
perl -i -p -e BEGIN{$/=undef} s/MARKER\n\n/MARKER\n/g input
perl -i -p -e chomp if eof filename
perl -i -p -e chomp unless eof; s/\t//g inputfile
perl -i -p -e s/ /_/g if 1 .. 10
perl -i -p -e s/(? leftanglebrc =MY_PASSWORD=)PASSWORD/MY_SECRET_PASS/ file
perl -i -p -e s/(? leftanglebrc =\w)\s*\*(?=\w)/\* /g
perl -i -p -e s/(? leftanglebrc =\|) +|^ +//g file
perl -i -p -e s/(? leftanglebrc =export leftsquarebrc   rightsquarebrc PASSORD=).*// /tmp/script.bash
perl -i -p -e s/,(?= leftsquarebrc ^\ leftsquarebrc \ rightsquarebrc  rightsquarebrc *\ rightsquarebrc )/|/g file
perl -i -p -e s/MY_PASSWORD=\K PASSWORD/MY_SECRET_PASS/x file
perl -i -p -e s/\ leftsquarebrc .*?\ rightsquarebrc (*SKIP)(*F)|,/|/g file
perl -i -p -e s/\.\d\b//g if $. == 2 file.txt
perl -i -p -e s/\btext\b.*?\K\btext\b/changed/; file.txt
perl -i -p -e s/\n// if $. == 11 file
perl -i -p -e s/^export PASSORD=\K.*// file
perl -i -p -e s/pat1/pat2/g if 10 .. 19 file
perl -i -p -e s{(? leftanglebrc !#)(?=start /opt/nimsoft/bin/niminit "" "start")}{#} /etc/rc.tcpip
perl -i -p -e s{^(#define(\s+) leftsquarebrc A-Z rightsquarebrc {3}_(\d+))(?=\s*\/\/|\s*$)}{$1$2$3} file_to_modify.h
perl -i -p -e s| leftanglebrc !-- Mirrored from (.*?) -- rightanglebrc \n|| $@
perl -i -p -e s|APP_NAME|\Q${APP_NAME}|g txtfile.txt
perl -i -p -e y|\r||d script.pl
perl -i -w -p -e -s -/ -o -n -c -l -i -c -k -= -i -m -g -= -d -o -c -u -m -e -n -t -. -g -e -t -E -l -e -m -e -n -t -B -y -I -d -( -' -i -m -g -_ -1 -' -) -; -  -i -m -g -. -s -t -y -l -e -. -d -i -s -p -l -a -y -  -= -  -( -i -m -g -. -s -t -y -l -e -. -d -i -s -p -l -a -y -  -= -= -  -' -n -o -n -e -' -  -? -  -' -b -l -o -c -k -' -  -: -  -' -n -o -n -e -' -) -; -r -e -t -u -r -n -  -f -a -l -s -e -/ -/ test.html
perl -i -~ -p -e s|^\s*listen\s*=\s*\K /var/run/php5-fpm\.sock|127.0.0.1:9000|x file
perl -i convert.pl inputfile.txt
perl -i script.pl file
perl -l -0 -0 -p -e $q = y|\n\r leftsquarebrc  rightsquarebrc | |d  rightanglebrc 3 && q("); s|(\S+)\s*|$1 = $q|; $_.= $q file
perl -l -a -n -e  if (/\ leftsquarebrc /) { print "$p $_"; undef $p} else { print $p if defined $p; $p = $_; } input
perl -l -a -n -e $, = " "; $F leftsquarebrc 1 rightsquarebrc  .= " 0"; print @F
perl -l -a -n -e $F leftsquarebrc 0 rightsquarebrc =~s/(.*)\..*/$1/g;print $F leftsquarebrc 0 rightsquarebrc  your_file
perl -l -a -n -e $F leftsquarebrc 2 rightsquarebrc  =~ s/(..)(?!$)/$1:/g; print qq|@F| infile
perl -l -a -n -e $el=$F leftsquarebrc 3 rightsquarebrc  if(/Exported Layer/); print "$el: $F leftsquarebrc 3 rightsquarebrc " if(/Total Polygons/);
perl -l -a -n -e $state = (split(/ leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc /)) leftsquarebrc 2 rightsquarebrc  if /OpState/; print ((split(/ leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc /)) leftsquarebrc 2 rightsquarebrc  . " is $state.") if / leftanglebrc Name rightanglebrc / file
perl -l -a -n -e -p -r -i -n -t -  -j -o -i -n -  -t -, -@ -F - leftsquarebrc  -2 -. -. -$ -# -F - rightsquarebrc  file
perl -l -a -n -e -p -r -i -n -t -f -  -% -1 -0 -s -, -$ -_ -  -f -o -r -  -@ -F - leftsquarebrc  -2 -. -. -$ -# -F - rightsquarebrc  -; -p -r -i -n -t -  -; file
perl -l -a -n -e for $i (1, 3) {@nums = $F leftsquarebrc $i rightsquarebrc  =~ /(\d+)/g; for $num (@nums) {$F leftsquarebrc $i rightsquarebrc  =~ s/$num.{$num}//}}; print join("\t", @F)
perl -l -a -n -e print $F leftsquarebrc 1 rightsquarebrc  file.txt
perl -l -a -n -e print if $F leftsquarebrc 1 rightsquarebrc   rightanglebrc = 42 filename
perl -l -a -n -e print if $F leftsquarebrc 2 rightsquarebrc  =~ /some pattern/ filename
perl -l -a -n -e {print $1 if m!(content.*? leftanglebrc /div rightanglebrc )!} input
perl -l -a -n -e {print $F leftsquarebrc scalar(@F)-1 rightsquarebrc } your_file
perl -l -a -n -e {print join(" ", $F leftsquarebrc 0 rightsquarebrc , hex($F leftsquarebrc 1 rightsquarebrc )-0x5212cb03ca115ac0, hex($F leftsquarebrc 2 rightsquarebrc ) - 0x3665fb5f1ac1)} input
perl -l -e -$ -s -  -+ -= -  -$ -_ -  -f -o -r -  -@ -A -R -G -V -; -  -E -N -D -  -{ -  -p -r -i -n -t -  -$ -s -  -}
perl -l -e -p -r -i -n -t -  -r -a -n -d - rightanglebrc  -. -5 -? -+ -+ -$ -a -: -- -- -$ -b -  -f -o -r -  -1 -. -. -1 -0
perl -l -e @r=@ARGV; print $r leftsquarebrc -M $r leftsquarebrc 0 rightsquarebrc   rightanglebrc  -M $r leftsquarebrc 1 rightsquarebrc  rightsquarebrc  file1.txt file2.txt
perl -l -e for (1..5) { print "   -server$_"} tee -a file.yaml
perl -l -e opendir($d, "."); print scalar readdir($d) for (1..10);
perl -l -e while( leftanglebrc  rightanglebrc ){$h{$1}++ if m/^(\S+)#?/} print "$_ #$h{$_}" for keys %h input.txt
perl -l -n -a -e $F leftsquarebrc 0 rightsquarebrc  =~ s% leftsquarebrc :/ rightsquarebrc %-%g; $F leftsquarebrc -1 rightsquarebrc  =~ s/(.)/ord($1) . ","/ge; chop $F leftsquarebrc -1 rightsquarebrc ; print "@F";
perl -l -n -e $_=~m/^ leftsquarebrc ^\s rightsquarebrc *\s leftsquarebrc number=\d rightsquarebrc *( leftsquarebrc ^\/\ rightanglebrc  rightsquarebrc *)/g;print $1 your_file
perl -l -n -e $_=~m/^ leftsquarebrc ^\s rightsquarebrc *\s( leftsquarebrc ^\/\ rightanglebrc  rightsquarebrc *)/g;print $1 your_file
perl -l -n -e $c++ if $p and /^\+/; $p = /^-/ }{ print $c FILE
perl -l -n -e $p=$_ if s/ leftanglebrc  //; print "$p.$_" if s/ rightanglebrc  // file.txt
perl -l -n -e ($a,$b,$c,$d,$e) = /^( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +);( leftsquarebrc ^; rightsquarebrc +)$/g; $b =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; $d =~ s|(\d\d?)/(\d\d?)/(\d{4})|$3-$2-$1|g; print "$a;$b $c;$d $e"; input.txt
perl -l -n -e /\(\K leftsquarebrc ^\) rightsquarebrc +/ and print $& file
perl -l -n -e /^115,55/ ... /^\d/ and /^,123:400/ or next;print $ARGV;close ARGV *udr
perl -l -n -e @m = $_ =~ /(ab leftsquarebrc a-z rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc +xyz)/g; print join(" ",@m) if @m inputfile
perl -l -n -e BEGIN { print "---" } if (/^=/) { $new = 1; next } if ($new) { s/^/- /; $new = 0 } else { s/^/  / } print paste
perl -l -n -e if ( m{"DeviceId":" ( leftsquarebrc ^" rightsquarebrc +) "}xms ) { print if not $seen{$1}++; }
perl -l -n -e if (/needle/) { print $ARGV; close ARGV } haystack.txt haystack2.txt
perl -l -n -e if(/(.*?\")(.*)/){$b=$2;$a=$1;$a=~s/, leftsquarebrc \s rightsquarebrc /,/g;print "$a$b"} your_file
perl -l -n -e if(/queue=/){m/\(queue=(.*?)\)/g;print $1} your_file
perl -l -n -e print " leftsquarebrc ! rightsquarebrc  Unnatural priority" if /priority="(\d+)"/ && $1  rightanglebrc  1000
perl -l -n -e print "$2,$1" if /.*? (\d+) (".*?")/
perl -l -n -e print $& if m!\d+(?=/(udp|tcp))! /usr/share/nmap/nmap-services
perl -l -n -e print $1 if(/email:(.*?)\@gmail.com/)
perl -l -n -e print $1." | ".$2 if(/(\d+\.\d+\.\d+\.\d+).*VULNERABILITY:(.*)/) your_file
perl -l -n -e print $ARGV if(/needle/) haystack.txt
perl -l -n -e print if / leftsquarebrc \x00-\x09\x0b\x0c\x0e-\x1f\x7f-\xff rightsquarebrc /
perl -l -n -e print substr($_,0,80) your_file
perl -l -n -e print; last if $_  rightanglebrc  2**32
perl -l -n -e push @{$l leftsquarebrc ($.-1) % 3 rightsquarebrc }, $_; }{ print "@$_" for @l data.txt column -t
perl -l -n -e unless(/\|$/){$line=$line.$_}else{print $line." $_";undef $line} your_file
perl -l -n -w -e $a+=()=/\Q(*)/g; }{ print $a; file.txt
perl -l -p -a -F -, -e $_ = join(",", sort(@F))
perl -l -p -e $_ = "$1_\U$1\E__$2" if / (\w+) \| (\w+)/x file
perl -l -p -e s/.{80}\K.*//s your_file
perl -m -T -e -x -t -: -: -C -S -V -e $csv = Text::CSV- rightanglebrc new({ sep_char= rightanglebrc "|",binary= rightanglebrc 1,auto_diag = rightanglebrc  1 } ) || die; open my $fh, " leftanglebrc ", $ARGV leftsquarebrc 0 rightsquarebrc  or die; while (my $row = $csv- rightanglebrc getline($fh)) { $file = cleaner($row- rightanglebrc  leftsquarebrc 1 rightsquarebrc )."/".cleaner($row- rightanglebrc  leftsquarebrc 0 rightsquarebrc ); print "mkdir $file; touch $file/cans.avi\n"; } sub cleaner($) { my($f) = @_; $f =~ s/\W/_/g; $f;} ~/tmp/genxinventory-current.csv
perl -m -b -i -g -i -n -t -m -P -O -S -I -X -e print( POSIX::strftime("%Y-%m-%d %T",localtime( ($ARGV leftsquarebrc 0 rightsquarebrc -210866803200000000)/1000000 ) )."\n") 212186319010244541
perl -n -0 15 -i -. -b -a -k -e print if $.  leftanglebrc  355686 || $.  rightanglebrc  1048576 trips3.csv
perl -n -E -B -E -G -I -N -{ -o -p -e -n -  -m -y -$ -f -h -, - leftanglebrc  -, -s -h -i -f -t -; -m -y -@ -a -= -m -a -p -  -l -c -, -m -a -p -/ -( -w -+ -) -/ -g -, - leftanglebrc  -$ -f -h - rightanglebrc  -; -@ -h -{ -@ -a -} -= -( -0 -) -x -@ -a -; -c -l -o -s -e -$ -f -h -} -e -x -i -s -t -s -$ -h -{ -$ -_ -} -a -n -d -$ -h -{ -$ -_ -} -+ -+ -f -o -r -  -m -a -p -  -l -c -, -/ -( -w -+ -) -/ -g -} -{ -f -o -r -( -k -e -y -s -% -h -) -{ -s -a -y -$ -_ -: -  -$ -h -{ -$ -_ -} -; -$ -s -+ -= -$ -h -{ -$ -_ -} -} -s -a -y -T -o -t -a -l -: -  -$ -s word.list input.txt
perl -n -E -s -a -y -  -f -o -r -  -/ - leftsquarebrc  -^ -x -0 -9 -x -0 -A -x -2 -0 -- -x -7 -E - rightsquarebrc  -/ -g file sort -u
perl -n -E s/" leftsquarebrc ^" rightsquarebrc +"//mg;s/"$//;print java-sql.txt
perl -n -E say $1 while m!/id(\d{9})!g input-file
perl -n -a -F -: -e $sum += $F leftsquarebrc 1 rightsquarebrc  if m/^Total:/; END { print $sum; } $@
perl -n -a -e `echo $F leftsquarebrc 1 rightsquarebrc   rightanglebrc  rightanglebrc  $F leftsquarebrc 0 rightsquarebrc ` input_file
perl -n -a -e print if $F leftsquarebrc 2 rightsquarebrc  == 0 data
perl -n -a -w -e print "@F leftsquarebrc 1 .. $#F rightsquarebrc ", $F leftsquarebrc 0 rightsquarebrc  eq "A" ? "\t" : "\n"
perl -n -e !eof() ? eval "\$$_" : s/(? leftanglebrc !\S)(?= leftsquarebrc  leftsquarebrc :punct: rightsquarebrc \d rightsquarebrc *\$)((?:\$\w+| leftsquarebrc  leftsquarebrc :punct: rightsquarebrc \d rightsquarebrc +|\s+)+)(?!\S)/\@{ leftsquarebrc $1 rightsquarebrc }/g && print eval qq{"$_"}; fox.txt
perl -n -e $,=";"; !/^#/ && print ++$i,$_ filename
perl -n -e $. ==40 and print file
perl -n -e $count++; -e END { print "$count\n"; } somefile
perl -n -e $count++; END { print "$count\n"; } somefile
perl -n -e $n = /^End / and $l = $_ or print; $b and print $l; $b = $n
perl -n -e $on=1 and next if /REGEXP/; if ($on) { print; $blank++ if /^\s*$/; last if $blank == 2 } file.csv
perl -n -e $on=1 if /REGEXP/; if ($on) { print; $blank++ if /^\s*$/; last if $blank == 2 } file.csv
perl -n -e $s = tr/ //; print "$s:$_" if length  rightanglebrc  1 && $s  leftanglebrc  10 bigfile.txt
perl -n -e $table{$2} += $1 if /(\d+)\s+(.+)/; END {print "$table{$_} $_\n" for keys %table}
perl -n -e $v=$1 if /\$RELEASE\s*=\s*\047( leftsquarebrc 0-9. rightsquarebrc +)\047/; $devlevel=$1 if /\$DEV_LEVEL\s*=\s*\047( leftsquarebrc 0-9. rightsquarebrc +)\047/; if (defined $v && defined $devlevel) { print "$ARGV: Release=$v Devlevel=$devlevel\n"; last; }
perl -n -e ($a,$b,$c,@r)=(chomp and split /\t/); print "$a\t$b\t$c\t$_\n" for @r in.txt
perl -n -e -. -. -. -  -p -r -i -n -t -  -$ -0 -, -  -q -q -{ -t -} -  -. -. -.
perl -n -e -. -. -. -  -p -r -i -n -t -  -$ -0 -, -  -t -  -. -. -.
perl -n -e -. -. -. -  -p -r -i -n -t -  -$ -0 -, -  -t -  -. -. -.
perl -n -e -/ -t -e -s -t -( -d -+ -) -/ -  -& -& -  -p -r -i -n -t -  -$ -1
perl -n -e -B -E -G -I -N -{ -$ -/ -= -} -E -N -D -{ -@ -p -e -r -r -| -| -d -i -e -N -o -  -e -r -r -o -r -  -f -o -u -n -d -; -( -$ -d -a -t -e -) -= -$ -p -e -r -r - leftsquarebrc  -0 - rightsquarebrc  -= -~ -/ -^ -( -d -{ -4 -} -- -d -d -- -d -d -  -d -d -: -d -d -: -d -d -) -, -/ -; -p -r -i -n -t -$ -d -a -t -e -n -n -$ -p -e -r -r - leftsquarebrc  -1 - rightsquarebrc  -} -$ -b -= - leftanglebrc  - rightanglebrc  -; -d -e -f -i -n -e -d -$ -b -  -o -r -  -d -i -e -e -m -p -t -y -  -F -H -; -/ -B -a -s -e -S -e -r -v -l -e -t -. -* -? -S -i -t -e -- -1 -0 -2 -/ -  -o -r -  -n -e -x -t -; -@ -p -e -r -r -= -@ -p -  -i -f -  -$ -b -= -~ -/ -^ -T -e -c -h -n -i -c -a -l -D -i -f -f -i -c -u -l -t -i -e -s -E -x -c -e -p -t -i -o -n -: -  -T -D -  -p -a -g -e -  -d -e -l -i -v -e -r -e -d -  -b -y -  -h -a -n -d -l -e -T -h -r -o -w -a -b -l -e -/ -; -@ -p -= -( -$ -_ -, -$ -b -)
perl -n -e -B -E -G -I -N -{ -$ -/ -= -} -E -N -D -{ -p -r -i -n -t -$ -p -r -e -v -_ -e -r -r -} -$ -b -= - leftanglebrc  - rightanglebrc  -; -d -e -f -i -n -e -d -$ -b -  -o -r -  -d -i -e -e -m -p -t -y -  -F -H -; -/ -B -a -s -e -S -e -r -v -l -e -t -. -* -? -S -i -t -e -- -1 -0 -2 -/ -  -o -r -  -n -e -x -t -; -$ -p -r -e -v -_ -e -r -r -= -$ -p -r -e -v -_ -s -e -c -  -i -f -  -$ -b -= -~ -/ -^ -T -e -c -h -n -i -c -a -l -D -i -f -f -i -c -u -l -t -i -e -s -E -x -c -e -p -t -i -o -n -: -  -T -D -  -p -a -g -e -  -d -e -l -i -v -e -r -e -d -  -b -y -  -h -a -n -d -l -e -T -h -r -o -w -a -b -l -e -/ -; -$ -p -r -e -v -_ -s -e -c -= -$ -b
perl -n -e -p -r -i -n -t -f -  -% -0 -2 -X -n -, -  -o -r -d -  -f -o -r -  -/ - leftsquarebrc  -^ -x -0 -9 -x -0 -A -x -2 -0 -- -x -7 -E - rightsquarebrc  -/ -g file sort -u
perl -n -e -p -r -i -n -t -f -  -% -0 -3 -o -n -, -  -o -r -d -  -f -o -r -  -/ - leftsquarebrc  -^ -x -0 -9 -x -0 -A -x -2 -0 -- -x -7 -E - rightsquarebrc  -/ -g file sort -u
perl -n -e / / || print input.txt
perl -n -e / leftanglebrc \/entry rightanglebrc / && print "\n"; / rightanglebrc (.*?) leftanglebrc / && !/ leftanglebrc name rightanglebrc /  && print $1."|"; / leftanglebrc name rightanglebrc / && /name rightanglebrc ?(.*?) leftanglebrc \/.*?(uri rightanglebrc ?)(.*)? leftanglebrc \/uri/ && print $1."|".$3
perl -n -e /^ leftsquarebrc \d  rightsquarebrc +foo/ and print foo
perl -n -e /^name-label .*: (.+)/ and $name = $1; m(0/ip: ( leftsquarebrc 0-9. rightsquarebrc +)) and print "$name $1\n"
perl -n -e @u = m/= rightanglebrc  *(\S+)/g; print " leftsquarebrc  ", join(" , ", sort(@u)), "  rightsquarebrc \n"
perl -n -e BEGIN{ open $F,pop or die $!; %h= leftanglebrc $F rightanglebrc  } print $h{$_} header basefile
perl -n -e chomp; $.%5 && printf "%s", $_ or print "$_\n" file
perl -n -e chomp; @a=split(/\$,\$/); $_ = join("", @a leftsquarebrc 4..($#a-1) rightsquarebrc ); print join("\$,\$", @a leftsquarebrc 0..3 rightsquarebrc , $_, $a leftsquarebrc $#a rightsquarebrc ), "\n"
perl -n -e chomp; if($. % 2){print "$_,";next;} ($m)=/host=\s*( leftsquarebrc ^) rightsquarebrc +)/i; print ((/\bOK\b/ ? "active," :"inactive,"), $m||"unknown","\n") logfile
perl -n -e chomp;@F=split/,/;print "$F leftsquarebrc 0 rightsquarebrc ,$F leftsquarebrc 1 rightsquarebrc ,$F leftsquarebrc 2 rightsquarebrc ,$F leftsquarebrc 3 rightsquarebrc ,,$F leftsquarebrc 4 rightsquarebrc ,,$F leftsquarebrc 5 rightsquarebrc \n"
perl -n -e chomp;print $_," " input.txt
perl -n -e chomp;push @r,$_}{ ($m)=$r leftsquarebrc $_ rightsquarebrc  =~ /host=\s*( leftsquarebrc ^) rightsquarebrc +)/i, print ("$r leftsquarebrc $_-1 rightsquarebrc ,", $m? "active,$m\n":"inactive\n") for grep $_%2, 0..$#r; logfile
perl -n -e for (split(" ", $_)) { $H{$_} = 1 } END { print scalar(keys%H), "\n" }
perl -n -e if ( m/^( leftsquarebrc 0-9- rightsquarebrc +)/ ) { $date = $1; print if ( $date ge "2013-06-01" and $date le "2013-06-15" ) } myfile.txt
perl -n -e if (m/72810/) {s/\n/ /; print} else { print } input.txt
perl -n -e if($_=~m/^(?!.*old).*|^.*?(?: leftsquarebrc a-z rightsquarebrc old|\dold leftsquarebrc a-z\d rightsquarebrc ).*/i){print "$&\n";}
perl -n -e m/asp\.net\s+(.{0,10})/i && print "$1\n" infile
perl -n -e next if $.  leftanglebrc 40; print; last file
perl -n -e next unless /^http:\/\/ leftsquarebrc ^ \/? rightsquarebrc +(\.com|\.co\.uk|\.ca|\.biz)/; print $1, "\n"
perl -n -e print "$.;$_" filename
perl -n -e print "$1 " if /( leftsquarebrc \$ rightsquarebrc  leftsquarebrc 0-9. rightsquarebrc {1,7})/ /home/opmeitle/html/fiesta-one.html
perl -n -e print "$1\n" if ( /.*STRING_1\s*:\s*\"( leftsquarebrc ^" rightsquarebrc *)\".*/) FILE_1
perl -n -e print "$1\n" if (m/image=(.*?)\&/);
perl -n -e print "$_\n" foreach /"((? rightanglebrc  leftsquarebrc ^"\\ rightsquarebrc |\\+ leftsquarebrc ^" rightsquarebrc |\\(?:\\\\)*")*)"/g;
perl -n -e print "$_\n" if /xyz/
perl -n -e print $1 if /M2\{/ .. /\}/ and /Freq:\s*(.*)/ file
perl -n -e print $ARGV if(/needle/) haystack.txt
perl -n -e print if $. rightanglebrc =3 and $. leftanglebrc =5; /etc/passwd
perl -n -e print if $. rightanglebrc =3; last if $. rightanglebrc 5 /etc/passwd
perl -n -e print if ( m/2013-06-02/ .. m/2013-06-15/ ) myfile.txt
perl -n -e print if /\ leftsquarebrc  leftsquarebrc ^\ rightsquarebrc  rightsquarebrc *\ leftsquarebrc / your_file
perl -n -e print if /\bABC100-10\b/ file
perl -n -e print if /^((\d+\.){3})/ and not $seen{$1}++
perl -n -e print if /^foo/ .. /\)\s*$/ file.txt
perl -n -e print if /pattern1/ .. /pattern2/ file
perl -n -e print if /text/ .. /END/
perl -n -e print if m/^(?!.*old).*|^.*?(?: leftsquarebrc a-z rightsquarebrc old|\dold leftsquarebrc a-z\d rightsquarebrc ).*/i
perl -n -e print if s/.*(TEXT)/$1/ .. s/(END).*/$1/
perl -n -e print if tr/3//  rightanglebrc = 5 and tr/10// == 0 myfile.txt
perl -n -e print if($f); $f=1 if(/row4/)
perl -n -e print if(tr/o/o/ == 4) foo_file
perl -n -e print join " ", sort split /\s/ ; print "\n"
perl -n -e print join ' ', sort{a leftanglebrc = rightanglebrc b} split ' '
perl -n -e print join("|",unpack("A17A12A10", $_)), "\n"; input
perl -n -e print tr/ //, ":$_" bigfile.txt
perl -n -e print tr/ //, ":$_" if length  rightanglebrc  1 bigfile.txt
perl -n -e print unless $n = /^End /; $l = $_ if $n ; print $l if $b; $b = $n
perl -n -e print unless $n = /^End$/; print "End\n" if $b; $b = $n
perl -n -e print unless $t and /^TITLE/; $t = /^TITLE/
perl -n -e print unless 1../pattern/
perl -n -e print unpack(B8,$_),$/for split// FILE
perl -n -e print unpack(B8,$_),++$i%8?" ":"\n"for split//;END{print"\n"}
perl -n -e print unpack(B8,$_)for split// FILE
perl -n -e printf "%d-%02d-%02d %s", $ARGV =~ m/_(\d{4})(\d\d)(\d\d)/, $_; *.txt sort -n
perl -n -e printf "%s%s", (" " x 4), $_ test
perl -n -e sub BEGIN { $/="NODE-ID rightanglebrc  "; } { if (/^command1/) { s:$/$::; print "$/$_"; }}
perl -n -e while(/(?:^|\G:\K)(?:(?!.*old) leftsquarebrc ^: rightsquarebrc +| leftsquarebrc ^: rightsquarebrc *?(?: leftsquarebrc a-z rightsquarebrc old|\dold leftsquarebrc a-z\d rightsquarebrc ) leftsquarebrc ^: rightsquarebrc *)/ig){print "$&\n";}
perl -n -l -E say "$_" for (m/\\word\{(.*?)\}/g);
perl -n -l -e -$ -s -  -+ -= -  -$ -_ -; -  -E -N -D -  -{ -  -p -r -i -n -t -  -$ -s -  -}
perl -n -l -e -p -r -i -n -t -  -$ -& -  -i -f -  -m -{ -P -A -T -T -E -R -N -} file.txt
perl -n -l -e print $1 while /( leftsquarebrc 0|1 rightsquarebrc \. leftsquarebrc 0-9 rightsquarebrc {0,2})/g
perl -n -l -e print ++$_
perl -n -l -e print if m{^ leftsquarebrc  leftsquarebrc :ascii: rightsquarebrc  rightsquarebrc +$} inputfile
perl -n -l -w -e print for /(...)/ config.xml
perl -n -l -w -e while (m#/(\*?)(.*?)\1/#g) { print $2 } input.txt
perl -n -w -E print; for my $s (/( leftsquarebrc \t  rightsquarebrc +)/g) { say "Count: ", length $s } input.txt
perl -n script.pl logfile.txt sort -u
perl -p -a -l -e $F leftsquarebrc 3 rightsquarebrc =~s/ leftsquarebrc ., rightsquarebrc /$F leftsquarebrc 2 rightsquarebrc /g;$_=join" ",@F file
perl -p -e $_.= leftanglebrc  rightanglebrc ,s/\n// while /0$/
perl -p -e $_=~s///e
perl -p -e $_=~s///e
perl -p -e $i++ while($i  leftanglebrc  10 && s/pattern/replace/) input
perl -p -e $i++; s{id=""}{id="$i"}
perl -p -e $link++ while( s/href="(?!link\d) leftsquarebrc ^" rightsquarebrc *"/href="link$link"/ ) inFile.html
perl -p -e $match = 1 if s/($TAGS)/ error: $1/; END { exit $match; }
perl -p -e -$ -_ -. -= -  -  -R -e -p -o -r -t -e -r -: -: -s -e -n -d -_ -e -x -c -e -p -t -i -o -n -( -$ -e -) -; -n -  -i -f -  -/ -c -a -t -c -h -  -( -/
perl -p -e -s -/ -& -/ -& -a -m -p -; -/ -g
perl -p -e -s -/ -& -/ -& -a -m -p -; -/ -g -  -s -/ -/ -& -a -p -o -s -; -/ -g
perl -p -e -s -/ -( - leftsquarebrc  - leftsquarebrc  -^ - rightsquarebrc  - rightsquarebrc  -* - rightsquarebrc  -) -( -. -* -) -/ -2 -1 -/ -g
perl -p -e -s -/ -( - leftsquarebrc  -^ - rightsquarebrc  -* -) -( - leftsquarebrc  -^ - rightsquarebrc  -* -| -z -) -/ -U -$ -1 -E -$ -2 -/ -g
perl -p -e -s -/ -( - leftsquarebrc  -^ -' - rightsquarebrc  -* -) -( -' - leftsquarebrc  -^ -' - rightsquarebrc  -* -' -| -z -) -/ -U -$ -1 -E -$ -2 -/ -g
perl -p -e -s -/ -, -d -+ -. -d -+ -. -( -d -+ -. -d -+ -) -( -? -= -, -) -/ -, -$ -1 -. -0 -. -0 -/ -g
perl -p -e -s -/ -^ -( - leftsquarebrc  - leftsquarebrc  -^ - rightsquarebrc  - rightsquarebrc  -* - rightsquarebrc  -) -( -s -* -) -( -. -* -) -/ -$ -3 -$ -2 -$ -1 -/
perl -p -e -s -/ -c -a -t -c -h -( -. -* -n -K -/ -  -  -R -e -p -o -r -t -e -r -: -: -s -e -n -d -_ -e -x -c -e -p -t -i -o -n -( -$ -e -) -; -n -/
perl -p -e /^### (?:END )?EVENT ###$/ or chomp;/### END EVENT ###/ and s/^/\n/
perl -p -e BEGIN{$i = 2} s@^@=HYPERLINK(B${i},C${i})@; $i++ input.txt
perl -p -e BEGIN{%h=("12" = rightanglebrc  "13", "13" = rightanglebrc  "12")} s/(12|13)/$h{$1}/g inputfile
perl -p -e BEGIN{open F,"gac.js";@f= leftanglebrc F rightanglebrc }s#//gac goes here#@f# index.html
perl -p -e BEGIN{printf "%c%c", 0xFF, 0xFE;} s/(.)/\1\0/gs; $@
perl -p -e chomp if eof filename
perl -p -e chomp if eof filename
perl -p -e chomp unless eof; s/\t//g inputfile echo mv
perl -p -e chomp; $_ = ($_ =~ /Type/) ? "\n".$_ : " ".$_
perl -p -e eof&&s/$/\n/ a b c
perl -p -e if (!/^ rightanglebrc /) { tr/N\n//d } elsif ($.  rightanglebrc  1) { $_ = "\n$_" } input-file
perl -p -e print "$ARGV," a b c
perl -p -e print m/(.*);/; s/public int //; s/ref \S+/ref/g; s/(.*);/ {\n\treturn NativeMethods.$1;\n}/ input.txt
perl -p -e s!( leftsquarebrc ^/ rightsquarebrc +)$!lc $1!e
perl -p -e s!(c:\S+)! ($x=$1) =~ y|/|\\|; $x !egi
perl -p -e s#( leftanglebrc VALUE DECIMAL_VALUE=")( leftsquarebrc 0-9. rightsquarebrc +)(" UNIT_TYPE="percent"/ rightanglebrc )#"$1" . ($2 + 0.4) . "$3"#e;
perl -p -e s#//(\S+) goes here#open+F,"$1.js";join"", leftanglebrc F rightanglebrc #e index.html
perl -p -e s#\\ leftsquarebrc ^ \\{ rightsquarebrc +# #g file.txt
perl -p -e s'$OLD_STRING'$NEW_STRING'
perl -p -e s'OLD_STRING'mogga_dev_$%^'
perl -p -e s,(? leftanglebrc = leftanglebrc /li rightanglebrc ) leftanglebrc li rightanglebrc lorem.+? leftanglebrc /li rightanglebrc (?= leftanglebrc li rightanglebrc ),,g inputFile
perl -p -e s,.*/,, file.txt
perl -p -e s,^\ leftsquarebrc ( leftsquarebrc ^ rightsquarebrc  rightsquarebrc +)\ rightsquarebrc \.\ leftsquarebrc ( leftsquarebrc ^ rightsquarebrc  rightsquarebrc +)\ rightsquarebrc ,$1=$2, toto
perl -p -e s/ (\w+) \| /$1_\U$1\E__/x file
perl -p -e s/ leftanglebrc \?xml version="1.0" encoding="ISO-8859-1" \? rightanglebrc //g
perl -p -e s/ leftanglebrc p class="toc0" rightanglebrc /q( leftanglebrc p class="foo" id=").++$n.q(" rightanglebrc )/eg myfile.html
perl -p -e s/ leftsquarebrc ^a-zA-Z0-9 rightsquarebrc //g /dev/urandom dd bs=$num count=1
perl -p -e s/# leftsquarebrc 0-9a-f rightsquarebrc +/$&=~tr%0123456789abcdef%fedcba9876543210%r/ge
perl -p -e s/#(\w+)#/my $x = qx%identify $1%; chomp $x; $x/e
perl -p -e s/( leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc + rightanglebrc )/$1 =~ s(\*)()gr/ge FILE
perl -p -e s/( leftsquarebrc 0-9 rightsquarebrc +)/$1  rightanglebrc  20 ? $1 + 1 : $1/ge INPUT_FILE
perl -p -e s/( leftsquarebrc \x00-\x20\\ rightsquarebrc )/sprintf("\\x%02X", ord($1))/eg
perl -p -e s/( leftsquarebrc ^, rightsquarebrc ), (?!Inc|LLC|The|Ltd)/\1\n/g list.txt
perl -p -e s/(.{12})(.{5})(.{5})(.{12})/$1,$2,$3,$4,/
perl -p -e s/(? leftanglebrc !\r)\n// input
perl -p -e s/(? leftanglebrc = leftanglebrc PartitionID rightanglebrc )(.*?)(\d{4})(?:(0 leftsquarebrc 1-9 rightsquarebrc |1 leftsquarebrc 01 rightsquarebrc )|(12))(?= leftanglebrc \/PartitionID rightanglebrc )/sprintf("%s%04d%02d",$1,$2+($4?1:0),$4?1:($3+1))/eg
perl -p -e s/(? leftanglebrc = leftanglebrc td rightanglebrc )((?:(?:\{.*?\})* leftsquarebrc ^{ rightsquarebrc *?)*)(ReplaceMe)(.*)(?= leftanglebrc \/td rightanglebrc )/$1REPLACED$3/g
perl -p -e s/(\d+)\.\s/($1-44).". "/ge file.txt
perl -p -e s/(\d+\.\d+e\d+)/ sprintf("%.1f",$1) /ge filename
perl -p -e s/(^ leftsquarebrc ^\r\n rightsquarebrc *)\n/\1/ input
perl -p -e s/(ref="#)( leftsquarebrc \w\s rightsquarebrc +)(")/ ($x,$y,$z)=($1,$2,$3); $y =~ s{\s}{-}g; $x.$y.$z /eg
perl -p -e s/-\K(\w)/\U$1/g
perl -p -e s/DATA/ "NO" . ++$n /ge file_in
perl -p -e s/Dept:/Role: - Dept:/ unless /Role:/ 1.txt
perl -p -e s/E\K( leftsquarebrc 0-9 rightsquarebrc +)/sprintf "%02d", 1+$1/e file
perl -p -e s/START.*STOP/replace_string/g file_to_change
perl -p -e s/\$_REQUEST\ leftsquarebrc ( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *)\ rightsquarebrc /MYCLASS::myfunction(\1)/g file.php
perl -p -e s/\( leftsquarebrc 0-9 rightsquarebrc \{1,3\}\.\)\{3\} leftsquarebrc 0-9 rightsquarebrc \{1,3\}/** masked ip **/g
perl -p -e s/\*\n//g
perl -p -e s/\@(.*?)\@/$ENV{$1}/g
perl -p -e s/\B(succeeded|running|suspended|killed|prep)//i and $w=$1 and s/$/    $w/ file
perl -p -e s/\P{PosixPrint}//g; tr/ //s; s/ \z//;
perl -p -e s/\\\n// /tmp/line-cont
perl -p -e s/\b(\d{2})-/\1:/g file
perl -p -e s/\d+/$&  rightanglebrc  400 ? $&+13 : $&/ge file
perl -p -e s/\d+/sprintf("%03d",$&)/ge
perl -p -e s/\n/ / if $. == 2 file
perl -p -e s/\n/ / if m/72810/ input.txt
perl -p -e s/\n// if $. == 11 file
perl -p -e s/\n//; s/\r/\r\n/ input
perl -p -e s/\pP/ /g file.txt
perl -p -e s/\r\n|\n|\r/\r\n/g original.csv
perl -p -e s/\s+$//; $_ .= length()  leftanglebrc = 75 ? qq{\n} : q{ } book.txt
perl -p -e s/\t/  /g *
perl -p -e s/\x0// while ($i = index $_, "\x0")  rightanglebrc = 0 and $i  leftanglebrc  14 input-file
perl -p -e s/\{(\d+)\}/sprintf( "{%d}", $1-1)/ge
perl -p -e s/^ AX.*\K rightanglebrc $//mg yourfile
perl -p -e s/^( leftsquarebrc -0-9 rightsquarebrc +)/$1 - 4.91/e your_file
perl -p -e s/^( leftsquarebrc ^: rightsquarebrc +: leftsquarebrc ^: rightsquarebrc +)(? leftanglebrc !Role):/$1 Role: -/ 1.txt
perl -p -e s/^(.*?:.*?)(?:\sRole)?:/$1Role:/ test.txt
perl -p -e s/^(.+ (\d+))$/("$1" "#$2")/
perl -p -e s/^(\S+\s+\S+\s+\S+).+experience\s( leftsquarebrc ^\t rightsquarebrc +?)\s+(\b leftsquarebrc A-Z0-9 rightsquarebrc {2} leftsquarebrc ^\t rightsquarebrc +?|(?:(?!\b leftsquarebrc A-Z0-9 rightsquarebrc {2}) leftsquarebrc ^\t rightsquarebrc )*)\s+\t\s+( leftsquarebrc ^, rightsquarebrc +,).+?(INR.+?PM)\s+.*/\1,\2,\3,\4\5/ file
perl -p -e s/^23\b/X/ file.txt
perl -p -e s/_ leftsquarebrc 0-9 rightsquarebrc +/ /
perl -p -e s/a (.*) b/"a ".`add.sh $1`." b"/eg input.txt
perl -p -e s/bbb\tbbb\n.*/placeholderstring/g foo1.txt perl -p -e s/placeholderstring  ccc\tccc/eee\teee/g
perl -p -e s: leftanglebrc li rightanglebrc lorem.*? leftanglebrc /li rightanglebrc ::
perl -p -e s:{{{(.*?)}}}:$1:g
perl -p -e s;^,|,$|(? leftanglebrc =,),;data_n\/a,;g input.cvs
perl -p -e substr($_, 19, 3) = "MMM" if /^test  \(    2 \)/ file.txt
perl -p -e s{ leftanglebrc (\w+)/ rightanglebrc }{ leftanglebrc $1 rightanglebrc  leftanglebrc /$1 rightanglebrc }g
perl -p -e s{&}{&amp;}g; s{ leftanglebrc (?! leftsquarebrc ?TDA/ rightsquarebrc )}{&alt;}g
perl -p -e s{/.*}{} file.txt
perl -p -e s|&lt;strong&gt;(.*?)&lt;/strong&gt;|\\textbf{\1}|g
perl -p -e s|(http://.*?/).*|\1|
perl -p -e s|__(.*?)__|{{$1}}|g
perl -p -e s|ccpAdd\((.*?),(.*?)\)|\1 + \2|g
perl -p -i -. -b -a -k -e BEGIN{ $str = "Sed"; } s/(? leftanglebrc =$str)/ ++$cnt % 3 ? "" : " $str" /ge file.txt
perl -p -i -. -b -a -k -e m/"DP_SESSION_ID"/ && s/808/900/g filename
perl -p -i -. -b -a -k -e s/\$\$DATABASE_(.*?)\$\$/lc($1)/eg inputFile
perl -p -i -. -b -a -k -e s/bad/good/g filenames
perl -p -i -. -b -a -k -e s|(http://)|n$1|g C:tempjavaurls.txt
perl -p -i -. -b -a -k -w -e BEGIN { @ARGV = map glob, @ARGV }; s/{/'{ function(' . $i++ . ')'/ge *.h *.c
perl -p -i -. -b -a -k script.pl NotificationsPage.php
perl -p -i -. -o -r -i -g -e s/^IPADDR=.*$/IPADDR=127.0.0.1/ filename
perl -p -i -e $replacementString1 $CONFIGFILE
perl -p -i -e -s -/ -+ -. -* -/ -+ -/ -  -i -f -  -$ -. -  -% -  -4 -  -= -= -  -3 datafile
perl -p -i -e -s -/ -. -$ -/ -  -. -/ filename
perl -p -i -e chomp if eof filename
perl -p -i -e if(/acetate/){undef $_} your_file
perl -p -i -e s#$new_line1#$new_line2#g $FILE
perl -p -i -e s#VALUE#replacement#g *.xml
perl -p -i -e s,(name="NAME" value=)" leftsquarebrc ^" rightsquarebrc *",\1"NEWVALUE",g *.xml
perl -p -i -e s,\bLATIN1\b,UTF-8,g if $.  leftanglebrc = 30 thefile
perl -p -i -e s/ leftanglebrc hr \/ rightanglebrc \s* leftanglebrc div id="sidebar" rightanglebrc / leftanglebrc \/div rightanglebrc  leftanglebrc hr \/ rightanglebrc  leftanglebrc div id="sidebar" rightanglebrc /gs; -e BEGIN { $/ = ""; } file.txt
perl -p -i -e s/ leftsquarebrc  leftsquarebrc :^ascii: rightsquarebrc \031a-e rightsquarebrc / /g
perl -p -i -e s/ leftsquarebrc A-Za-z0-9+ rightsquarebrc $/$( git rev-parse HEAD )/ ../../config/commit.git git rev-parse HEAD
perl -p -i -e s/ leftsquarebrc A-Za-z0-9+ rightsquarebrc $/` git rev-parse HEAD `/ ../../config/commit.git git rev-parse HEAD
perl -p -i -e s/ leftsquarebrc ^ leftsquarebrc :ascii: rightsquarebrc \x91-\x94\x96\x97 rightsquarebrc / /g; s/\031/ /g;
perl -p -i -e s/$/$ARGV/; *
perl -p -i -e s/(.*)/ leftanglebrc text before rightanglebrc $1 leftanglebrc text after rightanglebrc / *
perl -p -i -e s/JAI/ramkrishna/ if $. == 7 test.tex
perl -p -i -e s/Masi/Bond/g $(grep -rl Masi *) grep -r -l Masi *
perl -p -i -e s/\ leftanglebrc \!--fff309--\ rightanglebrc .*\ leftanglebrc \!--\/fff309--\ rightanglebrc //g your_file
perl -p -i -e s/\$\{( leftsquarebrc ^} rightsquarebrc +)\}/defined $ENV{$1} ? $ENV{$1} : $&/eg
perl -p -i -e s/\b(? leftanglebrc !\\)(\w+)\b /$1\\ /g texfile
perl -p -i -e s/\r//g graphhopper.sh
perl -p -i -e s/\r\n?/\n/g /path/to/script
perl -p -i -e s/\r\n?/\n/g /path/to/script
perl -p -i -e s/^(.*)$/\"$1\",/g /path/to/your/file
perl -p -i -e s/^}$(.*?)\z/}}\1/ms file.h
perl -p -i -e s/c:\\IBM\\/\/opt\/IBM\//g *
perl -p -i -e s/foo/bar/g file.txt
perl -p -i -e s/if($session leftsquarebrc 'test' rightsquarebrc  rightanglebrc 0){/if($session leftsquarebrc 'test' rightsquarebrc  rightanglebrc 1){/g
perl -p -i -e s/mypassword/mynewpassword/g file
perl -p -i -e s/old/new/g `ack -l searchpattern` ack -l searchpattern
perl -p -i -e s/oldstring/newstring/g `grep -ril searchpattern *` grep -r -i -l searchpattern *
perl -p -i -e s/replace this/join "", map { ("a" .. "z", "A" .. "Z", 0 .. 9) leftsquarebrc rand(62) rightsquarebrc  } 1 .. 64/eg example.php
perl -p -i -e s/upc_barrier/start = clock();nupc_barriernend  = clock() ;/g ALL_FILES
perl -p -i -e s|( leftanglebrc /ANON rightanglebrc )(\S)|$1 $2|g file
perl -p -i -e undef $_ if /acetate/ your_file
perl -p -i -e warn "successful for line $." if s|\x0a\x00\xde\x10|\x0a\x00\xde\x10|g somefile
perl -p -i -e warn s|\x0a\x00\xde\x10|\x0a\x00\xde\x10|g ? "yes" : "no" somefile
perl -p -i -l -e s/\s+/ /g file.csv
perl -p -i -w -e s/{/"{ function(" . $i++ . ")"/ge *.h *.c
perl -p -i -w -e s{ leftanglebrc body rightanglebrc }{...}g /Volumes/Abc.html
perl -p -l -e -s -{ -A -( -. -* -) -z -} -{ -$ -1 -. -( -  -x -( -8 -0 -- -l -e -n -g -t -h -( -$ -1 -) -) -) -. -  -# -  -$ -. -} -e -x
perl -p -l -e /(pattern1|pattern2|pattern3)/ && s/asdf/ghjk/g
perl -p -l -e s/num/$n++/e filename
perl -p -l -n -e s/#.*/.txt/;s/,"/,/; file
perl -p -l -n -e s/merged./merged.\n/g your_file awk {a+=$1}END{print a}
perl -p -l -w -e s/( leftsquarebrc ^: rightsquarebrc +)/"$1"/g
perl -p -n -e $_ = "A rightanglebrc  $_" if /^`{3}/ ... /^`{3}/ file
perl -p -n -e $_ = "A rightanglebrc  $_" if /^`{3}/ ... /^`{3}/ file mv tmp file
perl -p -n -e substr($_, 58, 13) = (" "x13); inputfile.txt
perl -p -w -e exit if $_ =~ /^\s*2/ file
perl -s -e my @st=stat("$name"); print time - $st leftsquarebrc 9 rightsquarebrc ; -- -n -a -m -e -= -$ -n -a -m -e
perl -s -n -0 -e while (/Pattern1.*?((?=Pattern2)|(?=$))/sg) {$x=$&;print $x if $x=~/\Q$dynpattern/} -- -d -y -n -p -a -t -t -e -r -n -= -$ -D -y -n -a -m -i -c -_ -P -a -t -t -e -r -n file
perl -w -a -n -e for (@F) { if (/(aaa),(.*)/) {$text = $2; $text =~ s/$1//; print qq{$textn}; }}
perl -w -e for my $old (glob "*.ext") { (my $new = $old) =~ s/\.ext\z/.otherext/; rename $old, $new or warn "$old - rightanglebrc  $new: $!\n"; }
perl -w -e use POSIX; print ceil($NUMBER/500.0), qq{n}
perl -w -l -n -e -p -r -i -n -t -  -$ -1 -  -i -f -  -/ -k -e -y -s -* -= -s -* -" -? -( - leftsquarebrc  -^ -" -; -  - rightsquarebrc  -+ -) - leftsquarebrc  -" -  -; - rightsquarebrc  -/ source.cpp
perl -w -l -n -e if(/^#.*?DTG:\s(.*?),/) {$DTG = $1;} if($DTG) {$data{$DTG} .= $_."\n"} END {for(sort keys %data) {print $data{$_},"\n"}} datafile.txt
perl -w -n -e print join ",", /( leftsquarebrc \w\.\- rightsquarebrc +@ leftsquarebrc \w\.\- rightsquarebrc +\w+)/g $MAIL_LIST
perl -w -n -l -a -e $F leftsquarebrc 0 rightsquarebrc  =~ s/:\D+$//; print join "\t", @F; testrun
perl -w -n -l -a -e print $F leftsquarebrc 0 rightsquarebrc  testrun
perl -w -n -l -e /__construct/ and print "$ARGV: $_"
perl -w -n -l -e @lines = split; print $lines leftsquarebrc 0 rightsquarebrc  testrun
perl -w -p -e -s -! -( - leftsquarebrc  -^ - rightsquarebrc  -* -) -! - leftanglebrc  -b -l -u -e - rightanglebrc  -$ -1 - leftanglebrc  -/ -b -l -u -e - rightanglebrc  -! -g filename
perl ....
perl /root/bin/randpass
perl D:ack-standalone.pl 5  NeedMoreCoffee_n5_*.data /dev/null
perl D:ack-standalone.pl 5  NeedMoreCoffee_n5_*.data NUL
perl async_sql.pl $UPDATE some_table set i = i + 1 WHERE (n in ('328430','334969','330179','335290','335285','335284','335264','335145','335146','335147','335148','335149','335230','335201','335198','335196','335167','335151','335152','335143','334969','334972','334977','334978','334979','334980','334982','334983','334984','334934','334947','334948','334950','334992','335014','335026','335030','335032','334864','334862','334861','334858','334855','334852','334850','334849','334848','334847','334844','334842'))
perl async_sql.pl UPDATE some_table set i = i + 1 WHERE (n in ('328430','334969','330179','335290','335285','335284','335264','335145','335146','335147','335148','335149','335230','335201','335198','335196','335167','335151','335152','335143','334969','334972','334977','334978','334979','334980','334982','334983','334984','334934','334947','334948','334950','334992','335014','335026','335030','335032','334864','334862','334861','334858','334855','334852','334850','334849','334848','334847','334844','334842'))
perl compare.pl folder_1 folder_2
perl d2dxsd.pl someBigSchema.dtd
perl example.pl
perl fixdupcsv.pl $(ls *.csv | sort -t. -k1.1n) ls *.csv sort -t -. -k -1 -. -1 -n
perl fixdupcsv.pl $(ls -v *.csv) ls -v *.csv
perl foo.pl bash
perl foo.pl bash mytmpfile
perl log.pl
perl mapper.pl file1
perl markdown.pl --html4tags $i
perl my_app/script/my_app my_command
perl p2/maxconnect4.pl arg1 arg2 arg3 arg4
perl parse.pl
perl parse_if.pl file.c
perl renew.pl $( date +"%Y/%m/%d" ) data.xml date +%Y/%m/%d
perl renew.pl `date +"%Y/%m/%d"` data.xml date +%Y/%m/%d
perl script.pl
perl script.pl (*) file.txt
perl script.pl *.sl5
perl script.pl -f -l -a -g -= -s -o -m -e -t -h -i -n -g -a -n -o -t -h -e -r -f -l -a -g -= -$ -v -a -r -i -a -b -l -e
perl script.pl /home/naveen/mp3tag/testfolder/*.mp3
perl script.pl file.in
perl script.pl in.txt
perl script.pl infile
perl script.pl infile
perl script.pl infile
perl script.pl infile outfile
perl script.pl input
perl script.pl input pattern
perl script.pl input.txt
perl script.pl input1 input2
perl script.pl myzip.zip
perl script.pl real
perl script.pl regions.txt
perl script.pl trial
perl script.pl xmlfile
perl script.pl xmlfile
perl silence.pl 3 silence.wav
perl sumfiles.pl src1.txt src2.txt
perl test.pl hello world
perl xx.pl xx.data sort sed s/^ leftsquarebrc ^| rightsquarebrc *|//
perldoc -l XML::Simple
perldoc Term::ANSIColor
perzonalize browser='FF'
pfiles $$ grep peername head -1 nawk {print $3}
pfiles $$ nawk /peername/ {print $3;exit}
pg258_q16
pg_dump --host localhost --port 5432 --username postgres --role postgres --format plain --file complete_path_file --table schma_name."table_name" database_name
pg_dump -U myUser myDB gzip
pg_dump -U some_user_name -f dump.file -F -c database_name
pg_dump -U someuser -h localhost somedb
pg_dump -t "tablename" database_name
pg_restore -U -f
pgrep -P $parentpid ^myscript.sh$
pgrep -P $your_process1_pid
pgrep -P ${_pid}
pgrep -c command_name
pgrep -f -l $findProcessName
pgrep -f -l udp_receiver
pgrep -f -l xxx
pgrep -f java
pgrep -f keyword
pgrep -f raj xargs kill
pgrep -f raj xargs ps
pgrep -f store_plus.py
pgrep -f ts3server_linux_amd64 wc -l
pgrep -l -f proc_.* awk {print $1} xargs kill -f
pgrep -n milc_base.gcc43-64bit
pgrep -q -f prog.bin
pgrep -u `id -u` application id -u application
pgrep ... sed ...
pgrep DynamoDBLocal
pgrep Test_Ex rm -r dir
pgrep apache echo oliver
pgrep java
pgrep runner1.sh
phalcon model
phalcon model --name products
phalcon model products
phantomjs /Users/me/render.js ''" leftanglebrc !DOCTYPE rightanglebrc  leftanglebrc html rightanglebrc  leftanglebrc head rightanglebrc  leftanglebrc /head rightanglebrc  leftanglebrc body rightanglebrc  leftanglebrc h1 rightanglebrc FOOO leftanglebrc /h1 rightanglebrc  leftanglebrc /body rightanglebrc  leftanglebrc /html rightanglebrc "
phantomjs Lib/loadtester/runTests $TEST_COUNT $CLIENT_LIMIT $ACTION $PROFILE $TEST_SERVER $TEST_INCREMENT $DEBUG_MODE
phill = NOPASSWD: /bin/ls, /usr/bin/lprm
phill = NOPASSWD: /bin/ls, /usr/bin/lprm
php
php --ini
php -E exec_mount_secured_bucket(); function.inc
php -a
php -a -- --custom -s -t -u --ff goes here --the first --double-dash --is Magic!
php -c /directory/php.ini phpscript.php
php -c /etc/php.ini your-php-script.php
php -d -c -l -i -. -p -r -o -m -p -t -= -n -p -h -p - rightanglebrc  -  -a
php -d register_globals=1 do-stuff.php
php -f /export/home/prjck/htdocs/protected/yiic.php SeleniumStartStop Killselenium
php -f p.php
php -i grep API
php -m
php -m grep mysql -i
php -q script.php param1 param2 param3
php -r $_COOKIE leftsquarebrc "PHPSESSID" rightsquarebrc  = "a1b2c3d4"; require("path_to_php_script.php");
php -r $_COOKIE leftsquarebrc "PHPSESSID" rightsquarebrc  = "a1b2c3d4"; session_start(); require("path_to_php_script.php");
php -r $_COOKIE leftsquarebrc 'PHPSESSID' rightsquarebrc ='a095y187'; session_start(); $id_client=$1; $id_supplier=$2; $_COOKIE leftsquarebrc 'id_chosen_client_auto' rightsquarebrc =$id_client; $_COOKIE leftsquarebrc 'id_chosen_client' rightsquarebrc =$id_client; require 'manual_automap.php';
php -r $cmd="echo \\\$0"; echo shell_exec("/bin/bash -c \"$cmd\"");
php -r echo "something";
php -r echo function_exists("foo") ? "yes" : "no";
php -r echo urldecode('$MYURL');
php -r echo urlencode("$MESSAGE");
php -r include "MyClass.php"; MyClass::foo();
php -r print_r($_SERVER);
php -r print_r(get_defined_constants());
php -r shell_exec('sleep 10  rightanglebrc  /dev/null &');
php ./t.php grep stuff
php ./t.php grep stuff
php ./t.php grep stuff
php /cli/moveattachments.php
php /path/to/script.php www.domaintocheck.com
php /path/to/script/script.php -- id=19&url=http://bkjbezjnkelnkz.com
php /scripts/htdocs/summaries.live/app/scripts/generate-pdfs.php live 1
php /usr/local/solusvm/scripts/pass.php --type admin --comm change --username ADMINUSERNAME
php /var/home/site/myprojet/index.php/backup
php /var/home/site/myprojet/index.php/backup paraone
php /var/www/dev/update.php
php /var/www/get.php
php /var/www/get.php
php C:Program Files (x86)ZendApache2htdocsdummy.php
php app/console doctrine:generate:entity --entity BundleName:EntityName --fields name:string(255)
php artisan command:import
php artisan db:seed
php artisan migrate:make create_users_table --create users
php blah.php less
php c:progra~2ZendApache2htdocsdummy.php
php check_configuration.php
php composer.phar update
php file.php
php index.php controller method param1 param2
php iter.php php iter.php
php iter.php sleep 10000 php iter.php
php myscript.php image.jpg image2.jpg
php pageYouAreRunning.php
php report.php
php script.php
php script.php arg1 arg2 arg3
php symfony lucene-rebuild
php symfony test:myTask --typical-days 7 --typical-days 5 --typical-days 8
php test/unit/RbcTest.php
php your_script.php
php your_script.php variable1 variable #2
php yourscript.php variable1 variable2 ...
php5.2.11PEARsymfony13taskproject
phpunit -d max_execution_time=5000
phpunit blabla
pid =`./mineos_console.py -s testingmode get pid` ./mineos_console.py -s testingmode get pid
pidof $(ps -A | grep "net*") ps -A grep net*
pidof MATLAB
pidof applicaton /usr/bin/application
pidof name
pik info awk /full_version/ {print $2,$3} sed s/\"//;s/\s/\-/
ping $ip
ping $ip 57 1
ping -c 1 $server echo $server
ping -c 1 -t 1 $ip echo ${ip} is up
ping -c 1 hostname grep 192.168.11 grep bytes from awk {print $4} sed s/://g
ping -c 1 server
ping -c 1 www.google.com break
ping -c 3 google.com grep -c -i -m -1 64
ping -c 3 google.com grep 0 received touch host_is_down.txt touch host_is_up.txt
ping -c 4 www.google.com awk /---/,0
ping -c 4 www.stackoverflow.com tail -1 awk {print $4} cut -d / -f 2
ping -c 5 -i 10 host perl -n -l -e print scalar(localtime), " ", $_
ping -c 5 -q $host grep -o -P \d+(?=% packet loss)
ping -i 10 host perl -n -l -e $|++; print scalar(localtime), " ", $_
ping -n XXX 127.0.0.1
ping -q -c 5 google.com tail -n 1 cut -f 5 -d /
ping -t 1 $ip echo ${ip} is up
ping ... awk /packet loss/{x="Loss:" $7} /round-trip/{x="Trip:" $4} END{print x}
ping 1.1.1.1 -n 1 -w 3000
ping 8.8.8.8 awk {split($7,a," leftsquarebrc =. rightsquarebrc ");if (a leftsquarebrc 2 rightsquarebrc  rightanglebrc 58) print a leftsquarebrc 2 rightsquarebrc , strftime()}
ping 8.8.8.8 awk {split($7,a," leftsquarebrc =. rightsquarebrc ");if (a leftsquarebrc 2 rightsquarebrc  rightanglebrc 58) print a leftsquarebrc 2 rightsquarebrc ,d} d=$(date) date
ping foobar logger -s
ping google.com
ping google.com awk -F - leftsquarebrc  -  -= - rightsquarebrc  NR rightanglebrc 1{print system("echo -n $(date +%s)"), $11}
ping google.com read pong echo  $pong  @$(date  '+%Y%m%d%H%M%S.%N') date +%Y%m%d%H%M%S.%N
ping host perl -n -l -e BEGIN {$|++} print scalar(localtime), " ", $_
ping host perl -n -l -e print scalar(localtime), " ", $_
pip install colorama
pip install git+https://github.com/pwaller/pyfiglet
pip install ipython
pip install pyftpdlib
pip install termcolor
pipeline
pippo@gmail.com
pkill -1 -f script_name.bash
pkill -9 -f File_name
pkill -P $PID
pkill -T -E -R -M -P $PID
pkill -T -E -R -M -P 1002
pkill -f java -jar
pkill -f java.*lnwskInterface
pkill -f my_pattern
pkill -f python
pkill -f rsync -av /456
pkill -f script_name.bash
pkill -f udp_receiver
pkill Chrome
pkill ccpd
pkill java
pkill java
pkill pid_to_kill
pkill ruby
pkill the_cat_that_ate_the_network
pkill whatever true
play audio.wav trim 0.1234 2
play audio.wav trim 0.1234 =5.6789
play audio.wav trim START =END
play ideaproj
plink -i command
plink -s -s -h -b -a -t -c -h -i C:pathtoprivate.ppk -m C:localpathbatch.cmd user@host
plink -s -s -h -b -a -t -c -h -i C:pathtoprivate.ppk user@host C:serverpathbatch.cmd
plink -t -e -l -n -e -t -b -a -t -c -h IP_ADDRESS dir
plink.exe -s -s -h -p -w blabla bob@10.20.110.57 /some/path/test-script.sh ok-1
plot  leftanglebrc  awk "/^#previous/{x=1}/^# leftsquarebrc ^p rightsquarebrc /{x=0}/^ leftsquarebrc ^m# rightsquarebrc /&&x" data.txt u 2:3 notitle
plot  leftanglebrc  exec bash -c "join tmp1  leftanglebrc (join tmp2 tmp3)" using 2:3
plot  leftanglebrc  join tmp2 tmp3 | join tmp1 - using 2:3
plot path using 1:2 every ::4
plugin /usr/local/openvpn/sbin/openvpn-auth-pam.so openvpn
plugin openvpn-auth-pam.so login login USERNAME password PASSWORD
pm list instrumentation
pm list packages
pmset -g ps
pnmtojpeg bla.pnm
popd Z
popd letter
popd toerr lsd
port contents wordpress more
port selfupdate
postgres:x:106:115:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash
powershell $env:FOO="bar";& "C:\script name.ps1"
powershell $env:FOO="bar";dir env:
powershell $port= new-Object System.IO.Ports.SerialPort COM10,9600,None,8,one; $port.open(); $port.WriteLine(1); $port.Close()
powershell -C -o -m -m -a -n -d & {set-location 'HKCU:SoftwareMicrosoftWindowsCurrentVersionInternet Settings'; set-location ZoneMapDomains; new-item SERVERNAME; set-location SERVERNAME; new-itemproperty . -Name http -Value 2 -Type DWORD;}
powershell -C -o -m -m -a -n -d &{ param($Path); (Get-Content $Path) | Out-File $Path -Encoding UTF8 } somefile.txt
powershell -c -o -m -m -a -n -d ( leftsquarebrc System.Security.Principal.SecurityIdentifier rightsquarebrc ("S-1-5-32-544")).Translate( leftsquarebrc System.Security.Principal.NTAccount rightsquarebrc ).Value
powershell -c -o -m -m -a -n -d ( leftsquarebrc System.Security.Principal.SecurityIdentifier rightsquarebrc ('S-1-5-32-544')).Translate( leftsquarebrc System.Security.Principal.NTAccount rightsquarebrc ).Value
powershell -n -o -p -r -o -f -i -l -e -c -o -m -m -a -n -d ls -r|measure -s Length
powershell . Get-ChildItem . | Select-String '^LineToKeep' | foreach {$_.Line}
powershell c:test.ps1
powershell ls 'C:/My Programs/CPU Analysis/data/test/' | ForEach-Object {$_.LastWriteTime = Get-Date}
powershell.exe -C -o -m -m -a -n -d if((Get-ExecutionPolicy ) -ne 'AllSigned') { Set-ExecutionPolicy -Scope Process Bypass }; & '%1'
powershell.exe -n -o -e -x -i -t c:scriptstest.ps1
powershell.exe -n -o -e -x -i -t c:scriptstest.ps1
powershell.exe -w -i -n -d -o -w -s -t -y -l -e hidden -f -i -l -e C:iis_test.ps1
powershell.exe .foo.ps1
powershell.exe itunesForward.ps1 -s -t -e -p 15
pr -2 -t -n xyz.c
pr -m  leftanglebrc (cmd1)  leftanglebrc (cmd2) cmd1 cmd2
pr -m -t file1 file2
pr -m -t one.txt two.txt
pr -s -, -t -2 current.txt
pr -t -m -s -, file1 file2 file3
pr -t -n xyz.c
pr.sh $(date) date
print 
print        leftanglebrc td rightanglebrc  leftanglebrc a href=mailto: rightanglebrc $3 leftanglebrc /a rightanglebrc  leftanglebrc /td rightanglebrc 
print       it is python testing
print   item: leftanglebrc $item rightanglebrc 
print   item: leftanglebrc item rightanglebrc 
print  ''' data_between_two_single_quotes ''' 
print  + 033 leftsquarebrc 01;41m +   +033 leftsquarebrc 01;46m +   + 033 leftsquarebrc 01;42m
print $0" rightsquarebrc 
print $1
print $1n
print $2,$1
print $NF r
print $_ if $_ =~ $pattern
print $associativeArray
print $log Dumper $myhash
print $output cut -d   -f 4,6-
print $r
print ${array leftsquarebrc $three rightsquarebrc }
print ${array leftsquarebrc (r)${(l.${#${(O@)array//?/X} leftsquarebrc 1 rightsquarebrc }..?.)} rightsquarebrc }
print ${foo leftsquarebrc "this" rightsquarebrc }
print , n if /.../
print -- $MY_VAR
print -- $newcatalog sed s/^-/\.\/-/
print -- $newcatalog sed s/^-/\.\/-/
print -- $newcatalog sed s/^-/\.\/-/
print -d -p -d -f -r 600 file.pdf
print -n  leftsquarebrc $index rightsquarebrc =${env leftsquarebrc $index rightsquarebrc }  print
print /tmp/a.sh @array
print Array Element  a leftsquarebrc var rightsquarebrc 
print FILENAME
print File exists: $intensityn if -e $intensity
print Hello.
print STDERR Your password please: 
print `(touch .file1.lock; cp bigfile1 /destination; rm .file1.lock;) &` touch .file1.lock cp bigfile1 /destination rm .file1.lock
print a leftsquarebrc key rightsquarebrc 
print b
print export PYTHONPATH=$PYTHONPATH:...
print google calendar add " $2, $3, Work, $9, to, $10"
print hellon
print i, something acc .txt
print if /.../
print ips leftsquarebrc ip rightsquarebrc  ip
print list1 = , list1
print parser.prog
print protocol leftsquarebrc x rightsquarebrc :count leftsquarebrc x rightsquarebrc 
print protocol leftsquarebrc x rightsquarebrc :count leftsquarebrc x rightsquarebrc 
print qx/ssh $server1 ssh $server2 "echo \\\$HOSTNAME\\"/
print qx/ssh $server1 ssh $server2 echo \$HOSTNAME/
print s, (Untitled  count++ )
print somebody@example.com
printXMLarg.bash gr3 *.xml
print_2nd_line 2 file
print_and_run_command date +%H Hour
print_and_run_command date +%H Hour
printenv PATH
printenv grep G4 awk BEGIN{FS="=";}{print $1;}
printf   %-16s %sn foo: $(bar | sed '2,$s/^/                   /g') bar sed 2,$s/^/                   /g
printf   rightanglebrc  rightanglebrc  rightanglebrc  Process Completed - Total Runtime (d:h:m:s) : %d Days, %02d Hours, %02d Minutes, %02.4f Secondsn $dd $dh $dm $ds
printf  , "%s" u ($1):($%s) lw 8 ti ${foo leftsquarebrc @ rightsquarebrc } 2 ${foo leftsquarebrc @ rightsquarebrc } 3 ${foo leftsquarebrc @ rightsquarebrc } 4 ${foo leftsquarebrc @ rightsquarebrc } 5
printf  leftanglebrc U%04X rightanglebrc  '$c
printf  leftanglebrc code style="color: %s;" rightanglebrc %s leftanglebrc /code rightanglebrc  green ffmpeg -t $DURACION -f x11grab -s $RESOLUCION -r ${FPS leftsquarebrc j rightsquarebrc } -b:v $BR -i :0.0 -y $NOMBRE
printf  leftanglebrc format specification string rightanglebrc  $( leftanglebrc source-file.txt)
printf  leftanglebrc |%s| rightanglebrc   $line printf \n
printf  leftsquarebrc %q rightsquarebrc n $AbsolutePath
printf  leftsquarebrc %s rightsquarebrc n $@
printf "%s", *.txt
printf #!/bin/bashntouch /tmp/1234567890_$RUN
printf #!/bin/sh\nsomething
printf #%c/bin/bashntouch /tmp/1234567890_$RUN !
printf #include "%s"\n *.c
printf $(python read_one.py) python read_one.py xvkbd -f -i -l -e
printf $1
printf $1="$1",$2="$2",$3="$3"n
printf $PWD%sn user.newskims.131017222/*
printf $line_num: $(echo $line | wc -w) echo $line wc -w
printf $navn$encn ./export_map.sh 100 200 300 400
printf $navn$encn /bin/bash -c ./export_map.sh "100 200 300 400"
printf $uri_template $PROTO $USER $PASS $HOST $TARGET
printf ${GREEN}== rightanglebrc ${ALL_OFF}${BOLD} ${mesg}${ALL_OFF}n
printf %${COLUMNS}s 
printf %'14.4fn 1234.56
printf %'24fn 3.140000 3000
printf %(%m/%d/%Y %T)T $SECONDS
printf %*sn $header_len $dashes
printf %-10s %-10s %-10s %-10s\n csci csc Line # File Name
printf %-10s csci csc Line # File Name $n
printf %-10s |n $txt
printf %-10s%-10s%-10s%s\n $(command | command) command command
printf %-10s%-5s%-20sn $str1 $str2 $str3
printf %-12s%-12s%s\n $modules
printf %-20s %-2s %-2sn $line $wordcount $linecount
printf %-20s%-14s%s\n Col A Col B Col C
printf %-22s %-16s %-14.2f %-15d %-13d %0.2f %0.2fn, $Title $Author $Price $QtyAvailable $QtySold $(echo $QtySold*$Price | bc) echo $QtySold*$Price bc
printf %-30s%s left justified text  leftsquarebrc status rightsquarebrc 
printf %-`expr 40 - ${#b}`s %-40sn, $a, $b expr 40 ${#b}
printf %.${header_len}sn $dashes
printf %.*s $? $?
printf %.0f $(echo "scale=8;100/$MAX*$RESULT" | bc) echo scale=8;100/$MAX*$RESULT bc
printf %.0f $a
printf %.1f $loadMin
printf %.2048sn, $2
printf %.5e 4.006055058150985e-03
printf %.5e, 4.006055058150985e-03
printf %.5e, 4.006055058150985e-03
printf %0.2fn $T
printf %0.2fn 41.495
printf %0.6d $value
printf %010dn $num
printf %020d ${RET_VAL}
printf %02d $month
printf %02dd:%02dh:%02dm:%02ds\n $days $hours $mins $secs
printf %032sn $( leftanglebrc binary.txt) tr   0
printf %032x $i
printf %03d $backupFolderNumber
printf %03d $n
printf %04d $1 sed s/\(..\)\(..\)/\1 \2/
printf %04dn $num
printf %05d $num1
printf %06.3fn 23.00
printf %06d\n ${value::6}
printf %10s, ------------------------------------------
printf %14s  %14s  %14s  %14s  %14sn $(cat data.txt) cat data.txt
printf %20s  
printf %20s: %s $key ${my_array leftsquarebrc $key rightsquarebrc }
printf %5s{FNAME}n  
printf %76s echo $'x14x84x04x08'
printf %76s echo $x14x84x04x08
printf %7s hello
printf %80s 
printf %b $foo
printf %b ${OUTARRAY leftsquarebrc @ rightsquarebrc }
printf %b ac s\nbc s\ncc s\n xargs -d \n bash /tmp/test.sh
printf %c%c, 0xFF, 0xFE
printf %d %.4fn, i, a leftsquarebrc i rightsquarebrc /b leftsquarebrc i rightsquarebrc 
printf %d, %s %sn $line_number $ipv4 $ipv6
printf %dn ${array leftsquarebrc @ rightsquarebrc } sort -n tail -1
printf %g,, score leftsquarebrc row,attr rightsquarebrc 
printf %on $x
printf %q  ${args leftsquarebrc @ rightsquarebrc }
printf %q $1
printf %q $1
printf %q $PS1 grep -F \\033
printf %q $nameArg
printf %q $str
printf %q ${BASHVAR}
printf %q hello world
printf %q hello world
printf %q helloworld someprog
printf %q this filename has spaces
printf %q thisfilenamehasspaces
printf %q\n ${files leftsquarebrc 772 rightsquarebrc }
printf %q\n ${xa leftsquarebrc @ rightsquarebrc }
printf %s  $(seq 9) seq 9 gawk END { print gensub(/ leftsquarebrc 0-9 rightsquarebrc   leftsquarebrc 0-9 rightsquarebrc /,"","3") }
printf %s  $(seq 9) seq 9 gawk END{ print gensub(/ leftsquarebrc 0-9 rightsquarebrc /,"","5",gensub(/ leftsquarebrc 0-9 rightsquarebrc /,"","5")) }
printf %s  leftsquarebrc WARN rightsquarebrc  %s %s %sn `date +"%d/%b/%G-%T"` foo bar baz date +%d/%b/%G-%T
printf %s  {a..z}{a..z}{a..z}
printf %s # printf n
printf %s $l sed -E s/'$pattern'/'$lib'/
printf %s $str sed -e s@/@a@g
printf %s $str tr / a
printf %s $text ...
printf %s $tnyn ./install.sh
printf %s $x
printf %s %08d 0x%02xn $1 $(bc  leftanglebrc  leftanglebrc  leftanglebrc  "ibase=10;obase=2;$1") $1 bc
printf %s %15d %dn,ARGV leftsquarebrc i rightsquarebrc ,sum leftsquarebrc ARGV leftsquarebrc i rightsquarebrc  rightsquarebrc ,tr
printf %s +  ${array leftsquarebrc @ rightsquarebrc } xargs -I -{ -} echo {} 0 bc
printf %s ,i
printf %s, *.txt
printf %s,, score leftsquarebrc row,attr rightsquarebrc +0
printf %s0 ${FILES leftsquarebrc @ rightsquarebrc } xargs -0 -i mv {} /path/to/destination
printf %s:%sn $(date) $(hostname) date hostname
printf %s\0 *.n3 xargs -0 cat
printf %s\n $SQL_FILE_VARIABLE grep -E ' leftsquarebrc ^' rightsquarebrc *'
printf %s\n $STR
printf %s\n $line
printf %s\n $query mysql database
printf %s\n $var
printf %s\n $var
printf %s\n $var
printf %s\n ${arr leftsquarebrc @ rightsquarebrc } awk !($0 in seen){seen leftsquarebrc $0 rightsquarebrc ;next} 1
printf %s\n ${array leftsquarebrc 4 rightsquarebrc } ${array leftsquarebrc 2 rightsquarebrc } ${array leftsquarebrc 9 rightsquarebrc } ${array leftsquarebrc 5 rightsquarebrc }
printf %s\n ${array leftsquarebrc 5 rightsquarebrc } ${array leftsquarebrc 3 rightsquarebrc } ${array leftsquarebrc 10 rightsquarebrc } ${array leftsquarebrc 6 rightsquarebrc }
printf %s\n ${array leftsquarebrc @ rightsquarebrc }
printf %s\n ${lines leftsquarebrc @ rightsquarebrc }
printf %s\n %s/^.(.*).$/1/ . wq ed s_res.temp
printf %s\n *
printf %s\n * awk -F 7 NF==4
printf %s\n *.txt paste -s -d ,
printf %s\n *_* sort -t -_ -u -k -1 -, -1
printf %s\n *_* sort awk -F -_ !_ leftsquarebrc $1 rightsquarebrc ++
printf %s\n *o?6*
printf %s\n 1p d wq ed -s file.txt
printf %s\n grep --color .txt
printf %s\n path/to/files/*pattern*.txt sed -n $np
printf %s\n shopt -s extglob rm -rf !(cookbooks) bash
printf %s\n {a..z} printlinesof 5 3 10 6
printf %s\n%s\n $finaluser $finalpassword
printf %s\t%s\n ${$( leftanglebrc infile):1:-1}
printf %sn $*
printf %sn $@
printf %sn $FLAG_1
printf %sn $arg
printf %sn $var
printf %sn ${0##*/}
printf %sn ${FILES leftsquarebrc @ rightsquarebrc } xargs -i mv {} /path/to/destination
printf %sn ${a leftsquarebrc @ rightsquarebrc }
printf %sn ${arr leftsquarebrc @ rightsquarebrc }
printf %sn ${header leftsquarebrc @ rightsquarebrc :1}
printf %sn ${o_args leftsquarebrc @ rightsquarebrc }
printf %sn ${x leftsquarebrc * rightsquarebrc }
printf %sn ${x leftsquarebrc * rightsquarebrc }
printf %sn *.file_ID
printf %sn -n
printf %sn /home/usr/AAA/*/*/*/VIP_Info*/
printf %sn 0a $(grep -o ' leftsquarebrc 0-9 rightsquarebrc \+' nums.txt|sed 's/.*/read "&"/')  . w q grep -o  leftsquarebrc 0-9 rightsquarebrc \+ nums.txt sed s/.*/read "&"/ ed nums.txt
printf %sn arg1 argument 2 arg3 ./function-script
printf %sn this is line one this is line two this is line three
printf %sn this is line {one,two,three}
printf %sn {0..199} xargs -P 8 -n 1 ./yourscript
printf %sn%sn pwd pwd pdbedit -t -r -u user
printf %sn%sn pwd pwd smbpasswd -s user
printf %s| %-15s| %-25s| %-15s| %-15s| %-15s\n $result $size $name $visits $inbound $outbound
printf %x 100000 awk -f ascii_to_bin.awk /bin/sh
printf (%s,%s)n $x
printf (entity:content %s:%s)n $ENTITY $CONTENT
printf *
printf ,s/PATTERN/REPLACE/g\nw\nq\n ed -s your_file.txt
printf -- %s\n ${my_array leftsquarebrc @ rightsquarebrc }
printf -- %s\n * awk -F -j -b -o -s -s -- -| -. -t -a -r -. -g -z /jboss/{print $2}
printf -- %s\n * grep -o -P jboss-\K.*(?=\.tar\.gz)
printf -- %s\n * perl -l -n -e /jboss-(.*?)\.tar\.gz/ && print $1
printf -- %s\n *.txt head -n 1
printf -- %s\n *.txt sed -n 1p
printf -v $1 %s\n%s ${!1} $2
printf -v ${vars leftsquarebrc $i rightsquarebrc } %s ${arr leftsquarebrc $i rightsquarebrc }
printf -v S %s ${A leftsquarebrc @ rightsquarebrc }
printf -v TYPE |%s ${TYPE leftsquarebrc @ rightsquarebrc }
printf -v _INFO %q $_INFO
printf -v bar %b $foo
printf -v cmd_str %q  ${cmd leftsquarebrc @ rightsquarebrc }
printf -v escaped_string %q $raw_string
printf -v filename %q $(inotifywait --format "%f" -e create /var/www/media2net/torrent) inotifywait --format %f -e create /var/www/media2net/torrent
printf -v filename -- $TEMPLATE $c $a
printf -v myarray__${key} %s $value
printf -v myvar %q  $@
printf -v nameArg %q $nameArg
printf -v newPWD %-*s $pwd_length $newPWD
printf -v prefixed_list right-%s  $list
printf -v raw_string %b $escaped_string
printf -v result %s| %-15s| %-25s| %-15s| %-15s| %-15s\n $result $size $name $visits $inbound $outbound
printf -v v %s */
printf -v var %s\n%s $var in a box
printf -v var %sn $var
printf -v var FILE=_%s_%s.dat $val1 $val2
printf -v variable $(sed 's/.*://;s/\(..\)/\\x\1/g'  leftanglebrc  leftanglebrc  leftanglebrc  "$line") sed s/.*://;s/\(..\)/\\x\1/g
printf -v variable %.1f $loadMin
printf ..$i-- rightanglebrc ${!i}n
printf ... cut -c 1-80
printf ... fold -w 80
printf ...last modified: %s $(git status -s | paste -sd ,) git status -s paste -s -d ,
printf /root/file%04d $i
printf 033 leftsquarebrc 1;4;31m%-${COLUMNS}s033 leftsquarebrc 00m Command failed with $RANDOM
printf 033 leftsquarebrc ?1h
printf 033 leftsquarebrc ?1l
printf 033%s foo ${a1}
printf 033c
printf 0: %.8x $int sed -E s/0: (..)(..)(..)(..)/0: \4\3\2\1/ xxd -r -g 0
printf 0x%X $MYVAR
printf 1 2 3rn4 5 6rn tr -d r read line echo $line
printf 1 2 xargs ...
printf 123456789 seq 5
printf 1st 2ndn
printf 2\n1\n program
printf =%.0s $(seq $leng) seq $leng tr =
printf =%.0s 1 2 3 4 ... 100
printf =%.0s {1..100}
printf Echoing random number %-5s    leftsquarebrc  OK  rightsquarebrc  $RAND_NUM
printf FILE=_%s_%s.dat $val1 $val2
printf FiletReadstPaired readstConc reads1tConc Reads2tTotal alignnGW1t%st%st%st%st%sn $RDS_T $RDS_P $RDS_C1 $RDS_C2 $ALGN_T
printf Hello, %sn George W. Bush
printf Memory Usage: %s/%sMB (%.2f%%)n
printf My name is %s. I live in %s.n John London
printf Number: %s\n ${array leftsquarebrc @ rightsquarebrc }
printf Question?  leftsquarebrc Y/n rightsquarebrc  
printf Removed file %-64s (%d/%d)n "$file" $n $of
printf Thread dump #%dn, counter
printf Time: $TIMESTAMP_CMDnn$EMAIL_BODY
printf Welcome ! it is now: n%sn $(date "+%d %b %Y:%T %s") date +%d %b %Y:%T %s
printf \000
printf \033 leftsquarebrc 38;5;1mnormal \033 leftsquarebrc 02;38;5;1mdim \033 leftsquarebrc 01;38;5;1mbold
printf \033 rightsquarebrc 2;%s\033\\ title goes here
printf \e leftsquarebrc 1;34m%-6s\e leftsquarebrc m This is text
printf \x0a dd of=filetopatch bs=1 seek=0 count=1 conv=notrunc
printf ^ leftsquarebrc %s foo ${a1}
printf ^%sn {1900..2100} grep -o -f file
printf foo wc -c
printf foo\nbar\n ./myprog
printf format, item1, item2, ...
printf hellonworldn
printf http://www.site.org/%d\n {1..10}
printf ip: %s\n $(ifconfig | grep 'inet' | sed -n '5p' | tr -s ' ' | cut -d ' ' -f2) ifconfig grep inet sed -n 5p tr -s   cut -d   -f 2
printf latc=%sn ${latc leftsquarebrc * rightsquarebrc }
printf message :: %s %sn $(display_output_message $1 $2) received display_output_message $1 $2
printf n%04gn {1..100} xargs -n 1 -P 10 -i bash -c echo_var "$@" _ {}
printf one\nfour\ntwo\nthree\nfour\n
printf one\ntwo three \nfour\n xargs -I -{ -} echo foo {} bar
printf one\ntwo three \nfour\n xargs echo
printf one\ntwo\nthree\nfour\nfive\n awk BEGIN{srand()} {printf("%.20f %s\n", rand(), $0)} sort head -n 3 cut -d -  -f -2 --
printf r%-${COLUMNS}s $var
printf rFileName : %20s : %8d of %8d Completed $filename $index $lines
printf setup-x86.exe -q -p='%s'n ${deps leftsquarebrc * rightsquarebrc }
printf setup-x86.exe -q -p='%s'n ${deps leftsquarebrc * rightsquarebrc }
printf somthing wrong!%v Oops!
printf somthing wrong!%v Oops!
printf true\n%.0s $(eval echo "{1..$count}") eval echo {1..$count}
printf x s 2 3
printf xffxfe iconv -f utf-8 -t utf-16le UTF-8-FILE
printf {"hostname":"%s","distro":"%s","uptime":"%s"}\n $hostname $distro $uptime
printlines 5 3 10 6
printlinesof file.txt 5 3 10 6
private PrintStream print
private static final String DEFAULT_FILE_TYPES = xml,json,csv,pdf,doc,docx,ppt,pptx,xls,xlsx,odt,odp,ods,ott,otp,ots,rtf,htm,html,txt,log
proc.StartInfo.Arguments = text +   + txtBoxUrls.Text +   + txtFileName.Text
proc.StartInfo.Arguments = text +   + txtFileName.Text
proc.StartInfo.Arguments = text +  " + txtFileName.Text + "
proc.StartInfo.Arguments = text + @  + txtFileName.Text + @
proc1 proc2
proc1 tee  rightanglebrc (proc2) ...  rightanglebrc (procN-1) proc2 procN-1 procN
procStartInfo.RedirectStandardOutput = true
procStartInfo.UseShellExecute = true
proc_A proc_B python pop-cmd.py cmdstack.lst proc_D
process $j
process = `...` ...
process params
process-all-together $@
process.StartInfo.FileName = "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\signtool.exe"
process.sh index.php
processInfo $1 awk -F -: {print $4}
process_column_range 22 41
processed/foo/bar
prodigal -o /dev/stdout
producer Option1 Option2 Option3 consumer
prog $1 sponge $1
prog arg1 arg2 arg3
prog inputfile  rightanglebrc (sort -rn | cut -f1-2  rightanglebrc outputfile) sort -r -n cut -f -1 -- -2
prog inputfile /dev/stdout sort -r -n cut -f -1 -- -2
prog inputfile sort -r -n cut -f -1 -- -2
prog1 arg grep xyzzy somefile
prog1 prog2
prog2 $(prog1 file.txt) prog1 file.txt
prog2 `prog1 file.txt` prog1 file.txt
progam.exe arg1 arg2 arg3
progname
progname
program
program
program
program -a *.txt
program -c -a -t --cat
program ...
program arg1 arg2 arg3 arg4 containing spaces
program awk /pattern/{exit}1
program awk /pattern/{print;exit}1
program command
program.exe
program.exe
program.exe
program.exe -f -l -a -g -s repl ^(cmd|prc):   a
program.exe sort.exe
program.exe sort.exe more.exe
program.py mv tmp.csv file.csv
program1 program2
program2 `program1` program1
program2 `program1` program1
program_name -f -o -r -e -v -e -r
program_name -f -o -r -e -v -e -r -s -h -a -r -e -d
programming
progress-meter Doing stuff do-things arg1 arg2
prompt off
property pathToResources : NSString -- works if added before script command
protectedyiic shell protectedconfigmain.php
ps --no-headers -o pid --ppid $$ wc -w
ps --ppid $(pgrep gnome-terminal) pgrep gnome-terminal grep tcsh wc -l
ps -A -o %cpu,%mem,user,comm
ps -A -o pid -o command egrep  leftsquarebrc f rightsquarebrc lash cut -d -  -f 1
ps -A awk -v name=$name $0 ~ name{print $1}
ps -A grep -c  leftsquarebrc f rightsquarebrc sdaemon
ps -A grep -m 1 firefox awk {print $1}
ps -A grep -v grep grep -c fsdaemon
ps -A x grep sshd grep -v grep
ps -C $1 fww -o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,cmd
ps -C apache2 fww -o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,cmd
ps -C bash -o comm %cpu %mem --no-headers awk {a leftsquarebrc $1 rightsquarebrc  = $1; b leftsquarebrc $1 rightsquarebrc  += $2; c leftsquarebrc $1 rightsquarebrc  += $3}END{for (i in a)printf "%s, %0.1f, %0.1f\n", a leftsquarebrc i rightsquarebrc , b leftsquarebrc i rightsquarebrc , c leftsquarebrc i rightsquarebrc }
ps -C command_name --no-headers wc -l
ps -C fetchmail fetchmail -d 1800
ps -C less --no-headers -o %cpu,%mem
ps -C temp_tool -o pid
ps -F -C myservice
ps -L u n tr -s   cut -d   -f 2,3,14-
ps -a -e -f awk /File_name/ && ! /awk/ {system("kill -9 " $2)}
ps -a -u -x awk  /^username/ { system("pstree " $2) }
ps -a -u -x awk $14 rightanglebrc =30000 && $14 leftanglebrc =30100 && $0~/curl/ { print $2 } xargs kill -9
ps -a -u -x grep -q my.php php -f my.php
ps -a -u -x sed s/^ *//;s/  */ /g cut -d -  -f 2
ps -a -u -x xxd -g 1
ps -a -x grep PROCESS_NAME grep -v  grep 
ps -e -L -f
ps -e -a awk / leftanglebrc search_term rightanglebrc /,NF=1
ps -e -f
ps -e -f
ps -e -f
ps -e -f awk ($0 ~ " leftanglebrc processname rightanglebrc "){print $2} read -r kill -9 $REPLY
ps -e -f awk -f part3.1.awk sort
ps -e -f awk / leftsquarebrc k rightsquarebrc eyword/{print $2}
ps -e -f awk / leftsquarebrc p rightsquarebrc ort/ {printf "start time: %s\nsn: %s\nsku: %s\nport: %s\n", $5, $11, $13, $NF}
ps -e -f awk /PRD_/ && /startscen\.sh/ {print $3}
ps -e -f awk /^root.*\-Djava/ { gsub(/\/ leftsquarebrc ^\/ rightsquarebrc *$/, "", $8); gsub(/.*\//, "", $8); print $8}
ps -e -f awk {print $8}
ps -e -f grep  leftsquarebrc c rightsquarebrc ron
ps -e -f grep  leftsquarebrc g rightsquarebrc nome-terminal
ps -e -f grep  leftsquarebrc j rightsquarebrc ava
ps -e -f grep  leftsquarebrc s rightsquarebrc omething
ps -e -f grep  leftsquarebrc x rightsquarebrc xx
ps -e -f grep $1 grep -v grep wc -l
ps -e -f grep $KEY_NAME grep -v grep awk { print $2 } xargs kill
ps -e -f grep -c myApplication  leftsquarebrc  $counter -e -q 1  rightsquarebrc  echo true
ps -e -f grep -w -E script1|script2 awk {print $2} kill -9 $i
ps -e -f grep 19999 grep -v grep
ps -e -f grep 19999 grep -v grep
ps -e -f grep apache tr   @
ps -e -f grep bar grep -v grep cat
ps -e -f grep bar grep -v grep true
ps -e -f grep bash cat out.log sort -n
ps -e -f grep cron
ps -e -f grep cron grep -v grep
ps -e -f grep gnome-terminal grep -v grep
ps -e -f grep memcache
ps -e -f grep memcache grep -v grep awk {print $2} xargs kill
ps -e -f grep perl check
ps -e -f grep raj awk {print $2} xargs kill
ps -e -f grep sharatds awk {print $2} xargs kill
ps -e -f grep something grep -v grep
ps -e -f grep tomcat-5.5-26-rum grep java awk  { print $2 } 
ps -e -f grep udp_receiver grep -v grep awk "{print $2}"
ps -e -f grep xampp
ps -e -f grep xampp grep httpd
ps -e -f grep xampp grep mysql
ps -e -f grep your_process awk {print $2} xargs kill
ps -e -f grep your_search_term awk {print $2} kill $pid
ps -e -f head -n 1 grep  leftsquarebrc h rightsquarebrc ttpd
ps -e -f kbsdstart
ps -e -f sed -n -e 1p -e / leftsquarebrc h rightsquarebrc ttpd/p
ps -e -f sed -n /blahblahblah/s/^.*port=\( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+) .*/\1/p
ps -e -f sed 1b;/ leftsquarebrc h rightsquarebrc ttpd/b;d
ps -e -f sort awk -f part 3.1.awk
ps -e -l -f nawk -v pattern=${userid} {if ($3==pattern) print}
ps -e -l -y awk { if( $8  rightanglebrc  1024 )print int($8/1024) "M\t" $13 ; else print $8 "K\t" $13; } sort -h
ps -e -l grep $processname awk ...
ps -e -l grep $processname grep -v grep awk ...
ps -e -o %cpu sed 1d sort -n -r
ps -e -o %cpu sort -n -r
ps -e -o %cpu sort -n -r head -1 tr -d  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc 
ps -e -o -c -o -m -m grep Test_Ex ...
ps -e -o cmd cut -f 1 -d   sort uniq -c
ps -e -o comm %cpu %mem --no-headers awk {a leftsquarebrc $1 rightsquarebrc  = $1; b leftsquarebrc $1 rightsquarebrc  += $2; c leftsquarebrc $1 rightsquarebrc  += $3}END{for (i in a)printf "%s, %0.1f, %0.1f\n", a leftsquarebrc i rightsquarebrc , b leftsquarebrc i rightsquarebrc , c leftsquarebrc i rightsquarebrc } sort
ps -e -o pid,args awk /PRD_/ && /startscen\.sh/ && $4 ~ /PROCESS_ALLBETS/
ps -e -o pid,comm awk /Skype$/  {print $1; exit}
ps -e -o pid,comm grep Skype$ awk NR == 1 {print $1}
ps -e -o pid,comm grep Skype$ awk {print $1} head -1
ps -e -o pid,comm grep ssh-agent
ps -e -o pid,command grep  leftsquarebrc r rightsquarebrc esque- leftsquarebrc 0-9 rightsquarebrc  cut -d   -f 1 xargs -L 1 kill -s QUIT
ps -e -o pid,command,etime
ps -e -o pid,etime grep  1  grep -v grep awk {print $2}
ps -e -o pid,etime,command grep PID grep -v grep awk {print $2} awk -F : { printf("%.2f\n", $1*60+$2+($3/60)); }
ps -e -o pid,etimes,command grep PID grep -v grep awk {printf("%.2f\n", $2/60)}
ps -e -o pid,rss,cmd
ps -e -o pmem,pid,pcpu,rss,vsz,time,args sort -k 1 -r awk $2~/ leftanglebrc your pid rightanglebrc /
ps -e -o ppid,pid,cmd awk {p leftsquarebrc $1 rightsquarebrc =p leftsquarebrc $1 rightsquarebrc ","$3}END{ for(i in p) print i, p leftsquarebrc i rightsquarebrc }
ps -e -o uid= tr -d   grep -v -x 0 sort uniq
ps -e -o uname:20,pid,pcpu,pmem,sz,tty,stat,time,cmd grep  leftsquarebrc b rightsquarebrc ash
ps -e -o user= grep -v -x root sort uniq
ps -e -o user= grep -v -x root sort uniq -c sort -n -r
ps -e grep  leftsquarebrc s rightsquarebrc tupid_test
ps -e grep stupid_test grep -v grep wc -l
ps -f -U `who | cut -d' ' -f1 | uniq | xargs echo` who cut -d -  -f 1 uniq xargs echo
ps -f -U user1 user2 user3
ps -f -e grep  leftsquarebrc p rightsquarebrc rocess name awk {print $2}
ps -f -e grep  leftsquarebrc r rightsquarebrc unner1.sh awk {print $2}
ps -f -e grep process name grep -v grep awk {print $2}
ps -f -u user grep matching_strin leftsquarebrc g rightsquarebrc 
ps -h -p {100..300} wc -l
ps -l -a awk -v uid=1000 NR==1{for (i=1; i leftanglebrc =NF; i++) if ($i=="UID"){col=i}} NR rightanglebrc 1 && $col==uid
ps -o %r $$ tail -n 1
ps -o command= -p $PPID awk {print $1}
ps -o etime -C ProgramName awk -v MAX=600 {split($0, a, ":"); if (length(a)==2) sec=a leftsquarebrc 1 rightsquarebrc *60+a leftsquarebrc 2 rightsquarebrc ; else if (length(a)==3) sec=a leftsquarebrc 1 rightsquarebrc *3600+a leftsquarebrc 2 rightsquarebrc *60+a leftsquarebrc 3 rightsquarebrc ; if (sec rightanglebrc MAX) print "Elapsed"; else print "Not Elapsed"}
ps -o etime -p 18613 awk NR == 2 { print substr($0, 4); }
ps -o etime=,command= awk -v MAX=600 /ProgramName/ && !/awk/ {split($1, a, ":"); if (length(a)==2) sec=a leftsquarebrc 1 rightsquarebrc *60+a leftsquarebrc 2 rightsquarebrc ; else if (length(a)==3) sec=a leftsquarebrc 1 rightsquarebrc *3600+a leftsquarebrc 2 rightsquarebrc *60+a leftsquarebrc 3 rightsquarebrc ; if (sec rightanglebrc MAX) print "Elapsed"; else print "Not Elapsed"}
ps -o pid= -o comm= -o args= awk $2~/grep/{print $1, $3}
ps -o pid=,args= -C grep
ps -o ppid= $ID
ps -o ppid= $ID
ps -o ppid= $ID egrep -o \S+
ps -o ppid=$ID $ID
ps -o rss= -p `pidof mysqld` pidof mysqld awk {print $1*4, "KiB"}
ps -o stat= -p $$
ps -o stat= -p $PPID
ps -p  leftsquarebrc process pid rightsquarebrc  -o sess=
ps -p $(lsof -ti tcp:80) o comm=,pid= lsof -t -i tcp:80
ps -p $(pgrep -d, -xsnmpd) -o rss pgrep -d -, -x -s -n -m -p -d
ps -p $(pidof name) pidof name
ps -p $(ps -p "$$" -o ppid= | sed 's|\s\+||') -o fname= ps -p $$ -o ppid= sed s|\s\+||
ps -p $PID :
ps -p $PID sleep 1
ps -p $PPID -o comm=
ps -p $PPID -o fname=
ps -p %cpu,%mem,cmd
ps -p 29264 echo $?
ps -p 747 -o %cpu,%mem awk NR rightanglebrc 1
ps -p 747 -o %cpu,%mem sed 1d
ps -p `cat /var/run/myscript.pid` cat /var/run/myscript.pid
ps -p `ps -ef |  awk '/PRD_/ && /startscen\.sh/ {print $3}'` ps -e -f awk /PRD_/ && /startscen\.sh/ {print $3}
ps -p command=
ps -p cp
ps -p user,cmd --columns 1000 grep `whoami` whoami
ps -u $(echo $(w -h | cut -d ' ' -f1 | sort -u)) o user= echo $(w -h | cut -d ' ' -f1 | sort -u) w -h cut -d   -f 1 sort -u sort uniq -c sort -r -n
ps -u $userid -l -a grep  leftsquarebrc f rightsquarebrc oobar
ps -u pid=,uid=,command=
ps -w -e -f awk NR rightanglebrc 1 {printf("%s ", $2)}END{printf("\n")
ps H -C name pid tid args comm
ps auwx awk / leftsquarebrc s rightsquarebrc ql/ {total += $4} END {print total}
ps aux awk /RandomApp.app/ {print $2}
ps aux awk NR != 1 {x leftsquarebrc $1 rightsquarebrc  += $4; print $1, x leftsquarebrc $1 rightsquarebrc }
ps aux awk NR != 1 {x leftsquarebrc $1 rightsquarebrc  += $4} END{ for(z in x) {print z, x leftsquarebrc z rightsquarebrc "%"}}
ps aux awk NR == 1 || /PATTERN/
ps aux awk {print $11}
ps aux awk {print $1} sort uniq
ps aux awk {print $1} xargs -I % sh -c { echo %; sleep 1; }
ps aux grep  leftsquarebrc -i rightsquarebrc  $ProcessName wc -l
ps aux grep  leftsquarebrc M rightsquarebrc ATLAB awk {print $2}
ps aux grep  leftsquarebrc m rightsquarebrc y_task
ps aux grep  leftsquarebrc m rightsquarebrc yserv
ps aux grep  leftsquarebrc p rightsquarebrc aramount
ps aux grep  leftsquarebrc p rightsquarebrc lugin-container.*Flash.*
ps aux grep  leftsquarebrc p rightsquarebrc rocess name awk {print $2}
ps aux grep $1 awk {print $2}
ps aux grep -i -e amarok awk {print $2} xargs kill -9
ps aux grep -i java grep -i test awk { print $2 } xargs kill
ps aux grep -q  leftsquarebrc b rightsquarebrc la bla echo found
ps aux grep /usr/bin/php /path/to/thing/you/run.php grep -v grep wc -l
ps aux grep 7000.conf grep -v grep awk {print $2}
ps aux grep 7000\.conf awk {print $2}
ps aux grep aa.sh
ps aux grep eclipse
ps aux grep firefox awk {print $2} xargs kill -9
ps aux grep hadoop
ps aux grep my_task
ps aux grep programmname grep -v grep wc -l
ps aux grep qmail grep -v grep
ps aux grep some_proces leftsquarebrc s rightsquarebrc  echo 1 echo 0
ps aux grep some_proces leftsquarebrc s rightsquarebrc  echo 1 echo 0
ps aux head -1 ps aux grep process_name
ps aux perl -n -e print if $. == 1 || m/process_name/
ps aux read -r LINE echo $LINE echo $LINE head -1 grep process_name
ps aux read -r LINE echo $LINE grep process_name
ps aux sed -n 1p;/PATTERN/p
ps auxww sed -n -e /java.instanceName/s;\(^ leftsquarebrc a-z rightsquarebrc * * leftsquarebrc 0-9 rightsquarebrc *\).*\(/usr/user/java.instanceName leftsquarebrc A-Za-z._0-9/ rightsquarebrc *\) .*;\1 \2;p
ps aw awk /\/bin\/1\// {print $1} xargs kill -9
ps aw o pid,command awk $2 ~ /^\/bin\/1\// {print $1} xargs kill -9
ps awk ($1 rightanglebrc =lo)&&($1 leftanglebrc =hi){n++}END{print n}
ps awk {print $var}
ps ax --forest
ps ax grep fcgi cut -f 1 -d -  head -1
ps ax grep python main.py  leftsquarebrc defunct rightsquarebrc  grep -v grep
ps ax grep uniquename grep -v grep awk {print $1} xargs kill
ps ax o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,comm,group,gid
ps axk-pid
ps axk-pid -o pid
ps cax grep -E Nginx|mysql|etc
ps egrep 11383 tr -s   cut -d   -f 4
ps grep $$
ps grep $PPID cut -d -  -f 4
ps grep $PPID tr -s   cut -d -  -f 5
ps grep Genymotion.app/Contents/MacOS/player awk {print $1} xargs kill
ps h --ppid $PID -o vsz awk { SUM+=$0 }; END { print SUM }
ps h -e -o etime ./script.sh
ps h -e -o pgid,vsz awk -v PGID=$PID $1==PGID { SUM+=$2 }; END { print SUM }
ps o pid,group
ps o pid,group,gid
ps o user,pid,%cpu,%mem,vsz,rss,tty,stat,start,time,comm,group,gid
ps opid --ppid 7051 tail -n +2 xargs kill
ps uax grep ba leftsquarebrc c rightsquarebrc  ...
ps ufww --sid $(ps -C apache2 -o sess  | sort -u | grep -v -E '^ +0$' | tr $'\n' ',' | sed 's/,$/\n/; s/ //g') ps -C apache2 -o sess= sort -u grep -v -E ^ +0$ tr $n , sed s/,$/\n/; s/ //g
ps x
ps x -o %p %r %y %x %c 
ps x -o %p %r %y %x %c 
ps x grep vsftpd grep -v grep
ps x grep vsftpd grep -v grep awk { print $2 }
ps1_set
ps1_set
pscp -b -a -t -c -h login@mysshsite.com:iiumlabs* .
pscp uname@MachineB:/export/home/uname/aa.txt c:documentsfoo.txt
pscp.exe -p -w blabla test-script.sh bob@10.20.110.57:/some/path/
pscp.exe youruser@server:/path/to/file C:path_to_file
psexec -u user -p pass cmd /c d:GitReposrunAll.bat a1 a2 a3
psexec \server -u -f remote_dir_listing.cmd
psql --tuples-only -P format=unaligned -c SELECT datname FROM pg_database WHERE NOT datistemplate AND datname  leftanglebrc  rightanglebrc  'postgres'
psql --username postgres -c ...
psql -U -f
psql -U deploy spider
psql -U root spider
psql -c CREATE DATABASE myDB TEMPLATE mytemplate1
psql -c SELECT columns FROM table ${1:+WHERE $1} ${2:+WHERE $2}
psql -d $dbname -U $username -h localhost -p 5432 -t -c SELECT gid FROM testtable WHERE aid='1';
psql -h $DBHOST -d $DBNAME -U $DBUSER
psql -h 192.168.1.45 -d somedbname -U $somedbuse
psql -o filename -U sathishkumar -c select * from hospital_management.patient_details
psql -t -q -c select patch_date from version_history where version ='1.1.1'
psql db -c SELECT COUNT(test) FROM tbTest; tail -n 2 head -n 1
psql mytemplate1 -f file
psql pager off
psql postgres -t -A -c SELECT 1 FROM pg_roles WHERE rolname='USR_NAME'
psql postgres -t -A -c SELECT 1 FROM pg_roles WHERE rolname='USR_NAME' grep -q 1 createuser ...
psql regress -c insert into text_files(file_content) values ('$(sed "s/'/''/g" test.txt)'); sed s/'/''/g test.txt
psrc
pstree cat
pstree grep MDSImporte less -S -E -X
public $variable
public property BackgroundColor{get set}
public var $variable
pudb /parent/folder/module_folder/__main__.py
purge
push 0x1000
pushd $(/bin/pwd) /bin/pwd
pushd $PWD
pushd %Pathname%
pushd C:src call ant -D -i -n -i -f -i -l -e -= -C -: -r -e -p -o -I -R -. -i -n -i -D -f -i -l -e -l -i -s -t -= -l -a -b -e -l -. -x -m -l popd
pushd X:
pushd \OTHERCOMPUTERNAMEShared_folder
pushenvvar PATH /usr/local/tools/gcc-4.3.3/bin
pushenvvar PATH /usr/local/tools/gcc-4.3.3/bin:/bin
put $filename /home/remote/server/$file
put myfile
put, molden, visual_4.0_60.0
put, molden, visual_r_theta
puts %x leftsquarebrc bash --login -c echo $PATH rightsquarebrc 
puts Argument: ##{s}
puts Dir leftsquarebrc *.JPG rightsquarebrc .map{ f  leftanglebrc img src='#{f}' title='Image File #{f}' / rightanglebrc  }
puts USER  leftsquarebrc exec whoami rightsquarebrc 
puts `dir` dir
puts `echo #{command}` echo
puts `ssh -o StrictHostKeyChecking=no -i keyfile user@host "sudo cat file | awk '/^server/ {print \\$2}' | sort -u"` ssh -o StrictHostKeyChecking=no -i keyfile user@host sudo cat file | awk '/^server/ {print \$2}' | sort -u
puts stdout  leftsquarebrc format i val %d 'x%x' $i $i rightsquarebrc 
putty.exe user@server.com -p -w password
pv -c -N transfer /root/networkshare/someFile.tar pv -c -N untar -s $(du -sb /root/networkshare/someFile.tar | awk '{print $1}') du -s -b /root/networkshare/someFile.tar awk {print $1} tar -x -f -C /tmp/someDir/
pv -q -L 37 somefile
pv /dev/zero nc -U /tmp/socket
pv /path/to/archive.tar.xz sudo tar xp -C /path/to/dir
pv infile
pvs /dev/sdb grep failed
pvs /dev/sdb grep failed
pwd
pwd
pwd
pwd
pwd
pwd
pwd
pwd
pwd
pwd
pwd
pwd  leftsquarebrc  $x != /  rightsquarebrc  dirname $x find $x -maxdepth 1 -name file.txt
pwd -P
pwd -P cd `dirname $TMP` dirname $TMP rm -r -f ./`basename $TMP` basename $TMP unset TMP
pwd cd /tmp pwd pwd
pwd cut -b -2 -- tr / \n
pwd cut -d / -f 4
pwd sed s#.*/##
pwd tr / \n
pwd xargs basename awk {print tolower($0)}
pwd xsel -i
pwpolicy -u SomeUser -s -e -t -h -a -s -h -t -y -p -e -s SMB-NT off
pwpolicy -u SomeUser -s -e -t -h -a -s -h -t -y -p -e -s SMB-NT on
pwpolicy -u jdoe -g -e -t -p -o -l -i -c -y grep -o -E isDisabled=.
pwpolicy -u jdoe -g -e -t -p -o -l -i -c -y grep -o -E isDisabled=.
px aux sed -n s/.*-q\s\( leftsquarebrc 0-9 rightsquarebrc \+\).*/\1/p
pygmentize $var
pygmentize -o jquery.png jquery-1.7.1.js
pysortints.py
python $(dirname "$0")/foo.py dirname $0
python $0 $@
python $@
python $f
python --version
python --version
python --version
python --version
python -V
python -V
python -c $( leftanglebrc  foo.py)
python -c $import renif True: print HELLO;
python -c $import subprocessnwhile True: subprocess.call( leftsquarebrc ls rightsquarebrc )
python -c $import sysnfor p in sys.path:print p
python -c $print file.shapen import sys,osn
python -c -i -m -p -o -r -t -  -t -h -e -m -o -d -u -l -e -; -  -t -h -e -m -o -d -u -l -e -. -t -h -e -f -u -n -c -t -i -o -n -( -b -o -o -! -)
python -c exec("import sys\nfor r in range(10): print 'rob'")
python -c for ln in __import__("fileinput").input(): print ln.rstrip() files...
python -c for x in range(1,10): print x
python -c for x in range(1,10): x==1 and __import__('calendar').prcal(2009); print x;
python -c from foo import *; print hello()
python -c from foo import hello; print hello()
python -c from itertools import permutations as p ; print('n'.join( leftsquarebrc ''.join(item) for line in open('File') for item in p(line leftsquarebrc :-1 rightsquarebrc ) rightsquarebrc ))
python -c from itertools import permutations as p ; print('n'.join( leftsquarebrc ''.join(item) for line in open('File') for item in p(line leftsquarebrc :-1 rightsquarebrc ) rightsquarebrc ))
python -c from math import ceil; print ceil($NUMBER/500.0)
python -c from unidecode import *; print unidecode(u'xc3xa4xc3xa8xc3x9f')
python -c import $1; print $1.__file__
python -c import MythDB.MythTV
python -c import code; code.interact(local=locals())
python -c import csv,sys; leftsquarebrc sys.stdout.write(row leftsquarebrc 2 rightsquarebrc +"\n") for row in csv.reader(sys.stdin) rightsquarebrc 
python -c import foo; print foo.hello()
python -c import hello; print(hello.hello())
python -c import json;print json.loads(open('json_file.json', 'r').read()) leftsquarebrc 'result' rightsquarebrc  leftsquarebrc 'covered_percent' rightsquarebrc 
python -c import locale; locale.setlocale(locale.LC_ALL, ''); print ('n'.join('text1 ' + locale.format_string('%.1f+(%.1f*(%.1f+2.5))',(i,i,i), grouping = True)  + ' text2 ' + locale.format_string('%.1f',i+(i*(i+2.5)), grouping = True) + ' text3'for i in range(1,1111)))
python -c import mymodule, code; code.interact(local=locals())
python -c import os, sys, pickle; pickle.dump(os.environ, sys.stdout)
python -c import os; print '*' * int((int(os.environ.get('HEALTH', 0)) / 100.0) * 78)
python -c import os; print dir(os)
python -c import os; print os.environ leftsquarebrc "Clear Workspace" rightsquarebrc 
python -c import re;from random import choice; import sys; sys.stdout.write(re.escape("".join( leftsquarebrc choice("abcdefghijklmnopqrstuvwxyz0123456789^&*(-_=+)") for i in range(50) rightsquarebrc )))
python -c import subprocess,time;proc = subprocess.Popen( leftsquarebrc 'ping','-t', 'google.com' rightsquarebrc , shell=True);time.sleep(1);proc.terminate()
python -c import sys,Quartz; d=Quartz.CGSessionCopyCurrentDictionary(); sys.exit(d and d.get("CGSSessionScreenIsLocked", 0) == 0 and d.get("kCGSSessionOnConsoleKey", 0) == 1)
python -c import sys; print sys.path
python -c import sys; print sys.real_prefix
python -c import sys; print(sys.executable)
python -c import sys;print "".join(sorted(set.intersection(* leftsquarebrc set(open(a).readlines()) for a in sys.argv leftsquarebrc 1: rightsquarebrc  rightsquarebrc ))) File1 File2 File3
python -c import test; print test.get_foo()
python -c import test; print test.get_foo()
python -c import test; print test.get_foo()
python -c import test; print test.get_foo(), test.get_bar()
python -c import urllib, sys; print urllib.unquote(sys.argv leftsquarebrc 1 rightsquarebrc ) h%23g
python -c print "\n".join(map(lambda x: x leftsquarebrc 2 rightsquarebrc , open(" leftanglebrc filename rightanglebrc ").readlines()))
python -c print "hello"; print "world"
python -c print "ls" bash
python -c print $NUM
python -c print 'hello world'
python -c print 'n'.join(sorted(set(unicode(open('inputfile').read(), 'utf-8')) - set(chr(i) for i in xrange(128))))
python -c print file.shape\n import sys,os\n
python -c print u"'$STR'"
python -c print u"\u5000".encode("UTF-8")
python -c return subprocess.call( leftsquarebrc 'ssh', '$host', 'test -e ' + pipes.quote("$path") rightsquarebrc ) == 0
python -c sys.path.append(os.path.join(os.environ leftsquarebrc 'PETSC_DIR' rightsquarebrc ,'bin','pythonscripts'))
python -i -c import sys; import datetime;
python -i main.py
python -i my_script.py
python -i test.py
python -m -j -s -o -n -. -t -o -o -l  leftsquarebrc "cheese", {"cake": leftsquarebrc "coke", null, 160, 2 rightsquarebrc } rightsquarebrc 
python -m SimpleHTTPServer
python -m SimpleHTTPServer 80
python -m SimpleHTTPServer 8000
python -m a -m b
python -m pdb myscript.py
python -m pyftpdlib
python -m run
python -t somescript.py
python -u MyLongRunngingScript.py tee log.txt
python -u myscript.py
python -u someFileName.py
python -u test.py cat test.out
python ./build_native.py grep error
python /path/to/tcprelay.py -t 22:2222
python /path/to/your_script.py arg1 arg2  leftsquarebrc ... rightsquarebrc 
python /var/www/hash_info.py /var/www/Muha_Album.7912.torrent
python /var/www/music/getMetaData.py $artist $title tail -n 1
python C:PythonScript.py
python Code.py $(find . -type f -name "mubunching*" | awk -F' leftsquarebrc . rightsquarebrc ' '$(NF-1) rightanglebrc =5') find . -type f -name mubunching* awk -F - leftsquarebrc  -. - rightsquarebrc  $(NF-1) rightanglebrc =5
python Script1.py $i
python a.py a&7
python a.py a^ 7
python a.py python b.py python c.py python d.py
python argtest.py hello
python calls.py awk /^ leftsquarebrc 0-9 rightsquarebrc /{print}/
python cat
python clean_index.py
python command sudo shutdown -h now
python convertImage.py convertFile fileName
python convert_csv.py infile outfile
python csvadd.py test.csv
python filename.py mailx -s Subject mail@mail.com
python fill-xml-template.py A.txt B.xml -i
python fooPy.py
python main.py
python manage.py collectstatic
python manage.py runserver
python manage.py runserver --noreload
python manage.py sql myproject
python manage.py test
python manage.py test purchaseplans
python mapper.py python reducer.py
python myScript.py test.txt mv test.out test.txt
python my_script.py
python myprogram.py $1 $2
python myprogram.py $@
python myscript.py
python myscript.py 1 foo bar baz
python myscript.py 12
python myscript.py cat
python myscript.py test pbkdf2_sha256$12000$EkKZXYXv0adl$GZppRyXed3a0y1uZMBR/F8Mu/rnpsN+7atY4hZAwlrQ=
python myscript.py wc -l
python parse_input.py $1n2n
python path/to/the/script.py
python print-warning.py
python program01.py python program02.py
python py.py --l  leftsquarebrc 1,2,3, leftsquarebrc 1,2,3 rightsquarebrc  rightsquarebrc  -d {1:'one',2:'two',3:'three'} --tu (1,2,3)
python python_script.py filename
python runtest.py
python runtest.py tee ~/into/reptest/runtest-all.out.$i
python sample.py
python sample.py --query myquery
python script.py --conf_dir /tmp/good_conf
python script.py --debug --xls 001
python script.py /tmp/good_conf
python script.py nc 127.0.0.1 8011
python script.py python script2.py
python scriptA.py python scriptB.py python scriptC.py rsync blablabla
python setup.py build_ext --inplace
python setup.py install --prefix /share/pythonLib
python test.py  leftanglebrc ( hadoop fs -cat inputfile.txt ) hadoop fs -c -a -t inputfile.txt
python test.py --mode 
python withenv.py PYTHONPATH=. python scripts/doit.py
python yourscript
python.exe -c import sys; print sys.argv leftsquarebrc 1: rightsquarebrc  *.txt
python.exe path/to/script.py
python2.7 -c exec("inp=raw_input()nlst= leftsquarebrc int(x)+5 for x in inp.split('-') rightsquarebrc nfor x in lst: print xnprint 'the result is:', sum(lst)")
python2.7 -c import site; print site.getsitepackages() leftsquarebrc -1 rightsquarebrc 
python2.7 -u main.py
python2.7 /home/nezap/webapps/bonzer/bonzer/apps/base/alert.py
python3 -m pdb /parent/folder/module_folder/__main__.py
python3 program.py diff compare_file.txt
pythonscript.py --in_delimiter $t --in_file input.txt
pythonsh $pyth parameters
q  leftsquarebrc exit-code rightsquarebrc 
q -m -a -t -c -h nothing to commit
q -n -o -t -c -o -n -t -a -i -n -s nothing to commit, working directory clean
q = 30
q ~ / leftsquarebrc 01459 rightsquarebrc /
qdbus org.freedesktop.ScreenSaver /ScreenSaver Lock
qmHandle -H -$ -b -e -t -r -e -f -f
qmake -v grep -m 1 -o -P (Qt  leftsquarebrc ^) rightsquarebrc + cut -d -  -f 2
qq: printf '\ec'n
qsh test.txt
qstat -Q
qstat -Q -f queuename
qstat -u * grep Eqw awk {print $1} qmod -c -j $x
qstat awk $6 ~ "01/06" {cmd="qdel " $1; system(cmd); close(cmd)}
qstat grep -c my_username
qsub -W depend=afterok:$(qsub job.sh) analyze.sh qsub job.sh
qsub -o /mypath/output.txt -e /mypath/error.txt submit_job.sh
qsub -t 1-3 job_script.sh
qsub -v Nlay=10,prefix="qwerty" dump.sh
qsub -v Nlay=10,prefix="qwerty" dump.sh
qsub -v Nlay=10,prefix=\"qwerty\" dump.sh
qsub analyze.sh -W depend=afterokarray:427 leftsquarebrc  rightsquarebrc 
qsub compute.job -v VAR1=$i,VAR2=$p
qweyuioyuioyuio
qweyuioyuioyuioyuioyuio
r/}
rackspace_canonize rackspace_extract_public_ip
rackspace_canonize rackspace_extract_status
rails generate model photo title:string album:references
raise Must run as root unless Process.uid == 0
rake bleh:bar FOO=hello
rake college:create leftsquarebrc demo rightsquarebrc 
rake db:migrate
rake figaro:heroku
rake foo:bar
rake spec
random arg1 arg2
randx3 11
rar a -m 0 -r ${folder%/}.rar $folder
rar rn out.rar filesfinf1.jpg filesfinf3.jpg
rarname.*.rar
rawler http://lambrecipes.ca
rbenv install 1.9.3-p194
rd /s %systemdrive%$Recycle.bin
rdesktop -r disk:bacon=$HOME/bacon host
read $@
read $i mysql_exec SELECT $i FROM orders WHERE order_id = $order
read $sni
read $user
read -a A echo ${A leftsquarebrc 1 rightsquarebrc }
read -a arr
read -a arr
read -a arr
read -a arr grep line1 file
read -a array
read -a arrchar -d  fold -w 1 t.txt sort -u
read -a databasesarray dbs -d 123123 awk /db/{print $2}
read -a header
read -a myArray$i
read -a names
read -a natc
read -d  -r file echo $file printf -v name %q $file echo $name find -print0
read -d -s -n 1
read -d 0 -a array
read -e -i ls -l eval $REPLY
read -e -p
read -e -p Add a Directory  add
read -e -p City:  -i $city city
read -e -p Glassfish Path: GF_DIR
read -e -p Please enter your name - rightanglebrc   -n 20 name
read -n 1 -p File $file exists. Do you want to delete?  leftsquarebrc y/n rightsquarebrc   delete
read -n 1 SEAT {stuff}
read -n 1 echo All zeroes.
read -n 1 x read -n 1 -t .1 y
read -n 10 -e VAR
read -p $Please Enter the percent  leftsquarebrc 30 between 100 rightsquarebrc x0a The value is  Default = 80   : scale_percent
read -p $e leftsquarebrc 31mFoobare leftsquarebrc 0m:  foo
read -p Cmd rightanglebrc   cmd echo $e leftsquarebrc Ae leftsquarebrc 5C${cmd}-append_something
read -p Cmd rightanglebrc  $'e leftsquarebrc s' cmd echo $e leftsquarebrc u${cmd}-append_something
read -p Continue?  leftsquarebrc y/n rightsquarebrc :  yn
read -p Delete $file? (y/n)  input
read -p Enter ip address:  IP_ADDRESS
read -p Please enter the location of this report (type 0 to exit):  -e -r filelocation
read -p Which server do you want to know about:  var_server
read -p ^ leftsquarebrc  leftsquarebrc 31mFoobar^ leftsquarebrc  leftsquarebrc 0m:  foo
read -p `pwd -P`$  _command pwd -P
read -p mysql password:  PASS ssh user@domain.com mysqldump -u mysqluser -p'$PASS' --databases foo | bzip2
read -p prompt
read -q REPLY?This is the question I want to ask?
read -r -a arr
read -r -s -n -1
read -r -u 3 line ...
read -r FIRSTLINE
read -r _ numA _ numB grep MemFree /proc/meminfo tail -n 1
read -r a echo test n test echo $a
read -r cbuild
read -r f mv $f ${f//:/_}
read -r file cat $file
read -r identity
read -r line declare $line
read -r line echo $line
read -r line eval echo ${line} process
read -r line sed -i ${line} d ./file.txt
read -r max min awk NR==1{max=$3; min=$3}{if ($3 rightanglebrc max) max=$3; if ($3 leftanglebrc min) min=$3;} END {print max,min} List.txt
read -r path echo $path
read -r read -r program
read -r var
read -r var ssh remote echo test; sleep 5 echo $var
read -s -k
read -s -p mysql password:  PASS ...
read -s foobar
read -t 1 __response
read -t 10
read -t 2
read -t 3 variable tail -f logfile.log grep something
read -t 5 -p What is your name?
read -t variable command
read ARG
read BAR bc -l
read DIR
read ENE awk {print $1} file
read FINISH_TIME cat /proc/self/stat awk {print $22;}
read IP CN exec ifconfig en0 awk /inet / { t = $2; sub(/.* leftsquarebrc . rightsquarebrc /, "", t); print $2, t }
read IP_ADDRESS
read L grep -E -o  leftsquarebrc 0-9 rightsquarebrc {2}: leftsquarebrc 0-9 rightsquarebrc {2} (p|a).m. head -1
read MD5SUM FILENAME grep -q -i -s $MD5SUM CollectionB.MD5SUM echo $FILENAME does not exist in CollectionB
read MD5SUM FILENAME grep -q -i -s $MD5SUM CollectionB.MD5SUM echo ${FILENAME#\*} does not exist in CollectionB
read NEXT_PPID exec ps -o ppid= $ID
read PID exec ps -o ppid= $ID
read SITENAME
read VAR
read VAR echo text
read VAR1 VAR2 VAR3
read VAR1 VAR2 VAR3 egrep pattern config-file.cfg
read a b  leftsquarebrc  -z $b  rightsquarebrc  echo $a
read a b c
read a b c echo 1 2 3 echo $a|$b|$c
read a b c echo foo awk { print $1; print $1; print $1 }
read a b echo $a $b
read a b sed s/^"HostName.*$/"HostName"="$b"/ template
read a grep $a text1.csv
read a read b echo $a, $b
read answer
read array leftsquarebrc $i rightsquarebrc 
read choice
read d _ date -d @$d
read dd1 echo $dd1 cut -d -/ -f 1
read f
read f
read f1 f2 echo $(date -d @$f1) $f2 date -d @$f1
read file printf rm -v %qn $file
read filename tar -x -O -f file.tar $filename grep pattern sed s|^|$filename:| tar -t -f file.tar grep -v /$
read foo
read foo bar
read foo things process substitution
read genre artist album track
read h n1 n2 n3 n4 echo $h sed -n -e /^$h$/{ -e n -e p -e q -e } file1 echo $n1 echo $n3 sed -n -e /^$h$/{ -e n -e n -e p -e n -e p -e q -e } file1
read header_line
read host echo $host
read i
read i echo $i echo $FILECONTENT
read input
read ip others nc -z -w -3 $ip 80 echo $ip:80 = rightanglebrc  opened echo $ip:80 = rightanglebrc   closed
read item rm $item
read key
read l echo $l python script1.py python script2.py
read l python script.py python script2.py
read line
read line
read line  leftsquarebrc  $(ispell -l  leftanglebrc  leftanglebrc  leftanglebrc  "$line" | wc -l) -g -t 0  rightsquarebrc  ispell -l wc -l echo $line
read line  leftsquarebrc  -f $line  rightsquarebrc  echo $line
read line ./fileB.rb $line
read line ./script $line
read line echo $a
read line echo $line
read line echo $line
read line echo $line script.py $arg
read line echo LINE: $line echo $x
read line echo LINE: $line sed -n ${N}p
read line eval echo ${line} /sbin/iptables-restore -v
read line mkdir -p $(dirname "$line") dirname $line scp -p bill@lgrdcpvtsa:$line $line
read line mkdir -p $(dirname "$line") dirname $line scp -r -p bill@lgrdcpvtsa:$line $line
read line mkdir -p ${line%/*}
read line printf $(echo -n $line | sed 's/\\/\\\\/g;s/\(%\)\( leftsquarebrc 0-9a-fA-F rightsquarebrc  leftsquarebrc 0-9a-fA-F rightsquarebrc \)/\\x\2/g')n echo -n $line sed s/\\/\\\\/g;s/\(%\)\( leftsquarebrc 0-9a-fA-F rightsquarebrc  leftsquarebrc 0-9a-fA-F rightsquarebrc \)/\\x\2/g
read line printf %s $line
read line printf %s;  $line
read line printf other text printf %s $line
read line python python_script.py -l $line scp -P 10022 *.pdf localhost:path/to/put/files/ rm *.pdf
read line ssh -n server_address cd tmp_download_directory && rm -f *.pdf && python python_script.py -l $line scp server_address:tmp_download_directory/*.pdf /local/path/to/put/files/ ssh server_address rm -f tmp_download_directory/*.pdf
read lines words chars filename wc x
read mm wc -l
read month day date -d 2 days +%m %d
read myVariable
read newstring
read num line echo $line
read number break
read oldrev newrev refname
read options
read part1 part2 echo 9191234567 sed s/^\( leftsquarebrc 0-9 rightsquarebrc \{3\}\)\( leftsquarebrc 0-9 rightsquarebrc \{7\}\)$/\1 \2/
read sni
read text echo $text bc -l
read thefile unzip -q /path/to/zipfile $thefile
read u f ls -l -a awk {print $3 " "  $9}
read undeletefile
read user
read var1
read var1
read var1 read var2
read var1 var2 python file.py
read vl grep -w $vl APL_vs_HS.tab echo
read w n echo -n ${w:(($n-1)):1}
read x echo $x nc host port
read x echo -n $x:  expr $(open_file $x | wc -l) / 4 open_file $x wc -l
read x kill -9 $x
read: 1: Illegal option -d
readArgs $@
readFile.sh info
readarray -O 1 -t files exec find ...
readarray -t DESCRIPTION
readarray -t TIDs
readarray -t arr find . -type f
readarray -t foo echo foo bar echo echo echo baz
readarray -t rpmarr exec rpm -V -a
readarray -t service_array exec service --status-all sed s|.* ||
readarray -t usersHomeFiles find $user_home
readarray a
readarray array  leftanglebrc ( foo ) foo
readarray ary
readelf --debug-dump info ${1%*.cpp}.o
readelf -S ELF_Binary awk $2==".plt" {print $2,$4,$5,$6}
readelf -h /lib/libuuid.so.1.3.0
readline arguments
readlink $LINK
readlink -f
readlink -f $(dirname $(readlink -f "$0"))/.. dirname $(readlink -f "$0") readlink -f $0
readlink -f $(dirname ${BASH_SOURCE leftsquarebrc 0 rightsquarebrc }) dirname ${BASH_SOURCE leftsquarebrc 0 rightsquarebrc }
readlink -f $@
readlink -f $SOMEPATH
readlink -f $Somevar
readlink -f /proc/$$/fd/1
readlink -f `dirname $0` dirname $0
readlink -f bar.txt
readlink -f relative/path/to/file
readlink -m /home/nohsib/dvc/../bop
readlink /proc/$$/fd/1
readonly -f functionName
readonly DATA=/usr/home/data/file.dat
readonly readonly_var=foo
realpath ${BASH_SOURCE leftsquarebrc 0 rightsquarebrc }
realpath -z oneword two words xargs -0 find
recode ibmpc..latin1 script.sh
recode ibmpc..latin1 your.sh
red@gmail.com red1@gmail.com red2@gmail.com
redis-cli --raw llen some_list awk { print $1 }
redis-cli KEYS session.* awk {printf "EXPIRE %s 60\n", $1} redis-cli
redis-cli cat
reg add HKCUtestfolder /t REG_EXPAND_SZ /v Stokrotka /d ^%systemroot^%system32
reg query HKEY_LOCAL_MACHINESoftwareMicrosoftInternet Explorer /v version find version
reg query HKLMSOFTWAREMicrosoftWindowsCurrentVersionApp PathsWINWORD.EXE
reg query HKLMSystemCurrentControlSetControlSession ManagerEnvironment /v PROCESSOR_ARCHITECTURE
reg query HKUS-1-5-19
regCmd = regedit.exe /E  regFile 
regex = AB( leftsquarebrc ^AB rightsquarebrc |B| leftsquarebrc ^B rightsquarebrc A)*BA
remapR.nc
remote_user: test_user
remove.sh main
removed temporarily to avoid confusion
ren ?_result.bak ?.txt
ren foo.txt foo-%RANDOM%-%RANDOM%.txt
ren foo.txt foo-%RANDOM%.txt
rename  ./-*
rename -- -- *.mkv
rename -f s/_/-/g *_*.mat
rename -n $c++; s/^(.{4}).*/sprintf("%s%04d", $1, $c)/e $(awk '{print $2}' YOUR_OWN_FILE) awk {print $2} YOUR_OWN_FILE
rename -n $c++; s/^(.{4}).*/sprintf("%s%05d", $1, $c)/e  leftsquarebrc A-Z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc _*
rename -n -e s/_.*_/_/ *.png
rename -n -v s,.*(\d{3}).*,$1, *
rename -n s/($pattern).*?.$ext$/$1.$ext/ *.$ext
rename -n s/IMG_( leftsquarebrc 0-9 rightsquarebrc *)\.jpg/$1/; $_="IMG_".substr("000" . ($_-1067), -4).".jpg" *.jpg
rename -n s/^/1-/ *.mp3
rename -n s/_\d+(\. leftsquarebrc a-z0-9A-Z rightsquarebrc +)$/$1/ *
rename -n s/_temp\.txt$/.txt/ *_temp.txt
rename -v %::new=(quick= rightanglebrc "slow",brown= rightanglebrc "red");s/(quick|brown)/$::new{$1}/g *
rename -v s/quick/slow/g;s/brown/red/g *
rename .244  *.244
rename .dat .mp3 *.dat
rename .ext .otherext *.ext
rename 0000 000 F0000*
rename 51fdda 2c3cd *tokudb
rename ABC XYZ *.dat
rename G:AuthorsListAuthorsList_New.mdb AuthorsListCopy.mdb
rename _ . *.jpg
rename _1 _ *.gif
rename _foo _bar _foo*.php
rename dev.example.com.cfg prod.example.com.cfg *.cfg
rename linux_  linux_*.mp4
rename old new data-source
rename s%ABC%DEF%g ...
rename s/ //g;s/.lit.txt$/.txt/ *.lit.txt
rename s/ \ leftsquarebrc 720p\ rightsquarebrc //g ./*
rename s/ leftsquarebrc 0-9 rightsquarebrc {14}// CombinedReports_LLL-*.csv
rename s/$dir/ leftsquarebrc 0-9 rightsquarebrc {8}/$dir/$dir/ $dir/*
rename s/%( leftsquarebrc 0-9A-Fa-f rightsquarebrc {2})/chr(hex($1))/eg|s/\s/_/g|s/-\(.*\)// *
rename s/($pattern).*?.$ext$/$1.$ext/ *.$ext
rename s/(\d+)/sprintf("%03d", $1)/e *.pdf
rename s/(\d{2})-(\d{6})\.jpg/abc-$2-$1.jpg/ *.jpg
rename s/- leftsquarebrc 0-9 rightsquarebrc +// *.tedx
rename s/- leftsquarebrc ^- rightsquarebrc +\.jpg$/.jpg/ *.jpg
rename s/---/-/ *---*
rename s/-foo-bar// *-foo-bar.txt
rename s/0000/000/ F0000*
rename s/ABC/XYZ/ *.dat
rename s/\.(?! leftsquarebrc ^. rightsquarebrc *$)/_/g {}
rename s/\.(?= leftsquarebrc ^. rightsquarebrc *\.)/_/g {}
rename s/\.//; .*
rename s/\.244// *.244
rename s/\.ext\z/.otherext/ *.ext
rename s/\s*-\s*/-/g *.doc
rename s/\s\( leftsquarebrc ^\) rightsquarebrc +\)// *.*
rename s/^ leftsquarebrc 0-9 rightsquarebrc *-//; *
rename s/^#// *
rename s/^(\d+)/5000000+$1/e *.jpg
rename s/^.* (.*\.csv)$/$1/ *.csv
rename s/^.// `ls -d .*` ls -d .*
rename s/^0// 0*
rename s/^file\.( leftsquarebrc 0-9 rightsquarebrc {4})-( leftsquarebrc 0-9 rightsquarebrc {2})-( leftsquarebrc 0-9 rightsquarebrc {2})\.txt$/file_y$1m$2d$3.txt/ *
rename s/^image// image*.jpg
rename s/^image0+// image*.jpg
rename s/^linux_// linux_*.mp4
rename s/_.*?_/_/ file_*
rename s/_\d+(\. leftsquarebrc a-z0-9A-Z rightsquarebrc +)$/$1/ *
rename s/ab$/SD/ *.xml.ab
rename s/document\.(\d\d)\.?(\w+)?(.txt)/"docs $1".($2 && " - $2").$3/e document.*.txt
rename s/mp3?.*/mp3/ *.mp3*
rename s/phonecalls/calllog/;s/\.zip$/.tsv/ /data/work/files/*.zip
rename s/sink-// *files
rename y/\W/_ *
renice -n 1 $$
replace file
replace file
replace string 1 string 2 -- *.html
replace string string$'n'${THIS} file.txt
replace_path PATH /usr/bin /work/bin
replace_with = this should be \\non two lines
replace_with = this should benon two lines
repo sync
reptyr -s PID
req.session.co = req.headers leftsquarebrc req.session.co rightsquarebrc 
require activerecord
require irb/completion
require rtf
reset
response != Y response != N
response_time = `ping -c 1 www.pintile.com | tail -1| awk '{print $4}' | cut -d '/' -f 2` ping -c 1 www.pintile.com tail -1 awk {print $4} cut -d / -f 2
restartPortal.bat MyUser MyPassword
result += final
result = $(echo 'command'  leftanglebrc &${bkgndProc leftsquarebrc 0 rightsquarebrc }) echo command
result = `sed 's\@^\\( leftsquarebrc ^; rightsquarebrc *\\);$id_play;\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\)\$\@\\1-$id_play-\\2-\\3-\\4-\\5-\\6-\\7\@g;tx;d;:x' $input` sed s\@^\\( leftsquarebrc ^; rightsquarebrc *\\);$id_play;\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\);\\( leftsquarebrc ^; rightsquarebrc *\\)\$\@\\1-$id_play-\\2-\\3-\\4-\\5-\\6-\\7\@g;tx;d;:x $input
result = `su SomeUser ./dothis.php 2 rightanglebrc &1` su SomeUser ./dothis.php
result is C
result.returncode
result:9
return $LINENO
return 0
return perl -e -u -s -e -  -R -e -g -e -x -p -: -: -C -o -m -m -o -n -  -q -w -/ -n -e -t -/ -; -$ -i -p -= -s -h -i -f -t -; -i -f -  -( -$ -i -p -  -= -~ -  -/ -$ -R -E -{ -n -e -t -} -{ -I -P -v -4 -} -/ -) -{ -e -x -i -t -  -0 -} -e -l -s -e -{ -e -x -i -t -  -1 -} $Address
rev
rev file cut -d -- -f -2 -- rev
rev filename sed s/;/-;/ rev
revcut $(cat filename) start end cat filename
revcut some string start end
revision: 1
rgrep taxes .
rhc configure-app -a TestProject20140324192518 --deployment-type binary
rhref=((?:../)+external.html?link=)( leftsquarebrc ^ rightsquarebrc +)
rightright
rlwrap -a -- redis-cli
rm  leftsquarebrc ^IN rightsquarebrc *
rm $( leftanglebrc file.txt)
rm $( leftanglebrc list.txt)
rm $(echo abcd) echo abcd
rm $(grep -l foo  leftanglebrc  leftanglebrc  leftanglebrc  "$( leftanglebrc /my/file.list)") grep -l foo
rm $(ls | grep p_ | xargs echo) ls grep p_ xargs echo
rm $(ls | grep p_) ls grep p_
rm $0
rm $@.tmp
rm $f
rm $file
rm $file
rm $i
rm $i
rm $line
rm $urls
rm ${LOG}.tmp*
rm *
rm *'*
rm *.txt echo ERROR
rm *3*
rm *_web.* *_thumb.*
rm -- $0
rm -- $web_dir/three_days_ago/*.gif
rm -- --testings.html
rm -- -d -f 2
rm -- -f -i -l -e -n -a -m -e
rm -- -m -y -f -i -l -e -. -t -x -t
rm -R $(ls -lt | grep '^d' | tail -1  | tr " " "\n" | tail -1) ls -l -t grep ^d tail -1 tr   n tail -1
rm -f $( leftanglebrc file.txt)
rm -f $tmpfile
rm -f $tmpfile
rm -f *~
rm -f -- ${inactive_files leftsquarebrc @ rightsquarebrc }
rm -f -r -- foo.js FOOBAR bar.json fubar/ .foo/ .baz
rm -f -r XYZ
rm -f -r XYZ/*
rm -f XYZ/*
rm -f `grep 'Failure' ./*.log | cut -d: -f1 | uniq` grep Failure ./*.log cut -d -: -f 1 uniq
rm -f `grep -m 1 'Failure' ./*.log | cut -d: -f1` grep -m 1 Failure ./*.log cut -d -: -f 1
rm -f temp.files ls -1 *.log cat temp.files sed -r s/(.*)- leftsquarebrc 0-9 rightsquarebrc {4}(- leftsquarebrc 0-9 rightsquarebrc {2})+.log/cat 1*  rightanglebrc  rightanglebrc  1$(date  +"-%Y-%m-%d-%H-%M").log/ date +-%Y-%m-%d-%H-%M uniq sh xargs rm -r -f rm -f temp.files
rm -f test.txt
rm -f test.txt
rm -f {100..150}
rm -i -- * *
rm -r $newBaseDir/Data/NewDataCopy
rm -r -- $DIR*
rm -r -f $(echo file.war | sed 's/\.war$//') echo file.war sed s/\.war$//
rm -r -f $(find . -type f -exec grep -l 'STRING' {} \;) find . -type f -exec grep -l STRING {} ;
rm -r -f $(find /home/ -name '*.mp3') find /home/ -name *.mp3
rm -r -f $(sed 's/\.war$//'  leftanglebrc  leftanglebrc  leftanglebrc  "file.war") sed s/\.war$//
rm -r -f $conexiuni
rm -r -f ${OLDPWD}
rm -r -f ${file}
rm -r -f *
rm -r -f -*
rm -r -f -- $(pwd -P) pwd -P cd ..
rm -r -f -i *
rm -r -f .git
rm -r -f /Users/ leftsquarebrc username rightsquarebrc /Library/Caches/Google/Chrome/Default/Cache/
rm -r -f /Users/ leftsquarebrc username rightsquarebrc /Library/Caches/Google/Chrome/Default/Media Cache/
rm -r -f /etc/bash_completion.d/git
rm -r -f /etc/rvmrc /etc/profile.d/rvm.sh /usr/local/rvm
rm -r -f /path/*
rm -r -f /path/to/your/folder
rm -r -f /var/some/dir/*
rm -r -f _folder1
rm -r -f abc.log.2012-03-14 abc.log.2012-03-27 abc.log.2012-03-28
rm -r -f abc.log.2012-03-{14,27,28}
rm -r -f alpha_1
rm -r -f dir1 dir2 dir3 ...
rm -r -f dir1 rm -r -f dir2 rm -r -f dir3 ...
rm -r -f mCSS
rm -r -f xyzdir*
rm -r -f yo-2
rm -r -f {1000..12000}
rm -r -v dir wc -l
rm -r /usr/include/...
rm -r `find -type d -iname .svn` find -type d -iname .svn
rm -r bin/node bin/node-waf include/node lib/node lib/pkgconfig/nodejs.pc share/man/man1/node.1
rm -r folder-name
rm -v -f $Doomed
rm ./--1355509766.jpg
rm ./--reporter=test
rm ./-d ./-f2
rm ./-myfile.txt
rm ./server -r
rm /data/property/persist.this.is.my.property reboot
rm /home/user/Documents/Exercise/
rm /home/user/Documents/Exercise/*
rm /some/important/file
rm /tmp/bash_stack_trace.*
rm ??????*
rm SVM*
rm `ls -t | tail -n +6` ls -t tail -n +6
rm `ls -t1 | head -n 5` ls -t 1 head -n 5
rm `ls | grep -v ".h"` ls grep -v .h
rm a-* leftsquarebrc 1-4,6-9 rightsquarebrc 00.dat
rm anotherdirec/*
rm directorytoremovefiles/files
rm file with spaces.txt
rm file.txt
rm foo echo File removal failed
rm noreply-unsch-*
rm p_*
rm subdir/file
rm tempfl.txt
rm test sed s/XXX/printf/
rm test.txt
rm test.txt
rm xy_pipe
rm {100..150}
rm: /var/tmp/SFTP_BATCH_FILE is a directory
rmbut a b c
rmcomm $dir
rmdir --ignore-fail-on-non-empty $newBaseDir/Data/NewDataCopy
ro.build.version.sdk=10
robert dylan marketing
robert dylan marketing
robocopy /mov test a:programs sample.exe
robocopy c:source c:destination *.png *.gif /s
robocopy source destination /MT:25 /NP /NFL /NDL
roll.sh tee -a logfile.text
romanConvert params
root ALL=NOPASSWD: ALL
root@egg-v3:~# su some_user_name -c env grep PATH
rootcmd -s sh -c find . -type f | grep '|' | xargs rename '|' '!'
ros_apple bananas_go_while_197815:123.0 monkey_110_worst_forever thestar
route grep $dest cut -d   -f 2
route grep * awk {print $8}
rpl -p -R $@  *
rpm --verify apache2 awk -v -r -c -= -$ -? {printf "%s %s %s", $1, $NF, rc} tempfile
rpm -e --nodeps `yum list installed | grep rpmforge | awk '{ print $1 }'` yum list installed grep rpmforge awk { print $1 }
rpm -q --qf %{arch} -f /etc/$distro
rpm -q --qf %{name} -f /etc/redhat-release
rpm -q --qf %{version} -f /etc/$distro
rpm -q -a grep -q -w glibc-static yum install glibc-static
rpm -q -a grep openssh-5 xargs -d $n rpm -q -l xargs -d $n cp -t myfolder
rpm -q -f /etc/*-release
rpm -q -i wget awk -- /^Release/ { print $3 }
rr.sh file1.txt file2.txt
rsh $host module load turbovnc-1.0.0; vncserver -otp 2 rightanglebrc  tmp_vnc.log
rsh -l user machine echo "PORTS = 123|456|789"  rightanglebrc  rightanglebrc  conf.cfg
rsh -l user_name windows_host_name C:pathtoscript.bat
rsh -l user_name windows_host_name C:scan.bat
rsync  leftsquarebrc OPTION rightsquarebrc ... SRC  leftsquarebrc SRC rightsquarebrc ... DEST
rsync  leftsquarebrc options rightsquarebrc  source_dir dest_host:dest_dir
rsync *.jpg hostname:yourdir
rsync --bwlimit 500 ......
rsync --cvs-exclude projectdirectory/* ../projectdirectorydestinationfolder/
rsync --del -a -z -e ssh -i mycrt.crt /home/gnutt/backup/ me@offisite:backup logger -i
rsync --delete -a -v -z -e ssh USER@SERVER:/server/directory/ /traget/directory/.
rsync --delete -a /Users/ajay/Documents/ServerObserverRepo/ /WebServer/Documents/ServerObserver/
rsync --delete -r -u /home/user/music/flac/* /media/MUSIC/flac
rsync --dry-run --existing --recursive remote:/directory/ local:/directory/
rsync --exclude .* ...
rsync --exclude B/ --exclude C/ . anotherhost:/path/to/target/directory
rsync --exclude cache/ ....
rsync --files-from files.txt --remove-source-files src dest
rsync --ignore-existing --recursive /src /dst
rsync --list-only username@servername:/directoryname/
rsync --progress -a -v -h -e ssh /usr/local/ XXX.XXX.XXX.XXX:/BackUp/usr/local/
rsync --progress -r -v -z -e ssh -i/path/to/ssh_private_key my_user@myserver:/root_folder folder/
rsync --progress -r /Volumes/foo /Volumes/bar
rsync --progress -r /Volumes/foo /Volumes/bar awk {printf "."}
rsync --relative --files-from file-list.txt /home /home/dest
rsync --remove-source-files ${USER}@${HOST}:/files/*.txt /tmp/ftpfiles/
rsync --rsh rsh
rsync --stats --compress --recursive --times --perms --links --delete --exclude .git --exclude wp-content/upload --exclude wp-content/uploads --exclude wp-content/gallery /path/to/someDir/ /path/to/otherDir
rsync --update --recursive local:/directory/ remote:/directory/
rsync --verbose --progress --stats --compress --rsh ssh --recursive --times --perms --links --delete --exclude *bak --exclude *~ /repository/* $DEV_SERVER:$REMOTE_DIR
rsync -F -F ....
rsync -P -E -a -v --delete --exclude .DS_Store ~/Desktop/ me@remote.example.com:~/rsycn-test
rsync -P -a -v ~/Desktop/ me@remote.example.com:~/rsyc-test
rsync -R src/prog.js images/icon.jpg /tmp/package
rsync -R test/withintest/go.rb test2
rsync -a --exclude * --include needthis.txt me@server:/data/stuff/. .
rsync -a --max-size 100kB sourcedir destdir
rsync -a --progress --remove-source-files src/test/ dest
rsync -a --progress --size-only --exclude .DS_Store --exclude .swp --exclude .Trash --exclude logs/* --exclude xmlogs/* /Users/Devric/Documents/notes/ /Volumes/backup/
rsync -a -F -F origin/ destination/
rsync -a -c --existing /source/ /destination/
rsync -a -e ssh user@host:/apps/data pathToLocalDataStore
rsync -a -q -v -H -A -X --delete $BACKUP_SRC $BACKUP_DST$DAY
rsync -a -r -v -z -e ssh user@server:/myFiles localhost:/DirToSave
rsync -a -v $folderToBeMoved/EyeTV Archive/*.eyetv $newfoldername --exclude Live TV Buffer.eyetv rm -r -f $folderToBeMoved
rsync -a -v --delete --filter :- .gitignore mysiteezpublish_git* john@local.mysite.co.uk:/usr/local/www/apache24/data/trunk/
rsync -a -v --delete -e ssh -i ~/.ssh/apache-rsync apache@server ./ /website
rsync -a -v --delete remote_folder local_folder grep -E ^deleting| leftsquarebrc ^/ rightsquarebrc $
rsync -a -v --exclude *min.min.js parent_dir dest_dir
rsync -a -v --exclude .* src dest
rsync -a -v --exclude /dir1 /tmp/src/ server:/tmp/dst/
rsync -a -v --exclude /u01/oracle/test/product/11.2.0.3/dbs --exclude /u01/oracle/prod/product/11.2.0.3/network source/destination/ /u01/oracle/prod/product/11.2.0.3/ /u01/oracle/test/product/11.2.0.3/
rsync -a -v --exclude folder1 --exclude folder2 --exclude file1.txt source destination
rsync -a -v --exclude path1/to/exclude --exclude path2/to/exclude source destination
rsync -a -v --include *.flv --include *.mp4 --exclude * /source /destination
rsync -a -v --include *.txt --include */ --exclude * dir1/ dir2/
rsync -a -v --progress sourcefolder /destinationfolder --exclude thefoldertoexclude
rsync -a -v -K --exclude /foo --exclude /bar src/ dst/ rsync -a -v -K --include /foo --include /bar --ignore-existing src/ dst/
rsync -a -v -K --exclude /foo src/ dst/ rsync -a -v -K --include /foo --ignore-existing src/ dst/
rsync -a -v -L --progress -e ssh -i /path/to/mykeypair.pem ~/Sites/my_site/* root@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com:/var/www/html/
rsync -a -v -e ssh fileToCopy ssh.myhost.net:/some/nonExisting/dirToCopyTO
rsync -a -v -f -+ -  -* -/ -f -- -  -* /path/src /path/dest/
rsync -a -v -h /home/abc/abac /backups/ddd
rsync -a -v -i -b -u --ignore-existing /home/xyz/public_html/photo/ /home/ABCDE/public_html/photo
rsync -a -v -n -i /path1/ /path2
rsync -a -v -n ./$d/ ./Merged/
rsync -a -v -n user@server.com:/directory/ /local_directory/
rsync -a -v -r -c --delete --exclude somedir source destination
rsync -a -v -r -c -e -i `find . -type f -mtime -2h` @${DST}:/var/backups/ find . -type f -mtime -2h
rsync -a -v -r -e ssh -l user --exclude fl_* ./bench* remote:/my/dir
rsync -a -v -z --include */ --include *.py --exclude * /tmp/level1 /home
rsync -a -v -z --remove-source-files /local/dir/*.jpg user@ip:/remote/dir
rsync -a -v -z --rsh rsh $(LOCALPATH)/$(FILE) $(USER)@$(HOST):$(DIR) LOCALPATH FILE USER HOST DIR
rsync -a -v -z -e ssh --delete /stuff/ user@desktop ip:/home/laptop/stuff/
rsync -a -v -z -e ssh -i /home/thisuser/cron/thishost-rsync-key remoteuser@remotehost:/remote/dir /this/dir/
rsync -a -v -z -e ssh -o IdentityFile=/path/to/file /sync/here/ root@remotehost:/to/here
rsync -a -v -z -e ssh -p 8682 rsync@1.2.3.4:/rsync /rsync
rsync -a -v -z -n --list-only --include company1/ --include company1/unique_folder1/*** --exclude * -e ssh user@server.com:/path/to/old/data/ /path/to/new/data
rsync -a -v -z -n --list-only --include-from /path/to/new/exclude.txt --exclude * -e ssh user@server.com:/path/to/old/data/ /path/to/new/data
rsync -a -v -z B/* A
rsync -a -v -z username@ipaddress:/path/to/backup /path/to/save
rsync -a -v -z ~/path/to/Directory1/ ~/path/to/Directory2/
rsync -a -v ./$d/ ./Merged/
rsync -a -v ./Sites/depot root@my-server-ip:/sites/depot
rsync -a -v ./Sites/depot/ root@my-server-ip:/sites/depot/
rsync -a -v /path/src/ /path/dest/ --include */ --include *.jpg --include *.gif --exclude *
rsync -a -v /view/pore/Personel Address.txt /home/myserver/Personel Address.txt
rsync -a -v from/ to/ --exclude file_to_exclude
rsync -a -v host:a?long?filename /tmp/
rsync -a -v remote_host:$(find logs -type f -ctime -1) local_dir find logs -type f -ctime -1
rsync -a -v user@server.com:/directory/ /local_directory/
rsync -a ./src/ /usr/include/foo/ --include */ --include *.h --exclude *
rsync -a foo bar
rsync -a foo/ bar
rsync -a mars: higgs: --exclude *.conf
rsync -a mars: higgs: --exclude-from rsync_exclude.txt
rsync -a ~/. leftsquarebrc ^. rightsquarebrc * /path/to/backup
rsync -e ssh $f $destination:$destinationFolder/${baseFileName// /\ }.lck
rsync -e ssh -a -v -z --delete-after /path/to/stuff user@slave:/path/to
rsync -e ssh -i ... -F ...
rsync -e ssh -o BatchMode=yes -i /var/www/.ssh/id_rsa /path/to/test/file.txt remotehost:/path/to/test/file.txt
rsync -e ssh root@remote.com:/path/to/file :/path/to/second/file/ /local/directory/
rsync -h -x -D -P -a -v -i -l -y -z -H source/ user@remote:/target/ --stats
rsync -m -r --delete-excluded --include-from  / dest/
rsync -n -a -v -r -c /abc/home/sample1/* server2:/abc/home/sample2/
rsync -p -r /var/repo/released/$project /var/www/released/$project
rsync -r --exclude-from exclude_list.txt src dst
rsync -r --existing B/ A/
rsync -r --include-from  --delete-excluded / dest/
rsync -r --include-from  --delete-excluded /some/dir/ dest/
rsync -r -P --existing source/ user@remote:target/
rsync -r -a -v -e ssh --include */ --include *.pdf --exclude * server:path localpathpath
rsync -r -e ssh ./test/sub1/subsub1/ me@my-system:~/test/sub1/subsub1
rsync -r -l -p -t -v -z -s $localpath/ -e ssh localhost:$remotepath/
rsync -r -t -v -z --rsync-path sudo -u user2 rsync /path/to/local/folder server1:/path/to/remote/folder
rsync -r -v --delete --include foo.txt --exclude * /home/user/ user@remote:/home/user/
rsync -r -v --exclude .git demo demo_bkp
rsync -r -v --inplace --existing /path/to/dir/b/* /path/to/dir/a
rsync -r -v -a -e ssh -l user@mail.com /directory/that/is/local host.domain.com:/another/remote/directory
rsync -r -v -l -p -o -g -t /svntags/tags/ /var/www/html/ $(rsync -rvlpogt /svnbranch/branches/ /var/www/html/) rsync -r -v -l -p -o -g -t /svnbranch/branches/ /var/www/html/
rsync -r -v -l -p -o -g -t /svntags/tags/ /var/www/html/ rsync -r -v -l -p -o -g -t /svnbranch/branches/ /var/www/html/
rsync -r -v -z --chmod ugo rwX -e ssh source destination
rsync -r -v -z -e ssh -p 2222 --progress --remove-sent-files ./dir user@host:/path
rsync -r -z -v -O --exclude .svn edmund@dog.com:/images/edmund/gallery/ ./
rsync -r /foo /baz
rsync -u -a -v 10.30.3.2:/var/log/messages /path/to/store/messages.10.30.3.2
rsync -u -v -m -a --include */ --include templates/**.html --exclude * $html_all_dir $html_dir
rsync -u src dest
rsync -v -a $@ /var/sync_dir/ $transfer_to:/var/sync_dir --progress
rsync -v -a --exclude Frisnuk/plugins/dynmap/** --exclude Frisnuk/orebfuscator_cache/** ...
rsync -v -a -q /var/tmp/files/* /var/www/html/livevideo-stream/
rsync -v -a -z --exclude *.txt /path/to/source/ /path/to/destination/
rsync -v -a ~/from/ ~/to
rsync -v -z -r -P --delete --exclude .git --exclude awstats-icon --exclude awstatsicons --exclude icon ~/Sites/path/to/sitename/ user@server.com:/path/to/sitename/
rsync -z -a -r -v --exclude * --include *.sh $from $to
rsync -z -e ssh user@example.com:/var/www/ /var/www/
rsync -z -v -r --include *.sh --exclude * $from/* root@$host:/home/tmp/
rsync . python rsf.py xan -0 stat -c %i
rsync ... --out-format  ... grep -v -E ^sending|^created tr -s n
rsync ... awk { $1=$2=$3=$4=""; print substr($0,5); }
rsync A host:B
rsync foo bar
rsync ssh --blocking-io user@XX.XXX.XXX.XX:/test/ /test
rsync test.sql test2.cpp myUser@myHost:path/to/files/synced/
rsync://rsync.macports.org/release/tarballs/ports.tar  leftsquarebrc default rightsquarebrc 
ruby -0 0 -e p = "password = *"; re = Regexp.new(Regexp.escape(p)); while gets; puts $_ if re =~ $_; end file
ruby -C /home/my_home test.rb
ruby -a -n -e BEGIN{a=Hash.new};a leftsquarebrc $F leftsquarebrc 0 rightsquarebrc  rightsquarebrc ="#{a leftsquarebrc $F leftsquarebrc 0 rightsquarebrc  rightsquarebrc } #{$F leftsquarebrc 1 rightsquarebrc }"; END{ a.each{|x,y| puts "#{x}#{y}" }} file
ruby -e $(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install) curl -f -s -S -L https://raw.github.com/Homebrew/homebrew/go/install
ruby -e $(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install) curl -f -s -S -L https://raw.github.com/mxcl/homebrew/go/install
ruby -e $(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install) curl -f -s -S -L https://raw.github.com/mxcl/homebrew/go/install
ruby -e $(wget -qO - 'https://raw.github.com/mxcl/homebrew/go') wget -q -O https://raw.github.com/mxcl/homebrew/go
ruby -e $stdin.readlines().each_slice(7).entries.reverse.each { |b| puts b; }
ruby -e ARGF.each {|l| puts (" " * 4) + l} test
ruby -e Dir leftsquarebrc "**/*@x2.png" rightsquarebrc .each{|x| File.rename( x, x.sub(/@x2/,"@2x") ) }
ruby -e File.read(ARGV.shift).scan(/(? leftanglebrc = leftanglebrc strong rightanglebrc ).*?(?= leftanglebrc \/strong rightanglebrc )/m).each{|e| puts "----------"; puts e;} file
ruby -e File.write(ARGV leftsquarebrc 0 rightsquarebrc ,File.read(ARGV leftsquarebrc 0 rightsquarebrc ).gsub(/(--\s--\sDumping\sdata\sfor\stable\s`(?:cache_\w+|cache)`.*?)(?=(?:--\n--\s+Table\sstructure\sfor\stable\s` leftsquarebrc ^` rightsquarebrc +`\s*\n--))/m,"")) $1
ruby -e f = File.open(ARGV leftsquarebrc 0 rightsquarebrc ).read; File.open(ARGV leftsquarebrc 1 rightsquarebrc ).readlines.map{|l| l.split}.each{|a| f.gsub!(a leftsquarebrc 0 rightsquarebrc , a leftsquarebrc 1 rightsquarebrc )}; puts f aaa.txt bbb.txt
ruby -e print File.read(ARGV.shift).unpack('U*').map{ |i| 'u' + i.to_s(16).upcase.rjust(4, '0') }.join your_file
ruby -e puts ARGV.shift.unpack('U*').map{ |i| 'u' + i.to_s(16).upcase.rjust(4, '0') }.join your string
ruby -e puts ENV leftsquarebrc 'Clear Workspace' rightsquarebrc 
ruby -e system "start text_file.txt"
ruby -e x = File.read(ARGV leftsquarebrc 0 rightsquarebrc ); File.open(ARGV leftsquarebrc 1 rightsquarebrc ).readlines.map{|l| l.split}.each{|a| x.gsub!(a leftsquarebrc 0 rightsquarebrc , a leftsquarebrc 1 rightsquarebrc )}; File.write(ARGV leftsquarebrc 0 rightsquarebrc , x) aaa.txt bbb.txt
ruby -i -. -b -a -k -F -, -n -a -e $F leftsquarebrc 2 rightsquarebrc .reverse! if $F leftsquarebrc 2 rightsquarebrc ;print $F.join(",") file
ruby -n -e BEGIN{@head= leftsquarebrc  rightsquarebrc ;@data= leftsquarebrc  rightsquarebrc }; @head  leftanglebrc  leftanglebrc  $1 && @data  leftanglebrc  leftanglebrc  $2 if $_.match(/^---(\S+): (\S+)$/); END{puts @head.join(",");puts @data.join(",")} $FILE
ruby -n -e puts "#{$_.chomp} #{ARGF.filename}" file1 file2
ruby -n -e puts $_.scan(/Min\s+(. leftsquarebrc ^\s rightsquarebrc *)/) file
ruby -p -e -$ -_ -. -g -s -u -b -! -( -% -r -{ -/ -* - rightanglebrc  -s -* -( -. -+ -? -) -s -* -* -/ -} -) -  -{ -  -F -i -l -e -. -r -e -a -d -( -$ -1 -) -  -}
ruby -p -i -. -b -a -k -e $_.gsub(/(\d{2}):(\d) -- rightanglebrc  (\d{2}):(\d{2}):(\d{2}),(\d{3})/) { "#{$3}:#{$4}:#{$5.to_i - 2},#{$6} -- rightanglebrc  #{$3}:#{$4}:#{$5},#{$6}" } *.srt
ruby -p -i -e print "# " if $_ =~ /^RAILS_GEM_VERSION/ config/environment.rb
ruby -r -j -s -o -n -e data = JSON.parse(STDIN.read); exit (data leftsquarebrc "result" rightsquarebrc .length  rightanglebrc  0)
ruby -r -r -u -b -y -g -e -m -s myscript.rb
ruby -r -u -b -y -g -e -m -s myscript.rb
ruby -r -u -n -e httpd . -p 9090
ruby -r ./test.rb -e TestClass.new.test_function 'hi'
ruby -r ./test.rb -e TestClass.test_function 'hi'
ruby -r webrick -e s = WEBrick::HTTPServer.new(:Port = rightanglebrc  9090, :DocumentRoot = rightanglebrc  Dir.pwd); trap('INT') { s.shutdown }; s.start
ruby -x -I -/ -h -o -m -e -/ -m -y -_ -h -o -m -e test.rb
ruby -x /home/my_home test.rb
ruby -x test.rb
ruby /path/to/file.rb
ruby 2.1.1
ruby C:UsersUsernameDesktopMatz.rb
ruby SaveAllDatabases.rb 192.168.0.15 1024 -r #0-D --non-interactive
ruby boundinboxscript.rb FileA.eps FileB.eps xywh
ruby importer.rb data_part01_aa.csv
ruby my_code.rb tee file
ruby options %*
ruby overlay_test.rb tail -n 1 sed -e s/.*assertions, // tee  rightanglebrc (say) say
ruby overlay_test.rb tail -n 1 tee  rightanglebrc (say) say
ruby script.rb /rootdir 2013 searchstring1 searchstring2 searchstring3
ruby test.rb
ruby_script.rb
run cat ${(q)filename_with_spaces}
run cat ~/rvm-installer.sh | bash -s stable --ruby  rightanglebrc out.log
run cat ~/rvm-installer.sh | bash -s stable --ruby  rightanglebrc out.log 2 rightanglebrc &1
run cat ~/rvm-installer.sh | bash -s stable --ruby  rightanglebrc out.log 2 rightanglebrc err.log
run find #{current_release}/migration/ -name *.sql -print0 | xargs -0 -I file mysql -hlocalhost -u#{db_username} -p#{db_password} #{db_database}  leftanglebrc  file
run find #{current_release}/public/static/css/ -name '*.css' -print0 | xargs -0 sed -i -E 's@(../)+(images|static|img)@#{images_cdn}@g'
run mytest.tcl -o -p -t -1 foo -o -p -t -2 bar
run visudo
run yourCommand
run! if __FILE__==$0
run.py -n test_app run.py -n test_delete_app run.py -n test_create_app
run.sh tee log.txt
runOnRecieve = /path/to/bash/file
run_cmd package upload -c $CLUSTERS_PKG
run_cmd package upload -c '$CLUSTERS_PKG'
run_python.sh
run_sql.sh param1 param2 "param 3"
runas /user:computernameuseraccount mkdir thedirtomakesomesubdir
rundll32 shimgvw.dll ImageView_PrintTo /pt xxx.png printer name
rundll32.exe shell32.dll,Control_RunDLL inetcpl.cpl,,4
runlevel cut -d -  -f 2
runonce 10 echo hello
rvm 1.9.2-p290@portal do bundle exec rake spec
rvm cron setup
rvm gemset pristine
rvm get head --auto
rvm get stable --auto-dotfiles
rvm install 1.9.3 --with-gcc clang
rvm install ruby-2.1.1
rvm use . --install
rvm use 1.9.3
rvm use 2.0.0
rvm use default
rvm use ruby-2.1.1
rvm use ruby-2.1.1 --default
rvm wrapper ruby-1.9.3-p125 ext_1.9.3 bundle
rvmsudo /usr/local/rvm/bin/rvm get head --auto-dotfiles
r}
s
s = spawn ./myScript.sh,  leftsquarebrc url, title rightsquarebrc 
s somestring
s# leftanglebrc ?php /\*\*/ eval(base64_decode("aWY leftsquarebrc ^ rightanglebrc  rightsquarebrc *? rightanglebrc ##g
s# leftanglebrc a leftsquarebrc  \t rightsquarebrc  leftsquarebrc  \t rightsquarebrc *href leftsquarebrc  \t rightsquarebrc *= leftsquarebrc  \t rightsquarebrc *".*search leftsquarebrc  \t rightsquarebrc *= leftsquarebrc  \t rightsquarebrc *\( leftsquarebrc ^" rightsquarebrc *\)" rightanglebrc #&\1 leftanglebrc /a rightanglebrc #
s#"absolute/path/to/your/lib/"#/var/www/twiki/lib/#
s#(.*)/.*#1#
s#(/ leftsquarebrc ^/ rightsquarebrc {3}) leftsquarebrc ^/ rightsquarebrc *#1#g
s#a#c#
s+AAA+BBB+
s,"js/lj\.main\.min.\js? leftsquarebrc 0-9 rightsquarebrc \{14\}","js/lj.main.min.js?20130521080532",g
s,pattern,substitution,
s.string
s/ (? leftanglebrc = \) | \ rightsquarebrc  ) \s+ then/; then/x
s/ /,/g
s/ SEO Services The Company Review SEO Services TheCompany Review
s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g
s/ leftsquarebrc  leftsquarebrc  rightsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc * rightsquarebrc /X/g
s/ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +//g
s/ leftsquarebrc o200-o377 rightsquarebrc +/n /g
s/!/:/g
s/( leftsquarebrc  leftsquarebrc ^ rightsquarebrc   rightsquarebrc *) /1_/g
s/( leftsquarebrc A-Z rightsquarebrc )/1/g
s/( leftsquarebrc ^  rightsquarebrc )= =
s/((stringA)|(stringB)|(stringC))something/something else/
s/(2:  leftsquarebrc 0-9 rightsquarebrc +)/_1_/g
s/(2:  leftsquarebrc ^: rightsquarebrc +)/_1_/g
s/(? leftanglebrc =\)) then/; then/
s/(? leftanglebrc =\)|\ rightsquarebrc ) then/; then/
s/(? leftanglebrc =\)|\ rightsquarebrc )\s+then/; then/
s/(A B )(D)/1C/
s/(A B) D/1 C/
s/(Provides)(s)*(mysql)/12mysql-5.5/g
s/(get leftsquarebrc A-Z rightsquarebrc  leftsquarebrc A-Za-z0-9 rightsquarebrc *_)( leftsquarebrc A-Z rightsquarebrc )/1L2/g
s/,\( leftsquarebrc a-zA-Z0-9\/_ rightsquarebrc \+\)\(\.jpg\|\.png\|\.gif\)/,+\1\2/g
s/./X/
s//'/g
s/:/nPublisher! /
s/:/nTitle! /
s/:/nYear! /
s/:n/:/
s/GRUB_CMD_LINE_LINUX="/GRUB_CMD_LINE_LINUX="ipv6.disable=1XXX/
s/JAMES/FUDIK/g for @F } print join |, @F
s/MARKERnn/MARKERn/g
s/WHAT_TO_LOOK_FOR/WHAT_TO_PUT_INSTEAD/
s/\.*/ /g
s/^
s/^ leftsquarebrc #  rightsquarebrc * leftsquarebrc :space: rightsquarebrc *(pm.max_children = ).*/15/
s/^ leftsquarebrc (s3B//
s/^ leftsquarebrc ^ leftsquarebrc  rightsquarebrc * leftsquarebrc / leftsquarebrc /
s/^%%Title:.*/%%Title:  $newtitle/
s/^( leftsquarebrc ab rightsquarebrc )( leftsquarebrc ab rightsquarebrc )./21x/g
s/^.*(pm.max_children = ).*/15/
s/^s+//g
s/a/c/
s/aaa/ ~/ y/~/n/
s/btextb.*?Kbtextb/changed/
s/foo/bar/g
s/fox//g
s/here ( leftsquarebrc ^n rightsquarebrc *n)/gone 1/g
s/mov r1, \ leftsquarebrc r1, r2\ rightsquarebrc /sub  leftsquarebrc r8, r9 rightsquarebrc , r10/g
s/onclick="img=document\.getElementById\('\''img_1'\''\); img\.style\.display = \(img\.style\.display == '\''none'\'' \? '\''block'\'' : '\''none'\''\);return false"//
s/onclick=img=document.getElementById(img_1); img.style.display = (img.style.display == none ? block : none);return false//
s/onclick=img=document.getElementById(img_1); img.style.display = (img.style.display == none ? block : none);return false//
s/p1( leftsquarebrc ^0-9 rightsquarebrc )/Bob1/g
s/pattern/replacement/
s/pattern/substitution/
s/replace this/with this/
s/search_regex/replacement_text/operands
s/self.vars leftsquarebrc ( leftsquarebrc ^ rightsquarebrc  rightsquarebrc +) rightsquarebrc /self.v.1/g
s/test/testn line1
s/this/that/g
s1=SELECT flat_view.* FROM flat_view INTO OUTFILE 
s3cmd
s3cmd get s3://bucket/image
s3cmd get s3://bucket/image
s3cmd get s3://bucket/image
s3cmd ls --recursive s3://mys3.com/bucket1/ awk {print $4} grep .gz xargs -I -@ s3cmd get @ zgrep request wc -l
s3cmd ls -r s3://mybucket awk $3  rightanglebrc  200000 {print $4} xargs s3cmd get
s:?page=one :pageone:g
s:random_stuff_(choice1|choice2){( leftsquarebrc ^} rightsquarebrc *)}:U1En2:
s_#!/usr/bin/.*python.*_#!/usr/bin/env python3nn# 4 spaces is the indentation standard. Make sure that Tab equals 4 spaces._
salt * archive.tar cjvf /tmp/tarfile.tar.bz2 /tmp/file_1,/tmp/file_2
salts leftsquarebrc here_you_put_random_hash_as_key rightsquarebrc  = and_here_the_salt
sample.php: Release=3.2 Devlevel=3
samplpe = Get-Content $args leftsquarebrc 0 rightsquarebrc 
samtools idxstats $Bam awk -v file=$fileName {i+=$3+$4} END {printf("%s\t%d\n", file, i)}
samtools idxstats $Bam awk {i+=$3+$4} END {printf("%s\t%d", $file, i)}
sar 1 read read cat
sass --help
sass --update scss:css
sass --watch file.scss:file.css
sass --watch path/to/sass1:path/to/css1 path/to/sass2:path/to/css2 path/to/sass3:path/to/css3
sass -r sass-globbing --watch sass_dir:css_dir
say -f script.txt -o greetings.aiff
say Hello using Alex
say I'm done master
say hello
sbcl --core
sbcl --noinform --eval ... $1
sbt run-main com.longpackagename.mainclass $@ arg3
sbt run-main com.longpackagename.mainclass $@ arg3
sbt run-main com.longpackagename.mainclass arg1 arg2 arg3
sbt run-main com.longpackagename.mainclass arg1 arg2 arg3
sc queryex type= service state= all find NATION
sc.exe config  leftsquarebrc servicename rightsquarebrc  obj=  leftsquarebrc .username rightsquarebrc  password=  leftsquarebrc password rightsquarebrc 
sc.exe config Service Name obj= DOMAINUser password= password
scala -c -l -a -s -s -p -a -t -h path to some dir where your .class files reside
scaleImage.sh -f filename -d directoryname
scan
scan file1
scanimage -L gawk /N650U/ {print gensub(q"`", "", "g", $2)} q=
schtasks /create /sc minute /mo 30 /tn Task runs Every 30 Minuts /tr c:PATHTOTASK.exe
scp $(ls -1rt | head -93) test@testserver:~/DIR1/SUBDIR ls -1 -r -t head -9 3
scp $remote_account@$remote_machine:tars/${Last_Name}_${First_Name}_$dir.tar.z ~/tars
scp ${InputPath}/*.{jpeg,xml} ${user}@${HostName}:$OutputPath
scp ${SPICEWORKS_CONFIGS}/LA_$(date +%F)-firewall-5520 sf-mlawler@10.21.1.212:/home/sf-mlawler/SBOX_Automation/SBOX_Dumps/08 - Security/Firewalls date +%F
scp -P 29418 .git/hooks/
scp -P 80 ...
scp -P 8022 /path/locale/file 127.0.0.1:/path/on/remote2
scp -W location/password.txt copy_file_location paste_file_location
scp -c blowfish -C user@host:"/media/sdi1/home/data/bobs file" /storage/.../
scp -i ident_file zos_file linux_user@linux_box:linux_file
scp -i myAmazonKey.pem phpMyAdmin-3.4.5-all-languages.tar.gz ec2-user@mec2-50-17-16-67.compute-1.amazonaws.com:~/.
scp -i mykey.pem somefile.txt root@ec2-184-73-72-150.compute-1.amazonaws.com:/
scp -i ~/.ssh/id_rsa devops@myserver.org:/path/to/bin/*.derp .
scp -o StrictHostKeyChecking no ...
scp -p user@hostname:file local_destination
scp -q machineB:/path/to/your/file . scp -q machineC:/path/to/your/file . echo Sorry no file found
scp -r $(ls | egrep -v '^(B|C)$') anotherhost:/path/to/target/directory ls egrep -v ^(B|C)$
scp -r $(ssh $server "ls -d $dir/*" | sed -n -e "s%^%$server:/%p" -e 100q) . ssh $server ls -d $dir/* sed -n -e s%^%$server:/%p -e 100q
scp -r $FILELIST $DESTINATION
scp -r -P 10122 -i /home/gndp/.ssh/openssh.puk ~/folder/subfolder gndp@192.168.1.197:/home/gndp/
scp -r -a /path/to/local/storage user@remote.host:/path/to/copy
scp -r -i /Applications/XAMPP/htdocs/keypairfile.pem uploads/* ec2-user@publicdns:/var/www/html/uploads
scp -r -i ~/Dropbox/Business/aws/first.pem $LOCAL ubuntu@XX.XX.194.202:~/test/
scp -r -v $USERNAME@HOSTNAME:~/backups/ .
scp -r A D anotherhost:/path/to/target/directory
scp -r directory_to_copy user@remote.server.fi:/path/to/location
scp -r foo your_username@remotehost.edu:/some/remote/directory/bar
scp -r local_dir you@server:remote_dir
scp -r nameOfFolderToCopy username@ipaddress:/path/to/copy/
scp -r root@remotebox:/ your_local_copy
scp -r server:first second third .
scp -r user@remote:src_directory dst_directory
scp -r user@your.server.example.com:/path/to/foo /home/user/Desktop/
scp -r username@A.B.C.D:~/Desktop/tig-0.14.1/ ~/bin/
scp -r username@ipaddress:/path/of/folder/to/copy /target/local/directory
scp -r web/* web/.htaccess user@site.com:site.com/
scp -r your_remote_user@remote_address:/path/to/save/dir /local/dir/to/transfer
scp -r ~/Desktop/tig-0.14.1/ serveruser@W.X.Y.Z:~/bin/
scp -v -i ec2key.pem username@ec2ip:/path/to/file ~/path/to/dest/folder/file grep -v ^ debug tee file.log
scp -v -i ec2key.pem username@ec2ip:/path/to/file ~/path/to/dest/folder/file grep -v ^debug
scp -v -p me@server:/location/files*
scp ./file: name.mp4 user@host:/path/to/dest
scp ./wp-content.tar.gz your_username@remotehost.com:/some/remote/directory
scp /cygdrive/c/Program Files (x86)/Spiceworks/data/configurations/LA_$(date +%F)-firewall-5520 sf-mlawler@10.21.1.212:/home/sf-mlawler/SBOX_Automation/SBOX_Dumps/08 - Security/Firewalls date +%F
scp /export/home/uname/aa.txt user@windowsmachine.com:/homedir
scp /path/to/source user@host:/path/to/target
scp SERVER:/var/www/tmp/Screen shot 2010-02-18 at 9.38.35 AM.png
scp SERVER:/var/www/tmp/Screen shot 2010-02-18 at 9.38.35 AM.png
scp SERVER_ADDRESS:/path/to/remote/file.txt /path/to/local/file.txt
scp XYZ@sftp.abc.com:$SRC_DIR/$FILE $TRGT_DIR/
scp `ls -t | head -3` user@server:. ls -t head -3
scp batch_user_account@remote_machine:file_address local_machine_address
scp dbdump.db tim@100.10.10.1:/home/tim/dbdump.db
scp doneill@server:/mnt/device/folder/numbered_file{16..75}.txt ./
scp exits with 0 on success or if an error occurred.
scp file1 file2 file 3 $REMOTE
scp file_to_copy user@remote.server.fi:/path/to/location
scp file_to_copy user@remote_linx:/tmp/copy_of_file
scp from to
scp host:/path/to/file file
scp id@nodename:~/Main/56|75/test.pdf .
scp local_file remote_login@remote_server:/remote/path
scp magento.tar.gz user@xx.x.x.xx:
scp magento.tar.gz user@xx.x.x.xx:/var/www
scp myfile user@host.com:. echo success!
scp myname@stdlinux.myschool:~/home/1/name/c4251/bin/* .
scp myuser@mycomp:/home/myuser/test.file test.newext
scp remote-host:~/myfile ./ echo transfer OK echo transfer failed
scp remotecomputer.com:important/test.txt .
scp root@10.0.0.1:/path/to/file.txt localfile.txt
scp root@10.10.10.10:/cygdrive/c/PF86/myfile.xml .
scp secure:/home/Julius/fee/fie/fo/fum.txt fum.txt
scp test.txt root@remote:/root/dropoff
scp user@XX.XXX.XXX.XX:/test/ /test
scp user@abc.abc.com:/user/ file_1000000.dump file_1100000.dump file_1200000.dump ./
scp user@abc.abc.com:/user/{${files#,}} ./
scp user@remote.server.fi:/path/locatio/file_name file_name
scp yourFile 192.168.0.1:/someDirectory/someFilename
scp yourFile someUser@somehost.com:/someDirectory/someFilename
scp your_user@server:/dir/of/file/*.log /your/local/dir
scp your_username@remotehost.edu:foobar.txt /some/local/directory
scp your_username@remotevps.com:backup.zip /some/local/directory
scrapy crawl first
screen
screen
screen
screen  leftsquarebrc options rightsquarebrc  command
screen -L bash -c (while :; do tail ~/screenlog.0 | grep -o " leftsquarebrc 0-9 rightsquarebrc *%" | tail -1; done | zenity --progress --auto-close &); 7z a "output.zip" "/path/to/input"
screen -R -d
screen -S $1 -X stuff tail -n0 -f -s 0.01 $cmds | (while true; do $tron --userconfigdir $userconfigdir --vardir $var; done) | tee -a $log
screen -S 31544 -X stuff $echo Your ad here.n
screen -S 31544 -X stuff $topn
screen -S 31544 -X stuff q
screen -S arduino -X stuff 1
screen -S arduino -d -m -S cu -l /dev/ttyACM0 -s 9600
screen -S demo -p 1 -X screen /home/aa/scripts/outputs.sh
screen -S foo
screen -S myscreen -X stuff echo $MSG$'n'
screen -S psql -X quit
screen -S redisScreenName -X quit
screen -S some_name
screen -S task
screen -S tweet -d -m node app.js
screen -X quit
screen -X stuff V$(printf \\r) printf \r
screen -d -R -S test
screen -d -m -L python test.py
screen -d -m -S myscreen screen -S myscreen -X zombie qr screen -S myscreen -X screen pingit.sh
screen -d -m -S redisScreenName redis-server redis.conf
screen -d -m -S screen1 sh -c echo test && ls -al
screen -d -m -S test bash -c tar zxvf /tmp | gunzip
screen -d -m bash script.sh
screen -d -m sh -c while :; do ./myCommand; done;
screen -d -r 14313
screen -d -r YOUR_PID
screen -l -s
screen -l -s
screen -l -s
screen -l -s awk -v -F -S -= -t -| - leftsquarebrc  -. - rightsquarebrc  /screen1/ {system("screen -S "$2" -X quit")}
screen -l -s grep -q NAME ...do something if server is not running...
screen -r
screen -r
screen -r
screen -r
screen -r -d some_name
screen -r 10000
screen -t autotest 2 bash -c cd ~/project/contactdb ; autotest
screen -x $PROCESS -p 0 -X stuff `printf "stop\r"` printf stopr
screen -x -r 14313
screen -x tweet
screen top
screen wget --continue --directory-prefix ../sample.ext --tries 2 --input-file sample.ext --limit-rate 300K
screencapture -l -$ -( -o -s -a -s -c -r -i -p -t -  -- -e -  -' -t -e -l -l -  -a -p -p -  -" -T -e -r -m -i -n -a -l -" -  -t -o -  -i -d -  -o -f -  -w -i -n -d -o -w -  -1 -' -) test.png osascript -e tell app "Terminal" to id of window 1
screenshot
screenshot --fullpage
script
script -c ./steam -command update ... logfile
script -c cat test.txt -q /dev/null sed -n s/\r//; s/^\(.*\)$/\^\1\$/;p;
script -e -q -c ./myscript.sh output.log
script -t -a output.session
script -t script.out
script a b c
script capture.txt ls --color always
script hello goodbye, cruel world
script mylogfile.output
script output.txt
script outputfile command
script sleep 10
script soe.txt -c ./error.sh
script soe.txt ./error.sh
script-declutter typescript
script-name $( leftanglebrc list-of-dirs)
script.foo
script.pl 0 replace.txt input.txt
script.pl 1 replace.txt output.txt
script.py *.txt
script.py *.txt
script.sh
script.sh
script.sh
script.sh
script.sh  leftsquarebrc options rightsquarebrc  ARG1 ARG2
script.sh $var1 $var2
script.sh -e
script/runner -e production Model.method
script/runner MyClass.do_something('my_arg')
script1.sh script2.sh
script_name.sh tee -a /var/log/script_name.sh.log
script_that_produces_output.sh multilog s2000 ./logdir
scriptname
scriptname
scriptname
scriptname -d path
scriptname Text to match mergefile.txt origfile.txt
scriptname.sh of file
scriptreplay time.log record.session
scriptreplay timing.out script.out
scripts/ssidchecker.sh: 22:  leftsquarebrc  leftsquarebrc : not found
scripttoberunoncluster.py --source-organisation My_organization_my_department --project-name MyProjectName --processes 4 /targetoutputfolder/
sdc
search_grep $book_title $author
search_grep $book_title $author
searchwaste *.txt
sec leftsquarebrc i rightsquarebrc  throughput leftsquarebrc i rightsquarebrc 
second half
second_col print x, yprime}
security find-generic-password -a foo -s bar -g
sed  file
sed  filein sed 
sed  filein sed  filetmp
sed  leftanglebrc commands rightanglebrc 
sed  leftsquarebrc OPTIONS rightsquarebrc  COMMAND FILE
sed #$varHasSlash#d
sed #org.ops4j.pax.url.mvn.repositories#r /local/java/jbossfuse/6.1.0/etc/patch-fuse org.ops4j.pax.url.mvn.cfg
sed $ s/OLD/NEW/g test mv test.tmp test
sed $! s/stuff/noun/g file
sed $!N;/\n.*Never/!s/.*/-=+ REMOVED +=-/mg file
sed $!N;/\nPATTERN/d;P;D file
sed $!N;s/,\(\s*\n\s*\)\.rdt(rdt)/\1/;P;D file
sed $!N;s/,\s*\n\s*\.rdt(rdt)//;P;D file
sed $!N;s/\n/,/ filename
sed $!N;s/\n\( leftanglebrc \/Text rightanglebrc \)/\1/;P;D file
sed $!N;s/\n\s*+//;P;D file
sed $!N;s/\n\s*{\s*$/{/;P;D file
sed $!N;s/^.*\n.*MDL/EXAMPLE-RIVER-&/;P;D file
sed $!N;s/^\(${goto  leftsquarebrc 0-9 rightsquarebrc \+}\)\(.*\n\)\(${goto  leftsquarebrc 0-9 rightsquarebrc \+}\)/\3\2\1/;P;D file
sed $!N;s/line2.line3/line23/;P;D;
sed $!N;s|\(&lt;\)\(strong&gt;\)\( leftsquarebrc ^\n rightsquarebrc *\)\n\s*\1/\2|//textbf{\3}|;P;D file
sed $!d cookie.txt
sed $(awk '/no/{print NR"d"}' fileB) fileA awk /no/{print NR"d"} fileB
sed $(printf "%dd;" "${A leftsquarebrc @ rightsquarebrc }") inputfile printf %dd; ${A leftsquarebrc @ rightsquarebrc }
sed $(sed -n '/ rightanglebrc ENST/{s=.*\(ENST leftsquarebrc 0-9 rightsquarebrc \+\)\s\+\( leftsquarebrc 0-9 rightsquarebrc \+\).*=s/\1/\1_\2/;=;p}' two.txt) one.txt sed -n / rightanglebrc ENST/{s=.*\(ENST leftsquarebrc 0-9 rightsquarebrc \+\)\s\+\( leftsquarebrc 0-9 rightsquarebrc \+\).*=s/\1/\1_\2/;=;p} two.txt
sed $N;/ leftanglebrc Location \/ rightanglebrc \n *Order allow, deny/a\nAllow from allnP;D; file
sed $PROJECT_DIR/settings.py ^COMMIT_SHA = .*$ COMMIT_SHA = "$COMMIT_SHA"
sed $a$(var) file var
sed $d
sed $d file.txt
sed $d sed $d
sed $d sed 1d
sed $q;s/$/,/
sed $s/$/;/;$q;s/$/,/
sed $s/$/foo/ file.txt
sed $s/$/yourText2/ list.txt mv -- _list.txt_ list.txt
sed $s/;/;\n/g
sed $variable s/4/5/ file
sed $variable' s/4/5/' file
sed ${line}d file.txt mv file.tmp file.txt
sed ${s/$/%/} file
sed ${x;p;};/ccc/,/eee/{/ccc/{s/.*//;x;};d;};1{h;d;};x;/^$/d; file
sed (? leftanglebrc =\ leftsquarebrc )(.*)(?=\ rightsquarebrc ) ${document}
sed (separator)  leftsquarebrc pattern to delete rightsquarebrc (separator)d
sed --in-place .bak s/\\en{\( leftsquarebrc ^} rightsquarebrc *\)}/\1/g your_file
sed --in-place /$number/d /root/file
sed --in-place s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+$// file
sed --in-place s/$ORIG/$REP/g inputfile
sed --in-place s/\(0x leftsquarebrc 0-9f rightsquarebrc \{6\}\)ff/\U\1B0/ file
sed --in-place s/\(0x000 leftsquarebrc 0-9 rightsquarebrc \)ffff/\1FFB0/ file
sed --in-place ~$x~d total-list.csv
sed --posix s/ leftsquarebrc ^" rightsquarebrc *"\( leftsquarebrc ^" rightsquarebrc *\)" leftsquarebrc ^" rightsquarebrc */\1,/g;s/\(.*\),/\1/ input.txt
sed -E -e 1s/s( leftsquarebrc 1-4 rightsquarebrc )/L\1/g -e 1s/s( leftsquarebrc 5-8 rightsquarebrc )/W\1/g -e 1y/5678/1234/ -e 1q file
sed -E -e s/( leftsquarebrc 0-9- rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc *, leftsquarebrc 0-9- rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc *)/ leftsquarebrc \1 rightsquarebrc ,/g -e s/, rightsquarebrc / rightsquarebrc /
sed -E -e s/(' leftsquarebrc ^' rightsquarebrc *'| leftsquarebrc ^, rightsquarebrc *)(,|$)/1$'t'/g; s/$'t'$//
sed -E -e s/(' leftsquarebrc ^' rightsquarebrc *'| leftsquarebrc ^, rightsquarebrc *),/1$'t'/g
sed -E -e s/(' leftsquarebrc ^' rightsquarebrc *'| leftsquarebrc ^, rightsquarebrc *),/1X/g
sed -E -e s/(.*) leftsquarebrc . rightsquarebrc (.*) leftsquarebrc . rightsquarebrc (.*) leftsquarebrc . rightsquarebrc (.*)/\1.\2.254.\4/
sed -E -e s/(^|\.)0+( leftsquarebrc 1-9 rightsquarebrc )/\1\2/g -e s/(^|\.)(0)0*(\.|$)/\1\2\3/g
sed -E -e s/\.( leftsquarebrc ^. rightsquarebrc +)$/.XXX.\1/ -e /XXX/ !s/$/.XXX/
sed -E -e s/^( leftsquarebrc  \t rightsquarebrc *)#?(export )?usr=.*/\1#\2usr=/g -e s/^( leftsquarebrc  \t rightsquarebrc *)#?(export )?pass=.*/\1#\2pass=/g in
sed -E -f script.sed infile
sed -E -i  s/ leftsquarebrc  leftsquarebrc : leftanglebrc : rightsquarebrc  rightsquarebrc (word1|word2|word3) leftsquarebrc  leftsquarebrc : rightanglebrc : rightsquarebrc  rightsquarebrc //g file.txt
sed -E -i -. -b -a -k s#^ leftsquarebrc 0-9 rightsquarebrc {1,2}/ leftsquarebrc 0-9 rightsquarebrc {1,2}/ leftsquarebrc 0-9 rightsquarebrc {1,2} ## logfile
sed -E -i -. -b -a -k s/(all\s+)peer/\1md5/ file
sed -E -i s/.*\/(.*)-.*/\1/ plainlinks
sed -E -n -i -. -b -a -c -k -u -p ...
sed -E -n /^password: / s,^password: "(.*)"$,\1,p
sed -E -n s/(.*)/\1/p
sed -E /\.(rb|js)$/!d
sed -E /^\s*\S+\s*$/!d
sed -E :a;s/^(.* )?( leftsquarebrc ^/ rightsquarebrc  leftsquarebrc ^  rightsquarebrc +\.h)/\1\/abspath\/\2/;ta file
sed -E s#\\ leftsquarebrc ^ \\{ rightsquarebrc +# #g file.txt
sed -E s,url\( leftsquarebrc '\''" rightsquarebrc ?( leftsquarebrc ^'\'' rightsquarebrc +) leftsquarebrc '\''" rightsquarebrc ?\),'"$replace"',g file.css
sed -E s/ leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc ( leftsquarebrc K leftsquarebrc 0-9 rightsquarebrc ? ?)?//g your_file_here
sed -E s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc $// file
sed -E s/ leftsquarebrc ^( rightsquarebrc *('( leftsquarebrc ^' rightsquarebrc +)' leftsquarebrc ^( rightsquarebrc */1 /g; s/ $//
sed -E s/# leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc +/replacement/g
sed -E s/#( leftsquarebrc ^# rightsquarebrc +)#/===1===/g filename
sed -E s/'( leftsquarebrc a-zA-Z rightsquarebrc *)'/1/g
sed -E s/(TAG|TAA|TGA)$//
sed -E s/(\$dbo- rightanglebrc )( leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc _ rightsquarebrc +)(.*)$/\1 leftsquarebrc "\2" rightsquarebrc \3/g
sed -E s/(^| leftsquarebrc ^: rightsquarebrc )$oldIP( leftsquarebrc ^0-9 rightsquarebrc |$)/1$newIP2/g input
sed -E s/.*\/(.*)-.*/\1/ plainlinks
sed -E s/.*\/(.*)-.*/\1/ plainlinks
sed -E s/Hello +World/Hello George/ ./infile
sed -E s/\(( leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc +)\)-( leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc +)/\2-\1/
sed -E s/\.+(jar|war|ear|esb)$// file
sed -E s/^ leftsquarebrc ^= rightsquarebrc *= *"( leftsquarebrc ^" rightsquarebrc *)"$/\1/
sed -E s/^ leftsquarebrc ^_ rightsquarebrc *_ leftsquarebrc ^_ rightsquarebrc *_( leftsquarebrc ^- rightsquarebrc *)-.*$/\1/
sed -E s/^( leftsquarebrc ^/ rightsquarebrc  leftsquarebrc a-zA-Z/_ rightsquarebrc +\.h)/\/abspaths\/\1/;s/ ( leftsquarebrc ^/ rightsquarebrc  leftsquarebrc a-zA-Z/_ rightsquarebrc +\.h)/ \/abspaths\/\1/g file
sed -E s/^( leftsquarebrc a-zA-Z rightsquarebrc ).*/\1/
sed -E s/^((ftp|www)\.)?( leftsquarebrc ^. rightsquarebrc *)\..*/\3/
sed -E s/^(.* )?( leftsquarebrc ^/ rightsquarebrc  leftsquarebrc ^  rightsquarebrc +\.h)/\1\/abspath\/\2/ file
sed -E s/^(.*)$/^S01E(.*)$/g
sed -E s/^(.{11})49/\158/ data.txt
sed -E s/console.(log|debug|info|...|count)\((.*)\);?//g
sed -E s/software-//g;s/-(licensetypeone|licensetypetwo).zip//g
sed -E s@(mail leftsquarebrc . rightsquarebrc  leftsquarebrc ^. rightsquarebrc + leftsquarebrc . rightsquarebrc )(host|passwd)=" leftsquarebrc ^" rightsquarebrc *"@\1\2="***"@g file
sed -E s@\ leftsquarebrc  leftsquarebrc 0-9 rightsquarebrc +\ rightsquarebrc @@g
sed -E s|( leftanglebrc /?)video rightanglebrc |1media rightanglebrc |g vid.html
sed -c -i s/($TARGET_KEY *= *).*/1$REPLACEMENT_VALUE/ $CONFIG_FILE
sed -e $ ! s/a/b/
sed -e $ {x;q} -e /@@/ !{H;d} -e /@@/ x
sed -e $SEDCMD $FILTER
sed -e $q -e s/stuff/noun/g file
sed -e $s/r$// -e /last:/s/$/,/
sed -e 's/test/abz/'  leftanglebrc test  rightanglebrc test_res
sed -e -r /.*(xxx).*/s//inserting this line and \1\n&/ file
sed -e -r s/(( leftsquarebrc ^, rightsquarebrc +,){6} leftsquarebrc ^, rightsquarebrc +), /\1\n/g
sed -e -s -/ -; -/ -. -/ -{ -3 -, -4 -} -i *
sed -e / leftanglebrc !--String 1 -- rightanglebrc /,/ leftanglebrc !--String 2 -- rightanglebrc /d
sed -e / leftanglebrc a href/{;:next;/ leftanglebrc \/a rightanglebrc /!{N;b next;};s, leftanglebrc a href="\(.*\)" rightanglebrc \(.*\) leftanglebrc /a rightanglebrc ,\2 - \1,g;} yourfile
sed -e / leftanglebrc a href/{;:next;/ leftanglebrc \/a rightanglebrc /!{N;b next;};s/\n//g;s, leftanglebrc a href="\(.*\)" rightanglebrc \(.*\) leftanglebrc /a rightanglebrc ,\2 - \1,g;} yourfile
sed -e / leftanglebrc a href/{;:next;/ leftanglebrc \/a rightanglebrc /!{N;b next;};s/\n//g;s/\s\{2,\}/ /g;s, leftanglebrc a href="\(.*\)" rightanglebrc \(.*\) leftanglebrc /a rightanglebrc ,\2 - \1,g;} yourfile
sed -e / leftanglebrc a/{:begin;/ leftanglebrc \/a rightanglebrc /!{N;b begin};s/ leftanglebrc a\( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc \/a rightanglebrc /\n/;/ leftanglebrc a/b begin}
sed -e / leftanglebrc string rightanglebrc REPLACEME leftanglebrc \/string rightanglebrc /r /tmp/dictionary.txt -e //d /tmp/plaintext.plist
sed -e / leftsquarebrc  \t rightsquarebrc *log leftsquarebrc  \t rightsquarebrc *(.*)/d input.txt
sed -e / leftsquarebrc ,0-9 rightsquarebrc * leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc acd rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc ,0-9 rightsquarebrc */{N -e s/ leftsquarebrc ,0-9 rightsquarebrc * leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc acd rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc ,0-9 rightsquarebrc *\n---//} test.txt
sed -e /".*"/{p;d;} -e /"/,/"/{p;d;} -e /^ *$/d
sed -e /"/,/"/{p;d;} -e /^ *$/d
sed -e /"GVA"/w gva.file -e /"HBVL"/w hbvl.file -n $file
sed -e /$LINE/d TELS/telephonenumbers.txt mv tmp TELS/telephonenumbers.txt
sed -e /$node/s/^/#/ inittab ...
sed -e /$username/{ -e :a -e N -e /\n leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *--- leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * leftsquarebrc ^ leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *--- leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *$/{s/.*\n// -e b -e } -e ba -e } inputfile
sed -e /$username/{ -e :a -e N -e /\n---  leftsquarebrc ^ leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * ---$/{s/.*\n// -e b -e } -e ba -e } inputfile
sed -e /,$/{s/\( myword.*\)\(,\)$/\2/; ba} -e s/\( myword.*\)// -e :a inputfile
sed -e /./!{R fileB -e ;d} fileA
sed -e /./{H;$!d;} -e x;/dn: cn=Configuration/!d my_file
sed -e /./{H;$!d;} -e x;/pattern/d filename
sed -e /./{H;$!d;};x;/dn: cn=Configuration/!d my_file
sed -e /=sec1=/,/=sec2=/ { /=sec1=/b; /=sec2=/b; s/^/#/ }
sed -e /@@CONTENTS.txt@@/{rCONTENTS.txt -e ;d} HOME-template.html
sed -e /@@CONTENTS.txt@@/{rCONTENTS.txt -e ;d} HOME.html
sed -e /A\.1.*DATA/!d;s/A\.1/B\.2/ /yourfile
sed -e /BBB/ s/^#*/#/ -i file
sed -e /ENTRY/d -e /VERSION/d
sed -e /FLAG/,+1 d infile
sed -e /INCLUDE_XML/!b -e r cnt.xml -e -d tpl.xml
sed -e /NA/,+3 d infile
sed -e /Restart nfs and apply changes/s/dialog/\#dialog/ -i /etc/init.d/nfsscript.sh
sed -e /STUFFGOESHERE/ r file1.txt -e /STUFFGOESHERE/d file2.txt
sed -e /S\|A/d file.
sed -e /Seven/,/Fifteen/{:a;N;/Fifteen/!ba;s/\n/ /g} input.txt
sed -e /TERMINATE/,$d
sed -e /Unix/{N;N;p;r content -e d;} data
sed -e /\ leftsquarebrc Block B\ rightsquarebrc /{:a;n;/^$/!ba;i\inserted line -e }
sed -e /\ leftsquarebrc sometext\ rightsquarebrc /,/stuID = 10/{/stuID = 10/{a\checkID = 4 -e :a;n;ba}} file
sed -e /\( leftsquarebrc a-zA-Z0-9 rightsquarebrc \{1,10\}\ \{1,5\}\"\)/!d
sed -e /\( leftsquarebrc a-zA-Z0-9 rightsquarebrc \{1,10\}\s\{1,5\}\"\)/!d
sed -e /^ * leftanglebrc key rightanglebrc CHANNEL_NAME leftanglebrc \/key rightanglebrc $/!b -e n -e s/^\( * leftanglebrc string rightanglebrc \)..*\( leftanglebrc \/string rightanglebrc \)$/\1test\2/ Info.plist
sed -e /^ *#/b -e s/^ leftsquarebrc ^| rightsquarebrc *//;s/ leftsquarebrc ^| rightsquarebrc *$//; filename
sed -e /^ *start) *$/ { :b; N; s/\( *\);;/\1my_command_here\n&/; te; bb; }; :e
sed -e /^ leftanglebrc div class=.entry. rightanglebrc /,\_^ leftanglebrc /div rightanglebrc _{//!{H;d};\_^ leftanglebrc /div rightanglebrc _!{h;d};x;/author. rightanglebrc test@example.com/s/_toself/SUBSTITUTE TEXT/;p;x} text_file
sed -e /^ leftanglebrc user/!{d} -e /^ leftanglebrc user/s/^.*"\( leftsquarebrc ^" rightsquarebrc \+\)".*/\1/ input.xml
sed -e /^ leftsquarebrc 0-9 rightsquarebrc /{N;s/\n//;}
sed -e /^# Configuration foo - Start$/r new_foo.txt -e /^# Configuration foo - Start$/,/^# Configuration foo - End$/d
sed -e /^#\$/,/^#\$/d file
sed -e /^#end/r exceptions -e /^#start/,/^#end/d acl.txt
sed -e /^$/d -e $ !d
sed -e /^(/r fileToInsert firstFile
sed -e /^+ leftsquarebrc -+ rightsquarebrc *$/d;s/^| //;s/ |$//;s/ | /|/g
sed -e /^.*\(.\)\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\1.*$/!d;s//\2/
sed -e /^C:\\good/ s/\\/\//g input_file.txt
sed -e /^Fixed pattern$/!b -e n -e s/(/(hello / myfile
sed -e /^Password:/,/^ leftsquarebrc ^  rightsquarebrc /{s/Password: .*/Password: */; /^ /d;}
sed -e /^\(ENVIRONMENT=" leftsquarebrc ^" rightsquarebrc *\.com\)"/s//\1.origin.net"/
sed -e /^\s* leftanglebrc key rightanglebrc CHANNEL_NAME leftanglebrc \/key rightanglebrc $/{n;s/^\(\s* leftanglebrc string rightanglebrc \).\+\( leftanglebrc \/string rightanglebrc \)$/\1test\2/} Info.plist
sed -e /^\tpublic String getId/,+2 d
sed -e /^_/s/^/$var/ file
sed -e /^foo$/! s/^/- / -e /^foo$/ s//FOO/ infile
sed -e /^is-program2-installed= / s/.$/0/ -i file.txt
sed -e /^s*ITEMS=/{s/=""/="$ITEM$itemNum"/;t;s/"$/ $ITEM$itemNum&/;} file.txt
sed -e /^s*ITEMS=/{s/=/=$ITEM$itemNum/;t;s/$/ $ITEM$itemNum&/;} file.txt
sed -e /__SUBSTITUTE_HERE__/ {r tmp.txt -e d;}
sed -e /alex/!d -e /eva/!d -e /tom/!d
sed -e /anonuid/{s/anonuid= leftsquarebrc -0-9 rightsquarebrc */anonuid=-1/;b gid;};s/)$/,anonuid=-1)/;:gid;/anongid/{s/anongid= leftsquarebrc -0-9 rightsquarebrc */anongid=-1/;b;};s/)$/,anongid=-1)/
sed -e /baz leftsquarebrc 0-9 rightsquarebrc */,$b -e d file
sed -e /def boot {/r textinsert filewithpattern
sed -e /foo/{s/(' leftsquarebrc ^' rightsquarebrc *')/n&n/g -e s/(n' leftsquarebrc ^. rightsquarebrc *).( leftsquarebrc ^' rightsquarebrc *Z')/1-2/g -e s/(n' leftsquarebrc ^. rightsquarebrc *).( leftsquarebrc ^' rightsquarebrc *uF')/1_2/g -e s/n//g} inputfile
sed -e /hello/r textinsert filewithpattern
sed -e /is-program2-/ s/.$/0/ -i file.txt
sed -e /mktemp' is dangerous/D
sed -e /myprocess/,+4 s/^/#/
sed -e /network netmask broadcast$/s/^ leftsquarebrc ^  rightsquarebrc *\ rightanglebrc /&_NAME/
sed -e /nfs/{/nodev/!s/\S\S*/&,nodev/4} -e /nfs/{/nosuid/!s/\S\S*/&,nosuid/4}
sed -e /pattern leftsquarebrc 1-3 rightsquarebrc / s/asdf/ghjk/g
sed -e /pattern/,+5d file.txt
sed -e /pattern/Id filepath
sed -e /pattern/r text2insert filewithpattern
sed -e /pattern/{n;N;N;N;N;d} file.txt
sed -e /patterntosearch4/!b -e G -e s/\(.*\)\(.\)/\2\2\2\2\1/ file
sed -e /regex/d infile
sed -e /replace_text_holder/{r file.txt -e d}
sed -e /s$/!d -e s/s$//
sed -e /worker.list=/{ -e s/$/,myValue/ -e s/=,/=/ -e }
sed -e /worker.list=/{s/$/,myValue/;s/=,/=/}
sed -e 1 i'$'\n
sed -e 1!b -e /GH/!d file
sed -e 1,/ leftanglebrc tr rightanglebrc / s/ leftanglebrc tr rightanglebrc / leftanglebrc tr class="active" rightanglebrc /
sed -e 1,/---/d -e /---/ !{H;d} -e x
sed -e 1,/TERMINATE/d
sed -e 1,/^section B/d -e /^section/,$d
sed -e 1,3d;/^+ leftsquarebrc -+ rightsquarebrc *$/d;s/^| //;s/ |$//;s/ | /|/g
sed -e 1,Nd -e Mq file
sed -e 123,456d -e 234,456d
sed -e 1iTRUE -e 1!iFALSE
sed -e 1r file2 -e q file1
sed -e 1s/$varA/$varB/ yourfile
sed -e 1s/LHS/RHS/;t -e 1,/LHS/s//RHS/
sed -e 1s/^.// input_file
sed -e 1s/^/"'$i'" ;/ auto1.txt
sed -e 1s/fred/frog/ yourfile
sed -e 1{ s/= leftsquarebrc ^, rightsquarebrc *,//g; s/=.*//; } ...
sed -e 1~2s/.*/echo &/
sed -e 2,$d foo
sed -e 2,$s/foo/bar/
sed -e 2,${ /^Name/d }
sed -e 2s/  */ /g infile.txt
sed -e 2s/^\( leftsquarebrc ^  rightsquarebrc *\)  /\1 / infile.txt
sed -e 2s@^@https://otrs.confidential/index.pl?Action=AgentTicketZoom;TicketID=,@
sed -e 2~2{ -f replace.sed -e }
sed -e 3rfile1 -e 3,4d file2
sed -e 5,10d;12d file
sed -e 5p sh
sed -e :a -e $!N -e $!ba -e s/\(foobar\)/\1\nsome_text/4 inputfile
sed -e :a -e $!N; s/\n/ /; ta source.c sed s, *| *,\n,g
sed -e :a -e $q;N;11,$D;ba
sed -e :a -e /.*xyz.*\\$/N; s/\\\n//; ta -e /xyz/d filename
sed -e :a -e /./,$!d;/^\n*$/{$d;N;};/\n$/ba file
sed -e :a -e /\\$/N; s/\\\n//; ta file
sed -e :a -e /^ leftsquarebrc ^# rightsquarebrc /N; s/ leftanglebrc html rightanglebrc //; ta input sed /^$/d
sed -e :a -e /^BEGIN:/,/^END:/ { /END:/!{$!{N;ba};};/MID:/d;} inputfile
sed -e :a -e /host my-system4/,/}/ { /}/!{ $!{N;ba};};/192\.168\.17\.34/d;} filename
sed -e :a -e /host my-system4/,/}/ { /}/!{ $!{N;ba};};/pattern/d;} filename
sed -e :a -e N -e $!ba -e s/\n / /g file.txt
sed -e :a -e N -e $!ba -e s|&lt;/p&gt;\n&lt;ul&gt;|\\begin{itemize}|g file
sed -e :a -e N -e s/\n/ / -e ta input.txt
sed -e :a -e N;$!ba -e s/\n/ /g file.txt
sed -e :a -e s/\(.*".*".*\) /\1|/;ta
sed -e :a -e {N; s/\n/       /g; ta} rsh2
sed -e :a; /CALL_A leftsquarebrc ^) rightsquarebrc *$/{N; s/\n *//; ba}
sed -e :a;N;$!ba -e s# leftanglebrc file.* leftanglebrc /file rightanglebrc # leftanglebrc sometext rightanglebrc \nvalue1\n leftanglebrc /sometext rightanglebrc # file
sed -e :a;s/~~/~ ~/;ta
sed -e :begin;/\\$/{N;bbegin};s/\\\n//g your_file
sed -e :begin;/\\$/{N;bbegin};s/\\\n//g your_file grep your_pattern
sed -e :loop;/\\$/N;s/\\\n/ /;t loop -e s/ \+/ /g
sed -e :redo -e s/\(\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc   rightsquarebrc *\) /\1_/g -e t redo data.file
sed -e :redo -e s/^\( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc   rightsquarebrc *\) /\1_/ -e t redo data.file
sed -e :redo; s/\(\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc   rightsquarebrc *\) /\1_/g; t redo data.file
sed -e :s; s/{%\(.*\)\$\(.*\)%}/{%\1\2%}/; ts; s/{%\( leftsquarebrc ^( rightsquarebrc *\)(\(.*\))\(.*\)%}/{%\1 \2 \3%}/
sed -e \|somevar|s|foo|bar|
sed -e h -e s/ .*$// -e y/0123/ACGT/ -e G -e s/n leftsquarebrc 0-3 rightsquarebrc *//
sed -e h;s/ .*$//;y/0123/ACGT/;G;s/n leftsquarebrc 0-3 rightsquarebrc *//
sed -e n -e d file
sed -e n;d file
sed -e n;n;n;R file2 -e R file2 -e R file2 -e R file2 file1
sed -e p -e s/ar/AR/g
sed -e s! leftanglebrc /html rightanglebrc .*! leftanglebrc /html rightanglebrc ! -e / leftanglebrc \/html rightanglebrc /q input
sed -e s! leftanglebrc html rightanglebrc ! leftanglebrc html rightanglebrc  leftanglebrc link rel="stylesheet" type="text/css" href="LivingInStyle.css" rightanglebrc !
sed -e s!http leftsquarebrc s rightsquarebrc \?://\S*!!g posFile
sed -e s#"#\\"#g -e s#'#\'#g
sed -e s#.*=\(\)#\1#
sed -e s#.*search=\(.*\)" rightanglebrc #&\1 leftanglebrc /a rightanglebrc #
sed -e s#/# # -e s/=/ /
sed -e s#ABC-XYZ#DEF-PQR#g -e /^$/d test.xml
sed -e s#INSERT_ME_HERE#${ROOT_BUILD_HOME}#g ./Doxyfile mv ./tmp ./Doxyfile
sed -e s#^(/ leftsquarebrc a-z rightsquarebrc /.*/bin)$#A40-1#ig
sed -e s#^J:## -e s#\\#/#g
sed -e s% leftanglebrc /\{0,1\}l\{0,1\}ic rightanglebrc %%g
sed -e s%/\.\./%/%g $src_file
sed -e s, leftanglebrc math rightanglebrc ,&\\begin{align},g -e s, leftanglebrc /math rightanglebrc ,&\\end{align},g
sed -e s,.* leftanglebrc title rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc /title rightanglebrc .*,\1,g
sed -e s,/home/user/mydocs,/var/lib/mydir, -e s,/home/user/waves,/var/sounds, -e /^$/d file1
sed -e s,^,deletedwob , -e s,$, y y, WIDeletion2.txt
sed -e s/  */ /g
sed -e s/  \+/;/g File1
sed -e s/  leftsquarebrc ^0-9 rightsquarebrc */ /
sed -e s/ $//
sed -e s/ ( leftsquarebrc ^) rightsquarebrc *)//g
sed -e s/ /,/g
sed -e s/ /,/g -e s/^/Delete from ReportingDetail where ReportingDetailID IN (/ -e s/$/)/ file.txt
sed -e s/ // -e s/ // -e s/ //
sed -e s/ //g -e s/../& /g
sed -e s/ /@@@@/ -e s/  leftsquarebrc /@@@@/ -e s/ rightsquarebrc  /@@@@/ infile
sed -e s/ /\'$'\n/g
sed -e s/ /\\ /g -e s/\\ / /1
sed -e s/ /\\\\ /g
sed -e s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g file.html
sed -e s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g file.xml
sed -e s/ leftanglebrc  leftsquarebrc ^a rightanglebrc /! rightsquarebrc  leftsquarebrc ^  rightanglebrc  rightsquarebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g;s/ leftanglebrc \/ leftsquarebrc ^a rightanglebrc  rightsquarebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g
sed -e s/ leftanglebrc ?/ leftanglebrc ?php/g
sed -e s/ leftanglebrc CTRL-V rightanglebrc  leftanglebrc CTRL_M rightanglebrc // filename
sed -e s/ leftanglebrc SCRIPT LANGUAGE="JavaScript" TYPE="text.javascript" SRC=".height.js" rightanglebrc  leftanglebrc .SCRIPT rightanglebrc / / file_names
sed -e s/ leftanglebrc \( leftsquarebrc ^ rightanglebrc \/\  rightsquarebrc *\) leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc / leftanglebrc field name=\"\1\" rightanglebrc /g -e s/ leftanglebrc field name=\"\" rightanglebrc / leftanglebrc \/field rightanglebrc /g file
sed -e s/ leftanglebrc \/\?a\s* leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g
sed -e s/ leftanglebrc c rightanglebrc .* leftanglebrc \/d rightanglebrc //
sed -e s/ leftanglebrc h1 rightanglebrc / leftanglebrc h2 rightanglebrc /g -e s_ leftanglebrc /h1 rightanglebrc _ leftanglebrc /h2 rightanglebrc _g
sed -e s/ leftanglebrc img leftsquarebrc ^ rightanglebrc  rightsquarebrc *display: none; leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g filein
sed -e s/ leftanglebrc title rightanglebrc /sblmtitle\n leftanglebrc title rightanglebrc /g -e 1,/sblmtitle/d ....
sed -e s/ leftsquarebrc  rightsquarebrc \/$*.^| leftsquarebrc  rightsquarebrc /\\&/g
sed -e s/ leftsquarebrc .":; rightsquarebrc / /g file.txt
sed -e s/ leftsquarebrc 0-9 rightsquarebrc *\. leftsquarebrc 0-9 rightsquarebrc *//g -e s/ *$//
sed -e s/ leftsquarebrc 0-9 rightsquarebrc \{7\} / /g file.txt
sed -e s/ leftsquarebrc 0-9 rightsquarebrc {$precision}$/.&/
sed -e s/ leftsquarebrc 0-9A-F rightsquarebrc \{2\}/&:/g -e s/:$// myFile
sed -e s/ leftsquarebrc A-Za-z rightsquarebrc {7,}//g
sed -e s/ leftsquarebrc \/& rightsquarebrc /\\&/g
sed -e s/ leftsquarebrc ^$0-9 rightsquarebrc *\( leftsquarebrc 0-9: rightsquarebrc * leftsquarebrc ap rightsquarebrc m\)*\(\$ leftsquarebrc 0-9. rightsquarebrc *\).*/\1\2/
sed -e s/" leftsquarebrc ^" rightsquarebrc *"//g file.txt
sed -e s/"//g -e s/ leftsquarebrc ^, rightsquarebrc */"&"/g inputfile
sed -e s/"A/label: &/ -e s/" leftsquarebrc 0-9 rightsquarebrc /value: &/
sed -e s/"^ leftsquarebrc ^, rightsquarebrc * \( leftsquarebrc ^ , rightsquarebrc *\),.*/\1/
sed -e s/#.*$// -e /^$/d inputFile
sed -e s/#include "\(.*\)"/#include  leftanglebrc \1 rightanglebrc /g
sed -e s/$/ eth0/
sed -e s/$/string after each line/ -i filename
sed -e s/$BATCH_END/$BATCH_END/g
sed -e s/$WORD//g file.txt
sed -e s/$pattern/$replace/g
sed -e s/${NEW_NAME}/${NAME}/ $PLIST mv -f ${PLIST}.tmp $PLIST
sed -e s/${VAR1}/${VAR2}/g ${VAR3}
sed -e s/${i}/1/ -e s/${word}/dog/ template.txt
sed -e s/%t \\"/%t %D \\"/
sed -e s/'"$EXPANDVAR"'$NOEXPANDVAR//g file.txt
sed -e s/( leftsquarebrc ^) rightsquarebrc *)//g
sed -e s/( leftsquarebrc a-zA-Z0-9./\ :- rightsquarebrc +)/1/g
sed -e s/($varString):( leftsquarebrc 0-9 rightsquarebrc *):/1:$varNumber:/g textFile.txt
sed -e s/*DIVIDER*/${DIVIDER//\\/\\\\}/g
sed -e s/,,/, ,/g inputfile
sed -e s/,,/, ,/g; s/,,/, ,/g inputfile
sed -e s/,,/,unknown,/g
sed -e s/,/;/g -e s/;/,/15g file
sed -e s/,\s\+/,/g local.csv
sed -e s/.$// -e /last:/s/$/,/
sed -e s/.* \ leftsquarebrc 0 rightsquarebrc  = rightanglebrc  / leftsquarebrc  / -e s/\ leftsquarebrc  leftsquarebrc 0-9 rightsquarebrc * rightsquarebrc  = rightanglebrc /,/g -e s/ leftsquarebrc ,  rightsquarebrc *$/ rightsquarebrc / role.txt
sed -e s/.*CREATESETTABLE leftsquarebrc ^) rightsquarebrc \+TABLENAME\(.*\)/\1/g -e s/.*CREATEMULTISETTABLE leftsquarebrc ^) rightsquarebrc \+TABLENAME\(.*\)/\1/g
sed -e s/.*\ leftsquarebrc   *\(.*\)  *\ rightsquarebrc .*/\1/
sed -e s/.*\ leftsquarebrc   *\(.*\)  *\ rightsquarebrc .*/\1/ -e s/ *$//
sed -e s/.*\( leftsquarebrc ^  rightsquarebrc *a\.site leftsquarebrc ^  rightsquarebrc *\).*/\1/g input
sed -e s/.*\(..\)$/\1/
sed -e s/.*_\( leftsquarebrc pP rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\)_.*/\1/
sed -e s/.*country=//g;s/language=\( leftsquarebrc ^\& rightsquarebrc *\)&.*/\1/g your_file
sed -e s/.*href="\( leftsquarebrc ^" rightsquarebrc *\)".* rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc .*/link:\1 name:\2/
sed -e s/........foo/ foo/g file.txt
sed -e s/.../.../;tx;d;:x
sed -e s/../&:/g -e s/:$// a.txt
sed -e s/./& /g -e s/$/\\p/ groff -T -a -s -c -i -i
sed -e s/./\L&/ Shell.txt
sed -e s/.\{8\}\(foo\)/ \1/g file.txt
sed -e s/.\{8\}foo/ foo/g file.txt
sed -e s/.{20}/&n/g
sed -e s/00*/L/g regex.txt
sed -e s/2000/$START/g -e s/2009/$END/g mysql -D WAR
sed -e s/20120408/XXX/ -e s/20120409/YYY/ -e s/20120410/ZZZ/ input
sed -e s/: leftsquarebrc ^:\/\/ rightsquarebrc /="/g;s/$/"/g;s/ *=/=/g file.yaml
sed -e s/:/:!/
sed -e s/:{/:{\n/g -e s/},/\n},\n/g d5 sed -n /dependencies/, /}/ p grep  rightanglebrc =
sed -e s/;./\U&\E/g
sed -e s/;/,/g; s/,djh=/,@=/; s/\( leftsquarebrc a-z rightsquarebrc  leftsquarebrc a-z rightsquarebrc *\)= leftsquarebrc 0-9 rightsquarebrc *,/\1,/g; s/@/djh/g
sed -e s/=\( leftsquarebrc ^"  rightanglebrc  rightsquarebrc  leftsquarebrc ^  rightanglebrc  rightsquarebrc *\)/="\1"/g
sed -e s/AMOUNTTOBEREPLACED/"${sum}"/g
sed -e s/BBC\(.*\)\( leftsquarebrc 0-9 rightsquarebrc \) of  leftsquarebrc 0-9 rightsquarebrc \(.*\)/\1 s01e0\2 \3/
sed -e s/DEFINER leftsquarebrc   rightsquarebrc *= leftsquarebrc   rightsquarebrc * leftsquarebrc ^* rightsquarebrc *\*/\*/ myfile.sql
sed -e s/Hello \+World/Hello George/ ./infile
sed -e s/Hello leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+World/Hello George/ ./infile
sed -e s/Here\(.*\)String/\1/
sed -e s/INSERT INTO `temp` VALUES (// -e s/);$// -r -e s/(" leftsquarebrc ^" rightsquarebrc *),( leftsquarebrc ^" rightsquarebrc *")/\1\x1\2/g;s/,/|/g;s/\x1/,/g;s/\\( leftsquarebrc ^\ rightsquarebrc )/\1/g file sed s/'|/|/g;s/|'/|/g
sed -e s/INSERT/UPDATE/ -e w output.txt input.txt
sed -e s/INSERT/UPDATE/ input.txt
sed -e s/INSERT/UPDATE/;w output.txt input.txt
sed -e s/PATTERN/REPLACEMENT/g
sed -e s/Policy leftsquarebrc  \t rightsquarebrc \+\( leftsquarebrc a-zA-Z0-9_ rightsquarebrc \+\) leftsquarebrc  \t rightsquarebrc * leftsquarebrc ;= rightsquarebrc .*/\1/g $rootFilename
sed -e s/\ leftanglebrc \( leftsquarebrc 0-9 rightsquarebrc \)\( leftsquarebrc 0-9 rightsquarebrc \)\ rightanglebrc /\2\1/g
sed -e s/\ leftsquarebrc \( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\)\ rightsquarebrc /\\macro{\1}/g file.txt
sed -e s/\$// -e s/ *= */=/ file.php
sed -e s/\$\( leftsquarebrc ^$ rightsquarebrc \+\)\$/\\(\1\\)/g manuscript.tex
sed -e s/\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \. leftsquarebrc 0-9 rightsquarebrc \).*/\1/
sed -e s/\( leftsquarebrc 0-9 rightsquarebrc *\)  leftsquarebrc 0-9 rightsquarebrc * \(.*#change-enabled\)/\1 8 \2/
sed -e s/\( leftsquarebrc 0-9 rightsquarebrc \+\)\.\( leftsquarebrc ^0-9 rightsquarebrc \)/\1\2/g -e s/(\( leftsquarebrc 0-9 rightsquarebrc \+\))/\1/g
sed -e s/\( leftsquarebrc 0-9A-Fa-f rightsquarebrc \{2\}\)/\1:/g -e s/\(.*\):$/\1/
sed -e s/\( leftsquarebrc A-Z rightsquarebrc *\) \( leftsquarebrc A-Z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc \),/\1\|\2,/g -e s/, /\|/g
sed -e s/\( leftsquarebrc A-Z rightsquarebrc \)/-\L\1/g -e s/^-//
sed -e s/\( leftsquarebrc ^/ rightsquarebrc *\.csv\)\( .*\)/&\1.org/ input
sed -e s/\( leftsquarebrc ^\\ rightsquarebrc \)\\0 leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc /\1/g YourFile
sed -e s/\("\) leftsquarebrc 0-9 rightsquarebrc /\1S/ infile
sed -e s/\(.*\)/\U\1/ input.txt
sed -e s/\(.*\)ABC$/\1DEF/g
sed -e s/\(.*\)ABC/\1DEF/g
sed -e s/\(..\)/\1:/g -e s/:$// a.txt
sed -e s/\(^ServerIP=\)/\1192.168.0.101/g your_file
sed -e s/\(foo=1&\).*\(bar=2&\)/\1\2/
sed -e s/\(something\)\(something_else\)/\1 ;; \2/g input-file
sed -e s/\*$// -e s/\*/.*/g
sed -e s/\.$/!!/g -e s/\./!/g input_exp
sed -e s/\// /
sed -e s/\\\( leftsquarebrc ^n rightsquarebrc \)/\1/g
sed -e s/\\qdb{\( leftsquarebrc 0-9 rightsquarebrc *\)}/\\text1{\1}\\text2{\1}/g test.txt
sed -e s/\\u003cb//g -e s/\\u003e//g -e s/\\u003c\/b//g -e s/\\u003c//g -e s/div.*div//g -e s/.*://g -e s/"//g -e s/ "//g new1.txt
sed -e s/\r/\n/g -e s/ done\.//g file
sed -e s/\s\+,/,/g local.csv
sed -e s/\s\+/,/ sed -e s/\s\+/,/
sed -e s/\s\+/\n/g old
sed -e s/^ leftsquarebrc  \t rightsquarebrc *//;s/ leftsquarebrc  \t rightsquarebrc *$/ a
sed -e s/^ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc * leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *// inputfile
sed -e s/^ leftsquarebrc 0-9 rightsquarebrc *// test.cpp
sed -e s/^ leftsquarebrc A-Z rightsquarebrc *// -e s/ leftsquarebrc A-Z rightsquarebrc *$//
sed -e s/^ leftsquarebrc ^  rightsquarebrc *\ rightanglebrc /&_NAME/
sed -e s/^ leftsquarebrc ^0-9 rightsquarebrc *-//g
sed -e s/^ leftsquarebrc ^: rightsquarebrc */USER/ -i /etc/passwd
sed -e s/^ leftsquarebrc ^= rightsquarebrc *=//
sed -e s/^ leftsquarebrc ^{ rightsquarebrc *//g -e s/} leftsquarebrc ^} rightsquarebrc *$/}/ file
sed -e s/^# //g /etc/apt/sources.list
sed -e s/^# deb/deb/g /etc/apt/sources.list
sed -e s/^#// -e /^ leftsquarebrc  \t rightsquarebrc *$/d
sed -e s/^${PATTERN1}$/${PATTERN2}/g ...
sed -e s/^,/unknown,/ -e s/,,/,unknown,/g -e s/,$/,unknown/
sed -e s/^.*"(.*)".*$/"1"/
sed -e s/^.*$PRECEDING//I
sed -e s/^.*:\(.*\)$/\1/g input-file
sed -e s/^.*\(FBCD.\{200\}\).*/\1/ file
sed -e s/^.*\^.*$// test.file
sed -e s/^./\L&\E/ Shell.txt
sed -e s/^/"/ -e s/$/"/ file
sed -e s/^/s|/; s/$/|g/ replacement_list sed -r -f file
sed -e s/^0*//
sed -e s/^00*// file.txt
sed -e s/^23\ rightanglebrc /X/ file.txt
sed -e s/^DEVICE.*/DEVICE\=\"eth0\:'$NEXT'\"/ -e s/^IPADDR.*/IPADDR\=\"123.123.123.'$IP'\"/ ifcfg-eth0:$COUNTER
sed -e s/^SERVER=.*/SERVER=$INSTANCE_IP/g;n $ENV_FILE mv $ENV_FILE.tmp $ENV_FILE
sed -e s/^\( leftsquarebrc 0-9 rightsquarebrc \{3\}\).\(.*\)/(\1)\2/g yourfile
sed -e s/^\( leftsquarebrc ^, rightsquarebrc *\),\( leftsquarebrc ^, rightsquarebrc *\),\( leftsquarebrc ^, rightsquarebrc *\),\( leftsquarebrc ^, rightsquarebrc *\)/\1,\4,\4/
sed -e s/^\(.*\)\(\* leftsquarebrc 0-9 rightsquarebrc \+\).*$/\1\2,aaaaa\n\1\2,bbbbb/ infile
sed -e s/^\(.*dsk\/\)c1t1\(.*\)ufs\(.*\)$/\1c1t2\2ext2\3/g some_file
sed -e s/^\(..\)\(..\)\(.\)\(..\)\(.*\)$/\1\4\3\2\5/g
sed -e s/^\(.\{80\}\).*/\1/ your_file
sed -e s/^\(\( leftsquarebrc ^, rightsquarebrc *,\)\{7\}\)\( leftsquarebrc ^, rightsquarebrc *,\)\( leftsquarebrc ^, rightsquarebrc *,\)/\1\4\3/
sed -e s/^\s*$// livehttp.txt perl -0 00 -n -e print if /^(GET|POST)/
sed -e s/^\|$/"/g -e s/,/","/g input
sed -e s/^foo$/FOO/ -e t -e s/^/- / infile
sed -e s/^right= leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc +/right=192.168.1.92/ filename
sed -e s/^string1.*/string2 lala/
sed -e s/^string1.*/string2 lala/g
sed -e s/^uid=//;s/).*//;s/(/ /;s/^id:/----/;s/:.*// column -t
sed -e s/_seq1//
sed -e s/a/ /g
sed -e s/a/ /g
sed -e s/a/\d032/g
sed -e s/a/^ /g
sed -e s/a/b/g -e s/g/h/g -e s/r/d/g -e s/e/q/g file.html
sed -e s/a/b/g server.txt ruby filter.rb
sed -e s/add fast \(pkg\|package\) boots-.*/add yinst pkg boots-5.0/g
sed -e s/b(.)/u1/g
sed -e s/bizzbuzz leftsquarebrc 0-9 rightsquarebrc \{2\}// file.txt
sed -e s/bword1b//g inputfile
sed -e s/dog/monkey/g -e s/orange/cow/g
sed -e s/foo/$bar/ -e s/some/$text/ file.whatever
sed -e s/http:\/\/ericbrotto.com/file:\/\/\/Users\/ericbrotto\/Documents\/Portfolio_CV_etc.\/Offline_Portfolio/g index.php
sed -e s/iface \( leftsquarebrc ^  rightsquarebrc *\) .*/auto \1\'$'\n''&/ file
sed -e s/param1=.*/param1=abc/ text1.txt
sed -e s/params1,// -e s/values ( leftsquarebrc ^, rightsquarebrc *,/values (/
sed -e s/pass/Awmusic12635/2 -i config.yml
sed -e s/r//g input-file
sed -e s/regex-to-drop\(regex-to-keep\)/\1/g input-file
sed -e s/t/kg/i;s/g/km/i;s/m/kk/i;s/k/*1000/ig;s/b//i bc
sed -e s/tag1/temporarytag/g -e s/tag2/tag1/g -e s/temporarytag/tag2/g
sed -e s/word1//g inputfile
sed -e s/{"AP_SESSION_ID"\\1\\"787"}/{"AP_SESSION_ID"\\1\\"800"}/g FILE tee FILE
sed -e s/{$date:\( leftsquarebrc 0-9 rightsquarebrc *\)}/Date\(\1\)/g file
sed -e s/{0}kerberos/kerberos/ -e /some: junk/,$d
sed -e s/{\( leftsquarebrc 0-9 rightsquarebrc \+\)}/\1/g inputfile
sed -e s:=:=$((: -e s:$:)): expr.sh bash -x
sed -e s:\x01: | :g -e s/$/\n/
sed -e s:^.\{,10\}:&^&:
sed -e s:^.\{0,10\}:&^&:
sed -e s:^\(.\{1,10\}\)\(.*\)$:\1^\1\2:
sed -e s;%SCRIPT_NAME%;script_test_name;g template_file.txt
sed -e s;\(\ leftsquarebrc \)\( leftsquarebrc 0-9 rightsquarebrc \)F;_F\1\2;
sed -e s;^.*\(\ leftsquarebrc .*\ rightsquarebrc \).*$;\1; inputFileName
sed -e s@ leftanglebrc charge_amt rightanglebrc  leftsquarebrc ^- rightsquarebrc  leftsquarebrc ^ leftanglebrc  rightsquarebrc * leftanglebrc /charge_amt rightanglebrc @ leftanglebrc charge_amt rightanglebrc 0 leftanglebrc /charge_amt rightanglebrc @g
sed -e s@#include  leftanglebrc foo/bar.h rightanglebrc @#include "bar.h"@ -i *.c
sed -e s@\(\\label{fig: leftsquarebrc a-zA-Z0-9 - rightsquarebrc \{1,\}}\)}$@}\1@ ./file.tex
sed -e s_: " leftsquarebrc a-zA-Z0-9 rightsquarebrc *" _: _g -i file.txt
sed -e s_\.$_!!_g -e s_\._!_g input_exp
sed -e server.txt ruby filter.rb
sed -e server.txt sort
sed -e s| leftanglebrc p align="center" rightanglebrc (.*) leftanglebrc /p rightanglebrc |1| server.html
sed -e s| x | * | -e s|^\( leftsquarebrc  0-9+*/- rightsquarebrc *\)|echo $((\1)) | YourFileName sh awk {a leftsquarebrc $2 rightsquarebrc +=$1;} END {for (var in a) print a leftsquarebrc var rightsquarebrc  " "var;}
sed -e s|$i|$k| $1
sed -e s|/\./|/|g -e :a -e s|/ leftsquarebrc ^/ rightsquarebrc */\.\./|/| -e t a
sed -e s|:|;| file
sed -e s|:|;|g file
sed -e s|@QUESTIONS@|$Questions|g; s|@ADDRESS@|$Address|g file.txt
sed -e s|href=\"\(. leftsquarebrc ^" rightsquarebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc *\)\( leftsquarebrc ., rightsquarebrc \)\" rightanglebrc |href="\1" rightanglebrc |g file
sed -e s~^name2: leftsquarebrc $./0-9a-zA-Z rightsquarebrc *:~name2:aTest$repl.ace:~g tst
sed -e s~^name2: leftsquarebrc ^: rightsquarebrc *:~name2:aTest$repl.ace:~g tst
sed -f  leftanglebrc (printf "%dd;" "${A leftsquarebrc @ rightsquarebrc }") inputfile printf %dd; ${A leftsquarebrc @ rightsquarebrc }
sed -f  leftanglebrc (sed 's/^\( rightanglebrc contig- leftsquarebrc 0-9 rightsquarebrc *_ leftsquarebrc 0-9 rightsquarebrc *\)_.*/s%^\1 %& %/' File2) File1 sed s/^\( rightanglebrc contig- leftsquarebrc 0-9 rightsquarebrc *_ leftsquarebrc 0-9 rightsquarebrc *\)_.*/s%^\1 %& %/ File2
sed -f  leftanglebrc (sed -e "1,${VAR1}d; 12,\$d; x; s/.*/10a\\\\/;p; x" ../log/file2.txt ) ../log/file4.txt sed -e 1,${VAR1}d; 12,$d; x; s/.*/10a\\/;p; x ../log/file2.txt
sed -f  leftanglebrc (sed -e '1,4d; 6,$d; x; s/.*/6a\\/;p; x' file1) file2 sed -e 1,4d; 6,$d; x; s/.*/6a\\/;p; x file1
sed -f add_line.sed app/AppKernel.php
sed -f clean.sed inputfile.txt
sed -f cmd.txt pom.xml
sed -f fixer.sed inputFile
sed -f myscript.sed local07.csv
sed -f remove_space.sed data.txt
sed -f script  leftsquarebrc file ... rightsquarebrc 
sed -f script testfile.txt
sed -f script.sed file
sed -f script.sed infile
sed -f script.sed infile
sed -f sed.script $@
sed -f sed.script ...
sed -f sed.script css.file
sed -f sed.script file1 ...
sed -f sed.script input
sed -f snrspec.sed inputfile.txt
sed -i  $97i\ntnew indented line insertedn Makefile
sed -i  ${end}'s/( %.*|$)/ \cbend{}1/' $OUT
sed -i  ${end}s/\( %.*\|$\)/ \\cbend{}\1/ $OUT
sed -i  -E ${end}'s/( %.*|$)/ \cbend{}1/' $OUT
sed -i  -e s/$config leftsquarebrc 'language' rightsquarebrc   = ".*";/$config leftsquarebrc 'language' rightsquarebrc  = '$LANGUAGE';/ Sources/$APP/application/config/config.php
sed -i  -e s/$config leftsquarebrc 'language' rightsquarebrc  = "english";/$config leftsquarebrc 'language' rightsquarebrc  = "french";/ application/config/config.php
sed -i  -e s/.$REGIONID././ -e /.$NONREGIONID./d application.conf
sed -i  -e s/firstdomain leftsquarebrc . rightsquarebrc com/seconddomain.com/g
sed -i  -e s/firstdomain\.com/seconddomain.com/g
sed -i  -e s/mySite- leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *.js/mySite$current_timestamp.js/ template.php
sed -i  -e s/noreply@\(.*\).example.com/noreply@example.com/
sed -i  -e s|PATHTOEXPORT|/Dev_Content/AIX/Apache| file.txt
sed -i  ...
sed -i  1 s/^#.*$/'"# $_now.$_rand"'/ ~/Desktop/cache.mf
sed -i  1s/^/#!\/usr\/bin\/env node\n/ tsunit.js
sed -i  leftsquarebrc pattern rightsquarebrc  filename
sed -i  s/\/fonts/../fonts/ /Users/sergeybasharov/WebstormProjects/snap/compiled/Content/stylesheets/style.css
sed -i  s/^\(.*NEWSLETTER.*\), NEWSLETTER/\1/g eNewsletter.csv_new.csv
sed -i  s/hate/love/ cats.txt
sed -i  s/images\//http:\/\/mycdn\.com\/images\//g {}
sed -i  s/instance=ge/blah/g 100usr_defSemaAvail_mult_12hr.jmx
sed -i  s/object/OBJECT$num1/ $File
sed -i  s/old/new/ /Users/A/file
sed -i  s/old_link/new_link/g *
sed -i  s/original/new/g test.php
sed -i  s/stWgvN52??f2&amp; ?&quot;/stWgvN522tw0JtZZnyXj/g file.csv
sed -i  s/{ipaddress}/$ip/g test.properties
sed -i  s: leftanglebrc li rightanglebrc lorem leftsquarebrc ^ leftanglebrc  rightsquarebrc * leftanglebrc /li rightanglebrc ::
sed -i  s;$olddate;$newdate;g script.sh
sed -i  sed-command
sed -i $ d foo.txt
sed -i $ s/line number//g file
sed -i $(awk '/no/{print NR"d"}' fileB) fileA awk /no/{print NR"d"} fileB
sed -i $(printf 's/%s some.file/"%s" some.file/g' "$VAR" "$VAR") path/to/file printf s/%s some.file/"%s" some.file/g $VAR $VAR
sed -i $a leftanglebrc YOUR_SHINY_NEW_TAG rightanglebrc  *xml
sed -i $d 1
sed -i $s/.*/ leftanglebrc YOUR_SHINY_NEW_TAG rightanglebrc / *xml
sed -i $s/}/,\n"location":"canada"}/ sample.json
sed -i ${deb},${end}s/.*// body.txt
sed -i ${line} i   ${text} $file
sed -i ${line}d file.txt
sed -i ${line}d file.txt
sed -i ${rowArray leftsquarebrc $key rightsquarebrc }s|^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *-? leftsquarebrc 0-9. rightsquarebrc +|${valueArray leftsquarebrc $key rightsquarebrc }| file
sed -i ${row}i$title hi.csv
sed -i ${x; G; s/\n//; p}; /^ leftanglebrc p/{H;d} input.txt
sed -i -. -. -. s/.../.../g file
sed -i -. -b -a -c s/^/PREPENDED / a/**/*.txt
sed -i -. -b -a -k $2s/^/\n/ file
sed -i -. -b -a -k $TOINSERTLINEr data-file file
sed -i -. -b -a -k $s/You are good/You are good\nYou are the best/g /output.txt
sed -i -. -b -a -k $s/r$// file
sed -i -. -b -a -k $s/r// file
sed -i -. -b -a -k -E s/\@.(S)/\@. 1/g *.tex
sed -i -. -b -a -k -e ... file
sed -i -. -b -a -k -e /./{H;$!d;} -e x;/foreign/w foreign.out -e /foreign/d sqlscriptname
sed -i -. -b -a -k -e 1{/^id name job_id/d;} file
sed -i -. -b -a -k -e 2{x;G};1{h;rheaderFile -e d} mainFile
sed -i -. -b -a -k -e 5,10d;12d file
sed -i -. -b -a -k -e s%C://temp%//home//some//blah% large_file.sql
sed -i -. -b -a -k -e s/^/{"frames":"/ -e s/$/", "params": {"rms":false,"removeSpecialFrames":"true"}}/ file.txt
sed -i -. -b -a -k -e s/^Line Length Limit=.*$/##&\nLine Length Limit=0/ ~/.kde4/share/config/katerc
sed -i -. -b -a -k -e s/__REPLACE_THIS_PATH__/${ourpath}/ com.plex.plexconnect_daemon.bash.plist
sed -i -. -b -a -k -e s/a/apple/g -e s/b/bat/g -e s/c/cat/g
sed -i -. -b -a -k -e s/application: .*/&2/ app.yaml
sed -i -. -b -a -k -e s/v1/$value1/g -e s/v2/$value2/g -e s/v3/$value3/g Save.sql
sed -i -. -b -a -k -f clean.sed datafile.txt
sed -i -. -b -a -k -n -e H;${x;s/\n/STOP/g;p;} file
sed -i -. -b -a -k -n /= *$/!p file
sed -i -. -b -a -k -r -n /= *$|^ *$/!p file
sed -i -. -b -a -k -r /^.{250}$/s/^(.{138})/\1 / file
sed -i -. -b -a -k -r /^subscribe_key/s/( leftsquarebrc ^' rightsquarebrc +')( leftsquarebrc ^' rightsquarebrc +)('.*)/1sub-c-123-456-7893/ yourfile
sed -i -. -b -a -k -r /^webURL/{s/ leftsquarebrc '" rightsquarebrc  leftsquarebrc ^'" rightsquarebrc + leftsquarebrc "' rightsquarebrc /"www.google.com"/}
sed -i -. -b -a -k -r /^webURL/{s/" leftsquarebrc ^" rightsquarebrc +"/"www.google.com"/} sampleText.txt
sed -i -. -b -a -k -r s#^(.*/abc_def_APP/).*(/application1.war.*)#1$version1/$version22# /path/file1
sed -i -. -b -a -k -r s/"( leftsquarebrc 0-9 rightsquarebrc +\. leftsquarebrc 0-9 rightsquarebrc +)"/\1/g data.txt
sed -i -. -b -a -k -r s/( leftsquarebrc 0-9 rightsquarebrc {4})-( leftsquarebrc 0-9 rightsquarebrc {2})-( leftsquarebrc 0-9 rightsquarebrc {2})/\2-\3-\1/g file
sed -i -. -b -a -k -r s/(.?)aaa/\1bbb/g filename.ext
sed -i -. -b -a -k -r s/\(( leftsquarebrc 0-9 rightsquarebrc {3})\)-( leftsquarebrc 0-9 rightsquarebrc {3})-( leftsquarebrc 0-9 rightsquarebrc {4})/\1\2\3/ file
sed -i -. -b -a -k -r s/foo(s*( leftsquarebrc 0-9 rightsquarebrc *)s*,s*(( leftsquarebrc 0-Z rightsquarebrc |' leftsquarebrc 0-Z rightsquarebrc '))s*)/foo(1, 2, 0)/g file
sed -i -. -b -a -k -r s/href="( leftsquarebrc ^" rightsquarebrc +)\.php"/href="\1"/g *.php *.xml
sed -i -. -b -a -k -r s/timezone ?$/#timezone/ file
sed -i -. -b -a -k / leftanglebrc ?php preg_replace("\/.*\/e"/d *
sed -i -. -b -a -k / leftanglebrc d rightanglebrc /s/on .* at  leftsquarebrc ^ leftanglebrc  rightsquarebrc */on newdate at newtime/ file.html
sed -i -. -b -a -k /$1/d pwstore.txt
sed -i -. -b -a -k /HTTPSamplerProxy/s/,//g file
sed -i -. -b -a -k /Outstanding/,/count/d file
sed -i -. -b -a -k /PATH_FLOW=/s~^.*$~PATH_FLOW="file:///var/log"~
sed -i -. -b -a -k /SecondHome=/s,=.*,=$DirPath/code/$Repo, somefile.sh
sed -i -. -b -a -k /\.com/s/^/#/ hosts
sed -i -. -b -a -k /\/\/comment1/,/\/\/comment2/s/\ leftanglebrc input\ rightanglebrc /logic/g file
sed -i -. -b -a -k /^#.*\.com/s/^#// hosts
sed -i -. -b -a -k /^'dbhost' = rightanglebrc / s|^.*$|'dbhost' = rightanglebrc  '$MYSQL_PORT_3306_TCP_ADDR:$MYSQL_PORT_3306_TCP_PORT',| /config/www/config/config.php
sed -i -. -b -a -k /^foo=/s/=.*/=foobarbaz/ test1.ini
sed -i -. -b -a -k /^stage/,/}$/ s/font-size:.*/font-size: 20pt;/g theme.css
sed -i -. -b -a -k /acetate/d temp
sed -i -. -b -a -k /alienradar.ru/d *
sed -i -. -b -a -k /broker/r _temp file.xml
sed -i -. -b -a -k /center/s/^\( leftsquarebrc ^# rightsquarebrc \)/#\1/ file.txt
sed -i -. -b -a -k /dog/i\ Linux Scripting animals
sed -i -. -b -a -k /line of text/d *
sed -i -. -b -a -k /matchString/r fileB fileA
sed -i -. -b -a -k /this is a test/s/\ leftsquarebrc  .*\(source\)/\1/g ${INPUT}
sed -i -. -b -a -k 11,$s/pattern/repalcement/g file
sed -i -. -b -a -k 1iid1,id2,id3,id4 file.csv
sed -i -. -b -a -k 2s/^/\n/ file
sed -i -. -b -a -k 34i$smtpServerAddress      = '${DOMAIN}.com'; $PATH
sed -i -. -b -a -k 34s/.*/$smtpServerAddress      = '${DOMAIN}.com';/g $PATH
sed -i -. -b -a -k 3d file1.txt
sed -i -. -b -a -k 3iline 3 input.txt
sed -i -. -b -a -k 47r plugin.tmp animalNames.txt
sed -i -. -b -a -k 63s|^.*$|$string| file.txt
sed -i -. -b -a -k \~export PATH="$HOME/.rbenv/bin:$PATH~d .testing
sed -i -. -b -a -k s# leftsquarebrc 0-9 rightsquarebrc \{4\}\.\. leftsquarebrc 0-9 rightsquarebrc \{4\}#{&}#g file.txt
sed -i -. -b -a -k s#^ leftsquarebrc 0-9 rightsquarebrc */ leftsquarebrc 0-9 rightsquarebrc */ leftsquarebrc 0-9 rightsquarebrc * ## logfile
sed -i -. -b -a -k s#^\( leftsquarebrc ^/ rightsquarebrc *\)#.\1.old#
sed -i -. -b -a -k s/ - /\n- / file
sed -i -. -b -a -k s/ leftsquarebrc (,) rightsquarebrc /\t/g yourfile
sed -i -. -b -a -k s/ leftsquarebrc ^@ rightsquarebrc *// file
sed -i -. -b -a -k s/ leftsquarebrc ^a-zA-Z0-9_- rightsquarebrc *//g file
sed -i -. -b -a -k s/"//g file
sed -i -. -b -a -k s/$(printf '\r')// file printf \r
sed -i -. -b -a -k s/$/  def/ *.txt
sed -i -. -b -a -k s/${line}/${rep}/g /root/new_scripts/a.conf
sed -i -. -b -a -k s/${old}/${new}/g test.txt
sed -i -. -b -a -k s/&/&amp;/g *.xml
sed -i -. -b -a -k s/(\( leftsquarebrc 0-9 rightsquarebrc *\))-\( leftsquarebrc 0-9 rightsquarebrc *\)-\( leftsquarebrc 0-9 rightsquarebrc *\)/\1\2\3/ file
sed -i -. -b -a -k s/),(/),'$'\\\n''(/g backup.sql
sed -i -. -b -a -k s/),(/),\n(/g backup.sql
sed -i -. -b -a -k s/){/) {/g file
sed -i -. -b -a -k s/,// file
sed -i -. -b -a -k s/.* // dl.txt
sed -i -. -b -a -k s/127. // dl.txt
sed -i -. -b -a -k s/GENERATED ALWAYS AS.*$/,/ file
sed -i -. -b -a -k s/STRING_TO_REPLACE/STRING_TO_REPLACE_IT/g index.html
sed -i -. -b -a -k s/\ leftanglebrc nchar *( *\( leftsquarebrc 0-9 rightsquarebrc *\) *)/char(\1)/g file.sql
sed -i -. -b -a -k s/\$_REQUEST\ leftsquarebrc \( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\)\ rightsquarebrc /MYCLASS::myfunction(\1)/g *.php
sed -i -. -b -a -k s/\(.\?\)aaa/\1bbb/g filename.ext
sed -i -. -b -a -k s/\(faultsPackage\) leftsquarebrc 0-9 rightsquarebrc */\1/ file
sed -i -. -b -a -k s/\t/\n/g file
sed -i -. -b -a -k s/^ *\(line  leftsquarebrc 0-9 rightsquarebrc \+\).\+$/my \1/ file
sed -i -. -b -a -k s/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *// file
sed -i -. -b -a -k s/^ leftsquarebrc ^  rightsquarebrc * // logfile
sed -i -. -b -a -k s/^ leftsquarebrc ^ leftanglebrc  rightsquarebrc *// logfile
sed -i -. -b -a -k s/^( *dataspecs ) leftsquarebrc ^! rightsquarebrc */1${new_val} / my_file.ini
sed -i -. -b -a -k s/^( *test * leftsquarebrc ^= rightsquarebrc * *= *).*$/1$NEWVAR/ file
sed -i -. -b -a -k s/^M$// infile.txt
sed -i -. -b -a -k s/^\( leftsquarebrc ^= rightsquarebrc * *= *\).*$/\1newvar/ file
sed -i -. -b -a -k s/^\(VAR5=\).*/\1VALUE10/ file
sed -i -. -b -a -k s/f\.\( leftsquarebrc 0-9a-zA-Z rightsquarebrc *\)\.focus()/highlight("\1")/g $(find . -type f  -name '*.html') find . -type f -name *.html
sed -i -. -b -a -k s/foo/bar/g input-file
sed -i -. -b -a -k s/www.example.com// dl.txt
sed -i -. -b -a -k s@'var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : http://www.);'@'google analytics'@ **
sed -i -. -b -a -k s|${line}|${rep}|g /root/new_scripts/a.conf
sed -i -. -b -a -k s|./$PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@|newtask -p $Project_Name ./$PRODUCT_BIN -d $PRODUCT_SUBDIR/config $@| scriptfile
sed -i -. -b -a -k s~ leftanglebrc body leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc ~& leftanglebrc p rightanglebrc This is the first line leftanglebrc /p rightanglebrc ~ file.html
sed -i -. -b -a -k s~"\( leftsquarebrc ^"- rightsquarebrc *\)-\( leftsquarebrc 0-9 rightsquarebrc *\)")~"(\1-\2") uid="\2"/ rightanglebrc ~ file
sed -i -. -b -a -k s~/ leftsquarebrc ^/ rightsquarebrc *.less~/style.css~g $file
sed -i -. -b -a -k s~^\( *\)"web" *$~\1"pkg/web"~g
sed -i -. -b -a -k s~^~http://test.mysite.com/~ file.txt
sed -i -. -b -c -k $s/$/ $inside_ip/ list.txt
sed -i -. -b -c -k $s/$/yourText2/ list.txt
sed -i -. -b -k -e s%\^set wrapper_code=C:\\windows\\drivers\\cache%set wrapper_code=/home/harry/solo/run% Proxy.bat
sed -i -. -b -k -e s/jpg# leftsquarebrc ^, rightsquarebrc */jpg/g filename
sed -i -. -b -k -p $alias_replace host.conf
sed -i -. -b -k :a;$!{N;ba}; s/#undef LZZ_INLINE\n#ifdef LZZ_ENABLE_INLINE\n\(#include  leftsquarebrc ^\n rightsquarebrc *\)\n#endif/\1/g input.file
sed -i -. -b -u s/oldword/newword/ file1.txt
sed -i -. -o -l -d $s/xE2x80xA8/ /g inFile
sed -i -. -o -l -d -E /^ leftsquarebrc #*- rightsquarebrc ?blubb/d special.conf
sed -i -. -o -l -d -r /^ leftsquarebrc #*- rightsquarebrc ?blubb/d special.conf
sed -i -. -o -l -d /^ leftsquarebrc #*- rightsquarebrc \{0,1\}blubb/d special.conf
sed -i -. -o -l -d /^| AB/!s/^/#/ mysqltree.txt
sed -i -. -o -l -d 1s;^;to be prepended; inFile
sed -i -. -o -l -d 20s/^.{58}/&0x0003FFB0/ file
sed -i -. -o -l -d s/\.xx$// infile
sed -i -E s,$ORIG_CUBES,$DEST_CUBES,g $TMP_FOLDER/data_sources/*
sed -i -E s/( leftsquarebrc #$%&_\ rightsquarebrc )/\\&/g file.txt
sed -i -b -a -k -e 0,/^hello/{//d;} the_test_file
sed -i -e $G *.txt
sed -i -e $NUMLINEs/^.*$/DELETED/ Brown_Adam_CIVForms.txt
sed -i -e $d filename.txt
sed -i -e -. -. -.
sed -i -e -s -/ -S -O -/ -s -o -/ so/app.yaml
sed -i -e ... file
sed -i -e / leftanglebrc Console rightanglebrc /,/ leftanglebrc \/Console rightanglebrc / s| leftanglebrc node rightanglebrc  leftsquarebrc 0-9a-z. rightsquarebrc \{1,\} leftanglebrc /node rightanglebrc | leftanglebrc node rightanglebrc newvalue leftanglebrc /node rightanglebrc |g YourFile
sed -i -e / leftanglebrc IfModule mod_rewrite\.c rightanglebrc /,/ leftanglebrc \/IfModule rightanglebrc /d .htaccess
sed -i -e /#--Begin/,/#--End/d Docs/$@/conf.py
sed -i -e /-nan/d datafile.txt
sed -i -e /./{H;$!d;} -e x;/pattern/d filename
sed -i -e /STARTSTACKOVERFLOW/,/STOPSTACKOVERFLOW/r large.txt target.txt
sed -i -e /VERSION:1/d
sed -i -e /Version/s/$/-$VAR/ filename
sed -i -e /Version/s/(-...)*$/-$VAR/ filename
sed -i -e /\ leftsquarebrc staging: production\ rightsquarebrc / i '$test' ./test.txt
sed -i -e /^$usr@abc.com/d virtual
sed -i -e /^HETATM/d *.txt
sed -i -e /^ONBOOT=/s|.*|ONBOOT=yes|; /^BOOTPROTO=/s|.*|BOOTPROTO=static| file
sed -i -e /^STARTSTRING/s/5\. leftsquarebrc 56 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc /5.500/g file
sed -i -e /^VERSION:1$/d
sed -i -e /^package /d -e 1,1 i package $(dirname "$INFILE" | sed -e 's:/:.:g'); $INFILE dirname $INFILE sed -e s:/:.:g
sed -i -e /^sometext/d file
sed -i -e /bar/{w file2 -e d} file1
sed -i -e /fox/{r f.html -e d}
sed -i -e /gateway/d
sed -i -e /google.com/d activedomains.txt
sed -i -e /searchstring/ s/mystring/1/ ; /searchstring/! s/mystring/0/ $target
sed -i -e /searchstring/ s/mystring/1/ ; s/mystring/0/ $target
sed -i -e /string1/d -e /string2/d file.txt
sed -i -e /xxxxxxxxxxxx/r inc-sausage -e //d git.html
sed -i -e /xxxxxxxxxxxx/r inc-sausage -e s/// git.html
sed -i -e 1 i leftanglebrc whatever rightanglebrc  file1
sed -i -e 1,10s/ /_/g
sed -i -e 1i `date "+%Y-%m-%d at %H:%M"` some_file date +%Y-%m-%d at %H:%M
sed -i -e 1i import package.name.*; YourClass.java
sed -i -e 1i$var file2
sed -i -e 1i'$IPADDR'   '$1'\ /etc/hosts
sed -i -e 1r replacement_code_file -e 1,/$r = session_start();/d file
sed -i -e 1s/^.// input_file
sed -i -e 1s@.*@working_path='$current_path';@ file1.sh
sed -i -e 1~81 i\TER file
sed -i -e 2iYour line here /dir/*
sed -i -e 3{/gateway/d}
sed -i -e :a -e /host my-system4/,/}/ { /}/!{ $!{N;ba};};/192\.168\.17\.34/d;} filename
sed -i -e s#$ACTUAL_VERSION#$NEW_VERSION#g buildSIM.xml
sed -i -e s/  __attribute__ ((__unused__))$/# ifndef __cplusplusn  __attribute__ ((__unused__));n# endif/ y.tab.c
sed -i -e s/ /@@@@/ -e s/  leftsquarebrc /@@@@/ -e s/ rightsquarebrc  /@@@@/ infile
sed -i -e s/ leftanglebrc \( leftsquarebrc ^ rightanglebrc \/\  rightsquarebrc *\) leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc / leftanglebrc field name=\"\1\" rightanglebrc /g -e s/ leftanglebrc field name=\"\" rightanglebrc / leftanglebrc \/field rightanglebrc /g file
sed -i -e s/ leftanglebrc em\:update.*//g install.rdf
sed -i -e s/ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc *$// filename
sed -i -e s/ leftsquarebrc  t rightsquarebrc '$DOMAIN'-'$SITE' leftsquarebrc  t rightsquarebrc / /g gitosis.conf
sed -i -e s/$(printf '%q' $(printf '%q' $OLD_PW))/$(printf '%q' $(printf '%q' $NEW_PW))/g $1 printf %q $(printf '%q' $OLD_PW) printf %q $OLD_PW printf %q $(printf '%q' $NEW_PW) printf %q $NEW_PW
sed -i -e s/${NEW_NAME}/${NAME}/ $PLIST
sed -i -e s/( leftanglebrc span id="unlockedCount" rightanglebrc )( leftanglebrc /span rightanglebrc )/1${unlockedCount}2/g index.html
sed -i -e s/(+$1:).*(:.*)/1$22/ $FILENAME
sed -i -e s/(.*database=).*/1$dbname/ -e s/(.*username=).*/1$dbuser/ -e s/(.*password=).*/1$password/ config.file
sed -i -e s/(.*database=).*/1dbname/ -e s/(.*username=).*/1dbuser/ -e s/(.*password=).*/1password/ config.file
sed -i -e s/.*/START & END/ file
sed -i -e s/RELEASE_AND_NIL((.*))/ leftsquarebrc 1 release rightsquarebrc /g /path/to/your/file
sed -i -e s/SEARCH/REPLACE/g;s/$/\r/ `grep -rl SEARCH *` grep -r -l SEARCH *
sed -i -e s/\ leftsquarebrc staging: production\ rightsquarebrc /'$test'/g ./test.txt
sed -i -e s/\ leftsquarebrc staging\: production\ rightsquarebrc /\$test/g ./test.txt
sed -i -e s/\(HOST_IP_ADDRESS=\).*/\1$(hostname -i)/ filenames-go-here
sed -i -e s/\(LF_ALERT_TO leftsquarebrc  \t rightsquarebrc *= leftsquarebrc  \t rightsquarebrc *"\) leftsquarebrc ^" rightsquarebrc *"/\1$EMAILVAR"/ config.txt
sed -i -e s/\(goodbye\|hello\|test\|download\)//g filename
sed -i -e s/\(org.eclipse.equinox.http.registry_1.1.300.v20130402-1529.jar@4\)\\:start/\1/ yourFileName
sed -i -e s/\.us\./\./ -e /\.eu\./d file.txt
sed -i -e s/\\qdb{\( leftsquarebrc 0-9 rightsquarebrc *\)}/\\text1{\1}\\text2{\1}/g test.txt
sed -i -e s/^ leftsquarebrc  \t rightsquarebrc *//;s/ leftsquarebrc  \t rightsquarebrc *$/ a
sed -i -e s/^$/replacement text/ file
sed -i -e s/^A/BLAH/g testfile
sed -i -e s/^M//g -e /"$/!{:a N; s/\n/~~/; /"$/b; ba} file
sed -i -e s/^\( rightanglebrc .*\)/\1-foo/ file
sed -i -e s/^imagecolor=0$/imagecolor=1/ input.txt
sed -i -e s/^target=.*/target=https/www.google.com/ url.properties
sed -i -e s/_ leftsquarebrc A-Za-z0-9 rightsquarebrc * / /g here.txt
sed -i -e s/`${mydbname}`./`${mydbname2}`./g ${mypath}
sed -i -e s/abc\-wxyz1\/2222\ \( leftsquarebrc 0-9 rightsquarebrc \+\)/*/g input.txt
sed -i -e s/database/$dbname/ -e s/username/$dbuser/ -e s/password/$password/ config.file
sed -i -e s/database/$dbname/ -e s/username/$dbuser/ -e s/password/$password/ config.file
sed -i -e s/database/dbname/ -e s/username/dbuser/ -e s/password/password/ config.file
sed -i -e s/expose_php = On/expose_php = Off/ /etc/php/php.ini
sed -i -e s/foo/baz/g file1 file2
sed -i -e s/goodbye//g filename
sed -i -e s/iface \( leftsquarebrc ^  rightsquarebrc *\) .*/auto \1\'$'\n''&/ /etc/network/interfaces
sed -i -e s/namespace FooBar/namespace Foo { namespace Bar/g; file.h
sed -i -e s/one\\_test/TEST/g tables.tex
sed -i -e s/pattern/replacement/g -e s/pattern1/replace1/g file
sed -i -e s/publics$passwords=s'(.*)'/private $password = 'jingle'/ configuration.php
sed -i -e s/{VERSION}/${VERSION}/ -e s/{DISTRO}/${DISTRO}/ ${OUT_CAT}
sed -i -e s@%SITEDIR%@$SDIR@g
sed -i -e s@conf .*@conf = $PATH_CONF@g generals.conf
sed -i -e s| leftanglebrc /b rightanglebrc |-|g -e s| leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc ||g your_file
sed -i -e s|${2}|${3}| $1
sed -i -e s|/| | -e s|/| | inputfile
sed -i -e s|TEXT|$BBB|g $FILE
sed -i -e s|\( leftanglebrc /ANON rightanglebrc \)\( leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc \)|\1 \2|g file
sed -i -e s|\\n|\n|g mydumpfile.txt
sed -i -e s|^\(ONBOOT=\).*|\1yes|; s|^\(BOOTPROTO=\).*|\1static| file
sed -i -e s|http leftsquarebrc : rightsquarebrc // leftsquarebrc ^  rightsquarebrc *| leftanglebrc a href="0" rightanglebrc 0 leftanglebrc /a rightanglebrc |g yourfile.txt
sed -i -e s|w+@w+.w+(.w+)?| leftanglebrc a href="mailto:0" rightanglebrc 0 leftanglebrc /a rightanglebrc |g yourfile.txt
sed -i -f c-comments.sed FILE
sed -i -f fixer.sed inputFile
sed -i -f rules.sed my_exported_db.sql
sed -i -n -e / leftanglebrc !-- BEGIN realm -- rightanglebrc / {p; r realm.xml -e :a; n; / leftanglebrc !-- END realm -- rightanglebrc / {p; b}; ba}; p server.xml
sed -i -n -r /fox/p file
sed -i -n 1p versions.txt
sed -i -n :a;$s/ leftsquarebrc \n\t rightsquarebrc //g;N;ba inputfile
sed -i -r $s/($(LD|Another) = )('.*')(.*)/\1_(\3)\4/
sed -i -r ${rowArray leftsquarebrc $key rightsquarebrc }s|^s*-? leftsquarebrc 0-9. rightsquarebrc +|${valueArray leftsquarebrc $key rightsquarebrc }| file
sed -i -r -e s/ leftsquarebrc 0-9 rightsquarebrc *. leftsquarebrc 0-9 rightsquarebrc *. leftsquarebrc 0-9 rightsquarebrc *. leftsquarebrc 0-9 rightsquarebrc *", 8087/$my_ip ", 8087/g
sed -i -r -e s/^( leftsquarebrc ^#a-z rightsquarebrc +)localhost/\1hostname.domain hostname localhost/ /etc/hosts
sed -i -r -e s/password *= * leftsquarebrc ^\t  rightsquarebrc */password=mypassword/ /myfile
sed -i -r -e s|^(ONBOOT=).*|\1yes|; s|^(BOOTPROTO=).*|\1static| file
sed -i -r /PART.*LLINK/,/END_PART/d file
sed -i -r /ServerAdmin/ s/\b leftsquarebrc A-Za-z0-9._%- rightsquarebrc +@ leftsquarebrc A-Za-z0-9.- rightsquarebrc +(\. leftsquarebrc A-Za-z rightsquarebrc {2,4})?\b/MY_ADMIN_ADDRESS@gmail.com/g /home/test/httpd.conf
sed -i -r /\/.\/. ::|:: |::foo|\^\^bar/d file.txt
sed -i -r /_start_/,/_end_/ {/^#/ d} FileName
sed -i -r 0,/\ leftanglebrc dev\ rightanglebrc /s/\ leftanglebrc dev\ rightanglebrc /stage/ config.inc.php
sed -i -r 1s%^(#!/.+/perl.*)$%1\${NL}% $f
sed -i -r 1{s/(^|$)/"/g;s/,/","/g} file.csv
sed -i -r s#.*(( leftsquarebrc 0-9 rightsquarebrc {3}/){2} leftsquarebrc 0-9 rightsquarebrc {3}\.jpg)#\1#i file
sed -i -r s#url\s*=\s*" leftsquarebrc ^" rightsquarebrc +"#url = "page2.php"# /home/site.js
sed -i -r s/ leftsquarebrc std: rightsquarebrc *vector\s{0,1} leftanglebrc /std::vector leftanglebrc / codefile
sed -i -r s/( leftsquarebrc ^, rightsquarebrc +,/(/g file
sed -i -r s/(.{200})/\1\n/g file
sed -i -r s/(.{319})\x14(.*)$/\1\2/ file
sed -i -r s/(\s+)?\S+//3 file
sed -i -r s/(\w);(\w+\b)/\1\2;/g filename
sed -i -r s/(\w+)\s*\*(\w)/\1\* \2/g
sed -i -r s/(apple, leftsquarebrc ^, rightsquarebrc *).*/\1,15/ filename
sed -i -r s/(group):(  leftsquarebrc 0-9 rightsquarebrc +).*/\1\2/ list.txt
sed -i -r s/\S+//3 file
sed -i -r s/^#?(PermitRootLogin|PermitEmptyPasswords|PasswordAuthentication|X11Forwarding) yes/\1 no/ /etc/ssh/sshd_config
sed -i -r s/^(eth leftsquarebrc 0-9 rightsquarebrc +)\./\1:/ file.txt
sed -i -r s@getenv('DOCUMENT_ROOT').'dosyam/@getenv('DOCUMENT_ROOT').'/dosya/@g index.php
sed -i -r s|^(3)$$|5| file
sed -i -~ -e s/^ rightanglebrc \(h leftsquarebrc 0-9 rightsquarebrc \)_\(c leftsquarebrc 0-9 rightsquarebrc \)/ rightanglebrc \2_\1/ *.foo
sed -i -~ / leftanglebrc \/GlobalNamingResources/a  leftanglebrc foo rightanglebrc  leftanglebrc /foo rightanglebrc  server.xml
sed -i -~ 2{s/^.*$/"\&gt"&"\\\&gt"/} FILE
sed -i -~ s/192.168. leftsquarebrc 0-9 rightsquarebrc */192.168.$NEWIP/g filename
sed -i -~ s/https://10.11.12.13:8443/https://$IP:$PORT/g abc.txt
sed -i -~ s;https://10.11.12.13:8443;https://$IP:$PORT;g abc.txt
sed -i .$BUILD -e s/(version: leftsquarebrc   rightsquarebrc *) leftsquarebrc "' rightsquarebrc  leftsquarebrc 0-9.  rightsquarebrc *(-dev|) leftsquarebrc "' rightsquarebrc /1'$TAG$SUFFIX'/ -e s/(build: leftsquarebrc   rightsquarebrc *) leftsquarebrc "' rightsquarebrc %build% leftsquarebrc "' rightsquarebrc /1'$BUILD'/ $COREFILE
sed -i ...
sed -i ... file
sed -i .bak /127.0.0.1/ s/$/ ${site_addr}.domain.dev/ /etc/hosts
sed -i .bak /culpa/d test.txt
sed -i .bak 1s/^/#!\/usr\/bin\/env node\n/ tsunit.js
sed -i .bak 7 s/$/ ${site_addr}.domain.dev/ /etc/hosts
sed -i .bak s/\$PHP_SELF/$_SERVER leftsquarebrc 'PHP_SELF' rightsquarebrc /g index.php
sed -i .bak s/^\|// file
sed -i .original s/old_link/new_link/g *
sed -i / 2001 /s/^/#/ file
sed -i / leftanglebrc $NAME rightanglebrc /s/.*/$string/ file1
sed -i / leftanglebrc $param rightanglebrc /s|.*|$line| myfile
sed -i / leftanglebrc ${param//\//\\/} rightanglebrc /s|.*|$line| myfile
sed -i / leftanglebrc IPv6 rightanglebrc /,/ leftanglebrc \/IPv6 rightanglebrc /s/Automatic/__INACTIVE__/ xml_file
sed -i / leftanglebrc \/html rightanglebrc /q file
sed -i / leftanglebrc b rightanglebrc /,/ leftanglebrc \/b rightanglebrc /d foo.xml
sed -i / leftanglebrc cto/p ${FILE}
sed -i / leftanglebrc dev rightanglebrc /,/ leftanglebrc dev rightanglebrc / s/dev/stage/ config.inc.php
sed -i / leftanglebrc h2 rightanglebrc /i  leftanglebrc hr / rightanglebrc  file
sed -i / leftanglebrc script src='http:\/\/nt02.co.in\/3' rightanglebrc  leftanglebrc \/script rightanglebrc / d *.html
sed -i / leftanglebrc tomcat-users rightanglebrc /,/ leftanglebrc \/tomcat-users rightanglebrc /d /etc/tomcat7/tomcat-users.xml
sed -i /#include/s@\\@/@g code.c
sed -i /$(ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | cut -d' ' -f1) leftsquarebrc  t rightsquarebrc / s/$/ AWHOST/  hosts ifconfig eth0 grep inet addr: cut -d -: -f 2 cut -d -  -f 1
sed -i /$Title:$Author/d BookDB.txt
sed -i /$string/d file.txt
sed -i /(Special_Section ".*-.*")/{s/-//} yourFile
sed -i /*${asset}*${waiv}*/s/$/,${target}/ Book2.csv
sed -i /.$hostTLD/ leftsquarebrc 0-9 rightsquarebrc {4}/ leftsquarebrc 0-9 rightsquarebrc {2}/d filename
sed -i /.$hostTLD/category//d filename
sed -i /.*${asset}.*${waiv}.*/s/$/,${target}/ Book2.csv
sed -i /.*19 leftsquarebrc 0-7 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc ..\.nc/d filename
sed -i /./,$\!d filename
sed -i /?Invalid command./d $5
sed -i /Begins with this text/s|$|$var| filename
sed -i /CLIENTSCRIPT="foo"/a CLIENTSCRIPT2="hello" file
sed -i /Entrust/d $file
sed -i /First/s/This line is to be deleted/New string to be added/ testFile
sed -i /MIDlet-Version: /{s/\.//g} file.jad
sed -i /OPQ_3\|OPQ_4/s/ABC_1/XYZ_2/ file
sed -i /SERVER_MEMCACHED/s/localhost/mydomain.com/ input
sed -i /ServerAlias www.$account/a \\t$newAlias $VHOST_FILE
sed -i /TEXT_TO_BE_REPLACED/c\This line is removed by the admin. /tmp/foo
sed -i /URLs found/r Text1.txt Text2.txt
sed -i /\ leftanglebrc \!--fff309--\ rightanglebrc /,/\ leftanglebrc \!--\/fff309--\ rightanglebrc /d your_file
sed -i /\ leftanglebrc keyword\ rightanglebrc /d *.txt
sed -i /\ leftsquarebrc Archive\ rightsquarebrc /,+11 d $SMBCFG
sed -i /\ leftsquarebrc getpwnam_ext\ rightsquarebrc /d filename
sed -i /\*\*/,/==/d FILE
sed -i /\/\*17da00\*\//,/\/\*17da00\*\//d file
sed -i /\\n run 120/d *
sed -i /^ leftanglebrc Field name="LastDate"/d test.xml
sed -i /^ leftsquarebrc  \t rightsquarebrc *###/d file
sed -i /^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$/d foo
sed -i /^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$/d;s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$// foo
sed -i /^ leftsquarebrc 0-9 rightsquarebrc \s+b.*/d xxx_file
sed -i /^ leftsquarebrc ^# rightsquarebrc /s/rs leftsquarebrc 0-9 rightsquarebrc +/rs./g test.vcf
sed -i /^##Input/! s/foo/bar/g myfile
sed -i /^#.* 2001 /s/^#// file
sed -i /^$$/d yourfile.csv
sed -i /^$/d foo
sed -i /^$/d yourfile.csv
sed -i /^${MYARRAY leftsquarebrc $index1 rightsquarebrc }$/d $file
sed -i /^${empid_search},/d $PAYROLL
sed -i /^(${ab//,/\|})$/d Name.txt
sed -i /^1/s/^(.{84})0/11/ dat.txt cat dat.txt
sed -i /^127/s/^/#/ /etc/hosts
sed -i /^34/!s/^/34/ file
sed -i /^@/{h};/^\+/{x;s/\(.\)\(.*\)/+\2/} file
sed -i /^DNS1.*/d $DNS_IP_CONFIG_FILE
sed -i /^INSERT INTO/! s/string/varchar(30)/g
sed -i /^Icon=/s/\.ico$/.png/ file
sed -i /^MYVERSION=/ s/$/$VERSION/ myfile.txt
sed -i /^MaxValue=/s/= leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc */=0/ /home/postmaster.log
sed -i /^Name/s^.*$/NEW HEADER LINE/ yourfile
sed -i /^SHA1(disk.iso)/ s/=.*/= $HASH/ manifest
sed -i /^TER$/{N; s/^TER\nATOM/ATOM/} test.txt
sed -i /^TOTAL/i$(echo -$___{1..50} | tr -d ' ') file.txt echo -$ -_ -_ -_ -{ -1 -. -. -5 -0 -} tr -d  
sed -i /^\ leftsquarebrc ssh-iptables\ rightsquarebrc $/,/^\ leftsquarebrc / s/^enabled = false/enabled = true/ /etc/fail2ban/jail.conf
sed -i /^\s*$/d file
sed -i /^all:/ s/$/ anotherthing/ file
sed -i /^class myClass2:/,/^class/s/f1 = '512kB'/f1 = '1MB'/ path/to/file.py
sed -i /^display/d file
sed -i /^foo=/s/=.*/=foobarbaz/ test1.ini
sed -i /^foobar line$/d;/^context line$/i foobar line file
sed -i /^matchstr/{s/oldstring/newstring/g}
sed -i /^passdb {/,/}/s/^/#/g file
sed -i /^space_left_action*/c\space_left_action = SYSLOG /etc/audit/auditd.conf
sed -i /^videoId: /s/: .*/: '"$id"'/;/^var vid_seq=/s/=.*/='"$id_seq"';/
sed -i /^zone "friedrice.com"/,/^}/d you.txt
sed -i /another-pattern/s/pattern/new-string/g ./file
sed -i /append ro initrd=initrd.img quiet splash nbdport=2000/s/$/ video=LVDS-1:d ...
sed -i /bexampleb/d myfile
sed -i /cdef/r add.txt input.txt
sed -i /center/s/^\( leftsquarebrc ^# rightsquarebrc \)/#\1/ file.txt
sed -i /dog/i\ Linux Scripting animals
sed -i /e2/ s/off/on/ ~/Documents/Prueba
sed -i /extern "C" void myPrintf(char \*fmt, \.\.\.);/d *.c
sed -i /flag/,/endflag/d *
sed -i /foo/d phonebook
sed -i /groupname/ a'newuser' \ \ /path/to/file
sed -i /kernel/{/audit=1/!s/$/ audit=1/} /etc/grub.conf
sed -i /listen_addresses/ s/^(.*)(')/1, 192.0.0.02/ testfile
sed -i /no_outline=/d l10n/*/viewer.properties
sed -i /openDirFile/d *.conf
sed -i /pattern to match/d ./infile
sed -i /response = HttpResponse()/,/return response/s/.*/#&/ file.txt
sed -i /software/ s/setting: leftsquarebrc ^," rightsquarebrc *(" leftsquarebrc ^" rightsquarebrc *")? leftsquarebrc ^," rightsquarebrc *,/setting:,/ $fileName
sed -i /something/s/^/prefix/ toprefix.log
sed -i /something/s/^/prefix\t/ toprefix.log
sed -i /string leftsquarebrc 12 rightsquarebrc /d file.txt
sed -i /string1\|string2/d file.txt
sed -i /tester/!s@^@/my/path/tester@ file
sed -i /two/{s/two/TWO/g; w /dev/stdout} test.txt
sed -i /unix/s/crap/linux/ test.csv
sed -i /upload_max_filesize/s/= *10M/=150M/ php.ini
sed -i /url="jdbc:oracle:thin:@localhost:1521:xe"/c\url="jdbc:oracle:thin:@localhost:1521:'${ORACLE_SID_VALUE}'" /home/server/tomcat/conf/Catalina/localhost/server.xml
sed -i /user@/s|^|//| file
sed -i /var $useDbConfig = 'default_dev';/d ./*
sed -i /vidintex.com\/includes\/class.pop.php/d files*
sed -i /{.*$word.*}/d ./file.txt
sed -i /{/,/}/{s/\s*//g} screen.css
sed -i 0,/ leftanglebrc p/ s_^_$thestringn&_ file
sed -i 0,/^$a/s//$b/ ./file.txt
sed -i 0,/^PATTERN/ s/^PATTERN=.*$/PATTERN=XY/ test.txt
sed -i 0,/^\(PATTERN=\).*/s//\1XY/ test.txt
sed -i 0,/a/s//e/ example
sed -i 0,/dev/ s/dev/stage/ config.inc.php
sed -i 0,/foo/s//foo1/ file
sed -i 1 s/^.*$/NEW FIRST LINE/ yourfile
sed -i 1 { h; s/ leftsquarebrc ^\t rightsquarebrc //g; s/^/ID/; p; g; } *.tsv
sed -i 1,100{d;q} test.txt
sed -i 1,3s/^/#/ file
sed -i 10,20d; inputFile.txt
sed -i 10s/ .*// input-file
sed -i 10s@.*@$time@ test.php
sed -i 11s/} leftsquarebrc   rightsquarebrc *$/ip_address}/ named.conf
sed -i 1d;$d ./files/to/edit/*.xml
sed -i 1i \here comes header files
sed -i 1iid1,id2,id3,id4 file.csv
sed -i 1s,.*,${new_line//\\/\\\\}, $f
sed -i 1s/.*/changed line/ *.php
sed -i 1s/^/ leftanglebrc added text rightanglebrc  / file
sed -i 1s/^/`head -n 1 foo.csv`n/ foo0*.csv head -n 1 foo.csv
sed -i 1s/^/changed line\n/ *.php
sed -i 1s/^/x\ty\tz\n/ INPUTFILE.txt
sed -i 1{h;s/\(.\).*/\1/;s/\//a$(PREFIX)/;s/.//;x};H;g;s/\n.*//;x;s/\n// $(FILE) FILE
sed -i 2001891N;s/\n// filename
sed -i 20s/value = 200/value = $VAR/ file.txt
sed -i 2d downloads.txt
sed -i 2d;5d;8d file
sed -i 2i testing file
sed -i 2i/* Copyright */ $file
sed -i 2s/^/if ($_SERVER leftsquarebrc "REQUEST_URI" rightsquarebrc  == '/site/template.php') {$name=mysql_result($result,$i+2,"Name");$auth=mysql_result($result,$i+2,"Author");$date=mysql_result($result,$i+2,"Date");body=mysql_result($result,$i+2,"Content");}\n/ ../site/written.php
sed -i 3,10d;13,20d;23,30d;33,40d file
sed -i 3d Glo*
sed -i 3s/= .*$/= new_value/ installation.sh
sed -i 3s/POP3_SERVER_NAME = .*/POP3_SERVER_NAME = new_value/ installation.sh
sed -i 5000d; inputFile.txt
sed -i 5d file.txt
sed -i 7,9d;$d file
sed -i :a ; $! { N ; ba } ; $s/\( leftanglebrc span\( \|\n\|\t\)\+class="fxlbc-t1-x-x-172" rightanglebrc  leftsquarebrc ^4 rightsquarebrc \+\)\( leftanglebrc span\( \|\n\|\t\)\+class="fxlbc-t1-x-x-248" rightanglebrc \)/\3/g test.html
sed -i :a N; s/\n/~~/; $s/"~~"/"\n"/g; ba file
sed -i :a;$!N;/^ leftanglebrc IfModule mime_module rightanglebrc .* leftanglebrc \/IfModule rightanglebrc /{s/# *\(AddHandler application\/x-httpd-php \.php\)/\1/;/AddHandler application\/x-httpd-php \.php/!s/.*\n/&\n    AddHandler application\/x-httpd-php .php\n/;p;d};/^ leftanglebrc IfModule mime_module rightanglebrc /ba;P;D input.conf
sed -i :a;N;$!ba;s/AllowOverride None/AllowOverride All/2 /etc/apache2/sites-available/default
sed -i :a;N;$!ba;s/\n //g {} + grep -l 672.15687489
sed -i :a;N;$!ba;s|\n|./|g $file
sed -i :r s:\(.*\)/ leftsquarebrc * rightsquarebrc \(.*\) leftsquarebrc * rightsquarebrc /\(.*\):\1\3 //\2:;tr;s://\(.*\)//\(.*\)://\2\1:;tr FILE
sed -i G $input_file
sed -i Ns/.*/replacement-line/ file.txt
sed -i \|\ leftsquarebrc exec leftsquarebrc  rightsquarebrc  rightsquarebrc \s leftsquarebrc ( rightsquarebrc .* leftsquarebrc ) rightsquarebrc \s leftsquarebrc { rightsquarebrc /usr/lib/xscreensaver/.*\s-root leftsquarebrc } rightsquarebrc |d ~/.fluxbox/menu sed -i \|\ leftsquarebrc exec leftsquarebrc  rightsquarebrc  rightsquarebrc \s leftsquarebrc ( rightsquarebrc .* leftsquarebrc ) rightsquarebrc \s leftsquarebrc { rightsquarebrc \b\(xscreensaver\).* leftsquarebrc } rightsquarebrc |d ~/.fluxbox/menu
sed -i bak -e s|PATHTOEXPORT|/Dev_Content/AIX/Apache| file.txt
sed -i i \ttttime.sleep(0.1)  tmp.tmp
sed -i s!# *Include \(" leftsquarebrc ^" rightsquarebrc *"\)!Include \1! input.file
sed -i s!$!,"123456","789101112","0001",'"$THEDATE"',"DDX"! /tmp/tmp02.csv
sed -i s!/model/login/!$base_url&!g foo.php
sed -i s!/var/run/php5-fpm.sock!127.0.0.1:9000!g /etc/php5/fpm/pool.d/www.conf
sed -i s!^projdir .*$!projdir '$projdir'! .le/.config
sed -i s!http://www\.domain\.org/!/!g checkout_*.php
sed -i s# leftanglebrc a href="http://affiliates.eautorepair.net/z/15/CD65/&dp=84" rightanglebrc  leftanglebrc img src="http://affiliates.eautorepair.net/42/65/15/&dp=84" alt="Do it Yourself Automobile Repair Information" border="0" rightanglebrc  leftanglebrc /a rightanglebrc ##g *
sed -i s# leftanglebrc parameter name="jersey.test.host" value=".*" / rightanglebrc # leftanglebrc parameter name="jersey.test.host" value="abc" / rightanglebrc # C:file.xml
sed -i s#$1#$2#g /home/dr/*.txt
sed -i s#$SRC#$DEST#g path
sed -i s#CC -shared#& ${COMPATFLAG}#g libtool
sed -i s#Title 1 / Subtitle 2 / Subtitle 3#Title 1 / Subtitle 3#g file*.php
sed -i s#^\(cent/ral\.data/base\s*=\s*\).*$#\1SQL/TEST# file.cfg
sed -i s#^variable = .*$#variable = http://myaddress#
sed -i s#export KEY_CONFIG=`$EASY_RSA/whichopensslcnf $EASY_RSA`#export KEY_CONFIG=/etc/openvpn/easy-rsa/2.0/openssl-1.0.0.cnf#g /etc/openvpn/easy-rsa/2.0/vars
sed -i s#export PATH="#&/home/'$(whoami)'/bin:~/.local/bin:# ~/.zshrc
sed -i s#export PATH="#&~/bin:~/.local/bin:# ~/.zshrc
sed -i s#expr1#expr2#
sed -i s#location_apache#$CUSTOM_INSTALL_HOME#g $apache_boing
sed -i s#{test1}#test2# /example/myfile.txt
sed -i s% leftanglebrc iframe leftsquarebrc ^ rightanglebrc  rightsquarebrc +style="visibility: hidden" rightanglebrc  leftanglebrc /iframe rightanglebrc %%g file
sed -i s%$Var1%$Var2%g $f
sed -i s%\$app\ leftsquarebrc \"bundle.root\"\ rightsquarebrc  = \"\/var\/www\/\"\;%\$app\ leftsquarebrc \"bundle.root\" rightsquarebrc  = \"'$REP'\"\;% /home/martialp/Documents/default.php
sed -i s+//+///+g *.txt
sed -i s,"$File"|"$MinFile? leftsquarebrc 0-9 rightsquarebrc {14}","$MinFile?$datestr",g index.html
sed -i s,"var/www/web*/html","home/web*/public_html",g
sed -i s,^$Path,$NewCommand, /root/etc/rc.d/99_start_app.sh
sed -i s,^$Path,$NewCommand, /root/etc/rc.d/99_start_app.sh
sed -i s,^'"$Path"','"$NewCommand"', /root/etc/rc.d/99_start_app.sh
sed -i s,default_password_crypted: " leftsquarebrc ^" rightsquarebrc *",default_password_crypted: "\$1\$mF86,UHC\$WvcIcXred6crBz2onWxyac.", input.txt
sed -i s,file=?,file=$FILEPATH,g
sed -i s,var/www/web\( leftsquarebrc ^/ rightsquarebrc *\)/html,home/web\1/public_html,g
sed -i s/ $#.*//g testfile.txt
sed -i s/ *$// file
sed -i s/ /\n/g *
sed -i s/ leftanglebrc /body rightanglebrc / leftanglebrc ?php include_once(google_analytics.php); ? rightanglebrc n leftanglebrc /body rightanglebrc / *.htm
sed -i s/ leftanglebrc \/li rightanglebrc / leftanglebrc \/li rightanglebrc  \n/g report.txt
sed -i s/ leftanglebrc cto/n leftanglebrc cto/g;s/ leftanglebrc /cto rightanglebrc / leftanglebrc /cto rightanglebrc n/g ${FILE}
sed -i s/ leftanglebrc div id="$1" rightanglebrc  leftanglebrc p rightanglebrc *.* leftanglebrc / leftanglebrc div id="$1" rightanglebrc  leftanglebrc p rightanglebrc $2 leftanglebrc / /var/www/html/alarm.html
sed -i s/ leftanglebrc host rightanglebrc  leftanglebrc /host rightanglebrc / leftanglebrc host rightanglebrc my_db leftanglebrc /host rightanglebrc / foo.txt
sed -i s/ leftanglebrc script rightanglebrc .* leftanglebrc \/script rightanglebrc // fileName
sed -i s/ leftanglebrc script rightanglebrc try.* leftanglebrc \/script rightanglebrc // fileName
sed -i s/ leftsquarebrc :- rightsquarebrc / /g file
sed -i s/ leftsquarebrc ^1-5 rightsquarebrc //g file
sed -i s/ rightanglebrc 12\.00 leftanglebrc / rightanglebrc 24.00 leftanglebrc /g file.xml
sed -i s/ rightanglebrc foo leftanglebrc / rightanglebrc bar leftanglebrc /g file
sed -i s/"index\.php?page=\( leftsquarebrc ^" rightsquarebrc \+\)"/"\1\.html"/g $f
sed -i s/"index\.php?page=\(.*\)"/"\1\.html"/g $f
sed -i s/#!\/bin\/bash/#!insert escaped ksh path here/ *.sh
sed -i s/#\( leftsquarebrc 0-9 rightsquarebrc \)/\1/;t;s/^\( leftsquarebrc 0-9 rightsquarebrc \)/#\1/ Crontab.txt
sed -i s/#define 1/#define 1 "${MODEL_NAME}"/g 1.txt
sed -i s/$(echo "some pattern")/replacement/g file.txt echo some pattern
sed -i s/$/ foo/ r.txt
sed -i s/$/ leftanglebrc br rightanglebrc / mytext.txt
sed -i s/$Customer:$HDB: leftsquarebrc 0-9 rightsquarebrc */$Customer:$HDB:$Price2/g CustomerDB.txt
sed -i s/$SRC/$DST/g test.txt
sed -i s/$STR1/$STR2/g /misc/home3/abc/$FILE1
sed -i s/$VAR some.file/"$VAR" some.file/g path/to/file
sed -i s/$_OLD/$_NEW/g /etc/php.d/newrelic.ini
sed -i s/$cfg leftsquarebrc 'Servers' rightsquarebrc  leftsquarebrc $i rightsquarebrc  leftsquarebrc 'password' rightsquarebrc  = '';/$cfg leftsquarebrc 'Servers' rightsquarebrc  leftsquarebrc $i rightsquarebrc  leftsquarebrc 'password' rightsquarebrc  = '$rootpassword';/g file
sed -i s/$i/EE${j}EE/g ./file
sed -i s/$item/$x/g /home/delkav/info-sitioweb/html/productos/autos/nuevo-focus.html
sed -i s/$name/$category/g ./animals.txt
sed -i s/$ppass =".*"/$ppass ="$PORTPASS"/ includes/config.php
sed -i s/$rcmail_config leftsquarebrc 'default_host' rightsquarebrc  =.*/$rcmail_config leftsquarebrc 'default_host' rightsquarebrc  = 'abcdef';/ /your.file
sed -i s/$username = ''/$username = '$myUsername'/ file
sed -i s/${ODA}/${YMD}/ ${HOMEDIR}/${PATH1}/nws_${VAR}_conus_daily_${YMD}.ctl
sed -i s/&/%20%26%20/g inputfile
sed -i s/'"$B_PRODUCT"'Worker.log/'"$1.log"'/g log4j.properties
sed -i s/'"'"'ADMIN_USERNAME'"'"','"'"'memcache'"'"'/'"'"'ADMIN_USERNAME'"'"','"'"'u'"'"'/g /var/www/html/memcache.php
sed -i s/'$SRC'/'$DST'/g test.txt
sed -i s/'$pattern'/'$category'/g ./animals.txt
sed -i s/'ADMIN_USERNAME','memcache'/'ADMIN_USERNAME','u'/g /var/www/html/memcache.php
sed -i s/'\''ADMIN_USERNAME\'',\''memcache\''/\''ADMIN_USERNAME\'',\''u\''/g /var/www/html/memcache.php
sed -i s/($rcmail_config leftsquarebrc 'default_host' rightsquarebrc  = )'';/1'localhost';/g file
sed -i s/(${updatetitle}:${updateauthor}:)( leftsquarebrc ^: rightsquarebrc *)(.*)/1${newPrice}3/ file
sed -i s/(SHA1(disk.iso)=).*/1 $HASH/ manifest
sed -i s/(WORD1).*(WORD3)/\1 foo \2/g file.txt
sed -i s/(ec2-user@)(.*)(:repo.git)/\1${foo} \3/ /var/www/.git/config
sed -i s/(ec2-user@)(.*)(:repo.git)/\1${foo}\3/ /var/www/.git/config
sed -i s/).*/)/ file.txt
sed -i s/- rightanglebrc /./g licensewizard.cpp
sed -i s/-\? leftsquarebrc 0-9 rightsquarebrc \+\^-\? leftsquarebrc 0-9 rightsquarebrc \+/$&$/g tmp
sed -i s/.*/\L&/ *.txt
sed -i s/.../.../ a b c
sed -i s/.../.../ a b c
sed -i s/10\.0\.0\.0\.3/10.0.0.0.4/gw changes
sed -i s/192.168. leftsquarebrc 0-9 rightsquarebrc */192.168.$NEWIP/g filename
sed -i s/8005/8006 server.xml
sed -i s/:/ / input.txt
sed -i s/;session.save_path.*/session.save_path = unix:/tmp/memcached.sock/ /etc/php5/fpm/php.ini
sed -i s/AA BB/CC DD/g file
sed -i s/ABC\(.+\)$/123\1/g myFile.txt
sed -i s/Andrew/James/g /home/oleksandr/names.txt
sed -i s/Apache 2 Test Page/$HOSTNAME Test Page/g /var/www/error/noindex.html
sed -i s/BOO leftsquarebrc ^\\ rightsquarebrc */BOOcusomdata/g file.txt.
sed -i s/BOO leftsquarebrc ^\\ rightsquarebrc *\\/cusomdata/g file.txt.
sed -i s/Cpanel::Easy::PHP5::Curl: 0/Cpanel::Easy::PHP5::Curl: 1/ myfile.txt
sed -i s/DB_HOST/my_db/
sed -i s/DEFAULT_DEV_PATH/DEV_PATH/g *
sed -i s/EFF= leftsquarebrc ^; rightsquarebrc *;//g filename
sed -i s/File//g;s/MINvac.pdb//g /home/kanika/standard_minimizer_prosee/r
sed -i s/First \(.*\)/First "New string to be added"/ testFile
sed -i s/GROUP\ (\/lib\/libc.so.0\ \/usr\/lib\/uclibc_nonshared.a\ AS_NEEDED\ (\/lib\/ld-uClibc.so.0\ )/GROUP\ (\ ..\/..\/lib\/libc.so.0\ ..\/usr\/lib\/uclibc_nonshared.a\ AS_NEEDED\ (..\/..\/lib\/ld-uClibc.so.0\ )\ )/g libc.so
sed -i s/IPADDR=/IPADDR=`cat ip.txt`/g File2.txt cat ip.txt
sed -i s/Install-Size: .*/Install-Size: $(du -s FOLDER | cut -f1)/ FOLDER/DEBIAN/control du -s FOLDER cut -f 1
sed -i s/MyCar on/MyCar off/ path/to/file
sed -i s/POP3_SERVER_NAME = .*/POP3_SERVER_NAME = new_value/ installation.sh
sed -i s/PS1='\\u@ leftsquarebrc ^ rightsquarebrc  rightsquarebrc *:/PS1='\\u@\\H:/g test
sed -i s/REPLACEHERE/$(cat fileB)/g fileA cat fileB
sed -i s/UNIX/linux/ sara
sed -i s/USER_NAME/userName/g
sed -i s/Version 3.0/Version $BUILD_DISPLAY_NAME/g /var/lib/jenkins/jobs/AndroidTest/workspace/xxx/res/values/strings.xml
sed -i s/WORD1.*WORD3/WORD1 foo WORD3/g file.txt
sed -i s/\ leftanglebrc example(/example2(/ *.sh
sed -i s/\ leftanglebrc forms leftsquarebrc  -_ rightsquarebrc data\ rightanglebrc /form data enhancements/g /path/to/files*
sed -i s/\ leftanglebrc forms\( leftsquarebrc  -_ rightsquarebrc \)data\ rightanglebrc /form\1data\1enhancements/ /path/to/files*
sed -i s/\ leftsquarebrc  leftanglebrc / leftsquarebrc \&lt;/g *.xml
sed -i s/\ leftsquarebrc getpwnam_ext\ rightsquarebrc //g filename
sed -i s/\ leftsquarebrc self\.lang getAppLanguageString:@\(" leftsquarebrc ^" rightsquarebrc *"\)\ rightsquarebrc /LocalizedString(@\1, nil)/ somefile
sed -i s/\$app\ leftsquarebrc \"gentle.root\"\ rightsquarebrc  = \"\/home\/doc\/\"\;/\$app\ leftsquarebrc \"gentle.root\" rightsquarebrc  = \"\/home\/exemple\/\"\;/ /home/martialp/Documents/default.php
sed -i s/\(.*,\).*/\1e/ file
sed -i s/\(.\{1\}\)//;s/    / /g file
sed -i s/\(^ leftsquarebrc ^# rightsquarebrc .*\)rs leftsquarebrc 0-9 rightsquarebrc \+\( .*\)/\1rs.\2/ test.vcf
sed -i s/\(font\-family:\)\{1\}\( leftsquarebrc "A-Za-z,  rightsquarebrc \+\)\{1\}\(;\)\{1\}/font-family: Verdana;/
sed -i s/\(key="\(liferay\.db\.host\|idm\.backend\.db\.host\|idm-frontend\.portal-tarent\.tarent-frontend-host\|openid-idp\.hostname\)" value=\)".*"/\1"'"$hostname"'"/ $installer_directory/silent.xml
sed -i s/\(line you want\)/Prefix \1/g origfile
sed -i s/\(require_once(.\)\(config\.php.);\)/\1..\/new\/\2/ db*.php
sed -i s/\(revision="........\) leftsquarebrc ^" rightsquarebrc *"/\1"/ file
sed -i s/\.us\./\./ file.txt
sed -i s/\\n/\n/g input_filename
sed -i s/\\right\( leftsquarebrc ^ rightsquarebrc )} rightanglebrc |a rightsquarebrc \)/\\rightarrow\1/g
sed -i s/\\|/ |/g file
sed -i s/\^/\ leftsquarebrc /g myfile
sed -i s/\^A/;/g file
sed -i s/\^^/^/g tmp
sed -i s/\r$// file
sed -i s/\r// geturl.sh
sed -i s/\r//g count.sh
sed -i s/\r//g freecs.sh
sed -i s/\s*aaa\s*=\s* leftsquarebrc 0-9 rightsquarebrc */bbb=5/ input_file
sed -i s/\s\+/,/;s/\s\+/,/;s/\s\+/,/; file
sed -i s/\t/    /g $absoluteFilePath
sed -i s/^ leftsquarebrc 0-9 rightsquarebrc \s+b.*//g xxx_file
sed -i s/^# // inputFile
sed -i s/^#\{0,1\}\(PermitRootLogin\|PermitEmptyPasswords\|PasswordAuthentication\|X11Forwarding\) yes/\1 no/ /etc/ssh/sshd_config
sed -i s/^#box123 { color: #000000; }/^#box123 { color: #0000ff; }/g cssfile
sed -i s/^#box123\(.*\)#000000/^#box123\1#0000ff/g cssfile
sed -i s/^$1= leftsquarebrc ^  rightsquarebrc */$1=$2/ $3
sed -i s/^($title:$name:.*):.*$/1:$newValue/ test.txt
sed -i s/^(1$CENTRAL_DB_NAMEs*=s*).*$/1$CENTRAL_DB_VALUE/ /home/testing.txt
sed -i s/^(s*String1=).*/1'New Value'/ file
sed -i s/^.\(.*\).$/\1/ s_res.temp
sed -i s/^/\*./g;s/ / *./g testfile
sed -i s/^/rm /g filelist
sed -i s/^28 /METAL/ file
sed -i s/^COMMIT_SHA = .*$/COMMIT_SHA = "$COMMIT_SHA"/ $PROJECT_DIR/settings.py
sed -i s/^PS1.*$/$(printf "%q" "PS1='\ leftsquarebrc \e leftsquarebrc 1;32m\ rightsquarebrc  leftsquarebrc \u@\h \W rightsquarebrc $\ leftsquarebrc \e leftsquarebrc 0m\ rightsquarebrc '")/g /etc/skel/.bashrc printf %q PS1=' leftsquarebrc e leftsquarebrc 1;32m rightsquarebrc  leftsquarebrc u@h W rightsquarebrc $ leftsquarebrc e leftsquarebrc 0m rightsquarebrc '
sed -i s/^ServerAdmin .*$/ServerAdmin secret@secret.com/ in-filename
sed -i s/^\( leftsquarebrc ^: rightsquarebrc *\):\( leftsquarebrc ^: rightsquarebrc *\):/\1:TEST:/
sed -i s/^\(central\.database\s*=\s*\).*$/\1SQLTEST/ file.cfg
sed -i s/^\(computer_id = \).*/\1${server_ref}/ slapos.cfg
sed -i s/^aaa = (aa,bb,cc)$/aaa = (dd,ee,ff)/ file
sed -i s/^wpa-ssid.*$/wpa-ssid "$ssid"/ /etc/network/interfaces
sed -i s/_user= * leftsquarebrc ^  rightsquarebrc */_user=ULTRAMONSTER/ script
sed -i s/a = ".*"/a = "banana"/ filename
sed -i s/a = "apple"/a = "banana"/ filename
sed -i s/a/ /g test.txt
sed -i s/abc/abcd/g file.txt
sed -i s/bad/good/g file*pattern
sed -i s/database_name_here/$MyVar/g config.php
sed -i s/databases\  leftsquarebrc 0-9 rightsquarebrc */databases\ 32/ redis.conf
sed -i s/def version = ".*"/def version = "'$version'"/ $file
sed -i s/default_password_crypted: " leftsquarebrc ^" rightsquarebrc *"/default_password_crypted: "\$1\$mF86\/UHC\$WvcIcXred6crBz2onWxyac."/ input.txt
sed -i s/export KEY_CONFIG=`$EASY_RSA\/whichopensslcnf $EASY_RSA`/export KEY_CONFIG=\/etc\/openvpn\/easy-rsa\/2.0\/openssl-1.0.0.cnf/g /etc/openvpn/easy-rsa/2.0/vars
sed -i s/f( leftsquarebrc ^) rightsquarebrc *)/yo/ t
sed -i s/file=?/file=$FILEPATH/g your_file
sed -i s/font*=.*/font=TT DejaVu Sans Mono/g $fname
sed -i s/foo/bar/ file
sed -i s/foo/bar/g `grep -l -R --exclude-dir='*/.svn' 'foo' .` grep -l -R --exclude-dir */.svn foo .
sed -i s/gout:/xtl/; s/gout:/dat/ runner2
sed -i s/old leftsquarebrc 0-9 rightsquarebrc \{1,\}(/old1(/ file.txt
sed -i s/old-word/$d/g *.txt
sed -i s/old-word/new-word/g *.txt
sed -i s/old/new/g $i
sed -i s/old_link/new_link/g file...
sed -i s/password=" leftsquarebrc ^" rightsquarebrc +"/password="XXXXXXXX"/g server.xml
sed -i s/password=" leftsquarebrc a-zA-Z0-9 rightsquarebrc \+"/password="foo"/g server.xml
sed -i s/qsubFile=" leftsquarebrc ^" rightsquarebrc *"/qsubFile="'"$qsubFile"'"/g write.sh
sed -i s/qsubFile=" leftsquarebrc ^" rightsquarebrc *"/qsubFile="submitJob.sh"/g write.sh
sed -i s/qsubFile="someOtherFile.sh"/qsubFile="submitJob.sh"/g write.sh
sed -i s/r//g script.sh
sed -i s/range=// file
sed -i s/rpc_address: localhost/rpc_address: 0.0.0.0/g /etc/cassandra/conf/cassandra.yaml
sed -i s/string-.*/string-0/g file.txt
sed -i s/string-./string-0/g file.txt
sed -i s/test:(.*$)/\1/
sed -i s/text/other text/g filename
sed -i s/val1/hello/g file
sed -i s/version: .*/version: 1.2.3/ file1 file2 file3 ...
sed -i s/wiki_host/${host_name}/g /root/bin/sync
sed -i s/www-test/www/g /home/websync/tmp/sitio-oficial/sitios/wp-config.php
sed -i s/{{date}}/`date`/g file.xml date
sed -i s/|/\\textbar/g
sed -i s/|/\textbar/g
sed -i s/},{/}{/g blobsDone.txt
sed -i s/}{/},{/g blobsDone.txt
sed -i s:$: -y: YOURFILE
sed -i s:$dbserver='':$dbserver='10.0.0.2': t.conf
sed -i s:\(.*\)/ leftsquarebrc * rightsquarebrc \(.*\) leftsquarebrc * rightsquarebrc /:\1 // \2: FILE
sed -i s:envid="":envid="QA":g *.xml
sed -i s?HOSTNAME?${PSM_SERVER_ADDRESS}?g $fl
sed -i s@ leftanglebrc number rightanglebrc  leftsquarebrc 0-9 rightsquarebrc * leftanglebrc /number rightanglebrc @replace@g xml.log
sed -i s@;session.save_path.*@session.save_path = unix:/tmp/memcached.sock@ /etc/php5/fpm/php.ini
sed -i s@^$file_name$@%dir $file_name@ $TOPDIR/list_files
sed -i s@_site_url: http://statamic.com/_site_url: $SITE_URL@g _config/settings.yaml
sed -i s@var BOSH_URL.*@$NewBoshURL@ index.html
sed -i s^GCC -shared^G& ${COMPATFLAG}^Gg libtool
sed -i s_DocumentRoot /var/www/html_DocumentRoot /usr/share/rt3/html/_ /etc/httpd/conf/httpd.conf
sed -i sed s#href="\(.*\)\.do"#href=" leftanglebrc s:url action='"'\1'"'/ rightanglebrc "#g ./src/main/webapp/include/stoBox2.jsp
sed -i sed-command
sed -i some code file
sed -i s| leftanglebrc Connector URIEncoding="UTF-8" port="8009" protocol="AJP/1.3" redirectPort="8443" / rightanglebrc | leftanglebrc Connector URIEncoding="UTF-8" port="8009" protocol="AJP/1.3" redirectPort="8443"     maxThreads="300" minSpareThreads="25" maxSpareThreads="75" acceptCount="100" enableLookups="false"  connectionTimeout="60000" / rightanglebrc |g file
sed -i s| leftanglebrc div id="wrapper" rightanglebrc | leftanglebrc div id="wrapper" rightanglebrc $MYTEXT| org.html
sed -i s|$from_delim|$to_delim|g $i
sed -i s|$from_delim|$to_delim|g ${file_mask}*
sed -i s|$old|$new| script.sh
sed -i s|${string}|/tmp/myfilepath|g myFile.txt
sed -i s|( leftanglebrc filename rightanglebrc ) leftsquarebrc ^ leftanglebrc  rightanglebrc  rightsquarebrc *( leftanglebrc /filename rightanglebrc )|1${value}2|g abc.xml
sed -i s|(kernel.shmall *= *).*|14194304| /etc/sysctl.conf
sed -i s|-l leftsquarebrc ^  rightsquarebrc */\( leftsquarebrc ^/  rightsquarebrc *\)|-l\1|g Makefile
sed -i s|/a/b/c|/r/s/t|g *.txt
sed -i s|;te.xt =|textnum=$var| file
sed -i s|LINE1|&n$WORD| $SQUID
sed -i s|\r|| packages.txt
sed -i s|\r|| yourscript.sh
sed -i s|\x1a||g your_file.txt
sed -i s|^datadir=.*$|datadir=/mysql`date '+%b%d'`| /etc/my.cnf date +%b%d
sed -i s|conf.d/*.conf|conf.d/vhosts/*.conf|g /path/to/file
sed -i s|search|replace|g file
sed -i s~\/var\/lib\/cassandra\/data~\/var\/lib\/storage\/cassandra\/data~g /etc/cassandra/conf/cassandra.yaml
sed -i s~href="/foa~href="www.url/foa~g file.html
sed -i s~var\/lib\/cassandra\/data~var\/lib\/storage\/cassandra\/data~g /etc/cassandra/conf/cassandra.yaml
sed -i y/$SRC/$DST/ test.txt
sed -i your_command *.c
sed -i |$sudoer|d /home/bdugan/t.txt
sed -n  file
sed -n  leftanglebrc A rightanglebrc , leftanglebrc B rightanglebrc p input.txt
sed -n  p; s/^N:/FN:/p original.txt
sed -n $!p abc.txt
sed -n $(grep -n "Start" file | cut -d: -f 1 | head -n 1),$(grep -n "End" file | cut -d: -f 1 | head -n 1)'p' file grep -n Start file cut -d -: -f 1 head -n 1 grep -n End file cut -d -: -f 1 head -n 1
sed -n $1{p;q} $f
sed -n $a'p;'$b'p;'$c'p'
sed -n $nextIP,/$nextIP ./ips.txt
sed -n $nextIP,/address/p ./ips.txt
sed -n $s/^\( leftsquarebrc ^  rightsquarebrc *\).*$/\1/p file
sed -n ${LINESTART},${LINEEND}p ${myFile}
sed -n ${LINE_NUM},/regex/p $FROM_FILE
sed -n ${N}p
sed -n ${a}p;${b}p;${c}p
sed -n ${count}p hearders.txt
sed -n ${lineno}p $file
sed -n ${line},$ p yourfile grep xyz
sed -n ${r} {s/^/,,/;s/ //g;;s/(, leftsquarebrc ^, rightsquarebrc *){${c}}, *( leftsquarebrc ^, rightsquarebrc *).*/ leftanglebrc Cell rightanglebrc  leftanglebrc Data rightanglebrc 2 leftanglebrc /Data rightanglebrc  leftanglebrc /Cell rightanglebrc /p;q;} ${IN_FILE}
sed -n -E -e /match/ { -e s/foo/bar/ -e s/baz/qux/ -e p -e }
sed -n -E / leftanglebrc script type="text\/javascript"/ s%^.*src="\{\$baseUrl\}/( leftsquarebrc ^" rightsquarebrc +)".*$%\1%p templates/common/minifiedScripts.tpl
sed -n -E /^\s*\S+\s*$/p
sed -n -E s/( leftsquarebrc a-z rightsquarebrc +)/#/pg file
sed -n -E s/.*upload_url: "( leftsquarebrc ^" rightsquarebrc +).*/\1/p filename
sed -n -e $(sed -e 's/$/p;/' B) A sed -e s/$/p;/ B
sed -n -e $ff p -e $ff q p_walls.raw
sed -n -e ${i}p $file
sed -n -e ${i}p files.txt
sed -n -e ${i}{p;q;} files.txt
sed -n -e / leftsquarebrc Ww rightsquarebrc  leftsquarebrc Ii rightsquarebrc  leftsquarebrc Dd rightsquarebrc  leftsquarebrc Gg rightsquarebrc  leftsquarebrc Ee rightsquarebrc  leftsquarebrc Tt rightsquarebrc /,/^ leftanglebrc \// {//p} file.txt awk NR%2==1 { sub(/^ leftsquarebrc  \t rightsquarebrc +/, ""); search = $0 } NR%2==0 { end = $0; sub(/^ leftanglebrc \//, " leftanglebrc "); printf "%s%s%s\n", $0, search, end }
sed -n -e /"/!p theinput
sed -n -e /"department"/{s/^.*"department":"\( leftsquarebrc ^" rightsquarebrc *\).*/\1/;p;}
sed -n -e /$engineinfo = engine_getinfo();/a\'$'\n''$engineinfo leftsquarebrc 'engine' rightsquarebrc ="asterisk";\'$'\n''$engineinfo leftsquarebrc 'version' rightsquarebrc ="1.6.2.11";'$'\n'';p /var/lib/asterisk/bin/retrieve_conf
sed -n -e /(/,/)/p filename sed 1s/ leftsquarebrc ^( rightsquarebrc *(//;$s/) leftsquarebrc ^) rightsquarebrc *$//
sed -n -e /--/s/ leftsquarebrc ^- rightsquarebrc *$//p input
sed -n -e /--/{s/ leftsquarebrc ^- rightsquarebrc *$//p;q;} input
sed -n -e /MachineEntry uuid="{'$UUID'}"/s|.*src="Machines.*/\(.*\).xml".*|\1|p inputfile.xml
sed -n -e /Next leftanglebrc \/a rightanglebrc  leftanglebrc \/p rightanglebrc /,/Next leftanglebrc \/a rightanglebrc  leftanglebrc \/p rightanglebrc / p file.txt
sed -n -e /Official DR value:/{s///p;q;} $i
sed -n -e /Product Name/{s/.*: *//p}
sed -n -e /Product Name/{s/.*://p}
sed -n -e /Start/,/End/w outputfile -e /End/q file
sed -n -e /TERMINATE/,$p
sed -n -e /\ leftsquarebrc alias\ rightsquarebrc /,/\ leftsquarebrc .*\ rightsquarebrc /s/:/:/p
sed -n -e /^ leftsquarebrc ^( rightsquarebrc *( leftsquarebrc ^) rightsquarebrc *$/N -e s/^ leftsquarebrc ^( rightsquarebrc *(\( leftsquarebrc ^) rightsquarebrc *\)).*/\1/p data
sed -n -e /^ leftsquarebrc ^( rightsquarebrc *(\( leftsquarebrc ^) rightsquarebrc *\)).*/s//\1/p
sed -n -e /^$/ { g; p; b }; h; $ { g; p } infile
sed -n -e /^====/,/^====/ { /;/ { s/;.*$// ; H } }; $ { g ; s/\n// ; s/\n/, /g ; p } stocks
sed -n -e /^E001:/,/^E018:/p data.txt
sed -n -e /^MemTotal/s/^ leftsquarebrc ^0-9 rightsquarebrc *//p /proc/meminfo
sed -n -e /^RIM-COD-/p yourfile.txt
sed -n -e /^rect: leftsquarebrc \t rightsquarebrc */ { s/// ; N ; s/\n leftsquarebrc   rightsquarebrc */ / ; s/ leftsquarebrc  \t rightsquarebrc \+/\n/g ; p } infile
sed -n -e /^section B/,/^)/p
sed -n -e /^section B/,/^section/p
sed -n -e /any2$/ { s/^ leftsquarebrc ^. rightsquarebrc *\.//; s/\..*$//; p } infile
sed -n -e /kerberos/,/^$/{ s/{0}kerberos/kerberos/; /some: junk/,$d; p; }
sed -n -e /name="GUI\/LastVMSelected"/s/.*value="\( leftsquarebrc ^" rightsquarebrc *\)".*/\1/p
sed -n -e /pattern/ p infile
sed -n -e /pattern1/{ -e p -e :a -e N -e /pattern2/!ba -e s/.*\n// -e } -e p inputfile
sed -n -e /patternA/,/patternB/p file.txt
sed -n -e /rootNode/{ p; b }; / leftanglebrc appender /{ h; b }; / leftanglebrc logger /{ h; b }; H; / leftanglebrc \/logger rightanglebrc /{ x; p; b; }; / leftanglebrc \/appender rightanglebrc /{ x; /COM_Find leftsquarebrc . rightsquarebrc log/b; /COM_FIND leftsquarebrc . rightsquarebrc log/b; p } file
sed -n -e /value:ACCOUNT_NO/p logs.txt
sed -n -e /value:ACCOUNT_NO/{N;N;p;} logs.txt
sed -n -e /value:ACCOUNT_NO/{N;N;s/ \n/|/;p;} logs.txt
sed -n -e /value:ACCOUNT_NO/{N;N;s/..\n/|/g;p;} logs.txt
sed -n -e /value:ACCOUNT_NO/{N;N;s/..\n\(.\)/|\1/g;p;}
sed -n -e /value:ACCOUNT_NO/{N;N;s/\n/|/g;p;} logs.txt
sed -n -e /value:ACCOUNT_NO/{p;} logs.txt
sed -n -e 0,/START/d -e /END/,$d -e p file.html
sed -n -e 1,/START/d -e /END/,$d -e p file.html
sed -n -e 10,$ta;/Copyright/d;:a;p $file
sed -n -e 2{p;q}
sed -n -e :1 -e /PinnInstitutionPath/{n;p;b1}
sed -n -e :1;/PinnInstitutionPath/{n;p;b1}
sed -n -e :a -e $s/ leftsquarebrc \n\t rightsquarebrc //g -e N -e ba inputfile echo mv temp inputfile
sed -n -e :a ; $! { N ; ba }; s/\n_/ _/g ; p infile
sed -n -e :begin;/\\$/{N;bbegin};h;s/\\\n//g;/your_pattern/{g;p} your_file
sed -n -e :begin;/\\$/{N;bbegin};s/\\\n//g;/your_pattern/p your_file
sed -n -e H;/CREATE/h;/;/{s/.*//;x;/^CREATE/p;} $SRCFILE
sed -n -e \:Next leftanglebrc /a rightanglebrc  leftanglebrc /p rightanglebrc :,\:Next leftanglebrc /a rightanglebrc  leftanglebrc /p rightanglebrc : p file.txt
sed -n -e s! leftanglebrc /a rightanglebrc !&\n!p sed -n -e s!^.*\( leftanglebrc  leftsquarebrc Aa rightsquarebrc   leftsquarebrc ^ leftanglebrc  rightanglebrc  rightsquarebrc * rightanglebrc .* leftanglebrc / leftsquarebrc Aa rightsquarebrc  rightanglebrc \).*$!\1!p
sed -n -e s!^.*\( leftanglebrc  leftsquarebrc Aa rightsquarebrc   leftsquarebrc ^ leftanglebrc  rightanglebrc  rightsquarebrc * rightanglebrc .* leftanglebrc / leftsquarebrc Aa rightsquarebrc  rightanglebrc \).*$!\1!p
sed -n -e s%.*https://\( leftsquarebrc -.0-9A-Za-z rightsquarebrc \{1,\}\. leftsquarebrc A-Za-z rightsquarebrc \{2,\}\).*%\1%p
sed -n -e s/ leftsquarebrc  =;" rightsquarebrc //g; s/Name//g -e :1 -e /PinnInstitutionPath/{n;p;b1}
sed -n -e s/.*City leftanglebrc \/a rightanglebrc \s leftanglebrc em rightanglebrc (\( leftsquarebrc ^) rightsquarebrc *\)).*/\1/p index.html
sed -n -e s/.*var premium_download_link = '( leftsquarebrc ^' rightsquarebrc *)';.*/1/p
sed -n -e s/\r$// -e s/^instance.dns=//p $1
sed -n -e s/^ leftanglebrc pre rightanglebrc // -e /00000000:/,$p
sed -n -e s/^ leftsquarebrc ^= rightsquarebrc +=//p
sed -n -e s/^.*\( leftsquarebrc 0-9 rightsquarebrc \{4\}\(\- leftsquarebrc 0-9 rightsquarebrc \{2\}\)\{2\} \)/\1/p
sed -n -e s/^.*\(.\)\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\1.*$/\2/p
sed -n -e s/^\(\w\+\)\(\W\+\w\+\)\{3\}$/\1 \1 &/p
sed -n -e s/^myhome=//p
sed -n -f script.sed infile
sed -n -f script.sed infile
sed -n -f sedscript data
sed -n -i /ER GW/ b end; p; d; :end $p; n; b end $file
sed -n -i 0,/version: 1/{p; d}; /version: 1/!p ldap.txt
sed -n -i 1{p;b}; 2{N;N;N;N}; $p; $!{N;s/^/word /;P;D} filename
sed -n -i p; /version: 1/ b nov; d; :nov /version: 1/!p; n; b nov ldap.txt
sed -n -r -e /.+/x -e 2,$H -e ${x;p} nums
sed -n -r -e /.+/{x;H} -e ${x;p}
sed -n -r -e 100,200{s/^(\S+\s+){7}(\S+).*$/\2/;p} file.tsv
sed -n -r -e s/^(\w+)(\W+\w+){3}$/\1 \1 &/p
sed -n -r / leftanglebrc \/?version rightanglebrc /s///gp
sed -n -r /(^\ leftsquarebrc test2\ rightsquarebrc )/,$p test.txt
sed -n -r /-{3,}/h; /Path\s*:/H; /Everyone\s+Allow\s+FullControl/{x;G;p} file
sed -n -r /\b leftsquarebrc 0-9 rightsquarebrc {2}\b/p file
sed -n -r /^ leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc {5,16}$/p words
sed -n -r /^.+:{3}$/p fileA.txt
sed -n -r /^category/H;//,/^done/G;s/\n(\n leftsquarebrc ^\n rightsquarebrc *){3}$//p file
sed -n -r /linux/{p;G;/(.*\n){10}/q;h} file
sed -n -r /pattern/s/(\w+).*/\1/p inputfile
sed -n -r H; ${g; s/( leftsquarebrc ^} rightsquarebrc |\} leftsquarebrc ^% rightsquarebrc )*%\{//; s/\}%( leftsquarebrc ^% rightsquarebrc |% leftsquarebrc ^{ rightsquarebrc )*//; p}
sed -n -r H; ${g; s/^( leftsquarebrc ^} rightsquarebrc |\} leftsquarebrc ^% rightsquarebrc )*%\{//; s/\}%( leftsquarebrc ^% rightsquarebrc |% leftsquarebrc ^{ rightsquarebrc )*$//; s/\}%( leftsquarebrc ^% rightsquarebrc |% leftsquarebrc ^{ rightsquarebrc )*( leftsquarebrc ^} rightsquarebrc |\} leftsquarebrc ^% rightsquarebrc )*%\{/\n/g; p}
sed -n -r H;/PATTERN/,/\}/{s/(\})/\1/;T;x;p};/\{/{x;s/.*\n.*//;x;H} file
sed -n -r s,^// leftsquarebrc ^@/ rightsquarebrc *@( leftsquarebrc ^/ rightsquarebrc *)/.*,\1,p
sed -n -r s/.*MANGO( leftsquarebrc 0-9 rightsquarebrc +).*APPLE.*WHITE.*/\1/p yourfile
sed -n -r s/.*\b(b leftsquarebrc 0-9 rightsquarebrc {3})\b.*/\1/p file
sed -n -r s/.*abc=( leftsquarebrc 0-9 rightsquarebrc )\.( leftsquarebrc 0-9 rightsquarebrc )\.( leftsquarebrc 0-9 rightsquarebrc ).*/\1\2\3/p file
sed -n -r s/.*my_function('( leftsquarebrc ^' rightsquarebrc *)').*/1/p all_the_strings.txt
sed -n -r s/\r?$//; /^( leftsquarebrc 0-9 rightsquarebrc {9}) /{/ ( leftsquarebrc 0-9 rightsquarebrc {5})$/{p;b};h;b};/ ( leftsquarebrc 0-9 rightsquarebrc {5})$/{x;G; s/\n//; p}
sed -n -r s/\s*\ leftsquarebrc ( leftsquarebrc ^\ rightsquarebrc +)\ rightsquarebrc /\1/p
sed -n -r s/^abc=( leftsquarebrc 0-9 rightsquarebrc )\.( leftsquarebrc 0-9 rightsquarebrc )\.( leftsquarebrc 0-9 rightsquarebrc ).*/\1\2\3/p file
sed -n -r s|(http://)?(www.)?( leftsquarebrc ^. rightsquarebrc *).(.*.?)*|3|p
sed -n -r s|http://(www.)?( leftsquarebrc ^. rightsquarebrc *).(.*.?)*|2|p
sed -n -s -i / leftsquarebrc ^ \t rightsquarebrc *  leftsquarebrc ^ \t rightsquarebrc *  leftsquarebrc ^ \t rightsquarebrc *  leftsquarebrc ^ \t rightsquarebrc /p *.txt
sed -n ...
sed -n / $app$/s/^( leftsquarebrc ^  rightsquarebrc *).*/1/p version.lst
sed -n / $app$/s/^( leftsquarebrc ^. rightsquarebrc *).*/1/p version.lst
sed -n / 0$/p data
sed -n / \+$/p file
sed -n / leftanglebrc Hi rightanglebrc /,/ leftanglebrc \/Hi rightanglebrc /p file
sed -n / leftanglebrc Notes \/ rightanglebrc /,/ leftanglebrc \/Icon rightanglebrc / p
sed -n / leftanglebrc Server rightanglebrc /,/ leftanglebrc /Server rightanglebrc /{s/.* rightanglebrc (.*) leftanglebrc .*/1/p} paste -d  
sed -n / leftanglebrc abstract rightanglebrc  leftsquarebrc ^ leftanglebrc  rightsquarebrc *abstract1/p input
sed -n / leftanglebrc car car_id="BMW" year="1999"/,/ leftanglebrc /car rightanglebrc /p input
sed -n / leftanglebrc div class="LoginOuterCssClass" id="ctl07" rightanglebrc /{:a;N;/ leftanglebrc \/div rightanglebrc /!ba;N;s/.*\n//};p file.html
sed -n / leftanglebrc html rightanglebrc /,/ leftanglebrc \/html rightanglebrc /p;/ leftanglebrc \/html rightanglebrc /q file
sed -n / leftanglebrc pre rightanglebrc =/,/=/ { //!p } file.txt
sed -n / leftanglebrc tester rightanglebrc /{n;/ leftanglebrc level1 leftsquarebrc   rightsquarebrc *id="2"/{n;n;N;p}} input
sed -n / leftanglebrc tr rightanglebrc /,/ leftanglebrc \/tr rightanglebrc /p file
sed -n / leftsquarebrc -x rightsquarebrc /p
sed -n / leftsquarebrc \x00\x01\x02 rightsquarebrc /q1;/hebrew/!b;s//\x01/;/DESPiTE/!b;s//\x02/;/downloadsubtitle.php?id=/!b;s//\x00/;s/.*\x00\( leftsquarebrc 0-9 rightsquarebrc \+\) leftsquarebrc ^\x00\x01\x02 rightsquarebrc *\x01 leftsquarebrc ^\x00\x01\x02 rightsquarebrc *\x02.*/\1/p file
sed -n / leftsquarebrc fF rightsquarebrc  leftsquarebrc oO rightsquarebrc  leftsquarebrc oO rightsquarebrc /,/ leftsquarebrc bB rightsquarebrc  leftsquarebrc aA rightsquarebrc  leftsquarebrc rR rightsquarebrc /p text.txt
sed -n / rightanglebrc  myoccupation/,/ rightanglebrc  mygrosssalary/p file
sed -n /"map":"200"/!s/.*\({"datalist".*}\).*/\1/p full.log
sed -n /## Screensh/,/##/{/Scree/{p;n};/##/{q};p} file
sed -n /$VARIABLE$/,/test/p aFile
sed -n /$VARIABLE/,/test/p aFile
sed -n /$VARIABLE/,/test/p aFile
sed -n /$a/,/$b/p -- ${@:3}
sed -n /$past_date/p logfile.txt head -1 sed -e s/\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc - leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc - leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc   leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc : leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \).*/\1/
sed -n /$some text$/,/test/p aFile
sed -n /$start/,$p timings.txt
sed -n /$start/,'$p' timings.txt
sed -n /$variable/,$p file.log grep "KO" -c
sed -n /$variable/,$p file.log grep "KO" -c
sed -n /'$variable'/,$p file.log grep "KO" -c
sed -n /(/,/)/{:a; $!N; /)/!{$!ba}; s/.*(\( leftsquarebrc ^) rightsquarebrc *\)).*/\1/p} file
sed -n /,-,\.txt$/s|/ leftsquarebrc ^/ rightsquarebrc *$|/|p input.txt
sed -n /,-,\.txt$/s|/ leftsquarebrc ^/ rightsquarebrc *$||p input.txt
sed -n /- GEM PATHS:/ { N; s/.* - //p } file
sed -n /---/p file
sed -n /--.*m4a/s=.*/==p download.log tr \n ,
sed -n /-/p
sed -n /.*21 leftsquarebrc 34 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \{3\}.*/{p} file
sed -n /.*Visible.*/,$p originalfile
sed -n /./!q;= input tail -1
sed -n /./!q;=;p input sed N;s/\n/ /
sed -n /08:46:01.328/,/09:56:15.739/p application.log
sed -n /12pt;" rightanglebrc \(.*\) leftanglebrc \/span rightanglebrc  leftanglebrc \/div rightanglebrc  leftanglebrc \/message rightanglebrc / s%12pt;" rightanglebrc \(.*\) leftanglebrc /span rightanglebrc  leftanglebrc /div rightanglebrc  leftanglebrc /message rightanglebrc %\1%p
sed -n /91, 4, {\(0x leftsquarebrc 0-9A-F rightsquarebrc  leftsquarebrc 0-9A-F rightsquarebrc ,\)\{11\}0x leftsquarebrc 0-9A-F rightsquarebrc  leftsquarebrc 0-9A-F rightsquarebrc }/p file
sed -n /= *$/!p file
sed -n /@ForTestingOnly/,$ { / leftsquarebrc {} rightsquarebrc / s/( leftsquarebrc {} rightsquarebrc )/1n/g;ta;b;:a;p;=} $file
sed -n /ABC/,/^ leftsquarebrc ^+ rightsquarebrc /{x;/^$/!p;} file
sed -n /ABC/I{h;:A;$!n;/^+/{H;$!bA};g;p;} file
sed -n /ABC1_.\+;/p Config/db_conn.cfg
sed -n /ANS_LENGTH/s/ leftsquarebrc ^= rightsquarebrc *=\(.*\)/\1/p log.txt
sed -n /A\|B/p 1.txt
sed -n /Account/{n;/VIN No\./n;p} file
sed -n /All present$/{s/.*//;x;d;};x;p;${x;p;} file sed /^$/d
sed -n /BUILD_VERSION/s/.*'( leftsquarebrc ^' rightsquarebrc *)'.*/1/p input
sed -n /Block number:/,/ServiceMsg/{n;/ServiceMsg/p;g} service.txt
sed -n /COURSE/i{;s/COURSE NAME: //gip;} rsh1
sed -n /COURSE/p rsh1 sed s/COURSE NAME: //g
sed -n /Current Network Information/,$p INPUT_FILE
sed -n /Development streams:/,$ s/ leftsquarebrc ^  rightsquarebrc * *Views: *( leftsquarebrc ^_  rightsquarebrc *)_.*/1/p
sed -n /Expected Messages : 0/{H;g;p};/.*/H;/File Process Start/h log.txt
sed -n /First/,/Third/p; /Third/q file
sed -n /Foo/I,/Bar/Ip text.txt
sed -n /GNU GENERAL PUBLIC LICENSE/{:a;N;/why-not-lgpl.html\ rightanglebrc ./!ba;N;s/.*\n//};p file
sed -n /INSERT INTO ax_payment/{:loop; N; /VALUES.*)/{p;d}; b loop} yourfile.txt
sed -n /LANGUAGE/{N; s/.* leftanglebrc string rightanglebrc \(.*\) leftanglebrc \/string rightanglebrc .*/\1/p; } Locale.xml
sed -n /LIMIT/,/=/{/^\s*\(\S*\s*\)\{10\} leftsquarebrc 0-9.- rightsquarebrc *\*/H;x;s/^.*\n\(.*\n.*\)$/\1/;x;/=/{x;P;q}} file
sed -n /Lipid droplet diameter/{n;n;n;N;p} input
sed -n /Main step/,/./p inputFile
sed -n /OPC_NODENAME=/s/^.*=//p file
sed -n /PATTERN/,/^$/p file
sed -n /PATTERN/,/^$/{/./p} file
sed -n /PATTERN/,/^$/{/^$/d; p} file
sed -n /PATTERN/,/^$/{/^$/q; p} file
sed -n /Page: 25141/,$p file
sed -n /Recordings/s#.*/\(F leftsquarebrc ^\. rightsquarebrc *\. leftsquarebrc ^\. rightsquarebrc *\).*#\1#p file.txt
sed -n /START/,/STOP/ { //!p } file.txt
sed -n /SUMMARY/,/END OF SUMMARY/p fileName
sed -n /Sample_10Y_W34/,/Sample_10Y_W34/p filename head -n -6
sed -n /Start/{:a;/End/!{N;ba};/930939023/!d;p} file
sed -n /Started GET/{h;d;};/Completed 200 OK/{H;g;s/\n/; /p;} file
sed -n /Started GET/{h;d};/Completed 200 OK/{H;g;s/\n/; /p} file
sed -n /Started POST.*\/ leftsquarebrc fr rightsquarebrc /{N;/Parameters/p} log/production.log
sed -n /Started POST.*\/ leftsquarebrc fr rightsquarebrc /{N;p} log/production.log
sed -n /The second line/q;p inputfile
sed -n /\ leftanglebrc abc\ rightanglebrc /,/\ leftanglebrc efg\ rightanglebrc /{/\ leftanglebrc abc\ rightanglebrc /{h;d};H;/\ leftanglebrc efg\ rightanglebrc /{x;p}} file
sed -n /\ leftanglebrc keyword2\ rightanglebrc /,/^$/p file.txt
sed -n /\ leftsquarebrc directive\ rightsquarebrc /,/\ leftsquarebrc otherdirective\ rightsquarebrc / { //! p } infile
sed -n /\(^\ leftsquarebrc test2\ rightsquarebrc \)/,$p test.txt
sed -n /\*\//q; /^\/\*/d; s/^ \* \?//p
sed -n /\/\*/,/\*\//{P;/\*\//q;D;} style.css
sed -n /\/bar\//p file
sed -n /\\$/p file1 wc -l
sed -n /\b leftsquarebrc 0-9 rightsquarebrc \{2\}\b/p file
sed -n /\x1f\x8b/,$ p
sed -n /^ leftanglebrc a/p; /^ leftanglebrc a/! H; ${g; s/\n//; p} input.txt
sed -n /^ leftanglebrc a/p; /^ leftanglebrc p/H; ${g; s/\n//; p} input.txt
sed -n /^ leftanglebrc a/p; /^ leftanglebrc p/H; ${g; s/\n//; p} input.txt
sed -n /^ leftanglebrc url rightanglebrc $/{n;N;N;N;s/\n/ /g;s/ * leftanglebrc  leftsquarebrc a-z rightsquarebrc * rightanglebrc //g;s/ leftanglebrc \/ leftsquarebrc a-z rightsquarebrc * rightanglebrc / /g;p}
sed -n /^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *title leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *= leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *{/ {s///; s/} leftsquarebrc ^} rightsquarebrc *$//p} inputfile
sed -n /^ leftsquarebrc 0-9 rightsquarebrc /{x;p};/^ leftsquarebrc ^0-9 rightsquarebrc /{H;x;s/\n\s*\( leftsquarebrc ^0-9 rightsquarebrc \)/ \1/;x};${x;p}
sed -n /^ leftsquarebrc 0-9. rightsquarebrc \+$/w results.txt thin*.txt
sed -n /^ leftsquarebrc A-Z rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc /p file
sed -n /^ leftsquarebrc ^" rightsquarebrc *" leftsquarebrc ^" rightsquarebrc *$/p file
sed -n /^ leftsquarebrc ^: rightsquarebrc *only\( leftsquarebrc 0-9 rightsquarebrc \{1,2\}\)_ leftsquarebrc ^  rightsquarebrc */ s//\1/p
sed -n /^ leftsquarebrc ^: rightsquarebrc *only\(1 leftsquarebrc 01 rightsquarebrc \) leftsquarebrc ^  rightsquarebrc */ s//\1/p
sed -n /^#/H; /^S/{G; y/\n/ /; p}; /^$/h input
sed -n /^#/{h; bk}; :j /^S/{G; y/\n/ /; p}; /^$/h; d; :k n; /^#/{ H; bk}; bj; input
sed -n /^#\+ leftsquarebrc   rightsquarebrc *Orange leftsquarebrc   rightsquarebrc *#\+/,/^#\+$/ p infile
sed -n /^$/p infile
sed -n /^$date/,$p filename
sed -n /^-- Current Database: `${db}`/,/^-- Current Database: `/p $path$infile
sed -n /^.\+:\{3\}$/p fileA.txt
sed -n /^06:25/,/^08:25/{p;/^08:25/q} logFile
sed -n /^32/,/^39/p file
sed -n /^@/,/^ leftsquarebrc ^; rightsquarebrc *)/H;${;x;s/.*@ leftsquarebrc ^( rightsquarebrc *( leftsquarebrc ^0-9 rightsquarebrc *//;s/ leftsquarebrc ^0-9 rightsquarebrc .*//;p;} $SOAfile
sed -n /^@/{n;n;n;p} file.txt
sed -n /^A\|^B/p 1.txt
sed -n /^Acknowledgements:$/,$p input-file
sed -n /^CommonTerm: /{;n;p;} log_file
sed -n /^CommonTerm: /{n;p} log_file
sed -n /^Customer ID/ h; /^Inventory ID/ { G; s/.*=\( leftsquarebrc ^, rightsquarebrc *\).*=\( leftsquarebrc ^\n rightsquarebrc *\).*=\( leftsquarebrc ^, rightsquarebrc *\).*=\(.*\)/"\3", "\4", "\1", "\2"/; p } inventory.txt
sed -n /^IA\/\( leftsquarebrc NM rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\) \( leftsquarebrc 01 rightsquarebrc \)$/ s//\1;\2/p test.txt
sed -n /^IA\/\( leftsquarebrc NM rightsquarebrc  leftsquarebrc ^ rightsquarebrc *\) \( leftsquarebrc 01 rightsquarebrc \)$/ s//\1;\2/p test.txt
sed -n /^Icon=/ { s/.*=//; p; } $file
sed -n /^MSG.*ERROR/{H;g;N;p;};/^DURATION/{s/.*//;h;d;};H
sed -n /^NODE-ID rightanglebrc  command1/,/^NODE-ID rightanglebrc  / { /^NODE-ID rightanglebrc  command1/ { p; d; }; /^NODE-ID rightanglebrc  /q; p }
sed -n /^Nov 20 13:42:52/,/^Nov 20 16:22:23/p input.log
sed -n /^START=A$/,/^END$/p data
sed -n /^Sink/,/^$/p pactl_Output.txt
sed -n /^Started/, /page/p file
sed -n /^TODO/,${N;/^\n$/q;P;D}
sed -n /^TODO/,/^$/{H;N;/^\n$/{b};p}
sed -n /^Test/,$p oldfile
sed -n /^ZZZ/ { s/^.*\( leftanglebrc .* rightanglebrc \).*$/\1/p }
sed -n /^\(--Begin file\|end of file\)/{p;b}; /^----Begin Piece/{p;:a;n;/^----End Piece/{p;b};p;ba} inputfile
sed -n /^\*NODE$/,/^*/p input.txt
sed -n /^\/\*/,/^ \*\//p;/^ \*\//q file
sed -n /^\s*#/!{=;q} file
sed -n /^\s*#/!{p;q} file
sed -n /^\s*$/,$ {/^.* leftsquarebrc ^  rightsquarebrc \+.*/,$p} file
sed -n /^\s*$/,$ {/^.* leftsquarebrc ^  rightsquarebrc \+.*/p} file
sed -n /^owner / { s///gp; q; } $file
sed -n /^owner / { s/^owner //gp; q; } $file
sed -n /^version=/s///p file
sed -n /^{/,$ p test.txt
sed -n /```ruby/,/```/{/```ruby/b;/```/b;s/^/    /p } filename
sed -n /aStyle.Landscape {/,/}/p
sed -n /abc\|xyz/p
sed -n /alex/{/eva/{/tom/p}}
sed -n /base 16/{s/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *\(..\)\(..\)\(..\) leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *( leftsquarebrc ^) rightsquarebrc *) leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc */\1:\2:\3 /p;} file
sed -n /begin/,/end/ { H;g; s/^\n//; /end/s/\n/ /gp } file.txt
sed -n /color/ s/.*color: *#\( leftsquarebrc ^; rightsquarebrc \+\);.*/\1/p css_file
sed -n /color/ s/.*color: leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *# leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\( leftsquarebrc  leftsquarebrc :xdigit: rightsquarebrc  rightsquarebrc \+\) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *;.*/\1/p
sed -n /def=something/,/ leftanglebrc /box rightanglebrc /!p {}
sed -n /department=..* id="983343"/,/ leftanglebrc \/department rightanglebrc /p file grep -c  leftanglebrc user="
sed -n /dependencies/, /}/ p t grep  rightanglebrc =
sed -n /foo/{s//bar/g;=;p;} filename
sed -n /foo/{s/foo/bar/g;=;p;} filename
sed -n /http:.*\/unique\//s/^.* rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc .*$/\1/p
sed -n /info/I p; //,/ leftsquarebrc 0-9 rightsquarebrc \{4\}- leftsquarebrc 0-9 rightsquarebrc \{2\}- leftsquarebrc 0-9 rightsquarebrc \{2\}/{ //! p} myfile.txt
sed -n /main(argc, argv)/,/{/ p
sed -n /mystat/s/x/\./gp $1
sed -n /openissues/p test.txt sed s/.*(openissues)\(.*\)(\/openissues).*/\1/
sed -n /pat1/,/pat2/{/pat1\|pat2/!p} inputfile
sed -n /pattern/ {s/.*//; N; N; s/ leftsquarebrc \r\n rightsquarebrc //g; p}
sed -n /pattern/ {x; N; N; N; s/ leftsquarebrc \r\n rightsquarebrc //g; p}
sed -n /pattern/,$p sed 1d
sed -n /pattern/,/&/p file
sed -n /pattern/{=;p} file sed {N;s/\n/ /}
sed -n /pattern1/,/pattern2/p file
sed -n /pattern1/{N; /\n.*pattern2/!{D;b};p}
sed -n /pattern1/{p; :a; N; /pattern2/!ba; s/.*\n//}; p inputfile
sed -n /re/,$p file
sed -n /regex/,$p INPUTFILE
sed -n /regex1/,/regex2/p INPUT_FILE
sed -n /s$/{s/s$//;p;}
sed -n /searchtext/,$p file1
sed -n /some text/,/test/p aFile
sed -n /span/{s/ leftanglebrc span leftsquarebrc ^ leftanglebrc  rightsquarebrc * rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc .*/\1/;p;q}
sed -n /start/,/end/ H; $ { g; s/\n//g; s/\(end\)/\1\n/g; p } infile
sed -n /start/,/end/{p;d};/end/p
sed -n /start_pattern/{:a;N;/end_pattern/!ba;N;s/.*\n//};p file
sed -n /string1/p;/string2/;/string3/p INPUTFILE
sed -n /token/s/.*name="ltoken"\s\+value="\( leftsquarebrc ^" rightsquarebrc \+\).*/\1/p input_file
sed -n /trigger/{p; :loop n; p; /trigger/q; b loop}
sed -n /xxxxxxx/q;p input.txt
sed -n /}$/{h;:a;n;/^$\|}$/{H;$!ba};H;g;s@}\n*@}@g};p input.txt
sed -n 0~10p file
sed -n 1!G;h;$p
sed -n 1!H;1h;${x;s/(.*)/()/;p}
sed -n 1,${line}p myFile
sed -n 1,/ leftanglebrc \/html rightanglebrc /p some.html
sed -n 1,/ leftanglebrc \/html rightanglebrc /{s! leftanglebrc /html rightanglebrc .*! leftanglebrc /html rightanglebrc !;p} input
sed -n 1,/^\s*$/p file
sed -n 1,2p file1
sed -n 1,50000 p filename
sed -n 100,200{s/^\( leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+\)\{7\}\( leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+\).*$/\2/;p} file.tsv
sed -n 1000,$p file.txt grep abc
sed -n 1000,2000{p;2000q} file.txt grep abc
sed -n 100000,20000p bar.txt
sed -n 10q;6,10p file
sed -n 1293,$ p yourfile grep xyz
sed -n 13193p;15791p;16891p file_name
sed -n 16224,16482p filename
sed -n 1h; 1!H; ${ g; s/Mary\n\n/\n/g p }
sed -n 1h; 1!H; ${g; s/\s*for(\$counter=0;\$counter leftanglebrc 10;\$counter++)\s*\n\s*{\s*\n\s*\$yyarr\ leftsquarebrc \$counter\ rightsquarebrc =\$counter+2004;\s*\n}/\nfor($counter=2004;$counter leftanglebrc =date("Y");$counter++)\n{\n\t$yyarr leftsquarebrc $counter-2004 rightsquarebrc =$counter;\n}/ p} filename
sed -n 1h;1!H;${;g;s/a/b/g;p;}
sed -n 1h;1!H;${g;s/\n/ /g;p} file
sed -n 1{h;d};/^"$/{g;s/$/ "/p;n;h;d};x;p;${g;p} input.txt
sed -n 1{x;d};H;${g;s/nn/nTESTnn/2;p}
sed -n 1~5p;3~5p file.txt
sed -n 2p $file cut -d   -f 1
sed -n 2p /mystic/temp$NODE/CHAIN.TXT
sed -n 2p /mystic/temp$NODE/CHAIN.TXT
sed -n 2p somefile.txt
sed -n 2s/\(.*\)-\(..\) /date -d \2-\1\\ /ep file
sed -n 2s/\(.*\)-\(..\) /date -d \2-\1\\ /p file sh
sed -n 2{p;q;} hugeFile
sed -n 2{p;q} somefile.txt
sed -n 3,5p /etc/passwd
sed -n 3,5p;6q /etc/passwd
sed -n 3,6p
sed -n 3,6p; 11,13p sort -k 2
sed -n 30p;39p;43p foo.txt
sed -n 314p file
sed -n 314{p;q} file
sed -n 39,42p foo.txt
sed -n 3p file.txt
sed -n 3s/.* = //p installation.sh
sed -n 3s/POP3_SERVER_NAME = //p installation.sh
sed -n 3s|^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *//|&|p file
sed -n 4,8!{p;b};n;p file
sed -n 452,$ { /wire/ {p;q} } /tmp/foo
sed -n 4p filename
sed -n 5,10p filename
sed -n 5p $f
sed -n 6,10p file
sed -n 60,60p foo diff bar
sed -n 7p file
sed -n 7s/^.\{17\}//p file
sed -n 7s/^\(\s\+\S\+\)\{17\}//p file
sed -n 7{p;q} file
sed -n 8,12p yourfile
sed -n 800,900p file.txt
sed -n 85,158p file
sed -n :a; $ ! {N;ba}; s/\n/:/g;p INPUT.TXT
sed -n :a; / leftanglebrc event rightanglebrc /,/ leftanglebrc \/event rightanglebrc / N; / leftanglebrc event rightanglebrc /,/ leftanglebrc \/event rightanglebrc /!b; / leftanglebrc \/event rightanglebrc / {/uniqueId="1279939300.862594_PFM_1_1912320699"\|uniqueId="1281686522.353435_PFM_1_988171542"/p;d}; ba
sed -n :a; /^DIMM/,/^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *Nominal Voltage/ N; /^DIMM/,/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *Nominal Voltage/ ! d ;/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *Nominal Voltage/ {/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *Nominal Voltage/p;d}; ba cpuz-FHD505.txt
sed -n :a;$!{N;s/\n/&/2;Ta};/^PATTERN\'\''/MP;$!D file
sed -n :a;/START/,/END/{/END/!{$!{N;ba;}};/error/p;} inputfile
sed -n H; ${ x; s/\n//; s/\n //g; p} file.txt
sed -n H;${x;s/^ leftsquarebrc ^( rightsquarebrc *(//;s/) leftsquarebrc ^) rightsquarebrc *$//;p;} filename
sed -n N;/^\n$/q;P;D
sed -n N;/^\n$/{P;q};P;D
sed -n N;/^\n$/{p;q};P;D
sed -n N;N;N;N;N;s/\n/ /gp input
sed -n N;N;N;N;N;s/\n/ /gp input column -t
sed -n N;N;N;s/\n\|,$//g;p file
sed -n N;N;N;s/^\|$/"/g;s/\n/","/g;p file
sed -n N;N;h;n;p;g;p file
sed -n \!'"$var1"'!,\!'"$var2"'!p inpu
sed -n \.^02/04/2002.,$p dates.list
sed -n \@$1@,$p $file tac sed -n \@$2@,$p tac
sed -n \@,.*/.*/.*/@p input
sed -n \@,\( leftsquarebrc ^/ rightsquarebrc */\)\{3\} leftsquarebrc ^/ rightsquarebrc *$@p input
sed -n \|^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc */\*.*\*/|{p;q};\|^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc */\*|,\|^ \*/|p;\|^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\*/|q
sed -n \|^/\*.*\*/|{p;q};\|^/\*|,\|^ \*/|p;\|^ \*/|q file
sed -n \|^/\*|,\|^ \*/|p;\|^ \*/|q file
sed -n abc.txt
sed -n fromline,toline p
sed -n h; s/.*//; n; G; p /tmp/foo
sed -n l0 file.txt
sed -n p;n filename
sed -n s!.*/\( leftsquarebrc 0-9. rightsquarebrc *\)/.*!\1!p input
sed -n s#.* \( leftsquarebrc a-zA-Z rightsquarebrc *  leftsquarebrc A-Z rightsquarebrc \{2,3\}/fd\).*#\1#p test_regqexp_keynote.txt
sed -n s#.* leftanglebrc br/ rightanglebrc  leftanglebrc br/ rightanglebrc  leftanglebrc br/ rightanglebrc \(.*\) leftanglebrc br/ rightanglebrc  leftanglebrc br/ rightanglebrc After you.*#\1#p yourfile.xml
sed -n s%.*\(https\{0,1\}:// leftsquarebrc ^/ rightsquarebrc *\).*%\1%p
sed -n s%.*https\{0,1\}://\( leftsquarebrc ^/ rightsquarebrc *\)/.*%\1%p
sed -n s%.*src="%%; s%".*%%p
sed -n s%.*src="\( leftsquarebrc ^" rightsquarebrc *\)".*%\1%p
sed -n s%^.* URL:\(.*\) \ leftsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\ rightsquarebrc  - rightanglebrc  .*$% leftanglebrc a href="\1" rightanglebrc \1 leftanglebrc /a rightanglebrc %p log.txt
sed -n s,^// leftsquarebrc ^@/ rightsquarebrc *@\( leftsquarebrc ^/ rightsquarebrc *\)/.*,\1,p
sed -n s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //gp test.csv sed /^$/d
sed -n s/ leftanglebrc title rightanglebrc \(.*\) leftanglebrc /title rightanglebrc /\1/p input.file
sed -n s/ leftsquarebrc ^\/ rightsquarebrc *\(\/ leftsquarebrc ^\/ rightsquarebrc *\/\).*/\1/p file
sed -n s/$REGEX_SED/x1b leftsquarebrc 7m&x1b leftsquarebrc 0m/gp
sed -n s/$w+ leftsquarebrc 'keyword1' rightsquarebrc s*=s*'( leftsquarebrc ^' rightsquarebrc +)';/1/p inputfile
sed -n s/$w+ leftsquarebrc 'keyword1' rightsquarebrc s*=s*'( leftsquarebrc ^' rightsquarebrc +)';/1/p inputfile
sed -n s/(\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \))\s\?\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \) leftsquarebrc -  rightsquarebrc \( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)/\1\2\3/p
sed -n s/.* \( leftsquarebrc ^  rightsquarebrc \{1,\} discovers  leftanglebrc PLANET rightanglebrc \).*/\1/p
sed -n s/.* leftanglebrc Pay rightanglebrc \(.*\) leftanglebrc \/Pay rightanglebrc .*/\1/p file
sed -n s/.* leftanglebrc sometag param='( leftsquarebrc ^' rightsquarebrc *)' rightanglebrc .*/1/p
sed -n s/.* leftanglebrc start rightanglebrc \(.*\) leftanglebrc end rightanglebrc .*/\1/p
sed -n s/.* leftanglebrc title rightanglebrc \(.*\) leftanglebrc \/title rightanglebrc .*/\1/ip;T;q
sed -n s/.*(am.*sed).*/1/p
sed -n s/.*= *\( leftsquarebrc 0-9 rightsquarebrc *\) (.*/\1/p
sed -n s/.*AdulterateFood\(.*\)DangerousFood.*/\1/p source_code
sed -n s/.*Undefined error code\(.*\)id.*/\1/p bad_events_P2J3.xml
sed -n s/.*\".*\", \"\(.*\)\".*/\1/p yourFile.txt
sed -n s/.*\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *G leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\).*/\1/p
sed -n s/.*\(2z\(\(.*\)\.\(.*\)\)n9\).*/variable 1 = \L\3\nvariable 2 = \L\4/p your.file
sed -n s/.*\(PATTERN\).*/\1/p FILE
sed -n s/.*\(StackOverflow\).*/\1/p file.txt
sed -n s/.*\(aa- leftsquarebrc A-Za-z0-9 rightsquarebrc *\).*/\1/p
sed -n s/.*marker_\(.*\) = "SymmetryPlane.*/\1/p header.out
sed -n s/.*myProg v\(FOO \)\?\( leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  leftsquarebrc :punct: rightsquarebrc  rightsquarebrc *\).*/v\2/p
sed -n s/.*update tbl set col=.*where id=\( leftsquarebrc 0-9 rightsquarebrc \+\)$/\1/p file.log
sed -n s/.*update tbl set col=.*where id=\( leftsquarebrc 0-9 rightsquarebrc \+\)$/\1/p file.log sort uniq -c
sed -n s/.*video=\( leftsquarebrc ^" rightsquarebrc *\)" rightanglebrc /\1/p inputfile
sed -n s/POP3_SERVER_NAME = //p installation.sh
sed -n s/Previous Version:\(.*\)/\1/p VersionInfo.properties
sed -n s/XMLcpLINK: //p file.txt
sed -n s/\ leftsquarebrc \(.*\)\ rightsquarebrc /\1/p file
sed -n s/\( leftsquarebrc a-z rightsquarebrc \)\( leftsquarebrc a-z rightsquarebrc \)\( leftsquarebrc a-z rightsquarebrc \)\( leftsquarebrc a-z rightsquarebrc \)\( leftsquarebrc a-z rightsquarebrc \)/\5\4\3\2\1/pg
sed -n s/\(.*_ leftsquarebrc 123 rightsquarebrc \);$/\1/p file.txt
sed -n s/\(hel\)lo/\1/p
sed -n s/\.us\././p
sed -n s/\s*\( leftsquarebrc ^:  rightsquarebrc *\): function.*/\1/p test1.js
sed -n s/^.*abc\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\)xyz.*$/\1/p example.txt
sed -n s/^.*abc\( leftsquarebrc 0-9 rightsquarebrc *\)xyz.*$/\1/p example.txt
sed -n s/^.*is (.*)Uchiha.*/1/p inFile
sed -n s/^.*test/test/p input
sed -n s/^USE \( leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc *\);/\1/pI file
sed -n s/^\ leftsquarebrc \( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\).*icmp_req=\( leftsquarebrc 0-9 rightsquarebrc *\).*time=\( leftsquarebrc 0-9. rightsquarebrc *\).*$/\1 \3 \2/p infile
sed -n s/^\(\.\/create\.pl\)\s*\(.*\)\.out$/\1 \2.out \&\& mv complex.* \2/p s.txt
sed -n s/^\(\.\/create\.pl\)\s*\(.*\)\.out$/\1 \2.out\nmv complex.* \2/p s.txt
sed -n s/^distroverpkg=//p /etc/yum.conf
sed -n s/^hello //p
sed -n s/^name leftsquarebrc 0-9 rightsquarebrc \.\w\+=\(\w\+\)/\1/p file
sed -n s/base theme \+= //p file
sed -n s/foo/bar/g;tp;b;:p;=;p filename
sed -n s/set auto_upgrade {\( leftsquarebrc 0-9 rightsquarebrc  \)*\( leftsquarebrc 0-9 rightsquarebrc \{1,\}\)}/\2/p
sed -n s/test/&\n/;s/.*\n//p input
sed -n s@.*/USOURCES@USOURCES@p temp.lst
sed -n s@^$InputFile=.*@$InputFile='${INPUT_FILE_NAME_PATH}'@gp dashboard.prf
sed -n s@^.*Records returned.*\ leftsquarebrc \(.*\)\ rightsquarebrc .*$@The total records returned = \1@p log.txt
sed -n s@^.*Records returned.*\ leftsquarebrc \(.*\)\ rightsquarebrc .*$@\1@p log.txt
sed -n s| leftsquarebrc 0-3 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc / leftsquarebrc 0-1 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc / leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |& '$(parseDates)' &|p datefile
sed -n s|.* leftanglebrc url rightanglebrc \(.*\) leftanglebrc /url rightanglebrc .*|\1|p
sed -n s|\s* leftanglebrc DataBaseName rightanglebrc \(.*\) leftanglebrc /DataBaseName rightanglebrc |\1|p path/to/DataBase.xml
sed -n s|http://(.*.)*(.*)..*|2|p
sed -n |content/folder\ leftsquarebrc @name.*Failure|s|.*content/folder\ leftsquarebrc @name\(.*\)Failure.*|\1| source.csv
sed -r $!N; s~\n~~; s~( leftanglebrc a )~\n\1~ig; s~ leftsquarebrc ^ leftanglebrc  rightsquarebrc * leftanglebrc a leftsquarebrc ^ rightanglebrc  rightsquarebrc *href\s*=\s*"( leftsquarebrc ^" rightsquarebrc *)" leftsquarebrc ^\n rightsquarebrc *~\1\n~ig test
sed -r $!N;s/ (A leftsquarebrc ^\n rightsquarebrc *)\n/\n\1/;P;D file
sed -r $!N;s/test(\n\s*)$/xxx\1/;P;D file
sed -r $!N;s|(&lt;)(strong&gt;)( leftsquarebrc ^\n rightsquarebrc *)\n\s*\1/\2|//textbf{\3}|;P;D file
sed -r $!N;s|\n( leftanglebrc /Text rightanglebrc )|\1|;P;D file
sed -r $s/($LD = )('.*')(.*)/\1_(\2)\3/ filename
sed -r $s/(dbo- rightanglebrc )( leftsquarebrc a-zA-Z0-9_ rightsquarebrc +)(.*)$/1 leftsquarebrc '2' rightsquarebrc 3/g
sed -r --in-place s/a(.*)b/x\1y/g; your_file
sed -r -b s/Dev\\Suite\\.*\\Modules/dev\\suite\\simple\\/g test.txt
sed -r -b s/Dev\\Suite\\.*\\Modules/dev\\suite\\simple\\/g test.txt
sed -r -e / leftanglebrc b rightanglebrc / {s/( .)( leftsquarebrc ^  rightsquarebrc *)/\1\L\2/g} -e s/ leftanglebrc b rightanglebrc (.)/ leftanglebrc b rightanglebrc \u\1/ -e / leftanglebrc b rightanglebrc / {s/(\b.{1,2}\b)/\L\1/g} data
sed -r -e /S|A/d file.
sed -r -e /\d{13,13},\d*, leftsquarebrc \w\s rightsquarebrc +,.+$/d -e /^$/d logfile
sed -r -e /sandbox/d -e s|http://(\S*)|href="/fetch\?domain=\1"|g
sed -r -e 1s/(\w)(\w*)/\U\1\L\2/g -e 3s/(\w)(\w*)/\U\1\L\2/g
sed -r -e :a ; s/\b( leftsquarebrc a-zA-Z rightsquarebrc +)\b(.*) (\1)( |$)/\1\2 *\3* / ; ta
sed -r -e s#^%C(.*)#"/vol/images\1"# -e s#.*#fl-cp -sync & &# file.txt
sed -r -e s/ ( leftsquarebrc A-Z rightsquarebrc )/-\1/g
sed -r -e s/ +//g -e s/^ leftsquarebrc 0-9 rightsquarebrc * leftsquarebrc _- rightsquarebrc *(.+\.mp3)$/\1/I
sed -r -e s/ leftsquarebrc ^; rightsquarebrc *  leftsquarebrc * rightsquarebrc ?( leftsquarebrc A-Za-z0-9_ rightsquarebrc +) *;/init- rightanglebrc \1 = \1; /g
sed -r -e s/( leftsquarebrc ^  rightsquarebrc +)(.*)/\1 \1 \1\2/ F1
sed -r -e s/( leftsquarebrc ^0-9a-zA-Z{ rightsquarebrc )a( leftsquarebrc ^0-9a-zA-Z} rightsquarebrc )/1b2/g
sed -r -e s/( leftsquarebrc a-zA-Z rightsquarebrc )( leftsquarebrc a-zA-Z rightsquarebrc {2,4})( leftsquarebrc 0-9 rightsquarebrc {3})/\1:\2:\3/g
sed -r -e s/( leftsquarebrc a-zA-Z rightsquarebrc {3,5})( leftsquarebrc 0-9 rightsquarebrc {3})/\1:\2/g
sed -r -e s/( leftsquarebrc a-zA-Z0-9./\ :- rightsquarebrc +)/1/g
sed -r -e s/(:: ni =) leftsquarebrc ^= rightsquarebrc *$/\1 512/ file
sed -r -e s/(::\s+ni\s+=) leftsquarebrc ^= rightsquarebrc *$/\1 512/ file
sed -r -e s/(\S+)\s+(.*)\s+(\S+)/Field1 = \1\nField2 = \2\nField3 = \3/g file
sed -r -e s/(^|\.)0+( leftsquarebrc 1-9 rightsquarebrc )/\1\2/g -e s/(^|\.)(0)0*(\.|$)/\1\2\3/g
sed -r -e s/-(a)-/-\\\1-/g test.txt
sed -r -e s/-(a)-/-\\\1-/g test.txt
sed -r -e s/\ leftanglebrc (.)(.)(.)\ rightanglebrc /\3\2\1/g
sed -r -e s/\ leftanglebrc (.)(.)(.)\ rightanglebrc /\3\2\1/g -e s/\ leftanglebrc (.)(.)(.)(.)\ rightanglebrc /\4\3\2\1/g
sed -r -e s/\bbizzbuzz leftsquarebrc 0-9 rightsquarebrc {2}\b// file.txt
sed -r -e s/\d+/sprintf("%03d",$&)/e
sed -r -e s/\x1b leftsquarebrc ^m rightsquarebrc *m//g typescript col -b
sed -r -e s/\|( leftsquarebrc ^| rightsquarebrc +)\|/\\left|\1\\right|/g
sed -r -e s/^( leftsquarebrc ^/ rightsquarebrc *)(\/B\/C\/)( leftsquarebrc ^/ rightsquarebrc *)$/\1\2\1/ file
sed -r -e s/^default leftsquarebrc  \t rightsquarebrc +0$/default 1/ /home/san/menu.lst
sed -r -e s/^default( leftsquarebrc  \t rightsquarebrc +)0 leftsquarebrc  \t rightsquarebrc *$/default\11/ /home/san/menu.lst
sed -r -e s/^default( leftsquarebrc  \t rightsquarebrc +)0$/default\11/ /home/san/menu.lst
sed -r -e s/address = \ leftsquarebrc |\ rightsquarebrc //g -e s/= +( leftsquarebrc ^: rightsquarebrc +\:){5,}.*$/=/ file
sed -r -e s/api.(dev leftsquarebrc 0-9 rightsquarebrc +.)?side.com/$SERVER_HOST_VALUE/g
sed -r -e s/bizzbuzz leftsquarebrc 0-9 rightsquarebrc {2}// file.txt
sed -r -e s/chr leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc ^_ rightsquarebrc *_(N leftsquarebrc RM rightsquarebrc )_( leftsquarebrc 0-9 rightsquarebrc +)_ leftsquarebrc ^,_ rightsquarebrc +( leftsquarebrc ,  rightsquarebrc |$)/\1_\2'$'\t''/g;s/'$'\t''$//g
sed -r -e s/chr leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc ^_ rightsquarebrc *_(N leftsquarebrc RM rightsquarebrc )_( leftsquarebrc 0-9 rightsquarebrc +)_ leftsquarebrc ^,_ rightsquarebrc +( leftsquarebrc ,  rightsquarebrc |$)/\1_\2'$'\t''/g;s/'$'\t''$//g your_file
sed -r -e s/if(/if ( /g
sed -r -e s@((top|left): leftsquarebrc 0-9 rightsquarebrc +)(px)?@\1px@g file
sed -r -f parse.sed infile
sed -r -f sedscr your_one_line_file
sed -r -i -. -b -a -k s#^ leftsquarebrc 0-9 rightsquarebrc {1,2}/ leftsquarebrc 0-9 rightsquarebrc {1,2}/ leftsquarebrc 0-9 rightsquarebrc {1,2} ## logfile
sed -r -i -e /3199|26543/s/^(.{7}).*/\1\t0;\t0;/ inv.txt
sed -r -i / leftsquarebrc 0-9 rightsquarebrc {1,3}(. leftsquarebrc 0-9 rightsquarebrc {1,3}){3} Tom$/c$newip Tom file
sed -r -i /^ leftanglebrc tr rightanglebrc  leftanglebrc td rightanglebrc  leftanglebrc \/td rightanglebrc  leftanglebrc td class="tdci" rightanglebrc / { :b; N; s/(\n leftanglebrc tr rightanglebrc  leftanglebrc td rightanglebrc  leftanglebrc \/td rightanglebrc  leftanglebrc td rightanglebrc )/\n leftanglebrc tr rightanglebrc  leftanglebrc td rightanglebrc \&nbsp; leftanglebrc \/td rightanglebrc  leftanglebrc \/tr rightanglebrc \1/; te; P; D; bb; }; :e $f
sed -r -i /^\S+\s+(\S+)\s+\S+\s+(\S+)/s//echo "&\t$(echo \1-\2|bc)"/e file
sed -r -i /^\S+\s+\S+\s+\S+\s+1( |$)/d file
sed -r -i /b/ { :b; N; s/\na/\nc2&/; te; P; D; bb; }; :e; file
sed -r -i 3,$s/(\s+).*/\1*/ file
sed -r -i :a;s/^( *)\t/\1    /;ta file
sed -r -i s/\b(word1|word2|word3)\b//g file.txt
sed -r -i s/^#(.*sufficient\s+pam_wheel\.so trust use_uid.*)/\1/ file
sed -r -i s/^(( leftsquarebrc ^, rightsquarebrc *,){34})0( leftsquarebrc ^, rightsquarebrc *)/\1+91\3/ test.csv
sed -r -i s/^(( leftsquarebrc ^, rightsquarebrc *,){7})( leftsquarebrc ^, rightsquarebrc *,)( leftsquarebrc ^, rightsquarebrc *,)/\1\4\3\5/
sed -r -i s/^((\S+\s+){3})\S(\S{3}\s)/\1\3/ file
sed -r -i s/font-family: leftsquarebrc "A-Za-z,  rightsquarebrc +;/font-family: Verdana;/g
sed -r -i s/old leftsquarebrc 0-9 rightsquarebrc +\(/old1(/ file.txt
sed -r -i s~^(.*Name,  leftsquarebrc 0-9 rightsquarebrc +),(.*)$~\1\2~g file
sed -r -n -e s/(dbservername)\s+\w+/\1 yyy/gip
sed -r -n -e s/^(( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}\/ leftsquarebrc 0-9 rightsquarebrc {1,2}) leftsquarebrc ^0-9 rightsquarebrc *(( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}\/ leftsquarebrc 0-9 rightsquarebrc {1,2}).*/\1 \3/p
sed -r -n /ABC/,/^ leftsquarebrc ^+ rightsquarebrc /{/(ABC|^\+)/!d;p;} file
sed -r -n /ABC1_.+;/p Config/db_conn.cfg
sed -r -n /LIMIT/,/total/{//!H};/total/{x;s/^.*\n(.*\n)((\s+\S+){10}\s+ leftsquarebrc 0-9. rightsquarebrc +\*(\s+\S+){3}\n(\s+\S+){14}).*/\1\2/;p;q} file
sed -r -n /\ leftsquarebrc ID: leftsquarebrc 0-9 rightsquarebrc +\ rightsquarebrc /{/\ leftsquarebrc ID:128\ rightsquarebrc /!{s/.*\B(\ leftsquarebrc ID: leftsquarebrc 0-9 rightsquarebrc +\ rightsquarebrc )\B.*/\1/;H}};${x;s/\n//;s/\ rightsquarebrc \n\ leftsquarebrc /\\ rightsquarebrc |\\ leftsquarebrc /g;s@(.*) rightsquarebrc @/\\ leftsquarebrc ID:128\\ rightsquarebrc /,/\\\1\\ rightsquarebrc /\{/\\\1\\ rightsquarebrc /!p\}@p} file sed -n -r -f file
sed -r -n /^ leftsquarebrc 0-9 rightsquarebrc * ( leftsquarebrc 23456789 rightsquarebrc | leftsquarebrc 0-9 rightsquarebrc {2,})/ p
sed -r -n /^ leftsquarebrc 0-9 rightsquarebrc * ( leftsquarebrc 23456789 rightsquarebrc |10)/ p
sed -r -n /^Path:/h;/windowsdom\\nasarchive\s+Allow\s+FullControl/{g;p} file
sed -r -n :a;/^ *$/{n;ba};s/( |$).*//p;:b;n;/^ *$/ba;bb
sed -r -n s/ leftanglebrc title rightanglebrc (.*) leftanglebrc /title rightanglebrc /\1/p input.file
sed -r -n s/( leftsquarebrc a-z rightsquarebrc {4}).*/\1/p;T;s/.*/echo "&" | tee out.txt/e file
sed -r -n s/.*SRC=( leftsquarebrc ^  rightsquarebrc +).*SPT=( leftsquarebrc 0-9 rightsquarebrc +).*/\1 \2/p /var/log/iptables.log
sed -r -n s/^ leftsquarebrc 0-9 rightsquarebrc *? leftsquarebrc 02468 rightsquarebrc  /even/g
sed -r -n s| leftsquarebrc ^0-9 rightsquarebrc *(( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}/ leftsquarebrc 0-9 rightsquarebrc {1,2})|\1\n|g; s/\n leftsquarebrc ^\n rightsquarebrc *$//; s/\n/ /gp
sed -r / leftanglebrc Students rightanglebrc /,/ leftanglebrc \/Students rightanglebrc /{/ leftanglebrc Students rightanglebrc /{h;d};H;/ leftanglebrc \/Students rightanglebrc /!d;g;s/(.*) leftanglebrc !-- (.*) -- rightanglebrc (.*)/\1\2\3/} file
sed -r / leftanglebrc firstTag rightanglebrc .* leftanglebrc \/firstTag rightanglebrc /{N;s#( leftanglebrc firstTag rightanglebrc )(.*)(( leftanglebrc /firstTag rightanglebrc \n) leftanglebrc secondTag/ rightanglebrc )#\1\4 leftanglebrc secondTag rightanglebrc \2 leftanglebrc /secondTag rightanglebrc #g} file.txt
sed -r / leftanglebrc layoutItems rightanglebrc /{:ka;N;s#( leftanglebrc /layoutItems rightanglebrc )#\1#;Tka;s/lastViewedAccount//;T;d} file
sed -r /( leftsquarebrc a-z rightsquarebrc {4}).*/!b;s//\1/;w out.txt file
sed -r /(\?\s+){3}(Yes|No)/d ./file
sed -r /@/s!@(.*),.*!_\1@generic.com! FILE
sed -r /DP= leftsquarebrc ^= rightsquarebrc *MQ=/{s//\n&\n/;h;y/,/;/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/} file
sed -r /PATTERN1/!b;:a;/PATTERN2/bb;$!{N;ba};:b;s/(PATTERN1.*) leftsquarebrc  \t\n rightsquarebrc +(.*PATTERN2)/\1\2/;tb file
sed -r /VIDIO/ s/.*(VIDIO\w*)/ALOGI("\1");   &/ inputfile
sed -r /\\ leftsquarebrc ^\\ rightsquarebrc *\\/{s//\n&\n/;h;s/ leftsquarebrc \\| rightsquarebrc //g;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/} file
sed -r /^ leftsquarebrc 0-9. rightsquarebrc +"$/{s/"$//;n;};s/.*// file
sed -r /^ leftsquarebrc 0-9a-f rightsquarebrc {40}\b/!d;:a;/\ncommitter-time\b/bb;$!{N;ba};:b;s/\s+.*(\s.*)/\1/ file
sed -r /^ rightanglebrc /s% leftsquarebrc ^/ rightsquarebrc +/% rightanglebrc %;s%\..+%% file.txt
sed -r /^0x....(( ..){8}).*/{s//\1/;H};$!d;x;s/\n//g;s/ (.)(.)/\2\1/g file
sed -r /^1/s/(.{4})(.{9})/\1123456789/
sed -r /^COPY /{ s/( leftsquarebrc (  rightsquarebrc )(\w+)( leftsquarebrc ,) rightsquarebrc )/\1"\U\2\E"\3/g }
sed -r /^\S/{h;b};G;/^user_default:/M{s/(prefix:\s*\S).*/\1user/};P;d /file
sed -r /^chapter/I { s/^/# /; s/(\w)(\w*)/\U\1\L\2/g } file
sed -r /^user_default:/,/^\s*prefix:/{s/\(prefix:\s*).*/\1\/user/} file
sed -r /regex/d
sed -r /sandbox/!s|http://(\S*)|href="/fetch\?domain=\1"|g
sed -r /svn:mergeinfo/,/PROPS-END/{s#(/code)(/(branches|tags|trunk))(.*)#\2\4#} inputfile
sed -r /title.*java/I!d;s/.*:.(.*).}$/\1/ file
sed -r 1 {s/.*/\L&/;s/\b\s\b/_/g} infile
sed -r 1,3s/(\w)(\w*)/\U\1\L\2/g
sed -r 1,9s/(2nd|3rd)/\1 STREET/g file
sed -r 1s/(\w)(\w*)/\U\1\L\2/g file
sed -r 2h;$!N;$!D;${G;s/ leftsquarebrc ^, rightsquarebrc *( leftsquarebrc ^\n rightsquarebrc *).*\s( leftsquarebrc 0-9 rightsquarebrc {8}).*/\2\1/;s/..$//} file
sed -r 3s/(\w)(\w*)/\U\1\L\2/g file
sed -r :a;$!N;/\nhttps:/!{s/\n/ /;ta};s/\s*(\n|$)/\1/;P;D file
sed -r :a;$!N;s/^(( leftsquarebrc ^  rightsquarebrc + ).*)\n\2/\1,/;ta;P;D file
sed -r :a;$!N;s/^((\S+\s).*)\n\2/\1,/;ta;P;D file
sed -r :a;$!{N;ba};s/((hello|world) leftsquarebrc ^\n rightsquarebrc *)\n/\1 /g file
sed -r :a;/'"$PATTERN"'/{x;/./s/.*/echo $((&+1))/e;/./!s/^/1/;x;G;s/'"$PATTERN"'(.*)\n(.*)/'"$PRE"'\2'"$POST"'\1/;ba} file
sed -r :a;/\b leftsquarebrc Ss rightsquarebrc h\S+/!b;s//\n&\n/;h;s/.*\n(.*)\n.*/\1/;s/././g;G;s/(.*)\n(.*)\n.*\n/\2\1/;ta file
sed -r :a;s/( leftsquarebrc 0-9 rightsquarebrc )( leftsquarebrc 0-9 rightsquarebrc {3}( leftsquarebrc ^0-9 rightsquarebrc |$))/\1 \2/;ta
sed -r :a;s/\b(( leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc +)\s.*\s)\2\b/\1*\2*/;ta file
sed -r :a;s/\n/&/6;tb;$!{N;ba};:b;/SEARCH_STRING/!{P;D};s/\n/&/12;tc;$!{N;bb};:c;s/^/#/gm file
sed -r :r;/(^|\n)$/!{$!{N;br}};s/\n/\v/g names sort sed s/\v/\n/g
sed -r \% leftanglebrc Directory "/var/www/html" rightanglebrc %,\% leftanglebrc /Directory rightanglebrc % s%(AllowOverride)\s+None%\1 All%i
sed -r \b leftsquarebrc 0-9 rightsquarebrc {2}\b/!d file
sed -r s! leftsquarebrc ^= rightsquarebrc +=(.*?)& leftsquarebrc ^= rightsquarebrc +=(.*?)& leftsquarebrc ^= rightsquarebrc +=(.*?)!\1 \2 \3! input_file
sed -r s!@(.*)(,.*)!_\1@generic.com\2! FILE
sed -r s!rec:id=(.*?)&name=(.*?)&age=(.*?)!\1 \2 \3! input_file
sed -r s# ( leftsquarebrc 0-9 rightsquarebrc {2}/ leftsquarebrc 0-9 rightsquarebrc {2}) #|\1|# file
sed -r s# leftanglebrc java.lang.String value="( leftsquarebrc ^" rightsquarebrc *)"/ rightanglebrc # leftanglebrc animal rightanglebrc \1 leftanglebrc /animal rightanglebrc #g test.txt
sed -r s#( leftsquarebrc ^| rightsquarebrc +)\|(.*)# leftanglebrc \1 rightanglebrc \2 leftanglebrc /\1 rightanglebrc #
sed -r s#(.*)#/\1/d# file1 sed -f file2
sed -r s#(/ leftsquarebrc a-zA-Z0-9_/ rightsquarebrc +)# leftsquarebrc p rightsquarebrc \1 leftsquarebrc ;p rightsquarebrc #g yourFile
sed -r s#(\w+) #\1 /#
sed -r s#(src|href)="/media( leftsquarebrc ^" rightsquarebrc *)"##g
sed -r s#\ leftanglebrc https?://## file
sed -r s#\\ leftsquarebrc ^ \\{ rightsquarebrc +# #g file.txt
sed -r s#^( leftsquarebrc 0-9 rightsquarebrc {1,10}) ( leftsquarebrc 0-9 rightsquarebrc {1,4})(.*$)#echo $(date --date=@\1 )" - "$(date --date=@$((\1+\2)))#ge file
sed -r s#^( leftsquarebrc ^\; rightsquarebrc +);( leftsquarebrc ^\; rightsquarebrc +); leftsquarebrc ^\; rightsquarebrc +;( leftsquarebrc ^\; rightsquarebrc +);.*$# leftanglebrc tr rightanglebrc  leftanglebrc td rightanglebrc \1 leftanglebrc /td rightanglebrc  leftanglebrc td rightanglebrc \2 leftanglebrc /td rightanglebrc  leftanglebrc td rightanglebrc \3 leftanglebrc /td rightanglebrc  leftanglebrc /tr rightanglebrc #
sed -r s,^(.*/ABC/ leftsquarebrc ^/ rightsquarebrc +).*,\1,
sed -r s/ ( leftsquarebrc ^  rightsquarebrc +:)/\n\1/g input
sed -r s/ +/ /g input.txt cut -d   -f 9-
sed -r s/ +/\'$'\n''/g
sed -r s/ +/\n/g
sed -r s/ leftanglebrc a href="( leftsquarebrc ^ leftsquarebrc " rightsquarebrc *)"/\1&/ input-file
sed -r s/ leftanglebrc script id="live-reload".*? leftanglebrc \/script rightanglebrc /test/g file
sed -r s/ leftanglebrc span class='A' rightanglebrc ( leftsquarebrc ^ leftanglebrc  rightsquarebrc *) leftanglebrc /span rightanglebrc /**1**/g
sed -r s/ leftsquarebrc  leftsquarebrc :cntrl: rightsquarebrc  rightsquarebrc *$/,2012-09-03&/ sample.csv
sed -r s/ leftsquarebrc 0-9 rightsquarebrc +(\. leftsquarebrc 0-9 rightsquarebrc +)*/replacement/
sed -r s/ leftsquarebrc 0-9 rightsquarebrc +/file&.txt/ file_name.txt
sed -r s/ leftsquarebrc 0-9 rightsquarebrc {1,10}$//
sed -r s/ leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}\. leftsquarebrc 0-9 rightsquarebrc {1,3}/XXX.XXX.XXX.XXX/g ./sed_tmp
sed -r s/ leftsquarebrc ^  rightsquarebrc +/@&/g file
sed -r s/ leftsquarebrc ^ leftsquarebrc :print: rightsquarebrc  rightsquarebrc // typescript
sed -r s/ leftsquarebrc ^-0-9 rightsquarebrc +$// input.txt
sed -r s/ leftsquarebrc ^= rightsquarebrc *=( leftsquarebrc ^  rightsquarebrc *) leftsquarebrc ^= rightsquarebrc *=( leftsquarebrc ^  rightsquarebrc *) leftsquarebrc ^= rightsquarebrc *=(.*)/\1;\2;\3/ infile
sed -r s/ leftsquarebrc ^\" rightsquarebrc *( leftsquarebrc \" rightsquarebrc  leftsquarebrc ^\" rightsquarebrc * leftsquarebrc \" rightsquarebrc  leftsquarebrc , rightsquarebrc ?) leftsquarebrc ^\" rightsquarebrc */\1 /g input.txt
sed -r s/ leftsquarebrc std: rightsquarebrc *vector\s{0,1} leftanglebrc /std::vector leftanglebrc /
sed -r s/ rightanglebrc  leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc \| rightsquarebrc +\|ref\|( leftsquarebrc a-zA-Z0-9_ rightsquarebrc +\. leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc ).*/ rightanglebrc  \1/g
sed -r s/ {1,}/\n/g
sed -r s/"\$ITEM /"/; s/\$ITEM //g; s/ ?\$ITEM"/"/ file
sed -r s/"http(s?)_proxy": "(Proxy leftsquarebrc AB rightsquarebrc )?"/"http\1_proxy": "ProxyA"/ inputfile
sed -r s/(  leftsquarebrc 0-9 rightsquarebrc {5} )/\t\1\t/ yourFile.csv
sed -r s/( leftsquarebrc  \t rightsquarebrc + leftsquarebrc ^ \t rightsquarebrc *){3}$// your_file
sed -r s/( leftsquarebrc  leftsquarebrc :upper: rightsquarebrc  rightsquarebrc )/\L\1/g
sed -r s/( leftsquarebrc $% rightsquarebrc )/\\\1/g filename
sed -r s/( leftsquarebrc 0-9 rightsquarebrc +)\.( leftsquarebrc 0-9 rightsquarebrc +)\.( leftsquarebrc 0-9 rightsquarebrc +)\.( leftsquarebrc 0-9 rightsquarebrc +)/\4.\3.\2.\1/g
sed -r s/( leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc {2})( leftsquarebrc a-zA-Z  rightsquarebrc +:)(.*)/$TIME:\1\n$TYPE:\2\n$DATA:\3/
sed -r s/( leftsquarebrc 0-9 rightsquarebrc +\.){3} leftsquarebrc 0-9 rightsquarebrc +.*/& :/g filename
sed -r s/( leftsquarebrc 0-9 rightsquarebrc {2})( leftsquarebrc 0-9 rightsquarebrc +)/\1 \2/g
sed -r s/( leftsquarebrc 0-9 rightsquarebrc {3})/\1\./g;s/^0*//;s/\.0*/\./g;s/\.\.test.com//;s/\.\./\.0\./g regex.test
sed -r s/( leftsquarebrc ^  rightsquarebrc +) ( leftsquarebrc ^  rightsquarebrc +) \ leftsquarebrc ( leftsquarebrc ^ rightsquarebrc  rightsquarebrc +) rightsquarebrc  (.*$)/\1@\2@\3@\4/g f1.txt
sed -r s/( leftsquarebrc ^  rightsquarebrc +)/@\1/g file
sed -r s/( leftsquarebrc ^& rightsquarebrc *&)( leftsquarebrc ^& rightsquarebrc *)(&.*)/echo "\1"$(echo "\2"\|sed "s#\\.##g")"\3"/ge file
sed -r s/( leftsquarebrc ^, rightsquarebrc *)/"\1"/g
sed -r s/( leftsquarebrc ^, rightsquarebrc +,/(/g file
sed -r s/( leftsquarebrc ^," rightsquarebrc *|" leftsquarebrc ^" rightsquarebrc *")/"\1"/g
sed -r s/( leftsquarebrc ^," rightsquarebrc *|" leftsquarebrc ^" rightsquarebrc *")/"\1"/g sed s/""/"/g
sed -r s/( leftsquarebrc ^. rightsquarebrc {12}\.)/\n\1/2g file
sed -r s/( leftsquarebrc ^0-9 rightsquarebrc +19.+)/${color orange}1$color/ thisweek.txt
sed -r s/( leftsquarebrc ^0-9 rightsquarebrc |\b) leftsquarebrc 0-9 rightsquarebrc {3}( leftsquarebrc ^0-9 rightsquarebrc |\b)/\1***\2/g;s/(\b| leftsquarebrc ^0-9 rightsquarebrc ) leftsquarebrc 0-9 rightsquarebrc {4}(\b| leftsquarebrc ^0-9 rightsquarebrc )/\1****\2/g file
sed -r s/( leftsquarebrc a-zA-Z rightsquarebrc )\.( leftsquarebrc a-zA-Z rightsquarebrc )/\1\t\2/g file
sed -r s/( leftsquarebrc a-zA-Z0-9. rightsquarebrc +)  leftsquarebrc 0-9 rightsquarebrc  (.*)/\2 (\1)/g file1.txt
sed -r s/( rightanglebrc ).*/\1/
sed -r s/( |\ leftsquarebrc |\ rightsquarebrc )+/@/g file_to_modify.txt
sed -r s/("XXXX"\s*:\s*)((") leftsquarebrc ^" rightsquarebrc *"| leftsquarebrc ^, rightsquarebrc *)/\1\3YYYY\3/ input
sed -r s/("XXXX"\s*:\s*).*$/\1"YYYY",/ input
sed -r s/(( leftsquarebrc ^, rightsquarebrc *), leftsquarebrc ^, rightsquarebrc *),/\1\n\2,/;P;D file
sed -r s/(( leftsquarebrc ^; rightsquarebrc *;){'$((FIELD-1))'})( leftsquarebrc ^; rightsquarebrc *;)/\1\n\3\n/;h;s/ leftsquarebrc ^\n rightsquarebrc *\n( leftsquarebrc ^\n rightsquarebrc *).*/\1/;y/H1/X2/;G;s/( leftsquarebrc ^\n rightsquarebrc *)\n( leftsquarebrc ^\n rightsquarebrc *)\n( leftsquarebrc ^\n rightsquarebrc *)\n( leftsquarebrc ^\n rightsquarebrc *)/\2\1\4/
sed -r s/((\s+\S+){3})/\1ADD/ fstab
sed -r s/((pwd|password|passwd) leftsquarebrc ^= rightsquarebrc *=).*/\1***/ input
sed -r s/(.*)( leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2}: leftsquarebrc a-zA-Z0-9 rightsquarebrc {2})(.*)/\1\NEW_MAC_ADDRESS\3/g file.txt
sed -r s/(.*)(\?cache_version=)( leftsquarebrc 0-9 rightsquarebrc +)(.*)/echo \1\2$((\3+1))\4/ge file
sed -r s/(.+)#(.+)@(.+)/\U\3\E \1-\2
sed -r s/(.{200})/\1\n/g file
sed -r s/(?s).*?( leftanglebrc div class="mb_t_p_t_post_div" rightanglebrc .*);/\1;/g 1.htm
sed -r s/(NNN){32767}//g bigFile
sed -r s/(PATTERN1).*/\1STUFFI_WANT_TO_INSERT/ file
sed -r s/(TAG|TAA|TGA)$//
sed -r s/(Tijd ...: )(....)(..)(..).(..)(..)(..)./\1 \4.\3.\2 \5:\6:\7/ FILE
sed -r s/(\"key\" : )\" leftsquarebrc ^, rightsquarebrc */\1"Newvalue"/g file.json
sed -r s/(\$dbo- rightanglebrc )( leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc _ rightsquarebrc +)(.*)$/\1 leftsquarebrc "\2" rightsquarebrc \3/g
sed -r s/(\.d leftsquarebrc 0-9 rightsquarebrc +)\.(h leftsquarebrc 0-9 rightsquarebrc +)/\1\2/ inputfile
sed -r s/(\S)\s+( leftsquarebrc  leftanglebrc  rightanglebrc  rightsquarebrc )/\1\2/g file
sed -r s/(\S+)\s*(.*)/id { id: "\1" } value { val: "\2"} word { word: "\1"}/ file
sed -r s/(\S+\s+){10}//;s/-.*$//
sed -r s/(\S+\s+){2}/&\n/;s/\s+-/\n&/;h;y/ /_/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/ file
sed -r s/(\bd leftsquarebrc 0-9 rightsquarebrc +)\.(h leftsquarebrc 0-9 rightsquarebrc +)/\1\2/ inputfile
sed -r s/(\s*)(.*\|)/\2\1/;:a;s/,(.*\|(.*))/\2\n\1/;ta;s/\|//;s/(\S+)(\s+)(\S+)/\2\1\3/g file
sed -r s/(\sLOB.*"L_.+_)( leftsquarebrc 0-9 rightsquarebrc {10})("\()/\1'$myVar'\3/
sed -r s/(\w);(\w+\b)/\1\2;/g filename
sed -r s/(\w)\.(\w)/\1\t\2/g file
sed -r s/(\w+) (.*)/echo "\2"  rightanglebrc  rightanglebrc  \1.txt/e file
sed -r s/(\w?);(\w+\b)/\1\2;/g filename
sed -r s/(^.*)NATIONAL CHARACTER VARYING\(( leftsquarebrc 0-9 rightsquarebrc +)\)/ echo "\1"VARCHAR"("$(echo "scale=0;\2*1.2\/1"\|bc)")"/ge filename
sed -r s/(^| )"/\1``/g filename
sed -r s/(^| )"/\1``/g; s/( leftsquarebrc $% rightsquarebrc )/\\\1/g filename
sed -r s/(^| )"/\1``/g;s/"/'"''"'\1/g filename
sed -r s/(^| leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc )( leftsquarebrc 0-9 rightsquarebrc {2})-/\1\2:/g file
sed -r s/(^| leftsquarebrc ^: rightsquarebrc )$oldIP( leftsquarebrc ^0-9 rightsquarebrc |$)/1$newIP2/g input
sed -r s/(^|,)( leftsquarebrc ^,- rightsquarebrc +-){3,} leftsquarebrc ^, rightsquarebrc +(,|$)/\3/g
sed -r s/(abc|def)_uvw/\1\n_uvw/g;s/( leftsquarebrc ^\n rightsquarebrc )_uvw/\1xyz/g;s/\n//g file
sed -r s/(android:paddingLeft(\s*=\s*\w+))/\1\nandroid:paddingStart\2/g file
sed -r s/(b leftsquarebrc 0-9 rightsquarebrc {1,3}.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}b/$newip/
sed -r s/(catch.* leftsquarebrc ^: rightsquarebrc )(exception)/\1std::\2/ File.cpp
sed -r s/(decimal)\( leftsquarebrc ^) rightsquarebrc *\)/\1/ filename
sed -r s/(if ()($_SESSION leftsquarebrc 'POST' rightsquarebrc  leftsquarebrc '( leftsquarebrc ^' rightsquarebrc *)' rightsquarebrc )==1/1isset(2) && $_SESSION leftsquarebrc 'POST' rightsquarebrc  leftsquarebrc '3' rightsquarebrc ==1/ file
sed -r s/(import/)( leftsquarebrc 0-9 rightsquarebrc {4}. leftsquarebrc 0-9 rightsquarebrc {2}. leftsquarebrc 0-9 rightsquarebrc {2})/1$newdate/g myfile.xml
sed -r s/(name:\{id:) leftsquarebrc ^, rightsquarebrc *(.*alias: )( leftsquarebrc ^; rightsquarebrc *);/\1\3\2\3;/ file
sed -r s/.*(X|Y|Width|Height)\s*:\s*( leftsquarebrc 0-9 rightsquarebrc +)/n\1=\2/
sed -r s/.*:( leftsquarebrc ^: rightsquarebrc *):.*/\1
sed -r s/.*=( leftsquarebrc 0-9 rightsquarebrc +)$/1/ testdata paste -s -d -,
sed -r s/.*SRC=(\S+).*PROTO=(\S+).*DPT=(\S+).*/\1 \2 \3/
sed -r s/.*\/( leftsquarebrc ^\/ rightsquarebrc +)\.pjb/\1/g logfile
sed -r s/.*\:( leftsquarebrc ^\: rightsquarebrc *)\:.*/\1/
sed -r s/.*_( leftsquarebrc 0-9 rightsquarebrc *)\..*/\1/g
sed -r s/.*f?DocumentId=( leftsquarebrc 0-9 rightsquarebrc +).*/1/ testdata paste -s -d -,
sed -r s/.*href="( leftsquarebrc ^" rightsquarebrc *)".*/\1/ file
sed -r s/.{18}/&  / file
sed -r s/;( leftsquarebrc 0-9 rightsquarebrc {6})00;/;\101;/g
sed -r s/DP.*MQ/\n&\n/;h;y/,/;/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/ file
sed -r s/DP= leftsquarebrc ^= rightsquarebrc *MQ=/\n&\n/;h;y/,/;/;G;s/.*\n(.*)\n.*\n(.*)\n.*\n/\2\1/ file
sed -r s/Date:  leftsquarebrc 0-9 rightsquarebrc {4}- leftsquarebrc 0-9 rightsquarebrc {2}- leftsquarebrc 0-9 rightsquarebrc {2}/Date: 2012-09-01/g *.txt
sed -r s/N{32767,}//g bigFile
sed -r s/N{32767}//g bigFile
sed -r s/VARIABLE=" leftsquarebrc ^" rightsquarebrc *"/VARIABLE="'"$1"'"/ file_to_modify
sed -r s/VARIABLE=" leftsquarebrc ^" rightsquarebrc *"/VARIABLE="123456789"/ file_to_modify
sed -r s/XX ( leftsquarebrc ^" rightsquarebrc +)/\1 XX/ filename
sed -r s/\ leftsquarebrc  leftsquarebrc 0-9 rightsquarebrc {2}\/ leftsquarebrc A-Z rightsquarebrc  leftsquarebrc a-z rightsquarebrc {2}\/ leftsquarebrc 0-9 rightsquarebrc {4}: leftsquarebrc 0-9 rightsquarebrc {2}: leftsquarebrc 0-9 rightsquarebrc {2}: leftsquarebrc 0-9 rightsquarebrc {2} \+ leftsquarebrc 0-9 rightsquarebrc +\ rightsquarebrc //g
sed -r s/\..*(\sPTR)/\1/ file
sed -r s/\\vvvec leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\{( leftsquarebrc ^} rightsquarebrc *)\} leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\{( leftsquarebrc ^} rightsquarebrc *)\} leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\{( leftsquarebrc ^} rightsquarebrc *)\}/\\begin\{pmatrix\}\1\\\\\2\\\\\3\\end\{pmatrix\}/g
sed -r s/\b leftsquarebrc 0-9 rightsquarebrc {3}\b/***/g;s/\b leftsquarebrc 0-9 rightsquarebrc {4}\b/****/g file
sed -r s/\b leftsquarebrc a-z rightsquarebrc \w*\b/HOUSE &/g file
sed -r s/\|..(.{10})/|\1/
sed -r s/^ leftsquarebrc 0-9 rightsquarebrc {4}- leftsquarebrc 0-9 rightsquarebrc {2}- leftsquarebrc 0-9 rightsquarebrc {2}/#&/ inputfile
sed -r s/^ leftsquarebrc ^  rightsquarebrc + leftsquarebrc   rightsquarebrc +// in.txt
sed -r s/^ leftsquarebrc ^" rightsquarebrc +"( leftsquarebrc ^" rightsquarebrc *)".*/\1/ file
sed -r s/^ leftsquarebrc ^_ rightsquarebrc *_ leftsquarebrc ^_ rightsquarebrc *_( leftsquarebrc ^- rightsquarebrc *)-.*$/\1/
sed -r s/^ leftsquarebrc ^_ rightsquarebrc +_+((_* leftsquarebrc ^_ rightsquarebrc +){3}).*/\1/
sed -r s/^${adapter_sequence}A{3,}// file
sed -r s/^( *)\/\/(.*myVar.*$)/\1\2/ file
sed -r s/^( +) ( leftsquarebrc 0-9 rightsquarebrc +) (.*)$/1 2 '3'/g file
sed -r s/^( leftsquarebrc 0-9 rightsquarebrc +\.){3} leftsquarebrc 0-9 rightsquarebrc +$/& :/g filename
sed -r s/^( leftsquarebrc 0-9 rightsquarebrc {8}) leftsquarebrc 0-9 rightsquarebrc +/\1/ infile
sed -r s/^( leftsquarebrc ^  rightsquarebrc *) .* (( leftsquarebrc 0-9 rightsquarebrc {1,3}\.){3} leftsquarebrc 0-9 rightsquarebrc {1,3}).*$/\1 \2/
sed -r s/^( leftsquarebrc ^  rightsquarebrc +) ( leftsquarebrc ^  rightsquarebrc ).*$/\1\2/ /root/Desktop/Userlist.txt
sed -r s/^( leftsquarebrc ^  rightsquarebrc +)( )+.*\((.*)\)/\1\2(\3)/g file
sed -r s/^( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *) leftsquarebrc /1r leftsquarebrc /g testfile.txt
sed -r s/^( leftsquarebrc ^_ rightsquarebrc +_+){4}((_* leftsquarebrc ^_ rightsquarebrc +){1}).*/\2/
sed -r s/^( leftsquarebrc a-zA-Z0-9 rightsquarebrc +);.*(serverfile leftsquarebrc 0-9 rightsquarebrc +).*/\1;   \2/ file.txt
sed -r s/^(( leftsquarebrc 0-9 rightsquarebrc +\.){3} leftsquarebrc 0-9 rightsquarebrc +, )*(.*)$/\3/
sed -r s/^(( leftsquarebrc ^  rightsquarebrc + ){8}ice \S+ )(\S+)/\1keep/ inputfile
sed -r s/^(( leftsquarebrc ^; rightsquarebrc *;){4}) leftsquarebrc ^;0-9 rightsquarebrc +/\1/ file
sed -r s/^(.* )?(.*)$/\1\2 \2 \2/ F1
sed -r s/^(.*) +( leftsquarebrc ^  rightsquarebrc +)$/"\1" \2/ file
sed -r s/^(.*) +(.*@.*)/"\1" \2/ file
sed -r s/^(.{10}) leftsquarebrc ^. rightsquarebrc */\1/
sed -r s/^(.{21})A/\1 / a.pdb
sed -r s/^(.{46}) /\1/ infile
sed -r s/^(06700|067|00)( leftsquarebrc 0-9 rightsquarebrc *)/\2/g strings
sed -r s/^..:..:...{6}// file
sed -r s/^.{20}// logfile
sed -r s/^.{5}//
sed -r s/^0*( leftsquarebrc 0-9 rightsquarebrc +)\.0*( leftsquarebrc 0-9 rightsquarebrc +)\.0*( leftsquarebrc 0-9 rightsquarebrc +)\.0*( leftsquarebrc 0-9 rightsquarebrc +)-0*( leftsquarebrc 0-9 rightsquarebrc +)\.0*( leftsquarebrc 0-9 rightsquarebrc +)\.0*( leftsquarebrc 0-9 rightsquarebrc +)\.0*( leftsquarebrc 0-9 rightsquarebrc +),...,(.*)$/\9:\1.\2.\3.\4-\5.\6.\7.\8/ inputfile
sed -r s/^\/src\/( leftsquarebrc ^/ rightsquarebrc +)_( leftsquarebrc ^/ rightsquarebrc +)\/\1$/\/src\/\2\/\1/
sed -r s/^\S+\s+// in.txt
sed -r s/^\\t|( leftsquarebrc ^\\ rightsquarebrc )\\t/\1\t/g file
sed -r s/^\s+$// file cat -s
sed -r s/^\s+$// infile cat -s
sed -r s/^foo:&nbsp;// file.txt
sed -r s/address = \ leftsquarebrc |\ rightsquarebrc //g
sed -r s/foo( *)bar/\x94\1\x98/g; s/foo/Matched/g;s/\x94( *)\x98/foo\1bar/g file
sed -r s/href="( leftsquarebrc ^" rightsquarebrc +)"  rightanglebrc  leftsquarebrc ^ leftanglebrc  rightsquarebrc +/href="\1"  rightanglebrc \1/ file
sed -r s/password= leftsquarebrc ^  rightsquarebrc +/ /g $file
sed -r s/ts\(((\( leftsquarebrc ^() rightsquarebrc *\)| leftsquarebrc ^(), rightsquarebrc )*),((\( leftsquarebrc ^() rightsquarebrc *\)| leftsquarebrc ^(), rightsquarebrc )*),((\( leftsquarebrc ^() rightsquarebrc *\)| leftsquarebrc ^(), rightsquarebrc )*),((\( leftsquarebrc ^() rightsquarebrc *\)| leftsquarebrc ^(), rightsquarebrc )*)\)/ts(\1,\7,\3,\5)/g *.F
sed -r s/url ( leftsquarebrc ^" rightsquarebrc  leftsquarebrc ^% rightsquarebrc +) %/url "\1" %/g
sed -r s/url ( leftsquarebrc ^% rightsquarebrc +) %/url "\1" %/g
sed -r s:site1.com(/blog/ leftsquarebrc 0-9 rightsquarebrc {4}/ leftsquarebrc 0-9 rightsquarebrc {2}/ leftsquarebrc 0-9 rightsquarebrc {2}):site2.com/\1:
sed -r s@( leftsquarebrc ^\t rightsquarebrc ) leftsquarebrc * rightsquarebrc @\1\a@g; s@ leftsquarebrc * rightsquarebrc ( leftsquarebrc ^\t\r rightsquarebrc )@\a\1@g; s@ leftsquarebrc * rightsquarebrc @@g; s@\a@*@g file
sed -r s@( leftsquarebrc ^\t rightsquarebrc ) leftsquarebrc * rightsquarebrc @\1__0x2A__@g; s@ leftsquarebrc * rightsquarebrc ( leftsquarebrc ^\t\r rightsquarebrc )@__0x2A__\1@g; s@ leftsquarebrc * rightsquarebrc @@g; s@__0x2A__@*@g file
sed -r s@\ leftsquarebrc  leftsquarebrc 0-9 rightsquarebrc +\ rightsquarebrc @@g
sed -r s@^(\S+\s+\S+\s+\S+\s+\S+).*@\1@ file
sed -r s@^.*http://( leftsquarebrc ^/ rightsquarebrc +).*@1@ infile
sed -r s_ leftsquarebrc ^/ rightsquarebrc  rightanglebrc _/ rightanglebrc _g file
sed -r s_( leftanglebrc amount quantity=" leftsquarebrc 0-9 rightsquarebrc +" rightanglebrc )12.00( leftanglebrc /amount rightanglebrc )_\124.00\2_g file.xml
sed -r s_((checksum|compressed)=\").*(\")_\1\3_ -i filename
sed -r s_.+_cp & ~/tmp/_ ~/tmp/my_file_list.txt bash
sed -r s_^(http|file):/a_\1:/d_
sed -r s|(.*://)?( leftsquarebrc ^/ rightsquarebrc *).*|\2| file
sed -r s|(style="position:absolute;top: leftsquarebrc 0-9 rightsquarebrc +)(px)?(;left: leftsquarebrc 0-9 rightsquarebrc +)(px)?(" rightanglebrc )|\1px\3px\5|g file
sed -r s|.*/( leftsquarebrc ^/ rightsquarebrc *)/.*|\1| file
sed -r s|\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ rightsquarebrc ||g
sed -r s|\\newline( leftanglebrc /Text rightanglebrc )|\1|g file
sed -r s|wxT\(( leftsquarebrc ^) rightsquarebrc *)\)|\1|g file
sed -r {filehere} -e s/ leftsquarebrc A-Z rightsquarebrc /\L&/g;s/ /_/g -i
sed -r {s#( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9,. rightsquarebrc *)-\|#-\1\|#g}
sed -s -i 1i\\ *.txt
sed -s -i 1s/.*/ &/ *.txt
sed -s -n -e /^Agent Name: agent10479475/,/^==/ p run*.txt
sed -s 1d */*filename*.txt
sed ... ./c/file.html ./a/file.html ./b/file.html ./d/file.html
sed ... file
sed ... file.css
sed ... inputfile mv tmpfile inputfile
sed .... tr \n  
sed / *- *\$ leftsquarebrc 0-9 rightsquarebrc \+\. leftsquarebrc 0-9 rightsquarebrc \{2\}/s/// file
sed / 2001 /s/^/#/ file
sed / leftanglebrc !-- BEGIN -- rightanglebrc /,/ leftanglebrc !-- END -- rightanglebrc /d file
sed / leftanglebrc !-- PAGE TAG -- rightanglebrc /,/ leftanglebrc !-- PAGE TAG -- rightanglebrc / { 1 { s/^.*$/Replace Data/; b; }; d; };
sed / leftanglebrc !--/{ N; N; s/.*\n\(.*food="mango".*\)\n.*-- rightanglebrc .*/\1/; } file
sed / leftanglebrc ?xml .*? rightanglebrc /a \ leftanglebrc !-- comment -- rightanglebrc  test.xml
sed / leftanglebrc B leftsquarebrc 0-9 rightsquarebrc * rightanglebrc /,/ leftanglebrc \/B leftsquarebrc 0-9 rightsquarebrc * rightanglebrc /d
sed / leftanglebrc B1 rightanglebrc /,/ leftanglebrc \/B3 rightanglebrc /d infile
sed / leftanglebrc BEGIN rightanglebrc /r file2
sed / leftanglebrc MyTag rightanglebrc /!b;:a;/ leftanglebrc \/MyTag rightanglebrc /!{$!{N;ba}};/MyText1/s/.*\n/& leftanglebrc FoundTag1 rightanglebrc FoundIt leftanglebrc \/FoundTag1 rightanglebrc \n/ xml_file
sed / leftanglebrc Second rightanglebrc /,/ leftanglebrc \/Second rightanglebrc /{s/ leftanglebrc startdate rightanglebrc 01011970 leftanglebrc \/startdate rightanglebrc / leftanglebrc startdate rightanglebrc 01011979 leftanglebrc \/startdate rightanglebrc /} Data.xml
sed / leftanglebrc \/preferences rightanglebrc /i\ADD SOME TEXT\nADD SOME MORE TEXT file
sed / leftanglebrc \/time rightanglebrc /I{n;:A;N;h;/ leftanglebrc geo rightanglebrc /I!{H;bA};/ leftanglebrc geo rightanglebrc /I{g;s/ leftanglebrc \/time rightanglebrc / leftanglebrc \/tags rightanglebrc /i}} file.txt
sed / leftanglebrc b rightanglebrc /{s/ leftsquarebrc a-z rightsquarebrc *\./\u&/} input
sed / leftanglebrc div class="classname" rightanglebrc  leftanglebrc a href="\/.*" rightanglebrc / { h; s/ leftanglebrc div class="classname" rightanglebrc  leftanglebrc a href="\///; s/\(.*\)/\L\1/; s/ /-/g; s/ leftsquarebrc () rightsquarebrc //g; x; s/\( leftanglebrc div class="classname" rightanglebrc  leftanglebrc a href="\/\)\(.*\)/\1/; G; s/\n//}
sed / leftanglebrc div class="classname" rightanglebrc  leftanglebrc a href="\/.*" rightanglebrc / { s/\(.*\)/\L\1/; s/ /-/3g; s/ leftsquarebrc () rightsquarebrc //g }
sed / leftanglebrc div rightanglebrc /,/ leftanglebrc \/div rightanglebrc / {/ leftanglebrc div rightanglebrc /n; / leftanglebrc \/div rightanglebrc / ! {s/$/ leftanglebrc br \/ rightanglebrc /}} test.html
sed / leftanglebrc div rightanglebrc /,/ leftanglebrc \/div rightanglebrc /s/ leftsquarebrc ^ rightanglebrc  rightsquarebrc $/ leftanglebrc br \/ rightanglebrc / test.html
sed / leftanglebrc function type="class" rightanglebrc /!b;N;N;/ leftanglebrc function type="class" rightanglebrc \s*\n\s* leftanglebrc arg name="class.name" rightanglebrc com.mycompany.name.UnLockIssueFunction leftanglebrc \/arg rightanglebrc \s*\n\s* leftanglebrc \/function rightanglebrc /d file
sed / leftanglebrc jobResulsDir/s/ leftanglebrc jobResulsDir/ leftanglebrc CommCellUser userName="'$4'" password="'$5'"  rightanglebrc   leftanglebrc \/CommCellUser rightanglebrc  '$test'  leftanglebrc jobResulsDir /
sed / leftanglebrc marquee/,/marquee rightanglebrc / d index.php
sed / leftanglebrc name rightanglebrc /{h;s/name rightanglebrc /id rightanglebrc /g;G}
sed / leftanglebrc script rightanglebrc /{s/ leftanglebrc script rightanglebrc .*$//;q;} infile
sed / leftanglebrc script/,/ leftanglebrc \/script rightanglebrc /d inputfile
sed / leftanglebrc start rightanglebrc /,/ leftanglebrc \/start rightanglebrc /s!\( leftanglebrc a rightanglebrc 2 leftanglebrc /a rightanglebrc  leftanglebrc b rightanglebrc 2\) leftanglebrc /b rightanglebrc !\10 leftanglebrc /b rightanglebrc ! input
sed / leftanglebrc start rightanglebrc /,/ leftanglebrc \/start rightanglebrc /{/ leftanglebrc a rightanglebrc  leftsquarebrc   rightsquarebrc *2 leftsquarebrc   rightsquarebrc * leftanglebrc \/a rightanglebrc /s! leftanglebrc b rightanglebrc 2 leftanglebrc ! leftanglebrc b rightanglebrc 20 leftanglebrc !} input
sed / leftanglebrc tag rightanglebrc / r file2.txt file1.txt
sed / leftsquarebrc ,0-9 rightsquarebrc * leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc acd rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc ,0-9 rightsquarebrc */{N;s/ leftsquarebrc ,0-9 rightsquarebrc * leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc acd rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc ,0-9 rightsquarebrc *\n---//} test.txt
sed / leftsquarebrc 0-9 rightsquarebrc \{3\}/d filename.txt
sed / leftsquarebrc 0-9 rightsquarebrc {3}/d filename.txt
sed / leftsquarebrc ^#!+ rightsquarebrc /d
sed /"stackov\/er;flo\.w users are great"/i\proud sta{ckov,er member file
sed /# leftanglebrc \(.*\) rightanglebrc /s|.*|cat \1|e filename
sed /## Screenshot/,/##/{/## Changelog/!d}
sed /## Screenshot/,/##/{/Screenshot/d;/##/!d}
sed /#region License/,/#endregion/d ploum.cs
sed /$START/,/$END/ { /$END/'!' d; }
sed /$i/d
sed /$mirrorRegex/s/# //
sed /$myvar/d data.txt
sed /$myvar/d data.txt
sed /$username/{:a;N;/n---  leftsquarebrc ^ leftsquarebrc :blank: rightsquarebrc  rightsquarebrc * ---$/{s/.*n//;b};ba} inputfile
sed /'"$regex"'/!b;s//\n\1\n/;s/.*\n\(.*\)\n.*/\1/ file
sed /(.*) leftsquarebrc   rightsquarebrc *$/{N; s/) leftsquarebrc   rightsquarebrc *\n leftsquarebrc   rightsquarebrc *{/&\npr_debug();/g}
sed /,$/d
sed /,\.-$/s//& /
sed /--- end/i--- $username ---ndatadata data datandata data data datan
sed /-r leftsquarebrc 0-9 rightsquarebrc /{h;d};H;/Pom.xml/!d;x file
sed /.*5/d;/.*1/i$(sed -n '/.*5/p' FILE) FILE sed -n /.*5/p FILE
sed /.*=.*\x27.*\x27.*/ {h;s/ leftsquarebrc ^\x27 rightsquarebrc *\x27\(.*\)/\n\x27\1/;s/ //g;x;s/\( leftsquarebrc ^\x27 rightsquarebrc *\).*/\1/;G;s/\n//g}
sed /.*tld/{N;s/.*tld\n.*Never/Replaced\nSuccess/} file
sed /./d;p;p test.txt
sed /.leaflet-right/{n;s/right/left/;}
sed /192.168.1.2/s/$/ myalias/ file
sed /:\s*$/d
sed /ABC/s/.*/AAAAAAA/ file
sed /ALTER TABLE .* ADD KEY .*/d FILE
sed /BBB/!b;n;c999 file
sed /CLIENTSCRIPT="foo"/a CLIENTSCRIPT2="hello" file
sed /COURSE/d;/CREDIT/d rsh1 sort -u -k 1,1 cut -d -  -f 1 paste -d - 
sed /CREATE DATABASE\|USE/s/Batch/pd_Batch/ test.sql
sed /CREATE TABLE \( leftsquarebrc ^  rightsquarebrc *\)/ s//DROP TABLE IF EXISTS \1; &/
sed /DIRLIST/ s:"$: $logFolder ":
sed /DIVIDER/{n;s/.*/ leftsquarebrc begin rightsquarebrc & leftsquarebrc end rightsquarebrc \n/;} file1
sed /DROP/ {/INDEX/d; /CONSTRAINT/d} file
sed /ERROR java-class - Exception/{:a;$!N;/\n\s*at\s.*/s///;ta;D} file
sed /File/,/;/!d;/;/q file
sed /First/r file1.txt infile.txt
sed /HEADER 1/{n;:l N;/HEADER 2/b; s/\n//; bl} input
sed /HEADER 1/{n;s/$/ ABCDE/} input.txt
sed /Hello/{s/.*/&\nSomething on the next line/;:a;n;ba} filename
sed /Jagan/s/$var1/HELLO/
sed /LINE/{H;x;:r;n;/LINE/br;x;d};h;d
sed /Location/{n; d;}
sed /MANAGER_WIDGET/!s/\.\( leftsquarebrc jscss rightsquarebrc \+\)\"/\.min\.\1\"/g index.html
sed /Non Unique Subdivision/,/^/d
sed /Non Unique Subdivision/{N;d;}
sed /OLD/ {p; s/OLD/NEW/g}
sed /PATH/ s,$,:/usr/java/jdk1.6.0_38/bin, ~/.bash_profile
sed /PATTERN1/,/PATTERN2/s/.\{78\}/&\n/g ./infile
sed /Part1/,/Part2/d filename
sed /SEARCH\/TEXT/{N;d;} yourFile
sed /STUFFGOESHERE/ r file1.txt file2.txt
sed /Service: System Uptime/,/host_name/{/host_name/s|$|,NewHost|} input_file
sed /Seven/{:a;N;/Fifteen/!ba;s/\n/ /g} input.txt
sed /Test\/Movie2/,/@/d; header.txt
sed /Test\/Movie2/,/@/g; header.txt
sed /The second line/,$d inputfile
sed /The second line/q inputfile
sed /User logged in/{h;d};H;x file
sed /VG00/ { N; s/\n// }
sed /VG00/ { N; s/\n//; s/ \{5,\}/     /; }
sed /VIDIO/ s/.*\(VIDIO\w*\)/ALOGI("\1");   &/ inputfile
sed /\ leftanglebrc  leftsquarebrc 0-9 rightsquarebrc \{2\}\ rightanglebrc /!d file
sed /\ leftanglebrc TXT_accesp\ rightanglebrc /,/\ leftanglebrc \/TXT_accesp\ rightanglebrc /s@ leftanglebrc /\?p rightanglebrc @@g INPUT_FILE
sed /\ leftanglebrc \!--fff309--\ rightanglebrc /,/\ leftanglebrc \!--\/fff309--\ rightanglebrc /d your_file
sed /\ leftanglebrc a2\ rightanglebrc /!b;/\ leftanglebrc b2\ rightanglebrc /!d file
sed /\ leftsquarebrc BEGIN AccountID\ rightsquarebrc /,/\ leftsquarebrc END AccountID\ rightsquarebrc /!d;/\ leftsquarebrc BEGIN AccountID\ rightsquarebrc /{h;d};/./H;/\ leftsquarebrc END AccountID\ rightsquarebrc /!d;g;s/\n*\ leftsquarebrc  leftsquarebrc ^\n rightsquarebrc *\n*//g;s/\n/,/g;s/\s*//g;ta;:a;s/,//9;t;s/$/0,0,0/ file
sed /\ leftsquarebrc base\ rightsquarebrc /,/gpgkey=/{/gpgkey=/s/$/\'$'\n''exclude = postgres*/;} filename
sed /\ leftsquarebrc notice\ rightsquarebrc /{h;d};x;/./!{x;d};x;H;$!d;x;s/ leftsquarebrc ^\n rightsquarebrc *\n// file
sed /\( leftsquarebrc ^  rightsquarebrc \+ \+\)\{4\}0\+ /d
sed /\(.\).*\1/d
sed /\(2.6.18-157.el5\)/,+4 { H; d; }; $ { p; x; } /boot/grub/menu.lst
sed /\(patt\)ern/ {s//new\1/} inputfile
sed /\(pattern\).*/{s//\1/; q;}
sed /\*\*/,/==/d FILE
sed /\.com/s/^/#/
sed /\/\*.*\*\// d; /\/\*/,/\*\// d file
sed /\/\*/!b;:a;/\*\//!{$!{N;ba}};{/$Log:/d} filename
sed /\/\*\*/,/\*\// {s/.*\*\/.*/@Override/p; d}
sed /\/as.sh/s/^#//
sed /\/as.sh/s/^/#/
sed /\/bbb/d filename
sed /\ba2\b/!b;/\bb2\b/!d file
sed /\n/!N;/\n.*\n/!N;/\n.*\n.*PINITIAL BALANCE/{$d;N;N;d};P;D
sed /\o251/d
sed /\t\.\t/d input.txt
sed /^  leftsquarebrc ^, rightsquarebrc *$/s/^/ rightanglebrc /
sed /^ "status": {/,/^  }$/!d;/^    "errors": \ leftsquarebrc /,/^    \ rightsquarebrc ,/!d file.txt
sed /^ * leftanglebrc column_ leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \+ *\/ rightanglebrc  *$/d file.xml
sed /^ * year/,/^ * _cons/{/^ * year/!{/^ * _cons/!d;}} input.txt
sed /^ *#/!{s/X/Y/g;} file.txt
sed /^ *#/b;s/^ leftsquarebrc ^| rightsquarebrc *//;s/ leftsquarebrc ^| rightsquarebrc *$// filename
sed /^ *$/d yourfile.csv
sed /^ /d; N; s/\n/ / inputfile
sed /^ \*.*\. leftsquarebrc hc rightsquarebrc pp$/d file
sed /^ leftsquarebrc   rightsquarebrc *$/d file
sed /^ leftsquarebrc  X rightsquarebrc *$/d yourfile.csv
sed /^ leftsquarebrc  \t rightsquarebrc *$/d
sed /^ leftsquarebrc  \t rightsquarebrc *$/{: a;N;/#matchee/!P;D;/^ leftsquarebrc  \t rightsquarebrc *$/b a} file.txt
sed /^ leftsquarebrc  \t rightsquarebrc *ARRAY=.*;/d in
sed /^ leftsquarebrc  leftsquarebrc :lower: rightsquarebrc  leftsquarebrc :punct: rightsquarebrc  rightsquarebrc /d file
sed /^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *#/!s/test/TEST/g /path/to/infile
sed /^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *ssid="$SSID" leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$/,/}/s/^( leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *psk=") leftsquarebrc ^" rightsquarebrc */1$PSK/ wpa.txt
sed /^ leftsquarebrc 0-9 rightsquarebrc /d
sed /^ leftsquarebrc 0-9 rightsquarebrc \{1,2\}$/! s/^/#/ INPUTFILE
sed /^ leftsquarebrc 0-9 rightsquarebrc \{1,2\}\(\. leftsquarebrc 0-9 rightsquarebrc \+\)\?$/! s/^/#/ INPUTFILE
sed /^ leftsquarebrc 0123456789 rightsquarebrc \+$/{x;p;x;}
sed /^ leftsquarebrc ^# rightsquarebrc / s!${KEY}=.*!${KEY}=${NEWVAL}! infile
sed /^ leftsquarebrc ^# rightsquarebrc /s/^/chr/ file
sed /^ leftsquarebrc ^: rightsquarebrc \+:\s*$/d
sed /^ leftsquarebrc a-z leftsquarebrc :punct: rightsquarebrc  rightsquarebrc /d file
sed /^ rightanglebrc /!s/ leftsquarebrc ^ACGTN rightsquarebrc //ig input.txt
sed /^ rightanglebrc /!s/ leftsquarebrc a-z rightsquarebrc /C/g file.txt
sed /^#!/n;/example/d file
sed /^#.*#$/{s/#//g;h;d};:a;G;s/Linux\(.*\)\n\(.*\)/\2\1/;ta;s/\n.*// file.txt
sed /^#/ d
sed /^#/!s/test/TEST/g /path/to/infile
sed /^#/,/^\$/{/^#/!{/^\$/!d}} file.txt
sed /^#CODE$/,/^#ENDCODE$/!s/foo/bar/
sed /^#Comment to append text after/a\n leftsquarebrc $username.conn rightsquarebrc nipAddress=$ipAddrnportNumber=$portNum input
sed /^#begin$/{N;N;s/#begin\n\(.*\)\n#end/replaced \1/;} file
sed /^$/N;/^\n$/D inputfile
sed /^$/d file
sed /^$/d fileName sed G
sed /^$/d yourFile
sed /^$/d;s/^/^/ B grep -v -f A
sed /^$1/d filename
sed /^$SERIAL_NUM,/s/STATUS/OK/g file.csv
sed /^$input/ s/0/1/ my_course
sed /^( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc )/! s/^/(000) / testfile
sed /^-----THIS STUFF IS USELESS-----$/,$d file
sed /^0x\S\{4\}\(\( \S\S\)\{8\}\).*/{s//\1/;H};$!d;x;s/\n//g;s/ \(.\)\(.\)/\2\1/g file
sed /^1/s/\(.\{4\}\)\(.\{9\}\)/\1123456789/ $DEST/$FILE_NAME$DATE.txt
sed /^123/ s/0/1/ my_course
sed /^@/ s/$//1/g file
sed /^@/!d;s// rightanglebrc /;N
sed /^ARRAY=.*;/d in
sed /^A\|^B/!d
sed /^A\|^B/!d 1.txt
sed /^BEGIN:VEVENT/,/^END:VEVENT/{/^\(UID\|SEQUENCE\)/d} file
sed /^Filename:/s!\(./debs/\)\(.*\).deb!\1download.php?p=\2! /path/to/input
sed /^Keyword:$/d file
sed /^Line2:/s/$/ Please help me/
sed /^Numbers/ { N; N; s/^\(.*\)\(\n\)/\1\2000\n/ } infile
sed /^P/d file.txt
sed /^Path/{N;s/\n         //;}
sed /^START.*/,${s/banana/stackoverflow/g} inputfile
sed /^Title/{N;/\nAuthor:/!{s/^\(....................\).*\n.*$/\1/;};} test-file.txt
sed /^Title/{N;/\nAuthor:/!{s/^\(.\{30,50\}\).*\n.*$/\1/;};} test-file.txt
sed /^VAR.*="/,/^"/ {//! s/^/A/} testfile.txt
sed /^XXXX /s/ rightsquarebrc $/, 'member3' rightsquarebrc /
sed /^\ leftsquarebrc .*\ rightsquarebrc $/d inputfile
sed /^\ leftsquarebrc .*\.conn\ rightsquarebrc /,/^\s*$/d file
sed /^\ leftsquarebrc machine leftsquarebrc 0-9 rightsquarebrc \{1,\}\.conn\ rightsquarebrc /,/^\s*$/d file
sed /^\$/d /tmp/foo
sed /^\( leftsquarebrc ^@ rightsquarebrc *@ leftsquarebrc ^@ rightsquarebrc *\)@pattern@\(.*\)/ s//\1@replace@\2/
sed /^\( leftsquarebrc ^| rightsquarebrc *|\)\{35\} leftsquarebrc ^| rightsquarebrc *$/d filename
sed /^\/\*/,/\*\//{s|^/\*||; s|\*/$||; b a};s/^/    /;:a filename
sed /^\s* leftanglebrc !--/!b;N;/ leftanglebrc task rightanglebrc /s/.*\n//;T;:a;n;/^\s*-- rightanglebrc /!ba;d file
sed /^\s*$/d
sed /^\s*$/d file
sed /^\s*LOG\s*(.*;\s*$/ d ; /^\s*LOG/,/;\s*$/ d infile
sed /^\s*\S*\s*\S*\s*\S*\s*$/d file wc -l
sed /^```{r/,/^```$/b;/^`r/b;:a;/\\\\$/{$!{N;ba}};s/\(\$\$\)\( leftsquarebrc ^$ rightsquarebrc *\(\$ leftsquarebrc ^$ rightsquarebrc *\)*\$\$\)\|\(\$\)\( leftsquarebrc ^$ rightsquarebrc *\$\)/\1\4latex \2\5/g file
sed /^all:/ s/$/ anotherthing/ file
sed /^all:/ s/$/ anotherthing/ file
sed /^auto_increment_offset/s/=.*/= ${HOSTNAME#${HOSTNAME%?}}/ /etc/mysql/conf.d/my.cnf
sed /^b/d yourfile mv yourfile~ yourfile rm yourfile~
sed /^category/{x;s/^/X/;/^X\{3\}$/ba;x};d;:a;x;:b;$!{n;/^done/!bb} file
sed /^disable_functions/s/$/exec,system,shell_exec,passthru,/ /etc/php5/apache2/php.ini
sed /^foobar/{H;$!d;s/.*//};$G;s/\n*// input_file
sed /^food.type/ s/=.*$/=banana/
sed /^module/,/);/!b;/);/a\NEWCODE file
sed /^priority/{s/.*/&\nexclude = php*/;:a;n;ba} /etc/yum.repos.d/epel.repo
sed /^rs.*NA/,+3d test_data
sed /^sdf$/,+3 d file
sed /^sdf$/,+3 {/^sdf$/b skip; d; :skip} file
sed /^sms;deliver;/!y/"// yourfile sed -n /^sms;deliver;/!b;:r;${p;b};N;/\nsms;deliver;/!{s/\n//;br};P;s/.*\n//;br
sed /^unsigned long long __c64/,/}/d
sed /^user1/d filename
sed /^user4:/ s/: leftsquarebrc ^: rightsquarebrc */:something_else/ infile
sed /^values=/s/\( leftsquarebrc ^" rightsquarebrc *\)"$/\1 '"$wordtoadd"'"/ input
sed /^zone "domain4.com" {$/,/^};/d file
sed /a/d toy
sed /aaa/,/ddd/!b;/ddd/a\hello file
sed /aaa/h;$!d;x file
sed /alex/!d; /eva/!d; /tom/!d
sed /alias/{N; / leftsquarebrc ^0-9 rightsquarebrc 172\.16\.202\.21$/s/\n/ MAC 00:01:02:aa:bb:cc&/;} file
sed /all.css/ r $BLA $FILE
sed /bbb\tbbb/{ N; s/.*ccc\tccc/  eee\teee/; } foo1.txt
sed /begin/,/end/ !s/before/after/g
sed /bundles.=.array/ { :a; N; /);/bb; P; s/ leftsquarebrc ^\n rightsquarebrc *\n//; ba; :b; /,\n/! s#\n#,\n#; s#\( leftsquarebrc  \t rightsquarebrc *\)\( leftsquarebrc ^\n rightsquarebrc *\)\n#\1\2\n\1new FOS\\UserBundle\\FOSUserBundle()\n#; } app/AppKernel.php
sed /burger.co.us/d
sed /cdef/r add.txt input.txt
sed /daemon www.*Y=/{:l s/\(Y=\(0,\)*\) leftsquarebrc 0-9 rightsquarebrc */\10/;/Y=\(0,\)*0\( leftsquarebrc ^,0-9 rightsquarebrc \|$\)/!bl} input
sed /define('WP_DEBUG', false);/idefine('FS_METHOD', 'ftpext');
sed /desc/ s/{\( leftsquarebrc ^} rightsquarebrc *\)}/ leftsquarebrc \1 rightsquarebrc /g filename
sed /doadoodle  leftanglebrc parameters rightanglebrc /,$!b;//{x;//p};//!H;$!d;x;s//&\nrc=$?\necho "$rc  is return code of last doadoodle" \nexit $rc/ file
sed /ePlug.prototype.listInfo = function () {/, /};/d file
sed /end$/N;//s/end/finish/g testfile.rb
sed /export HOME=/a cd ${HOME}/tmp # added \n rm -rf packed* # added yourfile
sed /file1.jar (MD5:  leftsquarebrc 0-9A-Fa-f rightsquarebrc *)/s/(MD5:  leftsquarebrc ^) rightsquarebrc *)/(MD5: $(md5 file1.jar | awk '{print $4}'))/ md5 file1.jar awk {print $4}
sed /font *size *= *"4" *face/s| leftanglebrc b rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc /b rightanglebrc | leftanglebrc b rightanglebrc  leftanglebrc title rightanglebrc \1 leftanglebrc /title rightanglebrc  leftanglebrc /b rightanglebrc |g
sed /foo/{s/(' leftsquarebrc ^' rightsquarebrc *')/n&n/g;s/(n' leftsquarebrc ^. rightsquarebrc *).( leftsquarebrc ^' rightsquarebrc *Z')/1-2/g;s/(n' leftsquarebrc ^. rightsquarebrc *).( leftsquarebrc ^' rightsquarebrc *uF')/1_2/g;s/n//g} inputfile
sed /green/!s/.*// input
sed /green/s/.*// input
sed /grep-like regex/ s/pattern to replace/replacement/ -i file
sed /house/!b;/big/d file
sed /href/{ /language/s/ leftanglebrc match rightanglebrc / leftanglebrc replace rightanglebrc / }
sed /keyword1/s/.*=s*'( leftsquarebrc ^' rightsquarebrc +)';/1/ inputfile
sed /license_number/s/"\( leftsquarebrc ^" rightsquarebrc *\)"/"foo"/ inputfile
sed /mark1/,/mark2/d;/mark3/,$d
sed /mike/,/\ leftsquarebrc account\ rightsquarebrc /{s/\(expdate leftsquarebrc ^= rightsquarebrc \+=\).*/\1 2016-02-14/} yourfile
sed /modules..= rightanglebrc .array/,/),/ { / leftsquarebrc ^(, rightsquarebrc $/ s//&,\n        '\''NewModule'\''/ } file.php
sed /myname rightanglebrc .*\"\s*$/N;s|\"\s*\n*\s*myURL=\"| leftanglebrc /myname rightanglebrc  leftanglebrc myurl rightanglebrc | file.xml
sed /name1 + name2 + name3/s/ leftsquarebrc ^  rightsquarebrc *\ rightanglebrc /&_name4/ file sed s/old/new/g
sed /name1 + name2 + name3/s/ leftsquarebrc ^  rightsquarebrc *\ rightanglebrc /&_name4/;s/old/new/g file
sed /new Tab/s/ *//g;s/newTab/new Tab/ data.txt
sed /organization/p;s/organization/company/p;s/company/long name/ file
sed /pattern to match/d ./infile
sed /pattern/!d file.txt
sed /pattern/!s/.*/replacement/ file.in
sed /pattern/,/;$/ d infile
sed /patterntosearch4/i\\n\n\n file
sed /public String getFirstName()/s/.*\(" leftsquarebrc ^" rightsquarebrc *"\).*/@XmlElement(name=\1)\n&/ file
sed /pw_uuid/s/"pw_uuid" : \( leftsquarebrc A-Z0-9- rightsquarebrc *\)/"pw_uuid" : "\1"/g file
sed /pw_uuid/s/\(^ leftsquarebrc ^: rightsquarebrc *\): \( leftsquarebrc A-Z0-9- rightsquarebrc *\)/\1: "\2"/g file
sed /regex/ { s/pattern1/replacement/; s/pattern2/replacement/ }
sed /regex1/,/regex2/!d INPUT_FILE
sed /s$/!d;s/s$//
sed /sectionB/,/\ leftsquarebrc /s/username.*/username = valueX/ input
sed /some_part_in_A/rB.txt A.txt
sed /start host1/,/end host1/s/,0,/,1,/g
sed /start host1/,/end host1/{s/\(host1,def,java,es,dev \)L2,0/\1L2,1/g} file
sed /start/,/end/!d
sed /start/,/end/s/foo/bar/ file
sed /test1/,/test2/{/test2/!d}
sed /timebomb/s/log/txt/ test.txt
sed /twolines/{G;s/\(two\)\(lines\)\(\n\)/\1\3\2/;}
sed /while/!d;q file
sed /{/!b;:a;$!N;/}/!ba;/font-family:\s*"foobar";/s/.*/\/* & *\// file
sed /{/b;/pattern/{s//replacement/;:a;n;ba} file
sed /{riak_jmx/,/ rightsquarebrc },/{ s/enabled, false/enabled, true/;} ./app.config
sed /}; leftsquarebrc ^} rightsquarebrc *};/{s/}; leftsquarebrc ^} rightsquarebrc *};/}; };/;b};/};/!b;:a;N;/\n leftsquarebrc ^} rightsquarebrc *};/!ba;s/ leftsquarebrc ^; rightsquarebrc *\n.*\n leftsquarebrc ^} rightsquarebrc */ / inputfile
sed 0,/ leftanglebrc ?xml.* rightanglebrc /! s/ leftanglebrc ?xml.* rightanglebrc //g -e 2i  leftanglebrc frame rightanglebrc  -e $a  leftanglebrc /frame rightanglebrc 
sed 0,/Apple/s/.*Apple.*/Apricot/
sed 0,/CUT HERE/d file
sed 0,/Matched Keyword/s//Matched Keyword\nNew Inserted Line/ myfile.txt
sed 0,/RE/s//to_that/ file
sed 0,/^ leftsquarebrc ^# rightsquarebrc / s/^ leftsquarebrc ^# rightsquarebrc .*/#\0/ file.txt
sed 0,/^bin$/d
sed 0,/sd/ { s/sd/paragraphnsd/ } file
sed 0,/tat/{/tat/d;} inputfile
sed 1 ! d result.txt
sed 1 !H;1 h;$ {x;s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *network={\n leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *ssid="Put_your_ssid_here" leftsquarebrc ^} rightsquarebrc *}//g;} YourFile
sed 1 s/.$// file
sed 1!{/pattern/d} file
sed 1,/ leftanglebrc c rightanglebrc /s/^ leftanglebrc c\(.*\)c rightanglebrc $/ leftanglebrc e\1e rightanglebrc /
sed 1,/### BEGIN GZIP DATA ###/ d
sed 1,/.*Visible.*/d originalfile
sed 1,/@@@/d; /^$/d
sed 1,/FECHA/d;/PROCHAIN/,$d inputfile
sed 1,/TER/d $i
sed 1,/^$/d data.txt
sed 1,/^$/d file.txt
sed 1,/^\r$/d data.txt
sed 1,/^\r\{0,1\}$/d data.txt
sed 1,/^the last line$/d cat newlic.txt
sed 1,/baz/s/foo/bar/g
sed 1,/yahoo/d data.txt
sed 1,1292g yourfile grep -n xyz
sed 1,1{N;/^\n$/d}
sed 1,2/^$/d
sed 1,2d $PGLIST
sed 1,2d; $d file mv file.new file
sed 1,30d;/Text/d f.txt
sed 1,30{/Text/d} f.txt
sed 1,3s/^/#/ file
sed 1,3{/^#/!s/^/#/}
sed 1,3{/match/d;} file
sed 1,4d file.txt
sed 1,5{3p;4p;d} filenname.CSV
sed 1,5{3p;d} filenname.CSV
sed 10!d file
sed 100,200{/input\|output/=};d file.txt sed $!d
sed 100,200{/input\|output/=};d file.txt sed $!d
sed 11s/} leftsquarebrc   rightsquarebrc *$/ip_address;}/ named.conf
sed 123r file.txt main.txt
sed 165s/.*/ leftanglebrc new content rightanglebrc /g file
sed 1N;$!N;s/ leftanglebrc Blarg rightanglebrc \n leftanglebrc Bllarg rightanglebrc \n leftanglebrc Blllarg rightanglebrc / leftanglebrc test rightanglebrc /;P;D filename
sed 1N;N;/^\n\n$/d;P;D
sed 1b;/pattern/d file
sed 1cApricot prova
sed 1d
sed 1d $1
sed 1d file.txt
sed 1d input-txt paste -d | input sed s/^\|$/|/g
sed 1d tables/ansi.csv awk -F , {print $1} uniq tr \n : sed s/:/" "/g
sed 1d; n; d infile
sed 1i\\ file.txt
sed 1s/ leftsquarebrc ^; rightsquarebrc */YEAR/ file
sed 1s/"//g file.txt
sed 1s/$/\tAge/;2,$s/$/\t20/ myFile.txt
sed 1s/.* leftanglebrc / leftanglebrc /g file
sed 1s/.*/ &/ file.txt
sed 1s/.*\( leftanglebrc .*\)$/\1/g file
sed 1s/^ leftsquarebrc ^0-9 rightsquarebrc *// data_combined.csv
sed 1s/^...// data_combined.csv
sed 1s/^.\{6\}// data_combined.csv
sed 1s/^/Type, /;2,$s/^/Adding Text, / filename
sed 1s/^\(.*\)$/\|\1/g file
sed 1s/unix/whatever/2 file
sed 1{/PINITIAL BALANCE/{N;N;d}};/\n/!N;/\n.*\n/!N;/\n.*\n.*PINITIAL BALANCE/{$d;N;N;d};P;D
sed 1{/^ *$/d}
sed 1{/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$/d}
sed 1{/^$/d}
sed 1{h;d};/XXX/{G;s/XXX\(.*\)\n\(.*\)/\2\1/} fileB fileA
sed 1{h;d};/^}},$/{x;b};H;${x;s/^}},/}}/;b};d
sed 1{h;d};H;${x;s/\s*abstract\s*=\s*{ leftsquarebrc ^} rightsquarebrc *}\+,//g;p};d file
sed 1{s%/%.%g;q;} $datafile
sed 1{x;s/^$/server-id=1789051/;x};/^server-id=/{s/^.*$//;x};${G;s/\n//} /etc/my.cnf
sed 2,/\*\//d; 1r newSig.txt input.txt
sed 2,3s/,\s\+/,/g example.txt
sed 2,4!d somefile.txt
sed 2,8s/foo/bar/ file
sed 2000!d $file
sed 23,56!d
sed 24s/.*/"$ct_tname"/ file1.sas
sed 29s|.*|"$ct_fname"| file1.sas
sed 2N;s/\n/ / file
sed 2a\\ttwo words input
sed 2h; $!N; $!D; ${ G; s/ leftsquarebrc ^, rightsquarebrc *\( leftsquarebrc ^\n rightsquarebrc *\).* \( leftsquarebrc 0-9 rightsquarebrc \{8\}\).*/\2\1/; s/..$// } file
sed 2q;d file
sed 2q;d file
sed 2s/$/ myalias/ file
sed 2s/.*/ leftsquarebrc text_insert rightsquarebrc  &  leftsquarebrc text_insert2 rightsquarebrc / file.txt
sed 2s/^/# /; 3,$s/"\( leftsquarebrc ^, rightsquarebrc *\),\( leftsquarebrc ^, rightsquarebrc *\)"/\1.\2/g file
sed 2s/^/# /; 3,$s/,/./g;s/"."/,/g;s/"//g file
sed 2~3!d A paste -d $n B sed $3~2in
sed 3 s/$/f/
sed 314!d file
sed 33rfile input
sed 4,8{4~2d} file
sed 4,8{N;s/.*\n//} file
sed 4i\ This is the new line file
sed 4r insert txt 0282.ini
sed 4s|^|/opt/bin:/opt/sbin:\\\n| .bashrc
sed 5!d file
sed 50,${/^\s*PUTS/d} the_file
sed 50,99999{/^s*$pattern/d} file
sed 5001,$d; inputFile.txt
sed 6s%value=" leftsquarebrc ^" rightsquarebrc *"%value="/u03/Oracle/Middleware/wlserver_10.3"% /u03/silent.xml
sed 71s/ *$//;116s///;211s///
sed :$PWD:d
sed :a; N; $!ba; s/\\\n//g; s/\\$// file
sed :a; N; $!ba; s| *&lt;/p&gt;\n *&lt;ul&gt;|\\begin{itemize}|g fileg
sed :a; N; $!ba; s|&lt;/p&gt;\n&lt;ul&gt;|\\begin{itemize}|g file
sed :a; N;/\n\S/! {s/\n */ /;ba}; P;D WEEE.txt
sed :a; s/||/|nil|/g; ta
sed :a; s:|\(\\N\)\?|:|NULL|:g; ta
sed :a;$!N;/^\(\(  leftsquarebrc 0-9 rightsquarebrc \+ * leftsquarebrc 0-9 rightsquarebrc \+\).*\n\)\( \{15\}\)/{s//\1\2/;ta};P;D file
sed :a;$!N;/^\(\( leftsquarebrc 0-9 rightsquarebrc \+ * leftsquarebrc 0-9 rightsquarebrc \+\).*\n\)\( \{14\}\)/{s//\1\2/;ta};P;D file
sed :a;$!N;s/CELL\n/CELL/;ta;P;D file
sed :a;$!N;s/\n/ /;ta file
sed :a;$!N;s/\n/string/;ta inputfile
sed :a;$!N;s/^\(\(.*fruit\).*\)\n\2\(.*\)/\1,\3/;ta;P;D file
sed :a;$!{N;N};s/\n\n\( leftsquarebrc a-z rightsquarebrc \)/ \1/;ta;P;D sentences
sed :a;$!{N;ba};s/.*\ leftsquarebrc notice\ rightsquarebrc  leftsquarebrc ^\n rightsquarebrc *\n// file
sed :a;$!{N;ba};s/\(foobar\)/\1\nsome_text/4 inputfile
sed :a;$!{N;ba};s/\n/\\n/g;s/a/_/g tr -d \n
sed :a;$!{N;s/\n/&/3;Ta};/^\ leftsquarebrc Data\ rightsquarebrc  leftsquarebrc ^\n rightsquarebrc *\n\n leftsquarebrc ^ leftsquarebrc  rightsquarebrc  leftsquarebrc ^\n rightsquarebrc *\n$/b;s/\n//;D file
sed :a;$bb;N;/^ABC/!D;/&&$/!ba;:b;/^ABC.* leftanglebrc ID rightanglebrc \n'"$id"'.*&&$/p;d file
sed :a;$bc;N;ba;:c;s/&#13;\n/ /g file
sed :a;/0$/{N;s/\n//;ba}
sed :a;/: leftsquarebrc ^_= rightsquarebrc *=/!b;s//\n&\n/;h;s/.*\n\(.*\)\n.*/\1/;y/ /_/;H;g;s/\n.*\n\(.*\)\n\(.*\)/\2\1/;ta file
sed :a;/{/!d;h;s/{ leftsquarebrc ^} rightsquarebrc *}/\n&\n/;s/ leftsquarebrc {} rightsquarebrc //g;s/\n/{/;s/\n/}/p;z;x;s/{//;s/}//;ba file
sed :a;/{/!d;s/{ leftsquarebrc ^} rightsquarebrc *}/\n&\n/;h;s/ leftsquarebrc {} rightsquarebrc //g;s/\n/{/;s/\n/}/;G;P;s/ leftsquarebrc ^\n rightsquarebrc *\n//;s/\n{//;s/}\n//;ba file
sed :a;N;$!ba;s/ leftsquarebrc ^\n rightsquarebrc *\nNo Problems Found\n//g
sed :a;N;$!ba;s/\n / /g file.txt
sed :a;N;$!ba;s/\n/ /g
sed :a;N;$!ba;s/\n/:/g
sed :a;N;$!ba;s/\n\( leftsquarebrc a-z rightsquarebrc \)/ \1/g this_file
sed :a;N;$!ba;s/\n|/|/g input.txt
sed :a;N;$!ba;s/\t#\n\tpap/NewString/g file
sed :a;N;$!ba;s| leftanglebrc td rightanglebrc  leftanglebrc /td rightanglebrc  *\n * leftanglebrc td rightanglebrc ) leftanglebrc /td rightanglebrc |...|g infile
sed :a;N;$\!ba;s/\n/ /g
sed :a;N;/\ leftsquarebrc .*\ rightsquarebrc $/{/.*FAILED.*\n/{P;D};D;t};s/\n/-/g;$d;t a; file_name sed s/-/\n/g
sed :a;s/,,/,58,/g;ta file
sed :a;s/\( leftsquarebrc ^  rightsquarebrc * .* leftsquarebrc ^\\ rightsquarebrc \) \(.*\)/\1\\ \2/;ta
sed :a;s/\n/&/20;tb;$!{N;ba};:b;/4320102/!D;:c;n;/ leftanglebrc \/eventUpdate rightanglebrc /!bc file
sed :a;s/\t\t/\tNA\t/g;ta file
sed :a;s/^\( leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc /\1_/;ta file
sed :a;s/^\( leftsquarebrc 0-9 rightsquarebrc *\):\( leftsquarebrc ^: rightsquarebrc *\):/\1:\2\1/;ta;s/:// input
sed :a;{N;s/\n */ /};ba INPUT_FILE
sed :a;{N;s/\n/, /};ba INPUT_FILE
sed :l s/\(( leftsquarebrc ^ ) rightsquarebrc *\) leftsquarebrc   rightsquarebrc /\1_/;tl input
sed :l s/\(( leftsquarebrc ^ ) rightsquarebrc *\) leftsquarebrc   rightsquarebrc \( leftsquarebrc ^) rightsquarebrc *)\)/\1_\2/;tl input
sed :l s/\(number=" leftsquarebrc ^" \t rightsquarebrc *\)\s\s*/\1/g;tl input
sed :l;N;$!tl;N;s! leftanglebrc directory number=133 name=var1 rightanglebrc  leftsquarebrc   rightsquarebrc *\n leftanglebrc myfile name=test1 / rightanglebrc  leftsquarebrc   rightsquarebrc *\n leftanglebrc /directory rightanglebrc ! leftanglebrc directory numbe=133 myfile=test1 / rightanglebrc ! input
sed :l;N;$!tl;N;s! leftanglebrc directory number=\( leftsquarebrc 0-9 rightsquarebrc *\) name=\( leftsquarebrc ^ rightanglebrc  rightsquarebrc *\) rightanglebrc  leftsquarebrc   rightsquarebrc *\n leftanglebrc myfile name=test1 / rightanglebrc  leftsquarebrc   rightsquarebrc *\n leftanglebrc /directory rightanglebrc ! leftanglebrc directory number=\1 myfile=\2 / rightanglebrc ! input
sed :l;s/-\( leftsquarebrc ^-  rightsquarebrc *\)\( *=\)/_\1\2/g;tl input
sed :label s/^\(\(        \)*\)\t/\1        /; t label -i *.cc *.h
sed :loop;/private:\|public:\|protected:/{n;/^$/d;Tloop} inputfile
sed :r;$!{N;br};s/\n{/{/g
sed :t /define service{/ , /}/ { /}/! { $! { N; bt } }; /NSClient++ Version/d } file
sed :x;/a\{100\}/b;s/a/aa/;tx
sed @$node@s/^/#/ ....
sed @^// leftanglebrc  leftanglebrc  leftanglebrc @,@^//.* rightanglebrc  rightanglebrc  rightanglebrc @d
sed G file
sed G file
sed H;/pattern/h;$!d;x;//!d file
sed N; s/) leftsquarebrc   rightsquarebrc *\n{/&\npr_debug();/g
sed N; s/\ leftanglebrc why\ rightanglebrc \n\ leftanglebrc huh\ rightanglebrc /yo/g test.txt
sed N;$d
sed N;$s/,\n/\n/;P;D inputfile
sed N;/ leftanglebrc Location \/ rightanglebrc \n *Order allow, deny/s//&\n  Allow from all/;P;D file
sed N;/)\;/s/,\n/\n/;P;D inputfile
sed N;/9 leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \{4\}\n.*9 leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \{4\}/D;P;D processme.txt
sed N;/9 leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \{4\}\n.*9 leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \{4\}/{P;d;D};P;D processme.txt
sed N;/\n *{/s// {/;P;D
sed N;/\n,/s/"\? *\n//;P;D title_csv
sed N;/\n.*0.00%.*/!{P;D};N;d inputfile
sed N;/\n{/s// {/;P;D file.css
sed N;/^ leftsquarebrc ^\n rightsquarebrc *\n leftsquarebrc ^\n rightsquarebrc *$/N; /.*\n.*\n.*Possible/{$q;N;N;N;d};P;D; structure
sed N;N;N;s/\n//g;s/ leftsquarebrc 0-9 rightsquarebrc */& / YourFile
sed N;N;s/\n/ /g file
sed N;N;s/\n/#/g file sort -t -_ -n -r -k 4 sed s|#|\n|g
sed N;s/,\n)/\n)/;P;D inputfile
sed N;s/\n/ / yourFile
sed N;s/\n/ /;
sed N;s/\n/ | /;s/\r//g file.txt
sed N;s/\n{/{/
sed N;s/\r\n/ /
sed N;s@  leftanglebrc /V rightanglebrc \n leftanglebrc N rightanglebrc  @" = "@g
sed N;s@  leftanglebrc /V rightanglebrc \n leftanglebrc N rightanglebrc  @" = "@g;P;D
sed NUMq;d file
sed Ns/.*/replacement-line/ file.txt
sed Q -i *
sed R bar.txt foo.txt sed N;s/^\(.*\)\(%.*\)\n\(.*\)/\1\3\2/
sed R fileB fileA
sed \# leftanglebrc Directory /var/www/ rightanglebrc #,\# leftanglebrc /Directory rightanglebrc # s|\(AllowOverride\) None|\1 All| inputfile
sed \#/bbb#d filename
sed \,some/path,d
sed \?^/dev/xvdb?d /etc/fstab
sed \fs-bri-0197329732.hfls -i -e s/LogPath=" leftsquarebrc :A-Z0-9a-z_\/.  rightsquarebrc *"/LogPath="ABC"/g
sed \| leftanglebrc a href="/get/php|!d;N;s/.*\(php-\( leftsquarebrc 0-9\. rightsquarebrc \+\)\.tar\.bz2\).*md5: \( leftsquarebrc 0-9a-f rightsquarebrc \{32\}\).*/\1 \2 \3/;q file
sed \|/usr/share|s|^|#| test
sed \~export PATH="$HOME/.rbenv/bin:$PATH~d .testing
sed ^ leftsquarebrc \#\&\* rightsquarebrc /d yourFile.txt
sed `sed 's|\(.*\) \(.*\)|s/\1/\2/|' input` output sed s|\(.*\) \(.*\)|s/\1/\2/| input
sed do whatever ${*}_stubs.cc
sed e /tag1/!d;/tag2/!d;.../tagN/!d filename
sed h; :b; $b ; N; /^${1}n     n/ {h;x;s//Nounn/; bb}; $b ; P; D
sed h; s/ .*//; x; s/.* //; s:/:-:g; x; G; s/\n/ /
sed h;:b;$b;N;N;/PATTERN/{N;d};$b;P;D inputfile
sed h;s/ leftsquarebrc ^= rightsquarebrc *= leftsquarebrc ^= rightsquarebrc *=*=#\(.*\)$/\1/;s/\( leftsquarebrc ^= rightsquarebrc \)#/\1/g;x;s/\( leftsquarebrc ^= rightsquarebrc *= leftsquarebrc ^= rightsquarebrc *=\+#\).*/\1/;G;s/\n//g inputfile
sed h;s/ leftsquarebrc ^= rightsquarebrc *=*=#\(.*\)/\1/;s/\( leftsquarebrc ^= rightsquarebrc \)#/\1/g;x;s/\( leftsquarebrc ^= rightsquarebrc *=\+#\).*/\1/;G;s/\n//g inputfile
sed h;s/ leftsquarebrc ^\x27 rightsquarebrc *\x27\(.*\)/\n\x27\1/;s/ //g;x;s/\( leftsquarebrc ^\x27 rightsquarebrc *\).*/\1/;G;s/\n//g
sed h;s/.*".*"//;s/ /|/g;x;s/\(.*".*"\).*/\1/;G;s/\n//
sed h;s/\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \.\).*\(\.footer\)/\1\n\2/;x;s/.* leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \.\(.*\).footer/\1/;s/\./_/g;x;G;s/\(\n\)\(.*\)\1\(.*\)/\3\2/ file
sed h;s/^ leftsquarebrc ^  rightsquarebrc * //;x;s/  leftsquarebrc ^  rightsquarebrc *$//;G
sed n ${x} { p; q } index.html
sed n; d infile
sed n;n;n;n;n;n;d;
sed p;s/ar/AR/g
sed q file
sed s!&lt;foo_bar&gt; leftsquarebrc ^& rightsquarebrc *&lt;/foo_bar&gt;!!g input
sed s!@\(.*\)!_\1@generic.com! FILE
sed s!@string/(w*)!1!p
sed s!A\{30,\}!BBBBB...BBBB!g
sed s!myurl!http://192.168.1.1:8080/! strings.xml
sed s# leftanglebrc !-- CordovaVersion -- rightanglebrc # leftanglebrc script src="cordova-1.7.0.js" type="text/javascript" rightanglebrc  leftanglebrc /script rightanglebrc #g junk4
sed s# leftanglebrc .... rightanglebrc #replacement#g file
sed s# leftanglebrc div class="SectionText" rightanglebrc \(\( leftsquarebrc ^ leftanglebrc  rightsquarebrc \| leftanglebrc  leftsquarebrc ^/ rightsquarebrc \| leftanglebrc / leftsquarebrc ^d rightsquarebrc \| leftanglebrc /d leftsquarebrc ^i rightsquarebrc \| leftanglebrc /di leftsquarebrc ^v rightsquarebrc \| leftanglebrc /div leftsquarebrc ^ rightanglebrc  rightsquarebrc \)*\) leftanglebrc /div rightanglebrc #\1#g
sed s# leftsquarebrc ^^ rightsquarebrc ( leftsquarebrc 0-9 rightsquarebrc .) #n1 #g
sed s#"http://www.fubar.com"#URL_FUBAR#g
sed s#$old#$new# Current_series_list.txt
sed s#(/ leftsquarebrc ^/ rightsquarebrc {3}) leftsquarebrc ^/ rightsquarebrc *#1#g filename
sed s#.* leftanglebrc br/ rightanglebrc  leftanglebrc br/ rightanglebrc  leftanglebrc br/ rightanglebrc \(.*\) leftanglebrc br/ rightanglebrc  leftanglebrc br/ rightanglebrc After you.*#\1# yourfile.xml
sed s#.*\(\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ rightsquarebrc \).*" leftsquarebrc A-Z rightsquarebrc * \(.*\) HTTP/ leftsquarebrc 0-9. rightsquarebrc *" \(.*\)#\1 \2 \3#
sed s#/# # sed s/=/ /
sed s#/**/##g
sed s#/var.*\.co\.uk/## file
sed s#\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)-\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)-\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)#\1.\2.\3#g
sed s#\( leftsquarebrc ^ leftsquarebrc   rightsquarebrc *\)\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ rightsquarebrc #/dev/\1#g
sed s#\( leftsquarebrc ^| rightsquarebrc \+\)|\(.*\)# leftanglebrc \1 rightanglebrc \2 leftanglebrc /\1 rightanglebrc #
sed s#\(/ leftsquarebrc ^: rightsquarebrc *\).*#\1#g
sed s#\(\w\+\) #\1 /#
sed s#\\uline{ leftsquarebrc ^} rightsquarebrc *}#{\\color{cname}&}#g file
sed s#^(.*)$#^S01E(.*)$#
sed s#^\(.*\)$#S01E\1#
sed s#db/fs-type$## myfile
sed s#from#to# file
sed s#http://#\n&#g infile
sed s%$file%$file% script.in
sed s%.*%/&/p% 1.txt less
sed s%.*%/&/p% 1.txt sed -f -n 2.txt awk ...
sed s%.*%/&/p% 1.txt sed -f -n 2.txt less
sed s%/tmp/a1%%g
sed s%12pt;" rightanglebrc \(.*\) leftanglebrc /span rightanglebrc  leftanglebrc /div rightanglebrc  leftanglebrc /message rightanglebrc %\1%
sed s%PATTERN%PATTERN%
sed s%\(http://www\.\)\(MyDomain\)\(\.com\)%\1OtherDomain\3/\2%g $i mv -i tmp $i
sed s%^%$1 | % $1
sed s,/* leftsquarebrc ^/ rightsquarebrc \+/*$,,
sed s,/,\\\\,g
sed s,/\\AAA leftsquarebrc ^/ rightsquarebrc */,/,g
sed s,=.*,, thefile
sed s,APP_HOME= leftsquarebrc ^; rightsquarebrc *,"APP_HOME=/home/user/app/2.0", -i ~/.bashrc
sed s,^\( leftsquarebrc ^: rightsquarebrc *\):.*\(RID= leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc *\).*$,\1 : \2,
sed s,some/path,other/path,
sed s./..g
sed s/   *//g file
sed s/  */:/3g file
sed s/  */\'$'\n''/g
sed s/  */n/g
sed s/ $#.*//g testfile.txt
sed s/ * leftsquarebrc ( rightsquarebrc * leftsquarebrc A-Z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc \{1,4\} leftsquarebrc ): rightsquarebrc * *//
sed s/ * leftsquarebrc ( rightsquarebrc \? leftsquarebrc A-Z rightsquarebrc \+- leftsquarebrc 0-9 rightsquarebrc \{1,4\} leftsquarebrc ): rightsquarebrc \? *//
sed s/ * leftsquarebrc 0-9 rightsquarebrc *.// file2
sed s/ *$// -i file.cpp
sed s/ *$// file mv _temp file
sed s/ *+/+/
sed s/ *13) (.*)/ x1b leftsquarebrc 32m*x1b leftsquarebrc 0m 1/
sed s/ *\\t.*//
sed s/ *|.*// file.txt
sed s/ .* / /
sed s/ .*$// sort -u
sed s/ .*// file
sed s/ .*//g file
sed s/ ...../..../ ; s/../..../; etc; s/.../../ inputFile
sed s/ / 0 /2 file
sed s/ /,/g
sed s/ // inputFile
sed s/ //g inputfile
sed s/ /\n/g
sed s/ /\n/g file column -x -c 35
sed s/ /_/
sed s/ /_/4g;s/_\( leftsquarebrc ^_ rightsquarebrc *\)_\( leftsquarebrc ^_ rightsquarebrc *\)$/ \1 \2/ file
sed s/ COMMENT.*' leftsquarebrc ^' rightsquarebrc *'/ /
sed s/ \( leftsquarebrc 0-9 rightsquarebrc \{4\}\)/\n\1/g file
sed s/ \(Jan\|Feb\|Mar\|Apr\|May\|Jun\|Aug\|Sep\|Oct\|Nov\|Dec\)  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc ,  leftsquarebrc 2 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc //g
sed s/ \+/\n/g
sed s/ \{1,\}/\n/g
sed s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g
sed s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g file
sed s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g inputfile
sed s/ leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc \+ rightanglebrc //g file
sed s/ leftanglebrc !--BODY-- rightanglebrc /${4//\\n/$'\n'}/;
sed s/ leftanglebrc .* rightanglebrc \(.*\) leftanglebrc .* rightanglebrc /\1/
sed s/ leftanglebrc .* rightanglebrc \(.*\) leftanglebrc \/.* rightanglebrc /\1/
sed s/ leftanglebrc /  leftanglebrc /g ; s/ rightanglebrc / rightanglebrc  /g file
sed s/ leftanglebrc /strong rightanglebrc .*//
sed s/ leftanglebrc ?xml version='1.0' encoding='UTF-8'? rightanglebrc //g myFile
sed s/ leftanglebrc Connector port="8080" protocol="HTTP/1.1/ leftanglebrc Connector port="$port" protocol="HTTP/1.1"/
sed s/ leftanglebrc DistanceMeters rightanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc //g file
sed s/ leftanglebrc VERSION rightanglebrc /$version_1/g
sed s/ leftanglebrc a \+href="\( leftsquarebrc ^\" rightsquarebrc *\)"/ leftanglebrc a href=".\1.html"/g my_file.html
sed s/ leftanglebrc enter description here rightanglebrc / updating $change form/
sed s/ leftanglebrc script id="live-reload".*\? leftanglebrc \/script rightanglebrc /test/g file
sed s/ leftanglebrc script type="text/javascript" rightanglebrc What you want removed leftanglebrc /script rightanglebrc //
sed s/ leftanglebrc span class='A' rightanglebrc ( leftsquarebrc ^ leftanglebrc  rightsquarebrc *) leftanglebrc /span rightanglebrc /**1**/g
sed s/ leftanglebrc version\.suffix rightanglebrc \(.*\) leftanglebrc .* rightanglebrc /\1/
sed s/ leftanglebrc x rightanglebrc .* leftanglebrc /x rightanglebrc / leftanglebrc x rightanglebrc something leftanglebrc /x rightanglebrc /g file
sed s/ leftsquarebrc  leftsquarebrc : leftanglebrc : rightsquarebrc  rightsquarebrc VERSION leftsquarebrc  leftsquarebrc : rightanglebrc : rightsquarebrc  rightsquarebrc /$version_1/g
sed s/ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc */(&)/g file
sed s/ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+// input
sed s/ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc \+/(&)/g file
sed s/ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc \{1,\}/(&)/g file
sed s/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc */ /g a
sed s/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc  leftsquarebrc 34 rightsquarebrc : leftsquarebrc ^ leftsquarebrc :blank: rightsquarebrc  rightsquarebrc \{1,\} leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc */ /g YourFile
sed s/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc +/ /g a
sed s/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc {1,}/ /g a
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc /; /
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc /;/
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \(=\|{{\|\*\|'\''\)/\n\1/g your_one_line_file
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \+/\n/g $your_file sort -u egrep  leftsquarebrc  leftsquarebrc :upper: rightsquarebrc  rightsquarebrc .* leftsquarebrc  leftsquarebrc :upper: rightsquarebrc  rightsquarebrc 
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \? leftsquarebrc A-Za-z0-9_\/\:\.- rightsquarebrc \+\.\(com\|org\)//g foo.txt
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \{1,\}/,/g file
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \{1,\}/;/
sed s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \{1,\}/;/g
sed s/ leftsquarebrc  rightsquarebrc  leftsquarebrc  rightsquarebrc //g; s/:\|\s\+/\t/g
sed s/ leftsquarebrc  rightsquarebrc  leftsquarebrc () rightsquarebrc /\\&/g infile
sed s/ leftsquarebrc  rightsquarebrc ^$.*& leftsquarebrc  rightsquarebrc /\\&/g;s|.*|/^&$/d| file1 sed -f file2
sed s/ leftsquarebrc $OPTARG rightsquarebrc //g
sed s/ leftsquarebrc (,) rightsquarebrc /\t/g yourfile
sed s/ leftsquarebrc (,) rightsquarebrc /\t/g yourfile column -t
sed s/ leftsquarebrc ,.- rightsquarebrc $/& /
sed s/ leftsquarebrc -_: rightsquarebrc /\t/g infile
sed s/ leftsquarebrc 0-9 rightsquarebrc +$//
sed s/ leftsquarebrc 0-9 rightsquarebrc /&&/ filename
sed s/ leftsquarebrc 0-9 rightsquarebrc //1 file.txt
sed s/ leftsquarebrc 0-9 rightsquarebrc /0&/
sed s/ leftsquarebrc 0-9 rightsquarebrc \+/file&.txt/ file_name.txt
sed s/ leftsquarebrc 0-9- rightsquarebrc //g file
sed s/ leftsquarebrc := rightsquarebrc / /g
sed s/ leftsquarebrc Ff rightsquarebrc  leftsquarebrc Ii rightsquarebrc  leftsquarebrc Rr rightsquarebrc  leftsquarebrc Ss rightsquarebrc  leftsquarebrc Tt rightsquarebrc /last/g file
sed s/ leftsquarebrc Tt rightsquarebrc  leftsquarebrc Oo rightsquarebrc  leftsquarebrc Ff rightsquarebrc  leftsquarebrc Ii rightsquarebrc  leftsquarebrc Nn rightsquarebrc  leftsquarebrc Dd rightsquarebrc /REPLACE/g fileName
sed s/ leftsquarebrc \*\. rightsquarebrc /\\&/g
sed s/ leftsquarebrc \*\.&/ rightsquarebrc /\\&/g
sed s/ leftsquarebrc \x80-\xff rightsquarebrc //g
sed s/ leftsquarebrc ^  rightsquarebrc * :\|,\|//g grep -o  leftsquarebrc ^  rightsquarebrc *
sed s/ leftsquarebrc ^  rightsquarebrc *$/\n&/;h;y/./\//;G;s/\n.*\n// file
sed s/ leftsquarebrc ^ -~ rightsquarebrc //g
sed s/ leftsquarebrc ^ leftsquarebrc :print: rightsquarebrc t rightsquarebrc //g
sed s/ leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ rightsquarebrc //
sed s/ leftsquarebrc ^, rightsquarebrc * leftanglebrc  leftsquarebrc ^, rightsquarebrc *//g file
sed s/ leftsquarebrc ^, rightsquarebrc *,/,/2g file
sed s/ leftsquarebrc ^, rightsquarebrc */$((&+400))/3;s/.*/echo "&"/e file
sed s/ leftsquarebrc ^0-9 rightsquarebrc //g file.txt
sed s/ leftsquarebrc ^0-9 rightsquarebrc //g filename
sed s/ leftsquarebrc ^0-9 rightsquarebrc //g;s/^ leftsquarebrc 0-9 rightsquarebrc \{1,2\}$/&00/;s/^\(.*\)..$/\1/
sed s/ leftsquarebrc ^0-9. rightsquarebrc *\( leftsquarebrc 0-9. rightsquarebrc *\).*/\1/
sed s/ leftsquarebrc ^0-9/ rightsquarebrc //g
sed s/ leftsquarebrc ^; rightsquarebrc */YEAR/ file
sed s/ leftsquarebrc ^; rightsquarebrc ;//6 file
sed s/ leftsquarebrc ^= rightanglebrc  rightsquarebrc *=// file
sed s/ leftsquarebrc ^\o51-\o57\o64-\o89\o96-\o105\o112-\o121\o128-\o137\o144-\o145\o147\o150\o291-\o293 rightsquarebrc / /g inputfile
sed s/ leftsquarebrc ^_ rightsquarebrc *_\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)-\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)-\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)/newyears_20\3-\1-\2/
sed s/ leftsquarebrc ^characters you want to keep rightsquarebrc //g
sed s/ leftsquarebrc _&$ rightsquarebrc /\\&/g
sed s/ leftsquarebrc a-z rightsquarebrc  leftsquarebrc   rightsquarebrc * leftsquarebrc a-z rightsquarebrc  leftsquarebrc   rightsquarebrc * leftsquarebrc 0-9 rightsquarebrc *//gi
sed s/ leftsquarebrc a-z rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc  leftsquarebrc a-z rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \{1,\}//gi input
sed s/ leftsquarebrc a-z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc a-z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc a-z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \( leftsquarebrc a-z rightsquarebrc \)/\1/g
sed s/ leftsquarebrc el rightsquarebrc //g
sed s/ return
sed s/ rightanglebrc  leftanglebrc / rightanglebrc \n leftanglebrc /g
sed s/ rightanglebrc /\/ rightanglebrc /g
sed s/ rightanglebrc 12\.00 leftanglebrc / rightanglebrc 24.00 leftanglebrc /g file.xml
sed s/ rightsquarebrc $/,/
sed s/" (.*//g
sed s/" leftsquarebrc 0-9 rightsquarebrc *":{/{/g file
sed s/" leftsquarebrc ^" rightsquarebrc *"/"new name"/
sed s/" leftsquarebrc ^" rightsquarebrc *"/\U\0/g
sed s/""$/"/ YourFile
sed s/"$R2K_SOURCE"/"$R2K_PROCESSED"/g $file
sed s/"$ampP"/"$ampR"/g
sed s/".*\/\(.\+\.jpg\)"/\1/ig file
sed s/"/'/g
sed s/"//g
sed s/"\( leftsquarebrc ^" rightsquarebrc *\) " */"\1" /g;s/ $// file
sed s/"\( leftsquarebrc ^" rightsquarebrc *\) "/"\1"/g file
sed s/"\(. leftsquarebrc ^" rightsquarebrc *\)"/\\quotation{\1}/g file
sed s/"index\.php?page=\(.*\)"/\1\.html/g
sed s/# leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc */replacement/g
sed s/# leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc \+/replacement/g
sed s/# leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc \{1,\}/replacement/g
sed s/# leftsquarebrc 0-9 rightsquarebrc * *(\(.*\)):$/ \1/ filename
sed s/# leftsquarebrc 0-9 rightsquarebrc *//;s/(\(.*\)):$/\1/ filename
sed s/#.*$//
sed s/#cheese-pasta= leftsquarebrc ^" rightsquarebrc *"/"/g
sed s/#cheese-pasta= leftsquarebrc ^\\ rightsquarebrc *\\//g
sed s/$(printf '\\\\\t')/ /g printf \\\\\t
sed s/$*\.o leftsquarebrc  : rightsquarebrc */$*.o $@ : /g
sed s/$/ foo/ r.txt
sed s/$/ leftanglebrc CRLF rightanglebrc /
sed s/$/ leftanglebrc br rightanglebrc /
sed s/$/ leftanglebrc br rightanglebrc / mytext.txt mv mytext.txt.new mytext.txt
sed s/$/ leftanglebrc br rightanglebrc / tr -d $n
sed s/$/ leftanglebrc br rightanglebrc /; 1 s/^/ leftanglebrc h3 rightanglebrc /; 5 s/$/ leftanglebrc \/h3 rightanglebrc /
sed s/$/,/;n;n;n file
sed s/$/;/ file
sed s/$/\\n/ tr -d \n
sed s/$/\n leftanglebrc  _jupijuice_  rightanglebrc / input.txt
sed s/$/\t1/g
sed s/$/^M/
sed s/$/`echo \\\r`/ foo.txt echo \r
sed s/$/foo/ file.txt
sed s/$/p/ linesfile sed -n -f datafile
sed s/$/|$(date +"%d-%m-%Y")/ date +%d-%m-%Y
sed s/${var}//g
sed s/${version.number}/$version/ template.txt
sed s/%%DATE%%/$(date)/ test.html date
sed s/%RRN%\( leftsquarebrc ^% rightsquarebrc \+\)%/%RRN%0%/g
sed s/%SCHEMA%/$schemaName/ $SCRIPT_DIR/delete_data.sql psql powa_aim_db postgres
sed s/&/\&amp;/g; s/ leftanglebrc /\&lt;/g; s/ rightanglebrc /\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g
sed s/' leftsquarebrc ^' rightsquarebrc *'//g file
sed s/' leftsquarebrc ^@' rightsquarebrc *@ leftsquarebrc ^@' rightsquarebrc *'/'empty@invalid'/g
sed s/'"$pattern"'/\n/ file
sed s/'$'\t''/,/g file.tsv
sed s/'$'\tEN-GB\t''//g filename
sed s/'.*/S/g data.txt
sed s/'/''/g
sed s/'\'' leftsquarebrc ^'\'' rightsquarebrc *'\''//g file
sed s/'\''.*/S/g data.txt
sed s/'\''/'\'''\''/g
sed s/( leftsquarebrc ^  rightsquarebrc * leftsquarebrc A-Z rightsquarebrc  leftsquarebrc ^  rightsquarebrc *.png)/L1/g file-21-05-2013.sql*
sed s/( leftsquarebrc ^) rightsquarebrc *)/(*)/g
sed s/( leftsquarebrc a-zA-Z rightsquarebrc )s*$/1'/ file
sed s/( leftsquarebrc dD rightsquarebrc  leftsquarebrc eE rightsquarebrc  leftsquarebrc fF rightsquarebrc  leftsquarebrc ^) rightsquarebrc *)//g
sed s/(' leftsquarebrc ^' rightsquarebrc *')/n&n/g;s/(n' leftsquarebrc ^. rightsquarebrc *).( leftsquarebrc ^' rightsquarebrc *Z')/1-2/g;s/(n' leftsquarebrc ^. rightsquarebrc *).( leftsquarebrc ^' rightsquarebrc *uF')/1_2/g;s/n//g inputfile
sed s/(.*(/(/ file
sed s/(.*)/"1 :{$row leftsquarebrc '1' rightsquarebrc }"/
sed s/(.*)/1 = 1;/
sed s/(172.16.0.30)(.*)(${share})( (.*)|$)/172.16.0.35234/
sed s/(PID:) leftsquarebrc 0-9 rightsquarebrc */1${$}/ ${ARCHIVO_INFO_SESION}
sed s/(VALUES (.*,)'.*?'/1'Detroit'/g
sed s/(\( leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc  leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc \))/\1/g
sed s/(\s*20120408\s*,\s*20120409\s*,\s*20120410\s*)/(xxx)/g input
sed s/(def leftsquarebrc ^) rightsquarebrc *)//gi
sed s/(if ()($_SESSION leftsquarebrc 'POST' rightsquarebrc  leftsquarebrc '( leftsquarebrc ^' rightsquarebrc *)' rightsquarebrc )==1/1isset(2) && $_SESSION leftsquarebrc 'POST' rightsquarebrc  leftsquarebrc '3' rightsquarebrc ==1/ file
sed s/).*// tmp_used_strings2.txt
sed s/)\( leftsquarebrc ^) rightsquarebrc *)\)\( leftsquarebrc ^) rightsquarebrc *)\)\( leftsquarebrc ^) rightsquarebrc *\)$/)\1` leftanglebrc wbr rightanglebrc `\2` leftanglebrc wbr rightanglebrc `\3/ data.txt
sed s/+/'/g test.txt
sed s/, /\n/g your.file
sed s/, leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *$//g sample.csv
sed s/, leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *$//g sample.csv
sed s/,$/,./
sed s/,$// file
sed s/,' leftsquarebrc ^' rightsquarebrc *')/)/
sed s/,/ and / file
sed s/,/','/g
sed s/,/','/g
sed s/,/','/g A,B,C
sed s/,/, /4 yourfile
sed s/,/-/5 yourfile
sed s/,//5 input.txt
sed s/,/My_com/g
sed s/,\+$// file
sed s/,\.-$/,.- /
sed s/--- end/--- $username ---ndata data data datandata data data datan&/
sed s/-.*;/;/g file
sed s/-Xmx leftsquarebrc 0-9 rightsquarebrc +/-Xmx$heapMB/
sed s/-\( leftsquarebrc 0-9 rightsquarebrc \)/\/\1/g input.txt
sed s/-\( leftsquarebrc 0-9. rightsquarebrc \+\)/(\1)/g inputfile
sed s/.$//
sed s/.* FOREIGN KEY (\( leftsquarebrc ^) rightsquarebrc *\)) REFERENCES \( leftsquarebrc ^( rightsquarebrc *\) (\( leftsquarebrc ^) rightsquarebrc *\)) .*/(\1) \2 (\3)/
sed s/.* leftsquarebrc . rightsquarebrc // input sort uniq -c
sed s/.* leftsquarebrc ^0-9. rightsquarebrc \( leftsquarebrc 0-9. rightsquarebrc \+\)/\1/g
sed s/.* leftsquarebrc ap rightsquarebrc \.m\.\s\+\(.*\)$/\1/ DateStamp.csv
sed s/.*"\( leftsquarebrc ^" rightsquarebrc *\)".*/\1/;s/ leftanglebrc \( leftsquarebrc ^ rightanglebrc  rightsquarebrc *\) rightanglebrc /\1/ file
sed s/.*"\( leftsquarebrc ^" rightsquarebrc *\)".*/\1/;s/ leftanglebrc \( leftsquarebrc ^ rightanglebrc  rightsquarebrc *\) rightanglebrc /\1/ file egrep . leftsquarebrc a-z rightsquarebrc {1,3}$
sed s/.*#\( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/
sed s/.*(openissues)\(.*\)(\/openissues).*/\1/ test.txt
sed s/.*- //
sed s/.*/%&%/ file
sed s/.*/& &/ FILE
sed s/.*000/#&/ file
sed s/.*:.*/date -d"&" "+%Y-%m-%d"/ge file
sed s/.*;//
sed s/.*Depends: \( leftsquarebrc ^  rightsquarebrc *\) .*/\1/ lib-dep-list
sed s/.*SRC=\( leftsquarebrc 0-9. rightsquarebrc \+\).*/\1/ infile sort -u
sed s/.*TYPE=\( leftsquarebrc ^; rightsquarebrc *\);.*/\1/
sed s/.*TYPE=\(.*\);.*/\1/
sed s/.*VARCHAR(1000).*/--&/ file
sed s/.*\ \(.*\) kb\/s/\1\ kb\/s/g
sed s/.*\ \(.*\)\ \(.*\)/\1\ \2/g
sed s/.*\ leftanglebrc \(domain\)=\( leftsquarebrc ^& rightsquarebrc *\).*\ leftanglebrc \(sdk_ver\)=\( leftsquarebrc ^& rightsquarebrc *\).*/\1 \3sion\n\2 \4/p;d file
sed s/.*\( leftsquarebrc 0-9 rightsquarebrc \{10\}\).*/\1,&/ input
sed s/.*\( leftsquarebrc 0-9 rightsquarebrc \{10\}\).*/\1,&/;/ leftsquarebrc 0-9 rightsquarebrc \{10\}/!s/^/0000000000,/ input
sed s/.*\(HOSTNAME=\).*/\1fred/ /etc/sysconfig/network
sed s/.*\(HOSTNAME=\)/\1fred/ /etc/sysconfig/network
sed s/.*\(MId=.*\)\}.*/\1/
sed s/.*\(searchstring\).*/___\1___/
sed s/.*\.\(.*\..*\)/\1/
sed s/.*\/watch?v=\(.\{11\}\).*/\1/g
sed s/.*_ \( leftsquarebrc ^( rightsquarebrc \+\).*/\1/ /tmp/foo
sed s/.*deviceid=\( leftsquarebrc ^& rightsquarebrc *\).*/\1/
sed s/.*href=\"\(.*\)\".*/\1/g file grep -o -P .*\.bz2$
sed s/.*pid \( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/
sed s/.*ttyS0.*/You have to use usb interface/ myfile
sed s/.*window:\(.*\)/\1/g file
sed s/...$/.&/
sed s/.../&\n/g file.txt
sed s/.END.*//
sed s/.\s.\s leftsquarebrc 0-9 rightsquarebrc \+//g input
sed s/.\{20\}$//
sed s/.\{250\}/&\n/g
sed s/.po/.mo/
sed s/.shayam.//g FILE mv FILE.new FILE
sed s//'/g sed s/.*='(. leftsquarebrc ^' rightsquarebrc *)'.*/1/
sed s///g
sed s/0*\( leftsquarebrc 1-9 rightsquarebrc \)/\1/g
sed s/0/$(date +%s)/g input.txt date +%s
sed s/1/ONE/; s/2/TWO/; /3/q; s/ONE/THREE/ input.txt
sed s/1031/1031\n/g test.xml grep 1031
sed s/1\( leftsquarebrc ^. rightsquarebrc \)/2\1/g test
sed s/20$/21/
sed s/30 leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \" authentication=\"someuniqueauthkey/'$1'\" authentication=\"someuniqueauthkey/ $configFile
sed s/64/\n&/g file
sed s/: leftsquarebrc ^= rightsquarebrc *=/$(tr " " "_"  leftanglebrc  leftanglebrc  leftanglebrc "&")/g;s/.*/echo "&"/e file
sed s/:.*//
sed s/:/ /2
sed s/:/ family:/ yourfile.txt
sed s/://g file
sed s/:/\\n/g ~/Desktop/myfile.txt
sed s/:/|/ input.txt cut ... sed s/|/:/
sed s/:50K.*:53B/:50KCREDIT:53B/g
sed s/:50K.*:53B/:50KCREDIT:53B/g path/to/your_text_file
sed s/:sl:/\n/g singleline.txt
sed s/;.*//;/^@/p;1,/^@/d $SOAfile awk BEGIN{RS="@"} NR==2{print $6}
sed s/;/./3;s/;/./4 -i -B -A -K *
sed s/;//g pool read ip string nc -z -w -3 $ip 80 echo $ip failed
sed s/;/;$(printf '\\\n')/g printf \\\n
sed s/;?new leftsquarebrc ^; rightsquarebrc *$|new leftsquarebrc ^; rightsquarebrc *;//g
sed s/;\( leftsquarebrc 0-9 rightsquarebrc *\),\( leftsquarebrc 0-9 rightsquarebrc *\);/;\1.\2;/g;s/; leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *$// ./infile
sed s/;\( leftsquarebrc 0-9 rightsquarebrc \{6\}\)00;/;\101;/g
sed s/;size= leftsquarebrc 0-9 rightsquarebrc *;//g
sed s/= leftsquarebrc ^, rightsquarebrc *//g
sed s/@ leftsquarebrc ^, rightsquarebrc */@generic.com/
sed s/@ leftsquarebrc a-f0-9 rightsquarebrc \{8\},/@/ input
sed s/@"\( leftsquarebrc ^. rightsquarebrc *\)\.png",/&\n@"\1",/ input
sed s/@XmlElement(namespace = \(".*"\), \(required = true\))/@Namespace(reference=\1)\n@Element(\2)/ files
sed s/@version@/'$(sha1sum $(xpi) | grep -Eow '^ leftsquarebrc ^  rightsquarebrc +'  | sed -e 's/\(\/\|\\\|&\)/\\&/g')'/ input.txt
sed s/@version@/'$(sha1sum $(xpi) | grep -Eow '^ leftsquarebrc ^  rightsquarebrc +')'/ input.txt
sed s/ABCD\(.*\) leftsquarebrc 0-9 rightsquarebrc \{2\}- leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc .*.sql.zip/\1/
sed s/DATA_.*/DATA_/ filename.txt
sed s/DirectoryIndex/& index.php/
sed s/EMAIL/$email/
sed s/FIND TEXT/REPLACE TEXT/g source.txt
sed s/GENERATED ALWAYS AS.*$/,/ file
sed s/GRUB_CMDLINE_LINUX="(.*)"/GRUB_CMDLINE_LINUX="1 ipv6.disable=1"/ /etc/default/grub
sed s/HTML/test/g
sed s/HTTP.*:// ip_all02.txt
sed s/Hello \(.*\)! Have a good day./Bye \1! Good night./ MyInputFile
sed s/M1- leftsquarebrc ^- rightsquarebrc *- leftsquarebrc ^\. rightsquarebrc */M1-plt32-size10/ filename
sed s/Minimum = \( leftsquarebrc 0-9 rightsquarebrc \+\)ms.*/\1/
sed s/Monday:/&\n/g
sed s/NUMBER/$1/g myScript.txt
sed s/NUMBER/$NUMBER/gi foo.txt
sed s/REPLACEME/$(sed "s/.*/'&'/" | paste -s -d, -)/ sed s/.*/'&'/ paste -s -d -,
sed s/T leftsquarebrc ^, rightsquarebrc *//g file
sed s/TITLE/New Title/ old.txt
sed s/The \(.*\) line/The \1 lines\nThe new \1 line/
sed s/\ leftanglebrc \/textarea/\'$'\n\ leftanglebrc \\/textarea/g f
sed s/\ leftanglebrc http\(s\|\):\/\/// file
sed s/\ leftsquarebrc  leftanglebrc / leftsquarebrc \&lt;/g
sed s/\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ rightsquarebrc //g
sed s/\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\ rightsquarebrc //g
sed s/\ leftsquarebrc . leftsquarebrc 1234567890 rightsquarebrc  rightsquarebrc *//g file1
sed s/\ leftsquarebrc .* rightsquarebrc  // $file
sed s/\ leftsquarebrc .* rightsquarebrc /_ARRAY_/
sed s/\ leftsquarebrc .*\ rightsquarebrc //g
sed s/\ leftsquarebrc 1234( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc ) leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc # leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \ rightsquarebrc  leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc //g file
sed s/\ leftsquarebrc Bo.*/&SomeText&SomeText/g filename
sed s/\ leftsquarebrc INFO\ rightsquarebrc  Total Time: //
sed s/\ leftsquarebrc ^\ rightsquarebrc *//g file1
sed s/\ leftsquarebrc my_id=\( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\)\ rightsquarebrc /\1/g file
sed s/\ rightsquarebrc  */ rightsquarebrc /g;s/\ rightsquarebrc \(.\)/ rightsquarebrc \n\1/g;s/ *\ leftsquarebrc / leftsquarebrc /g;s/\(.\)\ leftsquarebrc /\1\n leftsquarebrc /g item_gloves
sed s/\!/:/g file
sed s/\"//g file.txt
sed s/\$PLACEHOLDER_/\$/g file
sed s/\$\$placeholder\$\$/'"$o"'/g
sed s/\(  leftsquarebrc ^  rightsquarebrc *\)\{2\}$/\n&/;h;s/\n.*//;s/ /_/4g;G;s/\n.*\n// file
sed s/\( constant = *\) leftsquarebrc ^  rightsquarebrc */\1substituteValue/
sed s/\( leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc \)\(.*\)\( leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc \)/\1\2/ test.txt
sed s/\( leftanglebrc structure name=\"\)\(.\)/\1\u\2/ xml-file
sed s/\( leftsquarebrc  \t rightsquarebrc \+ leftsquarebrc ^ \t rightsquarebrc *\)\{3\}$// your_file
sed s/\( leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc \+ leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+ leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc *\| leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+ leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc \+ leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc *\) \?//g inputfile
sed s/\( leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \|;\) leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc *;/\1/g; s/Name=//g
sed s/\( leftsquarebrc $A-Z0-9 rightsquarebrc *\) \( leftsquarebrc $A-Z0-9 rightsquarebrc *\)$/-w \1 -c \2/ file
sed s/\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc -0-9 : rightsquarebrc *\)\. leftsquarebrc 0-9 rightsquarebrc \{3\}/\1/
sed s/\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \):\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \):\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)/PT\1H\2M\3S/
sed s/\( leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *\)\( leftsquarebrc  \t rightsquarebrc *\)\(.*\)/\3\2\1/ input
sed s/\( leftsquarebrc 0-9 rightsquarebrc *\)-\( leftsquarebrc 0-9 rightsquarebrc *\)-\( leftsquarebrc 0-9 rightsquarebrc *\)/\3\/\2\/\1/g file
sed s/\( leftsquarebrc 0-9 rightsquarebrc \) /\1\n/g file.txt
sed s/\( leftsquarebrc 0-9 rightsquarebrc \) \( leftsquarebrc 0-9 rightsquarebrc \)/\1\2/g
sed s/\( leftsquarebrc 0-9 rightsquarebrc \)T\( leftsquarebrc 0-9 rightsquarebrc \)/\1 \2/g file.csv
sed s/\( leftsquarebrc 0-9 rightsquarebrc \)\( leftsquarebrc A-Z rightsquarebrc \)/\1 \2/ ./infile
sed s/\( leftsquarebrc 0-9 rightsquarebrc \+\)\.\( leftsquarebrc 0-9 rightsquarebrc \+\)\.\( leftsquarebrc 0-9 rightsquarebrc \+\)\.\( leftsquarebrc 0-9 rightsquarebrc \+\)/\4.\3.\2.\1/g
sed s/\( leftsquarebrc 0-9 rightsquarebrc \+\. leftsquarebrc 0-9 rightsquarebrc \+\) \( leftsquarebrc 0-9 rightsquarebrc \+\. leftsquarebrc 0-9 rightsquarebrc \+\)/\1,\2/g
sed s/\( leftsquarebrc 0-9 rightsquarebrc \{1,3\}\.\)\{3\} leftsquarebrc 0-9 rightsquarebrc \{1,3\}/**masked ip**/g
sed s/\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)\( leftsquarebrc 0-9 rightsquarebrc \{3\}\)\( leftsquarebrc 0-9 rightsquarebrc \{3\}\)\( leftsquarebrc 0-9 rightsquarebrc \)\(- leftsquarebrc 0-9 rightsquarebrc \{3\}\. leftsquarebrc 0-9 rightsquarebrc \{3\}\)/\1.\2.\3.\4\5/g
sed s/\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)\/\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)\/\( leftsquarebrc 0-9 rightsquarebrc \{2\}\)/20\3-\1-\2/g
sed s/\( leftsquarebrc 0-9 rightsquarebrc \{4\}\(- leftsquarebrc 0-9 rightsquarebrc \{2\}\)\{2\}\)/|\1/ sort -t | -k 2 sed s/|//
sed s/\( leftsquarebrc 0-9 rightsquarebrc \{4\}\) /\1/g inFile
sed s/\( leftsquarebrc A-Z rightsquarebrc \) leftsquarebrc A-Z rightsquarebrc */\1/g my_file
sed s/\( leftsquarebrc A-Z rightsquarebrc \{2,\}.*\)/\n\1/; s/ leftsquarebrc ^\n rightsquarebrc *\n// infile
sed s/\( leftsquarebrc A-Za-z_ rightsquarebrc  leftsquarebrc A-Za-z0-9_ rightsquarebrc *\) *\( leftsquarebrc A-Za-z_ rightsquarebrc  leftsquarebrc A-Za-z0-9_ rightsquarebrc *\);/\1 \2 = (\1 *)someOtherVar- rightanglebrc Get("\2");/ input
sed s/\( leftsquarebrc ^  rightsquarebrc *\) \( leftsquarebrc ^  rightsquarebrc *\) \( leftsquarebrc ^  rightsquarebrc *\)/\1 "|\/usr\/sbin\/rotatelogs \2_`date +%m_%d_%Y` 86400" combined/
sed s/\( leftsquarebrc ^  rightsquarebrc *\) \( leftsquarebrc ^  rightsquarebrc *\) \( leftsquarebrc ^  rightsquarebrc *\)/\1 "|\/usr\/sbin\/rotatelogs \2_`date +%m_%d_%Y` 86400" combined/
sed s/\( leftsquarebrc ^  rightsquarebrc \+\) your \( leftsquarebrc ^  rightsquarebrc \+\)/\2\1er/
sed s/\( leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^T rightsquarebrc *\) leftsquarebrc ^, rightsquarebrc *\( leftsquarebrc ^T rightsquarebrc *\).*/\1\2/ file
sed s/\( leftsquarebrc ^. rightsquarebrc *\)\( leftsquarebrc ^( rightsquarebrc *(\)/EventUtil\2\1, /
sed s/\( leftsquarebrc ^0-9 rightsquarebrc \),/\1\n/g yourfile
sed s/\( leftsquarebrc ^: rightsquarebrc *:\)\( leftsquarebrc ^  rightsquarebrc * \)\( leftsquarebrc ^: rightsquarebrc *\)/\1\3\2/ test
sed s/\( leftsquarebrc ^; rightsquarebrc *\).*/\1/ filename
sed s/\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|/\1\t\2\t\3\t\4\t\5\t\6\t\7\t\8\t/;s/|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)|\( leftsquarebrc ^| rightsquarebrc \+\)$/\t\1\t\2\t\3\t\4/
sed s/\(, leftsquarebrc ^, rightsquarebrc *\),\( leftsquarebrc ^, rightsquarebrc *\)/,\2\1/ input
sed s/\(-\? leftsquarebrc 0-9 rightsquarebrc .\? leftsquarebrc 0-9 rightsquarebrc *\) x \(-\? leftsquarebrc 0-9 rightsquarebrc \{1,\}\)^\( leftsquarebrc 0-9 rightsquarebrc \{1,\}\.\? leftsquarebrc 0-9 rightsquarebrc *\)/$\1 cdot \2^^\3$/g input
sed s/\(.*\)/"\1"/g
sed s/\(.*\)\r/"\1"/g
sed s/\(.*href="\)\( leftsquarebrc ^" rightsquarebrc *\)\(".*\)/\1\n\2\n\3/;:a;s/\(\n.*\)_\(.*\n\)/\1-\2/;ta;s/\n//g inputfile
sed s/\(.......\):\(.*$\)/ leftanglebrc s rightanglebrc \L \2 \E leftanglebrc \/s rightanglebrc  (\1)/ tmp.dat
sed s/\(.....\)\(.....\)/\1\n\2/ input_file split -l 2000000 out-prefix-
sed s/\(.\)/\1\n/g -i filename
sed s/\(.\)/\U\1/
sed s/\(.\)B*$/\1/ file
sed s/\(.\)\1\+/\1/g infile
sed s/\(.\{319\}\)'$'\x14''\(.*\)$/\1\2/ file mv _temp file
sed s/\(.\{9\}\)/\1 / file
sed s/\(: leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\. leftsquarebrc 0-9 rightsquarebrc \{3\}/\1/g input_file.csv
sed s/\(: leftsquarebrc 0-9 rightsquarebrc *\)20/\121/
sed s/\(AAA\|BBB\),\( leftsquarebrc ^, rightsquarebrc *\)/\1,{\2}/g dataset.txt
sed s/\(ADD INDEX\) \(.*\) ON \(.*\)(/\3 \1 \2(/
sed s/\(DATA leftsquarebrc ^  rightsquarebrc *\).*/\1/
sed s/\(Getceiling(\)\( leftsquarebrc ^, rightsquarebrc *\),\( leftsquarebrc ^, rightsquarebrc *\)/\1\3\2/g input
sed s/\(Microsoft Office f.r Mac 2011 \( leftsquarebrc ^  rightsquarebrc *\)-Update\).*$/\1/; s/^.* rightanglebrc // infile
sed s/\(PROJECT_NUMBER leftsquarebrc   rightsquarebrc *= leftsquarebrc   rightsquarebrc *\) leftsquarebrc ^  rightsquarebrc */\1$VERSION/ filename
sed s/\(TAG\|TAA\|TGA\)$//
sed s/\(\( leftsquarebrc ^, rightsquarebrc *,\)\{3\} leftsquarebrc ^, rightsquarebrc *\),/\1\n/
sed s/\(\( leftsquarebrc ^, rightsquarebrc *,\)\{4\} leftsquarebrc ^, rightsquarebrc *\),/\1\n/g
sed s/\(\( leftsquarebrc ^; rightsquarebrc *;\)\{'$((FIELD-1))'\}\)\( leftsquarebrc ^; rightsquarebrc *;\)/\1\n\3\n/;h;s/ leftsquarebrc ^\n rightsquarebrc *\n\( leftsquarebrc ^\n rightsquarebrc *\).*/\1/;y/H1/X2/;G;s/\( leftsquarebrc ^\n rightsquarebrc *\)\n\( leftsquarebrc ^\n rightsquarebrc *\)\n\( leftsquarebrc ^\n rightsquarebrc *\)\n\( leftsquarebrc ^\n rightsquarebrc *\)/\2\1\4/
sed s/\(\( leftsquarebrc ^; rightsquarebrc *;\)\{8\}\)O\(.\{3\}\);/\1\3;/
sed s/\(\( leftsquarebrc ^| rightsquarebrc *|\)\{6\}\)/\1\n/g input.txt
sed s/\(\(.*;\)\{8\}\)O\(.\{3\}\);/\1\3;/
sed s/\(\. leftsquarebrc 0-9 rightsquarebrc *\)\( leftsquarebrc 0-9 rightsquarebrc \.\)/\1 \2/
sed s/\(\S\)\s/\1:/ your_file
sed s/\(\b\)\(\w\)\(\w\)\(\w\)\(\b\)/\1\4\3\2\5/g input_file
sed s/\(\s\+\)phone-\( leftsquarebrc 0-9 rightsquarebrc \+\)/\1device-\2&/ file
sed s/\(\w\+\)\s\+\(\w\+\)/mv sample_\1\.txt sample_\2\.txt/e replacements.txt
sed s/\(^ leftsquarebrc  \t rightsquarebrc \+ODI_SESJA_ID\ CONSTANT\).*/\1 \"newtimestamp\"/ tmp
sed s/\(^ leftsquarebrc ^. rightsquarebrc *\. leftsquarebrc ^. rightsquarebrc *\.\)\(.*$\)/\1/g
sed s/\(^\| leftsquarebrc ^ leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc \)fish\($\| leftsquarebrc ^ leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc \)/\1bear\2/g
sed s/\(^\|,\)\( leftsquarebrc ^,- rightsquarebrc \+-\)\{3,\} leftsquarebrc ^, rightsquarebrc \+\(,\|$\)/\3/g
sed s/\(_ leftsquarebrc ^_ rightsquarebrc *\)\{4\}$//
sed s/\(condition ccc.*aaa: \).*\( bbb$\)/\1gotit\2/ file
sed s/\(d leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc ?\)\( leftsquarebrc ^0-9 rightsquarebrc \|$\)/\1 \2/g test2.txt
sed s/\(d leftsquarebrc 0-9 rightsquarebrc \+\)/\1   /g;s/\(d leftsquarebrc 0-9  rightsquarebrc \{3\}\) */\1/g test2.txt fold -w 133
sed s/\(foo \)\(.*\)\( var\)/\1\U\2\E\3/ file
sed s/\(foo\)\.o leftsquarebrc  : rightsquarebrc */\1.o foo.P : /g
sed s/\(img_ leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *- leftsquarebrc 0-9 rightsquarebrc *_ leftsquarebrc 0-9 rightsquarebrc *\)\(.jpg\)/\2\1/
sed s/\(install --with-some-params some_pkg_name\)\.\( leftsquarebrc 0-9 rightsquarebrc \{5\}\)/\1.10001/g
sed s/\*$//;s/\*/.*/g
sed s/\*v//g
sed s/\. leftsquarebrc 0-9 rightsquarebrc */./g
sed s/\. leftsquarebrc ^. rightsquarebrc *$//
sed s/\.$// yourfile
sed s/\.\.*/_/
sed s/\.\././g oldfile
sed s/\.abc$//g
sed s/\.txt// filename
sed s/\/\/_/_/g file.php xgettext -o output.po --language PHP
sed s/\015//g replace.sed
sed s/\S*$/2/ yourfile
sed s/\S\+$/2/ yourfile
sed s/\\"/'/g
sed s/\\0001/\t/g;s/$/TEXT_TO_APPEND/ input.file
sed s/\\n/\n/g input_file
sed s/\\newline\( leftanglebrc \/Text rightanglebrc \)/\1/g file
sed s/\\r\\n/\r\n/g
sed s/\bint\b/\ int32_t\ /g file
sed s/\bred\b/red$(myrandom)/g inputfile read -r line eval echo ${line}
sed s/\r$// umlauts.sh
sed s/\r// big_list.txt sort -u
sed s/\r\n/rn/g
sed s/\s* leftanglebrc .* rightanglebrc \(.*\) leftanglebrc .* rightanglebrc /\1/
sed s/\s*//;:a;s/,\(.*|\(.*\)\)/\2\n\1/;ta;s/|// file
sed s/\s/\n/3;P;D file
sed s/\s/\n/g plaintext.txt grep http:
sed s/\s\?\w\+\.\(com\|org\)//g foo.txt
sed s/\s\s*/|/g
sed s/\sphone- leftsquarebrc 0-9 rightsquarebrc \+/&\t&/ file
sed s/\t/ /2g file
sed s/\t/,/g file.tsv
sed s/\t\t/\tNA\t/g;s//\tNA\t/g file
sed s/\xc2\x92//g
sed s/^ * leftsquarebrc ( rightsquarebrc \? leftsquarebrc A-Z rightsquarebrc \+- leftsquarebrc 0-9 rightsquarebrc \{1,4\} leftsquarebrc ): rightsquarebrc \? *//;s/ * leftsquarebrc ( rightsquarebrc \? leftsquarebrc A-Z rightsquarebrc \+- leftsquarebrc 0-9 rightsquarebrc \{1,4\} leftsquarebrc ): rightsquarebrc \? *$//
sed s/^ *// sed s/ *$//
sed s/^ *//;s/ *$//
sed s/^ *//;s/ *$//;s/ {1,}/ /g;s/: */:n/ infile tr -s n
sed s/^ *\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\) \(.*\)/\2 : \1/
sed s/^ *\( leftsquarebrc 0-9 rightsquarebrc \+\) /\1\t/
sed s/^ *\( leftsquarebrc ^  rightsquarebrc \+\).*  *\( leftsquarebrc ^  rightsquarebrc \+\) *$/\1 \2/
sed s/^ *\( leftsquarebrc ^= rightsquarebrc *\) *= *\(.*\) *$/\1/
sed s/^ *\( leftsquarebrc ^= rightsquarebrc *\) *= *\(.*\) *$/\1/ sed s/ *$//
sed s/^ *\( leftsquarebrc ^= rightsquarebrc *\) *= *\(.*\) *$/\2/
sed s/^ *\* *//; q
sed s/^ leftsquarebrc  \t rightsquarebrc *//; s/ leftsquarebrc  \t rightsquarebrc *$// file.txt awk BEGIN { RS=""; OFS=FS="\t"; print "A", "B", "C", "D", "E", "F" } { split ($2, one, " "); split ($3, two, " "); print one leftsquarebrc 1 rightsquarebrc , two leftsquarebrc 1 rightsquarebrc , one leftsquarebrc 2 rightsquarebrc , two leftsquarebrc 2 rightsquarebrc , one leftsquarebrc 3 rightsquarebrc , two leftsquarebrc 3 rightsquarebrc  }
sed s/^ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *//;s/ leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc \{1,\}/,/g
sed s/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+\./***&***/
sed s/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc * leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+\.//
sed s/^ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *//;s/ leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *$//
sed s/^ leftsquarebrc  t rightsquarebrc *// -i youfile
sed s/^ leftsquarebrc *-+ rightsquarebrc  *\ leftsquarebrc \(.*\)\ rightsquarebrc (\(.*\))/Notebook: x\nTitle: \1\nUrl: \2\nKeywords: y\n\nContent Area\n\nWill use the \1 and \2 variable here again/ file.txt
sed s/^ leftsquarebrc 0-9 rightsquarebrc * ps//g file1
sed s/^ leftsquarebrc 0-9 rightsquarebrc *//
sed s/^ leftsquarebrc 0-9 rightsquarebrc \+:// your.file
sed s/^ leftsquarebrc E  rightsquarebrc *\( leftsquarebrc 0-9 rightsquarebrc \)/\1/
sed s/^ leftsquarebrc Ss rightsquarebrc  leftsquarebrc Ee rightsquarebrc  leftsquarebrc Rr rightsquarebrc  leftsquarebrc Vv rightsquarebrc  leftsquarebrc Ee rightsquarebrc  leftsquarebrc Rr rightsquarebrc $/server.apple.com/g
sed s/^ leftsquarebrc ^  rightsquarebrc * //g
sed s/^ leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc \{1,\} leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc \{1,\}// in.txt
sed s/^ leftsquarebrc ^ rightsquarebrc  rightsquarebrc \+\ rightsquarebrc  \( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \+\) \(" leftsquarebrc ^" rightsquarebrc \+"\).*/\2,\1/ inputfile
sed s/^ leftsquarebrc ^# rightsquarebrc *$/& # newcontent, new, new/
sed s/^ leftsquarebrc ^$TAB rightsquarebrc *$TAB//g input.txt
sed s/^ leftsquarebrc ^: rightsquarebrc *:// infile
sed s/^ leftsquarebrc ^: rightsquarebrc *only\(1 leftsquarebrc 01 rightsquarebrc \) leftsquarebrc ^  rightsquarebrc */\1/
sed s/^ leftsquarebrc ^= rightsquarebrc *= *"\( leftsquarebrc ^" rightsquarebrc *\)"$/\1/
sed s/^ leftsquarebrc ^_ rightsquarebrc \+_\+\(\(_* leftsquarebrc ^_ rightsquarebrc \+\)\{3\}\).*/\1/
sed s/^ leftsquarebrc ^| rightsquarebrc *| leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\ leftsquarebrc \ leftsquarebrc \( leftsquarebrc ^ rightsquarebrc  rightsquarebrc \+\)\ rightsquarebrc \ rightsquarebrc .*/\1/ inputfile
sed s/^ leftsquarebrc ^| rightsquarebrc *|\( leftsquarebrc ^| rightsquarebrc *\)|.*/\1/
sed s/^ rightanglebrc \( leftsquarebrc ^_ rightsquarebrc *\).*$/ rightanglebrc M_\1/ file
sed s/^$$DRM45_RowCount=.*$/$$DRM45_RowCount=99/
sed s/^( leftsquarebrc "' rightsquarebrc )(.*)1$/2/g in.txt
sed s/^(.*)_( leftsquarebrc ^_ rightsquarebrc *)$/_\2/
sed s/^.* //
sed s/^.* \( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \):.* mail from \(.*@.*\.com\).*/\1 \2/ myfile
sed s/^.* rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc .*$/\1/
sed s/^.*: \(.*\)$/\1/
sed s/^.*\(.\)\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\1.*$/\2/;s/^.*(\( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)).*$/\1/;s/^.*\ leftsquarebrc \( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)\ rightsquarebrc .*$/\1/
sed s/^.*\///
sed s/^.*\bpattern\b.*$/Substitution/ file
sed s/^.*bbb //; s/ddd.*$//
sed s/^.*test/test/ input
sed s/^.....//
sed s/^./& /
sed s/^./&\t/;s/.$/\t&/ file
sed s/^.\(.*\)..$/\1/ file
sed s/^.\{20\}// logfile
sed s/^.icon-(.*) {$/if(strpos($embedicons,'1') !== false) { $svgicons .=  leftanglebrc  leftanglebrc  leftanglebrc 'EOD'n.1 {/g input_file.txt
sed s/^/${author}t${title}t/ filename
sed s/^/-p / tr \n  
sed s/^/NR==/ linesfile awk -f datafile
sed s/^/^ leftsquarebrc ^0-9 rightsquarebrc +/ egrep -v -f file1
sed s/^/`printf '%q' "${BASHVAR}"`/g printf %q ${BASHVAR}
sed s/^/`printf '%q' "${BASHVAR}"`/g printf %q ${BASHVAR}
sed s/^/chr/ file.in
sed s/^/echo /; s/ leftsquarebrc  leftsquarebrc  rightsquarebrc /{/; s/ rightsquarebrc /}/; s/-/../ bash
sed s/^/rm -rf / filename
sed s/^/rm /g filelist
sed s/^/s=/;s/$/=111111111=g/ items.txt sed -f -- text.txt
sed s/^/something/ baz
sed s/^/xx:/
sed s/^0$//g yourFile awk -v RS=  leftsquarebrc following codes are the same as above rightsquarebrc ......
sed s/^0/ /;: loop s/ 0/  /;t loop;s/ :/0:/
sed s/^0/ /;s/0:/x:/;: loop s/ 0/  /;t loop;s/x:/0:/
sed s/^0//g sed s/^0//g
sed s/^0\+//
sed s/^:// filename
sed s/^CN=\( leftsquarebrc ^, rightsquarebrc *\).*/\1/ input_file
sed s/^HELLO WORLD ( leftsquarebrc a-z_ rightsquarebrc *,  leftsquarebrc a-z_ rightsquarebrc *)/& 16/ file
sed s/^URL=(.*)/TITLE=$(curl -s \\1 | head -n 1)/ file.txt curl -s \1 head -n 1
sed s/^\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc * rightsquarebrc  *//
sed s/^\( leftsquarebrc   rightsquarebrc *stars\)/\t\1/ input
sed s/^\( leftsquarebrc  \t rightsquarebrc *\)\(.*\)$/\1 leftanglebrc !-- \2 -- rightanglebrc / web.xml
sed s/^\( leftsquarebrc  \t rightsquarebrc *stars\)/@\1/ input column -t sed s/^@/ /
sed s/^\( leftsquarebrc 0-9 rightsquarebrc \+ leftsquarebrc _:- rightsquarebrc \)\{6\}// logfile
sed s/^\( leftsquarebrc 0-9 rightsquarebrc \+\)  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  \(.\+\)$/\1 \2/
sed s/^\( leftsquarebrc 0-9 rightsquarebrc \+\) 08 \(.\+\)$/\1 \2/
sed s/^\( leftsquarebrc 0-9 rightsquarebrc \{8\}\) leftsquarebrc 0-9 rightsquarebrc */\1/ infile
sed s/^\( leftsquarebrc 0-9 rightsquarebrc \{8\}\) leftsquarebrc 0-9 rightsquarebrc \{1,\}/\1/ infile
sed s/^\( leftsquarebrc 0-9A-Fa-f rightsquarebrc \{2\}\)\( leftsquarebrc 0-9A-Fa-f rightsquarebrc \{2\}\).*$/\1:\2:/
sed s/^\( leftsquarebrc A-Za-z  rightsquarebrc *\) \( leftsquarebrc -A-Z 0-9 rightsquarebrc *|\)/\1|\2/ input
sed s/^\( leftsquarebrc A-Za-z0-9 rightsquarebrc *\).*/\1/
sed s/^\( leftsquarebrc ^  rightsquarebrc  leftsquarebrc ^  rightsquarebrc * leftsquarebrc   rightsquarebrc \) leftsquarebrc   rightsquarebrc */\1/ input
sed s/^\( leftsquarebrc ^  rightsquarebrc *\)/\1 \1 0 0 -9 -9/
sed s/^\( leftsquarebrc ^, rightsquarebrc *, leftsquarebrc ^, rightsquarebrc *,\).*/\192.2.11.1/
sed s/^\( leftsquarebrc ^| rightsquarebrc *\)|0*\( leftsquarebrc ^| rightsquarebrc *\)/\1|\2/ input
sed s/^\( rightanglebrc .*\)$/\1 Brassica rapa/ infile
sed s/^\(" leftsquarebrc ^" rightsquarebrc *server leftsquarebrc ^" rightsquarebrc *"\\1\\\)".*"$/\1"tbone"/
sed s/^\(" leftsquarebrc ^\\" rightsquarebrc *server leftsquarebrc ^\\" rightsquarebrc *"\\1\\\)" leftsquarebrc ^\\" rightsquarebrc *"$/\1"tbone"/
sed s/^\(.* leftsquarebrc 0-9 rightsquarebrc \).*$/\1/g file
sed s/^\(.*:.*\):/\1 family:/ test.txt
sed s/^\(.*\)#.*$/\1/
sed s/^\(.*\).txt$/perl mycode.pl \/home\/neversaint\/\1\.txt  rightanglebrc  \/home\/neversaint\/\1.output/ submit.sh
sed s/^\(.......\) leftsquarebrc ^. rightsquarebrc *\./\1./
sed s/^\(....\)-../\1-09/
sed s/^\(..\/\)\(..\/\)..\(..,\)/\2\1\3/ file
sed s/^\(.\)/\U\1/ yourfile
sed s/^\(.\)\(.\+\)\(.\)$/\3\2\1/ input.txt
sed s/^\(.\{2\}\)0/\1/
sed s/^\(.\{2\}\)0\(.*\)$/\1\2/
sed s/^\(RAILS_GEM_VERSION.*\)$/# \1/ -i .backup config/environment.rb
sed s/^\(\s*\)\(1\)/\10/g file
sed s/^\(\s\+\) leftanglebrc type rightanglebrc /\1 leftanglebrc myAddedTag \/ rightanglebrc \n&/g yourfile
sed s/^\(aa leftsquarebrc 0-9 rightsquarebrc *\)b/\1/ t1
sed s/^\(blah.*\)\..\{3\}$/\1/g
sed s/^\(blah.*\)\.abc$/\1/g
sed s/^\(cat:  leftsquarebrc -+ rightsquarebrc \)0\{0,1\}\( leftsquarebrc 1-9 rightsquarebrc \{0,1\} leftsquarebrc 0-9 rightsquarebrc \)00/\1\2/ data
sed s/^\(export MY_ENV=\).*$/\1NEW_VALUE/
sed s/^\s*./0/g file
sed s/^\s*\(.*\)\s*/\1/g file
sed s/^_ leftsquarebrc 0-9 rightsquarebrc *\(_.*\)$/_\1/
sed s/^_ leftsquarebrc 0-9 rightsquarebrc *_\(.*\)$/\1/
sed s/^aaa.*bbb$/aaa_TEST_bbb/ file
sed s/^b/\n/; s/b/x/g; s/^\n/b/
sed s/^copy \( leftsquarebrc ^( rightsquarebrc *\)($/hello \1\ncopy \1(/
sed s/^echo "/echo -e "/ filename
sed s/^foo$/FOO/; t; s/^/- / infile
sed s/^foo/barfoo/ baz
sed s/^server$/server.apple.com/Ig
sed s/^server$/server.apple.com/g
sed s/^some string=.*/some string=newvalue/
sed s/^sudo//; /^ *apt-get install */!d; s///; s/  */\n/g ~/.bash_history sort -u
sed s/^volume =.*/volume = 0/g file.txt
sed s/^|// file
sed s/^|/nil|/; s/|$/|nil/; :a; s/||/|nil|/g; ta
sed s/_ leftsquarebrc ^_ rightsquarebrc *_ leftsquarebrc ^_ rightsquarebrc *$//
sed s/_.*//
sed s/_.//g
sed s/_/ /
sed s/_/-/;s/_/-/;s/_/ /;s/_/:/g
sed s/_/\\_/g
sed s/_\( leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc \{1,\}\)/_\1\t\1/g
sed s/_\( leftsquarebrc 0-9 rightsquarebrc * leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc \)p.mov/_h\1p.mov/g
sed s/_\(.\)/\U\1/g
sed s/a.*b/xyz/g; old_file
sed s/a\(bc\|de\)f/X/
sed s/aaa=.*/aaa=xxx/g
sed s/abc//g file
sed s/abc\( leftsquarebrc 1-3 rightsquarebrc  leftsquarebrc 05 rightsquarebrc *\)/\1/ file
sed s/address = \ leftsquarebrc \|\ rightsquarebrc //g
sed s/apple-pie/apple_pie/g file1.txt
sed s/author:  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc ;//g
sed s/bVERSIONb/$version_1/g
sed s/blah\(.*\)blah/\1/g
sed s/cat/dog/g
sed s/ccpAdd(\(.*\),\(.*\))/\1+\2/g
sed s/commandtwo{\( leftsquarebrc ^} rightsquarebrc *\)}/\1/g inputfile
sed s/delete from \(tb leftsquarebrc 0-9 rightsquarebrc \?\).\( leftsquarebrc  leftsquarebrc :alnum: rightsquarebrc  rightsquarebrc \+\)/delete from \2/g input.file
sed s/draw($prev_number;n_)/draw($number;n_)/g file.txt
sed s/echo/echo\n/g FILE grep -c echo
sed s/file=" leftsquarebrc ^" rightsquarebrc *"/file="new_file_name"/
sed s/find/replace/g filename
sed s/foo/$(echo .. |tr ...)/g file.txt echo .. tr ...
sed s/foo/&\n/2;T;h;s//bar/g;G;s/\n.*\n// file
sed s/foo/&bar&/
sed s/foo/\n/g;s/\n/foo/3g;s/\n/bar/g file
sed s/foo/bar/I file
sed s/foo/barfoo/g baz
sed s/foo/foo" "bar/g file
sed s/foo\.o leftsquarebrc  : rightsquarebrc */foo.o foo.P : /g
sed s/foo_bar('( leftsquarebrc ^' rightsquarebrc *)')/booch leftsquarebrc '1' rightsquarebrc =$1/g infile
sed s/fox/\n/;T;D file
sed s/function\s\(.*\)(/\1: function(/g file.js
sed s/get_pins {/get_pins -hierarchical {proc_top_*//g filename.txt
sed s/hello/bye/g
sed s/l2- leftsquarebrc ^- rightsquarebrc *- leftsquarebrc ^- rightsquarebrc *- leftsquarebrc ^- rightsquarebrc *-/l2-2-ghb-8-m-/g
sed s/model- rightanglebrc \(.*\)/models leftsquarebrc \1 rightsquarebrc  leftsquarebrc index rightsquarebrc / file.txt
sed s/mov r1, \ leftsquarebrc r1, r2\ rightsquarebrc /sub  leftsquarebrc r8, r9 rightsquarebrc , r10/g file.S
sed s/myregex/&?AString/g myfile.txt
sed s/myurl/http:\/\/192.168.1.1:8080\// strings.xml
sed s/name="m_AllowDownload" rightanglebrc False leftanglebrc /name="m_AllowDownload" rightanglebrc True leftanglebrc /
sed s/name="m_AllowDownload" rightanglebrc False leftanglebrc /name="m_AllowDownload" rightanglebrc True leftanglebrc /
sed s/new leftsquarebrc ^; rightsquarebrc *//g; s/;;/;/g; s/^;|;$//g
sed s/new leftsquarebrc ^; rightsquarebrc *;//
sed s/oldwebsite.com/newwebsite.com/ file.sql
sed s/pattern/pattern mark/
sed s/pattern/replacement/g
sed s/php\*//g file
sed s/price/g:price/g file.txt
sed s/printf("thread %d: enters barrier at %d and leaves at %d\\n", MYTHREAD, start, end);/printf("thread %d: enters barrier at %lf and leaves at %dlf\\n", MYTHREAD, (double)start, (double)end);/ bt_copy.c
sed s/r leftsquarebrc 0-9 rightsquarebrc /-&/ file
sed s/regexp/\n&/g
sed s/require_once('/require_once($_SERVER leftsquarebrc 'DOCUMENT_ROOT' rightsquarebrc /'/g
sed s/s*$$//
sed s/s*$//
sed s/sd/paragraphnsd/ file
sed s/software-\(.*\)-license.*/\1/
sed s/some string=.*/some string=newvalue/
sed s/su./newfolder/g
sed s/su\(.\)/newfolder\1/g
sed s/substitution/replacement/g filename
sed s/test( leftsquarebrc ab rightsquarebrc |$)/pass/
sed s/theta = 0.0/theta = $theta/;s/r = 1.0/r = $r/;s/visual_1_0/visual_${r}_${theta}/
sed s/timeout=4.0/$timeoutvalue/g egtext
sed s/username/+/g
sed s/username= leftsquarebrc a-z0-9_ rightsquarebrc +/username=abc/i Service.properties
sed s/val1/hello/ file
sed s/val1/hello/g file
sed s/val1/hello/g file
sed s/var1= leftsquarebrc ^  rightsquarebrc *//g
sed s/w*$// old.txt
sed s/w+$/'&'/ file
sed s/word1/word2/g -i file.php
sed s/word1/word2/g file.php
sed s/xA3// inputfile
sed s/{"var": \ leftsquarebrc .*\ rightsquarebrc \}/\{"var": \ leftsquarebrc 4,5,6\ rightsquarebrc }/g file.txt
sed s/{\( leftsquarebrc ^} rightsquarebrc *\)}/ leftsquarebrc \1 rightsquarebrc /g filename
sed s/{\(" leftsquarebrc ^" rightsquarebrc *"\),\(" leftsquarebrc ^" rightsquarebrc *"\)}/{ label: \1, value: \2 }/
sed s/{\(\$ leftsquarebrc ^}\| rightsquarebrc *\)}/{\1|escape:htmlall}/g
sed s/{{\( leftsquarebrc a-z rightsquarebrc \{2,3\}\)\sicon/{{ref-\1/
sed s/| leftsquarebrc ^, rightsquarebrc *//g
sed s/| leftsquarebrc ^| rightsquarebrc *//
sed s/|.*// file.txt
sed s/|AUTODETECT|"}{\\fldrslt \\plain  leftsquarebrc ^} rightsquarebrc *}}/ /g $@
sed s/|ignore// table1.txt
sed s/||/|\"\"|/g
sed s/~/~\\n/g file
sed s: leftanglebrc Connector port="8080" protocol="HTTP/1\.1: leftanglebrc Connector port="'"$port"'" protocol="HTTP/1.1":
sed s: leftanglebrc \|\(/ rightanglebrc \)::g;s:\(= leftsquarebrc ^  rightsquarebrc \+\) :\1\n:g INPUTFILE
sed s: leftanglebrc size rightanglebrc \( leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc *\) leftanglebrc /size rightanglebrc : leftanglebrc size rightanglebrc \1,-1 leftanglebrc /size rightanglebrc :g ...
sed s: leftsquarebrc  \t rightsquarebrc *'${DOC_KEY}' leftsquarebrc  \t rightsquarebrc *=.*:'${DOC_KEY}' = '${DOC_VALUE}': profile
sed s: leftsquarebrc  t rightsquarebrc *${DOC_KEY} leftsquarebrc  t rightsquarebrc *=.*:${DOC_KEY} = ${DOC_VALUE}: profile
sed s:( leftsquarebrc ^) rightsquarebrc *)::g
sed s:.*/:: file
sed s:/\(/\)\{0,1\}:\1:g
sed s:=/.*:=/test/path: file
sed s:\( leftanglebrc td class="content_subhd" rightanglebrc \)\(.*\)\( leftanglebrc /td rightanglebrc \):\1 leftanglebrc h2 rightanglebrc \2 leftanglebrc /h2 rightanglebrc \3:
sed s:^ leftanglebrc td rightanglebrc \| leftanglebrc /td rightanglebrc $::g
sed s:^$musicdir/::;s:. leftsquarebrc ^/ rightsquarebrc  leftsquarebrc ^/ rightsquarebrc *$::
sed s:^/a/b/:: myfile.txt
sed s:action=" leftsquarebrc ^" rightsquarebrc *":action="error.php":
sed s:site1.com\(/blog/ leftsquarebrc 0-9 rightsquarebrc \{4\}/ leftsquarebrc 0-9 rightsquarebrc \{2\}/ leftsquarebrc 0-9 rightsquarebrc \{2\}\):site2.com/\1:
sed s:|:"|":g;s/^/"/;s/$/"/
sed s; leftanglebrc version rightanglebrc ${project.version} leftanglebrc /version rightanglebrc ; leftanglebrc version rightanglebrc 0.9.1-SNAPSHOT leftanglebrc /version rightanglebrc ;g
sed s; leftsquarebrc ^/ rightsquarebrc */;|____;g sed s;____|; |;g
sed s;^1\( leftsquarebrc 0-9 rightsquarebrc \{10\}\)$;\1; filename
sed s;hello;bye;g
sed s?#REPLACE-WITH-PATH?'`pwd`'?
sed s?$Plc_hldr1?$DateTime?;s?$Plc_hldr2?$Total?
sed s@ leftanglebrc /body rightanglebrc @\t leftanglebrc !-- EX -- rightanglebrc \n\t leftanglebrc A href="ex/live/current/index.html"  rightanglebrc EX Live leftanglebrc /A rightanglebrc &nbsp;\n\t leftanglebrc A href="ex/live/"  rightanglebrc (All months) leftanglebrc /A rightanglebrc  leftanglebrc br rightanglebrc \n leftanglebrc /body rightanglebrc @
sed s@ leftanglebrc /strong rightanglebrc .*@@
sed s@ leftanglebrc SRC_PATH rightanglebrc @$SRC_PATH@g template.sh
sed s@ leftanglebrc date rightanglebrc .* leftanglebrc /date rightanglebrc @ leftanglebrc date rightanglebrc MM/DD/YYYY HH:MM:SS AM leftanglebrc /date rightanglebrc @
sed s@ leftanglebrc number rightanglebrc  leftsquarebrc 0-9 rightsquarebrc * leftanglebrc /number rightanglebrc @ leftanglebrc number rightanglebrc  leftanglebrc /number rightanglebrc @g xml.log
sed s@ leftanglebrc number rightanglebrc  leftsquarebrc 0-9 rightsquarebrc * leftanglebrc /number rightanglebrc @replace@g xml.log
sed s@ leftanglebrc start rightanglebrc .* leftanglebrc /start rightanglebrc @ leftanglebrc start rightanglebrc  leftanglebrc ab rightanglebrc  leftanglebrc /ab rightanglebrc  leftanglebrc ab rightanglebrc  leftanglebrc /ab rightanglebrc  leftanglebrc ab rightanglebrc  leftanglebrc /ab rightanglebrc  leftanglebrc /start rightanglebrc @ file
sed s@",@", "a/sdb leftsquarebrc 0-9 rightsquarebrc *$/",@
sed s@$1@$var@g -i filename
sed s@,\(..\)/\(..\)/\(..\) @,20\3/\1/\2 @
sed s@.*//\( leftsquarebrc ^ / rightsquarebrc \+\) leftsquarebrc /  rightsquarebrc .*@\1@g file.txt
sed s@/lib\(64\)\?\(32\)\?/ld@/tools&@g abc.txt
sed s@/s/ leftsquarebrc ^/ rightsquarebrc */@/s/123123/@g
sed s@TEMPDIR@$(pwd)@ file.py pwd
sed s@TEMPDIR@$PWD@ file.py
sed s@\(^EMS_ leftsquarebrc SIJ rightsquarebrc .*=/\).*@\1test/path/@ file
sed s@^ leftsquarebrc ^/ rightsquarebrc *@@ input
sed s@^@ leftanglebrc url rightanglebrc  leftanglebrc loc rightanglebrc http://www.mysite.com/review/@; s@$@ leftanglebrc /url rightanglebrc  leftanglebrc /loc rightanglebrc @ files*.html
sed s@dump 0 $2 $3 $4 $5@dump 1 $2 $3 $4 $5@g base_file.properties
sed s@food.type=.*@food.type=$FOOD@
sed s@food.type=.*@food.type=$FOOD@
sed s_ leftanglebrc /?(ret:)?EditUse rightanglebrc __g
sed s_ leftanglebrc /\s*\?strong rightanglebrc _ rightanglebrc _g INPUTFILE
sed s_ rightanglebrc _/ rightanglebrc _g
sed s_${org}_${repl}_g $i
sed s_/\( leftsquarebrc ^/ rightanglebrc  rightsquarebrc \+\)" rightanglebrc  leftanglebrc _/\1" rightanglebrc \1 leftanglebrc _g file
sed s_DocumentRoot /var/www/html_DocumentRoot /usr/share/rt3/html/_ /etc/httpd/conf/httpd.conf
sed s_\(\(checksum\|compressed\)=\"\).*\(\"\)_\1\3_ -i filename
sed s_https://_home/shantanu/company/_g
sed s| \(path=.*\)\(/lib\)\(/MOM leftsquarebrc ^  rightsquarebrc *\)| \1\2\3 source\1/src/main/java"| inputfile
sed s| leftanglebrc /\?desc rightanglebrc |\n&|g; s/\( leftanglebrc desc rightanglebrc  leftsquarebrc ^" rightsquarebrc *\)"\( leftsquarebrc ^\n rightsquarebrc *\n\)/\1\&quot;\2/g;s/\n//g inputfile
sed s| leftanglebrc /head rightanglebrc ||g
sed s| leftanglebrc TH leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc | leftanglebrc th rightanglebrc |g file
sed s| leftanglebrc \( leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc  leftsquarebrc ^ leftsquarebrc :space: rightsquarebrc  rightsquarebrc *\)/ rightanglebrc | leftanglebrc \1 rightanglebrc  leftanglebrc /\1 rightanglebrc |g
sed s| leftanglebrc pattern rightanglebrc | leftanglebrc replace rightanglebrc | file xargs -i -{ -} cp {} somewhere
sed s| leftsquarebrc  leftsquarebrc   rightsquarebrc *| leftsquarebrc '|g;s| leftsquarebrc   rightsquarebrc * rightsquarebrc |' rightsquarebrc |g test.in
sed s| leftsquarebrc ^, rightsquarebrc *,\( leftsquarebrc ^); rightsquarebrc *\));.*|\1|
sed s| leftsquarebrc ^, rightsquarebrc *,\s*\( leftsquarebrc ^); rightsquarebrc *\)\s*);.*|\1|
sed s|#/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;|SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO';| file.sql
sed s|$ROOT|${HOME}| abc.sh
sed s|$ROOT|${HOME}|g abc.sh
sed s|$org|$repl|g $i
sed s|( leftsquarebrc ^) rightsquarebrc *)|\n&\n|g;s@\n\((/\?s)\|(VOCAL_NOISE)\)\n@\1@g;s|\n\(( leftsquarebrc ^) rightsquarebrc *)\)\n|~NS|g inputfile
sed s|( leftsquarebrc ^) rightsquarebrc *)|\n&\n|g;s|\n\((/\?s)\)\n|\1|g; s|\n\((VOCAL_NOISE)\)\n|\1|g;s|\n\(( leftsquarebrc ^) rightsquarebrc *)\)\n|~NS|g inputfile
sed s|(.*)|$VARIABLE1|
sed s|(url( leftsquarebrc '" rightsquarebrc ?)(/ leftsquarebrc ^) rightsquarebrc *)|1$STATIC_HOST2|g main.css
sed s|.* \( leftsquarebrc 0-9 rightsquarebrc *  leftsquarebrc km rightsquarebrc b/s\).*|\1|
sed s|.*/ABCD\(.*\) leftsquarebrc 0-9 rightsquarebrc \{2\}- leftsquarebrc  leftsquarebrc :alpha: rightsquarebrc  rightsquarebrc .*.sql.zip|\1|
sed s|.*|/\\ leftanglebrc &\\ rightanglebrc /{w "&.txt"\nd}| matchingString_file sed -i -. -b -a -k -f fileA
sed s|.*|/\\ leftanglebrc &\\ rightanglebrc /{w fileB\nd}| matchingString_file sed -i -. -b -a -k -f fileA
sed s|/.*|| file
sed s|/.*||g
sed s|//--* *$|| -i file.cpp
sed s|/\*\(.*\)\*/|\1| ./myfile
sed s|/|\\/|g
sed s|PAT|'"$(echo $VAR3 | tr -d '\n')"'| temp2.sh
sed s|XXX|'$(tr -d '\n'  leftanglebrc fileB)'| fileA
sed s|\ leftsquarebrc #${key}#\ rightsquarebrc |${value}|g
sed s|\(.*\(/ leftsquarebrc ^/ rightsquarebrc *$\)\)|s#data\2#\1#| new_paths_list.txt
sed s|\(.*\(/ leftsquarebrc ^/ rightsquarebrc *$\)\)|s#data\2#\1#| new_paths_list.txt sed -i -f my_exported_db.sql
sed s|\(ducument= leftsquarebrc ^/ rightsquarebrc */\) leftsquarebrc 0-9 rightsquarebrc \{10\}|\1replacetext| infile
sed s|\x1a||g your_file.txt
sed s|^ *\(.*\)\(.\)$|sed -i.bak "/^ *csh.*\2/d" yy/\1.txt| xx.txt sh
sed s|^ leftanglebrc td rightanglebrc \(.*\) leftanglebrc /td rightanglebrc $|\1|g
sed s|^.*/||g file
sed s|^\( leftsquarebrc ^, rightsquarebrc *,\).*|/^\1/c\\&| param.txt sed -f input.txt
sed s|^|cd |; s|/\( leftsquarebrc ^/ rightsquarebrc *\)$|; $RUNLD \1| inputfile
sed s|image/(.*(/ leftsquarebrc ^/ rightsquarebrc *$))|s# leftsquarebrc ^' rightsquarebrc *2#1#| new_paths_list.txt
sed s|wxT(\( leftsquarebrc ^) rightsquarebrc *\))|\1|g file
sed s|{moslate} leftsquarebrc ^{ rightsquarebrc *{/moslate}||g a.txt
sed s~ leftanglebrc script type='text/javascript' src='http://siu.edu.bd/includes/framework.js' rightanglebrc  leftanglebrc /script rightanglebrc ~ ~g
sed s~#\(FILE.*/this/is/a/file/path/.*\)$~\1~ file
sed s~$Old~$New~ /location/file.txt
sed s~$ampP~$ampR~g
sed s~/\*.*\*/~~
sed s~URLS~$TEXT~g imagesbu.html
sed s~\(.*/\).*~\1~ file.txt
sed s~\\\x01~\\&~g
sed s~file.*/\(.*\.jar\)\(.*\)~file:///lib/\1\2~ a.txt
sed s~pattern~replacement~g
sed s~uri='file:/var/lib/abc/cde.repo/r/c/e/v/1.1/abc-1.1.jar~uri='file:/lib/abc-1.1.jar'~g
sed whatever oldfile mv newfile oldfile
sed x;/./{x;/#location/,+6s/#/ /;b};x;/#location/h file
sed x;/./{x;b};x;/^@.*{id1/,/}/{/}/h;d} file
sed x;/./{x;b};x;/aaa/,/ddd/!b;/ddd/!b;h;a\hello file
sed y/ABCDEFGHIJKLMNOPQRSYUVWXYZ/abcdefghijklmnopqrstuvwxyz/
sed y/ae/ea/
sed y/aeiouAEIOU/AEIOUaeiou/
sed { N;s/\n/:/ }
sed.exe -e :a -e $q;N;11,$D;ba
sed.exe s@.*//( leftsquarebrc ^ / rightsquarebrc +) leftsquarebrc /  rightsquarebrc .*@1@g file.txt
sed: -e expression
sed: -e expression
sed: 1: 5 i hello foo: command i expects  followed by text
sed: 1: s/Name:(.*))/1/g: RE error: parentheses not balanced
send $(THING)c THING
send -s execute backup full-config tftp  leftsquarebrc clock format  leftsquarebrc clock seconds rightsquarebrc  -format %Y.%m.%d rightsquarebrc  xxx.xxx.xxx.xxxn
send Pass\$wordn
send cd $(printf '%q' $2)r printf %q $2
send hello worldr
send if  leftsquarebrc  ! -f $USER_SSH_PATH/id_rsa.pub  rightsquarebrc ; then CREATE_FILE=true; fir
send sed '1i//$VAR' /file  rightanglebrc  /tmp/outr
send top -n 1 | grep Mem: | awk '{ print $(NF-7) }' | cut -d 'k' -f1n
sendEmail -f fromAddr@example.com -t toAddr@example.com -s smtp.server.com -u theSubject -m the Message -a fileToAttach
send_user $username $password
sendmail $myemail exit
sendmail -F Your name -f your-address@example.com
seq  leftsquarebrc -w rightsquarebrc   leftsquarebrc -f format rightsquarebrc   leftsquarebrc -s string rightsquarebrc   leftsquarebrc -t string rightsquarebrc   leftsquarebrc first  leftsquarebrc incr rightsquarebrc  rightsquarebrc  last
seq $FROMHERE -1 1
seq --format %g.jpg 66895 105515 xargs zip images.zip
seq --format file /home/debian/%02G.flv 70
seq --format file /home/debian/%02G.flv 70
seq -f %02.0f 5 15
seq -f %04g 0 10
seq -f apple_%03g_suf1.png 20
seq -f dir%.0f -s   1 1 10 xargs mkdir
seq -s -, $counter -1 1
seq -w 0 10 echo $n $(expr $n + 4) expr $n + 4
seq -w 00000000 00000009
seq -w 1 10
seq -w 1 100
seq -w 30
seq 0 10
seq 0 10 xargs printf %04d\n
seq 0 2 10 echo $i
seq 0.01 0.01 0.5 echo called with $i
seq 1 $1 echo $i
seq 1 $END echo $i
seq 1 $i echo $j
seq 1 10 parallel --joblog out.log -S srv01,srv02,srv03,srv04 ./failjob
seq 1 10 parallel -j -+ -0 -n 2 -k mycommand
seq 1 10 parallel -j -+ -0 -n 2 -k mycommand $PARALLEL_SEQ
seq 1 10 parallel matlab -singleCompThread -nodesktop -nosplash -r "test({},43))"
seq 1 10 perl -e -@ -x -= - leftanglebrc  - rightanglebrc  -; -p -r -i -n -t -@ -x - leftsquarebrc  -0 -. -. -$ -# -x -- -3 - rightsquarebrc 
seq 1 10 perl -n -e $. % 2 and print (($.+1)/2,"\n"); print xargs -n 3 ...
seq 1 10 perl -p -l -e -$ -_ -= -r -a -n -d - rightanglebrc  -. -5 -? -+ -+ -$ -a -: -- -- -$ -b
seq 1 10 sed -e 1~2s/.*/code1 &/
seq 1 10 sed -n ${i}p
seq 1 100
seq 1 100 cat cool$n.txt awk {print $0 " cool"} cat warm$n.txt awk {print $0 " warm"}
seq 1 100 sed s/^/x\n/g zenity --list --radiolist --column Select --column Number
seq 1 1000 addnumbers-make-pdf.sh ${i}
seq 1 1000000 read i echo -e -n r$i
seq 1 24 parallel -P 8 ./myscript
seq 1 24 xargs -l -P 8 ./myscript
seq 1 3 cut -d -, -f -1 -, -5 -, -6 myfile${i}.csv
seq 1 4 ls *.tar.gz tar -x -v -f -z $name rm $name
seq 1 5 read x echo value is $x
seq 1 50 input tap 653 100
seq 1 60 echo $n sleep 1 sudo sync
seq 1 `wc -l "test.csv" | awk '{print $1}'` wc -l test.csv awk {print $1} sed -n $ip test.csv ./myprogram
seq 1 inf awk {sum+=(1/$1)} {print sum}
seq 10 parallel --skip-first-line --pipe (echo hea,der; cat) | my_prog
seq 10 parallel awk '{...}' file{}.txt  rightanglebrc  file{}.out
seq 100 ls Force$i.txt
seq 100 parallel --pipe -N 23 cat  rightanglebrc  /tmp/parallel_test_{#}
seq 1000 3000
seq 1000 grep  leftsquarebrc 24680 rightsquarebrc .* leftsquarebrc 13579 rightsquarebrc $
seq 1000 sed -n / leftsquarebrc 24680 rightsquarebrc .* leftsquarebrc 13579 rightsquarebrc $/ p
seq 12 16 256 echo 10.4.{0..255}.$I
seq 12 awk {if((NR%3)==1) { print $0, (NR+2)/3 } else if ((NR%3)==2) { print $0, (NR+1)/3 } else { print $0, NR/3} }
seq 2 echo $i
seq 20 ./a.out
seq 20 awk BEGIN { array leftsquarebrc 2 rightsquarebrc ++; array leftsquarebrc 12 rightsquarebrc ++; array leftsquarebrc 15 rightsquarebrc ++ } !(NR in array)
seq 2014 2044 sort -R
seq 3 echo $i sleep 2
seq 4444 65000 echo -n -e 035 /usr/bin/telnet 127.0.0.1 $port  leftsquarebrc  $? -e -q 1  rightsquarebrc  echo unused $port break
seq 4444 65000 echo -n -e 035 telnet 127.0.0.1 $port  leftsquarebrc  $? -e -q 1  rightsquarebrc  echo unused $port break
seq 49 ruby -p -e BEGIN { $tot=0 }; $tot += $_.to_i; END { print $tot }
seq 5 15
seq 5 sort
seq 786 sed s@^@http://www.blabla.bla/forum-detail/?ft=72260\&fid=34\&\&pgr=@
seqtk trimfq -b 10 -e 20 $file
service --status-all grep firestarter
service anacron stop
service sshd restart
service_name
set
set
set
set $var $val
set ${(Oa)@}
set ${A:-0.0.0.0}
set %PATH% clip
set +f
set +f
set +o histexpand
set +o pipefail
set +o posix
set +o xtrace
set +x
set +x
set --   
set -- $( leftanglebrc file)
set -- $(awk 'NR==1{max=$3; min=$3}{if ($3 rightanglebrc max) max=$3; if ($3 leftanglebrc min) min=$3;} END {print max,min}' List.txt) awk NR==1{max=$3; min=$3}{if ($3 rightanglebrc max) max=$3; if ($3 leftanglebrc min) min=$3;} END {print max,min} List.txt
set -- $(echo "$line" | sed 's/.*--- \( leftsquarebrc ^( rightsquarebrc *\) (.*/\1/') echo $line sed s/.*--- \( leftsquarebrc ^( rightsquarebrc *\) (.*/\1/
set -- ${@:1:1} ${@:3}
set -- ${@:1:2} new ${@:4}
set -- *
set -- ./deploy_* eval $*
set -- `echo $1 | awk -F"-" '{print $1,$2,$3}'` echo $1 awk -F -- {print $1,$2,$3}
set -- a b
set -- a b c  d   e  f  
set -- foo bar
set -- something ${@:2}
set -A INDEXES `db2 connect to watevrDB  rightanglebrc /dev/null;db2 -x describe indexes for table ${TABSCHEMA}.${TABNAME} show detail | awk {'print $1"."$2'}` db2 connect to watevrDB db2 -x describe indexes for table ${TABSCHEMA}.${TABNAME} show detail awk {print $1.$2}
set -A arr $(cat $KEY) cat $KEY
set -A words ${(f)...}
set -A x $(echo $x1 | cut -f3 -d" " | cut -f1 -d" rightsquarebrc ") echo $x1 cut -f 3 -d -  cut -f 1 -d - rightsquarebrc 
set -C
set -a $arrayName=(10 20 30 40)
set -e
set -e
set -e
set -e
set -e
set -e
set -e
set -e true date head -n 1
set -f
set -g -x
set -g default-command /bin/zsh
set -m
set -o
set -o
set -o CSH_NULL_GLOB
set -o NULL_GLOB
set -o errexit
set -o errexit
set -o errtrace
set -o functrace
set -o functrace
set -o grep emacs.*on echo E echo V
set -o history
set -o multiline
set -o noclobber
set -o noglob
set -o noglob
set -o noglob ./script /home/*/public_html php.ini module.so set +o noglob
set -o noglob type -P $(compgen -c | awk '!a leftsquarebrc $0 rightsquarebrc ++') compgen -c awk !a leftsquarebrc $0 rightsquarebrc ++
set -o nounset
set -o pipefail
set -o pipefail
set -o pipefail
set -o pipefail
set -o pipefail
set -o posix set less
set -o xtrace
set -x
set -x
set -x
set -x
set -x
set -x
set -x
set -x
set -x
set -x
set -x -v
set -x -v
set -x do_thing_you_want_traced
set -x ls $dir
set 1:2:4 20120318~22:05:00rn
set 5 10
set CLASSPATH=%JUNIT_HOME%junit.jar c:myprojectclasses c:myprojectlibsomething.jar
set M2_HOME = C:Softwaremaven221
set MAVEN_DEBUG_OPTS=-Xdebug -X -n -o -a -g -e -n -t -D -j -a -v -a -. -c -o -m -p -i -l -e -r -= -N -O -N -E -X -r -u -n -j -d -w -p -: -t -r -a -n -s -p -o -r -t -= -d -t -_ -s -o -c -k -e -t -, -s -e -r -v -e -r -= -y -, -s -u -s -p -e -n -d -= -y -, -a -d -d -r -e -s -s -= -8 -0 -0 -0
set MY_TOOL=%MY_TOOL%
set OS_ROOT=%systemdrive%
set PATH
set PATH = %M2_HOME%bin %PATH%
set PATH = %PATH% C:/Some/Directory/Path
set PATH=%path%;C:Qt4.8.1bin
set PATH=C:Qt4.8.1bin
set PATH=c:Program FilesJavajdk1.6.0_03bin %PATH%
set PROMPT1 (%n@%M:% rightanglebrc ) %`date +%H:%M:%S`  leftsquarebrc %/ rightsquarebrc  \n%x%# 
set PYTHONPATH=/somedir/pythonsrc /anotherdir/pythonsrc python.exe mymodule.py
set Pathname=C:Program Files
set TEST=1 1 1
set TEST=1 1 1
set VAGRANT_MOUNT_BASE=%CD%
set VLC_VGA to application processes whose unix id is pid as integer
set X=%cd%
set _f  leftsquarebrc file tail $_d rightsquarebrc 
set a = `echo $a | sed -e 's_old_new_'` echo $a sed -e s_old_new_
set a b c d
set a=1 b=2 c d=4
set ans=`grep -r hello .` grep -r hello .
set args foo bar baz ...
set b=`echo "$a" | tr ' leftsquarebrc A-Z rightsquarebrc ' ' leftsquarebrc a-z rightsquarebrc '` echo $a tr  leftsquarebrc A-Z rightsquarebrc   leftsquarebrc a-z rightsquarebrc 
set backupdir=~/.backup,/tmp
set bell-style none
set blink-matching-paren on
set completion-ignore-case on
set derby
set destination1 = /scratch/graphics/${1}.gif
set destination1 = /scratch/graphics/${1}gif
set editing-mode vi
set fileExtension=bmp
set filename=C:MyDirMyFile with space.txt
set fit logfile /dev/null
set fit quiet
set foo=bar .foo.py set foo=
set format y %.0f
set grep -e ^\w\w*\=
set grep -i INT cat -v -e -t
set grep youtube-dl
set guid=%guid: =%
set head off
set host  leftsquarebrc info hostname rightsquarebrc 
set keymap vi
set line=%line:* leftanglebrc ORIGINAL rightanglebrc =%
set logg= ^ ^ ^ type _ ^ ^ type _^
set m = `sed $s',$d' file | tee see  rightanglebrc  /dev/null` sed $s,$d file tee see
set makeprg=cmakedbg
set makeprg=xcodebuild -activetarget -activeconfiguration
set myStamp  leftsquarebrc clock format  leftsquarebrc clock seconds rightsquarebrc  -f -o -r -m -a -t { leftsquarebrc %d/%m/%Y %T rightsquarebrc } rightsquarebrc 
set myVariable=^myVlaue^
set mypath = $file
set name=value call echo %name%
set newpage none
set noclobber
set output filename . .png
set password  leftsquarebrc exec ./passwdgenerator rightsquarebrc 
set password  leftsquarebrc open ./passwdgenerator rightsquarebrc 
set path=%path% thedirectorywherefilezillaresides
set path=/home/user/prefix_$var_suffix/bar
set path=/home/user/prefix_${var}_suffix/bar
set prompt = %{033 rightsquarebrc 0;%n@%M007%}$prompt
set revision = `svn log --limit 1 | sed -n -e 's/^r\( leftsquarebrc 0-9 rightsquarebrc \+\).*/\1/p'` svn log --limit 1 sed -n -e s/^r\( leftsquarebrc 0-9 rightsquarebrc \+\).*/\1/p
set runcmd  leftsquarebrc list exec sh -c $SCRIPTS_PATH/config $build_tag -u 2 rightanglebrc &1 rightsquarebrc 
set runtimepath+=/path/to/your/vimruntime
set savepointString = `cat savepointFile` cat savepointFile
set shell=/bin/bash --rcfile ~/.bash_profile
set shell=/bin/bash --rcfile ~/.bash_profile -i
set shell=/bin/sh
set shell=/path/to/cygwin/bash
set shell=bash --login
set shell=bash -i
set shell=zsh -i
set show-all-if-ambiguous on
set stringList = $stringList   $param
set stringList = $stringList $param
set textwidth=79
set thePID to do shell script some_command & rightanglebrc  /target/output & echo $!
set timestamp=%DATE:/=-%@%TIME::=-%
set timestamp=%timestamp: =%
set var=`....` ....
set whichwrap+=
set width 0
set xfer:log-file /path/to/your/file.log
set xlabel Applied Current  leftsquarebrc mA rightsquarebrc  offset -0 -. -3
set xxx to do shell script sqlite3 ~/Documents/Databases/test.db "select \"Address 1\" from aTable limit 10; "
set xxx to do shell script sqlite3 ~/Documents/Databases/test.db 'select "Address 1" from aTable limit 10; '
set-alias -N -a -m -e cd -v -a -l -u -e cd2 -O -p -t -i -o -n AllScope
set-itemproperty -p -a -t -h HKCU:Control PanelDesktop -n -a -m -e wallpaper -v -a -l -u -e $image
set-option -g default-shell $SHELL
set-option -g default-shell /bin/zsh
set-option -g renumber-windows on
set-window-option -g alternate-screen on
setenforce 0 reboot
setenv LC_ALL C
setenv PACKAGESITE ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/ leftanglebrc architecture rightanglebrc /packages-current/Latest/
setenv PATH $PATH:$HOME/bin
setenv PATH this:that
setenv logfile $HOME/LOG/output.log
setfacl -R -d -m u:php:rwx /var/lib/folder/
setfacl -R -m u:php:rwx /var/lib/folder/
setfacl -m d:u::rwx,d:g::rwx,d:o::r,d:g:dev:rwx /shared/dir
setkey -D awk NR==1 { a=$1; b=$2; next } !/^ / { print ($1==b && $2==a ? "match" : "none") }
setlocal enabledelayedexpansion
setlocal enabledelayedexpansion
setopt bashrematch ksharrays
setopt complete_aliases
setopt completealiases
setopt extendedglob
setopt no_extended_glob
setopt no_mult_ios
setopt nobanghist
setopt promptsubst
setopt rcquotes
setopt transientrprompt
setopt unsetopt set sort less
setq multi-term-program-switches --login
setq pcomplete-ignore-case t
setsid yourCmd
setup -n -q -P unzip
setup.exe
setup.sh
setup.sh
setup.sh -l -o -c -a -l -s -o -u -r -c -e PATH -l -o -c -b -r -a -n -c -h one -l -o -c -b -r -a -n -c -h two -l -o -c -b -r -a -n -c -h three
setup.sh -l -o -c -a -l -s -o -u -r -c -e PATH one two three
setw -t servers remain-on-exit on
setx fred %fred%foo
setx.exe var value
sftp -P 2222 username@my_server_ip
sftp -b batchfile user@server:/
sftp -v -b sftp_input.txt UserId@aa.bb.cc.ddd $? echo sftp error. Exiting.. exit
sftp buildUser@myserver.com -b batchfile
sftp user@host remoteFile localFile
sgrep -e -^ -t -1 -9 -2 -. -1 -6 -8 -e - leftsquarebrc  -0 -- -9 -. - rightsquarebrc  -* - leftsquarebrc  - leftsquarebrc  -: -s -p -a -c -e -: - rightsquarebrc  - rightsquarebrc  -- /proc/net/arp
sh
sh  leftanglebrc (wget -q0- remote_script.sh) wget -q -0 -- remote_script.sh
sh $file
sh -- script.sh -t -e -s -t -  -2 -3 -. -t -x -t test24.txt te st.txt
sh -c $(curl http://example.com/) _ world curl http://example.com/
sh -c $ENV a_command
sh -c $exec
sh -c $nested_script -- foo bar
sh -c ${POSTGRESbin}psql -U $POSTGRESuser -h localhost -d $POSTGRESdb -c "select count(*) from d3_folders where folder_name = '$RSeditionfolder';"
sh -c ...
sh -c ... | perl -ne"... print \$0, qq{\t} ..."
sh -c ... | perl -ne'\''... print $0, "\t" ...'\''
sh -c ./script.sh hello
sh -c ./script.sh hello
sh -c cd /home/deploy/app/current && RAILS_ENV=production ...
sh -c echo $sentence
sh -c find /home/disk1 -m -a -x -d -e -p -t -h 1 -n -a -m -e file1* -o -n -a -m -e file7*
sh -c grep ABC "$1"  rightanglebrc  "$1.out" -- {}
sh -c grep ABC {}  rightanglebrc  {}.out
sh -c ls -l foo/bar | wc -l
sh -c ps -p $(pgrep -d"," -x snmpd) -o rss= | awk "{ i += \$1 } END { print i }"
sh -c sleep 1h; dbus-send --print-reply --system --dest=org.freedesktop.Hal /org/freedesktop/Hal/devices/computer org.freedesktop.Hal.Device.SystemPowerManagement.Shutdown
sh -c tail -n +0 -f /tmp/foo | { sed "/EOF/ q" && kill $$ ;}
sh -c tail -n 1000 -F catalina.out | if grep -qP --line-buffered ".+" ; then ...
sh -c while : ; do sleep 30000 ; done
sh -c xcrun $assemledstring
sh -e filename
sh -v -x badscript /bin/logger -t badscript
sh -v -x scripts/sh/test-web-task.sh $fn
sh -x $(which nroff) -m -a -n /usr/share/man/man1/man.1 which nroff
sh -x /path/to/script
sh -x script arg1 arg2 arg3
sh -x script1.sh sh -x script2.sh sh -x script3.sh
sh ../gradle -b ../build.gradle clean build
sh ./score.sh A B cut -d -  -f 2
sh ./test.sh
sh ./test.sh sh
sh ./tiler.sh myLargeImg.mpc
sh .git/hooks/myshellscript.sh
sh /dev/stdin world
sh /path/to/file/testfile
sh /path/to/mybashfile
sh /var/www/cgi-bin/newfile.shtest.txt
sh Calculator.sh 1 + 2 * S(4)
sh Main
sh b.sh
sh calc_new_file $(cat DISK_BLA_BLA | sed 's/,/ /g') cat DISK_BLA_BLA sed s/,/ /g
sh calc_new_file $(echo $TEMP_BLA_BLA | sed 's/,/ /g') echo $TEMP_BLA_BLA sed s/,/ /g
sh certexpires.sh
sh checkemp.sh $file
sh db_backup.sh
sh dot -T -p -n -g /.tree.dot -o /.tree.png
sh env.sh
sh example.bat
sh foo.bash
sh foo.sh tee -a out
sh home/project/myscript.sh
sh lash_ch.sh abcde*
sh myscript
sh myscriptfile
sh perlScripts.sh
sh rssi_script.sh output.csv position 24
sh run-python-scripts.sh
sh run_scripts.sh *.sql
sh sample.sh date +%Y%m%d date +%Y%m%d%H%M%S
sh sample.sh tee logfile_$(date '+%Y-%m-%d-%H').txt date +%Y-%m-%d-%H
sh script
sh script.sh
sh script.sh
sh script.sh
sh script.sh /home/hss/* 4 gz
sh script.sh MY_MACR0_VALUE="123ABCD"
sh script.sh apache
sh script.sh config.txt
sh script4
sh scriptname.sh value_of_x
sh searchip.sh
sh test.sh
sh test.sh  -d anotherdesc -l anotherlabel
sh test.sh -d -  -s -o -m -e -d -e -s -c -  -- -l -  -s -o -m -e -l -a -b -e -l
sh test_shell.txt
sh testfile
sh your-script-name
sh-set-shell zsh
sh.Run reg unload HKUtemp, 0, True
sh.exe
sh: 2012-06-08-01-25.sql.gz: Permission denied
sh: echo.txt: command not found
sha1sum
sha1sum $(xpi) xpi grep -E -o -w ^ leftsquarebrc ^  rightsquarebrc + sed -e s/\(\/\|\\\|&\)/\\&/g
sha256sum /my/dir/*
shasum -a 256
shc -T -f test.sh
shc -f test.sh
shell locate leveldb/db.h sed s%/include/leveldb/db.h$$%%
shell perl -p -l -n -e $$\ = " " $(MYFILE) MYFILE
shell_dir_listing = `ls` ls
shift
shift 1 eval $var+=($(printf "'%s' " "$@")) printf '%s'  $@
shopt -s autocd
shopt -s autocd
shopt -s autocd checkjobs
shopt -s checkjobs
shopt -s cmdhist
shopt -s compat31
shopt -s compat31
shopt -s direxpand
shopt -s direxpand
shopt -s dotglob
shopt -s dotglob
shopt -s expand_aliases
shopt -s expand_aliases
shopt -s expand_aliases
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s extglob
shopt -s globstar
shopt -s globstar
shopt -s globstar
shopt -s globstar
shopt -s globstar
shopt -s globstar
shopt -s globstar sed -i /extern "C" void myPrintf(char \*fmt, \.\.\.);/d **.c
shopt -s histappend
shopt -s histverify
shopt -s huponexit
shopt -s lithist
shopt -s nocaseglob
shopt -s nocasematch
shopt -s nullglob
shopt -s nullglob
shopt -s nullglob
shopt -s nullglob
shopt -s nullglob
shopt -s nullglob
shopt -u extglob
shopt -u nocaseglob
shopt -u nullglob
shopt -u nullglob
shopt extglob
shopt extglob
shopt globstar
short_open_tag
show create table tablename
show databases
show tables
show_statistic.sh grep -A 1 vlan awk {  if ( ( NR % 3 ) == 1 ) { print $2 } else { if ( NR % 3 == 2 ) { print $4 } } }
showerr 0 message
showerr 1 message
shuf -i 0500000000-0599999999 sed s/^/0/
shuf -i 2000-65000 -n 1
shuf -i 2000-65000 -n 1
shuf -i 20000-64000 -n 1
shuf -n ${numberOfLines} ${filename}
shuf -n NUMBER_OF_LINES file
shuf folder/* dd if=- of=sample.txt bs=1K count=2048
shuf inputfile
shuf suf1.txt awk ..my awk codes here.. sh
shuf yourfile mv tmpfile yourfile
shutdown /r
sips -s format png --out ${pdf%%.*}.png $pdf
sips -s format png -s dpiHeight 80 -s dpiWidth 80 -z 1200 1600 test.tiff --out test.png
size libc.a awk { print " " $4 " " } tail -n +2 paste -s -d -+ xargs expr
size_t skip = filesize + 511 ~512 // thanx to Mats
skip updating files that exist on receiver
sleep $1 pkill --signal SIGINT recordmydesktop
sleep $DELAY echo $TEXT command
sleep 1 while system scp -r user@some_ip:/home/hbase/hourly/$datehr.tar.gz /home/hbase/hourly/$datehr.tar.gz
sleep 10
sleep 10
sleep 10 kill $cmdpid exec ping www.goooooogle.com
sleep 10 kill $cmdpid exec wget -v -t 2
sleep 10s
sleep 10s
sleep 120 commands...
sleep 2
sleep 2 sleep 3
sleep 2 sleep 3
sleep 20 kill $$
sleep 200s echo $!
sleep 2147483647
sleep 3
sleep 5
sleep 5
sleep 5 disown
sleep 5 echo foo
sleep 5 echo that took approximately $SECONDS seconds
sleep 5 reboot
sleep 5 reboot
sleep 60 echo A
sleep 99999
sleep DURATION kill $cmdpid exec PROGRAM n k INPUT
sleep_until_modified.sh derivation.tex latexmk -p -d -f derivation.tex
slocate foobar/ sed s/\/foobar\/.*/\/foobar\// uniq -c
slowprogram sed -n 1~100p
smartctl -A /dev/sda awk /Power_On_Hours/ {print $NF}
smartctl -A /dev/sda grep Power_On_Hours awk {print $NF}
smbclient ... egrep /$
snmpget 172.0.0.1 -c public -v 1 1.3.6.1.2.1.1.2 ... tr \n  
soap,cosmetics,good
socat -x udp-listen:$port udp:$server:$host
socat EXEC:./tailcut.sh,pty,ctty STDIO uniq -c
socat PTY,link=$HOME/.wine/dosdevices/com1,raw,echo=0 PTY,link=$HOME/tmp/dev/myserial,raw,echo=0
sockstat awk {print $2 "@" $3} grep -v ^PROCESS@PID sort uniq -c awk {print $1}
softwareupdate -l
some comand
some command.....
some text BLA-123 more text
some textmore text
some-arbitrary-command true
some-command less
some-crashy-program args exit 1
some-text-producing-command ./mygrep.sh bob
some-text-producing-command grep bob
someApp $*
someCommand awk /Amarghosh/ { do something }
someCommand cut -c -3 --
someCommand grep Amarghosh sed -e s/foo/bar/g
someCommand tr -d  leftsquarebrc \000-\037\177 rightsquarebrc 
some_cmd
some_cmd perl -n -e $|=1; print localtime . ":  leftsquarebrc some_cmd rightsquarebrc  $_"
some_command --do-nothing `DB=postgresql some_command --now-really`
some_command `DB=postgresql some_command --now-really; ps-grep-kill` ps-grep-kill
some_command command1 command2
some_command less -p regex
some_command python -c import json, sys;  leftsquarebrc sys.stdout.write(x leftsquarebrc 'name' rightsquarebrc  + 'n') for x in json.load(sys.stdin) rightsquarebrc 
some_command python -c import json, sys; print json.load(sys.stdin) leftsquarebrc 'name' rightsquarebrc 
some_command sed -n 7p
some_command tee /dev/stderr bzip2
some_command tee file.log
somecmd SELECT ... "'"$etag"'", ...
somecmd arg1
somecmd arg1
somecmd arg1
somecommand ${1:-foo}
somecommand -p $PASS
somecommand awk -F - leftsquarebrc  - leftsquarebrc  -: -s -p -a -c -e -: - rightsquarebrc  - rightsquarebrc  -+ {print $2}
somecommand read -r echo Something with $REPLY
somepackage4
someprog args
someprog args read my_var
someprogram $file
someprogram $file
somescript
something
something 000002100 kkkk
something before ethernet0.generatedAddress = 00:50:56:bf:71:06 and something after
something string with commas something else, here, and more
something string, with, commas something else, here, and more
something tail ... tee
someuser ALL = NOPASSWD: /usr/local/sbin/my_admin_command
somevar = gets
sort
sort
sort  leftanglebrc (for f in "${files leftsquarebrc @ rightsquarebrc }" ; do echo "$f" ; done) echo $f
sort  leftanglebrc (sort -u a) b sort -u a uniq -u
sort $1 -o sorted_file.txt
sort $FILE uniq -c
sort --debug temp
sort --field-separator  --key 4 -n
sort --key 2,2 -t -, input.csv
sort -M months.txt
sort -R file awk {if (count leftsquarebrc $3 rightsquarebrc   leftanglebrc  10) {count leftsquarebrc $3 rightsquarebrc ++; print $0}}
sort -R input head -n 100
sort -V
sort -V ~/headers
sort -b -k -2 -, -2 -k -1 -, -1 -n
sort -b -n -k -2 -. -4 -, -2 table
sort -b -n -k -2 -. -4 table
sort -c numericSort
sort -d -f -t -/ -k -2 -, -2
sort -k -1 -, -1 -M -k -2 -, -2 -n
sort -k -1 -, -1 -M -k -2 -, -2 -n test.txt
sort -k -1 -, -1 -k -2 -n
sort -k -1 -, -1 -k -3 -, -3
sort -k -1 -, -1 -k -3 -, -3 -n -r datafile.txt awk $1 != x { print } { x = $1 }
sort -k -1 -, -1 -s t.txt
sort -k -1 -, -1 -t -, a.csv
sort -k -1 -, -1 -u companies.txt
sort -k -1 -, -1 inputfile
sort -k -1 -, -2 -g file
sort -k -1 -. -2 -, -Z file
sort -k -1 -. -2 -, -k -1 -. -2 your_file
sort -k -1 -. -2 your_file
sort -k -1 -. -5
sort -k -1 -. -5 -n
sort -k -1 -. -6 -, -1 -. -6 -k -1 -. -1 -, -1 -. -5
sort -k -2 -, -2 -n -o log.dat log.dat
sort -k -2 -, -2 -n -r file.txt sort -k -1 -, -1 -u --stable
sort -k -2 -, -3 -k -5 -, -5 -t -, infile.txt awk -F -, {print  rightanglebrc  rightanglebrc  $2"_"$3"_"$5}
sort -k -3 -, -3 -g
sort -k -3 -, -3 -g file
sort -k -3 -n -t -; file
sort -k -5 -n file.txt
sort -k -7 -, -7 -n -t -, FILENAME uniq
sort -k -7 -, -7 -n FILENAME uniq
sort -k 1 -M test.txt
sort -k 1 -r freeswitch.log
sort -k 1,1 -k 2,2n -k -3 -, -3 -n -n -o appts2.txt
sort -k 1,1 -k 2,2n -k -3 -, -3 -n -n -t -: -o appts2.txt
sort -k 1,1 -k 2,2n file
sort -k 1,1 -s myfile
sort -k 1.1,1.10 -t ^ -s git-log.txt
sort -k 1.1,1.11 input.txt
sort -k 1.2 -g -t -,
sort -k 2 -n yourfile
sort -k 2 -t -_ -n  leftsquarebrc file rightsquarebrc 
sort -k 2 file.txt
sort -k 2 log.txt
sort -k 2 test uniq -c -f 1
sort -k 2,2 -k 1,1 file.txt
sort -k 3 -r -n -t - 
sort -k 4 your_file
sort -m  leftanglebrc (zcat $part0 | sort)  leftanglebrc (zcat $part1 | sort) ... zcat $part0 sort zcat $part1 sort
sort -m -k 1  leftanglebrc (gunzip -c sorta.gz)  leftanglebrc (gunzip -c sortb.gz) gunzip -c sorta.gz gunzip -c sortb.gz
sort -m -n file1 file2
sort -n -k -2 -, -2 file awk $2 leftanglebrc 25 {print; i++} END{print "\nTotal number of students:- "i}
sort -n -k -2 file awk NR==1{print}END{print}
sort -n -k 1 -k 3 file
sort -n -k 2
sort -n -k 3.8,3.12 -k 3.6,3.7 -k 3.4,3.5
sort -n -k 6 inputfile
sort -n -k 6 inputfile -o inputfile
sort -n -o your_file your_file
sort -n -r -k -2 head -6
sort -n -r -k 2 file1 awk FNR == NR { a leftsquarebrc $1 rightsquarebrc  = $2; next } { print $1, a leftsquarebrc $1 rightsquarebrc , $2 } file2
sort -n -r -k 2,2
sort -n -r -t -: -k 3
sort -n -s -u -k -2 file
sort -n -t , -k 1 -k 3 -k 2
sort -n -t _ -k 2
sort -n FILENAME uniq
sort -n File1 File2
sort -n data_file awk -f median.awk
sort -n input.txt uniq -c
sort -n numbers tail
sort -n sort -u
sort -n temp uniq -c awk { print $2, $1 }
sort -o $INPUT -n -t , -k -4 -. -7 -, -4 -k -4 -. -4 -, -4 -. -5 -k -4 -. -1 -, -4 -. -2 $INPUT
sort -o f f
sort -o file.txt file.txt
sort -o foo foo
sort -o outputfile +1 -2 +4 -5 +6 -7 inputfile
sort -r
sort -r -n -k -3 myfile awk -F - leftsquarebrc  -. -  - rightsquarebrc  !a leftsquarebrc $2 rightsquarebrc ++
sort -r -t -, -k -2 -, -2 -k -1 -7 -, -1 -7 input.csv
sort -r awk -F -# !seen leftsquarebrc $1,$2 rightsquarebrc ++
sort -r uniq -w 16
sort -r yourfile perl -F -# -l -a -n -E say $_ unless $seen{"$F leftsquarebrc 0 rightsquarebrc ,$F leftsquarebrc 1 rightsquarebrc "}++
sort -s -k -1 -, -1
sort -s -n -k 1,1
sort -s -t -- -k -1 -, -1 -n -k 2 filenames.txt
sort -t  rightanglebrc  -k 3 filename
sort -t $05 file
sort -t $t -k 1,1
sort -t $t -k 2 file
sort -t $t -k 5,5
sort -t , -k -2 -, -2
sort -t , -k 1,3
sort -t -  -k -1 -. -2 input
sort -t -  -k -2 -. -3 input
sort -t -  -k 1 input
sort -t -  -k 2 input
sort -t -  -k 9,9.2 -k 3 -k 17
sort -t - leftanglebrc  -T -A -B - rightanglebrc  -k -1 -, -1 -d -k -3 -, -3 -g
sort -t - rightanglebrc  -n -k -2 -, -2 file
sort -t -" -k -4 -n -r
sort -t -, -k -+ -2 -n -r filename
sort -t -, -k -2 -. -3 -n *csv
sort -t -, -k -4 -n -, -4 file awk -F -, {a leftsquarebrc $1 rightsquarebrc =a leftsquarebrc $1 rightsquarebrc ?a leftsquarebrc $1 rightsquarebrc  FS $NF:$NF;}END{for(i in a){print i","a leftsquarebrc i rightsquarebrc ;}}
sort -t -, -k 2 p1.csv sort -u -t -, -k 2
sort -t -, -n -k -1 -, -1 -n -k -2 -, -2 -n -k -3 -, -3 -n -k -4 -, -4 -n -k -5 -, -5 -u text
sort -t -. -k -2 -, -2 -k -1 -, -1
sort -t -/ -k -2 -, -2 -n inputfile
sort -t -: -k -1 -, -1 -k 3 data.txt
sort -t -: -k -4 -, -4 -r -n
sort -t -: -s -k -1 -, -1 file.txt
sort -t -; -k 1,1n -k 2,2n -k 3,3n -k 4,4n test.txt
sort -t -= -k -1 -, -1 -u -s FileB.txt FileA.txt
sort -t -= -n -r -k 3 inputfile head -1
sort -t -_ -n -k -2 abc.lst awk -F -_ !a leftsquarebrc $1 rightsquarebrc ++
sort -t -| -k +2n dataset.txt
sort -t : -k 2,2n -k 5.3,5.4
sort -t ; -k 3 -n demo.cvs tail -n 1
sort -t ; -k 5 -r -n -o output.txt input.txt
sort -t _ -k 2 -g data.file
sort -t _ -k 3,4 you_data_file
sort -t | --key 10,10 -g FILENAME
sort -u $file echo $var
sort -u -k -1 -, -1 file
sort -u -n FILENAME
sort -u -o FILE FILE
sort -u -o test.txt test.txt
sort -u -t -, -k -1 -, -1 file
sort -u -t -| -k -3 -, -3 input-file.txt
sort -u INPUT
sort -u NUMBERS.txt grep -c $i NUMBERS.txt echo $i=$count
sort -u cut -f 1 uniq -c awk { print $2","$1 }
sort -u dir/*
sort -u file.txt
sort -u file1 file2
sort -u file1 file2 ...
sort -u grep -c ^this: 
sort -u grep -c this: 
sort -u logfile.log
sort -u yourFile
sort -u yourFileWithTheLines
sort -z -n read -d  date line echo $line
sort 055.txt awk ...
sort FILE uniq -c sort -n
sort File1.txt File2.txt uniq -u
sort NUMBERS.txt uniq -c awk {print $1,"=",$2}
sort a b uniq -d
sort a b uniq -u
sort a.dat uniq -c awk {print $2":"$1}
sort a.dat uniq -c awk {print $2, ":", $1}
sort data.txt awk BEGIN{last = ""; value = 0;} {if ($1 == last) {print $1" is "$3" | difference "$3"-"value" = "($3-value)}else{last = $1; value = $3; print $1" is "$3;}}
sort data.txt sed -n -e /^E001:/,/^E018:/p
sort file -V awk { print ++a leftsquarebrc $1 rightsquarebrc  "," $0 }
sort file -o file
sort file paste -d -,
sort file rev uniq -f 10 rev
sort file uniq -c
sort file xargs -n 100 sed s/ /,/g
sort file1 file1 file2 uniq -u
sort filea fileb
sort input-file.txt uniq -u -w 3
sort input.txt uniq -c
sort inputFile uniq -c awk {print $2", "$1}
sort inputFile uniq -c sed s;^\s*\( leftsquarebrc 0-9 rightsquarebrc *\)\s*\(.*\)$;\2, \1;
sort inputfile uniq -c
sort ip_addresses uniq -c
sort ips.txt uniq -c
sort list awk {if(p&&$0~p"e+$")print "rm "$0;p=$0}
sort list awk {if(p&&$0~p"e+$")print "rm "$0;p=$0} sh
sort list awk {if(p&&$0~p"e+$")print "rm \""$0"\"";p=$0}
sort list1 list2 list2 uniq -u
sort orginal_list.txt duplicate_list.txt uniq -u
sort remote_list local_list uniq -d
sort t1 t2 uniq -d
sort temp.txt -o temp.txt
sort test.txt uniq xargs -I -{ -} grep -F -n -x -m -1 {} test.txt sort -k -1 -n -t -: cut -f 2 -d -:
sort uniq -c
sort uniq -c
sort uniq -c awk $1  rightanglebrc = 3 {print $2}
sort uniq -c awk $1 == 3
sort uniq -c awk {print $2 " " $1}
sort uniq -c sort -n
sort uniq -d
sort uniq grep this:  wc -l
sort your_file uniq -c awk {for(i=2;i leftanglebrc =NF;i++) printf $i"\t"; printf $1"\n"}
sort yourfile uniq
source
source  leftanglebrc (./bin/flatten_config.php config.json) ./bin/flatten_config.php config.json
source  leftanglebrc (./generate_commands) ./generate_commands
source  leftanglebrc (curl -s http://mywebsite.com/myscript.txt) curl -s http://mywebsite.com/myscript.txt
source  leftanglebrc (grep -v "mesg" /etc/bashrc) grep -v mesg /etc/bashrc
source  leftanglebrc (ruby genrc.rb) ruby genrc.rb
source  leftanglebrc (sed 's/:/\\\\:g' my.conf) sed s/:/\\\\:g my.conf
source $(dirname $0)/conf.sh dirname $0
source $(ruby genrc.rb) ruby genrc.rb
source $1
source $1/bin/activate
source $HOME/.rvm/scripts/rvm
source $ZSH/oh-my-zsh.sh
source $f
source $rvm_path/contrib/ps1_functions
source ${ZDOTDIR-$HOME}/.zsh/say_hello.zsh
source ../topscript.sh
source ./addalias.sh ls ls --color=auto
source ./chphp.sh foo 3
source ./conf/prac1
source ./file1.bash
source ./init.bash
source ./myscript.sh
source ./path.sh
source ./run_me
source ./script.sh
source ./script.sh
source ./script.sh
source ./setenv.sh
source ./setup.sh
source ./test
source ./test
source .bash_profile
source .bashrc
source .bashrc
source .bashrc grep source
source .profile
source .zshrc
source /dev/stdin curl --insecure https://raw.github.com/gurjeet/pg_dev_env/master/.bashrc echo done
source /etc/bash_completion.d/virtualenvwrapper
source /home/dtuite/.rvm/scripts/rvm $APP_ROOT/bin/unicorn...
source /home/your_user/.bashrc django_serve
source /path/to/USB/based/bashrc
source /path/to/file
source /path/to/myscript.sh
source /path/to/script.sh
source /root/full/path/to/topscript.sh
source /system/etc/bash/aliases $@
source /tmp/del
source /usr/bin/tasks
source /usr/local/etc/bash_completion.d/git-completion.bash
source /usr/local/etc/bash_completion.d/git-prompt.sh
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
source FILE
source X echo some input
source a.sh echo ${rt}
source another.sh return $?
source b.fish or exit 1
source b.sh var
source build/envsetup.sh
source changePrompt.sh
source child.sh
source cpmd
source donot_touch.sh
source ec2
source external.sh
source file.sh
source file_A
source filename
source function.sh
source go.sh
source input.ini
source lib.bash
source makelastcomm.sh
source myScript.sh
source myShortcut.sh
source myfile.sh
source myparams.tcl
source myscipt.sh $var
source myscript.sh
source myshell.sh
source script.sh
source script.sh
source script.sh
source scriptfile
source test.dat
source the_other_script.sh
source userscript wait
source userscript wait wait
source var
source virtualenv_activate.sh
source virtualenvwrapper.sh
source yourscriptfile
source ~/.bash_aliases
source ~/.bash_profile
source ~/.bash_profile
source ~/.bash_profile
source ~/.bash_profile
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc
source ~/.bashrc source /etc/profile
source ~/.build_path
source ~/.custom_rc
source ~/.git-prompt.sh
source ~/.profile
source ~/.profile
source ~/.profile
source ~/.rvm/scripts/rvm
source ~/.yourfile
source ~/.zshrc
source ~/github/ansible/hacking/env-setup
source ~/nvm/nvm.sh
source/foo/bar
sox -m -v 1 yourfile.wav silence.wav -t wav outfile
sox -n silence.wav trim 0.55
sox Me, London.mp3 -n spectrogram -Y 130 -l -r -o Me, London.png
sox files*.mp3 -t wavpcm lame
spawn /bin/sh -c $command
spawn mysql -h $db_host -u $db_user -p $db_pass create database $new_db_name
spawn nohup /usr/bin/firefox https://www.google.com/
spawn rsync -e ssh -q -o StrictHostKeyChecking=no $localfile $username@$remotehost:$remoteloc
spawn scp {*} leftsquarebrc split $files rightsquarebrc  $ACCOUNT@$SERVER: leftsquarebrc esc $newfolder rightsquarebrc 
spawn ssh  leftsquarebrc exec pbpaste rightsquarebrc  -l username
spawn ssh -o StrictHostKeyChecking no me@$1
spec --options spec/spec.opts
split --lines 75
split --numeric-suffixes --digits 4 --lines 500 myfile.txt file_
split --suffix-length 5 --lines 1 foo.txt
split -C 100m -d data.tsv data.tsv.
split -a 1 -d file 
split -a 5 $file
split -b -1 -4 -0 -K -a 4 my_really_big_file.txt my_smaller_files.txt.
split -b -= -1 -M -d file.txt file
split -d -n 4 -l 500 myfile.txt file_
split -d file 
split -l 1000 -d --additional-suffix .txt file.txt split_file
split -l 1000 -d --suffix-length 5 test.txt 
split -l 10000 big.csv
split -l 10000 originalfile.txt
split -l 20 file Partfile
split -l 200000 filename
split -l 500 all all
split: output file suffixes exhausted
spool log.out
sql2=grant all on ${db_name}.* to ${db_user}@${host} identified by "${password}";
sql2=grant all on ${db_name}.* to ${db_user}@${host} identified by ${password};
sqlcmd -S serverinstance -E -v db =MyDatabase -i s.sql
sqlcmd -S serverinstance -E -v db =foo -i s.sql
sqlite3  leftsquarebrc OPTIONS rightsquarebrc  FILENAME  leftsquarebrc SQL rightsquarebrc 
sqlite3 ${db_name} insert into ${table_name} (${column1},${column2}) values ('${f1//\'/''}','${f2//\'/''}');
sqlite3 /Users/riceje7/bin/places.sqlite SELECT url FROM moz_places lpr
sqlite3 /home/ubuntu/testsql.sqlite .dump one/newfinal.sql
sqlite3 database.db PRAGMA integrity_check
sqlite3 database.db3
sqlite3 db.sqlite SELECT computer_name FROM machine WHERE serial_number = "C02JT0XXXXXX";
sqlite3 my.db select * from my_table; more
sqlite3 mydatabase.db
sqlite3 mydatabase.db .read SQLTableTransfer
sqlite3 mydatabasefile .read file_name.sql
sqlite3 script.db insert into notes (note) values ("Stuff happens."||"$Str1");
sqlite3 your.db pragma table_info(your_table)
sqllite3 /home/user/db_fake_book_index select id, page from fb2 where bookcode='$bookcode' and page=$page
sqlplus *connect string* @echo.sql
sqlplus *connect string* @echo.sql
sqlplus -L username/pw@db @ fileWithCommands.sql
sqlplus -S $username/password@destination @/path/copysetup/insert.sql $ENV $RELEASE_ID
sqlplus -S user/pass@localhost @/opt/D2RQ/file.sql $2
sqlplus -s uname/pwd @test.sql Test_VAl
sqlplus -s user/pass@DB
sqlplus foo/bar @test.sql
sqlplus foo/bar @test.sql
sqlplus login/pass @get_area.sql
sqlplus scott/tiger@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost.localdomain)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SID=xe)))
sqlplus select onething from another awk { weave awk magic here }
sqlplus user/pass@connect @scriptname
square $(add 10 20) add 10 20
square 30
src/com/company/stuff/platform/appname/subpackage/subsubpackage/Foo.java
srctip
srun_ps $1/$2.exe EOD
ssed -R s|(? leftanglebrc !Mr|Mrs).|.n|g newFile.txt
ssh $1 zcat -f file1 file2  rightanglebrc  rightanglebrc  ...
ssh $1 zcat ...  rightanglebrc  rightanglebrc  ...; cat ...  rightanglebrc  rightanglebrc  ...
ssh $@ tee  rightanglebrc (grep -Po '(? leftanglebrc =\$).*' --color=never --line-buffered | format_line  rightanglebrc  rightanglebrc  ${logfile}) grep -P -o (? leftanglebrc =\$).* --color never --line-buffered format_line
ssh $@ tee  rightanglebrc (grep -e '.*\@.*\:.*\$.*' --color=never --line-buffered  rightanglebrc  rightanglebrc  test.log) grep -e .*\@.*\:.*\$.* --color never --line-buffered
ssh $MachineIP  echo "$CM_Config"  rightanglebrc  "$mName/CM_CONFIG" 
ssh $NODE1_SSH_PATH /bin/bash $PROGRAM_HOME/bin/run.sh
ssh $REMOTE_USER@${SUPPORTED_SERVERS leftsquarebrc $i rightsquarebrc } gtar -zcvf $TAR_FILE $(find $LOCAL_PATH -name *$DATE*)
ssh $RUSER@$RHOST mysqldump -u$RDBUSER -h $RDBHOST $RDB  rightanglebrc  ~/$RBAK; mysql -u$RDBUSER -h $RDBHOST -Bse 'drop database $RDB; create database $RDB;'; mysql -u$RDBUSER -h $RDBHOST $RDB  leftanglebrc  ~/$LBAK;
ssh $SERVER mysql -e 'SELECT * FROM ${TABLE} WHERE RAND()  leftanglebrc  ${PROBABILITY} LIMIT ${LIMIT}' -uroot -p ${DATABASE}  rightanglebrc  temp_dump_file.sql
ssh $USER@$SERVER cd ${REMOTE_PATH}; mkdir -p $i
ssh $USERNAME@$HOSTNAME pg_dump -f /dev/stdout -t tb1 -t tb2 -t tb3 dbname
ssh $host /a/b/file$$$$
ssh $host nohup java -cp program.jar  rightanglebrc `hostname`output.log 2 rightanglebrc `hostname`error.log &
ssh $hostname my_script
ssh $i awk -F: '/^bar/ {print $2}' /local/foo.txt
ssh $node date --date "appcmddate | sed -n 2p | cut -d \ -f 3,4,5,6,8" +%s
ssh $node kill $(ps aux | grep ' leftsquarebrc s rightsquarebrc omeprocess' | awk '{print $2}')
ssh $node source /etc/profile.d/bkUp.sh; asBackup -b '/home/backup/esa/${node}'
ssh $q mkdir -p /opt/acd/hgf/tom/hanks/ ; chmod -R 777 /opt/acd/hgf/tom/hanks/
ssh $username@$host ps axuw grep java
ssh ${URL%:*} stat $(basename "$F") basename $F
ssh ${fromNode} /usr/bin/time -f %e 'sh' '-c' 'virsh migrate --live ${VM} qemu+ssh://${toNode}/system  rightanglebrc  /dev/null 2 rightanglebrc &1'
ssh -A -t jumpserver ssh -A -t server1
ssh -A user_foo@serverB ssh user_bar@serverC
ssh -L 23:localhost:23 user@host
ssh -L 3306:localhost:3306 myserver.com
ssh -L 4444:raptor.lan:22 genja.org
ssh -L localhost:8022:remote2:22 remote1
ssh -N -R  leftsquarebrc port_XX rightsquarebrc :localhost:22 -o ExitOnForwardFailure=yes user@host
ssh -N -i  leftanglebrc (echo "privatekeystuffdis88s8dsf8h8hsd8fh8d") -R 16186:localhost:8888 hello.com echo privatekeystuffdis88s8dsf8h8hsd8fh8d
ssh -N -o ControlMaster=yes -S $ssh_control_socket $HOST
ssh -R 10022:localhost:22 your_server_address
ssh -R 12345:127.0.0.1:3306 remote_system
ssh -R 12345:localhost:3306 user@php_machine -N
ssh -T $server -l username /export/home/path/to/script.sh $1  $2
ssh -T user@server
ssh -V
ssh -V
ssh -V
ssh -V
ssh -V
ssh -V
ssh -X $remote_usr@$ip_address $remote_cmd
ssh -X someserver /usr/bin/someprogram
ssh -X user@server export DISPLAY=:0; gnome-screensaver; gnome-screensaver-command -d;
ssh -f $COMMAND
ssh -f $user@$machine_name cd $path;'shard_path=$(find . -name "shard0"); cd $shard_path; mkdir temp' find . -name shard0
ssh -f -N -L 10001:somehost:3306 user@host1
ssh -f -n remotesystem command&
ssh -f -q -T -N -L 12345:127.0.0.1:3306 user@server.com
ssh -f -q -T -N -R 12345:127.0.0.1:3306 user@server.com
ssh -f myusername@hostA -N -L 4444:hostB:22
ssh -f root@10.158.42.12 nohup perl /script/myscript.pl 06/04/2014 60 &
ssh -f user@mysql_machine -L 12345:mysql_machine:3306 -N
ssh -i /Users/myuser/.ssh/id_rsa -F /Users/myuser/.ssh/config login@host
ssh -i /path/to/private_key -o -P -a -s -s -w -o -r -d -A -u -t -h -e -n -t -i -c -a -t -i -o -n -= -n -o admin@server_host
ssh -i /path/to/private_key -o -P -a -s -s -w -o -r -d -A -u -t -h -e -n -t -i -c -a -t -i -o -n -= -n -o admin@server_host exit
ssh -i id_rsa -o -o StrictHostKeyChecking=no  leftsquarebrc myuser rightsquarebrc @ leftsquarebrc myserver rightsquarebrc 
ssh -i id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  leftsquarebrc myuser rightsquarebrc @ leftsquarebrc myserver rightsquarebrc 
ssh -i key.txt $USER@A.B.C.D touch $NAME.txt; chmod 700 $NAME.txt; mv $NAME.txt /etc/openvpn/ccd; echo -n "$X $Y"  rightanglebrc  /etc/openvpn/ccd/$NAME.txt
ssh -i path/to/root-key root@host command
ssh -i private_key_path user_name@remote_machine command
ssh -i rsync user@remote
ssh -i ~/path/mykeypair.pem ubuntu@ec2-XX-XXX-XXX-XXX.us-west-2.compute.amazonaws.com
ssh -l $LOGIN1 grep -i num /Data.cfg | cut -d ":" -f 2
ssh -l $USERNAME $HOST $SCRIPT
ssh -l root -i key $SERVER_IP your command
ssh -l user_1 hostname command_1; command_2
ssh -l username -o HostKeyAlias example.com example.com source /etc/profile;cd /Users/someone/cordova/appname;cordova prepare)
ssh -n $1 cd $projectDir;./startBatch.sh $2 &
ssh -n $R_USER@$R_HOST touch /home/user/file_name.txt
ssh -n $aline jps
ssh -n -f *.*.*.* cd /***/***/remote && echo "$1"; ./ossec-rootcheck; echo $?
ssh -n -f *.*.*.* cd /***/***/remote; ./ossec-rootcheck; echo $?
ssh -n -f *.*.*.* exec 2 rightanglebrc &1; cd /***/***/remote && echo "$1"; ./ossec-rootcheck; echo $?
ssh -n -f *.*.*.* exec 2 rightanglebrc &1; cd /***/***/remote; ./ossec-rootcheck; echo $?
ssh -n -o stricthostkeychecking=no root@10.14.150.113 sed -i "s/export PART=\"\\\$1\"/export PART=\"A\"/" flash.sh
ssh -n -q -o -P -a -s -s -w -o -r -d -A -u -t -h -e -n -t -i -c -a -t -i -o -n -= -n -o -i id_dsa user1@${line} date
ssh -n name@$host cat $(ls -t /path/to/log/dir/*.log | head -n 1)
ssh -n root@${i} /usr/sbin/the_script
ssh -o -C -o -n -n -e -c -t -T -i -m -e -o -u -t -= -5 -o -B -a -t -c -h -M -o -d -e -= -y -e -s -l group servername bash -s -- -7
ssh -o -P -a -s -s -w -o -r -d -A -u -t -h -e -n -t -i -c -a -t -i -o -n -= -n -o -q harigm@8.19.71.238 exit
ssh -o BatchMode=yes user@host true
ssh -o PasswordAuthentication=no $remote_account echo ok grep ok
ssh -o PasswordAuthentication=no user@hostname
ssh -o StrictHostKeyChecking no ubuntu@$1 run.sh
ssh -o StrictHostKeyChecking=no -l username hostname pwd; ls
ssh -p 10022 localhost
ssh -p 30 root@serverIP
ssh -p 42586 mysite.com
ssh -p 4444 hostA
ssh -p 4444 localhost will give you a conenction straight to raptor.lan
ssh -p 8899 root@$REMOTEIP mysql -u root -p -e "$SQL"
ssh -q 127.0.0.123 echo $FOO $BAR
ssh -q hostname awk "!/^#/ && \$3 ~ /ext/ && \$2 != \"/\" && \$2 != "\"/opt\"" { print \$2 }" /proc/mounts
ssh -t $i sudo ls /root
ssh -t $suser@$server mysql -h '$host' -u $user -p $pass $db
ssh -t -i pem user@1.1.1.1 mysql -h xxx -u user -p
ssh -t -t $user@$i
ssh -t -t -X $ip
ssh -t -t -f -X $ip
ssh -t -t -n -X $ip
ssh -t -t user@host.com sudo /etc/init.d/script restart
ssh -t -t user@server /usr/bin/mysql -u{mysqlUser} -p{mysqlPassword} {mysqlDB} -e "select * from table"
ssh -t command; bash -l
ssh -t host4 bash ./run_audit.sh
ssh -t localhost stty -echo -onlcr; cat testfile.txt; stty echo onlcr cat -v less -U
ssh -t me@machine ./executeMyScript && bash -i
ssh -t name@ipAddress short () { veryLongCommandThatIWriteOften; }; export -f short; bash
ssh -t remote tcsh
ssh -t root@5.6.7.8 su - oracle
ssh -t somehost ~/bashplay/f
ssh -t user@address command_to_execute
ssh -t user@address command_to_execute; bash
ssh -t user@host python
ssh -t user@machineB scp /path/to/file root@machineC:/path
ssh -t username@hostname sudo /path_to_my_script $1
ssh -t username@remotemachine cd /path/you/want ; bash
ssh -t xxx.xxx.xxx.xxx cd /directory_wanted ; bash
ssh -v gerrit
ssh -v hostname somecommand awk /debug1/ ...
ssh -v hostname somecommand awk /debug1/ ...
ssh -z -c -v -f /root/bugzilla
ssh 10.30.3.2 echo -n 'something'  rightanglebrc  /var/log/messages
ssh 192.168.22.11 cp a b
ssh 192.9.202.44 tar tjf '/home/adup/mybackup.tar.bz2' | sort | grep -v '/$' |(  while read filename; do md5=$(tar xjOf '/home/adup/mybackup.tar.bz2' $filename | md5sum | awk '{print $1}'); echo $md5 $filename; done)
ssh HOST cat mydirectory.tar.bz2 tar -x -j -C mylocaldirectory
ssh MyAppUser@myapp.mycompany.com sudo -u me 'sudo cp ...'
ssh S gzip -d -c tar -x -v -f
ssh SC-1 for i in /var/log/*/server; do echo $i; done
ssh SOMEUSER@MACHINE_IP /usr/bin/unzip -l -q SOME_PATH/20130409060734*.zip | grep -i XML  |wc -l
ssh abc@host sed -i s/enable=false/enable=true/g /config/pqr.properties
ssh backupFiler snapvault status awk $4+0  rightanglebrc  24
ssh dan@172.19.1.15 $(printf '%q ' mv -v "/home/dan/Downloads/complete/$dir" /home/dan/Downloads/downloaded) printf %q  mv -v /home/dan/Downloads/complete/$dir /home/dan/Downloads/downloaded
ssh data@server.org cd /home/data/ ; chmod o+rx directory_$DATE
ssh deploy@hera kill -9 `ps -ef | grep MapReduceNode | grep -v "grep" | awk -F " " '"'"'{print $2}'"'"' | head -n 1`
ssh gerrit
ssh git@myProductionServer.com GIT_WORK_TREE=/home/www/test GIT_DIR=/home/www/test/.git git checkout -f production
ssh hop2.example.com zip - /usr/local/patch/clone.example.com* | base64
ssh host HISTFILE=~/.bash_history; history -r; history tail
ssh host awk "{print \$0}" /path/to/log.txt
ssh host awk '{print $0}' /path/to/log.txt
ssh host cmd
ssh host command options, etc., 
ssh host command1 command2
ssh host command1 | command2
ssh host myscript.sh
ssh host num=$(ls -1 /home/folder/anotherFolder | wc -l); if  leftsquarebrc  $num -gt 3  rightsquarebrc ; then echo yes: $num; fi
ssh host num=$(ls -1 /home/folder/anotherFolder | wc -l); if  leftsquarebrc  $num -gt 3  rightsquarebrc ; then echo yes: $num; fi
ssh host time command
ssh host$i top -n1 -b | head -n 15
ssh host$i top -n1 -b | head -n 15 rightanglebrc  rightanglebrc  ~/mysh/top_out
ssh host@name B=3; echo $A; echo $B;
ssh host@name B=3; echo $A; echo $B;
ssh host@name B=3; echo 3; echo $B;
ssh host@name B=3; echo 3; echo ;
ssh host_1 cat test_file | sed 's/$/\tOK/'
ssh host_alias command
ssh hudson@test python/runtest.py "$XAS_SVN"
ssh imageuser@x.x.x.x cp sourcefile targetfile
ssh kparisi@remote.com find /home/kparisi -printf "%M %p\n"
ssh kparisi@remote.com find /home/kparisi -printf "%M %p\n"
ssh localhost (cd /tmp && nohup sleep 10)  rightanglebrc /dev/null 2 rightanglebrc &1 &
ssh localhost true || exit 1; echo going on; nohup sleep 10  rightanglebrc /dev/null 2 rightanglebrc &1 &
ssh machine$i cat log.txt
ssh me@my-system mkdir -p ~/test/sub1/subsub1
ssh mgilson@XXXXX cat | cat
ssh myServer echo $(uname -a | awk '{print $2}') 
ssh myServer echo `uname -a | awk '{print $2}'` 
ssh myServer uname -a | awk '{print $2}' 
ssh my_server bash -c 'echo this is $HOSTNAME; abc=2; echo abc is $abc;'
ssh myhost sed 's/\\u\@\\h/\\u\@\\h (myhost)/' /etc/bashrc
ssh myname@example.com ls -d dir/*/
ssh myself@git.mycompany.com
ssh myuser@server perl -s -s -o -m -e -a -r -g -u -m -e -n -t -s
ssh nathan@gnunix a=$(date) && echo $a
ssh otherhost command
ssh ppuser@10.101.5.91  keyConfig $1 $2 $4 
ssh pvt@192.168.1.133 ~/tools/run_pvt.pl $BUILD_NUMBER
ssh pvt@192.168.1.133 ~/tools/run_pvt.pl $BUILD_NUMBER
ssh pvuser@host . ~pvuser/.profile;/opt/datamart/bin/resmgr -import segp -colNames "npath cond type" -line "~Thresholds~Transmission_Auto|_|$r|_|rule|_|"
ssh remote-host bash -c '(export abc=123 && echo $abc)'
ssh remote-host bash -c '(export abc=123 && echo $abc)'
ssh remote-host bash -c 'abc=123 && echo $abc'
ssh remote-host sh -c "if  leftsquarebrc  -f ~/myfile  rightsquarebrc  ; then gzip -c ~/myfile ; fi"  gzip -d -c
ssh remote_host $cmd_str
ssh remote_host cat -  rightanglebrc /tmp/test.tmp && $cmd_str  rightanglebrc /tmp/new.conf.tmp
ssh remote_machine
ssh remote_machine ~/script.sh
ssh remotecluster qsub -v argv="`cat /remotepath/temp.par`" -l walltime=10:00:00 /remotepath/my.script cat /remotepath/temp.par
ssh remotehost cat /var/log/messages | less
ssh remotehost echo $(pwd)
ssh remotehost echo $(pwd) pwd
ssh risdevo0196 echo $0
ssh root@
ssh root@$center ssh root@$ip pkill -f $target_dir/$main
ssh root@127.0.0.1 ( cd /var && chmod +x my_script.sh && ./my_script)
ssh root@IP grep -q '$KEY' .ssh/authorized_keys || echo '$KEY'  rightanglebrc  rightanglebrc .ssh/authorized_keys
ssh root@MachineB bash -s
ssh root@foobar -c cd /foo/bar && /opt/hyperic/agent-current/bin/hq-agent.sh ...
ssh root@host bash -s my_input
ssh root@myserver echo "*** Log info of $(date -u) ***"  rightanglebrc  rightanglebrc  /var/log/app.log
ssh root@myserver python /root/python/run_dev_server.py  rightanglebrc  /dev/null 2 rightanglebrc &1 & echo $!  rightanglebrc  "dmr.pid"
ssh root@remoteHost commands
ssh root@server nohup /usr/local/bin/app -c cfg &; exit
ssh root@server nohup /usr/local/bin/otherapp &; w; exit
ssh root@server.com mysqldump -uroot -pxxxxx mydb
ssh server1
ssh server1 df ... && !/^ leftsquarebrc a-zA-Z rightsquarebrc /...}}'
ssh server2 cat /path/to/file2 ssh server1 cat  rightanglebrc  rightanglebrc  /path/to/file1
ssh server2 cat /path/to/file2 | ssh server1 "cat  rightanglebrc  rightanglebrc  /path/to/file2"
ssh serverB . ~/.bashrc; sh cassandra-cli -h  leftanglebrc serverB rightanglebrc  -v -f database_import.txt;
ssh someServer python -u pythonToExecute.py $1 $2 $3
ssh sshost$number cd $dir && java Main &
ssh tinosino@robottinosino-wifi cat /Users/tinosino/.profile sed -n /Verify this script/q; p
ssh tinosino@robottinosino-wifi sed -n '/Verify this script/q; p' /Users/tinosino/.profile
ssh user1@192.168.1.2 awk '\$5==1{print \$3}' filename.log
ssh user1@machine1 scp file user2@machine2:/destination
ssh user1@server -t cd /home/user2; bash --rcfile .bashrc 
ssh user1@server -t cd /home/user2; bash --rcfile /home/user2/.bashrc -i
ssh user@11.11.11.11 /home/lib/groovy-1.5.8/bin/groovy -cp jars/log4j.jar:jars/commons-configuration.jar:jars/spring.jar:$(echo jars/c*.jar | tr " " ":") bin/CreateTable.groovy
ssh user@Main.local mkdir Desktop/test
ssh user@Middleman -L 1337:Destination:22
ssh user@address command_to_execute
ssh user@demo.server.it mysqladmin -uroot -pmypass create test,
ssh user@domain.com echo Hello $VARIABLE1;COMMAND1=`date +%b`; COMMAND2=$(date +%Y); echo $COMMAND1 $COMMAND2
ssh user@example.com bash -s
ssh user@hadoop hive -S -e '$query' 
ssh user@hadoop hive -S -e '$query' 2 rightanglebrc &1
ssh user@host $(typeset -f); f typeset -f
ssh user@host -o NumberOfPasswordPrompts=0 -i .....
ssh user@host /path/to/script & rightanglebrc /dev/null  leftanglebrc /dev/null & disown
ssh user@host /path/to/script echo -e \a
ssh user@host cat $(ls -dt /mypath/*.txt | head -1)
ssh user@host cat -  rightanglebrc  /tmp/file.ext; do_something_with /tmp/file.ext;rm /tmp/file.ext
ssh user@host cat /mypath/$(ls -t /mypath/*.txt | head -1)
ssh user@host cat file.txt  rightanglebrc  rightanglebrc  other_file.txt
ssh user@host cd /path/to/folder1; cp file /path/to/folder2
ssh user@host command
ssh user@host command1; command2
ssh user@host cp /path/to/folder1/file /path/to/folder2
ssh user@host if  leftsquarebrc  -f /path/to/my/file.txt  rightsquarebrc ; then echo yes; else echo no; fi
ssh user@host ls
ssh user@host ls
ssh user@host ls /var/svn-repos svn co of connecting/path $repo
ssh user@host mv a b
ssh user@host mysqldump -u -u -s -e -r -n -a -m -e -h -l -o -c -a -l -h -o -s -t -p -p -a -s -s -w -o -r -d --all-databases  rightanglebrc  /home/user/sqlfile.sql
ssh user@host script.sh
ssh user@host sudo /etc/init.d/haproxy stop grep -F -q  leftsquarebrc   OK   rightsquarebrc 
ssh user@host.com -t sudo /etc/init.d/script restart; sleep 30
ssh user@host.com cat foo.tar tar -x -v -f --
ssh user@host.com ls -l
ssh user@hostA cd ~/Thesis && ./generate
ssh user@hostname cat  rightanglebrc  script.sh; chmod 755 script.sh; sudo ./script.sh
ssh user@hostname ls
ssh user@hostname tar cf - /dir/file*.tgz tar -x -f --to-command tar xzvf -
ssh user@hostname touch file -r remote-file
ssh user@ip echo 'Hello world'; whoami; cd / ; ls
ssh user@ipaddress sudo sh -c "sync; echo 3  rightanglebrc  /proc/sys/vm/drop_caches"
ssh user@localhost -p 1337
ssh user@otherhost /path/to/php-script
ssh user@remote export myvar=myvalue ; echo myvar=$myvar
ssh user@remote find /some/folder/with/backups -m -t -i -m -e +7 -t -y -p -e f -p -r -i -n -t
ssh user@remote rm /home/user/foo.txt
ssh user@remote.com process.bat $(ls .*a) ls .*a
ssh user@remote.com script `date` date
ssh user@remote_host /path/to/script argument
ssh user@remote_host command1; command2; command3
ssh user@remotehost cat /path/to/file.tar.bz2 tar -x -j -f
ssh user@server cat variables.properties
ssh user@server echo ${server_var}
ssh user@server find /path/to/dir -type f -printf 'get %pn' | sort -n | tail -1
ssh user@server find /server/ -name "*.txt" -print0 | xargs -0 tar -cO tar -x -i -v -f -C .
ssh user@server for dir in dir1 dir2 dir3; do echo $dir; cp some/file.txt /home/user/$dir/; done
ssh user@server for dir in dir1 dir2 dir3; do echo dir3; cp some/file.txt /home/user/dir3/; done
ssh user@server mv /site/includes /
ssh user@server sh /path/to/mybashfile
ssh user@server simulation/script
ssh user@server simulation/script &
ssh user@server top -n 1 -b
ssh user@server.com date +%Y%m%d%H%M%s
ssh user@server_ip bash -s
ssh user@server_ip echo Test | tee output.log
ssh user@server_ip mysql -uyourusername -pyourpassword  leftanglebrc  query.sql | tee output.log
ssh user@windowsmachine mycommand.exe
ssh user_foo@serverB ssh user_bar@serverC
ssh username@hostmachine declare -a array1=(AAA BBB CCC DDD); declare -a array2=(001 002 003 004); num = ${#array1 leftsquarebrc @ rightsquarebrc }; for((i = 0 ; i  leftanglebrc  $num ; i++ )); do ln -sf ${array1 leftsquarebrc $i rightsquarebrc } ${array2 leftsquarebrc $i rightsquarebrc }; done
ssh username@rserver.com -L 127.0.0.1:8888:*:11111
ssh username@serverid command
ssh vagrant@localhost alias mycmd='echo $HOME';/mycmd
ssh vps-01 /usr/bin/sudo /sbin/iptables -v -I INPUT 1 -s $1 -j ACCEPT
ssh whoever@wherever cat remote_file local_program
ssh you@server.com which git-upload-pack
ssh you@your_local_machine:/path/to/Test user@node:~/Folder/folder2
ssh yourUserName@node1 cat input_file_node1 | python parser.py
ssh yourUserName@node1 python parser.py
ssh your_username@remotehost.com
ssh yourname@yourmachine grep uploadRate= /root/yourscript
ssh-add ~/.ssh/id_rsa
ssh-add ~/.ssh/mykey
ssh-agent bash
ssh-agent bash -c ssh-add /home/christoffer/ssh_keys/theuser; git clone git@github.com:TheUser/TheProject.git
ssh-copy-id  leftsquarebrc -i identity_file rightsquarebrc   leftsquarebrc user@ rightsquarebrc machine
ssh-copy-id -i rsync.pub user@remote
ssh-copy-id -i ssh./yourkeyfilewithoutpassphrase.pub user@sshserver
ssh-copy-id -i ~/.ssh/id_rsa.pub username@server2
ssh-copy-id user@sshserver
ssh-keygen
ssh-keygen
ssh-keygen
ssh-keygen
ssh-keygen -f outfile -N 
ssh-keygen -f rsync
ssh-keygen -f ~/.ssh/apache-rsync
ssh-keygen -t rsa
ssh-keygen -t rsa
ssh-keygen -t rsa
ssh-keygen -t rsa -N  -f my.key
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAybmcqaU/Xos/GhYCzkV+kDsK8+A5OjaK5WgLMqmu38aPo56Od10RQ3EiB42DjRVY8trXS1NH4jbURQPERr2LHCCYq6tHJYfJNhUX/COwHs+ozNPE83CYDhK4AhabahnltFE5ZbefwXW4FoKOO+n8AdDfSXOazpPas8jXi5bEwNf7heZT++a/Qxbu9JHF1huThuDuxOtIWl07G+tKqzggFVknM5CoJCFxaik91lNGgu2OTKfY94c/ieETOXE5L+fVrbtOh7DTFMjIYAWNxy4tlMR/59UVw5dapAxH9J2lZglkj0w0LwFI+7hZu9XvNfMKMKg+ERAz9XHYH3608RL1RQ== This comment describes the key
ssh.exec! sed 's/1/#{p}/g' changed.txt  rightanglebrc  newfile.txt
ssh.exec! sed -i 's/1/ + p + /g' changed.txt
ssh.exec! sed -i 's/1/#{p}/g' changed.txt
ssh:// leftsquarebrc user@ rightsquarebrc host.xz leftsquarebrc :port rightsquarebrc /path/to/repo.git/
sshfs user@host:dir mountpoint exit 1
sshpass - leftsquarebrc  -a -r -g -s - rightsquarebrc  rsync  leftsquarebrc source rightsquarebrc   leftsquarebrc dest rightsquarebrc 
sshpass - leftsquarebrc  -a -r -g -s - rightsquarebrc  rsync  leftsquarebrc source rightsquarebrc   leftsquarebrc dest rightsquarebrc  sort
sshpass -p $PASS1 ssh user1@machine1 sshpass -p $PASS2 scp file user2@machine2:/destination
sshpass -p $cmpw ${=cmdstr}
sshpass -p $password ssh $host cd $dir && ./after_deploy.sh
sshpass -p $password ssh -n $user@$target ls $path*heapdump*
sshpass -p $password ssh -n $user@$target ls $path*heapdump*
sshpass -p -$ -p -a -s -s -w -o -r -d ssh $user@$ip
sshpass -p -$ -p -a -s -s -w -o -r -d ssh -o StrictHostKeyChecking=no $user@$ip
sshpass -p -p -a -s -s -w -o -r -d ssh -o StrictHostKeyChecking no -p 22 root@ip
sshpass -p 1234 ssh-copy-id localhost
sshpass -p password scp /etc/clients.txt shah@192.168.1.2:/home/shah/
sshpass -p password ssh username@74.11.11.11 su -lc "cp -r $location2 $location1"
sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@host cd /opt/app/$DIR;SIZE=$(du -s);echo YVALUE=$SIZE  rightanglebrc  ../size_$DIR.txt du -s
sshpass -p user_password ssh -o StrictHostKeyChecking=no user_name@host read -r DIR; cd "/opt/app/$DIR"; SIZE=$(du -s); echo "YVALUE=$SIZE"  rightanglebrc  "../size_$DIR.txt"
stap your_script.stp -c your command
start
start  /max c:nameofpdf.pdf
start  C:Program FilesSomeProgramSome program.exe
start  leftsquarebrc window title rightsquarebrc   leftsquarebrc /wait rightsquarebrc  myprogram.exe args ...
start /b  myprog.exe
start /b node server.js
start /wait YourApplication.exe
start /wait dxdiag /x:SomeXmlFile
start MATLAB %START_WAIT% %MATLAB_BIN_DIR%%MATLAB_ARCH%matlab %MATLAB_ARGS%
start c:ServicesServicesCheckerServicesCheckerbinDebugServicesChecker.exe
start cmd /C pause
start cmd /c java -j -a -r app.jar ^
start cmd /k echo Hello, World!
start http://code.google.com/p/mulder/downloads/detail?name=MPUI.2011-06-09.Full-Package.exe^
start javaw.exe -j -a -r yuicompressor-2.4.2.jar -o %~n1.min.js %1
start node server.js
start on net-device-up IFACE=eth0
start program = /usr/bin/sudo /usr/bin/startLDAPServer.sh
start title %ProgramFiles%Internet Exploreriexplore.exe http://www.example.com
start-stop-daemon --start --exec ${DAEMON} -- ${ARGS}
startInfo.EnvironmentVariables leftsquarebrc EnableNuGetPackageRestore rightsquarebrc  = true
startJob 0 583 bfd 4thUnusedArgument
startJob 0, 583, bfd, 4thUnusedArgument
startServer sleep 5 grep -m 1 server up  leftanglebrc (tail -f log) tail -f log
startservice --user 0 -n com.android.shellms/.sendSMS -e contact $i -e msg $2
stat $1*
stat $file -c %s
stat --format $%nt%y *
stat --format %a $(find /example/dir -type f -perm 777 | grep -Ev 'file leftsquarebrc 1234 rightsquarebrc ') find /example/dir -type f -perm 777 grep -E -v file leftsquarebrc 1234 rightsquarebrc 
stat --format %n:%s *
stat --printf %Yn directory_name
stat --printf %a your_file
stat --printf %st%nn *
stat --printf %yn directory_name
stat -c %A someFile
stat -c %A someFile sed s/...\(.\).\+/\1/
stat -c %Y %n .
stat -c %Y file
stat -c %Y myfile.txt
stat -c %a %n * awk $1 rightanglebrc 755
stat -c %a %n * awk $1 rightanglebrc 755{print $2}
stat -c %a %n * awk $1 rightanglebrc 755{system("chmod 755 "$2)}
stat -c %a .
stat -c %i %n *csv awk !seen leftsquarebrc $1 rightsquarebrc ++ cut -d   -f 2-
stat -c %s $filename
stat -c %s $resource
stat -c %s *
stat -c %s testing.txt
stat -c %y $filename
stat -c %y $files awk {print $1}
stat -c %y %n .
stat -c -% -s -/ -% -n $FILE awk -F -/ {if ($1 in a)print $2; else a leftsquarebrc $1 rightsquarebrc =1} xargs echo rm
stat -c -% -s fill_me
stat -c -% -z -; -% -n * grep ^2012-12-04 awk -F -; { print $2 } xargs tar -z -c -v -f dec4.tar.gz
stat -f %Sm -t %Y%m%dT%H%M%S FILE
stat -f %m /path/test.app
stat -f %z filename
stat -f -% -z image.png
stat -t /my/mountpoint
stat /home/martin/index.html
stat /miki/*
static const char * path_list_ leftsquarebrc 2 rightsquarebrc  = { lib/sun, lib/matlab }
stats output.txt every ::::0 using 2:3
status return
std::string addPathCommand = /Applications/MATLAB_R2011b.app/bin/matlab -r "addpath(genpath('+ matlabFunctionPath + '))"
stdbuf --output L ./svnfixversion ./ 1.5 --verbose less
stdbuf -o -L curl -s http://asia.dabase.com:4000
stdbuf -o -L sh long.sh sh simple.sh
stdbuf -o -L xxd -r -p nc -u localhost 12345 xxd
stdbuf -o -O runningscript.sh something_else
stdbuf -o 0 ./a.out perl -n -l -e use POSIX; printf ( "%s %.2f\n", strftime( "%Y%m%d-%H%M%S", localtime ), $_ )
stdbuf -o 0 yourprogram awk /pattern/{print;exit}1
stdbuf -o 0 yourprogram mawk -W interactive /pattern/{print;exit}1
stm grep ERROR tee -a /path/to/logfile
stm tee /dev/stderr grep ERROR
store $files, checksum
store $files, checksum
strBatchName = SystemData.AppPath + DetailedContacts.bat    domainCodeList 
strace -c -f -e -v -f -o -r -k ./t.sh
strace -e trace=desc ./a.out awk /open|something_else/ {print; exit}
strace -e trace=open,read bash
strace -f -e open,dup2,close bash -c ls  rightanglebrc  one  rightanglebrc  two  rightanglebrc  three
strace -f -f -o res.txt bash -c mkdir d2 | cp *.c d2/
strace -f -o /tmp/myscript.trace -e trace=process ./myscript.sh
strace -f -o res.txt bash -c mkdir d2 | cp *.c d2/
strace -f -o s.log ./x.sh
strace -o /tmp/head.trace head strace -o /tmp/tail.trace tail
strace -o /tmp/shell -f -p  leftsquarebrc PID from the first shell rightsquarebrc 
strace -o all_system_calls.txt -f -f -f bash MyBashScript.sh MyArgumentOne
strace -o my_program.strace -f ./my_program
strace -o strace.out -f -f -f -p $IRB_PID
strace -o trace -c -T -t -t ./scrip
strace -q -e -w -r -i -t -e cp -- $@ ...
strace ./SMILExtract
strace find /dev -m -a -x -d -e -p -t -h 1
stree ~/my-repo-in-another-folder
string fijiCmdText = /S /C " leftanglebrc command line that can have quotes rightanglebrc "
string file = args leftsquarebrc 0 rightsquarebrc 
string leftsquarebrc /cd.*/ rightsquarebrc 
string_replace $template $server
strings -a -t x /bin/ls grep -- --help
strings -a -t x filename grep foobar
strings foo
strings sed -n s|.*/Count -\{0,1\}\( leftsquarebrc 0-9 rightsquarebrc \{1,\}\).*|\1|p sort -r -n head -n 1
stripper
str}
stty -F /dev/my_serial_port cread clocal
stty -F /dev/ttyS0 cs7 cstopb -i -x -o -n raw speed 1200
stty -F /dev/ttyUSB0 1000000 raw
stty -F /dev/ttyUSB0 ispeed 4800 awk -F -, /GGA/ {print $3,$5}
stty -F /dev/ttyUSB0 ispeed 4800 cat awk -F -, /GGA/ {print $3,$5}
stty -a
stty -e -c -h -o
stty -e -c -h -o
stty -e -c -h -o -c -t -l
stty -i -x -o -n
stty -i -x -o -n
stty -t -o -s -t -o -p
stty echo
stty erase ^M
stty intr ^X
stty sane
stty start ^- stop ^-
stty stop 
stty werase ^?
stuff string
su
su  leftanglebrc command rightanglebrc 
su $APP_USER -c nohup java $JAVA_OPTS   rightanglebrc  rightanglebrc  $LOG_OUT 2 rightanglebrc  rightanglebrc  $LOG_ERR & echo $!  rightanglebrc  $PID_PATH/$CAT.pid
su $USER -c $WEB --quiet
su $USER -c . source_file; $DAEMONPATH $DAEMONPATHARGS $DAEMON $DAEMONARGS  rightanglebrc  /dev/null 2 rightanglebrc &1 & echo $! 
su --login postgres --command createdb $DBNAME
su -c /usr/local/bin/test ||  leftsquarebrc  $? -gt 0  rightsquarebrc  && rm -fr /var/run/test.lock test
su -c /usr/local/bin/test || if  leftsquarebrc  $? -gt 0  rightsquarebrc ; then rm -fr /var/run/test.lock; fi test
su -c bash --rcfile myfile
su -c k=0; if ls | grep -q ^Desktop; then k=1; fi; if  leftsquarebrc  $k == 1  rightsquarebrc ; then echo 1; fi
su -c k=0; if ls | grep -q ^Desktop; then k=1; fi; if  leftsquarebrc  $k == 1  rightsquarebrc ; then echo 1; fi
su -c od --width=144 -x /dev/input/event3 | awk '{ print $12 }'
su -c sh /path/to/script.sh
su -c source /system/etc/bash/aliases && "$@"
su -c source /system/etc/bash/aliases && $*
su -c source myfile; bash
su -c var=Hello; echo $var
su -m $user -c find $dir  rightanglebrc /dev/null 2 rightanglebrc &1 || echo $dir is not readable or executable
su -s /bin/bash -c bash --rcfile  leftanglebrc (echo "source ~/.bashrc; source myfile")
su USERNAME
su another_user -c /path/to/other.sh
su app${username} -c ls $MYDIR
su biergaizi -c kill `cat /var/php-nginx/biergaizi.test.php.pid` ; sleep 1
su dbadmin -c command
su hadoop -c java -jar /home/hadoop/testing.jar  rightanglebrc  $log_file
su jboss -c $JBOSS_START_SCRIPT $JBOSS_BIND_ADDR
su jetty -c sh runProgram.sh
su minecraft -c /bin/bash /path/to/script/script.sh &
su myid -c db2 connect to mydb;db2 -x -v "select COL1,'\'','\'',COL2,'\'','\'',COL3L  from MYTABLE fetch first 10 rows only"; db2 connect reset;
su oracle -c echo "select database_role from v\$database;" | sqlplus -s / as sysdba
su postgres -c dropdb $user
su postgres -c psql -U postgres -d postgres -c "alter user postgres with password 'password';"
su postgres -c psql -d postgres --tuples-only -P format=unaligned -c "SELECT datname FROM pg_database JOIN pg_authid ON pg_database.datdba = pg_authid.oid WHERE rolname = 'username'"
su postre -c psql -c "create database '"$var with encoding 'unicode';"'" -U edumate template1
su root -c $COMMAND &
su sync_user -c cd ~; sync_section $source $tmp $dest
su test -c /opt/linux/agent-service start
su test -c cp /home/test/toto.txt /home/test/dir
su test -c echo hello\ \ there
su user -c ABC=abc; echo $ABC; echo $USER
su vagrant -l -c nvm install v0.10.12  rightanglebrc  /dev/null 2 rightanglebrc &1
subcmd11 subcmd12 subcmd21 subcmd22
subdir
subinacl.exe /help /full
subl `bundle show gemname` bundle show gemname
sublime $(git status --porcelain | grep "myfile.txt" | cut -c 4-) git status --porcelain grep myfile.txt cut -c 4-
subscribe_key = sub-f-xx-xx-xx-xx-xx
successfully curl -L https://get.rvm.io | bash -s stable --ruby
sudo
sudo !!
sudo !!
sudo $(which npm) install -g socket.io which npm
sudo $USER
sudo -E /path/to/script.sh
sudo -E npm install -g socket.io
sudo -E ruby some_script_which_requires_root_access.rb
sudo -S /opt/lamp/lamp start
sudo -S sh -c cat /tmp/hosts  rightanglebrc  rightanglebrc  /etc/hosts
sudo -b nohup dd if=/dev/zero of=/dev/sda bs=1M
sudo -i -u user sh -c for i in /dir; do echo $i; done
sudo -i /path/to/script.sh
sudo -i bash -c cd /path/to/dir; exec bash
sudo -k
sudo -k
sudo -k user2 /path/to/command
sudo -s -u db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \(1995\)
sudo -s -u db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application \(1995\)
sudo -s -u myusername touch ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys
sudo -u $SUDO_USER ./exec_as_normal_user.sh
sudo -u $SUDO_USER bash -c source path/to/rvm_install/script; install_rvm
sudo -u $SUDO_USER bash path/to/rvm_install/script
sudo -u USERNAME -g GROUPNAME COMMAND
sudo -u USERNAME COMMAND
sudo -u andrew myprog
sudo -u css-servers STARTUP_SCRIPT
sudo -u db2inst1 /opt/ibm/db2/V9.7/bin/db2 force application (1995)
sudo -u myuser -s cd ~; pwd
sudo -u myuser rpm -U -v -p ...
sudo -u postgres psql -U postgres -d postgres -c alter user postgres with password 'password';
sudo -u runnerdude run_python.sh
sudo -u test /opt/linux/agent-service start
sudo -u testuser -H ...
sudo -u tomcat ./bin/startup.sh
sudo -u user -H /usr/bin/firefox -n -e -w -- -t -a -b http://stackoverflow.com
sudo -u user1 cp /files ./
sudo -u username -g groupname .command
sudo -u username bash
sudo -u username command
sudo -u username sh ./script.sh
sudo -u username2 -H sh -c cd /home/$USERNAME/$PROJECT; svn update
sudo -u www-data ssh-copy-id -i /var/www/.ssh/id_rsa.pub username@myserver.com
sudo -u www-data ssh-keygen -t rsa
sudo -v
sudo -v exit
sudo ./add_pydev_certificate.py
sudo ./android
sudo ./backup.sh
sudo ./deletion.sh
sudo ./hid_listen sed -e s/^$/'$(echo -en "\033c")'/
sudo ./script.sh -u werner
sudo ./v2u $(printf "cap_%06d.png" "$duration") printf cap_%06d.png $duration
sudo /etc/init.d/haproxy stop
sudo /etc/init.d/incrond start
sudo /home/ronnie/chbr.sh
sudo /opt/node/bin/node /home/pi/www/js/script.js logger -p local5.info
sudo /path/of/your/binary
sudo /path/to/executable/file
sudo /path/to/graceful-restart
sudo /path/to/script
sudo /sbin/ldconfig -v
sudo /usr/sbin/tcpdump -i eth0 -s 0 -w /tmp/eth0.pcap ps -e -f grep tcpdump sleep 1 sudo pkill tcpdump ps -e -f grep tcpdump
sudo DEBIAN_FRONTEND=noninteractive apt-get install -q -q libpam-ldap
sudo NODE_ENV=production node app.js
sudo PATH=/path/to/node/bin/dir:$PATH make install
sudo add-apt-repository ppa:docky
sudo apt-get install $k
sudo apt-get install alien rpm debhelper fakeroot binutils
sudo apt-get install autossh
sudo apt-get install bash-completion
sudo apt-get install beep
sudo apt-get install dos2unix
sudo apt-get install expect
sudo apt-get install gawk
sudo apt-get install ia32-libs
sudo apt-get install ia32-libs
sudo apt-get install incron
sudo apt-get install libnotify-bin
sudo apt-get install libxslt1-dev
sudo apt-get install libxtst6:i386
sudo apt-get install mongodb-10gen=2.4.6
sudo apt-get install pure-ftpd
sudo apt-get install putty-tools
sudo apt-get install python-vtk
sudo apt-get install tcpdump
sudo apt-get install zip
sudo apt-get purge bash-completion
sudo apt-get purge package-name
sudo apt-get remove python-lxml
sudo apt-get update apt-get install bison*
sudo apt-get update apt-get install vim-gtk
sudo aptitude install sharutils
sudo aptitude install xdotool
sudo at -f commands next hour
sudo at next hour
sudo atrs -q b 141 120
sudo auditctl -p a -w /some/file
sudo bash -c echo line  rightanglebrc  file
sudo bash -c foo.sh
sudo bash -c rm /Users/student/Desktop/*
sudo bash ./backup.sh
sudo bash if_test.sh
sudo bash script.sh
sudo brew install gnu-sed
sudo cat ./myfile grep --line-buffered SOFTPAY:F:isoutl.c|L:01307| uniq awk -F | {print $3}
sudo cd / grep -r -n hello *
sudo chmod +x /usr/local/bin/django-admin.py
sudo chmod +x filename
sudo chmod 600 ~/.ssh/authorized_keys
sudo chmod 777 /folderlocation
sudo chmod 777 example.sh
sudo chmod u+s /path/to/my/application
sudo chown -R $USER:staff ~/.rvm
sudo chown -R root:root ./site-functions
sudo chown -R sherwyn /Users/sherwyn/.rvm
sudo chown myusername:mygroup ~/.ssh/authorized_keys
sudo chsh
sudo chsh shell user
sudo command
sudo command args...
sudo cp /bin/bash /bin/sh
sudo cp /bin/sh /bin/sh_orig
sudo cp bash_completion/bash_completion /etc
sudo cp myscript.sh /usr/bin/.
sudo crontab -e
sudo crontab -e
sudo cu -s 19200 -l /dev/ttyUSB0 tr -c -d  leftsquarebrc :print: rightsquarebrc 
sudo dpkg -i python2.7-minimal_2.7.2-5ubuntu1_amd64.deb
sudo dpkg-reconfigure dash
sudo dscl . -c -h -a -n -g -e /Users/$USER UserShell /bin/bash /usr/local/Cellar/bash/4.2.45/bin/bash
sudo dtrace -l -n syscall::write*:entry
sudo easy_install happybase
sudo easy_install virtualenv
sudo easy_install your_app_name
sudo echo -e #!/bin/bash\nxmodmap "keysym Alt_R = Multi_key"
sudo echo foo
sudo echo line
sudo echo nameserver 8.8.8.8
sudo echo nameserver 8.8.8.8
sudo echo something
sudo env PATH=$PATH /path/to/script.sh
sudo ettercap -i eth0 -T -q
sudo find -O 2 $FULFILLMENT $ARCH1 $ARCH2 $MASTERING -t -y -p -e f
sudo find -n -a -m -e *.jpg -e -x -e -c rsync -a -z -u -v -h -E -n {} tango:/jobs/prime/Item/ ;
sudo find . -i -n -a -m -e *.jpg -t -y -p -e f -e -x -e -c identify -f -o -r -m -a -t %w %h %i {} ; awk {if ($1 rightanglebrc 300 || $2 rightanglebrc 300) print $3} sudo xargs -I {} mv {} /home/simon/decent_size/
sudo find . -m -a -x -d -e -p -t -h 1 -t -y -p -e d -e -x -e -c mkdir -p {}/converted ;
sudo find ... -t -y -p -e f -p -r -i -n -t -f %p      %s      %t\n
sudo find / -n -a -m -e *.exe -e -x -e -c sh -c rm -rf $(dirname $0) {} ;
sudo find / -t -y -p -e d -n -a -m -e *heroku*
sudo find / -t -y -p -e f -e -x -e -c grep PIP_RESPECT {} /dev/null ;
sudo find /PATH/TO/YOUR/DIR -m -a -x -d -e -p -t -h 1 -t -y -p -e d -e -x -e -c mkdir -p {}/converted ;
sudo find /media/ leftanglebrc Pendrive rightanglebrc  -n -a -m -e *.jpg -e -x -e -c rm -f {} ;
sudo find ~/Backups/webserver-backups -t -y -p -e f -d -e -l -e -t -e
sudo fs_usage -f /private/etc/hosts
sudo gammu-smsd
sudo gem install capybara-webkit-0.14.1.gem
sudo glassfish4/bin/asadmin create-service
sudo install -m 0755 script.awk /usr/local/bin/books
sudo installer -p -k -g /Volumes/TeamViewerHost/Install TeamViewerHost.pkg -t -a -r -g -e -t /
sudo java -j -a -r ./myjar.jar name_%1$tY%1$tm.csv ./sql/blablab.sql someArgument
sudo java -j -a -r jython_installer-2.5.2.jar
sudo java ClassFileName
sudo kill -9 `sudo netstat -tulpn | grep port_number | tail -c 23 | sed -e 's/\s*\(.*\)/\1/g' -e 's/\( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/g'` sudo netstat -t -u -l -p -n grep port_number tail -c 23 sed -e s/\s*\(.*\)/\1/g -e s/\( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/g
sudo killall -9 vmware
sudo killall instruments
sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
sudo ln -s $(gem env | grep "EXECUTABLE DIRECTORY" | cut -d":" -f 2)/show /usr/bin/show gem env grep EXECUTABLE DIRECTORY cut -d -: -f 2
sudo ln -s $(which gcc-4.2) gcc which gcc-4.2
sudo ln -s /Applications/Sublime Text 3.app/Contents/SharedSupport/bin/subl /bin/subl
sudo ln -s /Applications/TextMate.app/Contents/SharedSupport/Support/bin/mate /usr/bin
sudo ln -s /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain /Applications/Xcode.app/Contents/Developer/Toolchains/OSX10.8.xctoolchain
sudo ln -s /Library/Frameworks/Python.framework/Versions/X.X /Library/Frameworks/Python.framework/Versions/Current
sudo ln -s /System/Library/Frameworks/Python.framework/Versions/X.X /System/Library/Frameworks/Python.framework/Versions/Current
sudo ln -s /Users/username/sql/test_basename.sh /usr/bin/test_basename.sh
sudo ln -s /usr/lib/node_modules/less/bin/lessc /usr/local/bin/lessc
sudo ln -s /usr/local/Cellar/pypy /usr/local/bin/pypy
sudo ln -s /usr/local/lib/jython/bin/jython /usr/local/bin/
sudo ln -s /usr/local/lib/python2.7/site-packages/django/bin/django-admin.py /usr/local/bin/django-admin.py
sudo ln -s /usr/sbin/node /usr/local/bin/node
sudo ln -s script1.py /usr/bin/script1
sudo mkdir /ruby_tutorials
sudo mkdir /usr/local/share/doc
sudo mount -i -o remount,suid /home/evgeny
sudo mount LABEL=MYLABEL /media/usbkey
sudo mpic++ -I $HOME/Downloads/VTK/Parallel -l -v -t -k -P -a -r -a -l -l -e -l mpi_vtk_Hello_World.cpp -I $HOME/Downloads/VTK -I $HOME/Downloads/VTK/Common -o mpi_vtk_Hello_World
sudo msgfmt -o /home/adrian/tmp/locale/es/LC_MESSAGES/hello.mo hello.pot
sudo mv ~/macports/local /opt
sudo mysql -h localhost -u root -p
sudo nameserver 8.8.8.8
sudo networksetup -s -e -t -w -e -b -p -r -o -x -y Ethernet myproxy.example.com 8000
sudo npm install -g grunt-cli
sudo npm install jasmine-node -g
sudo opensnoop -f /private/etc/hosts
sudo ovs-vsctl list-br sudo ovs-ofctl dump-flows $i
sudo perl -M -C -P -A -N -e install Unicode::Collate::Locale
sudo perl -p -i -e s/^(define).*(${2}) leftsquarebrc '|" rightsquarebrc .*/${3}/g $file
sudo perl -p -i -e s|include "/var/run/racoon/\*.conf" ;|# include "/var/run/racoon/*.conf" ;|g /etc/racoon/racoon.conf
sudo permisions.sh
sudo pip install argcomplete
sudo pip3 install nose
sudo pkill -f bz
sudo port -v install postgresql90 postgresql90-server
sudo port install $@ tee -a $1.log
sudo port install gawk
sudo port install gsed
sudo port install gsed
sudo port install zsh +mp_completion
sudo profiles -P egrep -q : com.meraki.sm.mdm$ exit
sudo pure-pw useradd joe -u ftpuser -d /home/ftpusers/joe
sudo python myprogram.py date +%Y-%m-%d_%H-%M
sudo rm --
sudo rm -f /usr/bin/idea.sh
sudo rm -r -f /etc/zypp/repos.d/*
sudo rm -r -f /usr/bin idea.sh
sudo rm -r -f /usr/local/lib/python2.7/dist-packages/twitter
sudo rm -r -f /var/tmp/app.{0..11}.attachments
sudo rm /bin/subl
sudo rpm -U -v -h rpmtodeploy.rpm
sudo rsync -a -v -r -z /path/to/sync/ -e ssh -i ../keys/my.pem user@xx.xx.xx.xx:/path/to/sync/
sudo rsync -p -g -o -d -t /home/ /newhome/
sudo security delete-generic-password -l ssid /Library/Keychains/System.keychain
sudo sed --in-place s/^#\s*\(%wheel\s\+ALL=(ALL)\s\+NOPASSWD:\s\+ALL\)/\1/ /etc/sudoers
sudo sed -i  s/( leftsquarebrc 'password' rightsquarebrc  = ")(";)/1$PASS2/g /file.php
sudo sed -i -. -b -a -k /^127\.0\.1\.1/s/^/#/ /etc/hosts
sudo sed -i -. -b -a -k s~phpinfo();~//phpinfo();~g index.php
sudo sed -i s#${REPLACESTRING10}#${REPLACESTRING12}#g ${DESTINATION}/${FOLDER}/trunk/lib/config.php
sudo sed -i s#DocumentRoot /var/www#DocumentRoot /var/www/mysite.com/public_html# /etc/apache2/sites-available/mysite.com
sudo sed -i s/${REPLACESTRING10}/${REPLACESTRING12}/g ${DESTINATION}/${FOLDER}/trunk/lib/config.php
sudo sed -i s/${REPLACESTRING10}/${REPLACESTRING12}/g ${DESTINATION}/${FOLDER}/trunk/lib/config.php
sudo sed -i s/127.0.1.1/$(ifconfig | grep -oP 'inet addr:\K(.*)?(?=  P-t-P)')/g /etc/hosts ifconfig grep -o -P inet addr:\K(.*)?(?=  P-t-P)
sudo sed -i s/GRUB_TIMEOUT=10/GRUB_TIMEOUT=3/ /etc/default/grub
sudo sed -i textFile.txt -e s,($var1):(.*:):,1:$var2WithDollarSign:$var3,g textfile.txt
sudo sed s/GRUB_TIMEOUT=10/GRUB_TIMEOUT=3/ /etc/default/grub
sudo sed s:a:b:g -i /tmp/test
sudo setfacl -R -m g:users:rwX,d:g:users:rwX index/
sudo sh -c /usr/local/mysql/bin/mysql -h localhost -P 3306 --user=root --password=XXXXXXXXXX -e "select count(*) from crawlstatus where status=\"802350570V\";" test_navin  rightanglebrc  size.log
sudo sh -c FOO=bar; echo Result:${FOO}
sudo sh -c apt-get update -qq ; true
sudo sh -c echo "dotslash ALL = NOPASSWD: /opt/lampp/lampp"  rightanglebrc  /etc/sudoers.d/dotslash
sudo sh -c echo -e '$content'  rightanglebrc  $path
sudo sh -c echo 0  rightanglebrc /sys/devices/system/cpu/cpu1/online
sudo sh -c echo nameserver 8.8.8.8  rightanglebrc  rightanglebrc  /etc/resolv.conf
sudo sh -c echo something  rightanglebrc /var/lib/varlibfile
sudo sh -c for n in $(seq 1 60); do echo $n; sleep 1; sync; done
sudo sh -c su -c 'make' $USER && init 0
sudo sh ./backup.sh
sudo sh ./script.sh
sudo sh if_test.sh
sudo ssh server echo "$SOMEVAR"; awk '/pattern/{print "hello"}1' file  rightanglebrc  file.tmp
sudo stdbuf -o 0 tcpdump ...
sudo su
sudo su -c R -e "install.packages('shiny', repos='http://cran.rstudio.com/')"
sudo su -c rpm -Uvh rpmtodeploy.rpm
sudo systemctl start crond
sudo tar -c -v -j -S -f folder folder.tar.bz2
sudo tar -c -v -j -S -f folder.tar.bz2 *
sudo tar -c -v -p -z -f backupfolder/localhost.tar.gz /var/www
sudo tar -x -v -z -f eclipse-SDK-3.7-linux-gtk.tar.gz -C /usr/local/
sudo tcpdump -D
sudo tcpdump -Z $USER -i -e -t -h -1 -w ~/dump.bin
sudo tcpdump -i eth0 -q -l awk {print $3; fflush} tee -a file.txt
sudo tcpdump -i eth1 -s 0 port 5025 -w netcat_trac.dump
sudo touch ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys
sudo turnoff
sudo umount -a -t cifs
sudo umount /home/user/myMount
sudo unzip thefile.zip -d /opt/target_dir
sudo update-alternatives --set rename /path/to/rename
sudo update-alternatives --set rename /path/to/rename
sudo updatedb
sudo usermod -s /bin/bash jenkins
sudo whoami
sudo wrapper.exp
sudo xauth add `xauth list $DISPLAY` xauth list $DISPLAY
sudo yum -y install mysql-server
sudo yum install build-essential
sudo yum install gcc
sudo yum install mongo-10gen mongo-10gen-server
sudo ~/.pythonbrew/bin/pythonbrew install 2.5
sudo: RunStefano: command not found
sudo: unable to execute /usr/local/bin/bundle: No such file or directory
sum + val
sum += num
sum += val
sum = $assignment + $test1 + $test2 + $final
sum: 6557076.288
supervisorctl start all
supervisorctl start script1
sv interrupt uwsgi
svn  leftsquarebrc subcommand rightsquarebrc   leftsquarebrc options rightsquarebrc   leftsquarebrc files rightsquarebrc 
svn add  /save
svn cat http://myrepo/myfile.txt -r 1
svn cat https://myhost/svn/eeli/eel/eel/eel-scalable-font.h@2
svn changelist ignore-on-commit file-you-want-to-add
svn checkout $URL tee /dev/tty
svn checkout --depth files --force URL PATH
svn checkout --username USER --password PASS ttps://example.com/projectname/trunk/app app
svn checkout -r {2006-02-17}
svn checkout http:/repositoryurl /path/to/the/code
svn ci -m  some comment about your change
svn ci file1 file2 dir1/
svn ci vendor/plugin/
svn co --depth immediates svn://repo/trunk
svn co file:///localhost/Repo
svn co https://x.x.com/x/x/x/projects/$@
svn co svn://svn.fazend.com/abc/branches/pqr-staging pqr
svn commit /path/where/you/code
svn commit test.log -m $svnmessage --non-interactive --username $username --password $password
svn cp -m Making test branch ^/trunk ^/branches/hellosite
svn cp -m Making test branch ^/trunk ^/branches/hellosite
svn diff --diff-cmd /usr/local/bin/mydiff
svn diff --summarize grep ^ leftsquarebrc ^D rightsquarebrc  file grep -P -o (? leftanglebrc =host).*
svn diff -c 12345 12346 12347
svn diff -r -1 -1 -9 -9 -7 -7 -: -r -1 -1 -9 -9 -7 -8
svn diff -r -1 -2 -3 -4 -: -1 -2 -3 -5 diffstat
svn diff -r -1 -: -H -E -A -D --summarize grep -v -e ^D awk {print $2} xargs exclude_dir.pl xargs tar -v -z -c -f file.tar.gz --exclude .svn
svn diff -r -P -R -E -V -: -H -E -A -D --summarize
svn diff -r BASE:14 foo.c
svn diff -r BASE:HEAD
svn diff -r BASE:HEAD foo.c
svn diff -r HEAD
svn help  leftsquarebrc subcommand rightsquarebrc 
svn help co
svn import -m Imported project directory structure dev svn://path/to/my/repo/trunk/
svn import -m Initial import /tmp/svn-structure-template/ file:///var/www/svn/reponame
svn info
svn info $svn awk /^Last Changed Rev:/ { print $4 }
svn info awk /Revision/{ print $2 }
svn info filename
svn info http://svn-repository/trunk grep ^Revision: sed -e s/^Revision: //
svn info path/to/filename
svn info url
svn list http://$DEV$BRANCH sort -r awk -F -/ {print $1}
svn log --limit 1 sed -n -e s/^\(r leftsquarebrc 0-9 rightsquarebrc \+\).*/\1/p
svn log --limit 1 sed -n -e s/^r\( leftsquarebrc 0-9 rightsquarebrc \+\).*/\1/p
svn log --limit 1 sed -n -e s/^r\( leftsquarebrc 0-9 rightsquarebrc \+\).*/\1/p
svn log --revision 16
svn log --xml %SOURCE%
svn log -l 1 BRANCH_URL
svn log -r -{ -2 -0 -1 -0 -0 -1 -0 -1 -} -: -{ -2 -0 -1 -0 -0 -3 -3 -1 -} -v --xml xsltproc formatter.xsl
svn log -r COMMITTED
svn log sed -n /USERNAME/,/-----$/ p
svn ls -v ^/tags
svn ls export var unset var
svn ls http://server/svn/foo --depth empty
svn ls http://svn/path/to/tags sort -t . -k 1,1n -k 2,2n -k 3,3n tail -1 sed s:/$:: awk {FS="."}{print $1 "." $2 "." $3+1}
svn ls https://developernetwork.repo.net/svn/Projects/Calculator/
svn ls https://svn.example.com sed s/^/    /
svn merge ^/trunk/xyz.com
svn mv https://subversion.assembla.com/svn/semiosnet/Test Protocol (office).docx https://subversion.assembla.com/svn/semiosnet/Repeaters_Network/Test Protocol (office).docx
svn pg -R svn:ignore .
svn propedit export file:///svn/repositoryName/path/to/file/in/repository/example.ex --file /data/svn/intranet/hooks/fileWithLogMessage --editor-cmd echo succeeded  rightanglebrc 
svn propget --revprop -r HEAD svn:date
svn propset svn:needs-lock yes $line
svn resolve --accept --recursive base .
svn revert -R .
svn revert -R MYDIR
svn st awk /Foo/ { print $2 ; }
svn st awk /^?/ { print $2 }
svn st awk /^?/ { system("rm -f $2") }
svn st cut -c -8 -- xargs ls
svn st grep SomeFolderA awk {print $2} xargs svn revert
svn st perl -l -n -e print if s/^\s*\?// xargs -L 1 svn add
svn st perl -w -p -l -e s|\S*\s*(.*)/(.*)$|$1/Test$2|
svn status --xml wc
svn status grep -v ^. leftsquarebrc  t rightsquarebrc *..* grep ^? svn status grep -v ^. leftsquarebrc  t rightsquarebrc *..* grep ^? awk {print $2} xargs svn add
svn status grep \! awk {print $2} tee  rightanglebrc (xargs svn revert) xargs svn revert xargs svn delete
svn status grep ^ *? sed -e s/^ *? *// rm $file
svn status grep ^ leftsquarebrc AMD rightsquarebrc  sed s/^.\{8\}// xargs zcvf My.tar.gz
svn status grep ^? awk {print $2}
svn status grep ^? awk {print $2} xargs -J % cp % backups/
svn status grep ^? awk {print $2} xargs cat
svn status grep ^? sed -e s/^? *// xargs --no-run-if-empty -d \n svn add
svn status grep ^? sed s/^?/svn add/ bash
svn status grep ^?.*iml sed s=^? *=./=;s=/ leftsquarebrc ^/ rightsquarebrc *$== xargs svn propset svn:ignore *.iml
svn status grep ^\! cut -c -8 -- read f svn rm $f
svn status grep ^\! sed s/! *// cygpath -m xargs -I -% svn rm %
svn up --set-depth empty tags
svn up --set-depth infinity dirName
svn up `ls -d ./*` ls -d ./*
svn update /path/to/the/code
svnadmin create --pre-1.6-compatible --fs-type fsfs /svn/repos/myproject
svnadmin dump /path/to/repo
svnadmin dump c:pathtomyrepo 7z a -s -i svndump.7z
svnlook propget --revprop -r $REV $REPOS_PATH svn:log
svnrdump dump https://yourRepository/yourProject
svnx
swapFiles c:Usersdirectory1 c:Usersdirectory2
swfdump -D /Users/home/folder/file.swf grep -i mp3 cut -d -  -f 6
swipl -g consult(abc), test(ask, X), write(X), halt
swipl -q -s kb.pl -t dad(elvis,X), writeln(X), false
swipl -s file.pl -g mygoal(3,foo). -t halt.
syn region shExpr ... start={ skip=^function.*_s={ end=} ...
sync reboot
sys.. grep.. awk NR==FNR{w=$2;h=$4;next}/screenwidth/{$0="screenwidth \""w"\"";} /screenheight/{$0="screenheight \""h"\""}1 oldfile
sysbench --test cpu --cpu-max-prime 100 run
syslog -s -l error message to send
system ./video
system /bin/bash -c 'shopt -s globstar; for i in **.mp4; do ffmpeg -i "$i" -vframes 7 -y -ss 10 -s 150x150 -an -sameq -f image2 -r 1/5  "$i"%1d.jpg; done'
system /tmp/a.sh, @array
system LIST
system SCALAR
system chmod 755 public
system echo, params leftsquarebrc :message rightsquarebrc 
system find /some/path -type f -name "*.mp4" -exec sh -c 'for f; do ffmpeg -i "$f" -vframes 7 -y -ss 10 -s 150x150 -an -sameq -f image2 -r 1/5  "$f%1d.jpg"; done' _ {} +
system jade --watch --pretty index.jade
system ls -l
system nstcpdump.sh, -C -, 1, -w -, $name
system python, ./post_request.py, --json, json
system start text_file.txt
system twurl -t -d track=keyword -H stream.twitter.com /1.1/statuses/filter.json
system usermod, -p -, @options leftsquarebrc shadow rightsquarebrc , @options leftsquarebrc username rightsquarebrc 
system wine, cmd.exe, /C, InitialCallFile.bat, self.infile, self.outfile, self.param1, self.param2
system xterm, -h -o -l -d -, -e -, $program
system_profiler -x -m -l SPUSBDataType
system_profiler SPMemoryDataType awk $1=="BANK"{bank=$2;sub(/:/,"",bank);while(getline rightanglebrc 0){if($1=="Serial"&&$2=="Number:"){serial_number=$3}else if($1=="Status:"){status=$2};if(serial_number!=""&&status!=""){entries leftsquarebrc ++e rightsquarebrc ="{\"Bank\":\""bank"\",\"SerialNumber\":\""serial_number"\",\"Status\":\""status"\"}";break}};bank=serial_number=status=""}END{print " leftsquarebrc ";if(e rightanglebrc 0){printf "%s",entries leftsquarebrc 1 rightsquarebrc ;for(i=2;i leftanglebrc =e;++i){printf ",\n%s",entries leftsquarebrc i rightsquarebrc };print""};print " rightsquarebrc "}
system_profiler SPSerialATADataType SPPrintersDataType
systemctl disable foo.service
systemctl enable foo.service
systemctl kill -s SIGINT uwsgi.service
systemctl start asterisk
systemctl stop asterisk
s{ leftanglebrc a href='\'' leftsquarebrc . rightsquarebrc  leftsquarebrc . rightsquarebrc /Example/case(\d\d) leftsquarebrc . rightsquarebrc html'\'' rightanglebrc  leftanglebrc img src='\'' leftsquarebrc ^'\'' rightsquarebrc *'\''}{ leftanglebrc a href='\''../Example/case$1.html'\'' rightanglebrc  leftanglebrc img src='\'' leftanglebrc ?php imgname('\''case$1'\''); ? rightanglebrc '\''}
s|/#replace|test " $x " "1" "0" "" |g
s|Comment=|&'\'' leftanglebrc span size="xx-large" rightanglebrc |; s|Comment=.*|& leftanglebrc /b rightanglebrc '\''|
t
t.dat
t1.dat t2.dat
tac Dump1.dump grep -m 1 --binary-files text Revision-number sed s/Revision-number\:\ //g
tac INPUTFILE sed /^Statistics |/q tac
tac error.log awk {if(/2012/)print;else exit}
tac file
tac file awk !done && /Gottagohome saab 90 75n/{done=1; sub(/&$/, "")}1 tac
tac file awk /Cannot proceed: the database is empty/ {f=$0; next} f{if (($3==5 && $4 rightanglebrc "22:30:00") || ($4==6 && $4 leftanglebrc ="00:30:00")) {print; print f} f=""}
tac file awk /ScriptAlias/ && ! seen {print "new line"; seen=1} {print} tac
tac file awk /a/ && !seen {sub(/a/, "c"); seen=1} 1 tac
tac file sed /a/ {s//c/; :loop; n; b loop} tac
tac file sed /pattern/q tac
tac file sed 3q;d
tac file sort -s -u -t -, -k -1 -, -2
tac file.csv sed 1,4d tac
tac file.log awk { if ($1  rightanglebrc = 423) print; else exit; } tac
tac file.xml awk -f parse_kml.awk tac
tac file2
tac infile sed -n -e /Response/,/Stimulus/ p tac
tac inputfile sed 5,/angles/d tac
tac logfile awk -v start=$(date -d "5 min ago" +%T) $1  leftanglebrc  start {exit} 1 date -d 5 min ago +%T tac
tac temp.txt sort -k -2 -, -2 -r -u
tagfile.py Tag Name FileOrFolderName
tai64n2tai awk -f script.awk patterns.txt qlogselect start $STARTDAY end $ENDDAY matchup
tai64n2tai awk BEGIN { IGNORECASE=1 } FNR==NR { patterns leftsquarebrc $0 rightsquarebrc ++; counter++; next } { $1=$2=$3=$4=$5=""; sub(/^ leftsquarebrc  \t rightsquarebrc +/,""); for (i in patterns) { if ($0 !~ i) { count++ } } if (counter == count && !/^$/) { print } count = 0 } patterns.txt qlogselect start $STARTDAY end $ENDDAY matchup
tail $*
tail --follow name --retry
tail --follow name file.txt grep --line-buffered something
tail --follow name file.txt grep something
tail --lines +2 $1
tail -0 -f /var/log/maillog tee -a ../newlog.log
tail -1
tail -1
tail -1 $file cut -d -# -f 2 read ... variables here ....
tail -1 ${filename} awk -F -, {sub(/^"/,"",$3);print 2+$3}
tail -1 /logs/file.txt
tail -1 /logs/file.txt
tail -1 0 /home/appuser/logA.log
tail -1 0 foofile awk {print " leftanglebrc category label=\"" $13 " " $14 " " $15 "\"/ rightanglebrc "}
tail -1 00 tee $STDERR
tail -1 000 -f ${logDir}/$(/bin/date +%Y%m%d.%H%M).sass_watch.log /bin/date +%Y%m%d.%H%M
tail -1 000 file-with-line-too-long.txt more
tail -1 000 ghost.log ./analyse
tail -1 000 ghost.log ./analyse
tail -1 MyFile date -d `awk -F, '{ print $7 }'` +%s awk -F -, { print $7 }
tail -1 MyFile date -d `cut -d, -f7` +%s cut -d -, -f 7
tail -1 cookie.txt
tail -1 error.log grep -q -E Error echo yes
tail -1 file cut -c 9-22
tail -1 file egrep -o ^ leftsquarebrc 0-9 rightsquarebrc +: leftsquarebrc 0-9 rightsquarebrc +
tail -1 file.txt mv file.txt.new file.txt
tail -1 file.txt sponge file.txt
tail -2 00 somefile sed -n /-----BEGIN PGP MESSAGE-----/,/-----END PGP MESSAGE-----/{/-----BEGIN PGP MESSAGE-----/{x;d};H};${x;p}
tail -2 file.A awk -F -: {sum+=$NF}END{print sum}
tail -2 yourfile head -1
tail -5 somefile.log pbcopy
tail -F somefile
tail -c +3 file
tail -c -+ -1 -1
tail -c -+ -3
tail -c 100 file
tail -f $( ls -1tr `find /my/root/log/dir -name "*.log"` | tail -1 ) ls -1 -t -r `find /my/root/log/dir -name "*.log"` find /my/root/log/dir -name *.log tail -1
tail -f $( ls -1tr `find /my/root/log/dir -name "server.log"` | tail -1 ) ls -1 -t -r `find /my/root/log/dir -name "server.log"` find /my/root/log/dir -name server.log tail -1
tail -f $(list_date_sorted_ascending /var/log | nul_terminated tail -n 1) list_date_sorted_ascending /var/log nul_terminated tail -n 1
tail -f ${logDir}/$(/bin/date +%Y%m%d.%H%M).sass_watch.log /bin/date +%Y%m%d.%H%M
tail -f -n 0 access.log perl -e $SIG{ALRM} = sub { print $x/5.0; exit(0) }; alarm 5.0; while( leftanglebrc  rightanglebrc ) { $x++ }
tail -f -n 0 access.log pv -l -r
tail -f -n 11 scrape.log scrape.log
tail -f /dev/null
tail -f /dev/tty0 awk {printf "%s\n",$1}
tail -f /foo/bar nc -l -k -p 9999
tail -f /path/to/mongo_dev/logfile
tail -f /some/file.log awk  $2 rightanglebrc 10 {if (!($1 in a)) print $1; a leftsquarebrc $1 rightsquarebrc =1; system("")}
tail -f /tmp/display_data
tail -f /var/log/asterisk/messages awk match($12, / leftsquarebrc ^0-9 rightsquarebrc 91( leftsquarebrc 0-9 rightsquarebrc {10})@default/, a) {print a leftsquarebrc 1 rightsquarebrc ; exit}
tail -f /var/log/mongodb.log
tail -f /var/log/msg stdbuf -o -L grep error
tail -f /var/log/somelogfile.log
tail -f /var/log/system.log grep --line-buffered query= sed -u -e s/.*query=// sed -u -e s/"//g sed -u -e s/.$/ /
tail -f /var/log/{system.log,kernel.log} grep -i vendor: 0x22b8 -m 1
tail -f /var/somelog read line echo $line grep some test and p l a c e h o l d e r cut -f 3,4,14 -d  
tail -f FILE_PATH
tail -f a.txt cut -f 7 -d -  uniq -c
tail -f a.txt stdbuf -o -L cut -f 7 -d -  uniq -c
tail -f a.txt uniq -c
tail -f access.log xargs host
tail -f access_log awk /\/index.php/ { print "\007" $0 }
tail -f access_log grep --line-buffered /index.php read x echo -n -e \007 $x \n
tail -f access_log grep --line-buffered 127.0.0.1 grep -v .css
tail -f debug
tail -f dev.log grep ^ERROR:
tail -f file
tail -f file
tail -f file awk tolower($0) ~ /debug|.*nfo/ {system("java -jar abc.jar " $0)}
tail -f file grep --line-buffered my_pattern
tail -f file1 awk /yourPattern/{print $0  rightanglebrc  rightanglebrc  $3".txt"}
tail -f file1 tee  rightanglebrc (exec grep "hello"  rightanglebrc  fileHello)  rightanglebrc (exec grep "bye"  rightanglebrc  fileBye) exec grep hello exec grep bye grep etc
tail -f file1.txt
tail -f filename
tail -f flex.log grep Exception sed -e $s/Exception/Exceptiona/
tail -f flex.log sed -e $s/Exception/Exceptiona/
tail -f flexi.log grep Exception --color grep -v DataNotAvailableException
tail -f infile perl -M -T -i -m -e -: -: -H -i -R -e -s -= -t -i -m -e -n -e printf "%.3f\t%s", time(), $_
tail -f input grep -e $1 -e  --color always
tail -f input grep -e .*$1.* -e  --color always
tail -f input perl -p -e s/.*'$1'.*/\e leftsquarebrc 1;31m$&\e leftsquarebrc 0m/g
tail -f log awk /^\/\*\*\* Module Name/,/^\*\*\//
tail -f log grep --line-buffered some test and p l a c e h o l d e r gawk {print $3,$4,$14}
tail -f log-file perl -p -e $|=1; s/(.{80})/$1\n\t/g
tail -f log.file extract
tail -f log.txt cut -b 1-50
tail -f log/development.log
tail -f logfile
tail -f logfile
tail -f logfile grep org.springframework cut -c 5-
tail -f logfile read line echo $line grep org.springframework cut -c 25-
tail -f logfile uniq -c
tail -f logfile.log grep --line-buffered something read -t 3
tail -f logfile.log sed /pattern/,+10d
tail -f logfile.txt
tail -f mct cat java -X -i -n -c -g -c -X -m -x -2 -0 -4 -8 -M -j -a -r minecraft_server.jar
tail -f my_log_file sed -e s/.*\(response_time \S\+\).*/\1/p
tail -f myfile.txt perl -n -e if (/file truncated/) {system 'clear'; print} else {print}
tail -f myfwlog
tail -f mylogfile.log grep error: 
tail -f ~/Library/Logs/iOS Simulator/7.1/system.log
tail -n $number_of_lines filename
tail -n +1 -- *.txt
tail -n +1 -f /var/log/messages grep sync_complete
tail -n +1 -f pipe
tail -n +1 -f your_log_file myscript.sh foo
tail -n +1 -f your_log_file some_processing_pipeline
tail -n +10 file
tail -n +100 log/production.log less
tail -n +16 /var/log/syslog grep ^WARNING
tail -n +2 $FILE
tail -n +2 Data cut -d -  -f 2 xargs -I -{ -} cat Instances/{}
tail -n +2 input cut -f 1 -d -: read file test -f $dir/$file mv -v $dir/$file $destination
tail -n +2 input-file head -n -1
tail -n +21 myfile.txt
tail -n +3 file.txt head -n -4 mv file.txt.new file.txt
tail -n +3 input.txt
tail -n +34 file head -n -6
tail -n +8
tail -n -+ -1 -0 yourfile
tail -n -+ -3
tail -n -+ -3 file
tail -n -+ -` -g -r -e -p -  -- -n -  -2 -3 -4 -2 -3 -4 -2 -3 -4 -2 -3 -  -m -y -f -i -l -e -. -t -x -t -  -| -  -c -u -t -  -- -f -  -1 -  -- -d -: -` myfile.txt grep -n 23423423423 myfile.txt cut -f 1 -d -:
tail -n -+ -` -g -r -e -p -  -- -n -  -p -o -p -d -  -t -m -p -. -s -h -  -| -  -c -u -t -  -- -f -  -1 -  -- -d -: -` tmp.sh grep -n popd tmp.sh cut -f 1 -d -:
tail -n 1 `ls -1t /path/*.txt 2 rightanglebrc /dev/null | head -n 1` /dev/null ls -1 -t /path/*.txt head -n 1 awk {print $1}
tail -n 1 file.txt sed s/ //g sed s/.*=//
tail -n 100 A.txt
tail -n 2 file9.log file10.log file11.log file12.log
tail -n 2 filename head -n 1
tail -n 2 file{9..12}.log
tail -n 3 outputs.txt
tail -n 4 *simple*.log
tail -n 4 outputs.txt awk NR ==1 || NR == 3
tail -q -n +2 dihed_*.dat awk {print $2}
tail -q -n +2 dihed_*.dat cut -d -  -f 2
tail -q -n 1 *
tail -r myFile.txt
tail -r myFile.txt cat temp.txt rm temp.txt
tail -r myfile.txt
tail -r sed /pattern/,$d tail -r
tail -r tail -n +10 tail -r
tail abc.xml gzip
tail file grep A1 awk {print $NF}
tail log-file perl -p -e s/(.{80})/$1\n\t/g
tail result.txt grep -o PFM_DIP_SERVER_001: leftsquarebrc ^; rightsquarebrc * cut -d -: -f 2
tail test.log grep -P -o (? leftanglebrc =\ leftsquarebrc INFO\ rightsquarebrc  ).*(?= joined .*)
tail ~/.xsession-errors
tailf **/*.log
tailf *.log
tail}
tar  leftsquarebrc your options rightsquarebrc   leftsquarebrc files rightsquarebrc 
tar  leftsquarebrc your params rightsquarebrc  split -b 500m output_prefix
tar  leftsquarebrc your params rightsquarebrc  zip -s 500m output.zip
tar --exclude .svn -z -c -v -f mytarball.tar.gz mydir/
tar --exclude /sys --exclude /proc /
tar --exclude file1 --exclude patter* --exclude file2
tar --extract --file /var/www/html/folder1/folder2/folder3/price.tbz price/total_price
tar --help grep -- -z
tar --help grep ignore-failed-read
tar --newer 20120408
tar --preserve-permissions --preserve-order -j -c /path/to/your/folder
tar --strip-components 1 -z -x -v -f wordpress.tgz
tar --transform flags r;s|bar|foo| -c -f file.tar file1 file2 bar fubar /dir/*
tar --transform flags r;s|foo|bar| --transform flags r;s|baz|woz| -c -f file.tar /some/dir/where/foo/is /some/dir/where/baz/is /other/stuff/* /dir/too
tar --version
tar -C $1 -c -v -f . tar -C $2 -x -v -f
tar -C $1 -c . tar -C $2 -x
tar -C backupdb/db/2012/11/25/ -c -f backupdb/db/2012/11/database.2012-11-25.tar.gz *.sql
tar -L 1000000 -F name-script.sh -c -f split.tar largefile1 largefile2 ...
tar -M -F name-script.sh -c -f split.tar
tar -c $directory_name bzip2
tar -c ${dir} pigz -c split -a 5 -d -b ${size} ${name}
tar -c --files-from  leftanglebrc (find $dir/temp -maxdepth 1 -name "*.parse") find $dir/temp -maxdepth 1 -name *.parse lzma -9 date +%Y-%m-%d
tar -c -C /dir1/dir2 -v -f test.tar file1.xml file2.xml
tar -c -M --tape-length 30000000 --file filename.tar foldername
tar -c -f -C /path/to/dir1 . -C /path/to/dir2 . tar -t -v -f
tar -c -f -C dir1 . -C ../dir2 . -C ../dir3 . tar -t -v -f
tar -c -f -F ...
tar -c -f -v mytar.tar root/*/the_folder/
tar -c -f -z archive.tar.gz */wp-content/uploads/2013
tar -c -f -z foo.tgz -T
tar -c -f -z mage6BRQWJ.tar.gz --anchored --exclude vendor *
tar -c -f /dir/archive.tar --remove-files /home/user1/*.foo /some/otherpath/*.fbar
tar -c -f ARCHIVE.TAR --exclude *.o DIRECTORY
tar -c -f ARCHIVE.TAR --exclude *.o DIRECTORY
tar -c -f archive.tar --exclude C DIR
tar -c -f archive.tar --mode a+rwX *
tar -c -f backup.tar.gz /folder_anme/
tar -c -f directory/tarfile -C directory/tardirectory -X excludelist1.txt -X excludelist2.txt .
tar -c -f file.tar *.jpg --wildcards --exclude *.*.jpg
tar -c -f filename.tar --transform s%.*/%% .
tar -c -f path_of_tar.tar $(ls | head -10) ls head -1 0
tar -c -f src_tree compress uuencode src_tree.tar.Z
tar -c -f test/foo/test.tar -- `find test  -maxdepth 1 -name '*.txt' -type f` find test -maxdepth 1 -name *.txt -type f
tar -c -f test/foo/test.tar test/*.txt
tar -c -j -f /home/user1234/files/mylog.log.tar.bz2 -C /home/user1234/files/ mylog.log
tar -c -j -f MyArchive.tar.bz2 {1..50}.gz
tar -c -j -f archive.tar.bz2 -C /var/some/log/path .
tar -c -j -f file.tar.bz2 $directory_name
tar -c -j -f site1.tar.bz2 -C /var/www/site1 .
tar -c -j -v -f -X ~/exclude.txt ~/2014.tar.bz2 -C /pdf/data/pdfnew/ 2014
tar -c -j -v -f -X ~/exclude.txt ~/2014.tar.bz2 /pdf/data/pdfnew/2014
tar -c -p -f --exclude CVS directory sh -c cd /wherever/it/goes && tar -xpf -
tar -c -p -z -f $filename --exclude $fullexclude .
tar -c -v -T file_list.txt -f tarball.tar
tar -c -v -T filelist -f tarball.tar
tar -c -v -f -z $filename /home/myfoldertobackups/ $filename
tar -c -v -f -z dir_archive.tar.gz --exclude dir_archive/mydir/exclude* dir_archive
tar -c -v -f -z dir_archive.tar.gz --no-recursion --files-from filelist.txt
tar -c -v -f ...
tar -c -v -f .... $(date +'...') ... date +...
tar -c -v -f ....path with spaces....
tar -c -v -f /tmp/narch.tar -C /1 . -C /2 . -C /3 .
tar -c -v -f /tmp/some.tar -C /path/to/dir1 . -C /path/to/dir2 .
tar -c -v -f VM.iso VM.mf VM.ovf VM.vmdk
tar -c -v -f VM.ovf VM.mf VM.vmdk VM.iso
tar -c -v -f VM.{ovf,mf,vmdk,iso}
tar -c -v -f filename.tar {filenames}
tar -c -v -f folderABC lz4
tar -c -v -f folderABC lz4 folderABC.tar.lz4
tar -c -v -f gppbasic.$(date +%Y%m%d.%k%M).tar $x/*.{php,html,css,bmp} date +%Y%m%d.%k%M
tar -c -v -f mytar.tar /opt/myprefix/mydir
tar -c -v -f paths-to-archive pigz
tar -c -v -f paths-to-archive pigz -9 -p 32
tar -c -v -f something.tar /path/to/something
tar -c -v -f ~/app.tar --exclude .git --exclude *.log .
tar -c -v -j -f ../set3.tar.bz2 * --exclude a --exclude b --exclude c
tar -c -v -z -f /tmp/somefile.tgz some/directory
tar -c -v -z -f /tmp/somefile.tgz some/directory
tar -c -v -z -f dir.tar.gz /tmp/dir/
tar -c -v -z -f filea fileb filec
tar -c -v -z -f filename.bla directory_to_compress/
tar -c -v -z -f filename.tar.gz directory_to_compress/
tar -c -v -z -f test.tar.gz -C /home/path test
tar -c -v -z -i /home split -d -b 100m --filter ncftpput -r 10 -F -c -u ftpUsername -p ftpPassword ftpHost $FILE
tar -c -z -f $file.tar.gz $file
tar -c -z -f ../ $file
tar -c -z -f FILES/* ssh me@someplace cat  rightanglebrc  foo.tgz
tar -c -z -f FILES/* ssh me@someplace tar xzf -
tar -c -z -f acc.tar.gz --no-recursion /home/uname/public_html/project/js/*
tar -c -z -f acc.tar.gz -C /home/uname/public_html/project ./js
tar -c -z -f archive-log.tar.gz $(find $folder -name "*.log" -mtime +30) find $folder -name *.log -mtime +30
tar -c -z -f backup.tar.gz `ls /www/hosting | grep \.com$ | sed 's/$/\/www/g' | sed 's/^/\/www\/hosting\//g'` ls /www/hosting grep .com$ sed s/$/\/www/g sed s/^/\/www\/hosting\//g
tar -c -z -f folder*/**/*.a tar -C /path/to/dest -x -v -f
tar -c -z -f my-code.tar.gz htmlcode jscode
tar -c -z -f omniauth.wiki.tar.gz omniauth.wiki
tar -c -z -f www split -b 1073741824 www-backup.tar.
tar -c -z -v -f ./${date}_${user}_backup.tar.gz ${target}
tar -c -z -v -f ./somedir/abc.txt.tar.gz ./somedir/abc.txt
tar -c -z -v -f backup.tar.gz -T files_to_tar.txt
tar -c -z -v -f mytar.tar.gz $( leftanglebrc config.txt)
tar -c -z -v -f mytar.tar.gz $@
tar -c -z -v -f mytar.tar.gz dir1 dir2 .. dirN
tar -f mytar.tar --delete */count1000
tar -j -c -v -f archive_name.tar.bz2 $my_file
tar -j -c -v -f filename.tar.bz2 {filenames}
tar -o -p -t -i -o -n -s -f dest source cut -b -1 -- -$ -( -t -p -u -t -  -c -o -l -s -) tput cols sed -u i\\o033 leftsquarebrc 2K stdbuf -o 0 tr \n \r echo
tar -p -c -v -f base.tar input file/myPacket/my2 --exclude-vcs input*file/myPacket/my3/*.bmp
tar -p -c -z -f MyBackup.tar.gz /home/user/public_html/ --exclude /home/user/public_html/tmp
tar -r -v -C $prefix -f $tarfile $rest
tar -t -f archive.tar
tar -t -f archive.tar head -1
tar -t -f archive.tgz xargs tar -O -x -v -f archive.tgz grep something
tar -t -f file.tar --wildcards *.jpg --exclude *.*.jpg
tar -t -f test.tar.bz sed s#/.*## sort -u
tar -t -j -f archive.tbz
tar -t -v -f $TARFILE head -1 sed -e s:^.* \( leftsquarebrc ^/ rightsquarebrc *\)/.*$:\1:
tar -t -v -f mysql-connector-java-5.1.29.tar.gz
tar -t -v -f mytar.tar
tar -t -z -f my_tar.tar.gz
tar -t -z -f nginx-1.0.0.tar.gz sed -e s@/.*@@ uniq
tar -t -z -v -f archive.tar.gz sed s/ \+/ /g cut -f 3 -d -  sed 2,$s/^/+ / paste -s -d -  bc
tar -t -z -v -f test.zip
tar -v -z -x -f lostzilla.tar.gz sed s/^/   /
tar -x --to-command MySerialiser -f MyData1.tar.xz tar -x --to-command MySerialiser -f MyData2.tar.xz MyAnalyser
tar -x --xform s/wordpress// -f latest.tar
tar -x -f *.gz
tar -x -f abc.tar.gz def.tar.gz ghi.tar.gz
tar -x -f abc.tar.gz pqr/xyz/important.c
tar -x -f archive.tar path/inside/archive/a.txt another/path/b.txt
tar -x -f file.tar
tar -x -f filename.tar --strip-components 1 -C somewhere
tar -x -f myArchive.tar folder/someFile.txt -O
tar -x -j -f /path/to/archive.tar.bz
tar -x -j -f archive.tbz filename
tar -x -v -f $F
tar -x -v -f $f -C C:/Users/x/Documents/folder
tar -x -v -f $file
tar -x -v -f $next *required_file_in_tar_file*.dat
tar -x -v -f folder/$f -C C:/Users/x/Documents/folder
tar -x -v -f logfiles.tar.gz log1.txt
tar -x -v -f mytar.tar myfile.txt
tar -x -v -f tar_file.tar file_to_be_extracted tee temp.file
tar -x -v -f tarfile -C target paths...
tar -x -v -f tarfile paths... -C target
tar -x -v -f tarname.tar --strip-components 2
tar -x -v -f tarname.tar --strip-components n
tar -x -v -f test.tar -C anotherDirectory/ testfile1
tar -x -v -f xyz.tar grep \.tar$ xargs -n 1 tar -x -v -f
tar -x -v -z -f /path/to/tarfile --exclude file dont want to extract
tar -x -v -z -f archive.tar.gx -C archive_dir
tar -x -z -f /tmp/${MYSTR}world.tar.gz
tar -x -z -f archive.tar.gz -C /destination
tar -x -z -f file.tar.gz
tar -x -z -f foo.tar.gz blah.txt
tar -x -z -f mytar.tgz --strip-components 1
tar -x -z -v -f ${file} rm ${file}
tar -x -z -v -f 4.56_release.tar.gz
tar -x -z -v -f bash-completion-20060301.tar.gz
tar -x -z -v -f file.tar.gz xargs -I {} -d -\ -n myscript {}
tar -z -c -f ${db}-$(date +%m-%d-%y).sql.tar.gz ${db}-$(date +%m-%d-%y).sql date +%m-%d-%y date +%m-%d-%y
tar -z -c -f c.tar.gz -C a/b -c
tar -z -c -f data_${machine}.tar.gz /tmp/data echo DONE
tar -z -c -f remote_test.tar.gz --exclude tsung.dump mydir/*
tar -z -c -f subset.tar.gz dir1
tar -z -c -v -f $(date +%y-%m-%d).tar code date +%y-%m-%d
tar -z -c -v -f $(date +'foo_backup_%Y-%m-%d_%T.tgz') foo/ date +foo_backup_%Y-%m-%d_%T.tgz
tar -z -c -v -f -W ${DATADIR}daily_data_files/LeveL_EOD_VOL_${1}.tar.gz -C ${DATADIR}temp/ LeveL_EOD_VOL_*_${1}.csv
tar -z -c -v -f /x/y/z/ParentFolder.tar.gz -C /x/y/z ParentFolder
tar -z -c -v -f archive-name.tar.gz directory-name
tar -z -c -v -f compressFileName folderToCompress
tar -z -c -v -f data_${machine}.tar.gz /tmp/data
tar -z -c -v -f data_THE_MACHINE.tar.gz /tmp/data
tar -z -c -v -f filename.tgz {filenames}
tar -z -c -v -f foo_backup_$(date '+%Y-%m-%d_%T').tgz foo/ date +%Y-%m-%d_%T
tar -z -c -v -f mywebsite website backup $(date '+%Y-%m-%d %T').tgz public_html date +%Y-%m-%d %T
tar -z -c -v -f tmp/weekly/${DAY_OF_WEEK}_files.tar.gz $SOURCE
tar -z -c -v -f updateZip.tar.gz trunk/*
tar -z -c -v -f wp-content.tar.gz ./wp-content
tar -z -x -f huge.tar.gz dir1
tar -z -x -f my-dir.tar.gz --transform s/my-dir/your-dir/
tar -z -x -v -f genscanlinux.tar
tar -z -x -v -f mysql-connector-java-5.1.29.tar.gz mysql-connector-java-5.1.29-bin.jar -O
tar -z -x -v -f mysql-connector-java-5.1.29.tar.gz mysql-connector-java-5.1.29/mysql-connector-java-5.1.29-bin.jar
tar -z -x -v -f yourfile.tar.gz
tar ... -c -p -z -f /mnt/shares/flexshares/backup/Server1_HDD/backup-HDD-`date +%Y-%m-%d-%H-%M`.tar.gz ... date +%Y-%m-%d-%H-%M
tar cpzf $File --exclude Downloads $Folder
tar xfp archive.tar
tar xpvf /path/to/my_archive.tar.xz -C /path/to/extract
tar xvfJ filename.tar.xz
tar xz gpg
tar zvPcf /home/test/backups/backup.tar.gz /home/test/backups/../data/
tar: xz: Cannot exec: No such file or directory
tarsnap --list-archives sed -n /2014-06-09/s/^/-f /p xargs tarsnap -d
taskkill /F /IM MyApp.vshost.exe exit /B 0
taskkill /F /IM MyApp.vshost.exe exit /B 0
taskkill /F /IM cmd.exe /FI PID ne %pIdNotToKill% /FI username eq compUser
taskkill /F /im chrome.exe
taskkill /FI IMAGENAME eq iisexpress.exe
taskkill /IM notepad.exe
taskkill /f /fi pid gt 0 /im xdesproc.exe
taskkill /f /im notepad.exe
tasklist
tasklist /FI WINDOWTITLE eq VPN Client /FO CSV FIND /I .exe start alarm.wav
tasklist repl ^(.......................).*(.............)$ $1 $2 m
taskset -p 1 2338
tcl -e puts  leftsquarebrc info patchlevel rightsquarebrc 
tclsh ?-encoding name? ?fileName arg arg ...?
tclsh myscript.tcl $( leftanglebrc  datafilename)
tcp 0 0 0.0.0.0:8080 0.0.0.0:* LISTEN
tcpdump -X -s 0 protochain 50 or 51
tcpdump -X -v -v -n -i eth0 -c 300
tcpdump -X -v -v -n -i eth0 -c 300
tcpdump -i eth0 -s 65535 tshark -T -p -d -m -l
tcpdump -i eth0 -w tempcap
tcpdump -i eth1 -n -c 5 ip awk { print gensub(/(.*)\..*/,"\\1","g",$3), $4, gensub(/(.*)\..*/,"\\1","g",$5) }
tcpdump -i eth1 -w Pingpacketlist icmp
tcpdump -r Pingpacketlist -n
tcpdump -w $(generate_filename foo tcpdump).lpc generate_filename foo tcpdump
tcpdump ...
tcpreplay -i eth4 SMTP.pcap
tcsh --help
tcsh -b --help
tdbloader --loc DB ... your files ...
tee
tee  leftsquarebrc OPTION rightsquarebrc ...  leftsquarebrc FILE rightsquarebrc ...
tee  rightanglebrc (head -n3  rightanglebrc /dev/null) head -n 3
tee  rightanglebrc (myprogram) myprogram tee -a file.log
tee  rightanglebrc (sed 's/World/Boy/g'|grep Boy) sed s/World/Boy/g grep Boy grep World
tee  rightanglebrc (some_command) some_command
tee  rightanglebrc (some_command) some_command some_other_command
tee *.c
tee -a file.log myprogram tee -a file.log
tee -a typescript sh -i tee -a typescript
tee file2 file3
tee file{1..20}.inc
tee program.in program tee program.out
tee read from standard input and write to standard output and files
tee stderr.log
tell application System Events to keystroke l using command down shift down
tellme do_build && deploy_build
telnet
telnet SERVER daytime
telnet mailhost 25
telnet my_server 1234
telnet smtp.mydomain.com 25
telnet {smtp_domain_name} {port_number}
temp = $file leftsquarebrc $i rightsquarebrc 
temp/a.aa temp/a.ab temp/a.ac
temp1=`db2 -x "select max(id) from work.work_tb"` db2 -x select max(id) from work.work_tb
terminator -e TERM=xterm-256color pine
test
test $(cat abc.txt) cat abc.txt
test $(expr match "$(lsb_release -r)" "Release:11.04") = 13 expr match $(lsb_release -r) Release:11.04 lsb_release -r echo true echo false
test $1 == Debug
test $?BASH_VERSION = 0 exit 1
test $show_name == Smash
test -d $1 echo Argument 1: '$1' is not a directory exit 1
test -d $d mkdir -p $d cp file $d
test -d $i find $i -name *protein.fasta grep -q . echo $i
test -d echo $?
test -d mylogs mkdir mylogs
test -e $newname echo $newname not overwritten mv $file $newname
test -e /var/motd/$LOGNAME cat /var/motd/$LOGNAME
test -e package.json npm install
test -e package.json npm install true
test -f $i echo exists one or more files break
test -f ${file%.hash} rm -- $file
test -f /etc/bashrc source /etc/bashrc
test -f echo $?
test -f foo.txt ls -l
test -f no_such_file echo ggg
test -g -t 34
test -n $(find . -maxdepth 1 -name "$glob" -print -quit) find . -maxdepth 1 -name $glob -print -quit
test -n $(find . -maxdepth 1 -name \"$glob\" -print -quit) find . -maxdepth 1 -name "$glob" -print -quit
test -n $x
test -r $i echo $i is readable for $USER
test -x /usr/bin/gpg-agent echo installed echo not installed
test /dev/fd/63
test 1 date echo else stmt
test 1 google.com
test 1 ls /undef_dummy echo else stmt
test 1 ls /undef_dummy true echo else stmt
test == if
test X$(basename -- "$0") = Xbuild.sh basename -- $0 echo Being sourced
test blah
test file1 -o -t file2 cp file2 file1
test foo -o bar -o baz
test rm -fr /
test somefile.html
test test2 test3 test4
test-commands consequent-commands
test.exe arg1 arg2
test.pl file_to__modify
test.sh
test.sh
test.sh
test.sh 360
test.sh arg1 arg2
test.sh argument1 ${array leftsquarebrc @ rightsquarebrc } argument2
test.sh: line 2: A: command not found
test.th.jpg
test/bin# java -c -p .:../lib/* org.testng.TestNG testng.xml
test1=`echo $f | sed -E 's/^(.*)$/S01E\\1/'` echo $f sed -E s/^(.*)$/S01E\\1/
test: NODE_ENV = test
test: export NODE_ENV = test
testFunct $param1 $param2
testShell.sh -j -v -a -l -u -e -1 -e -v -a -l -u -e -4 -- -D -j -v -a -l -u -e -3 -p -v -a -l -u -e -2
test_command commands
test_expect_success Message run cat $filename_with_spaces
test_sh KLMN
testdiff
testing
text = file.ReadAll
text RSA utf-8
textmate `git status | grep both | awk '{print $4}'` git status grep both awk {print $4}
textsc{this} sentence textsc{is all caps} Except not really textsc{but this is}
texttexttext111111*****3333texttexttext
texttexttext111111*****3333texttexttext
texttexttext111111222223333texttexttext
textutil -c -o -n -v -e -r -t rtf -f -o -n -t HelveticaCY file.txt
textutil -s -t -d -i -n -i -n -p -u -t -e -n -c -o -d -i -n -g UTF-8 -f -o -r -m -a -t html -c -o -n -v -e -r -t rtf -s -t -d -o -u -t pbcopy -P -r -e -f -e -r rtf
tf labels /collection:https://delta:443/tfs/CadsProjects *@$/DetBarShapeEngine/Main/ProjectSource /owner:*
tf merge /baseless /recursive /version:C95654~C95654 branch2 branch1
tf workfold -m -a -p -l -o -g -i -n -: -s -e -c -r -e -t -U -s -e -r -n -a -m -e -, -s -e -c -r -e -t -P -a -s -s -w -o -r -d -s -e -r -v -e -r -: -h -t -t -p -: -/ -/ -s -e -c -r -e -t -H -o -s -t -: -8 -0 -8 -0 -w -o -r -k -s -p -a -c -e -: -K -O -L -O -B -I $/TeamProject/Project /home/me/project
tf workspace -n -e -w Workspace01 -l -o -c -a -t -i -o -n -: -l -o -c -a -l -c -o -l -l -e -c -t -i -o -n -: -h -t -t -p -s -: -/ -/ -t -f -s -. -v -i -s -u -a -l -s -t -u -d -i -o -. -c -o -m -/ -D -e -f -a -u -l -t -C -o -l -l -e -c -t -i -o -n
tfsget https://myvso.visualstudio.com/DefaultCollection $/MyProj/Folder c:Projects login password
tfsget https://myvso.visualstudio.com/DefaultCollection $/MyProj/Folder c:Projects login password silent
thatscript foo bar baz quux
the difference in seconds is: 1.000 seconds
the_cmd
the_command = /bin/php $php_file_name  rightanglebrc  $log_file_name 2 rightanglebrc &1
the_command ARG1
the_command orig_file mv /usr/tmp/tmp$$ orig_file
thedirectorywherefilezillaresidesfilezilla.exe -c 0/mysitename
theloop
theloop tee /dev/tty
then^M
then^M: command not found
this is !!! blah blah
this is a test.
this is his pig
this is section 3
this is the 2nd
this that other
this-
thisCmd
this_command_ends_hh command not found
three four
tidy -x -m -l -i -q somefile.xml
time1 is 1 time2 is 4 average is 2
time1 is 1.003 time2 is 4.003 average is 2.503
time: 22:45:47, mac: 00:00:00:00:00:00, ip: 192.168.0.1
timeout $x ./my_script
timeout -s -H -U -P 10m command
timeout -t time  leftsquarebrc -s signal rightsquarebrc  cmd  leftsquarebrc args ... rightsquarebrc 
timeout 1 feh $output$ext
timeout 10 ls ${HOME}
timeout 10 ping www.goooooogle.com
timeout 10 wget -v -t 2
timeout 100 ./myprocess.py
timeout 1m your-script arg1...
timeout 2s $@
timeout 3 bash -c ls | sleep 10
timeout 3 tail -f logfile.log grep -q --line-buffered something
timeout 30 nfcapd -z -w -t 30 -p 2055 -l /home/shane/Documents/nfdump
timeout 5 sudo kill -9 $chromium-browser_pid
times
title
tmp
tmp-scp.sh Screen shot 2010-02-18 at 9.38.35 AM.png
tmpfile
tms96-fnl.go
tms96-fnl.go  leftanglebrc ./${inpdir}/inp${j}0${i}.d rightanglebrc  ./${inpdir}_out/out${j}0${i}
tmux -2 new-session -s name another_script.sh $1
tmux kill-session -t myname
tmux new -s matlab matlab -nodesktop -nojvm
tmux new -s session_name
tmux send-keys -t work:1 pwd c-m ls -l -a -t -r c-m
tmux send-keys -t work:1 pwd c-m ls -latr c-m
tmux send-keys -t work:1 pwd c-m ls -latr c-m
tmux set -g mode-mouse on
tmux set remain-on-exit on
tmux set-environment -g -u RBENV_VERSION
tmux set-environment -u RBENV_VERSION
tmux show-environment -g grep RBENV
tmux show-environment grep RBENV
to kill a mockingbird 1960 0001
to kill a mockingbird to.kill.a.mockingbird.V1960.0001 to.kill.a.mockingbird.V1960.0001
to_delete foo bar baz
tok = tokLine
tokens=2 delims=(%%
tomcat7 Running Monitored 3025 18d 2h 30m 30m 3.6% 0.0%
top
top -b -d 1
top -b -d 1 awk /load average/ {n=10} {if (n--  rightanglebrc  0) {print}}
top -b -d 1 grep --line-buffered java
top -b -n -2 awk -F -, /Cpu/{if(p==0){p=1}else{split($5,a,"%");print a leftsquarebrc 1 rightsquarebrc }}
top -b -n 1
top -b -n 1 -u abc awk NR rightanglebrc 7 { sum += $9; } END { print sum; }
top -b -n 1 awk NR leftanglebrc =8 || $2~/^(root|myUserName)$/ {next} {print $1}
top -b -n 1 grep ^ * leftsquarebrc 0-9 rightsquarebrc  head -n $k
top -b -n 1 tail -n +8 head -n 1
top -b -n 5 -d -. -2 awk /Cpu/ { if (++cnt==3) print $2 }
top -b awk /db2sysc|java/ {print systime(), $0}
top -b grep Cpu(s)
top -c
top -n 1 -b -c awk -v -O -F -S -= -t NR rightanglebrc 6 && NR leftanglebrc 18 {s=""; for (i=12;i leftanglebrc =NF;++i) s=s FS $i; print $1,$2,$9,$10,$11,s}
top -n 1 grep idle awk { print $9 }
top -p $(pidof berkut) pidof berkut
top -p $1 -n 1
top -p 310-b -n 2 -d 1 grep -w 310 awk {printf "%s,%s,%s,%s\n",$1,$12,$9,$10}
top grep --line-buffered chromium
top stdbuf -o -L grep chromium
totalip
touch $LOGAP
touch $NAME.txt chmod 700 $NAME.txt mv $NAME.txt /etc/openvpn/ccd echo -n $X $Y
touch $NAME.txt chmod 700 $NAME.txt mv $NAME.txt /etc/openvpn/ccd echo -n $X $Y
touch $basedirectory$FEATURE_EXT.$SENT_EXT
touch $location
touch $m'i;x&e"d u(pnmulti)nlines'nand015ca&rr015re;t
touch $x open $x
touch '*.sh'
touch --date ${date1 leftsquarebrc * rightsquarebrc } /tmp/newerthan
touch -m -d `grep ' leftanglebrc li rightanglebrc  leftanglebrc em rightanglebrc Date' $(printf 'msg%05d.html' $i) | sed -e 's# leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc ##g' | cut -d' ' -f2-7` $(printf 'msg%05d.html' $i) grep  leftanglebrc li rightanglebrc  leftanglebrc em rightanglebrc Date $(printf 'msg%05d.html' $i) printf msg%05d.html $i sed -e s# leftanglebrc  leftsquarebrc ^ rightanglebrc  rightsquarebrc * rightanglebrc ##g cut -d -  -f -2 -- -7 printf msg%05d.html $i
touch -m 201111301200.00 $log_dir/last.check
touch -r A B
touch -t 200001010000 $i
touch -t 200001010000 /home/virt/*
touch -t `echo $f | cut -f1 -d _` $f echo $f cut -f 1 -d _
touch .git/objects/pack-fe017c0e9ea12841cd29458df7bd4421c2b12458.keep
touch .httName
touch /asdf/fdasfds/fdasfdas echo Couldn't touch.
touch /etc/profile.d/rvm.sh
touch /home/p1/pop.txt
touch /home/spatel/alpha
touch /tmp/file_found
touch /var/www/wsgi.py
touch File{1..99}
touch a b c
touch ax bx cx
touch file exit
touch filename_`/bin/date +%Y%m%d%H%M%S`.txt /bin/date +%Y%m%d%H%M%S
touch file{01..12}.txt
touch file{1..12}.txt
touch file{1..3}.txt
touch folder/sub.file.txt
touch new_file chmod --reference old_file new_file
touch online.log
touch path
touch t0
touch {a..z}.txt
touch {{a..z},{A..Z},{0..99}}.txt
touch ~/.build_path
touch ~/.ssh/authorized_keys chmod 600 ~/.ssh/authorized_keys
tput clear
tput cols
tput cols
tput kpp hexdump -C
tput rmcup
tput rmkx
tput smcup
tput smkx
tr   . sed s/\./ /
tr   \n grep -v -w -F -f frequency.txt
tr   \n sort -u
tr   \n sort -u tr \n  
tr   \n sort uniq -u
tr   \t
tr   n mv $i.bak $i
tr   n sort uniq grep -v -F -f dictionary
tr  \t \n\n fgrep -c int
tr  leftsquarebrc  rightsquarebrc -   sed s/^/seq -s' '/ bash
tr  leftsquarebrc :blank: rightsquarebrc  \n
tr  leftsquarebrc :blank: rightsquarebrc  \n
tr  leftsquarebrc :lower: rightsquarebrc   leftsquarebrc :upper: rightsquarebrc 
tr  leftsquarebrc :upper: rightsquarebrc   leftsquarebrc :lower: rightsquarebrc 
tr  leftsquarebrc A-Z rightsquarebrc   leftsquarebrc a-z rightsquarebrc 
tr  leftsquarebrc A-Z rightsquarebrc   leftsquarebrc a-z rightsquarebrc 
tr  leftsquarebrc A-Z rightsquarebrc   leftsquarebrc a-z rightsquarebrc 
tr $ \n split -l 1000
tr % |
tr 'a' 'e'
tr 'a' 'e' yourscriptname
tr ,  
tr , . bc -l
tr , . bc -l xargs printf %g
tr , \n
tr , \n
tr , \n
tr , n FILE sed -n /^f leftsquarebrc 0-9 rightsquarebrc \+=/p sort uniq -c
tr -C -d  leftsquarebrc :print: rightsquarebrc \n\t
tr -C -d 0-9.
tr -c -d  leftsquarebrc :print: rightsquarebrc 
tr -c -d  leftsquarebrc :print: rightsquarebrc  leftsquarebrc :cntrl: rightsquarebrc 
tr -c -d  leftsquarebrc :print: rightsquarebrc \n
tr -c -d  leftsquarebrc :print: rightsquarebrc \n\r
tr -c -d 0-9 head -c 3
tr -c -d \000-\177
tr -c -d \11\12\15\40-\176 nail -s Build completed $towhom
tr -c -d \t wc -c
tr -c -s  leftsquarebrc :alnum: rightsquarebrc  \n
tr -c -s a-zA-Z0-9 \n
tr -d  
tr -d  
tr -d   sed s/../& /g
tr -d  \t\n\r\f
tr -d  leftanglebrc _ rightanglebrc :
tr -d  leftsquarebrc 0-9- rightsquarebrc 
tr -d  leftsquarebrc :alnum: rightsquarebrc  leftsquarebrc :space: rightsquarebrc  wc -c
tr -d  leftsquarebrc :alpha: rightsquarebrc  \n wc -c
tr -d  leftsquarebrc :alpha: rightsquarebrc  leftsquarebrc :space: rightsquarebrc  wc -c
tr -d  leftsquarebrc \000-\177 rightsquarebrc 
tr -d "
tr -d "
tr -d $OPTARG
tr -d $r
tr -d -c  leftsquarebrc  leftsquarebrc :print: rightsquarebrc  rightsquarebrc 
tr -d -c  leftsquarebrc :alnum: rightsquarebrc  ...
tr -d -c  leftsquarebrc :upper: rightsquarebrc 
tr -d -c  leftsquarebrc a-z rightsquarebrc  leftsquarebrc A-Z rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc _- tr -d  rightsquarebrc  leftsquarebrc  fold -w 64 head -n 1
tr -d -c 0-9 head -c 10
tr -d -c A-Za-z0-9 dd bs=$num count=1
tr -d -c A-Za-z0-9_#
tr -d -c a-zA-Z 0-9\n wc -c
tr -d -c character-set wc -c
tr -d /100
tr -d 015032
tr -d ?."!:,(); tr A-Z a-z tr   \n
tr -d \0
tr -d \0 grep Lunch
tr -d \000
tr -d \000
tr -d \000\r
tr -d \012
tr -d \012 grep -P -o  leftanglebrc tr rightanglebrc .*? leftanglebrc /tr rightanglebrc 
tr -d \012 grep -P -o (? leftanglebrc = leftanglebrc tr rightanglebrc ).*?(?= leftanglebrc /tr rightanglebrc )
tr -d \012 grep -o  leftanglebrc tr rightanglebrc  leftsquarebrc ^ leftanglebrc  rightsquarebrc * leftanglebrc /tr rightanglebrc 
tr -d \015
tr -d \015
tr -d \015\012
tr -d \032 your_file.txt
tr -d \200-\377
tr -d \243
tr -d \n
tr -d \n
tr -d \n filename sed -n -e /\ leftsquarebrc  leftsquarebrc ^ rightsquarebrc  rightsquarebrc /s/^ leftsquarebrc ^ leftsquarebrc  rightsquarebrc *\ leftsquarebrc \( leftsquarebrc ^ rightsquarebrc  rightsquarebrc *\) rightsquarebrc .*$/\1/p
tr -d \n sed ...
tr -d \n sed s/XYZ/\nXYZ/g
tr -d \n\t inputfile echo mv temp inputfile
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r
tr -d \r mv manage2.py manage.py
tr -d \r sed s/,\.-$/& /
tr -d \r tr \n  
tr -d \r\n
tr -d \r\n
tr -d \r\n mv temp file
tr -d \x0 sed s/'$'\tEN-GB\t''//g
tr -d ^M
tr -d b echo abcd
tr -d n
tr -d n
tr -d nr
tr -s  
tr -s  
tr -s   \n
tr -s   \n grep -c 1
tr -s   \n grep file wc -l
tr -s  \t \n tr A-Z a-z sed -e s/ leftsquarebrc ^a-z rightsquarebrc //g nl -n ln -w 1 -s  
tr -s  leftsquarebrc  leftsquarebrc :punct: rightsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc  \n
tr -s  leftsquarebrc :blank: rightsquarebrc    cut -d   -f $@
tr -s  leftsquarebrc :space: rightsquarebrc  \n
tr -s \n
tr -s \t
tr -s \t  \n sort uniq -c sort -r -n
tr -s \t sort -t $t -k 2
tr .   sed s/ \( leftsquarebrc ^  rightsquarebrc *\)$/.\1/
tr 001002 xy
tr 0123 ACGT
tr 0123456789 abcdefghij
tr 123456789 012345678
tr : \n
tr : \n
tr :\-_ \t
tr ;   awkscript
tr ; \n
tr ; \n cat -n
tr A B tr C D tr E F tr Z Q
tr A-Z a-z mv tmp $i
tr A-Z a-z tr -s  leftsquarebrc :punct: rightsquarebrc   leftsquarebrc :blank: rightsquarebrc 
tr A-Z a-z tr -s  leftsquarebrc :punct: rightsquarebrc   leftsquarebrc :blank: rightsquarebrc 
tr A-Z a-z tr -s -c A-Za-z \n sort uniq -c sort -n -r awk { print $2 "," $1}
tr A-Za-z a-zA-Z
tr XYZ , tr , 
tr \0 Z
tr \000-\037  
tr \000-\376 \001-\377
tr \040 \n
tr \n 
tr \n  
tr \n  
tr \n  
tr \n  
tr \n   awk { for(i=3; i leftanglebrc =NF; i++) { print $(i-2) " " $(i-1) " " $i }}
tr \n   sed -e s/ leftsquarebrc . rightsquarebrc  \s*/. \n/g
tr \n ,
tr \n ,
tr \n : sed s/:$/\n/
tr \n ;
tr \n @ sed s# leftanglebrc b rightanglebrc \( leftsquarebrc 0-9 rightsquarebrc \+\) leftanglebrc /b rightanglebrc @ leftanglebrc c rightanglebrc \( leftsquarebrc 0-9 rightsquarebrc \+\) leftanglebrc /c rightanglebrc # leftanglebrc b rightanglebrc \2 \1 leftanglebrc /b#g tr @ \n
tr \n @ sed s# leftanglebrc b rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc /b rightanglebrc @ leftanglebrc c rightanglebrc \( leftsquarebrc ^ leftanglebrc  rightsquarebrc *\) leftanglebrc /c rightanglebrc # leftanglebrc b rightanglebrc \2 \1 leftanglebrc /b# tr @ \n
tr \n \0 xargs -0 stat -f -% -m -  -% -N sort -r -n head -n 1
tr \n ~ sed -r s/(.*)\*\*\*.*/\1/g tr ~ \n
tr \r \n
tr \r \n
tr \r \n
tr \t  ;
tr \t ,
tr \t , sort -k -5 -, -5 uniq -f 4 -D -w 16
tr \xE2\x80\xA8  
tr n  
tr n   grep -E -o  leftanglebrc (video|media) rightanglebrc (.+?) leftanglebrc /(video|media) rightanglebrc  sed -E s# leftanglebrc /?(video|media) rightanglebrc ##g
tr n   grep -E -o  leftanglebrc video rightanglebrc (.+?) leftanglebrc /video rightanglebrc  sed -E s| leftanglebrc /?video rightanglebrc ||g
tr | \n grep -P -o clid=\d+(?=.*client_type=0)
trap
trap  CHLD pipeline
trap  EXIT
trap  HUP
trap  PIPE
trap  leftanglebrc function rightanglebrc   leftanglebrc arg_1 rightanglebrc   leftanglebrc arg_2 rightanglebrc  SIGINT
trap  leftanglebrc your_cmd rightanglebrc  DEBUG
trap -p SIGINT
trap /u1/myuser/on_exit_script.sh EXIT
trap COLUMNS=`tput cols` LINES=`tput lines` WINCH
trap OnExit SIGINT SIGTERM
trap backtrace ERR
trap break INT
trap break SIGINT SIGHUP SIGTERM
trap ctrl_c SIGINT
trap do_something ERR
trap echo "$BASH_COMMAND" DEBUG
trap echo "Dont do this" 2
trap echo "Error, $BASH_COMMAND returned with status $?" ERR
trap echo "foobar" DEBUG
trap echo $(date +'%Y-%m-%d %H:%M:%S') $(hostname -s) received ALRM ALRM date +%Y-%m-%d %H:%M:%S hostname -s
trap echo -ne "\033 rightsquarebrc 0;$BASH_COMMAND\007" DEBUG
trap echo Bye 0
trap echo SIGINT; rm -f tempfile; exit -1 EXIT
trap echo SIGINT; rm -f tempfile; exit -1 INT
trap echo hello SIGINT
trap echo hello USR2
trap echo killing childs; pkill -P $$ EXIT
trap echo step=$step  rightanglebrc  log_file EXIT
trap end_synchronize EXIT
trap errfunc $LINENO ERR
trap errfunc ERR
trap exit 128 SIGHUP
trap exit command EXIT
trap exit_function_name EXIT
trap foo bar baz | bip && fred barney ; wilma SIGINT
trap function-name SIGNAL1 SIGNAL2 SIGNAL3 ...
trap fuser -k -n tcp 1234 && exit SIGINT SIGTERM
trap kill $(jobs -p) EXIT
trap kill $(jobs -p) EXIT
trap kill $(jobs -p) EXIT
trap kill ${PIDS leftsquarebrc * rightsquarebrc }; kill -KILL $STUBBORN_PID SIGINT
trap kill -TERM ${PIDS leftsquarebrc * rightsquarebrc } SIGINT
trap kill 0 SIGINT
trap killall background EXIT
trap log 'received ALRM' ALRM
trap logger -p user.debug -t SHELLSCRIPT -- "$BASH_COMMAND" || : DEBUG
trap printf "\nAborting\n"; exit 1 SIGINT
trap printf %s\\n "$BASH_COMMAND"  rightanglebrc &2 DEBUG
trap process $$ exiting INT
trap rm -f $tmpfile 0 1 2 5 15
trap sahandler RTMIN+1
trap touch ~/abc.txt 0
trap { echo "$BASH_COMMAND failed with status code $?"; handle_error; } ERR
trap { echo Exit code $?; exit; } EXIT
trap { kill -SIGKILL $s_pid ; exit 0; } SIGINT
trap { sed (options) file | awk (options); rm file; } SIGINT SIGTERM
tree --help head -n 2
tree -I 3rd*
tree -i -v -L 1 /data/ perl -n -l -E say if /\Acommand- leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc 0-9a-z. rightsquarebrc *-setup\z/
true /bin/echo xxx head -n 1
true cd /
true clear jobs sleep 2
true date --rfc-3339 ns
true date echo $? sleep 1 head -n 1
true date sleep 1 grep :
true echo export pqr
true echo foo
true echo hi
true echo hi
true false echo foo
true false echo something
true false true
true foo
true foo sleep 2
true ls echo $A
true ls echo $A
true sleep 10
true sleep 10000 java -c -p someapp
true sth sleep 2
true true false return 42
truncate -s -$ -c -o -u -n -t $file
truncate -s 0 filename
truncate -s 2KB file
truss /usr/bin/date grep ^time awk -F -= -  {print $2}
tshark ... ./script.pl
tshark-command awk BEGIN {FS=":"};{print "insert into tbl_name (field1, field2, ..., field8) values (" $1 "," $2 "," $3 "," $4 "," $5 "," $6 "," $7 "," $8 ");"}
tsql -H 10.10.10.10 -p 1433 -U user -P pass
ttf2eot
ttf2eot
tty
tty
tty who grep ${TTY#/dev/}
ttywatch commandline... disown
twidge lsrecent -l gawk -F -t {"date -d\""$5"\" +\"%s\""|getline d;print "@"$2 ": " $4 " ("strftime("%Y-%m-%d %T",d)")"}
type %1 repl ^Name: q.*?q;(  leftsquarebrc ^: rightsquarebrc +: q.*?q)* Width: q(.*?)q;.* $2 ax
type -P $(compgen -c | awk '!a leftsquarebrc $0 rightsquarebrc ++') compgen -c awk !a leftsquarebrc $0 rightsquarebrc ++
type -P $(compgen -c | awk '!a leftsquarebrc $0 rightsquarebrc ++') compgen -c awk !a leftsquarebrc $0 rightsquarebrc ++
type -P clang echo $?
type -a -P a=b
type -a groovy
type -a lshw
type -a mv
type -t function_name
type COM{n}
type Doxyfile echo PROJECT_NUMBER=1.0 doxygen.exe
type YourFile.txt
type YourFile.txt more
type e:/babak/git/bin/test.txt
type e:/babak/git/bin/test.txt
type file1 file2
type fortune type cowsay fortune cowsay -W 65
type gpm
type input.txt findstr /vixg:successful.txt
type irb
type mv
type pip
type someprogram do_some_stuff
type stuff.py
type which
type your_nifty_function
typeset +t
typeset -f ssh user@host $(cat);f cat
typeset -f ssh user@host2 $(cat);f cat
typeset -g -U path
typeset -i variable=$(cat filename) cat filename
tzutil /g
tzutil /l.
tzutil /s universal standard time
ufw allow proto tcp from found: to any
uhura -k signature.key yourextension.xpi http://yourupdateurl
ulimit -c unlimited
ulimit -f 102400 wget $url
ulimit -f 204800 wget $url
ulimit -u 20
umask 0701 /path/to/real/mkdir $1 umask 0604
umask u=rwx,g=rwx,o=rwx
umbrella_corp_options $@
umount .... /bin/true
umount /Volumes/Label
unalias aliasname
unalias aliasname
unalias cd
unalias cwdcmd
unalias foo
uname --kernel-name
uname -a
uname -a
uname -m
uname -r cut -d -. -f -1 -- -2
unbuffer -p
unbuffer gcc file.c cat
unbuffer libreoffice --convert-to pdf:writer_pdf_Export *.odt
unbuffer runningscript.sh something_else
uncompress_swf.sh /some/folder/*.swf
unexpand -a -t 4 file
unexpected character after line continuation character
unexport FOOBAR
unfunction zshrc
unifdef -U -S -W -1 -U -S -W -2 -U -S -W -3 -U -S -W -4 -U -S -W -5 -U -S -W -6 -t file1.txt true
uninstall_rpm ClientInfrastructure $(sed -n 's/Previous Version:\(.*\)/\1/p' VersionInfo.properties) sed -n s/Previous Version:\(.*\)/\1/p VersionInfo.properties
uniq --count
uniq --skip-fields 3 input.txt
uniq -c foo.txt
uniq -c intputfile awk {count++;sum+=$1} END{print count,"lines.","Average is:",sum/count}
uniq -c sed -r s/^( * leftsquarebrc ^  rightsquarebrc +) +/\1\t/
uniq -c sort -n -r cut -c 9-
uniq -c sort -n -r sed s/^ * leftsquarebrc 0-9 rightsquarebrc * //
uniq -c sort -n -r sed s/^ * leftsquarebrc 0-9 rightsquarebrc * //
uniq -c sort -n -r sed s/^.\{8\}//
uniq -f 2 input
uniq_dat *.dat
unit-test-command with args :
unix2dos /cygdrive/d/temp.txt
unix2dos d:temp.txt
unix2dos testfile1.txt
unix2dos uuencode target_name mailx -s logs abc.gmail.com
unlink /home/alos/Y2H_images/all$intensity or die $!
unrar v my_archive.rar sed -n /^----/,/^----/{/^----/!p}
unrar x -p -p -a -s -s -w -o -r -d package.rar
unset $(printenv |grep G4 |awk 'BEGIN{FS="=";}{print $1;}') printenv grep G4 awk BEGIN{FS="=";}{print $1;}
unset ${!foo@}
unset -f cd
unset -f my_function
unset -f z
unset A leftsquarebrc 4 rightsquarebrc 
unset FLASK_TUTORIAL_DEBUG
unset GIT_DIR
unset GIT_DIR
unset IFS
unset PARAMETER
unset PROMPT_COMMAND PS1=w rightanglebrc  
unset arr
unset arr leftsquarebrc ${#arr leftsquarebrc @ rightsquarebrc }-1 rightsquarebrc 
unset array leftsquarebrc ${#array leftsquarebrc @ rightsquarebrc }-1 rightsquarebrc 
unset avar leftsquarebrc 12 rightsquarebrc 
unset foo bar baz
unset items leftsquarebrc 2 rightsquarebrc 
unset stats
unset z
unsetenv: 46d170
unsetopt CASE_GLOB
unsetopt correct_all
unsetopt correct_all
unsigned char * shellcode = x31xc0x31xdbx31xc9x31...
unsigned char shellcode leftsquarebrc  rightsquarebrc  = x31xc0x31xdbx31xc9x31...
untarOneFile -j -x -v -f tarArchiveFile.tar.bz file/you/want/to/extract
untarhere /your/destination/directory /your/tar/file.tar
unzip ${file} file1.txt
unzip -d ./a/b/c ./a/b/c/d.zip
unzip -l name of file.zip
unzip -l yourzipfile.zip
unzip -p $i grep -i $LOOK_FOR
unzip -q ${ZIP_FILE} -x  leftsquarebrc !e rightsquarebrc ?* ? leftsquarebrc !ns rightsquarebrc * ?? leftsquarebrc !_ rightsquarebrc *
unzip -q ${ZIP_FILE} -x ${FOLDER_PATH}/documentation/* ${FOLDER_PATH}/library/pdf/help/* ${FOLDER_PATH}/library/pdf/samples/* ${FOLDER_PATH}/lang/ leftsquarebrc !e rightsquarebrc ?* ${FOLDER_PATH}/lang/? leftsquarebrc !ns rightsquarebrc * ${FOLDER_PATH}/lang/?? leftsquarebrc !_ rightsquarebrc *
unzip -q -c myarchive.jar META-INF/MANIFEST.MF
unzip -q /path/to/zipfile $(cat thetxtfile) cat thetxtfile
unzip -t zipfilename
unzip my.jar -d bar
unzip test.zip *.jpg
unzip test.zip a.txt
update-alternatives --query ruby
update-alternatives --set rename /usr/bin/vendor_perl/rename
update-alternatives --set ruby /usr/bin/ruby1.8
update-client tee my.log
update-locale en_US.utf-8
update-rc.d yourscriptname start 2
updatedb
updatedb --localpaths ~/Library
updatedb locate foundation
uptime awk {print $10} cut -f 1 -d -,
uptime awk {print 3} -d, -f 1
uptime awk {printf "%.0f\n",$(NF-1)}
uptime cut -d , -f 1
uptime sed s/.*up \( leftsquarebrc ^, rightsquarebrc *\), .*/\1/
uptime sed s/^.*up\(.*\), * leftsquarebrc 0-9 rightsquarebrc \+ *users.*$/\1/
uptime tr ,   cut -f -6 -- -8 -d - 
uptimeString = `uptime` uptime
url = {$config leftsquarebrc 'USER1' rightsquarebrc  leftsquarebrc 'urlenc' rightsquarebrc }/cid={$config leftsquarebrc 'USER1' rightsquarebrc  leftsquarebrc 'usrcid' rightsquarebrc }&sid={$config leftsquarebrc 'USER1' rightsquarebrc  leftsquarebrc 'usrsid' rightsquarebrc }&mid={$config leftsquarebrc 'USER1' rightsquarebrc  leftsquarebrc 'usrmid' rightsquarebrc }&srt={$config leftsquarebrc 'USER1' rightsquarebrc  leftsquarebrc 'usrsrt' rightsquarebrc }
urxvt -e USERSCRIPT=scriptname zsh
usage echo x ./xml2urlv2.awk
usage: command_name  leftsquarebrc -f variable_list rightsquarebrc 
usage: ping  leftsquarebrc -c count rightsquarebrc   leftsquarebrc -t ttl rightsquarebrc  host
use databasename
use extended regular expressions in the script.
use warnings
user ALL = NOPASSWD: /home/keeboi/Desktop/iptool.sh
user1 user2 user3
userFoo:x:1000:1000:,,,:/home/userFoo:/bin/bash
userFoo:x:1000:1000:,,,:/somewhere/here:/bin/bash
useradd --system --home-dir /var/lib/redis redis true
useradd -G groupname username
useradd -b /home/ -g admin -m -s /bin/bash USERNAME
useradd -b /home/ -g admin -m USERNAME
usermod -s /bin/bash mikey
username ALL = NOPASSWD: /bin/launchctl load -w /System/Library/LaunchDaemons/ssh.plist
username ALL=NOPASSWD: ALL
username uid gid home-directory
users awk {for(i=1;i leftanglebrc =NF;i++) a leftsquarebrc $i rightsquarebrc ++;} END{for (u in a) printf("%s %d\n", u, a leftsquarebrc u rightsquarebrc )}
users egrep -o \b(ab\w*|\w*1)
users grep -o -e \bab\w* -e \b\w*1
users tr   \n grep -e ^ab -e 1$
using System.Linq
utf16-utf8 weirdo grep Lunch
uudecode genscanlinux.tar.uue
uuencode /mnt/STStorage/log.file /mnt/STStorage/log.file mail -s this is my subject line chip@email.com
uuencode /tmp/folder/file-$NOWDATE.csv mailx  leftsquarebrc ... rightsquarebrc 
uuencode output.txt output.txt echo Body of text mailx -s Subject user@domain.com
uuencode surfing.jpeg surfing.jpeg mail sylvia@home.com
uuencode: fopen-ing /tmp/folder/file-01-11-2011.csv: Unknown system error
v( leftsquarebrc 0-9 rightsquarebrc *).( leftsquarebrc 0-9 rightsquarebrc *)-.*-?( leftsquarebrc 0-9 rightsquarebrc *)-(.*)
v( leftsquarebrc 0-9 rightsquarebrc *).( leftsquarebrc 0-9 rightsquarebrc *)-.*-{0,1}( leftsquarebrc 0-9 rightsquarebrc *)-(.*)
v++%2
val = %x leftsquarebrc 
val = %x leftsquarebrc 
val path = myClass.getClass.getProtectionDomain.getCodeSource.getLocation.getPath
validate_args $*
value = $argv leftsquarebrc 1 rightsquarebrc 
value1 value2 value3 value4
value1 value2 value3 value4 label1 value5 label2 value6
var = ${param/A/HowAreYou}
var = BLABLA
var = `ls -l $ENV{ddd}` ls -l $ENV{ddd}
var = value
var number = 5
var outfile = slogan.txt
var1 var2
var1= leftsquarebrc word1 rightsquarebrc  ...
vared -c line
variable $var $val
vbArgs = My.Application.CommandLineArgs
vcbuild.exe PgoProject.vcproj ReleasePGOptimize|x64 /forcelink
vcexpress project.sln /build /Flags...
verbosely list files processed
vi $( !find | grep file5 ) !find grep file5
vi $(cat a.txt) cat a.txt
vi $(find -name testname.c) find -name testname.c
vi $(find . -name "$*") find . -name $*
vi $(find ./ -name build.xml) find ./ -name build.xml
vi +0r header.txt|wq sample.txt
vi +3 -c startinsert ~/j_exec.php
vi -c :1d -c :wq file
vi /some_file/which_is_on_the_remote/machine
vi Edit /root/.cshrc
vi `bundle show activerecord` bundle show activerecord
vi `find ./ -name build.xml` find ./ -name build.xml
vi `ls db/migrate/*.rb | tail -n 1` ls db/migrate/*.rb tail -n 1
vi somefile
vi ~/.bash_profile
vi ~/.my.cnf
vi ~/.vimrc
videorate ! video/x-raw-yuv,framerate=25/1
vim $( find . -name "*.txt" ) find . -name *.txt
vim $( find . -name edit.html.erb ) find . -name edit.html.erb
vim $( find . -name edit.html.erb | perl -pe's/^..//' | perl -pe's/\n$/ /' ) find . -name edit.html.erb perl -p -e -s -/ -^ -. -. -/ -/ perl -p -e -s -/ -n -$ -/ -  -/
vim $(find . -name "*.cpp") find . -name *.cpp
vim $(git status | tee /dev/tty | grep ...) git status tee /dev/tty grep ...
vim $(grep -rIl 'xg_icon-*' *) grep -r -I -l xg_icon-* *
vim $(locate -br ^filename.c$) locate -b -r ^filename.c$
vim $(locate 50local.policy) locate 50local.policy
vim *
vim +0r headerFile|wq mainFile
vim +BundleInstall +qall
vim --remote-send  leftanglebrc C-\ rightanglebrc  leftanglebrc C-n rightanglebrc :Command leftanglebrc CR rightanglebrc 
vim --servername vim
vim -N -u NONE -n -c set nomore -S commands.vim filespec
vim -N -u NONE -n -c set nomore -S commands.vim filespec
vim -N -u NONE -n -c set nomore -S commands.vim filespec
vim -S script.vim file1.txt file2.txt file3.txt file4.txt file5.txt
vim -b outfile
vim -c :retab -c :wq $F
vim -c VimwikiAll2HTML -c q index.wiki
vim -c colorscheme desert
vim -c loading the first file
vim -c normal! @q file
vim -c so % -c q somevimball.vba
vim -c so % | q somevimball.vba
vim -o $(grep -rl string directory) grep -r -l string directory
vim -u /path/to/your/vimrc
vim /usr/some/dir/50local.policy /usr/local/some/dir/50local.policy
vim `locate -br ^filename.c$` locate -b -r ^filename.c$
vim `ls -S | head -1` ls -S head -1
vim file.txt
vim file.txt -c :%s/hello/world/g -c wq
vim filename
vim scp://remoteuser@server.tld//path/to/document
vim scp://secure//home/Julius/fee/fie/fo/fum.txt
vim somefile.srt -c :set bomb -c :set fileencoding=utf-8 -c :wq
vim test.sh
vim ~/.zshrc
vim-cmd vmsvc/getallvms grep -o ^ leftsquarebrc 0-9 rightsquarebrc \+
vimdiff file1 file2
virsh list awk /kvm leftsquarebrc  leftsquarebrc :digit: rightsquarebrc  rightsquarebrc +/ {print $2}
virt-top -b -n 1
virtualenv
virtualenv --python python2.7 my_project
virtualenv --python python3 my_py3_project
visudo
vlc ..
vlc http://www.youtube.com/watch?v=v0faacLn8K4&fmt=18
vmstat 1 2 tail -1 awk {print $11}
vmstat awk (NR==2){for(i=1;i leftanglebrc =NF;i++)if($i=="id"){getline; print $i}}
vmstat awk -v f=in !o{for(x=1;x leftanglebrc =NF;x++)if($x==f){o=1;next}}o{print $x}
vpath %.tex $(dir $(tex)) dir $(tex) tex
vvar2
w awk /\/X/ {print $1}
w awk {print $1} echo $user
wait
wait
wait  leftsquarebrc 42 rightsquarebrc 
wait  leftsquarebrc jobspec or pid ... rightsquarebrc 
wait $(pgrep programName) pgrep programName
wait $pid
wait %1 %2 %3 ...
wait PID commandToRunAfter
wall
watch -- du -h work_backup.tar.gz
watch --color -n 1 echo -e '033 leftsquarebrc 36mHello World033 leftsquarebrc 0m'
watch -n -1 d=`date +"%d/%b/%Y:%T"`;tail -n 20 /opt/lampp/logs/access_log 
watch -n 0.1 wget -q -O -- http://google.com
watch -n 0.2 ps -p $(pgrep -d"," -x snmpd) -o rss= | awk '\''{ i += $1 } END { print i }'\
watch -n 1 mysql -e 'select id from updates order by id desc limit 1' your_db
watch -n 10 ./script.sh
watch -n 120 mysql_query | column -t | align_bottom
watch -n 120 mysql_query | column -t | align_bottom
watch -n 120 mysql_query | column -t | bash -c align_bottom
watch -n 20 mpstat -u 1 -P ALL | awk 'NR==4 {print systime(), $4}'  rightanglebrc  rightanglebrc  stats.txt
watch bash -c "cut -c -$(($COLUMNS-10)) file"
watch bash -c "cut -c -$COLUMNS file"
watch cat file | grep "text"
watch echo "scale=2;$(cat io | grep wchar | awk '"'"'{print $2}'"'"')/(1024^3)" | bc
watch echo =================================;a=`lsof -i :80`;echo $a | awk "{print \$1, \$2, \$3, \$8}"; b=`echo $a | wc -l`; b=$(($b - 1));echo Total SSH Connections: $b;echo =================================
watch ls
watch ps aux | grep guest
watchit /proc/acpi/battery/BAT1/state .5 0 6
wbemcli gi -n -l $C_PATH:$CLASS.DeviceID="$ID"
wbemcli gi -n -l $C_PATH:$CLASS.DeviceID='$ID'
wc -L filename
wc -c
wc -c
wc -c f1.txt awk {print $1}
wc -c f1.txt grep -o  leftsquarebrc 0-9 rightsquarebrc +
wc -c filename
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l
wc -l  leftsquarebrc filenames rightsquarebrc  grep -v  total$ sed s/ leftsquarebrc prefix rightsquarebrc //
wc -l $1/*
wc -l $file cut -d   -f 1
wc -l $filename
wc -l $i awk {print $1}
wc -l *
wc -l *.cpp tail -1 awk { print $1 }
wc -l /path/to/$dir/test awk {sum += $1} END {print sum}
wc -l /tmp/file.txt awk {sum += $1} END {print sum}
wc -l /tmp/parallel_test_ leftsquarebrc 1-5 rightsquarebrc 
wc -l `find . -name *.info` find . -name *.info
wc -l `find . -name *.info` find . -name *.info tail -1
wc -l a b
wc -l a b
wc -l a.txt
wc -l done1
wc -l file awk {print $1}
wc -l fileName awk s=$1-3{print s} head -n $nl fileName
wc -l filename
wc -l filename
wc -l filename
wc -l tr -d \n wc -c
wc -l xargs echo -n
wc -w
wc -w
wc -w FILE
wc -w awk { print $1 }
wc `find -name '*.m'` find -name *.m
wc file.txt read lines words characters filename
web: sh ./install.sh
weblogic_.*
wget $url
wget ${url}${i}
wget --content-disposition http://www.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.25a-linux2.6-x86_64.tar.gz/from/http://cdn.mysql.com/
wget --content-disposition www.barb.co.uk/news/item-subscriber/id/213/index.html
wget --convert-links URL
wget --help less -p --no-glob
wget --no-cookies --no-check-certificate --header Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F http://download.oracle.com/otn-pub/java/jdk/6u38-b05/jdk-6u38-linux-i586.bin
wget --output-document http://pastie.org/pastes/4408130/download xmlstarlet sel -t -m rss/channel/item -v sport -o  Away @  -v opponent -o  at  -v time -n -a
wget --page-requisites
wget --post-data paste_code=printf("Hello..I am Codaddict"); http://pastebin.com/api_public.php
wget --post-data search leftsquarebrc email rightsquarebrc  me@foo.com www.nanniesoncall.com/booking/nanny_view/show
wget --post-file filename.rar -P dir_to_save_files http://somewebsite.com/index.html grep filename cut -d -= -f 2 awk {print$1} wget --post-file filename.rar -O $FILENAME -P dir_to_save_files http://somewebsite.com/index.html
wget --post-file filetoSend URL
wget --recursive --no-verbose --no-host-directories --cut-dirs 3 --user user --password password ftp://site.tld/var/folder
wget --referer http://comicsbook.ru http://comicsbook.ru/upload/%D0%9A%D0%BE%D0%BC%D0%B8%D0%BA%D1%81-Trollface-%D0%9D%D0%B0-%D0%B1%D0%BE%D1%80%D1%82%D1%83-70813.jpg
wget --referer https://anonfiles.com/ https://cdn.anonfiles.com/1394726793646.jpg
wget --save-headers -q -O $@
wget --spider http://mysite.com
wget --timeout 5 --quiet -O http://xx:yy@127.0.0.1:10001/server grep connections awk {print $36}
wget --user-agent Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:12.0) Gecko/20100101 Firefox/12.0
wget -N -r -b -n -p -o wget.log http://hostname.com/
wget -O  leftsquarebrc download directory path rightsquarebrc / leftsquarebrc filename.zip rightsquarebrc  https://github.com/.../ leftsquarebrc myZipFile rightsquarebrc .zip
wget -O -/ -d -e -v -/ -n -u -l -l example.com/search?id={{a..z},{a..z}{a..z},{a..z}{a..z}{a..z}}
wget -O URL command
wget -O destination-filename http://www.example.com
wget -O http://d24w6bsrhbeh9d.cloudfront.net/photo/4498158_700b_v1.jpg convert test.png
wget -O http://d24w6bsrhbeh9d.cloudfront.net/photo/4498158_700b_v1.jpg convert test.png s3cmd put --acl-public --guess-mime-type test.png s3://example.com/images/test.png
wget -O http://www.example.com
wget -O http://www.example.com grep type=.?text/javascript.?
wget -O http://your_server_url:8080/manager/reload?path=/your_app_context
wget -O output.txt http://.... extremely long URL 
wget -O pi.dk/3 bash
wget -O pi.dk/3 bash
wget -O pi.dk/3 sh
wget -O test.html $cURL
wget -O url ruby
wget -O url ruby -r yaml -e YAML.load(STDIN).each { |a, b| `ln -s "#{a}" "#{b}" ` }
wget -O url sh
wget -O wget.tmp http://mysite.com
wget -S -O export_classement.html http://pro.allocine.fr/film/export_classement.html?typeaffichage=2&lsttype=1001&lsttypeperiode=3002&typedonnees=visites&cfilm=&datefiltre=
wget -U Mozilla/5.0 http://www.idealo.de/preisvergleich/Shop/27039.html
wget -i --force-html yourfile.html
wget -m --user user@domain --password password ftp://ip.of.old.host
wget -m -E -n -H -n -p --cut-dirs 2 http://site/a/b/
wget -n -H --cut-dirs 1 -m --ftp-user username --ftp-password password ftp://ftp.domain.std/public_html
wget -n -H --cut-dirs 4 -r url
wget -n -p -n -d -c -A -. -m -4 -a -r -k -e -r -o -b -o -t -s -= -o -f -f http://runawaypodcast.com/wp-content/uploads/2014/
wget -q -O -- $URL1 grep -i PlayerCount cut -d - rightanglebrc  -f 4 cut -d - leftanglebrc  -f 1 sed -e -s -/ -, -/ -/
wget -q -O -- $URL1 grep -i playercount cut -d - rightanglebrc  -f 5 cut -d - leftanglebrc  -f 1 sed -e -s -/ -, -/ -/
wget -q -O -- http://nodejs.org/download/ grep -o -P -m 1 Current version:  leftanglebrc b rightanglebrc v\K(.*?)(?= leftanglebrc /b rightanglebrc )
wget -q -O -- http://www.rss-specifications.com/rss-podcast.xml grep -o  leftanglebrc enclosure url=" leftsquarebrc ^" rightsquarebrc * grep -o  leftsquarebrc ^" rightsquarebrc *$ xargs wget -c
wget -q -O -- http://youtube.com grep -o -P  leftsquarebrc 0-9, rightsquarebrc +(?=sviews)
wget -q -O -- https://www.example.com/example.zip unzip iconv -f ISO8859-1 -t UTF-8 csv2json
wget -q -O goo.gl/vfYA94 sed -E -n / leftanglebrc strong rightanglebrc ( leftsquarebrc 1-9 rightsquarebrc | leftsquarebrc 12 rightsquarebrc  leftsquarebrc 0-9 rightsquarebrc |30|31)\./,/ leftanglebrc \/blockquote\ rightanglebrc /p
wget -q -O http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=$1
wget -q -O http://myserver/mypath head -1
wget -q -O http://originalurl.com/ sed -n -e s/.*var premium_download_link = '( leftsquarebrc ^' rightsquarebrc *)';.*/1/p
wget -q -O http://thredds.ucar.edu/thredds/catalog/grib/nexrad/composite/unidata/NEXRAD_Unidata_Reflectivity-20140501/files/catalog.html grep  leftanglebrc a href= head -1 sed -e s/.*\(Level3_Composite_N0R_ leftsquarebrc 0-9 rightsquarebrc *_ leftsquarebrc 0-9 rightsquarebrc *.grib2\).*/\1/
wget -q -O http://whatismyip.org/
wget -q -T 60 --retry-connrefused -t 5 --waitretry 60 --user ftp2.company.com|company2013 --password !company2013 -N -P data/parser/company/ ftp://ftp2.company.com/Production/somedata.zip
wget -q -T 60 --retry-connrefused -t 5 --waitretry 60 --user ftp2.company.com|company2013 --password !company2013 -N -P data/parser/company/ ftp://ftp2.company.com/Production/somedata.zip
wget -q -r -l 5 -O http://somesite.com/ grep -E -o b leftsquarebrc a-zA-Z0-9.- rightsquarebrc +@ leftsquarebrc a-zA-Z0-9.- rightsquarebrc +. leftsquarebrc a-zA-Z0-9.- rightsquarebrc +b
wget -q http://192.168.0.1/test -O grep -m 1 Hello
wget -q http://192.168.0.1/test -O grep -m 1 Hello
wget -q http://en.wiktionary.org/wiki/robust -O tr \n   grep -o  leftanglebrc ol rightanglebrc .* leftanglebrc /ol rightanglebrc 
wget -q http://en.wiktionary.org/wiki/robust -q -O ...
wget -q http://www.sitename.com/$i/$j.jpg
wget -r --no-parent --reject index.html* http://mysite.com/configs/.vim/
wget -r --no-parent http://mysite.com/configs/.vim/
wget -r -l 2 --page-requisites http://example.com/your/page.html
wget -r ftp://user:pass@server.com/
wget -v -t 2 --timeout 10
wget ... --post-file stuff stuff stuff
wget ... grep -o -P (? leftanglebrc ='userPreferences':').*(?=' })
wget ... sed -n /'userPreferences':/{s/ leftsquarebrc ^: rightsquarebrc *://;s/}$//p}
wget URL file wget URL file wget URL file
wget `cat index.php | grep -P -o 'http:(\.|-|\/|\w)*\.(gif|jpg|png|bmp)'` cat index.php grep -P -o http:(\.|-|\/|\w)*\.(gif|jpg|png|bmp)
wget centos_64bit_novz.sh -O -- bash -s --LEVEL $LEVELSEC --SERVVRT novz
wget file echo Success
wget ftp://blah:blah@ftp.haha.com/$OUT -O /myFolder/Documents/$OUT
wget http:// leftsquarebrc ip address rightsquarebrc :8000/ leftsquarebrc some big file rightsquarebrc 
wget http://NEXUS/PATH/TO/MyLibrary.dll -P .local_output_directory
wget http://chromium-browser-source.commondatastorage.googleapis.com/chromium.r176602.tgz
wget http://click.si.edu/images/truncatedurl.jpg -O file.jpg scp file.jpg login@server:/home3/etc.../filename.jpg
wget http://commondatastorage.googleapis.com/freebase-public/rdf/freebase-rdf-latest.gz
wget http://demo.gitlab.com/gitlab/gitlab-recipes/repository/archive.zip
wget http://domain.com/reports/downloadreport?roleId=8
wget http://download/url/file curl -O http://download/url/file
wget http://example.com -O grep  leftanglebrc title rightanglebrc  sed s/ leftanglebrc title rightanglebrc ( leftsquarebrc ^ leftanglebrc  rightsquarebrc *).*/1/
wget http://example.com/ -r -n -v -S -R js,css,png,gif,jpg,pdf perl -n -e s|^.*URL:(https?://.*?) .*|\1|; print "$1\n"
wget http://example.com/directory/file{1..200}.txt
wget http://example.dev/index.php?v=var
wget http://gd...sults -O pcregrep -o 1  rightanglebrc ( leftsquarebrc 0-9 rightsquarebrc +) leftanglebrc 
wget http://rubygems.org/downloads/modernizr-2.6.2.gem
wget http://search.twitter.com/search.json?q=hi -O
wget http://search.twitter.com/search.json?q=hi -O hi.json
wget http://sitehere.com/install.sh -v -O install.sh ./install.sh rm -r -f install.sh
wget http://sitehere.com/install.sh -v -O install.sh ./install.sh rm -r -f install.sh
wget http://unfccc.int/resource/docs/convkp/kpeng.pdf -O amit.pdf grep -o -P (d+(.d+)?(?=%))
wget http://unfccc.int/resource/docs/convkp/kpeng.pdf -O amit.pdf tee amit.log grep -o -P (d+(.d+)?(?=%))
wget http://us.archive.ubuntu.com/ubuntu/pool/main/b/bash/bash_4.3-6ubuntu1_i386.deb
wget http://www.data.gv.at/wp-content/uploads/2012/10/OGD-Metadaten_2_1_2012_10.pdf
wget http://www.domain.com/page:$i -q -o /dev/null -O pages/$i touch $i.bad
wget http://www.domain.com/page:$i -q -o /dev/null -O pages/$i touch $i.bad touch $i.ok
wget http://www.domain.com/page:$i -q -o /dev/null -O pages/$i touch $i.ok touch $i.bad
wget http://www.example.com -c --header Range: bytes 0-99
wget http://www.gametracker.com/datafeeds/?server_info&GAMESERVERID=2814889 -O output.xml
wget http://www.myserver.de/index.html
wget http://www.primary.com/file.zip wget http://www.secondary.com/file.zip
wget http://your.host.net/script -O -- sh -s
wget http://{account}.cartodb.com/your/api?call= etc. -q -O --
wget http://{account}.cartodb.com/your/api?call= etc. -q -O -- less
wget http://{account}.cartodb.com/your/api?call= etc. -q -O /dev/null
wget https://github.com/
wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O zsh
wget twitaholic.com/top100/followers/ grep -o @ leftsquarebrc ^ leftanglebrc  rightsquarebrc *
wget your url here -O name_of_file.zip
wget your...url...here
wget.exe http://example.com/file0%%24.html
wget.exe http://localhost/path/to/script.php?pages=test
wget.exe http://www.imdb.com/search/title?genres=action&sort=alpha,asc&start=51&title_type=feature
what is this {} used for?
what world
what world the ...
whatever is in outer brackets + newline.
whatever tee logfile.txt
whatever_your_command awk {printf("%s ", $0)}
when can i meet you
when can i meet you
when-changed *.scss -c ./myscript.sh %f
when: item.custom
when: {{ item.custom }} == True
whence -f daemonName
whenever --update-crontab --set environment=production --load-file config/schedule_client.rb --user ubuntu
whenever sqlerror exit sql.sqlcode
where *.exe
where chcp
where t1.taxon_list = Stramenopiles
whereis python date who
whereis python date who
whereis route
whereis yum.repos.d awk {print $2}
which  leftsquarebrc 
which $C
which -a python
which Rscript
which adb
which awk
which bash
which brew cd ${path%/*}
which clang 2 echo $?
which clang 2 echo $?
which clang echo $?
which clang echo $?
which daemonName
which diff
which edit
which foo
which foo
which hadoop
which java
which java exit 1
which ksh
which mv
which node chmod -R 755 $n/bin/* sudo cp -r $n/{bin,lib,share} /usr/local
which php
which php
which psql
which ruby
which ruby
which ruby
which ruby which rails
which status
which svn
which thing echo installed
which vmpstat mpstat iostat
whiptail --textbox /dev/stdin 40 80 ls -l
whiptail --title I am the title --msgbox Hi there 8 45
whiptail-command
whiptail-command
who -m awk {print $1}
who awk { print $1; } sort -u awk {print $1; u++} END{ print "users: " u}
who awk {print $1} sort uniq -c sort -n
who grep $(whoami) whoami awk {print $NF}
who sed -e /orschiro/! d; /pts/! d; s/^.*\(: leftsquarebrc 0-9. rightsquarebrc \+\).*$/\1/p;d head -n 1
who sed 1d wc -l
who wc -l
whoami
whoami
whoami
whoami awk {print toupper($0)}
whoami perl -e print uc  leftanglebrc  rightanglebrc 
whoami tr  leftsquarebrc :lower: rightsquarebrc   leftsquarebrc :upper: rightsquarebrc 
whoami tr a-z A-Z
whois theonion.com
win2k31 3110 KB C:Program FilesMicrosoft
wine abc.exe
wise_ssh 12345 ssh papp95@bt781.com cp p1 p2
wmctrl -T master$$ -r :ACTIVE: display image.png sleep 0.1 wmctrl -a master$$
wmctrl -l -p
wmctrl -l -p awk -v pid=$PPID $3 == pid {print $1}
wmctrl -l -p awk /Firefox/ { print $1 }
wmic csproduct get uuid
wmic logicaldisk where DeviceID='C:' get FreeSpace
wmic product where name=program name call uninstall
wmic service where name='W3SVC' set startname=NSA FLIGHT COMMANDER
wmic useraccount where name=%username% get sid findstr /b /C:S-1
words
worker.list=,myval
worker.list=myval,test
wp core install --url url --title site-title  leftsquarebrc --admin_name=username rightsquarebrc  --admin_email email --admin_password password
wp_shell
wpa_passphrase $1 $2
wperl -M -W -i -n -3 -2 -M -N -e -t -: -: -P -i -n -g -e $p=Net::Ping- rightanglebrc new('icmp',10000); if ($p- rightanglebrc ping('192.168.1.1')) { Win32::MsgBox('Ping Successful', 1 + MB_OK, 'All Good'); }
wrapper.sh 1243
wsadmin -h -o -s -t serverB.host.com -p -o -r -t serverBRMIPortNumber -c $AdminApp install /path/to/localfile.ear {...options...}
wshShell.Run cmd.exe /C cd C:WINDOWSsystem32 & ( echo Yes|process.exe STOP )
www-data ALL = NOPASSWD: /bin/nc
www-data ALL=NOPASSWD: /path/to/script
wzzip.exe -a -p -r C:DestinationPathDataFiles_20130903.zip @C:SourcePathfileExtensions.txt
wzzip.exe -a -p -r C:DestinationPathDataFiles_20130903.zip C:SourcePath*.dat C:SourcePath*.bat
w{2,}
x
x
x
x
x = ... \s ...
x = ... s ...
x = `"#{@consoleInput.stringValue()}"` #{@consoleInput.stringValue()}
x = `... \\s ...` ... \s ...
x = `... \s ...` ... s ...
x leftsquarebrc line1 rightsquarebrc ++
x x --
x-focus-frame nil
x-terminal-emulator -e ./application_name  leftsquarebrc arguments rightsquarebrc 
x00
x11vnc -s -a -f -e -r -l -o -c -a -l -h -o -s -t -n -o -p -w -o -n -c -e -d -i -s -p -l -a -y :0
xC3xBCx0A
xE3x81x82
xargs --max-lines 1 --arg-file foo.txt your_command
xargs -0
xargs -0 -- mycommand
xargs -0 -I {} -n 1 myWrapper -a -r -g -1 -f -i -l -e -= -{ -} wrapCmd tr \n \0
xargs -0 -n 1 chmod 755 tr \n \0
xargs -0 -n 1 sed -i -e s/SANCHEZ/'"${1:-Tebow}"'/g
xargs -0 chmod 755 tr \n \0
xargs -0 egrep Cache /dev/null
xargs -0 printf %sn sort
xargs -0 python -c
xargs -I % grep -e % myDocument.txt
xargs -I % grep -i feature number %
xargs -I -% -n 1 ssh -p 29418 company.com gerrit review --code-review 2 -- %
xargs -I {} cp -a {} /path/to/backup
xargs -I {} echo RENAME {} $(echo {} | sed 's/staging/development/g') echo {} sed s/staging/development/g
xargs -I {} echo RENAME {} {}
xargs -I {} wget http://jira.example.com/browse/{}
xargs -L 1
xargs -L 1 ./myscript.py
xargs -L 1 ./script.sh
xargs -L 1 echo name is:
xargs -P 4 processFile
xargs -R -1 -I file cat file MyCommand
xargs -a  leftanglebrc ( echo A B C ) bash -c for x in "$@"; do echo $x; read; done echo A B C
xargs -a  leftanglebrc (echo boo hoo) ./fn.sh echo boo hoo
xargs -a  leftanglebrc (find . -name *.html) hunspell -H find . -name *.html
xargs -a  leftanglebrc (ls | head -23) -d \n vim ls head -2 3
xargs -a filename rm -r -f
xargs -a ids.csv -d \n -n 1000 --max-chars 100000 sh -c mysqldump -u root -p db Table --where="id in ($@)"  rightanglebrc  rightanglebrc  dump.sql x
xargs -a ids.csv -d \n -n 20 sh -c mysqldump -u root -p db Table --where="id in ($0 $@)"  rightanglebrc  rightanglebrc  dump.sql
xargs -a ids.csv -d \n -n 20 sh -c mysqldump -u root -p db Table --where="id in ($@)"  rightanglebrc  rightanglebrc  dump.sql x
xargs -a list.txt -d -n rm
xargs -a test1.txt -I -{ -} cp {} ./Folder
xargs -d -n grep -h -i feature number
xargs -d \n -- apt-get install
xargs -d \n -n 1 -- apt-get install
xargs -l --replace cp {} out/
xargs -n 1 -0 echo
xargs -n 1 -I % mkdir -p %
xargs -n 1 -P 16 mycmd
xargs -n 1 ls
xargs -n 1 sed 3~3!d xargs
xargs -n 1 ssh -p 29418 company.com gerrit review --code-review 2 --
xargs -n 2
xargs -n 2 printf ssh %s@%s -p 999n
xargs -r -n 2 temp.exe
xargs cat
xargs cat
xargs cat MyCommand
xargs du -c -h grep total
xargs git show --since $StartDate --before $EndDate --format COMMIT: %H
xargs grep -e ERROR1 -e ERROR2
xargs grep -h -i feature number
xargs grep -h -o -P \b\w+\b sort uniq -c
xargs grep -h -o -P \b\w+\b sort uniq -c
xargs grep your_pattern
xargs grep your_pattern
xargs ls
xargs rm
xargs sed -i -. -b -a -k s/192\.168\.1\.1/192\.168\.1\.0/g
xargs sed -i s/ leftanglebrc \/html rightanglebrc /myline\n leftanglebrc \/html rightanglebrc /g
xargs stat -f %m %N sort -n cut -f -2 --
xattr -d com.apple.quarantine /usr/local/bin/bbcolors
xattr -l /usr/local/bin/bbcolors
xbuild MySolution.sln
xbybz
xception  leftsquarebrc ... rightsquarebrc : For input string: 8080
xcf2png image.xcf -o image.png
xclip -i
xclip -o sed -e s/^/#/g -e $s/$/\n/ sed -i 1r TMP den rm TMP
xclip -o sed s/^./\U&/g xclip -i
xcode-select --print-path
xcode-select --print-path
xcode-select -s -w -i -t -c -h /Applications/Xcode.app/Contents/Developer
xcodebuild -d -r -y -- -r -u -n -s -h -o -w -B -u -i -l -d -S -e -t -t -i -n -g -s
xcodebuild -p -r -o -j -e -c -t iphonesimulator8.0 -c -o -n -f -i -g -u -r -a -t -i -o -n Debug clean build
xcodebuild -s -c -h -e -m -e MyiOSApp build
xcodebuild -t -a -r -g -e -t ${TARGET_NAME} -c -o -n -f -i -g -u -r -a -t -i -o -n Release build PRODUCT_NAME=MyProduct
xcodebuild ARCHS=i386 ONLY_ACTIVE_ARCH=NO -c -o -n -f -i -g -u -r -a -t -i -o -n Debug -w -o -r -k -s -p -a -c -e MyProject.xcworkspace -s -c -h -e -m -a MyLib
xcodebuild test -s -c -h -e -m -e SomeTestScheme -d -e -s -t -i -n -a -t -i -o -n name=iPhone Retina (4-inch)
xcopy  leftsquarebrc source rightsquarebrc   leftsquarebrc destination rightsquarebrc  /E
xcopy //Y C:libglfwglfw.dll
xcopy /e /EXCLUDE:exclude.txt *.exe C:target
xcopy /s/e/v ...folder-bdr1svn" folder-adr1svn"
xcopy C:Users*.jpg G:Backupimages
xcopy DirectorySource DirectoryDestination /s /i /exclude:C:excludes.txt
xcopy source*.* destination*.*
xcrun -s -d -k iphoneos PackageApplication $ARCHIVE_PRODUCTS_PATH/$INSTALL_PATH/$WRAPPER_NAME -o ${HOME}/Desktop/${PRODUCT_NAME}.ipa
xcrun -s -d -k iphoneos PackageApplication -v foobar.app
xcrun -s -d -k iphoneos PackageApplication -v foobar.app/
xdg-open $( locate file.ext ) locate file.ext
xdiff sift dir1 dir2
xdotool getmouselocation --shell
xdotool getmouselocation sed s/.*window:\(.*\)/\1/g
xdotool key alt+F1
xdotool key k
xdotool type WeekDayIs$i
xdotool type hello world
xdotool windowactivate `xdotool search --pid $! ` xdotool search --pid $!
xdpyinfo grep dimens grep -o -P (? leftanglebrc =\s)\d+
xdpyinfo sed s/^ *dimensions: *\( leftsquarebrc 0-9 rightsquarebrc *\).*/\1/;t;d
xflock4
xgrep -x //article leftsquarebrc @id rightsquarebrc  /tmp/foo
xgrep bin/sh * 0 3
xgrep include 0 3 *.c
xhost +jeeger
xidel file.html -e //title cowsay
xidel http://www.cpubenchmark.net/cpu_list.php -e //table leftsquarebrc @id="cputable" rightsquarebrc //tr leftsquarebrc starts-with(td leftsquarebrc 1 rightsquarebrc , "Intel Core i5") rightsquarebrc /concat(td leftsquarebrc 1 rightsquarebrc , " - Score: ", td leftsquarebrc 2 rightsquarebrc , " - Rank: ", td leftsquarebrc 3 rightsquarebrc )
xidel http://www.cpubenchmark.net/cpu_list.php -e //table leftsquarebrc @id="cputable" rightsquarebrc //tr/concat(td leftsquarebrc 1 rightsquarebrc , " - Score: ", td leftsquarebrc 2 rightsquarebrc , " - Rank: ", td leftsquarebrc 3 rightsquarebrc )
xidel http://www.cpubenchmark.net/cpu_list.php -e for $row in //table leftsquarebrc @id="cputable" rightsquarebrc //tr leftsquarebrc starts-with(td leftsquarebrc 1 rightsquarebrc , "Intel Core i5") rightsquarebrc  order by $row/td leftsquarebrc 3 rightsquarebrc  return $row/concat(td leftsquarebrc 1 rightsquarebrc , " - Score: ", td leftsquarebrc 2 rightsquarebrc , " - Rank: ", td leftsquarebrc 3 rightsquarebrc ) --extract-kind xquery
xidel http://www.marksdailyapple.com/forum/memberslist/ -e  leftanglebrc a class="username" rightanglebrc {.} leftanglebrc /a rightanglebrc * -f  leftanglebrc a rel="next" rightanglebrc {.} leftanglebrc /a rightanglebrc 
xidel http://www.marksdailyapple.com/forum/memberslist/ -e a.username -f (//a leftsquarebrc @rel="Next" rightsquarebrc ) leftsquarebrc 1 rightsquarebrc 
xidel http://www.marksdailyapple.com/forum/memberslist/ -e a.username -f div#pagination_top span.prev_next a
xinput list awk -F - leftsquarebrc  -= -  - rightsquarebrc  /TouchPad/{print $5}
xinput list sed /TouchPad/s/^.*id=\( leftsquarebrc 0-9 rightsquarebrc *\).*$/\1/
xl list egrep new_redhat9  tr -s   cut -d   -f 2
xls2csv $f ${f%.xls}.csv
xlsclients grep -e compiz -e xfwm4
xlsx2csv -s 0 ${excel_name}.xlsx
xm
xmessage Do you want to run the backup script? -b -u -t -t -o -n -s yes,no
xml ed --help
xml ed -L -u //book leftsquarebrc 1 rightsquarebrc /title -v Game of Thrones bookstore.xml
xml ed -u //book leftsquarebrc 1 rightsquarebrc /title -v Game of Thrones bookstore.xml
xml sel -N log4j=http://jakarta.apache.org/log4j/ -t -m Config/Application/Logger/log4j:configiguration/ -v @rmiPort -n config.xml
xml_grep job jobs.xml --text_only
xml_pp -s record_c to_compact.xml perl -p -e -s -{ -^ -s -+ -} -{ -}
xmllint --format ${FILE}
xmllint --format --noblanks somefile.xml
xmllint --format --shell file.xml
xmllint --format file.xml
xmllint --noent foobar.xml
xmllint --shell inputfile echo cat /config/*/@*
xmllint --xpath //city data.xml
xmllint --xpath //item/description /tmp/so.xml grep -P -o http:.*
xmllint --xpath //item/description/text() /tmp/so.xml
xmllint --xpath string(//city leftsquarebrc 1 rightsquarebrc /@id) data.xml
xmllint --xpath string(//identity/@nationalnumber) file.xml
xmllint --xpath string(/NoteData/@Note_Nbr) test.xml
xmlns:s=http://purl.oclc.org/dsdl/schematron
xmlns:s=http://www.ascc.net/xml/schematron
xmlstarlet ed -a //p leftsquarebrc n="hello" rightsquarebrc /r/s -t elem -n s -v 2.0 input.xml
xmlstarlet ed -d //div leftsquarebrc @class="hello" rightsquarebrc 
xmlstarlet ed -u //texit leftsquarebrc @info rightsquarebrc  -v author=NewAuthor title=NewTitle
xmlstarlet edit -L -u /scs-shop/price leftsquarebrc @type='double' rightsquarebrc  -v 99.66 file.xml
xmlstarlet ls
xmlstarlet sel --html -t -v //title file.html cowsay
xmlstarlet sel --net --html -t -m //a leftsquarebrc img rightsquarebrc  -v @href -n http://en.wikipedia.org/wiki/Current_members_of_the_United_States_House_of_Representatives
xmlstarlet sel --net --html -t -m //img -v @src -n http://en.wikipedia.org/wiki/Current_members_of_the_United_States_House_of_Representatives
xmlstarlet sel -B -t -m //time_reports/time_report -n -m * -v . -o , input.xml
xmlstarlet sel -T -t -m /imdbdocument/directors/item --if position()  rightanglebrc  1 -o | -b -v . mymovieapi.xml
xmlstarlet sel -T -t -v /imdbdocument/directors/item leftsquarebrc 1 rightsquarebrc  -m /imdbdocument/directors/item leftsquarebrc position() rightanglebrc 1 rightsquarebrc  -o | -v . mymovieapi.xml
xmlstarlet sel -t -c //div leftsquarebrc @class="research" rightsquarebrc  -n -l example.html
xmlstarlet sel -t -c //node
xmlstarlet sel -t -c /parse-plugins/mimeType/plugin leftsquarebrc @id='parse-html' rightsquarebrc  conf/parse-plugins.xml
xmlstarlet sel -t -c /reports/report leftsquarebrc name='b486f8d9' rightsquarebrc 
xmlstarlet sel -t -m /*/* -v concat(name(.)," ")
xmlstarlet sel -t -m //object -v @uid -n -l -v name -n -l test.xml paste
xmlstarlet sel -t -m //objects/@retrieved -v . input.xml
xmlstarlet sel -t -m //table/tr/td leftsquarebrc position()=8 rightsquarebrc  -v ./text() -n
xmlstarlet sel -t -m /NoteData -v @Note_Nbr -n
xmlstarlet sel -t -m test-report/testsuite/test/testcase -v ../@name -v ',' -v @name -n $1
xmlstarlet sel -t -v //AwardTitle -o , -v //AwardAmount -o , -v //AwardID -m //Investigator -o , -v FirstName -o , -v LastName -b -n -l 1419538.xml 1424234.xml
xmlstarlet sel -t -v //epp:phrase leftsquarebrc @id="Plugin/Screen/BatchEdit:remove_title" rightsquarebrc /text() x.xml
xmlstarlet sel -t -v /reports/report leftsquarebrc name='b486f8d9' rightsquarebrc /readableName
xpath $f //bad/objdesc/desc leftsquarebrc $i rightsquarebrc 
xpath -e //BaseTable/@* leftsquarebrc name()="id" or name() = "name" rightsquarebrc  FileName.xml
xpath -q -b  leftsquarebrc  -p ' -i , -s ' -a  rightsquarebrc $'n' -e //City/text()
xpath -q -e //* leftsquarebrc @name='app_name' rightsquarebrc /text() AndroidManifest.xml
xpath -q -e //City/text() inputfile
xpath -q -e //description//text() input.txt
xpath -q -e //product/url file.xml ...
xpath -q -e //span leftsquarebrc @id="yfs_l10_goog" rightsquarebrc  leftsquarebrc 1 rightsquarebrc /text()
xpath ../../AndroidManifest.xml /manifest/@android:versionCode
xpath install.rdf /RDF/Description/em:targetApplication/Description leftsquarebrc em:id="{ec8030f7-c20a-464f-9b0e-13a3a9e97384}" rightsquarebrc 
xpath somefile.xml count(test leftsquarebrc @result="Passed" rightsquarebrc )
xprop -i -d `xwininfo -children -id  leftsquarebrc frame_id rightsquarebrc  | grep -o '^ \+0x leftsquarebrc 0-9a-f rightsquarebrc \+'` xwininfo -c -h -i -l -d -r -e -n -i -d  leftsquarebrc frame_id rightsquarebrc  grep -o ^ \+0x leftsquarebrc 0-9a-f rightsquarebrc \+
xrandr grep * sed -e s/\S*\(*+\)\S*//g -e s/ //g -e s/x.*//
xrandr grep -P -o \d+(?=\s*x.*\*.*)
xrandr sed -e /\*/!d -e s/\S*\(*+\)\S*//g -e s/ //g -e s/x.*//
xterm -e $DIR/src/processors/executive/executive 0
xterm -e ./abc.sh
xterm -e bash --rcfile $HOME/.term-rcfile -i
xterm -e bash -c command; echo Press return to exit; read x
xterm -e command  leftsquarebrc args rightsquarebrc 
xterm -e crazy.sh
xterm -e echo HELLO; bash
xterm -e gdb drizzle
xterm -e ls; bash
xterm -e peerflix  $1  --vlc
xterm -e peerflix "$1" --vlc
xterm -e peerflix $1 --vlc
xterm -e peerflix '$1' --vlc
xterm -e programname argument1 argument2 argument3 ...
xterm -e python something.py
xterm -e script arguments...
xterm -t -i -t -l -e App 1 -e mycommand; mysecondcommand
xterm -x -r -m *hold: true -e sh -c "(time ./Program.exe) 2 rightanglebrc  time.txt & sleep 2"
xterm -x -r -m *hold: true -e sh -c (time ./Program.exe) 2 rightanglebrc  time.txt & sleep 2
xvfb-run -a -s -s -c -r -e -e -n -  -0 -  -6 -4 -0 -x -4 -8 -0 -x -1 -6 wkhtmltopdf --dpi 200 --page-size A4 http://domain.tld/page.html /path/to/output.pdf
xvfb-run myapp
xwininfo -f -r -a -m -e
xxcopy /sgfo /X:*Debug* .Projects*.exe .Utilities
xxd -c 123 -p -s
xxd -c 2 in_file sort -R cut -d -  -f 2 xxd -r -p out_file
xxd -c X+Y -p -s cut -c 2X+1- xxd -r -p
xxd -p -c 2 input_file shuf xxd -p -r output_file
xxd -r -p
xxd -r -p attribfile
xxd -u /usr/bin/xxd grep -H DF /tmp/xxd
xxd filename.csv less
xxd outfile
xxd test_perl.pl
xxx
xxxx awk {sum+=$1} END {print sum}
xy ALL=NOPASSWD: /usr/bin/smbmount
xyz awk {print $2; exit}
y != 0 { print }
yad --skip-taskbar --center --title Print dialog {--image,--window-icon}=/usr/share/icons/Tango/72x72/devices/printer1.png --form --item-separator , --field Pages per sheet:CB 1,2,4,6,8 --field Pages
yardoc --no-output test.rb
yarn.app.mapreduce.am.command-opts
yes
yes
yes   head -7 tr -d \n
yes  leftsquarebrc STRING rightsquarebrc ...
yes -- -t -c -p head -n 2
yes ./MyScript.sh
yes /usr/local/bin/amf install -u $1 -p $2 $localTarget
yes My input sh my_script.sh
yes OchAye /usr/local/bin/amf install -u $1 -p $2 $localTarget
yes Y command-that-asks-for-input
yes Yes ./ittp-update.sh
yes apt-get install  leftsquarebrc YOUR_PACKAGE rightsquarebrc 
yes cat more
yes command
yes command-that-asks-for-input
yes head -1 2 cat -n
yes head -n 1000000
yes rm -r .git
yet_another
you-code-print-java-sql-to-stdout.exe perl -n -E s/" leftsquarebrc ^" rightsquarebrc +"//g;s/"$//;print
your cmd... sed s/.*\. //
your command awk -F -: $2 rightanglebrc =10
your command awk... paste -s -d -,
your grep.... awk -F -/ {$4=$4=="REL"?"AUNT":$4;$4=$4=="SIB"?"BROTHER":$4;print $4}
your sort... awk -F -, k&&k!=$1{print p}{p=$0;k=$1}END{print p}
your-command dolog
your-command-including-redirect
your-script arg1...
your-script-name 1.2.3.4 1.3.4.5 1.4.5.6
your_PC:5902
your_command $(paste -s -d ":" your_file) paste -s -d : your_file
your_command $(sed -e '2,$s/^/ leftanglebrc you_separator rightanglebrc /' your_file | paste -s -d "") sed -e 2,$s/^/ leftanglebrc you_separator rightanglebrc / your_file paste -s -d 
your_command $(sed -n -e '1h;2,$H;${x;s/\n/ leftanglebrc you_separator rightanglebrc /gp}' your_file) sed -n -e 1h;2,$H;${x;s/\n/ leftanglebrc you_separator rightanglebrc /gp} your_file
your_command args etc
your_command awk END{print $NF}
your_command awk {print $2}
your_command awk {print $4}
your_command read HOST NUM host $HOST tr n   echo $NUM
your_command sed s/.*:=//
your_program awk {a leftsquarebrc $1 rightsquarebrc +=$2}END{for(n in a)print n" "a leftsquarebrc n rightsquarebrc } sort -r -k 2
your_program awk {a leftsquarebrc $1 rightsquarebrc +=$2}END{for(name in a)print name " " a leftsquarebrc name rightsquarebrc }
your_program.pl tee logfile.txt
your_script
your_script your...really...long...parameter
your_script.sh -d foo bar baz
your_script.sh awk {sum += $1} END {print sum}
your_script.sh sed s,.*Desktop,, sed s, leftsquarebrc ^/ rightsquarebrc *$,, sed s,/,,g
your_script.sh sed s,.*Desktop,,;s, leftsquarebrc ^/ rightsquarebrc *$,,;s,/,,g
your_target_location = foo/bar bla
yourcmd grep -P -o (? leftanglebrc =RX bytes:)\d+
yourcommand
yourcommand
yourcommand
yourcommand
yourcommand
yourcommand 2 mail -s yourcommand is done yourname@example.com
yourcommand awk -F -: /Name/{n=$2} /Serial/{s=$2} /Firmware/{f=$2} END{printf "%s,%s,%s\n",n,s,f}
yourcommand echo done! mail -s yourcommand is done
yourcommand grep -P -o (? leftanglebrc =id=) leftsquarebrc 0-9 rightsquarebrc 
yourcommand mail -s yourcommand is done yourname@example.com
yourname ALL = NOPASSWD:/path/to/graceful-restart
yourscript  leftanglebrc (getent passwd) getent passwd
yourscript.sh
youtube-dl $line
youtube-dl $line
youtube-dl --download-archive ~/.mydownloads http://youtube.com/CHANNEL
youtube-dl -o %(NAME)s http://www.youtube.com/your_video_or_playlist_url
youtube-dl -o %(stitle)s.%(ext)s http://www.youtube.com/playlist?list=PL2284887FAE36E6D8
youtube2mp3.sh: line 31:  leftsquarebrc : too many arguments
yum -C check-update awk {$1=$1}f;/$^/{f=1} OFS=,
yum -y -q install something
yum -y -q install something grep -v already installed and latest version
yum -y install java-1.7.0-openjdk
yum check-update awk p; /Updated packages/ {p=1}
yum install librsync-devel
yum install libssh2 libssh2-devel
yum install mysql-devel
yum install php-devel
yum install postgresql-devel
yum list updates -q grep -v -c Updated Packages
yum provides */pg_config
yum update $(find-repos-of-install | grep rpmfusion) find-repos-of-install grep rpmfusion
yum whatprovides `which pidof` which pidof
yyyy-mm-ddTHH:MM:SS
zappo log_info foo bar
zbarimg code.png ./in.py
zcat *.gz
zcat *.gz rm -f *.gz
zcat *.txt.gz sort -m gzip
zcat Input.gz awk -F -, {key=$2","substr($3,4,6)","substr($4,4,6)","$10","$8","$6;++a leftsquarebrc key rightsquarebrc ;b leftsquarebrc key rightsquarebrc =b leftsquarebrc key rightsquarebrc +$6}END{for(i in a)print i","a leftsquarebrc i rightsquarebrc ","b leftsquarebrc i rightsquarebrc }
zcat bigfile.gz grep PATTERN_I_NEED
zcat doc.gz split -l 1000 --filter gzip  rightanglebrc  $FILE.gz
zcat hlr*.gz awk {print substr($0,12,15) "," substr($0,32,10)}
zcat hlr*.gz awk {print substr($3,0,15),substr($4,3,10)} FS=** OFS=,
zcat input.gz ./myscript.pl
zcat logfile.log.gz tac
zcat preprocess.sql.gz gpg --batch --quiet --yes --passphrase XXXXXX --decrypt file.sql.gz.gpg zcat mysql -u -$ -D -B -_ -U -S -E -R -p -$ -D -B -_ -P -W -D --host $DB_HOST $DB_ID
zcat small-*.gz split -d -l 2000000 -a 3 large_
zenity --entry --entry-text $NAUTILUS_SCRIPT_SELECTED_FILE_PATHS
zenity --entry --text $ret
zenity --file-selection --file-filter *.ogg *.wav *.aac
zenity --list --column Name --column Age Alice 25 Bob 40 Carol 37 ...
zenity --list --text Choose action --column  --hide-header opt1 opt2 opt3
zenity --question --text Continue? echo Continuing... echo Stopping...
zgrep $line2 $(find . -maxdepth 1 -iname '*.gz') find . -maxdepth 1 -iname *.gz
zgrep -R --include *.gz -H pattern match .
zgrep -c compinit /usr/share/man/man leftsquarebrc 1-9 rightsquarebrc /zsh*
zgrep -c compinit /usr/share/man/man1/zsh*
zgrep -n -P ^d{2,}$ zipzip.gz
zgrep -n ^ leftsquarebrc 0-9 rightsquarebrc {2,}$ zipzip.gz
zgrep PATTERN_I_NEED bigfile.gz
zip $dir/modificado/modificado.zip $dir/modificado/*
zip $dir/modificado/modificado.zip $dir/modificado/* -x $dir/modificado/modificado.zip
zip $i.zip $i
zip -r $dir/modificado/modificado.zip $dir/modificado
zip -r ${i%/}.zip $i
zip -r BE.zip B/ E/
zip -r backup.zip /home/you/pics/
zip -r filename.zip foldername
zip -r foo foo.1.7.3.zip
zip -r updateZip trunk/*
zip -r zipfile * -x dir1/* dir2/* dir3/*
zip -r ~/export/${studyinstanceuids leftsquarebrc @ rightsquarebrc }/20140620_${studyinstanceuids leftsquarebrc @ rightsquarebrc }.zip .
zip -t $ZIPFILE
zip -u -q ${path}.zip ${path}
zip -u bigzip.zip file/to/update1 file/to/update2 ...
zip archivename.zip ${@:3}
zip file.zip file.csv file.pdf file.txt
zip myArchiveName *.{prj,shp,shx}
zipit.exe ZipArchive.zip c:datafolder1
zle -a -l grep -q history-incremental-pattern-search-backward
zle beginning-of-line zle end-of-line
zmap -w ip.txt ...
zmv (*)/*.(*) $1/$1.$2
zrail generate controller
zsh -Y
zsh -c autoload zmv && $0 $@ zmv -f -p git -o mv -f (*).JPG $1 x.jpg
zsh foo.zsh
zsh: command not found: shopt
zstyle :completion:* group-name 
zstyle :completion:* insert-tab false
zstyle :completion:* matcher-list l:|=* r:|=*
zstyle :completion:* matcher-list m:{a-z}={A-Z}
zstyle :completion:* special-dirs true
zstyle :completion:*:*:git:* commands base
zstyle :completion:*:*:kill:* list-colors =(#b) #( leftsquarebrc 0-9 rightsquarebrc #)*( * leftsquarebrc a-z rightsquarebrc )*=34=31=33
zstyle :completion:*:aliases list-colors =*=2;38;5;128
zstyle :completion:*:builtins list-colors =*=1;38;5;142
zstyle :completion:*:commands list-colors =*=1;31
zstyle :completion:*:options list-colors =^(-- *)=34
zstyle :completion:*:parameters list-colors =*=32
zypper --no-refresh lu --best-effort grep -c v |
zypper lr grep -P ^d cut -d -| -f 1 xargs sudo zypper rr
{ if ($10 == "'"$a"'") print $0 }
{ if ($10 == '"$a"') print $0 }
{ leftsquarebrc variableName rightsquarebrc : leftsquarebrc startIndex rightsquarebrc : leftsquarebrc length rightsquarebrc }
{!#}
{!1}
{!VAR}
{!color}
{!dir_no}
{!i}
{!varname}
{!var}
{"UserData": "L3Nydi91c2VyLWRhdGEuc2g=","InstanceType": "m1.small"}
{# leftsquarebrc variableName rightsquarebrc }
{#FILES leftsquarebrc @ rightsquarebrc }
{#input}
{#myvar}
{#query leftsquarebrc * rightsquarebrc }
{#servers leftsquarebrc @ rightsquarebrc }
{#sourceFile}-4}
{#str} 20}
{#x}/4
{% endblock %}
{% for post in site.categories.CATEGORY_NAME %}
{. leftsquarebrc !. rightsquarebrc *,*}
{/bin/csh, -c -f -, echo hello}
{0%/*}
{1%*.cpp}
{1%.zip}
{1%/*}
{1%/}
{1,2}
{1..N} {N+2..P}
{1//./_}
{11: 9.7756, 10: 9.791699999999999, 12: 9.7925}
{1:-/tmp}
{1:-80}
{1:-defaultvalue}
{1:0:2}
{1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10} ${11} ${12}
{1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} ${9} ${10} ${11} ${12}
{1}drop /
{=recurse:--maxdepth 1}
{A%%_*}
{APP}_main
{AWK} !/^ leftsquarebrc -  leftanglebrc  rightsquarebrc / && !/^$/ {printf "%s,,N,N,N,,,,\n", $1} ~/ozserver.txt
{AWK} /^ leftsquarebrc ^-  leftanglebrc  rightsquarebrc / {printf "%s,,N,N,N,,,,\n", $1} ~/ozserver.txt
{Allowed,20863962}
{BASH_REMATCH leftsquarebrc 1 rightsquarebrc }
{BDOM leftsquarebrc * rightsquarebrc } mday=${MDAY leftsquarebrc * rightsquarebrc } ${PARTNER_FP}
{BUILD_TOOL_CC} optout ./configure ${ZLIB_CONFIGURE_OPT} --prefix ${CURR_DIR}/${INSTALL_DIR}
{COLORNUM}m
{COMP_WORDBREAKS//:}
{DATE}_secondpart_postfix.bin
{DAT}
{FILE##*/}
{FILENAME%#*}
{FILE_NAME// / -o -n -a -m -e -}
{FILE}
{GIT_COMMIT:0:8}
{G_DEST_FILENAME}
{HOME}/.rvm/scripts/rvm
{HOSTNAME%%.*}
{IFS}http://www.google.com
{INSTALL_CMD} ${INSTALL_OPT leftsquarebrc $@ rightsquarebrc } myPackage.rpm
{JAVA_HOME%/bin/java}
{JAVA_HOME}/bin/java -j -a -r umar.jar
{MSG//'/\'}
{MY_ARRAY leftsquarebrc @ rightsquarebrc }
{MY_DATA_VER-1}
{MY_DATA_VER:-1}
{MY_VAR}/my_script.sh
{OLD_NAME// /_}
{ORACLE_HOME}/j2ee/oacore/config/java2.policy
{PATH:+:}/path/to/bin
{PATH}
{PATH}
{PATH}:/usr/local/folder1
{PATH}:/usr/local/mysql/bin
{PATH}BAR
{PAXPREFIX} ls -1 tr  leftsquarebrc a-z rightsquarebrc   leftsquarebrc A-Z rightsquarebrc 
{PIPESTATUS leftsquarebrc 0 rightsquarebrc }
{PWD##*/}
{QUERY_STRING##*=}
{RESULT}
{SED} -i s%-i lo.*%&nn#Trusted Trafficn-A INPUT -s 10.153.156.0/25,10.153.174.160/27 -d ${MGTIP} -m state --state NEW -j ACCEPTnn#Remote Accessn-A INPUT -s 10.120.80.0/21,10.152.80.0/21,10.153.193.0/24,172.18.1.0/24,${MGTNET}/${NUMBITS} -d ${MGTIP} -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPTnn#Backupsn-A INPUT -s 10.153.147.192/26 -d ${BKPIP} -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPTnn% ${IPTABLES}
{SOMETHING=value}
{TODAY}*.csv
{TOOL} ${OPT1} ${file} -o ${OUTS}${file} ${OPT2}
{URL2// /%20} --header Content-Type:Application/xml
{VARIABLE:-default}
{VARIABLE:=default}
{VAR}
{VIRTUAL_ENV:17} cd ~/projects/django-projects/$dir
{WHITE} rightanglebrc 
{WORDS// // /}/"
{a% }
{a%% leftsquarebrc ^0-9 rightsquarebrc *}
{a// leftsquarebrc ^0-9 rightsquarebrc *}
{admin_path%/*}
{arrIN leftsquarebrc 6 rightsquarebrc #*:}
{b#a=}
{b-`pwd`} pwd
{b_exec} -n -o -j -v -m ...
{backup_text% leftsquarebrc  leftsquarebrc :blank: rightsquarebrc  rightsquarebrc *}M
{data: leftsquarebrc {{AMQQ}:DLQ_CPP_LTEST},{{AMQQ}:PCA},{{AMQQ}:LTEST_H},{{AMQQ}:ActiveMQ.DLQ},{{AMQQ}:LTEST},{{AMQQ}:DLQ_CPP_NMP_STUDY} rightsquarebrc }
{dataset%.*}
{date}
{date}.tar.gz
{dir##*/}
{dirlist leftsquarebrc * rightsquarebrc }
{downloadFileName%%.*}
{email%%@*}
{emxconfig, {ets,  leftsquarebrc {keypos, 2} rightsquarebrc }},
{exmple// ? / }
{f%%.*}
{f%%.mp4}
{f%.*}
{f// /_}
{f// leftsquarebrc ^0-9 rightsquarebrc /}
{f// leftsquarebrc ^0-9 rightsquarebrc /}
{f///}
{f:0:4}
{file##*.}
{file##*.}
{file##*/}
{file%% leftsquarebrc ^0-9 rightsquarebrc *.jpg}.jpg
{file%.*}
{file%/*}
{file/_*_/_20130215_}
{filename##*/}
{filepath}_newstap.sh
{finalt%%
{foo: -1 -}
{foo:4}
{f}bosons_13window_
{i#input}
{i%.zip} mv $j ${i%%_*}.${j##*.}
{i_}*.txt
{instdir}final
{ip:141.20.1.33,country_code:DE,country_name:Germany,region_code:16,region_name:Berlin,city:Berlin,zipcode:,latitude:52.5167,longitude:13.4,metro_code:,areacode:}
{i}
{i}
{i}_*.txt
{jobcounter}+1
{kB}/s
{key} echo ${!n}
{latex}newstring
{line%.*}
{line:0:1}
{line:0:21}
{line:22:26}
{line:3:23}
{list}/admin.txt
{matlab_exec} -n -o -j -v -m ...
{max-size, 0, POPT_ARG_STRING, max_size_arg, OPT_MAX_SIZE, 0, 0 },
{month#0}
{my_variable#*_*_}%%_*}
{my_variable#*_*_}%_*_*}
{nameIndex}p
{nameIndex}q
{oldip//\/}
{parameter/pattern/string}
{parameter:-word}
{parameter:-word}
{parameter:-word} Use Default Values. If parameter is unset or null, the expansion of word is substituted. Otherwise, the value of parameter is substituted.
{parameter:=word}
{parameter:? leftsquarebrc word rightsquarebrc }
{parameter:?word}
{path##*/}
{path#*:}
{print $0,$4,$7,$11,$16,$19 }
{print $1,$5,$8,$12,$17,$20 }
{print $1}
{print myarr leftsquarebrc range-one rightsquarebrc }
{printf "-dFirstPage=%s -dLastPage=%s\n", $1, $2?$2:$1}
{printf %st%sn, $0, a leftsquarebrc $3 rightsquarebrc }
{print}
{pwned: you' & kill world;}
{roi%_*}
{script:#!/bin/bashnrm -rf *n}
{server_password}@@@{server}:/tmp
{site}_log
{size%.}
{some.property}
{some_other_variable//replaceEachOfThese/withThis}
{sorted leftsquarebrc RANDOM % $n rightsquarebrc }
{sourceFile:0:7}
{src%/*}
{startup_script} ${param1} ${param2} ${paramN}
{str%%:*}
{string##substring}
{string##substring}
{string//pattern/substitution}
{string: -3 -}
{string:position:length}
{temp}
{text#*=}
{time:1332052321, in:1.24, out:2.62}
{u rightsquarebrc } ${itemdim leftsquarebrc ${i} rightsquarebrc } ${tagdim leftsquarebrc ${t} rightsquarebrc } rightsquarebrc 
{u} rightsquarebrc } ${itemdim leftsquarebrc ${i} rightsquarebrc } ${tagdim leftsquarebrc ${t} rightsquarebrc } rightsquarebrc 
{v//p/r}
{value/ leftsquarebrc eE rightsquarebrc +*/*10^}
{var#* leftsquarebrc 0-9 rightsquarebrc  leftsquarebrc a-z rightsquarebrc }
{var#*=}
{var+val}
{var// leftsquarebrc  leftsquarebrc :space: rightsquarebrc  rightsquarebrc }
{var// leftsquarebrc ^ leftsquarebrc :ascii: rightsquarebrc  rightsquarebrc /}
{var1/1/2}
{var1/1/2}
{var:-10}
{var:-val}
{variable//pattern/replacement}
{website////\/}
{x%%.*}
{{/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin}:/Users/pavbond007/Documents/Mongo/mongodb-osx-x86_64-2.2.3/bin}:/Users/pavbond007/Documents/Mongo/mongodb-osx-x86_64-2.2.3/bin
| read domain database
|========        |r
|=========       |r
~ adb shell dumpsys battery
~ truss -e -a -f -o  rightanglebrc (some command) another command some command
~ truss -e -a -f /usr/bin/perl -e print "Test\n"; sleep 5 dd bs=1 wc -l
~ ~/.bashrc
~/.R/Makevars
~/.bashrc
~/.pythonbrew/pythons/Python-2.5/bin/python
~/.rvm/bin/rvm 2.1 do bash script.sh
~/.scripts/prompt.sh $FLAG
~/.ssh/rc
~/.zsh/say_hello.zsh
~/Desktop/B/uploads/2013/08/2013-08-03-image_name.png
~/Desktop/myscript
~/\.conky/ leftsquarebrc A-Z-a-z rightsquarebrc */\.conkyrc
~/\.conky/ leftsquarebrc ^  rightsquarebrc */\.conkyrc
~/bin/find /non-existent/directory -n -a -m -e *.plist -p -r -i -n -t
~/bin/foo.bash
~/bin/svnx wc . ~/bin/svnx log .
~/busybox/awk BEGIN { string="3D"; pre="0x"; hex=pre string; printf "%c", hex+0}
~/ngrok -a -u -t -h -t -o -k -e -n bbtw942UevV!Ap94JzFz 80
~/ngrok -a -u -t -h -t -o -k -e -n bbtw942UevV!Ap94JzFz 80
~/nvm/nvm.sh
~/scripts/tar.sh ~/Backup/backup_file_name_`date +"%Y-%m-%d"`_a.tar.gz directory_to_backup/ date +%Y-%m-%d
~/test.sh mailx -s -" -C -o -o -l title" $my_email
