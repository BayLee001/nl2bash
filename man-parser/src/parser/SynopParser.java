/* SynopParser.java */
/* Generated By:JavaCC: Do not edit this line. SynopParser.java */
package parser;

import cmd.*;

import java.util.List;
import java.util.Optional;
import java.util.ArrayList;

public class SynopParser implements SynopParserConstants {

    public static void main(String[] args) throws ParseException {
        String testExample = "-a";
        String testExample2 = "[-a] b --config[=id] --b";
        Cmd.CmdOp tl = new SynopParser(new java.io.StringReader(testExample2)).compoundOp();
        System.out.println(tl);
    }

  final public Cmd.Fl fl() throws ParseException {Token s;
    s = jj_consume_token(FLAG);
System.out.println(s.toString()); {if ("" != null) return new Cmd.Fl(s.toString());}
    throw new Error("Missing return statement in function");
  }

  final public Cmd.Ar ar() throws ParseException {Token s;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      s = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Cmd.Ar(s.toString());}
      break;
      }
    case 34:{
      jj_consume_token(34);
      s = jj_consume_token(IDENTIFIER);
      jj_consume_token(35);
{if ("" != null) return new Cmd.Ar(s.toString());}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Cmd.CmdOp singleOp() throws ParseException {Cmd.CmdOp result; Token s; List<Cmd.CmdOp> temp = new ArrayList<Cmd.CmdOp>(); Cmd.Flv2 flagv2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:
    case 34:{
      result = ar();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 36:{
        s = jj_consume_token(36);
Cmd.Ar ar = new Cmd.Ar(((Cmd.Ar)result).name); ar.isList = true; result = ar;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      break;
      }
    case FLAG:{
      s = jj_consume_token(FLAG);
String flagName = s.toString().substring(s.toString().indexOf("-") + 1);
            if (flagName.length() == 1)
                result = new Cmd.Fl(s.toString());
            else {
                List<Cmd.CmdOp> flags = new ArrayList<Cmd.CmdOp>();
                for (char c : flagName.toCharArray()) {
                    flags.add(new Cmd.Fl(String.valueOf(c)));
                }
                result = new Cmd.Compound(flags);
            }
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      result = compoundOp();
      jj_consume_token(RBRACKET);
boolean resultSet = false;
            if (result instanceof Cmd.Compound) {
                boolean allFlags = true;
                for (Cmd.CmdOp cmd : ((Cmd.Compound)result).cmds) {
                    if (! (cmd instanceof Cmd.Fl)) {
                        allFlags = false;
                    }
                }
                if (allFlags == true) {
                    List<Cmd.CmdOp> cmdops = new ArrayList<Cmd.CmdOp>();
                    for (Cmd.CmdOp c : ((Cmd.Compound)result).cmds) {
                        cmdops.add(new Cmd.Opt(c));
                    }
                    result = new Cmd.Compound(cmdops);
                    resultSet = true;
                }
            }
            if (!resultSet)
                result = new Cmd.Opt(result);
      break;
      }
    case 37:{
      jj_consume_token(37);
      s = jj_consume_token(IDENTIFIER);
flagv2 = new Cmd.Flv2(s.toString());
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:
      case 38:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          jj_consume_token(38);
          s = jj_consume_token(IDENTIFIER);
          jj_consume_token(RBRACKET);
flagv2.setName(s.toString(), true);
          break;
          }
        case 38:{
          jj_consume_token(38);
          s = jj_consume_token(IDENTIFIER);
flagv2.setName(s.toString(), false);
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
result = flagv2;
      break;
      }
    case LBRACE:{
      jj_consume_token(LBRACE);
      result = compoundOp();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Cmd.CmdOp compoundOp() throws ParseException {List<Cmd.CmdOp> cmds = new ArrayList<Cmd.CmdOp>();
    Cmd.Compound result; Token t;
    Cmd.CmdOp single;
    boolean isExclusive = false;
    single = singleOp();
cmds.add(single);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:
    case LBRACKET:
    case FLAG:
    case BIT_OR:
    case IDENTIFIER:
    case 34:
    case 37:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:
      case LBRACKET:
      case FLAG:
      case IDENTIFIER:
      case 34:
      case 37:{
        label_1:
        while (true) {
          single = singleOp();
cmds.add(single);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACE:
          case LBRACKET:
          case FLAG:
          case IDENTIFIER:
          case 34:
          case 37:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_1;
          }
        }
        break;
        }
      case BIT_OR:{
        label_2:
        while (true) {
          jj_consume_token(BIT_OR);
          single = singleOp();
cmds.add(single); isExclusive = true;
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BIT_OR:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_2;
          }
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
if (cmds.size() == 1)
            {if ("" != null) return cmds.get(0);}
        else {
            if (!isExclusive)
                {if ("" != null) return new Cmd.Compound(cmds);}
            else {
                {if ("" != null) return new Cmd.Exclusive(cmds);}
            }
        }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public SynopParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x0,0x4000,0x4000,0x80085000,0x80085000,0x10000000,0x90085000,0x90085000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x10,0x40,0x40,0x24,0x24,0x0,0x24,0x24,};
   }

  /** Constructor with InputStream. */
  public SynopParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SynopParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SynopParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SynopParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SynopParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SynopParser(SynopParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SynopParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[39];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 39; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
