Unrecognized cmd_option type argument_option
Reading data from ../../data/bash
Saving models to ../../model/seq2seq
../../data/bash
Loading data from ../../data/bash
  reading data line 1000
  reading data line 2000
  reading data line 3000
  reading data line 4000
  4689 data points read.
  465 data points read.
  471 data points read.
spell correction: flies -> files
spell correction: kat -> cat
spell correction: horus -> hours
spell correction: modifid -> modified
spell correction: shs -> ssh
spell correction: accesed -> accessed
spell correction: ffiles -> files
spell correction: currect -> current
spell correction: ahve -> have
spell correction: confined -> contained
spell correction: dispaly -> display
spell correction: listig -> listing
spell correction: currect -> current
spell correction: netinst -> nextint
spell correction: dispaly -> display
Example 1 (1)
English: display the top 20 biggest files in the current folder which are present in the same partition as that of the current folder
GT Command 1: find . -xdev -printf ‘%s %p\n’ |sort -nr|head -20
Prediction 1: find File -type f -printf Pattern | sort -n | head -n Number (-0.288867086172)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 2: find File -type f -printf Pattern | sort -n -r | head -n Number (-0.324019223452)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -r -n | head -n Number (-0.349182128906)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-r)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Example 2 (1)
English: Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%D'
GT Command 1: find /usr/ports/ -name pkg-plist\* -exec grep 'unexec.rmdir %D' '{}' '+' | wc -l
Prediction 1: find File -name Pattern | wc -l (-0.230644851923)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec wc -l {} \; (-0.260491430759)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} wc -l {} (-0.291173905134)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 3 (1)
English: find files having specific name in a folder
GT Command 1: find ~/Books -name Waldo
Prediction 1: find File -name Pattern (-0.095553919673)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.393757164478)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern (-0.555006861687)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 4 (1)
English: find in the file system for a specific file
GT Command 1: find / -name filename -print
Prediction 1: find File -name Pattern -print (-0.182182461023)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -print (-0.35631108284)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern (-0.466823399067)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 5 (1)
English: Search the current working directory tree for files whose names start with "fileA_" or "fileB_"
GT Command 1: find . -name 'fileA_*' -o -name 'fileB_*'
Prediction 1: find File \( -name Pattern -or -name Pattern \) (-0.226520612836)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.247152626514)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.391694962978)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 6 (1)
English: find all the files in the current folder which end with "ext1" or "ext2" or "ext3"
GT Command 1: find -E . -regex ".*ext1|.*ext2|.*ext3"
Prediction 1: find File \( -name Pattern -or -name Pattern \) (-0.221392840147)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -name Pattern (-0.341473668814)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -name Pattern | grep -v Pattern (-0.353511989117)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 7 (1)
English: change the owner of all the files in folder /u/netinst to netinst
GT Command 1: find /u/netinst -print | xargs chown netinst
Prediction 1: find File -print | xargs -I {} chown Pattern {} (-0.240056708455)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -exec chown Pattern {} \; (-0.244176745415)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -print | xargs -I {} tar -c -v -f Unknown {} (-0.305864155293)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 8 (1)
English: Search the current directory, except the subdirectory tree ".svn", for files whose name is "foo.cpp"
GT Command 1: find . -name 'foo.cpp' '!' -path '.svn'
Prediction 1: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.149751335382)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -name Pattern \) -print (-0.283191084862)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) (-0.308363854885)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 9 (1)
English: search the pattern ^PyErr in all the ".c" files in the folder Lib/
GT Command 1: find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
Prediction 1: find File -name Pattern -exec grep -H Pattern {} \; (-0.275169312954)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.285894542933)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec grep -H -n Pattern {} \; (-0.306435495615)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 10 (1)
English: Find files/directories named blah under current directory
GT Command 1: find ./ -name blah
Prediction 1: find File -name Pattern (-0.0260312445462)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.660042524338)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.74089038372)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 11 (1)
English: Find files owner by user shs
GT Command 1: find -user shs
Prediction 1: find File -user Pattern (-0.115241490304)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -user Pattern -print (-0.356577605009)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -user Pattern -exec chown Pattern {} \; (-0.652424395084)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 12 (1)
English: Find the top 5 biggest files
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction 1: find File -type f -size Size (-0.496936112642)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Prediction 2: find File -type f -printf Pattern | sort -n -r | head -n Number (-0.522629082203)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -n -r | head File (-0.533304393291)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Example 13 (1)
English: Find all *.tex regular files in maximum 2 levels down the current directory
GT Command 1: find . -type f -maxdepth 2 -name "*.tex"
Prediction 1: find File -maxdepth Number -type f (-0.16373077035)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Prediction 2: find File -maxdepth Number -type f -name Pattern (-0.228511303663)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -maxdepth Number -mindepth Number -type f (-0.335321098566)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Example 14 (2)
English: find files ending with .jpg:
GT Command 1: find . -name '*.jpg' -print
GT Command 2: find . -name '*.jpg' -print ./bar/foo.jpg
Prediction 1: find File -name Pattern (-0.0253491513431)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.541526257992)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.939562559128)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 15 (1)
English: List all *.jar files/directories under /usr, /home and /tmp directory
GT Command 1: find /usr /home  /tmp -name "*.jar"
Prediction 1: find File -name Pattern -exec grep -l Pattern {} \; (-0.320763915777)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec grep -H Pattern {} \; (-0.338883310556)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec ls {} \; (-0.352007269859)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: n
Example 16 (1)
English: search for directories in the folder "test" which end with 5 digits using regular expressions
GT Command 1: find ./test -regextype posix-egrep -type d -regex '.*/[0-9]{5}$'
Prediction 1: find File -type d -regex Pattern (-0.305639892817)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -regextype Pattern -regex Pattern (-0.31948813796)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-regextype)
            ARGUMENT(Pattern)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -type d -regextype Pattern -regex Pattern (-0.379118055105)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-regextype)
            ARGUMENT(Pattern)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 17 (1)
English: Find all files in the current directory tree that match pattern 'a(b*'
GT Command 1: find . -name 'a(b*' -print
Prediction 1: find File -name Pattern (-0.0331552736461)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.70611423254)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.75640642643)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 18 (1)
English: search for mp3 files in the folder /mp3collection which are smaller than 5MB
GT Command 1: find /mp3collection -name '*.mp3' -size -5000k
Prediction 1: find File -name Pattern -size Size (-0.193974688649)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -size Size -print (-0.390512675047)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -size Size (-0.418667078018)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Example 19 (1)
English: Find all files with the name "MyProgram.c" in the current directory and all of it's sub-directories.
GT Command 1: find -name "MyCProgram.c"
Prediction 1: find File -name Pattern (-0.0573177486658)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.419548273087)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.656460106373)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 20 (3)
English: Find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string "debug ("
GT Command 1: find /srv/www/*/htdocs/system/application/ -name "*.php" -exec grep -H "debug (" {} +
GT Command 2: find /srv/www/*/htdocs/system/application/ -name "*.php" -print0 | xargs -0 grep -H "debug ("
GT Command 3: find /srv/www/*/htdocs/system/application/ -name "*.php" -exec grep "debug (" {} \; -print
Prediction 1: find File -name Pattern -exec grep -H Pattern {} \; (-0.221471711993)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -l Pattern {} \; (-0.231305480003)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.26936095953)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 21 (1)
English: remove all the files in the current folder which have not been modified in the last 10 days
GT Command 1: find . -mtime +10 | xargs rm
Prediction 1: find File -mtime Time -exec rm {} \; (-0.0924104228616)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mtime Time -exec rm {} + (-0.24510230124)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::+)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time -exec rm {} \; (-0.315614461899)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 22 (1)
English: find all the files in the current folder which have been modified for the ffiles that are at least one week old (7 days) but less then 30 days old
GT Command 1: find . -mtime +30 -a -mtime -7 -print0
Prediction 1: find File -mtime Time (-0.179130762815)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -mtime Time -print (-0.347639381886)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -mtime Time -type f (-0.531761467457)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Example 23 (1)
English: find file.txt in the file system, search confined to a specific path
GT Command 1: find / -path /usr/lib/important/*/file.txt
Prediction 1: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.3626922369)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern -exec grep -H -n Pattern {} \; (-0.363686919212)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} grep -l Pattern {} (-0.367878824472)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 24 (1)
English: Find file1 in the level 1 directories and above
GT Command 1: find -maxdepth 2 -name file1
Prediction 1: find File -mindepth Number -maxdepth Number -type d -name Pattern (-0.277038007975)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -maxdepth Number -mindepth Number -type d -name Pattern (-0.366140633821)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -mindepth Number -maxdepth Number -type d -name Pattern -print (-0.366348296404)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 25 (1)
English: search for a specific pattern in all files in the current folder which have a specific extension.
GT Command 1: find . -name “*.cc” |xargs grep -n “pattern”
Prediction 1: find File -name Pattern -exec grep -H Pattern {} \; (-0.209087014198)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -l Pattern {} \; (-0.264478057623)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep --with-filename Pattern {} \; (-0.284646034241)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(--with-filename)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 26 (1)
English: find all the files in a folder which do not belong to any user
GT Command 1: find /home -nouser -print
Prediction 1: find File ! -user Pattern (-0.28724604845)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(!)
            FLAG(-user)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -nouser (-0.468063741922)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-nouser)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File ! -perm Permission (-0.685967803001)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)

Correct template [y/n]: n
Example 27 (1)
English: search for directories in the folder "test" which end have 5 digits as their name
GT Command 1: find ./test -type d -name '[0-9][0-9][0-9][0-9][0-9]'
Prediction 1: find File -name Pattern -type d (-0.210409536958)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -name Pattern (-0.26419955492)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.404251456261)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 28 (1)
English: print the files in the subdirectories between level 1 and 4
GT Command 1: find -mindepth 2 -maxdepth 5 -name "sum.java"
Prediction 1: find File -mindepth Number -maxdepth Number (-0.415065526962)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-maxdepth)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -maxdepth Number -cmin Number (-0.419641137123)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -maxdepth Number -mindepth Number -type f (-0.485484212637)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 29 (1)
English: Find all .txt files in the user's home directory and below.
GT Command 1: find ~/ -name '*.txt'
Prediction 1: find File -name Pattern (-0.176615014672)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.439821690321)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.451055139303)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 30 (1)
English: Find files with 002 permission in entire file system
GT Command 1: find / -type f -perm -002
Prediction 1: find File -perm Permission (-0.165448993444)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -perm Permission -print (-0.270189762115)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -perm Permission -print (-0.380220860243)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 31 (2)
English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names
GT Command 1: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$" -print0 | xargs -0 -n 1 ls
GT Command 2: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$" | xargs -n 1 ls
Prediction 1: find File \( -name Pattern -or -name Pattern \) (-0.431181162596)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.447971820831)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -ls (-0.476587861776)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-ls)

Correct template [y/n]: n
Example 32 (1)
English: Search for 'foo=' in all *.png files under current directory without descending into *.gif and *.svn directories
GT Command 1: find . -name "*.png" -prune -o -name "*.gif" -prune -o -name "*.svn" -prune -o -print0 | xargs -0 -I FILES grep -IR "foo=" FILES
Prediction 1: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.286214023829)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -name Pattern \) -print | xargs -I {} grep Pattern {} (-0.333679050207)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                UNARYLOGICOP(-prune)
                    FLAG(-name)
                        ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) -print -exec grep -H Pattern {} \; (-0.370469480753)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 33 (1)
English: find regular files in the current directory, without descending into sub-directories and display as a null separated list.
GT Command 1: find -maxdepth 1 -type f -printf '%f\000'
Prediction 1: find File -mindepth Number -type f -print0 | xargs -0 -I {} ls {} (-0.427893400192)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-mindepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -maxdepth Number -type f -print0 | xargs -0 -I {} ls {} (-0.433146417141)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -maxdepth Number -type f -print0 | xargs -0 -I {} ls -l {} (-0.434923678637)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 34 (1)
English: list all the sqlite files in the current folder
GT Command 1: find ./ -name "*.sqlite" -ls
Prediction 1: find File -name Pattern (-0.29326120019)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.311473637819)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.456973165274)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 35 (1)
English: List all .svn files/directories under current directory
GT Command 1: find . -name .svn -exec ls {} \;
Prediction 1: find File -name Pattern (-0.235330328345)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec ls -l {} \; (-0.315193265676)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec ls {} \; (-0.387979477644)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 36 (1)
English: search for a word in all the files with the extension "ch" in the current folder
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction 1: find File -name Pattern -exec grep Pattern {} \; (-0.161529615521)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} grep Pattern {} (-0.24526463449)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} grep Pattern {} (-0.293956309557)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 37 (1)
English: Find all files, starting from / but ignoring removable media, whose names end with ".rpm"
GT Command 1: find / -xdev -name "*.rpm"
Prediction 1: find File -name Pattern -print (-0.351982057095)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -name Pattern (-0.360424250364)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print0 (-0.372833460569)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print0)

Correct template [y/n]: n
Example 38 (2)
English: remove all core dump files from user's home directory
GT Command 1: find ~/ -name 'core*' -exec rm {} \;
GT Command 2: find ~/ -name 'core*' -exec rm {} \;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.182285279036)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -exec rm {} \; (-0.24664439261)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -exec rm {} \; (-0.290858834982)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 39 (1)
English: start from current directory, skip the directory src/emacs and all files and directories under it, and print the names of the other files found
GT Command 1: find . -wholename './src/emacs' -prune -o -print
Prediction 1: find File \( -path File -prune -or -print \) (-0.327761530876)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -printf Pattern (-0.391840338707)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-printf)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -type f \) (-0.404834836721)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 40 (1)
English: Find all the files that are exactly 30 days old.
GT Command 1: find . -mtime 30 -print
Prediction 1: find File -mtime Time (-0.0908152088523)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -mtime Time (-0.592939674854)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -atime Time (-0.666741013527)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 41 (1)
English: search for all the files in the folder /home which have sticky bit set and have the permissions 553
GT Command 1: find /home -perm 1553
Prediction 1: find File -perm Permission (-0.175309494138)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -perm Permission -print (-0.25313949585)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -perm Permission -print (-0.382895469666)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 42 (1)
English: Find recursively all regular files changed within the last 5 minutes starting from directory b
GT Command 1: find b -type f -cmin -5
Prediction 1: find File -type f -ctime Time (-0.280899167061)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -type f -newerct Time -print (-0.498883455992)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-newerct)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -cmin Number -type f (-0.53089338541)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 43 (1)
English: Find all symbolic links under the current folder and below
GT Command 1: find –L –xtype l
Prediction 1: find File -type l (-0.0194867793471)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type l | xargs -I {} ls -l -d {} (-0.652780354023)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(l)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type l -exec ls -l -d {} \; (-0.760781288147)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(l)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 44 (1)
English: Find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety
GT Command 1: find /mnt/zip -name "*prefs copy" -print0 | xargs    -0 -p /bin/rm
Prediction 1: find File -type f -name Pattern -exec rm {} \; (-0.193185523152)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f -print0 | xargs -0 -I {} rm {} (-0.212070822716)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type f -exec rm {} \; (-0.222927764058)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 45 (1)
English: Copy file header.shtml to directories dir1, dir2, dir3, and dir4
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
Prediction 1: find File -type f -name Pattern -exec cp {} File \; (-0.227381646633)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -exec rm {} \; (-0.34825912118)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -exec cp --parents {} File \; (-0.3564671278)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                FLAG(--parents)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Example 46 (1)
English: Search the current directory tree for *bash* files
GT Command 1: find . -name "*bash*"
Prediction 1: find File -name Pattern (-0.264215618372)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.302104979753)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.405196517706)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 47 (1)
English: Find string "STRING" in files residing in the current directory tree, case insensitive
GT Command 1: find . -type f -print | xargs grep -ni "STRING"
Prediction 1: find File -type f -iname Pattern (-0.364547729492)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -type f -print | xargs -I {} grep Pattern {} (-0.390243262053)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -exec grep -i -l Pattern {} \; (-0.402916938066)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-i)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 48 (1)
English: display all the files in the entire file system which are bigger than 10MB
GT Command 1: find / -size +10000k
Prediction 1: find File -size Size (-0.0372610166669)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -size Size -print (-0.489192813635)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -exec ls -l -h {} \; (-0.72536444664)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-h)
                ARGUMENT({})

Correct template [y/n]: n
Example 49 (1)
English: Search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file.
GT Command 1: find / -fstype ext3 -name zsh -ls
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.346312731504)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -name Pattern \) -print (-0.450313836336)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.471599936485)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 50 (1)
English: search for all the files in the current folder which start with "my"
GT Command 1: find . -name 'my*'
Prediction 1: find File -name Pattern (-0.0249520223588)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.589419424534)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.810293972492)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 51 (1)
English: Find every file under the directory /usr ending in ".stat".
GT Command 1: find /usr -name *stat
Prediction 1: find File -name Pattern (-0.0366469398141)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.559231221676)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.741353034973)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 52 (1)
English: Find all httpd.conf files in entire file system
GT Command 1: find / -name httpd.conf
Prediction 1: find File -name Pattern (-0.156882941723)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.448603957891)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern (-0.514183700085)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 53 (1)
English: find all fonts which belong to a specific user
GT Command 1: find /usr/local/fonts -user warwick
Prediction 1: find File -user Pattern (-0.18266351521)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -user Pattern -print (-0.2274261415)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -user Pattern -exec chown Pattern {} \; (-0.468199849129)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 54 (1)
English: Count the number of files/directories named file1 under current directory
GT Command 1: find -name file1 | wc -l
Prediction 1: find File -name Pattern | wc -l (-0.142220005393)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec wc -l {} \; (-0.245834901929)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} wc -l {} (-0.3027741611)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 55 (1)
English: find within a directory called /mp3collection, only those mp3 files that have a size less than 5000 Kilobytes ( < 5MB)
GT Command 1: find /mp3collection -name '*.mp3' -size -5000k
Prediction 1: find File -type f -size Size (-0.369829624891)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -size Size \) (-0.381141513586)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-size)
                ARGUMENT(Size)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -and -size Size \) (-0.415092021227)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-and)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-size)
                ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Example 56 (1)
English: Search all the .c and .h files in the current directory tree for "expr"
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction 1: find File -name Pattern -exec grep -H Pattern {} \; (-0.197030901909)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec grep Pattern {} \; (-0.253156065941)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep -l Pattern {} \; (-0.282202780247)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 57 (1)
English: display all the files in current folder which have been changed in the last 24 hours
GT Command 1: find . -ctime -1 -print
Prediction 1: find File -mtime Time (-0.232420831919)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -ctime Time (-0.296306341887)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -cmin Number (-0.567861497402)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: n
Example 58 (1)
English: Find all files/directories named file1 in maximum 2 levels down the current directory
GT Command 1: find -maxdepth 2 -name file1
Prediction 1: find File -maxdepth Number -name Pattern (-0.124436758459)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mindepth Number -maxdepth Number -name Pattern (-0.330631524324)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -maxdepth Number -mindepth Number -name Pattern (-0.365797489882)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 59 (1)
English: display all the regular files in the current folder which dont not have the permission 777
GT Command 1: find . -type f ! -perm 777
Prediction 1: find File -type f ! -perm Permission (-0.0580992288888)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -perm Permission (-0.419855326414)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: n
Prediction 3: find File -type f ! -perm Permission -print (-0.499042451382)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 60 (3)
English: Find all files/directories in entire file system that have  "write" bit set for either the owner, the group, or others
GT Command 1: find / -perm /u+w,g+w,o+w
GT Command 2: find / -perm /222
GT Command 3: find / -perm /a+w
Prediction 1: find File -perm Permission (-0.0529729090631)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -perm Permission -print (-0.392900407314)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -perm Permission -exec ls -l {} \; (-0.641999542713)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 61 (2)
English: find all the text files in the home directory
GT Command 1: find ~/ -name '*.txt'
GT Command 2: find ~/ -name '*.txt'
Prediction 1: find File -name Pattern (-0.0827476903796)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.412793636322)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.571071088314)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 62 (1)
English: find all the files which are of size 0 bytes.
GT Command 1: find . -type f -empty
Prediction 1: find File -size Size (-0.015978038311)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -size Size -print (-0.692140698433)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -size Size (-0.753131389618)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Example 63 (1)
English: To list all files in the `/usr/local/fonts' directory tree owned by the user warwick  To find files owned by a particular user, give the username to search for as an argument to the `-user' option.
GT Command 1: find /usr/local/fonts -user warwick
Prediction 1: find File \( -path File -prune -or -user Pattern \) -print (-0.455981254578)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-user)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -newer File -or -user Pattern \) -print (-0.462416708469)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-newer)
                ARGUMENT(File)
            FLAG(-user)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -newer File -and -user Pattern \) -print (-0.47891202569)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-and)
            FLAG(-newer)
                ARGUMENT(File)
            FLAG(-user)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 64 (1)
English: Find mysong.ogg anywhere under the home directory
GT Command 1: find $HOME -name 'mysong.ogg'
Prediction 1: find File -name Pattern (-0.0555630847812)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.461603164673)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.597372353077)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 65 (1)
English: List all files/directories with spaces in their names under ~/Library directory
GT Command 1: find ~/Library -name '* *' -exec ls {} \;
Prediction 1: find File -name Pattern (-0.111386790872)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.383919626474)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type f (-0.517383933067)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 66 (1)
English: Find all directories on the system whose size is greater than 50k
GT Command 1: find / -type d -size +50k
Prediction 1: find File -type d -size Size (-0.106526553631)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -size Size (-0.40462204814)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Prediction 3: find File -type d -size Size -print (-0.510512292385)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 67 (1)
English: Remove files under /mnt/zip matching "*prets copy" with confirmation
GT Command 1: find /mnt/zip -name "*prefs copy" -print0 | xargs -0 -p /bin/rm
Prediction 1: find File -type f -name Pattern -exec rm {} \; (-0.174380332232)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec rm {} \; (-0.192354679108)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec rm -f {} \; (-0.263798892498)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 68 (1)
English: Remove all broken symbolic links in /usr/ports/packages
GT Command 1: find -L /usr/ports/packages -type l -delete
Prediction 1: find File -type l -exec tar -r -v -f Unknown {} \; (-0.245470657945)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(l)
        FLAG(-exec::;)
            HEADCOMMAND(tar)
                FLAG(-r)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type l -exec rm {} \; (-0.2621306777)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(l)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type l -exec tar -c -v -f Unknown {} \; (-0.323557883501)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(l)
        FLAG(-exec::;)
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 69 (2)
English: Find all the files in file system which are changed in last 1 hour
GT Command 1: find / -cmin -60
GT Command 2: find / -ctime -1
Prediction 1: find File -mtime Time (-0.310473322868)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -ctime Time (-0.341463416815)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -cmin Number (-0.470544070005)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Example 70 (1)
English: display long list of all the perl files in the current folder
GT Command 1: find . -name "*.pl" -ls
Prediction 1: find File -name Pattern -exec ls -l {} \; (-0.171325817704)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -exec ls -l {} \; (-0.211693540215)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec ls {} \; (-0.343070656061)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 71 (1)
English: search all the files in the current folder using name patterns
GT Command 1: find . -name 'a(b*' -print
Prediction 1: find File -name Pattern (-0.074398227036)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.51916217804)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.588799357414)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 72 (1)
English: search from the / directory for any file that is larger than 10000k (> 10MB)
GT Command 1: find / -size +10000k
Prediction 1: find File -size Size (-0.0887940078974)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -size Size (-0.458150953054)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -print (-0.528556525707)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 73 (1)
English: sort based on size and display top ten largest normal/regular files in the current folder
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -10
Prediction 1: find File -type f -printf Pattern | sort -n | head -n Number (-0.259243518114)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 2: find File -type f -printf Pattern | sort -r -n | head -n Number (-0.269006758928)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-r)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -n | head File (-0.277372926474)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(head)
            ARGUMENT(File)

Correct template [y/n]: n
Example 74 (1)
English: List root's regular files with permissions 4000
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction 1: find File -type f -perm Permission (-0.183681085706)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -perm Permission -print (-0.230008453131)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f -perm Permission -ls (-0.275890767574)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-ls)

Correct template [y/n]: n
Example 75 (1)
English: copy the file header.shtml to each directory under dir1, dir2, dir3, or dir4
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
Prediction 1: find File -type f -name Pattern -exec cp {} File \; (-0.242820933461)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File -type f | xargs -I {} chmod -v Permission {} (-0.355877429247)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                FLAG(-v)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -exec chmod Permission {} \; (-0.362068414688)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 76 (1)
English: find all the directories in the entire file system whose size is greater than 50KB
GT Command 1: find / -type d -size +50k
Prediction 1: find File -type d -size Size (-0.0978908836842)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -size Size -print (-0.445273369551)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size (-0.459371328354)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Example 77 (1)
English: search for files with the name "temp" in the /usr folder
GT Command 1: find /usr -name temp -print
Prediction 1: find File -name Pattern (-0.0280820690095)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.665813326836)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.709395110607)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 78 (2)
English: start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found
GT Command 1: find . -wholename './src/emacs' -prune -print -o -print
GT Command 2: find . -wholename './src/emacs' -prune , -print
Prediction 1: find File \( -path File -prune -or -print \) (-0.326305001974)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -path File -prune -or -type f \) -print (-0.401808649302)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -path File -prune -or -type f \) (-0.406806081533)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 79 (1)
English: Find all files whose names contain the string 'xpilot' which exist within '/usr/local/games'
GT Command 1: find /usr/local/games -name "*xpilot*"
Prediction 1: find File -name Pattern -print (-0.315727800131)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.366017132998)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print | xargs -I {} grep Pattern {} (-0.368416190147)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 80 (1)
English: Search directory /tmp/foo for files containing "/tmp/foo/bar" in their full names
GT Command 1: find /tmp/foo -path /tmp/foo/bar -print
Prediction 1: find File -name Pattern (-0.285138487816)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.320825576782)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.418598026037)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 81 (1)
English: find all the html, javascript and text files in the current folder
GT Command 1: find . -type f -name "*.htm*" -o -name "*.js*" -o -name "*.txt"
Prediction 1: find File -name Pattern (-0.31338980794)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print (-0.331535577774)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec grep -H Pattern {} \; (-0.428148806095)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 82 (1)
English: List all zero-length files
GT Command 1: find . -empty -exec ls {} \;
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.415160506964)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.450492531061)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.454294651747)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 83 (1)
English: find all the files with a specific permission in the current folder
GT Command 1: find . — perm 755 -print
Prediction 1: find File -perm Permission (-0.0558749958873)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -perm Permission (-0.475258678198)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -perm Permission -print (-0.520499050617)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 84 (1)
English: Delete all HTML files under tree ~/mydir
GT Command 1: find ~/mydir -iname '*.htm' -exec rm {} \;
Prediction 1: find File -type f -name Pattern -exec rm {} \; (-0.169541746378)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec rm {} \; (-0.214647427201)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.227750241756)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 85 (1)
English: search for all "tif" images in current folder
GT Command 1: find . -name '*.tif ' -print
Prediction 1: find File -name Pattern (-0.145027205348)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f (-0.353038996458)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.398264080286)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 86 (1)
English: Move files older than 1 day to directory TMP
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \;
Prediction 1: find File -type f -mtime Time -exec rm {} \; (-0.248299837112)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -mtime Time -exec mv {} File \; (-0.282873183489)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time -print0 | xargs -0 -I {} tar -u -f Unknown {} (-0.292937904596)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-u)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 87 (1)
English: Find all files that belong to group root
GT Command 1: find / -group root
Prediction 1: find File -group Pattern (-0.0662307590246)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-group)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -group Pattern -print (-0.402696549892)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-group)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -group Pattern -perm Permission -print (-1.02093803883)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-group)
            ARGUMENT(Pattern)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: n
Example 88 (1)
English: Find all .c and .h files in the current directory tree and search them for "expr"
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction 1: find File -name Pattern -exec grep -H Pattern {} \; (-0.21217250824)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec grep -l Pattern {} \; (-0.230860859156)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.272109746933)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 89 (1)
English: display all the normal/regular files in the current folder which are empty
GT Command 1: find . -type f -empty
Prediction 1: find File -type f -printf Pattern (-0.227396667004)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-printf)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -type f -empty (-0.247088983655)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -size Size (-0.397870779037)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Example 90 (2)
English: print all files in the directories except the ./src/emacs directory
GT Command 1: find . -wholename './src/emacs' -prune , -print
GT Command 2: find . -wholename './src/emacs' -prune -o -print
Prediction 1: find File ! -name Pattern (-0.378905951977)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(!)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File ! -name Pattern -print (-0.419519394636)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(!)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -not -path File (-0.426792681217)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(-not)
            FLAG(-path)
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Example 91 (2)
English: find all files in the current folder which are of size 0 bytes.
GT Command 1: find . -type f -empty
GT Command 2: find . -type f -size 0b
Prediction 1: find File -size Size (-0.0159072652459)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -size Size -print (-0.660101652145)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -exec ls -l -h {} \; (-0.876350045204)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-h)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 92 (1)
English: list regular files under the user's home directory that are over 100KB and have not been accessed in over 30 days.
GT Command 1: find $HOME -type f -atime +30 -size 100k
Prediction 1: find File -type f -atime Time -print (-0.280134767294)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -type f -atime Time (-0.303495794535)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 3: find File -type f -atime Time -exec ls -l {} \; (-0.315051019192)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 93 (1)
English: List all regular files in /var/www and below that have changed in the last 10 minutes
GT Command 1: find /var/www -cmin -10 -type f -printf "%c %pn"
Prediction 1: find File -type f -ctime Time | xargs -I {} ls -l {} (-0.434115678072)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ctime)
                ARGUMENT(Time)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -newerct Time -exec ls -l {} \; (-0.436411648989)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-newerct)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -newerct Time -print | xargs -I {} ls -l {} (-0.448323875666)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-newerct)
                ARGUMENT(Time)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 94 (1)
English: Find all files matching shell pattern "foo/bar" in the foo directory tree
GT Command 1: find foo -path foo/bar -print
Prediction 1: find File -name Pattern (-0.117339938879)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.353583008051)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.530632257462)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 95 (2)
English: find all the swap files (files ending with ~) in the current folder and delete them
GT Command 1: find . -name "*~" -delete
GT Command 2: find . -name "*~" -exec rm {} \;
Prediction 1: find File -type f -exec rm {} \; (-0.191447868943)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec rm {} \; (-0.229834079742)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec rm {} \; (-0.232502624393)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 96 (2)
English: display all the .sh scripts and perl files in the current folder
GT Command 1: find . -type f \( -iname "*.sh" -or -iname "*.pl" \)
GT Command 2: find . -type f \( -name "*.[sS][hH]" -o -name "*.[pP][lL]" \)
Prediction 1: find File -name Pattern -printf Pattern (-0.308602422476)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-printf)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.375917881727)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.386532396078)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 97 (2)
English: Find files under current directory that contains the string '/bin/ksh'
GT Command 1: find . -type f -exec grep -iH '/bin/ksh' {} \;
GT Command 2: find . -type f -print | xargs    grep -il 'bin/ksh'
Prediction 1: find File -type f -exec grep Pattern {} \; (-0.209289491177)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -exec grep Pattern {} \; -print (-0.229309722781)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec grep -l Pattern {} \; (-0.306967079639)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 98 (1)
English: Remove all Thumbs.db files from the current directory tree
GT Command 1: find . -name Thumbs.db -exec rm {} \;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.157651588321)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern | xargs -I {} rm {} (-0.163745820522)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.188297942281)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 99 (1)
English: Remove files in the current directory tree modified more than 31 days ago recursively
GT Command 1: find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
Prediction 1: find File -mtime Time -exec rm {} \; (-0.101101391017)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -mtime Time -exec rm {} \; (-0.243695259094)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time -exec rm {} + (-0.25126722455)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::+)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 100 (1)
English: display all directories in the entire file system
GT Command 1: find / -type d -print
Prediction 1: find File -type d (-0.0593199394643)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -print (-0.475699186325)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type d (-0.728747785091)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: n
Example 101 (1)
English: List all files except for those in directory SCCS
GT Command 1: find . -print -o -name SCCS -prune
Prediction 1: find File \( -path File -prune -or -name Pattern \) -print (-0.331806838512)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.345109015703)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -print \) (-0.355184286833)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 102 (3)
English: Search the current directory tree for regular files that contain "string"
GT Command 1: find . -type f -print0 | xargs -0 grep string
GT Command 2: find . -type f -printf '"%p"\n' | xargs grep string
GT Command 3: find . -type f | xargs grep string
Prediction 1: find File -type f -exec grep -H Pattern {} \; (-0.234202831984)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f | xargs -I {} grep Pattern {} (-0.259021311998)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} grep Pattern {} (-0.309914529324)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 103 (1)
English: Find every vim undo file in the current directory tree
GT Command 1: find -type f -iname '*.un~'
Prediction 1: find File -name Pattern (-0.105564042926)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.494986474514)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.50505900383)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 104 (2)
English: find for a word in all the regular files in the current directory
GT Command 1: find . -type f -print | xargs grep -li 'bin/ksh'
GT Command 2: find . -type f -exec grep -li '/bin/ksh' {} \;
Prediction 1: find File -type f | xargs -I {} grep Pattern {} (-0.255620926619)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -print | xargs -I {} grep Pattern {} (-0.310385763645)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec grep -H Pattern {} \; (-0.311286956072)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 105 (1)
English: Find every vim undo file under current directory
GT Command 1: find -type f -iname '*.un~'
Prediction 1: find File -name Pattern (-0.234828442335)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.520212471485)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print (-0.541758179665)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 106 (1)
English: count lines of C or C++ or Obj-C or Java code under the current directory
GT Command 1: find . \( -name "*.c" -or -name "*.cpp" -or -name "*.h" -or -name "*.m" -or -name '*.java' \) -print0 | xargs -0 wc
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print0 | xargs -0 -I {} wc -l {} (-0.31177470088)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                FLAG(-name)
                    ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern -or -name Pattern \) -print0 | xargs -0 -I {} wc -l {} (-0.342235416174)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                FLAG(-name)
                    ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) | xargs -I {} wc -l {} (-0.346635103226)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                FLAG(-name)
                    ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 107 (1)
English: Find all empty regular files in the current directory tree
GT Command 1: find . -size 0c -type f
Prediction 1: find File -type f -empty (-0.0498648360372)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -size Size (-0.719774544239)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -maxdepth Number -type f -empty (-0.734552562237)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-empty)

Correct template [y/n]: n
Example 108 (1)
English: look for a file or folder called game in all folders under the current folder
GT Command 1: find . -name game
Prediction 1: find File -name Pattern (-0.241826057434)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.367074579)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.414132148027)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 109 (1)
English: Search the ~/Books directory recursively for files named "Waldo"
GT Command 1: find ~/Books -name Waldo
Prediction 1: find File -name Pattern (-0.0676377415657)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f (-0.498182564974)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.514778494835)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 110 (1)
English: Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^MASTER_SITE.*CPAN'
GT Command 1: find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE.*CPAN' '{}' '+' | wc -l
Prediction 1: find File -name Pattern -exec grep -l Pattern {} \; | wc -l (-0.272452563047)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-l)
                    ARGUMENT(Pattern)
                    ARGUMENT({})
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern | xargs -I {} grep -l Pattern {} (-0.293293267488)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} wc -l {} (-0.31615409255)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 111 (1)
English: Find all files in the current directory tree whose names are "file_name", except for those with pathnames matching pattern "./dirt to be Excluded/*"
GT Command 1: find ./ -iname file_name ! -path "./dirt to be Excluded/*"
Prediction 1: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.265736371279)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -name Pattern ! -name Pattern -print (-0.328290492296)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        UNARYLOGICOP(!)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.340946733952)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 112 (1)
English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names excluding the files that contain 'generated' or 'deploy' in their paths
GT Command 1: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -print0 | grep -vzZ generated | grep -vzZ deploy | xargs -0 ls -1Ld
Prediction 1: find File \( -name Pattern -or -name Pattern \) -exec ls -l {} \; (-0.311378955841)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print0 | xargs -0 -I {} grep -l Pattern {} (-0.341963708401)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                FLAG(-name)
                    ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print0 | xargs -0 -I {} ls {} (-0.356117784977)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                FLAG(-name)
                    ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: n
Example 113 (2)
English: List all empty files in the current directory tree
GT Command 1: find . -empty -exec ls {} \;
GT Command 2: find . -type f -empty
Prediction 1: find File -type f -empty (-0.183365225792)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -empty (-0.393860369921)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -empty -exec ls -l {} \; (-0.491360038519)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-empty)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 114 (1)
English: display all the text files in the current folder  and do not search in the bin directory
GT Command 1: find . -name bin -prune -o -name "*.txt" -print
Prediction 1: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.202184334397)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -name Pattern \) (-0.336186230183)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -path File -prune -or -name Pattern \) -print (-0.356072574854)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 115 (1)
English: find all the log files in the file system
GT Command 1: find / -name "*.log"
Prediction 1: find File -name Pattern (-0.20268625021)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.296531289816)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.511968374252)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 116 (1)
English: search for *.log files starting from /
GT Command 1: find / -name "*.log"
Prediction 1: find File -name Pattern (-0.0360461249948)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.555720329285)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.641592144966)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 117 (2)
English: find Texinfo source files in /usr/local/doc
GT Command 1: find foo -path foo/bar -print
GT Command 2: find /usr/local/doc -name '*.texi'
Prediction 1: find File -name Pattern (-0.0596712827682)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.512374162674)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} grep Pattern {} (-0.571596443653)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 118 (1)
English: Find files that are 0 bytes in size in the current directory tree and remove them
GT Command 1: find . -size 0 -exec rm {} \;
Prediction 1: find File -type f -size Size -exec rm {} \; (-0.112550497055)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -size Size -exec rm {} + (-0.266946226358)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::+)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} rm {} (-0.342689394951)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 119 (1)
English: display all the html files in the current folder that have not been modified in the last 7*24 horus
GT Command 1: find . -mtime +7 -name "*.html" -print
Prediction 1: find File -mtime Time -name Pattern -print (-0.216692402959)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mtime Time -name Pattern (-0.398654073477)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time -print (-0.43669128418)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: n
Example 120 (1)
English: Find all directories under and below /home/admin/public_html/, and change their permissions to 755
GT Command 1: find /home/admin/public_html/ -type d -exec chmod 755 {} \;
Prediction 1: find File -type d -exec chmod Permission {} \; (-0.0562441945076)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -exec chmod Permission {} + (-0.172290757298)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::+)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -print0 | xargs -0 -I {} chmod Permission {} (-0.237061351538)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 121 (1)
English: Find files with 002 permission in entire file system and print them with the string 'has world write permissions' appended after every path
GT Command 1: find / -type f -perm -002 -printf '%p has world write permissions\n'
Prediction 1: find File -type f -perm Permission -exec chmod Permission {} \; (-0.368259131908)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -perm Permission | head (-0.368741333485)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-perm)
                ARGUMENT(Permission)
        HEADCOMMAND(head)

Correct template [y/n]: n
Prediction 3: find File -type f -perm Permission -exec ls -l {} \; (-0.380428284407)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 122 (1)
English: find all the regular/normal files in a folder which are less than 50 bytes.
GT Command 1: find /usr/bin -type f -size -50c
Prediction 1: find File -type f -size Size (-0.0395238883793)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -size Size -print (-0.589246451855)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f (-0.693652868271)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Example 123 (1)
English: find all regular/normal files in a folder whose size is less than 50 bytes
GT Command 1: find /usr/bin -type f -size -50c
Prediction 1: find File -type f -size Size (-0.0249826386571)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -size Size -print (-0.54496961832)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -size Size -exec ls -l {} \; (-0.698162257671)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 124 (1)
English: display a long list of all regular/normal files in the file system which belong to the root and with suid bit set
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction 1: find File -type f -perm Permission -exec ls -l {} \; (-0.304867863655)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -perm Permission -type f -exec ls -l {} \; (-0.418713390827)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -type f \) -perm Permission -exec ls -l {} \; (-0.424846947193)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 125 (1)
English: Return a list of files newer than file poop
GT Command 1: find . -mnewer poop
Prediction 1: find File -newer File (-0.0794436782598)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newer)
            ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -newer File -or -print \) (-0.595908164978)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-newer)
                ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -newer File -print (-0.598313450813)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newer)
            ARGUMENT(File)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 126 (1)
English: Locate files whose status was changed less than 1 day ago
GT Command 1: find . -ctime -1 -print
Prediction 1: find File -ctime Time (-0.132757544518)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mtime Time (-0.383968859911)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 3: find File -type f -ctime Time (-0.492349267006)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Example 127 (1)
English: search for the file, filename.txt in the current folder ( case insensitive search )
GT Command 1: find . -iname filename.txt
Prediction 1: find File -name Pattern (-0.0296358242631)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.568400263786)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.823662221432)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 128 (1)
English: Find files with inode number 199053
GT Command 1: find / -inum 199053
Prediction 1: find File -inum Number (-0.0709043294191)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-inum)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -inum Number -print (-0.456469386816)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-inum)
            ARGUMENT(Number)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -inum Number -exec ls -l {} \; (-0.691760003567)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-inum)
            ARGUMENT(Number)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 129 (1)
English: copy the file header.shtml to those dirs
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
Prediction 1: find File -type f -name Pattern -exec cp {} File \; (-0.102011993527)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f -exec cp {} File \; (-0.273963093758)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -iname Pattern -exec cp {} File \; (-0.341318249702)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-iname)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Example 130 (2)
English: Remove all files whose names end with "~" in the /home/peter directory tree
GT Command 1: find /home/peter -name *~ |xargs rm
GT Command 2: find /home/peter -name *~ -print0 |xargs -0 rm
Prediction 1: find File -name Pattern -exec rm {} \; (-0.101162031293)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern | xargs -I {} rm {} (-0.173953205347)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.200906947255)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 131 (3)
English: Locating large files (> 100 MB) in /home/ for 'cleaning'
GT Command 1: find /home -type f -size +100M -delete
GT Command 2: find /home -type f -size +100M -print0 |xargs -0 rm
GT Command 3: find /home -type f -size +100M -delete
Prediction 1: find File -type f | xargs -I {} grep Pattern {} (-0.358879625797)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f | xargs -I {} grep -l Pattern {} (-0.376686424017)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print | xargs -I {} grep Pattern {} (-0.427730411291)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 132 (1)
English: Delete files with inode number specified by [inode-number] under current directory
GT Command 1: find . -inum [inode-number] -exec rm -i {} \;
Prediction 1: find File -inum Number -exec rm {} \; (-0.0958091765642)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-inum)
            ARGUMENT(Number)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -inum Number -exec rm {} \; (-0.222164958715)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-inum)
            ARGUMENT(Number)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -inum Number -print0 | xargs -0 -I {} rm {} (-0.397235393524)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-inum)
                ARGUMENT(Number)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 133 (1)
English: Find files owned by no group
GT Command 1: find / -nogroup
Prediction 1: find File -nogroup -print (-0.329517632723)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-nogroup)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -nogroup (-0.516707837582)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-nogroup)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -group Pattern (-0.560372173786)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-group)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 134 (1)
English: Find all empty regular files in the current directory and below
GT Command 1: find . -type f -empty
Prediction 1: find File -type f -empty (-0.0550045184791)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -size Size (-0.664453923702)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -maxdepth Number -type f -empty (-0.712606310844)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-empty)

Correct template [y/n]: n
Example 135 (2)
English: Search directory foo for files containing "foo/bar" in their full names
GT Command 1: find foo -path foo/bar -print
GT Command 2: find foo -path /tmp/foo/bar -print
Prediction 1: find File -name Pattern (-0.156244039536)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.386573076248)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.475431442261)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 136 (1)
English: find all the configuration files which have been accessed in the last 30 minutes.
GT Command 1: find /etc/sysconfig -amin -30
Prediction 1: find File -amin Number (-0.0984899774194)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-amin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -amin Number -amin Number (-0.398627877235)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-amin)
            ARGUMENT(Number)
        FLAG(-amin)
            ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -amin Number -print (-0.752241492271)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-amin)
            ARGUMENT(Number)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 137 (1)
English: find all files in a folder using name patterns
GT Command 1: find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'
Prediction 1: find File -name Pattern (-0.093388915062)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.522953033447)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.578251481056)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 138 (1)
English: display list of all the hidden files in the home folder
GT Command 1: find $HOME -name ".*" -ls
Prediction 1: find File -type f -name Pattern (-0.255893260241)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.305574119091)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -print (-0.333979010582)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 139 (1)
English: Find text files modified less than 5 days ago
GT Command 1: find . –name "*.txt" –mtime 5
Prediction 1: find File -mtime Time -type f (-0.224864661694)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Prediction 2: find File -type f -mtime Time (-0.341664761305)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 3: find File -mtime Time -name Pattern (-0.383816242218)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 140 (1)
English: dispaly a long listig of all the files in the current folder which are bigger than 100KB
GT Command 1: find . -size +100000 -ls
Prediction 1: find File -size Size -exec ls -l {} \; (-0.15498007834)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -size Size -exec ls -l -h {} \; (-0.16338467598)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-h)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -exec ls -a -l {} \; (-0.350956678391)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-a)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 141 (1)
English: Remove all broken symlinks from the /usr/ports/packages directory tree
GT Command 1: find -L /usr/ports/packages -type l -delete
Prediction 1: find File -xtype l -exec rm {} \; (-0.246164441109)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-xtype)
            ARGUMENT(l)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type l -xtype l -exec rm {} \; (-0.357908010483)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(l)
        FLAG(-xtype)
            ARGUMENT(l)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -xtype l -print0 | xargs -0 -I {} rm {} (-0.383302181959)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-xtype)
                ARGUMENT(l)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 142 (1)
English: Find *.html files in the current directory tree that were last modified more than 7 days ago
GT Command 1: find . -mtime +7 -name "*.html" -print
Prediction 1: find File -mtime Time -name Pattern (-0.25015988946)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -mtime Time (-0.276977092028)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time -name Pattern -print (-0.395023941994)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 143 (1)
English: find all the files in the /usr folder which have modification date less than or equal to the file "/FirstFile"
GT Command 1: find /usr ! -newer /FirstFile -print
Prediction 1: find File -newer File (-0.260460704565)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newer)
            ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.350908815861)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.435285568237)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 144 (1)
English: find all files in the current folder having a specific word in their name
GT Command 1: find -name "*pattern*"
Prediction 1: find File -name Pattern (-0.0958522856236)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.438838064671)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern (-0.515891194344)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 145 (1)
English: search for all the directories ending with ".mp3" in the file system and move them to the folder /mnt/mp3
GT Command 1: find / -iname "*.mp3" -type d -exec /bin/mv {} /mnt/mp3 \;
Prediction 1: find File -type d -name Pattern -exec mv {} File \; (-0.277419269085)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f -exec mv {} File \; (-0.294639319181)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec mv {} File \; (-0.306855082512)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Example 146 (1)
English: Search for all directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.
GT Command 1: find . -iname foo -type d
Prediction 1: find File -type d -name Pattern (-0.225975990295)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -iname Pattern (-0.234348341823)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type d (-0.42469021678)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Example 147 (1)
English: Find all the files on the system that have been changed within the last hour
GT Command 1: find / -cmin -60
Prediction 1: find File -cmin Number (-0.410564482212)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -ctime Time (-0.4717015028)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 3: find File -newerct Time -print (-0.530233860016)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newerct)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: n
Example 148 (1)
English: Archive all *html files using tar.
GT Command 1: find . -type f -name "*html" | xargs tar cvf htmlfiles.tar -
Prediction 1: find File -name Pattern -print0 | xargs -0 -I {} tar -u -f Unknown {} (-0.213770613074)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-u)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.25035443902)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.253446668386)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 149 (1)
English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names excluding the paths */generated/* and */deploy/*
GT Command 1: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -L1d
Prediction 1: find File \( -path File -prune -or -name Pattern \) -print | xargs -I {} grep -l Pattern {} (-0.316625833511)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                UNARYLOGICOP(-prune)
                    FLAG(-path)
                        ARGUMENT(File)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -path File -prune -or -name Pattern \) -print (-0.341862499714)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -name Pattern \) -print | xargs -I {} grep Pattern {} (-0.347920149565)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                UNARYLOGICOP(-prune)
                    FLAG(-path)
                        ARGUMENT(File)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 150 (1)
English: Locate the httpd.conf file on the system
GT Command 1: find / -name httpd.conf
Prediction 1: find File -name Pattern (-0.0554019808769)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.485734075308)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type f (-0.525002717972)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 151 (1)
English: find all the files starting with a specific name in a folder
GT Command 1: find /etc -name "host*" — print
Prediction 1: find File -name Pattern (-0.0407542735338)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.576648771763)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.701871097088)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 152 (1)
English: Show the last 10 .conf files found by `find' in the /etc directory and 1 level below
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
Prediction 1: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.4794703722)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -maxdepth Number \( -name Pattern -or -name Pattern \) -print (-0.49444052577)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -maxdepth Number -type f -not -name Pattern (-0.522203147411)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(-not)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 153 (1)
English: display all the files in the kat folder
GT Command 1: find kat -printf "%f\n"
Prediction 1: find File (-0.075682118535)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -print (-0.701992690563)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -exec ls {} \; (-1.1731518507)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 154 (1)
English: Search the current directory and two levels below for file `teste.tex'
GT Command 1: find ~/ -maxdepth 3 -name teste.tex
Prediction 1: find File -maxdepth Number -name Pattern (-0.327364593744)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -maxdepth Number \( -name Pattern -prune -or -name Pattern \) -print (-0.455270767212)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -mindepth Number -maxdepth Number -name Pattern (-0.457279443741)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 155 (1)
English: force delete all the directories in a folder which  have a specific name
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Prediction 1: find File -type d -name Pattern -exec rm -f {} \; (-0.182339191437)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d -name Pattern -exec rm -r -f {} \; (-0.220581412315)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-r)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type d -exec rm -r -f {} \; (-0.244443371892)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-r)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 156 (1)
English: List all *.bak files in the current directory tree
GT Command 1: find  . -name '*.bak' -ls
Prediction 1: find File -name Pattern (-0.174341291189)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec ls {} \; (-0.440696150064)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} grep Pattern {} (-0.448734462261)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 157 (1)
English: Find all directories starting from / that have permissions 777
GT Command 1: find / -type d -perm 0777
Prediction 1: find File -type d -perm Permission -print (-0.209376603365)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -perm Permission (-0.232487425208)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d ! -perm Permission (-0.287009477615)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)

Correct template [y/n]: n
Example 158 (1)
English: Find all directories in entire file system which are larger than 50KB
GT Command 1: find / -type d -size +50k
Prediction 1: find File -type d -size Size (-0.0987647473812)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -size Size -print (-0.462581336498)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d (-0.624096810818)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: n
Example 159 (1)
English: display all sqlite files in the current directory along with their timestamp
GT Command 1: find ./ -name "*.sqlite" -printf '%Tc %p\n'
Prediction 1: find File -printf Pattern (-0.226684331894)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-printf)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -printf Pattern (-0.28828316927)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-printf)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.5263235569)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 160 (1)
English: Find all files under path_to_dir
GT Command 1: find path_to_dir -type f
Prediction 1: find File -type f (-0.308955013752)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File (-0.402965605259)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -print (-0.512179136276)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 161 (1)
English: Delete all the .c files present in the current directory and below
GT Command 1: find . -name "*.c" | xargs rm -f
Prediction 1: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.166668877006)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec rm {} \; (-0.185080617666)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -delete (-0.287220299244)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-delete)

Correct template [y/n]: y
Correct command [y/n]: n
Example 162 (1)
English: find all the jpg files in current folder and sort them
GT Command 1: find . -type f|grep -i "\.jpg$" |sort
Prediction 1: find File -type f -name Pattern -exec grep -H -n Pattern {} \; (-0.458519488573)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -iname Pattern -print0 | xargs -0 -I {} wc -l {} (-0.466073155403)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-iname)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.470444947481)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 163 (1)
English: copy all java files from current folder to another folder
GT Command 1: find . -name "*.java" -print0 | xargs -0 -J % cp % destinationFolder
Prediction 1: find File -type f -name Pattern -exec cp {} File \; (-0.162661671638)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -iname Pattern -exec cp {} File \; (-0.270446807146)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-iname)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec cp {} File \; (-0.297252684832)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Example 164 (1)
English: Find PHP files with abstract classes
GT Command 1: find . -type f -name "*.php" -exec grep --with-filename -c "^abstract class " {} \; | grep ":[^0]"
Prediction 1: find File -name Pattern (-0.0787354707718)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print (-0.537527143955)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -type f (-0.769411623478)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Example 165 (1)
English: find files which full path name is /tmp/foo/bar under /tmp/foo directory and print
GT Command 1: find /tmp/foo -path /tmp/foo/bar -print
Prediction 1: find File -path File -print (-0.389483600855)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-path)
            ARGUMENT(File)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -path File (-0.407718718052)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-path)
            ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -path File -prune -name Pattern -print (-0.480840504169)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(-prune)
            FLAG(-path)
                ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 166 (1)
English: display all the home folder which end with the extension "sxw" and which have been accessed in the last 3*24 hours and which belong to the user bruno
GT Command 1: find /home -type f -name "*.sxw" -atime -3 -user bruno
Prediction 1: find File \( -name Pattern -or -name Pattern \) -mtime Time -print0 | xargs -0 -I {} tar -r -v -f Unknown {} (-0.36826851964)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                FLAG(-name)
                    ARGUMENT(Pattern)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-r)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -exec ls -l {} \; (-0.381756842136)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -atime Time -exec ls -l {} \; (-0.383700102568)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Example 167 (1)
English: Find all or single file called FindCommandExamples.txt under / directory of owner root
GT Command 1: find / -user root -name FindCommandExamples.txt
Prediction 1: find File -user Pattern -name Pattern (-0.180905893445)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -user Pattern -name Pattern -print (-0.445697009563)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -user Pattern -iname Pattern (-0.457923650742)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 168 (1)
English: Find all *stat files/directories under /usr
GT Command 1: find /usr -name *stat
Prediction 1: find File -name Pattern (-0.0160766914487)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.682075381279)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} grep Pattern {} (-0.791891336441)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 169 (1)
English: show the list of all the files in the current folder which have been modified within the 24 hours
GT Command 1: find . -mtime 0 -print
Prediction 1: find File -mtime Time (-0.127322167158)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mtime Time -print (-0.260500967503)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time -exec ls -l {} \; (-0.717024207115)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 170 (1)
English: Search the current directory recursively for files containing "string"
GT Command 1: find . -type f -exec grep -l 'string' {} \;
Prediction 1: find File -type f -exec grep -H Pattern {} \; (-0.32840821147)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -print0 | xargs -0 -I {} grep Pattern {} (-0.362303286791)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} grep -l Pattern {} (-0.408407390118)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 171 (1)
English: Find files ending with .mp3 or .jpg
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
Prediction 1: find File -name Pattern (-0.224342465401)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.355320453644)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | grep -v Pattern (-0.363444566727)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 172 (1)
English: Find all files under /home that belong to user tecmint
GT Command 1: find /home -user tecmint
Prediction 1: find File -user Pattern (-0.181138798594)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -user Pattern -print (-0.18308596313)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -user Pattern -exec chown Pattern {} \; (-0.495656371117)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 173 (1)
English: Find all files on the system whose names are 'drush'
GT Command 1: find / -name drush
Prediction 1: find File -name Pattern (-0.0392786487937)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.545028984547)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.621286571026)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 174 (1)
English: Search for all files and directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.
GT Command 1: find . -iname foo
Prediction 1: find File -name Pattern (-0.242268234491)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.342920094728)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.485815107822)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 175 (1)
English: display list of all the hidden regular/normal files in the directory "/dir/to/search/"
GT Command 1: find /dir/to/search/ -type f -iname ".*" -ls
Prediction 1: find File -type f -name Pattern (-0.31330037117)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -ls (-0.364300072193)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ls)

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -print (-0.370128005743)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 176 (1)
English: Find all 400 permission files under /data directory with null character as the delimiter
GT Command 1: find /data -type f -perm 400 -print0
Prediction 1: find File -type f -perm Permission -print -exec chmod Permission {} \; (-0.21054674685)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -perm Permission -exec chmod Permission {} \; (-0.225775182247)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} chmod Permission {} (-0.256003558636)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 177 (1)
English: find any files in the current directory that begin with a number
GT Command 1: find . -regex './[0-9].*' -print
Prediction 1: find File -name Pattern (-0.0851415097713)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.596889913082)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print (-0.606035709381)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 178 (1)
English: Find files with the setuid or setgid bit set
GT Command 1: find . -perm -4000 -o -perm -2000
Prediction 1: find File -perm Permission (-0.0752400830388)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: n
Prediction 2: find File -perm Permission -print (-0.393576592207)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f -perm Permission (-0.576020419598)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: n
Example 179 (1)
English: find all the text files in the folder /home/calvin and do not search beyond 2 levels
GT Command 1: find /home/calvin/ -maxdepth 2  -name “*.txt”
Prediction 1: find File -maxdepth Number -name Pattern (-0.173599585891)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -maxdepth Number (-0.46515417099)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-maxdepth)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -maxdepth Number -mindepth Number -name Pattern (-0.473872929811)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 180 (1)
English: Find all *.txt and *.json files in current directory
GT Command 1: find . -type f \( -name "*.txt" -o -name "*.json" \)
Prediction 1: find File \( -name Pattern -or -name Pattern \) (-0.259750038385)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.277213335037)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -path File -prune -or -name Pattern \) -print (-0.448851794004)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 181 (2)
English: List all regular files residing in the current directory tree and containing string "/bin/ksh"
GT Command 1: find . -type f -print | xargs grep -li 'bin/ksh'
GT Command 2: find . -type f -exec grep -li '/bin/ksh' {} \;
Prediction 1: find File -type f -exec grep -H Pattern {} \; (-0.202859833837)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -exec grep -l Pattern {} \; (-0.250083237886)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec grep -H -n Pattern {} \; (-0.287109971046)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 182 (1)
English: find all the files ending with "~" in current folder and move them to temp folder
GT Command 1: find -name '*~' -print0 | xargs -0 -I _ mv _ /tmp/
Prediction 1: find File -name Pattern -exec mv {} File \; (-0.120926037431)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} mv {} File (-0.287680178881)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.304542332888)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 183 (1)
English: Search the current directory tree for files containing "sh" in their names
GT Command 1: find . -name "*sh*"
Prediction 1: find File -name Pattern (-0.103364303708)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.472286373377)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print (-0.488688856363)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 184 (1)
English: Search *.x files from the current directory tree for string "fred"
GT Command 1: find . -name ‘*.x’ -print0 | xargs -0 grep fred
Prediction 1: find File -name Pattern -exec grep Pattern {} \; (-0.177027136087)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep Pattern {} \; -print (-0.206830263138)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep -H Pattern {} \; (-0.269686549902)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 185 (1)
English: display all the files in current folder having specific word in their name
GT Command 1: find -name "*pattern*"
Prediction 1: find File -name Pattern (-0.154056176543)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.361534118652)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.417468875647)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 186 (1)
English: Find all the files in entire file system with the extensions txt or doc, as well as any file larger than 5MB in size
GT Command 1: find / \( -name '*.txt' -o -name '*.doc' -o -size +5M \)
Prediction 1: find File -size Size (-0.137813836336)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.513867378235)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -size Size \) (-0.524295806885)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-size)
                ARGUMENT(Size)

Correct template [y/n]: n
Example 187 (1)
English: find all the html files in the current folder which have not been modified in the last 7 days
GT Command 1: find . -mtime +7 -name "*.html" -print
Prediction 1: find File -mtime Time -name Pattern -print (-0.19987373054)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mtime Time -name Pattern (-0.342526763678)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time -type f -name Pattern -print (-0.437947005033)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 188 (1)
English: find all the files in the current directory which have been accessed in the last 1 day and move them to TMP folder.
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \;
Prediction 1: find File -atime Time -exec rm {} \; (-0.258895993233)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -atime Time -exec mv {} File \; (-0.303553193808)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -atime Time -print | xargs -I {} tar -c -v -f Unknown {} (-0.322651088238)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-atime)
                ARGUMENT(Time)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 189 (1)
English: Find recursively all regular files in directory tree b that were changed within the last 5 minutes and copy them to directory c
GT Command 1: find b -type f -cmin -5 -exec cp '{}' c \;
Prediction 1: find File -type f -ctime Time | xargs -I {} rm {} (-0.339436620474)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ctime)
                ARGUMENT(Time)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -mtime Time -print0 | xargs -0 -I {} rm {} (-0.393306672573)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -ctime Time -print0 | xargs -0 -I {} rm {} (-0.410293132067)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ctime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 190 (1)
English: search for a specific word in all the hidden files in the entire file system and display the file name along with the matched line
GT Command 1: find / -name ‘*.*’ -exec grep -il “foobar” {} \;
Prediction 1: find File -name Pattern -print0 | xargs -0 -I {} grep -l Pattern {} (-0.263101011515)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -H Pattern {} \; (-0.277562737465)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} grep Pattern {} (-0.277739554644)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 191 (1)
English: Delete all files in the "${S}/bundled-libs" folder except "libbass.so"
GT Command 1: find "${S}/bundled-libs" \! -name 'libbass.so' -delete
Prediction 1: find File -name Pattern -exec rm {} \; (-0.330887675285)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -not -path File -print | xargs -I {} rm {} (-0.37897709012)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            UNARYLOGICOP(-not)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -exec rm {} \; (-0.398421794176)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 192 (2)
English: Find files in the current directory tree whose names begin with "file" and whose size is 0, and remove them
GT Command 1: find -name 'file*' -size 0 -delete
GT Command 2: find . -name 'file*' -size 0 -print0 | xargs -0 rm
Prediction 1: find File -name Pattern -exec rm {} \; (-0.253810197115)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.259355604649)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -size Size -exec rm {} \; (-0.269617378712)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 193 (1)
English: find foo, Foo, FOo, FOO, etc.
GT Command 1: find . -iname foo
Prediction 1: find File -name Pattern (-0.201067045331)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.381324291229)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type f (-0.399102210999)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 194 (1)
English: search for all the rpm files in the file system which reside in the same partition as that of the root
GT Command 1: find / -xdev -name "*.rpm"
Prediction 1: find File -name Pattern (-0.228036865592)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print (-0.42360752821)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -fstype Unknown -name Pattern (-0.545902788639)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-fstype)
            ARGUMENT(Unknown)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 195 (1)
English: find all the files that have not been modifid in the last 31 days in a folder and delete them.print0 is used to preserve files that have new line character in their name
GT Command 1: find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
Prediction 1: find File -type f -mtime Time -exec rm {} \; (-0.137849599123)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mtime Time -exec rm {} \; (-0.221588134766)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time -print0 | xargs -0 -I {} rm {} (-0.232723027468)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 196 (1)
English: delete all files in the home directory which ahve the name core in them
GT Command 1: find ~/ -name 'core*' -exec rm {} \;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.136306464672)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.256074130535)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print | xargs -I {} rm {} (-0.264129310846)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 197 (1)
English: List all regular file owned by root with permissions 4000
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction 1: find File -type f -perm Permission -print (-0.292736113071)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -type f -perm Permission -ls (-0.329505413771)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-ls)

Correct template [y/n]: n
Prediction 3: find File -type f -perm Permission (-0.39747095108)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: n
Example 198 (1)
English: Search the home directory tree for all .txt files
GT Command 1: find ~/ -name '*.txt'
Prediction 1: find File -type f -name Pattern (-0.192888632417)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.291614353657)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.483278542757)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 199 (1)
English: display the 5 largest file in the current directory and its subdirectory.
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction 1: find File -type f -printf Pattern | sort -r -n | head -n Number (-0.28229290247)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-r)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -printf Pattern | sort -n | head -n Number (-0.292803913355)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -n -r | head -n Number (-0.29580616951)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Example 200 (1)
English: Find all the files in the current directory with “linkin park” in their names
GT Command 1: find . -maxdepth 1 -iname "*linkin park*"
Prediction 1: find File -name Pattern (-0.0722714364529)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.482713788748)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.611125051975)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 201 (1)
English: display all files ending with "ini" in current folder
GT Command 1: find . -type f -name '*.ini'
Prediction 1: find File -name Pattern (-0.0520627051592)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: y
Prediction 2: find File -name Pattern -print (-0.4538384974)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.719286382198)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 202 (1)
English: display all files in the current directory excluding those that are present in the directories whose name starts with "efence" and do not search in the sub directories
GT Command 1: find * -maxdepth 0 -name "efence*" -prune -o -print
Prediction 1: find File \( -name Pattern -prune -or -print \) (-0.256566882133)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.273897081614)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -print \) (-0.320853382349)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Example 203 (1)
English: show a count of the number of filenames ending in .txt in the current directory, without descending into sub-directories
GT Command 1: find . -maxdepth 1 -name \*.txt -print0 | grep -cz .
Prediction 1: find File -maxdepth Number -type d | wc -l (-0.343647658825)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(d)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -type d \) -printf Pattern | sort -n | tail -n Number (-0.44471308589)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            BINARYLOGICOP(-or)
                UNARYLOGICOP(-prune)
                    FLAG(-name)
                        ARGUMENT(Pattern)
                FLAG(-type)
                    ARGUMENT(d)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(tail)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -maxdepth Number -type f | wc -l (-0.445123463869)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: n
Example 204 (1)
English: display all instances of "foo.cpp" file in the current folder which are not in the sub directory tree ".svn"
GT Command 1: find . -name 'foo.cpp' '!' -path '.svn'
Prediction 1: find File -name Pattern -prune (-0.371760398149)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(-prune)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.376313239336)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -name Pattern ! -name Pattern (-0.377720266581)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        UNARYLOGICOP(!)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 205 (1)
English: Find .gif and .png image files in ~/Desktop and move them to the ~/Pictures directory.
GT Command 1: find ~/Desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/Pictures
Prediction 1: find File -name Pattern -exec mv {} File \; (-0.153289839625)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -exec mv {} File \; (-0.274506449699)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.316138237715)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 206 (3)
English: Find all mysong.ogg files/directories under your home directory
GT Command 1: find $HOME -name 'mysong.ogg'
GT Command 2: find ~/ -name '*.txt'
GT Command 3: find ~ -name "*.txt" -print
Prediction 1: find File -name Pattern (-0.0174637138844)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.700568139553)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern (-0.942185103893)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 207 (1)
English: List empty directories in the current directory tree
GT Command 1: find . -depth -empty -type d
Prediction 1: find File -type d -empty (-0.0519439280033)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -empty -type d (-0.511633336544)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-empty)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -empty -exec ls -l -d {} \; (-0.612560629845)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 208 (1)
English: find all the files which have a specific permission
GT Command 1: find -perm 777
Prediction 1: find File -perm Permission (-0.141396284103)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -perm Permission -print (-0.215975314379)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -perm Permission -print (-0.544173359871)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 209 (1)
English: search for a word in all the normal/regular files in the current folder
GT Command 1: find . -type f | xargs grep "text"
Prediction 1: find File -type f -exec grep Pattern {} \; (-0.167531371117)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -print0 | xargs -0 -I {} grep Pattern {} (-0.217840924859)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec grep -H Pattern {} \; (-0.245699599385)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 210 (1)
English: find  directory which case-insensitive name is too in currect directory
GT Command 1: find . -iname foo -type d
Prediction 1: find File -type d -name Pattern (-0.126799225807)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type d (-0.286990970373)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -name Pattern -print (-0.415259540081)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 211 (1)
English: find all the configuration files in a folder and do not search in the sub folder and display the last ten files.
GT Command 1: find /etc -maxdepth 1 -name "*.conf" | tail
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.462278217077)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -type f -printf Pattern | sort -n -r | head -n Number (-0.472956359386)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -n | head -n Number (-0.491425037384)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Example 212 (1)
English: To list the number of directories in the `/usr/share' directory tree
GT Command 1: find /usr/share \! -type f | wc -l
Prediction 1: find File -type d | wc -l (-0.210698023438)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -exec ls -l -d {} \; (-0.315167188644)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type d -exec ls -d -l -r -t {} \; | wc -l (-0.365848481655)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-exec::;)
                HEADCOMMAND(ls)
                    FLAG(-d)
                    FLAG(-l)
                    FLAG(-r)
                    FLAG(-t)
                    ARGUMENT({})
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Example 213 (1)
English: Find *.c files under $HOME and search for the string 'sprintf' in those files
GT Command 1: find $HOME -name '*.c' -print | xargs    grep -l sprintf
Prediction 1: find File -name Pattern -exec grep -l Pattern {} \; (-0.243159174919)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -H Pattern {} \; (-0.247024863958)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.254748404026)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 214 (1)
English: Find recursively all files changed within the last 5 minutes starting from directory b
GT Command 1: find b -cmin -5
Prediction 1: find File -newerct Time -print (-0.265438735485)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newerct)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -cmin Number -print (-0.376998364925)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -cmin Number (-0.578608930111)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Warning: -exec missing ending ';'
Example 215 (1)
English: find all the files with a specific name in the current folder and delete them
GT Command 1: find . -name “find name” -exec rm {}\ ;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.0978205949068)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.229249939322)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec rm {} \; (-0.288035273552)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 216 (1)
English: Show the last 10 .conf files found by `find' in the /etc directory
GT Command 1: find /etc -maxdepth 1 -name "*.conf" | tail
Prediction 1: find File -type f ! -perm Permission (-0.36628100276)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)

Correct template [y/n]: n
Prediction 2: find File -type f ! -perm Permission -print (-0.447194486856)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f ! -perm Permission | head (-0.466733723879)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            UNARYLOGICOP(!)
                FLAG(-perm)
                    ARGUMENT(Permission)
        HEADCOMMAND(head)

Correct template [y/n]: n
Example 217 (1)
English: find all the files ending with .mp3 or .jpg
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
Prediction 1: find File -name Pattern (-0.18492680788)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.331251204014)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | grep -v Pattern (-0.41181743145)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 218 (1)
English: change the ownership of all regular/normal files in the current directory(print0 is used to handle all the files which have spaces or new lines in their names)
GT Command 1: find . -type f -print0 | xargs -0 chown username
Prediction 1: find File -type f -exec chown Pattern {} \; (-0.196826025844)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -exec chmod Permission {} \; (-0.197871625423)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f | xargs -I {} chmod -v Permission {} (-0.238618567586)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                FLAG(-v)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 219 (1)
English: display all the files in the current folder that are at least one week old (7 days) but less then 30 days old
GT Command 1: find . -mtime +30 -a -mtime -7 -print0
Prediction 1: find File -mtime Time (-0.130702793598)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -mtime Time -print (-0.478959321976)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -ctime Time (-0.657702386379)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 220 (1)
English: find all '*.c' files under $HOME directory which context contains sprintf
GT Command 1: find $HOME -name '*.c' -print | xargs grep -l sprintf
Prediction 1: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.282433897257)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} grep -l Pattern {} (-0.299226611853)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec grep -l Pattern {} \; (-0.309401392937)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 221 (1)
English: Find *test* files/directories under current directory ensuring  that a directory is evaluated before its contents
GT Command 1: find -name "*test*" -depth
Prediction 1: find File -name Pattern -print0 | xargs -0 -I {} tar -r -v -f Unknown {} (-0.275802284479)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-r)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} grep -l Pattern {} (-0.277137219906)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.289771586657)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 222 (1)
English: Remove all files last modified more than 10 days ago from the current directory tree
GT Command 1: find . -mtime +10 | xargs rm
Prediction 1: find File -mtime Time -exec rm {} \; (-0.171273738146)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -mtime Time -exec rm {} \; (-0.181003451347)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time -print0 | xargs -0 -I {} rm {} (-0.274609029293)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 223 (1)
English: Search the current directory tree for files whose names begin with 'my'
GT Command 1: find . -name 'my*'
Prediction 1: find File -name Pattern (-0.0331090725958)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.579673647881)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.609194457531)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 224 (1)
English: find all files under the /etc/sysconfig directory that were accessed in the last 30 minutes
GT Command 1: find /etc/sysconfig -amin -30
Prediction 1: find File -amin Number (-0.0515686646104)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-amin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -amin Number -amin Number (-0.609056293964)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-amin)
            ARGUMENT(Number)
        FLAG(-amin)
            ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -amin Number -print (-0.756671130657)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-amin)
            ARGUMENT(Number)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 225 (1)
English: To match only hidden dot directories
GT Command 1: find /nas01/backups/home/user/ -type d -name ".*" -print0 -exec ls -lrt {} \;
Prediction 1: find File -type d (-0.0847138389945)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: n
Prediction 2: find File -type d -name Pattern (-0.490010529757)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d \( -name Pattern -or -name Pattern \) -print (-0.6294298172)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 226 (1)
English: find all files in the file system whose size is bigger than 3GB
GT Command 1: find / -size +3G
Prediction 1: find File -size Size (-0.112927429378)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -size Size -print (-0.300029724836)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -exec ls -l -h {} \; (-0.51030677557)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-h)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 227 (1)
English: display all pdf files in the current folder
GT Command 1: find . -name *.pdf
Prediction 1: find File -name Pattern (-0.115234553814)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.39938813448)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern (-0.549866378307)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 228 (1)
English: display all files in the current folder after pruning those in the current folder ( dot is the output of this command )
GT Command 1: find . -prune -print
Prediction 1: find File (-0.502341866493)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -print \) (-0.543958306313)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -print \) (-0.562384843826)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)

Correct template [y/n]: n
Example 229 (1)
English: find all the perl files in /var/www
GT Command 1: find /var/www/ -type f -name "*.pl" -print
Prediction 1: find File -type f -name Pattern (-0.230000853539)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -print (-0.374434262514)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -iname Pattern (-0.424907773733)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 230 (1)
English: Search the current directory and its sub-directories for any file that has "bsd" somewhere in its name.
GT Command 1: find . -name "*bsd*" -print
Prediction 1: find File -name Pattern (-0.0582092702389)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.43749037385)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.562011659145)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 231 (1)
English: find the count of text files that are present in the current working directory.
GT Command 1: find . -maxdepth 1 -name \*.txt -print0 | grep -cz .
Prediction 1: find File -type f -name Pattern -exec wc -l {} \; (-0.233822122216)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f | wc -l (-0.284250974655)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern | wc -l (-0.329476237297)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Example 232 (1)
English: returns a list of  files modification newer than poop
GT Command 1: find . -mnewer poop
Prediction 1: find File -newer File (-0.14473810792)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newer)
            ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -newer File -print (-0.471495240927)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newer)
            ARGUMENT(File)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -exec ls -l -h {} \; (-0.527181565762)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-h)
                ARGUMENT({})

Correct template [y/n]: n
Example 233 (2)
English: Remove the .jpg files from the current directory whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg"
GT Command 1: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg" -exec rm -rf {} \;
GT Command 2: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg" | xargs rm
Prediction 1: find File -name Pattern | xargs -I {} rm {} (-0.211584329605)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec rm {} \; (-0.307884484529)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -regex Pattern | xargs -I {} rm {} (-0.310119390488)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-regex)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 234 (1)
English: find all the text files which are present in the current directory excludinghidden files.
GT Command 1: find . -type f \( -iname "*.txt" ! -iname ".*" \)
Prediction 1: find File -name Pattern (-0.163049757481)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print (-0.321837842464)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.529760181904)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 235 (1)
English: Print the list of all directories under the current directory and below
GT Command 1: find ./ -type d -print
Prediction 1: find File -type d (-0.038526121527)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -exec ls -l -d {} \; (-0.550718188286)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -exec ls -d -l -r -t {} \; (-0.635182499886)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-d)
                FLAG(-l)
                FLAG(-r)
                FLAG(-t)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 236 (2)
English: Find *.conf files/directories only upto 2 levels down under /etc directory and show a few lines of output from the end
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
GT Command 2: find /etc -maxdepth 1 -name "*.conf" | tail
Prediction 1: find File -mindepth Number -maxdepth Number -type f -printf Pattern | sort -n -r | head -n Number (-0.438622146845)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-mindepth)
                ARGUMENT(Number)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 2: find File -mindepth Number -maxdepth Number -type f -printf Pattern | sort -n | tail -n Number (-0.445328891277)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-mindepth)
                ARGUMENT(Number)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(tail)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -mindepth Number -maxdepth Number -name Pattern -printf Pattern | sort -n -r | head File (-0.454390823841)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-mindepth)
                ARGUMENT(Number)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            ARGUMENT(File)

Correct template [y/n]: n
Example 237 (1)
English: find all regular/normal files in a folder which have specific permission
GT Command 1: find /data -type f -perm 400 -print
Prediction 1: find File -type f -perm Permission (-0.244701758027)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -perm Permission -type f (-0.267569541931)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -perm Permission -print (-0.313437312841)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 238 (4)
English: Search the current directory tree for files whose name is ".note", case insensitive
GT Command 1: find . -iname '.note' | sort
GT Command 2: find . -iname '.note'
GT Command 3: find -type d -exec find {} -maxdepth 1 \! -type d -iname '.note' \;
GT Command 4: find . -iname '.note' | sort -r
Prediction 1: find File -iname Pattern (-0.0212489347905)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -iname Pattern -or -iname Pattern \) (-0.67097812891)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-iname)
                ARGUMENT(Pattern)
            FLAG(-iname)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -type f -iname Pattern (-0.707628071308)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 239 (1)
English: Search for file names with "bad" characters in the current directory and delete the files.
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.129041314125)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.24264203012)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec rm -f {} \; (-0.340930640697)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 240 (1)
English: find all the normal files in the home directory which have been accesed in the last 30 days with the size greater than or equal to 100k.
GT Command 1: find $HOME -type f -atime +30 -size 100k
Prediction 1: find File -type f -atime Time -exec ls -l {} \; (-0.342032283545)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -mtime Time -print0 | xargs -0 -I {} ls {} (-0.385268867016)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -size Size -exec ls -l -h {} \; (-0.397871285677)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-h)
                ARGUMENT({})

Correct template [y/n]: n
Example 241 (1)
English: Search the current directory tree for the files with extension "trc" and list them if they are more than three days old
GT Command 1: find . -name "*.trc" -ctime +3 -exec ls -l {} \;
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.368814319372)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -mtime Time (-0.369214981794)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.412620455027)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 242 (2)
English: find all files in a folder that have a specific word in their name
GT Command 1: find /etc -iregex '.*xt.*'
GT Command 2: find /usr/local/games -name "*xpilot*"
Prediction 1: find File -name Pattern (-0.107378184795)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.457567632198)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.462771952152)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 243 (1)
English: find files in current directory that names are game
GT Command 1: find . -name game
Prediction 1: find File -name Pattern (-0.046487480402)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.488931655884)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.602367222309)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 244 (1)
English: Search for *pattern* in and below current directory
GT Command 1: find -name "*pattern*"
Prediction 1: find File -name Pattern (-0.112888291478)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.464552491903)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -name Pattern (-0.491009742022)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 245 (1)
English: find all the files in current folder ending with "ini" and search for a word in all these files
GT Command 1: find . -name *.ini -exec grep -w PROJECT_A {} \; -print | grep ini
Prediction 1: find File -name Pattern -exec grep -l Pattern {} \; (-0.226598232985)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -H Pattern {} \; (-0.240343421698)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.290011435747)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 246 (1)
English: find all files having certain word in its name in the current folder
GT Command 1: find . -name "*bsd*" -print
Prediction 1: find File -type f -name Pattern -exec grep Pattern {} \; (-0.204013571143)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.284977734089)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.305881589651)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 247 (1)
English: Search /usr, /home, /tmp for *.jar files
GT Command 1: find /usr /home  /tmp -name "*.jar"
Prediction 1: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.323300510645)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec grep -H Pattern {} \; (-0.363703638315)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -exec grep -H -n Pattern {} \; (-0.370563060045)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 248 (1)
English: find all  tools generated files  a.out , *.o and core dump files which not required to us these all junk files & delete from  current  directory .
GT Command 1: find . \( -name a.out -o -name '*.' -o -name  'core' \) -exec rm {} \;
Prediction 1: find File -name Pattern -exec cp {} File \; (-0.331612825394)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -exec grep -l Pattern {} \; (-0.347552835941)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec rm {} \; (-0.363336622715)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 249 (1)
English: find all the empty directories in the current folder and all its sub directories too
GT Command 1: find . -depth -empty -type d
Prediction 1: find File -type d -empty (-0.143239408731)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -empty -type d (-0.393238395452)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-empty)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mindepth Number -type d -empty (-0.408140093088)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-empty)

Correct template [y/n]: n
Example 250 (1)
English: find all files that are readable or writable by their owner
GT Command 1: find . -perm +600 -print
Prediction 1: find File -perm Permission (-0.0573339536786)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -perm Permission -print (-0.492983669043)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -perm Permission (-0.74302893877)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Example 251 (1)
English: Remove all files whose names begin with "no-such-thing" in the /home/peter directory tree
GT Command 1: find /home/peter -name no-such-thing* |xargs rm
Prediction 1: find File -name Pattern -exec rm {} \; (-0.101189516485)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.198718056083)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} rm {} (-0.203255847096)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 252 (2)
English: Change file permissions on all regular files within a directory:
GT Command 1: find /path/to/directory -type f -exec chmod 644 {} +
GT Command 2: find /path/to/directory -type f -exec chmod 644 {} +
Prediction 1: find File -type f -exec chmod Permission {} \; (-0.0741691589355)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f | xargs -I {} chmod -v Permission {} (-0.244166478515)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                FLAG(-v)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} chmod Permission {} (-0.256627261639)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 253 (1)
English: Find files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names
GT Command 1: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$"
Prediction 1: find File -regextype Pattern -regex Pattern (-0.288518667221)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-regextype)
            ARGUMENT(Pattern)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.515975773335)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -regex Pattern (-0.517843067646)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 254 (1)
English: Find all the files which are changed in last 1 hour
GT Command 1: find / -cmin -60
Prediction 1: find File -mtime Time (-0.322792559862)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -ctime Time (-0.331587821245)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 3: find File -cmin Number (-0.435205370188)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Example 255 (1)
English: search for a directory in the current folder and delete it
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Prediction 1: find File -type d -name Pattern -exec rm {} \; (-0.254368722439)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d -exec rm -r -f {} \; (-0.273485451937)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-r)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -name Pattern -delete (-0.292276293039)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-delete)

Correct template [y/n]: y
Correct command [y/n]: n
Example 256 (1)
English: find all the files which are greater than 50MB and less than 100MB.
GT Command 1: find / -size +50M -size -100M
Prediction 1: find File -size Size -size Size (-0.188881710172)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -size Size -size Size -print (-0.281282603741)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -exec ls -l -h {} \; (-0.426533222198)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-h)
                ARGUMENT({})

Correct template [y/n]: n
Example 257 (2)
English: create a tar ball of all pdf files in current folder
GT Command 1: find . -name *.pdf | xargs tar czvf /root/Desktop/evidence/pdf.tar
GT Command 2: find . -name '*.pdf' -print0 | tar czvf pdf.tar --null -T -
Prediction 1: find File -name Pattern -print0 | xargs -0 -I {} tar -u -f Unknown {} (-0.214462593198)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-u)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.246091336012)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -r -v -f Unknown {} (-0.266318738461)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-r)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 258 (1)
English: Find directories with permissions 777 and change them to 755 recursively
GT Command 1: find /home -type d -perm 777 -print -exec chmod 755 {} \;
Prediction 1: find File -type d -exec chmod Permission {} \; (-0.135124236345)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d -print0 | xargs -0 -I {} chmod Permission {} (-0.205629989505)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type d | xargs -I {} chmod -v Permission {} (-0.212587431073)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                FLAG(-v)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 259 (1)
English: change the permissions of all the regular/normal files to 644 in the folder /home/nobody/public_html
GT Command 1: find /home/nobody/public_html -type f -exec chmod 644 {} \;
Prediction 1: find File -type f -exec chmod Permission {} \; (-0.052442971617)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -perm Permission -print -exec chmod Permission {} \; (-0.280878812075)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} chmod Permission {} (-0.282865971327)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 260 (1)
English: find all normal/regular files in current folder which end with "~" or which begin and end with "#" and and and delete them
GT Command 1: find . -maxdepth 1 -type f -name '*~' -delete  -or -name '#*#' -delete
Prediction 1: find File -type f -name Pattern -exec rm {} \; (-0.158898726106)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern -exec rm -f {} \; (-0.19644023478)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec rm {} \; (-0.231592416763)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 261 (1)
English: Search the current directory tree for TXT files skipping hidden ones
GT Command 1: find . -type f \( -iname "*.txt" ! -iname ".*" \)
Prediction 1: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.178855285048)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -print \) (-0.259862601757)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) (-0.27967196703)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 262 (1)
English: Print the list of directories that are present in the /mnt/raid directory tree
GT Command 1: find /mnt/raid -type d
Prediction 1: find File -type d (-0.0796377882361)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -exec ls -l -d {} \; (-0.515970766544)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                FLAG(-d)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -print (-0.551352918148)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 263 (1)
English: Find image files and move them to the pictures directory
GT Command 1: find ~/Desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/Pictures
Prediction 1: find File -name Pattern -exec mv {} File \; (-0.136925935745)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern -exec mv {} File \; (-0.282601028681)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.29423853755)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 264 (5)
English: find  files which full path name is foo/bar under foo directory and print
GT Command 1: find foo -path foo/bar -print
GT Command 2: find foo -path /tmp/foo/bar -print
GT Command 3: find /tmp/foo -path /tmp/foo/bar -print
GT Command 4: find foo -path /tmp/foo/bar -print
GT Command 5: find foo -path /tmp/foo/bar -print
Prediction 1: find File -path File (-0.363007158041)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-path)
            ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -path File -print (-0.378120243549)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-path)
            ARGUMENT(File)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -path File -prune -name Pattern -print (-0.523473739624)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(-prune)
            FLAG(-path)
                ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 265 (1)
English: find all files ending with a specific word in current folder
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
Prediction 1: find File -name Pattern (-0.0666652917862)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.393642693758)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.564784407616)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 266 (1)
English: Display the files which are accessed after the modification of a give file.
GT Command 1: find -anewer "sum.java"
Prediction 1: find File -newer File (-0.299205809832)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newer)
            ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File -cnewer File (-0.41242736578)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cnewer)
            ARGUMENT(File)

Correct template [y/n]: n
Prediction 3: find File \( -newer File -and -user Pattern \) -print (-0.705281555653)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-and)
            FLAG(-newer)
                ARGUMENT(File)
            FLAG(-user)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 267 (1)
English: Move all files matching patterns "*.old", ".old", ".*.old" from the current directory to directory "../old/"
GT Command 1: find . ! -name . -prune -name '*.old' -exec mv {} ../old/ \;
Prediction 1: find File -name Pattern -exec mv {} File \; (-0.233759328723)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.316522866488)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -exec mv {} File \; (-0.326073974371)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Example 268 (1)
English: Search for files whose names match "*test*", a directory bing evaluated before its contents
GT Command 1: find -name "*test*" -depth
Prediction 1: find File -name Pattern (-0.316788583994)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.416673570871)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.430328965187)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 269 (1)
English: find all normal/regular files in current folder which end with "~" or which begin and end with "#" and and move them to  temp folder
GT Command 1: find . -maxdepth 1 -type f  -name '*~' -exec mv {} /tmp/ \;  -or  -name '#*#' -exec mv {} /tmp/ \;
Prediction 1: find File -name Pattern -exec mv {} File \; (-0.22891677916)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern -exec mv {} File \; (-0.285010010004)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec grep -l Pattern {} \; (-0.333326667547)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 270 (1)
English: find  file which case-insensitive name is too in currect directory
GT Command 1: find . -iname foo
Prediction 1: find File -name Pattern (-0.100496426225)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.458693176508)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.517937541008)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 271 (1)
English: Find deb packages in the current directory recursively
GT Command 1: find . -type f -and -iname "*.deb"
Prediction 1: find File \( -path File -prune -or -print \) (-0.4958152771)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.546055972576)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.558435797691)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 272 (1)
English: find all the files starting with "config" in the folder Symfony ( case insensitive search)
GT Command 1: find Symfony -iname '*config*';
Prediction 1: find File -name Pattern (-0.0351485125721)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.534984529018)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.717250406742)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 273 (1)
English: Remove regular files changed more than 15 days ago from the /tmp directory tree
GT Command 1: find /tmp/ -ctime +15 -type f -exec rm {} \;
Prediction 1: find File -type f -ctime Time | xargs -I {} rm {} (-0.131147995591)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ctime)
                ARGUMENT(Time)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -ctime Time -exec rm {} \; (-0.186883881688)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -ctime Time -print0 | xargs -0 -I {} rm {} (-0.260946303606)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ctime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 274 (1)
English: Search for the string 'foo' in *.html files under /usr/src/linux directory
GT Command 1: grep foo `find /usr/src/linux -name "*.html"`
Prediction 1: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.207988157868)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep Pattern {} \; (-0.259706020355)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec grep -H -n Pattern {} \; (-0.303834527731)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 275 (1)
English: Find files under /usr that are the same age or older than file `FirstFile'
GT Command 1: find /usr ! -newer /FirstFile -print
Prediction 1: find File -size Size (-0.369089782238)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Prediction 2: find File -type f -size Size (-0.400709062815)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Prediction 3: find File -type f -newer File (-0.470929026604)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-newer)
            ARGUMENT(File)

Correct template [y/n]: n
Example 276 (1)
English: Find directories under maximum 1 level down the directory $dir with 100 permission that are owned by the user $username
GT Command 1: find $dir -maxdepth 1 -type d -user $username -perm -100
Prediction 1: find File -maxdepth Number -type d ! -perm Permission (-0.3175085783)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(d)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)

Correct template [y/n]: n
Prediction 2: find File -maxdepth Number -mindepth Number -type d -exec chmod Permission {} \; (-0.338792860508)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -maxdepth Number -type d -exec chmod Permission {} \; (-0.353812754154)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 277 (1)
English: find all the files (under root file system /) that were changed within the last 24 hours
GT Command 1: find / -ctime -1
Prediction 1: find File -cmin Number (-0.299549341202)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: n
Prediction 2: find File -ctime Time (-0.364159762859)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time (-0.444829702377)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 278 (1)
English: display all the regular/normal files in the folder /path/ which have not been modified today ( from day start ie, 00:00 )
GT Command 1: find /path/ -type f -daystart -mtime +0
Prediction 1: find File -type f -mtime Time (-0.0706436261535)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -daystart -mtime Time (-0.374782055616)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-daystart)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -ctime Time (-0.506957650185)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 279 (1)
English: search for all the mp3 files in the folder /home/you which have been accessed 24 ago
GT Command 1: find /home/you -iname “*.mp3” -atime 01 -type -f
Prediction 1: find File -name Pattern -atime Time (-0.253865718842)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -atime Time -print (-0.3246743083)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -atime Time -name Pattern (-0.428153634071)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 280 (1)
English: Find text in whole directory tree
GT Command 1: find . -type f | xargs grep "text"
Prediction 1: find File -name Pattern (-0.0734879523516)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print (-0.456732749939)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.495023578405)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 281 (1)
English: To list all files in the `/usr/share' directory tree with the text `farm' somewhere in their name
GT Command 1: find /usr/share -name '*farm*'
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.304069757462)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print (-0.337305665016)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.344736725092)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 282 (1)
English: list all CSS files (and directories ending with “.css”) under the current directory
GT Command 1: find . -name "*.css"
Prediction 1: find File -name Pattern (-0.220684856176)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.330169469118)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -type f (-0.421101570129)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Example 283 (1)
English: Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding anything in '*.pdf'  before it'ss passed to find.
GT Command 1: find . -name '*.pdf' -print
Prediction 1: find File -name Pattern -print (-0.159464597702)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.366278141737)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep -H Pattern {} \; (-0.432418525219)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 284 (1)
English: find all sqlite files in the current directory.
GT Command 1: find ./ -name "*.sqlite"
Prediction 1: find File -type f -name Pattern (-0.290326356888)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.326773554087)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.500708222389)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 285 (1)
English: list regular file which file name end with 'cache' 'xml' or 'html' in current directory
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
Prediction 1: find File -type f \( -name Pattern -or -name Pattern \) -print (-0.292306095362)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -type f \( -name Pattern -or -name Pattern \) (-0.305427104235)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.339584052563)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 286 (1)
English: list all *.txt files in the user's home directory.
GT Command 1: find ~/ -name '*.txt'
Prediction 1: find File -name Pattern -exec ls -l {} \; (-0.356577664614)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.429914087057)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec ls {} \; (-0.455983638763)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 287 (1)
English: find files in a folder using name patterns
GT Command 1: find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'
Prediction 1: find File -name Pattern (-0.076166421175)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.54724240303)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.616625070572)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 288 (1)
English: Find all files/directories named Root under current directory and copy them to newRoot
GT Command 1: find . -name Root | xargs cp newRoot
Prediction 1: find File -name Pattern -exec cp {} File \; (-0.189327955246)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} cp {} File (-0.310364991426)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec grep -l Pattern {} \; | wc -l (-0.343608528376)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-l)
                    ARGUMENT(Pattern)
                    ARGUMENT({})
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: n
Example 289 (1)
English: Find all *.tex files/directories in maximum 2 levels down the current directory
GT Command 1: find . -maxdepth 2 -name '*.tex'
Prediction 1: find File -maxdepth Number -name Pattern (-0.229144439101)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -maxdepth Number -type f -name Pattern (-0.263452798128)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -maxdepth Number -mindepth Number -name Pattern (-0.33488419652)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-mindepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 290 (1)
English: display all files in the folder bar only in the path /foo/bar/myfile (no output is generated)
GT Command 1: find bar -path /foo/bar/myfile -print
Prediction 1: find File -path File (-0.0746841877699)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-path)
            ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -path File -prune -or -print \) (-0.391581356525)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -not -path File (-0.548784434795)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(-not)
            FLAG(-path)
                ARGUMENT(File)

Correct template [y/n]: n
Example 291 (1)
English: Move all Emacs backup files from the current directory tree to ~/backups/
GT Command 1: find . -name '*~' -print 0 | xargs -0 -I % cp % ~/backups
Prediction 1: find File -name Pattern -exec mv {} File \; (-0.121624313295)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.264739781618)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -u -f Unknown {} (-0.267259418964)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-u)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 292 (1)
English: Find files with 777 permissions and change them to 755
GT Command 1: find / -type f -perm 0777 -print -exec chmod 755 {} \;
Prediction 1: find File -type f -exec chmod Permission {} \; (-0.188754871488)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -perm Permission -print -exec chmod Permission {} \; (-0.205226942897)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -perm Permission -exec chmod Permission {} \; (-0.236957833171)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 293 (1)
English: find foo, Foo, FOo, FOO, etc., but only dirs
GT Command 1: find . -iname foo -type d
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.379658162594)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File -name Pattern \( -name Pattern -or -name Pattern \) -print (-0.389006406069)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.471035808325)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 294 (1)
English: display all the regular files in the folder "$(FOLDER)" which are modified in the last $(RETENTION)*24 hours and excluding hidden files
GT Command 1: find ${FOLDER} -type f ! -name \".*\" -mtime -${RETENTION}
Prediction 1: find File -type f -mtime Time -print0 | xargs -0 -I {} ls {} (-0.300161272287)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(ls)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -mtime Time -print0 | xargs -0 -I {} grep -l Pattern {} (-0.338648945093)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -mtime Time -print0 | xargs -0 -I {} grep Pattern {} (-0.356752544641)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 295 (1)
English: Print the name of "file1" if this file is newer than "file2"
GT Command 1: find file1 -prune -newer file2
Prediction 1: find File -newer File (-0.18190202117)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newer)
            ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -newer File -and ! -newer File \) (-0.424625098705)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-and)
            FLAG(-newer)
                ARGUMENT(File)
            UNARYLOGICOP(!)
                FLAG(-newer)
                    ARGUMENT(File)

Correct template [y/n]: n
Prediction 3: find File \( -newer File -or -name Pattern \) -print (-0.46880826354)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-newer)
                ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 296 (1)
English: find file which case-insensitive name is foo in current directory.
GT Command 1: find . -iname foo
Prediction 1: find File -name Pattern (-0.196578741074)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.224902272224)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.624147474766)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 297 (1)
English: find all the pdf files in current folder and create a tar ball of all these files
GT Command 1: find . -iname "*.pdf" -exec tar --append --file=somefile.tar {} \;
Prediction 1: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.293065786362)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} tar -u -f Unknown {} (-0.295540183783)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-u)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec mv {} File \; (-0.348212003708)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: n
Example 298 (1)
English: find all the files that have been changed today
GT Command 1: find . -ctime 0 -type f
Prediction 1: find File -type f (-0.2098723948)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Prediction 2: find File -type f -ctime Time (-0.317008316517)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time (-0.596435844898)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 299 (1)
English: Remove all "work" directories residing in /usr/ports and below
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Prediction 1: find File -type d -name Pattern -exec rm {} \; (-0.157793194056)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d -name Pattern -exec rm -f {} \; (-0.231766849756)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -type d -exec rm {} \; (-0.263577997684)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 300 (1)
English: Find the files which have the name "java" in it and then display only the files which have "class" word in them?
GT Command 1: find -name "*java*" -exec grep -H class {} \;
Prediction 1: find File -name Pattern -print0 | xargs -0 -I {} grep -l Pattern {} (-0.271065145731)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -l Pattern {} \; (-0.275747597218)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} grep -l Pattern {} (-0.296936392784)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 301 (1)
English: search the entire file system for a specific file
GT Command 1: find / -name document -print
Prediction 1: find File -name Pattern -print (-0.18427477777)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.376174002886)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep -H Pattern {} \; (-0.502755463123)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 302 (1)
English: display a long listing of all the files in the current folder that have been accessed in today from the start of the day
GT Command 1: find -daystart   -atime 0 -ls
Prediction 1: find File -atime Time -exec ls -l {} \; (-0.189354851842)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -atime Time -exec ls -l {} \; (-0.324752449989)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -atime Time -ls (-0.354131996632)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-ls)

Correct template [y/n]: y
Correct command [y/n]: n
Example 303 (1)
English: Find files that are 0 bytes in size in the current directory and remove them
GT Command 1: find . -maxdepth 1 -size 0c -exec rm {} \;
Prediction 1: find File -type f -size Size -exec rm {} \; (-0.109567284584)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -size Size -exec rm {} + (-0.262671172619)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::+)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -size Size -exec rm {} \; (-0.31960490346)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 304 (1)
English: Show all files that have not been accessed in the $HOME directory for 30 days or more
GT Command 1: find $HOME -atime +30
Prediction 1: find File -type f -atime Time (-0.274962574244)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -atime Time (-0.361173510551)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -atime Time -print (-0.396373212337)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 305 (1)
English: Find all *.texi files in /usr/local/doc
GT Command 1: find /usr/local/doc -name '*.texi'
Prediction 1: find File -name Pattern (-0.145044207573)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.33453348279)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.468468040228)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 306 (1)
English: find all the directories in current folder which start with test
GT Command 1: find . -type d -name "test*"
Prediction 1: find File -type d -name Pattern (-0.112956523895)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type d (-0.254710584879)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -name Pattern -print (-0.460804730654)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 307 (1)
English: Find a 400 permission file under /data directory
GT Command 1: find /data -type f -perm 400 -print -quit
Prediction 1: find File -type f -perm Permission -print (-0.0958369448781)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -perm Permission (-0.381641119719)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f ! -perm Permission (-0.45906239748)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)

Correct template [y/n]: n
Example 308 (1)
English: find all text files in current folder; which have been modified exactly 5 days ago
GT Command 1: find . –name "*.txt" –mtime 5
Prediction 1: find File -mtime Time -name Pattern (-0.195575937629)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -mtime Time (-0.322076648474)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time -name Pattern -print (-0.382300406694)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 309 (1)
English: Search for directory foo ignoring case
GT Command 1: find . -iname foo -type d
Prediction 1: find File -type d -iname Pattern (-0.27952682972)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.324543178082)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -type f -iname Pattern (-0.422018408775)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 310 (1)
English: find all the files in the current directory with the name "wagoneer" which are in the current device.
GT Command 1: find . -xdev -name "wagoneer*" -print
Prediction 1: find File -name Pattern (-0.0738569572568)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -name Pattern -print (-0.503585636616)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.518716871738)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 311 (2)
English: Move all regular files under current directory to ./newdir
GT Command 1: find ./ -type f -print | xargs    -l56 -i mv -f {} ./newdir
GT Command 2: find ./ -type f -print | xargs    -i mv -f {} ./newdir
Prediction 1: find File -type f -exec mv {} File \; (-0.156484767795)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -print0 | xargs -0 -I {} mv {} File (-0.296015411615)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.299296021461)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 312 (1)
English: get all the files that are exactly 30 days old
GT Command 1: find . -mtime 30 -print
Prediction 1: find File -mtime Time (-0.111007429659)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -ctime Time (-0.471022546291)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time (-0.655175745487)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Example 313 (1)
English: Find all *.txt files that reside under and below /home/wsuNID/
GT Command 1: find /home/wsuNID/ -name "*.txt"
Prediction 1: find File -name Pattern (-0.0646092072129)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.417329221964)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep Pattern {} \; (-0.553763151169)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 314 (1)
English: Locate files that reside in the home directory and have not been accessed in the past 30 days
GT Command 1: find $HOME -atime +30
Prediction 1: find File -atime Time (-0.0542255714536)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -atime Time -print (-0.698516249657)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -atime Time (-0.702046096325)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Example 315 (1)
English: find an image in a specific folder
GT Command 1: find /home/username/public_html/images -name "articles.jpg"
Prediction 1: find File -type f -name Pattern (-0.260993182659)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.343519330025)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -iname Pattern (-0.508142769337)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 316 (1)
English: Count the number of lines in all files in the xargstest/ directory tree that match pattern 'file??'
GT Command 1: find xargstest/ -name 'file??' | sort | xargs wc -l
Prediction 1: find File -name Pattern | wc -l (-0.192030131817)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec wc -l {} \; (-0.197409063578)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} wc -l {} (-0.249264135957)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 317 (1)
English: find all the configuration files in a folder and do not search in the sub folder's directories and display the last ten files.
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
Prediction 1: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.440977603197)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.450769603252)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -n -r | head -n Number (-0.475388497114)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Example 318 (3)
English: Find all *.cgi files/directories under current directory and change their permission to 755
GT Command 1: find . -name '*.cgi' -print0 | xargs -0 chmod 755
GT Command 2: find . -name '*.cgi' -print0 | xargs -0 chmod 775
GT Command 3: find . -iname '*.cgi' | xargs chmod 755
Prediction 1: find File -name Pattern -exec chmod Permission {} \; (-0.116122089326)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -exec chmod Permission {} \; (-0.24552321434)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -perm Permission -exec chmod Permission {} \; (-0.250595122576)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 319 (1)
English: Find files with 002 permission in entire file system with the null character as the delimiter
GT Command 1: find / -type f -perm -002 -print0
Prediction 1: find File -type f -perm Permission -print -exec chmod Permission {} \; (-0.216571509838)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -perm Permission -exec chmod Permission {} \; (-0.242500051856)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} chmod Permission {} (-0.27655389905)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 320 (2)
English: search for a file in current folder excluding the search in the folder ./ignored_directory
GT Command 1: find . -path ./ignored_directory -prune -o -name fileName.txt -print
GT Command 2: find /path/to/folder -path "*/ignored_directory" -prune -o -name fileName.txt -print
Prediction 1: find File \( -path File -prune -or -print \) (-0.29203286767)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -print \) (-0.296017438173)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -name Pattern \) -print (-0.332931220531)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 321 (1)
English: find all the findme.txt files in the file system
GT Command 1: find / -name findme.txt -type f -print
Prediction 1: find File -name Pattern (-0.153328105807)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.43367254734)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -perm Permission (-0.500524282455)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: n
Example 322 (1)
English: Find all the files called FindCommandExamples.txt of owner root
GT Command 1: find / -user root -name FindCommandExamples.txt
Prediction 1: find File -user Pattern -name Pattern (-0.159632384777)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -user Pattern -iname Pattern (-0.364378362894)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -user Pattern -name Pattern -print (-0.399564743042)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 323 (1)
English: Find all 400 permission files under /data directory and change their permission to 755
GT Command 1: find /data -type f -perm 400 -print | xargs chmod 755
Prediction 1: find File -type f -perm Permission -print -exec chmod Permission {} \; (-0.152120709419)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -perm Permission -exec chmod Permission {} \; (-0.174562364817)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec chmod Permission {} \; (-0.227887898684)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 324 (1)
English: Search the current directory tree for all image files
GT Command 1: find . -type f -regex ".*\.\(jpg\|jpeg\|gif\|png\|JPG\|JPEG\|GIF\|PNG\)"
Prediction 1: find File -type f (-0.141212180257)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -print \) (-0.499945223331)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.566438734531)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 325 (1)
English: Count the number of files named `file1'
GT Command 1: find -name file1 | wc -l
Prediction 1: find File -name Pattern | wc -l (-0.174374446273)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f | wc -l (-0.215478554368)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern | wc -l (-0.311713933945)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Example 326 (1)
English: Remove all CVS directories in the current directory tree
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
Prediction 1: find File -type d -name Pattern -exec rm {} \; (-0.191676825285)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d -name Pattern -exec rm -f {} \; (-0.239412844181)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type d | xargs -I {} rm {} (-0.294648706913)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 327 (2)
English: Find all files under and below the current working directory with the word California in the file, and count the number of lines in the output
GT Command 1: find . -type f -exec grep -n California {} \; -print | wc -l
GT Command 2: find . -type f -exec grep California {} \; -print | wc -l
Prediction 1: find File -type f -print0 | xargs -0 -I {} wc -l {} (-0.269830048084)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -exec grep -l Pattern {} \; | wc -l (-0.292281091213)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-l)
                    ARGUMENT(Pattern)
                    ARGUMENT({})
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec grep -H Pattern {} \; | wc -l (-0.29305049777)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-exec::;)
                HEADCOMMAND(grep)
                    FLAG(-H)
                    ARGUMENT(Pattern)
                    ARGUMENT({})
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Example 328 (1)
English: display all the files in the current directory excluding the paths "targert", "tools", "git"
GT Command 1: find . \( ! -path "*target*" -a ! -path "*tools*" -a ! -path "*.git*" -print \)
Prediction 1: find File \( -path File -prune -or -path File -prune -or -print \) (-0.323083758354)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -print \) (-0.356238037348)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -not -path File -not -path File (-0.38930273056)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(-not)
            FLAG(-path)
                ARGUMENT(File)
        UNARYLOGICOP(-not)
            FLAG(-path)
                ARGUMENT(File)

Correct template [y/n]: n
Example 329 (1)
English: Find all files that belong to a particular group.
GT Command 1: find /var/www -group developer
Prediction 1: find File -group Pattern (-0.0679515227675)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-group)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -group Pattern -print (-0.486739397049)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-group)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -nogroup -print (-0.900829195976)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-nogroup)
        FLAG(-print)

Correct template [y/n]: n
Example 330 (1)
English: List all files matching regular expression '*foo*' in a human-readable form
GT Command 1: find . -name '*foo*' -exec ls -lah {} \;
Prediction 1: find File -regex Pattern (-0.117413692176)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.443942904472)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.522469878197)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 331 (1)
English: Find the top 5 big files
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction 1: find File -type f -size Size (-0.496936112642)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: n
Prediction 2: find File -type f -printf Pattern | sort -n -r | head -n Number (-0.522629082203)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -n -r | head File (-0.533304393291)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            ARGUMENT(File)

Correct template [y/n]: n
Example 332 (1)
English: Find regular files under and below /path that match pattern "???-???_[a-zA-Z]*_[0-9]*_*.???"
GT Command 1: find /path -type f -name "???-???_[a-zA-Z]*_[0-9]*_*.???"
Prediction 1: find File -type f (-0.185805425048)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.385190159082)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec grep -H Pattern {} \; (-0.454737186432)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 333 (1)
English: Display the 5 largest files in the current directory and its sub-directories.
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction 1: find File -type f -printf Pattern | sort -n -r | head -n Number (-0.28419277072)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -printf Pattern | sort -n | head -n Number (-0.29431116581)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -type f -printf Pattern | sort -r -n | head -n Number (-0.316328823566)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-r)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Example 334 (1)
English: find all the files with the name september ( case insensitive )
GT Command 1: find -iname september
Prediction 1: find File -name Pattern (-0.0530402362347)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.569494843483)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.658668994904)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 335 (1)
English: Search for regular expression 'expr' in all .c and .h files from the current directory tree
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction 1: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.256591588259)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -exec grep -H -n Pattern {} \; (-0.262578308582)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep -H Pattern {} \; (-0.317712038755)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 336 (1)
English: remove all the files in the present directory which have special characters in their name and do not search in the sub directories of the current folder.
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Prediction 1: find File -maxdepth Number -name Pattern -print0 | xargs -0 -I {} rm {} (-0.241356506944)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -maxdepth Number -name Pattern -exec rm {} \; (-0.313844412565)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-maxdepth)
            ARGUMENT(Number)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) -exec rm {} \; (-0.31616845727)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 337 (1)
English: Find all regular files in and below the home directory that have been modified in the last 90 minutes
GT Command 1: find ~ -type f -mmin -90
Prediction 1: find File -type f -mmin Number (-0.213872626424)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mmin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mmin Number -type f (-0.347811460495)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mmin)
            ARGUMENT(Number)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time (-0.417632371187)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 338 (1)
English: list all zero-length files under the current directory
GT Command 1: find . -empty -exec ls {} \;
Prediction 1: find File -type f -name Pattern (-0.341441661119)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern -exec ls -l {} \; (-0.35833594203)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern (-0.429054141045)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 339 (1)
English: find all the files in the current directory that have the word "bash" in their name
GT Command 1: find . -name "*bash*"
Prediction 1: find File -name Pattern (-0.12926851213)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.402621120214)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.447889178991)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 340 (1)
English: Search the current directory tree for *cache, *xml, and *html files
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
Prediction 1: find File \( -name Pattern -or -name Pattern \) (-0.202454507351)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) -print (-0.283438920975)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.409716039896)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 341 (1)
English: display all regular files in the folder image-folder
GT Command 1: find image-folder/ -type f
Prediction 1: find File -type f (-0.0102689219639)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -print (-0.850543677807)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -type f -or -name Pattern \) -print (-0.924632072449)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 342 (1)
English: find all the files  a folder which have a specific word in their name
GT Command 1: find /usr/share -name '*farm*'
Prediction 1: find File -name Pattern (-0.113993823528)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.412462443113)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern (-0.49272352457)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 343 (1)
English: count the lines of java code for all the java files in the current directory
GT Command 1: find . -name "*.java" -print0 | xargs -0 wc
Prediction 1: find File -name Pattern | wc -l (-0.283923596144)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(wc)
            FLAG(-l)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec wc -l {} \; (-0.287881493568)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec wc -l {} \; (-0.315457046032)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(wc)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 344 (1)
English: display a long list of all the files in the file system which belong to a specific user and which have suid set
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction 1: find File -user Pattern -exec ls -l {} \; (-0.347637563944)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -user Pattern -perm Permission -print -exec ls -l {} \; (-0.390332847834)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -user Pattern -perm Permission -exec ls -l {} \; (-0.413193702698)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(ls)
                FLAG(-l)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 345 (1)
English: Find files under [directory] that match 'pattern_to_INCLUDE' in their names without descending into directories that match 'pattern_to_exclude' and 'another_pattern_to_exclude', then search for 'pattern' in those files
GT Command 1: find [directory] -name "pattern_to_exclude" -prune -o -name "another_pattern_to_exclude" -prune -o -name "pattern_to_INCLUDE" -print0 | xargs -0 -I FILENAME grep -IR "pattern" FILENAME
Prediction 1: find File -type f -name Pattern -exec grep -H Pattern {} \; (-0.313541531563)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern -exec grep -l Pattern {} \; (-0.325457185507)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -name Pattern -exec grep -H -n Pattern {} \; (-0.353603988886)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                FLAG(-n)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 346 (1)
English: find directory which case-insensitive name is foo in current directory.
GT Command 1: find . -iname foo -type d
Prediction 1: find File -name Pattern -type d (-0.174914464355)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type d -name Pattern (-0.217213705182)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -iname Pattern (-0.417863219976)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 347 (1)
English: Find files ending with .mp3 and .jpg
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
Prediction 1: find File -name Pattern -exec grep -l Pattern {} \; (-0.351922780275)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern | grep -v Pattern (-0.410972654819)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec grep -H Pattern {} \; (-0.415118843317)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 348 (1)
English: find all the files that have been changed exactly 24 hours ago
GT Command 1: find . -ctime 1 -type f
Prediction 1: find File -ctime Time (-0.299802005291)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -ctime Time (-0.380103856325)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -cmin Number (-0.49076962471)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-cmin)
            ARGUMENT(Number)

Correct template [y/n]: n
Example 349 (1)
English: search for a file in current folder excluding those that are present in a specific path
GT Command 1: find /path/to/folder -name fileName.txt -not -path "*/ignored_directory/*"
Prediction 1: find File -not -path File -not -path File (-0.302419602871)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(-not)
            FLAG(-path)
                ARGUMENT(File)
        UNARYLOGICOP(-not)
            FLAG(-path)
                ARGUMENT(File)

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -path File -prune -or -print \) (-0.328541636467)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -name Pattern \) -print (-0.336095064878)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 350 (8)
English: Delete all .svn files/directories under current directory
GT Command 1: find . -name .svn -delete
GT Command 2: find . -name .svn | xargs rm -fr
GT Command 3: find . -name .svn |xargs rm -rf
GT Command 4: find . -depth -name .svn -exec rm -fr {} \;
GT Command 5: find . -name .svn -exec rm -rf '{}' \;
GT Command 6: find . -name .svn -exec rm -v {} \;
GT Command 7: find . -name .svn -exec rm -rf {} +
GT Command 8: find . -name .svn -exec rm -rf {} \;
Prediction 1: find File -name Pattern -delete (-0.117589667439)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-delete)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.195493519306)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -exec rm {} \; (-0.246932610869)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 351 (1)
English: change the ownership of all directories in the current folder
GT Command 1: find . -type d -exec chown username {} \;
Prediction 1: find File -type d -exec chmod Permission {} \; (-0.13662725687)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d | xargs -I {} chmod -v Permission {} (-0.216924786568)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                FLAG(-v)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type d -print0 | xargs -0 -I {} chmod Permission {} (-0.218085840344)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 352 (1)
English: find the largest file in the current directory and sub directories
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -1
Prediction 1: find File -maxdepth Number -type f -printf Pattern | sort -n -r | head -n Number (-0.305680215359)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
            FLAG(-r)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -maxdepth Number -type f -printf Pattern | sort -n | head -n Number (-0.305735170841)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(head)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Prediction 3: find File -maxdepth Number -type f -printf Pattern | sort -n | tail -n Number (-0.314843863249)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-maxdepth)
                ARGUMENT(Number)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-printf)
                ARGUMENT(Pattern)
        HEADCOMMAND(sort)
            FLAG(-n)
        HEADCOMMAND(tail)
            FLAG(-n)
                ARGUMENT(Number)

Correct template [y/n]: n
Example 353 (1)
English: Find all files in your home directory and below that are exactly 100M.
GT Command 1: find ~ -size 100M
Prediction 1: find File -size Size (-0.111619152129)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f (-0.89461684227)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Prediction 3: find File -type f -size Size (-0.910618066788)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-size)
            ARGUMENT(Size)

Correct template [y/n]: y
Correct command [y/n]: n
Example 354 (1)
English: find files in the current directory and sub-directories, that were accessed within last hour
GT Command 1: find -amin -60
Prediction 1: find File -atime Time (-0.198305383325)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -amin Number (-0.296615242958)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-amin)
            ARGUMENT(Number)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -atime Time -print (-0.57746732235)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-print)

Correct template [y/n]: n
Example 355 (1)
English: display a list of all the files in the file system which do not belong to any user and search only in jfs and jfs2 file systems
GT Command 1: find / -nouser \( -fstype jfs -o -fstype jfs2 \) -ls
Prediction 1: find File \( -path File -prune -or -print \) (-0.338822960854)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -user Pattern \) -print (-0.421508520842)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-user)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -path File -prune -or -print \) (-0.456232070923)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Example 356 (1)
English: Search the .c files residing in the Lib/ directory tree for lines beginning with "PyErr"
GT Command 1: find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
Prediction 1: find File -name Pattern -exec grep Pattern {} \; (-0.203002154827)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -H Pattern {} \; (-0.243429392576)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} grep Pattern {} (-0.268771916628)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 357 (1)
English: Search the /usr/local/doc directory tree for .texi files
GT Command 1: find /usr/local/doc -name '*.texi'
Prediction 1: find File -type f -name Pattern (-0.210949286819)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.39718362689)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.441558688879)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 358 (1)
English: display all the files in the current folder which start with either "fileA_" or "fileB_"
GT Command 1: find . -name 'fileA_*' -o -name 'fileB_*'
Prediction 1: find File \( -name Pattern -or -name Pattern \) (-0.289032012224)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.302892923355)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) -print (-0.384718954563)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 359 (1)
English: find all the directories in the folder /raid with the extension local_sd_customize.
GT Command 1: find /raid -type d -name ".local_sd_customize" -print
Prediction 1: find File -type d -name Pattern (-0.0812269970775)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type d (-0.262429624796)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(d)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -name Pattern -print (-0.479857295752)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 360 (1)
English: Find all HTML files starting with letter 'a' in the current directory and below ignoring the case
GT Command 1: find . -iname a\*.html
Prediction 1: find File -iname Pattern (-0.0551320016384)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern (-0.549570918083)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern -exec grep Pattern {} \; (-0.735212028027)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 361 (1)
English: save the list of the files in the current directory to a file “foo”
GT Command 1: find . -fprint foo
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.322462886572)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File ! -name Pattern -print (-0.392594486475)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(!)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -name Pattern -print (-0.419854819775)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 362 (1)
English: display all the files in the current folder excluding search in the paths containing the folder having the word "mmm"
GT Command 1: find . ! -path *mmm*
Prediction 1: find File \( -path File -prune -or -name Pattern \) -print (-0.345860004425)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.38874194026)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( ! -path File -prune -or -name Pattern \) -print (-0.401876717806)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                UNARYLOGICOP(!)
                    FLAG(-path)
                        ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 363 (1)
English: remove all the files in current folder which have the extension "DS_Store"
GT Command 1: find . -name ".DS_Store" -exec rm {} \;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.0966325998306)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.197650015354)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} rm {} (-0.232556939125)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 364 (1)
English: find the file "filename.txt" in the usr folder
GT Command 1: find /usr -name filename.txt -print
Prediction 1: find File -name Pattern (-0.239066049457)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.348629683256)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.410228997469)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 365 (1)
English: Find all CSS files
GT Command 1: find . -name "*.css"
Prediction 1: find File -name Pattern (-0.20051600039)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern (-0.324308365583)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -perm Permission (-0.451695948839)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: n
Example 366 (1)
English: search for the file in the entire file system which has the words "filename" in its name
GT Command 1: find / -name ”*filename*”
Prediction 1: find File -name Pattern (-0.150215744972)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -iname Pattern (-0.399634033442)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.413428932428)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 367 (1)
English: search for all perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified yesterday
GT Command 1: find /nas/projects/mgmt/scripts/perl -mtime 1 -daystart -iname "*.pl"
Prediction 1: find File -type f -name Pattern -mtime Time (-0.380268126726)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -mtime Time -name Pattern (-0.397597402334)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time (-0.42338681221)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 368 (1)
English: Find all files and directories in the current directory tree with "linkin park" in their names and copy them to /Users/tommye/Desktop/LP
GT Command 1: find . -iname "*linkin park*" -exec cp -r {} /Users/tommye/Desktop/LP \;
Prediction 1: find File -name Pattern -exec cp {} File \; (-0.240095585585)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern | xargs -I {} rm {} (-0.293715834618)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern | xargs -I {} cp {} File (-0.294586569071)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Example 369 (1)
English: copy all the files with the extension ".type" from one folder to a target directory
GT Command 1: find "$sourcedir" -type f -name "*.type" | xargs cp -t targetdir
Prediction 1: find File -type f -name Pattern -exec cp {} File \; (-0.152424886823)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -print0 | xargs -0 -I {} cp {} File (-0.312621951103)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -print0 | xargs -0 -I {} cp -a --target-directory=dir_txt/ --parents {} (-0.326471954584)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(cp)
                FLAG(-a)
                FLAG(--target-directory=dir_txt/)
                FLAG(--parents)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 370 (1)
English: Find all *.py files under and below the current directory and search them for "xrange"
GT Command 1: find . -name '*.py' -exec grep --color 'xrange' {} +
Prediction 1: find File -name Pattern -exec grep Pattern {} \; (-0.179817557335)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -l Pattern {} \; (-0.255099415779)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep -H Pattern {} \; (-0.27756601572)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 371 (1)
English: Find all files that belongs to user Tecmint under /home directory
GT Command 1: find /home -user tecmint
Prediction 1: find File -user Pattern (-0.126721218228)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -user Pattern -print (-0.232640266418)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -user Pattern -exec chown Pattern {} \; (-0.480409741402)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 372 (2)
English: Find all *.csv files under /foo/bar and move them to some_dir
GT Command 1: find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir
GT Command 2: find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir
Prediction 1: find File -name Pattern -exec mv {} File \; (-0.086184233427)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -exec mv {} File \; (-0.29588201642)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.333469569683)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 373 (1)
English: force delete all the files that have been modified in the last 3 days
GT Command 1: find . -mtime -3 -exec rm -rf {} \;
Prediction 1: find File -mtime Time -exec rm {} \; (-0.148833528161)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -mtime Time -print0 | xargs -0 -I {} rm {} (-0.260736107826)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -mtime Time | xargs -I {} rm {} (-0.289167642593)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-mtime)
                ARGUMENT(Time)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 374 (1)
English: Find all *.tex regular files under current directory
GT Command 1: find . -type f -name "*.tex"
Prediction 1: find File -type f -name Pattern (-0.0984313264489)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f (-0.383413881063)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f (-0.446911096573)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Example 375 (1)
English: Find all files and directories in the current directory tree except those whose name is "dirname", case insensitive
GT Command 1: find ./ -iname ! -iname dirname
Prediction 1: find File -iname Pattern (-0.0605074390769)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 2: find File \( -iname Pattern -or -iname Pattern \) (-0.498143404722)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-iname)
                ARGUMENT(Pattern)
            FLAG(-iname)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -iname Pattern -or -iname Pattern \) -print (-0.585903048515)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-iname)
                ARGUMENT(Pattern)
            FLAG(-iname)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 376 (1)
English: move files accessed more than one day ago to directory TMP
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \; # mv files older then 1 day to dir TMP
Prediction 1: find File -type f -atime Time -exec rm {} \; (-0.244682237506)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -atime Time -exec mv {} File \; (-0.381055057049)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(mv)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -atime Time -print0 | xargs -0 -I {} tar -c -v -f Unknown {} (-0.391023278236)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-atime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(tar)
                FLAG(-c)
                FLAG(-v)
                FLAG(-f)
                    ARGUMENT(Unknown)
                ARGUMENT({})

Correct template [y/n]: n
Example 377 (3)
English: delete all the files ending with "~" in current folder
GT Command 1: find . -name "*~" -print | xargs rm
GT Command 2: find -name '*~' -print0 | xargs -0 rm
GT Command 3: find -name '*~' -delete
Prediction 1: find File -name Pattern -exec rm {} \; (-0.163796961308)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.213371738791)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern -exec rm {} \; (-0.264045089483)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 378 (1)
English: display all the directories in the folder /path/to/dest except tmp and cache directories
GT Command 1: find /path/to/dest -type d \( ! -name tmp \) -o \( ! -name cache \) -print
Prediction 1: find File -type d \( -name Pattern -prune -or -name Pattern \) -print (-0.383165240288)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 2: find File \( -path File -prune -or -name Pattern \) -print (-0.401774764061)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File \( -path File -prune -or -print \) (-0.401807010174)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: n
Example 379 (1)
English: search for the file "name_to_find" in the home folder
GT Command 1: find ~ -name "name_to_find"
Prediction 1: find File -name Pattern (-0.0647469684482)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.398750245571)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -iname Pattern (-0.680592000484)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-iname)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Example 380 (1)
English: find all occurences of a file in the file system which belong to the user root
GT Command 1: find / -user root -name FindCommandExamples.txt
Prediction 1: find File -user Pattern -print (-0.351643741131)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -user Pattern -perm Permission -print (-0.358360499144)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: n
Prediction 3: find File -user Pattern -exec chown Pattern {} \; (-0.381448656321)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-user)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(chown)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 381 (1)
English: Delete files containing whitespaces without recursion
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Prediction 1: find File -type f -exec rm {} \; (-0.255582898855)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -name Pattern -exec rm {} \; (-0.273391664028)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -print0 | xargs -0 -I {} rm {} (-0.293057322502)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 382 (1)
English: Find all *.c files under and below the current directory that contain "hogehoge"
GT Command 1: find . -name \*.c | xargs grep hogehoge
Prediction 1: find File -name Pattern -exec grep Pattern {} \; (-0.20932418108)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep Pattern {} \; -print (-0.249513834715)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} grep -l Pattern {} (-0.311627328396)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 383 (1)
English: search for the word "redeem reward" in all the regular/normal files in the current folder
GT Command 1: find . -type f -exec grep -i “redeem reward” {} \; -print
Prediction 1: find File -type f -exec grep -H Pattern {} \; (-0.199315428734)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -exec grep Pattern {} \; (-0.241096496582)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -exec grep Pattern {} \; -print (-0.279216229916)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 384 (1)
English: Find files on the system created during the last 50 days
GT Command 1: find / -ctime -50
Prediction 1: find File -type f -mtime Time (-0.341681927443)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)

Correct template [y/n]: n
Prediction 2: find File -type f -ctime Time (-0.368254542351)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-ctime)
            ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -atime Time (-0.454671293497)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-atime)
            ARGUMENT(Time)

Correct template [y/n]: n
Example 385 (1)
English: Search the current directory for files whose names start with my
GT Command 1: find . -name 'my*'
Prediction 1: find File -name Pattern (-0.0578928291798)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -type f (-0.500910103321)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print (-0.517364919186)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Example 386 (1)
English: search for the word "mysql" in all the files in the current containing the word "notes" in their name. print0 is used to handle files  with newlines in their names or those which have only spaces in their names
GT Command 1: find . -iname "*notes*" -print0 | xargs -I{} -0 grep -i mysql "{}"
Prediction 1: find File -name Pattern -exec grep -H Pattern {} \; (-0.218301251531)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-H)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -exec grep -l Pattern {} \; (-0.311279952526)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} grep -l Pattern {} (-0.317975968122)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 387 (1)
English: find all the files in the current directory and print them excluding those that have the name SCCS.
GT Command 1: find . -print -o -name SCCS -prune
Prediction 1: find File \( -name Pattern -prune -or -print \) (-0.227620601654)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -path File -prune -or -print \) (-0.302343338728)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -name Pattern -prune -or -name Pattern \) -print (-0.318818092346)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-name)
                    ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 388 (1)
English: delete all the regular files in the temp folder which have not been changed in the last 15*24 hours
GT Command 1: find /tmp/ -ctime +15 -type f -exec rm {} \;
Prediction 1: find File -type f -mtime Time -exec rm {} \; (-0.16761174798)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-mtime)
            ARGUMENT(Time)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -ctime Time | xargs -I {} rm {} (-0.18482466042)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-ctime)
                ARGUMENT(Time)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -mtime Time -print0 | xargs -0 -I {} rm {} (-0.221985727549)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-mtime)
                ARGUMENT(Time)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 389 (1)
English: Find files in the current directory tree which have permissions rwx for user and rw for group and others
GT Command 1: find . -perm 766
Prediction 1: find File -type f -perm Permission -print -exec chmod Permission {} \; (-0.260888725519)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -perm Permission -print -exec chmod Permission {} \; (-0.274086833)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f -perm Permission -exec chmod Permission {} \; (-0.275896579027)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-exec::;)
            HEADCOMMAND(chmod)
                ARGUMENT(Permission)
                ARGUMENT({})

Correct template [y/n]: n
Example 390 (1)
English: Find files in the current directory whose names begin with "file" and remove them
GT Command 1: find . -name file* -maxdepth 1 -exec rm {} \;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.134889602661)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.245535686612)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print | xargs -I {} rm {} (-0.288969248533)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 391 (1)
English: Search the current directory tree for regular files whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg"
GT Command 1: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg"
Prediction 1: find File -type f -regex Pattern (-0.09746632725)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -regex Pattern (-0.458561122417)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-regex)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File \( -name Pattern -or -name Pattern \) (-0.466715216637)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Example 392 (1)
English: Delete all .svn directories under current directory
GT Command 1: find . -type d -name .svn -print0|xargs -0 rm -rf
Prediction 1: find File -type d -name Pattern -exec rm {} \; (-0.226640611887)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d -name Pattern -delete (-0.230513423681)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-delete)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type d -name Pattern -exec rm -r -f {} \; (-0.272244811058)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-r)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 393 (2)
English: Find all directories named CVS, and deletes them and their contents.
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
GT Command 2: find . -type d -name CVS -exec rm -r {} \;
Prediction 1: find File -type d -name Pattern -exec rm -f {} \; (-0.205395400524)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type d -name Pattern -exec rm {} \; (-0.211829259992)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type d -name Pattern -exec rm -r -f {} \; (-0.221842721105)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-r)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 394 (2)
English: Delete all files in the current directory tree whose names end with ~
GT Command 1: find . -name "*~" -delete
GT Command 2: find . -name "*~" -exec rm {} \;
Prediction 1: find File -name Pattern -exec rm {} \; (-0.160773232579)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} rm {} (-0.185078516603)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -delete (-0.250907719135)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-delete)

Correct template [y/n]: y
Correct command [y/n]: n
Example 395 (1)
English: display all the files in the current folder which have been modified between two dates
GT Command 1: find . -newermt “Sep 1 2006” -and \! -newermt “Sep 10 2006”
Prediction 1: find File -newermt Time ! -newermt Time (-0.371844768524)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newermt)
            ARGUMENT(Time)
        UNARYLOGICOP(!)
            FLAG(-newermt)
                ARGUMENT(Time)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File ! -newermt Time ! -newermt Time (-0.512807369232)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        UNARYLOGICOP(!)
            FLAG(-newermt)
                ARGUMENT(Time)
        UNARYLOGICOP(!)
            FLAG(-newermt)
                ARGUMENT(Time)

Correct template [y/n]: n
Prediction 3: find File -newermt Time ! -newer File (-0.516210913658)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-newermt)
            ARGUMENT(Time)
        UNARYLOGICOP(!)
            FLAG(-newer)
                ARGUMENT(File)

Correct template [y/n]: n
Example 396 (1)
English: Find all *.txt and *.json files
GT Command 1: find . -type f \( -name "*.txt" -o -name "*.json" \)
Prediction 1: find File \( -name Pattern -or -name Pattern \) -print (-0.311372101307)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.3288449049)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File \( -path File -prune -or -name Pattern \) -print (-0.429632216692)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            UNARYLOGICOP(-prune)
                FLAG(-path)
                    ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: n
Example 397 (1)
English: dispaly all the empty regular/normal files in the current folder
GT Command 1: find . -type f -empty
Prediction 1: find File -type f -empty (-0.15840895474)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-empty)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f (-0.27428406477)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)

Correct template [y/n]: n
Prediction 3: find File -type f -printf Pattern (-0.586502015591)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-printf)
            ARGUMENT(Pattern)

Correct template [y/n]: n
Example 398 (3)
English: Find all TXT files in the current directory and copy them to directory "$HOME/newdir"
GT Command 1: find "$HOME" -name '*.txt' -type f -print0 | xargs -0 cp -ut "$HOME/newdir"
GT Command 2: find "$HOME" -name '*.txt' -type f -print0 | sort -zu | xargs -0 cp -t "$HOME/newdir"
GT Command 3: find "$HOME" -name '*.txt' -type f -not -path "$HOME/newdir/*" -print0 | xargs -0 cp -t "$HOME/newdir"
Prediction 1: find File -name Pattern -exec cp {} File \; (-0.143002033234)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print0 | xargs -0 -I {} cp {} File (-0.270209431648)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(cp)
                ARGUMENT({})
                ARGUMENT(File)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -print0 | xargs -0 -I {} cp -a --target-directory=dir_txt/ --parents {} (-0.326132714748)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(cp)
                FLAG(-a)
                FLAG(--target-directory=dir_txt/)
                FLAG(--parents)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 399 (1)
English: Find all flies under current directory excluding *.png files and print the file paths (with match count) that match the case insensitive regex 'foo=' in their contents
GT Command 1: find . -not -name '*.png' -o -type f -print | xargs grep -icl "foo="
Prediction 1: find File -type f | grep -v Pattern | grep -v Pattern | grep -v Pattern | xargs -I {} grep Pattern {} (-0.358036100864)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -type f -print0 | xargs -0 -I {} grep -l -i Pattern {} (-0.358421415091)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                FLAG(-i)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -type f | grep -v Pattern | grep -v Pattern | xargs -I {} grep -l Pattern {} (-0.369229257107)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-type)
                ARGUMENT(f)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)
        HEADCOMMAND(grep)
            FLAG(-v)
            ARGUMENT(Pattern)
        HEADCOMMAND(xargs)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 400 (2)
English: Find all 400 permission files under /data directory
GT Command 1: find /data -type f -perm 400
GT Command 2: find /data -type f -perm 400 -print
Prediction 1: find File -type f -perm Permission -print (-0.0982324555516)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -perm Permission (-0.286920160055)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-perm)
            ARGUMENT(Permission)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f ! -perm Permission (-0.42195725441)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        UNARYLOGICOP(!)
            FLAG(-perm)
                ARGUMENT(Permission)

Correct template [y/n]: n
Example 401 (1)
English: remove all subdirectories named "CVS" under current dir
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
Prediction 1: find File -type d -name Pattern -exec rm -f {} \; (-0.256044507027)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(d)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 2: find File -name Pattern -type f -print0 | xargs -0 -I {} rm {} (-0.27053502202)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-type)
                ARGUMENT(f)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Prediction 3: find File -name Pattern -type d -print0 | xargs -0 -I {} rm {} (-0.279093205929)
AST: 
ROOT()
    PIPELINE()
        HEADCOMMAND(find)
            ARGUMENT(File)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-type)
                ARGUMENT(d)
            FLAG(-print0)
        HEADCOMMAND(xargs)
            FLAG(-0)
            FLAG(-I)
                ARGUMENT({})
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: n
Example 402 (1)
English: Search directory trees /usr/local/man and /opt/local/man for files whose names begin with 'my'
GT Command 1: find /usr/local/man /opt/local/man -name 'my*'
Prediction 1: find File File -name Pattern (-0.359688639641)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File \( -name Pattern -or -name Pattern \) (-0.402885913849)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        BINARYLOGICOP(-or)
            FLAG(-name)
                ARGUMENT(Pattern)
            FLAG(-name)
                ARGUMENT(Pattern)

Correct template [y/n]: n
Prediction 3: find File File File (-0.432748347521)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        ARGUMENT(File)
        ARGUMENT(File)

Correct template [y/n]: n
Example 403 (1)
English: Only find files ending with .jpg
GT Command 1: find . -name '*.jpg' -print
Prediction 1: find File -name Pattern (-0.0765047073364)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.379855334759)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec grep -l Pattern {} \; (-0.641198396683)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(grep)
                FLAG(-l)
                ARGUMENT(Pattern)
                ARGUMENT({})

Correct template [y/n]: n
Example 404 (1)
English: Remove Mac OS X Desktop Services Store files
GT Command 1: find . -name ".DS_Store" -exec rm {} \;
Prediction 1: find File -type f -name Pattern -exec rm -f {} \; (-0.21872729063)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                FLAG(-f)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -type f -name Pattern -exec rm {} \; (-0.249381944537)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -name Pattern -exec rm {} \; (-0.254842847586)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-exec::;)
            HEADCOMMAND(rm)
                ARGUMENT({})

Correct template [y/n]: y
Correct command [y/n]: n
Example 405 (1)
English: find all the files in the current folder which have a specific word in their name
GT Command 1: find . -name '*foo*'
Prediction 1: find File -name Pattern (-0.109217807651)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 2: find File -name Pattern -print (-0.370303422213)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-name)
            ARGUMENT(Pattern)
        FLAG(-print)

Correct template [y/n]: y
Correct command [y/n]: n
Prediction 3: find File -type f -name Pattern (-0.524268567562)
AST: 
ROOT()
    HEADCOMMAND(find)
        ARGUMENT(File)
        FLAG(-type)
            ARGUMENT(f)
        FLAG(-name)
            ARGUMENT(Pattern)

Correct template [y/n]: y
Correct command [y/n]: n

405 examples evaluated
Top 1 Template Match Score = 0.67
Top 1 String Match Score = 0.00
Top 5 Template Match Score = 0.80
Top 5 String Match Score = 0.00
Top 10 Template Match Score = 0.80
Top 10 String Match Score = 0.00

