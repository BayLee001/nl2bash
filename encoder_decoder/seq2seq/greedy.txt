Unrecognized cmd_option type argument_option
Reading data from ../../data/bash
Saving models to ../../model/seq2seq
creating bucket 0 (5, 20)...
creating bucket 1 (10, 20)...
creating bucket 2 (15, 30)...
creating bucket 3 (20, 30)...
creating bucket 4 (30, 40)...
creating bucket 5 (40, 40)...
rnn_decoder/decoder_cell/Gates/Linear/Matrix:0
rnn_decoder/decoder_cell/Gates/Linear/Bias:0
rnn_decoder/decoder_cell/Candidate/Linear/Matrix:0
rnn_decoder/decoder_cell/Candidate/Linear/Bias:0
Reading model parameters from ../../model/seq2seq/bash-rnn-gru-16-0.7-1.0-0.7-1.0/translate.ckpt-5
../../data/bash
Loading data from ../../data/bash
  reading data line 1000
  reading data line 2000
  reading data line 3000
  reading data line 4000
  6 data points read.
  6 data points read.
  6 data points read.
spell correction: kat -> cat
spell correction: shs -> ssh
spell correction: currect -> current
spell correction: ahve -> have
spell correction: currect -> current
spell correction: dispaly -> display
spell correction: configration -> configuration
spell correction: subtitute -> substitute
spell correction: horus -> hours
spell correction: confined -> contained
spell correction: dispaly -> display
spell correction: listig -> listing
spell correction: netinst -> nextint
spell correction: flies -> files
spell correction: modifid -> modified
spell correction: accesed -> accessed
spell correction: ffiles -> files
removing record of bash-rnn-gru-16-0.7-1.0-0.7-1.0-greedy--1 from database
Example 0:0
Original English: List all zero-length files
English: list all ARGUMENT_UNK file
GT Command 1: find . -empty -exec ls {} \;
Prediction: find . -name _REGEX ([-5.99426794])
Example 0:1
Original English: Find all CSS files
English: find all CSS file
GT Command 1: find . -name "*.css"
Prediction: find . -name _REGEX ([-7.46950483])
Example 1:0
Original English: Find all directories named CVS, and deletes them and their contents.
English: find all directory named CVS and deletes and content
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
GT Command 2: find . -type d -name CVS -exec rm -r {} \;
Prediction: find . -type d -name _REGEX -print | xargs -I {} mv {} _PARAMETER ([-13.08935738])
Example 1:1
Original English: List all empty files in the current directory tree
English: list all empty file in current directory tree
GT Command 1: find . -empty -exec ls {} \;
GT Command 2: find . -type f -empty
Prediction: find . -maxdepth _NUM -empty ([-6.31550217])
Example 1:2
Original English: Find files with 777 permissions and change them to 755
English: find file with _NUM permission and change to _NUM
GT Command 1: find / -type f -perm 0777 -print -exec chmod 755 {} \;
Prediction: find . -perm 644 -type f -exec chmod 400 {} \; ([-7.50033569])
Example 1:3
Original English: Find files owner by user shs
English: find file owner by user ARGUMENT_UNK
GT Command 1: find -user shs
Prediction: find . -user tommye ([-5.67722416])
Example 1:4
Original English: find all the directories in the folder /raid with the extension local_sd_customize.
English: find all directory in folder _REGEX with extension _REGEX
GT Command 1: find /raid -type d -name ".local_sd_customize" -print
Prediction: find _REGEX -type d -name _REGEX ([-4.95180368])
Example 1:5
Original English: Find all symbolic links under the current folder and below
English: find all symbolic link under current folder and below
GT Command 1: find –L –xtype l
Prediction: find . -type l ([-1.36556792])
Example 1:6
Original English: find files in a folder using name patterns
English: find file in folder using name pattern
GT Command 1: find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'
Prediction: find . -name _REGEX ([-4.09308815])
Example 1:7
Original English: Search the current directory tree for all image files
English: search current directory tree for all image file
GT Command 1: find . -type f -regex ".*\.\(jpg\|jpeg\|gif\|png\|JPG\|JPEG\|GIF\|PNG\)"
Prediction: find . -name _REGEX ([-6.25459957])
Example 1:8
Original English: list all the sqlite files in the current folder
English: list all ARGUMENT_UNK file in current folder
GT Command 1: find ./ -name "*.sqlite" -ls
Prediction: find . -name _REGEX -print ([-7.73732233])
Example 1:9
Original English: find directory which case-insensitive name is foo in current directory.
English: find directory case-insensitive name foo in current directory
GT Command 1: find . -iname foo -type d
Prediction: find . -type d -name _REGEX ([-9.84089947])
Example 1:10
Original English: find all the text files in the home directory
English: find all text file in home directory
GT Command 1: find ~/ -name '*.txt'
GT Command 2: find ~/ -name '*.txt'
Prediction: find ${HOME} -name _REGEX ([-6.80150461])
Example 1:11
Original English: List root's regular files with permissions 4000
English: list _REGEX regular file with permission _NUM
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction: find . -type f -perm 777 -exec ls -l {} \; ([-6.0819664])
Example 1:12
Original English: Find every vim undo file in the current directory tree
English: find every ARGUMENT_UNK undo file in current directory tree
GT Command 1: find -type f -iname '*.un~'
Prediction: find . -name _REGEX | xargs grep -l thing ([-10.40483379])
Example 1:13
Original English: Delete files containing whitespaces without recursion
English: delete file containing whitespaces without ARGUMENT_UNK
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Prediction: find . -type f -delete ([-10.2943821])
Example 1:14
Original English: find the largest file in the current directory and sub directories
English: find largest file in current directory and sub directory
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -1
Prediction: find . -maxdepth _NUM -name _REGEX -print ([-8.64533424])
Example 1:15
Original English: List all files except for those in directory SCCS
English: list all file except for in directory SCCS
GT Command 1: find . -print -o -name SCCS -prune
Prediction: find . -type d -name _REGEX -print ([-14.00042725])
Example 1:16
Original English: dispaly all the empty regular/normal files in the current folder
English: display all empty _REGEX file in current folder
GT Command 1: find . -type f -empty
Prediction: find . -type f -empty ([-6.70812798])
Example 1:17
Original English: find all regular/normal files in a folder which have specific permission
English: find all _REGEX file in folder specific permission
GT Command 1: find /data -type f -perm 400 -print
Prediction: find _PARAMETER -perm -u+r ([-9.92840099])
Example 1:18
Original English: Remove Mac OS X Desktop Services Store files
English: remove mac ARGUMENT_UNK X ARGUMENT_UNK ARGUMENT_UNK ARGUMENT_UNK file
GT Command 1: find . -name ".DS_Store" -exec rm {} \;
Prediction: find . -name _REGEX -type f -print0 | xargs -0 rm ([-7.60727119])
Example 1:19
Original English: Search the current directory recursively for files containing "string"
English: search current directory recursively for file containing _REGEX
GT Command 1: find . -type f -exec grep -l 'string' {} \;
Prediction: find . -type f -print0 | xargs -0 grep -l _REGEX ([-6.33705187])
Example 1:20
Original English: List all .svn files/directories under current directory
English: list all _REGEX _REGEX under current directory
GT Command 1: find . -name .svn -exec ls {} \;
Prediction: find . -name _REGEX ([-8.31526375])
Example 1:21
Original English: display all directories in the entire file system
English: display all directory in entire file system
GT Command 1: find / -type d -print
Prediction: find / -type d ([-3.71046162])
Example 1:22
Original English: Delete all files in the "${S}/bundled-libs" folder except "libbass.so"
English: delete all file in _PARAMETER folder except _REGEX
GT Command 1: find "${S}/bundled-libs" \! -name 'libbass.so' -delete
Prediction: find _PARAMETER -name _REGEX -delete ([-12.15488529])
Example 1:23
Original English: Find a 400 permission file under /data directory
English: find _NUM permission file under _REGEX directory
GT Command 1: find /data -type f -perm 400 -print -quit
Prediction: find _REGEX -type f -perm 777 ([-6.51934814])
Example 1:24
Original English: Remove all broken symbolic links in /usr/ports/packages
English: remove all broken symbolic link in _REGEX
GT Command 1: find -L /usr/ports/packages -type l -delete
Prediction: find _REGEX -type l | xargs rm ([-6.93215847])
Example 1:25
Original English: find all the directories in current folder which start with test
English: find all directory in current folder start with test
GT Command 1: find . -type d -name "test*"
Prediction: find . -type d -name _REGEX ([-5.7553134])
Example 1:26
Original English: Search the current directory tree for *bash* files
English: search current directory tree for _REGEX file
GT Command 1: find . -name "*bash*"
Prediction: find . -name _REGEX ([-3.73562145])
Example 1:27
Original English: find all the files that have been changed exactly 24 hours ago
English: find all file changed exactly _NUM hour ago
GT Command 1: find . -ctime 1 -type f
Prediction: find . -type f -ctime -_NUM ([-5.7902379])
Example 1:28
Original English: search for a directory in the current folder and delete it
English: search for directory in current folder and delete
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Prediction: find . -type d -name _REGEX -delete ([-11.49223423])
Example 1:29
Original English: find all fonts which belong to a specific user
English: find all ARGUMENT_UNK belong to specific user
GT Command 1: find /usr/local/fonts -user warwick
Prediction: find . -user michel ([-3.3783443])
Example 1:30
Original English: find / -size +50M -size -100M
English: find _REGEX ARGUMENT_UNK _REGEX ARGUMENT_UNK ARGUMENT_UNK
GT Command 1: find all the files which are greater than 50MB and less than 100MB.
Prediction: find . -name _REGEX ([-6.44081783])
Example 1:31
Original English: display list of all the hidden files in the home folder
English: display list of all hidden file in home folder
GT Command 1: find $HOME -name ".*" -ls
Prediction: find ${HOME} -name _REGEX ([-6.42636919])
Example 1:32
Original English: Move all regular files under current directory to ./newdir
English: move all regular file under current directory to _REGEX
GT Command 1: find ./ -type f -print | xargs    -l56 -i mv -f {} ./newdir
GT Command 2: find ./ -type f -print | xargs    -i mv -f {} ./newdir
Prediction: find . -type f -print0 | xargs -0 -I {} mv {} _PARAMETER ([-7.56606483])
Example 1:33
Original English: display all files ending with "ini" in current folder
English: display all file ending with _REGEX in current folder
GT Command 1: find . -type f -name '*.ini'
Prediction: find . -name _REGEX ([-6.51932716])
Example 1:34
Original English: find all the log files in the file system
English: find all log file in file system
GT Command 1: find / -name "*.log"
Prediction: find / -name _REGEX ([-7.35492897])
Example 1:35
Original English: search for *.log files starting from /
English: search for _REGEX file starting from _REGEX
GT Command 1: find / -name "*.log"
Prediction: find / -name _REGEX ([-2.91077828])
Example 1:36
Original English: display all the files in the kat folder
English: display all file in cat folder
GT Command 1: find kat -printf "%f\n"
Prediction: find _REGEX -type f ([-9.24782372])
Example 1:37
Original English: remove all core dump files from user's home directory
English: remove all core ARGUMENT_UNK file from _REGEX home directory
GT Command 1: find ~/ -name 'core*' -exec rm {} \;
GT Command 2: find ~/ -name 'core*' -exec rm {} \;
Prediction: find ${HOME} -name _REGEX -exec rm {} \; ([-6.7058115])
Example 1:38
Original English: find all the files  a folder which have a specific word in their name
English: find all file folder specific word in name
GT Command 1: find /usr/share -name '*farm*'
Prediction: find _REGEX -name _REGEX ([-4.00671291])
Example 1:39
Original English: Display the files which are accessed after the modification of a give file.
English: display file accessed after modification of give file
GT Command 1: find -anewer "sum.java"
Prediction: find . -type f ([-7.84832382])
Example 1:40
Original English: Find all files under /home that belong to user tecmint
English: find all file under _REGEX belong to user tecmint
GT Command 1: find /home -user tecmint
Prediction: find _REGEX -user tecmint ([-2.55327654])
Example 1:41
Original English: Find all *.txt and *.json files in current directory
English: find all _REGEX and _REGEX file in current directory
GT Command 1: find . -type f \( -name "*.txt" -o -name "*.json" \)
Prediction: find . -name _REGEX | xargs grep _REGEX ([-5.40008163])
Example 1:42
Original English: Find files with the setuid or setgid bit set
English: find file with setuid or ARGUMENT_UNK bit set
GT Command 1: find . -perm -4000 -o -perm -2000
Prediction: find . -perm -20 ([-4.19879532])
Example 1:43
Original English: Find all httpd.conf files in entire file system
English: find all _REGEX file in entire file system
GT Command 1: find / -name httpd.conf
Prediction: find / -name _REGEX ([-6.19479704])
Example 1:44
Original English: find all files in a folder using name patterns
English: find all file in folder using name pattern
GT Command 1: find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'
Prediction: find _PARAMETER -name _REGEX ([-6.03373957])
Example 1:45
Original English: force delete all the files that have been modified in the last 3 days
English: force delete all file modified in last _NUM day
GT Command 1: find . -mtime -3 -exec rm -rf {} \;
Prediction: find . -type f -mtime +_NUM -exec rm {} \; ([-5.54358721])
Example 1:46
Original English: Find all the files on the system that have been changed within the last hour
English: find all file on system changed within last hour
GT Command 1: find / -cmin -60
Prediction: find / -amin -_NUM ([-2.23681712])
Example 1:47
Original English: print the files in the subdirectories between level 1 and 4
English: print file in subdirectory between level _NUM and _NUM
GT Command 1: find -mindepth 2 -maxdepth 5 -name "sum.java"
Prediction: find . -maxdepth _NUM -mindepth _NUM -maxdepth _NUM -type d ([-7.81783867])
Example 1:48
Original English: Search the /usr/local/doc directory tree for .texi files
English: search _REGEX directory tree for _REGEX file
GT Command 1: find /usr/local/doc -name '*.texi'
Prediction: find _REGEX -name _REGEX ([-2.83250427])
Example 1:49
Original English: display the 5 largest file in the current directory and its subdirectory.
English: display _NUM largest file in current directory and subdirectory
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction: find . -maxdepth _NUM -name _REGEX -printf _REGEX ([-8.54957485])
Example 1:50
Original English: Find all *.txt files that reside under and below /home/wsuNID/
English: find all _REGEX file reside under and below _REGEX
GT Command 1: find /home/wsuNID/ -name "*.txt"
Prediction: find _REGEX -name _REGEX ([-4.42513323])
Example 1:51
Original English: find files in current directory that names are game
English: find file in current directory name game
GT Command 1: find . -name game
Prediction: find . -name _REGEX ([-4.95610809])
Example 1:52
Original English: delete all files in the home directory which ahve the name core in them
English: delete all file in home directory name core in
GT Command 1: find ~/ -name 'core*' -exec rm {} \;
Prediction: find ${HOME} -name _REGEX -delete ([-11.09354973])
Example 1:53
Original English: Search /usr, /home, /tmp for *.jar files
English: search _REGEX _REGEX _REGEX for _REGEX file
GT Command 1: find /usr /home  /tmp -name "*.jar"
Prediction: find _REGEX -name _REGEX ([-3.7190032])
Example 1:54
Original English: find foo, Foo, FOo, FOO, etc., but only dirs
English: find foo foo ARGUMENT_UNK FOO etc but only ARGUMENT_UNK
GT Command 1: find . -iname foo -type d
Prediction: find . -iname _REGEX ([-8.6242075])
Example 1:55
Original English: Find all 400 permission files under /data directory
English: find all _NUM permission file under _REGEX directory
GT Command 1: find /data -type f -perm 400
GT Command 2: find /data -type f -perm 400 -print
Prediction: find _REGEX -type f -perm 777 ([-5.709167])
Example 1:56
Original English: Change file permissions on all regular files within a directory:
English: change file permission on all regular file within directory
GT Command 1: find /path/to/directory -type f -exec chmod 644 {} +
GT Command 2: find /path/to/directory -type f -exec chmod 644 {} +
Prediction: find . -type f -print0 | xargs -0 chmod 644 ([-2.65557337])
Example 1:57
Original English: find files ending with .jpg:
English: find file ending with _REGEX
GT Command 1: find . -name '*.jpg' -print
GT Command 2: find . -name '*.jpg' -print ./bar/foo.jpg
Prediction: find . -name _REGEX ([-6.12273788])
Example 1:58
Original English: Find files with 002 permission in entire file system
English: find file with _NUM permission in entire file system
GT Command 1: find / -type f -perm -002
Prediction: find / -perm 644 ([-2.437989])
Example 1:59
Original English: Find file1 in the level 1 directories and above
English: find file_NUM in level _NUM directory and above
GT Command 1: find -maxdepth 2 -name file1
Prediction: find . -mindepth _NUM -maxdepth _NUM -type d ([-8.02821064])
Example 1:60
Original English: find all sqlite files in the current directory.
English: find all ARGUMENT_UNK file in current directory
GT Command 1: find ./ -name "*.sqlite"
Prediction: find . -name _REGEX -print ([-6.18437052])
Example 1:61
Original English: find Texinfo source files in /usr/local/doc
English: find ARGUMENT_UNK source file in _REGEX
GT Command 1: find foo -path foo/bar -print
GT Command 2: find /usr/local/doc -name '*.texi'
Prediction: find _REGEX -name _REGEX ([-8.28089237])
Example 1:62
Original English: Display the 5 largest files in the current directory and its sub-directories.
English: display _NUM largest file in current directory and sub-directories
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction: find . -type f -printf _REGEX | sort -n | head -_NUM ([-8.21656704])
Example 1:63
Original English: Remove all broken symlinks from the /usr/ports/packages directory tree
English: remove all broken symlinks from _REGEX directory tree
GT Command 1: find -L /usr/ports/packages -type l -delete
Prediction: find _REGEX -type l -xtype l -exec rm {} \; ([-7.75663853])
Example 1:64
Original English: Find deb packages in the current directory recursively
English: find ARGUMENT_UNK ARGUMENT_UNK in current directory recursively
GT Command 1: find . -type f -and -iname "*.deb"
Prediction: find . -name _REGEX ([-6.57303047])
Example 1:65
Original English: Print the name of "file1" if this file is newer than "file2"
English: print name of _REGEX if file newer than _REGEX
GT Command 1: find file1 -prune -newer file2
Prediction: find . -type f -name _REGEX ([-15.21919537])
Example 1:66
Original English: Find all *.texi files in /usr/local/doc
English: find all _REGEX file in _REGEX
GT Command 1: find /usr/local/doc -name '*.texi'
Prediction: find _REGEX -name _REGEX ([-5.03504705])
Example 1:67
Original English: remove all the files in current folder which have the extension "DS_Store"
English: remove all file in current folder extension _REGEX
GT Command 1: find . -name ".DS_Store" -exec rm {} \;
Prediction: find . -name _REGEX -exec rm {} \; ([-4.48743343])
Example 1:68
Original English: find file which case-insensitive name is foo in current directory.
English: find file case-insensitive name foo in current directory
GT Command 1: find . -iname foo
Prediction: find . -name _REGEX ([-5.00908375])
Example 1:69
Original English: returns a list of  files modification newer than poop
English: return list of file modification newer than ARGUMENT_UNK
GT Command 1: find . -mnewer poop
Prediction: find . -newer _REGEX ([-7.68470335])
Example 1:70
Original English: To list the number of directories in the `/usr/share' directory tree
English: to list number of directory in _REGEX directory tree
GT Command 1: find /usr/share \! -type f | wc -l
Prediction: find _REGEX -type d ([-7.47487879])
Example 1:71
Original English: Find files on the system created during the last 50 days
English: find file on system created during last _NUM day
GT Command 1: find / -ctime -50
Prediction: find / -mtime -_NUM ([-3.59047747])
Example 1:72
Original English: force delete all the directories in a folder which  have a specific name
English: force delete all directory in folder specific name
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Prediction: find _PARAMETER -type d -name _REGEX -print0 | xargs -0 rm ([-6.18017054])
Example 1:73
Original English: delete all the files ending with "~" in current folder
English: delete all file ending with _PARAMETER in current folder
GT Command 1: find . -name "*~" -print | xargs rm
GT Command 2: find -name '*~' -print0 | xargs -0 rm
GT Command 3: find -name '*~' -delete
Prediction: find . -name _PARAMETER -exec rm {} \; ([-5.25808096])
Example 1:74
Original English: Find files with inode number 199053
English: find file with inode number _NUM
GT Command 1: find / -inum 199053
Prediction: find . -inum _NUM ([-4.49306965])
Example 1:75
Original English: Find every file under the directory /usr ending in ".stat".
English: find every file under directory _REGEX ending in _REGEX
GT Command 1: find /usr -name *stat
Prediction: find _REGEX -name _REGEX ([-3.56874609])
Example 1:76
Original English: Find all *.tex regular files under current directory
English: find all _REGEX regular file under current directory
GT Command 1: find . -type f -name "*.tex"
Prediction: find . -type f ([-2.88983774])
Example 1:77
Original English: Remove files under /mnt/zip matching "*prets copy" with confirmation
English: remove file under _REGEX matching _REGEX with confirmation
GT Command 1: find /mnt/zip -name "*prefs copy" -print0 | xargs -0 -p /bin/rm
Prediction: find _REGEX -name _REGEX -type f -print0 | xargs -0 rm ([-5.04555607])
Example 1:78
Original English: find an image in a specific folder
English: find image in specific folder
GT Command 1: find /home/username/public_html/images -name "articles.jpg"
Prediction: find _PARAMETER -name _REGEX ([-9.22797966])
Example 1:79
Original English: print all files in the directories except the ./src/emacs directory
English: print all file in directory except _REGEX directory
GT Command 1: find . -wholename './src/emacs' -prune , -print
GT Command 2: find . -wholename './src/emacs' -prune -o -print
Prediction: find _REGEX -maxdepth _NUM -not -path _REGEX ([-8.38992023])
Example 1:80
Original English: search the entire file system for a specific file
English: search entire file system for specific file
GT Command 1: find / -name document -print
Prediction: find / -name _REGEX ([-8.1598568])
Example 1:81
Original English: Search the current directory tree for regular files that contain "string"
English: search current directory tree for regular file contain _REGEX
GT Command 1: find . -type f -print0 | xargs -0 grep string
GT Command 2: find . -type f -printf '"%p"\n' | xargs grep string
GT Command 3: find . -type f | xargs grep string
Prediction: find . -type f -print0 | xargs -0 grep -l _REGEX ([-5.28438282])
Example 1:82
Original English: Find text in whole directory tree
English: find text in whole directory tree
GT Command 1: find . -type f | xargs grep "text"
Prediction: find . -name _REGEX ([-9.26136398])
Example 1:83
Original English: display all the normal/regular files in the current folder which are empty
English: display all _REGEX file in current folder empty
GT Command 1: find . -type f -empty
Prediction: find . -type f -empty ([-7.67867661])
Example 1:84
Original English: find the file "filename.txt" in the usr folder
English: find file _REGEX in usr folder
GT Command 1: find /usr -name filename.txt -print
Prediction: find _REGEX -name _REGEX ([-9.69749546])
Example 1:85
Original English: Archive all *html files using tar.
English: archive all _REGEX file using tar
GT Command 1: find . -type f -name "*html" | xargs tar cvf htmlfiles.tar -
Prediction: find . -name _REGEX | xargs tar -r -v -f myfile.tar ([-7.85471869])
Example 1:86
Original English: List empty directories in the current directory tree
English: list empty directory in current directory tree
GT Command 1: find . -depth -empty -type d
Prediction: find . -type d -empty ([-8.66413879])
Example 1:87
Original English: display all pdf files in the current folder
English: display all pdf file in current folder
GT Command 1: find . -name *.pdf
Prediction: find . -name _REGEX ([-6.42807436])
Example 1:88
Original English: find all the files which are of size 0 bytes.
English: find all file of size _NUM byte
GT Command 1: find . -type f -empty
Prediction: find / -size _NUM ([-2.95695162])
Example 1:89
Original English: find all the perl files in /var/www
English: find all perl file in _REGEX
GT Command 1: find /var/www/ -type f -name "*.pl" -print
Prediction: find _REGEX -name _REGEX ([-7.41751432])
Example 1:90
Original English: Find files ending with .mp3 or .jpg
English: find file ending with _REGEX or _REGEX
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
Prediction: find . -name _REGEX ([-6.54868078])
Example 1:91
Original English: remove all subdirectories named "CVS" under current dir
English: remove all subdirectory named _REGEX under current dir
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
Prediction: find . -name _REGEX -type f -print0 | xargs -0 rm ([-5.31396246])
Example 1:92
Original English: display the number  of files in a folder along with its name
English: display number of file in folder along with name
GT Command 1: find . -type d -ls | awk '{print $4 - 2, $NF}' | sort -rn | head
Prediction: find _PARAMETER -name _REGEX | wc -l ([-8.14322853])
Example 1:93
Original English: find all files that are readable or writable by their owner
English: find all file readable or writable by owner
GT Command 1: find . -perm +600 -print
Prediction: find . -perm -20 ([-4.68186522])
Example 1:94
Original English: Return a list of files newer than file poop
English: return list of file newer than file ARGUMENT_UNK
GT Command 1: find . -mnewer poop
Prediction: find / -newerct _REGEX -print ([-8.15561676])
Example 1:95
Original English: change the ownership of all directories in the current folder
English: change ownership of all directory in current folder
GT Command 1: find . -type d -exec chown username {} \;
Prediction: find . -type d -exec chmod 755 {} \; ([-5.66072607])
Example 1:96
Original English: search for all "tif" images in current folder
English: search for all _REGEX image in current folder
GT Command 1: find . -name '*.tif ' -print
Prediction: find . -name _REGEX ([-4.99765015])
Example 1:97
Original English: Find all empty regular files in the current directory tree
English: find all empty regular file in current directory tree
GT Command 1: find . -size 0c -type f
Prediction: find . -type f -empty ([-6.50939751])
Example 1:98
Original English: Search for *pattern* in and below current directory
English: search for _REGEX in and below current directory
GT Command 1: find -name "*pattern*"
Prediction: find . -name _REGEX ([-2.72760129])
Example 1:99
Original English: Search for directory foo ignoring case
English: search for directory foo ignoring case
GT Command 1: find . -iname foo -type d
Prediction: find . -iname _REGEX ([-3.05726457])
Example 1:100
Original English: Delete all .svn files/directories under current directory
English: delete all _REGEX _REGEX under current directory
GT Command 1: find . -name .svn -delete
GT Command 2: find . -name .svn | xargs rm -fr
GT Command 3: find . -name .svn |xargs rm -rf
GT Command 4: find . -depth -name .svn -exec rm -fr {} \;
GT Command 5: find . -name .svn -exec rm -rf '{}' \;
GT Command 6: find . -name .svn -exec rm -v {} \;
GT Command 7: find . -name .svn -exec rm -rf {} +
GT Command 8: find . -name .svn -exec rm -rf {} \;
Prediction: find . -name _REGEX | xargs rm ([-7.39250422])
Example 1:101
Original English: list all *.txt files in the user's home directory.
English: list all _REGEX file in _REGEX home directory
GT Command 1: find ~/ -name '*.txt'
Prediction: find ${HOME} -name _REGEX ([-7.83178854])
Example 1:102
Original English: Remove all "work" directories residing in /usr/ports and below
English: remove all _REGEX directory residing in _REGEX and below
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
Prediction: find _REGEX -name _REGEX -type f -print0 | xargs -0 rm ([-4.68079185])
Example 1:103
Original English: Count the number of files named `file1'
English: count number of file named _REGEX
GT Command 1: find -name file1 | wc -l
Prediction: find . -name _REGEX | xargs wc -l ([-5.93586969])
Example 1:104
Original English: Find files owned by no group
English: find file owned by no group
GT Command 1: find / -nogroup
Prediction: find / -group admins ([-5.22384167])
Example 1:105
Original English: Find the unique owners of all the files in the /bin directory
English: find ARGUMENT_UNK owner of all file in _REGEX directory
GT Command 1: find /bin -type f -follow | xargs    ls -al | awk ' NF==9 { print $3 }'|sort -u
Prediction: find _REGEX -type f -print0 | xargs -0 grep -l _REGEX ([-7.10371447])
Example 1:106
Original English: Remove all CVS directories in the current directory tree
English: remove all CVS directory in current directory tree
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
Prediction: find . -type d | xargs rm -f ([-5.41168451])
Example 1:107
Original English: Count the number of files/directories named file1 under current directory
English: count number of _REGEX named file_NUM under current directory
GT Command 1: find -name file1 | wc -l
Prediction: find . -name _REGEX | xargs wc -l ([-7.27071762])
Example 1:108
Original English: Locate the httpd.conf file on the system
English: locate _REGEX file on system
GT Command 1: find / -name httpd.conf
Prediction: find / -name file_NUM ([-8.96340275])
Example 1:109
Original English: search all the files in the current folder using name patterns
English: search all file in current folder using name pattern
GT Command 1: find . -name 'a(b*' -print
Prediction: find . -name _REGEX ([-3.5491457])
Example 1:110
Original English: Search the ~/Books directory recursively for files named "Waldo"
English: search _PARAMETER directory recursively for file named _REGEX
GT Command 1: find ~/Books -name Waldo
Prediction: find _PARAMETER -name _PARAMETER ([-8.63981342])
Example 1:111
Original English: get all the files that are exactly 30 days old
English: get all file exactly _NUM day old
GT Command 1: find . -mtime 30 -print
Prediction: find . -mtime _NUM ([-5.60907507])
Example 1:112
Original English: find all the configuration files which have been accessed in the last 30 minutes.
English: find all configuration file accessed in last _NUM minute
GT Command 1: find /etc/sysconfig -amin -30
Prediction: find / -amin -_NUM ([-2.09360194])
Example 1:113
Original English: find  directory which case-insensitive name is too in currect directory
English: find directory case-insensitive name too in current directory
GT Command 1: find . -iname foo -type d
Prediction: find . -type d -name _REGEX ([-9.78853226])
Example 1:114
Original English: find all the files which have a specific permission
English: find all file specific permission
GT Command 1: find -perm 777
Prediction: find . -perm -20 ([-4.97284317])
Example 1:115
Original English: find any files in the current directory that begin with a number
English: find any file in current directory begin with number
GT Command 1: find . -regex './[0-9].*' -print
Prediction: find . -name _REGEX ([-4.47802162])
Example 1:116
Original English: Find all mysong.ogg files/directories under your home directory
English: find all _REGEX _REGEX under home directory
GT Command 1: find $HOME -name 'mysong.ogg'
GT Command 2: find ~/ -name '*.txt'
GT Command 3: find ~ -name "*.txt" -print
Prediction: find ${HOME} -name _REGEX ([-7.94361591])
Example 1:117
Original English: find  file which case-insensitive name is too in currect directory
English: find file case-insensitive name too in current directory
GT Command 1: find . -iname foo
Prediction: find . -iname _REGEX ([-4.58340931])
Example 1:118
Original English: search for files with the name "temp" in the /usr folder
English: search for file with name _REGEX in _REGEX folder
GT Command 1: find /usr -name temp -print
Prediction: find _REGEX -name _REGEX ([-6.54662943])
Example 1:119
Original English: find in the file system for a specific file
English: find in file system for specific file
GT Command 1: find / -name filename -print
Prediction: find / -name _REGEX ([-5.48838234])
Example 1:120
Original English: find all the files with a specific permission in the current folder
English: find all file with specific permission in current folder
GT Command 1: find . — perm 755 -print
Prediction: find . -perm -20 ([-4.66695261])
Example 1:121
Original English: Find all *stat files/directories under /usr
English: find all _REGEX _REGEX under _REGEX
GT Command 1: find /usr -name *stat
Prediction: find _REGEX -name _REGEX ([-3.7339673])
Example 1:122
Original English: Remove all Thumbs.db files from the current directory tree
English: remove all _REGEX file from current directory tree
GT Command 1: find . -name Thumbs.db -exec rm {} \;
Prediction: find . -name _REGEX | xargs rm ([-4.68716812])
Example 1:123
Original English: Find all the files called FindCommandExamples.txt of owner root
English: find all file called _REGEX of owner root
GT Command 1: find / -user root -name FindCommandExamples.txt
Prediction: find / -user root -iname _REGEX ([-5.0171752])
Example 1:124
Original English: Find all files under path_to_dir
English: find all file under _REGEX
GT Command 1: find path_to_dir -type f
Prediction: find _REGEX -type f ([-4.85091877])
Example 1:125
Original English: Find the top 5 biggest files
English: find top _NUM ARGUMENT_UNK file
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction: find . -type f -print | xargs grep _REGEX ([-6.98735714])
Example 1:126
Original English: find all the jpg files in current folder and sort them
English: find all jpg file in current folder and sort
GT Command 1: find . -type f|grep -i "\.jpg$" |sort
Prediction: find . -type f -name _REGEX | xargs grep -l thing ([-12.60503197])
Example 1:127
Original English: find all the files starting with a specific name in a folder
English: find all file starting with specific name in folder
GT Command 1: find /etc -name "host*" — print
Prediction: find _PARAMETER -name _REGEX ([-10.08427715])
Example 1:128
Original English: Find all files that belong to group root
English: find all file belong to group root
GT Command 1: find / -group root
Prediction: find / -group admins ([-5.32756901])
Example 1:129
Original English: find all the findme.txt files in the file system
English: find all _REGEX file in file system
GT Command 1: find / -name findme.txt -type f -print
Prediction: find / -name _REGEX ([-6.12938213])
Example 1:130
Original English: Find all directories starting from / that have permissions 777
English: find all directory starting from _REGEX permission _NUM
GT Command 1: find / -type d -perm 0777
Prediction: find / -type d -perm 777 ([-6.08858919])
Example 1:131
Original English: Print the list of directories that are present in the /mnt/raid directory tree
English: print list of directory present in _REGEX directory tree
GT Command 1: find /mnt/raid -type d
Prediction: find _REGEX -type d -name _REGEX ([-10.18787289])
Example 1:132
Original English: find files having specific name in a folder
English: find file having specific name in folder
GT Command 1: find ~/Books -name Waldo
Prediction: find _PARAMETER -name _REGEX ([-8.05344391])
Example 1:133
Original English: Find files/directories named blah under current directory
English: find _REGEX named ARGUMENT_UNK under current directory
GT Command 1: find ./ -name blah
Prediction: find . -name _REGEX ([-5.36716652])
Example 1:134
Original English: Find files under current directory that contains the string '/bin/ksh'
English: find file under current directory contains string _REGEX
GT Command 1: find . -type f -exec grep -iH '/bin/ksh' {} \;
GT Command 2: find . -type f -print | xargs    grep -il 'bin/ksh'
Prediction: find . -name _REGEX -type f -print ([-5.25917339])
Example 1:135
Original English: Find all files that belong to a particular group.
English: find all file belong to particular group
GT Command 1: find /var/www -group developer
Prediction: find . -group compta ([-5.06010246])
Example 1:136
Original English: Find the top 5 big files
English: find top _NUM ARGUMENT_UNK file
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
Prediction: find . -type f -print | xargs grep _REGEX ([-6.98735619])
Example 1:137
Original English: Find all the files which are changed in last 1 hour
English: find all file changed in last _NUM hour
GT Command 1: find / -cmin -60
Prediction: find / -amin -_NUM ([-2.57919788])
Example 1:138
Original English: Delete all .svn directories under current directory
English: delete all _REGEX directory under current directory
GT Command 1: find . -type d -name .svn -print0|xargs -0 rm -rf
Prediction: find . -depth -name _REGEX -delete ([-13.42703247])
Example 1:139
Original English: Find all files on the system whose names are 'drush'
English: find all file on system whose name _REGEX
GT Command 1: find / -name drush
Prediction: find / -name _REGEX ([-5.93063688])
Example 1:140
Original English: list all zero-length files under the current directory
English: list all ARGUMENT_UNK file under current directory
GT Command 1: find . -empty -exec ls {} \;
Prediction: find . -name _REGEX ([-7.23227739])
Example 1:141
Original English: Find PHP files with abstract classes
English: find PHP file with ARGUMENT_UNK class
GT Command 1: find . -type f -name "*.php" -exec grep --with-filename -c "^abstract class " {} \; | grep ":[^0]"
Prediction: find . -name _REGEX ([-6.50816202])
Example 1:142
Original English: Find text files modified less than 5 days ago
English: find text file modified le than _NUM day ago
GT Command 1: find . –name "*.txt" –mtime 5
Prediction: find . -mtime -_NUM -name _REGEX ([-4.11406088])
Example 1:143
Original English: Find every vim undo file under current directory
English: find every ARGUMENT_UNK undo file under current directory
GT Command 1: find -type f -iname '*.un~'
Prediction: find . -name _REGEX -print ([-11.30602455])
Example 1:144
Original English: Delete all HTML files under tree ~/mydir
English: delete all HTML file under tree _PARAMETER
GT Command 1: find ~/mydir -iname '*.htm' -exec rm {} \;
Prediction: find _PARAMETER -type f -name _REGEX -exec rm {} \; ([-6.49672413])
Example 1:145
Original English: Find all the files that are exactly 30 days old.
English: find all file exactly _NUM day old
GT Command 1: find . -mtime 30 -print
Prediction: find . -type f -mtime _NUM ([-6.67271233])
Example 1:146
Original English: Search the current directory for files whose names start with my
English: search current directory for file whose name start with
GT Command 1: find . -name 'my*'
Prediction: find . -name _REGEX ([-2.93118143])
Example 1:147
Original English: Find image files and move them to the pictures directory
English: find image file and move to ARGUMENT_UNK directory
GT Command 1: find ~/Desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/Pictures
Prediction: find . -name _REGEX -exec mv {} _PARAMETER \; ([-7.6951766])
Example 1:148
Original English: find foo, Foo, FOo, FOO, etc.
English: find foo foo ARGUMENT_UNK FOO etc
GT Command 1: find . -iname foo
Prediction: find . -iname _REGEX ([-8.21217632])
Example 1:149
Original English: search for the file "name_to_find" in the home folder
English: search for file _REGEX in home folder
GT Command 1: find ~ -name "name_to_find"
Prediction: find ${HOME} -name _REGEX ([-7.4302659])
Example 1:150
Original English: find all the files ending with .mp3 or .jpg
English: find all file ending with _REGEX or _REGEX
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
Prediction: find . -name _REGEX ([-6.84227276])
Example 1:151
Original English: Move files older than 1 day to directory TMP
English: move file older than _NUM day to directory ARGUMENT_UNK
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \;
Prediction: find . -type f -mtime +_NUM -exec rm {} \; ([-8.40436077])
Example 1:152
Original English: Only find files ending with .jpg
English: only find file ending with _REGEX
GT Command 1: find . -name '*.jpg' -print
Prediction: find . -name _REGEX ([-8.29949856])
Example 1:153
Original English: find all the files that have been changed today
English: find all file changed today
GT Command 1: find . -ctime 0 -type f
Prediction: find _REGEX -type f -mtime -_NUM ([-6.1341691])
Example 1:154
Original English: display all regular files in the folder image-folder
English: display all regular file in folder ARGUMENT_UNK
GT Command 1: find image-folder/ -type f
Prediction: find _PARAMETER -type f ([-6.67816973])
Example 1:155
Original English: Find files ending with .mp3 and .jpg
English: find file ending with _REGEX and _REGEX
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
Prediction: find . -name _REGEX ([-10.40262032])
Example 1:156
Original English: Find mysong.ogg anywhere under the home directory
English: find _REGEX anywhere under home directory
GT Command 1: find $HOME -name 'mysong.ogg'
Prediction: find ${HOME} -name _REGEX ([-6.69199038])
Example 1:157
Original English: find all files in a folder that have a specific word in their name
English: find all file in folder specific word in name
GT Command 1: find /etc -iregex '.*xt.*'
GT Command 2: find /usr/local/games -name "*xpilot*"
Prediction: find _REGEX -name _REGEX ([-5.018116])
Example 1:158
Original English: Search the home directory tree for all .txt files
English: search home directory tree for all _REGEX file
GT Command 1: find ~/ -name '*.txt'
Prediction: find ${HOME} -name _REGEX ([-9.34361362])
Example 1:159
Original English: Find all *.txt and *.json files
English: find all _REGEX and _REGEX file
GT Command 1: find . -type f \( -name "*.txt" -o -name "*.json" \)
Prediction: find . -name _REGEX ([-10.2632103])
Example 1:160
Original English: copy the file header.shtml to those dirs
English: copy file _REGEX to ARGUMENT_UNK
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
Prediction: find . -name _REGEX | xargs tar -r -v -f myfile.tar ([-6.80067348])
Example 1:161
Original English: List all *.bak files in the current directory tree
English: list all _REGEX file in current directory tree
GT Command 1: find  . -name '*.bak' -ls
Prediction: find . -name _REGEX ([-9.69949818])
Example 1:162
Original English: To match only hidden dot directories
English: to match only hidden dot directory
GT Command 1: find /nas01/backups/home/user/ -type d -name ".*" -print0 -exec ls -lrt {} \;
Prediction: find . -maxdepth _NUM -name _REGEX ([-5.89082575])
Example 2:0
Original English: Find all files in your home directory and below that are exactly 100M.
English: find all file in home directory and below exactly _NUMM
GT Command 1: find ~ -size 100M
Prediction: find ${HOME} -size _NUM ([-12.85061836])
Example 2:1
Original English: Find all *.tex regular files in maximum 2 levels down the current directory
English: find all _REGEX regular file in maximum _NUM level down current directory
GT Command 1: find . -type f -maxdepth 2 -name "*.tex"
Prediction: find . -maxdepth _NUM -type f -print0 ([-12.84592342])
Example 2:2
Original English: display all the files in current folder having specific word in their name
English: display all file in current folder having specific word in name
GT Command 1: find -name "*pattern*"
Prediction: find . -name _REGEX -type f ([-11.67532063])
Example 2:3
Original English: Find all directories on the system whose size is greater than 50k
English: find all directory on system whose size greater than _NUMk
GT Command 1: find / -type d -size +50k
Prediction: find / -type d -size +_NUMM ([-13.41987228])
Example 2:4
Original English: search the pattern ^PyErr in all the ".c" files in the folder Lib/
English: search pattern _REGEX in all _REGEX file in folder _REGEX
GT Command 1: find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
Prediction: find _REGEX -type f -name _REGEX -exec grep -l _REGEX {} \; ([-9.86031818])
Example 2:5
Original English: search for the file in the entire file system which has the words "filename" in its name
English: search for file in entire file system ha word _REGEX in name
GT Command 1: find / -name ”*filename*”
Prediction: find / -name _REGEX ([-12.11488247])
Example 2:6
Original English: find all files under the /etc/sysconfig directory that were accessed in the last 30 minutes
English: find all file under _REGEX directory accessed in last _NUM minute
GT Command 1: find /etc/sysconfig -amin -30
Prediction: find _REGEX -type f -amin -_NUM ([-10.71381855])
Example 2:7
Original English: count lines of C or C++ or Obj-C or Java code under the current directory
English: count line of C or _REGEX or ARGUMENT_UNK or java code under current directory
GT Command 1: find . \( -name "*.c" -or -name "*.cpp" -or -name "*.h" -or -name "*.m" -or -name '*.java' \) -print0 | xargs -0 wc
Prediction: find . -name _REGEX | xargs wc -l ([-16.06212807])
Example 2:8
Original English: move files accessed more than one day ago to directory TMP
English: move file accessed more than _NUM day ago to directory ARGUMENT_UNK
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \; # mv files older then 1 day to dir TMP
Prediction: find . -atime +_NUM -exec rm {} \; ([-9.47402954])
Example 2:9
Original English: Find files that are 0 bytes in size in the current directory and remove them
English: find file _NUM byte in size in current directory and remove
GT Command 1: find . -maxdepth 1 -size 0c -exec rm {} \;
Prediction: find . -size _NUM -exec rm {} \; ([-10.46334743])
Example 2:10
Original English: find all the files ending with "~" in current folder and move them to temp folder
English: find all file ending with _PARAMETER in current folder and move to temp folder
GT Command 1: find -name '*~' -print0 | xargs -0 -I _ mv _ /tmp/
Prediction: find . -name _PARAMETER -exec mv {} _PARAMETER \; ([-10.45704842])
Example 2:11
Original English: display list of all the hidden regular/normal files in the directory "/dir/to/search/"
English: display list of all hidden _REGEX file in directory _REGEX
GT Command 1: find /dir/to/search/ -type f -iname ".*" -ls
Prediction: find _REGEX -name _REGEX -type f -print0 ([-12.55767918])
Example 2:12
Original English: Search directory trees /usr/local/man and /opt/local/man for files whose names begin with 'my'
English: search directory tree _REGEX and _REGEX for file whose name begin with _REGEX
GT Command 1: find /usr/local/man /opt/local/man -name 'my*'
Prediction: find _REGEX -name _REGEX -type f -print ([-17.09489059])
Example 2:13
Original English: Search the current directory tree for regular files whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg"
English: search current directory tree for regular file whose name match regular expression _REGEX
GT Command 1: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg"
Prediction: find . -regex _REGEX ([-6.55664062])
Example 2:14
Original English: search for all the files in the folder /home which have sticky bit set and have the permissions 553
English: search for all file in folder _REGEX sticky bit set and permission _NUM
GT Command 1: find /home -perm 1553
Prediction: find _REGEX -perm ugo+rwx ([-12.65940666])
Example 2:15
Original English: Delete files with inode number specified by [inode-number] under current directory
English: delete file with inode number specified by _REGEX under current directory
GT Command 1: find . -inum [inode-number] -exec rm -i {} \;
Prediction: find . -inum _NUM -exec rm {} \; ([-8.11351204])
Example 2:16
Original English: change the permissions of all the regular/normal files to 644 in the folder /home/nobody/public_html
English: change permission of all _REGEX file to _NUM in folder _REGEX
GT Command 1: find /home/nobody/public_html -type f -exec chmod 644 {} \;
Prediction: find _REGEX -type f -print0 | xargs -0 chmod 644 ([-3.88532662])
Example 2:17
Original English: List all *.jar files/directories under /usr, /home and /tmp directory
English: list all _REGEX _REGEX under _REGEX _REGEX and _REGEX directory
GT Command 1: find /usr /home  /tmp -name "*.jar"
Prediction: find _REGEX -name _REGEX | xargs grep -l thing ([-12.53572464])
Example 2:18
Original English: list all CSS files (and directories ending with “.css”) under the current directory
English: list all CSS file ( and directory ending with _REGEX ) under current directory
GT Command 1: find . -name "*.css"
Prediction: find . -name _REGEX | xargs ls -l ([-15.47435379])
Example 2:19
Original English: Search the current directory tree for files whose names begin with 'my'
English: search current directory tree for file whose name begin with _REGEX
GT Command 1: find . -name 'my*'
Prediction: find . -name _REGEX ([-6.27166414])
Example 2:20
Original English: List all files matching regular expression '*foo*' in a human-readable form
English: list all file matching regular expression _REGEX in ARGUMENT_UNK form
GT Command 1: find . -name '*foo*' -exec ls -lah {} \;
Prediction: find . -regex _REGEX ([-13.2609024])
Example 2:21
Original English: find all occurences of a file in the file system which belong to the user root
English: find all occurences of file in file system belong to user root
GT Command 1: find / -user root -name FindCommandExamples.txt
Prediction: find / -user root -iname _REGEX ([-12.87827682])
Example 2:22
Original English: Search the current directory and two levels below for file `teste.tex'
English: search current directory and _NUM level below for file _REGEX
GT Command 1: find ~/ -maxdepth 3 -name teste.tex
Prediction: find . -maxdepth _NUM -name _REGEX -print ([-12.32268333])
Example 2:23
Original English: find  files which full path name is foo/bar under foo directory and print
English: find file full path name _REGEX under foo directory and print
GT Command 1: find foo -path foo/bar -print
GT Command 2: find foo -path /tmp/foo/bar -print
GT Command 3: find /tmp/foo -path /tmp/foo/bar -print
GT Command 4: find foo -path /tmp/foo/bar -print
GT Command 5: find foo -path /tmp/foo/bar -print
Prediction: find _REGEX -path _REGEX -path _REGEX ([-16.21582985])
Example 2:24
Original English: Find files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names
English: find _REGEX under current directory matching posix-egrep type regex _PARAMETER in name
GT Command 1: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$"
Prediction: find . | grep -P _REGEX ([-14.88968182])
Example 2:25
Original English: Search *.x files from the current directory tree for string "fred"
English: search _REGEX file from current directory tree for string _REGEX
GT Command 1: find . -name ‘*.x’ -print0 | xargs -0 grep fred
Prediction: find . -name _REGEX -exec grep _REGEX {} \; ([-9.29326725])
Example 2:26
Original English: find all the files with the name september ( case insensitive )
English: find all file with name september ( case insensitive )
GT Command 1: find -iname september
Prediction: find / -iname _REGEX ([-12.05428123])
Example 2:27
Original English: search from the / directory for any file that is larger than 10000k (> 10MB)
English: search from _REGEX directory for any file larger than _NUMk ( _REGEX _NUMMB )
GT Command 1: find / -size +10000k
Prediction: find _REGEX -type f -size +_NUMk -exec ls -l {} \; ([-9.25634289])
Example 2:28
Original English: Find all or single file called FindCommandExamples.txt under / directory of owner root
English: find all or single file called _REGEX under _REGEX directory of owner root
GT Command 1: find / -user root -name FindCommandExamples.txt
Prediction: find / -type f -name _REGEX -exec grep -l -i {} \; ([-12.8804369])
Example 2:29
Original English: dispaly a long listig of all the files in the current folder which are bigger than 100KB
English: display long listing of all file in current folder bigger than _NUMKB
GT Command 1: find . -size +100000 -ls
Prediction: find . -size +_NUM -exec ls -l {} \; ([-8.73889065])
Example 2:30
Original English: To list all files in the `/usr/share' directory tree with the text `farm' somewhere in their name
English: to list all file in _REGEX directory tree with text _REGEX somewhere in name
GT Command 1: find /usr/share -name '*farm*'
Prediction: find _REGEX -name _REGEX ([-11.65596104])
Example 2:31
Original English: Find all regular files in and below the home directory that have been modified in the last 90 minutes
English: find all regular file in and below home directory modified in last _NUM minute
GT Command 1: find ~ -type f -mmin -90
Prediction: find ${HOME} -type f -mtime -_NUM ([-14.79173756])
Example 2:32
Original English: find all regular/normal files in a folder whose size is less than 50 bytes
English: find all _REGEX file in folder whose size le than _NUM byte
GT Command 1: find /usr/bin -type f -size -50c
Prediction: find _REGEX -type f -size +_NUMc ([-11.20655727])
Example 2:33
Original English: Find all files/directories named Root under current directory and copy them to newRoot
English: find all _REGEX named root under current directory and copy to ARGUMENT_UNK
GT Command 1: find . -name Root | xargs cp newRoot
Prediction:  ([-23.81031799])
Example 2:34
Original English: Find all configration files in Home directory & Subtitute permanently in files
English: find all configuration file in home directory _REGEX substitute ARGUMENT_UNK in file
GT Command 1: find $HOME -name "*.conf" -exec sed -i 's/vermin/pony/g' {} \;
Prediction: find ${HOME} -name _REGEX -type f -print ([-12.77327156])
Example 2:35
Original English: Find all files/directories named file1 in maximum 2 levels down the current directory
English: find all _REGEX named file_NUM in maximum _NUM level down current directory
GT Command 1: find -maxdepth 2 -name file1
Prediction: find . -maxdepth _NUM -name _REGEX -type f ([-13.48146629])
Example 2:36
Original English: Find directories with permissions 777 and change them to 755 recursively
English: find directory with permission _NUM and change to _NUM recursively
GT Command 1: find /home -type d -perm 777 -print -exec chmod 755 {} \;
Prediction: find . -type d -exec chmod 400 {} \; ([-8.80820274])
Example 2:37
Original English: Remove all files last modified more than 10 days ago from the current directory tree
English: remove all file last modified more than _NUM day ago from current directory tree
GT Command 1: find . -mtime +10 | xargs rm
Prediction: find . -name _REGEX -mtime +_NUM -exec rm {} \; ([-7.97659969])
Example 2:38
Original English: search for a word in all the files with the extension "ch" in the current folder
English: search for word in all file with extension _REGEX in current folder
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction: find . -name _REGEX -exec grep -i -l _REGEX {} \; ([-8.57340717])
Example 2:39
Original English: search for a specific pattern in all files in the current folder which have a specific extension.
English: search for specific pattern in all file in current folder specific extension
GT Command 1: find . -name “*.cc” |xargs grep -n “pattern”
Prediction: find . -name _REGEX | xargs grep _REGEX ([-16.79781342])
Example 2:40
Original English: Find *.html files in the current directory tree that were last modified more than 7 days ago
English: find _REGEX file in current directory tree last modified more than _NUM day ago
GT Command 1: find . -mtime +7 -name "*.html" -print
Prediction: find . -mtime +_NUM -name _REGEX ([-11.6732769])
Example 2:41
Original English: count the lines of java code for all the java files in the current directory
English: count line of java code for all java file in current directory
GT Command 1: find . -name "*.java" -print0 | xargs -0 wc
Prediction: find . -name _REGEX | xargs wc -l ([-12.21159649])
Example 2:42
Original English: List all regular file owned by root with permissions 4000
English: list all regular file owned by root with permission _NUM
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction: find . -type f -perm 777 -print ([-12.923666])
Example 2:43
Original English: display all the html files in the current folder that have not been modified in the last 7*24 horus
English: display all html file in current folder not modified in last _REGEX hour
GT Command 1: find . -mtime +7 -name "*.html" -print
Prediction: find . -mtime +_NUM -print ([-11.63576317])
Example 2:44
Original English: find all the html files in the current folder which have not been modified in the last 7 days
English: find all html file in current folder not modified in last _NUM day
GT Command 1: find . -mtime +7 -name "*.html" -print
Prediction: find . -mtime +_NUM -name _REGEX -print ([-12.6538868])
Example 2:45
Original English: display all the files in the current directory excluding the paths "targert", "tools", "git"
English: display all file in current directory excluding path _REGEX _REGEX _REGEX
GT Command 1: find . \( ! -path "*target*" -a ! -path "*tools*" -a ! -path "*.git*" -print \)
Prediction: find . -path _REGEX ([-19.3551445])
Example 2:46
Original English: locate large files (> 100 MB) in /home/ for 'cleaning'
English: locate large file ( _REGEX _NUM MB ) in _REGEX for _REGEX
GT Command 1: find /home -type f -size +100M -print0 |xargs -0 rm
GT Command 2: find /home -type f -size +100M -delete
Prediction: find _REGEX -name _REGEX | xargs grep _REGEX ([-12.95623302])
Example 2:47
Original English: find all '*.c' files under $HOME directory which context contains sprintf
English: find all _REGEX file under _PARAMETER directory context contains ARGUMENT_UNK
GT Command 1: find $HOME -name '*.c' -print | xargs grep -l sprintf
Prediction: find _PARAMETER -type f -name _REGEX ([-13.23560905])
Example 2:48
Original English: Show the last 10 .conf files found by `find' in the /etc directory
English: show last _NUM _REGEX file found by _REGEX in _REGEX directory
GT Command 1: find /etc -maxdepth 1 -name "*.conf" | tail
Prediction: find _REGEX -type f -name _REGEX | xargs grep _REGEX ([-24.62677956])
Example 2:49
Original English: Move all files matching patterns "*.old", ".old", ".*.old" from the current directory to directory "../old/"
English: move all file matching pattern _REGEX _REGEX _REGEX from current directory to directory _REGEX
GT Command 1: find . ! -name . -prune -name '*.old' -exec mv {} ../old/ \;
Prediction: find . -name _REGEX -exec mv {} _REGEX \; ([-12.57003975])
Example 2:50
Original English: Remove all files whose names end with "~" in the /home/peter directory tree
English: remove all file whose name end with _PARAMETER in _REGEX directory tree
GT Command 1: find /home/peter -name *~ |xargs rm
GT Command 2: find /home/peter -name *~ -print0 |xargs -0 rm
Prediction: find _PARAMETER -name _REGEX -exec rm {} \; ([-9.47010136])
Example 2:51
Original English: Show all files that have not been accessed in the $HOME directory for 30 days or more
English: show all file not accessed in _PARAMETER directory for _NUM day or more
GT Command 1: find $HOME -atime +30
Prediction: find _PARAMETER -type f -atime +_NUM ([-14.73451328])
Example 2:52
Original English: save the list of the files in the current directory to a file “foo”
English: save list of file in current directory to file _REGEX
GT Command 1: find . -fprint foo
Prediction: find . -name _REGEX ([-17.07820129])
Example 2:53
Original English: search for all perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified yesterday
English: search for all perl file in folder _REGEX modified yesterday
GT Command 1: find /nas/projects/mgmt/scripts/perl -mtime 1 -daystart -iname "*.pl"
Prediction: find _REGEX -type f -mtime -_NUM -name _REGEX ([-11.36687946])
Example 2:54
Original English: find files which full path name is /tmp/foo/bar under /tmp/foo directory and print
English: find file full path name _REGEX under _REGEX directory and print
GT Command 1: find /tmp/foo -path /tmp/foo/bar -print
Prediction: find _REGEX -path _REGEX -path _REGEX ([-16.60697746])
Example 2:55
Original English: Remove all files whose names begin with "no-such-thing" in the /home/peter directory tree
English: remove all file whose name begin with _REGEX in _REGEX directory tree
GT Command 1: find /home/peter -name no-such-thing* |xargs rm
Prediction: find _REGEX -name _REGEX | xargs rm ([-10.77958488])
Example 2:56
Original English: Print the list of all directories under the current directory and below
English: print list of all directory under current directory and below
GT Command 1: find ./ -type d -print
Prediction: find . -type d ([-5.53753853])
Example 2:57
Original English: Search for the string 'foo' in *.html files under /usr/src/linux directory
English: search for string _REGEX in _REGEX file under _REGEX directory
GT Command 1: grep foo `find /usr/src/linux -name "*.html"`
Prediction: find _REGEX -name _REGEX | xargs grep _REGEX ([-13.99882507])
Example 2:58
Original English: find all the regular/normal files in a folder which are less than 50 bytes.
English: find all _REGEX file in folder le than _NUM byte
GT Command 1: find /usr/bin -type f -size -50c
Prediction: find _REGEX -type f -size +_NUMc ([-8.22758675])
Example 2:59
Original English: Find all *.py files under and below the current directory and search them for "xrange"
English: find all _REGEX file under and below current directory and search for _REGEX
GT Command 1: find . -name '*.py' -exec grep --color 'xrange' {} +
Prediction: find . -name _REGEX | xargs grep _REGEX ([-13.1029768])
Example 2:60
Original English: Find all files with the name "MyProgram.c" in the current directory and all of it's sub-directories.
English: find all file with name _REGEX in current directory and all of _REGEX sub-directories
GT Command 1: find -name "MyCProgram.c"
Prediction: find . -name _REGEX ([-19.0748806])
Example 2:61
Original English: Find recursively all regular files changed within the last 5 minutes starting from directory b
English: find recursively all regular file changed within last _NUM minute starting from directory ARGUMENT_UNK
GT Command 1: find b -type f -cmin -5
Prediction: find . -type f -mmin -_NUM ([-11.28095531])
Example 2:62
Original English: find all the files in the current directory that have the word "bash" in their name
English: find all file in current directory word _REGEX in name
GT Command 1: find . -name "*bash*"
Prediction: find . -name _REGEX ([-10.39421749])
Example 2:63
Original English: search for a file in current folder excluding the search in the folder ./ignored_directory
English: search for file in current folder excluding search in folder _REGEX
GT Command 1: find . -path ./ignored_directory -prune -o -name fileName.txt -print
GT Command 2: find /path/to/folder -path "*/ignored_directory" -prune -o -name fileName.txt -print
Prediction: find . \( -path _REGEX -prune -or -name _REGEX \) -print ([-20.70738983])
Example 2:64
Original English: find all the directories in the entire file system whose size is greater than 50KB
English: find all directory in entire file system whose size greater than _NUMKB
GT Command 1: find / -type d -size +50k
Prediction: find / -type f -size +_NUMk ([-14.07158756])
Example 2:65
Original English: Search the current directory tree for files containing "sh" in their names
English: search current directory tree for file containing _REGEX in name
GT Command 1: find . -name "*sh*"
Prediction: find . -name _REGEX ([-9.29317665])
Example 2:66
Original English: sort based on size and display top ten largest normal/regular files in the current folder
English: sort based on size and display top _NUM largest _REGEX file in current folder
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -10
Prediction: find . -type f -printf _REGEX | sort | head -n _NUM ([-20.01843643])
Example 2:67
Original English: Find all files matching shell pattern "foo/bar" in the foo directory tree
English: find all file matching shell pattern _REGEX in foo directory tree
GT Command 1: find foo -path foo/bar -print
Prediction: find _REGEX -name _REGEX ([-17.36703873])
Example 2:68
Original English: search for a word in all the normal/regular files in the current folder
English: search for word in all _REGEX file in current folder
GT Command 1: find . -type f | xargs grep "text"
Prediction: find . -name _REGEX -exec grep -l _REGEX {} \; ([-9.19221306])
Example 2:69
Original English: search for the file, filename.txt in the current folder ( case insensitive search )
English: search for file _REGEX in current folder ( case insensitive search )
GT Command 1: find . -iname filename.txt
Prediction: find . -iname _REGEX ([-11.87867451])
Example 2:70
Original English: find all the text files which are present in the current directory excludinghidden files.
English: find all text file present in current directory ARGUMENT_UNK file
GT Command 1: find . -type f \( -iname "*.txt" ! -iname ".*" \)
Prediction: find . -name _REGEX -print ([-9.92768383])
Example 2:71
Original English: Find *.c files under $HOME and search for the string 'sprintf' in those files
English: find _REGEX file under _PARAMETER and search for string _REGEX in file
GT Command 1: find $HOME -name '*.c' -print | xargs    grep -l sprintf
Prediction: find _PARAMETER -name _REGEX -exec grep -l _REGEX {} \; ([-10.33674908])
Example 2:72
Original English: Locate files that reside in the home directory and have not been accessed in the past 30 days
English: locate file reside in home directory and not accessed in past _NUM day
GT Command 1: find $HOME -atime +30
Prediction: find ${HOME} -atime +_NUM ([-13.89094257])
Example 2:73
Original English: Find regular files under and below /path that match pattern "???-???_[a-zA-Z]*_[0-9]*_*.???"
English: find regular file under and below _REGEX match pattern _REGEX
GT Command 1: find /path -type f -name "???-???_[a-zA-Z]*_[0-9]*_*.???"
Prediction: find _REGEX -type f -print ([-11.38546944])
Example 2:74
Original English: create a tar ball of all pdf files in current folder
English: create tar ball of all pdf file in current folder
GT Command 1: find . -name *.pdf | xargs tar czvf /root/Desktop/evidence/pdf.tar
GT Command 2: find . -name '*.pdf' -print0 | tar czvf pdf.tar --null -T -
Prediction: find . -name _REGEX -exec tar -r -v -f _PARAMETER {} \; ([-9.72829533])
Example 2:75
Original English: find all the files in the current directory and print them excluding those that have the name SCCS.
English: find all file in current directory and print excluding name SCCS
GT Command 1: find . -print -o -name SCCS -prune
Prediction: find . -name _REGEX -print ([-13.41204166])
Example 2:76
Original English: Search directory foo for files containing "foo/bar" in their full names
English: search directory foo for file containing _REGEX in full name
GT Command 1: find foo -path foo/bar -print
GT Command 2: find foo -path /tmp/foo/bar -print
Prediction: find _REGEX -name _REGEX -type f ([-15.70743752])
Example 2:77
Original English: copy the file header.shtml to each directory under dir1, dir2, dir3, or dir4
English: copy file _REGEX to each directory under dir_NUM dir_NUM dir_NUM or dir_NUM
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
Prediction: find _REGEX ! -path _REGEX ! -path _REGEX -prune -or -name _REGEX \) -print ([-19.47555542])
Example 2:78
Original English: Find .gif and .png image files in ~/Desktop and move them to the ~/Pictures directory.
English: find _REGEX and _REGEX image file in _PARAMETER and move to _PARAMETER directory
GT Command 1: find ~/Desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/Pictures
Prediction: find _PARAMETER -name _REGEX -exec mv {} _PARAMETER \; ([-10.4068079])
Example 2:79
Original English: find all files in the current folder having a specific word in their name
English: find all file in current folder having specific word in name
GT Command 1: find -name "*pattern*"
Prediction: find . -name _REGEX -type f -print ([-10.66276836])
Example 2:80
Original English: display all the directories in the folder /path/to/dest except tmp and cache directories
English: display all directory in folder _REGEX except tmp and cache directory
GT Command 1: find /path/to/dest -type d \( ! -name tmp \) -o \( ! -name cache \) -print
Prediction: find _REGEX -maxdepth _NUM -type d -name _REGEX -print ([-21.1565609])
Example 2:81
Original English: Find all *.tex files/directories in maximum 2 levels down the current directory
English: find all _REGEX _REGEX in maximum _NUM level down current directory
GT Command 1: find . -maxdepth 2 -name '*.tex'
Prediction: find . -maxdepth _NUM -name _REGEX ([-7.45478153])
Example 2:82
Original English: find files in the current directory and sub-directories, that were accessed within last hour
English: find file in current directory and sub-directories accessed within last hour
GT Command 1: find -amin -60
Prediction: find . -atime -_NUM ([-5.13388824])
Example 2:83
Original English: display all the text files in the current folder  and do not search in the bin directory
English: display all text file in current folder and not search in bin directory
GT Command 1: find . -name bin -prune -o -name "*.txt" -print
Prediction: find . -name _REGEX -type f -print ([-14.48718548])
Example 2:84
Original English: display all sqlite files in the current directory along with their timestamp
English: display all ARGUMENT_UNK file in current directory along with timestamp
GT Command 1: find ./ -name "*.sqlite" -printf '%Tc %p\n'
Prediction: find . -regex _REGEX ([-15.07088566])
Example 2:85
Original English: Search the current directory, except the subdirectory tree ".svn", for files whose name is "foo.cpp"
English: search current directory except subdirectory tree _REGEX for file whose name _REGEX
GT Command 1: find . -name 'foo.cpp' '!' -path '.svn'
Prediction: find . -name _REGEX -not -path _REGEX ([-15.52654076])
Example 2:86
Original English: Remove the .jpg files from the current directory whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg"
English: remove _REGEX file from current directory whose name match regular expression _REGEX
GT Command 1: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg" -exec rm -rf {} \;
GT Command 2: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg" | xargs rm
Prediction: find . -name _REGEX | xargs rm -f ([-11.15196896])
Example 2:87
Original English: Find all files in the current directory tree that match pattern 'a(b*'
English: find all file in current directory tree match pattern _REGEX
GT Command 1: find . -name 'a(b*' -print
Prediction: find . -name _REGEX ([-12.03341961])
Example 2:88
Original English: Search the current directory and its sub-directories for any file that has "bsd" somewhere in its name.
English: search current directory and sub-directories for any file ha _REGEX somewhere in name
GT Command 1: find . -name "*bsd*" -print
Prediction: find . -name _REGEX ([-10.69147015])
Example 2:89
Original English: display all the files in the entire file system which are bigger than 10MB
English: display all file in entire file system bigger than _NUMMB
GT Command 1: find / -size +10000k
Prediction: find / -size +_NUMM ([-10.7865448])
Example 2:90
Original English: Find all files that belongs to user Tecmint under /home directory
English: find all file belongs to user tecmint under _REGEX directory
GT Command 1: find /home -user tecmint
Prediction: find _REGEX -user tecmint -iname _REGEX ([-14.26245785])
Example 2:91
Original English: Find *test* files/directories under current directory ensuring  that a directory is evaluated before its contents
English: find _REGEX _REGEX under current directory ensuring directory ARGUMENT_UNK before content
GT Command 1: find -name "*test*" -depth
Prediction: find . -name _REGEX | xargs grep -l _REGEX ([-15.70539474])
Example 2:92
Original English: find all files in the file system whose size is bigger than 3GB
English: find all file in file system whose size bigger than _NUMGB
GT Command 1: find / -size +3G
Prediction: find / -size +_NUMM ([-10.93412685])
Example 2:93
Original English: delete all the regular files in the temp folder which have not been changed in the last 15*24 hours
English: delete all regular file in temp folder not changed in last _REGEX hour
GT Command 1: find /tmp/ -ctime +15 -type f -exec rm {} \;
Prediction: find _REGEX -type f -mtime +_NUM -delete ([-11.83035374])
Example 2:94
Original English: Find all 400 permission files under /data directory with null character as the delimiter
English: find all _NUM permission file under _REGEX directory with null character delimiter
GT Command 1: find /data -type f -perm 400 -print0
Prediction: find _REGEX -type f -print0 | xargs -0 chmod 644 ([-7.72752619])
Example 2:95
Original English: display all the regular files in the current folder which dont not have the permission 777
English: display all regular file in current folder dont not permission _NUM
GT Command 1: find . -type f ! -perm 777
Prediction: find . -type f -perm 777 ([-13.5433569])
Example 2:96
Original English: show the list of all the files in the current folder which have been modified within the 24 hours
English: show list of all file in current folder modified within _NUM hour
GT Command 1: find . -mtime 0 -print
Prediction: find . -mtime _NUM ([-11.79868984])
Example 2:97
Original English: Copy file header.shtml to directories dir1, dir2, dir3, and dir4
English: copy file _REGEX to directory dir_NUM dir_NUM dir_NUM and dir_NUM
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
Prediction: find dir -type d -name _REGEX | xargs tar -r -v -f myfile.tar ([-18.11728096])
Example 2:98
Original English: find all the files with a specific name in the current folder and delete them
English: find all file with specific name in current folder and delete
GT Command 1: find . -name “find name” -exec rm {}\ ;
Prediction: find . -name _REGEX -exec rm {} \; ([-9.28743649])
Example 2:99
Original English: display all the files in the current folder which have been modified between two dates
English: display all file in current folder modified between _NUM date
GT Command 1: find . -newermt “Sep 1 2006” -and \! -newermt “Sep 10 2006”
Prediction: find . -size _NUMk ([-16.91304588])
Example 2:100
Original English: display long list of all the perl files in the current folder
English: display long list of all perl file in current folder
GT Command 1: find . -name "*.pl" -ls
Prediction: find . -name _REGEX -exec ls -l {} \; ([-6.16724968])
Example 2:101
Original English: find all the files in a folder which do not belong to any user
English: find all file in folder not belong to any user
GT Command 1: find /home -nouser -print
Prediction: find _REGEX ! -perm 0644 ([-11.85645866])
Example 2:102
Original English: find all files having certain word in its name in the current folder
English: find all file having certain word in name in current folder
GT Command 1: find . -name "*bsd*" -print
Prediction: find . -name _REGEX -type f -print ([-12.15436649])
Example 2:103
Original English: List all regular files in /var/www and below that have changed in the last 10 minutes
English: list all regular file in _REGEX and below changed in last _NUM minute
GT Command 1: find /var/www -cmin -10 -type f -printf "%c %pn"
Prediction: find _REGEX -type f -mtime -_NUM ([-13.27297974])
Example 2:104
Original English: Search the .c files residing in the Lib/ directory tree for lines beginning with "PyErr"
English: search _REGEX file residing in _REGEX directory tree for line beginning with _REGEX
GT Command 1: find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
Prediction: find _REGEX -name _REGEX -exec grep -l _REGEX {} \; ([-9.58660889])
Example 2:105
Original English: Find all *.cgi files/directories under current directory and change their permission to 755
English: find all _REGEX _REGEX under current directory and change permission to _NUM
GT Command 1: find . -name '*.cgi' -print0 | xargs -0 chmod 755
GT Command 2: find . -name '*.cgi' -print0 | xargs -0 chmod 775
Prediction: find . -name _REGEX -exec chmod 400 {} \; ([-8.64878845])
Example 2:106
Original English: Locate files whose status was changed less than 1 day ago
English: locate file whose status wa changed le than _NUM day ago
GT Command 1: find . -ctime -1 -print
Prediction: find . -mtime -_NUM ([-9.77945328])
Example 2:107
Original English: Find files in the current directory whose names begin with "file" and remove them
English: find file in current directory whose name begin with _REGEX and remove
GT Command 1: find . -name file* -maxdepth 1 -exec rm {} \;
Prediction: find . -name _REGEX | xargs rm ([-13.91335964])
Example 2:108
Original English: Find all *.csv files under /foo/bar and move them to some_dir
English: find all _REGEX file under _REGEX and move to _REGEX
GT Command 1: find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir
GT Command 2: find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir
Prediction: find _REGEX -name _REGEX | xargs -I {} mv {} _REGEX ([-12.83133602])
Example 2:109
Original English: Locating large files (> 100 MB) in /home/ for 'cleaning'
English: ARGUMENT_UNK large file ( _REGEX _NUM MB ) in _REGEX for _REGEX
GT Command 1: find /home -type f -size +100M -delete
Prediction: find _REGEX -name _REGEX -exec grep -i -l _REGEX {} \; ([-11.15388393])
Example 2:110
Original English: List all files/directories with spaces in their names under ~/Library directory
English: list all _REGEX with space in name under _PARAMETER directory
GT Command 1: find ~/Library -name '* *' -exec ls {} \;
Prediction: find _PARAMETER -name _REGEX -exec ls -l {} \; ([-7.84073496])
Example 2:111
Original English: search for directories in the folder "test" which end with 5 digits using regular expressions
English: search for directory in folder _REGEX end with _NUM digit using regular expression
GT Command 1: find ./test -regextype posix-egrep -type d -regex '.*/[0-9]{5}$'
Prediction: find _REGEX -mindepth _NUM -type d -name _REGEX ([-13.1883049])
Example 2:112
Original English: Remove files in the current directory tree modified more than 31 days ago recursively
English: remove file in current directory tree modified more than _NUM day ago recursively
GT Command 1: find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
Prediction: find . -name _REGEX -mtime +_NUM -exec rm {} \; ([-7.91543436])
Example 2:113
Original English: Delete all files in the current directory tree whose names end with ~
English: delete all file in current directory tree whose name end with _PARAMETER
GT Command 1: find . -name "*~" -delete
GT Command 2: find . -name "*~" -exec rm {} \;
Prediction: find . -name _PARAMETER | xargs rm ([-12.88050365])
Example 2:114
Original English: Find files under /usr that are the same age or older than file `FirstFile'
English: find file under _REGEX same ARGUMENT_UNK or older than file _REGEX
GT Command 1: find /usr ! -newer /FirstFile -print
Prediction: find _REGEX -type f -name _REGEX ([-17.19041252])
Example 2:115
Original English: find all the files in the current folder which end with "ext1" or "ext2" or "ext3"
English: find all file in current folder end with _REGEX or _REGEX or _REGEX
GT Command 1: find -E . -regex ".*ext1|.*ext2|.*ext3"
Prediction: find . -name _REGEX ([-15.83461952])
Example 2:116
Original English: find all the files starting with "config" in the folder Symfony ( case insensitive search)
English: find all file starting with _REGEX in folder symfony ( case insensitive search )
GT Command 1: find Symfony -iname '*config*';
Prediction: find _REGEX -iname _REGEX ([-6.18877649])
Example 2:117
Original English: Search all the .c and .h files in the current directory tree for "expr"
English: search all _REGEX and _REGEX file in current directory tree for _REGEX
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction: find . -name _REGEX | xargs grep _REGEX ([-9.76604176])
Example 2:118
Original English: Search the current directory tree for files whose name is ".note", case insensitive
English: search current directory tree for file whose name _REGEX case insensitive
GT Command 1: find . -iname '.note' | sort
GT Command 2: find . -iname '.note'
GT Command 3: find -type d -exec find {} -maxdepth 1 \! -type d -iname '.note' \;
GT Command 4: find . -iname '.note' | sort -r
Prediction: find . -iname _REGEX ([-12.94360161])
Example 2:119
Original English: change the owner of all the files in folder /u/netinst to netinst
English: change owner of all file in folder _REGEX to ARGUMENT_UNK
GT Command 1: find /u/netinst -print | xargs chown netinst
Prediction: find _REGEX -type f -print0 | xargs -0 chmod 644 ([-9.42354965])
Example 2:120
Original English: list regular file which file name end with 'cache' 'xml' or 'html' in current directory
English: list regular file file name end with _REGEX _REGEX or _REGEX in current directory
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
Prediction: find . -type f -name _REGEX | xargs grep -l thing ([-11.29528427])
Example 2:121
Original English: Find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety
English: find _REGEX file under _REGEX and delete with confirmation prompt ensuring white space safety
GT Command 1: find /mnt/zip -name "*prefs copy" -print0 | xargs    -0 -p /bin/rm
Prediction: find _REGEX -name _REGEX -print0 | xargs -0 rm ([-12.98153305])
Example 2:122
Original English: Search the current working directory tree for files whose names start with "fileA_" or "fileB_"
English: search current working directory tree for file whose name start with _REGEX or _REGEX
GT Command 1: find . -name 'fileA_*' -o -name 'fileB_*'
Prediction: find . -name _REGEX ([-13.67960072])
Example 2:123
Original English: Find recursively all files changed within the last 5 minutes starting from directory b
English: find recursively all file changed within last _NUM minute starting from directory ARGUMENT_UNK
GT Command 1: find b -cmin -5
Prediction: find . -type f -mmin -_NUM ([-12.33693504])
Example 2:124
Original English: find all the files in the current folder which have a specific word in their name
English: find all file in current folder specific word in name
GT Command 1: find . -name '*foo*'
Prediction: find . -name _REGEX -print ([-10.52174091])
Example 2:125
Original English: find all the empty directories in the current folder and all its sub directories too
English: find all empty directory in current folder and all sub directory too
GT Command 1: find . -depth -empty -type d
Prediction: find . -maxdepth _NUM -type d -empty ([-15.52512741])
Example 2:126
Original English: Find files that are 0 bytes in size in the current directory tree and remove them
English: find file _NUM byte in size in current directory tree and remove
GT Command 1: find . -size 0 -exec rm {} \;
Prediction: find . -size _NUM -exec rm {} \; ([-10.91921329])
Example 2:127
Original English: Find all files whose names contain the string 'xpilot' which exist within '/usr/local/games'
English: find all file whose name contain string _REGEX ARGUMENT_UNK within _REGEX
GT Command 1: find /usr/local/games -name "*xpilot*"
Prediction: find . -name _REGEX -type f -print | xargs grep _REGEX ([-11.07698917])
Example 2:128
Original English: Find files with 002 permission in entire file system with the null character as the delimiter
English: find file with _NUM permission in entire file system with null character delimiter
GT Command 1: find / -type f -perm -002 -print0
Prediction: find / -perm 644 ([-8.60205555])
Example 2:129
Original English: find all the files in the current directory with the name "wagoneer" which are in the current device.
English: find all file in current directory with name _REGEX in current ARGUMENT_UNK
GT Command 1: find . -xdev -name "wagoneer*" -print
Prediction: find . -name _REGEX ([-13.54433632])
Example 2:130
Original English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names
English: list all _REGEX under current directory matching posix-egrep type regex _PARAMETER in name
GT Command 1: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$" -print0 | xargs -0 -n 1 ls
GT Command 2: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$" | xargs -n 1 ls
Prediction: find . | grep -P _REGEX ([-22.62255478])
Example 2:131
Original English: find file.txt in the file system, search confined to a specific path
English: find _REGEX in file system search ARGUMENT_UNK to specific path
GT Command 1: find / -path /usr/lib/important/*/file.txt
Prediction: find / -name _REGEX ([-16.65310287])
Example 2:132
Original English: search for the word "redeem reward" in all the regular/normal files in the current folder
English: search for word _REGEX in all _REGEX file in current folder
GT Command 1: find . -type f -exec grep -i “redeem reward” {} \; -print
Prediction: find . -name _REGEX -exec grep -l _REGEX {} \; ([-8.92019176])
Example 2:133
Original English: Search directory /tmp/foo for files containing "/tmp/foo/bar" in their full names
English: search directory _REGEX for file containing _REGEX in full name
GT Command 1: find /tmp/foo -path /tmp/foo/bar -print
Prediction: find _REGEX -name _REGEX -type f ([-13.47574234])
Example 2:134
Original English: find all the html, javascript and text files in the current folder
English: find all html javascript and text file in current folder
GT Command 1: find . -type f -name "*.htm*" -o -name "*.js*" -o -name "*.txt"
Prediction: find . -name _REGEX -print | xargs grep _REGEX ([-15.5137558])
Example 2:135
Original English: search for all the rpm files in the file system which reside in the same partition as that of the root
English: search for all ARGUMENT_UNK file in file system reside in same partition of root
GT Command 1: find / -xdev -name "*.rpm"
Prediction: find / -iname _REGEX ([-12.08143806])
Example 2:136
Original English: find all the pdf files in current folder and create a tar ball of all these files
English: find all pdf file in current folder and create tar ball of all file
GT Command 1: find . -iname "*.pdf" -exec tar --append --file=somefile.tar {} \;
Prediction: find . -name _REGEX | xargs grep -l thing ([-21.92323112])
Example 2:137
Original English: Find all empty regular files in the current directory and below
English: find all empty regular file in current directory and below
GT Command 1: find . -type f -empty
Prediction: find . -type f -empty ([-10.89967442])
Example 2:138
Original English: Find all directories in entire file system which are larger than 50KB
English: find all directory in entire file system larger than _NUMKB
GT Command 1: find / -type d -size +50k
Prediction: find / -type f -size +_NUMk ([-12.07754517])
Example 2:139
Original English: find all files ending with a specific word in current folder
English: find all file ending with specific word in current folder
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
Prediction: find . -name _REGEX ([-15.67108345])
Example 2:140
Original English: Search the current directory tree for *cache, *xml, and *html files
English: search current directory tree for _REGEX _REGEX and _REGEX file
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
Prediction: find . -name _REGEX | xargs grep _REGEX ([-16.67920113])
Example 2:141
Original English: Find all directories under and below /home/admin/public_html/, and change their permissions to 755
English: find all directory under and below _REGEX and change permission to _NUM
GT Command 1: find /home/admin/public_html/ -type d -exec chmod 755 {} \;
Prediction: find _REGEX -type d -exec chmod 755 {} \; ([-8.23460007])
Example 2:142
Original English: Search the current directory tree for TXT files skipping hidden ones
English: search current directory tree for TXT file skipping hidden _NUM
GT Command 1: find . -type f \( -iname "*.txt" ! -iname ".*" \)
Prediction: find . -name _REGEX -type f -print ([-20.37940788])
Example 2:143
Original English: copy all the files with the extension ".type" from one folder to a target directory
English: copy all file with extension _REGEX from _NUM folder to ARGUMENT_UNK directory
GT Command 1: find "$sourcedir" -type f -name "*.type" | xargs cp -t targetdir
Prediction: find _REGEX -type f -name _REGEX -exec cp {} _REGEX \; ([-12.28870583])
Example 2:144
Original English: search for directories in the folder "test" which end have 5 digits as their name
English: search for directory in folder _REGEX end _NUM digit name
GT Command 1: find ./test -type d -name '[0-9][0-9][0-9][0-9][0-9]'
Prediction: find _REGEX -type d -name _REGEX ([-7.49072981])
Example 2:145
Original English: Search for file names with "bad" characters in the current directory and delete the files.
English: search for file name with _REGEX character in current directory and delete file
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Prediction: find . -name _REGEX -exec rm {} \; ([-10.37268257])
Example 2:146
Original English: look for a file or folder called game in all folders under the current folder
English: look for file or folder called game in all folder under current folder
GT Command 1: find . -name game
Prediction: find . -type f -print0 | xargs -0 grep -l _REGEX ([-10.17547894])
Example 2:147
Original English: Move all Emacs backup files from the current directory tree to ~/backups/
English: move all emacs backup file from current directory tree to _PARAMETER
GT Command 1: find . -name '*~' -print 0 | xargs -0 -I % cp % ~/backups
Prediction: find . -name _REGEX -exec mv {} _PARAMETER \; ([-10.8642416])
Example 2:148
Original English: search for all the mp3 files in the folder /home/you which have been accessed 24 ago
English: search for all mp_NUM file in folder _REGEX accessed _NUM ago
GT Command 1: find /home/you -iname “*.mp3” -atime 01 -type -f
Prediction: find _REGEX -type f -atime +_NUM -print ([-10.66024303])
Example 2:149
Original English: find all files in the current folder which are of size 0 bytes.
English: find all file in current folder of size _NUM byte
GT Command 1: find . -type f -empty
GT Command 2: find . -type f -size 0b
Prediction: find . -size _NUM ([-7.1548171])
Example 2:150
Original English: Find string "STRING" in files residing in the current directory tree, case insensitive
English: find string _REGEX in file residing in current directory tree case insensitive
GT Command 1: find . -type f -print | xargs grep -ni "STRING"
Prediction: find . -iname _REGEX ([-12.51821899])
Example 2:151
Original English: Find all TXT files in the current directory and copy them to directory "$HOME/newdir"
English: find all TXT file in current directory and copy to directory _PARAMETER
GT Command 1: find "$HOME" -name '*.txt' -type f -print0 | xargs -0 cp -ut "$HOME/newdir"
GT Command 2: find "$HOME" -name '*.txt' -type f -print0 | sort -zu | xargs -0 cp -t "$HOME/newdir"
GT Command 3: find "$HOME" -name '*.txt' -type f -not -path "$HOME/newdir/*" -print0 | xargs -0 cp -t "$HOME/newdir"
Prediction: find . -name _REGEX | xargs -I {} mv {} _PARAMETER ([-14.86738968])
Example 2:152
Original English: find all the text files in the folder /home/calvin and do not search beyond 2 levels
English: find all text file in folder _REGEX and not search beyond _NUM level
GT Command 1: find /home/calvin/ -maxdepth 2  -name “*.txt”
Prediction: find _REGEX -maxdepth _NUM -name _REGEX ([-11.15164757])
Example 2:153
Original English: Delete all the .c files present in the current directory and below
English: delete all _REGEX file present in current directory and below
GT Command 1: find . -name "*.c" | xargs rm -f
Prediction: find . -name _REGEX | xargs rm ([-12.00258636])
Example 2:154
Original English: search for all the files in the current folder which start with "my"
English: search for all file in current folder start with _REGEX
GT Command 1: find . -name 'my*'
Prediction: find . -name _REGEX ([-6.4817276])
Example 2:155
Original English: copy all java files from current folder to another folder
English: copy all java file from current folder to another folder
GT Command 1: find . -name "*.java" -print0 | xargs -0 -J % cp % destinationFolder
Prediction: find . -name _REGEX -exec cp {} _REGEX \; ([-11.91125202])
Example 2:156
Original English: display all the .sh scripts and perl files in the current folder
English: display all _REGEX script and perl file in current folder
GT Command 1: find . -type f \( -iname "*.sh" -or -iname "*.pl" \)
GT Command 2: find . -type f \( -name "*.[sS][hH]" -o -name "*.[pP][lL]" \)
Prediction: find . -name _REGEX | xargs grep -l thing ([-15.85747242])
Example 2:157
Original English: display all the files in the current folder which start with either "fileA_" or "fileB_"
English: display all file in current folder start with either _REGEX or _REGEX
GT Command 1: find . -name 'fileA_*' -o -name 'fileB_*'
Prediction: find . -regex _REGEX ([-11.03166676])
Example 2:158
Original English: Find all 400 permission files under /data directory and change their permission to 755
English: find all _NUM permission file under _REGEX directory and change permission to _NUM
GT Command 1: find /data -type f -perm 400 -print | xargs chmod 755
Prediction: find _REGEX -type f -exec chmod 400 {} \; ([-7.56351376])
Example 2:159
Original English: find the count of text files that are present in the current working directory.
English: find count of text file present in current working directory
GT Command 1: find . -maxdepth 1 -name \*.txt -print0 | grep -cz .
Prediction: find . -name _REGEX | wc -l ([-11.32854652])
Example 2:160
Original English: Search for files whose names match "*test*", a directory bing evaluated before its contents
English: search for file whose name match _REGEX directory ARGUMENT_UNK ARGUMENT_UNK before content
GT Command 1: find -name "*test*" -depth
Prediction: find . -name _REGEX | grep -P _REGEX ([-17.43415642])
Example 2:161
Original English: List all regular files residing in the current directory tree and containing string "/bin/ksh"
English: list all regular file residing in current directory tree and containing string _REGEX
GT Command 1: find . -type f -print | xargs grep -li 'bin/ksh'
GT Command 2: find . -type f -exec grep -li '/bin/ksh' {} \;
Prediction: find . -type f -exec grep -l _REGEX {} \; ([-9.42034245])
Example 2:162
Original English: Find all the files in file system which are changed in last 1 hour
English: find all file in file system changed in last _NUM hour
GT Command 1: find / -cmin -60
GT Command 2: find / -ctime -1
Prediction: find / -amin -_NUM ([-5.05843973])
Example 2:163
Original English: display all the files in current folder which have been changed in the last 24 hours
English: display all file in current folder changed in last _NUM hour
GT Command 1: find . -ctime -1 -print
Prediction: find . -cmin -_NUM ([-7.39640188])
Example 2:164
Original English: Find all the files in the current directory with “linkin park” in their names
English: find all file in current directory with _REGEX in name
GT Command 1: find . -maxdepth 1 -iname "*linkin park*"
Prediction: find . -name _REGEX ([-12.02781677])
Example 2:165
Original English: Find the files which have the name "java" in it and then display only the files which have "class" word in them?
English: find file name _REGEX in and display only file _REGEX word in _REGEX
GT Command 1: find -name "*java*" -exec grep -H class {} \;
Prediction: find _REGEX -name _REGEX -type f -print0 | xargs -0 grep -l _REGEX ([-10.51627827])
Example 2:166
Original English: Find all .txt files in the user's home directory and below.
English: find all _REGEX file in _REGEX home directory and below
GT Command 1: find ~/ -name '*.txt'
Prediction: find ${HOME} -name _REGEX ([-13.11630535])
Example 2:167
Original English: search for mp3 files in the folder /mp3collection which are smaller than 5MB
English: search for mp_NUM file in folder _REGEX smaller than _NUMMB
GT Command 1: find /mp3collection -name '*.mp3' -size -5000k
Prediction: find _REGEX -type f -size +_NUMk -exec ls -l {} \; ([-9.20484161])
Example 2:168
Original English: Find all .c and .h files in the current directory tree and search them for "expr"
English: find all _REGEX and _REGEX file in current directory tree and search for _REGEX
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction: find . -name _REGEX | xargs grep _REGEX ([-12.73171806])
Example 2:169
Original English: Remove regular files changed more than 15 days ago from the /tmp directory tree
English: remove regular file changed more than _NUM day ago from _REGEX directory tree
GT Command 1: find /tmp/ -ctime +15 -type f -exec rm {} \;
Prediction: find _REGEX -type f -mtime +_NUM -exec rm {} \; ([-7.7231307])
Example 2:170
Original English: find for a word in all the regular files in the current directory
English: find for word in all regular file in current directory
GT Command 1: find . -type f -print | xargs grep -li 'bin/ksh'
GT Command 2: find . -type f -exec grep -li '/bin/ksh' {} \;
Prediction: find . -type f -exec grep -l _REGEX {} \; ([-8.33398819])
Example 2:171
Original English: Find all *.c files under and below the current directory that contain "hogehoge"
English: find all _REGEX file under and below current directory contain _REGEX
GT Command 1: find . -name \*.c | xargs grep hogehoge
Prediction: find . -name _REGEX | xargs grep -l thing ([-9.43806076])
Example 2:172
Original English: find all text files in current folder; which have been modified exactly 5 days ago
English: find all text file in current folder modified exactly _NUM day ago
GT Command 1: find . –name "*.txt" –mtime 5
Prediction: find . -mtime _NUM -name _REGEX ([-12.68522453])
Example 2:173
Original English: search for a file in current folder excluding those that are present in a specific path
English: search for file in current folder excluding present in specific path
GT Command 1: find /path/to/folder -name fileName.txt -not -path "*/ignored_directory/*"
Prediction: find . -path _REGEX -prune ([-18.0670948])
Example 2:174
Original English: Count the number of lines in all files in the xargstest/ directory tree that match pattern 'file??'
English: count number of line in all file in _REGEX directory tree match pattern _REGEX
GT Command 1: find xargstest/ -name 'file??' | sort | xargs wc -l
Prediction: find _REGEX -name _REGEX | xargs wc -l ([-11.69487381])
Example 2:175
Original English: remove all the files in the current folder which have not been modified in the last 10 days
English: remove all file in current folder not modified in last _NUM day
GT Command 1: find . -mtime +10 | xargs rm
Prediction: find . -mtime +_NUM -exec rm {} \; ([-8.39996243])
Example 3:0
Original English: display all the regular/normal files in the folder /path/ which have not been modified today ( from day start ie, 00:00 )
English: display all _REGEX file in folder _REGEX not modified today ( from day start ie _REGEX )
GT Command 1: find /path/ -type f -daystart -mtime +0
Prediction: find _REGEX -type f -mtime +_NUM ([-13.43952751])
Example 3:1
Original English: Find all *.cgi (case insensitive) files/directories under current directory and change their permission to 755
English: find all _REGEX ( case insensitive ) _REGEX under current directory and change permission to _NUM
GT Command 1: find . -iname '*.cgi' | xargs chmod 755
Prediction: find . -iname _REGEX -exec chmod 400 {} \; ([-9.8555603])
Example 3:2
Original English: Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%D'
English: count number of file in _REGEX directory tree whose name begin with _REGEX and contain _REGEX
GT Command 1: find /usr/ports/ -name pkg-plist\* -exec grep 'unexec.rmdir %D' '{}' '+' | wc -l
Prediction: find _REGEX -name _REGEX | xargs wc -l ([-11.58835506])
Example 3:3
Original English: display a long list of all the files in the file system which belong to a specific user and which have suid set
English: display long list of all file in file system belong to specific user and ARGUMENT_UNK set
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction: find / -user root -iname _REGEX ([-16.33492088])
Example 3:4
Original English: Find files in the current directory tree whose names begin with "file" and whose size is 0, and remove them
English: find file in current directory tree whose name begin with _REGEX and whose size _NUM and remove
GT Command 1: find -name 'file*' -size 0 -delete
GT Command 2: find . -name 'file*' -size 0 -print0 | xargs -0 rm
Prediction: find . -name _REGEX -size +_NUMM -exec rm {} \; ([-9.80190563])
Example 3:5
Original English: Find all HTML files starting with letter 'a' in the current directory and below ignoring the case
English: find all HTML file starting with letter _REGEX in current directory and below ignoring case
GT Command 1: find . -iname a\*.html
Prediction: find . -iname _REGEX ([-6.84688568])
Example 3:6
Original English: find regular files in the current directory, without descending into sub-directories and display as a null separated list.
English: find regular file in current directory without descending into sub-directories and display null separated list
GT Command 1: find -maxdepth 1 -type f -printf '%f\000'
Prediction: find . -maxdepth _NUM -type f -print0 ([-12.88649464])
Example 3:7
Original English: display the top 20 biggest files in the current folder which are present in the same partition as that of the current folder
English: display top _NUM ARGUMENT_UNK file in current folder present in same partition of current folder
GT Command 1: find . -xdev -printf ‘%s %p\n’ |sort -nr|head -20
Prediction: find . -type f -name _REGEX -exec ls -l {} \; ([-13.87356853])
Example 3:8
Original English: Find all files and directories in the current directory tree except those whose name is "dirname", case insensitive
English: find all file and directory in current directory tree except whose name _REGEX case insensitive
GT Command 1: find ./ -iname ! -iname dirname
Prediction: find . -iname _REGEX ([-12.65243435])
Example 3:9
Original English: display a long list of all regular/normal files in the file system which belong to the root and with suid bit set
English: display long list of all _REGEX file in file system belong to root and with ARGUMENT_UNK bit set
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
Prediction: find / -user root -iname _REGEX | xargs ls -l ([-21.00416183])
Example 3:10
Original English: Find directories under maximum 1 level down the directory $dir with 100 permission that are owned by the user $username
English: find directory under maximum _NUM level down directory _PARAMETER with _NUM permission owned by user _PARAMETER
GT Command 1: find $dir -maxdepth 1 -type d -user $username -perm -100
Prediction: find _PARAMETER -mindepth _NUM -type d | sort ([-12.58034134])
Example 3:11
Original English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names excluding the paths */generated/* and */deploy/*
English: list all _REGEX under current directory matching posix-egrep type regex _PARAMETER in name excluding path _REGEX and _REGEX
GT Command 1: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -L1d
Prediction: find . -name _REGEX | xargs grep -l thing ([-24.48637772])
Example 3:12
Original English: Find all files in the current directory tree whose names are "file_name", except for those with pathnames matching pattern "./dirt to be Excluded/*"
English: find all file in current directory tree whose name _REGEX except for with pathnames matching pattern _REGEX
GT Command 1: find ./ -iname file_name ! -path "./dirt to be Excluded/*"
Prediction: find . -name _REGEX | grep -v _REGEX ([-20.77404594])
Example 3:13
Original English: display a long listing of all the files in the current folder that have been accessed in today from the start of the day
English: display long listing of all file in current folder accessed in today from start of day
GT Command 1: find -daystart   -atime 0 -ls
Prediction: find . -atime +_NUM -exec ls -l {} \; ([-7.98189735])
Example 3:14
Original English: Search for regular expression 'expr' in all .c and .h files from the current directory tree
English: search for regular expression _REGEX in all _REGEX and _REGEX file from current directory tree
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
Prediction: find . -name _REGEX -type f -print0 | xargs -0 grep -l -i word ([-12.08860016])
Example 3:15
Original English: Find all files and directories in the current directory tree with "linkin park" in their names and copy them to /Users/tommye/Desktop/LP
English: find all file and directory in current directory tree with _REGEX in name and copy to _REGEX
GT Command 1: find . -iname "*linkin park*" -exec cp -r {} /Users/tommye/Desktop/LP \;
Prediction:  ([-17.99023628])
Example 3:16
Original English: find all the files in the current directory which have been accessed in the last 1 day and move them to TMP folder.
English: find all file in current directory accessed in last _NUM day and move to ARGUMENT_UNK folder
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \;
Prediction: find . -atime +_NUM -exec rm {} \; ([-11.04147243])
Example 3:17
Original English: find all the configuration files in a folder and do not search in the sub folder's directories and display the last ten files.
English: find all configuration file in folder and not search in sub _REGEX directory and display last _NUM file
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
Prediction: find _REGEX -maxdepth _NUM -name _REGEX ([-15.45363522])
Example 3:18
Original English: Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^MASTER_SITE.*CPAN'
English: find all file named _REGEX in _REGEX directory tree and count number of line in matching regular expression _REGEX
GT Command 1: find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE.*CPAN' '{}' '+' | wc -l
Prediction: find _REGEX -name _REGEX -type f -print0 | xargs -0 grep -l _REGEX ([-17.81828499])
Example 3:19
Original English: display all files in the current folder after pruning those in the current folder ( dot is the output of this command )
English: display all file in current folder after ARGUMENT_UNK in current folder ( dot output of command )
GT Command 1: find . -prune -print
Prediction: find . -path _REGEX ([-12.09625626])
Example 3:20
Original English: Search the current directory tree for the files with extension "trc" and list them if they are more than three days old
English: search current directory tree for file with extension _REGEX and list if more than _NUM day old
GT Command 1: find . -name "*.trc" -ctime +3 -exec ls -l {} \;
Prediction: find . -name _REGEX -mtime +_NUM ([-14.87513447])
Example 3:21
Original English: Find files under [directory] that match 'pattern_to_INCLUDE' in their names without descending into directories that match 'pattern_to_exclude' and 'another_pattern_to_exclude', then search for 'pattern' in those files
English: find file under _REGEX match _REGEX in name without descending into directory match _REGEX and _REGEX in file
GT Command 1: find [directory] -name "pattern_to_exclude" -prune -o -name "another_pattern_to_exclude" -prune -o -name "pattern_to_INCLUDE" -print0 | xargs -0 -I FILENAME grep -IR "pattern" FILENAME
Prediction: find _REGEX -name _REGEX -type f -print0 | xargs -0 grep -l _REGEX ([-11.15937805])
Example 3:22
Original English: Find all files, starting from / but ignoring removable media, whose names end with ".rpm"
English: find all file starting from _REGEX but ignoring removable medium whose name end with _REGEX
GT Command 1: find / -xdev -name "*.rpm"
Prediction: find / -name _REGEX ([-9.77860069])
Example 3:23
Original English: display all instances of "foo.cpp" file in the current folder which are not in the sub directory tree ".svn"
English: display all instance of _REGEX file in current folder not in sub directory tree _REGEX
GT Command 1: find . -name 'foo.cpp' '!' -path '.svn'
Prediction: find . -name _REGEX -type f ([-14.00030041])
Example 3:24
Original English: find within a directory called /mp3collection, only those mp3 files that have a size less than 5000 Kilobytes ( < 5MB)
English: find within directory called _REGEX only mp_NUM file size le than _NUM kilobyte ( _REGEX _NUMMB )
GT Command 1: find /mp3collection -name '*.mp3' -size -5000k
Prediction: find _REGEX -type f -size +_NUMk ([-13.61526775])
Example 3:25
Original English: Find recursively all regular files in directory tree b that were changed within the last 5 minutes and copy them to directory c
English: find recursively all regular file in directory tree ARGUMENT_UNK changed within last _NUM minute and copy to directory c
GT Command 1: find b -type f -cmin -5 -exec cp '{}' c \;
Prediction: find _REGEX -type f -mtime -_NUM | xargs -0 rm ([-18.51221466])
Example 3:26
Original English: display all the files in the current folder excluding search in the paths containing the folder having the word "mmm"
English: display all file in current folder excluding search in path containing folder having word _REGEX
GT Command 1: find . ! -path *mmm*
Prediction: find . -path _REGEX ! -path _REGEX ([-19.12080002])
Example 3:27
Original English: Find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string "debug ("
English: find all _REGEX file in all directory tree matching pattern _REGEX and search file for string _REGEX
GT Command 1: find /srv/www/*/htdocs/system/application/ -name "*.php" -exec grep -H "debug (" {} +
GT Command 2: find /srv/www/*/htdocs/system/application/ -name "*.php" -print0 | xargs -0 grep -H "debug ("
GT Command 3: find /srv/www/*/htdocs/system/application/ -name "*.php" -exec grep "debug (" {} \; -print
Prediction: find . -name _REGEX -exec grep _REGEX {} \; -print ([-10.9536438])
Example 3:28
Original English: find all the files in current folder ending with "ini" and search for a word in all these files
English: find all file in current folder ending with _REGEX and search for word in all file
GT Command 1: find . -name *.ini -exec grep -w PROJECT_A {} \; -print | grep ini
Prediction: find . -name _REGEX | xargs grep _REGEX ([-17.77711868])
Example 3:29
Original English: Find files in the current directory tree which have permissions rwx for user and rw for group and others
English: find file in current directory tree permission rwx for user and ARGUMENT_UNK for group and others
GT Command 1: find . -perm 766
Prediction: find . -perm -664 ([-13.81797504])
Example 3:30
Original English: list regular files under the user's home directory that are over 100KB and have not been accessed in over 30 days.
English: list regular file under _REGEX home directory over _NUMKB and not accessed in over _NUM day
GT Command 1: find $HOME -type f -atime +30 -size 100k
Prediction: find ${HOME} -type f -atime +_NUM -exec ls -l {} \; ([-6.89221573])
Example 3:31
Original English: Search for 'foo=' in all *.png files under current directory without descending into *.gif and *.svn directories
English: search for _REGEX in all _REGEX file under current directory without descending into _REGEX and _REGEX directory
GT Command 1: find . -name "*.png" -prune -o -name "*.gif" -prune -o -name "*.svn" -prune -o -print0 | xargs -0 -I FILES grep -IR "foo=" FILES
Prediction: find . -name _REGEX | xargs grep _REGEX ([-24.03793335])
Example 3:32
Original English: Find files with 002 permission under /tmp and print them with the string 'Found world write permissions:' printed as the first line of output
English: find file with _NUM permission under _REGEX and print with string _REGEX ARGUMENT_UNK first line of output
GT Command 1: find /tmp -type f -perm -002 | sed '1s/^/Found world write permissions:\n/'
Prediction: find . -type f -perm 777 -exec chmod 400 {} \; ([-9.73322868])
Example 3:33
Original English: Find all files/directories in entire file system that have  "write" bit set for either the owner, the group, or others
English: find all _REGEX in entire file system _REGEX bit set for either owner group or others
GT Command 1: find / -perm /u+w,g+w,o+w
GT Command 2: find / -perm /222
GT Command 3: find / -perm /a+w
Prediction: find / -perm 644 ([-11.98741817])
Example 3:34
Original English: display all the regular files in the folder "$(FOLDER)" which are modified in the last $(RETENTION)*24 hours and excluding hidden files
English: display all regular file in folder _PARAMETER modified in last _PARAMETER ARGUMENT_UNK _REGEX hour and excluding hidden file
GT Command 1: find ${FOLDER} -type f ! -name \".*\" -mtime -${RETENTION}
Prediction: find _PARAMETER -type f -not -name _REGEX ([-16.19153023])
Example 3:35
Original English: display all the home folder which end with the extension "sxw" and which have been accessed in the last 3*24 hours and which belong to the user bruno
English: display all home folder end with extension _REGEX and accessed in last _REGEX hour and belong to user ARGUMENT_UNK
GT Command 1: find /home -type f -name "*.sxw" -atime -3 -user bruno
Prediction: find ${HOME} -iname _REGEX -atime -_NUM ([-12.39927387])
Example 3:36
Original English: find all the files (under root file system /) that were changed within the last 24 hours
English: find all file ( under root file system _REGEX ) changed within last _NUM hour
GT Command 1: find / -ctime -1
Prediction: find / -amin -_NUM ([-6.64582539])
Example 3:37
Original English: find all the swap files (files ending with ~) in the current folder and delete them
English: find all swap file ( file ending with _PARAMETER ) in current folder and delete
GT Command 1: find . -name "*~" -delete
GT Command 2: find . -name "*~" -exec rm {} \;
Prediction: find . -name _PARAMETER -exec rm {} \; ([-9.26302624])
Example 3:38
Original English: Find files with 002 permission in entire file system and print them with the string 'has world write permissions' appended after every path
English: find file with _NUM permission in entire file system and print with string _REGEX appended after every path
GT Command 1: find / -type f -perm -002 -printf '%p has world write permissions\n'
Prediction: find / -type f -name _REGEX -exec grep -l -i _REGEX {} \; ([-16.70238686])
Example 3:39
Original English: remove all the files in the present directory which have special characters in their name and do not search in the sub directories of the current folder.
English: remove all file in present directory special character in name and not search in sub directory of current folder
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
Prediction: find . -maxdepth _NUM -name _REGEX -exec rm {} \; ([-9.4837904])
Example 3:40
Original English: show a count of the number of filenames ending in .txt in the current directory, without descending into sub-directories
English: show count of number of filename ending in _REGEX in current directory without descending into sub-directories
GT Command 1: find . -maxdepth 1 -name \*.txt -print0 | grep -cz .
Prediction: find . -name _REGEX | xargs wc -l ([-14.3490448])
Example 3:41
Original English: Search for all directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.
English: search for all directory named foo FOO or any other ARGUMENT_UNK of ARGUMENT_UNK and ARGUMENT_UNK character beneath current directory
GT Command 1: find . -iname foo -type d
Prediction: find . -type d -name _REGEX ([-22.82782173])
Example 3:42
Original English: find all the files in the /usr folder which have modification date less than or equal to the file "/FirstFile"
English: find all file in _REGEX folder modification date le than or equal to file _REGEX
GT Command 1: find /usr ! -newer /FirstFile -print
Prediction: find _REGEX -type f -size +_NUMk ([-17.36347771])
Example 3:43
Original English: search for all the directories ending with ".mp3" in the file system and move them to the folder /mnt/mp3
English: search for all directory ending with _REGEX in file system and move to folder _REGEX
GT Command 1: find / -iname "*.mp3" -type d -exec /bin/mv {} /mnt/mp3 \;
Prediction: find _REGEX -name _REGEX -type f -print0 | xargs -0 -I {} mv {} _PARAMETER ([-13.72130108])
Example 3:44
Original English: display all files in the folder bar only in the path /foo/bar/myfile (no output is generated)
English: display all file in folder bar only in path _REGEX ( no output ARGUMENT_UNK )
GT Command 1: find bar -path /foo/bar/myfile -print
Prediction: find _REGEX -path _REGEX ([-14.6537981])
Example 3:45
Original English: find all the configuration files in a folder and do not search in the sub folder and display the last ten files.
English: find all configuration file in folder and not search in sub folder and display last _NUM file
GT Command 1: find /etc -maxdepth 1 -name "*.conf" | tail
Prediction: find _REGEX -maxdepth _NUM -name _REGEX ([-14.87767506])
Example 3:46
Original English: Show the last 10 .conf files found by `find' in the /etc directory and 1 level below
English: show last _NUM _REGEX file found by _REGEX in _REGEX directory and _NUM level below
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
Prediction: find _REGEX -type f -name _REGEX | xargs grep -l thing ([-17.23882866])
Example 3:47
Original English: Find *.conf files/directories only upto 2 levels down under /etc directory and show a few lines of output from the end
English: find _REGEX _REGEX only ARGUMENT_UNK _NUM level down under _REGEX directory and show few line of output from end
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
GT Command 2: find /etc -maxdepth 1 -name "*.conf" | tail
Prediction: find _REGEX -maxdepth _NUM -name _REGEX | xargs grep -l thing ([-17.95627213])
Example 4:0
Original English: find all normal/regular files in current folder which end with "~" or which begin and end with "#" and and move them to  temp folder
English: find all _REGEX file in current folder end with _PARAMETER or begin and end with _REGEX and and move to temp folder
GT Command 1: find . -maxdepth 1 -type f  -name '*~' -exec mv {} /tmp/ \;  -or  -name '#*#' -exec mv {} /tmp/ \;
Prediction: find . -name _REGEX -type f -print0 | xargs -0 grep -l -i -w -Z GUI | xargs -0 rm ([-19.96509933])
Example 4:1
Original English: start from current directory, skip the directory src/emacs and all files and directories under it, and print the names of the other files found
English: start from current directory skip directory _REGEX and all file and directory under and print name of other file found
GT Command 1: find . -wholename './src/emacs' -prune -o -print
Prediction:  ([-34.20014572])
Example 4:2
Original English: display a list of all the files in the file system which do not belong to any user and search only in jfs and jfs2 file systems
English: display list of all file in file system not belong to any user and search only in ARGUMENT_UNK and ARGUMENT_UNK file system
GT Command 1: find / -nouser \( -fstype jfs -o -fstype jfs2 \) -ls
Prediction: find / \( -name _REGEX -or -name _REGEX \) -print | xargs ls -l ([-32.48486328])
Example 4:3
Original English: find all normal/regular files in current folder which end with "~" or which begin and end with "#" and and and delete them
English: find all _REGEX file in current folder end with _PARAMETER or begin and end with _REGEX and and and delete
GT Command 1: find . -maxdepth 1 -type f -name '*~' -delete  -or -name '#*#' -delete
Prediction: find . -name _REGEX -type f -print0 | xargs -0 rm ([-19.13369942])
Example 4:4
Original English: To list all files in the `/usr/local/fonts' directory tree owned by the user warwick  To find files owned by a particular user, give the username to search for as an argument to the `-user' option.
English: to list all file in _REGEX directory tree owned by user ARGUMENT_UNK to find file owned by particular user give ARGUMENT_UNK to search for argument to _REGEX option
GT Command 1: find /usr/local/fonts -user warwick
Prediction: find _REGEX -user michel -exec grep -l _REGEX {} \; ([-17.39334488])
Example 4:5
Original English: change the ownership of all regular/normal files in the current directory(print0 is used to handle all the files which have spaces or new lines in their names)
English: change ownership of all _REGEX file in current ARGUMENT_UNK print_NUM used to handle all file space or new line in name )
GT Command 1: find . -type f -print0 | xargs -0 chown username
Prediction: find . -name _REGEX -print0 | xargs -0 grep -l -i word ([-26.23276711])
Example 4:6
Original English: start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found
English: start from current directory skip directory _REGEX and print skip all file and directory under and print name of other file found
GT Command 1: find . -wholename './src/emacs' -prune -print -o -print
GT Command 2: find . -wholename './src/emacs' -prune , -print
Prediction:  ([-36.26354599])
Example 4:7
Original English: Search for all files and directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.
English: search for all file and directory named foo FOO or any other ARGUMENT_UNK of ARGUMENT_UNK and ARGUMENT_UNK character beneath current directory
GT Command 1: find . -iname foo
Prediction: find . -name _REGEX ([-23.30337143])
Example 4:8
Original English: display all files in the current directory excluding those that are present in the directories whose name starts with "efence" and do not search in the sub directories
English: display all file in current directory excluding present in directory whose name start with _REGEX and not search in sub directory
GT Command 1: find * -maxdepth 0 -name "efence*" -prune -o -print
Prediction: find . -maxdepth _NUM -not -name _REGEX ([-21.23130798])
Example 4:9
Original English: find all  tools generated files  a.out , *.o and core dump files which not required to us these all junk files & delete from  current  directory .
English: find all ARGUMENT_UNK ARGUMENT_UNK file _REGEX _REGEX and core ARGUMENT_UNK file not ARGUMENT_UNK to ARGUMENT_UNK all junk file _REGEX delete from current directory
GT Command 1: find . \( -name a.out -o -name '*.' -o -name  'core' \) -exec rm {} \;
Prediction: find . -name _REGEX -exec rm -f {} \; ([-12.79651356])
Example 4:10
Original English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names excluding the files that contain 'generated' or 'deploy' in their paths
English: list all _REGEX under current directory matching posix-egrep type regex _PARAMETER in name excluding file contain _REGEX or _REGEX in path
GT Command 1: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -print0 | grep -vzZ generated | grep -vzZ deploy | xargs -0 ls -1Ld
Prediction: find . | grep -P _REGEX | xargs ls -l ([-31.09698677])
Example 4:11
Original English: find all the files that have not been modifid in the last 31 days in a folder and delete them.print0 is used to preserve files that have new line character in their name
English: find all file not modified in last _NUM day in folder and delete _REGEX used to preserve file new line character in name
GT Command 1: find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
Prediction: find _REGEX -type f -mtime +_NUM -exec rm {} \; ([-15.04061699])
Example 4:12
Original English: find all the files in the current folder which have been modified for the ffiles that are at least one week old (7 days) but less then 30 days old
English: find all file in current folder modified for file at least _NUM week old ( _NUM day ) but le _NUM day old
GT Command 1: find . -mtime +30 -a -mtime -7 -print0
Prediction: find . -mtime +_NUM -print ([-19.30303192])
Example 4:13
Original English: search for the word "mysql" in all the files in the current containing the word "notes" in their name. print0 is used to handle files  with newlines in their names or those which have only spaces in their names
English: search for word _REGEX in all file in current containing word _REGEX in name print_NUM used to handle file with newlines in name or only space in name
GT Command 1: find . -iname "*notes*" -print0 | xargs -I{} -0 grep -i mysql "{}"
Prediction: find . -name _REGEX -exec grep -i _REGEX {} \; ([-12.76450539])
Example 4:14
Original English: Find all files under and below the current working directory with the word California in the file, and count the number of lines in the output
English: find all file under and below current working directory with word california in file and count number of line in output
GT Command 1: find . -type f -exec grep -n California {} \; -print | wc -l
GT Command 2: find . -type f -exec grep California {} \; -print | wc -l
Prediction: find . -type f -print0 | xargs -0 grep -l _REGEX ([-17.79317665])
Example 4:15
Original English: Find all flies under current directory excluding *.png files and print the file paths (with match count) that match the case insensitive regex 'foo=' in their contents
English: find all file under current directory excluding _REGEX file and print file path ( with match count ) match case insensitive regex _REGEX in content
GT Command 1: find . -not -name '*.png' -o -type f -print | xargs grep -icl "foo="
Prediction: find . -type f -not -path _REGEX ([-23.27551079])
Example 4:16
Original English: Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding anything in '*.pdf'  before it'ss passed to find.
English: search current directory and all of sub-directory for any PDF file ARGUMENT_UNK to ARGUMENT_UNK shell from ARGUMENT_UNK anything in _REGEX before _REGEX passed to find
GT Command 1: find . -name '*.pdf' -print
Prediction: find . -name _REGEX -print | xargs grep _REGEX ([-23.643713])
Example 4:17
Original English: search for a specific word in all the hidden files in the entire file system and display the file name along with the matched line
English: search for specific word in all hidden file in entire file system and display file name along with matched line
GT Command 1: find / -name ‘*.*’ -exec grep -il “foobar” {} \;
Prediction: find / -name _REGEX -type f -print0 | xargs -0 grep -l -i word ([-20.54372025])
Example 4:18
Original English: Find all the files in entire file system with the extensions txt or doc, as well as any file larger than 5MB in size
English: find all file in entire file system with extension txt or ARGUMENT_UNK ARGUMENT_UNK any file larger than _NUMMB in size
GT Command 1: find / \( -name '*.txt' -o -name '*.doc' -o -size +5M \)
Prediction: find / -type f -size +_NUMM ([-17.07295418])
Example 4:19
Original English: Find files with 002 permission under /tmp and print them with the string 'Found world write permissions:' printed as the first line of output or print 'No world writable found' if no such files were found
English: find file with _NUM permission under _REGEX and print with string _REGEX ARGUMENT_UNK first line of output or print _REGEX if no such file found
GT Command 1: find /tmp -type f -perm -002 | awk -- '1{print "Found world write permissions:";print};END{if(NR==0)print "No world writable found."}'
Prediction: find . -type f -print0 | xargs -0 chmod 644 ([-20.73069572])
Example 4:20
Original English: find all the normal files in the home directory which have been accesed in the last 30 days with the size greater than or equal to 100k.
English: find all normal file in home directory accessed in last _NUM day with size greater than or equal to _NUMk
GT Command 1: find $HOME -type f -atime +30 -size 100k
Prediction: find ${HOME} -type f -atime +_NUM -print ([-17.42724991])
Example 4:21
Original English: Search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file.
English: search entire file hierarchy for file named ARGUMENT_UNK ARGUMENT_UNK on ext_NUM file system and print out detailed information about file
GT Command 1: find / -fstype ext3 -name zsh -ls
Prediction: find / -name _REGEX ([-18.76934433])
Example 4:22
Original English: display all the files in the current folder that are at least one week old (7 days) but less then 30 days old
English: display all file in current folder at least _NUM week old ( _NUM day ) but le _NUM day old
GT Command 1: find . -mtime +30 -a -mtime -7 -print0
Prediction: find . -mtime +_NUM ([-21.10760307])
../../data/bash
Loading data from ../../data/bash
  reading data line 1000
  reading data line 2000
  reading data line 3000
  reading data line 4000
  6 data points read.
  6 data points read.
  6 data points read.
spell correction: kat -> cat
spell correction: shs -> ssh
spell correction: currect -> current
spell correction: ahve -> have
spell correction: currect -> current
spell correction: dispaly -> display
spell correction: configration -> configuration
spell correction: subtitute -> substitute
spell correction: horus -> hours
spell correction: confined -> contained
spell correction: dispaly -> display
spell correction: listig -> listing
spell correction: netinst -> nextint
spell correction: flies -> files
spell correction: modifid -> modified
spell correction: accesed -> accessed
spell correction: ffiles -> files
Example 0 (1)
Original English: display all the regular/normal files in the folder /path/ which have not been modified today ( from day start ie, 00:00 )
English: display all _REGEX file in folder _REGEX not modified today ( from day start ie _REGEX )
GT Command 1: find /path/ -type f -daystart -mtime +0
min_temp_dist = 1
min_dist = 1
Prediction 1: find _REGEX -type f -mtime +_NUM (-13.4395275116)

Example 1 (2)
Original English: Find all directories named CVS, and deletes them and their contents.
English: find all directory named CVS and deletes and content
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
GT Command 2: find . -type d -name CVS -exec rm -r {} \;
min_temp_dist = 7
min_dist = 9
Prediction 1: find . -type d -name _REGEX -print | xargs -I {} mv {} _PARAMETER (-13.0893573761)

Example 2 (1)
Original English: Find all files in your home directory and below that are exactly 100M.
English: find all file in home directory and below exactly _NUMM
GT Command 1: find ~ -size 100M
min_temp_dist = 0
min_dist = 1
Prediction 1: find ${HOME} -size _NUM (-12.8506183624)

Example 3 (1)
Original English: Find all *.tex regular files in maximum 2 levels down the current directory
English: find all _REGEX regular file in maximum _NUM level down current directory
GT Command 1: find . -type f -maxdepth 2 -name "*.tex"
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -maxdepth _NUM -type f -print0 (-12.8459234238)

Example 4 (2)
Original English: List all empty files in the current directory tree
English: list all empty file in current directory tree
GT Command 1: find . -empty -exec ls {} \;
GT Command 2: find . -type f -empty
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -maxdepth _NUM -empty (-6.31550216675)

Example 5 (1)
Original English: Find files with 777 permissions and change them to 755
English: find file with _NUM permission and change to _NUM
GT Command 1: find / -type f -perm 0777 -print -exec chmod 755 {} \;
min_temp_dist = 2
min_dist = 6
Prediction 1: find . -perm 644 -type f -exec chmod 400 {} \; (-7.50033569336)

Example 6 (1)
Original English: display all the files in current folder having specific word in their name
English: display all file in current folder having specific word in name
GT Command 1: find -name "*pattern*"
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX -type f (-11.6753206253)

Example 7 (1)
Original English: Find all directories on the system whose size is greater than 50k
English: find all directory on system whose size greater than _NUMk
GT Command 1: find / -type d -size +50k
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -type d -size +_NUMM (-13.4198722839)

Example 8 (1)
Original English: search the pattern ^PyErr in all the ".c" files in the folder Lib/
English: search pattern _REGEX in all _REGEX file in folder _REGEX
GT Command 1: find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
min_temp_dist = 7
min_dist = 9
Prediction 1: find _REGEX -type f -name _REGEX -exec grep -l _REGEX {} \; (-9.8603181839)

Example 9 (1)
Original English: Find files owner by user shs
English: find file owner by user ssh
GT Command 1: find -user shs
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -user tommye (-5.67722415924)

Example 10 (1)
Original English: find all the directories in the folder /raid with the extension local_sd_customize.
English: find all directory in folder _REGEX with extension _REGEX
GT Command 1: find /raid -type d -name ".local_sd_customize" -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -type d -name _REGEX (-4.95180368423)

Example 11 (1)
Original English: Find all symbolic links under the current folder and below
English: find all symbolic link under current folder and below
GT Command 1: find –L –xtype l
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -type l (-1.36556792259)

Example 12 (1)
Original English: search for the file in the entire file system which has the words "filename" in its name
English: search for file in entire file system ha word _REGEX in name
GT Command 1: find / -name ”*filename*”
min_temp_dist = 0
min_dist = 0
Prediction 1: find / -name _REGEX (-12.1148824692)

Example 13 (1)
Original English: Find all *.cgi (case insensitive) files/directories under current directory and change their permission to 755
English: find all _REGEX ( case insensitive ) _REGEX under current directory and change permission to _NUM
GT Command 1: find . -iname '*.cgi' | xargs chmod 755
min_temp_dist = 4
min_dist = 5
Prediction 1: find . -iname _REGEX -exec chmod 400 {} \; (-9.85556030273)

Example 14 (1)
Original English: find all files under the /etc/sysconfig directory that were accessed in the last 30 minutes
English: find all file under _REGEX directory accessed in last _NUM minute
GT Command 1: find /etc/sysconfig -amin -30
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -type f -amin -_NUM (-10.7138185501)

Example 15 (1)
Original English: find files in a folder using name patterns
English: find file in folder using name pattern
GT Command 1: find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX (-4.09308815002)

Example 16 (1)
Original English: count lines of C or C++ or Obj-C or Java code under the current directory
English: count line of C or _REGEX or Obj-C or java code under current directory
GT Command 1: find . \( -name "*.c" -or -name "*.cpp" -or -name "*.h" -or -name "*.m" -or -name '*.java' \) -print0 | xargs -0 wc
min_temp_dist = 11
min_dist = 11
Prediction 1: find . -name _REGEX | xargs wc -l (-16.062128067)

Example 17 (1)
Original English: Count the number of files in the /usr/ports directory tree whose names begin with 'pkg-plist' and which contain 'unexec.rmdir%D'
English: count number of file in _REGEX directory tree whose name begin with _REGEX and contain _REGEX
GT Command 1: find /usr/ports/ -name pkg-plist\* -exec grep 'unexec.rmdir %D' '{}' '+' | wc -l
min_temp_dist = 5
min_dist = 6
Prediction 1: find _REGEX -name _REGEX | xargs wc -l (-11.5883550644)

Example 18 (1)
Original English: display a long list of all the files in the file system which belong to a specific user and which have suid set
English: display long list of all file in file system belong to specific user and suid set
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
min_temp_dist = 7
min_dist = 8
Prediction 1: find / -user root -iname _REGEX (-16.3349208832)

Example 19 (1)
Original English: Search the current directory tree for all image files
English: search current directory tree for all image file
GT Command 1: find . -type f -regex ".*\.\(jpg\|jpeg\|gif\|png\|JPG\|JPEG\|GIF\|PNG\)"
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX (-6.25459957123)

Example 20 (2)
Original English: Find files in the current directory tree whose names begin with "file" and whose size is 0, and remove them
English: find file in current directory tree whose name begin with _REGEX and whose size _NUM and remove
GT Command 1: find -name 'file*' -size 0 -delete
GT Command 2: find . -name 'file*' -size 0 -print0 | xargs -0 rm
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -name _REGEX -size +_NUMM -exec rm {} \; (-9.80190563202)

Example 21 (1)
Original English: Find all HTML files starting with letter 'a' in the current directory and below ignoring the case
English: find all HTML file starting with letter _REGEX in current directory and below ignoring case
GT Command 1: find . -iname a\*.html
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -iname _REGEX (-6.84688568115)

Example 22 (1)
Original English: find all normal/regular files in current folder which end with "~" or which begin and end with "#" and and move them to  temp folder
English: find all _REGEX file in current folder end with _PARAMETER or begin and end with _REGEX and and move to temp folder
GT Command 1: find . -maxdepth 1 -type f  -name '*~' -exec mv {} /tmp/ \;  -or  -name '#*#' -exec mv {} /tmp/ \;
min_temp_dist = 18
min_dist = 20
Prediction 1: find . -name _REGEX -type f -print0 | xargs -0 grep -l -i -w -Z GUI | xargs -0 rm (-19.9650993347)

Example 23 (1)
Original English: move files accessed more than one day ago to directory TMP
English: move file accessed more than _NUM day ago to directory TMP
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \; # mv files older then 1 day to dir TMP
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -atime +_NUM -exec rm {} \; (-9.47402954102)

Example 24 (1)
Original English: find regular files in the current directory, without descending into sub-directories and display as a null separated list.
English: find regular file in current directory without descending into sub-directories and display null separated list
GT Command 1: find -maxdepth 1 -type f -printf '%f\000'
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -maxdepth _NUM -type f -print0 (-12.8864946365)

Example 25 (1)
Original English: list all the sqlite files in the current folder
English: list all sqlite file in current folder
GT Command 1: find ./ -name "*.sqlite" -ls
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX -print (-7.73732233047)

Example 26 (1)
Original English: Find files that are 0 bytes in size in the current directory and remove them
English: find file _NUM byte in size in current directory and remove
GT Command 1: find . -maxdepth 1 -size 0c -exec rm {} \;
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -size _NUM -exec rm {} \; (-10.463347435)

Example 27 (1)
Original English: display the top 20 biggest files in the current folder which are present in the same partition as that of the current folder
English: display top _NUM biggest file in current folder present in same partition of current folder
GT Command 1: find . -xdev -printf ‘%s %p\n’ |sort -nr|head -20
min_temp_dist = 10
min_dist = 11
Prediction 1: find . -type f -name _REGEX -exec ls -l {} \; (-13.8735685349)

Example 28 (1)
Original English: find directory which case-insensitive name is foo in current directory.
English: find directory case-insensitive name foo in current directory
GT Command 1: find . -iname foo -type d
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -type d -name _REGEX (-9.84089946747)

Example 29 (1)
Original English: find all the files ending with "~" in current folder and move them to temp folder
English: find all file ending with _PARAMETER in current folder and move to temp folder
GT Command 1: find -name '*~' -print0 | xargs -0 -I _ mv _ /tmp/
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -name _PARAMETER -exec mv {} _PARAMETER \; (-10.4570484161)

Example 30 (2)
Original English: find all the text files in the home directory
English: find all text file in home directory
GT Command 1: find ~/ -name '*.txt'
GT Command 2: find ~/ -name '*.txt'
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-6.80150461197)

Example 31 (1)
Original English: display list of all the hidden regular/normal files in the directory "/dir/to/search/"
English: display list of all hidden _REGEX file in directory _REGEX
GT Command 1: find /dir/to/search/ -type f -iname ".*" -ls
min_temp_dist = 2
min_dist = 4
Prediction 1: find _REGEX -name _REGEX -type f -print0 (-12.5576791763)

Example 32 (1)
Original English: List root's regular files with permissions 4000
English: list _REGEX regular file with permission _NUM
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -type f -perm 777 -exec ls -l {} \; (-6.08196640015)

Example 33 (1)
Original English: Find every vim undo file in the current directory tree
English: find every vim undo file in current directory tree
GT Command 1: find -type f -iname '*.un~'
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -name _REGEX | xargs grep -l thing (-10.4048337936)

Example 34 (1)
Original English: start from current directory, skip the directory src/emacs and all files and directories under it, and print the names of the other files found
English: start from current directory skip directory _REGEX and all file and directory under and print name of other file found
GT Command 1: find . -wholename './src/emacs' -prune -o -print
min_temp_dist = 5
min_dist = 5
Prediction 1:  (-34.2001457214)

Example 35 (1)
Original English: Delete files containing whitespaces without recursion
English: delete file containing whitespaces without recursion
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
min_temp_dist = 7
min_dist = 8
Prediction 1: find . -type f -delete (-10.2943820953)

Example 36 (1)
Original English: Search directory trees /usr/local/man and /opt/local/man for files whose names begin with 'my'
English: search directory tree _REGEX and _REGEX for file whose name begin with _REGEX
GT Command 1: find /usr/local/man /opt/local/man -name 'my*'
min_temp_dist = 2
min_dist = 3
Prediction 1: find _REGEX -name _REGEX -type f -print (-17.0948905945)

Example 37 (1)
Original English: Search the current directory tree for regular files whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg"
English: search current directory tree for regular file whose name match regular expression _REGEX
GT Command 1: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg"
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -regex _REGEX (-6.556640625)

Example 38 (1)
Original English: search for all the files in the folder /home which have sticky bit set and have the permissions 553
English: search for all file in folder _REGEX sticky bit set and permission _NUM
GT Command 1: find /home -perm 1553
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -perm ugo+rwx (-12.659406662)

Example 39 (1)
Original English: find the largest file in the current directory and sub directories
English: find largest file in current directory and sub directory
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -1
min_temp_dist = 10
min_dist = 12
Prediction 1: find . -maxdepth _NUM -name _REGEX -print (-8.64533424377)

Example 40 (1)
Original English: Delete files with inode number specified by [inode-number] under current directory
English: delete file with inode number specified by _REGEX under current directory
GT Command 1: find . -inum [inode-number] -exec rm -i {} \;
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -inum _NUM -exec rm {} \; (-8.11351203918)

Example 41 (1)
Original English: List all files except for those in directory SCCS
English: list all file except for in directory SCCS
GT Command 1: find . -print -o -name SCCS -prune
min_temp_dist = 4
min_dist = 5
Prediction 1: find . -type d -name _REGEX -print (-14.0004272461)

Example 42 (1)
Original English: dispaly all the empty regular/normal files in the current folder
English: display all empty _REGEX file in current folder
GT Command 1: find . -type f -empty
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -type f -empty (-6.70812797546)

Example 43 (1)
Original English: change the permissions of all the regular/normal files to 644 in the folder /home/nobody/public_html
English: change permission of all _REGEX file to _NUM in folder _REGEX
GT Command 1: find /home/nobody/public_html -type f -exec chmod 644 {} \;
min_temp_dist = 5
min_dist = 5
Prediction 1: find _REGEX -type f -print0 | xargs -0 chmod 644 (-3.88532662392)

Example 44 (1)
Original English: display a list of all the files in the file system which do not belong to any user and search only in jfs and jfs2 file systems
English: display list of all file in file system not belong to any user and search only in jfs and jfs_NUM file system
GT Command 1: find / -nouser \( -fstype jfs -o -fstype jfs2 \) -ls
min_temp_dist = 7
min_dist = 9
Prediction 1: find / \( -name _REGEX -or -name _REGEX \) -print | xargs ls -l (-32.4848632812)

Example 45 (1)
Original English: find all regular/normal files in a folder which have specific permission
English: find all _REGEX file in folder specific permission
GT Command 1: find /data -type f -perm 400 -print
min_temp_dist = 2
min_dist = 4
Prediction 1: find _PARAMETER -perm -u+r (-9.92840099335)

Example 46 (1)
Original English: List all zero-length files
English: list all zero-length file
GT Command 1: find . -empty -exec ls {} \;
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -name _REGEX (-5.99426794052)

Example 47 (1)
Original English: Remove Mac OS X Desktop Services Store files
English: remove mac OS X desktop service store file
GT Command 1: find . -name ".DS_Store" -exec rm {} \;
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX -type f -print0 | xargs -0 rm (-7.60727119446)

Example 48 (1)
Original English: List all *.jar files/directories under /usr, /home and /tmp directory
English: list all _REGEX _REGEX under _REGEX _REGEX and _REGEX directory
GT Command 1: find /usr /home  /tmp -name "*.jar"
min_temp_dist = 7
min_dist = 7
Prediction 1: find _REGEX -name _REGEX | xargs grep -l thing (-12.5357246399)

Example 49 (1)
Original English: list all CSS files (and directories ending with “.css”) under the current directory
English: list all CSS file ( and directory ending with _REGEX ) under current directory
GT Command 1: find . -name "*.css"
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -name _REGEX | xargs ls -l (-15.4743537903)

Example 50 (1)
Original English: Search the current directory recursively for files containing "string"
English: search current directory recursively for file containing _REGEX
GT Command 1: find . -type f -exec grep -l 'string' {} \;
min_temp_dist = 5
min_dist = 5
Prediction 1: find . -type f -print0 | xargs -0 grep -l _REGEX (-6.33705186844)

Example 51 (1)
Original English: List all .svn files/directories under current directory
English: list all _REGEX _REGEX under current directory
GT Command 1: find . -name .svn -exec ls {} \;
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX (-8.31526374817)

Example 52 (1)
Original English: display all directories in the entire file system
English: display all directory in entire file system
GT Command 1: find / -type d -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find / -type d (-3.71046161652)

Example 53 (1)
Original English: Find all files and directories in the current directory tree except those whose name is "dirname", case insensitive
English: find all file and directory in current directory tree except whose name _REGEX case insensitive
GT Command 1: find ./ -iname ! -iname dirname
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -iname _REGEX (-12.6524343491)

Example 54 (1)
Original English: Search the current directory tree for files whose names begin with 'my'
English: search current directory tree for file whose name begin with _REGEX
GT Command 1: find . -name 'my*'
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-6.27166414261)

Example 55 (1)
Original English: List all files matching regular expression '*foo*' in a human-readable form
English: list all file matching regular expression _REGEX in human-readable form
GT Command 1: find . -name '*foo*' -exec ls -lah {} \;
min_temp_dist = 6
min_dist = 6
Prediction 1: find . -regex _REGEX (-13.2609024048)

Example 56 (1)
Original English: find all occurences of a file in the file system which belong to the user root
English: find all occurences of file in file system belong to user root
GT Command 1: find / -user root -name FindCommandExamples.txt
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -user root -iname _REGEX (-12.878276825)

Example 57 (1)
Original English: Search the current directory and two levels below for file `teste.tex'
English: search current directory and _NUM level below for file _REGEX
GT Command 1: find ~/ -maxdepth 3 -name teste.tex
min_temp_dist = 0
min_dist = 2
Prediction 1: find . -maxdepth _NUM -name _REGEX -print (-12.3226833344)

Example 58 (1)
Original English: Delete all files in the "${S}/bundled-libs" folder except "libbass.so"
English: delete all file in _PARAMETER folder except _REGEX
GT Command 1: find "${S}/bundled-libs" \! -name 'libbass.so' -delete
min_temp_dist = 1
min_dist = 1
Prediction 1: find _PARAMETER -name _REGEX -delete (-12.1548852921)

Example 59 (1)
Original English: Find a 400 permission file under /data directory
English: find _NUM permission file under _REGEX directory
GT Command 1: find /data -type f -perm 400 -print -quit
min_temp_dist = 1
min_dist = 2
Prediction 1: find _REGEX -type f -perm 777 (-6.51934814453)

Example 60 (5)
Original English: find  files which full path name is foo/bar under foo directory and print
English: find file full path name _REGEX under foo directory and print
GT Command 1: find foo -path foo/bar -print
GT Command 2: find foo -path /tmp/foo/bar -print
GT Command 3: find /tmp/foo -path /tmp/foo/bar -print
GT Command 4: find foo -path /tmp/foo/bar -print
GT Command 5: find foo -path /tmp/foo/bar -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -path _REGEX -path _REGEX (-16.2158298492)

Example 61 (1)
Original English: Find files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names
English: find _REGEX under current directory matching posix-egrep type regex _PARAMETER in name
GT Command 1: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$"
min_temp_dist = 3
min_dist = 3
Prediction 1: find . | grep -P _REGEX (-14.8896818161)

Example 62 (1)
Original English: display a long list of all regular/normal files in the file system which belong to the root and with suid bit set
English: display long list of all _REGEX file in file system belong to root and with suid bit set
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
min_temp_dist = 7
min_dist = 8
Prediction 1: find / -user root -iname _REGEX | xargs ls -l (-21.0041618347)

Example 63 (1)
Original English: Search *.x files from the current directory tree for string "fred"
English: search _REGEX file from current directory tree for string _REGEX
GT Command 1: find . -name ‘*.x’ -print0 | xargs -0 grep fred
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -name _REGEX -exec grep _REGEX {} \; (-9.29326725006)

Example 64 (1)
Original English: find all the files with the name september ( case insensitive )
English: find all file with name september ( case insensitive )
GT Command 1: find -iname september
min_temp_dist = 0
min_dist = 2
Prediction 1: find / -iname _REGEX (-12.0542812347)

Example 65 (1)
Original English: search from the / directory for any file that is larger than 10000k (> 10MB)
English: search from _REGEX directory for any file larger than _NUMk ( _REGEX _NUMMB )
GT Command 1: find / -size +10000k
min_temp_dist = 6
min_dist = 7
Prediction 1: find _REGEX -type f -size +_NUMk -exec ls -l {} \; (-9.25634288788)

Example 66 (1)
Original English: Find all or single file called FindCommandExamples.txt under / directory of owner root
English: find all or single file called _REGEX under _REGEX directory of owner root
GT Command 1: find / -user root -name FindCommandExamples.txt
min_temp_dist = 6
min_dist = 8
Prediction 1: find / -type f -name _REGEX -exec grep -l -i {} \; (-12.8804368973)

Example 67 (1)
Original English: Find directories under maximum 1 level down the directory $dir with 100 permission that are owned by the user $username
English: find directory under maximum _NUM level down directory _PARAMETER with _NUM permission owned by user _PARAMETER
GT Command 1: find $dir -maxdepth 1 -type d -user $username -perm -100
min_temp_dist = 7
min_dist = 7
Prediction 1: find _PARAMETER -mindepth _NUM -type d | sort (-12.5803413391)

Example 68 (1)
Original English: dispaly a long listig of all the files in the current folder which are bigger than 100KB
English: display long listing of all file in current folder bigger than _NUMKB
GT Command 1: find . -size +100000 -ls
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -size +_NUM -exec ls -l {} \; (-8.73889064789)

Example 69 (1)
Original English: To list all files in the `/usr/share' directory tree with the text `farm' somewhere in their name
English: to list all file in _REGEX directory tree with text _REGEX somewhere in name
GT Command 1: find /usr/share -name '*farm*'
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -name _REGEX (-11.6559610367)

Example 70 (1)
Original English: Find all regular files in and below the home directory that have been modified in the last 90 minutes
English: find all regular file in and below home directory modified in last _NUM minute
GT Command 1: find ~ -type f -mmin -90
min_temp_dist = 1
min_dist = 1
Prediction 1: find ${HOME} -type f -mtime -_NUM (-14.7917375565)

Example 71 (1)
Original English: find all regular/normal files in a folder whose size is less than 50 bytes
English: find all _REGEX file in folder whose size le than _NUM byte
GT Command 1: find /usr/bin -type f -size -50c
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -type f -size +_NUMc (-11.2065572739)

Example 72 (1)
Original English: Remove all broken symbolic links in /usr/ports/packages
English: remove all broken symbolic link in _REGEX
GT Command 1: find -L /usr/ports/packages -type l -delete
min_temp_dist = 5
min_dist = 5
Prediction 1: find _REGEX -type l | xargs rm (-6.93215847015)

Example 73 (1)
Original English: find all the directories in current folder which start with test
English: find all directory in current folder start with test
GT Command 1: find . -type d -name "test*"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -type d -name _REGEX (-5.75531339645)

Example 74 (1)
Original English: Search the current directory tree for *bash* files
English: search current directory tree for _REGEX file
GT Command 1: find . -name "*bash*"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-3.73562145233)

Example 75 (1)
Original English: find all the files that have been changed exactly 24 hours ago
English: find all file changed exactly _NUM hour ago
GT Command 1: find . -ctime 1 -type f
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -type f -ctime -_NUM (-5.79023790359)

Example 76 (1)
Original English: Find all files/directories named Root under current directory and copy them to newRoot
English: find all _REGEX named root under current directory and copy to newRoot
GT Command 1: find . -name Root | xargs cp newRoot
min_temp_dist = 7
min_dist = 7
Prediction 1:  (-23.8103179932)

Example 77 (1)
Original English: Find all configration files in Home directory & Subtitute permanently in files
English: find all configuration file in home directory _REGEX substitute permanently in file
GT Command 1: find $HOME -name "*.conf" -exec sed -i 's/vermin/pony/g' {} \;
min_temp_dist = 4
min_dist = 5
Prediction 1: find ${HOME} -name _REGEX -type f -print (-12.7732715607)

Example 78 (1)
Original English: find all normal/regular files in current folder which end with "~" or which begin and end with "#" and and and delete them
English: find all _REGEX file in current folder end with _PARAMETER or begin and end with _REGEX and and and delete
GT Command 1: find . -maxdepth 1 -type f -name '*~' -delete  -or -name '#*#' -delete
min_temp_dist = 10
min_dist = 11
Prediction 1: find . -name _REGEX -type f -print0 | xargs -0 rm (-19.1336994171)

Example 79 (1)
Original English: search for a directory in the current folder and delete it
English: search for directory in current folder and delete
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
min_temp_dist = 7
min_dist = 9
Prediction 1: find . -type d -name _REGEX -delete (-11.49223423)

Example 80 (1)
Original English: Find all files/directories named file1 in maximum 2 levels down the current directory
English: find all _REGEX named file_NUM in maximum _NUM level down current directory
GT Command 1: find -maxdepth 2 -name file1
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -maxdepth _NUM -name _REGEX -type f (-13.4814662933)

Example 81 (1)
Original English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names excluding the paths */generated/* and */deploy/*
English: list all _REGEX under current directory matching posix-egrep type regex _PARAMETER in name excluding path _REGEX and _REGEX
GT Command 1: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -not -path '*/generated/*' -not -path '*/deploy/*' -print0 | xargs -0 ls -L1d
min_temp_dist = 13
min_dist = 14
Prediction 1: find . -name _REGEX | xargs grep -l thing (-24.4863777161)

Example 82 (1)
Original English: Find directories with permissions 777 and change them to 755 recursively
English: find directory with permission _NUM and change to _NUM recursively
GT Command 1: find /home -type d -perm 777 -print -exec chmod 755 {} \;
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -type d -exec chmod 400 {} \; (-8.80820274353)

Example 83 (1)
Original English: Find all files in the current directory tree whose names are "file_name", except for those with pathnames matching pattern "./dirt to be Excluded/*"
English: find all file in current directory tree whose name _REGEX except for with pathnames matching pattern _REGEX
GT Command 1: find ./ -iname file_name ! -path "./dirt to be Excluded/*"
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -name _REGEX | grep -v _REGEX (-20.7740459442)

Example 84 (1)
Original English: find all fonts which belong to a specific user
English: find all font belong to specific user
GT Command 1: find /usr/local/fonts -user warwick
min_temp_dist = 0
min_dist = 2
Prediction 1: find . -user michel (-3.37834429741)

Example 85 (1)
Original English: Remove all files last modified more than 10 days ago from the current directory tree
English: remove all file last modified more than _NUM day ago from current directory tree
GT Command 1: find . -mtime +10 | xargs rm
min_temp_dist = 6
min_dist = 6
Prediction 1: find . -name _REGEX -mtime +_NUM -exec rm {} \; (-7.9765996933)

Example 86 (1)
Original English: find / -size +50M -size -100M
English: find _REGEX -size _REGEX -size -100M
GT Command 1: find all the files which are greater than 50MB and less than 100MB.
min_temp_dist = 11
min_dist = 13
Prediction 1: find . -name _REGEX (-6.44081783295)

Example 87 (1)
Original English: display list of all the hidden files in the home folder
English: display list of all hidden file in home folder
GT Command 1: find $HOME -name ".*" -ls
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-6.42636919022)

Example 88 (1)
Original English: search for a word in all the files with the extension "ch" in the current folder
English: search for word in all file with extension _REGEX in current folder
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
min_temp_dist = 6
min_dist = 6
Prediction 1: find . -name _REGEX -exec grep -i -l _REGEX {} \; (-8.57340717316)

Example 89 (1)
Original English: search for a specific pattern in all files in the current folder which have a specific extension.
English: search for specific pattern in all file in current folder specific extension
GT Command 1: find . -name “*.cc” |xargs grep -n “pattern”
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-16.7978134155)

Example 90 (2)
Original English: Move all regular files under current directory to ./newdir
English: move all regular file under current directory to _REGEX
GT Command 1: find ./ -type f -print | xargs    -l56 -i mv -f {} ./newdir
GT Command 2: find ./ -type f -print | xargs    -i mv -f {} ./newdir
min_temp_dist = 4
min_dist = 5
Prediction 1: find . -type f -print0 | xargs -0 -I {} mv {} _PARAMETER (-7.56606483459)

Example 91 (1)
Original English: display all files ending with "ini" in current folder
English: display all file ending with _REGEX in current folder
GT Command 1: find . -type f -name '*.ini'
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX (-6.5193271637)

Example 92 (1)
Original English: find all the log files in the file system
English: find all log file in file system
GT Command 1: find / -name "*.log"
min_temp_dist = 0
min_dist = 0
Prediction 1: find / -name _REGEX (-7.35492897034)

Example 93 (1)
Original English: To list all files in the `/usr/local/fonts' directory tree owned by the user warwick  To find files owned by a particular user, give the username to search for as an argument to the `-user' option.
English: to list all file in _REGEX directory tree owned by user warwick to find file owned by particular user give username to search for argument to _REGEX option
GT Command 1: find /usr/local/fonts -user warwick
min_temp_dist = 5
min_dist = 6
Prediction 1: find _REGEX -user michel -exec grep -l _REGEX {} \; (-17.3933448792)

Example 94 (1)
Original English: Find *.html files in the current directory tree that were last modified more than 7 days ago
English: find _REGEX file in current directory tree last modified more than _NUM day ago
GT Command 1: find . -mtime +7 -name "*.html" -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -mtime +_NUM -name _REGEX (-11.6732769012)

Example 95 (1)
Original English: count the lines of java code for all the java files in the current directory
English: count line of java code for all java file in current directory
GT Command 1: find . -name "*.java" -print0 | xargs -0 wc
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX | xargs wc -l (-12.211596489)

Example 96 (1)
Original English: search for *.log files starting from /
English: search for _REGEX file starting from _REGEX
GT Command 1: find / -name "*.log"
min_temp_dist = 0
min_dist = 0
Prediction 1: find / -name _REGEX (-2.91077828407)

Example 97 (1)
Original English: display all the files in the kat folder
English: display all file in cat folder
GT Command 1: find kat -printf "%f\n"
min_temp_dist = 1
min_dist = 3
Prediction 1: find _REGEX -type f (-9.24782371521)

Example 98 (2)
Original English: remove all core dump files from user's home directory
English: remove all core dump file from _REGEX home directory
GT Command 1: find ~/ -name 'core*' -exec rm {} \;
GT Command 2: find ~/ -name 'core*' -exec rm {} \;
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX -exec rm {} \; (-6.70581150055)

Example 99 (1)
Original English: List all regular file owned by root with permissions 4000
English: list all regular file owned by root with permission _NUM
GT Command 1: find / -type f -user root -perm -4000 -exec ls -l {} \;
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -type f -perm 777 -print (-12.9236660004)

Example 100 (1)
Original English: display a long listing of all the files in the current folder that have been accessed in today from the start of the day
English: display long listing of all file in current folder accessed in today from start of day
GT Command 1: find -daystart   -atime 0 -ls
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -atime +_NUM -exec ls -l {} \; (-7.98189735413)

Example 101 (1)
Original English: Search for regular expression 'expr' in all .c and .h files from the current directory tree
English: search for regular expression _REGEX in all _REGEX and _REGEX file from current directory tree
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
min_temp_dist = 4
min_dist = 6
Prediction 1: find . -name _REGEX -type f -print0 | xargs -0 grep -l -i word (-12.0886001587)

Example 102 (1)
Original English: find all the files  a folder which have a specific word in their name
English: find all file folder specific word in name
GT Command 1: find /usr/share -name '*farm*'
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -name _REGEX (-4.00671291351)

Example 103 (1)
Original English: Find all files and directories in the current directory tree with "linkin park" in their names and copy them to /Users/tommye/Desktop/LP
English: find all file and directory in current directory tree with _REGEX in name and copy to _REGEX
GT Command 1: find . -iname "*linkin park*" -exec cp -r {} /Users/tommye/Desktop/LP \;
min_temp_dist = 8
min_dist = 8
Prediction 1:  (-17.9902362823)

Example 104 (1)
Original English: find all the files in the current directory which have been accessed in the last 1 day and move them to TMP folder.
English: find all file in current directory accessed in last _NUM day and move to TMP folder
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \;
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -atime +_NUM -exec rm {} \; (-11.041472435)

Example 105 (1)
Original English: Display the files which are accessed after the modification of a give file.
English: display file accessed after modification of give file
GT Command 1: find -anewer "sum.java"
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -type f (-7.84832382202)

Example 106 (1)
Original English: change the ownership of all regular/normal files in the current directory(print0 is used to handle all the files which have spaces or new lines in their names)
English: change ownership of all _REGEX file in current directory( print_NUM used to handle all file space or new line in name )
GT Command 1: find . -type f -print0 | xargs -0 chown username
min_temp_dist = 4
min_dist = 6
Prediction 1: find . -name _REGEX -print0 | xargs -0 grep -l -i word (-26.2327671051)

Example 107 (1)
Original English: find all the configuration files in a folder and do not search in the sub folder's directories and display the last ten files.
English: find all configuration file in folder and not search in sub _REGEX directory and display last _NUM file
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -maxdepth _NUM -name _REGEX (-15.4536352158)

Example 108 (1)
Original English: Find all files under /home that belong to user tecmint
English: find all file under _REGEX belong to user tecmint
GT Command 1: find /home -user tecmint
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -user tecmint (-2.55327653885)

Example 109 (1)
Original English: Find all files named 'Makefile' in the /usr/ports directory tree and count the number of lines in them matching regular expression '^MASTER_SITE.*CPAN'
English: find all file named _REGEX in _REGEX directory tree and count number of line in matching regular expression _REGEX
GT Command 1: find /usr/ports/ -name Makefile -exec grep '^MASTER_SITE.*CPAN' '{}' '+' | wc -l
min_temp_dist = 7
min_dist = 9
Prediction 1: find _REGEX -name _REGEX -type f -print0 | xargs -0 grep -l _REGEX (-17.8182849884)

Example 110 (1)
Original English: Find all *.txt and *.json files in current directory
English: find all _REGEX and _REGEX file in current directory
GT Command 1: find . -type f \( -name "*.txt" -o -name "*.json" \)
min_temp_dist = 7
min_dist = 7
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-5.40008163452)

Example 111 (1)
Original English: display all the html files in the current folder that have not been modified in the last 7*24 horus
English: display all html file in current folder not modified in last _REGEX hour
GT Command 1: find . -mtime +7 -name "*.html" -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -mtime +_NUM -print (-11.6357631683)

Example 112 (1)
Original English: Find files with the setuid or setgid bit set
English: find file with setuid or setgid bit set
GT Command 1: find . -perm -4000 -o -perm -2000
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -perm -20 (-4.1987953186)

Example 113 (1)
Original English: Find all httpd.conf files in entire file system
English: find all _REGEX file in entire file system
GT Command 1: find / -name httpd.conf
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -name _REGEX (-6.19479703903)

Example 114 (1)
Original English: find all files in a folder using name patterns
English: find all file in folder using name pattern
GT Command 1: find /usr/share/doc -name '[Rr][Ee][Aa][Dd][Mm][Ee]*'
min_temp_dist = 0
min_dist = 1
Prediction 1: find _PARAMETER -name _REGEX (-6.0337395668)

Example 115 (1)
Original English: find all the html files in the current folder which have not been modified in the last 7 days
English: find all html file in current folder not modified in last _NUM day
GT Command 1: find . -mtime +7 -name "*.html" -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -mtime +_NUM -name _REGEX -print (-12.653886795)

Example 116 (1)
Original English: force delete all the files that have been modified in the last 3 days
English: force delete all file modified in last _NUM day
GT Command 1: find . -mtime -3 -exec rm -rf {} \;
min_temp_dist = 4
min_dist = 5
Prediction 1: find . -type f -mtime +_NUM -exec rm {} \; (-5.54358720779)

Example 117 (1)
Original English: display all the files in the current directory excluding the paths "targert", "tools", "git"
English: display all file in current directory excluding path _REGEX _REGEX _REGEX
GT Command 1: find . \( ! -path "*target*" -a ! -path "*tools*" -a ! -path "*.git*" -print \)
min_temp_dist = 9
min_dist = 9
Prediction 1: find . -path _REGEX (-19.3551445007)

Example 118 (2)
Original English: locate large files (> 100 MB) in /home/ for 'cleaning'
English: locate large file ( _REGEX _NUM MB ) in _REGEX for _REGEX
GT Command 1: find /home -type f -size +100M -print0 |xargs -0 rm
GT Command 2: find /home -type f -size +100M -delete
min_temp_dist = 6
min_dist = 7
Prediction 1: find _REGEX -name _REGEX | xargs grep _REGEX (-12.9562330246)

Example 119 (1)
Original English: Find all the files on the system that have been changed within the last hour
English: find all file on system changed within last hour
GT Command 1: find / -cmin -60
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -amin -_NUM (-2.23681712151)

Example 120 (2)
Original English: start from current directory, skip the directory src/emacs and print it then skip all files and directories under it, and print the names of the other files found
English: start from current directory skip directory _REGEX and print skip all file and directory under and print name of other file found
GT Command 1: find . -wholename './src/emacs' -prune -print -o -print
GT Command 2: find . -wholename './src/emacs' -prune , -print
min_temp_dist = 5
min_dist = 5
Prediction 1:  (-36.26354599)

Example 121 (1)
Original English: print the files in the subdirectories between level 1 and 4
English: print file in subdirectory between level _NUM and _NUM
GT Command 1: find -mindepth 2 -maxdepth 5 -name "sum.java"
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -maxdepth _NUM -mindepth _NUM -maxdepth _NUM -type d (-7.81783866882)

Example 122 (1)
Original English: find all '*.c' files under $HOME directory which context contains sprintf
English: find all _REGEX file under _PARAMETER directory context contains sprintf
GT Command 1: find $HOME -name '*.c' -print | xargs grep -l sprintf
min_temp_dist = 6
min_dist = 8
Prediction 1: find _PARAMETER -type f -name _REGEX (-13.2356090546)

Example 123 (1)
Original English: display all files in the current folder after pruning those in the current folder ( dot is the output of this command )
English: display all file in current folder after pruning in current folder ( dot output of command )
GT Command 1: find . -prune -print
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -path _REGEX (-12.0962562561)

Example 124 (1)
Original English: Search the current directory tree for the files with extension "trc" and list them if they are more than three days old
English: search current directory tree for file with extension _REGEX and list if more than _NUM day old
GT Command 1: find . -name "*.trc" -ctime +3 -exec ls -l {} \;
min_temp_dist = 5
min_dist = 5
Prediction 1: find . -name _REGEX -mtime +_NUM (-14.8751344681)

Example 125 (1)
Original English: Show the last 10 .conf files found by `find' in the /etc directory
English: show last _NUM _REGEX file found by _REGEX in _REGEX directory
GT Command 1: find /etc -maxdepth 1 -name "*.conf" | tail
min_temp_dist = 4
min_dist = 5
Prediction 1: find _REGEX -type f -name _REGEX | xargs grep _REGEX (-24.6267795563)

Example 126 (1)
Original English: Find files under [directory] that match 'pattern_to_INCLUDE' in their names without descending into directories that match 'pattern_to_exclude' and 'another_pattern_to_exclude', then search for 'pattern' in those files
English: find file under _REGEX match _REGEX in name without descending into directory match _REGEX and _REGEX in file
GT Command 1: find [directory] -name "pattern_to_exclude" -prune -o -name "another_pattern_to_exclude" -prune -o -name "pattern_to_INCLUDE" -print0 | xargs -0 -I FILENAME grep -IR "pattern" FILENAME
min_temp_dist = 11
min_dist = 12
Prediction 1: find _REGEX -name _REGEX -type f -print0 | xargs -0 grep -l _REGEX (-11.1593780518)

Example 127 (1)
Original English: Move all files matching patterns "*.old", ".old", ".*.old" from the current directory to directory "../old/"
English: move all file matching pattern _REGEX _REGEX _REGEX from current directory to directory _REGEX
GT Command 1: find . ! -name . -prune -name '*.old' -exec mv {} ../old/ \;
min_temp_dist = 4
min_dist = 5
Prediction 1: find . -name _REGEX -exec mv {} _REGEX \; (-12.5700397491)

Example 128 (2)
Original English: Remove all files whose names end with "~" in the /home/peter directory tree
English: remove all file whose name end with _PARAMETER in _REGEX directory tree
GT Command 1: find /home/peter -name *~ |xargs rm
GT Command 2: find /home/peter -name *~ -print0 |xargs -0 rm
min_temp_dist = 3
min_dist = 5
Prediction 1: find _PARAMETER -name _REGEX -exec rm {} \; (-9.47010135651)

Example 129 (1)
Original English: Search the /usr/local/doc directory tree for .texi files
English: search _REGEX directory tree for _REGEX file
GT Command 1: find /usr/local/doc -name '*.texi'
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -name _REGEX (-2.83250427246)

Example 130 (1)
Original English: Find all files, starting from / but ignoring removable media, whose names end with ".rpm"
English: find all file starting from _REGEX but ignoring removable medium whose name end with _REGEX
GT Command 1: find / -xdev -name "*.rpm"
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -name _REGEX (-9.77860069275)

Example 131 (1)
Original English: Show all files that have not been accessed in the $HOME directory for 30 days or more
English: show all file not accessed in _PARAMETER directory for _NUM day or more
GT Command 1: find $HOME -atime +30
min_temp_dist = 2
min_dist = 3
Prediction 1: find _PARAMETER -type f -atime +_NUM (-14.7345132828)

Example 132 (1)
Original English: display all instances of "foo.cpp" file in the current folder which are not in the sub directory tree ".svn"
English: display all instance of _REGEX file in current folder not in sub directory tree _REGEX
GT Command 1: find . -name 'foo.cpp' '!' -path '.svn'
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX -type f (-14.0003004074)

Example 133 (1)
Original English: display the 5 largest file in the current directory and its subdirectory.
English: display _NUM largest file in current directory and subdirectory
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
min_temp_dist = 10
min_dist = 13
Prediction 1: find . -maxdepth _NUM -name _REGEX -printf _REGEX (-8.54957485199)

Example 134 (1)
Original English: Find all *.txt files that reside under and below /home/wsuNID/
English: find all _REGEX file reside under and below _REGEX
GT Command 1: find /home/wsuNID/ -name "*.txt"
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -name _REGEX (-4.4251332283)

Example 135 (1)
Original English: save the list of the files in the current directory to a file “foo”
English: save list of file in current directory to file _REGEX
GT Command 1: find . -fprint foo
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX (-17.0782012939)

Example 136 (1)
Original English: find files in current directory that names are game
English: find file in current directory name game
GT Command 1: find . -name game
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX (-4.95610809326)

Example 137 (1)
Original English: delete all files in the home directory which ahve the name core in them
English: delete all file in home directory name core in
GT Command 1: find ~/ -name 'core*' -exec rm {} \;
min_temp_dist = 3
min_dist = 3
Prediction 1: find ${HOME} -name _REGEX -delete (-11.0935497284)

Example 138 (1)
Original English: search for all perl files in the folder /nas/projects/mgmt/scripts/perl which have been modified yesterday
English: search for all perl file in folder _REGEX modified yesterday
GT Command 1: find /nas/projects/mgmt/scripts/perl -mtime 1 -daystart -iname "*.pl"
min_temp_dist = 3
min_dist = 4
Prediction 1: find _REGEX -type f -mtime -_NUM -name _REGEX (-11.3668794632)

Example 139 (1)
Original English: Search /usr, /home, /tmp for *.jar files
English: search _REGEX _REGEX _REGEX for _REGEX file
GT Command 1: find /usr /home  /tmp -name "*.jar"
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -name _REGEX (-3.71900320053)

Example 140 (1)
Original English: find foo, Foo, FOo, FOO, etc., but only dirs
English: find foo foo FOo FOO etc but only dirs
GT Command 1: find . -iname foo -type d
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -iname _REGEX (-8.62420749664)

Example 141 (1)
Original English: find files which full path name is /tmp/foo/bar under /tmp/foo directory and print
English: find file full path name _REGEX under _REGEX directory and print
GT Command 1: find /tmp/foo -path /tmp/foo/bar -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -path _REGEX -path _REGEX (-16.6069774628)

Example 142 (2)
Original English: Find all 400 permission files under /data directory
English: find all _NUM permission file under _REGEX directory
GT Command 1: find /data -type f -perm 400
GT Command 2: find /data -type f -perm 400 -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -type f -perm 777 (-5.70916700363)

Example 143 (2)
Original English: Change file permissions on all regular files within a directory:
English: change file permission on all regular file within directory
GT Command 1: find /path/to/directory -type f -exec chmod 644 {} +
GT Command 2: find /path/to/directory -type f -exec chmod 644 {} +
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -type f -print0 | xargs -0 chmod 644 (-2.65557336807)

Example 144 (1)
Original English: Remove all files whose names begin with "no-such-thing" in the /home/peter directory tree
English: remove all file whose name begin with _REGEX in _REGEX directory tree
GT Command 1: find /home/peter -name no-such-thing* |xargs rm
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -name _REGEX | xargs rm (-10.7795848846)

Example 145 (2)
Original English: find files ending with .jpg:
English: find file ending with _REGEX
GT Command 1: find . -name '*.jpg' -print
GT Command 2: find . -name '*.jpg' -print ./bar/foo.jpg
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-6.12273788452)

Example 146 (1)
Original English: Find files with 002 permission in entire file system
English: find file with _NUM permission in entire file system
GT Command 1: find / -type f -perm -002
min_temp_dist = 2
min_dist = 3
Prediction 1: find / -perm 644 (-2.43798899651)

Example 147 (1)
Original English: Print the list of all directories under the current directory and below
English: print list of all directory under current directory and below
GT Command 1: find ./ -type d -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -type d (-5.53753852844)

Example 148 (1)
Original English: Find file1 in the level 1 directories and above
English: find file_NUM in level _NUM directory and above
GT Command 1: find -maxdepth 2 -name file1
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -mindepth _NUM -maxdepth _NUM -type d (-8.02821063995)

Example 149 (1)
Original English: find within a directory called /mp3collection, only those mp3 files that have a size less than 5000 Kilobytes ( < 5MB)
English: find within directory called _REGEX only mp_NUM file size le than _NUM kilobyte ( _REGEX _NUMMB )
GT Command 1: find /mp3collection -name '*.mp3' -size -5000k
min_temp_dist = 1
min_dist = 3
Prediction 1: find _REGEX -type f -size +_NUMk (-13.6152677536)

Example 150 (1)
Original English: find all sqlite files in the current directory.
English: find all sqlite file in current directory
GT Command 1: find ./ -name "*.sqlite"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX -print (-6.18437051773)

Example 151 (2)
Original English: find Texinfo source files in /usr/local/doc
English: find texinfo source file in _REGEX
GT Command 1: find foo -path foo/bar -print
GT Command 2: find /usr/local/doc -name '*.texi'
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -name _REGEX (-8.28089237213)

Example 152 (1)
Original English: Search for the string 'foo' in *.html files under /usr/src/linux directory
English: search for string _REGEX in _REGEX file under _REGEX directory
GT Command 1: grep foo `find /usr/src/linux -name "*.html"`
min_temp_dist = 6
min_dist = 6
Prediction 1: find _REGEX -name _REGEX | xargs grep _REGEX (-13.9988250732)

Example 153 (1)
Original English: find all the regular/normal files in a folder which are less than 50 bytes.
English: find all _REGEX file in folder le than _NUM byte
GT Command 1: find /usr/bin -type f -size -50c
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -type f -size +_NUMc (-8.22758674622)

Example 154 (1)
Original English: Find all *.py files under and below the current directory and search them for "xrange"
English: find all _REGEX file under and below current directory and search for _REGEX
GT Command 1: find . -name '*.py' -exec grep --color 'xrange' {} +
min_temp_dist = 5
min_dist = 5
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-13.102976799)

Example 155 (1)
Original English: Display the 5 largest files in the current directory and its sub-directories.
English: display _NUM largest file in current directory and sub-directories
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
min_temp_dist = 8
min_dist = 9
Prediction 1: find . -type f -printf _REGEX | sort -n | head -_NUM (-8.21656703949)

Example 156 (1)
Original English: Find recursively all regular files in directory tree b that were changed within the last 5 minutes and copy them to directory c
English: find recursively all regular file in directory tree b changed within last _NUM minute and copy to directory c
GT Command 1: find b -type f -cmin -5 -exec cp '{}' c \;
min_temp_dist = 7
min_dist = 8
Prediction 1: find _REGEX -type f -mtime -_NUM | xargs -0 rm (-18.5122146606)

Example 157 (1)
Original English: Remove all broken symlinks from the /usr/ports/packages directory tree
English: remove all broken symlinks from _REGEX directory tree
GT Command 1: find -L /usr/ports/packages -type l -delete
min_temp_dist = 6
min_dist = 6
Prediction 1: find _REGEX -type l -xtype l -exec rm {} \; (-7.75663852692)

Example 158 (1)
Original English: display all the files in the current folder excluding search in the paths containing the folder having the word "mmm"
English: display all file in current folder excluding search in path containing folder having word _REGEX
GT Command 1: find . ! -path *mmm*
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -path _REGEX ! -path _REGEX (-19.1208000183)

Example 159 (1)
Original English: Find all files with the name "MyProgram.c" in the current directory and all of it's sub-directories.
English: find all file with name _REGEX in current directory and all of _REGEX sub-directories
GT Command 1: find -name "MyCProgram.c"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-19.0748806)

Example 160 (1)
Original English: Find deb packages in the current directory recursively
English: find deb package in current directory recursively
GT Command 1: find . -type f -and -iname "*.deb"
min_temp_dist = 3
min_dist = 3
Prediction 1: find . -name _REGEX (-6.5730304718)

Example 161 (3)
Original English: Find all .php files in all directory trees matching pattern `/srv/www/*/htdocs/system/application/' and search those files for string "debug ("
English: find all _REGEX file in all directory tree matching pattern _REGEX and search file for string _REGEX
GT Command 1: find /srv/www/*/htdocs/system/application/ -name "*.php" -exec grep -H "debug (" {} +
GT Command 2: find /srv/www/*/htdocs/system/application/ -name "*.php" -print0 | xargs -0 grep -H "debug ("
GT Command 3: find /srv/www/*/htdocs/system/application/ -name "*.php" -exec grep "debug (" {} \; -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX -exec grep _REGEX {} \; -print (-10.9536437988)

Example 162 (1)
Original English: Find recursively all regular files changed within the last 5 minutes starting from directory b
English: find recursively all regular file changed within last _NUM minute starting from directory b
GT Command 1: find b -type f -cmin -5
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -type f -mmin -_NUM (-11.2809553146)

Example 163 (1)
Original English: Print the name of "file1" if this file is newer than "file2"
English: print name of _REGEX if file newer than _REGEX
GT Command 1: find file1 -prune -newer file2
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -type f -name _REGEX (-15.2191953659)

Example 164 (1)
Original English: find all the files in the current directory that have the word "bash" in their name
English: find all file in current directory word _REGEX in name
GT Command 1: find . -name "*bash*"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-10.3942174911)

Example 165 (2)
Original English: search for a file in current folder excluding the search in the folder ./ignored_directory
English: search for file in current folder excluding search in folder _REGEX
GT Command 1: find . -path ./ignored_directory -prune -o -name fileName.txt -print
GT Command 2: find /path/to/folder -path "*/ignored_directory" -prune -o -name fileName.txt -print
min_temp_dist = 0
min_dist = 2
Prediction 1: find . \( -path _REGEX -prune -or -name _REGEX \) -print (-20.7073898315)

Example 166 (1)
Original English: find all the directories in the entire file system whose size is greater than 50KB
English: find all directory in entire file system whose size greater than _NUMKB
GT Command 1: find / -type d -size +50k
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -type f -size +_NUMk (-14.0715875626)

Example 167 (1)
Original English: Search the current directory tree for files containing "sh" in their names
English: search current directory tree for file containing _REGEX in name
GT Command 1: find . -name "*sh*"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-9.293176651)

Example 168 (1)
Original English: Find all *.texi files in /usr/local/doc
English: find all _REGEX file in _REGEX
GT Command 1: find /usr/local/doc -name '*.texi'
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -name _REGEX (-5.03504705429)

Example 169 (1)
Original English: sort based on size and display top ten largest normal/regular files in the current folder
English: sort based on size and display top _NUM largest _REGEX file in current folder
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -10
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -type f -printf _REGEX | sort | head -n _NUM (-20.0184364319)

Example 170 (1)
Original English: remove all the files in current folder which have the extension "DS_Store"
English: remove all file in current folder extension _REGEX
GT Command 1: find . -name ".DS_Store" -exec rm {} \;
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX -exec rm {} \; (-4.48743343353)

Example 171 (1)
Original English: find file which case-insensitive name is foo in current directory.
English: find file case-insensitive name foo in current directory
GT Command 1: find . -iname foo
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX (-5.00908374786)

Example 172 (1)
Original English: find all the files in current folder ending with "ini" and search for a word in all these files
English: find all file in current folder ending with _REGEX and search for word in all file
GT Command 1: find . -name *.ini -exec grep -w PROJECT_A {} \; -print | grep ini
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-17.7771186829)

Example 173 (1)
Original English: Find all files matching shell pattern "foo/bar" in the foo directory tree
English: find all file matching shell pattern _REGEX in foo directory tree
GT Command 1: find foo -path foo/bar -print
min_temp_dist = 1
min_dist = 2
Prediction 1: find _REGEX -name _REGEX (-17.3670387268)

Example 174 (1)
Original English: returns a list of  files modification newer than poop
English: return list of file modification newer than poop
GT Command 1: find . -mnewer poop
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -newer _REGEX (-7.68470335007)

Example 175 (1)
Original English: To list the number of directories in the `/usr/share' directory tree
English: to list number of directory in _REGEX directory tree
GT Command 1: find /usr/share \! -type f | wc -l
min_temp_dist = 4
min_dist = 5
Prediction 1: find _REGEX -type d (-7.47487878799)

Example 176 (1)
Original English: search for a word in all the normal/regular files in the current folder
English: search for word in all _REGEX file in current folder
GT Command 1: find . -type f | xargs grep "text"
min_temp_dist = 6
min_dist = 7
Prediction 1: find . -name _REGEX -exec grep -l _REGEX {} \; (-9.19221305847)

Example 177 (1)
Original English: Find files on the system created during the last 50 days
English: find file on system created during last _NUM day
GT Command 1: find / -ctime -50
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -mtime -_NUM (-3.59047746658)

Example 178 (1)
Original English: force delete all the directories in a folder which  have a specific name
English: force delete all directory in folder specific name
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
min_temp_dist = 9
min_dist = 12
Prediction 1: find _PARAMETER -type d -name _REGEX -print0 | xargs -0 rm (-6.18017053604)

Example 179 (1)
Original English: search for the file, filename.txt in the current folder ( case insensitive search )
English: search for file _REGEX in current folder ( case insensitive search )
GT Command 1: find . -iname filename.txt
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -iname _REGEX (-11.8786745071)

Example 180 (3)
Original English: delete all the files ending with "~" in current folder
English: delete all file ending with _PARAMETER in current folder
GT Command 1: find . -name "*~" -print | xargs rm
GT Command 2: find -name '*~' -print0 | xargs -0 rm
GT Command 3: find -name '*~' -delete
min_temp_dist = 3
min_dist = 3
Prediction 1: find . -name _PARAMETER -exec rm {} \; (-5.25808095932)

Example 181 (1)
Original English: find all the text files which are present in the current directory excludinghidden files.
English: find all text file present in current directory excludinghidden file
GT Command 1: find . -type f \( -iname "*.txt" ! -iname ".*" \)
min_temp_dist = 6
min_dist = 6
Prediction 1: find . -name _REGEX -print (-9.92768383026)

Example 182 (1)
Original English: Find *.c files under $HOME and search for the string 'sprintf' in those files
English: find _REGEX file under _PARAMETER and search for string _REGEX in file
GT Command 1: find $HOME -name '*.c' -print | xargs    grep -l sprintf
min_temp_dist = 4
min_dist = 6
Prediction 1: find _PARAMETER -name _REGEX -exec grep -l _REGEX {} \; (-10.3367490768)

Example 183 (1)
Original English: Find files in the current directory tree which have permissions rwx for user and rw for group and others
English: find file in current directory tree permission rwx for user and rw for group and others
GT Command 1: find . -perm 766
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -perm -664 (-13.8179750443)

Example 184 (1)
Original English: list regular files under the user's home directory that are over 100KB and have not been accessed in over 30 days.
English: list regular file under _REGEX home directory over _NUMKB and not accessed in over _NUM day
GT Command 1: find $HOME -type f -atime +30 -size 100k
min_temp_dist = 3
min_dist = 4
Prediction 1: find ${HOME} -type f -atime +_NUM -exec ls -l {} \; (-6.89221572876)

Example 185 (1)
Original English: Search for 'foo=' in all *.png files under current directory without descending into *.gif and *.svn directories
English: search for _REGEX in all _REGEX file under current directory without descending into _REGEX and _REGEX directory
GT Command 1: find . -name "*.png" -prune -o -name "*.gif" -prune -o -name "*.svn" -prune -o -print0 | xargs -0 -I FILES grep -IR "foo=" FILES
min_temp_dist = 14
min_dist = 14
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-24.0379333496)

Example 186 (1)
Original English: Find files with inode number 199053
English: find file with inode number _NUM
GT Command 1: find / -inum 199053
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -inum _NUM (-4.49306964874)

Example 187 (1)
Original English: Locate files that reside in the home directory and have not been accessed in the past 30 days
English: locate file reside in home directory and not accessed in past _NUM day
GT Command 1: find $HOME -atime +30
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -atime +_NUM (-13.8909425735)

Example 188 (1)
Original English: Find every file under the directory /usr ending in ".stat".
English: find every file under directory _REGEX ending in _REGEX
GT Command 1: find /usr -name *stat
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -name _REGEX (-3.56874608994)

Example 189 (1)
Original English: Find regular files under and below /path that match pattern "???-???_[a-zA-Z]*_[0-9]*_*.???"
English: find regular file under and below _REGEX match pattern _REGEX
GT Command 1: find /path -type f -name "???-???_[a-zA-Z]*_[0-9]*_*.???"
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -type f -print (-11.3854694366)

Example 190 (1)
Original English: Find files with 002 permission under /tmp and print them with the string 'Found world write permissions:' printed as the first line of output
English: find file with _NUM permission under _REGEX and print with string _REGEX printed first line of output
GT Command 1: find /tmp -type f -perm -002 | sed '1s/^/Found world write permissions:\n/'
min_temp_dist = 5
min_dist = 8
Prediction 1: find . -type f -perm 777 -exec chmod 400 {} \; (-9.73322868347)

Example 191 (2)
Original English: create a tar ball of all pdf files in current folder
English: create tar ball of all pdf file in current folder
GT Command 1: find . -name *.pdf | xargs tar czvf /root/Desktop/evidence/pdf.tar
GT Command 2: find . -name '*.pdf' -print0 | tar czvf pdf.tar --null -T -
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -name _REGEX -exec tar -r -v -f _PARAMETER {} \; (-9.72829532623)

Example 192 (3)
Original English: Find all files/directories in entire file system that have  "write" bit set for either the owner, the group, or others
English: find all _REGEX in entire file system _REGEX bit set for either owner group or others
GT Command 1: find / -perm /u+w,g+w,o+w
GT Command 2: find / -perm /222
GT Command 3: find / -perm /a+w
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -perm 644 (-11.9874181747)

Example 193 (1)
Original English: Find all *.tex regular files under current directory
English: find all _REGEX regular file under current directory
GT Command 1: find . -type f -name "*.tex"
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -type f (-2.88983774185)

Example 194 (1)
Original English: find all the files in the current directory and print them excluding those that have the name SCCS.
English: find all file in current directory and print excluding name SCCS
GT Command 1: find . -print -o -name SCCS -prune
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX -print (-13.4120416641)

Example 195 (1)
Original English: Search for all files and directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.
English: search for all file and directory named foo FOO or any other combination of uppercase and lowercase character beneath current directory
GT Command 1: find . -iname foo
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX (-23.3033714294)

Example 196 (1)
Original English: Remove files under /mnt/zip matching "*prets copy" with confirmation
English: remove file under _REGEX matching _REGEX with confirmation
GT Command 1: find /mnt/zip -name "*prefs copy" -print0 | xargs -0 -p /bin/rm
min_temp_dist = 3
min_dist = 3
Prediction 1: find _REGEX -name _REGEX -type f -print0 | xargs -0 rm (-5.04555606842)

Example 197 (1)
Original English: find an image in a specific folder
English: find image in specific folder
GT Command 1: find /home/username/public_html/images -name "articles.jpg"
min_temp_dist = 0
min_dist = 1
Prediction 1: find _PARAMETER -name _REGEX (-9.22797966003)

Example 198 (1)
Original English: display all the regular files in the folder "$(FOLDER)" which are modified in the last $(RETENTION)*24 hours and excluding hidden files
English: display all regular file in folder _PARAMETER modified in last _PARAMETER RETENTION _REGEX hour and excluding hidden file
GT Command 1: find ${FOLDER} -type f ! -name \".*\" -mtime -${RETENTION}
min_temp_dist = 3
min_dist = 3
Prediction 1: find _PARAMETER -type f -not -name _REGEX (-16.1915302277)

Example 199 (2)
Original English: print all files in the directories except the ./src/emacs directory
English: print all file in directory except _REGEX directory
GT Command 1: find . -wholename './src/emacs' -prune , -print
GT Command 2: find . -wholename './src/emacs' -prune -o -print
min_temp_dist = 4
min_dist = 6
Prediction 1: find _REGEX -maxdepth _NUM -not -path _REGEX (-8.38992023468)

Example 200 (1)
Original English: search the entire file system for a specific file
English: search entire file system for specific file
GT Command 1: find / -name document -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -name _REGEX (-8.15985679626)

Example 201 (2)
Original English: Search directory foo for files containing "foo/bar" in their full names
English: search directory foo for file containing _REGEX in full name
GT Command 1: find foo -path foo/bar -print
GT Command 2: find foo -path /tmp/foo/bar -print
min_temp_dist = 2
min_dist = 4
Prediction 1: find _REGEX -name _REGEX -type f (-15.7074375153)

Example 202 (1)
Original English: copy the file header.shtml to each directory under dir1, dir2, dir3, or dir4
English: copy file _REGEX to each directory under dir_NUM dir_NUM dir_NUM or dir_NUM
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
min_temp_dist = 11
min_dist = 15
Prediction 1: find _REGEX ! -path _REGEX ! -path _REGEX -prune -or -name _REGEX \) -print (-19.4755554199)

Example 203 (3)
Original English: Search the current directory tree for regular files that contain "string"
English: search current directory tree for regular file contain _REGEX
GT Command 1: find . -type f -print0 | xargs -0 grep string
GT Command 2: find . -type f -printf '"%p"\n' | xargs grep string
GT Command 3: find . -type f | xargs grep string
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -type f -print0 | xargs -0 grep -l _REGEX (-5.28438282013)

Example 204 (1)
Original English: display all the home folder which end with the extension "sxw" and which have been accessed in the last 3*24 hours and which belong to the user bruno
English: display all home folder end with extension _REGEX and accessed in last _REGEX hour and belong to user bruno
GT Command 1: find /home -type f -name "*.sxw" -atime -3 -user bruno
min_temp_dist = 4
min_dist = 5
Prediction 1: find ${HOME} -iname _REGEX -atime -_NUM (-12.3992738724)

Example 205 (1)
Original English: find all the files (under root file system /) that were changed within the last 24 hours
English: find all file ( under root file system _REGEX ) changed within last _NUM hour
GT Command 1: find / -ctime -1
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -amin -_NUM (-6.64582538605)

Example 206 (1)
Original English: Find .gif and .png image files in ~/Desktop and move them to the ~/Pictures directory.
English: find _REGEX and _REGEX image file in _PARAMETER and move to _PARAMETER directory
GT Command 1: find ~/Desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/Pictures
min_temp_dist = 9
min_dist = 10
Prediction 1: find _PARAMETER -name _REGEX -exec mv {} _PARAMETER \; (-10.4068078995)

Example 207 (1)
Original English: find all files in the current folder having a specific word in their name
English: find all file in current folder having specific word in name
GT Command 1: find -name "*pattern*"
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX -type f -print (-10.662768364)

Example 208 (1)
Original English: display all the directories in the folder /path/to/dest except tmp and cache directories
English: display all directory in folder _REGEX except tmp and cache directory
GT Command 1: find /path/to/dest -type d \( ! -name tmp \) -o \( ! -name cache \) -print
min_temp_dist = 5
min_dist = 8
Prediction 1: find _REGEX -maxdepth _NUM -type d -name _REGEX -print (-21.1565608978)

Example 209 (1)
Original English: Find text in whole directory tree
English: find text in whole directory tree
GT Command 1: find . -type f | xargs grep "text"
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -name _REGEX (-9.26136398315)

Example 210 (1)
Original English: Find all *.tex files/directories in maximum 2 levels down the current directory
English: find all _REGEX _REGEX in maximum _NUM level down current directory
GT Command 1: find . -maxdepth 2 -name '*.tex'
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -maxdepth _NUM -name _REGEX (-7.45478153229)

Example 211 (1)
Original English: find files in the current directory and sub-directories, that were accessed within last hour
English: find file in current directory and sub-directories accessed within last hour
GT Command 1: find -amin -60
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -atime -_NUM (-5.13388824463)

Example 212 (1)
Original English: display all the text files in the current folder  and do not search in the bin directory
English: display all text file in current folder and not search in bin directory
GT Command 1: find . -name bin -prune -o -name "*.txt" -print
min_temp_dist = 3
min_dist = 5
Prediction 1: find . -name _REGEX -type f -print (-14.4871854782)

Example 213 (1)
Original English: display all the normal/regular files in the current folder which are empty
English: display all _REGEX file in current folder empty
GT Command 1: find . -type f -empty
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -type f -empty (-7.67867660522)

Example 214 (1)
Original English: display all sqlite files in the current directory along with their timestamp
English: display all sqlite file in current directory along with timestamp
GT Command 1: find ./ -name "*.sqlite" -printf '%Tc %p\n'
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -regex _REGEX (-15.0708856583)

Example 215 (1)
Original English: find the file "filename.txt" in the usr folder
English: find file _REGEX in usr folder
GT Command 1: find /usr -name filename.txt -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -name _REGEX (-9.69749546051)

Example 216 (1)
Original English: Search the current directory, except the subdirectory tree ".svn", for files whose name is "foo.cpp"
English: search current directory except subdirectory tree _REGEX for file whose name _REGEX
GT Command 1: find . -name 'foo.cpp' '!' -path '.svn'
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -name _REGEX -not -path _REGEX (-15.5265407562)

Example 217 (1)
Original English: Archive all *html files using tar.
English: archive all _REGEX file using tar
GT Command 1: find . -type f -name "*html" | xargs tar cvf htmlfiles.tar -
min_temp_dist = 6
min_dist = 6
Prediction 1: find . -name _REGEX | xargs tar -r -v -f myfile.tar (-7.85471868515)

Example 218 (1)
Original English: List empty directories in the current directory tree
English: list empty directory in current directory tree
GT Command 1: find . -depth -empty -type d
min_temp_dist = 3
min_dist = 3
Prediction 1: find . -type d -empty (-8.66413879395)

Example 219 (1)
Original English: display all pdf files in the current folder
English: display all pdf file in current folder
GT Command 1: find . -name *.pdf
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX (-6.42807435989)

Example 220 (1)
Original English: find all the files which are of size 0 bytes.
English: find all file of size _NUM byte
GT Command 1: find . -type f -empty
min_temp_dist = 2
min_dist = 4
Prediction 1: find / -size _NUM (-2.95695161819)

Example 221 (1)
Original English: find all the perl files in /var/www
English: find all perl file in _REGEX
GT Command 1: find /var/www/ -type f -name "*.pl" -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -name _REGEX (-7.41751432419)

Example 222 (2)
Original English: Remove the .jpg files from the current directory whose names match regular expression ".+-[0-9]+x[0-9]+\.jpg"
English: remove _REGEX file from current directory whose name match regular expression _REGEX
GT Command 1: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg" -exec rm -rf {} \;
GT Command 2: find . -type f -regex ".+-[0-9]+x[0-9]+\.jpg" | xargs rm
min_temp_dist = 3
min_dist = 3
Prediction 1: find . -name _REGEX | xargs rm -f (-11.151968956)

Example 223 (1)
Original English: Find files ending with .mp3 or .jpg
English: find file ending with _REGEX or _REGEX
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX (-6.54868078232)

Example 224 (1)
Original English: Find all files in the current directory tree that match pattern 'a(b*'
English: find all file in current directory tree match pattern _REGEX
GT Command 1: find . -name 'a(b*' -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-12.0334196091)

Example 225 (1)
Original English: display all files in the current directory excluding those that are present in the directories whose name starts with "efence" and do not search in the sub directories
English: display all file in current directory excluding present in directory whose name start with _REGEX and not search in sub directory
GT Command 1: find * -maxdepth 0 -name "efence*" -prune -o -print
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -maxdepth _NUM -not -name _REGEX (-21.2313079834)

Example 226 (1)
Original English: remove all subdirectories named "CVS" under current dir
English: remove all subdirectory named _REGEX under current dir
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
min_temp_dist = 8
min_dist = 10
Prediction 1: find . -name _REGEX -type f -print0 | xargs -0 rm (-5.31396245956)

Example 227 (1)
Original English: Search the current directory and its sub-directories for any file that has "bsd" somewhere in its name.
English: search current directory and sub-directories for any file ha _REGEX somewhere in name
GT Command 1: find . -name "*bsd*" -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-10.6914701462)

Example 228 (1)
Original English: display all the files in the entire file system which are bigger than 10MB
English: display all file in entire file system bigger than _NUMMB
GT Command 1: find / -size +10000k
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -size +_NUMM (-10.7865447998)

Example 229 (1)
Original English: display the number  of files in a folder along with its name
English: display number of file in folder along with name
GT Command 1: find . -type d -ls | awk '{print $4 - 2, $NF}' | sort -rn | head
min_temp_dist = 7
min_dist = 9
Prediction 1: find _PARAMETER -name _REGEX | wc -l (-8.14322853088)

Example 230 (1)
Original English: find all files that are readable or writable by their owner
English: find all file readable or writable by owner
GT Command 1: find . -perm +600 -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -perm -20 (-4.6818652153)

Example 231 (1)
Original English: Find all files that belongs to user Tecmint under /home directory
English: find all file belongs to user tecmint under _REGEX directory
GT Command 1: find /home -user tecmint
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -user tecmint -iname _REGEX (-14.2624578476)

Example 232 (1)
Original English: Find *test* files/directories under current directory ensuring  that a directory is evaluated before its contents
English: find _REGEX _REGEX under current directory ensuring directory evaluated before content
GT Command 1: find -name "*test*" -depth
min_temp_dist = 6
min_dist = 6
Prediction 1: find . -name _REGEX | xargs grep -l _REGEX (-15.7053947449)

Example 233 (1)
Original English: Return a list of files newer than file poop
English: return list of file newer than file poop
GT Command 1: find . -mnewer poop
min_temp_dist = 1
min_dist = 3
Prediction 1: find / -newerct _REGEX -print (-8.15561676025)

Example 234 (2)
Original English: find all the swap files (files ending with ~) in the current folder and delete them
English: find all swap file ( file ending with _PARAMETER ) in current folder and delete
GT Command 1: find . -name "*~" -delete
GT Command 2: find . -name "*~" -exec rm {} \;
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _PARAMETER -exec rm {} \; (-9.26302623749)

Example 235 (1)
Original English: find all files in the file system whose size is bigger than 3GB
English: find all file in file system whose size bigger than _NUMGB
GT Command 1: find / -size +3G
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -size +_NUMM (-10.9341268539)

Example 236 (1)
Original English: find all  tools generated files  a.out , *.o and core dump files which not required to us these all junk files & delete from  current  directory .
English: find all tool generated file _REGEX _REGEX and core dump file not required to u all junk file _REGEX delete from current directory
GT Command 1: find . \( -name a.out -o -name '*.' -o -name  'core' \) -exec rm {} \;
min_temp_dist = 6
min_dist = 6
Prediction 1: find . -name _REGEX -exec rm -f {} \; (-12.7965135574)

Example 237 (1)
Original English: change the ownership of all directories in the current folder
English: change ownership of all directory in current folder
GT Command 1: find . -type d -exec chown username {} \;
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -type d -exec chmod 755 {} \; (-5.6607260704)

Example 238 (1)
Original English: search for all "tif" images in current folder
English: search for all _REGEX image in current folder
GT Command 1: find . -name '*.tif ' -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-4.99765014648)

Example 239 (1)
Original English: delete all the regular files in the temp folder which have not been changed in the last 15*24 hours
English: delete all regular file in temp folder not changed in last _REGEX hour
GT Command 1: find /tmp/ -ctime +15 -type f -exec rm {} \;
min_temp_dist = 5
min_dist = 6
Prediction 1: find _REGEX -type f -mtime +_NUM -delete (-11.8303537369)

Example 240 (1)
Original English: Find all empty regular files in the current directory tree
English: find all empty regular file in current directory tree
GT Command 1: find . -size 0c -type f
min_temp_dist = 3
min_dist = 3
Prediction 1: find . -type f -empty (-6.50939750671)

Example 241 (1)
Original English: Find all 400 permission files under /data directory with null character as the delimiter
English: find all _NUM permission file under _REGEX directory with null character delimiter
GT Command 1: find /data -type f -perm 400 -print0
min_temp_dist = 5
min_dist = 6
Prediction 1: find _REGEX -type f -print0 | xargs -0 chmod 644 (-7.7275261879)

Example 242 (1)
Original English: display all the regular files in the current folder which dont not have the permission 777
English: display all regular file in current folder dont not permission _NUM
GT Command 1: find . -type f ! -perm 777
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -type f -perm 777 (-13.5433568954)

Example 243 (1)
Original English: Search for *pattern* in and below current directory
English: search for _REGEX in and below current directory
GT Command 1: find -name "*pattern*"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-2.72760128975)

Example 244 (1)
Original English: show the list of all the files in the current folder which have been modified within the 24 hours
English: show list of all file in current folder modified within _NUM hour
GT Command 1: find . -mtime 0 -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -mtime _NUM (-11.7986898422)

Example 245 (1)
Original English: Copy file header.shtml to directories dir1, dir2, dir3, and dir4
English: copy file _REGEX to directory dir_NUM dir_NUM dir_NUM and dir_NUM
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
min_temp_dist = 11
min_dist = 14
Prediction 1: find dir -type d -name _REGEX | xargs tar -r -v -f myfile.tar (-18.1172809601)

Warning: -exec missing ending ';'
Example 246 (1)
Original English: find all the files with a specific name in the current folder and delete them
English: find all file with specific name in current folder and delete
GT Command 1: find . -name “find name” -exec rm {}\ ;
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX -exec rm {} \; (-9.28743648529)

Example 247 (1)
Original English: display all the files in the current folder which have been modified between two dates
English: display all file in current folder modified between _NUM date
GT Command 1: find . -newermt “Sep 1 2006” -and \! -newermt “Sep 10 2006”
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -size _NUMk (-16.9130458832)

Example 248 (1)
Original English: Find all CSS files
English: find all CSS file
GT Command 1: find . -name "*.css"
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-7.46950483322)

Example 249 (1)
Original English: display long list of all the perl files in the current folder
English: display long list of all perl file in current folder
GT Command 1: find . -name "*.pl" -ls
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -name _REGEX -exec ls -l {} \; (-6.16724967957)

Example 250 (1)
Original English: Search for directory foo ignoring case
English: search for directory foo ignoring case
GT Command 1: find . -iname foo -type d
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -iname _REGEX (-3.05726456642)

Example 251 (8)
Original English: Delete all .svn files/directories under current directory
English: delete all _REGEX _REGEX under current directory
GT Command 1: find . -name .svn -delete
GT Command 2: find . -name .svn | xargs rm -fr
GT Command 3: find . -name .svn |xargs rm -rf
GT Command 4: find . -depth -name .svn -exec rm -fr {} \;
GT Command 5: find . -name .svn -exec rm -rf '{}' \;
GT Command 6: find . -name .svn -exec rm -v {} \;
GT Command 7: find . -name .svn -exec rm -rf {} +
GT Command 8: find . -name .svn -exec rm -rf {} \;
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX | xargs rm (-7.39250421524)

Example 252 (1)
Original English: list all *.txt files in the user's home directory.
English: list all _REGEX file in _REGEX home directory
GT Command 1: find ~/ -name '*.txt'
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-7.83178853989)

Example 253 (1)
Original English: Remove all "work" directories residing in /usr/ports and below
English: remove all _REGEX directory residing in _REGEX and below
GT Command 1: find /usr/ports/ -name work -type d -print -exec rm -rf {} \;
min_temp_dist = 7
min_dist = 9
Prediction 1: find _REGEX -name _REGEX -type f -print0 | xargs -0 rm (-4.68079185486)

Example 254 (1)
Original English: find all the files in a folder which do not belong to any user
English: find all file in folder not belong to any user
GT Command 1: find /home -nouser -print
min_temp_dist = 3
min_dist = 3
Prediction 1: find _REGEX ! -perm 0644 (-11.8564586639)

Example 255 (1)
Original English: Count the number of files named `file1'
English: count number of file named _REGEX
GT Command 1: find -name file1 | wc -l
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -name _REGEX | xargs wc -l (-5.93586969376)

Example 256 (1)
Original English: find all files having certain word in its name in the current folder
English: find all file having certain word in name in current folder
GT Command 1: find . -name "*bsd*" -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX -type f -print (-12.1543664932)

Example 257 (1)
Original English: List all regular files in /var/www and below that have changed in the last 10 minutes
English: list all regular file in _REGEX and below changed in last _NUM minute
GT Command 1: find /var/www -cmin -10 -type f -printf "%c %pn"
min_temp_dist = 3
min_dist = 4
Prediction 1: find _REGEX -type f -mtime -_NUM (-13.2729797363)

Example 258 (1)
Original English: Find files owned by no group
English: find file owned by no group
GT Command 1: find / -nogroup
min_temp_dist = 2
min_dist = 2
Prediction 1: find / -group admins (-5.22384166718)

Example 259 (1)
Original English: Find the unique owners of all the files in the /bin directory
English: find unique owner of all file in _REGEX directory
GT Command 1: find /bin -type f -follow | xargs    ls -al | awk ' NF==9 { print $3 }'|sort -u
min_temp_dist = 9
min_dist = 9
Prediction 1: find _REGEX -type f -print0 | xargs -0 grep -l _REGEX (-7.10371446609)

Example 260 (1)
Original English: Search the .c files residing in the Lib/ directory tree for lines beginning with "PyErr"
English: search _REGEX file residing in _REGEX directory tree for line beginning with _REGEX
GT Command 1: find Lib/ -name '*.c' -print0 | xargs -0 grep ^PyErr
min_temp_dist = 6
min_dist = 7
Prediction 1: find _REGEX -name _REGEX -exec grep -l _REGEX {} \; (-9.58660888672)

Example 261 (2)
Original English: Find all *.cgi files/directories under current directory and change their permission to 755
English: find all _REGEX _REGEX under current directory and change permission to _NUM
GT Command 1: find . -name '*.cgi' -print0 | xargs -0 chmod 755
GT Command 2: find . -name '*.cgi' -print0 | xargs -0 chmod 775
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -name _REGEX -exec chmod 400 {} \; (-8.64878845215)

Example 262 (1)
Original English: Locate files whose status was changed less than 1 day ago
English: locate file whose status wa changed le than _NUM day ago
GT Command 1: find . -ctime -1 -print
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -mtime -_NUM (-9.77945327759)

Example 263 (1)
Original English: Remove all CVS directories in the current directory tree
English: remove all CVS directory in current directory tree
GT Command 1: find . -type d -name CVS -exec rm -r {} \;
min_temp_dist = 7
min_dist = 7
Prediction 1: find . -type d | xargs rm -f (-5.41168451309)

Example 264 (1)
Original English: Count the number of files/directories named file1 under current directory
English: count number of _REGEX named file_NUM under current directory
GT Command 1: find -name file1 | wc -l
min_temp_dist = 1
min_dist = 2
Prediction 1: find . -name _REGEX | xargs wc -l (-7.27071762085)

Example 265 (1)
Original English: Locate the httpd.conf file on the system
English: locate _REGEX file on system
GT Command 1: find / -name httpd.conf
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -name file_NUM (-8.96340274811)

Example 266 (1)
Original English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names excluding the files that contain 'generated' or 'deploy' in their paths
English: list all _REGEX under current directory matching posix-egrep type regex _PARAMETER in name excluding file contain _REGEX or _REGEX in path
GT Command 1: find . -regextype posix-egrep -regex '.+\.(c|cpp|h)$' -print0 | grep -vzZ generated | grep -vzZ deploy | xargs -0 ls -1Ld
min_temp_dist = 16
min_dist = 17
Prediction 1: find . | grep -P _REGEX | xargs ls -l (-31.0969867706)

Example 267 (1)
Original English: Find files in the current directory whose names begin with "file" and remove them
English: find file in current directory whose name begin with _REGEX and remove
GT Command 1: find . -name file* -maxdepth 1 -exec rm {} \;
min_temp_dist = 6
min_dist = 7
Prediction 1: find . -name _REGEX | xargs rm (-13.913359642)

Example 268 (1)
Original English: search all the files in the current folder using name patterns
English: search all file in current folder using name pattern
GT Command 1: find . -name 'a(b*' -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-3.54914569855)

Example 269 (1)
Original English: Search the ~/Books directory recursively for files named "Waldo"
English: search _PARAMETER directory recursively for file named _REGEX
GT Command 1: find ~/Books -name Waldo
min_temp_dist = 0
min_dist = 1
Prediction 1: find _PARAMETER -name _PARAMETER (-8.63981342316)

Example 270 (2)
Original English: Find all *.csv files under /foo/bar and move them to some_dir
English: find all _REGEX file under _REGEX and move to _REGEX
GT Command 1: find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir
GT Command 2: find /foot/bar/ -name '*.csv' -print0 | xargs -0 mv -t some_dir
min_temp_dist = 3
min_dist = 4
Prediction 1: find _REGEX -name _REGEX | xargs -I {} mv {} _REGEX (-12.8313360214)

Example 271 (1)
Original English: get all the files that are exactly 30 days old
English: get all file exactly _NUM day old
GT Command 1: find . -mtime 30 -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -mtime _NUM (-5.60907506943)

Example 272 (1)
Original English: find all the configuration files which have been accessed in the last 30 minutes.
English: find all configuration file accessed in last _NUM minute
GT Command 1: find /etc/sysconfig -amin -30
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -amin -_NUM (-2.09360194206)

Example 273 (1)
Original English: Locating large files (> 100 MB) in /home/ for 'cleaning'
English: locating large file ( _REGEX _NUM MB ) in _REGEX for _REGEX
GT Command 1: find /home -type f -size +100M -delete
min_temp_dist = 7
min_dist = 9
Prediction 1: find _REGEX -name _REGEX -exec grep -i -l _REGEX {} \; (-11.153883934)

Example 274 (1)
Original English: List all files/directories with spaces in their names under ~/Library directory
English: list all _REGEX with space in name under _PARAMETER directory
GT Command 1: find ~/Library -name '* *' -exec ls {} \;
min_temp_dist = 1
min_dist = 1
Prediction 1: find _PARAMETER -name _REGEX -exec ls -l {} \; (-7.84073495865)

Example 275 (1)
Original English: find  directory which case-insensitive name is too in currect directory
English: find directory case-insensitive name too in current directory
GT Command 1: find . -iname foo -type d
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -type d -name _REGEX (-9.78853225708)

Example 276 (1)
Original English: search for directories in the folder "test" which end with 5 digits using regular expressions
English: search for directory in folder _REGEX end with _NUM digit using regular expression
GT Command 1: find ./test -regextype posix-egrep -type d -regex '.*/[0-9]{5}$'
min_temp_dist = 1
min_dist = 4
Prediction 1: find _REGEX -mindepth _NUM -type d -name _REGEX (-13.1883049011)

Example 277 (1)
Original English: Remove files in the current directory tree modified more than 31 days ago recursively
English: remove file in current directory tree modified more than _NUM day ago recursively
GT Command 1: find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
min_temp_dist = 7
min_dist = 8
Prediction 1: find . -name _REGEX -mtime +_NUM -exec rm {} \; (-7.9154343605)

Example 278 (1)
Original English: find all the files which have a specific permission
English: find all file specific permission
GT Command 1: find -perm 777
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -perm -20 (-4.97284317017)

Example 279 (2)
Original English: Delete all files in the current directory tree whose names end with ~
English: delete all file in current directory tree whose name end with _PARAMETER
GT Command 1: find . -name "*~" -delete
GT Command 2: find . -name "*~" -exec rm {} \;
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _PARAMETER | xargs rm (-12.8805036545)

Example 280 (1)
Original English: Find files with 002 permission in entire file system and print them with the string 'has world write permissions' appended after every path
English: find file with _NUM permission in entire file system and print with string _REGEX appended after every path
GT Command 1: find / -type f -perm -002 -printf '%p has world write permissions\n'
min_temp_dist = 6
min_dist = 7
Prediction 1: find / -type f -name _REGEX -exec grep -l -i _REGEX {} \; (-16.7023868561)

Example 281 (1)
Original English: Find files under /usr that are the same age or older than file `FirstFile'
English: find file under _REGEX same age or older than file _REGEX
GT Command 1: find /usr ! -newer /FirstFile -print
min_temp_dist = 4
min_dist = 4
Prediction 1: find _REGEX -type f -name _REGEX (-17.1904125214)

Example 282 (1)
Original English: find any files in the current directory that begin with a number
English: find any file in current directory begin with number
GT Command 1: find . -regex './[0-9].*' -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-4.4780216217)

Example 283 (1)
Original English: find all the files in the current folder which end with "ext1" or "ext2" or "ext3"
English: find all file in current folder end with _REGEX or _REGEX or _REGEX
GT Command 1: find -E . -regex ".*ext1|.*ext2|.*ext3"
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -name _REGEX (-15.8346195221)

Example 284 (3)
Original English: Find all mysong.ogg files/directories under your home directory
English: find all _REGEX _REGEX under home directory
GT Command 1: find $HOME -name 'mysong.ogg'
GT Command 2: find ~/ -name '*.txt'
GT Command 3: find ~ -name "*.txt" -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-7.94361591339)

Example 285 (1)
Original English: find all the files starting with "config" in the folder Symfony ( case insensitive search)
English: find all file starting with _REGEX in folder symfony ( case insensitive search )
GT Command 1: find Symfony -iname '*config*';
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -iname _REGEX (-6.18877649307)

Example 286 (1)
Original English: Search all the .c and .h files in the current directory tree for "expr"
English: search all _REGEX and _REGEX file in current directory tree for _REGEX
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-9.76604175568)

Example 287 (4)
Original English: Search the current directory tree for files whose name is ".note", case insensitive
English: search current directory tree for file whose name _REGEX case insensitive
GT Command 1: find . -iname '.note' | sort
GT Command 2: find . -iname '.note'
GT Command 3: find -type d -exec find {} -maxdepth 1 \! -type d -iname '.note' \;
GT Command 4: find . -iname '.note' | sort -r
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -iname _REGEX (-12.9436016083)

Example 288 (1)
Original English: change the owner of all the files in folder /u/netinst to netinst
English: change owner of all file in folder _REGEX to nextint
GT Command 1: find /u/netinst -print | xargs chown netinst
min_temp_dist = 4
min_dist = 5
Prediction 1: find _REGEX -type f -print0 | xargs -0 chmod 644 (-9.4235496521)

Example 289 (1)
Original English: find  file which case-insensitive name is too in currect directory
English: find file case-insensitive name too in current directory
GT Command 1: find . -iname foo
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -iname _REGEX (-4.58340930939)

Example 290 (1)
Original English: remove all the files in the present directory which have special characters in their name and do not search in the sub directories of the current folder.
English: remove all file in present directory special character in name and not search in sub directory of current folder
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
min_temp_dist = 3
min_dist = 5
Prediction 1: find . -maxdepth _NUM -name _REGEX -exec rm {} \; (-9.48379039764)

Example 291 (1)
Original English: search for files with the name "temp" in the /usr folder
English: search for file with name _REGEX in _REGEX folder
GT Command 1: find /usr -name temp -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -name _REGEX (-6.54662942886)

Example 292 (1)
Original English: find all the files that have not been modifid in the last 31 days in a folder and delete them.print0 is used to preserve files that have new line character in their name
English: find all file not modified in last _NUM day in folder and delete _REGEX used to preserve file new line character in name
GT Command 1: find . -type f -mtime +31 -print0 | xargs -0 -r rm -f
min_temp_dist = 6
min_dist = 7
Prediction 1: find _REGEX -type f -mtime +_NUM -exec rm {} \; (-15.0406169891)

Example 293 (1)
Original English: show a count of the number of filenames ending in .txt in the current directory, without descending into sub-directories
English: show count of number of filename ending in _REGEX in current directory without descending into sub-directories
GT Command 1: find . -maxdepth 1 -name \*.txt -print0 | grep -cz .
min_temp_dist = 7
min_dist = 8
Prediction 1: find . -name _REGEX | xargs wc -l (-14.3490447998)

Example 294 (1)
Original English: list regular file which file name end with 'cache' 'xml' or 'html' in current directory
English: list regular file file name end with _REGEX _REGEX or _REGEX in current directory
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
min_temp_dist = 8
min_dist = 9
Prediction 1: find . -type f -name _REGEX | xargs grep -l thing (-11.2952842712)

Example 295 (1)
Original English: Find '*prefs copy' files under /mnt/zip and delete them with confirmation prompt ensuring white space safety
English: find _REGEX file under _REGEX and delete with confirmation prompt ensuring white space safety
GT Command 1: find /mnt/zip -name "*prefs copy" -print0 | xargs    -0 -p /bin/rm
min_temp_dist = 1
min_dist = 1
Prediction 1: find _REGEX -name _REGEX -print0 | xargs -0 rm (-12.9815330505)

Example 296 (1)
Original English: Search the current working directory tree for files whose names start with "fileA_" or "fileB_"
English: search current working directory tree for file whose name start with _REGEX or _REGEX
GT Command 1: find . -name 'fileA_*' -o -name 'fileB_*'
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX (-13.6796007156)

Example 297 (1)
Original English: Find recursively all files changed within the last 5 minutes starting from directory b
English: find recursively all file changed within last _NUM minute starting from directory b
GT Command 1: find b -cmin -5
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -type f -mmin -_NUM (-12.3369350433)

Example 298 (1)
Original English: find all the files in the current folder which have a specific word in their name
English: find all file in current folder specific word in name
GT Command 1: find . -name '*foo*'
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX -print (-10.5217409134)

Example 299 (1)
Original English: find all the empty directories in the current folder and all its sub directories too
English: find all empty directory in current folder and all sub directory too
GT Command 1: find . -depth -empty -type d
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -maxdepth _NUM -type d -empty (-15.5251274109)

Example 300 (1)
Original English: find all the files in the current folder which have been modified for the ffiles that are at least one week old (7 days) but less then 30 days old
English: find all file in current folder modified for file at least _NUM week old ( _NUM day ) but le _NUM day old
GT Command 1: find . -mtime +30 -a -mtime -7 -print0
min_temp_dist = 3
min_dist = 3
Prediction 1: find . -mtime +_NUM -print (-19.3030319214)

Example 301 (1)
Original English: search for the word "mysql" in all the files in the current containing the word "notes" in their name. print0 is used to handle files  with newlines in their names or those which have only spaces in their names
English: search for word _REGEX in all file in current containing word _REGEX in name print_NUM used to handle file with newlines in name or only space in name
GT Command 1: find . -iname "*notes*" -print0 | xargs -I{} -0 grep -i mysql "{}"
min_temp_dist = 6
min_dist = 7
Prediction 1: find . -name _REGEX -exec grep -i _REGEX {} \; (-12.7645053864)

Example 302 (1)
Original English: Find files that are 0 bytes in size in the current directory tree and remove them
English: find file _NUM byte in size in current directory tree and remove
GT Command 1: find . -size 0 -exec rm {} \;
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -size _NUM -exec rm {} \; (-10.919213295)

Example 303 (1)
Original English: Find all files whose names contain the string 'xpilot' which exist within '/usr/local/games'
English: find all file whose name contain string _REGEX exist within _REGEX
GT Command 1: find /usr/local/games -name "*xpilot*"
min_temp_dist = 5
min_dist = 5
Prediction 1: find . -name _REGEX -type f -print | xargs grep _REGEX (-11.0769891739)

Example 304 (2)
Original English: Find all files under and below the current working directory with the word California in the file, and count the number of lines in the output
English: find all file under and below current working directory with word california in file and count number of line in output
GT Command 1: find . -type f -exec grep -n California {} \; -print | wc -l
GT Command 2: find . -type f -exec grep California {} \; -print | wc -l
min_temp_dist = 7
min_dist = 8
Prediction 1: find . -type f -print0 | xargs -0 grep -l _REGEX (-17.793176651)

Example 305 (1)
Original English: find in the file system for a specific file
English: find in file system for specific file
GT Command 1: find / -name filename -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -name _REGEX (-5.48838233948)

Example 306 (1)
Original English: Find files with 002 permission in entire file system with the null character as the delimiter
English: find file with _NUM permission in entire file system with null character delimiter
GT Command 1: find / -type f -perm -002 -print0
min_temp_dist = 2
min_dist = 3
Prediction 1: find / -perm 644 (-8.60205554962)

Example 307 (1)
Original English: find all the files in the current directory with the name "wagoneer" which are in the current device.
English: find all file in current directory with name _REGEX in current device
GT Command 1: find . -xdev -name "wagoneer*" -print
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -name _REGEX (-13.544336319)

Example 308 (1)
Original English: Search for all directories named foo, FOO, or any other combination of uppercase and lowercase characters beneath the current directory.
English: search for all directory named foo FOO or any other combination of uppercase and lowercase character beneath current directory
GT Command 1: find . -iname foo -type d
min_temp_dist = 2
min_dist = 4
Prediction 1: find . -type d -name _REGEX (-22.8278217316)

Example 309 (2)
Original English: List all files/directories under current directory matching the posix-egrep type regex ".+\.(c|cpp|h)$" in their names
English: list all _REGEX under current directory matching posix-egrep type regex _PARAMETER in name
GT Command 1: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$" -print0 | xargs -0 -n 1 ls
GT Command 2: find . -regextype posix-egrep -regex ".+\.(c|cpp|h)$" | xargs -n 1 ls
min_temp_dist = 8
min_dist = 8
Prediction 1: find . | grep -P _REGEX (-22.6225547791)

Example 310 (1)
Original English: find file.txt in the file system, search confined to a specific path
English: find _REGEX in file system search contained to specific path
GT Command 1: find / -path /usr/lib/important/*/file.txt
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -name _REGEX (-16.6531028748)

Example 311 (1)
Original English: find all the files with a specific permission in the current folder
English: find all file with specific permission in current folder
GT Command 1: find . — perm 755 -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -perm -20 (-4.66695261002)

Example 312 (1)
Original English: search for the word "redeem reward" in all the regular/normal files in the current folder
English: search for word _REGEX in all _REGEX file in current folder
GT Command 1: find . -type f -exec grep -i “redeem reward” {} \; -print
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX -exec grep -l _REGEX {} \; (-8.92019176483)

Example 313 (1)
Original English: Search directory /tmp/foo for files containing "/tmp/foo/bar" in their full names
English: search directory _REGEX for file containing _REGEX in full name
GT Command 1: find /tmp/foo -path /tmp/foo/bar -print
min_temp_dist = 2
min_dist = 3
Prediction 1: find _REGEX -name _REGEX -type f (-13.4757423401)

Example 314 (1)
Original English: Find all *stat files/directories under /usr
English: find all _REGEX _REGEX under _REGEX
GT Command 1: find /usr -name *stat
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -name _REGEX (-3.73396730423)

Example 315 (1)
Original English: Remove all Thumbs.db files from the current directory tree
English: remove all _REGEX file from current directory tree
GT Command 1: find . -name Thumbs.db -exec rm {} \;
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX | xargs rm (-4.68716812134)

Example 316 (1)
Original English: find all the html, javascript and text files in the current folder
English: find all html javascript and text file in current folder
GT Command 1: find . -type f -name "*.htm*" -o -name "*.js*" -o -name "*.txt"
min_temp_dist = 9
min_dist = 9
Prediction 1: find . -name _REGEX -print | xargs grep _REGEX (-15.5137557983)

Example 317 (1)
Original English: search for all the rpm files in the file system which reside in the same partition as that of the root
English: search for all rpm file in file system reside in same partition of root
GT Command 1: find / -xdev -name "*.rpm"
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -iname _REGEX (-12.0814380646)

Example 318 (1)
Original English: find all the pdf files in current folder and create a tar ball of all these files
English: find all pdf file in current folder and create tar ball of all file
GT Command 1: find . -iname "*.pdf" -exec tar --append --file=somefile.tar {} \;
min_temp_dist = 6
min_dist = 7
Prediction 1: find . -name _REGEX | xargs grep -l thing (-21.9232311249)

Example 319 (1)
Original English: Find all empty regular files in the current directory and below
English: find all empty regular file in current directory and below
GT Command 1: find . -type f -empty
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -type f -empty (-10.8996744156)

Example 320 (1)
Original English: Find all directories in entire file system which are larger than 50KB
English: find all directory in entire file system larger than _NUMKB
GT Command 1: find / -type d -size +50k
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -type f -size +_NUMk (-12.077545166)

Example 321 (1)
Original English: find all files ending with a specific word in current folder
English: find all file ending with specific word in current folder
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
min_temp_dist = 7
min_dist = 7
Prediction 1: find . -name _REGEX (-15.6710834503)

Example 322 (1)
Original English: Find all flies under current directory excluding *.png files and print the file paths (with match count) that match the case insensitive regex 'foo=' in their contents
English: find all file under current directory excluding _REGEX file and print file path ( with match count ) match case insensitive regex _REGEX in content
GT Command 1: find . -not -name '*.png' -o -type f -print | xargs grep -icl "foo="
min_temp_dist = 11
min_dist = 11
Prediction 1: find . -type f -not -path _REGEX (-23.275510788)

Example 323 (1)
Original English: Search the current directory tree for *cache, *xml, and *html files
English: search current directory tree for _REGEX _REGEX and _REGEX file
GT Command 1: find . -type f \( -name "*cache" -o -name "*xml" -o -name "*html" \)
min_temp_dist = 9
min_dist = 9
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-16.6792011261)

Example 324 (1)
Original English: Find all the files called FindCommandExamples.txt of owner root
English: find all file called _REGEX of owner root
GT Command 1: find / -user root -name FindCommandExamples.txt
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -user root -iname _REGEX (-5.0171751976)

Example 325 (1)
Original English: find all the files in the /usr folder which have modification date less than or equal to the file "/FirstFile"
English: find all file in _REGEX folder modification date le than or equal to file _REGEX
GT Command 1: find /usr ! -newer /FirstFile -print
min_temp_dist = 4
min_dist = 5
Prediction 1: find _REGEX -type f -size +_NUMk (-17.3634777069)

Example 326 (1)
Original English: Find all files under path_to_dir
English: find all file under _REGEX
GT Command 1: find path_to_dir -type f
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -type f (-4.85091876984)

Example 327 (1)
Original English: Find the top 5 biggest files
English: find top _NUM biggest file
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
min_temp_dist = 9
min_dist = 10
Prediction 1: find . -type f -print | xargs grep _REGEX (-6.98735713959)

Example 328 (1)
Original English: search for all the directories ending with ".mp3" in the file system and move them to the folder /mnt/mp3
English: search for all directory ending with _REGEX in file system and move to folder _REGEX
GT Command 1: find / -iname "*.mp3" -type d -exec /bin/mv {} /mnt/mp3 \;
min_temp_dist = 6
min_dist = 9
Prediction 1: find _REGEX -name _REGEX -type f -print0 | xargs -0 -I {} mv {} _PARAMETER (-13.7213010788)

Example 329 (1)
Original English: find all the jpg files in current folder and sort them
English: find all jpg file in current folder and sort
GT Command 1: find . -type f|grep -i "\.jpg$" |sort
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -type f -name _REGEX | xargs grep -l thing (-12.6050319672)

Example 330 (1)
Original English: display all files in the folder bar only in the path /foo/bar/myfile (no output is generated)
English: display all file in folder bar only in path _REGEX ( no output generated )
GT Command 1: find bar -path /foo/bar/myfile -print
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -path _REGEX (-14.6537981033)

Example 331 (1)
Original English: Find all directories under and below /home/admin/public_html/, and change their permissions to 755
English: find all directory under and below _REGEX and change permission to _NUM
GT Command 1: find /home/admin/public_html/ -type d -exec chmod 755 {} \;
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -type d -exec chmod 755 {} \; (-8.23460006714)

Example 332 (1)
Original English: find all the files starting with a specific name in a folder
English: find all file starting with specific name in folder
GT Command 1: find /etc -name "host*" — print
min_temp_dist = 0
min_dist = 1
Prediction 1: find _PARAMETER -name _REGEX (-10.084277153)

Example 333 (1)
Original English: Search the current directory tree for TXT files skipping hidden ones
English: search current directory tree for TXT file skipping hidden _NUM
GT Command 1: find . -type f \( -iname "*.txt" ! -iname ".*" \)
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -name _REGEX -type f -print (-20.3794078827)

Example 334 (1)
Original English: copy all the files with the extension ".type" from one folder to a target directory
English: copy all file with extension _REGEX from _NUM folder to target directory
GT Command 1: find "$sourcedir" -type f -name "*.type" | xargs cp -t targetdir
min_temp_dist = 4
min_dist = 6
Prediction 1: find _REGEX -type f -name _REGEX -exec cp {} _REGEX \; (-12.2887058258)

Example 335 (1)
Original English: Find all files that belong to group root
English: find all file belong to group root
GT Command 1: find / -group root
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -group admins (-5.32756900787)

Example 336 (1)
Original English: find all the findme.txt files in the file system
English: find all _REGEX file in file system
GT Command 1: find / -name findme.txt -type f -print
min_temp_dist = 2
min_dist = 3
Prediction 1: find / -name _REGEX (-6.12938213348)

Example 337 (1)
Original English: Find all directories starting from / that have permissions 777
English: find all directory starting from _REGEX permission _NUM
GT Command 1: find / -type d -perm 0777
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -type d -perm 777 (-6.08858919144)

Example 338 (1)
Original English: search for directories in the folder "test" which end have 5 digits as their name
English: search for directory in folder _REGEX end _NUM digit name
GT Command 1: find ./test -type d -name '[0-9][0-9][0-9][0-9][0-9]'
min_temp_dist = 0
min_dist = 1
Prediction 1: find _REGEX -type d -name _REGEX (-7.49072980881)

Example 339 (1)
Original English: Search for file names with "bad" characters in the current directory and delete the files.
English: search for file name with _REGEX character in current directory and delete file
GT Command 1: find . -name '*[+{;"\\=?~()<>&*|$ ]*' -maxdepth 0 -exec rm -f '{}' \;
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -name _REGEX -exec rm {} \; (-10.3726825714)

Example 340 (1)
Original English: look for a file or folder called game in all folders under the current folder
English: look for file or folder called game in all folder under current folder
GT Command 1: find . -name game
min_temp_dist = 5
min_dist = 6
Prediction 1: find . -type f -print0 | xargs -0 grep -l _REGEX (-10.1754789352)

Example 341 (1)
Original English: Print the list of directories that are present in the /mnt/raid directory tree
English: print list of directory present in _REGEX directory tree
GT Command 1: find /mnt/raid -type d
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -type d -name _REGEX (-10.1878728867)

Example 342 (1)
Original English: find files having specific name in a folder
English: find file having specific name in folder
GT Command 1: find ~/Books -name Waldo
min_temp_dist = 0
min_dist = 1
Prediction 1: find _PARAMETER -name _REGEX (-8.05344390869)

Example 343 (1)
Original English: Find files/directories named blah under current directory
English: find _REGEX named blah under current directory
GT Command 1: find ./ -name blah
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -name _REGEX (-5.36716651917)

Example 344 (1)
Original English: Search the current directory and all of its sub-directory for any PDF files being careful to prevent the shell from expanding anything in '*.pdf'  before it'ss passed to find.
English: search current directory and all of sub-directory for any PDF file careful to prevent shell from expanding anything in _REGEX before _REGEX passed to find
GT Command 1: find . -name '*.pdf' -print
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -name _REGEX -print | xargs grep _REGEX (-23.6437129974)

Example 345 (2)
Original English: Find files under current directory that contains the string '/bin/ksh'
English: find file under current directory contains string _REGEX
GT Command 1: find . -type f -exec grep -iH '/bin/ksh' {} \;
GT Command 2: find . -type f -print | xargs    grep -il 'bin/ksh'
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -name _REGEX -type f -print (-5.25917339325)

Example 346 (1)
Original English: Find all files that belong to a particular group.
English: find all file belong to particular group
GT Command 1: find /var/www -group developer
min_temp_dist = 0
min_dist = 2
Prediction 1: find . -group compta (-5.06010246277)

Example 347 (1)
Original English: Find the top 5 big files
English: find top _NUM big file
GT Command 1: find . -type f -exec ls -s {} \; | sort -n -r | head -5
min_temp_dist = 9
min_dist = 10
Prediction 1: find . -type f -print | xargs grep _REGEX (-6.98735618591)

Example 348 (1)
Original English: Find all the files which are changed in last 1 hour
English: find all file changed in last _NUM hour
GT Command 1: find / -cmin -60
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -amin -_NUM (-2.57919788361)

Example 349 (1)
Original English: Delete all .svn directories under current directory
English: delete all _REGEX directory under current directory
GT Command 1: find . -type d -name .svn -print0|xargs -0 rm -rf
min_temp_dist = 9
min_dist = 10
Prediction 1: find . -depth -name _REGEX -delete (-13.4270324707)

Example 350 (1)
Original English: search for a specific word in all the hidden files in the entire file system and display the file name along with the matched line
English: search for specific word in all hidden file in entire file system and display file name along with matched line
GT Command 1: find / -name ‘*.*’ -exec grep -il “foobar” {} \;
min_temp_dist = 8
min_dist = 9
Prediction 1: find / -name _REGEX -type f -print0 | xargs -0 grep -l -i word (-20.5437202454)

Example 351 (1)
Original English: Find all files on the system whose names are 'drush'
English: find all file on system whose name _REGEX
GT Command 1: find / -name drush
min_temp_dist = 0
min_dist = 1
Prediction 1: find / -name _REGEX (-5.93063688278)

Example 352 (1)
Original English: find all the configuration files in a folder and do not search in the sub folder and display the last ten files.
English: find all configuration file in folder and not search in sub folder and display last _NUM file
GT Command 1: find /etc -maxdepth 1 -name "*.conf" | tail
min_temp_dist = 2
min_dist = 2
Prediction 1: find _REGEX -maxdepth _NUM -name _REGEX (-14.8776750565)

Example 353 (1)
Original English: Show the last 10 .conf files found by `find' in the /etc directory and 1 level below
English: show last _NUM _REGEX file found by _REGEX in _REGEX directory and _NUM level below
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
min_temp_dist = 5
min_dist = 6
Prediction 1: find _REGEX -type f -name _REGEX | xargs grep -l thing (-17.2388286591)

Example 354 (1)
Original English: Move all Emacs backup files from the current directory tree to ~/backups/
English: move all emacs backup file from current directory tree to _PARAMETER
GT Command 1: find . -name '*~' -print 0 | xargs -0 -I % cp % ~/backups
min_temp_dist = 8
min_dist = 10
Prediction 1: find . -name _REGEX -exec mv {} _PARAMETER \; (-10.8642416)

Example 355 (1)
Original English: search for all the mp3 files in the folder /home/you which have been accessed 24 ago
English: search for all mp_NUM file in folder _REGEX accessed _NUM ago
GT Command 1: find /home/you -iname “*.mp3” -atime 01 -type -f
min_temp_dist = 3
min_dist = 5
Prediction 1: find _REGEX -type f -atime +_NUM -print (-10.6602430344)

Example 356 (2)
Original English: find all files in the current folder which are of size 0 bytes.
English: find all file in current folder of size _NUM byte
GT Command 1: find . -type f -empty
GT Command 2: find . -type f -size 0b
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -size _NUM (-7.15481710434)

Example 357 (1)
Original English: list all zero-length files under the current directory
English: list all zero-length file under current directory
GT Command 1: find . -empty -exec ls {} \;
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -name _REGEX (-7.23227739334)

Example 358 (1)
Original English: Find PHP files with abstract classes
English: find PHP file with abstract class
GT Command 1: find . -type f -name "*.php" -exec grep --with-filename -c "^abstract class " {} \; | grep ":[^0]"
min_temp_dist = 11
min_dist = 11
Prediction 1: find . -name _REGEX (-6.50816202164)

Example 359 (1)
Original English: Find text files modified less than 5 days ago
English: find text file modified le than _NUM day ago
GT Command 1: find . –name "*.txt" –mtime 5
min_temp_dist = 4
min_dist = 5
Prediction 1: find . -mtime -_NUM -name _REGEX (-4.11406087875)

Example 360 (1)
Original English: Find string "STRING" in files residing in the current directory tree, case insensitive
English: find string _REGEX in file residing in current directory tree case insensitive
GT Command 1: find . -type f -print | xargs grep -ni "STRING"
min_temp_dist = 7
min_dist = 8
Prediction 1: find . -iname _REGEX (-12.5182189941)

Example 361 (1)
Original English: Find every vim undo file under current directory
English: find every vim undo file under current directory
GT Command 1: find -type f -iname '*.un~'
min_temp_dist = 2
min_dist = 3
Prediction 1: find . -name _REGEX -print (-11.3060245514)

Example 362 (3)
Original English: Find all TXT files in the current directory and copy them to directory "$HOME/newdir"
English: find all TXT file in current directory and copy to directory _PARAMETER
GT Command 1: find "$HOME" -name '*.txt' -type f -print0 | xargs -0 cp -ut "$HOME/newdir"
GT Command 2: find "$HOME" -name '*.txt' -type f -print0 | sort -zu | xargs -0 cp -t "$HOME/newdir"
GT Command 3: find "$HOME" -name '*.txt' -type f -not -path "$HOME/newdir/*" -print0 | xargs -0 cp -t "$HOME/newdir"
min_temp_dist = 7
min_dist = 8
Prediction 1: find . -name _REGEX | xargs -I {} mv {} _PARAMETER (-14.867389679)

Example 363 (1)
Original English: find all the text files in the folder /home/calvin and do not search beyond 2 levels
English: find all text file in folder _REGEX and not search beyond _NUM level
GT Command 1: find /home/calvin/ -maxdepth 2  -name “*.txt”
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -maxdepth _NUM -name _REGEX (-11.1516475677)

Example 364 (1)
Original English: Delete all HTML files under tree ~/mydir
English: delete all HTML file under tree _PARAMETER
GT Command 1: find ~/mydir -iname '*.htm' -exec rm {} \;
min_temp_dist = 2
min_dist = 2
Prediction 1: find _PARAMETER -type f -name _REGEX -exec rm {} \; (-6.49672412872)

Example 365 (1)
Original English: Delete all the .c files present in the current directory and below
English: delete all _REGEX file present in current directory and below
GT Command 1: find . -name "*.c" | xargs rm -f
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -name _REGEX | xargs rm (-12.0025863647)

Example 366 (1)
Original English: Find all the files that are exactly 30 days old.
English: find all file exactly _NUM day old
GT Command 1: find . -mtime 30 -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -type f -mtime _NUM (-6.67271232605)

Example 367 (1)
Original English: Search the current directory for files whose names start with my
English: search current directory for file whose name start with
GT Command 1: find . -name 'my*'
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-2.93118143082)

Example 368 (1)
Original English: Find all the files in entire file system with the extensions txt or doc, as well as any file larger than 5MB in size
English: find all file in entire file system with extension txt or doc well any file larger than _NUMMB in size
GT Command 1: find / \( -name '*.txt' -o -name '*.doc' -o -size +5M \)
min_temp_dist = 4
min_dist = 5
Prediction 1: find / -type f -size +_NUMM (-17.0729541779)

Example 369 (1)
Original English: search for all the files in the current folder which start with "my"
English: search for all file in current folder start with _REGEX
GT Command 1: find . -name 'my*'
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-6.4817276001)

Example 370 (1)
Original English: copy all java files from current folder to another folder
English: copy all java file from current folder to another folder
GT Command 1: find . -name "*.java" -print0 | xargs -0 -J % cp % destinationFolder
min_temp_dist = 6
min_dist = 8
Prediction 1: find . -name _REGEX -exec cp {} _REGEX \; (-11.9112520218)

Example 371 (2)
Original English: display all the .sh scripts and perl files in the current folder
English: display all _REGEX script and perl file in current folder
GT Command 1: find . -type f \( -iname "*.sh" -or -iname "*.pl" \)
GT Command 2: find . -type f \( -name "*.[sS][hH]" -o -name "*.[pP][lL]" \)
min_temp_dist = 8
min_dist = 9
Prediction 1: find . -name _REGEX | xargs grep -l thing (-15.8574724197)

Example 372 (1)
Original English: Find files with 002 permission under /tmp and print them with the string 'Found world write permissions:' printed as the first line of output or print 'No world writable found' if no such files were found
English: find file with _NUM permission under _REGEX and print with string _REGEX printed first line of output or print _REGEX if no such file found
GT Command 1: find /tmp -type f -perm -002 | awk -- '1{print "Found world write permissions:";print};END{if(NR==0)print "No world writable found."}'
min_temp_dist = 5
min_dist = 7
Prediction 1: find . -type f -print0 | xargs -0 chmod 644 (-20.7306957245)

Example 373 (1)
Original English: Find image files and move them to the pictures directory
English: find image file and move to picture directory
GT Command 1: find ~/Desktop -name “*.jpg” -o -name “*.gif” -o -name “*.png” -print0 | xargs -0 mv –target-directory ~/Pictures
min_temp_dist = 9
min_dist = 11
Prediction 1: find . -name _REGEX -exec mv {} _PARAMETER \; (-7.69517660141)

Example 374 (1)
Original English: display all the files in the current folder which start with either "fileA_" or "fileB_"
English: display all file in current folder start with either _REGEX or _REGEX
GT Command 1: find . -name 'fileA_*' -o -name 'fileB_*'
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -regex _REGEX (-11.0316667557)

Example 375 (1)
Original English: Find all 400 permission files under /data directory and change their permission to 755
English: find all _NUM permission file under _REGEX directory and change permission to _NUM
GT Command 1: find /data -type f -perm 400 -print | xargs chmod 755
min_temp_dist = 6
min_dist = 7
Prediction 1: find _REGEX -type f -exec chmod 400 {} \; (-7.5635137558)

Example 376 (1)
Original English: find all the normal files in the home directory which have been accesed in the last 30 days with the size greater than or equal to 100k.
English: find all normal file in home directory accessed in last _NUM day with size greater than or equal to _NUMk
GT Command 1: find $HOME -type f -atime +30 -size 100k
min_temp_dist = 2
min_dist = 2
Prediction 1: find ${HOME} -type f -atime +_NUM -print (-17.4272499084)

Example 377 (1)
Original English: find the count of text files that are present in the current working directory.
English: find count of text file present in current working directory
GT Command 1: find . -maxdepth 1 -name \*.txt -print0 | grep -cz .
min_temp_dist = 6
min_dist = 7
Prediction 1: find . -name _REGEX | wc -l (-11.328546524)

Example 378 (1)
Original English: find foo, Foo, FOo, FOO, etc.
English: find foo foo FOo FOO etc
GT Command 1: find . -iname foo
min_temp_dist = 0
min_dist = 1
Prediction 1: find . -iname _REGEX (-8.21217632294)

Example 379 (1)
Original English: Search the entire file hierarchy for files named zsh that exist on ext3 file systems and print out detailed information about the file.
English: search entire file hierarchy for file named zsh exist on ext_NUM file system and print out detailed information about file
GT Command 1: find / -fstype ext3 -name zsh -ls
min_temp_dist = 2
min_dist = 3
Prediction 1: find / -name _REGEX (-18.7693443298)

Example 380 (1)
Original English: Search for files whose names match "*test*", a directory bing evaluated before its contents
English: search for file whose name match _REGEX directory bing evaluated before content
GT Command 1: find -name "*test*" -depth
min_temp_dist = 5
min_dist = 5
Prediction 1: find . -name _REGEX | grep -P _REGEX (-17.4341564178)

Example 381 (2)
Original English: List all regular files residing in the current directory tree and containing string "/bin/ksh"
English: list all regular file residing in current directory tree and containing string _REGEX
GT Command 1: find . -type f -print | xargs grep -li 'bin/ksh'
GT Command 2: find . -type f -exec grep -li '/bin/ksh' {} \;
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -type f -exec grep -l _REGEX {} \; (-9.42034244537)

Example 382 (2)
Original English: Find all the files in file system which are changed in last 1 hour
English: find all file in file system changed in last _NUM hour
GT Command 1: find / -cmin -60
GT Command 2: find / -ctime -1
min_temp_dist = 1
min_dist = 1
Prediction 1: find / -amin -_NUM (-5.0584397316)

Example 383 (1)
Original English: display all the files in the current folder that are at least one week old (7 days) but less then 30 days old
English: display all file in current folder at least _NUM week old ( _NUM day ) but le _NUM day old
GT Command 1: find . -mtime +30 -a -mtime -7 -print0
min_temp_dist = 3
min_dist = 3
Prediction 1: find . -mtime +_NUM (-21.1076030731)

Example 384 (2)
Original English: Find *.conf files/directories only upto 2 levels down under /etc directory and show a few lines of output from the end
English: find _REGEX _REGEX only upto _NUM level down under _REGEX directory and show few line of output from end
GT Command 1: find /etc -maxdepth 2 -name "*.conf" | tail
GT Command 2: find /etc -maxdepth 1 -name "*.conf" | tail
min_temp_dist = 4
min_dist = 4
Prediction 1: find _REGEX -maxdepth _NUM -name _REGEX | xargs grep -l thing (-17.9562721252)

Example 385 (1)
Original English: display all the files in current folder which have been changed in the last 24 hours
English: display all file in current folder changed in last _NUM hour
GT Command 1: find . -ctime -1 -print
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -cmin -_NUM (-7.39640188217)

Example 386 (1)
Original English: Find all the files in the current directory with “linkin park” in their names
English: find all file in current directory with _REGEX in name
GT Command 1: find . -maxdepth 1 -iname "*linkin park*"
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX (-12.0278167725)

Example 387 (1)
Original English: Find the files which have the name "java" in it and then display only the files which have "class" word in them?
English: find file name _REGEX in and display only file _REGEX word in _REGEX
GT Command 1: find -name "*java*" -exec grep -H class {} \;
min_temp_dist = 8
min_dist = 10
Prediction 1: find _REGEX -name _REGEX -type f -print0 | xargs -0 grep -l _REGEX (-10.5162782669)

Example 388 (1)
Original English: search for the file "name_to_find" in the home folder
English: search for file _REGEX in home folder
GT Command 1: find ~ -name "name_to_find"
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-7.43026590347)

Example 389 (1)
Original English: Find all .txt files in the user's home directory and below.
English: find all _REGEX file in _REGEX home directory and below
GT Command 1: find ~/ -name '*.txt'
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-13.1163053513)

Example 390 (1)
Original English: find all the files ending with .mp3 or .jpg
English: find all file ending with _REGEX or _REGEX
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX (-6.84227275848)

Example 391 (1)
Original English: Move files older than 1 day to directory TMP
English: move file older than _NUM day to directory TMP
GT Command 1: find . -atime +1 -type f -exec mv {} TMP \;
min_temp_dist = 4
min_dist = 6
Prediction 1: find . -type f -mtime +_NUM -exec rm {} \; (-8.40436077118)

Example 392 (1)
Original English: search for mp3 files in the folder /mp3collection which are smaller than 5MB
English: search for mp_NUM file in folder _REGEX smaller than _NUMMB
GT Command 1: find /mp3collection -name '*.mp3' -size -5000k
min_temp_dist = 5
min_dist = 7
Prediction 1: find _REGEX -type f -size +_NUMk -exec ls -l {} \; (-9.20484161377)

Example 393 (1)
Original English: Find all .c and .h files in the current directory tree and search them for "expr"
English: find all _REGEX and _REGEX file in current directory tree and search for _REGEX
GT Command 1: find -name '*.[ch]' | xargs grep -E 'expr'
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -name _REGEX | xargs grep _REGEX (-12.7317180634)

Example 394 (1)
Original English: Remove regular files changed more than 15 days ago from the /tmp directory tree
English: remove regular file changed more than _NUM day ago from _REGEX directory tree
GT Command 1: find /tmp/ -ctime +15 -type f -exec rm {} \;
min_temp_dist = 2
min_dist = 4
Prediction 1: find _REGEX -type f -mtime +_NUM -exec rm {} \; (-7.72313070297)

Example 395 (2)
Original English: find for a word in all the regular files in the current directory
English: find for word in all regular file in current directory
GT Command 1: find . -type f -print | xargs grep -li 'bin/ksh'
GT Command 2: find . -type f -exec grep -li '/bin/ksh' {} \;
min_temp_dist = 1
min_dist = 1
Prediction 1: find . -type f -exec grep -l _REGEX {} \; (-8.3339881897)

Example 396 (1)
Original English: Only find files ending with .jpg
English: only find file ending with _REGEX
GT Command 1: find . -name '*.jpg' -print
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-8.29949855804)

Example 397 (1)
Original English: Find all *.c files under and below the current directory that contain "hogehoge"
English: find all _REGEX file under and below current directory contain _REGEX
GT Command 1: find . -name \*.c | xargs grep hogehoge
min_temp_dist = 1
min_dist = 3
Prediction 1: find . -name _REGEX | xargs grep -l thing (-9.4380607605)

Example 398 (1)
Original English: find all text files in current folder; which have been modified exactly 5 days ago
English: find all text file in current folder modified exactly _NUM day ago
GT Command 1: find . –name "*.txt" –mtime 5
min_temp_dist = 4
min_dist = 5
Prediction 1: find . -mtime _NUM -name _REGEX (-12.6852245331)

Example 399 (1)
Original English: find all the files that have been changed today
English: find all file changed today
GT Command 1: find . -ctime 0 -type f
min_temp_dist = 2
min_dist = 5
Prediction 1: find _REGEX -type f -mtime -_NUM (-6.13416910172)

Example 400 (1)
Original English: display all regular files in the folder image-folder
English: display all regular file in folder image-folder
GT Command 1: find image-folder/ -type f
min_temp_dist = 0
min_dist = 1
Prediction 1: find _PARAMETER -type f (-6.67816972733)

Example 401 (1)
Original English: Find files ending with .mp3 and .jpg
English: find file ending with _REGEX and _REGEX
GT Command 1: find . \( -name '*.mp3' -o -name '*.jpg' \) -print
min_temp_dist = 2
min_dist = 2
Prediction 1: find . -name _REGEX (-10.4026203156)

Example 402 (1)
Original English: search for a file in current folder excluding those that are present in a specific path
English: search for file in current folder excluding present in specific path
GT Command 1: find /path/to/folder -name fileName.txt -not -path "*/ignored_directory/*"
min_temp_dist = 3
min_dist = 4
Prediction 1: find . -path _REGEX -prune (-18.0670948029)

Example 403 (1)
Original English: Find mysong.ogg anywhere under the home directory
English: find _REGEX anywhere under home directory
GT Command 1: find $HOME -name 'mysong.ogg'
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-6.69199037552)

Example 404 (2)
Original English: find all files in a folder that have a specific word in their name
English: find all file in folder specific word in name
GT Command 1: find /etc -iregex '.*xt.*'
GT Command 2: find /usr/local/games -name "*xpilot*"
min_temp_dist = 0
min_dist = 0
Prediction 1: find _REGEX -name _REGEX (-5.01811599731)

Example 405 (1)
Original English: Search the home directory tree for all .txt files
English: search home directory tree for all _REGEX file
GT Command 1: find ~/ -name '*.txt'
min_temp_dist = 0
min_dist = 0
Prediction 1: find ${HOME} -name _REGEX (-9.34361362457)

Example 406 (1)
Original English: Find all *.txt and *.json files
English: find all _REGEX and _REGEX file
GT Command 1: find . -type f \( -name "*.txt" -o -name "*.json" \)
min_temp_dist = 5
min_dist = 5
Prediction 1: find . -name _REGEX (-10.2632102966)

Example 407 (1)
Original English: copy the file header.shtml to those dirs
English: copy file _REGEX to dirs
GT Command 1: find dir1 dir2 dir3 dir4 -type d -exec cp header.shtml {} \;
min_temp_dist = 11
min_dist = 14
Prediction 1: find . -name _REGEX | xargs tar -r -v -f myfile.tar (-6.8006734848)

Example 408 (1)
Original English: Count the number of lines in all files in the xargstest/ directory tree that match pattern 'file??'
English: count number of line in all file in _REGEX directory tree match pattern _REGEX
GT Command 1: find xargstest/ -name 'file??' | sort | xargs wc -l
min_temp_dist = 1
min_dist = 2
Prediction 1: find _REGEX -name _REGEX | xargs wc -l (-11.6948738098)

Example 409 (1)
Original English: List all *.bak files in the current directory tree
English: list all _REGEX file in current directory tree
GT Command 1: find  . -name '*.bak' -ls
min_temp_dist = 0
min_dist = 0
Prediction 1: find . -name _REGEX (-9.69949817657)

Example 410 (1)
Original English: To match only hidden dot directories
English: to match only hidden dot directory
GT Command 1: find /nas01/backups/home/user/ -type d -name ".*" -print0 -exec ls -lrt {} \;
min_temp_dist = 7
min_dist = 9
Prediction 1: find . -maxdepth _NUM -name _REGEX (-5.89082574844)

Example 411 (1)
Original English: remove all the files in the current folder which have not been modified in the last 10 days
English: remove all file in current folder not modified in last _NUM day
GT Command 1: find . -mtime +10 | xargs rm
min_temp_dist = 4
min_dist = 4
Prediction 1: find . -mtime +_NUM -exec rm {} \; (-8.39996242523)

412 examples evaluated
Percentage of top 1 Match (template-only) = 0.30
Percentage of top 1 Match (whole-string) = 0.14
Average top 1 Tree Edit Distance (template-only) = 3.02
Average top 1 Tree Edit Distance (whole-string) = 3.80

